; Configuration of the basic globals that are needed for Alphalinc
; and for the development environment. This file should *NOT* be altered!
; The tokens are replaced with values from local.properties automatically by the system.
;
;History:
;2008-Jul-02    Soeiro  Added environment variables
;2008-Mar-23    Soeiro  Created
;
timer: 180
logfile: @cacheLog@
on error: $ERROR
@bypassAuthentication@

multiwait for: =Username:=Usuário:
send: @cacheUsername@<CR>

multiwait for: =Password:=Senha:
send: @cachePassword@<CR>

; Start of the script
$BEGIN:

; Set all Alphalinc globals
send: <CR>
wait for: >
timer: 30
on error: $ERROR
send: zn "@namespaceCapitalized@"<CR>

; Set globals for the source control and software development environment
wait for: @namespaceCapitalized@>
send: set $piece(^WWW012(0,0,1),"~",44)="/@namespace@/"<CR>

wait for: @namespaceCapitalized@>
send: set $piece(^WWW012(0,0,1),"~",45)="@resourcesDir@"<CR>

wait for: @namespaceCapitalized@>
send: set $piece(^WWW012(0,0,1),"~",46)="/@namespace@/"<CR>

wait for: @namespaceCapitalized@>
send: if ($length("@resourcesURLPrefix@") '= 0) set $piece(^WWW012(0,0,1),"~",47)="/@resourcesURLPrefix@/"<CR>

wait for: @namespaceCapitalized@>
send: if ($length("@resourcesURLPrefix@") = 0) set $piece(^WWW012(0,0,1),"~",47)="/@namespace@/"<CR>

wait for: @namespaceCapitalized@>
send: set $piece(^WWW012(0,0,1),"~",48)="/@namespace@/"<CR>

wait for: @namespaceCapitalized@>
send: set $piece(^WWW012(0,0,1),"~",49)="@resourcesDir@/"<CR>

wait for: @namespaceCapitalized@>
send: set $piece(^WWW012(0,0,1),"~",98)="/@namespace@/"<CR>

wait for: @namespaceCapitalized@>
send: set $piece(^WWW012(0,0,1),"~",150)="/@namespace@/"<CR>

wait for: @namespaceCapitalized@>
send: if ($length("@reportsRemoteDir@") '= 0) set $piece(^VARJasper(0,0,1),"~",1)="@reportsRemoteDir@/"<CR>

wait for: @namespaceCapitalized@>
send: if ($length("@reportsRemoteDir@") = 0) set $piece(^VARJasper(0,0,1),"~",1)="@reportsDir@/"<CR>

wait for: @namespaceCapitalized@>
send: if ($length("@reportsRemoteWebapp@") '= 0) set $piece(^VARJasper(0,0,1),"~",2)="/@reportsRemoteWebapp@/"<CR>

wait for: @namespaceCapitalized@>
send: if ($length("@reportsRemoteWebapp@") = 0) set $piece(^VARJasper(0,0,1),"~",2)="/@namespace@/"<CR>

wait for: @namespaceCapitalized@>
send: set $piece(^VARJasper(0,0,1),"~",3)="@tomcatInternalAddress@"<CR>

wait for: @namespaceCapitalized@>
send: set $piece(^VARJasper(0,0,1),"~",4)="@tomcatInternalPort@"<CR>

wait for: @namespaceCapitalized@>
send: set $piece(^VARJasper(0,0,1),"~",5)="@tomcatExternalAddress@"<CR>

wait for: @namespaceCapitalized@>
send: set $piece(^VARJasper(0,0,1),"~",6)="@tomcatExternalPort@"<CR>

wait for: @namespaceCapitalized@>
send: set $piece(^VARJasper(0,0,1),"~",7)="@reportsResourceUrlPrefix@"<CR>

wait for: @namespaceCapitalized@>
send: if ('##class(%Dictionary.ClassDefinition).%ExistsId("VAR.infra.util.Lists")) do $System.OBJ.Load("@hookClassDir@VAR.infra.util.Lists-31535.cls.xml", "cdfvuk")<CR>

wait for: @namespaceCapitalized@>
send: if ('##class(%Dictionary.ClassDefinition).%ExistsId("VAR.infra.util.Errors")) do $System.OBJ.Load("@hookClassDir@VAR.infra.util.Errors-51567.cls.xml", "cdfvuk")<CR>

wait for: @namespaceCapitalized@>
send: if ('##class(%Dictionary.ClassDefinition).%ExistsId("VAR.infra.util.Strings")) do $System.OBJ.Load("@hookClassDir@VAR.infra.util.Strings-8305.cls.xml", "cdfvuk")<CR>

wait for: @namespaceCapitalized@>
send: if ('##class(%Dictionary.ClassDefinition).%ExistsId("VAR.infra.util.DirectoryFile")) do $System.OBJ.Load("@hookClassDir@VAR.infra.util.DirectoryFile-52521.cls.xml", "cdfvuk")<CR>

wait for: @namespaceCapitalized@>
send: set ^SourceControl("projectDir")=##class(VAR.infra.util.DirectoryFile).FixDirectory("@projectDir@")<CR>

wait for: @namespaceCapitalized@>
send: set ^SourceControl("cspDir")=##class(VAR.infra.util.DirectoryFile).FixDirectory("@cspDir@")<CR>

wait for: @namespaceCapitalized@>
send: set ^SourceControl("onBeforeLoadActive")="@onBeforeLoadActive@"<CR>

wait for: @namespaceCapitalized@>
send: set ^SourceControl("deleteTmpXMLFilesActive")="@deleteTmpXMLFilesActive@"<CR>

wait for: @namespaceCapitalized@>
send: set ^SourceControl("buildOptionVAR")="@buildOptionVAR@"<CR>

wait for: @namespaceCapitalized@>
send: set ^SourceControl("buildOptionASDE")="@buildOptionASDE@"<CR>

wait for: @namespaceCapitalized@>
send: set ^SourceControl("runSourceLogging")="@runSourceLogging@"<CR>

; Execute local mapping, if necessary.
wait for: @namespaceCapitalized@>
send: if (($length("@cacheRemoteMappingUser@")>0) && ($length("@cacheRemoteMappingPassword@")>0) && ($length("@cacheRemoteMappingDir1@")>0)) write $ZF(-1,"net use @cacheRemoteMappingUnit1@ \\@cacheRemoteMappingDir1@ @cacheRemoteMappingPassword@ /user:@cacheRemoteMappingUser@ /persistent:no")<CR>

wait for: @namespaceCapitalized@>
send: if (($length("@cacheRemoteMappingUser@")>0) && ($length("@cacheRemoteMappingPassword@")>0) && ($length("@cacheRemoteMappingDir2@")>0)) write $ZF(-1,"net use @cacheRemoteMappingUnit2@ \\@cacheRemoteMappingDir2@ @cacheRemoteMappingPassword@ /user:@cacheRemoteMappingUser@ /persistent:no")<CR>

; Write the ok file (without using Source control because it might not be loaded yet)
wait for: @namespaceCapitalized@>
send: set file=##class(%File).%New(##class(VAR.infra.util.DirectoryFile).ConcatPath(^SourceControl("projectDir"), "build\cache-config-script.ok"))<CR>

wait for: @namespaceCapitalized@>
send: w file.Open("WSN")<CR>

wait for: @namespaceCapitalized@>
send: w file.WriteLine("Finished ok at: "_$zdatetime($horolog))<CR>

wait for: @namespaceCapitalized@>
send: do file.Close()<CR>

wait for: @namespaceCapitalized@>
send: set file=""<CR>

$END:
wait for: @namespaceCapitalized@>
send: write "Configuration finished."<CR>

wait for: @namespaceCapitalized@>
send: write $ZDATETIME($ZTIMESTAMP,3,1,6)<CR>

wait for: @namespaceCapitalized@>
closelog
terminate

$ERROR:
send: write "An error occured during configuration. Please check the log file.",!<CR>
goto: $END
