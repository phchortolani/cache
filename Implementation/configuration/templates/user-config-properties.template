# -------------------------------------------------------------------------------------------------
# The template for the configuration file is located at:
# "projectDir/implemantation/docs/templates/user-config-properties.template"
# The build system copies this configuration file overriding the
# file "projectDir/user-config.properties" whenever there is an update to
# the template (only when system maintainence happens. The developer is *not*
# expected to change the template files directly).
#
# Each developer MUST edit the file "projectDir/user-config.properties" to match his or
# her environment. If the template changes (this is supposed to happen almost never) the
# developer will have to edit "projectDir/user-config.properties" again. The old version
# is named "projectDir/user-config.1.bak"
#
# *IMPORTANT*: do *not* put spaces around the equal sign! You can use either forward slashes "/" or
# double backslahses "\\" for path separators. If a native windows path is "C:\Windows" it must
# be written either as "C:\\Windows" or as "C:/Windows" for this configuration file.
# All examples use backslashes "/".
#
# History:
# 2009-Apr-01   Soeiro  Added tokens so that updates can use old values
# 2008-Jul-03   Soeiro  Added Tomcat parameters
# 2008-Jul-02   Soeiro  Added terminalURL
# 2008-Jun-26   Soeiro  Documentation
# 2008-Jun-18   Soeiro  Created
# ------------------------------------------------------------------------------------------------

# Defines what is gonna be exported:
# 1 - export all file types
# 2 - export only non-VAR files 
# 3 - export only VAR files
buildOptionVAR=@buildOptionVAR@

# Defines what is gonna be exported:
# 1 - export ASDE files
# 0 - does not allow ASDE file export
buildOptionASDE=@buildOptionASDE@

# Common lib dir.
# Example:
#   commonLibDir=C:/Projetos/common/main
commonLibDir=@commonLibDir@

# The namespace must be *unique* for the machine/server. Each developer has his own namespaces. 
# A developer should have to at least two namespaces. Each namespace will be
# bound to a different branch in Bazaar (version Control System). Usually
# "Main" will be the user development branch and "Prod-v1.x" is the latest production revision.
# This string will be used for the cache namespace
# and also for the java servlet context (reports).
# It should be just one word without non-alpha characters.
# It is a good practice to name the project's directory with the namespace name.
# Beware that inside Cache namespaces are captilized but outside them they are not.
# You sould provide both a standard version and a capitalized version.
#
# Example
#   namespace=CustomerXMain
#   namespaceCapitalized=CUSTOMERXMAIN
namespace=@namespace@
namespaceCapitalized=@namespaceCapitalized@

# Each developer should specify a backup path to store the backup of his or her
# workspace. It could be an external USB drive, a network drive, another hard disk, another
# partition or even just another directory. Those backups will be generated by the command
# backup.cmd (or backup.sh) and will include all files in your project, except for temporary
# files  build\* and bazaar files. The idea is to be able to restore to your exact point of
# work fast after a disk crash or a file erasing mistake.
# Example (x is a network drive):
#   backupDir=x:/backups
backupDir=@backupDir@

# URL of Cache server (terminal services)
# This will be used to connect to the terminal port of cache server.
# Configuration files, code and scripts will be sent this way.
# This URL does not need to be unique (one Cache server can have many namespaces).
# If you want to be able to connect from the network, chose a fixed IP. If
# only you will be using the namespace, you can chose "localhost" or 127.0.0.1.
# Examples: 
#   terminalURL=127.0.0.1[23]
#   terminalURL=192.168.10.102[23]
terminalURL=@terminalURL@

# The instance name identifies uniquely the Caché or Ensemble installation.
# The default instance name is ENSEMBLE.
# Example
#   instanceName=CACHE2008
#   instanceName=ENSEMBLE
#   instanceName=CACHE2010
instanceName=@instanceName@

# The base directory of Cache's installation.
# Example (the executable "cache.exe" can be found in "E:\ap\CacheSys\Bin\cache.exe"):
#   cacheDir=C:/EnsembleSys
cacheDir=@cacheDir@

# Cache username
# The user name should be configured in Cache's control panel.
# Example: 
#   cacheUsername=SYS
cacheUsername=@cacheUsername@

# Cache password. If you create a username whitout a password in Caché Control Panel
# leave it empty here, since the Caché terminal won't ask for it. If you didn't create
# a user, or if you've created a user with a passowrd, put the passowrd here.
# The default user and password for new Caché isntallations are SYS/XXX. If you didn't
# change anything, you can use those.
# Examples:
#   cachePassword=XXX
#   cachePassword=
cachePassword=@cachePassword@

 Remote user of the mapping that will be internally used by Caché
# Examples:
#   cacheRemoteMappingUser=[COMPUTERNAME]\\[USERNAME]
#   cacheRemoteMappingUser=
cacheRemoteMappingUser=@cacheRemoteMappingUser@

# Remote password of the mapping that will be internally used by Caché
# Examples:
#   cacheRemoteMappingPassword=XXX
#   cacheRemoteMappingPassword=
cacheRemoteMappingPassword=@cacheRemoteMappingPassword@

# Remote mapped dir that will be used by Caché
# Examples:
#   cacheRemoteMappingDir=[COMPUTERNAME]\\[MAPPEDDIR]
#   cacheRemoteMappingDir=
cacheRemoteMappingDir1=@cacheRemoteMappingDir1@
cacheRemoteMappingDir2=@cacheRemoteMappingDir2@

# Remote mapping unit letter that will be internally used by Caché
# Examples:
#   cacheRemoteMappingUnit=P:
#   cacheRemoteMappingUnit=
cacheRemoteMappingUnit1=@cacheRemoteMappingUnit1@
cacheRemoteMappingUnit2=@cacheRemoteMappingUnit2@

# Cache's mapped CSP directory (where CSP files should be deployed)
# The ANT tool will copy the CSP files to this destination, where Caché server will read them.
# Example:
#   cspDir=C:/Alphalinc/CustomerXMain/Csp
cspDir=@cspDir@

# Where the file "cache.dat" file is located
# Example:
#   databaseDir=C:/Alphalinc/CustomerXMain/Database
databaseDir=@databaseDir@

# Where the remote webapp for reports is set for the Jasper Options
# If the deployed jasper webapp is the same, assign it with the namespace value
# Example:
#   reportsRemoteWebapp=CUSTOMERXWEBAPP
reportsRemoteWebapp=@reportsRemoteWebapp@

# Where all the jasper reports should be deployed.
# The ANT tool will copy all reports to this destination. The JasperReports servlet will
# read them from there.
# Example:
#   reportsDir=C:/Alphalinc/CustomerXMain/Reports
reportsDir=@reportsDir@

# Where the remote Directory for reports is set for the Jasper Options
# If the deployed jasper Dir is local, assign it with the same directory as the reportsDir
# Example:
#   reportsRemoteDir=D:/Alphalinc/Reports
reportsRemoteDir=@reportsRemoteDir@

# Defines the computer name and virtual folder that will be used for images
# Example:
#   reportsResourceUrlPrefix=localhost/[NAMESPACE]/
reportsResourceUrlPrefix=@reportsResourceUrlPrefix@

# Where all static html, javascript, css and images should be deployed.
# Ant will copy all files to this destination. IIS or Apache will read
# files from there.
# This path should be manually mapped on IIS or Apache
# Example:
#   resourcesDir=C:/Alphalinc/CustomerXMain/Resources
resourcesDir=@resourcesDir@

# The URL prefix in order to access the resources on the web. Only assign it if its
# different from the /[NAMESPACE]/ path.
# Example:
#   resourcesURLPrefix=csp/ALPHALINC/resources
#     => /csp/ALPHALINC/resources/
resourcesURLPrefix=@resourcesURLPrefix@

# Where the servlet will be deployed. After compilation, the Java Sevlet will be copied to
# this destination. Tomcat will be configured to read the servlet from this place.
# Example:
#   servletDir=c:/Alphalinc/CustomerXMain/Servlet
servletDir=@servletDir@

# Base directory of tomcat instalation
# Example (the file "bootstrap.jar" can be found at
# "C:\Program Files\Apache Software Foundation\Tomcat 6.0\bin\bootstrap.jar"), so
# the Tomcat directory is:
#   tomcatDir=C:/Program Files/Apache Software Foundation/Tomcat 6.0
tomcatDir=@tomcatDir@

# Tomcat's internal network address (address or IP to reach Tomcat server when accessing from
# the internal network. Usually Localhost when developing on the same machine.
# It is possible to use an internet name, a IP address or the keyword <auto>. If <auto> is used
# Tomcat's IP address will be same one as Caché's when running. This is helpful when a developer
# has a dynamic IP but wants to be able to give his machine URL for others to test something.
# Examples:
#  tomcatInternalAddress=localhost
#  tomcatInternalAddress=127.0.0.1
#  tomcatInternalAddress=192.168.10.102
#  tomcatInternalAddress=<auto>  -> not implemented yet
tomcatInternalAddress=@tomcatInternalAddress@

# The port to use when accessing Tomcat server from the internal network
# Example:
#   tomcatInternalPort=8080
tomcatInternalPort=@tomcatInternalPort@

# Tomcat's external network address (address or IP to reach Tomcat server when accessing from
# the external network). Usually somthing like disclink.com or 243.34.45.243.
# It is possible to use an internet name, a IP address or the keyword <auto>. If <auto> is used
# Tomcat's IP address will be same one as Caché's when running. This is helpful when a developer
# has a dynamic IP but wants to be able to give his machine URL for others to test something.
# It is safe to use localhost (127.0.0.1) if you are a developer doing local work.
# Examples:
#  tomcatExternalAddress=127.0.0.1
#  tomcatExternalAddress=localhost
#  tomcatExternalAddress=disclinc.com
#  tomcatExternalAddress=201.34.45.243
#  tomcatExternalAddress=<auto> -> not implemented yet
tomcatExternalAddress=@tomcatExternalAddress@

# The port to use when accessing Tomcat server from the external network.
# This port should be mapped from the router to the server where Tomcat
# is installed.
# Example:
#   tomcatExternalPort=8080
tomcatExternalPort=@tomcatExternalPort@

# All new and changed files get loaded into Cache when the user runs ANT.
# However, the user can also ask Studio to always load a file from the filesystem
# when it is slected from the Studio Open Dialog. 0: false, 1: true
# Set it to 0 (false) unless your are debugging the tools.
# Example:
#   onBeforeLoadActive=0
onBeforeLoadActive=@onBeforeLoadActive@

# The system creates a temporary file (.tmp) in the build directory for each exported
# file. This file has the raw XML as exported by the Cache API. Later this filed is parsed,
# cleaned and saved to the correct src directory. After that, the .tmp file can be erased
# to reduce clutter or canbe left there to be debugged. Chose 0: false or 1: true.
# Set it to 1 (true) unless you are debugging the tools.
# Exmple:
#  deleteTmpXMLFilesActive=1
deleteTmpXMLFilesActive=@deleteTmpXMLFilesActive@

# Optional users to receive grant on all objects (created) after the deploy is done.
# Example:
#  grantAllObjectsToUser1=jasper
#  grantAllObjectsToUser1=UnknownUser
grantAllObjectsToUser1=@grantAllObjectsToUser1@
grantAllObjectsToUser2=@grantAllObjectsToUser2@

# Optionally run SourceLogging component
# Example:
#   runSourceLogging=1
runSourceLogging=@runSourceLogging@
