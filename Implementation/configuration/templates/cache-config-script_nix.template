@cacheUsername@
@cachePassword@

; Configuration of the basic globals that are needed for Alphalinc
; and for the development environment. This file should *NOT* be altered!
; The tokens are replaced with values from local.properties automatically by the system.
;
;History:
;2008-Jul-02    Soeiro  Added environment variables
;2008-Mar-23    Soeiro  Created
;

; Set all Alphalinc globals
zn "@namespaceCapitalized@"

; Set globals for the source control and software development environment
set $piece(^WWW012(0,0,1),"~",44)="/@namespace@/"
set $piece(^WWW012(0,0,1),"~",45)="@resourcesDir@"
set $piece(^WWW012(0,0,1),"~",46)="/@namespace@/"
if ($length("@resourcesURLPrefix@") '= 0) set $piece(^WWW012(0,0,1),"~",47)="/@resourcesURLPrefix@/"
if ($length("@resourcesURLPrefix@") = 0) set $piece(^WWW012(0,0,1),"~",47)="/@namespace@/"
set $piece(^WWW012(0,0,1),"~",48)="/@namespace@/"
set $piece(^WWW012(0,0,1),"~",49)="@resourcesDir@/"
set $piece(^WWW012(0,0,1),"~",98)="/@namespace@/"
set $piece(^WWW012(0,0,1),"~",150)="/@namespace@/"
if ($length("@reportsRemoteDir@") '= 0) set $piece(^VARJasper(0,0,1),"~",1)="@reportsRemoteDir@/"
if ($length("@reportsRemoteDir@") = 0) set $piece(^VARJasper(0,0,1),"~",1)="@reportsDir@/"
if ($length("@reportsRemoteWebapp@") '= 0) set $piece(^VARJasper(0,0,1),"~",2)="/@reportsRemoteWebapp@/"
if ($length("@reportsRemoteWebapp@") = 0) set $piece(^VARJasper(0,0,1),"~",2)="/@namespace@/"
set $piece(^VARJasper(0,0,1),"~",3)="@tomcatInternalAddress@"
set $piece(^VARJasper(0,0,1),"~",4)="@tomcatInternalPort@"
set $piece(^VARJasper(0,0,1),"~",5)="@tomcatExternalAddress@"
set $piece(^VARJasper(0,0,1),"~",6)="@tomcatExternalPort@"
set $piece(^VARJasper(0,0,1),"~",7)="@reportsResourceUrlPrefix@"

if ('##class(%Dictionary.ClassDefinition).%ExistsId("VAR.infra.util.Lists")) do $System.OBJ.Load("@hookClassDir@VAR.infra.util.Lists-31535.cls.xml", "cdfvuk")
if ('##class(%Dictionary.ClassDefinition).%ExistsId("VAR.infra.util.Errors")) do $System.OBJ.Load("@hookClassDir@VAR.infra.util.Errors-51567.cls.xml", "cdfvuk")
if ('##class(%Dictionary.ClassDefinition).%ExistsId("VAR.infra.util.Strings")) do $System.OBJ.Load("@hookClassDir@VAR.infra.util.Strings-8305.cls.xml", "cdfvuk")
if ('##class(%Dictionary.ClassDefinition).%ExistsId("VAR.infra.util.DirectoryFile")) do $System.OBJ.Load("@hookClassDir@VAR.infra.util.DirectoryFile-52521.cls.xml", "cdfvuk")

set ^SourceControl("projectDir")=##class(VAR.infra.util.DirectoryFile).FixDirectory("@projectDir@")
set ^SourceControl("cspDir")=##class(VAR.infra.util.DirectoryFile).FixDirectory("@cspDir@")
set ^SourceControl("onBeforeLoadActive")="@onBeforeLoadActive@"
set ^SourceControl("deleteTmpXMLFilesActive")="@deleteTmpXMLFilesActive@"
set ^SourceControl("buildOptionVAR")="@buildOptionVAR@"
set ^SourceControl("buildOptionASDE")="@buildOptionASDE@"
set ^SourceControl("runSourceLogging")="@runSourceLogging@"

; Write the ok file (without using Source control because it might not be loaded yet)
set file=##class(%File).%New(##class(VAR.infra.util.DirectoryFile).ConcatPath(^SourceControl("projectDir"), "build\cache-config-script.ok"))
w file.Open("WSN")
w file.WriteLine("Finished ok at: "_$zdatetime($horolog))
do file.Close()
set file=""

write "Configuration finished."
write $ZDATETIME($ZTIMESTAMP,3,1,6)

halt
