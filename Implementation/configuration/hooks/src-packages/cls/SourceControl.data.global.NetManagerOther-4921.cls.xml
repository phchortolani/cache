<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="SourceControl.data.global.NetManagerOther">
<ClassType/>
<Import>SourceControl.control,SourceControl.data</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>GlobalBase</Super>

<Method name="ExportAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set nErrors = 0
	set nExported = 0

	// Aqui TODO
	// 1) verify if the global is not whithin all the nm exported artifacts
	// 2) Check if the global doesn't have a special exporter (Like COMView does)
	// 3) Export it using nm/general/xxxy.metadata (export Global Node)

	// Get all netmanager globals
	set id = ""
	for {
		set id = $order(^$global(id))
		quit:(id = "")

		// All globals that already have special treatment (ExportXYZ
		// routine) are "known"
		if (..IsExported(id)) {
			continue
		}

		if (..IsOther(id)) {
			// Cases where there are some extra considerations 
			// TODO: make such a list!
			if (id = "^COMViewXYZ") {
				set strStatus = ..ExportComView(id)
				if ($$$ISERR(strStatus)) {
					set nErrors = nErrors + 1
				}
				else {
					set nExported = nExported + 1
				}
			}
			else {
				// Empty ignored list
				set ignoredList = ""

				// This is the general case, since there are no specific
				// treatments for this global
				set fileName =
					##class(DirectoryFile).ConcatPath(
						##class(Config).GetExternalNMGeneralMetadataDir(),
						##class(FileControl).GetSafeFilename(id)_"."_
						##class(FileType).%GetParameter("TXTMETADATA"))
				set globals = $listbuild(id)
				set subscripts = $listbuild("""""")
				set strStatus = ..ExportGlobalNode(fileName, id, globals,
					subscripts, ignoredList, 1, .ignored, 0)
				if ($$$ISERR(strStatus)) {
					set nErrors = nErrors + 1
				}
				elseif ('ignored) {
					// Update the timestamp, so that the source control can
					// use it to prevent the same file from being loaded again.
					do ##class(FileControl).UpdateTimeStamp(fileName)

					set nExported = nExported + 1
				}
			}
		}
	}

	write !, "Number of exported files: "_nExported
	write !, "Number of errors during export: "_nErrors

	quit nErrors
]]></Implementation>
</Method>

<Method name="IsExported">
<Description><![CDATA[
This method checks if the global is exported by any of the ExportXYZ methods]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>globalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// Basic validation
	if ($get(globalName) = "") {
		quit $$$NO
	}

	// Search for it
	set exportedGlobals = ##class(NetManagerAll).GetAllGlobals()
	if ($listfind(exportedGlobals, globalName)) {
		quit $$$YES // We use this to make sure the result is either
					// 0 or 1 (not 123)
	}
	else {
		quit $$$NO
	}
]]></Implementation>
</Method>

<Method name="IsOther">
<Description><![CDATA[
This method test if a particular global is considered @NM metadata]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>globalName:%String="&quot;</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// TODO: specify this list in a better way.
	// there must be a correct way of deciding if a given global should
	// be included in an update file: that should be the same here!
	// For the moment, we don't export anything in order to avoid overriding
	// user data.
	if (##class(Strings).StartsWith(globalName, "^WWWComViewLog")) {
		quit $$$NO
	}
	if (##class(Strings).StartsWith(globalName, "^WWWLOGIN")) {
		quit $$$NO
	}
	if (##class(Strings).StartsWith(globalName, "^WWWUSER1")) {
		quit $$$NO
	}
	if (##class(Strings).StartsWith(globalName, "^WWWSOR")) {
		quit $$$NO
	}
	if (##class(Strings).StartsWith(globalName, "^COM")) {
		quit $$$NO
	}

	//Now test if it has the correct flags...
	//if (##class(Strings).StartsWith(globalName, "^WWW")) {
	//		quit $$$YES
	//}

	// Default NO
	quit $$$NO
]]></Implementation>
</Method>

<Method name="ExportComView">
<Description><![CDATA[
Export a @Net Manager general metadata (the whole global), by name

Parameters:
  globalName - the global that will be exported
printMessage - controls whether a message is output to the console
               for each]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>globalName:%String,printMessage:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// TODO

	set status = $$$YES

	// We will search ^COMView and discard every subtree that belongs
	// to user defined favorites or COMTempList.

	// Get all desired subscripts
	set id = ""
	for {
		set id = $order(^COMView(id))
		quit:(id = "")
	}

	quit status
]]></Implementation>
</Method>
</Class>
</Export>