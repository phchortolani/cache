<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="SourceControl.data.global.NetManagerLanguageText">
<ClassType/>
<Import>SourceControl.control,SourceControl.data</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>GlobalBase</Super>

<Method name="ExportAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set strStatus = $$$OK
	set nErrors = 0
	set nExported = 0
	set nPrefixes = 0

	set prefixes = ##class(Hashtable).%New()

	write !, "Finding all existing prefixes..."

	// Get all the prefix codes for all languages
	set lang = ""
	for {
		set lang = $order(^WWW009(0, lang))
		quit:(lang = "")

		// Get all prefixes. Most will be repeated, but we don't
		// want to trust any specific language to have all of them
		set prefix = ""
		for {
			set prefix = $order(^WWW009(0, lang, prefix))
			quit:(prefix = "")

			// Save it for later use
			if ((prefix '= "") && ('prefixes.Exists(prefix))) {
				do prefixes.Put(prefix, "1")
				set nPrefixes = nPrefixes + 1
			}
		}
	}

	write !, "Exporting "_nPrefixes_" prefixes in all languages..."

	// For each prefix, call the export method	
	do prefixes.StartIterator()
	while (prefixes.Next()) {
		set sc = ..Export(prefixes.GetCurrentIndex(), 2)
		if ($$$ISERR(sc)) {
			set nErrors = nErrors + 1
		}
		else {
			set nExported = nExported + 1
		}
	}

	write !, "Number of unique prefixes: "_nPrefixes	
	write !, "Number of exported files: "_nExported
	write !, "Number of errors during export: "_nErrors

	quit nErrors
]]></Implementation>
</Method>

<Method name="Export">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,printMessage:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK

	if ($get(id) = "") {
		quit ##class(Errors).MakeAndPrintErrorStatus("Empty language text "_
			"prefix! Skipping it.", printMessage)
	}

	set fileName = ##class(DirectoryFile).ConcatPath(
		##class(Config).GetExternalNMLanguageDir(),
		##class(FileControl).GetSafeFilename(id)_"."_
		##class(FileType).%GetParameter("TXTLANGUAGETEXT"))

	// Empty ignored list
	set ignoredList = ""

	// List of scritps (ex: [0,"ES","AEP00001"],[0,"ES","AEP00002],
	//     [0,"PT","AEP00001]...)
	// Build list os scritps
	set subs = ""
	set language = ""
	for {
		set language = $order(^WWW009(0, language))
		quit:(language = "")

		// If the id exists on this language
		if ($data(^WWW009(0, language, id))) {
			// Here is the next subscript to be used
			if (subs = "") {
				set subs = $listbuild("0,"_
					##class(Strings).QuoteString(language)_","_
					##class(Strings).QuoteString(id))
			} else {
				set subs=subs_$listbuild("0,"_
					##class(Strings).QuoteString(language)_","_
					##class(Strings).QuoteString(id))
			}
		}	
	}

	// Export the global
	set sc = ..ExportGlobalNode(fileName, id, ..GetGlobals(),
		subs, ignoredList, printMessage=2, .ignored, 0)

	if ($$$ISOK(sc) && ('ignored)) {
		if (printMessage) {
			write !, "@NM language text '"_id_"' successfully exported "_
				"as '"_fileName_"'"
		}

		// Update the timestamp, so that the source control can use it to
		// prevent the same file from being loaded again.
		do ##class(FileControl).UpdateTimeStamp(fileName)
	}

	quit sc
]]></Implementation>
</Method>

<Method name="Delete">
<Description><![CDATA[
Verifies if there is still anything in the language text global. If
there is nothing, that message is deleted from the file system.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fullKey:%String="&quot;,printMessage:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set result = $$$OK

	if (fullKey = "") {
		quit ##class(Errors).MakeErrorStatus("The language text code can't "_
			"be empty for deletion.")
	}

	// Loop and search for anything left
	// List of scritps (ex: [0,"ES","AEP00001"],[0,"ES","AEP00002],
	//     [0,"PT","AEP00001]...)
	// Build list os scritps
	set code = $translate($piece(fullKey, ",", 2), """", "")
	set language = ""
	set exists = 0
	for {
		set language=$order(^WWW009(0, language))
		quit:((language = "") || (exists = 1))

		// If the code exists on this language
		if ($data(^WWW009(0, language, code))) {
			set exists = 1
			quit
		}
	}

	if ('exists) {
		set fileName = ##class(DirectoryFile).ConcatPath(
			##class(Config).GetExternalNMLanguageDir(),
			##class(FileControl).GetSafeFilename(code)_"."_
			##class(FileType).%GetParameter("TXTLANGUAGETEXT"))
		set result = ##class(DirectoryFile).Delete(fileName, printMessage)
		write !, "Deleted: ", fileName
	}

	quit result
]]></Implementation>
</Method>

<Method name="GetGlobals">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $listbuild("^WWW009")
]]></Implementation>
</Method>
</Class>
</Export>