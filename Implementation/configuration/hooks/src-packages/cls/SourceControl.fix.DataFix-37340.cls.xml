<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="SourceControl.fix.DataFix">
<ClassType/>
<Import>SourceControl,SourceControl.control,SourceControl.data,SourceControl.data.global,VAR.infra.util</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="CorrectBlankFields">
<Description><![CDATA[
método que corrige todas as variaveis que são afetadas pelo asde]]></Description>
<Implementation><![CDATA[	do ..CorrectBlankFieldsList(##class(NetManagerAll).GetAllGlobals())
]]></Implementation>
</Method>

<Method name="CorrectBlankFieldsList">
<Description><![CDATA[
Percorre uma lista de globais, e faz rodar o método que corrige todos 
os elementos de cada global]]></Description>
<FormalSpec>lst:%List</FormalSpec>
<Implementation><![CDATA[
 	set size = $listlength(lst)
 	set i = 1
 	while (i <= size) {
		set output = $listget(lst, i, "") 
		if (output '= "") {
			do ..CorrectBlankFieldsGlobal(output)
		}

		set i = i + 1
	}
]]></Implementation>
</Method>

<Method name="CorrectBlankFieldsGlobal">
<Description><![CDATA[
Método que, para uma string que contém uma variavel global (com o "^"),
roda o método de correcao para uma global, em um elemento de array com
dados]]></Description>
<FormalSpec>gbl:%String</FormalSpec>
<Implementation><![CDATA[
	set i = 0
	set first = gbl_"("""")"
	set node = $query(@first)
	while (node '= "") {
		write node, "=", @node, !

		// get next node
		set gbl = node
		set className = $piece($piece(gbl, "(", 1), "^", 2)
		do ##class(GlobalBase).FillBlankFields(gbl, className)
		set node = $query(@node)
	}
]]></Implementation>
</Method>

<Method name="CorrectTimeStamps">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set file = $order(^SourceControlTimeStamps(""))

	while ($length(file) > 0) {
		set relativePath = ##class(FileControl).RemoveProjectFromFullPath(
			##class(DirectoryFile).FixDirectory(file))
		if (relativePath = "") {
			set relativePath = file
		}

		if ($length(relativePath) > 0) {
			set relativeName = ##class(DirectoryFile).FixUnixPathSymbol(relativePath)

			if (relativeName '= file) {
				set ^SourceControlTimeStamps(relativeName) =
					^SourceControlTimeStamps(file)
				kill ^SourceControlTimeStamps(file)
			}
		}

		set file = $order(^SourceControlTimeStamps(file))
	}
]]></Implementation>
</Method>

<Method name="CorrectMissingFormButtons">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set form = $order(^WWW120(0, ""))

	while ($length(form) > 0) {
        write !, "Fixing buttons from form '"_form_"'"
		set fileName = ##class(DirectoryFile).ConcatPath(
			##class(Config).GetExternalNMFormDir(),
			##class(FileControl).GetSafeFilename(form)_"."_
			##class(FileType).%GetParameter("TXTFORM"))
	    set sc = ##class(GlobalBase).ImportNMMetadataHelper(fileName, 1, 0)

		set fileName = ##class(DirectoryFile).ConcatPath(
			##class(Config).GetExternalNMFormDir(),
			##class(FileControl).GetSafeFilename(form)_"."_
			##class(FileType).%GetParameter("TXTCUSTOMFORM"))
	    set sc = ##class(GlobalBase).ImportNMMetadataHelper(fileName, 1, 1)

		set form = $order(^WWW120(0, form))
	}
]]></Implementation>
</Method>

<Method name="FlushOldFormatExports">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$YES
	
	// Look for all items and export them
	set id = ""
	for {
		set id = $order(^SourceControl("pendingExports", id))
		quit:(id = "")

		set key = ""
		for {
			set key = $order(^SourceControl("pendingExports", id, key))
			quit:(key = "")

			if ($data(^SourceControl("pendingExports", id, key)) '= 1) continue

			// Try to export it
			set status = ##class(Exporter).ExportNMItem(id, key, 0)
			if (##class(Errors).IsError(status)) quit

			// Erase it if ok
			kill ^SourceControl("pendingExports", id, key)
			//write !,"Debug: killing: pendingExports,"_id_", "_key
		}
	}

	quit status
]]></Implementation>
</Method>
</Class>
</Export>