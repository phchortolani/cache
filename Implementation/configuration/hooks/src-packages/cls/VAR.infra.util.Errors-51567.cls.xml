<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache for Windows (x86-32) 2008.2 (Build 615U)">
<Class name="VAR.infra.util.Errors">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<Method name="IsError">
<Description><![CDATA[
Wrapper for checking the error and printing a message]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>status:%Status,printMessage:%Boolean=1</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if (..IsErrorQuiet(status)) {
		if (printMessage && (status '= $$$NO)) {
			do ..ShowError(status)
		}

		quit $$$YES
	}

	quit $$$NO
]]></Implementation>
    </Method>
    <Method name="ShowError">
<Description><![CDATA[
Show the error]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>status:%Status</FormalSpec>
<Implementation><![CDATA[
	// To keep the code normalized, just use the other method
	write ..GetErrorFromErrorStatus(status)
]]></Implementation>
    </Method>
    <Method name="GetErrorFromErrorStatus">
<Description><![CDATA[
Get an error message from a ErrorStatus]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>status:%Status</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result = ""
	set arrayError = 0
	if (..IsErrorQuiet(status)) {
		if (..IsErrorStatus(status)) {
			do DecomposeStatus^%apiOBJ(status, .arrayError, "-d")
			set n = arrayError
			for i = 1:1:n {
				if (result="") {
					set result=arrayError(i)
				}
				else {
					set result=result_$char(13)_$char(10)_arrayError(i)
				}
			}
		}
		else {
			//set result = $extract(status, 3, $length(status))
			set result = status
		}
	}

	quit result
]]></Implementation>
    </Method>
    <Method name="IsErrorQuiet">
<Description><![CDATA[
Wrapper for checking the error and NOT printing any message]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>status:%Status</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit $$$ISERR(status)
]]></Implementation>
    </Method>
    <Method name="MakeErrorStatus">
<Description><![CDATA[
Wrapper for the macro CreateStatus. We DON'T use it here to reduce
the dependency on external files. The developer must ensure that its utilization
is the same.
]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>msg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit "0 "_$listbuild($listbuild(msg))
]]></Implementation>
    </Method>
    <Method name="IsErrorStatus">
<Description><![CDATA[
There are places in Alhalinc where a boolean is returnes and there are places
that return a true ErrorStatus. This test makes sure decompose status shouldn't be called
because it would cause a run time error ]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>status:%Status="&quot;</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// Error status codes start with 0
	if ($extract(status,1,1) = "0") {
		// First part: size
		set length = $length(status)
		if (length > 1) {
			// Second part: the second part should be a $list
			set partTwo = $extract(status, 3, length)
			if (##class(Lists).IsList(partTwo)) {
				// part three should also be a list
				set partThree = $list(partTwo, 1)
				if (##class(Lists).IsList(partThree)) {
					quit $$$YES
				}
			}
		}
	}

	quit $$$NO
]]></Implementation>
    </Method>
    <Method name="MakeAndPrintErrorStatus">
<Description><![CDATA[
Makes an ErrorStatus and also prints the string message to the console
printMessage equals true (1)]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>msg:%String,printMessage:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = ..MakeErrorStatus(msg)
	if (printMessage) {
		write !, msg
	}

	quit sc
]]></Implementation>
    </Method>
  </Class>
</Export>