<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache for Windows (x86-32) 2008.2 (Build 615U)">
<Class name="VAR.infra.util.Strings">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<Method name="UpperCase">
<ClassMethod>1</ClassMethod>
<FormalSpec>string:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $zconvert($get(string), "U")
]]></Implementation>
    </Method>
    <Method name="LowerCase">
<ClassMethod>1</ClassMethod>
<FormalSpec>string:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $zconvert($get(string), "L")
]]></Implementation>
    </Method>
    <Method name="Replace">
<Description><![CDATA[
Replaces all occurences of searchString with replacementString in sourceString. The result is
returned.
This method was taken from FullReplace^COMUtilStr]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>source:%String="&quot;,from:%String="&quot;,to:%String="&quot;</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ($length(from) > 0)
	{
		if ($find(to, from))
		{
			set source = ..FullReplace(source, from, to)
		}
		else
		{
			while (1)
			{
				quit:('$find(source, from))
				
				set source = $piece(source, from, 1)_to_$piece(source, from, 2, 999)
			}
		}
	}

	quit source
]]></Implementation>
    </Method>
    <Method name="FullReplace">
<ClassMethod>1</ClassMethod>
<FormalSpec>source:%String="&quot;,from:%String="&quot;,to:%String="&quot;</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set result = ""
    set index = 0
    set numPieces = $length(source, from) - 1
 	
    while (1)
    {
        quit:(numPieces = index)

        set index = index + 1
        set piece = $piece(source, from, index)
        set result = result_piece_to
    }
 
	set result = result_$piece(source, from, index + 1)
 
    quit result
]]></Implementation>
    </Method>
    <Method name="GetNonAccentedVersionFor">
<Description><![CDATA[
Searchs for and returns a char or string tha represents an accented char
Example: "a" becomes "a", "C" becomes "c"
We start by using ^WWWUMLAU global, but may switch to an internal representation later]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>char:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set code = $ascii(char)

	quit $piece($get(^WWWUMLAU(0, code, 1)), "~", 2)
]]></Implementation>
    </Method>
    <Method name="GetNonDigits">
<Description><![CDATA[
Strips the trailing non-characters of the string
This method returns only the first characters stoping
at the first occurence of a number]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>string:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set length = $length(string)
	set result = ""

	set min = $ascii("0")
	set max = $ascii("9")

	for i = 1:1:length {
		set c = $extract(string, i, i)
		set val = $ascii(c)

		// Found the first digit
		if ((val >= min) && (val <= max)) {
			quit
		}
		else {
			// Keep the string
			set result = result_c
		}
	}

	quit result
]]></Implementation>
    </Method>
    <Method name="GetFirstPart">
<Description><![CDATA[
Strip the trailing extendion (.xyzw) from a file name
Examples:
 GetFirstPart("abcdef.MAC")=abcdef
 GetFirstPart("abcdef.nmclass")=abcdef
 GetFirstPart("x.y.z.d.e.abcdef.CLS")=x.y.z.d.e.abcdef]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>dotString:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set result = ""
	if ($length(dotString, ".") > 1) {
		set result = $piece(dotString, ".", 1, $length(dotString, ".") - 1)
	}

	quit result
]]></Implementation>
    </Method>
    <Method name="GetLastSubstring">
<Description><![CDATA[
Get's tha last N characters of the string
Example:
 GetLastSubstring("abcdef.MAC",3)=MAC]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>string:%String,nchars:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ($get(string) = "") quit ""

	set size = $length(string)

	quit ($extract(string, size - (nchars - 1), size))
]]></Implementation>
    </Method>
    <Method name="StartsWith">
<Description><![CDATA[
Does String starts with search string?]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>string:%String,searchString:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit ($find(string, searchString) = ($length(searchString) + 1))
]]></Implementation>
    </Method>
    <Method name="EndsWith">
<Description><![CDATA[
Does String end with search string?]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>string:%String,searchString:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit (..GetLastSubstring(string, $length(searchString)) = searchString)
]]></Implementation>
    </Method>
    <Method name="QuoteString">
<Description><![CDATA[
This method surounds a string with double quotes if and only if
it is not a number]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>string:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (string = +string) {
		quit string
	}
	else {
		quit """"_string_""""
	}
]]></Implementation>
    </Method>
    <Method name="FormatNumber">
<Description><![CDATA[
This methos formats a number for output with up to N leading zeros
Example: FortmatNumber(1,3)="001"
]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>number:%String,size:%Integer</FormalSpec>
<Implementation><![CDATA[
	set result = number

	set length = $length(result)
	while (length < size) {
		set result = "0"_result
		set length = $length(result)	
	}

	quit result
]]></Implementation>
    </Method>
    <Method name="RemoveBinaryCharacters">
<Description><![CDATA[
This methods remove binary zeros on a String
]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>param:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#define TAB  9
	#define LF  10
	#define CR  13
	
	set strOut = param
 	
 	for i = 0:1:31 {
   			if (i = $$$TAB) continue
   			if (i = $$$LF) continue
   			if (i = $$$CR) continue
   			set strOut = ..Replace(strOut, $char(i), "")
 	 }
 	
 	quit strOut
]]></Implementation>
    </Method>
  </Class>
</Export>