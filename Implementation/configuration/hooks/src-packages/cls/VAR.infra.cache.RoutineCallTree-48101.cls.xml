<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="Cache for Windows NT (Intel) 5.0.21 (Build 6408)">
<Class name="VAR.infra.cache.RoutineCallTree">
<ClassType/>
<Import>VAR.common,VAR.infra.util</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<ClassDefinitionError>0</ClassDefinitionError>

<Method name="GetCallTree">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,routine:%String,function:%String,callTree:VAR.common.RoutineCallTree</FormalSpec>
<Implementation><![CDATA[	do ..GetCallSubTree(namespace, routine, function, 0, callTree)
]]></Implementation>
    </Method>
    <Method name="GetCallSubTree">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,routine:%String,function:%String,level:%Integer,callTree:VAR.common.RoutineCallTree</FormalSpec>
<Implementation><![CDATA[
	if (($length(namespace) = 0) || ($length(routine) = 0)) quit
	if ($length(function) = 0) set function = routine
	if (level > 14) quit

	set line = ""
    set lineTemp = ""
	while (1)
	{
		set lineTemp = $order(^[namespace]rMAC(routine, 0, lineTemp))
		quit:($length(lineTemp) = 0)
		continue:($data(^[namespace]rMAC(routine, 0, lineTemp)) # 10 = 0)

        set lineText = ^[namespace]rMAC(routine, 0, lineTemp)
        set pos = 1
		set functionDeclaration = ""
		while ((pos <= $length(lineText)) &&
			   (..IsValidFunctionNameChar($extract(lineText, pos, pos))))
		{
			set functionDeclaration = functionDeclaration_$extract(lineText, pos, pos)
			set pos = pos + 1
		}
		if ($length(functionDeclaration) = 0) continue

        if (functionDeclaration = function)
        {
            set line = lineTemp
            quit
        }
    }
    if ($length(line) = 0) quit

	set blockComent = 0
    while (1)
    {
        set line = $order(^[namespace]rMAC(routine, 0, line))
        quit:($length(line) = 0)
		continue:($data(^[namespace]rMAC(routine, 0, line)) # 10 = 0)

        set lineText = ^[namespace]rMAC(routine, 0, line)
        if (..IsFunctionDeclaration(lineText)) quit
        
        set lineText = ##class(Strings).Replace(lineText, "$$$Save", "$$Save^COMUtils")
        set lineText = ##class(Strings).Replace(lineText, "$$$Kill", "$$KILL^COMUtils")
        set lineText = ##class(Strings).Replace(lineText, "$$$", "---")

        if ('blockComent)
        {
	        set blockComent = (($extract($zstrip(lineText, "<>W"), 1, 2) = "/*") &&
	                           ('$find(lineText, "*/")))
        }
        else
        {
	        if ($find(lineText, "*/")) set blockComent = 0
        }

        if (('blockComent) && ..GetPosFunctionDeclaration(lineText, 0))
        {
            do ..DetailCall(namespace, routine, function, lineText, level, callTree)
        }
    }
]]></Implementation>
    </Method>
    <Method name="IsFunctionDeclaration">
<ClassMethod>1</ClassMethod>
<FormalSpec>lineText:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit ..IsValidFunctionNameChar($extract(lineText, 1, 1))
]]></Implementation>
    </Method>
    <Method name="IsValidFunctionNameChar">
<ClassMethod>1</ClassMethod>
<FormalSpec>char:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit $find("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%", char)
]]></Implementation>
    </Method>
    <Method name="GetPosFunctionDeclaration">
<ClassMethod>1</ClassMethod>
<FormalSpec>lineText:%String,startPos:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	if (($extract($zstrip(lineText, "<>W"), 1, 1) = ";") ||
	    ($extract($zstrip(lineText, "<>W"), 1, 2) = "//") ||
	    ($extract($zstrip(lineText, "<>W"), 1, 2) = "/*"))
	{
		quit 0
	}

	set lineText = $extract(lineText, startPos + 1, $length(lineText))

	set functionCall = " $$;"_$char(9)_"$$;"_
		" d ;"_$char(9)_"d ; D ;"_$char(9)_"D ;"_
		" do ;"_$char(9)_"do ; dO ;"_$char(9)_"dO ;"_
		" Do ;"_$char(9)_"Do ; DO ;"_$char(9)_"DO "
	set pos = 0
	for i = 1:1:$length(functionCall, ";")
	{
		set pos2 = $find(lineText, $piece(functionCall, ";", i))
		if ((pos = 0) || ((pos2 > 0) && (pos2 < pos))) set pos = pos2
	}

	quit startPos + pos
]]></Implementation>
    </Method>
    <Method name="DetailCall">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,routine:%String,function:%String,lineText:%String,level:%Integer,callTree:VAR.common.RoutineCallTree</FormalSpec>
<Implementation><![CDATA[
	set pos = ..GetPosFunctionDeclaration(lineText, 0)
	while (pos > 0)
	{
		set call = ""
		set objectCall = 0
		set separator = 0
		while ((pos <= $length(lineText)) &&
			   ((('separator) &&
			     (..IsValidFunctionNameChar($extract(lineText, pos, pos)) ||
			      ($extract(lineText, pos, pos) = "^") ||
			      ($extract(lineText, pos, pos) = "."))) ||
			    (separator &&
			     (..IsValidFunctionNameChar($extract(lineText, pos, pos)) ||
			      ($extract(lineText, pos, pos) = ".")))))
		{
			set call = call_$extract(lineText, pos, pos)
			if (('objectCall) && ('separator) && ($extract(lineText, pos, pos) = ".")) set objectCall = 1
			if (('separator) && ($extract(lineText, pos, pos) = "^")) set separator = 1
			set pos = pos + 1
		}
		if ($length(call) = 0) quit

		if (($extract(lineText, pos, pos) = "") ||
		    ($extract(lineText, pos, pos) = " ") ||
		    ($extract(lineText, pos, pos) = $char(9)) ||
		    ($extract(lineText, pos, pos) = "(") ||
		    ($extract(lineText, pos, pos) = ")"))
		{
			set routineCall = $piece(call, "^", 2)
			if ($length(routineCall) = 0)
			{
				if ('objectCall)
				{
					set routineCall = routine
				}
				else
				{
					set routineCall = "[OBJ]"
				}
			}
			set functionCall = $piece(call, "^", 1)

			if ('callTree.IsDetailed(routineCall, functionCall))
			{
				if ('callTree.IsDefined(routineCall, functionCall, routine, function))
				{
		        	set lineTextTemp = ##class(Strings).Replace(lineText, "---", "$$$")
					do callTree.Add(routineCall, functionCall, routine, function, lineTextTemp)
				}

				if ('objectCall)
				{
					do callTree.StartSubTree()
					do ..GetCallSubTree(namespace, routineCall, functionCall, level + 1, callTree)
					do callTree.EndSubTree()
				}
			}
		}

		set pos = ..GetPosFunctionDeclaration(lineText, pos)
	}
]]></Implementation>
    </Method>
  </Class>
</Export>