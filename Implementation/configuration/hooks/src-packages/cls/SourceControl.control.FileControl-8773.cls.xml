<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="SourceControl.control.FileControl">
<ClassType/>
<Import>VAR.infra.util,VAR.infra.xml</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="GetExternalFileName">
<Description><![CDATA[
This method converts the internal name into an external representation]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>internalName:%String,&amp;isSource:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set result = ""
    set type = ##class(FileType).GetType(internalName)
    set name = ..GetSafeFilename(##class(Strings).GetFirstPart(internalName))
    set xml = ".xml"

    if (type = ##class(FileType).%GetParameter("MAC")) {
        set result = ##class(DirectoryFile).ConcatPath(
            ##class(Config).GetExternalMacDir(), name_"."_
            ##class(FileType).%GetParameter("TXTMAC")_xml)
    }
    elseif (type = ##class(FileType).%GetParameter("INC")) {
        set result = ##class(DirectoryFile).ConcatPath(
            ##class(Config).GetExternalIncDir(), name_"."_
            ##class(FileType).%GetParameter("TXTINC")_xml)
    }
    elseif (type = ##class(FileType).%GetParameter("CLS")) {
        set result = ##class(DirectoryFile).ConcatPath(
            ##class(Config).GetExternalClassDir(), name_"."_
            ##class(FileType).%GetParameter("TXTCLS")_xml)
    }
    elseif (type = ##class(FileType).%GetParameter("PRJ")) {
        set result = ##class(DirectoryFile).ConcatPath(
            ##class(Config).GetExternalPrjDir(), name_"."_
            ##class(FileType).%GetParameter("TXTPRJ")_xml)
    }
    elseif (type = ##class(FileType).%GetParameter("GBL")) {
        set result = ##class(DirectoryFile).ConcatPath(
            ##class(Config).GetProjectDir(), "data/gbl/"_name_"."_
            ##class(FileType).%GetParameter("TXTGBL")_xml)
    }
    elseif (type = ##class(FileType).%GetParameter("CSP")) {
        // Cache Studio generates uses the following strategy to
        // generate the internal name:
        //   / csp / name space in lower case / normal file name
        // So we must strip the leading / csp / namespace / 

        // Total number of parts, where a part is anything separated by / or \
        set nPieces = ##class(%File).GetDirectoryLength(internalName)
        set slash = ##class(DirectoryFile).GetPathSymbol()
        set result = ""
        for i = 4:1:nPieces {
            // Get the next part
            set result = result_slash_##class(%File).GetDirectoryPiece(
                internalName, i)
        }

        if ($length(result) > 0) {
            if (isSource) {
                set cspDir = ##class(Config).GetCspDir()
                if ($length(cspDir) > 0) {
                    set result = ##class(DirectoryFile).ConcatPath(cspDir, result)
                }
                else {
                    write !, "The csp directory has not been set up yet. Please run ant!"
                    set result = ""
                }
            }
            else {
                set result = ##class(DirectoryFile).ConcatPath(
                    ##class(Config).GetProjectDir(),
                    ##class(DirectoryFile).ConcatPath("web/csp", result))
            }
        }
    }
    elseif (type = ##class(FileType).%GetParameter("FAVORITES")) {
        set result = ##class(DirectoryFile).ConcatPath(
            ##class(Config).GetExternalNMFavoritesDir(), name_"."_
            ##class(FileType).%GetParameter("TXTFAVORITES"))
    }

    quit result
]]></Implementation>
</Method>

<Method name="GetProjectRelativePath">
<ClassMethod>1</ClassMethod>
<FormalSpec>suffix:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    quit ##class(DirectoryFile).ConcatPath(
        ##class(Config).GetProjectDir(), suffix)
]]></Implementation>
</Method>

<Method name="RemoveProjectFromFullPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set path1 = $extract(path,0,$length(##class(Config).GetProjectDir()))
	set path2 = $extract(path,$length(##class(Config).GetProjectDir())+1,$length(path))
	if (##class(Strings).LowerCase(##class(Config).GetProjectDir()) = ##class(Strings).LowerCase(path1)) {
		quit path2
	}
	quit path
]]></Implementation>
</Method>

<Method name="GetTemporaryFileName">
<Description><![CDATA[
Convert the internal name into an external representation]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>internalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[   quit ..GetProjectRelativePath("build/"_internalName_".tmp")
]]></Implementation>
</Method>

<Method name="GetInternalInfo">
<Description><![CDATA[
This method extracts information from the external filename (xxx.yyy.xml)
from the String it discovers its type and internal name.

Parameters:
  externalFileName: the name of the file in the external file system
  
  the results will be assigned to the parameters:
  internalName: the internal name of the artifact (Example: xxx.MAC, xxxx.yyyy.CLS, etc)
  type: the type of the file (#MAC, #CLS, #INC, #GBL)

Returns true if there were no errors]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>externalFileName:%String,&amp;type:%Integer,&amp;internalName:%String="&quot;,&amp;errorMessage:%String="&quot;</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    if ($get(externalFileName) = "") {
        set errorMessage = "The internalName can't be '' (empty)"
        quit $$$NO
    }
    if ($get(type) = "") {
        set type = ##class(FileType).%GetParameter("UNKNOWN")
    }

    set upperName = ##class(Strings).UpperCase(externalFileName)
    set pureName = ""

    // Strips the XML part
    if (##class(Strings).EndsWith(upperName,"XML")) {
        //Gets the file without the XML part
        set pureName = ##class(Strings).GetFirstPart(externalFileName)
        if (pureName = "") {
            set errorMessage = "The name of the file doesn't obey the "_
                "pattern name.XXX!"
            quit $$$NO
        } 
    }
    else {
        set pureName = externalFileName
    }

    // Gets rid of the leading path
    set pureName = ##class(%File).GetFilename(pureName)

    // Gets the type
    set type = ##class(FileType).GetType(pureName)

    // Captalize the last part plus the dot
    set last = ##class(Strings).UpperCase(
        ##class(Strings).GetLastSubstring(pureName, 4))

    // Join everything (the end result is uggly, but it is what Cache
    // expects xxxx.YYY)
    set internalName = ##class(Strings).GetFirstPart(pureName)_last

    quit $$$YES
]]></Implementation>
</Method>

<Method name="GetSafeFilename">
<Description><![CDATA[
Converts a string which might contain accented and path characters into
a safe filename to use with any operating system. This safe name uses
only ASCII characters and no path characters. In addition, the name will get an
appended number that is the checksum on the original string. this garantees that
the names "NAME","NAME" (with accents) and "Name" (case) won't collide.

This code only works with 8-bit instalations!]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>string:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set result = ""

    set length = $length(string)
    for i = 1:1:length {
        set char = $extract(string, i)

        // The hifen (dash) - and full stop "." are not included here.
        // Any other char is replaced.
        if ("`~!@#$%^&*()_=+[{]}\|;:'"",<>/? " [ char) {
            // If we find a non alphanumeric digit, put a dash
            set result = result_"-"
        }
        else {
            // Look for accented characters and change it to an
            // unaccented version
            set tmp = ##class(Strings).GetNonAccentedVersionFor(char)
            if (tmp '= "") {
                // Change it
                set result = result_tmp
            }
            else {
                // Since it wasn't found, just use the same char
                set result = result_char
            }
        }
    }   

    // This is to prevent collisions:
    // Example: abc.properties with abcc.properties, or "User" and "USER"
    // 16-bit correct CRC code generated on the original string
    quit result_"-"_$zcrc(string, 6)
]]></Implementation>
</Method>

<Method name="GetInternalNameFromXmlFile">
<Description><![CDATA[
This method extracts the name of the original routine from a XML file exported by CAche libraries]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sourceFileName:%String="&quot;,&amp;internalName:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set sc = $$$YES

    // Quick verification
    if (sourceFileName = "") {
        quit ##class(Errors).MakeErrorStatus("The file name is empty!")
    }

    // Don't waste time with inexisten files
    if ('##class(%File).Exists(sourceFileName)) {
        quit ##class(Errors).MakeErrorStatus("The source file "_
            "'"_sourceFileName_"' was not found!")
    }

    // Create an instance of %XML.TextReader (returned by reference)
    set sc = ##class(XMLReader).ParseFile(sourceFileName, .reader)
    if ($$$ISOK(sc)) {
        // Read all elements within the document
        while (reader.Read()) {
            set nodeType = reader.NodeType
            //write !, "reader.NodeType="_nodeType

            // Process an element 
            if (nodeType = "element") {
                //write ", Name="_reader.Name
                set name = reader.Name

                // MAC and CLS files has one possible element that we
                // are interested in                
                if ((name = "Routine") || (name = "Class")) {
                    if (reader.MoveToAttributeName("name")) {
                        set internalName = reader.Value
                        quit
                    }
                }
            }
        }
    }

    quit sc
]]></Implementation>
</Method>

<Method name="GetInternalCspUrl">
<Description><![CDATA[
This method returns the internal CSP url]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>externalFileName:%String="&quot;,&amp;internalName:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set sc = $$$YES

    // Quick verification
    if (externalFileName = "") {
        quit ##class(Errors).MakeErrorStatus("The file name is empty!")
    }

    // Internal URL uses the following format:
    //   / csp / name space in lower case / normal file name

    set relativeName = ..RemoveProjectFromFullPath(externalFileName)
    set relativeName = ##class(DirectoryFile).FixUnixPathSymbol(relativeName)

    set cspDir = ##class(Config).GetCspDir()
    if (($length(cspDir) > 0) && ($length(relativeName, cspDir) > 1))  {
        set relativeName = $piece(relativeName, cspDir, 2)
    }
    if ($length(relativeName, "web/csp/") > 1)  {
        set relativeName = $piece(relativeName, "web/csp/", 2)
    }

	set internalName = $System.CSP.GetDefaultApp($znspace)_"/"_relativeName

    quit sc
]]></Implementation>
</Method>

<Method name="GetInternalNameFromGlobalFile">
<Description><![CDATA[
This method extracts the name of the original @NM artifact from a @NM global file
Actually, it searchs for the NAME=XYZ field (should be the first field) and returns that value, if found.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>externalFileName:%String="&quot;,&amp;internalName:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set sc = $$$YES

    // Quick verification
    if (externalFileName = "") {
        quit ##class(Errors).MakeErrorStatus("The file name is empty!")
    }

    // Don't waste time with inexistent files .
    if ('##class(%File).Exists(externalFileName)) {
        quit ##class(Errors).MakeErrorStatus("The cache global file "_
            "'"_externalFileName_"' was not found!")
    }

    // Open the file
    set file = ##class(%File).%New(externalFileName)
    if (file = "") {
        set msg = "The Cache global file '"_externalFileName_" could not "_
            "be opened to be read."
        write !, msg
        quit ##class(Errors).MakeErrorStatus(msg)
    }
    else {
        set sc = file.Open("RS")
        if (##class(Errors).IsError(sc)) {
            quit sc
        }
    }

    // Read the first few lines up to the point where something is found
    for {
        set lengthRead = 32000

        // Reads a line of text up to lengthRead
        set line = file.Read(.lengthRead)
        if (lengthRead < 0) {
            quit
        }
        else {
            // Only lines that are not empty
            if (lengthRead > 0) {
                // Look for the signature in the first non empty, no
                // comment line
                if (##class(Strings).StartsWith(line, "Name=")) {
                    // Let's extract the value following Name=
                    set begin = $find(line, "Name=")
                    if (begin) {
                        set internalName = $extract(line, begin, lengthRead)
                    }
                    else {
                        set internalName = ""
                    }
                    quit
                }
                elseif ('##class(Strings).StartsWith(line, ";")) {
                    // If the line doesn't start with NAME=, is not empty
                    // and doens't start with ;
                    // we quit, because NAME= should be the first thing on
                    // each file
                    set sc = ##class(Errors).MakeErrorStatus("The cache global "_
                        "file '"_externalFileName_"' didn't have a 'Name=xyz' "_
                        "header!")
                    quit
                }
            }
        }
    }

    quit sc
]]></Implementation>
</Method>

<Method name="UpdateTimeStamp">
<Description><![CDATA[
This method updates the timestamp of the ^SourceControlTimeStamps()
The name of the arftifact is the full filename, including the path. this guarantees
that different artifacts with the same extension don't colide.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>externalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    if ($get(externalName) = "") {
        write !, "Empty internal name not allowed."
        quit ##class(Errors).MakeErrorStatus("Empty internal name not allowed.")    
    }

    // Don't waste time with inexisten files
    if ('##class(%File).Exists(externalName)) {
	    write !, "The source file '"_externalName_"' was not found!"
        quit ##class(Errors).MakeErrorStatus("The source file "_
            "'"_externalName_"' was not found!")
    }

    set relativeName = ..RemoveProjectFromFullPath(externalName)
    set relativeName = ##class(DirectoryFile).FixUnixPathSymbol(relativeName)
    set internalTimeStamp = ##class(%File).GetFileDateModified(externalName)

	if (internalTimeStamp <= 0) quit status

    // The current time stamp in $horolog format, with fraction seconds (6 digits)
    // This function returns the local adjusted timestamp. This have to be used because
    // the comparison is always done against the file system timestamp, which is
    // always adjusted to the local time and settings.
    // Unfortunately, the ZUTIL(188) function clock _always_ gets off sync.
    // So we use $horolog (because it is in the current timezone and DST) and
    // only the fractional part of ztimestamp: $h_"."_$piece($ztimestamp,".",2)
    // Now,to be sure, we will use the actual file's timestamp.
    set ^SourceControlTimeStamps(relativeName) = internalTimeStamp

    // Debug
    //write !, "Time Stamp updated: "_externalName

    quit status
]]></Implementation>
</Method>

<Method name="IsArtifactOutdated">
<Description><![CDATA[
This method tests if an artifact is outdated when compared to an external timestamp.
It looks for the artifact timestamp in ^SourceControlTimeStamps(internalName,extension).
If it soens't find the timestamp, or if the timestamp found is older than the external one,
the artifact is considred outdated.
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>externalName:%String,externalTimeStamp:%String,&amp;internalTimeStamp:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    set internalTimeStamp = ""

    // If not specified defaults to YES
    if ($get(externalName) = "") {
        quit $$$YES
    }

    // If not specified defaults to YES
    if ($get(externalTimeStamp) = "") {
        quit $$$YES
    }

    set relativeName = ..RemoveProjectFromFullPath(externalName)
    set relativeName = ##class(DirectoryFile).FixUnixPathSymbol(relativeName)
	if ($length(relativeName) > 0) {
		set internalTimeStamp = $get(^SourceControlTimeStamps(relativeName))

		if (internalTimeStamp <= 0) {
			kill ^SourceControlTimeStamps(relativeName)
			set internalTimeStamp = ""
		}
	}
	else {
		set internalTimeStamp = ""
	}

    // If there is no internal time stamp, the internal artifact is
    // considered outdated
    if (internalTimeStamp = "") {
        quit $$$YES
    }
    else {
        // Compare both
        if (##class(DateTime).DateTimeCmp(internalTimeStamp, externalTimeStamp) = -1) {
            quit $$$YES
        } else  {
            quit $$$NO
        }
    }

    quit $$$NO
]]></Implementation>
</Method>

<Method name="IgnoreAllChanges">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	merge ^SourceControlTimeStampsBkp5 = ^SourceControlTimeStampsBkp4
	merge ^SourceControlTimeStampsBkp4 = ^SourceControlTimeStampsBkp3
	merge ^SourceControlTimeStampsBkp3 = ^SourceControlTimeStampsBkp2
	merge ^SourceControlTimeStampsBkp2 = ^SourceControlTimeStampsBkp1
	merge ^SourceControlTimeStampsBkp1 = ^SourceControlTimeStamps

	set relativeName = $order(^SourceControlTimeStamps(""))
	while ($length(relativeName) > 0) {
		set externalFileName = ..GetProjectRelativePath(relativeName)
		if (##class(%File).Exists(externalFileName)) {
			write !, "Ignoring changes from '"_relativeName_"' ..."
			do ..UpdateTimeStamp(..GetProjectRelativePath(relativeName))
			write " OK"
		}
		else {
			write !, "Skipping file '"_relativeName_"' ..."
		}

		set relativeName = $order(^SourceControlTimeStamps(relativeName))
	}
]]></Implementation>
</Method>

<Method name="CorrectNIXExecuteFlag">
<Description><![CDATA[
Removes the execute flag (+x) from files created by Caché on NIX systems]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>externalName:%String</FormalSpec>
<Implementation><![CDATA[
	if (##class(Util).IsNix() && ##class(%File).Exists(externalName)) {
		if ($zutil(140, 7, externalName) # 2 = 1) {
			do $zf(-1, "chmod -x """_externalName_"""")
		}
	}
]]></Implementation>
</Method>
</Class>
</Export>