<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="Cache for Windows NT (Intel) 5.0.21 (Build 6408)">
<Class name="VAR.infra.xml.SAXSequencer">
<ProcedureBlock>1</ProcedureBlock>
<Super>%XML.SAX.ContentHandler</Super>
<ClassDefinitionError>0</ClassDefinitionError>

<Property name="CharType">
<Type>%Boolean</Type>
<InitialExpression>&quot;chars&quot;</InitialExpression>
<Private>1</Private>
</Property>

<Property name="Depth">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="EntityName">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="Seq">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
</Property>

<Property name="Target">
<Type>%Integer</Type>
<InitialExpression>$Increment(^CacheTemp)</InitialExpression>
</Property>

<Property name="KeepWhitespace">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="TargetGet">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[ Quit i%Target
]]></Implementation>
    </Method>
    <Method name="characters">
<FormalSpec>chars:%String,length:%Integer</FormalSpec>
<Implementation><![CDATA[
 If ..KeepWhitespace=0 {
 Set chars=$ZStrip(chars,"<>WC") If chars="" Quit
 }
 
 set unicode = 0 
 for i = 1:1:$length(chars) {
 	if ($ascii($extract(chars, i, i)) > 255) set unicode = 1
 }
 If unicode {
	 Set tListMaxChars = (32767\2) - 32
 } else {
	 Set tListMaxChars = 32767 - 32
 }
 Set tStart=1 For tI=1:1:$Length(chars)\tListMaxChars
 {
 	Set i%Seq=i%Seq+1
 	Set ^CacheTemp(i%Target,i%Seq)=$ListBuild(i%CharType,$Extract(chars,tStart,tStart-1+tListMaxChars),i%EntityName)
 	//Set ^CacheTemp(i%Target,i%Seq)=$ListBuild(i%CharType,$Extract(chars,tStart,tListMaxChars),i%EntityName)
 	Set tStart=tStart+tListMaxChars
 }
 Set tRemainingChars=$Length(chars)#tListMaxChars
 If tRemainingChars'=0 {
 Set i%Seq=i%Seq+1
 	Set ^CacheTemp(i%Target,i%Seq)=$ListBuild(i%CharType,$Extract(chars,tStart,tStart-1+tRemainingChars),i%EntityName)
 	//Set ^CacheTemp(i%Target,i%Seq)=$ListBuild(i%CharType,$Extract(chars,tStart,tRemainingChars),i%EntityName)
 }
 Quit
]]></Implementation>
    </Method>
    <Method name="comment">
<FormalSpec>chars:%String,length:%Integer</FormalSpec>
<Implementation><![CDATA[
 If $Ascii(chars)>255 {
	 Set tListMaxChars = (32767\2) - 32
 } else {
	 Set tListMaxChars = 32767 - 32
 }
 Set tStart=1 For tI=1:1:$Length(chars)\tListMaxChars
 {
 Set i%Seq=i%Seq+1
 	Set ^CacheTemp(i%Target,i%Seq)=$ListBuild("comment",$Extract(chars,tStart,tListMaxChars))
 	Set tStart=tStart+tListMaxChars
 }
 Set tRemainingChars=$Length(chars)#tListMaxChars
 If tRemainingChars'=0 {
	Set i%Seq=i%Seq+1
 	Set ^CacheTemp(i%Target,i%Seq)=$ListBuild("comment",$Extract(chars,tStart,tRemainingChars))
 }
 Quit
]]></Implementation>
    </Method>
    <Method name="endCDATA">
<Implementation><![CDATA[
 Set i%CharType="chars"
 Quit
]]></Implementation>
    </Method>
    <Method name="endElement">
<FormalSpec>uri:%String,localname:%String,qname:%String</FormalSpec>
<Implementation><![CDATA[
 Set i%Seq=i%Seq+1,i%Depth=i%Depth-1
 Set ^CacheTemp(i%Target,i%Seq)=$ListBuild("endelement",uri,localname,qname)
 Quit
]]></Implementation>
    </Method>
    <Method name="endEntity">
<FormalSpec>name:%String</FormalSpec>
<Implementation><![CDATA[
 Set i%CharType="chars",i%EntityName=""
 Quit
]]></Implementation>
    </Method>
    <Method name="endPrefixMapping">
<FormalSpec>prefix:%Library.String</FormalSpec>
<Implementation><![CDATA[
 Set i%Seq=i%Seq+1
 Set ^CacheTemp(i%Target,i%Seq)=$Listbuild("endprefixmapping",prefix)
 Quit
]]></Implementation>
    </Method>
    <Method name="error">
<FormalSpec>error:%String</FormalSpec>
<Implementation><![CDATA[
 Set i%Seq=i%Seq+1
 Set ^CacheTemp(i%Target,i%Seq)=$ListBuild("error",error)
 Quit
]]></Implementation>
    </Method>
    <Method name="fatalError">
<FormalSpec>fatalerror:%String</FormalSpec>
<Implementation><![CDATA[
 Set i%Seq=i%Seq+1
 Set ^CacheTemp(i%Target,i%Seq)=$ListBuild("fatalerror",fatalerror)
 Quit
]]></Implementation>
    </Method>
    <Method name="ignorableWhitespace">
<FormalSpec>chars:%String,length:%Integer</FormalSpec>
<Implementation><![CDATA[
 If $Ascii(chars)>255 {
	 Set tListMaxChars = (32767\2) - 32
 } else {
	 Set tListMaxChars = 32767 - 32
 }
 Set tStart=1 For tI=1:1:$Length(chars)\tListMaxChars
 {
 Set i%Seq=i%Seq+1
 	Set ^CacheTemp(i%Target,i%Seq)=$ListBuild("ignorablewhitespace",$Extract(chars,tStart,tListMaxChars))
 	Set tStart=tStart+tListMaxChars
 }
 Set tRemainingChars=$Length(chars)#tListMaxChars
 If tRemainingChars'=0 {
	Set i%Seq=i%Seq+1
 	Set ^CacheTemp(i%Target,i%Seq)=$ListBuild("ignorablewhitespace",$Extract(chars,tStart,tRemainingChars))
 }
 Quit
]]></Implementation>
    </Method>
    <Method name="processingInstruction">
<FormalSpec>target:%String,data:%String</FormalSpec>
<Implementation><![CDATA[
 Set i%Seq=i%Seq+1
 Set ^CacheTemp(i%Target,i%Seq)=$ListBuild("processinginstruction",target,data)
 Quit
]]></Implementation>
    </Method>
    <Method name="startCDATA">
<Implementation><![CDATA[
 Set i%CharType="cdata"
 Quit
]]></Implementation>
    </Method>
    <Method name="startDocument">
<Implementation><![CDATA[
 Kill ^CacheTemp(i%Target)
 Quit
]]></Implementation>
    </Method>
    <Method name="startElement">
<FormalSpec>uri:%String,localname:%String,qname:%String,attrs:%List</FormalSpec>
<Implementation><![CDATA[
 Set i%Seq=i%Seq+1,i%Depth=i%Depth+1
 Set seq=0 For i=1:5:$ListLength(attrs) Set seq=seq+1,^CacheTemp(i%Target,i%Seq,seq)=$li(attrs,i,i+4)
 Set ^CacheTemp(i%Target,i%Seq)=$ListBuild("element",uri,localname,qname,seq,i%Depth)
 Quit
]]></Implementation>
    </Method>
    <Method name="startEntity">
<FormalSpec>name:%String</FormalSpec>
<Implementation><![CDATA[
 Set i%CharType="entity",i%EntityName=name
 Quit
]]></Implementation>
    </Method>
    <Method name="startPrefixMapping">
<FormalSpec>prefix:%Library.String,uri:%Library.String</FormalSpec>
<Implementation><![CDATA[
 Set i%Seq=i%Seq+1
 Set ^CacheTemp(i%Target,i%Seq)=$ListBuild("startprefixmapping",prefix,uri)
 Quit
]]></Implementation>
    </Method>
    <Method name="warning">
<FormalSpec>warning:%String</FormalSpec>
<Implementation><![CDATA[
 Set i%Seq=i%Seq+1
 Set ^CacheTemp(i%Target,i%Seq)=$ListBuild("warning",warning)
 Quit
]]></Implementation>
    </Method>
    <Method name="%OnNew">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%New</METHOD> method to 
provide notification that a new instance of an object is being created.

<P>If this method returns an error then the object will not be created.]]></Description>
      <FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..KeepWhitespace=+$Get(initvalue)
	Quit $$$OK
]]></Implementation>
    </Method>
  </Class>
</Export>