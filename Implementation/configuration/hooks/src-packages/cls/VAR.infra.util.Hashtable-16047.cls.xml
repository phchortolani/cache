<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="Cache for Windows NT (Intel) 5.0.21 (Build 6408)">
<Class name="VAR.infra.util.Hashtable">
<Description><![CDATA[
Just a wrapper for a hash table and a iterator using Cache globas as the
storage.
Note: Cache classes *does not* allow direct access to globals
(method variables) inside Methods!

The objects are stored in $order order (Alphabethic). *NOT* in the order
they were submited.

General use:
 
 set hastable = ##class(VAR.infra.util.Hashtable).%New()
 
 do hashtable.Put("1", "blablbla")
 do hashtable.Put("2", "dsdsdads")
 ...
 
 set value = hashtable.Get("2")
 ...
 do hashtable.StartIterator()
 while (hashtable.Next()) {
    set key = hashtable.GetCurrentIndex()
    set value = hashtable.GetCurrentValue()
 }
 
 If you want to store things in an order, use the ADD method. This way
 the key will be incremented.
]]></Description>
    <ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<ClassDefinitionError>0</ClassDefinitionError>

<Property name="hashtable">
<Description><![CDATA[
Global to store has codes and values]]></Description>
      <MultiDimensional>1</MultiDimensional>
</Property>

<Property name="counter">
<Type>%Integer</Type>
</Property>

<Property name="currentIndex">
<Description><![CDATA[
For use with the iterator]]></Description>
      <Type>%String</Type>
</Property>

<Method name="%OnNew">
<Description><![CDATA[
COnstructor: initialize all required variables]]></Description>
      <FormalSpec>initval:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..currentIndex = ""
	set ..counter = 0

	quit $$$OK
]]></Implementation>
    </Method>
    <Method name="Put">
<Description><![CDATA[
Put an element in a Hashtable.]]></Description>
      <FormalSpec>key:%String,value:%String</FormalSpec>
<Implementation><![CDATA[
	// Count it if it is a new value
	if ('$data(..hashtable(key))) {
		set ..counter = ..counter + 1
	}

	set ..hashtable(key) = value
]]></Implementation>
    </Method>
    <Method name="Get">
<Description><![CDATA[
Ge an element from a hash table]]></Description>
      <FormalSpec>key:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $get(..hashtable(key))
]]></Implementation>
    </Method>
    <Method name="Exists">
<Description><![CDATA[
Checks if an element is in the hashtable]]></Description>
      <FormalSpec>key:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $data(..hashtable(key))
]]></Implementation>
    </Method>
    <Method name="StartIterator">
<Description><![CDATA[
Invoke this method ot iterate over all items]]></Description>
      <FormalSpec>startIndex:%String=&quot;&quot;</FormalSpec>
<Implementation><![CDATA[	set currentIndex = startIndex
]]></Implementation>
    </Method>
    <Method name="Next">
<Description><![CDATA[
Get the next record in position.
Returns:
  False if there is no record
  True if there is currently a current record
]]></Description>
      <ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set ..currentIndex = $order(..hashtable(..currentIndex))
	if (..currentIndex = "") {
		quit $$$NO
	}

	quit $$$YES
]]></Implementation>
    </Method>
    <Method name="GetCurrentIndex">
<Description><![CDATA[
Returns the current index ( or key)]]></Description>
      <ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..currentIndex
]]></Implementation>
    </Method>
    <Method name="GetCurrentValue">
<Description><![CDATA[
Returns the current value]]></Description>
      <FormalSpec>key:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//If it is "", Cache Object will cause a Subscript Error!
	if (..currentIndex = "") {
		quit ""
	}

	quit $get(..hashtable(..GetCurrentIndex()))
]]></Implementation>
    </Method>
    <Method name="GetSize">
<Description><![CDATA[
Returns the current size of this Hashtable, in number of elements.
Note: when a key,value pair just overwrites another key,value (same key)
the counter is not increased. The counter shows exactly how many items
will be returned but iterating through all items.]]></Description>
      <ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	quit ..counter
]]></Implementation>
    </Method>
    <Method name="Add">
<Description><![CDATA[
Add a value to the hash table using GetSize()+1 as the key.]]></Description>
      <FormalSpec>value:%String</FormalSpec>
<Implementation><![CDATA[	do ..Put(..GetSize() + 1, value)
]]></Implementation>
    </Method>
    <Method name="GetIgnoredMap">
<Description><![CDATA[
This mehod transforms a $listbuild(item1,...itemN) in a Hashmap
for fast lookups.

Each item is a $listbuild(location,pieces)

The returned Hashtable contains the key: location, value: hashtable (key: piece number, value: piece number)
]]></Description>
      <ClassMethod>1</ClassMethod>
<FormalSpec>&amp;status:%String,lstIgnored:%String=&quot;&quot;,printMessage:%Boolean</FormalSpec>
<ReturnType>Hashtable</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK

	// Set up the hashtable
	set ignoredMap = ..%New()

	// It is OK to have an empty ignoredmap (for most situations it will
	// be empty)
	if (lstIgnored = "") {
		quit ignoredMap
	}

	// Verify that it is in the correct format
	if ('##class(Lists).IsList(lstIgnored)) {
		set status = ##class(Errors).MakeAndPrintErrorStatus("ExportGlobalNode "_
			"needs the parameter lstIgnored to be a list of lists of "_
			"(lotacion,pieces) or nothing!", printMessage)
		quit ignoredMap
	}

	// Get all ignored items
	set nItems = $listlength(lstIgnored)
	for itemPos = 1:1:nItems {
		set item = $list(lstIgnored, itemPos)

		// Item should be a list!
		if ('##class(Lists).IsList(item)) {
			set status = ##class(Errors).MakeAndPrintErrorStatus("ExportGlobalNode "_
				"found an item inside lstIgnored which is not a $listbuild "_
				"result!", printMessage)
			quit
		}

		// Put the item in the hashTable (key=location,
		// value=hashtable[key:piece number])
		set key = $list(item,1)
		if (key = ""){
			set status = ##class(Errors).MakeAndPrintErrorStatus("GetIgnoredMap "_
				"found an empty location in a lstIgnored!", printMessage)
			quit
		}

		// get the pieces part
		set pieces = $list(item, 2)

		//Debug
		//write !,"GetIgnoredMap: key="_key_", pieces="_pieces

		set value = ..%New()

		// Number of pieces
		set n = $length(pieces, "~")

		// Write all pieces, one for each line
		for i = 1:1:n {
			set pieceNumber = $piece(pieces, "~", i)

			// Skip empty ones
			if (pieceNumber '= "") {
				// Put it in the hash table
				do value.Put(pieceNumber, pieceNumber)
			}
		}

		// Save it
		do ignoredMap.Put(key, value)
	}

	// Return whatever we have built so far
	quit ignoredMap
]]></Implementation>
    </Method>
  </Class>
</Export>