<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="SourceControl.Exporter">
<Description><![CDATA[
Exports entities as XML files. It has two passes: 1) Let Cache API export it 
to a temporary file then 2) Strip all things that can be stripped from the XML files. 
(for example: timestamps, checksums, etc)

History

2008-Jul-10		Soeiro		Created]]></Description>
<ClassType/>
<Import>SourceControl.control,SourceControl.data,SourceControl.data.source,SourceControl.data.global,VAR.infra.util,%Studio,%CSP</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>Base</Super>

<Method name="PrintAllExportedNMGlobals">
<Description><![CDATA[
Just prints all global names]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(NetManagerAll).PrintAllGlobals()
]]></Implementation>
</Method>

<Method name="ExportHookSource">
<Description><![CDATA[
Exports all SourceControl Files]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = ..ExportHookProject("SourceControl")
	//set sc = ..ExportHookProject("Common")
	//set sc = ..ExportHookProject("Log4C")
	//set sc = ..ExportHookProject("CosUnit")
	//set sc = ..ExportHookProject("VersionUpdater")

	quit sc
]]></Implementation>
</Method>

<Method name="ExportHookProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	write !!, "Exporting project '", projectName, "'"

	set sc = ##class(SourceBase).ExportAsCleanXML(projectName_"."_
		##class(FileType).%GetParameter("TXTPRJ"), $$$NO)
 	if (##class(Errors).IsError(sc)) {
	 	write !, "There was an error trying to export a file. Trying "_
	 		"the next one..."
 	}

	set project = ##class(Project).%OpenId(projectName)
	set itemName = project.Items.Next("")
	while ($length(itemName) > 0) {
		set item = project.Items.GetAt(itemName)
		set name = item.Name

		if (##class(Strings).LowerCase(item.Type) '=
			##class(FileType).%GetParameter("TXTCSP")) {
			if (##class(Strings).LowerCase(item.Type) =
				##class(FileType).%GetParameter("TXTCLS")) {
				set name = name_"."_item.Type
			}

			set sc = ##class(SourceBase).ExportAsCleanXML(name, $$$NO)
		 	if (##class(Errors).IsError(sc)) {
			 	write !, "There was an error trying to export a file. Trying "_
			 		"the next one..."
		 	}
		}

		set itemName = project.Items.Next(itemName)
	}

	quit sc
]]></Implementation>
</Method>

<Method name="ExportAllSource">
<Description><![CDATA[
Export all files in the current namespace that are relevant to the development.
Note: Be carefull! All current files beloging to the current project in your
filesystem will be overwritten with those files from the current configured
namespace.

This routine does *NOT* export data in the database, nor compiled class and objects.
Only things that must be under source control are exported.

Returns if the operation was OK or not]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>externalOkFile:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set result = $$$OK

	// Check
	if ('##class(Config).IsProjectDirSet()) {
		write !, "The global ^SourceControl(""projectDir"") is missing!"
		quit 0
	}

	set nErrors = 0
	set n = 0

	// The export routines should be in alphabetic order to make it easy
	// to search for them and see mising entries while comparing to the
	// drop down list box

	write !, "Exporting Projects (PRJ)..."	
	set n = ##class(CacheProject).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting Classes (CLS)..."	
	set n = ##class(CacheClass).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting Routines (INC and MAC)..."
	set n = ##class(CacheRoutine).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting AppParameters..."	
	set n = ##class(NetManagerApplicationParameter).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting NM Classes..."
	set n = ##class(NetManagerClass).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting NM Dictionaries..."
	set n = ##class(NetManagerDictionary).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting NM Forms..."
	set n = ##class(NetManagerForm).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting NM Language texts..."	
	set n = ##class(NetManagerLanguageText).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting NM Menus..."	
	set n = ##class(NetManagerMenu).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting NM SysParameters..."
	set n = ##class(NetManagerSystemParameter).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting NM User Parameters..."
	set n = ##class(NetManagerUserParameter).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting NM Custom User Parameters..."
	set n = ##class(NetManagerCustomUserParameter).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting NM CharParameters..."
	set n = ##class(NetManagerCharParameter).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting of NM GeneralMetadata..."
	set n = ##class(NetManagerGeneralMetadata).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	write !, "Exporting of NM Favorites..."
	set n = ##class(NetManagerFavorite).ExportAll()
	if (n > 0) {
		set result = $$$NO
		write !, ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Errors found!"
	}
	set nErrors = nErrors + n

	if (nErrors > 0) {
		write !!, "There was a total of"_nErrors_" errors during the "_
			"operation."
	} else {
		if ($g(externalOkFile)'="") do ..WriteOkFile(externalOkFile)
		write !, "The file export operation succeeded."
	}
	
	write !, "Export finished."
	
	quit result
]]></Implementation>
</Method>

<Method name="ExportOthersAndFlushExports">
<ClassMethod>1</ClassMethod>
<FormalSpec>request:Request</FormalSpec>
<Implementation><![CDATA[
	set EP = %request.Get("EP")
	set YFORM = %request.Get("YFORM")
	set YEXEC = %request.Get("YEXEC")
	set YKEY = %request.Get("YKEY")
	set YFKEY = %request.Get("YFKEY")

	if ((EP = "WWWMANU") && (YFORM = "WWW001") && ($length(YKEY) > 0) &&
	    ((YEXEC [ "WWW001O") || (YEXEC [ "COMPILE"))) {
		do ##class(CacheClass).ExportClassByNMClass(YKEY)
	}
	elseif ((EP = "WWWSAVE") && (YFORM = "WWW003") && ($length(YFKEY) > 0)) {
		set module = ##class(Alphalinc).GetModule(YFKEY)

		if ($data(^rINC(module_"Const", 0))) {
			do ##class(SourceBase).ExportAsCleanXML(module_"Const.INC")
		}
	}

	do ..FlushExports(0)
]]></Implementation>
</Method>

<Method name="TagNMArtifactByGlobal">
<Description><![CDATA[
Exports a NM artifact based on a global reference (i.e. ^WWW0031(0,"WWW120","2","PT",1)). This method 
searches for the correct NM artifact then uses the global reference to
extract the needed information. Thiss method automatically extracts double quotes.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>globalReference:%String,userName:%String,sessionId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set result = $$$NO

	// Verify if we will do anything...
	if ($get(^SourceControl("ignoreExport"))) {
		quit $$$YES
	}
	// Just cleanly skip if the system is importing something
	if (..IsExporterBlocked()) {
		quit $$$YES
	}

	//set ^zLuis("TagNMArtifactByGlobal", "globalReference") =
	//    globalReference

	// Gets everything before the first parentesis
	set globalName = $piece(globalReference, "(", 1)
	//set ^zLuis("TagNMArtifactByGlobal", "globalName") = globalName
	if (globalName = "") {
		quit result
	}

	// Extract the name of the related form 
	set name = $translate($piece(globalReference, ",", 2), """")
	if (name = "") {
		quit result
	}

	quit ..TagNMArtifactByNameKey(globalName, name, userName, sessionId)
]]></Implementation>
</Method>

<Method name="TagNMArtifactByNameKey">
<Description><![CDATA[
Places a NM artifact based on Name and Key on the Queue of objects to be exported when flush is called.
 This method was developed to be used mainly from WWWSPEI.
Example:
  TagNMArtifactByNameKey("WWW131","CLASSNAME")
  - This call would search and find out that WWW131 belongs to nm class definitions.
    So the system would tag the NMCLASS "CLASSNAME" to be exported.
  
Note: this method adds the caret to the name variable internally, if
it is not present
Note 2: this method honors IsExporterBlocked() value.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>globalName:%String="&quot;,fullKey:%String="&quot;,userName:%String="&quot;,sessionId:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Verify if we will do anything...
	if ($get(^SourceControl("ignoreExport"))) {
		quit $$$YES
	}
	// Just cleanly skip if the system is importing something
	if (..IsExporterBlocked()) {
		quit $$$YES
	}

	//set n = $get(^zLuis("Debug", "TagNMArtifactByNameKey", globalName, fullKey))
	//set n = n + 1
	//set ^zLuis("Debug", "TagNMArtifactByNameKey", globalName, fullKey) = n

	if (globalName = "") {
		quit ##class(Errors).MakeErrorStatus("The Name of the artifact "_
			"can't be empty.")
	}
	if (fullKey = "") {
		quit ##class(Errors).MakeErrorStatus("The Key of the artifact "_
			"can't be empty.")
	}

	// Fixes the name of the global
	if ('##class(Strings).StartsWith(globalName, "^")) {
		set globalName = "^"_globalName
	}

	set fileType = ""

	// Test if for any known artifact
	if (##class(NetManagerForm).IsAffected(globalName)) {
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileType = ##class(FileType).%GetParameter("TXTFORM")
	}
	elseif (##class(NetManagerClass).IsAffected(globalName)) {
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileType = ##class(FileType).%GetParameter("TXTNMCLASS")
	}
	elseif (##class(NetManagerMenu).IsAffected(globalName)) {
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileType = ##class(FileType).%GetParameter("TXTMENU")
	}
	elseif (##class(NetManagerApplicationParameter).IsAffected(globalName)) {
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileType = ##class(FileType).%GetParameter("TXTAPPPARAMETERS")
	}
	elseif (##class(NetManagerSystemParameter).IsAffected(globalName)) {
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileType = ##class(FileType).%GetParameter("TXTSYSPARAMETERS")
	}
	elseif (##class(NetManagerUserParameter).IsAffected(globalName)) {
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileType = ##class(FileType).%GetParameter("TXTUSERPARAMETERS")
	}
	elseif (##class(NetManagerCustomUserParameter).IsAffected(globalName)) {
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileType = ##class(FileType).%GetParameter("TXTCUSTOMUSERPARAMETERS")
	}
	elseif (##class(NetManagerLanguageText).IsAffected(globalName)) {
		// We only need the item code (1:language 2:item code)
		set key = $translate($piece(fullKey, ",", 2), """", "")
		set fileType = ##class(FileType).%GetParameter("TXTLANGUAGETEXT")
	}
	elseif (##class(NetManagerGeneralMetadata).IsAffected(globalName)) {
		// In this case, the global name is used as the key
		set key = globalName
		set fileType = ##class(FileType).%GetParameter("TXTMETADATA")
	}
	elseif (##class(NetManagerFavorite).IsAffected(globalName)){
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileType = ##class(FileType).%GetParameter("TXTFAVORITES")
	}
	else {
		// Unkown things
		//set ^SourceControl("unkownExports", globalName, fullKey) =
		//	$horolog_"."_$piece($ztimestamp, ".", 2)
	}

	if ($length(fileType) > 0) {
		do ..TagItem(fileType, key)
		do ##class(GlobalBase).SaveAuditInfo(fileType, key, userName, sessionId)
	}

	quit $$$OK
]]></Implementation>
</Method>

<Method name="TagItem">
<Description><![CDATA[
Tags an item to be exported in the next flush method call. ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String="&quot;,key:%String="&quot;</FormalSpec>
<Implementation><![CDATA[
	// debug
	//set ^zLuis("TagItem","a-"_name_"-"_key)=$h_"."_$piece($ztimestamp,".",2)
	if (name = "") {
		quit
	}
	if (key = "") {
		quit
	}

	// Tag it
	set ^SourceControl("pendingExports", $job, +$horolog, name, key) = 1
]]></Implementation>
</Method>

<Method name="FlushExports">
<Description><![CDATA[
Export all pending items that were placed on the queue]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fromHyperEvent:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Verify if we will do anything...
	if ($get(^SourceControl("ignoreExport"))) {
		quit $$$YES
	}
	// Just cleanly skip if the system is importing something
	if (..IsExporterBlocked()) {
		quit $$$YES
	}

	set allOk = $$$OK

	set jobid = ""
	for {
		set jobid = $order(^SourceControl("pendingExports", jobid))
		quit:(jobid = "")

		set reqDate = ""
		for {
			set reqDate = $order(^SourceControl("pendingExports", jobid, reqDate))
			quit:(reqDate = "")

			// It its not from this job, only process if its an older one
			if ((jobid '= $job) && (reqDate = +$horolog)) continue

			// Look for all items and export them
			set id = ""
			for {
				set id = $order(^SourceControl("pendingExports", jobid, reqDate, id))
				quit:(id = "")

				set key = ""
				for {
					set key = $order(^SourceControl("pendingExports", jobid, reqDate, id, key))
					quit:(key = "")

					// Try to export it
					set status = ..ExportNMItem(id, key, fromHyperEvent, (jobid = $job))
					if (##class(Errors).IsError(status)){
						set allOk = $$$NO
					}
					else {
						// Erase it if ok
						kill ^SourceControl("pendingExports", jobid, reqDate, id, key)
						//write !,"Debug: killing: pendingExports, "_jobid_", "_reqDate_", "_id_", "_key
					}
				}
			}
		}
	}

	// Show something if there was any error
	if (allOk) {
		quit $$$YES
	}
	else {
		quit ##class(Errors).MakeErrorStatus("One or more items "_
			"reported an error during the export operation.")
	}
]]></Implementation>
</Method>

<Method name="ExportNMItem">
<Description><![CDATA[
Exports an item (described in "id", using the key)
Any kind of item may have specif key requirements, so each case is
handled according to its peculiarities.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String="&quot;,key:%String="&quot;,fromHyperEvent:%Boolean,printMessage:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // if is being called from a hyperEvent, only process NMForm or NMFavourites without print messages
	if (fromHyperEvent) {
		if ((id '= ##class(FileType).%GetParameter("TXTFORM")) &&
			(id '= ##class(FileType).%GetParameter("TXTFAVORITES"))) {
			quit $$$OK
		}
		set printMessage = $$$NO 
	}
	
	set result = $$$OK

	if (key = "") {
		quit
	}

	if (id = ##class(FileType).%GetParameter("TXTFORM")) {
		// This test avoids an undesired error message. 
		if ($data(^WWW120(0, key))){
			set result = ##class(NetManagerForm).Export(key, printMessage)
		}
	}
	elseif (id = ##class(FileType).%GetParameter("TXTNMCLASS")) {
		// This test avoids an undesired error message. 
		if ($data(^WWW001(0, key))) {
			set result = ##class(NetManagerClass).Export(key, printMessage)
		}
	}
	elseif (id = ##class(FileType).%GetParameter("TXTMENU")){
		if ($data(^WWW004(0, key))){
			set result = ##class(NetManagerMenu).Export(key, printMessage)
		}
	}
	elseif (id = ##class(FileType).%GetParameter("TXTAPPPARAMETERS")){
		if ($data(^WWW101(0, key))) {
			set result = ##class(NetManagerApplicationParameter).Export(key, printMessage)
		}
	}
	elseif (id = ##class(FileType).%GetParameter("TXTSYSPARAMETERS")){
		if ($data(^WWW100(0, key))){
			set result = ##class(NetManagerSystemParameter).Export(key, printMessage)
		}
	}
	elseif (id = ##class(FileType).%GetParameter("TXTUSERPARAMETERS")){
		if ($data(^INPARA(0, key))) {
			set result = ##class(NetManagerUserParameter).Export(key, printMessage)
		}
	}
	elseif (id = ##class(FileType).%GetParameter("TXTCUSTOMUSERPARAMETERS")){
		if ($data(^VARPARA(0, key))) {
			set result = ##class(NetManagerCustomUserParameter).Export(key, printMessage)
		}
	}
	elseif (id = ##class(FileType).%GetParameter("TXTLANGUAGETEXT")){
		set result = ##class(NetManagerLanguageText).Export(key, printMessage)
	}
	elseif (id = ##class(FileType).%GetParameter("TXTMETADATA")) {
		// Exports or deletes the global
		set result = ##class(NetManagerGeneralMetadata).Export(key, printMessage)
	}
	elseif (id = ##class(FileType).%GetParameter("TXTFAVORITES")) {
		// This test avoids an undesired error message
		if ($data(^COMView(0, key))) {
			set result = ##class(NetManagerFavorite).Export(key, ('fromHyperEvent && printMessage))
		}
	}
	else {
		set result = ##class(Errors).MakeErrorStatus("Can't export an "_
			"unkown NM artifact: [" + id + "]")
	}

	quit result
]]></Implementation>
</Method>

<Method name="DeleteArtifactByNameKey">
<Description><![CDATA[
When most artifacts are deleted, the parent artifact must be exported,
unless it doesn't exist any longer.

This method should create a list of deleted parents to be used by the source
control importer method to delete artifacts. Since this behavior is not very simple
to implement and since failure to delte parents doens't affect the system, for now
deletion lists are not being created.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>globalName:%String="&quot;,fullKey:%String="&quot;,userName:%String="&quot;,sessionId:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Verify if we will do anything...
	if ($get(^SourceControl("ignoreExport"))) {
		quit $$$YES
	}
	// Just cleanly skip if the system is importing something
	if (..IsExporterBlocked()) {
		quit $$$YES
	}

	set print = 1
	//write !, "DeleteArtifactByNameKey: globalName="_globalName_", key="_key

	if ((globalName = "") || (fullKey = "")) {
		quit $$$NO
	}

	// Fixes the name of the global
	if ('##class(Strings).StartsWith(globalName, "^")) {
		set globalName = "^"_globalName
	}

	set fileName = ""
	set key = ""
	set fileType = ""

	// If this is a parent object, delete it from the file system
	// (this is the place where a deletion list could be created)
	if (globalName = "^WWW120") {
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileName = ##class(DirectoryFile).ConcatPath(
			##class(Config).GetExternalNMFormDir(),
			##class(FileControl).GetSafeFilename(key)_"."_
			##class(FileType).%GetParameter("TXTFORM"))
		set fileType = ##class(FileType).%GetParameter("TXTFORM")
	}
	elseif (globalName = "^WWW001") {
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileName = ##class(DirectoryFile).ConcatPath(
			##class(Config).GetExternalNMClassDir(),
			##class(FileControl).GetSafeFilename(key)_"."_
			##class(FileType).%GetParameter("TXTNMCLASS"))
		set fileType = ##class(FileType).%GetParameter("TXTNMCLASS")
	}
	elseif (globalName = "^WWW101") {
		set key = $translate($piece(fullKey, ",", 1), """", "")

		// Since there can be many entries, we only delete the file
		// when there are no entries left
		if ('$data(^WWW101(0, key))) {
			set fileName = ##class(DirectoryFile).ConcatPath(
				##class(Config).GetExternalNMAppParametersDir(),
				##class(FileControl).GetSafeFilename(key)_"."_
				##class(FileType).%GetParameter("TXTPARAMETERS"))
		}
		else {
			// just export it
			do ..TagItem(##class(FileType).%GetParameter("TXTAPPPARAMETERS"), key)
		}

		set fileType = ##class(FileType).%GetParameter("TXTAPPPARAMETERS")
	}
	elseif (globalName = "^INPARA") {
		set key = $translate($piece(fullKey, ",", 1), """", "")

		if ('$data(^INPARA(0, key))) {
			set fileName = ##class(DirectoryFile).ConcatPath(
				##class(Config).GetExternalNMUserParametersDir(),
				##class(FileControl).GetSafeFilename(key)_"."_
				##class(FileType).%GetParameter("TXTPARAMETERS"))
		}
		else {
			// just export it
			do ..TagItem(##class(FileType).%GetParameter("TXTUSERPARAMETERS"), key)
		}

		set fileType = ##class(FileType).%GetParameter("TXTUSERPARAMETERS")
	}
	elseif (globalName = "^WWW100") {
		set key = $translate($piece(fullKey, ",", 1), """", "")

		// Since there can be many entries, we only delete the file
		// when there are no entries left
		if ('$data(^WWW100(0, key))) {
			set fileName = ##class(DirectoryFile).ConcatPath(
				##class(Config).GetExternalNMSysParametersDir(),
				##class(FileControl).GetSafeFilename(key)_"."_
				##class(FileType).%GetParameter("TXTPARAMETERS"))
		}
		else {
			// just export it
			do ..TagItem(##class(FileType).%GetParameter("TXTSYSPARAMETERS"), key)
		}

		set fileType = ##class(FileType).%GetParameter("TXTSYSPARAMETERS")
	}
	elseif (globalName = "^WWW004") {
		set key = $translate($piece(fullKey, ",", 1), """", "")

		// Only delete the file if the menu being deleted is the main entry
		if ($length(fullKey, ",") = 1) {
			set fileName = ##class(DirectoryFile).ConcatPath(
				##class(Config).GetExternalNMMenuDir(),
				##class(FileControl).GetSafeFilename(key)_"."_
				##class(FileType).%GetParameter("TXTMENU"))
		}
		else {
			// just export it
			do ..TagItem(##class(FileType).%GetParameter("TXTMENU"), key)
		}

		set fileType = ##class(FileType).%GetParameter("TXTMENU")
	}
	elseif (globalName = "^WWW009") {
		// Tests and deletes if there is nothing left
		do ##class(NetManagerLanguageText).Delete(fullKey)

		set key = $translate($piece(fullKey, ",", 2), """", "")
		set fileType = ##class(FileType).%GetParameter("TXTLANGUAGETEXT")
	}
	elseif (globalName = "^COMView") {
		set print = 0
		set key = $translate($piece(fullKey, ",", 1), """", "")

		if ($order(^COMView(0, key, "")) = "") {
			set fileName = ##class(DirectoryFile).ConcatPath(
				##class(Config).GetExternalNMFavoritesDir(),
				##class(FileControl).GetSafeFilename(key)_"."_
				##class(FileType).%GetParameter("TXTFAVORITES"))
		}
		else {
			do ..TagItem(##class(FileType).%GetParameter("TXTFAVORITES"), key)
		}

		set fileType = ##class(FileType).%GetParameter("TXTFAVORITES")
	}
	else {	
		// Tags the parent to be re-exported
		do ..TagNMArtifactByNameKey(globalName, fullKey, userName, sessionId)
	}

	if (fileName '= "") {
		if (($length(key) > 0) &&
		    ((##class(Config).IsBuildOnlyNonVAR() && ($extract(key, 1, $length("VAR")) = "VAR")) ||
			 (##class(Config).IsBuildOnlyVAR() && ($extract(key, 1, $length("VAR")) '= "VAR")))) {
		}
		else {
			do ##class(DirectoryFile).Delete(fileName, print)
			do ##class(GlobalBase).KillAuditInfo(fileType, key, userName, sessionId)
			write !, "Deleted: ", fileName
		}
	}

	set fileName = ""
	if (globalName = "^WWW120") {
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileName = ##class(DirectoryFile).ConcatPath(
			##class(Config).GetExternalNMFormDir(),
			##class(FileControl).GetSafeFilename(key)_"."_
			##class(FileType).%GetParameter("TXTCUSTOMFORM"))
		set fileType = ##class(FileType).%GetParameter("TXTFORM")
	}
	elseif (globalName = "^WWW001") {
		set key = $translate($piece(fullKey, ",", 1), """", "")
		set fileName = ##class(DirectoryFile).ConcatPath(
			##class(Config).GetExternalNMClassDir(),
			##class(FileControl).GetSafeFilename(key)_"."_
			##class(FileType).%GetParameter("TXTCUSTOMNMCLASS"))
		set fileType = ##class(FileType).%GetParameter("TXTNMCLASS")
	}
	elseif (globalName = "^COMView") {
		set key = $translate($piece(fullKey, ",", 1), """", "")

		if ($order(^COMView(0, key, "")) = "") {
			set fileName = ##class(DirectoryFile).ConcatPath(
				##class(Config).GetExternalNMFavoritesDir(),
				##class(FileControl).GetSafeFilename(key)_"."_
				##class(FileType).%GetParameter("TXTCUSTOMFAVORITES"))
		}

		set fileType = ##class(FileType).%GetParameter("TXTFAVORITES")
	}
	elseif (globalName = "^VARPARA") {
		set key = $translate($piece(fullKey, ",", 1), """", "")

		if ('$data(^VARPARA(0, key))) {
			set fileName = ##class(DirectoryFile).ConcatPath(
				##class(Config).GetExternalNMUserParametersDir(),
				##class(FileControl).GetSafeFilename(key)_"."_
				##class(FileType).%GetParameter("TXTCUSTOMPARAMETERS"))
		}
		else {
			// just export it
			do ..TagItem(##class(FileType).%GetParameter("TXTCUSTOMUSERPARAMETERS"), key)
		}

		set fileType = ##class(FileType).%GetParameter("TXTCUSTOMUSERPARAMETERS")
	}

	if (fileName '= "") {
		if (($length(key) > 0) &&
		    ((##class(Config).IsBuildOnlyNonVAR() && ($extract(key, 1, $length("VAR")) = "VAR")) ||
			 (##class(Config).IsBuildOnlyVAR() && ($extract(key, 1, $length("VAR")) '= "VAR")))) {
		}
		else {
			do ##class(DirectoryFile).Delete(fileName, print)
			do ##class(GlobalBase).KillAuditInfo(fileType, key, userName, sessionId)
			write !, "Deleted: ", fileName
		}
	}

	quit $$$OK
]]></Implementation>
</Method>

<Method name="IsExporterBlocked">
<Description><![CDATA[
Queries the status of the Exporter]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit $data(^SourceControl("ExporterBlocked", $job))
]]></Implementation>
</Method>

<Method name="BlockExporter">
<Description><![CDATA[
During an import procedure, WWWSPEI gets called. Since there is a Hook to export
files when WWWSPEI is called, we must prevent that by turning on this flag before
starting the import procedure for the running process.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// This is not a persistence global, it is just a variable
	set ^SourceControl("ExporterBlocked", $job) = 1

	quit $$$YES
]]></Implementation>
</Method>

<Method name="ReleaseExporter">
<Description><![CDATA[
Releases the Exporter. Now in WWWSPEI, the exporter will be executed]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// This is not a persistence global, it is just a variable
	kill ^SourceControl("ExporterBlocked", $job)

	quit $$$YES
]]></Implementation>
</Method>
</Class>
</Export>