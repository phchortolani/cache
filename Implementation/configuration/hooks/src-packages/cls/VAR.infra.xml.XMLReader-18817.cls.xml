<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="Cache for Windows NT (Intel) 5.0.21 (Build 6408)">
<Class name="VAR.infra.xml.XMLReader">
<Description><![CDATA[
This class is almost a exact copy of %XML.TextReader. Is started extending it
but some wiseguy at Intersystems not only created this bggy and almost useless
implementation, but he also declared the Methods as FINAL, preventing anyone from
overriding them.

This is an attempt to solve those problems.

The methods that were changed are:

ParseFile
]]></Description>
    <IncludeCode>%occSAX</IncludeCode>
<Super>%RegisteredObject</Super>
<ClassDefinitionError>0</ClassDefinitionError>

<Property name="AttributeCount">
<Description><![CDATA[
Public property, Only applicable to element nodes. Returns the number of attributes on the current node.]]></Description>
      <Type>%Integer</Type>
</Property>

<Property name="Depth">
<Description><![CDATA[
Public property, The depth of the current node in the XML document.]]></Description>
      <Type>%Integer</Type>
</Property>

<Property name="EOF">
<Description><![CDATA[
Public property, true if the reader is positioned at the end of the stream; otherwise, false.]]></Description>
      <Type>%Boolean</Type>
</Property>

<Property name="HasAttributes">
<Description><![CDATA[
Public property, Gets a value indicating whether the current node has any attributes.
true if the current node has attributes; otherwise, false.]]></Description>
      <Type>%Boolean</Type>
</Property>

<Property name="HasValue">
<Description><![CDATA[
Public property, returns true if the node on which the reader is currently positioned can have a Value; 
otherwise, false. The following table lists node types and the corresponding value

Node Type                   Value
---------                   ----- 
attribute                   The value of the attribute. 
cdata                       The content of the CDATA section. 
comment                     The content of the comment. 
processinginstruction       The entire content of the processing instruction, excluding the target. 
ignorablewhitespace         The white space between markup in a mixed content model. 
chars                       The content of the text node. 
entity                      The expanded content of the entity
prefixmapping               The uri of the mapping]]></Description>
      <Type>%Boolean</Type>
</Property>

<Property name="IsEmptyElement">
<Description><![CDATA[
Public property, returns true if the current element is empty]]></Description>
      <Type>%Boolean</Type>
</Property>

<Property name="LocalName">
<Description><![CDATA[
Public property, The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.
The name returned is dependent on the NodeType of the node. The following node types return the listed values. 
All other node types return an empty string.

Name                    Value
----                    -----
Attribute               The name of the attribute. 
Element                 The tag name. ]]></Description>
      <Type>%String</Type>
</Property>

<Property name="Name">
<Description><![CDATA[
Public property,The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.
The name returned is dependent on the NodeType of the node. The following node types return the listed values. 
All other node types return an empty string.

Name                    Value
----                    -----
Attribute               The name of the attribute. 
Element                 The tag name. 
EntityReference         The name of the entity referenced. 
ProcessingInstruction   The target of the processing instruction.
Prefixmapping           The prefix of the mapping ]]></Description>
      <Type>%String</Type>
</Property>

<Property name="NamespaceUri">
<Description><![CDATA[
Public property, The namespace URI of the current node; otherwise an empty string.
This property is relevant to Element and Attribute nodes only.]]></Description>
      <Type>%String</Type>
</Property>

<Property name="NodeType">
<Description><![CDATA[
Public property, contains the node type of the current node as indicated by the 
following table

Node Type
---------
attribute
cdata
comment
processinginstruction
ignorablewhitespace
chars
element
entity
endelement]]></Description>
      <Type>%String</Type>
</Property>

<Property name="Path">
<Description><![CDATA[
Public property, contains the current path to the containing element]]></Description>
      <Type>%String</Type>
</Property>

<Property name="ReadState">
<Description><![CDATA[
Public property, returns the current read state of the reader
The following table lists the states and their meanings
State       Meaning
-----       -------
EndOfFile   The end of the file has been reached successfully. 
Initial     The Read method has not been called. 
Interactive The Read method has been called. Additional methods may be called on the reader. ]]></Description>
      <Type>%String</Type>
<InitialExpression>&quot;Initial&quot;</InitialExpression>
</Property>

<Property name="Value">
<Description><![CDATA[
Public property, returns the value of the current node. The following types have a value to return

Node Type                   Value
---------                   ----- 
attribute                   The value of the attribute. 
cdata                       The content of the CDATA section. 
comment                     The content of the comment. 
processinginstruction       The entire content of the processing instruction, excluding the target. 
ignorablewhitespace         The white space between markup in a mixed content model. 
chars                       The content of the text node. 
entity                      The expanded content of the entity]]></Description>
      <Type>%String</Type>
</Property>

<Property name="attrseq">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
</Property>

<Property name="hasContent">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="seq">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="target">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Method name="%OnClose">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill ^CacheTemp(i%target)
	Quit $$$OK
]]></Implementation>
    </Method>
    <Method name="%OnNew">
<FormalSpec>pInitval:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set i%target=pInitval
 Quit $$$OK
]]></Implementation>
    </Method>
    <Method name="AttributeCountGet">
<Description><![CDATA[
AttributeCount Implementation]]></Description>
      <ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[ Quit i%AttributeCount
]]></Implementation>
    </Method>
    <Method name="DepthGet">
<Description><![CDATA[
Depth Implementation]]></Description>
      <ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[ Quit i%Depth
]]></Implementation>
    </Method>
    <Method name="EOFGet">
<Description><![CDATA[
EOF Implementation]]></Description>
      <ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 If i%ReadState="Initial" Quit 0
 Quit '$Data(^CacheTemp(i%target,i%seq))
]]></Implementation>
    </Method>
    <Method name="HasAttributesGet">
<Description><![CDATA[
HasAttributes Implementation]]></Description>
      <ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[ Quit ''i%AttributeCount
]]></Implementation>
    </Method>
    <Method name="HasValueGet">
<Description><![CDATA[
HasValue Implementation]]></Description>
      <ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 New tResult Set tResult=1
 Do
 . If i%NodeType="attribute" Quit
 . If i%NodeType="cdata" Quit
 . If i%NodeType="comment" Quit
 . If i%NodeType="processinginstruction" Quit
 . If i%NodeType="ignorablewhitespace" Quit
 . If i%NodeType="chars" Quit
 . If i%NodeType="entity" Quit
 . Set tResult=0
 Quit tResult
]]></Implementation>
    </Method>
    <Method name="IsEmptyElementGet">
<Description><![CDATA[
IsEmptyElement Implementation]]></Description>
      <ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 New tRetval Set tRetval=0
 Do
 . If i%NodeType'="element" Quit
 . If $lg(^CacheTemp(i%target,i%seq+1),1)="endelement" Set tRetval=1
 Quit tRetval
]]></Implementation>
    </Method>
    <Method name="LocalNameGet">
<Description><![CDATA[
LocalName implementation]]></Description>
      <ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 New tName Set tName=""
 Do
 . If i%NodeType="attribute" Set tName=$li(^CacheTemp(i%target,i%seq,i%attrseq),2) Quit
 . If i%NodeType="element"||(i%NodeType="endelement") Set tName=$li(^CacheTemp(i%target,i%seq),3) Quit
 Quit tName
]]></Implementation>
    </Method>
    <Method name="MoveToAttributeIndex">
<Description><![CDATA[
 Moves to the attribute with the specified index. returns true on success false otherwise]]></Description>
      <FormalSpec>pIndex:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 New tRetval Set tRetval=0
 Do
 . If i%NodeType'="element"&&(i%NodeType'="attribute") Quit
 . If pIndex>i%AttributeCount!(pIndex<1) Quit
 . Set i%NodeType="attribute",i%attrseq=pIndex,tRetval=1
 Quit tRetval
]]></Implementation>
    </Method>
    <Method name="MoveToAttributeName">
<FormalSpec>pName:%String,pUri:%String=&quot;&quot;</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 New tRetval Set tRetval=0
 Do
 . If i%NodeType'="element"&&(i%NodeType'="attribute") Quit
 . New tI For tI=1:1:..AttributeCount Do  If tRetval Quit
 . . If $lg(^CacheTemp(i%target,i%seq,tI),2)'=pName Quit
 . . If pUri="" Set tRetval=1 Quit
 . . If pUri=$lg(^CacheTemp(i%target,i%seq,tI),1) Set tRetval=1 Quit
 . If tRetval=1 Set i%NodeType="attribute",i%attrseq=tI
 Quit tRetval
]]></Implementation>
    </Method>
    <Method name="MoveToContent">
<Description><![CDATA[
Checks whether the current node is a content (non-white space text, CDATA, Element, 
EndElement, EntityReference, or EndEntity) node. If the node is not a content node, the reader skips
ahead to the next content node or end of file. It skips over nodes of the following types: 
processinginstruction, comment, ignorablewhitespace,endelement]]></Description>
      <ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 New tOK,tEOF Set (tOK,tEOF)=0
 For  Do  Quit:tOK  Quit:tEOF
 . If ..hasContent=1 Set tOK=1 Quit
 . Set tEOF='..Read()
 Quit tOK
]]></Implementation>
    </Method>
    <Method name="MoveToElement">
<Description><![CDATA[
Moves to the associated element when the current node is of type attribute]]></Description>
      <ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 New tRetval Set tRetval=0
 Do
 . If i%NodeType'="attribute" Quit
 . Set i%NodeType="element",i%attrseq=0,tRetval=1
 Quit tRetval
]]></Implementation>
    </Method>
    <Method name="NameGet">
<Description><![CDATA[
Name implementation]]></Description>
      <ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 New tName Set tName=""
 Do
 . If i%NodeType="attribute" Set tName=$li(^CacheTemp(i%target,i%seq,i%attrseq),3) Quit
 . If i%NodeType="element"!(i%NodeType="endelement") Set tName=$li(^CacheTemp(i%target,i%seq),4) Quit
 . If i%NodeType="entity" Set tName=$li(^CacheTemp(i%target,i%seq),3) Quit
 . If i%NodeType="processinginstruction" Set tName=$li(^CacheTemp(i%target,i%seq),2) Quit
 . If i%NodeType="startprefixmapping"!(i%NodeType="endprefixmapping") Set tName=$li(^CacheTemp(i%target,i%seq),2) Quit
 Quit tName
]]></Implementation>
    </Method>
    <Method name="NamespaceUriGet">
<Description><![CDATA[
NamespaceUri Implementation]]></Description>
      <ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 New tNS Set tNS=""
 Do
 . If i%NodeType="attribute" Set tNS=$li(^CacheTemp(i%target,i%seq,i%attrseq),1) Quit
 . If i%NodeType="element"!(i%NodeType="endelement") Set tNS=$li(^CacheTemp(i%target,i%seq),2) Quit
 Quit tNS
]]></Implementation>
    </Method>
    <Method name="NodeTypeGet">
<Description><![CDATA[
NodeType implementation]]></Description>
      <ReturnType>%String</ReturnType>
<Implementation><![CDATA[ Quit i%NodeType
]]></Implementation>
    </Method>
    <Method name="ParseFile">
<Description><![CDATA[
Since we couldn't override this piece of cr, er, code, we copied it and
changed it here.

This method takes the name of a file to be parsed and a reference to a variable which,
upon success, will be set to a new instance of an %XML.TextReader. Optionally, additional
arguments specifying an Entity resolver, Flags , Mask and SchemaSpec be passed. 
Please see class %XML.SAX.Parser for a full description of these optional parameters.]]></Description>
      <Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Filename:%String,&amp;TextReader:%XML.TextReader,Resolver:%XML.SAX.EntityResolver=$$$NULLOREF,Flags:%Integer=$$$SAXDEFAULTS,Mask:%Integer=$$$SAXCONTENTEVENTS,SchemaSpec:%String=&quot;&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New %sc Set %sc=$$$OK
 Do
 #;
 #; Create an XML Sequencer for use as a content handler
 . New tHandler Set tHandler=##Class(SAXSequencer).%New("1") //This is the only change
 . If tHandler=$$$NULLOREF Set %sc=$$$ERROR($$$CannotCreateObject) Quit
 #;
 #; Now parse the file
 . Set %sc=##Class(%XML.SAX.Parser).ParseFile(Filename,tHandler,Resolver,Flags,Mask,SchemaSpec)
 . If $$$ISERR(%sc) Quit
 . Set TextReader=##Class(%XML.TextReader).%New(tHandler.Target)
 . If TextReader=$$$NULLOREF Set %sc=$$$ERROR($$$CannotCreateObject) Quit
 #;
 Quit %sc
]]></Implementation>
    </Method>
    <Method name="ParseStream">
<Description><![CDATA[
This method takes a Stream to be parsed and a reference to a variable which,
upon success, will be set to a new instance of an %XML.TextReader. Optionally, additional
arguments specifying an Entity resolver, Flags , Mask and SchemaSpec be passed. 
Please see class %XML.SAX.Parser for a full description of these optional parameters.]]></Description>
      <Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Stream:%Integer,&amp;TextReader:%XML.TextReader,Resolver:%XML.SAX.EntityResolver=$$$NULLOREF,Flags:%Integer=$$$SAXDEFAULTS,Mask:%Integer=$$$SAXCONTENTEVENTS,SchemaSpec:%String=&quot;&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New %sc Set %sc=$$$OK
 Do
 #;
 #; Create an XML Sequencer for use as a content handler
 . New tHandler Set tHandler=##Class(%XML.SAX.Utils.Sequencer).%New()
 . If tHandler=$$$NULLOREF Set %sc=$$$ERROR($$$CannotCreateObject) Quit
 #;
 #; Now parse the file
 . Set %sc=##Class(%XML.SAX.Parser).ParseStream(Stream,tHandler,Resolver,Flags,Mask,SchemaSpec)
 . If $$$ISERR(%sc) Quit
 . Set TextReader=##Class(%XML.TextReader).%New(tHandler.Target)
 . If TextReader=$$$NULLOREF Set %sc=$$$ERROR($$$CannotCreateObject) Quit
 #;
 Quit %sc
]]></Implementation>
    </Method>
    <Method name="ParseString">
<Description><![CDATA[
This method takes a String to be parsed and a reference to a variable which,
upon success, will be set to a new instance of an %XML.TextReader. Optionally, additional
arguments specifying an Entity resolver, Flags , Mask and SchemaSpec be passed. 
Please see class %XML.SAX.Parser for a full description of these optional parameters.]]></Description>
      <Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>String:%String,&amp;TextReader:%XML.TextReader,Resolver:%XML.SAX.EntityResolver=$$$NULLOREF,Flags:%Integer=$$$SAXDEFAULTS,Mask:%Integer=$$$SAXCONTENTEVENTS,SchemaSpec:%String=&quot;&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New %sc Set %sc=$$$OK
 Do
 #;
 #; Create an XML Sequencer for use as a content handler
 . New tHandler Set tHandler=##Class(%XML.SAX.Utils.Sequencer).%New()
 . If tHandler=$$$NULLOREF Set %sc=$$$ERROR($$$CannotCreateObject) Quit
 #;
 #; Now parse the String
 . Set %sc=##Class(%XML.SAX.Parser).ParseString(String,tHandler,Resolver,Flags,Mask,SchemaSpec)
 . If $$$ISERR(%sc) Quit
 . Set TextReader=##Class(%XML.TextReader).%New(tHandler.Target)
 . If TextReader=$$$NULLOREF Set %sc=$$$ERROR($$$CannotCreateObject) Quit
 Quit %sc
]]></Implementation>
    </Method>
    <Method name="PathGet">
<Description><![CDATA[
Implementation of Path property.]]></Description>
      <ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 If i%NodeType="element" Quit i%Path
 Quit ""
]]></Implementation>
    </Method>
    <Method name="Read">
<Description><![CDATA[
Reads the next node from the stream.
Returns true if the next node was read successfully; false if there are no more nodes to read.
When an XmlReader is first created and initialized, there is no information available. You must 
call Read to read the first node.]]></Description>
      <ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 New tAtEnd Set tAtEnd=0
 Do
 . Set i%attrseq=0,i%seq=i%seq+1
 . Set tAtEnd=..EOF If tAtEnd Set i%ReadState="EndOfFile" Quit
 . If i%ReadState="Initial" Set i%ReadState="Interactive" 
 . Set i%NodeType=$li(^CacheTemp(i%target,i%seq),1)
 . If i%NodeType="element" Do
 . . Set i%AttributeCount=$list(^CacheTemp(i%target,i%seq),5)
 . . Set i%Depth=i%Depth+1
 . . Set i%Path=i%Path_"/"_..Name
 . Else  Set i%AttributeCount=0
 . If i%NodeType="endelement" Do
 . . Set i%Depth=i%Depth-1
 . . Set i%Path=$Piece(i%Path,"/",1,$Length(i%Path,"/")-1)
 Quit 'tAtEnd
]]></Implementation>
    </Method>
    <Method name="ReadStartElement">
<Description><![CDATA[
Advances to the first element that matches the provided name and (optional) namespace uri
Returns true on success, false if the element could not be matched]]></Description>
      <FormalSpec>pName:%String,pUri:%String=&quot;&quot;</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 New tOK,tEOF Set (tOK,tEOF)=0
 For  Do  Quit:tOK  Quit:tEOF
 . If i%NodeType="element",..Name=pName Do  If tOK Quit
 . . If pUri="" Set tOK=1 Quit
 . . If pUri=..NamespaceUri Set tOK=1
 . Set tEOF='..Read()
 Quit tOK
]]></Implementation>
    </Method>
    <Method name="ReadStateGet">
<Description><![CDATA[
ReadState Implementation]]></Description>
      <ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 New tState Set tState="Interactive"
 Do
 . If i%ReadState="Initial" Set tState="Initial" Quit
 . If ..EOF Set tState="EndOfFile"
 Quit tState
]]></Implementation>
    </Method>
    <Method name="Rewind">
<Description><![CDATA[
Resets the reader to the initial state]]></Description>
      <Implementation><![CDATA[	Set i%attrseq=0,i%seq=0,i%AttributeCount=0,i%ReadState="initial",i%Depth=0
]]></Implementation>
    </Method>
    <Method name="ValueGet">
<Description><![CDATA[
Value Implementation]]></Description>
      <ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 New tValue Set tValue=""
 Do
 . If i%NodeType="attribute" Set tValue=$li(^CacheTemp(i%target,i%seq,i%attrseq),5) Quit
 . If i%NodeType="cdata" Set tValue=$li(^CacheTemp(i%target,i%seq),2) Quit
 . If i%NodeType="comment" Set tValue=$li(^CacheTemp(i%target,i%seq),2) Quit
 . If i%NodeType="processinginstruction" Set tValue=$li(^CacheTemp(i%target,i%seq),3) Quit
 . If i%NodeType="ignorablewhitespace" Set tValue=$li(^CacheTemp(i%target,i%seq),2) Quit
 . If i%NodeType="chars" Set tValue=$li(^CacheTemp(i%target,i%seq),2) Quit
 . If i%NodeType="entity" Set tValue=$li(^CacheTemp(i%target,i%seq),2) Quit
 . If i%NodeType="error" Set tValue=$li(^CacheTemp(i%target,i%seq),2) Quit
 . If i%NodeType="fatalerror" Set tValue=$li(^CacheTemp(i%target,i%seq),2) Quit
 . If i%NodeType="warning" Set tValue=$li(^CacheTemp(i%target,i%seq),2) Quit
 . If i%NodeType="startprefixmapping" Set tValue=$li(^CacheTemp(i%target,i%seq),3) Quit
 Quit tValue
]]></Implementation>
    </Method>
    <Method name="hasContentGet">
<Description><![CDATA[
HasContent Implementation]]></Description>
      <Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 New tRetval Set tRetval=1
 Do
 . If i%NodeType="element" Quit
 . If i%NodeType="endelement" Quit
 . If i%NodeType="cdata" Quit
 . If i%NodeType="chars" Quit
 . If i%NodeType="entity" Quit
 . Set tRetval=0
 Quit tRetval
]]></Implementation>
    </Method>
  </Class>
</Export>