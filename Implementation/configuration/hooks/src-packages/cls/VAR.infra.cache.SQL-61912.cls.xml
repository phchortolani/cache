<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache for Windows (x86-32) 2008.2 (Build 615U)">
<Class name="VAR.infra.cache.SQL">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<Method name="GrantOnAllTables">
<ClassMethod>1</ClassMethod>
<FormalSpec>schema:%String,user:%String,select:%Boolean,insert:%Boolean,delete:%Boolean,update:%Boolean,references:%Boolean</FormalSpec>
<Implementation><![CDATA[
	set %msql = "_SYSTEM"
	set owner = ""
	set sc = ##class(%SQLCatalog).SQLTablesExecute(.qhandle, owner)
	set sql = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set grants = ""
	set count = 0
	if (select) set $piece(grants, ", ", $increment(count)) = "SELECT"
	if (insert) set $piece(grants, ", ", $increment(count)) = "INSERT"
	if (delete) set $piece(grants, ", ", $increment(count)) = "DELETE"
	if (update) set $piece(grants, ", ", $increment(count)) = "UPDATE"
	if (references) set $piece(grants, ", ", $increment(count)) = "REFERENCES"
	
	set row = ""
	set atEnd = 0
	while (1)
	{
		set sc = ##class(%SQLCatalog).SQLTablesFetch(.qhandle, .row, .atEnd)
		quit:atEnd
 
		continue:(($length(schema) > 0) &&
			($piece($list(row, 1), ".", 1, $length($list(row, 1), ".") - 1) '= schema))
		
		write "Granting access on table '", $list(row, 1), "' to user '", user, "'", $char(13), $char(10)
		do sql.Prepare("GRANT "_grants_" ON "_$list(row, 1)_" TO "_user)
		do sql.Execute()
	}
	do ##class(%SQLCatalog).SQLTablesClose($get(qhandle))
]]></Implementation>
    </Method>
    <Method name="RevokeOnAllTables">
<ClassMethod>1</ClassMethod>
<FormalSpec>schema:%String,user:%String,select:%Boolean,insert:%Boolean,delete:%Boolean,update:%Boolean,references:%Boolean</FormalSpec>
<Implementation><![CDATA[
	set %msql = "_SYSTEM"
	set owner = ""
	set sc = ##class(%SQLCatalog).SQLTablesExecute(.qhandle, owner)
	set sql = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set grants = ""
	set count = 0
	if (select) set $piece(grants, ", ", $increment(count)) = "SELECT"
	if (insert) set $piece(grants, ", ", $increment(count)) = "INSERT"
	if (delete) set $piece(grants, ", ", $increment(count)) = "DELETE"
	if (update) set $piece(grants, ", ", $increment(count)) = "UPDATE"
	if (references) set $piece(grants, ", ", $increment(count)) = "REFERENCES"
	
	set row = ""
	set atEnd = 0
	while (1)
	{
		set sc = ##class(%SQLCatalog).SQLTablesFetch(.qhandle, .row, .atEnd)
		quit:atEnd
 
		continue:(($length(schema) > 0) &&
			($piece($list(row, 1), ".", 1, $length($list(row, 1), ".") - 1) '= schema))
		
		write "Revoking access on table '", $list(row, 1), "' from user '", user, "'", $char(13), $char(10)
		do sql.Prepare("REVOKE "_grants_" ON "_$list(row, 1)_" FROM "_user)
		do sql.Execute()
	}
	do ##class(%SQLCatalog).SQLTablesClose($get(qhandle))
]]></Implementation>
    </Method>
  </Class>
</Export>