<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache for Windows (x86-32) 2008.2 (Build 615U)">
<Class name="VAR.infra.cache.Task">
<Description><![CDATA[
Notes: 

On CachÃ© 5 the parameter "Subjetc" in Insert() method only supports a description with max 16 characters.]]></Description>
    <ClassType/>
<Import>VAR.infra.util</Import>
<IncludeCode>VARUtil,VARLog</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<Method name="PrintList">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set rset = ##class(%ResultSet).%New("%SYSTEM.Task:TaskListDetail")
	do rset.Execute()

	while rset.Next()
	{
		do ..Print(rset.Data("ID"))
	}
]]></Implementation>
    </Method>
    <Method name="Print">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<Implementation><![CDATA[
	write "ID: ", id, !

	set task = ##class(%SYSTEM.Task).%OpenId(id)
	write "Name: ", task.Name, !
	write "NameSpace: ", task.NameSpace, !
	write "Description: ", task.Description, !
	if ($SYSTEM.Version.GetNumber() < 2008.1) {
		write "Continue After Error: ", task.ContinueAfterError, !
	}
	write "Daily End Time: ", $zdateTime(task.DailyEndTime), !
	write "Daily Frequency: ", task.DailyFrequency, !
	write "Daily Frequency Time: ", task.DailyFrequencyTime, !
	write "Daily Increment: ", task.DailyIncrement, !
	write "Daily Start Time: ", $ztime(task.DailyStartTime), !
	write "Day Next Scheduled: ", $zdateTime(task.DayNextScheduled), !
	write "ER: ", task.ER, !
	write "End Date: ", $zdateTime(task.EndDate), !
	write "Error: ", task.Error, !
	if ($SYSTEM.Version.GetNumber() >= 2008.1) {
		if ($listlength(task.Settings) = 2) {
			write "Execute Code: ", $listget(task.Settings, 2), !
		}
	}
	else {
		write "Execute Code: ", task.ExecuteCode, !
	}
	write "Expires: ", task.Expires, !
	write "Expires Days: ", task.ExpiresDays, !
	write "Expires Hours: ", task.ExpiresHours, !
	write "Expires Minutes: ", task.ExpiresMinutes, !
	write "Is Batch: ", task.IsBatch, !
	write "Last Finished: ", $zdateTime(task.LastFinished), !
	write "Last Schedule: ", $zdateTime(task.LastSchedule), !
	write "Last Started: ", $zdateTime(task.LastStarted), !
	write "Open Output File: ", task.OpenOutputFile, !
	write "Output Directory: ", task.OutputDirectory, !
	write "Output Filename: ", task.OutputFilename, !
	write "Priority: ", task.Priority, !
	write "Reschedule On Start: ", task.RescheduleOnStart, !
	if ($SYSTEM.Version.GetNumber() < 2008.1) {
		write "Run After Job Number: ", task.RunAfterJobNumber, !
	}
	write "Running Job Number: ", task.RunningJobNumber, !
	write "Start Date: ", $zdateTime(task.StartDate), !
	write "Status: ", task.Status, !
	write "Suspended: ", task.Suspended, !
	write "Time Next Scheduled: ", task.TimeNextScheduled, !
	write "Time Period: ", task.TimePeriod, !
	write "Time Period Day: ", task.TimePeriodDay, !
	write "Time Period Every: ", task.TimePeriodEvery, !!
]]></Implementation>
    </Method>
    <Method name="Insert">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String="%SYS&quot;,subject:%String,command:%String,isBatch:%Boolean=0,timePeriod:%Integer=0,timePeriodEvery:%String="&quot;,timePeriodDay:%String=0,dailyFrequency:%Integer=0,dailyStartTime:%Integer=0,startDate:%Date="&quot;,taskLogFilename:%String,&amp;task:%SYSTEM.Task,dailyIncrement:%String="&quot;,dailyFrequencyTime:%Integer="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $get(startDate) = "" set startDate = +$horolog

	set taskDir = ##class(DirectoryFile).GetOSDir(
		##class(DirectoryFile).GetNamespaceSubdir("task"))
	if ('##class(DirectoryFile).Exists(taskDir))
	{
		if ('##class(DirectoryFile).CreateDir(taskDir))
		{
			quit $$$CUSTOMERROR("Error while trying to create directory '"_taskDir_"'")
		}
	}

	set task = ##class(%SYSTEM.Task).OpenId(subject)
	if ($isObject(task)) {
		set executionCode = ""
		if ($SYSTEM.Version.GetNumber() >= 2008.1) {
			if ($listlength(task.Settings) = 2) {
				set executionCode = $listget(task.Settings, 2)
			}
		}
		else {
			set executionCode = task.ExecuteCode
		}

		if ((##class(Strings).UpperCase(task.NameSpace) '=
				##class(Strings).UpperCase(namespace)) ||
			(executionCode '= command)) {
			do ..Delete(subject, .id)
		}
		else {
			quit $$$OK
		}
	}
	kill task

	if ($SYSTEM.Version.GetNumber() >= 2008.1) {
		set task = ##class(%SYS.Task).%New()
		set task.Settings = $listbuild("ExecuteCode", command)
		set task.TaskClass = "%SYS.Task.RunLegacyTask"
	} 
	else {
		set task = ##class(%SYSTEM.Task).%New()
		set task.ExecuteCode = command
		set task.ContinueAfterError = 1
	}
	set task.Name = subject
	set task.Description = subject
	set task.NameSpace = namespace
	set task.IsBatch = isBatch
	set task.TimePeriod = timePeriod
	set task.TimePeriodEvery = timePeriodEvery
	set task.TimePeriodDay = timePeriodDay
	set task.DailyFrequency = dailyFrequency
	set task.DailyStartTime = dailyStartTime
	set task.DailyIncrement = dailyIncrement
	set task.DailyFrequencyTime = dailyFrequencyTime
	set task.StartDate = startDate
	set task.OpenOutputFile = 1
	set task.OutputDirectory = taskDir
	set task.OutputFilename = taskLogFilename
	quit task.%Save()
]]></Implementation>
    </Method>
    <Method name="Delete">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,&amp;id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set id = ""
	if ($get(name) = "") quit 0

	set task = ##class(%SYSTEM.Task).OpenId(name)
	if ('$isObject(task)) quit 0

	set id = task.%Id()	
	quit task.%DeleteId(id)
]]></Implementation>
    </Method>
    <Method name="Resume">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,&amp;id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set id = ""
	if ($get(name) = "") quit 0

	set task = ##class(%SYSTEM.Task).OpenId(name)
	if ('$isObject(task)) quit 0

	set id = task.%Id()	
	quit task.Resume(id)
]]></Implementation>
    </Method>
  </Class>
</Export>