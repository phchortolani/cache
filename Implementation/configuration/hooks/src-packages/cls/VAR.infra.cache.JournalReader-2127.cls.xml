<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="Cache for Windows NT (Intel) 5.0.21 (Build 6408)">
<Class name="VAR.infra.cache.JournalReader">
<IncludeCode>VARLog</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<ClassDefinitionError>0</ClassDefinitionError>

<Method name="GetCurrentJournalFile">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $piece($zutil(78, 21), ",", 2, 2)
]]></Implementation>
    </Method>
    <Method name="ReadJournalFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>intJobId:%Integer=0,strJournalFile:%String=&quot;&quot;,blnPrint:%Boolean=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if (intJobId = 0) set intJobId = $job
	if ($length(strJournalFile) = 0) set strJournalFile = ..GetCurrentJournalFile()

	quit ..ProcessJournalFile(intJobId, strJournalFile, 1, 0, blnPrint)
]]></Implementation>
    </Method>
    <Method name="SavePoint">
<ClassMethod>1</ClassMethod>
<FormalSpec>intJobId:%Integer=0,strJournalFile:%String=&quot;&quot;,intAdr:%Integer=0,blnPrint:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
	if (intJobId = 0) set intJobId = $job
	if ($length(strJournalFile) = 0) set strJournalFile = ..GetCurrentJournalFile()
	if (intAdr = 0)
	{
		if ('..ProcessJournalFile(intJobId, strJournalFile, 0, .intAdr, blnPrint))
		{
			set intAdr = 0
		}
	}
	
	set ^Journal("SAVEPOINT", intJobId, strJournalFile) = intAdr
]]></Implementation>
    </Method>
    <Method name="ClearPoint">
<ClassMethod>1</ClassMethod>
<FormalSpec>intJobId:%Integer=0,strJournalFile:%String=&quot;&quot;</FormalSpec>
<Implementation><![CDATA[
	if (intJobId = 0) set intJobId = $job
	if ($length(strJournalFile) = 0) set strJournalFile = ..GetCurrentJournalFile()
	
	set ^Journal("SAVEPOINT", intJobId, strJournalFile) = 0
]]></Implementation>
    </Method>
    <Method name="LogJournalSaved">
<ClassMethod>1</ClassMethod>
<FormalSpec>intJobSrcId:%Integer=0,intJobId:%Integer=0</FormalSpec>
<Implementation><![CDATA[
	if (intJobSrcId = 0) set intJobSrcId = $job
	if (intJobId = 0) set intJobId = $job

	set id = "^Journal("_intJobSrcId_", ""tran"", """")"
	for {
		set id = $query(@id)
		quit:(($length(id) = 0) ||
			  ($piece(id, ",", 1) '= ("^Journal("_intJobSrcId)))
		continue:((intJobId '= -1) && ($piece(id, ",", 4) '= intJobId))

		$$$VARLOGINFO(">> "_@id)
	}
]]></Implementation>
    </Method>
    <Method name="ProcessJournalFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>intJobId:%Integer,strJournalFile:%String,blnSaveRead:%Boolean,&amp;intLastJobAdr:%Integer,blnPrint:%Boolean</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if (blnSaveRead) kill ^Journal($job)

	set lstDirNamespace = ##class(Namespace).GetDirNamespaceList()

	set intJournalHandle = $zutil(78, 5, strJournalFile, 0)
	if (intJournalHandle < 0)
	{
		$$$VARLOGERROR("Error opening journal file '"_strJournalFile_"'")
		if (blnPrint) write !, "Error opening journal file '"_strJournalFile_"'"
		quit 0
	}

	set intReadAccess = $zutil(78, 6, intJournalHandle)

	set intLastIndex = $zutil(78, 18, 0)
	set intLastIndex = $zutil(78, 18, intLastIndex)

	if ('blnSaveRead)
	{
		set intLastJobAdr = intLastIndex
	}
	elseif (intLastIndex)
	{
		set intAdr = 0
		if ($data(^Journal("SAVEPOINT", intJobId, strJournalFile)))
		{
			set intAdr = ^Journal("SAVEPOINT", intJobId, strJournalFile)
		}

		while (1)
		{
			set nextadr = $zu(78, 17, intAdr)
			quit:(('nextadr) || (nextadr < intAdr))

			set $ztrap = "SkipRec"

			set intAdr = nextadr
			set type = $zutil(78, 8, intAdr)
			quit:(type = -1)

			if ($zversion(1) = 1)
			{
				set pid = $zhex($zutil(78, 10, intAdr))
			}
			else
			{
				set pid = $zutil(78, 10, intAdr)
			}
			if (blnSaveRead && blnPrint) $$$VARLOGINFO("Record: adr="_intAdr_", "_"pid="_pid_", type="_type)
			if (blnPrint) write !, "Record: adr="_intAdr_", "_"pid="_pid_", type="_type

			continue:((intJobId '= -1) && (pid '= intJobId))

			if (type = 4) // TSTART
			{
				set ^Journal($job, "tran", $increment(^Journal($job, "tran")),
					pid, type) = "TSTART"
				continue
			}
			elseif (type = 5) // TCOMMIT
			{
				set ^Journal($job, "tran", $increment(^Journal($job, "tran")),
					pid, type) = "TCOMMIT"
				continue
			}
			elseif (type = 13) // JOURNAL MARKER
			{
				set x = $zutil(78, 35, intAdr)
				set ^Journal($job, "tran", $increment(^Journal($job, "tran")),
					pid, type) = "adr="_intAdr_", "_
					"journalFile="_strJournalFile_", "_
					"1="_$piece(x, ",")_", 2="_$piece(x, ",", 2)_", "_
					"3="_$piece(x, ",", 3)_", 4="_$piece(x, ",", 4, $length(x))
				continue
			}

			set dir = $zutil(78, 12, intAdr)
			continue:('$length(dir))

			// 1st time for each directory, fill mounted info ...
			if ('$data(dbcol(dir)))
			{
				set dbcol(dir) = $piece($zutil(49, dir), ",", 13)
			}

			set newref = $zutil(78, 13, intAdr)
			if (lstDirNamespace.IsDefined(dir))
			{
				set $piece(newref, """", 2) = lstDirNamespace.GetAt(dir)
			}

			if (type = 6) // SET
			{
				set ^Journal($job, "tran", $increment(^Journal($job, "tran")),
					pid, type) = "set "_newref_" = """_$zutil(78, 15, intAdr)_""""
			}
			elseif (type = 7) // KILL
			{
				set ^Journal($job, "tran", $increment(^Journal($job, "tran")),
					pid, type) = "kill "_newref
			}
			elseif (type = 9) // ZKILL
			{
				set ^Journal($job, "tran", $increment(^Journal($job, "tran")),
					pid, type) = "zkill "_newref
			}
			elseif (type = 14) // SET $BIT
			{
				set ^Journal($job, "tran", $increment(^Journal($job, "tran")),
					pid, type) = "set $bit("_newref_", "_$zutil(78, 36, intAdr)_")"_
						" = """_$zutil(78, 37, intAdr)_""""
			}
			continue

SkipRec
			set $ztrap = "SkipRecFinal"

			set ^Journal($job, "errors", "all",
				$increment(^Journal($job, "errors", "all"))) =
				$listBuild($get(strJournalFile), $get(intAdr), $zerror)

			set dirname = $select($get(intAdr):$zutil(78, 12, intAdr), 1:"<unknown>")

			// if this is the 1st error for this directory then count another db err
			if ('$get(^Journal($job, "errors", "db", dirname)))
			{
				// databases with errors
				set ^Journal($job, "errors", "db",
					$increment(^Journal($job, "errors", "db"))) = dirname
			}

			set ^Journal($job, "errors", "db", dirname,
				$increment(^Journal($job, "errors", "db", dirname))) =
				$listBuild($get(strJournalFile), $get(intAdr), $zerror)
			set strError = "  Error: "_$zerror_$char(10,13)_"     "_
				strJournalFile_" addr="_$get(intAdr)_$char(10,13)_"     "_
				$zutil(78, 13, intAdr)
			$$$VARLOGERROR(strError)
			if (blnPrint) write !, strError

SkipRecFinal
		}

		set intLastIndex = $zutil(78, 18, 0) // probably not needed
	}
	set intClose = $zutil(78, 7, intJournalHandle)
 
	quit 1
]]></Implementation>
    </Method>
  </Class>
</Export>