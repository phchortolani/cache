<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache for Windows (x86-32) 2008.2 (Build 615U)">
<Class name="VAR.update.ScriptRelease">
<ClassType/>
<Import>VAR.infra.util</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<Parameter name="VERSIONPARAMS">
<Type>%String</Type>
<Default>^VAR.update.VersionUpdater("VERSIONPARAMS")</Default>
</Parameter>

<Parameter name="COMPUTERNAMES">
<Type>%String</Type>
<Default>^VAR.update.VersionUpdater("COMPUTERNAMES")</Default>
</Parameter>

<Parameter name="NAMESPACES">
<Type>%String</Type>
<Default>^VAR.update.VersionUpdater("NAMESPACES")</Default>
</Parameter>

<Property name="updater">
<Type>VersionUpdater</Type>
<Private>1</Private>
</Property>

<Method name="SetUpdater">
<FormalSpec>obj:VersionUpdater</FormalSpec>
<Implementation><![CDATA[	set ..updater = obj
]]></Implementation>
    </Method>
    <Method name="Update">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK

	set currentVersion = ..GetCurrentVersion()
	set majorReleaseBkp = +$piece(currentVersion, ".", 1)
	set minorReleaseBkp = +$piece(currentVersion, ".", 2)
	set build = +$piece(currentVersion, ".", 3)
	for {
		set methodName = "UpdateBuild"_##class(Strings).FormatNumber(build, 3)
		set classMethod = ..%ClassName(1)_"||"_methodName
		set methodDefinition =
			##class(%Dictionary.MethodDefinition).%OpenId(classMethod)
		if ('$isObject(methodDefinition)) {
			quit
		}

		write !, "    Calling update routine for build "_
			##class(Strings).FormatNumber(build, 3)
		set status = ..Run(methodName)
		write !, "    Routine finished"

		set currentVersion = ..GetCurrentVersion()
		set buildBkp = build
		set majorRelease = +$piece(currentVersion, ".", 1)
		set minorRelease = +$piece(currentVersion, ".", 2)
		set build = +$piece(currentVersion, ".", 3)
		if (status '= $$$OK) {
			write !, "    Error: "_##class(Errors).GetErrorFromErrorStatus(status)
			quit
		}
		elseif ((majorRelease '= majorReleaseBkp) ||
		        (minorRelease '= minorReleaseBkp) ||
		        (build = buildBkp)) {
			quit
		}
	}

	quit status
]]></Implementation>
    </Method>
    <Method name="Run">
<FormalSpec>methodName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap = "TransactionError"

	tstart

	set status = $zobjmethod(##this, methodName)
	if (status = $$$OK) {
		if ($tlevel > 0) tcommit
	}
	else {
		trollback
	}

	set $ztrap = ""

	quit status

TransactionError
	set error = $zerror
	set $ztrap = ""

	trollback
	set $zerror = error
	set status = ##class(Errors).MakeErrorStatus("ROLLBACK: "_error)

	quit status
]]></Implementation>
    </Method>
    <Method name="GetCurrentVersion">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..updater.GetCurrentVersion()
]]></Implementation>
    </Method>
    <Method name="IncMajorRelease">
<Implementation><![CDATA[	do ..updater.IncVersion(1)
]]></Implementation>
    </Method>
    <Method name="IncMinorRelease">
<Implementation><![CDATA[	do ..updater.IncVersion(2)
]]></Implementation>
    </Method>
    <Method name="IncBuild">
<Implementation><![CDATA[	do ..updater.IncVersion(3)
]]></Implementation>
    </Method>
    <Method name="SetParameter">
<FormalSpec>name:%String,value:%String</FormalSpec>
<Implementation><![CDATA[
	if ($length(name) = 0) quit

	set @(..#VERSIONPARAMS)@(..GetCurrentVersion(),name) = value
]]></Implementation>
    </Method>
    <Method name="GetParameter">
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ($length(name) = 0) quit ""

	quit $get(@(..#VERSIONPARAMS)@(..GetCurrentVersion(),name))
]]></Implementation>
    </Method>
    <Method name="GetAcceptanceTestComputers">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $get(@(..#COMPUTERNAMES)@("AcceptanceTest"))
]]></Implementation>
    </Method>
    <Method name="SetAcceptanceTestComputers">
<FormalSpec>names:%String</FormalSpec>
<Implementation><![CDATA[	set @(..#COMPUTERNAMES)@("AcceptanceTest") = ##class(Strings).UpperCase(names)
]]></Implementation>
    </Method>
    <Method name="IsAcceptanceTestComputer">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set found = 0
	set names = $get(@(..#COMPUTERNAMES)@("AcceptanceTest"))
	set computerName = ##class(Util).GetComputerName()
	for i = 1:1:$length(names, ",") {
		if ($piece(names, ",", i) = computerName) {
			set found = 1
			quit
		}
	}

	quit found
]]></Implementation>
    </Method>
    <Method name="GetProductionComputers">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $get(@(..#COMPUTERNAMES)@("Production"))
]]></Implementation>
    </Method>
    <Method name="SetProductionComputers">
<FormalSpec>names:%String</FormalSpec>
<Implementation><![CDATA[	set @(..#COMPUTERNAMES)@("Production") = ##class(Strings).UpperCase(names)
]]></Implementation>
    </Method>
    <Method name="IsProductionComputer">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set found = 0
	set names = $get(@(..#COMPUTERNAMES)@("Production"))
	set computerName = ##class(Util).GetComputerName()
	for i = 1:1:$length(names, ",") {
		if ($piece(names, ",", i) = computerName) {
			set found = 1
			quit
		}
	}

	quit found
]]></Implementation>
    </Method>
    <Method name="GetShadowComputers">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $get(@(..#COMPUTERNAMES)@("Shadow"))
]]></Implementation>
    </Method>
    <Method name="SetShadowComputers">
<FormalSpec>names:%String</FormalSpec>
<Implementation><![CDATA[	set @(..#COMPUTERNAMES)@("Shadow") = ##class(Strings).UpperCase(names)
]]></Implementation>
    </Method>
    <Method name="IsShadowComputer">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set found = 0
	set names = $get(@(..#COMPUTERNAMES)@("Shadow"))
	set computerName = ##class(Util).GetComputerName()
	for i = 1:1:$length(names, ",") {
		if ($piece(names, ",", i) = computerName) {
			set found = 1
			quit
		}
	}

	quit found
]]></Implementation>
    </Method>
    <Method name="GetIntegrationNamespaces">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $get(@(..#NAMESPACES)@("Integration"))
]]></Implementation>
    </Method>
    <Method name="SetIntegrationNamespaces">
<FormalSpec>names:%String</FormalSpec>
<Implementation><![CDATA[	set @(..#NAMESPACES)@("Integration") = ##class(Strings).UpperCase(names)
]]></Implementation>
    </Method>
    <Method name="IsIntegrationNamespace">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set found = 0
	set names = $get(@(..#NAMESPACES)@("Integration"))
	set namespace = ##class(Util).GetNamespace()
	for i = 1:1:$length(names, ",") {
		if ($piece(names, ",", i) = namespace) {
			set found = 1
			quit
		}
	}

	quit found
]]></Implementation>
    </Method>
  </Class>
</Export>