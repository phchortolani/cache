<PUBLIC:COMPONENT TAGNAME="menu" LIGHTWEIGHT> 
	<PUBLIC:ATTACH EVENT="oncontentready" ONEVENT="cReady();" />
	<PUBLIC:ATTACH EVENT="onclick" ONEVENT="menuClick();" />
	<PUBLIC:ATTACH EVENT="onmouseover" ONEVENT="menuItemOver();" />
	<PUBLIC:ATTACH EVENT="onmouseout" ONEVENT="menuItemOut();" />
	<PUBLIC:EVENT NAME="onsubmenu_click" ID="propId" />  
    <PUBLIC:DEFAULTS style="cursor:default" />
    <PUBLIC:PROPERTY NAME="backColor" VALUE="menu"/>
    <PUBLIC:PROPERTY NAME="access" VALUE="enabled"/>
    <PUBLIC:PROPERTY NAME="bAlt" VALUE="false"/>
    <PUBLIC:PROPERTY NAME="bCtrl" VALUE="false"/>
    <PUBLIC:PROPERTY NAME="keyValue" VALUE=""/>
</PUBLIC:COMPONENT>
<script language="jscript">
////////////////////////////////////////////////////////////////////////////////////
// Global Variables
////////////////////////////////////////////////////////////////////////////////////
var minMenuWidth = 50;          // Minimum width for the children of the popUp
var mColor = "menu";		    // Default color used for the backgroundColor
var menuHeight = 23;            // Menu height
var defaultWidth;               // Variable to store the width of the text for an element
var srcElem = null;             // Object to the source element which generated the click event
var ix = "";                    // Left position of the pop-up window
var iy = "";                    // Top position of the pop-up window
var iHeight = "";               // Height of the pop-up window
var iWidth = "";                // Width of the pop-up window
var popUp;                      // The pop-up window object
var popUpLastIdx = -1;          // Holds the idx of the last selectde object on the popUp window
var menuWidth = 0;              // Temporary variable to store the width of each menu item
var maxMenuWidth = 0;           // Variable to store the maximum menuWidth
// CVP: global array that holds all hotkeys associated with menu entries
var HotKeys = new Array();					// HotKeys[id]=hk
// hotkeys are defined as JS objects
function loadHotKey( id, keyValue, bAlt, bCtrl){
    if( keyValue != null && keyValue != ""){
		if(bAlt == null || bAlt == ""){
		    bAlt = "false";
		}
		if(bCtrl == null || bCtrl == ""){
		    bCtrl = "false";
		}
		//alert( "id="+id+";"+keyValue+" ;"+bAlt+" ;"+bCtrl);
		var intKey = keyValue.charCodeAt(0);
		var hk = new hotKeyObject(intKey, bAlt, bCtrl);
		// alert( hk.key+hk.alt+hk.ctrl);
		HotKeys[id] = hk;
	}    
}

function hotKeyObject( key, alt, ctrl){
	this.length = 3;
	this.key = key;
	this.alt = alt;
	this.ctrl = ctrl;
}

// set's visibility/access to the element
function setAccess(){

	var enbl = true;
	var vis = "block";
	
	switch( this.access){
		case "hidden":
			vis = "none"; enbl = false;
			// element.setAccess("none",false);
			break;
		case "enabled":
			vis = "block"; enbl = true;
			// element.setAccess("block",true);
			break;
		case "disabled":
			vis = "block"; enbl = false;
			// element.setAccess("block",false);
			break;
		default:
			vis = "block"; enbl = true;
			// element.setAccess("block",true);
			break;
	}

	if( vis == "none"){
		// if we want to make this visible again they should be set to:
        // this.style.display = "";
        // this.style.visibility = "";
        // which means inherited; if we try to set them to "block" and "visible", they'll wrap around
        this.style.display = "none";
        this.style.visibility = "hidden";
	}else{
		if( enbl){
			this.style.color = "black";
		}else{
			this.style.color = "gray";
			this.style.fontStyle = "italic";
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////
// Function : cReady
// Executed : Executes when oncontentready fires on the HTC document.
// Usage : Oncontentready is used to set initial values and styles once the content
//      of the HTC is parsed.
////////////////////////////////////////////////////////////////////////////////////
function cReady(){
    // Define the style for the current element
    if(backColor == null || backColor == ""){
        element.style.backgroundColor = mColor;
    }else{ 
        mColor = backColor;
        element.style.backgroundColor = mColor;
    }
    
    // attach the hot key loader
    element.loadHotKey = loadHotKey;
    element.setAccess = setAccess;
    
    element.style.fontFamily = "Verdana";
    //element.style.height = menuHeight;
    element.style.height = "20px";  //FIS;16.04.2003
    //element.style.padding = 4;
    element.style.paddingBottom = 2;  //FIS;16.04.2003
    element.style.paddingRight = 4;
    element.style.paddingTop = 2;
    element.style.paddingLeft = 4;
    element.style.fontSize = "11px";
    //element.style.border = "1px solid";
    //element.style.borderColor = mColor;
    element.style.border = "1px solid";  //FIS;16.04.2003
    element.style.borderBottomColor = "ButtonShadow";
    element.style.borderRightColor = "ButtonShadow";
    element.style.borderTopColor = "ButtonHighlight";
    element.style.borderLeftColor = "ButtonHighlight";

    // Set the menuWidth variable to the length of the sz string
	// element.style.width = InnerText(element.innerHTML).length * 10; // see fontSize above


	setAccess();

	// Hide all the first-level children for the Behavior
	if(element.children.length > 0){
		for(var i = 0; i < element.children.length; i++){
            element.children[i].style.fontSize = "10px";
            element.children[i].style.display = "none";
            element.children[i].style.visibility = "hidden";
            element.children[i].style.height = menuHeight;
		}
	}
	// this is called only for the first menu that loads it
	//element.HotKeys = HotKeys;
}

////////////////////////////////////////////////////////////////////////////////////
// Function : cmdSelect
// Executed : Executes when focus is set to the item control.
// Usage : 
////////////////////////////////////////////////////////////////////////////////////
function hotKeyMatching( id, key, alt, ctrl){
	if(HotKeys == null || HotKeys == "undefined") return false;
	if(HotKeys[id] == null || HotKeys[id] == "undefined") return false;
	if (HotKeys[id].key == key && 
		HotKeys[id].alt == alt && 
		HotKeys[id].ctrl== ctrl
		){
		// we found it
		return true;
	}else{
		return false;
	}
}

function resolveMenuItem( elem, found){
	if( elem.access != "enabled") return;

	if(elem.children.length > 0){
		if( found){
			// display children
			menuClickWorker();
			menuChildLostFocus(elem);
			return;
		}
		// check if there are kids with this hot key
		for(var i = 0; i < elem.children.length; i++){
            found = hotKeyMatching(elem.children[i].id, elem.keyValue, elem.bAlt, elem.bCtrl);
            resolveMenuItem( elem.children[i], found);
		}
	}else{
		// Create a new event object
		oEvent = createEventObject();
		if( found){
			// Assign the event object's result property to the ID of the custom element's ID which fired this event
			oEvent.result = elem.id;
		}else{
			// Assign the event object's result property to the ID of the custom element's ID which fired this event
			oEvent.result = "notFound";
		}
		// Fire the custom element's event
		propId.fire (oEvent);
		// Hide the pop-up window
		hidePopup();	
	}
}


function handleArrows( elemId, key){
	if(popUp && popUp.isOpen){
		// popUpLastIdx;
		var theSpan = popUp.document.body.all[0].all;
		// theSpan[i].id;
		if( key == 13){
			var srcElem = theSpan[popUpLastIdx];
			triggerEvent( srcElem);
			return true;
		}
		// arrow left
		if( key == 37){
			return true;
		}
		// arrow up
		if( key == 38){
			if( popUpLastIdx < 0){
				popUpLastIdx = theSpan.length - 1;
				//setBorderStyle(theSpan[popUpLastIdx]);
				menuChildFocused(theSpan[popUpLastIdx]);
			}else if( popUpLastIdx == 0){
				menuChildLostFocus(theSpan[popUpLastIdx]);
				popUpLastIdx = theSpan.length - 1;
				menuChildFocused(theSpan[popUpLastIdx]);
			}else if( popUpLastIdx < theSpan.length){
				menuChildLostFocus(theSpan[popUpLastIdx]);
				popUpLastIdx--
				menuChildFocused(theSpan[popUpLastIdx]);
			}
			return true;
		}
		// arrow right
		if( key == 39){
			return true;
		}
		// arrow down
		if( key == 40){
			return true;
		}
	}
	return false;
}

function cmdSelect(){
	//	alert( element.id+ element.keyValue+ element.bAlt+ element.bCtrl);
	// check if this menu knows about the current hotkey
	var found = handleArrows( element.id, element.keyValue);
	if( !found){
		// search for self and all children if any
		//self
		found = hotKeyMatching( element.id, element.keyValue, element.bAlt, element.bCtrl);
		resolveMenuItem( element, found);
	}
	// restore original hot key values
	element.keyValue = HotKeys[element.id].key;
	element.bAlt = HotKeys[element.id].alt;
	element.bCtrl = HotKeys[element.id].ctrl;
}

////////////////////////////////////////////////////////////////////////////////////
// Function : menuClick
// Executed	: When the onclick event fires on the custom Element
// Usage	: Creates the pop-up window with the first-level children of the current
//      element and displays the pop-up window with the first-level elements.
//      Each child element has its own events attached to it using the attach method.            
////////////////////////////////////////////////////////////////////////////////////
function menuClick(){
		if(element.keyValue != ""){
			cmdSelect();
		}else{
			menuClickWorker();
		}
}
function menuClickWorker(){
	ix = 0;
	iy = 0;
	iHeight = 0;
	iWidth = 0;
    // Retrieve the source element which fired the event
	srcElem = event.srcElement;
    //srcElem.style.borderRight = "1px inset white";
    //srcElem.style.borderTop = "1px inset black";
    //srcElem.style.borderLeft = "1px inset black";
    //srcElem.style.borderBottom = "1px inset white";
    srcElem.style.border = "1px inset";  //FIS;16.04.2003
    //srcElem.style.borderBottomColor = "ButtonShadow";
    //srcElem.style.borderRightColor = "ButtonShadow";
    //srcElem.style.borderTopColor = "ButtonHighlight";
    //srcElem.style.borderLeftColor = "ButtonHighlight";
    // Hide the pop-up window
	hidePopup();
    // Create the pop-up window for the current parent menu item
	popUp = window.createPopup();
	var oPopBody = popUp.document.body;
	// Does the custom element have any children?
	if(srcElem.children.length > 0){
        ix = 0;
        iy = srcElem.offsetHeight;
        // Get pop-up window Height and Width
        // iHeight = 23 * srcElem.children.length + 4;
        iHeight = 0;
        iWidth = defaultWidth;
        // Empty string to store the innerText of the current element's child
        var sz = "";
        for(var j = 0; j < element.children.length; j++){
			if( element.children[j].access != "hidden"){
				iHeight++;
				// Store the innerText of the current element
				sz = InnerText(element.children[j].innerHTML);
				// Set the menuWidth variable to the length of the sz string
				menuWidth = sz.length;
				if(menuWidth > maxMenuWidth)
				    maxMenuWidth = menuWidth;
			}
		}
        //iHeight = 23 * iHeight + 4;
        iHeight = 20 * iHeight;  //FIS;16.04.2003
        //iWidth = maxMenuWidth * 10;
        iWidth = maxMenuWidth * 8;  //FIS;16.04.2003
        if(iWidth < minMenuWidth)
            iWidth = 60;
            
        // Create an opening string of a SPAN Tag
        var popupHTML = "<SPAN style='position:absolute;" + "top:0px;" + "left:0px; height:" + iHeight + "px; width:" + iWidth + "px'>";
        // Go through all the first-level children elements and get their outerHTML and append it to the DIV Element as children 
        for(j = 0; j < element.children.length; j++){
            // Assign the ID of the current child element to its innerText 
            element.children[j].id = element.children[j].id;
            popupHTML += element.children[j].outerHTML + "\n";
            element.children[j].style.width = iWidth + "px";
        }
        // Add the closing SPAN Tag to the popupHTML string variable
        popupHTML += "</" + "SPAN>";
        // Assign the HTML from above into the body of the pop-up window
        oPopBody.innerHTML = popupHTML;
   	    // Assign events to each of the children in the pop-up window, then show the custom elements in the pop-up window
        for(j = 0; j < oPopBody.children[0].children.length; j++){
            // Attach events to the children of the menu
            var obj = oPopBody.children[0].children[j]
            
            obj.onmouseover = menuChildmouseOver;
            if( obj.access == "enabled"){
				obj.onclick = menuChildClick;
			}else{
				obj.onclick = null;
			}
                
            // Define the current child's style to display
            obj.style.display = "block";
            obj.style.visibility = "visible";
        }

        // Define the popUp's style
        //oPopBody.style.borderLeft = "2 outset white";
        //oPopBody.style.borderTop = "2 outset white";
        //oPopBody.style.borderRight = "1 outset black";
        //oPopBody.style.borderBottom = "1 outset black";
        oPopBody.style.border = "none";  //FIS;16.04.2003
        oPopBody.style.position = "absolute";
        oPopBody.style.backgroundColor = mColor;
        oPopBody.style.fontFamily = "Verdana";
        // Call the hidePop function upon onmouseleave firing
    	popUp.document.body.onmouseleave = hidePopup;

        // Show the popUp using the show method
        popUp.show( ix , iy , iWidth , iHeight, srcElem);	
	}       
}
////////////////////////////////////////////////////////////////////////////////////
function menuChildFocused( srcElem){
    srcElem.style.color = "white";
    srcElem.style.background = "highlight";      
}
function menuChildmouseOver(){
    // Cancel the event so that it does not bubble up to its parent
    popUp.document.parentWindow.event.cancelBubble = true;
    // Retrieve the source element from the pop-up window which fired the event
	srcElem = popUp.document.parentWindow.event.srcElement;
	// Define the current element's style
	menuChildFocused( srcElem);
    // window.status = srcElem.innerHTML;
    window.status = srcElem.access;    
}
////////////////////////////////////////////////////////////////////////////////////
var oEvent;
function triggerEvent( srcElem){
    // Create a new event object
    oEvent = createEventObject();
    // Assign the event object's result property to the ID of the custom element's ID which fired this event
    oEvent.result = srcElem.id;
    // Fire the custom element's event
    propId.fire (oEvent);
    // Hide the pop-up window
	hidePopup();	
}
function menuChildClick(){
    // Cancel the event so that it does not bubble up to its parent
    popUp.document.parentWindow.event.cancelBubble = true;
    // Retrieve the source element from the pop-up window which fired the event
	srcElem = popUp.document.parentWindow.event.srcElement;
	triggerEvent( srcElem);
}

////////////////////////////////////////////////////////////////////////////////////
// Function : HidePopup
// Executed : When the onmouseleave event fires on the custom Element
// Usage : Hides the pop-up window for the menu
////////////////////////////////////////////////////////////////////////////////////
function hidePopup(){
	if(popUp)
		if(popUp.isOpen){
			popUp.hide();
			popUpLastIdx = -1;
		}
}
////////////////////////////////////////////////////////////////////////////////////
// Function : menuItemOver
// Executed : When the onmouseover event fires on the custom Element
// Usage : Changes the background color & font color of the Element
////////////////////////////////////////////////////////////////////////////////////
function setBorderStyle( srcElem){
	// Set the element's style
	//srcElem.style.borderRight = "1px outset black";
	//srcElem.style.borderTop = "1px outset white";
	//srcElem.style.borderLeft = "1px outset white";
	//srcElem.style.borderBottom = "1px outset black";
	srcElem.style.border = "1px solid";  //FIS;16.04.2003
        srcElem.style.borderBottomColor = "ButtonShadow";
        srcElem.style.borderRightColor = "ButtonShadow";
        srcElem.style.borderTopColor = "ButtonHighlight";
        srcElem.style.borderLeftColor = "ButtonHighlight";
}
function menuItemOver(){
    // Retrieve the source element
	srcElem = event.srcElement;
    window.status = srcElem.id;
    setBorderStyle( srcElem);
}
////////////////////////////////////////////////////////////////////////////////////
// Function : menuItemOut
// Executed : When the onmouseout event fires on the custom Element
// Usage : Restores the background color & font color of the Element
//					  to the defaults.
////////////////////////////////////////////////////////////////////////////////////
function menuChildLostFocus( elem){
    // Set the element's style
    elem.style.backgroundColor = mColor;
    elem.style.color = "black";
    //elem.style.border = "1px solid";
    //elem.style.borderColor = mColor;
    elem.style.border = "1px solid";  //FIS;16.04.2003
    elem.style.borderBottomColor = "ButtonShadow";
    elem.style.borderRightColor = "ButtonShadow";
    elem.style.borderTopColor = "ButtonHighlight";
    elem.style.borderLeftColor = "ButtonHighlight";
	elem.setAccess();
}
function menuItemOut(){
    // Retrieve the source element
	srcElem = event.srcElement;
	menuChildLostFocus( srcElem);
}
////////////////////////////////////////////////////////////////////////////////////
// Function : InnerText
// Parameter : string
// Executed : Called from the mouseClick function
// Usage : InnerText function gets the innerHTML of the custom element, which can
//      contain Text + HTML. For example, innerHTML of the first custom element looks like:
//      Start <ie:menu>Run</ie:menu>.... The function strips out the text until the
//      first instance of "<" and returns the string.
////////////////////////////////////////////////////////////////////////////////////
function InnerText(szText){
	var startTag = szText.indexOf("<");
	if(szText.substr(0, startTag) == "")
		return szText;
	else
		return szText.substr(0,startTag);
}
</script>