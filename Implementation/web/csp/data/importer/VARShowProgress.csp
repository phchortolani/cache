<csp:class import=",VAR.data,VAR.infra.cache,VAR.infra.util">

<script language="cache" runat="server">
 set importer = ##class(DataImporter).%New()

 set command = $get(%request.Data("command", 1))
 set iscancel = (+command = 1)
 if (iscancel) do importer.CancelLastActiveImport()

 set control = importer.GetLastActiveControl()
 set isactive = control.IsActive()
 set key = ""
</script>  

<html>
<head>
  <title>Data Importer</title>
  <style type='text/css'>
    <!--
    body {
      font-family: 'Arial', 'SansSerif';
      font-size: 14;
    }

    .meter-wrap {
      margin: 3 auto 1em auto;
      position: relative;
    }

    .meter-wrap, .meter-value, .meter-text {
      width: 155px; height: 30px; /* The width and height of your image */
    }

    .meter-wrap, .meter-value {
      background: #bdbdbd url(VARmeter-outline.png) top left no-repeat;
    }

    .meter-text {
      position: absolute;
      top:0; left:0;
      padding-top: 5px;
      color: #fff;
      text-align: center;
      width: 100%;
    }
    -->
  </style>
  <script type="text/javascript">
    var grefresh = 1;

    function callRefresh(timeout) {
      if (#(isactive)# && grefresh)
        setTimeout("location.reload(true);", timeout);
    }

    METER_SIZE_STEPS = 300;
    METER_COLOR_STEPS = 5;

    var gmeterRunning = false;
    var gmeterCounter = 0;

    function meterOnClick(id) {
      if (gmeterRunning)
        return;

      gmeterRunning = true;
      gmeterCounter = 0;
      setTimeout("meterRun('" + id + "')", 10);
    }

    function meterRun(id) {
      meterShow(gmeterCounter++, METER_SIZE_STEPS, id);
      if (gmeterCounter < METER_SIZE_STEPS) {
        setTimeout("meterRun('" + id + "')", 10);
        return;
      }

      gmeterRunning = false;
    }

    function meterShow(position, total, id) {
      var currentValue, color;

      currentValue = METER_COLOR_STEPS * position / total;
      if (currentValue <= METER_COLOR_STEPS / 2)
        color = '#' + Math.round(0x99 + 0x33 * currentValue / (METER_COLOR_STEPS / 2)).toString(16) +
          Math.round(0xCC * currentValue / (METER_COLOR_STEPS / 2)).toString(16) +
          Math.round(0x33 - 0x22 * currentValue / (METER_COLOR_STEPS / 2)).toString(16);
      else
        color = '#' + Math.round(0xCC - 0x99 * (currentValue - (METER_COLOR_STEPS / 2)) / (METER_COLOR_STEPS / 2)).toString(16) +
          Math.round(0xCC - 0x33 * (currentValue - (METER_COLOR_STEPS / 2)) / (METER_COLOR_STEPS / 2)).toString(16) +
          Math.round(0x11 + 0x22 * (currentValue - (METER_COLOR_STEPS / 2)) / (METER_COLOR_STEPS / 2)).toString(16);

      document.getElementById('meter-value-' + id).style.backgroundColor = color;

      currentValue = METER_SIZE_STEPS * position / total;

      document.getElementById('meter-value-' + id).style.width = Math.round(100 * currentValue / METER_SIZE_STEPS) + '%';
      document.getElementById('meter-text-' + id).innerHTML = document.getElementById('meter-value-' + id).style.width;
    }

    function cancel() {
	  grefresh = 0;
      document.forms[0].submit();

	  return false;
    }

    function startNew() {
      window.location = document.forms[0].action;

      return false;
    }
 </script>
</head>

<body onload="callRefresh(5000);">
<h1>Import File From #(control.SourceNamespace)# To #(##class(Util).GetNamespace())#</h1>
<hr><br>

<table border="0" cellspacing="1" cellpadding="0">
<tr><td align="right">ID:</td><td>&nbsp;&nbsp;&nbsp;<b>#(control.%Id())#</b></td></tr>
<csp:if condition='control.Status = control.%GetParameter("STATUSCONCLUDEDERROR")'>
<tr><td align="right">Status:</td><td><b>&nbsp;&nbsp;&nbsp;Error</b></td></tr>
<tr><td align="right">Error Message:</td><td><b>&nbsp;&nbsp;&nbsp;#(control.ErrorMessage)#</b></td></tr>
</csp:if>
</table>

<table border="0" width="60%" cellspacing="0" cellpadding="0">
  <csp:if condition='isactive'>
    <tr valign="center">
      <td align="right" colspan="4">
        <form name="form" method="get" action="VARShowProgress.csp">
          <input name="command" value="1" type="hidden">
          <input name="id" value="#(control.%Id())#" type="hidden">
          <input name="Cancel" value="   Cancel   " onclick="return cancel();" type="button">
        </form>
      </td>
    </tr>
  <csp:else>
    <tr valign="center">
      <td align="right" colspan="4">
        <form name="form" method="get" action="VARIndex.csp">
          <input name="NewImport" value="   New Import   " onclick="return startNew();" type="button">
        </form>
      </td>
    </tr>
  </csp:if>
  <tr valign="center">
    <td align="center">
      <table border="1" width="100%" cellspacing="0" cellpadding="5">
        <tr><td align="center"><b>Node Location</b></td></tr>
      </table>
    </td>
    <td align="center">
      <table border="1" width="100%" cellspacing="0" cellpadding="5">
        <tr><td align="center"><b>Status</b></td></tr>
      </table>
    </td>
    <td align="center">
      <table border="1" width="100%" cellspacing="0" cellpadding="5">
        <tr><td align="center"><b>Size</b></td></tr>
      </table>
    </td>
    <td align="center">
      <table border="1" width="100%" cellspacing="0" cellpadding="5">
        <tr><td align="center"><b>Progress</b></td></tr>
      </table>
    </td>
  </tr>
<csp:loop counter="i" from="1" to="#(control.Nodes.Count())#">
  <script language="cache" runat="server">
   set node = control.Nodes.GetPrevious(.key)
 </script>
  <csp:if condition='node.Status = node.%GetParameter("STATUSNOTSTARTED")'>
    <csp:continue/>
  </csp:if>

  <tr valign="center">
    <td><font size='-1'>&nbsp;&nbsp;<b>&gt;&gt;</b> #(node.Location)# &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></td>
  <csp:if condition='node.Status = node.%GetParameter("STATUSCALCULATINGBACKUP")'>
    <td><font size='-1'>&nbsp;&nbsp;Calculating size of current data &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></td>
    <td><font size='-1'>&nbsp;</font></td>
    <td><font size='-1'>&nbsp;</font></td>
  <csp:elseif condition='node.Status = node.%GetParameter("STATUSBACKINGUP")'>
    <td><font size='-1'>&nbsp;&nbsp;Backing up current data &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></td>
    <td align="right"><font size='-1'>#(node.CurrentLength)#</font>&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td><div class="meter-wrap">
        <div id="meter-value-backup" class="meter-value" style="background-color: #990000; width: 0%;">
          <div id="meter-text-backup" class="meter-text">
            &nbsp;<br/>
          </div>
        </div>
      </div>
    </td>
    <script type="text/javascript">
      meterShow('#(node.BackupPosition)#', '#(node.CurrentLength)#', 'backup');
   </script>
  <csp:elseif condition='node.Status = node.%GetParameter("STATUSCALCULATINGCOPY")'>
    <td><font size='-1'>&nbsp;&nbsp;Calculating size of new data &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></td>
    <td><font size='-1'>&nbsp;</font></td>
    <td><font size='-1'>&nbsp;</font></td>
  <csp:elseif condition='node.Status = node.%GetParameter("STATUSCOPYING")'>
    <td><font size='-1'>&nbsp;&nbsp;Copying new data &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></td>
    <td align="right"><font size='-1'>#(node.NewLength)# (#(node.CurrentLength)#)&nbsp;&nbsp;&nbsp;&nbsp;</font></td>
    <td><div class="meter-wrap">
        <div id="meter-value-copy" class="meter-value" style="background-color: #990000; width: 0%;">
          <div id="meter-text-copy" class="meter-text">
            &nbsp;<br/>
          </div>
        </div>
      </div>
    </td>
    <script type="text/javascript">
      meterShow('#(node.Position)#', '#(node.NewLength)#', 'copy');
    </script>
  <csp:elseif condition='node.Status = node.%GetParameter("STATUSCONCLUDED")'>
    <td><font size='-1'>&nbsp;&nbsp;Done. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></td>
    <td align="right"><font size='-1'>#(node.NewLength)# (#(node.CurrentLength)#)&nbsp;&nbsp;&nbsp;&nbsp;</font></td>
    <td><font size='-1'>&nbsp;</font></td>
  </csp:if>
  </tr>
</csp:loop>
</table>

</body>
</html>
