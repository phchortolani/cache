<!DOCTYPE html> 
<html xmlns="http://www.w3.org/1999/xhtml" lang="pt-br">
	<script language="Cache" runat="server">
		do ^WWWVAR

		set YUSER 		= $get(%request.Data("YUSER", 1))
		set YBED 			= $get(%request.Data("YBED", 1))
		set YM 				= $get(%request.Data("YM", 1))
		set YLOCATION = $get(%request.Data("YLOCATION", 1))

		set PortCache = $get(%request.CgiEnvs("SERVER_PORT"))
		set PageURL 	= $get(%request.CgiEnvs("CACHE_URL"))
		set PageName 	= %request.PageName
		set app 			= %request.Application
		set host 			= %request.CgiEnvs("HTTP_HOST")
		set url				= "http://"_host_app

		set URLPreparacao = "VAR.CSP.VARCadProfissional.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		Set URLPreparacaoAgendamento 	= "VAR.CSP.VARCadAgendamento.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		set URLSearch			= "User.Search.PesquisasJson.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		set URLLogin 			= "COMLogin.cls"
		set URLLink 			= "www.cls"

		set nomeLocal 		= YLOCATION_" - "_$$SQLGetLocationName^VARSQL(YLOCATION)

		set dataMinLimite	= $ZDate(+$Horolog,3)

		//Verifica se a sessão
		set status = $$VerifySession^VARCSPUtils(YBED, YUSER, url)
		Do ##Class(VAR.CSP.VARConfiguracaoAgendamento).InicializaConfiguracao(YBED)
	</script>

	<head>

		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">

		<!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
		<title>Cadastro de Profissional</title>

		<!-- Bootstrap CSS -->
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/bootstrap/css/bootstrap.min.css">
		<!-- Font Awesome -->
		<link href=" #(YGIF)#global/plugins/fontawesome/5.4.1/css/all.css" rel="stylesheet" type="text/css">

		<!-- Custom Elements -->
		<link href=" #(YGIF)#global/css/components-rounded.css" rel="stylesheet" id="style_components" type="text/css" />
		<link href=" #(YGIF)#global/css/plugins.css" rel="stylesheet" type="text/css" />
		<link href=" #(YGIF)#global/css/layout.css" rel="stylesheet" type="text/css" />
		<link href=" #(YGIF)#global/css/themes/light.css" rel="stylesheet" type="text/css" id="style_color" />
		<link href=" #(YGIF)#global/css/custom.min.css" rel="stylesheet" type="text/css" />

		<!-- Fonts Padrão IPP -->
		<link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Open+Sans:400,600,700,800">

		<!-- DevExtreme themes -->
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.common.css" />
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.light.compact.css" />
		<!--<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.light.compact.css" />-->

    <link rel="stylesheet" type="text/css" href=" #(YGIF)#global/themes/css/alphalinc.css" id="style_color" />
	</head>
	<script type="text/javascript">

		var status = '#(status)#';
		var URLLogin = '#(URLLogin)#';
		var ygif = '#(YGIF)#'

		if (status == 0) {
			alert('Usuário não está logado ou a sessão expirou.')
			window.location.replace(URLLogin)
		}

	</script>

	<style>
	.cell-selected {
		background-color: #FFFFB9;
	}
	.cell-selectedRestricao {
		background-color: #FFFFB9;
	}

	.dx-datagrid {
		user-select: none;
		-webkit-user-select: none;
	}		

	.dx-scheduler-view-switcher {  
		visibility: hidden  
	}

	.selected-container {
		padding: 20px;
		margin-left: 20px;
		background-color: rgba(191, 191, 191, 0.15);
		font-size: 115%;
		font-weight: bold;
	}
  .first-group {
		background-color: #ffffff;
  }
  .second-group{
		padding-top: 0px !important;
		padding-bottom: 0px !important;
		padding-left: 0px !important;
		padding-right: 0px !important;
		margin-top: 3px !important;
		margin-bottom: 3px !important;
		margin-left: 3px !important;
		margin-right: 0px !important;
		background-color: rgba(1, 178, 169, 0.15);
		border-top-right-radius: 5px;
		border-top-left-radius: 5px;
		border-top: 1px solid #E0E0E0;
		border-left: 1px solid #E0E0E0;
		border-right: 1px solid #E0E0E0;
		border-bottom: 1px solid #E0E0E0;
  }
  .third-group{
		padding-top: 0px !important;
		padding-bottom: 0px !important;
		padding-left: 0px !important;
		padding-right: 0px !important;
		margin-top: 0px !important;
		margin-bottom: 0px !important;
		margin-left: 0px !important;
		margin-right: 0px !important;
		background-color: #ffffff;
		border: 0px solid #E0E0E0;
  }
  .second-group .dx-form-group-caption {
		border: 0px solid red;
		margin-left: 3px !important;
		padding-top: 3px !important;
  }	
  .second-group .dx-form-group-content {
		background-color: #ffffff;
		color: red; 
		padding-left: 5px !important;
		padding-right: 5px !important;
  }
	</style>

	<body>
		<div id="toolbar"></div>
		<div id="divForm"></div>
		<div id="divCadastroAusencia"></div>
		<div id="divCadastroRestricao"></div>
		<div id="divOpcaoSelecao"></div>
		<div id="divExportarAgenda"></div>
		<!-- REQUIRED JS SCRIPTS -->
		<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
		<script src=" #(YGIF)#global/plugins/extreme19.2.4/js/jquery.min.js"></script>

		<!-- JSZip library -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/jszip.min.js"></script>

		<!-- A DevExtreme library -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/dx.all.js"></script>

		<!-- DevExtreme-Intl module -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/localization/dx.messages.pt.js"></script>

		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/localization/dx.messages.pt.js"></script>

		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/dx-gantt.min.js"></script>


		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/exceljs.min.js"></script>
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/FileSaver.min.js"></script>

		<!-- Include all compiled plugins (below), or include individual files as needed -->
		<script src=" #(YGIF)#global/plugins/bootstrap-3.3.7/js/bootstrap.min.js"></script>

		<!-- Tag para implantação da funcionalidade de importação de Arquivos --> 
		<VARImportacaoArquivo>

		<!--Definições globais e criação de funcionalidades encapsuladas-->
		<script type="text/javascript">
			//Deixando variáveis disponíveis no cliente
			var urlPreparacao 		= '#(URLPreparacao)#';
			var urlPreparacaoAgendamento 		= "#(URLPreparacaoAgendamento)#";
			var urlSearch					= '#(URLSearch)#';
			var urlLink 					= '#(URLLink)#';
			var YBED 							= '#(YBED)#';
			var YUSER 						= '#(YUSER)#';
			var YLOCATION 				= '#(YLOCATION)#';
			var nomeLocal 				= '#(nomeLocal)#';
			var selectedRangeTR 	= {};
			var isSelectionStoppedTR;
			var selectedRangeRND 	= [];
			var isSelectionStoppedRND;

			var selectedRangeRestricao 	= [];
			var isSelectionStoppedRestricao;


			var pDataAgenda				= new Number("#(+$Horolog)#")
			var pSequenciaAgenda	= "";
			var SequenciaId				= "";
			var dataSourceSelEdicao = [];
			var tipoEscolha				= "";
			var flagPrimeira			= 1;
			
			DevExpress.config({decimalSeparator: ",",thousandsSeparator: "."});
			DevExpress.localization.locale("pt");

			objToolBar = $("#toolbar").dxToolbar({
				items: [{
					location: "after",
					widget	: "dxButton",
					options	: {
						icon	: "save",
						hint	: "Salvar os Dados",
						type	: "success",
						stylingMode : "contained",
						onClick	: function(){
							var pCodProfissional = objProfissional.option("value");
							var flagForm = objForm.validate().isValid; 
							var flagPessoal = objPessoal.validate().isValid; 
							if (!flagForm || !flagPessoal){
								DevExpress.ui.notify("Favor preencher os campos obrigatórios","warning");
								return;
							}
							var pDataNascimento =  objPessoal.getEditor("dataNascimento").option("text");	
							$.getJSON(urlPreparacao,{
								method						: "SalvarDados",
								pCodProfissional	: pCodProfissional,
								pSituacao 				: objForm.getEditor("situacao").option("value"),
								pObjPessoal 			: JSON.stringify(objPessoal.option("formData")),
								pDataNascimento		: pDataNascimento
							},function(objRetorno){
								if (objRetorno.status==1){
									dataSourceProfissional.reload();
									objProfissional.option("value", objRetorno.codProfissional);
									DevExpress.ui.notify("Dados Salvos com Sucesso!","success");
								}else{
									DevExpress.ui.notify("Erro: "+objRetorno.status,"error");
								}
							});
						}
					}
				},{
					location: "after",
					widget	: "dxButton",
					name		: "btnImportar",
					options	: {
						icon	: "fas fa-file-import",
						hint	: "Importar Cadastro de Profissional",
						type	: "default",
						stylingMode : "contained",
						onClick	: function(){
							if (objToolBar.option("items")[2].disabled == true) {
								importarArquivo('029', "dataSourceProfissional.reload();");
							}else{
								importarArquivo('030', "listarAgenda();");
							}
						}
					}
				},{
					location: "after",
					widget	: "dxButton",
					disabled: true,
					options	: {
						icon	: "fas fa-download",
						hint	: "Exportar Agenda",
						type	: "default",
						stylingMode : "contained",
						onClick	: function(){
							if (objProfissional.option("value") == "" || objProfissional.option("value") == null) {
								DevExpress.ui.notify("Favor selecionar o profissional.","warning");
								return
							}
							$("#divExportarAgenda").dxPopup("show");
							dataSouceAgendaExp.reload();
						}
					}
				},{
					location: "after",
					widget	: "dxButton",
					options	: {
						icon	: "fa fa-eraser",
						hint	: "Limpar os Campos",
						type	: "default",
						stylingMode : "contained",
						onClick	: function(){
							objProfissional.option("value", "");
						}
					}
				}]
			}).dxToolbar("instance")
		
			objForm = $("#divForm").dxForm({
				activeStateEnabled:true,
				minColWidth: 50,
				screenByWidth: function(width) { return "lg"; },
				screenByWidth: function(width) { return "lg"; },
				height:function(){ return window.innerHeight-40 },
				alignItemLabels:false,
				alignItemLabelsInAllGroups:false,
				items: [{
					colCount: 10,
					itemType: "group",
					cssClass: "first-group",
					items: [{
						colSpan: 7,
						dataField: "codProfissional",
          	label		: {
							text	: "Profissional"
						},  
						template	: function (data, itemElement) {
							itemElement.append("<div id='divProfissional'/>")
						},
					},{
						colSpan: 2,
						dataField: "situacao",
						label		: {
							text:"Situação",
							alignment: "right"
						},
						editorType: "dxSelectBox",
						validationRules: [{
							type: "required"
						}],
						editorOptions: {
							dataSource: new DevExpress.data.DataSource({
          			store: new DevExpress.data.CustomStore({
              		loadMode: "raw",   
              		load: function() {
                  	return $.getJSON(urlSearch,{method:"GetWWW101",pDescParametro:"MEDPROVIDERSTA"});
              		}
          			})
      				}),
							searchEnabled: true,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
						}
					},{},{
						colSpan: 10,
						itemType: "tabbed",
						name 	: "abas",
						tabPanelOptions: {
		  			  selectedIndex: 0,
							deferRendering: false,
							animationEnabled: false,
							showNavButtons:true,
							onSelectionChanged: function(e){
								if (e.addedItems[0].title == "Preparação da Agenda") { 
									objToolBar.option("items")[1].options.hint = "Importar Agenda";
									objToolBar.option("items")[2].disabled = false;
								}else{
									objToolBar.option("items")[1].options.hint = "Importar Cadastro de Profissional";
									objToolBar.option("items")[2].disabled = true;
								}
								objToolBar.repaint()								
							}
						},	
						height:'10px',
						tabs:[{
							title	: "Dados Pessoais",
							items: [{
								template	: function (data, itemElement) {
									itemElement.append("<div id='divPessoal'>")
								}
							}],
						},{
							title	: "Preparação da Agenda",
							items: [{
								template	: function (data, itemElement) {
									itemElement.append("<div id='divProfissionais'>")
								}
							}]
						},{
							title	: "Auditoria",
							items: [{
								template	: function (data, itemElement) {
									itemElement.append("<div id='divControle'>")
								}
							}]
						}]
					}]
				}]
			}).dxForm("instance");
			
			objPessoal = $("#divPessoal").dxForm({
				scrollingEnabled	: true,
				showColonAfterLabel	: false,
				height	:function() { return window.innerHeight - 150; },
				screenByWidth: function(width) { return "lg"; },
				colCount: 2,
				items	: [{
					colCount: 2,
					itemType: "group",
					cssClass: "second-group",
					caption: "Informações Pessoais",
					items: [
						{
							colSpan: 2, 
							dataField: "nome",
							label		: {
								text:"Nome:",
								alignment: "right"
							},
							validationRules: [{
								type: "required"
							}],	
						},{
							dataField: "dataNascimento",
							editorType: "dxDateBox",
							label: {
								text:"Data de Nascimento:",
								alignment: "right"
							},
							validationRules: [{
								type: "required"
							}],
							editorOptions : {
								useMaskBehavior: true,
							}
						},{
							dataField: "sexo",
							editorType: "dxSelectBox",
							label: {
								text:"Sexo:",
								alignment: "right"
							},
							editorType: "dxSelectBox",
							validationRules: [{
								type: "required"
							}],
							editorOptions: {
								dataSource: new DevExpress.data.DataSource({
	          			store: new DevExpress.data.CustomStore({
	              		loadMode: "raw",   
	              		load: function() {
	                  	return $.getJSON(urlSearch,{method:"GetWWW101",pDescParametro:"SEX"});
	              		}
	          			})
	      				}),
								searchEnabled: true,
								valueExpr: "Codigo", 
								displayExpr: "Descricao",
							}
						},
						{dataField: "cPF", label: { text:"CPF:", alignment: "right"},
							validationRules: [{
								type: "required"
							}],
							editorOptions: {
								maxLength: 11,
								onValueChanged: function (e) {
									if (!e.value) return;
									if (!validarCPF(e.value)) {
										DevExpress.ui.notify("CPF invalido.","warning");	
										objPessoal.getEditor("cPF").option("value", "");
										objPessoal.getEditor("cPF").focus();  
									}
								}
							}, 
						},
						{dataField: "rG", label: { text:"RG:", alignment: "right"}
						},{
							dataField: "licencaProfissional",
							editorType: "dxSelectBox",
							label: {
								text:"Licença Profissional:",
								alignment: "right"
							},
							editorType: "dxSelectBox",
							validationRules: [{
								type: "required"
							}],
							editorOptions: {
								dataSource: new DevExpress.data.DataSource({
	          			store: new DevExpress.data.CustomStore({
	              		loadMode: "raw",   
	              		load: function() {
	                  	return $.getJSON(urlSearch,{method:"GetINPARA",pDescParametro:"MEDLICENSETYPE"});
	              		}
	          			})
	      				}),
								searchEnabled: true,
								valueExpr: "Codigo", 
								displayExpr: "Descricao",
							}
						},{
							dataField: "conselho",
							editorType: "dxSelectBox",
							label: {
								text:"Conselho:",
								alignment: "right"
							},
							editorType: "dxSelectBox",
							validationRules: [{
								type: "required"
							}],
							editorOptions: {
								dataSource: new DevExpress.data.DataSource({
	          			store: new DevExpress.data.CustomStore({
	              		loadMode: "raw",   
	              		load: function() {
	                  	return $.getJSON(urlSearch,{method:"GetINPARA",pDescParametro:"VARMEDCONSELHO"});
	              		}
	          			})
	      				}),
								searchEnabled: true,
								valueExpr: "Codigo", 
								displayExpr: "Descricao",
							}
						},
						{
							dataField: "estadoDocumento",
							editorType: "dxSelectBox",
							label: {
								text:"Estado:",
								alignment: "right"
							},
							editorType: "dxSelectBox",
							validationRules: [{
								type: "required"
							}],
							editorOptions: {
								dataSource: new DevExpress.data.DataSource({
	          			store: new DevExpress.data.CustomStore({
	              		loadMode: "raw",   
	              		load: function() {
	                  	return $.getJSON(urlSearch,{method:"GetWWW102",pDescParametro:"BUNDESLAND"});
	              		}
	          			})
	      				}),
								searchEnabled: true,
								valueExpr: "Codigo", 
								displayExpr: "Descricao",
							}
						},{
							dataField: "numeroDocumento",
							label: {
								text:"Número:",
								alignment: "right"
							},							
							validationRules: [{
								type: "required"
							}],
						},{
							colSpan: 2,
							dataField: "cBO",
							label: {
								text:"CBO:",
								alignment: "right"
							},
							editorType: "dxSelectBox",
							validationRules: [{
								type: "required"
							}],
							editorOptions: {
								dataSource: new DevExpress.data.DataSource({
	          			store: new DevExpress.data.CustomStore({
	              		loadMode: "raw",   
	              		load: function() {
	                  	return $.getJSON(urlSearch,{method:"GetVARPARA",DescParametro:"CBO",pExibirCod:1});
	              		}
	          			})
	      				}),
								searchEnabled: true,
								valueExpr: "Codigo", 
								displayExpr: "Descricao",
							}
						},
						{dataField: "jurisdicao",
							label: {
								text:"Jurisdição:",
								alignment: "right"
							},
						},{
							dataField: "usuarioAlphalinc",
							label: {
								text:"Usuário Alphalinc:",
								alignment: "right"
							},
							editorType: "dxSelectBox",
							editorOptions: {
								dataSource: new DevExpress.data.DataSource({
	          			store: new DevExpress.data.CustomStore({
	              		loadMode: "raw",   
	              		load: function() {
	                  	return $.getJSON(urlSearch,{method:"GetWWW013"});
	              		}
	          			})
	      				}),
								searchEnabled: true,
								valueExpr: "Codigo", 
								displayExpr: "Name",
							}
						},
					]
				},{
					colCount: 2,
					itemType: "group",
					caption: "Endereço",
					cssClass: "second-group",
					items: [
						{dataField: "cEP", label: { text:"CEP:", alignment: "right"},
							editorOptions: {
								onValueChanged: function(e) {
									if (e.value) {
										$.getJSON(urlPreparacaoAgendamento,{method: "GetCEP", pCEP: e.value}, function(objRetorno){
											if (objRetorno.Logradouro != "") {
												objPessoal.getEditor("logradouro").option("value",objRetorno.Logradouro);
												objPessoal.getEditor("bairro").option("value",objRetorno.Bairro);
												objPessoal.getEditor("cidade").option("value",objRetorno.Cidade);
												objPessoal.getEditor("estado").option("value",objRetorno.UF);
											}
										});
									}
								}
							}
						},{},
						{colSpan: 2, dataField: "logradouro", label: { text:"Logradouro:", alignment: "right"}},
						{dataField: "numeroEndereco", label: { text:"Número:", alignment: "right"}},
						{dataField: "complemento", label: { text:"Complemento:", alignment: "right"}},
						{dataField: "bairro", label: { text:"Bairro:", alignment: "right"}},
						{dataField: "cidade", label: { text:"Cidade:", alignment: "right"}},
						{
							dataField: "estado",
							editorType: "dxSelectBox",
							label: {
								text:"Estado:",
								alignment: "right"
							},
							editorType: "dxSelectBox",
							editorOptions: {
								dataSource: new DevExpress.data.DataSource({
	          			store: new DevExpress.data.CustomStore({
	              		loadMode: "raw",   
	              		load: function() {
	                  	return $.getJSON(urlSearch,{method:"GetWWW102",pDescParametro:"BUNDESLAND"});
	              		}
	          			})
	      				}),
								searchEnabled: true,
								valueExpr: "Codigo", 
								displayExpr: "Descricao",
							}
						},{},
						{dataField: "telefone", label: { text:"Telefone:", alignment: "right"}},
						{dataField: "celular", label: { text:"Celular:", alignment: "right"}},
						{colSpan: 2, dataField: "email", label: { text:"E-mail:", alignment: "right"}},
					]
				},{
					colSpan: 2,
					itemType: "group",
					cssClass: "second-group",
					caption: "Especialidade do Profissional Consulta/Procedimentos",
					items: [
						{
							dataField: "especialidade",
							editorType: "dxTextArea",
							label: { visible	: false},
							editorOptions: {height	: 75,}
						},
					]
				}]
			}).dxForm("instance");

			//////Aba Dados Profissionais

			dataSourceGrupoAgend = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",   
					load: function() {
						var pUnidade = objProfissionais.getEditor("profUnidade").option("value");
						if (pUnidade == null || pUnidade == "") {
							return [{Codigo: "", Descricao: "Selecione a Unidade"}];	
						}
						return $.getJSON(urlPreparacao,{method:"GetGrupoAgendamento",pCodUnidade:pUnidade});
					}
				})
			});	

			dataSourceSalaAtendimento = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",   
					load: function() {
						var pUnidade = objProfissionais.getEditor("profUnidade").option("value");
						var pGrupoAgendamento = "";
						if (objProfissionais.getEditor("profRestricaoGeral").option("readOnly") == true) {
							var pGrupoAgendamento = objProfissionais.getEditor("profGrupoAgendamento").option("value");
						}
						if (pUnidade == null || pUnidade == "") {
							return [{CodigoSala: "", Nome: "Selecione a Unidade"}];	
						}
						return $.getJSON(urlPreparacao,{method:"GetSalasAtendimentos",pCodUnidade:pUnidade,pGrupoAgendamento:pGrupoAgendamento});
					}
				})
			});
			
			dataSourceRestricaoGeral = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",   
					load: function() {
						var pGrupoAgendamento = objProfissionais.getEditor("profGrupoAgendamento").option("value");
						if (pGrupoAgendamento == null || pGrupoAgendamento == "") {
							return [];	
						}
						return $.getJSON(urlPreparacao,{method:"GetProcedimentos",pGrupoAgendamento:pGrupoAgendamento});
					}
				})
			});	

			objProfissionais = $("#divProfissionais").dxForm({
				scrollingEnabled	: true,
				showColonAfterLabel	: false,
				height	:function() { return window.innerHeight - 150; },
				screenByWidth: function(width) { return "lg"; },
				colCount: 12,
				items	: [{
					colSpan: 7,
					colCount: 4,
					itemType: "group",
					cssClass: "second-group",
					caption: "Configuração da Agenda",	
					items: [{
						colSpan: 4, 
						dataField: "profUnidade", 
						editorType: "dxSelectBox", 
						label: {text:"Unidade:",alignment: "right"},
						validationRules: [{ type: "required"}],
						editorOptions: {
							dataSource: new DevExpress.data.DataSource({
								store: new DevExpress.data.CustomStore({
									loadMode: "raw",   
									load: function() {
										return $.get(urlSearch,{
											method						:	"GetLocal",
											pCodLocal					: "",
											pFlagUnidadeSaude	: 1,
											pFlagLocalAtivo		: 1
										});
									}
								})
							}),				
							onValueChanged: function(e) {
								dataSourceGrupoAgend.reload();
								objProfissionais.getEditor("profGrupoAgendamento").option("value","");
							},
							valueExpr: "Location", 
							displayExpr: "LocationName",
							searchEnabled: true
						}
					},{
						colSpan: 3, 
						dataField: "profGrupoAgendamento", 
						editorType: "dxSelectBox", 
						label: {text:"Grupo Agend.:",alignment: "right"},
						validationRules: [{ type: "required"}],
						editorOptions: {
							dataSource: dataSourceGrupoAgend,				
							displayExpr: "Descricao",
							valueExpr: "Codigo",
							onValueChanged: function(e) {
								dataSourceRestricaoGeral.reload();
								if (!e.value) {
									objProfissionais.getEditor("profTempoAtendimento").option("value","");
									objProfissionais.getEditor("profRestricaoGeral").option({"value": "", readOnly: true});
									objProfissionais.getEditor("profLocal").option({"value": "", readOnly: true});
									dataSourceSalaAtendimento.reload();
									return 	
								}
								var pCodGrupoAgendamento = e.value;
								$.getJSON(urlPreparacao,{
									method:	"GetDadosGrupoAgendamento",
									pCodGrupoAgendamento:	pCodGrupoAgendamento
								},function(objRetorno){
									objProfissionais.getEditor("profTempoAtendimento").option("value",objRetorno.tempo);
									if (objRetorno.tipo == "CONSULTA") {
										objProfissionais.getEditor("profRestricaoGeral").option({readOnly: false, value: ""});
									}else{
										objProfissionais.getEditor("profRestricaoGeral").option({readOnly: true, value: ""});
									}
									objProfissionais.getEditor("profLocal").option({readOnly: false});
									dataSourceSalaAtendimento.reload();
								});
							},
							searchEnabled: true
						}
					},{
						colSpan: 1,
						dataField: "profTempoAtendimento",
						label		: {text:"Tempo Atend.:", alignment: "right"},
						editorType: "dxDateBox",
						validationRules: [{ type: "required"}],
						editorOptions: {
							type: "time",
							pickerType: "native",
							width: 120,
						},							
					},{
						colSpan: 4, 
						dataField: "profRestricaoGeral", 
						editorType: "dxTagBox", 
						label: {text:"Restrição Geral:",alignment: "right"},
						editorOptions: {
							dataSource: dataSourceRestricaoGeral,				
							readOnly: true,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
							searchEnabled: true
						}
					},{
						colSpan: 4, 
						dataField: "profLocal", 
						editorType: "dxSelectBox", 
						label: {text:"Local:",alignment: "right"},
						validationRules: [{ type: "required"}],
						editorOptions: {
							readOnly: true,
							dataSource: dataSourceSalaAtendimento, 
							valueExpr: "CodigoSala", 
							displayExpr: "Nome",
							searchEnabled: true,			
						}
					},{
						colSpan: 1, 
						dataField: "profEncaixe",
						label: { text:"Permite Encaixe:", alignment: "right"},
						editorType	: "dxSelectBox",
						validationRules: [{ type: "required"}],
						editorOptions: {
							dataSource: new DevExpress.data.DataSource({
          			store: new DevExpress.data.CustomStore({
              		loadMode: "raw",   
              		load: function() {
                  	return $.getJSON(urlSearch,{method:"GetVARPARA",DescParametro:"VARFLAGCARGAINTEGRACAO",pExibirCod:0});
              		}
          			})
      				}),
							onValueChanged: function(e) {
								if (!e.value || e.value == 0) {
									objProfissionais.getEditor("profQtdeEncaixe").option({"value": 0, readOnly: true});	
									return;
								}
								objProfissionais.getEditor("profQtdeEncaixe").option({"value": 1, readOnly: false});	
							},
							searchEnabled: false,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
							width: 130,
						}
					},{
						colSpan: 1, 
						dataField: "profQtdeEncaixe",
						label: { text:"Qtde. Encaixe:", alignment: "right"},
						editorType	: "dxNumberBox",
						editorOptions: {
							readOnly: true,
							min: 1,
							width: 110,
						}
					},{colSpan: 2,},{
						colSpan: 1, 
						dataField: "profDataInicio",
						label: { text: "Inicio Atend.:", alignment: "right"},
						editorType: "dxDateBox",
						validationRules: [{ type: "required"}],
						editorOptions: {
							type: "date",
							width: 130,
							min: "#(dataMinLimite)#",
							dateSerializationFormat: "yyyy-MM-dd",
							onValueChanged: function(e) {
								var minDataFinal = e.value;
								if (e.value != "") {
									var minDataFinal = #server(VAR.CSP.VARCadProfissional.MenorDataFinal(minDataFinal))#;
								}
								objProfissionais.getEditor("profDataFinal").option({
									value: "",
									min: minDataFinal
								});	
							}
						}
					},{
						colSpan: 1,
						dataField: "profHoraInicio",
						label: { text:"Hora Atend.:", alignment: "right"},
						editorType: "dxDateBox",
						validationRules: [{ type: "required"}],
						editorOptions: {
							type: "time",
              pickerType: "native",
              width: 110,
						}
					},{
						colSpan: 1,
						dataField: "profHoraFim",
						label: { text:"Hora Atend.:", alignment: "right", visible: false},
						editorType: "dxDateBox",
						validationRules: [{ type: "required"}],
						editorOptions: {
							type: "time",
              pickerType: "native",
              width: 110,
						}
					},{},{
						colSpan: 1,
						dataField: "profHoraIntervaloInicio",
						label: { text:"Hora Intervalo:", alignment: "right"},
						editorType: "dxDateBox",
						editorOptions: {
							type: "time",
              pickerType: "native",
              width: 110,
						}
					},{
						colSpan: 1,
						dataField: "profHoraIntervaloFim",
						label: { text:"", alignment: "right", visible: false},
						editorType: "dxDateBox",
						editorOptions: {
							type: "time",
              pickerType: "native",
              width: 110,
						}
					},{colSpan: 2}]
				},{
					colSpan: 5,
					colCount: 2,
					itemType: "group",
					cssClass: "second-group",
					caption: "Repetição",			
					items: [{
						colSpan: 2,
						template	: function (data, itemElement) {
							itemElement.append("<div id='divProfRepeticao'>")
						}
					},{
						dataField: "profRepetirCada",
						label: { text:"Repetir a cada:", alignment: "right"},
						editorType: "dxNumberBox",
						editorOptions: {
							readOnly: true,
							showSpinButtons: true,
							min: 0,
							max: 6
						}
					},{},{
						colSpan: 2,
						dataField: "profNosDias",
						label: { text:"No(s) Dia(s):", alignment: "right", vertialAlign: "top"},
						template	: function (data, itemElement) {
							itemElement.append("<div id='divProfRepetirNoDia'>")
						}
					},{
						colSpan: 2,
						colCount: 2,
						itemType: "group",
						caption: "Término",			
						items: [{
							dataField: "profTerminoQtde",
							label: { text:"Qtde de Dias:", alignment: "right"},
							editorType: "dxNumberBox",
							editorOptions: {
								readOnly: true,
								showSpinButtons: true,
								min: 0,
								onValueChanged: function(e) {
									objProfissionais.getEditor("profDataFinal").option({"value": ""});	
								}
							}
						},{
							colSpan: 2, 
							dataField: "profDataFinal",
							label: { text: "Final Atend.:", alignment: "right"},
							editorType: "dxDateBox",
							editorOptions: {
								dateSerializationFormat: "yyyy-MM-dd",
								readOnly: true,
								type: "date",
								width: 130,
								onValueChanged: function(e) {
									objProfissionais.getEditor("profTerminoQtde").option({"value": 0});	
								}
							}
						},{
							colSpan: 2, template: function (data, itemElement) { itemElement.append("<div style='height:38px;border:0px solid red;text-align:right'>")}
						}]
					}]
				},{
					colSpan: 12,
					template	: function (data, itemElement) {
						itemElement.append("<div id='divProfAcao'>")
					}
				},{
					colSpan: 12,
					itemType: "group",
					cssClass: "second-group",
					caption: "Agenda Médica",			
					items: [{
						template	: function (data, itemElement) {
							itemElement.append("<div id='divAgenda' style='width:"+(window.innerWidth - 63)+"px;'>")
						}
					}]						
				}]
			}).dxForm("instance");

			objProfRepeticao = $("#divProfRepeticao").dxDataGrid({
				dataSource: [{"nenhum": "Nenhum", "diaria": "Diária", "semanal": "Semanal", "mensal": "Mensal"}],
				columns: [
					{	dataField: "nenhum", alignment: "center"},
					{	dataField: "diaria", alignment: "center"},
					{	dataField: "semanal", alignment: "center"},
					{	dataField: "mensal", alignment: "center"},
				],
				scrolling: { showScrollbar: "never" },
		    onCellClick: function(e) {
			    if (pSequenciaAgenda != "") return;
		    	selectedRangeTR.startRowIndex = selectedRangeTR.endRowIndex = e.rowIndex;
		    	selectedRangeTR.startColumnIndex = selectedRangeTR.endColumnIndex = e.columnIndex;
		     	isSelectionStoppedTR = false;
		      showSelectionTipoRepeticao(e.component, selectedRangeTR);
		    },
    		columnChooser: { enabled: false, mode: "dragAndDrop"},
				allowColumnReordering: false,
				showColumnHeaders:false,
				columnAutoWidth: false,
				showColumnLines: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				hoverStateEnabled: false,
				showBorders: true,
				headerFilter: { visible: false },
				grouping: { autoExpandAll: false },
				groupPanel: { visible: false, allowColumnDragging: true },
				columnFixing: { enabled: false },
				filterRow: { visible: false },
				height: 28,
				export: { enabled: false },
				stateStoring: { enabled: false }, 
				wordWrapEnabled: false,
				searchPanel: { visible: false }, 
			}).dxDataGrid("instance");

			function foreachRangeTipoRepeticao(selectedRange, func) {
			  if(selectedRangeTR.startRowIndex >= 0) {
			    var minRowIndex = Math.min(selectedRangeTR.startRowIndex, selectedRangeTR.endRowIndex);
			    var maxRowIndex = Math.max(selectedRangeTR.startRowIndex, selectedRangeTR.endRowIndex);
			    var minColumnIndex = Math.min(selectedRangeTR.startColumnIndex, selectedRangeTR.endColumnIndex);
			    var maxColumnIndex = Math.max(selectedRangeTR.startColumnIndex, selectedRangeTR.endColumnIndex);
			    
			  	for(var rowIndex = minRowIndex; rowIndex <= maxRowIndex; rowIndex++) {
			      for(var columnIndex = minColumnIndex; columnIndex <= maxColumnIndex; columnIndex++) {
			      	func(rowIndex, columnIndex);
			      }
			    }
			  }
			}
    
			function showSelectionTipoRepeticao(component, selectedRangeTR) {
				component.element().find(".cell-selected").removeClass("cell-selected");
				foreachRangeTipoRepeticao(selectedRangeTR, function(rowIndex, columnIndex) {
					component.getCellElement(rowIndex, columnIndex).addClass("cell-selected");
				});
	
				if (selectedRangeTR.startColumnIndex == 0) {
					objProfissionais.getEditor("profRepetirCada").option({"readOnly": true, "value": 0});	
					objProfissionais.getEditor("profTerminoQtde").option({"readOnly": true, "value": 0});	
					objProfissionais.getEditor("profDataFinal").option({"readOnly": true, "value": ""});	
				}else {
					objProfissionais.getEditor("profRepetirCada").option({"readOnly": false, "value": 0});	
					objProfissionais.getEditor("profTerminoQtde").option({"readOnly": false, "value": 0});	
					objProfissionais.getEditor("profDataFinal").option({"readOnly": false, "value": ""});	
				} 
				if (selectedRangeTR.startColumnIndex == 2) {
					objProfRepetirNoDia.option("disabled", false);
				}else{
					objProfRepetirNoDia.option("disabled", true);
					selectedRangeRND = [];
					showSelectionRepeticaoNoDia(objProfRepetirNoDia, selectedRangeRND);
				}
			}
						
			objProfRepetirNoDia = $("#divProfRepetirNoDia").dxDataGrid({
				dataSource: [{"domingo": "D", "segunda": "S","terca": "T", "quarta": "Q", "quinta": "Q", "sexta": "S", "sabado": "S"}],
				disabled: true,
				columns: [
					{	dataField: "domingo", alignment: "center"},
					{	dataField: "segunda", alignment: "center"},
					{	dataField: "terca", alignment: "center"},
					{	dataField: "quarta", alignment: "center"},
					{	dataField: "quinta", alignment: "center"},
					{	dataField: "sexta", alignment: "center"},
					{	dataField: "sabado", alignment: "center"},
				],
				scrolling: { showScrollbar: "never" },
		    onCellClick: function(e) {
			    if (pSequenciaAgenda != "") return;
			    var array = [];
			    var flagInc = 1;
			    for (count = 0; count < selectedRangeRND.length ; count ++ ){
				    if (selectedRangeRND[count] == e.columnIndex) {
					    var flagInc = 0;
			        continue
				    }
				    array.push(selectedRangeRND[count]);
			    }
			    selectedRangeRND = array;
					if (flagInc) {
						selectedRangeRND.push(e.columnIndex); 
					}
		      showSelectionRepeticaoNoDia(e.component, selectedRangeRND);
		    },
		    columnChooser: { enabled: false, mode: "dragAndDrop"},
				allowColumnReordering: false,
				columnAutoWidth: false,
				showColumnLines: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				hoverStateEnabled: false,
				showBorders: true,
				showColumnHeaders:false,
				headerFilter: { visible: false },
				grouping: { autoExpandAll: false },
				groupPanel: { visible: false, allowColumnDragging: true },
				columnFixing: { enabled: false },
				filterRow: { visible: false },
				height: 28,
				export: { enabled: false },
				stateStoring: { enabled: false }, 
				wordWrapEnabled: false,
				searchPanel: { visible: false },
			}).dxDataGrid("instance");

			function showSelectionRepeticaoNoDia(component, selectedRangeRND) {
				component.element().find(".cell-selected").removeClass("cell-selected");
		    for (count = 0; count < selectedRangeRND.length ; count ++ ){
			    var xSelecao = new Number(selectedRangeRND[count]);
			    component.getCellElement(0, xSelecao).addClass("cell-selected");
		    };
			}

			$("#divProfAcao").html("<table width='100%'>" +
																		"<tr>" +
																			"<td align='right'>" + 
																				"<div id='divProfInserir'/>&nbsp;" +
																				"<div id='divProfCancelar'/>&nbsp;" +
																				"<div id='divProfLimpar'/>" + 
																			"</td>" +
																		"</tr>" +
																"</table>");

			objProfInserir = $("#divProfInserir").dxButton({
        icon	: "add",
        text	: "Inserir",
        type	: "success",
        stylingMode : "contained",
        onClick	: function(){
					var pCodProfissional = objProfissional.option("value");
					if (pCodProfissional == "" || pCodProfissional == null ){
						DevExpress.ui.notify("Favor selecionar o Profissional.","warning");
						return;
					}
					var flagFormProf = objProfissionais.validate().isValid; 
					if (!flagFormProf ){
						DevExpress.ui.notify("Favor preencher os campos obrigatórios","warning");
						return;
					}
					var pRestricaoGeral = ""
					if (objProfissionais.getEditor("profRestricaoGeral").option("value")) {
						pRestricaoGeral = objProfissionais.getEditor("profRestricaoGeral").option("value").join(",");	
					}
					var pNosDias = ""
					if (selectedRangeRND) {
						pNosDias = selectedRangeRND.join(",");	
					}
					$.getJSON(urlPreparacao,{
		      	method:"validaDuplicidade",
		      	pCodProfissional	: pCodProfissional,
		      	pSequenciaAgenda	:	pSequenciaAgenda,
		      	pObjProfissionais : JSON.stringify(objProfissionais.option("formData")),
						pTempoAtendimento : objProfissionais.getEditor("profTempoAtendimento").option("text"),
						pRestricaoGeral 	: pRestricaoGeral,
						pTipoRepeticao		:	selectedRangeTR.endColumnIndex,
						pNosDias					: pNosDias,
						pHoraInicio				: objProfissionais.getEditor("profHoraInicio").option("text"),
						pHoraFim					: objProfissionais.getEditor("profHoraFim").option("text")
					},function(objRetorno){
						if (objRetorno.status == 0){
							DevExpress.ui.notify(objRetorno.mensagem,"warning");
							return;
						}		
						$.getJSON(urlPreparacao,{
			      	method:"SalvarDadosProfissional",
			      	pCodProfissional	: pCodProfissional,
			      	pSequenciaAgenda	:	pSequenciaAgenda,
			      	pObjProfissionais : JSON.stringify(objProfissionais.option("formData")),
							pTempoAtendimento : objProfissionais.getEditor("profTempoAtendimento").option("text"),
							pRestricaoGeral 	: pRestricaoGeral,
							pTipoRepeticao		:	selectedRangeTR.endColumnIndex,
							pNosDias					: pNosDias,
							pHoraInicio				: objProfissionais.getEditor("profHoraInicio").option("text"),
							pHoraFim					: objProfissionais.getEditor("profHoraFim").option("text"),
							pHoraInterInicio	: objProfissionais.getEditor("profHoraIntervaloInicio").option("text"),
							pHoraInterFim			: objProfissionais.getEditor("profHoraIntervaloFim").option("text")
						},function(objRetorno){
							console.log(objRetorno)
							if (objRetorno.status==1){
								DevExpress.ui.notify("Dados Salvos com Sucesso!","success");
				        pSequenciaAgenda = "";
								objProfissionais.resetValues();
					    	selectedRangeTR.startRowIndex = selectedRangeTR.endRowIndex = 0;
					    	selectedRangeTR.startColumnIndex = selectedRangeTR.endColumnIndex = 0;
					     	isSelectionStoppedTR = false;
								showSelectionTipoRepeticao(objProfRepeticao, selectedRangeTR)
								var selectedRangeRND = [];
								showSelectionRepeticaoNoDia(objProfRepetirNoDia, selectedRangeRND);
								pDataAgenda	= new Number("#(+$Horolog)#")
								listarAgenda();
							}else{
								DevExpress.ui.notify("Erro: "+objRetorno.status,"error");
							}
						});
					});
	      }
			}).dxButton("instance");	

			objProfCancelar = $("#divProfCancelar").dxButton({
				icon: "trash",
				text: "Excluir",
				disabled: true,
				type: "danger",
        stylingMode : "contained",
        onClick	: function(){
					var result = DevExpress.ui.dialog.confirm("<i>Confirma o cancelamento da agenda?", "Agenda Médica");
		    	result.done(function(dialogResult) {
	        	if (dialogResult){
							var pCodProfissional = objProfissional.option("value");
	        		$.getJSON(urlPreparacao, {method:	"CancelarAgenda", pCodProfissional: pCodProfissional, 
							pSequenciaAgenda: pSequenciaAgenda},function(objRetorno){
								if (objRetorno.status==1){
									DevExpress.ui.notify("Agenda cancelada com sucesso!","success");
					        pSequenciaAgenda = "";
					        objProfissionais.resetValues();
									objProfissionais.getEditor("profUnidade").option({"value": "", "disabled": false});
									objProfissionais.getEditor("profGrupoAgendamento").option({"value": "", "disabled": false});
									objProfissionais.getEditor("profTempoAtendimento").option({"value": "", "disabled": false});
									objProfissionais.getEditor("profRestricaoGeral").option({"value": "", "disabled": false});
									objProfissionais.getEditor("profLocal").option({"value": "", "disabled": false});
									objProfissionais.getEditor("profEncaixe").option({"value": "", "disabled": false});
									objProfissionais.getEditor("profQtdeEncaixe").option({"value": "", "disabled": false});
									objProfissionais.getEditor("profDataInicio").option({"value": "", "disabled": false});
									objProfissionais.getEditor("profHoraInicio").option({"value": "", "disabled": false});
									objProfissionais.getEditor("profHoraFim").option({"value": "", "disabled": false});
									objProfissionais.getEditor("profHoraIntervaloInicio").option({"value": "", "disabled": false}),
									objProfissionais.getEditor("profHoraIntervaloFim").option({"value": "", "disabled": false})
									objProfissionais.getEditor("profRepetirCada").option({"disabled": false});
									objProfissionais.getEditor("profTerminoQtde").option({"disabled": false});
									objProfCancelar.option("disabled", true)
						    	selectedRangeTR.startRowIndex = selectedRangeTR.endRowIndex = 0;
						    	selectedRangeTR.startColumnIndex = selectedRangeTR.endColumnIndex = 0;
						     	isSelectionStoppedTR = false;
									showSelectionTipoRepeticao(objProfRepeticao, selectedRangeTR)
									var selectedRangeRND = [];
									showSelectionRepeticaoNoDia(objProfRepetirNoDia, selectedRangeRND);
									pDataAgenda	= new Number("#(+$Horolog)#");
									listarAgenda();
								}else{
									DevExpress.ui.notify("Erro: "+objRetorno.status,"error");
								}
								return
							});
	        	}
	      	});
        }
			}).dxButton("instance");	

			objProfLimpar = $("#divProfLimpar").dxButton({
        icon	: "fa fa-eraser",
        text	: "Limpar",
        type	: "default",
        stylingMode : "contained",
        onClick	: function(){
	        pSequenciaAgenda = "";
	        objProfissionais.resetValues();
	        divProfInserir.option("disabled", true);
					objProfissionais.getEditor("profUnidade").option({"value": "", "disabled": false});
					objProfissionais.getEditor("profGrupoAgendamento").option({"value": "", "disabled": false});
					objProfissionais.getEditor("profTempoAtendimento").option({"value": "", "disabled": false});
					objProfissionais.getEditor("profRestricaoGeral").option({"value": "", "disabled": false});
					objProfissionais.getEditor("profLocal").option({"value": "", "disabled": false});
					objProfissionais.getEditor("profEncaixe").option({"value": "", "disabled": false});
					objProfissionais.getEditor("profQtdeEncaixe").option({"value": "", "disabled": false});
					objProfissionais.getEditor("profDataInicio").option({"value": "", "disabled": false});
					objProfissionais.getEditor("profHoraInicio").option({"value": "", "disabled": false});
					objProfissionais.getEditor("profHoraFim").option({"value": "", "disabled": false});
					objProfissionais.getEditor("profHoraIntervaloInicio").option({"value": "", "disabled": false}),
					objProfissionais.getEditor("profHoraIntervaloFim").option({"value": "", "disabled": false})
					objProfissionais.getEditor("profRepetirCada").option({"disabled": false});
					objProfissionais.getEditor("profTerminoQtde").option({"disabled": false});
					objProfCancelar.option("disabled", true)
		    	selectedRangeTR.startRowIndex = selectedRangeTR.endRowIndex = 0;
		    	selectedRangeTR.startColumnIndex = selectedRangeTR.endColumnIndex = 0;
		     	isSelectionStoppedTR = false;
					showSelectionTipoRepeticao(objProfRepeticao, selectedRangeTR)
					var selectedRangeRND = [];
					showSelectionRepeticaoNoDia(objProfRepetirNoDia, selectedRangeRND);
					pDataAgenda	= new Number("#(+$Horolog)#");
					listarAgenda();
        }
			}).dxButton("instance");

			objControle = $("#divControle").dxForm({
				activeStateEnabled:true,
				formData: {},
				scrollingEnabled	: true,
				height	:function() {
					return window.innerHeight - 150;
				},
				items: [{
					itemType: "group",
					colCount: 2,
					items:[{
						dataField	: "criadoPor",
						label		: {
							alignment: "right"
						},
						disabled	: true
					},{
						dataField	: "criadoEm",
						label		: {
							alignment: "right"
						},
						disabled	: true
					},{
						dataField	: "alteradoPor",
						label		: {
							alignment: "right"
						},
						disabled	: true
					},{
						dataField	: "alteradoEm",
						label		: {
							alignment: "right"
						},
						disabled	: true
					}]
				}]
			}).dxForm("instance");
			

			function listarAgenda() {
	
				if ($("#divAgendaLista")) {
					$("#divAgendaLista").remove();
					$("#divAgendaCabecalho").remove();
					$("#divAgendaRodape").remove();
				}
				
				//$("#divAgenda").html("<div id='divAgendaLista'></div>");

				$("#divAgenda").html(
					"<div id='divAgendaCabecalho' style='width:"+(window.innerWidth - 63)+"px; font-size:12px; " +
					"border:1px solid #e0e0e0; text-align: left;padding-top:5px;padding-right:15px;height: 38px; " +
					"color: #333333' >" +
						"<table border=0 width='"+((window.innerWidth - 63) < 839 ? 839 : (window.innerWidth - 63))+"px;'><tr><td width='470px'>" +
						"<span style='color: #333333;'> &nbsp;<b>Legenda: &nbsp;</b></span>" + 
						"<span style='height: 20px;color: #333333; background-color: #A9C8DE;border-radius: 2px;display: inline-block;vertical-align: middle;'>" +
							"&nbsp;Horário Livre&nbsp;</span> " +
						"<span>&nbsp; </span>" +
						"<span style='height: 20px;color: #333333; background-color: #C4FFC4;border-radius: 2px;display: inline-block;vertical-align: middle;'>" +
							"&nbsp;Horário com Paciente&nbsp;" +
						"</span>" +
						"<span>&nbsp; </span>" +
						"<span style='height: 20px;color: #333333; background-color: #ffcaca;border-radius: 2px;display: inline-block;vertical-align: middle;'>" +
							"&nbsp;Ausência (Bloqueado)&nbsp;" +
						"</span>" +
						"<td style='text-align:right;padding-right:10px;'>"+
							"<div id='divEditar'></div>&nbsp;" +
							"<div id='divRestricao'></div>&nbsp;" +
							"<div id='divAusencia'></div>" +
						"</td></tr></table>" +
	    		"</div>" +
					"<div id='divAgendaListar' style='width:"+(window.innerWidth - 63)+"px; margin-top: 3px; overflow: auto; '>"+
					"<div id='divAgendaListar1' style='width:"+(window.innerWidth - 63)+"px;'></div>" +
					"</div>" +
					"<div id='divAgendaRodape' style='width:"+(window.innerWidth - 63)+"px; font-size:12px; margin-top: 2px; border:1px solid #e0e0e0; " +
	    			"text-align: right;padding-top:5px;padding-right:15px;height: 30px; color: #333333'></div>"
				);

				$("#divEditar").dxButton({
					icon: "fas fa-edit",
					text: "Editar",
					type: "default",
				  stylingMode : "contained",
				  onClick	: function(){
						tipoEscolha = 1;
						editarProf('','');
				  }
				});
				
				$("#divRestricao").dxButton({
					icon: "far fa-exclamation-circle",
					text: "Cad. Restrição",
					type: "default",
				  stylingMode : "contained",
				  onClick	: function(){
						tipoEscolha = 2;
						cadastrarRestricao('');
				  }
				});

				$("#divAusencia").dxButton({
					icon: "far fa-calendar-times",
					text: "Bloqueio/Desbloqueio",
					type: "danger",
				  stylingMode : "contained",
				  onClick	: function(){
						$("#divCadastroAusencia").dxPopup("show");	
						objFormAddAusencia = $("#divFormAddAusencia").dxForm("instance");
				  }
				});
	
				var pCodProfissional = objProfissional.option("value");
				
				pDataAgendaF = #server(VAR.CSP.VARAgendaMedica.GetDataFormatada(""+pDataAgenda, 3))#;
				dia = new Number(pDataAgendaF.split("-")[2]);
				mes = new Number(pDataAgendaF.split("-")[1]);
				ano = new Number(pDataAgendaF.split("-")[0]);
		
				$.getJSON(urlPreparacao, {method:	"ListarAgendaScheduler", pCodProfissional: pCodProfissional, 
				pDataInicio: pDataAgenda},function(objRetorno){
					console.log(objRetorno)  
					
					console.log(flagPrimeira)
					
					for (count = 0 ; count < objRetorno.dados.length ; count ++) {
						objRetorno.dados[count].inicio =	new Date(
																								objRetorno.dados[count].Ano,
																								objRetorno.dados[count].Mes,
																								objRetorno.dados[count].Dia,
																								objRetorno.dados[count].iHr,
																								objRetorno.dados[count].iMin,
																								0	
																							);
						objRetorno.dados[count].fim =	new Date(
																						objRetorno.dados[count].Ano,
																						objRetorno.dados[count].Mes,
																						objRetorno.dados[count].Dia,
																						objRetorno.dados[count].fHr,
																						objRetorno.dados[count].fMin,
																						0	
																					);
					}
					objAgenda = $("#divAgendaListar1").dxScheduler({
						timeZone: 'America/Sao_Paulo',
						editing: false,
						cellDuration: 15,
						onOptionChanged: function(e) {
							if(e.name === "currentDate") {
								var data = e.value;
		           	var dia = data.getDate();
		           	var mes = data.getMonth() + 1;
	           		var ano = data.getFullYear();
		           	pDataAgenda = #server(VAR.CSP.VARAgendaMedica.GetDataFormatada(ano+"-"+mes+"-"+dia, 0))#;
		           	listarAgenda()
							}
	        	},
						resources: [{
							fieldExpr: "idGrupo", 
							allowMultiple: false,
							dataSource: [
								{text: "Horário Livre", id: "L", color: "#A9C8DE"},
								{text: "Horário com Paciente", id: "A", color: "#C4FFC4"},
								{text: "Ausência (Bloqueado)", id: "E", color: "#ffcaca"}
							],
						}],
						appointmentTemplate: function(model) {
							if (model.appointmentData.numAdmissao == "" || model.appointmentData.numAdmissao == null) {
								conteudo = "<span style='font-size: 10px; text-align: left'>"+model.appointmentData.horaIni+" - "+
													 model.appointmentData.descUnidade+" - "+model.appointmentData.descSala+"</span>" +
													 "<br><span style='font-size: 10px;'>"+model.appointmentData.descricao+"</span>";
							}else{
								conteudo = "<span style='font-size: 10px; text-align: left'>" + model.appointmentData.horaIni +
													 " - " + (model.appointmentData.encaixe == 1 ? "<b>ENCAIXE</b>" : "" ) + " - " +
													 model.appointmentData.descUnidade+" - "+model.appointmentData.descSala+"</span>" + 
													 "<br><span style='font-size: 10px;'><b>"+model.appointmentData.nomePaciente+"</b></span>"; 
								if (model.appointmentData.telefone != "") {
									conteudo += "<br><span style='font-size: 10px;'>"+model.appointmentData.telefone+"</span>";
								}
							}
							return $("<div style='color:black;'>" + conteudo + "</div>");
						},
						onContentReady: function(e) {
							var currentHour = new Date().getHours() - 1;
							//e.component.scrollToTime(currentHour, 30, new Date());
						},
						onAppointmentClick: function(e) { e.cancel = true; },
						//onAppointmentDblClick: function(e) { e.cancel = true; },
						//shadeUntilCurrentTime: true,
						firstDayOfWeek: 0,
						views: ["week"],
						currentView: "week",
						currentDate: new Date(ano, mes, dia),
						startDayHour: objRetorno.menorTempoAtend,
						endDayHour: objRetorno.maiorTempoAtend,
						height: function() { 
							var xHeight = window.innerHeight - 650;
							return (xHeight < 310 ? 310 : xHeight); 
						},
						textExpr: "text",
						startDateExpr: "inicio",
						endDateExpr: "fim", 
						CellsAutoHeightOption: true,
						CrossScrollingEnabled: true,
						maxAppointmentsPerCell: "unlimited",
						dateSerializationFormat: "yyyy-MM-ddTHH:mm:ss",
						showAllDayPanel: false,
						dataSource: objRetorno.dados
					}).dxScheduler("instance");
					$("#divAgendaRodape").css("display", "block").html("<b>Ocupação: "+objRetorno.percOcupacao+"%</b>"); ///
					flagPrimeira = 0;
				});				
				return 
				$.getJSON(urlPreparacao, {method:	"ListarAgenda", pCodProfissional: pCodProfissional, 
					pDataInicio: pDataAgenda},function(objRetorno){
						objAgenda = $("#divAgendaLista").dxDataGrid({
							dataSource: objRetorno.Dados,
							columns: objRetorno.Columns,
							rowTemplate: function(container, item) {
								var data = item.data;
								var markup = "<tbody class='employee dx-row dx-row1'>" +
									"<tr>" +
										"<td align='center' style='border:1px solid #dddddd;'>" + data.horadeAtendimento + "</td>";  
						    for (count = 1; count < objRetorno.Columns.length ; count ++ ){
									if (objRetorno.Columns[count].descosid == 1) {
										markup += "<td align='center' style='border:1px solid #dddddd;'></td>";
									}else{
										for (countSeq = 0; countSeq < objRetorno.Columns[count].columns.length ; countSeq ++ ){
											var dataField = objRetorno.Columns[count].columns[countSeq].dataField;
											if (typeof data[dataField] != "undefined"){
												var backGround = data[dataField+"backGround"];
												var corBorder = "#dddddd";
												if (backGround == "#d9ffd9") var corBorder = "green";
												if (backGround == "#ddedff") var corBorder = "blue";
												if (backGround == "#ffcaca") var corBorder = "red";
												var conteudo = data[dataField];
												aConteudo = conteudo.split("~");
												if (aConteudo[0]=="") {
													var xConteudo = "";	
												}else{
													var xConteudo = "<span style='font-size:12px;'>"+aConteudo[1]+"</span><br>"+
																					"<span style='font-size:10px;'>"+aConteudo[2]+"</span>";	
												}
												markup += "<td align='center' style='background:"+backGround+";" + 
												"border-top:1px solid "+corBorder+";border-left:1px solid "+corBorder+";" +
												"border-right:1px solid "+corBorder+";";
												if (data[dataField+"rowSpan"] == 1) {
													markup += "border-bottom:1px solid "+corBorder+";"
												}
												markup += "'>";
												if (data[dataField+"restricao"] != "") {
													markup += "<i class='fas fa-exclamation-circle' title='Restrição: "+data[dataField+"restricao"]+"'></i>&nbsp;"
												}
												markup += xConteudo+"</td>";
											}else{
												var backGround = data[dataField+"backGround"];
												var corBorder = "#dddddd";
												if (backGround == "#d9ffd9") var corBorder = "green";
												if (backGround == "#ddedff") var corBorder = "blue";
												if (backGround == "#ffcaca") var corBorder = "red";
												markup += "<td align='center' style='background:"+backGround+";" +  
												"border-left:1px solid "+corBorder+";border-right:1px solid "+corBorder+";";
												if (data[dataField+"rowSpan"] == 1 && backGround == "#ffffff") {
													markup += "border-top:1px solid "+corBorder+";"
												}
												if (data[dataField+"rowSpan"] == 1) {
													markup += "border-bottom:1px solid "+corBorder+";"
												}
												markup += "'></td>";
											}
										}
									}
						    }
								markup += 
									"</tr>" +
								"</tbody>";
								container.append(markup);
							},
							customizeColumns: function (columns) {
								$.each(columns, function (index, element) {
									if (element.caption.indexOf("/") != -1) {
										element.headerCellTemplate = function (header, info) {
											if (element.descosid == 1 || element.dataAtual > element.dataAgend ) {
												$('<div>').html("<span style='font-size:14px;'>" + 
												info.column.caption+"</span>").css('font-size', '16px').appendTo(header);
											}else{
												$('<div>').html("<span style='font-size:14px;'>" + 
												info.column.caption+"&nbsp; &nbsp;<i fas class='fas fa-calendar-times' " + 
												"title='Cadastrar ausência' onClick='cadastrarAusencia("+element.dataAgend+")' " + 
												"style='color:#337ab7;cursor:pointer'/></span>").css('font-size', '16px').appendTo(header);
											}
										};
									}else if (element.dataField != "horadeAtendimento") {
											element.headerCellTemplate = function (header, info) {
												if (element.descosid == 1 || element.dataAtual > element.dataAgend ) {
													$('<div>').html("<span style='font-size:12px;'>" + 
														info.column.caption+"</span>").css('font-size', '14px').appendTo(header);
												}else{
													conteudo = "<span style='font-size:12px;'>" + 
														info.column.caption+"&nbsp; &nbsp;<i fas class='fas fa-edit' title='Editar sequencia' " + 
														"style='color:#337ab7;cursor:pointer' onClick=editarProf('"+element.dataAgend+"','')/>";
													if (element.tipo == "CONSULTA") {	
														conteudo += "&nbsp;&nbsp;<i fas class='fas fa-ban' title='Cadastrar restrição.' " + 
															"style='color:#337ab7;cursor:pointer' onClick=cadastrarRestricao('"+element.dataAgend+"','"+element.refPai+"')/>";
													}
													conteudo += "</span>";
													
													$('<div>').html(conteudo).css('font-size', '14px').appendTo(header);
												}
										};
									}									
								});
							},
							summary: {
            		totalItems: objRetorno.Summary,
								calculateCustomSummary: function (options) {
									options.totalValue = objRetorno.PercOcupacao+"%";
								}
							},
							columnChooser: { enabled: false, mode: "dragAndDrop"},
							allowColumnReordering: false,
							editing: { mode: "popup", allowAdding: false, allowUpdating: false, allowDeleting: false, useIcons: true},
							columnAutoWidth: true,
							showColumnLines: true,
							showRowLines: true,
							rowAlternationEnabled: true,
							hoverStateEnabled: true,
							showBorders: true,
							headerFilter: { visible: false },
							grouping: { autoExpandAll: false },
							groupPanel: { visible: false, allowColumnDragging: true },
							columnFixing: { enabled: true },
							filterRow: { visible: false },
							sorting: {mode:"none"},
							height: function() { 
								var xHeight = window.innerHeight - 520;
								return (xHeight < 310 ? 310 : xHeight); 
							},
							export: { enabled: true },
							stateStoring: { enabled: false }, 
							wordWrapEnabled: true,
							searchPanel: { visible: true }, 
							paging: { enabled: false},
							onToolbarPreparing: function(e) {
				    		var dataGrid = e.component;
				        e.toolbarOptions.items.unshift({
									location: "before",
                  template	: function () {
										return	$("<div style='width:500px;text-align:left;'/>").append(
															$("<span><b>Legenda: &nbsp;</b></span>" + 
																"<span style='height: 20px; background-color: #d9ffd9;border-radius: 2px;" + 
																"display: inline-block;vertical-align: middle;'>&nbsp; Horário Livre &nbsp;</span>" + 
																"<span>&nbsp; <span>" +
																"<span style='height: 20px; background-color: #ddedff;border-radius: 2px;" + 
																"display: inline-block;vertical-align: middle;'>&nbsp; Horário com Paciente &nbsp;</span>" + 
																"<span>&nbsp; <span>" +
																"<span style='height: 20px; background-color: #ffcaca;border-radius: 2px;" + 
																"display: inline-block;vertical-align: middle;'>&nbsp; Ausência (Bloqueado) &nbsp;</span>"  
															)
														);
                	}
								},{
									location: "after",
									widget: "dxButton",
									options: {
										icon: "chevrondoubleleft",
										hint: "Semana Anterior",
										onClick: function(e) {
											dataAtual = new Number("#(+$Horolog)#");
											if ((pDataAgenda - 7) >= dataAtual) {
												pDataAgenda	= pDataAgenda - 7;
												listarAgenda()
											}
										}
									}
								},{
									location: "after",
									widget: "dxButton",
									options: {
										icon: "chevrondoubleright",
										hint: "Próxima Semana",
										onClick: function(e) {
											pDataAgenda	= pDataAgenda + 7;
											listarAgenda()
										}
									}
								})
				    	}
						}).dxDataGrid("instance");
					}
				);
			}
				
			dataSourceProfissional = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					byKey: function(args) {
						return $.getJSON(urlSearch,{
							method						:	"GetMEDProvider",
							pCodProfissional	: args,
						});
					},
					load: function(args) {
						return $.getJSON(urlSearch,{
							method						:	"GetMEDProvider",
							pSkip							:	args.skip,
							pTake							:	args.take,
							pSearchValue			:	args.searchValue,
							pExterno					: 2
						});
					}
				})
			});	
				
			objProfissional = $("#divProfissional").dxSelectBox({
				dataSource: dataSourceProfissional,
				placeholder: "+",
				searchEnabled: true,
				valueExpr: "CodProfissional", 
				displayExpr: "Nome",
				showClearButton: true,
        itemTemplate: function(data) {
	        return	"<div class='custom-item'>" +
	        					"<div style='color:"+(data.Status==2?'red':'')+"'>" + data.Nome+ "</div>" +
	        				"</div>";
        },
				onValueChanged: function(e) {
					if (!e.value) {
						$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 0)
						objPessoal.resetValues();
						objControle.resetValues();
		        objProfissionais.resetValues();
						objForm.getEditor("situacao").option("value", "");

						selectedRangeTR 	= {};
						isSelectionStoppedTR;
						selectedRangeRND 	= [];
						isSelectionStoppedRND;
						pDataAgenda				= new Number("#(+$Horolog)#")
						pSequenciaAgenda	= "";
						SequenciaId				= "";
						dataSourceSelEdicao = [];
						pSequenciaAgenda = "";
		        objProfissionais.resetValues();
						objProfissionais.getEditor("profUnidade").option({"value": "", "disabled": false});
						objProfissionais.getEditor("profGrupoAgendamento").option({"value": "", "disabled": false});
						objProfissionais.getEditor("profTempoAtendimento").option({"value": "", "disabled": false});
						objProfissionais.getEditor("profRestricaoGeral").option({"value": "", "disabled": false});
						objProfissionais.getEditor("profLocal").option({"value": "", "disabled": false});
						objProfissionais.getEditor("profEncaixe").option({"value": "", "disabled": false});
						objProfissionais.getEditor("profQtdeEncaixe").option({"value": "", "disabled": false});
						objProfissionais.getEditor("profDataInicio").option({"value": "", "disabled": false});
						objProfissionais.getEditor("profHoraInicio").option({"value": "", "disabled": false});
						objProfissionais.getEditor("profHoraFim").option({"value": "", "disabled": false});
						objProfissionais.getEditor("profHoraIntervaloInicio").option({"value": "", "disabled": false}),
						objProfissionais.getEditor("profHoraIntervaloFim").option({"value": "", "disabled": false})
						objProfissionais.getEditor("profRepetirCada").option({"disabled": false});
						objProfissionais.getEditor("profTerminoQtde").option({"disabled": false});
						objProfCancelar.option("disabled", true)
			    	selectedRangeTR.startRowIndex = selectedRangeTR.endRowIndex = 0;
			    	selectedRangeTR.startColumnIndex = selectedRangeTR.endColumnIndex = 0;
			     	isSelectionStoppedTR = false;
						showSelectionTipoRepeticao(objProfRepeticao, selectedRangeTR)
						var selectedRangeRND = [];
						showSelectionRepeticaoNoDia(objProfRepetirNoDia, selectedRangeRND);
						pDataAgenda	= new Number("#(+$Horolog)#");
						listarAgenda();
						
						$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 0)

					}else{
						carregarDados(e.value);
					}
				}
			}).dxSelectBox("instance");	

			function carregarDados(pCodProfissional) {
				$.getJSON(urlPreparacao, {	
					method	:	"GetDados",
					pCodProfissional: pCodProfissional,
				},function(objRetorno){
					objPessoal.option("formData", objRetorno.dadosPessoal)
					objControle.option("formData", objRetorno.dadosControle)
					objForm.getEditor("situacao").option("value", objRetorno.situacao);
					pDataAgenda	= new Number("#(+$Horolog)#");
					listarAgenda();	
					$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 0)				
				});
			}	

			objDataSourceSelEdicao  = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",   
					load: function(){
						return dataSourceSelEdicao;
					},
				})
			});

			$("#divOpcaoSelecao").dxPopup({
				visible: false,
				title: "Escolha a agenda cadastrada para o dia",
				width: 700,
				height:  250,
				position: {
					my: "center",
					at: "center",
					of: window
				},
				dragEnabled: true,
				contentTemplate: function(e) {
					objOpcaoSelecao = $("<div id='divGridOpcaoSelecao'>").dxDataGrid({
						dataSource: objDataSourceSelEdicao,
						columns: [
							{dataField: "unidade", caption: "Unidade", alignment: "center"},
							{dataField: "grupoAgend", caption: "Grupo de Agendamento", alignment: "center"},
							{dataField: "data", caption: "Data de Atendimento", alignment: "center"},
							{dataField: "hora", caption: "Hora de Atendimento", alignment: "center"},
						],
						columnChooser: { enabled: false, mode: "dragAndDrop"},
						allowColumnReordering: false,
						editing: { mode: "popup", allowAdding: false, allowUpdating: false, allowDeleting: false, useIcons: true},
						onRowClick: function(e) {
							if (tipoEscolha == 1) {
								editarProf(e.data.dataSelecionada, e.data.referenciaPai);
							}else{
								cadastrarRestricao(e.data.referenciaPai)	
							}
							$("#divOpcaoSelecao").dxPopup("hide");
						},
						columnAutoWidth: true,
						showColumnLines: true,
						showRowLines: true,
						rowAlternationEnabled: true,
						hoverStateEnabled: true,
						showBorders: true,
						headerFilter: { visible: false },
						grouping: { autoExpandAll: false },
						groupPanel: { visible: false, allowColumnDragging: true },
						columnFixing: { enabled: false },
						filterRow: { visible: false },
						height: function() { return 200; },
						export: { enabled: false },
						stateStoring: { enabled: false }, 
						wordWrapEnabled: true,
						searchPanel: { visible: false }
					});
					e.append(objOpcaoSelecao);
				}
			});

			function editarProf(pData, pSeqSelecionada) {
				var pCodProfissional = objProfissional.option("value");
				$.getJSON(urlPreparacao, { method	:	"GetEditarAgenda", pCodProfissional: pCodProfissional,
					pSequencia: pSeqSelecionada, pRestricao: 0},function(objRetorno){
					if (objRetorno.selecionar == 1) {
						dataSourceSelEdicao = objRetorno.opcoes;
						objDataSourceSelEdicao.reload();
						$("#divOpcaoSelecao").dxPopup("show");
					}else{
						pSequenciaAgenda = objRetorno.sequencia;
						objProfissionais.getEditor("profUnidade").option({"value": objRetorno.unidade, "disabled": true});
						objProfissionais.getEditor("profGrupoAgendamento").option({"value": objRetorno.grupoAgendamento, "disabled": true});
						objProfissionais.getEditor("profTempoAtendimento").option({"value": objRetorno.tempodeAtendimento, "disabled": true});
						$.getJSON(urlPreparacao,{method:"GetProcedimentos",pGrupoAgendamento:objRetorno.grupoAgendamento},
						function(objRetornoRestricao){
							objProfissionais.getEditor("profRestricaoGeral").option({
								dataSource: objRetornoRestricao,
								"value": objRetorno.restricaoGeral, 
								"disabled": true
							});
						});
						objProfissionais.getEditor("profLocal").option({"value": objRetorno.local1, "disabled": true});
						objProfissionais.getEditor("profEncaixe").option({"value": objRetorno.permiteEncaixe, "disabled": true});
						objProfissionais.getEditor("profQtdeEncaixe").option({"value": objRetorno.qtdeEncaixe, "disabled": true});
						objProfissionais.getEditor("profDataInicio").option({"value": objRetorno.dataInicial, "disabled": true});
						objProfissionais.getEditor("profHoraInicio").option({"value": objRetorno.horaInicial, "disabled": true});
						objProfissionais.getEditor("profHoraFim").option({"value": objRetorno.horaFinal, "disabled": true});
						objProfissionais.getEditor("profHoraIntervaloInicio").option({"value": objRetorno.horaIntervaloInicio, "disabled": true}),
						objProfissionais.getEditor("profHoraIntervaloFim").option({"value": objRetorno.horaIntervaloFim, "disabled": true})
			    	selectedRangeTR.startRowIndex = selectedRangeTR.endRowIndex = 0;
			    	selectedRangeTR.startColumnIndex = selectedRangeTR.endColumnIndex = objRetorno.repeticao;
	  		   	isSelectionStoppedTR = false;
						showSelectionTipoRepeticao(objProfRepeticao, selectedRangeTR)
						objProfissionais.getEditor("profRepetirCada").option({"value": objRetorno.repetiraCada});
						selectedRangeRND = objRetorno.nosDias.split(",");
						showSelectionRepeticaoNoDia(objProfRepetirNoDia, selectedRangeRND);
						objProfissionais.getEditor("profDataFinal").option({"value": "'"+objRetorno.dataFinal+"'"});
						objProfissionais.getEditor("profRepetirCada").option({"disabled": true});
						objProfissionais.getEditor("profTerminoQtde").option({"disabled": true});
						if (objRetorno.bloqEdicaoeCancel == 0) {
							objProfCancelar.option("disabled", false)
							objProfInserir.option("disabled", false)
						}else{
							objProfInserir.option("disabled", true)
							objProfCancelar.option("disabled", true)
						}
					}
				});	
			}
			
			function cadastrarAusencia(pData) {
				var pCodProfissional = objProfissional.option("value");
				$.getJSON(urlPreparacao, {	
					method	:	"GetCadastrarAusencia",
					pCodProfissional: pCodProfissional,
					pData: pData,
				},function(objRetorno){
					$("#divCadastroAusencia").dxPopup("show");	
					objFormAddAusencia = $("#divFormAddAusencia").dxForm("instance");
					objFormAddAusencia.getEditor("data").option("value", objRetorno.data);
					objFormAddAusencia.getEditor("dia").option("value", objRetorno.indicadordoDia);
					objFormAddAusencia.getEditor("horaInicial").option("value", objRetorno.horaInicial);
					objFormAddAusencia.getEditor("horaFinal").option("value", objRetorno.horaFinal);
					objFormAddAusencia.getEditor("descricao").option("value", objRetorno.descricao);
					if (objRetorno.flagExcluir == 1) {
						objAusenciaExcluir.option("disabled", false);
					}else{
						objAusenciaExcluir.option("disabled", true);
					}
				});
			}	
	
			function cadastrarRestricao(pSeqId) {
				var pCodProfissional = objProfissional.option("value");
				if (pSeqId == "") {
					$.getJSON(urlPreparacao, { method	:	"GetEditarAgenda", pCodProfissional: pCodProfissional,
					pSequencia: "", pRestricao: 1},function(objRetorno){
						dataSourceSelEdicao = objRetorno.opcoes;
						objDataSourceSelEdicao.reload();
						$("#divOpcaoSelecao").dxPopup("show");
					});
				}else{
					SequenciaId					 = pSeqId;
					$.getJSON(urlPreparacao, {	
						method	:	"GetCadastrarRestricao",
						pCodProfissional: pCodProfissional,
						pSeqId: pSeqId
					},function(objRetorno){
						$("#divCadastroRestricao").dxPopup("show");	
						objFormAddRestricao = $("#divFormAddRestricao").dxForm("instance");
						objFormAddRestricao.getEditor("unidade").option("value", objRetorno.unidade);
						objFormAddRestricao.getEditor("grupoAgendamento").option("value", objRetorno.grupoAgendamento);
						objFormAddRestricao.getEditor("tempoAtendimento").option("value", objRetorno.tempodeAtendimento);
						objFormAddRestricao.getEditor("restricaoGeral").option("value", objRetorno.restricaoGeral);
						objFormAddRestricao.getEditor("local").option("value", objRetorno.local);
						objFormAddRestricao.getEditor("dataInicial").option("value", objRetorno.dataInicial);
						objFormAddRestricao.getEditor("dataFinal").option("value", objRetorno.dataFinal);
						objFormAddRestricao.getEditor("horaInicial").option("value", objRetorno.horaInicial);
						objFormAddRestricao.getEditor("horaFinal").option("value", objRetorno.horaFinal);
						objFormAddRestricao.getEditor("repetirCada").option("value", objRetorno.repetiraCada);
						objFormAddRestricao.getEditor("noDia").option("value", objRetorno.nosDias);
						objFormAddRestricao.getEditor("restricao").option({"value": "", "dataSource": objRetorno.restricao });
						objFormAddRestricao.getEditor("data").option({"value": "", "dataSource": objRetorno.datas });
						objFormAddRestricao.getEditor("horario").option({"value": "", "dataSource": objRetorno.horas });
						objFormAddRestricao.getEditor("dataTodas").option("value", 0);
						objFormAddRestricao.getEditor("horarioTodos").option("value", 0);
						selectedRangeRestricao 	= [];
						showSelectionRepeticaoNoDiaRestricao(objRestRepetirNoDia, selectedRangeRestricao);
						isSelectionStoppedRestricao;
						dataSourceListarRestricao.reload();
					});
				}
			}	
	
			function showSelectionRepeticaoNoDiaRestricao(component, selectedRangeRestricao) {
				component.element().find(".cell-selected").removeClass("cell-selected");
		    for (count = 0; count < selectedRangeRestricao.length ; count ++ ){
			    var xSelecao = new Number(selectedRangeRestricao[count]);
			    component.getCellElement(0, xSelecao).addClass("cell-selected");
		    };
			}
	
			$("#divCadastroRestricao").dxPopup({
				visible: false,
				title: "Cadastro de Restrição",
				width: 1000,
				height:  560,
				position: {
					my: "center",
					at: "center",
					of: window
				},
				dragEnabled: true,
				contentTemplate: function(e) {
					objAddRestricao= $("<div id='divFormAddRestricao'>").dxForm({
						readOnly: false,
						alignItemLabels: true,
						showColonAfterLabel: false,
						screenByWidth: function(width) { return "lg"; },
						labelLocation: "left",
						colCount: 3,
						items: [{
							colCount: 4,
							colSpan: 2,
							itemType: "group",
							items: [{
								dataField: "unidade", 
								colSpan: 4,
								label: { text: "Unidade:", alignment: "right"},
								editorOptions: {readOnly: true,}
							},{
								dataField: "grupoAgendamento", 
								colSpan: 2,
								label: { text: "Grupo Agendamento:", alignment: "right"},
								editorOptions: {readOnly: true,}
							},{
								dataField: "tempoAtendimento", 
								colSpan: 2,
								label: { text: "Tempo Atend.:", alignment: "right"},
								editorOptions: {readOnly: true,}
							},{
								dataField: "restricaoGeral", 
								colSpan: 4,
								label: { text: "Restrição Geral:", alignment: "right"},
								editorOptions: {readOnly: true,}
							},{
								dataField: "local", 
								colSpan: 4,
								label: { text: "Local:", alignment: "right"},
								editorOptions: {readOnly: true,}
							},{
								dataField: "dataInicial", 
								label: { text: "Data Atendimento:", alignment: "right"},
								editorOptions: {readOnly: true, width: 90}
							},{
								dataField: "dataFinal", 
								label: { alignment: "right", visible: false},
								editorOptions: {readOnly: true, width: 90}
							},{
								dataField: "horaInicial", 
								label: { text: "Hora Atendimento:", alignment: "right"},
								editorOptions: {readOnly: true, width: 50}
							},{
								dataField: "horaFinal", 
								label: {alignment: "right", visible: false},
								editorOptions: {readOnly: true, width: 50}
							},{
								dataField: "repetirCada", 
								label: { text: "Repetir a cada:", alignment: "right"},
								editorOptions: {readOnly: true, width: 40}
							},{
								dataField: "noDia", 
								colSpan: 3,
								label: { text: "No(s) Dia(s):", alignment: "right"},
								editorOptions: {readOnly: true,}
							},{
								colSpan: 4,
								template	: function (data, itemElement) {
									itemElement.append("<div style='width:100%;border-bottom:1px solid #dddddd;'>")
								}
							},{
								dataField: "restricao", 
								colSpan: 4,
								label: { text: "Restrição:", alignment: "right"},
								editorType: "dxTagBox", 
								editorOptions: {
									valueExpr: "Codigo", 
									displayExpr: "Descricao",
									height: 70,
									searchEnabled: true
								}
							},{
								dataField: "dataTodas", 
								label: { text: "Data:", alignment: "right"},
								editorType: "dxCheckBox",
								editorOptions: {
									text: "Todas",
									onValueChanged: function(e) {
										objForm = $("#divFormAddRestricao").dxForm("instance");
										if (e.value) {
											objForm.getEditor("data").option({readOnly: true, value: ""});
											$("#divRestRepetirNoDia").dxDataGrid("instance").option("disabled", true);
											selectedRangeRestricao 	= [];
											showSelectionRepeticaoNoDiaRestricao(objRestRepetirNoDia, selectedRangeRestricao);
										}else{
											objForm.getEditor("data").option({readOnly: false, value: ""});
											$("#divRestRepetirNoDia").dxDataGrid("instance").option("disabled", false);
											selectedRangeRestricao 	= [];
											showSelectionRepeticaoNoDiaRestricao(objRestRepetirNoDia, selectedRangeRestricao);
										}
									}
								}
							},{
								dataField: "data", 
								colSpan: 3,
								label: { text: "Data:", alignment: "right", visible: false},
								editorType: "dxTagBox", 
								editorOptions: {
									valueExpr: "dataInterna", 
									displayExpr: "data",
									height: 50,
									searchEnabled: true
								}
							},{},{
								colSpan: 3,
								dataField: "restNosDias",
								label: { text:"No(s) Dia(s):", alignment: "right", vertialAlign: "top"},
								template	: function (data, itemElement) {
									itemElement.append("<div id='divRestRepetirNoDia'>")
								}
							},{
								dataField: "horarioTodos", 
								label: { text: "Horario:", alignment: "right"},
								editorType: "dxCheckBox",
								editorOptions: {
									text: "Todos",
									onValueChanged: function(e) {
										objForm = $("#divFormAddRestricao").dxForm("instance");
										if (e.value) {
											objForm.getEditor("horario").option({readOnly: true, value: ""});
										}else{
											objForm.getEditor("horario").option({readOnly: false, value: ""});
										}
									}
								}
							},{
								dataField: "horario", 
								colSpan: 3,
								label: { text: "Horario:", alignment: "right", visible: false},
								editorType: "dxTagBox", 
								editorOptions: {
									valueExpr: "horaInterna", 
									displayExpr: "hora",
									height: 50,
									searchEnabled: true
								}
							},{ 
								colSpan: 4,
								template	: function (data, itemElement) {
									itemElement.append("<div id='divRestricaoAcao'>")
								}
							}]
						},{
							template	: function (data, itemElement) {
								itemElement.append("<div id='divListarRestricao'>")
							}
						}]
					});
					e.append(objAddRestricao);

					objRestRepetirNoDia = $("#divRestRepetirNoDia").dxDataGrid({
						dataSource: [{"domingo": "D", "segunda": "S","terca": "T", "quarta": "Q", "quinta": "Q", "sexta": "S", "sabado": "S"}],
						columns: [
							{	dataField: "domingo", alignment: "center"},
							{	dataField: "segunda", alignment: "center"},
							{	dataField: "terca", alignment: "center"},
							{	dataField: "quarta", alignment: "center"},
							{	dataField: "quinta", alignment: "center"},
							{	dataField: "sexta", alignment: "center"},
							{	dataField: "sabado", alignment: "center"},
						],
						scrolling: { showScrollbar: "never" },
				    onCellClick: function(e) {
					    var array = [];
					    var flagInc = 1;
					    for (count = 0; count < selectedRangeRestricao.length ; count ++ ){
						    if (selectedRangeRestricao[count] == e.columnIndex) {
							    var flagInc = 0;
					        continue
						    }
						    array.push(selectedRangeRestricao[count]);
					    }
					    selectedRangeRestricao = array;
							if (flagInc) {
								selectedRangeRestricao.push(e.columnIndex); 
							}
				      showSelectionRepeticaoNoDia(e.component, selectedRangeRestricao);
				    },
				    columnChooser: { enabled: false, mode: "dragAndDrop"},
						allowColumnReordering: false,
						columnAutoWidth: false,
						showColumnLines: true,
						showRowLines: true,
						rowAlternationEnabled: true,
						hoverStateEnabled: false,
						showBorders: true,
						showColumnHeaders:false,
						headerFilter: { visible: false },
						grouping: { autoExpandAll: false },
						groupPanel: { visible: false, allowColumnDragging: true },
						columnFixing: { enabled: false },
						filterRow: { visible: false },
						height: 28,
						export: { enabled: false },
						stateStoring: { enabled: false }, 
						wordWrapEnabled: false,
						searchPanel: { visible: false },
					}).dxDataGrid("instance");

					$("#divRestricaoAcao").html("<table width='100%'>" +
																		"<tr>" +
																			"<td align='right'>" + 
																				"<div id='divRestricaoSalvar'/>&nbsp;" +
																				"<div id='divRestricaoCancelar'/>" + 
																			"</td>" +
																		"</tr>" +
																"</table>");

					objRestricaoSalvar = $("#divRestricaoSalvar").dxButton({
					  icon	: "save",
					  text	: "Salvar",
					  type	: "success",
					  stylingMode : "contained",
					  onClick	: function(){
							pCodProfissional = objProfissional.option("value");
							objForm = $("#divFormAddRestricao").dxForm("instance");
							
							pRestricao		= objForm.getEditor("restricao").option("value");
							pDataTodas 		= objForm.getEditor("dataTodas").option("value");
							pData 				= objForm.getEditor("data").option("value");
							pHorarioTodos = objForm.getEditor("horarioTodos").option("value");
							pHorario 			= objForm.getEditor("horario").option("value");
							var pNosDias = ""
							if (selectedRangeRestricao) {
								pNosDias = selectedRangeRestricao.join(",");	
							}
							if (pRestricao) pRestricao = pRestricao.join(",")
							if (pData) pData = pData.join(",")
							if (pHorario) pHorario = pHorario.join(",")
	
							if (pRestricao == null || pRestricao == "") {
								DevExpress.ui.notify("Favor informar a restrição.","warning");
								return	
							}
							if (pDataTodas == false && (pData == "" || pData == null) && pNosDias == "") {
								DevExpress.ui.notify("Favor informar a data ou o dia da semana.","warning");
								return	
							}
							if (pHorarioTodos == false && (pHorario == "" || pHorario == null)) {
								DevExpress.ui.notify("Favor informar o horário.","warning");
								return	
							}
							$.get(urlPreparacao, { method:	"SalvarCadastrarRestricao", pCodProfissional: pCodProfissional,
								pSeqId: SequenciaId, pRestricao: pRestricao, pDataTodas: pDataTodas, pData: pData,
								pHorarioTodos: pHorarioTodos, pHorario: pHorario, pNosDias: pNosDias,
							},function(strRetorno){
								if (strRetorno == 1) {
									objForm.getEditor("restricao").option("value", "");
									objForm.getEditor("dataTodas").option("value", "");
									objForm.getEditor("data").option("value", "");
									objForm.getEditor("horarioTodos").option("value", "");
									objForm.getEditor("horario").option("value", "");
									selectedRangeRestricao 	= [];
									showSelectionRepeticaoNoDiaRestricao(objRestRepetirNoDia, selectedRangeRestricao);
									dataSourceListarRestricao.reload()
									listarAgenda();
								}else{
									DevExpress.ui.notify("Erro: "+strRetorno,"warning");
									return	
								}
							});
					  }
					}).dxButton("instance");	

					objRestricaoCancelar = $("#divRestricaoCancelar").dxButton({
					  text	: "Cancelar",
					  type	: "default",
					  stylingMode : "contained",
					  onClick	: function(){
							selectedRangeRestricao 	= [];
							showSelectionRepeticaoNoDiaRestricao(objRestRepetirNoDia, selectedRangeRestricao);
							$("#divCadastroRestricao").dxPopup("hide");	
					  }
					}).dxButton("instance");

					dataSourceListarRestricao = new DevExpress.data.DataSource({
						store: new DevExpress.data.CustomStore({
							loadMode: "raw",   
							load: function(){
								pCodProfissional = objProfissional.option("value");
			        	return $.getJSON(urlPreparacao, {method: "ListaRestricao", pCodProfissional: pCodProfissional,
								pSeqId: SequenciaId});
							},
							remove : function(args){
								pCodProfissional = objProfissional.option("value");
								#server(VAR.CSP.VARCadProfissional.ExcluirCadastrarRestricao(pCodProfissional, SequenciaId, args.sequencia, YBED))#;
							},
						})
					});

					objListarRestricao = $("#divListarRestricao").dxDataGrid({
						dataSource: dataSourceListarRestricao,
						columns: [{	dataField: "restricaoHorario", caption: "Restrição por Horário", alignment: "center"}],
						columnChooser: { enabled: false, mode: "dragAndDrop"},
						allowColumnReordering: false,
						editing: { mode: "popup", allowAdding: false, allowUpdating: false, allowDeleting: true, useIcons: true},
						columnAutoWidth: true,
						showColumnLines: true,
						showRowLines: true,
						rowAlternationEnabled: true,
						hoverStateEnabled: true,
						showBorders: true,
						headerFilter: { visible: false },
						grouping: { autoExpandAll: false },
						groupPanel: { visible: false, allowColumnDragging: true },
						columnFixing: { enabled: false },
						filterRow: { visible: false },
						height: function() { return 500; },
						export: { enabled: false },
						stateStoring: { enabled: false }, 
						wordWrapEnabled: true,
						searchPanel: { visible: false }, 
					}).dxDataGrid("instance");

				}
			});
		
			$("#divCadastroAusencia").dxPopup({
				visible: false,
				title: "Bloqueio/Desbloqueio",
				width: 500,
				height:  250,
				position: {
					my: "center",
					at: "center",
					of: window
				},
				dragEnabled: true,
				contentTemplate: function(e) {
					objAddAusencia= $("<div id='divFormAddAusencia'>").dxForm({
						readOnly: false,
						alignItemLabels: true,
						showColonAfterLabel: false,
						screenByWidth: function(width) { return "lg"; },
						labelLocation: "left",
						colCount: 6,
						items: [{
							dataField: "dataAusencia", 
							colSpan: 3,
							label: { text: "Data:", alignment: "right"},
							editorType: "dxDateBox",
							editorOptions: {
								type: "date",
								width: 130,
								min: "#(dataMinLimite)#",
								dateSerializationFormat: "yyyy-MM-dd",
								onValueChanged: function(e) {
									var pCodProfissional = objProfissional.option("value");
									objFormAddAusencia = $("#divFormAddAusencia").dxForm("instance");
									$.getJSON(urlPreparacao, {	
										method	:	"GetCadastrarAusencia",
										pCodProfissional: pCodProfissional,
										pData: objFormAddAusencia.getEditor("dataAusencia").option("value"),
									},function(objRetorno){
										objFormAddAusencia.getEditor("dia").option("value", objRetorno.indicadordoDia);
										objFormAddAusencia.getEditor("horaInicial").option("value", objRetorno.horaInicial);
										objFormAddAusencia.getEditor("horaFinal").option("value", objRetorno.horaFinal);
										objFormAddAusencia.getEditor("descricao").option("value", objRetorno.descricao);
										if (objRetorno.flagExcluir == 1) {
											objAusenciaExcluir.option("disabled", false);
										}else{
											objAusenciaExcluir.option("disabled", true);
										}
									});

								}
							}
						},{
							dataField: "dia", 
							colSpan: 3,
							label: { text: "O dia:", alignment: "right"},
							editorType: "dxCheckBox",
							editorOptions: {
								onValueChanged: function(e) {
									objForm = $("#divFormAddAusencia").dxForm("instance");
									if (e.value) {
										objForm.getEditor("horaInicial").option({readOnly: true, value: ""});
										objForm.getEditor("horaFinal").option({readOnly: true, value: ""});
									}else{
										objForm.getEditor("horaInicial").option({readOnly: false, value: ""});
										objForm.getEditor("horaFinal").option({readOnly: false, value: ""});
									}
								}
							}
						},{
							dataField: "horaInicial", 
							colSpan: 2,
							label: { text: "Hora:", alignment: "right"},
							editorType: "dxDateBox",
							editorOptions: {
								type: "time",
	              pickerType: "native",
	              width: 110,
							}
						},{
							colSpan: 2,
							dataField: "horaFinal",
							label: { text:"Hora Atend.:", alignment: "right", visible: false},
							editorType: "dxDateBox",
							editorOptions: {
								type: "time",
	              pickerType: "native",
	              width: 110,
							}
						},{colSpan: 2},{
							dataField: "descricao", 
							colSpan: 6,
							label: { text: "Descrição:", alignment: "right"},
							editorType: "dxTextArea",
							editorOptions: {height	: 75,}
						},{ 
							colSpan: 6,
							template	: function (data, itemElement) {
								itemElement.append("<div id='divAusenciaAcao'>")
							}
						}]
					});
					e.append(objAddAusencia);

					$("#divAusenciaAcao").html("<table width='100%'>" +
																		"<tr>" +
																			"<td align='right'>" + 
																				"<div id='divAusenciaSalvar'/>&nbsp;" +
																				"<div id='divAusenciaExcluir'/>&nbsp;" +
																				"<div id='divAusenciaCancelar'/>" + 
																			"</td>" +
																		"</tr>" +
																"</table>");

					objAusenciaSalvar = $("#divAusenciaSalvar").dxButton({
					  icon	: "save",
					  text	: "Salvar",
					  type	: "success",
					  stylingMode : "contained",
					  onClick	: function(){
							pCodProfissional = objProfissional.option("value");
							objForm = $("#divFormAddAusencia").dxForm("instance");
							pData 				= objForm.getEditor("dataAusencia").option("value");
							pDia 					= objForm.getEditor("dia").option("value");
							pHoraInicial 	= objForm.getEditor("horaInicial").option("text");
							pHoraFinal 		= objForm.getEditor("horaFinal").option("text");
							pDescricao 		= objForm.getEditor("descricao").option("value");
							if (pData == "") {
								DevExpress.ui.notify("Favor informar a Data.","warning");
								return	
							}
							if (pDia == "" && (pHoraInicial == "" || pHoraFinal == "")) {
								DevExpress.ui.notify("Favor informar o horário da ausência ou O Dia.","warning");
								return	
							}
							$.get(urlPreparacao, { method:	"SalvarCadastrarAusencia", pCodProfissional: pCodProfissional,
								pData: pData, pIndicadordoDia: pDia, pHoraInicial: pHoraInicial, pHoraFinal: pHoraFinal,
								pDescricao: pDescricao,
							},function(strRetorno){
								if (strRetorno == 1) {
									listarAgenda();
						  		objForm.resetValues();
								}else{
									DevExpress.ui.notify("Erro: "+strRetorno,"warning");
									return	
								}
							});
					  }
					}).dxButton("instance");	

					objAusenciaExcluir = $("#divAusenciaExcluir").dxButton({
						icon: "trash",
						text: "Excluir",
						disabled: true,
						type: "danger",
					  stylingMode : "contained",
					  onClick	: function(){
							pCodProfissional = objProfissional.option("value");
							objForm = $("#divFormAddAusencia").dxForm("instance");
							pData 				= objForm.getEditor("dataAusencia").option("value");
							$.get(urlPreparacao, { method:	"ExcluirCadastrarAusencia", pCodProfissional: pCodProfissional,
								pData: pData},function(strRetorno){
								if (strRetorno == 1) {
									listarAgenda();
						  		objForm.resetValues();
						  	}else{
									DevExpress.ui.notify("Erro: "+strRetorno,"warning");
									return	
								}
							});
					  }
					}).dxButton("instance");	

					objAusenciaCancelar = $("#divAusenciaCancelar").dxButton({
					  text	: "Cancelar",
					  type	: "default",
					  stylingMode : "contained",
					  onClick	: function(){
						  objForm = $("#divFormAddAusencia").dxForm("instance");
						  objForm.resetValues();
							$("#divCadastroAusencia").dxPopup("hide");	
					  }
					}).dxButton("instance");

				}
			});
			
			dataSouceAgendaExp = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",   
					load: function(){
						var pCodProfissional = objProfissional.option("value");
						return $.getJSON(urlPreparacao,{method:"GetAgendaExportar",pCodProfissional:pCodProfissional});
					},
				})
			});
	
			$("#divExportarAgenda").dxPopup({
				visible: false,
				title: "Exportar Agenda",
				width: 1000,
				height:  400,
				position: {
					my: "center",
					at: "center",
					of: window
				},
				dragEnabled: true,
				contentTemplate: function(e) {
					objOpcaoSelecao = $("<div id='divGridOpcaoSelecao'>").dxDataGrid({
						dataSource: dataSouceAgendaExp,
						columns: [
							{dataField: "codProfissional", caption: "Profissional", alignment: "center"},
							{dataField: "nomeProfissional", caption: "Nome", alignment: "center", minWidth: 150},
							{dataField: "codUnidade", caption: "Unidade", alignment: "center"},
							{dataField: "descUnidade", caption: "Descrição", alignment: "center", minWidth: 150},
							{dataField: "codGrupoAgendamento", caption: "Grupo Agendamento", alignment: "center"},
							{dataField: "descGrupoAgendamento", caption: "Descrição", alignment: "center", minWidth: 150},
							{dataField: "tempoAtendimento", caption: "Tempo Atendimento", alignment: "center"},
							{dataField: "restricaoGeral", caption: "Restrição Geral", alignment: "center"},
							{dataField: "codLocal", caption: "Local", alignment: "center"},
							{dataField: "descLocal", caption: "Descrição", alignment: "center", minWidth: 150},
							{dataField: "permiteEncaixe", caption: "Permite Encaixe", alignment: "center"},
							{dataField: "qtdeEncaixe", caption: "Qtde. Encaixe", alignment: "center"},
							{dataField: "dtInicioAtend", caption: "Data Inicio Atendimento", alignment: "center"},
							{dataField: "hrInicioAtend", caption: "Hora Inicio Atendimento ", alignment: "center"},
							{dataField: "hrFinalAtend", caption: "Hora Final Atendimento", alignment: "center"},
							{dataField: "hrIntervaloInicial", caption: "Hora Intervalo Inicio", alignment: "center"},
							{dataField: "hrIntervaloFinal", caption: "Hora Intervalo Final", alignment: "center"},
							{dataField: "repeticao", caption: "Repetição", alignment: "center"},
							{dataField: "noDia", caption: "No(s) Dia(s)", alignment: "center"},
							{dataField: "dtFinalAtend", caption: "Data Final Atendimento", alignment: "center"}
						],
						columnChooser: { enabled: false, mode: "dragAndDrop"},
						allowColumnReordering: false,
						editing: { mode: "popup", allowAdding: false, allowUpdating: false, allowDeleting: false, useIcons: true},
						onRowClick: function(e) {
							if (tipoEscolha == 1) {
								editarProf(e.data.dataSelecionada, e.data.referenciaPai);
							}else{
								cadastrarRestricao(e.data.referenciaPai)	
							}
							$("#divOpcaoSelecao").dxPopup("hide");
						},
						columnAutoWidth: true,
						showColumnLines: true,
						showRowLines: true,
						rowAlternationEnabled: true,
						hoverStateEnabled: true,
						showBorders: true,
						headerFilter: { visible: false },
						grouping: { autoExpandAll: false },
						groupPanel: { visible: false, allowColumnDragging: true },
						columnFixing: { enabled: false },
						filterRow: { visible: false },
						height: function() { return 330; },
						export: { enabled: true },
				    onExporting: function(e) {
				      var workbook = new ExcelJS.Workbook();    
				      var worksheet = workbook.addWorksheet("Dados");

				      DevExpress.excelExporter.exportDataGrid({   
								worksheet: worksheet,
								component: e.component,
				      }).then(function() {
				        options = {
									parserOptions: {
										delimiter: ';',
										quote: true
									},
								};
				        workbook.csv.writeBuffer("", options).then(function(buffer) {
				          saveAs(new Blob([buffer], { type: "application/octet-stream" }), "agenda.csv");
				        });
				      });
				      e.cancel = true;
				    },
						stateStoring: { enabled: false }, 
						wordWrapEnabled: true,
						searchPanel: { visible: false }
					});
					e.append(objOpcaoSelecao);
				}
			});
	
		
			$(document).ready(function () {
				///
	    	selectedRangeTR.startRowIndex = selectedRangeTR.endRowIndex = 0;
	    	selectedRangeTR.startColumnIndex = selectedRangeTR.endColumnIndex = 0;
	     	isSelectionStoppedTR = false;
				showSelectionTipoRepeticao(objProfRepeticao, selectedRangeTR)
				///
				/*dataSourceProfissional.reload()
				objProfissional.option("value",7)
				setTimeout(function(){
					$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 1);
					//listarAgenda();
				}, 500);*/
			});

			function validarCPF(pCPF){
				var Soma;
				var Resto;
				Soma = 0;
			  if (pCPF == "00000000000") return false;
				for (i=1; i<=9; i++) Soma = Soma + parseInt(pCPF.substring(i-1, i)) * (11 - i);
				Resto = (Soma * 10) % 11;
				if ((Resto == 10) || (Resto == 11))  Resto = 0;
				if (Resto != parseInt(pCPF.substring(9, 10)) ) return false;
	 	 		Soma = 0;
    		for (i = 1; i <= 10; i++) Soma = Soma + parseInt(pCPF.substring(i-1, i)) * (12 - i);
    		Resto = (Soma * 10) % 11;
		    if ((Resto == 10) || (Resto == 11))  Resto = 0;
		    if (Resto != parseInt(pCPF.substring(10, 11) ) ) return false;
		    return true;
			}

		</script>
	</body>
</html>
