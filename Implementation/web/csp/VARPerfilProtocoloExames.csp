<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="pt-br">
	<script language="cache" runat="server">
		do ^WWWVAR

		set YBED 			= $get(%request.Data("YBED", 1))
		set YUSER 			= $get(%request.Data("YUSER", 1))

		set app 			= %request.Application
		set host 			= %request.CgiEnvs("HTTP_HOST")
		set url				= "http://"_host_app
		set YLOCATION 		= $get(%request.Data("YLOCATION", 1))

		Set URLPreparacao 		= "VAR.CSP.VARPerfilProtocoloExames.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		Set URLSearch			= "User.Search.PesquisasJson.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		Set URLLogin 			= "COMLogin.cls"
		Set URLLink 			= "www.cls"
		set nomeLocal 			= YLOCATION_" - "_$$SQLGetLocationName^VARSQL(YLOCATION)

		//Verifica se a sessão
		set status = $$VerifySession^VARCSPUtils(YBED, YUSER, url)
		
	</script>
	<head>
		<title>Cadastro de Perfil de Protocolo de Exames</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/bootstrap/css/bootstrap.min.css">
    
    <!-- Tooltipster CSS -->
    <link href=" #(YGIF)#global/plugins/tooltipster/dist/css/tooltipster.bundle.min.css" rel="stylesheet" type="text/css" />
    <link href=" #(YGIF)#global/plugins/tooltipster/dist/css/plugins/tooltipster/sideTip/themes/tooltipster-sideTip-light.min.css"
        rel="stylesheet" type="text/css" />

    <!-- Font Awesome -->
    <link href=" #(YGIF)#global/plugins/fontawesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    
    <!-- Custom Elements -->
    <link href=" #(YGIF)#global/css/components-rounded.css" rel="stylesheet" id="style_components" type="text/css" />
    <link href=" #(YGIF)#global/css/plugins.css" rel="stylesheet" type="text/css" />
    <link href=" #(YGIF)#global/css/layout.css" rel="stylesheet" type="text/css" />
    <link href=" #(YGIF)#global/css/themes/light.css" rel="stylesheet" type="text/css" id="style_color" />
    <link href=" #(YGIF)#global/css/custom.min.css" rel="stylesheet" type="text/css" />

    <!-- Fonts Padrão IPP -->
    <link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Open+Sans:400,600,700,800">

    <!-- <link rel="stylesheet" type="text/css" href=" #(YGIF)#tablesorter/css/style.css" /> -->
    <!--link rel="stylesheet" type="text/css" href=" #(YGIF)#plugins/css/tablesorter.css" /-->

		<!-- DevExtreme themes -->
    <link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme18.2.3/css/dx.common.css" />
    <link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme18.2.3/css/dx.light.css" />
	</head>
	<style>
	.d-flex {
		display: flex;
		align-itens: center;	
	}
	.icon {
		margin-left: 10px;
		margin-top: 2px;
		color: #777777;
	}
   </style>	

	<script type="text/javascript">
		var status = '#(status)#';
		var URLLogin = '#(URLLogin)#';
		if (status == 0) {
			alert('Usuário não está logado ou a sessão expirou.')
			window.location.replace(URLLogin)
		}
	</script>

	<body>
	    <!-- style="display:none;"-->
	    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
	    <script src=" #(YGIF)#global/plugins/extreme18.2.3/js/jquery.js"></script>
		<!-- JSZip library -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme18.2.3/js/jszip.min.js"></script>
		<!-- A DevExtreme library -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme18.2.3/js/dx.all.js"></script>
	    <!-- DevExtreme-Intl module -->
	    <script type="text/javascript" src=" #(YGIF)#global/plugins/extreme18.2.3/js/devextreme-intl.min.js"></script>
	    <script type="text/javascript" src=" #(YGIF)#global/plugins/extreme18.2.3/js/localization/dx.messages.pt.js"></script>
		<!-- Include all compiled plugins (below), or include individual files as needed -->
		<script src=" #(YGIF)#global/plugins/bootstrap-3.3.7/js/bootstrap.min.js"></script>	
		
		
		<nav class="navbar navbar-default navbar-fixed-top">
			<div class="container-fluid">
				<div class="navbar-header">
					<a class="navbar-brand" href="#">Cadastro de Perfil do Protocolo de Exames</a>
				</div>
			</div>
		</nav>
		<!--;border:1px solid red-->
		<div class="col-md-12" style="margin-top:70px">
			<div class="panel-group" id="accordion">
				<div class="panel panel-default">
					<div class="panel-body">
						<div class="column">
							<div class="row">
								<div class="col-md-4">
									<div class="form-group">
										<label>Tipo de Exame:</label>
                  						<div id="divTipoExame"></div>
                					</div>
            					</div>
            					<div class="col-md-8">
									<div class="form-group">
										<label>Código do Protocolo:</label>
                  						<div id="divcodProtocolo"></div>
                					</div>
            					</div>	
            				</div>     
            				<div class="row">         	
								<div class="col-md-6">
									<div class="form-group">
										<label>Descrição:</label>
                  						<div id="divdescProtocolo"></div>
                					</div>
            					</div>
            						<div class="col-md-6">
									<div class="form-group">
										<label>Médico:</label>
                  						<div id="divMedico"></div>
                					</div>
            					</div>
            				</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="container-fluid">
		<div class="loadpanel"></div>
		<div class="col-md-12" id="divExamesProtocolo"></div>
		</div>
		
	<script type="text/javascript" language="javascript">
	
	var urlPreparacao 		= '#(URLPreparacao)#';
	var urlSearch			= '#(URLSearch)#';
	var urlLink 			= '#(URLLink)#';
	var YBED 				= '#(YBED)#';
	var YUSER 				= '#(YUSER)#';
	var YLOCATION 			= '#(YLOCATION)#';
	var nomeLocal 			= '#(nomeLocal)#';
			
	DevExpress.config({decimalSeparator: ",",thousandsSeparator: "."});
	DevExpress.localization.locale("pt");
			
    var campoTipoExame = $("#divTipoExame").dxSelectBox({
        dataSource: [{
			"Codigo":"1",
			"Descricao":"Exame Laboratório"
		},{
			"Codigo":"2",
			"Descricao":"Outros Exames"
		}],
        valueExpr: "Codigo",
        displayExpr: "Descricao",
        showClearButton: true,
        searchEnabled: true,
        width: "100%",
        onValueChanged: function(e){
			campocodProtocolo.option("value","")
			campodescProtocolo.option("value","")
			campoMedico.option("value","")
			dataSourceProtocolo.reload()
			//dataSourceProtocoloExame.reload();
		}
    }).dxSelectBox("instance");
    
	var dataSourceProtocolo = new DevExpress.data.DataSource({
		store: new DevExpress.data.CustomStore({
			loadMode: "raw",   
			load: function() {
				console.log(campoTipoExame.option("value"))
	  			return $.getJSON(urlPreparacao,{method:"getProtocolo",tipoExame:campoTipoExame.option("value")},function(rs){
		  			console.log(rs)	
		  		})
			}
		})
	});
				
    var campocodProtocolo = $("#divcodProtocolo").dxSelectBox({
        dataSource: dataSourceProtocolo,
        valueExpr: "codigoPerfil",
        displayExpr: "descricaoComposta",
        showClearButton: true,
        searchEnabled: true,
        width: "100%",
        onValueChanged: function(e){
		    //console.log(e)
	        if (e.value) {
		        var codigoProtocolo = e.value
				dataSourceProtocoloExame.reload()
	        }else{
		     dataSourceProtocoloExame.reload();
	        }
	        if (e.component._options.selectedItem!=null)
	        {
   		        campodescProtocolo.option("value",e.component._options.selectedItem.descricaoPerfil)
		        campoMedico.option("value",e.component._options.selectedItem.medico.CodProfissional)
		        dataSourceMedico.reload()
	        }
        }
    }).dxSelectBox("instance");
    
    
    var campodescProtocolo = $("#divdescProtocolo").dxTextBox({
        width: "100%"
    }).dxTextBox("instance");
    
    /*
	var dataSourceMedico = new DevExpress.data.DataSource({
		store: new DevExpress.data.CustomStore({
			loadMode: "raw",   
			load: function() {
	  			return $.getJSON(urlPreparacao,{method:"getProtocolo",tipoExame:campoTipoExame.option("value")},function(rs){})
			}
		})
	});
	*/
	
	dataSourceMedico = new DevExpress.data.DataSource({
		store: new DevExpress.data.CustomStore({
			loadMode: "raw",
			byKey: function(args) {
				return $.getJSON(urlPreparacao,{
					method:	"GetMEDProvider",
					pCodProfissional: '#(YBED)#'
				});
			},
			load: function(args) {
				codigoProfissional = campoMedico.option("value")
				//alert(codigoProfissional);
				if (codigoProfissional!="")
				{
					codigoProfissional = '#(YBED)#'
				} else {
					codigoProfissional = ""
				}
				return $.getJSON(urlPreparacao,{
					method:	"GetMEDProvider",
					pSkip:	args.skip,
					pTake:	args.take,
					pSearchValue:	args.searchValue,
					pCodProfissional: codigoProfissional
				});
			}
		})
	})
				
    var campoMedico = $("#divMedico").dxSelectBox({
        dataSource: dataSourceMedico,
        valueExpr: "CodProfissional",
        displayExpr: "Nome",
        showClearButton: true,
        searchEnabled: true,
        width: "100%"
    }).dxSelectBox("instance");
    
    
	$("#divAddGrupo").dxPopup({
		title: "Adicionar Grupo",
		width: 650,
		height: 280,
		position: {
			my: "center",
			at: "center",
			of: window
		},
		dragEnabled: true,
		contentTemplate: function(e) {
			formAddGrupo = $("<div id='formAddGrupo'>").dxForm({
				readOnly: false,
				alignItemLabels: true,
				showColonAfterLabel: true,
				labelLocation: "top",
				colCount: 2,
				items: [{
						colSpan: 2,
						dataField	: "exames",
						label		: {
							text	: "Exames"
						},
						editorType	: "dxTagBox",
						editorOptions: {
							showSelectionControls: true,
							selectionMode: "multiple",
							searchEnabled: true,
							valueExpr: "CodExame", 
							displayExpr: "DescExame",
							searchEnabled: true,
							dataSource: new DevExpress.data.DataSource({
								store: new DevExpress.data.CustomStore({
									byKey: function(args) {
										return $.getJSON(urlPreparacao,{
											method	:"listaExames",
											tipo	: tipo,
											codigo	: args
										});
									},
									load: function(args) {
										return $.getJSON(urlPreparacao,{
											method	:"listaExames",
											tipo	: tipo,
											searchValue:args.searchValue,
											skip:args.skip,
											take:args.take,

										});
									}
								})
							})
						}
					},
					{itemType: "button", horizontalAlignment: "right", buttonOptions: {
	       				text: "Salvar", icon: "save",
						onClick: function(){
							var pExames = $("#formAddGrupo").dxForm("instance").getEditor("exames").option("value");
							if (pExames == "" || pExames == null) {
								DevExpress.ui.notify("Selecionar o exame", "error", 4000);
			      				return;
							}
							var pCodigoProtocolo = campocodProtocolo.option("value")
							var pDescricao = campodescProtocolo.option("value")
							var pMedico = campoMedico.option("value");
							var pPerfilParticular = "0"
							if (campoMedico.option("value")!="") { 
								var pPerfilParticular = "1"
							}
				      	
					      	if (pCodigoProtocolo == null && pDescricao == "") {
								DevExpress.ui.notify("Selecionar um Código do Protocolo ou Informar a Descrição", "error", 4000);
					      		return;
					      	}
					      	if (pCodigoProtocolo == null) { var pCodigoProtocolo = "" }
					      	
							if (pMedico==null) { var pMedico="" }

							if (pExames) pExames = pExames.join(",");
							var aExames = pExames.split(",");
							for (var i = 0; i < aExames.length; i++) {
				        		objDados = new Array;
								objDados.push("CodigodoExame~"+aExames[i]);
			
								var retorno = #server(VAR.CSP.VARPerfilProtocoloExames.ArmExamesProtocolo(pCodigoProtocolo, pDescricao, campoTipoExame.option("value"), "", objDados, YBED, pPerfilParticular, pMedico))#;
						      	if (campocodProtocolo.option("value") == null) {
							      	var array = retorno.split("~");
							      	pCodigoProtocolo = array[1];
						      	}
							}
					      	dataSourceProtocoloCodigo.reload();
					      	campocodProtocolo.option("value",pCodigoProtocolo)
					      	dataSourceProtocolo.reload();
				      		//$("#divAddGrupo").dxPopup("hide");
						}}
					},
					{itemType: "button", horizontalAlignment: "left", buttonOptions: {
		      			text: "Fechar", icon: "close",
						onClick: function(){
							//$("#divAddGrupo").dxPopup("hide");
						}}
					}
				]
			});
			
			e.append(formAddGrupo);
		}        		
	});

    dataSourceProtocoloExame = new DevExpress.data.DataSource
	({
		store: new DevExpress.data.CustomStore({
		key: "CodigodoExame",
		loadMode: "raw",   
		load: function() {
			var pCodigoProtocolo = campocodProtocolo.option("value")
			console.log(pCodigoProtocolo)
			if (pCodigoProtocolo)
			{
				return $.getJSON(urlPreparacao,{method:"GetExamesProtocolo",pCodigoProtocolo:pCodigoProtocolo});
			}else{
				return [];	
			}
		},
		insert: function (values) {
			//console.log(values)
			var pCodigoProtocolo = campocodProtocolo.option("value")
			var pDescricao = campodescProtocolo.option("value")
			var pMedico = campoMedico.option("value");
			var pPerfilParticular = "0"
			if (campoMedico.option("value")!="") { var pPerfilParticular = "1" }
			
			if (pCodigoProtocolo == null && pDescricao == "") {
				DevExpress.ui.notify("Selecionar um Código do Protocolo ou Informar a Descrição", "error", 4000);
				return;
			}
			if (pCodigoProtocolo == null) {
				var pCodigoProtocolo = ""	
			}
			
			if (pMedico==null) { var pMedico="" }

			objDados = new Array;
		
			for (var coluna in values) {
				console.log(values)
				if (values.hasOwnProperty(coluna)) {
					if (coluna=="CodigodoExame")
					{
						objDados.push("CodigodoExame"+"~"+values.CodigodoExame);
					}
					if (coluna=="Observacao")
					{
						objDados.push("Observacao"+"~"+values.Observacao);
						objDados.push("CodigodoExame"+"~"+values.CodigodoExame);
					}
				}
			}
			console.log(objDados)
			var retorno = #server(VAR.CSP.VARPerfilProtocoloExames.ArmExamesProtocolo(pCodigoProtocolo, pDescricao, campoTipoExame.option("value"), "", objDados, YBED, pPerfilParticular, pMedico))#;
			if (pCodigoProtocolo == null || pCodigoProtocolo == "") {
				dataSourceProtocolo.reload();
				var array = retorno.split("~");
				//dataSourceProtocoloCodigo.reload();
				campocodProtocolo.option("value",array[1])
			}
		},
		update: function (key, values) {
			var pCodigoProtocolo = campocodProtocolo.option("value")
			var pDescricao = campodescProtocolo.option("value")
			var pMedico = campoMedico.option("value");
			var pPerfilParticular = "0"
			
			if (pMedico==null) { var pMedico="" }

			if (campoMedico.option("value")!="") { var pPerfilParticular = "1" }
			
				var idRow = key;
				objDados = new Array;
				for (var coluna in values) {
					if (values.hasOwnProperty(coluna)) {
						valor = values[coluna];
						if (coluna=="Observacao")
						{
							objDados.push(coluna+"~"+valor);
							objDados.push("CodigodoExame"+"~"+key);
						}
					}
				}
				
				console.log(pCodigoProtocolo+"|"+pDescricao+"|"+campoTipoExame.option("value")+"|"+idRow+"|"+objDados+"|"+YBED+"|"+pPerfilParticular+"|"+pMedico)
				
				var retorno = #server(VAR.CSP.VARPerfilProtocoloExames.ArmExamesProtocolo(pCodigoProtocolo, pDescricao, campoTipoExame.option("value"), idRow, objDados, YBED, pPerfilParticular, pMedico))#;
			}, 
			remove: function (key) {
			var pCodigoProtocolo = campocodProtocolo.option("value");
				#server(VAR.CSP.VARPerfilProtocoloExames.ExcluirExamesProtocolo(pCodigoProtocolo, campoTipoExame.option("value"), key, YBED))#;
		}					
		})
	});
	
    var gridExamesProtocolo = $("#divExamesProtocolo").dxDataGrid({
		dataSource: dataSourceProtocoloExame,
		columns: [
			{	dataField: "DescricaodoExame", caption: "Exame", alignment: "center",
				validationRules: [{ type: "required" }], setCellValue: function (rowData, value) {
	        if (value == "" || value == null) return
	        objLinha = this;
	        
			var retorno = #server(VAR.CSP.VARPerfilProtocoloExames.getDescExame(value))#;
			
	        retorno = retorno.split("~"); 
					objLinha.defaultSetCellValue(rowData, retorno[1]);
					rowData.CodigodoExame = retorno[0];
		  	}, 
			},
			{	dataField: "Observacao", caption: "Observação", alignment: "center"},
		],
		onEditorPreparing: function(e) {
			
			if (e.parentType == "dataRow" && (e.dataField == "Observacao")) {
				e.editorName = "dxTextArea"; 
			
      }  
			if (e.parentType == "dataRow" && e.dataField == "DescricaodoExame") {
				e.editorName = "dxSelectBox";
				
				var tipo=campoTipoExame.option("value")
				
				e.editorOptions.dataSource = new DevExpress.data.DataSource({
					store: new DevExpress.data.CustomStore({
						byKey: function(args) {
							return $.getJSON(urlPreparacao,{
								method	:"listaExames",
								tipo	: tipo,
								codigo	: args
							});
						},
						load: function(args) {
							return $.getJSON(urlPreparacao,{
								method	:"listaExames",
								tipo	: tipo,
								searchValue:args.searchValue,
								skip:args.skip,
								take:args.take,
							});
						}
					})
				});
				//e.editorOptions.value = e.row.data.medicacao;
				e.editorOptions.displayExpr = "DescExame";
				e.editorOptions.valueExpr = "CodExame";
				e.editorOptions.searchEnabled = 1;
				e.editorOptions.onValueChanged = function(arg) {
					e.setValue(arg.value);
				}
			}

		},
		columnChooser: { enabled: false, mode: "dragAndDrop"},
		allowColumnReordering: false,
		editing: {
			mode: "batch", // Specifying the edit mode
			allowAdding: true, // Enable editing
			allowUpdating: true, // Enable editing
			allowDeleting: true,
			useIcons: true
		},
		onEditingStart: function(e) {
			var FlagEditar = e.data.FlagEditar;
			if (FlagEditar == 1 && e.column.dataField == "DescricaodoExame"){
				e.cancel = true;
			}
		},		
		columnAutoWidth: false,
		showColumnLines: true,
		showRowLines: true,
		rowAlternationEnabled: true,
		hoverStateEnabled: true,
		showBorders: true,
		headerFilter: { visible: false },
		grouping: { autoExpandAll: true },
		groupPanel: { visible: false, allowColumnDragging: true },
		columnFixing: { enabled: false },
		filterRow: { visible: false },		height: 350,
		export: { enabled: false },
		stateStoring: { enabled: false }, 
		wordWrapEnabled: true,
		onToolbarPreparing: function(e) {
			e.toolbarOptions.items.unshift({
				location: "after",
				widget: "dxButton",
				options: {
					type: "success",
					hint: "Atualizar Protocolo",
					name: "atualizarProtocolo",
					icon: "save",
					onClick: function(e) {
						
						var pCodigoProtocolo = campocodProtocolo.option("value");
						var pDescricao = campodescProtocolo.option("value");
						var pMedico = campoMedico.option("value");
						var pPerfilParticular = "0"
						if (campoMedico.option("value")!="") var pPerfilParticular=1;

		      			if ((pCodigoProtocolo == null || pCodigoProtocolo == "") && pDescricao == "") {
							DevExpress.ui.notify("Selecionar um Código do Protocolo ou Informar a Descrição", "error", 4000);
		      				return;
		      			}
		      			
				      	if (pCodigoProtocolo == null) { var pCodigoProtocolo = "" }				      
				      	if (pMedico==null) { var pMedico="" }
				      		
		      			var retorno = #server(VAR.CSP.VARPerfilProtocoloExames.ArmProtocolo(pCodigoProtocolo, pDescricao, campoTipoExame.option("value"), YBED, pPerfilParticular, pMedico))#;
						
						var array=retorno.split("~");
						if (array[0]==1){
							var mensagem = "Protocolo: "+array[1]+" atualizado com sucesso."
							DevExpress.ui.notify(mensagem, "warning",4000);
							dataSourceProtocolo.reload()
							campocodProtocolo.option("value",array[1]);

						}
					}
				}
			},{
				location: "after",
				widget: "dxButton",
				options: {
					text: "",
					type: "danger",
					hint: "Excluir Protocolo",
					icon: "remove",
					onClick: function(e) {
						excluirProtocolo()
						dataSourceProtocoloCodigo.reload();
					}
				}
			},{
				location: "after",
				widget: "dxButton",
				options: {
					text: "",
					type: "sucess",
					hint: "Limpar",
					icon: "clear",
					onClick: function(e) {
						//excluirProtocolo()
						campocodProtocolo.option("value","")
						campodescProtocolo.option("value","")
						campoMedico.option("value","")
						//dataSourceProtocolo.reload()
						//dataSourceProtocoloExame.reload()
					}
				}
			})
			/*,{
				location: "after",
				widget: "dxButton",
				options: {
					hint: "Adicionar Grupo",
					icon: "square",
					onClick: function(e) {
						var pCodigoProtocolo = campocodProtocolo.option("value")
						var pDescricao = campodescProtocolo.option("value")
		      	if ((pCodigoProtocolo == null || pCodigoProtocolo == "") && pDescricao == "") {
							DevExpress.ui.notify("Selecionar um Código do Protocolo ou Informar a Descrição", "error", 4000);
		      		return;
		      	}
						$("#divAddGrupo").dxPopup("show");
						//???$("#formAddGrupo").dxForm("instance").getEditor("exames").option("value","");
					}
				}
			})*/
		}
	}).dxDataGrid("instance");
		
	dataSourceProtocoloCodigo = new DevExpress.data.DataSource({
	          store: new DevExpress.data.CustomStore({
	            byKey: function(args) {
	              if (args==""||args==null){
	                return
	              }
	                return $.getJSON(urlPreparacao,{
	                  method	:"listaPerfilExames",
	                  tipo		: campoTipoExame.option("value"),
	                  codigo	: args
	              });
	            },
	          load: function(args) {
	                  return $.getJSON(urlPreparacao,{
	                    method	: "listaPerfilExames",
	                    tipo	: campoTipoExame.option("value"),
	                    	skip	: args.skip,
	                    	take	: args.take,
	                    	searchValue:args.searchValue
	                });
	              }
	          })
	 });
	    
		function excluirProtocolo(){
			codigo = campocodProtocolo.option("value");
      if (codigo==""||codigo==undefined){
        DevExpress.ui.notify("Informe um Protocolo", "warning", 4000);
        return
      }
      $.getJSON(urlPreparacao,{
          method	: "excluirProtocolo",
          codigo	: codigo
	     },function(retorno){
	        DevExpress.ui.notify(retorno.mensagem, retorno.tipo, 4000);
	        if (retorno.status==1){
	        	campocodProtocolo.option("value", "");
	        	dataSourceProtocolo.reload();
	        }
	    });
	}	    
	      	
	function refreshDados()
	{
		campoTipoExame.option("value","")
		campocodProtocolo.option("value","")
		campodescProtocolo.option("value","")
		campoMedico.option("value","")							
		//dataSourceProtocolo.pageIndex(0)
		dataSourceProtocolo.reload()
			
		/*divExamesCadastrados.clearSelection()
		divExamesDetalhes.getDataSource().reload()
		$("#dvSeqExameCod").html("")
		$("#dvSeqExameTexto").html("&nbsp;")									
		dataSourceProtocolo.pageIndex(0)
		dataSourceProtocolo.reload()
		addExames("",formExame.option("formData").TipoExame)
		formExame.updateData("Exame","")
		*/
	}

	//function carregaDataSourcesExames(){
		/*dataSourceProtocolo = new DevExpress.data.DataSource({
		    store: new DevExpress.data.CustomStore({
		        
		        /*
		        byKey: function(args) {
		            if (args==""||args==null){
		                return
		            }
		            return $.getJSON(urlPreparacao,{
		                method	: "listaPerfilExames",
		                codigo	: args
		            });
		        },
		        
		        load: function(args) {
		            return $.getJSON(urlPreparacao,{
		                method	: "listaPerfilExames",
		                tipo	: formExame.option("formData").TipoExame,
		            	skip	: args.skip,
		            	take	: args.take,
		            	searchValue:args.searchValue
		            },function(e){
		                console.log(e);
		            });
		        }
		        
		    }),*/
		    
		   /* loadMode: "raw",
		    load:function(){
		        return $.getJSON(urlPreparacao,{
		                method	: "listaPerfilExames",
		                tipo	: formExame.option("formData").TipoExame,
		            	origem	: 1,
		            });
		    }}),
		    group: "Perfil"
		})
		
		/*dataSourceGridProtocolo = new DevExpress.data.DataSource({
			store: new DevExpress.data.CustomStore({
				insert : function(args){
					alteracao=1
					$.getJSON(urlPreparacao,{
						method	 	:"salvaExame",
						tipo	  	: formExame.option("formData").TipoExame,
						dataNew		: JSON.stringify(args)
					});
				},
				remove : function(args){
					alteracao=1
					$.getJSON(urlPreparacao,{
						method	 	:"deletaExame",
						tipo	  	: formExame.option("formData").TipoExame,
						codigo		: args.CodExame
					});
				},
				update : function(argsOld,argsNew){
					alteracao=1
					if (argsNew.CodExame==undefined){
						argsNew.CodExame = argsOld.CodExame
					}
					if (argsNew.Observacoes==undefined){
						argsNew.Observacoes = argsOld.Observacoes
					}
					console.log(dataOld)
					console.log(dataNew)
					$.getJSON(urlPreparacao,{
						method 	:"salvaExame",
						tipo	: formExame.option("formData").TipoExame,
						edit	: 1,
						dataOld	: JSON.stringify(argsOld),
						dataNew	: JSON.stringify(argsNew)
					});
				},					
				load: function(args) {
					return $.getJSON(urlPreparacao,{
						method	  : "recExames",
						tipo	  : formExame.option("formData").TipoExame
					},function(rs){
					});
				}	
			})
		})*/
		        
				
		/*dataSourceGridProtocoloDiversos = new DevExpress.data.DataSource({
		   	store: new DevExpress.data.CustomStore({
				insert : function(args){
					alteracao=1
					$.getJSON(urlPreparacao,{
						method	 	:"salvaExame",
						tipo	  	: 2,
						dataNew		: JSON.stringify(args)
					});
				},
				remove : function(args){
					alteracao=1
					$.getJSON(urlPreparacao,{
						method	 	:"deletaExame",
						tipo	  	: 2,
						codigo		: args.CodExame
					});
				},					
				update : function(argsOld,argsNew){
					alteracao=1
					if (argsNew.CodExame==undefined){
						argsNew.CodExame = argsOld.CodExame
					}
					if (argsNew.Observacoes==undefined){
						argsNew.Observacoes = argsOld.Observacoes
					}
					$.getJSON(urlPreparacao,{
						method 	:"salvaExame",
						tipo	: 2,
						edit	: 1,
						dataOld	: JSON.stringify(argsOld),
						dataNew	: JSON.stringify(argsNew)
					});
				},					
				load: function(args) {
					return $.getJSON(urlPreparacao,{
						method	  : "recExames",
						tipo	  : 2
					});
				}	
			})
		})*/

	//}	

			
	</script>
	
	</body>
	
</html>
