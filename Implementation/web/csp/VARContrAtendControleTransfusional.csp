<script language="Cache" runat="server">
	Set YBED = $get(%request.Data("YBED", 1))
	Set flagUsuarioMedico = +$$GetChecaMedico^VARSQL(YBED)
	SET URLPreparacao = "VAR.CSP.VARContrAtendTransfusional.cls"
</script>
<div class="container-fluid">
<div class="row">
	<div class="col-md-12 tituloRadio">
		<button onClick="historico()" class="btn btn-info navbar-btn">
			Exibir histórico
		</button>
		<button class="btn btn-info navbar-btn" id="btnImprimirTalassemia">
			<span class="fa fa-print"></span>&nbsp;Relatório
		</button>
	</div>
</div>
	<div class="row">
		<div class="col-md-6">
			<fieldset>
				<legend>&nbsp;Informações Novas Paciente:&nbsp;</legend>
				<div class="row">
					<div class="col-md-12">
						<div class="row">
							<div class="col-md-2 tituloRadio">Transfusão:</div>
							<div class="col-md-3 campo"><div id="textCTTranfusao"></div></div>
						</div>
						<div class="row">
							<div class="col-md-2 tituloRadio">HTC Bolsa:</div>
							<div class="col-md-8 campo"><div id="textCTHTCBolsa"></div></div>
						</div>
						<div class="row">
							<div class="col-md-2 tituloRadio">Tipo Sanguíneo:</div>
							<div class="col-md-8 campo"><div id="textCTTS"></div></div>
						</div>
						<div class="row">
							<div class="col-md-2 tituloRadio">Pai:</div>
							<div class="col-md-2 campo"><div id="radioCTPai"></div></div>
							<div class="col-md-2 tituloRadio">IAC:</div>
							<div class="col-md-2 campo"><div id="radioCTIAC"></div></div>
							<div class="col-md-2 tituloRadio">TCD:</div>
							<div class="col-md-2 campo"><div id="radioCTTCD"></div></div>
						</div>
					</div>
				</div>
			</fieldset>
		</div>
			<div class="col-md-6">
				<fieldset>
				<legend>&nbsp;Médias do paciente:&nbsp;</legend>
					<div class="row">
						<div id="divVisualizarMedias"></div>
					</div>
				</fieldset>
			</div>
	</div>
</div>
		
<div id="divExibirHistorico"></div>
<div id="divVisualizarMedias"></div>

<script type="text/javascript">

	var urlPreparacao 	= "#(URLPreparacao)#";
	var pPassagem = "#($GET(%request.Data("pPassagem",1)))#"
	var pCodProntuario="#($get(%request.Data("pCodProntuario",1)))#";
	var nomePaciente = "#($$GetPatientName^VARSQL($Piece(^MEDAdmission(0,$GET(%request.Data("pPassagem",1)),1),"~",1)))#";
	var dm = "#($Select($get(%request.Data("pCodProntuario",1))="":"",1:$Piece(^VARPEPTransfuncional(0,$get(%request.Data("pCodProntuario",1)),1),"~",1)))#"; 
	var totBolsa = "";  
	var totVolGV = "";  
	var totHTC = "";  
	var totMediaML = "";  
	var totVolume = "";  
	
	function historico()
	{
		$("#divExibirHistorico").dxPopup("show");
		dataSourceExibirHistorico.reload();
	}
	
	$("#btnImprimirTalassemia").click(function(){
			$.post(urlPreparacao,{method:"Imprimir",pCodProntuario:pCodProntuario,pTipo:"RT",YBED:YBED,pPassagem:pPassagem},function(retorno){
				eval(retorno);
			})				
		});
	
	dataSourceExibirHistorico = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",   
					load: function(){
						return $.getJSON(urlPreparacao,{
									method:"ExibirHistoricoTalessemia",pPassagem:pPassagem
								})
					},
				})
			});
			
	dataSourceExibirMedia = new DevExpress.data.DataSource({
		store: new DevExpress.data.CustomStore({
			loadMode: "raw",   
			load: function(){
				var d = $.Deferred();
				$.getJSON(urlPreparacao,{ method:"visualizarMedia",pPassagem:pPassagem},function(objRetorno){
					console.log(objRetorno)
					d.resolve(objRetorno.grid);
					totBolsa = objRetorno.totBolsa;  
					totVolGV = objRetorno.totVolGV;  
					totHTC = objRetorno.totHTC;  
					totMediaML = objRetorno.totMediaML;  
					totVolume = objRetorno.totVolume;  
				});
				return d.promise();
			},
		})
	});
		
	
	
	$("#divExibirHistorico").dxPopup({
			visible: false,
			title: "Exibir histórico",
			closeOnOutsideClick : true,
			width: 650,
			height: 580,
			position: {
				my: "center",
				at: "center",
				of: window
			},
			dragEnabled: true,
			contentTemplate: function(e) {
				formExibirHistorico = $("<div id='formExibirHistorico'>").dxDataGrid({
					dataSource: dataSourceExibirHistorico,
					columns: [
						{dataField: "admissao"},
						{dataField: "DataConvertida", caption: "Data"},
						{dataField: "HB"},
						{dataField: "HTC"},
						{dataField: "Peso"},
						{dataField: "Transfusao"},
						{dataField: "HTCBolsa"},
						{dataField: "TipoSanguineo", caption: "Tipo Sanguíneo"},
						{dataField: "PAI"},
						{dataField : "IAC"},
						{dataField: "TCD"},
						{dataField: "qtdBolsas", caption: "Qtd. de bolsas"},
						{dataField: "VolumeBolsa", caption: "Volume"}
					],
					editing:
					{
						mode: "row",
						allowEditing : false,
						useIcons: true	
					},
					allowColumnReordering: true,
					columnAutoWidth: true,
					allowColumnResizing: true,
					height: "100%",	
					headerFilter: { visible: false },
					hoverStateEnabled: true,
					filterRow: { visible: true },
					showBorders: true,
					showRowLines: true,
					grouping: { autoExpandAll: false },
					searchPanel: { visible: false }, 
					groupPanel: { visible: false },
					export: { enabled: false },
					stateStoring: { enabled: false }, 
					columnChooser: { enabled: false, mode: "dragAndDrop" },
					sorting: { mode: "multiple" },
					rowAlternationEnabled: true,
					wordWrapEnabled:true,
					pager: {
						showPageSizeSelector: true,
						allowedPageSizes: [20, 50, 100, 150, 200],
						showInfo: true,
						showNavigationButtons: true,
						visible: true 
					},
					paging: { enabled: true, pageSize: 20 }
				});
				e.append(formExibirHistorico);
			}        		
		});
		
	dataSourceRadio = [{text: "Negativo", value: "0"},{text: "Positivo", value: "1"}];
	
	campoTransfusao = $("#textCTTranfusao").dxTextBox({heigth:27}).dxTextBox("instance");
	
	campoCTHTCBolsa = $("#textCTHTCBolsa").dxTextBox({heigth:27}).dxTextBox("instance");
	
	campoCTTS = $("#textCTTS").dxTextBox({heigth:27}).dxTextBox("instance");
	
	campoCTPai = $("#radioCTPai").dxRadioGroup({
			dataSource: dataSourceRadio, layout: "horizontal", displayExpr:"text", valueExpr:"value",
		}).dxRadioGroup("instance");
		
	campoCTIAC = $("#radioCTIAC").dxRadioGroup({
			dataSource: dataSourceRadio, layout: "horizontal", displayExpr:"text", valueExpr:"value",
		}).dxRadioGroup("instance");
	
	campoCTTCD = $("#radioCTTCD").dxRadioGroup({
			dataSource: dataSourceRadio, layout: "horizontal", displayExpr:"text", valueExpr:"value",
		}).dxRadioGroup("instance");
		
	var corBackground = "ededed";

	$(function(){
    $("#divVisualizarMedias").dxDataGrid({
        dataSource: dataSourceExibirMedia,
        showBorders: true,
        paging: {
            enabled: false
        },
        columns: [
        	{dataField: "Ano", groupIndex: 0},
        	{dataField: "Data"},
        	{dataField: "admissao", caption: "Admissão"},
        	{dataField: "HBPaciente", caption: "HB Paciente"},
        	{dataField: "pesoPaciente", caption: "Peso do paciente"},
			{dataField: "mediaQtdBolsas", caption: "Qtd. de bolsas"},
			{dataField: "mediaVolumeBolsa", caption: "Volume"},
			{dataField: "Intervalo"}
        ],
        editing:
			{
				mode: "row",
				allowEditing : false,
				useIcons: true	
			},
		summary: {
             totalItems: [
                { column: "HBPaciente", summaryType: "avg", showInColumn: "HBPaciente", displayFormat: "Média HB: {0}" },
                { column: "pesoPaciente", summaryType: "avg", showInColumn: "pesoPaciente", displayFormat: "Média Peso: {0}" },
                { column: "mediaQtdBolsas", summaryType: "avg", showInColumn: "mediaQtdBolsas", displayFormat: "Média Bolsas: {0}" },
                { column: "mediaVolumeBolsa", summaryType: "avg", showInColumn: "mediaVolumeBolsa", displayFormat: "Média Volume: {0}" },
                { column: "Intervalo", summaryType: "avg", showInColumn: "Intervalo", displayFormat: "Média Intervalo: {0}" }
            ]},
		allowColumnReordering: true,
		columnAutoWidth: true,
		allowColumnResizing: true,
		height: "100%",	
		headerFilter: { visible: false },
		hoverStateEnabled: true,
		filterRow: { visible: true },
		showBorders: true,
		showRowLines: true,
		grouping: { autoExpandAll: true },
		searchPanel: { visible: false }, 
		groupPanel: { visible: false },
		export: { enabled: true },
		stateStoring: { enabled: false }, 
		columnChooser: { enabled: false, mode: "dragAndDrop" },
		sorting: { mode: "multiple" },
		rowAlternationEnabled: true,
		wordWrapEnabled:true,
		onExporting: function(e) {
			if (typeof Object.assign !== 'function') {
			  // Must be writable: true, enumerable: false, configurable: true
			  Object.defineProperty(Object, "assign", {
			    value: function assign(target, varArgs) { // .length of function is 2
			      'use strict';
			      if (target === null || target === undefined) {
			        throw new TypeError('Cannot convert undefined or null to object');
			      }

			      var to = Object(target);

			      for (var index = 1; index < arguments.length; index++) {
			        var nextSource = arguments[index];

			        if (nextSource !== null && nextSource !== undefined) { 
			          for (var nextKey in nextSource) {
			            // Avoid bugs when hasOwnProperty is shadowed
			            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
			              to[nextKey] = nextSource[nextKey];
			            }
			          }
			        }
			      }
			      return to;
			    },
			    writable: true,
			    configurable: true
			  });
			}
			
			
			var workbook = new ExcelJS.Workbook();
			var worksheet = workbook.addWorksheet("Dados");
      DevExpress.excelExporter.exportDataGrid({   
				worksheet: worksheet,
				component: e.component,
				topLeftCell: { row: 3, column: 1 },
				customizeCell: function(options){
					var gridCell = options.gridCell;
	        var excelCell = options.cell;
					if(gridCell.rowType === "header") {
						Object.assign(excelCell, {
      				font: { bold: true }
    				});
					}else if(gridCell.rowType === "data") {
						if (gridCell.column.caption === "Data") {
							corBackground = (corBackground == "ffffff") ? "ededed" : "ffffff";
						}
						Object.assign(excelCell, {
							fill: { type: "pattern", pattern: "solid", fgColor: { argb: corBackground }}
						});
					}
				}
			}).then(function() { 
				console.log()	
				worksheet.getRow(1).getCell(1).value = "Nome:"
				worksheet.getRow(1).getCell(2).value = nomePaciente;
				worksheet.getRow(2).getCell(1).value = "DN:"
				worksheet.getRow(2).getCell(2).value = dm;
				worksheet.getRow(2).getCell(3).value = "Prontuário:"
				worksheet.getRow(2).getCell(4).value = pPassagem;
				worksheet.getRow(2).getCell(5).value = "Data:"
				worksheet.getRow(2).getCell(6).value = "#($ZDate(+$Horolog,4))#";
			
				qtdeLinha = worksheet.rowCount;
			
				worksheet.getRow(qtdeLinha+2).getCell(1).value = "Total de Bolsa Transfundida:"
				worksheet.getRow(qtdeLinha+2).getCell(2).value = totBolsa;
				worksheet.getRow(qtdeLinha+2).getCell(4).value = "Volume GV Transfundida:"
				worksheet.getRow(qtdeLinha+2).getCell(5).value = totVolGV;  
				worksheet.getRow(qtdeLinha+3).getCell(1).value = "Htc médio das bolsas:"
				worksheet.getRow(qtdeLinha+3).getCell(2).value = totHTC;  
				worksheet.getRow(qtdeLinha+3).getCell(4).value = "Média ml/kgpeso/ano:"
				worksheet.getRow(qtdeLinha+3).getCell(5).value = totMediaML;  
				worksheet.getRow(qtdeLinha+4).getCell(1).value = "Volume total:"
				worksheet.getRow(qtdeLinha+4).getCell(2).value = totVolume;  
				
			}).then(function() {
				workbook.xlsx.writeBuffer().then(function(buffer) {   
					saveAs(
						new Blob(
							[buffer], { type: "application/octet-stream" }
						),
						"PEP_Enf_Talassemia.xlsx"
					);
				});
			});
			e.cancel = true;
 		},
  });
});

	
</script>