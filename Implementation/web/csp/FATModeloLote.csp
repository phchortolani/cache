<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="pt-br">
	<script language="Cache" runat="server">
		do ^WWWVAR

		set YUSER 		= $get(%request.Data("YUSER", 1))
		set YBED 			= $get(%request.Data("YBED", 1))
		set YM 				= $get(%request.Data("YM", 1))
		set YLOCATION = $get(%request.Data("YLOCATION", 1))

		set PortCache = $get(%request.CgiEnvs("SERVER_PORT"))
		set PageURL 	= $get(%request.CgiEnvs("CACHE_URL"))
		set PageName 	= %request.PageName
		set app 			= %request.Application
		set host 			= %request.CgiEnvs("HTTP_HOST")
		set url				= "http://"_host_app

		set URLPreparacao = "VAR.CSP.FATModeloLote.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		set URLSearch			= "User.Search.PesquisasJson.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		set URLLogin 			= "COMLogin.cls"
		set URLLink 			= "www.cls"

		set nomeLocal 		= YLOCATION_" - "_$$SQLGetLocationName^VARSQL(YLOCATION)

		//Verifica se a sessão
		set status = $$VerifySession^VARCSPUtils(YBED, YUSER, url)
	</script>

	<head>

		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">

		<!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
		<title>Cadastro de Modelo de Lote</title>

		<!-- Bootstrap CSS -->
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/bootstrap/css/bootstrap.min.css">
		<!-- Font Awesome -->
		<link href=" #(YGIF)#global/plugins/fontawesome/5.4.1/css/all.css" rel="stylesheet" type="text/css">

		<!-- Custom Elements -->
		<link href=" #(YGIF)#global/css/components-rounded.css" rel="stylesheet" id="style_components" type="text/css" />
		<link href=" #(YGIF)#global/css/plugins.css" rel="stylesheet" type="text/css" />
		<link href=" #(YGIF)#global/css/layout.css" rel="stylesheet" type="text/css" />
		<link href=" #(YGIF)#global/css/themes/light.css" rel="stylesheet" type="text/css" id="style_color" />
		<link href=" #(YGIF)#global/css/custom.min.css" rel="stylesheet" type="text/css" />

		<!-- Fonts Padrão IPP -->
		<link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Open+Sans:400,600,700,800">

		<!-- DevExtreme themes -->
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.common.css" />
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.light.compact.css" />
		<!--<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.light.compact.css" />-->

    <link rel="stylesheet" type="text/css" href=" #(YGIF)#global/themes/css/alphalinc.css" id="style_color" />
	</head>
	<style>
	.selected-container {
		padding: 20px;
		margin-left: 20px;
		background-color: rgba(191, 191, 191, 0.15);
		font-size: 115%;
		font-weight: bold;
	}
  .first-group {
		background-color: #ffffff;
  }
  .second-group{
		padding-top: 0px !important;
		padding-bottom: 0px !important;
		padding-left: 0px !important;
		padding-right: 0px !important;
		margin-top: 3px !important;
		margin-bottom: 3px !important;
		margin-left: 3px !important;
		margin-right: 0px !important;
		background-color: rgba(1, 178, 169, 0.15);
		border-top-right-radius: 5px;
		border-top-left-radius: 5px;
		border-top: 1px solid #E0E0E0;
		border-left: 1px solid #E0E0E0;
		border-right: 1px solid #E0E0E0;
		border-bottom: 1px solid #E0E0E0;
  }
  .third-group{
		padding-top: 0px !important;
		padding-bottom: 0px !important;
		padding-left: 0px !important;
		padding-right: 0px !important;
		margin-top: 0px !important;
		margin-bottom: 0px !important;
		margin-left: 0px !important;
		margin-right: 0px !important;
		background-color: #ffffff;
		border: 0px solid #E0E0E0;
  }
  .second-group .dx-form-group-caption {
		border: 0px solid red;
		margin-left: 3px !important;
		padding-top: 3px !important;
  }	
  .second-group .dx-form-group-content {
		background-color: #ffffff;
		color: red; 
		padding-left: 5px !important;
		padding-right: 5px !important;
  }
	</style>
	<script type="text/javascript">

		var status = '#(status)#';
		var URLLogin = '#(URLLogin)#';
		var ygif = '#(YGIF)#'

		if (status == 0) {
			alert('Usuário não está logado ou a sessão expirou.')
			window.location.replace(URLLogin)
		}

	</script>
	<body>
		<div id="toolbar"></div>
		<div id="divForm"></div>
		<div id="divPopUp"></div>
		<!-- REQUIRED JS SCRIPTS -->
		<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
		<!--<script src=" #(YGIF)#global/plugins/extreme19.2.4/js/jquery.min.js"></script>-->
		<script src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/jquery.min.js"></script>

		<!-- JSZip library -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/jszip.min.js"></script>

		<!-- A DevExtreme library -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/dx.all.js"></script>

		<!-- DevExtreme-Intl module -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/localization/dx.messages.pt.js"></script>

		<!-- Include all compiled plugins (below), or include individual files as needed -->
		<script src=" #(YGIF)#global/plugins/bootstrap-3.3.7/js/bootstrap.min.js"></script>

		<!--Definições globais e criação de funcionalidades encapsuladas-->
		<script type="text/javascript">
			//Deixando variáveis disponíveis no cliente
			var urlPreparacao = '#(URLPreparacao)#';
			var urlSearch			= '#(URLSearch)#';
			var urlLink 			= '#(URLLink)#';
			var YBED 					= '#(YBED)#';
			var YUSER 				= '#(YUSER)#';
			var YLOCATION 		= '#(YLOCATION)#';
			var nomeLocal 		= '#(nomeLocal)#';

			DevExpress.config({decimalSeparator: ",",thousandsSeparator: "."});
			DevExpress.localization.locale("pt");
			
		 	objPopUp = $("#divPopUp").dxPopover({showEvent: "dxclick"}).dxPopover("instance");  

			$(document).ready(function () {
				limparTela();
			});

			function limparTela() {
				$.get(urlPreparacao,{method: "limparTela"},function(){
					$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 1);	
					objModeloLote.option("value","");
					montaConjuntoClienteComercial();
					montaConjuntoPrestadoresServico();
					objDadosGerais.resetValues();
					objOrganizacoes.resetValues();
					objControle.resetValues();
					dSOrganizacaoCliComerciais.reload();
					dSOrganizacaoPrestServico.reload();
					dataSourceRelatorio.reload();
				});
			}

			objToolBar = $("#toolbar").dxToolbar({
				items: [{
					location: "after",
					widget	: "dxButton",
					options	: {
						icon	: "save",
						hint	: "Salvar os Dados",
						type	: "success",
						stylingMode : "contained",
						onClick	: function(){
							var codModeloLote	= objModeloLote.option("value");
							var msg = "",cont=0
							if (!objDadosGerais.validate().isValid){
								msg = "Dados Gerais"
								cont++
							}
							if (msg!=""){
								DevExpress.ui.notify("Há campos pendentes de preenchimento na"+(cont>1?"s":"")+" aba"+(cont>1?"s":"")+": "+msg, "warning", 4000);
								$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 1);	
								return
							}
							if (#server(VAR.CSP.FATModeloLote.getSelecaoTemporaria("clienteComercial"))# == 0 &&
							objOrganizacoes.getEditor("organizacaoCCTodos").option("value") == false) {
								DevExpress.ui.notify("Favor informar o Cliente Comercial na aba Organizações.", "warning", 4000);
								$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 2);	
								return;			
							}
							if (#server(VAR.CSP.FATModeloLote.getSelecaoTemporaria("prestadorServico"))# == 0 &&
							objOrganizacoes.getEditor("organizacaoPSTodos").option("value") == false) {
								DevExpress.ui.notify("Favor informar o Prestador de Serviço na aba Organizações.", "warning", 4000);
								$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 2);	
								return;			
							}
							$.getJSON(urlPreparacao,{
								method							: "SalvarDados",
								pCodModeloLote			: codModeloLote,
								pObjDadosGerais 		: JSON.stringify(objDadosGerais.option("formData")),
								pOrganizacaoCCTodos	: objOrganizacoes.getEditor("organizacaoCCTodos").option("value"),
								pOrganizacaoPSTodos	: objOrganizacoes.getEditor("organizacaoPSTodos").option("value")
							},function(objRetorno){
								if (objRetorno.status==1){
									dataSourceModeloLote.reload();
									objModeloLote.option("value", objRetorno.codModeloLote);
									DevExpress.ui.notify("Dados Salvos com Sucesso!","success");
								}else{
									DevExpress.ui.notify("Erro: "+objRetorno.status,"error");
								}
							});
						}
					}
				},{
					location: "after",
					widget	: "dxButton",
					options	: {
						icon	: "fa fa-eraser",
						hint	: "Limpar os Campos",
						type	: "default",
						stylingMode : "contained",
						onClick	: function(){
							limparTela();
						}
					}
				}]
			}).dxToolbar("instance")
		
			objForm = $("#divForm").dxForm({
				activeStateEnabled:true,
				minColWidth: 50,
				screenByWidth: function(width) { return "lg"; },
				screenByWidth: function(width) { return "lg"; },
				height:function(){ return window.innerHeight-40 },
				alignItemLabels:false,
				alignItemLabelsInAllGroups:false,
				items: [{
					colCount: 3,
					itemType: "group",
					cssClass: "first-group",
					items: [{
						colSpan: 2,
						dataField: "modeloLote",
          	label		: {text	: " Modelo de Lote"},  
						template	: function (data, itemElement) {
							itemElement.append("<div id='divModeloLote'/>")
						},
					},{colSpan: 1},{
						colSpan: 3,
						cssClass: "first-group",
						itemType: "tabbed",
						name 	: "abas",
						tabPanelOptions: {
							deferRendering: false,
							animationEnabled: false,
							showNavButtons:true,
							selectedIndex: 0,
							onSelectionChanged: function(e){}
						},	
							height:'10px',
							tabs:[{
								title	: "Pesquisar",
								items: [{
									template	: function (data, itemElement) {
										itemElement.append("<div id='divPesquisar'>")
									}
								}],
							},{
								title	: "Dados Gerais",
								items: [{
									template	: function (data, itemElement) {
										itemElement.append("<div id='divDadosGerais'>")
									}
								}]
							},{
								title	: "Organizações",
								items: [{
									template	: function (data, itemElement) {
										itemElement.append("<div id='divOrganizacoes'>")
									}
								}]
							},{
								title	: "Auditoria",
								items: [{
									template	: function (data, itemElement) {
										itemElement.append("<div id='divControle'>")
									}
								}]
							}]
						}
					]
				}]
			}).dxForm("instance");			
		
			dataSourceModeloLote = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					byKey: function(args) {
						return $.getJSON(urlPreparacao,{
							method					:	"GetFATModeloLote",
							pCodModeloLote	: args,
						});
					},
					load: function(args) {
						return $.getJSON(urlPreparacao,{
							method			:	"GetFATModeloLote",
							pSkip				:	args.skip,
							pTake				:	args.take,
							pDescricao	:	args.searchValue,
						});
					}
				})
			});	
		
			objModeloLote = $("#divModeloLote").dxSelectBox({
				dataSource: dataSourceModeloLote,
				placeholder: "+",
				searchEnabled: true,
				valueExpr: "CodigodoModelodeLote", 
				displayExpr: "Descricao",
				showClearButton: true,
				onValueChanged: function(e) {
					if (e.value) {
						carregarDados(e.value);
					}else{	
						limparTela();	
					}
				}
			}).dxSelectBox("instance");
			
			function carregarDados(pCodModeloLote) {
				$.getJSON(urlPreparacao, {	
					method:	"GetDados",
					pCodModeloLote: pCodModeloLote,
				},function(retorno){
					pagamentoFontePagadora = retorno.dadosGerais.pagamentoFontePagadora; 
					objDadosGerais.option("formData", retorno.dadosGerais)
					objControle.option("formData", retorno.dadosControle)
					objOrganizacoes.getEditor("organizacaoCCTodos").option("value",retorno.organizacaoCCTodos);
					objOrganizacoes.getEditor("organizacaoPSTodos").option("value",retorno.organizacaoPSTodos);
					setTimeout(function(){
						objDadosGerais.getEditor("pagamentoFontePagadora").option("value",pagamentoFontePagadora);
						setTimeout(function(){
							if (retorno.dadosGerais.relatoriosModeloSemF != "") {
								objDadosGerais.getEditor("relatoriosModelo").option("value", retorno.dadosGerais.relatoriosModeloSemF.split(","))
							}
							$.get(urlPreparacao, {	
									method:	"GetDadosOrganizacoes",
									pCodModeloLote: pCodModeloLote,
								},function(retorno){
									montaConjuntoClienteComercial();
									montaConjuntoPrestadoresServico();
									dataSourceRelatorio.reload();
								});
						}, 250);
					}, 250);
					$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 1);
				});
			}

			objPesquisar = $("#divPesquisar").dxForm({
				scrollingEnabled	: true,
				showColonAfterLabel	: false,
				height	:function() { return window.innerHeight - 150;},
				screenByWidth: function(width) { return "lg"; },
				alignItemLabels: false,
				alignItemLabelsInAllGroups:false,
				items	: [{
					itemType: "group",
					caption: "Filtros",
					cssClass: "second-group",
					alignItemLabels: true,
					colCount: 6,
					items: [{
						colSpan: 4, 
						dataField: "descricao",
						validationRules: [{ type: "required" }],
						label: { text:"Descrição:", alignment: "right" }
					},{
						colSpan: 1, 
						dataField: "ativo",
						validationRules: [{ type: "required" }],
						label: { text:"Ativo?", alignment: "right", showColon: false },
						editorType: "dxSwitch",
						editorOptions: {
							switchedOnText:"Sim",
							switchedOffText:"Não",
							value	: 1
						}
					}, {}, {
						colSpan: 2, 
						dataField: "pagamentoTipoFontePagadora",
						label: { text:"Tipo Fonte Pagadora:", alignment: "right" },
						editorType: "dxSelectBox",
						editorOptions: {
							dataSource: new DevExpress.data.DataSource({
								store: new DevExpress.data.CustomStore({
									loadMode: "raw",
									load: function(args) {
										return $.getJSON(urlSearch,{
											method: "GetINPARA",
											pDescParametro: "FATFONTEPAGADORA"
										});
									}
								})
							}),
							searchEnabled: true,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
							onValueChanged: function(e) {
								if (e.value == 1 || !e.value) {
									objPesquisar.getEditor("pagamentoFontePagadora").option({readOnly: true, value: ""});
								}else{
									objPesquisar.getEditor("pagamentoFontePagadora").option({readOnly: false, value: ""});
								}
							}
						}
					},{
						colSpan: 2, 
						dataField: "pagamentoFontePagadora",
						label: { text:"Fonte Pagadora:", alignment: "right" },
						editorType: "dxSelectBox",
						editorOptions: {
							dataSource: new DevExpress.data.DataSource({
								store: new DevExpress.data.CustomStore({
									byKey: function(args) {
										return $.getJSON(urlPreparacao,{
											method: "GetFATOrganizacao",
											pCodOrganizacao: args
										});
									},
									load: function(args) {
										return $.getJSON(urlPreparacao,{
											method: "GetFATOrganizacao",
											skip: args.skip,
											take: args.take,
											searchValue: args.searchValue,
											pFontePagadora: 1
										});
									}
								})
							}),
							readOnly: true,
							searchEnabled: true,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
						}
					},{
						colSpan: 2, 
						dataField: "pagamentoRecebedor",
						label: { text:"Recebedor:", alignment: "right" },
						editorType: "dxSelectBox",
						editorOptions: {
							dataSource: new DevExpress.data.DataSource({
								store: new DevExpress.data.CustomStore({
									byKey: function(args) {
										return $.getJSON(urlPreparacao,{
											method: "GetFATOrganizacao",
											pCodOrganizacao: args
										});
									},
									load: function(args) {
										return $.getJSON(urlPreparacao,{
											method: "GetFATOrganizacao",
											skip: args.skip,
											take: args.take,
											searchValue: args.searchValue,
											pRecebedor: 1
										});
									}
								})
							}),
							searchEnabled: true,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
						}
					},{
						colSpan: 6,							
						template	: function (data, itemElement) {
							itemElement.append("<div id='divPesquisarAcao' style='text-align:right;border: 0px solid red;'>")
						}
					}]	
				},{
					template	: function (data, itemElement) {
						itemElement.append("<div id='divPesquisarListar' style='text-align:right;border: 0px solid red;'>")
					}
				}]
			}).dxForm("instance");

			$("#divPesquisarAcao").html("<table width='100%'>" +
																	"<tr>" +
																		"<td align='right' style='vertical-align:bottom;'>" + 
																			"<div id='divPesquisarPesquisar'></div>&nbsp;" +
																			"<div id='divPesquisarLimpar'></div>&nbsp;" +
																		"</td>" +
																	"</tr>" +
															"</table>");

			objPesquisarPesquisar = $("#divPesquisarPesquisar").dxButton({
			  icon	: "search",
			  text	: "Pesquisar",
			  type	: "default",
			  onClick	: function(){
					pesquisar();
				}
			}).dxButton("instance");

			objPesquisarLimpar = $("#divPesquisarLimpar").dxButton({
			  icon	: "fa fa-eraser",
			  text	: "Limpar",
			  type	: "default",
			  onClick	: function(){
					objPesquisar.resetValues();
					if ($("#divPesquisarListar1")) $("#divPesquisarListar1").remove();
			  }
			}).dxButton("instance");

			function pesquisar(){
				if ($("#divPesquisarListar1")) $("#divPesquisarListar1").remove();
				$("#divPesquisarListar").html("<div id='divPesquisarListar1'></div>");

				$("#divPesquisarListar1").dxDataGrid({
					dataSource: new DevExpress.data.DataSource({
						store: new DevExpress.data.CustomStore({
							loadMode: "raw",   
							load: function() {
								return $.getJSON(urlPreparacao,{method:"pesquisar",	pObjPesquisar: JSON.stringify(objPesquisar.option("formData"))});
							}
						})
					}),
					columns: [
						{dataField: "descricao",caption: "Descrição", alignment: "center"},
						{dataField: "ativo",caption: "Ativo?", alignment: "center", width: 50},
						{dataField: "pagamentoTipoFontePagadora",caption: "Tipo de Fonte Pagadora", width: 150, alignment: "center"},
						{dataField: "pagamentoFontePagadora",caption: "Pagador", alignment: "center"},
						{dataField: "pagamentoRecebedor",caption: "Recebedor ", alignment: "center"},
					],
					filterRow: { visible: true },
					hoverStateEnabled: true,
					height: function() {
						return window.innerHeight - 330;
					},	
					showBorders: true,
					showRowLines: true,
					rowAlternationEnabled: true,
					selection: { mode: "single" },
					onSelectionChanged: function(selectedItems) {
						objModeloLote.option("value",selectedItems.selectedRowKeys[0].codigodoModelodeLote);
					},
				});
			}

			function exibirAjuda(pTarget, pOpcao){
				var conteudo = ""; width = 0; height = 0;
				if (pOpcao == "periodoDataReferPedido") {
					conteudo = "Data de Referência do Pedido que define quais faturas serão incluídas no lote.<br><br>"
					conteudo += "<b>Abertura:</b> Serão incluídos pedidos que foram abertos no período do lote<br>"
					conteudo += "<b>Complementação:</b> Serão incluídos pedidos que possuem itens adicionados no pedido no período do lote<br>"
					conteudo += "<b>Admissão:</b> Serão incluídos pedidos que possuem itens admitidos no período do lote<br>"
					conteudo += "<b>Conclusão:</b> Serão incluídos pedidos com ítens concluídos no período do lote<br>"
					conteudo += "<b>Entrega:</b> Serão incluídos pedidos com itens entregues no período do lote<br>"
					conteudo += "<b>Status para Cobrança:</b> Serão incluídos pedidos com itens que atingiram o status definido pela regra de \"Status para Cobrança\" no período do lote<br>"
					width = 470; height = 200;
				}
				if (pOpcao == "periodoDiasInicioLotes") {
					conteudo = "Lista de números entre 1 e 31 separados por vírgula representando os dias de início de cada período de fechamento do lote. Os dias 29, 30 e 31 são ignorados quando o mês não os possui.<br>"
					conteudo += "Este campo é utilizado na sugestão de períodos de lotes a serem criados e na criação de lotes pelo fluxo de automatização de faturamento.<br><br>"
					conteudo += "<b>Ex:</b><br>"
					conteudo += "\"1\" (período do dia 1 até o último dia do mês)<br>"
					conteudo += "\"1, 16\" (períodos do dia 1 a 15 e do dia 16 ao último dia do mês)<br>"
					conteudo += "\"21\" (período do dia 21 ao dia 20 do mês subsequente)"
					width = 400; height = 200;
				}
				if (pOpcao == "periodoPrazoFechamento") {
					conteudo = "Prazo em dias para o término do fechamento do lote, contando a partir de sua data final."
					width = 300; height = 55;
				}
				if (pOpcao == "incRetrFatDataRefRetroativa") {
					conteudo = "Data de Referência que define quais faturas serão incluídas retroativamente no lote.<br>"
					conteudo += "Para inclusão retroativa é possível selecionar apenas datas de referência cujo passo no processo seja igual ou anterior ao da selecionada para o período não-retroativo.<br><br>"
					conteudo += "<b>Abertura:</b> Serão incluídos pedidos que foram abertos no período do lote<br>"
					conteudo += "<b>Complementação:</b> Serão incluídos pedidos que possuem itens adicionados no pedido no período do lote<br>"
					conteudo += "<b>Admissão:</b> Serão incluídos pedidos que possuem itens admitidos no período do lote<br>"
					conteudo += "<b>Conclusão:</b> Serão incluídos pedidos com ítens concluídos no período do lote<br>"
					conteudo += "<b>Entrega:</b> Serão incluídos pedidos com itens entregues no período do lote<br>"
					conteudo += "<b>Status para Cobrança:</b> Serão incluídos pedidos com itens que atingiram o status definido pela regra de \"Status para Cobrança\" no período do lote"
					width = 470; height = 240;
				}
				if (pOpcao == "incRetrFatPrazoIncRetroativa") {
					conteudo = "Número de máximo de dias anteriores ao inicio de um lote que será considerado para a inclusão de faturas no momento da criação de um novo lote.<br>"
					conteudo += "Se for deixado em branco serão consideradas todas as faturas de data anterior ao período do lote."
					width = 300; height = 105;
				}
				if (pOpcao == "guiasExigirConferenciaItens") {
					conteudo = "Ao marcar esta opção, os itens de fatura do lote devem estar verificados antes do seu fechamento. Itens que não estiverem verificados serão removidos do lote durante o processo de início do fechamento. A verificação é feita pela tela de conferência de itens."
					width = 300; height = 115;
				}
				if (pOpcao == "emissaoNotaGerarNFCredenciados") {
					conteudo = "Permite gerar notas fiscais em nome dos Credenciados ao invés de usar a Fonte Pagadora."
					width = 300; height = 55;
				}
				if (pOpcao == "emissaoNotaPrazoVencimento") {
					conteudo = "Número de dias para o vencimento da nota a partir da sua data de emissão.<br>"
					conteudo += "<b>D:</b> Dia de vencimento; <b>Ex.:</b> D15<br>"
					conteudo += "<b>U:</b> Dias uteis para vencimento; <b>Ex.:</b> U15<br>"
					conteudo += "<b>C:</b> Dias corridos para vencimento. <b>Ex.:</b> C15<br>"
					width = 300; height = 115;
				}
				if (pOpcao == "transmissaoHoraCriacao") {
					conteudo = "Horário entre 0 e 23 em que um novo lote do modelo será criado quando for atingido o fim de um período configurado.<br>Quando ausente, o modelo não é considerado para o processamento automático de lotes."
					width = 300; height = 115;
				}
				if (pOpcao == "transmissaoTipoTransmissao") {
					conteudo = "Essas são as opções de tipos de transmissão que estarão disponíveis na tela de lote, além de serem realizadas pelo sistema ao fim do processo de automatização de faturamento."
					width = 300; height = 95;
				}
				if (pOpcao == "acoesPosFechamentoReprocessar") {
					conteudo = "Se os documentos do pedido na produção devem ser reprocessados ao concluir o fechamento do lote."
					width = 300; height = 55;
				}
				if (pOpcao == "percentual") {
					conteudo = "Alteração de valor que pode ser aplicada em alguns relatórios do lote."
					width = 300; height = 55;
				}
				if (conteudo == "") return;
				objPopUp.option("contentTemplate", function(contentElement) {
    		$("<span style='font-size:12px;'>")
       		.append(conteudo)
        	.appendTo(contentElement);         
				});
				objPopUp.option({"target":pTarget, width: width, height: height});
       	objPopUp.show();
			}
				
	    var campoFontePagadora = function(value) {
				var d = $.Deferred();
				if (objDadosGerais.getEditor("pagamentoTipoFontePagadora").option("value") == 1) {
					d.resolve(1 == 1);
				}else{
					if (objDadosGerais.getEditor("pagamentoFontePagadora").option("value") == "") {
						d.resolve(1 == 0);
					}else{
						d.resolve(1 == 1);
					}
				}
				return d.promise();
			}	
			
			dSIncRetrFatDataRefRetroativa = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",
					load: function(args) {
						var d = $.Deferred();
						$.getJSON(urlSearch,{ method: "GetINPARA", pDescParametro: "DATAREFERENCIAPEDIDO"},function(objRetorno){
							var codPeriodoDataReferPedido = objDadosGerais.getEditor("periodoDataReferPedido").option("value");
							if (codPeriodoDataReferPedido != "" && codPeriodoDataReferPedido != null) {							
								var objRetornoNew = new Array;
								codPeriodoDataReferPedido = new Number(codPeriodoDataReferPedido);
								for (count = 0 ; count < objRetorno.length ; count ++) {
									var codIncRetrFatDataRefRetroativa = new Number(objRetorno[count].Codigo);
									if (codIncRetrFatDataRefRetroativa <= codPeriodoDataReferPedido) {
										objRetornoNew.push(objRetorno[count]);
									}
								}
								d.resolve(objRetornoNew);
							}else{								
								d.resolve(objRetorno);
							}
						});
						return d.promise();
					}
				})
			});

			dataSourceRelatorio = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
		  		key: "relatorioCod",
		  		loadMode: "raw",   
		  		load: function() {
		      	return $.getJSON(urlPreparacao,{method:"GetRelatorio"});
		  		},
		  		insert: function (values) {
			  		objDados = new Array;
						for (var coluna in values) {
							if (values.hasOwnProperty(coluna)) {
								valor = values[coluna];
								objDados.push(coluna+"~"+valor);
							}
						}
						var retorno = #server(VAR.CSP.FATModeloLote.ArmRelatorio(objDados, YBED))#;
		    	},
					remove: function (key) {
						var retorno = #server(VAR.CSP.FATModeloLote.ExcRelatorio(key, YBED))#;
		    	}					
				})
			});


			objDadosGerais = $("#divDadosGerais").dxForm({
				scrollingEnabled	: true,
				showColonAfterLabel	: false,
				height	:function() { return window.innerHeight - 150;},
				screenByWidth: function(width) { return "lg"; },
				alignItemLabels: false,
				alignItemLabelsInAllGroups:false,
				colCount: 4,
				items	: [{
					colSpan: 3, 
					dataField: "descricao",
					validationRules: [{ type: "required" }],
					label: { text:"Descrição:", alignment: "right" }
				},{
					colSpan: 1, 
					dataField: "ativo",
					validationRules: [{ type: "required" }],
					label: { text:"Ativo?", alignment: "right", showColon: false },
					editorType: "dxSwitch",
					editorOptions: {
						switchedOnText:"Sim",
						switchedOffText:"Não",
						value	: 1
					}
				}, {
					colSpan: 2,
					itemType: "group",
					caption: "Pagamento",
					cssClass: "second-group",
					alignItemLabels: true,
					items: [{
						dataField: "pagamentoTipoFontePagadora",
						label: { text:"Tipo Fonte Pagadora:", alignment: "right" },
						editorType: "dxSelectBox",
						validationRules: [{ type: "required" }],
						editorOptions: {
							dataSource: new DevExpress.data.DataSource({
								store: new DevExpress.data.CustomStore({
									loadMode: "raw",
									load: function(args) {
										return $.getJSON(urlSearch,{
											method: "GetINPARA",
											pDescParametro: "FATFONTEPAGADORA"
										});
									}
								})
							}),
							searchEnabled: true,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
							onValueChanged: function(e) {
								if (e.value == 1 || !e.value) {
									objDadosGerais.getEditor("pagamentoFontePagadora").option({readOnly: true, value: ""});
								}else{
									objDadosGerais.getEditor("pagamentoFontePagadora").option({readOnly: false, value: ""});
								}
							}
						}
					},{
						dataField: "pagamentoFontePagadora",
						label: { text:"Fonte Pagadora:", alignment: "right" },
						editorType: "dxSelectBox",
						validationRules: [{
	          	type: "async",
							message: "Campo obrigatório",
							validationCallback: function(params) {
								return campoFontePagadora(params.value);
							}
	          }],
						editorOptions: {
							dataSource: new DevExpress.data.DataSource({
								store: new DevExpress.data.CustomStore({
									byKey: function(args) {
										return $.getJSON(urlPreparacao,{
											method: "GetFATOrganizacao",
											pCodOrganizacao: args
										});
									},
									load: function(args) {
										return $.getJSON(urlPreparacao,{
											method: "GetFATOrganizacao",
											skip: args.skip,
											take: args.take,
											searchValue: args.searchValue,
											pFontePagadora: 1
										});
									}
								})
							}),
							readOnly: true,
							searchEnabled: true,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
							onValueChanged: function(e) {
								if (e.value) {
									objOrganizacoes.getEditor("organizacaoCCFontePagadora").option("value", objDadosGerais.getEditor("pagamentoFontePagadora").option("text"))
								}
								montaConjuntoClienteComercial();
							}
						}
					},{
						dataField: "pagamentoRecebedor",
						label: { text:"Recebedor:", alignment: "right" },
						editorType: "dxSelectBox",
						validationRules: [{ type: "required" }],
						editorOptions: {
							dataSource: new DevExpress.data.DataSource({
								store: new DevExpress.data.CustomStore({
									byKey: function(args) {
										return $.getJSON(urlPreparacao,{
											method: "GetFATOrganizacao",
											pCodOrganizacao: args
										});
									},
									load: function(args) {
										return $.getJSON(urlPreparacao,{
											method: "GetFATOrganizacao",
											skip: args.skip,
											take: args.take,
											searchValue: args.searchValue,
											pRecebedor: 1
										});
									}
								})
							}),
							searchEnabled: true,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
						}
					},{
						template: function (data, itemElement) {
							itemElement.append("<div style='height:45px;border:0px solid red;text-align:right'>")
						}
					}]	
				}, {
					colSpan: 2,
					itemType: "group",
					cssClass: "third-group",
					items: [{
						itemType: "group",
						cssClass: "second-group",
						caption: "Período",
						colCount: 2,
						items: [{
							colSpan: 2,
							dataField: "periodoDataReferPedido",
							label: { text:"Data Referência Pedido:", alignment: "right" },
							editorType: "dxSelectBox",
							editorOptions: {
								dataSource: new DevExpress.data.DataSource({
									store: new DevExpress.data.CustomStore({
										loadMode: "raw",
										load: function(args) {
											return $.getJSON(urlSearch,{
												method: "GetINPARA",
												pDescParametro: "DATAREFERENCIAPEDIDO"
											});
										}
									})
								}),
								searchEnabled: true,
								valueExpr: "Codigo", 
								displayExpr: "Descricao",
								buttons: [{
									name: "helpPeriodoDataReferPedido",
									location: "after",
									options: {
										stylingMode: "text",
										icon: "far fa-question-circle",
										onClick: function(args) {
											exibirAjuda(args.event.target, "periodoDataReferPedido");
										}
									}
								}, "dropDown"],
								onValueChanged: function(e) {
									dSIncRetrFatDataRefRetroativa.reload();
									//objDadosGerais.getEditor("incRetrFatDataRefRetroativa").option("value", e.value);
								}
							}
						},{
							dataField: "periodoDiasInicioLotes",
							label: { text:"Dias de Início dos Lotes:", alignment: "right" },
							editorType: "dxTextBox",
							editorOptions: {
								minWidth: 80,
								buttons: [{
									name: "helpPeriodoDiasInicioLotes",
									location: "after",
									options: {
										stylingMode: "text",
										icon: "far fa-question-circle",
										onClick: function(args) {
											exibirAjuda(args.event.target, "periodoDiasInicioLotes");
										}
									}
								}]
							}
						},{	
							dataField: "periodoPrazoFechamento",
							label: { text:"Prazo para Fechamento:", alignment: "right" },
							editorType: "dxNumberBox",
							editorOptions: {
								min: 0,
								minWidth: 80,
								value: 0,
								onKeyDown: function(e) {
									var event = e.event,
									str = event.key || String.fromCharCode(event.which);
									if(/^[.,e]$/.test(str)) {
										event.preventDefault();
									}
								},
								buttons: [{
									name: "helpPeriodoPrazoFechamento",
									location: "after",
									options: {
										stylingMode: "text",
										icon: "far fa-question-circle",
										onClick: function(args) {
											exibirAjuda(args.event.target, "periodoPrazoFechamento");
										}
									}
								}]
							}
						}]	
					},{
						itemType: "group",
						cssClass: "second-group",
						caption: "Inclusão Retroativa de Faturas",
						items: [/*{
							dataField: "incRetrFatDataRefRetroativa",
							label: { text:"Data Referência Retroativa:", alignment: "right" },
							editorType: "dxSelectBox",
							editorOptions: {
								dataSource: dSIncRetrFatDataRefRetroativa,
								searchEnabled: true,
								valueExpr: "Codigo", 
								displayExpr: "Descricao",
								readOnly: true,
								buttons: [{
									name: "helpIncRetrFatDataRefRetroativa",
									location: "after",
									options: {
										stylingMode: "text",
										icon: "far fa-question-circle",
										onClick: function(args) {
											exibirAjuda(args.event.target, "incRetrFatDataRefRetroativa");
										}
									}
								}, "dropDown"]
							}
						},*/{
							dataField: "incRetrFatPrazoIncRetroativa",
							label: { text:"Prazo p/Inclusão Retroativa:", alignment: "right" },
							editorType: "dxNumberBox",
							editorOptions: {
								min: 0,
								value: "",
								width: 100,
								onKeyDown: function(e) {
									var event = e.event,
									str = event.key || String.fromCharCode(event.which);
									if(/^[.,e]$/.test(str)) {
										event.preventDefault();
									}
								},
								onValueChanged: function(data) {
									/*if (!data.value) {
										objDadosGerais.getEditor("incRetrFatDataRefRetroativa").option({readOnly: true, value: objDadosGerais.getEditor("periodoDataReferPedido").option("value")});
									}else{
										objDadosGerais.getEditor("incRetrFatDataRefRetroativa").option({readOnly: false});
									}*/
								},
								buttons: [{
									name: "helpIncRetrFatPrazoIncRetroativa",
									location: "after",
									options: {
										stylingMode: "text",
										icon: "far fa-question-circle",
										onClick: function(args) {
											exibirAjuda(args.event.target, "incRetrFatPrazoIncRetroativa");
										}
									}
								}]
							}
						}]	
					}], 	
				}, /*{
					itemType: "group",
					cssClass: "third-group",
					items: [{
						itemType: "group",
						cssClass: "second-group",
						caption: " Guias",
						colCount: 4,
						items: [{
							colSpan: 4,
							dataField: "guiasExportacao",
							label: { text:"Exportação:", alignment: "right" },
							editorType: "dxTextBox",
							editorOptions: {
								text: "Aguardando definição"
							}
						},{
							colSpan: 3,
							dataField: "guiasExigirConferenciaItens",
							label: { text: " " },
							editorType: "dxCheckBox",
							editorOptions: {
								text: "Exigir Conferência dos Itens"
							}
						},{
							template: function (data, itemElement) {
								itemElement.append("<div class='guiasExigirConferenciaItens help'>")
							}
						}]	
					}, {
						itemType: "group",
						cssClass: "second-group",
						caption: "Informações para o Financeiro",
						items: [{
							dataField: "informacoesFinanceiroConta",
							label: { text: "Conta Financeira:", alignment: "right" },
							validationRules: [{ type: "required" }],
							editorType: "dxSelectBox", 
							editorOptions: {
								dataSource: new DevExpress.data.DataSource({
	          			store: new DevExpress.data.CustomStore({
	              		loadMode: "raw",   
	              		load: function() {
	                  	return $.getJSON(urlSearch,{method:"GetVARPARA",DescParametro:"VARCONTAFINANCEIRA",pExibirCod:0});
	              		}
	          			})
	      				}),
								searchEnabled: true,
								valueExpr: "Codigo", 
								displayExpr: "Descricao",
							},
						}]	
					}]
				}, */{
					colSpan: 2,
					itemType: "group",
					cssClass: "second-group",
					caption: "Emissão de Nota",
					colCount: 9,
					items: [{
						colSpan: 8, 
						dataField: "emissaoNotaGerarNFCredenciados",
						label: { text: " " },
						editorType: "dxCheckBox",
						editorOptions: {
							text: "Gerar notas p/Credenciados"
						}
					},{
						template: function (data, itemElement) {
							itemElement.append("<div class='emissaoNotaGerarNFCredenciados help'>")
						}
					},{
						colSpan: 9, 
						dataField: "emissaoNotaPrazoVencimento",
						label: { text: "Prazo Vencimento:", alignment: "right" },
						editorType: "dxTextBox",
						editorOptions: {
							buttons: [{
								name: "helpIncRetrFatDataRefRetroativa",
								location: "after",
								options: {
									stylingMode: "text",
									icon: "far fa-question-circle",
									onClick: function(args) {
										exibirAjuda(args.event.target, "emissaoNotaPrazoVencimento");
									}
								}
							}]
						}						
					},{
						colSpan: 9, 
						dataField: "emissaoNotaBanco",
						label: { text: "Banco:", alignment: "right" },
						editorType: "dxSelectBox",
						editorOptions: {
							dataSource: new DevExpress.data.DataSource({
								store: new DevExpress.data.CustomStore({
									loadMode: "raw",
									load: function(args) {
										return $.getJSON(urlSearch,{
											method: "GetINPARA",
											pDescParametro: "BANCOS",
											pCodigo: 1
										});
									}
								})
							}),
							searchEnabled: true,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
						}
					},{
						colSpan: 4, 
						dataField: "emissaoNotaAgencia",
						label: { text: "Agência:", alignment: "right" },
					},{
						colSpan: 5, 
						dataField: "emissaoNotaConta",
						label: { text: "Conta:", alignment: "right" },
					},{
						colSpan: 9, 
						template: function (data, itemElement) {
							itemElement.append("<div style='height:8px;border:0px solid red;text-align:right'>")
						}
					}]	
				}, {
					colSpan: 2,
					itemType: "group",
					cssClass: "third-group",
					items: [{
						itemType: "group",
						cssClass: "second-group",
						caption: "Transmissão",
						items: [{
							dataField: "transmissaoHoraCriacao",
							label: { text: "Hora para Criação Automática:", alignment: "right" },
							editorType: "dxNumberBox",
							editorOptions: {
								min: 0,
								width: 110,
								value: 0,
								onKeyDown: function(e) {
									var event = e.event,
									str = event.key || String.fromCharCode(event.which);
									if(/^[.,e]$/.test(str)) {
										event.preventDefault();
									}
								},
								buttons: [{
									name: "helpTransmissaoHoraCriacao",
									location: "after",
									options: {
										stylingMode: "text",
										icon: "far fa-question-circle",
										onClick: function(args) {
											exibirAjuda(args.event.target, "transmissaoHoraCriacao");
										}
									}
								}]
							}
						},{
							dataField: "transmissaoTipoTransmissao",
							label: { text: "Tipos de Transmissão de Lote:", alignment: "right" },
							editorOptions: {
								buttons: [{
									name: "helpTransmissaoTipoTransmissao",
									location: "after",
									options: {
										stylingMode: "text",
										icon: "far fa-question-circle",
										onClick: function(args) {
											exibirAjuda(args.event.target, "transmissaoTipoTransmissao");
										}
									}
								}],
							}
						}]	
					},{
						colSpan: 2,
						itemType: "group",
						cssClass: "second-group",
						caption: "Relatórios",
						alignItemLabels: true, 
						items: [{
							dataField: "relatoriosModelo",
							label: { text: "Modelo:", alignment: "right" },
							editorType: "dxTagBox",
							editorOptions: {
								dataSource: new DevExpress.data.DataSource({
									store: new DevExpress.data.CustomStore({
										loadMode: "raw",
										load: function(args) {
											return $.getJSON(urlPreparacao,{method: "GetModelRelatorio"});
										}
									})
								}),
								searchEnabled: true,
								valueExpr: "relatorio", 
								displayExpr: "relatorio",
							}
						}]	
					}, /*{
						itemType: "group",
						cssClass: "second-group",
						caption: "Ações Pós-Fechamento",
						colCount: 8,
						items: [{
							colSpan: 7,
							dataField: "acoesPosFechamentoReprocessar",
							label: { text: " " },
							editorType: "dxCheckBox",
							editorOptions: {
								text: "Reprocessar Documentos do Pedido ao Fechar o Lote"
							},
						},{
							template: function (data, itemElement) {
								itemElement.append("<div class='acoesPosFechamentoReprocessar help'>")
							}
						}]
					}*/]
				}]
			}).dxForm("instance");
			
			$(".help").dxButton({
				stylingMode: "text",
				icon: "far fa-question-circle",
				onClick: function(args) {
					var campo = $(this)[0]._$element[0].className.split(" ")[0];
					exibirAjuda(args.event.target, campo);
				}
			});
			
			objOrganizacoes = $("#divOrganizacoes").dxForm({
				scrollingEnabled	: true,
				showColonAfterLabel	: false,
				height	:function() { return window.innerHeight - 150;},
				screenByWidth: function(width) { return "lg"; },
				alignItemLabels: false,
				items	: [{
					itemType: "group",
					cssClass: "second-group",
					caption: "Clientes Comerciais",
					colCount: 2,
					items: [{
						itemType: "group",
						colCount: 5,
						items: [{
							colSpan: 4,
							dataField: "organizacaoCCFontePagadora",
							label: { text: "Fonte Pagadora:", alignment: "right" },
							editorOptions: {
								readOnly: true,
							}
						},{
							dataField: "organizacaoCCTodos",
							label: { text: " " },
							editorType: "dxCheckBox",
							editorOptions: {
								text: "Todos"
							}
						},{
							colCount: 5,
							dataField: "organizacaoCCClientes",
							label: { alignment: "right", text	: "Cliente Comercial:", visible: false},
							template	: "<div id='clienteComercialTView' style='border:0px solid red;width:"+(window.innerWidth/2 - 40)+"px;' />"
						}]
					},{
						label: { visible	: false },
				    template	: "<div class='selected-container'>Selecionados:<div id='clienteComercialList'></div>",
						editorType: "dxList",
						editorOptions: {
			        height: 170,
			        showScrollbar: "always",
			        itemTemplate: function(item) {
			            return "<div>" + item.caminho + "</div>";
			        }
						}
					}]	
				}, {
					itemType: "group",
					caption: "Prestadores de Serviço",
					cssClass: "second-group",
					alignItemLabels: true, 
					alignItemLabelsInAllGroups: false,
					colCount: 2,
					items: [{
						itemType: "group",
						items: [{
							dataField: "organizacaoPSTodos",
							label: { text: " " },
							editorType: "dxCheckBox",
							editorOptions: {
								text: "Todos"
							}
						},{
							dataField: "organizacaoPS",
							label: { visible: false},
							template	: "<div id='prestadorServicoTView' style='border:0px solid red;width:"+(window.innerWidth/2 - 40)+"px;' />"
						}]
					},{
						label: { visible	: false },
				    template	: "<div class='selected-container'>Selecionados:<div id='prestadorServicoList'></div>",
						editorType: "dxList",
						editorOptions: {
			        height: 170,
			        showScrollbar: "always",
			        itemTemplate: function(item) {
			            return "<div>" + item.caminho + "</div>";
			        }
						}
					}]	
				}]
			}).dxForm("instance");

			dSOrganizacaoCliComerciais = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
				loadMode: "raw",
					load: function(args) {
						var pCodOrganizacao = objDadosGerais.getEditor("pagamentoFontePagadora").option("value"); 
						return $.getJSON(urlPreparacao,{method	:"getOrganizacao", pCodOrganizacao: pCodOrganizacao,
						pPrestServico: 0, pTipo: "clienteComercial"});
					}
				})
			});		        

			dSOrganizacaoPrestServico = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
				loadMode: "raw",
					load: function(args) {
						var pCodOrganizacao = ""; 
						return $.getJSON(urlPreparacao,{method	:"getOrganizacao", pCodOrganizacao: pCodOrganizacao,
						pPrestServico: 1, pTipo: "prestadorServico"});
					}
				})
			});		        

			dataSourceClienteComercialSel = 	new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",
					load: function(args) {
						return $.getJSON(urlPreparacao,{ method	:"getSelecaoTemporaria", tipo	: "clienteComercial"});
					}
				})
			})		        

			dataSourcePrestServicoSel = 	new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",
					load: function(args) {
						return $.getJSON(urlPreparacao,{ method	:"getSelecaoTemporaria", tipo	: "prestadorServico"});
					}
				})
			})		        

			function montaConjuntoClienteComercial(){
				dSOrganizacaoCliComerciais.reload();
				$("#clienteComercialTView").dxTreeView({
					dataSource: dSOrganizacaoCliComerciais,
					showCheckBoxesMode: "normal",
					onContentReady : function(e){
						syncSelection(e.component,"clienteComercial");
					},
					onSelectionChanged: function(e) {
						syncSelection(e.component,"clienteComercial");
					},
					searchEnabled: true
				})
				$("#clienteComercialList").dxList({
					dataSource: dataSourceClienteComercialSel,
	        showScrollbar: "alwayis",
	        height: 200,
	        itemTemplate: function(item) {
	            return "<div>" + item.caminho + "</div>";
	        }
				})
			}

			function montaConjuntoPrestadoresServico(){
				dSOrganizacaoPrestServico.reload();
				$("#prestadorServicoTView").dxTreeView({
					dataSource: dSOrganizacaoPrestServico,
					showCheckBoxesMode: "normal",
					onContentReady : function(e){
						syncSelection(e.component,"prestadorServico");
					},
					onSelectionChanged: function(e) {
						syncSelection(e.component,"prestadorServico");
					},
					searchEnabled: true
				})
				$("#prestadorServicoList").dxList({
					dataSource: dataSourcePrestServicoSel,
	        showScrollbar: "alwayis",
	        height: 200,
	        itemTemplate: function(item) {
	            return "<div>" + item.caminho + "</div>";
	        }
				})
			}

			function syncSelection(treeView,destino){
				var selectedFields = treeView.getSelectedNodes().map(function(node) { return node.itemData; });
				$.post(urlPreparacao,{ method: "atualizaSelecao", tipo: destino, 
					selecao: JSON.stringify(selectedFields)},function(retorno){
					if (destino == "clienteComercial"){
						dataSourceClienteComercialSel.reload()
					}else{
						dataSourcePrestServicoSel.reload()
					}
				},"json")
			}

			objControle = $("#divControle").dxForm({
				activeStateEnabled:true,
				formData: {},
				scrollingEnabled	: true,
				height	:function() {
					return window.innerHeight - 150;
				},
				items: [{
					itemType: "group",
					colCount: 2,
					items:[{
						dataField	: "criadoPor",
						label		: {
							alignment: "right"
						},
						disabled	: true
					},{
						dataField	: "criadoEm",
						label		: {
							alignment: "right"
						},
						disabled	: true
					},{
						dataField	: "alteradoPor",
						label		: {
							alignment: "right"
						},
						disabled	: true
					},{
						dataField	: "alteradoEm",
						label		: {
							alignment: "right"
						},
						disabled	: true
					}]
				}]
			}).dxForm("instance");

		</script>
	</body>
</html>
