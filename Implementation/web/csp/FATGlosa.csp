<!DOCTYPE html> 
<html xmlns="http://www.w3.org/1999/xhtml" lang="pt-br">
	<script language="Cache" runat="server">
		Do ^WWWVAR

		Set YUSER 		= $Get(%request.Data("YUSER", 1))
		Set YBED 			= $Get(%request.Data("YBED", 1))
		Set YM 				= $Get(%request.Data("YM", 1))
		Set YLOCATION = $Get(%request.Data("YLOCATION", 1))

		Set PortCache = $Get(%request.CgiEnvs("SERVER_PORT"))
		Set PageURL 	= $Get(%request.CgiEnvs("CACHE_URL"))
		Set PageName 	= %request.PageName
		Set app 			= %request.Application
		Set host 			= %request.CgiEnvs("HTTP_HOST")
		Set url				= "http://"_host_app

		Set URLPreparacao 						= "VAR.CSP.FATGlosa.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		Set URLPreparacaoModLote 			= "VAR.CSP.FATModeloLote.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		Set URLPreparacaoLote 				= "VAR.CSP.FATLote.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		Set URLPreparacaoAgendamento 	= "VAR.CSP.VARCadAgendamento.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		Set URLPreparacaoOrc					= "VAR.CSP.VARCadOrcamento.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		Set URLPreparacaoAdm 					= "VAR.CSP.VARCadAdmissao.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		Set URLSearch									= "User.Search.PesquisasJson.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
		Set URLLogin 									= "COMLogin.cls"
		Set URLLink 									= "www.cls"
		
		set param="EP=1&YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&YLOCATION="_YLOCATION
		set paramEncrypt = $piece(##class(COM.fwk.ui.csp.CSPUtil).encrypt(param),"id_key=",2)
		
		Set nomeLocal 		= YLOCATION_" - "_$$SQLGetLocationName^VARSQL(YLOCATION)

		//Verifica se a sessão
		Set status = $$VerifySession^VARCSPUtils(YBED, YUSER, url)
	</script>

	<head>

		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">

		<!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
		<title>Glosa - Reapresentação de Guia</title>

		<!-- Bootstrap CSS -->
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/bootstrap/css/bootstrap.min.css">
		<!-- Font Awesome -->
		<link href=" #(YGIF)#global/plugins/fontawesome/5.4.1/css/all.css" rel="stylesheet" type="text/css">

		<!-- Custom Elements -->
		<link href=" #(YGIF)#global/css/components-rounded.css" rel="stylesheet" id="style_components" type="text/css" />
		<link href=" #(YGIF)#global/css/plugins.css" rel="stylesheet" type="text/css" />
		<link href=" #(YGIF)#global/css/layout.css" rel="stylesheet" type="text/css" />
		<link href=" #(YGIF)#global/css/themes/light.css" rel="stylesheet" type="text/css" id="style_color" />
		<link href=" #(YGIF)#global/css/custom.min.css" rel="stylesheet" type="text/css" />

		<!-- Fonts Padrão IPP -->
		<link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Open+Sans:400,600,700,800">

		<!-- DevExtreme themes -->
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.common.css" />
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.light.compact.css" />
		<!--<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.light.compact.css" />-->

    <link rel="stylesheet" type="text/css" href=" #(YGIF)#global/themes/css/alphalinc.css" id="style_color" />
	</head>
	<script type="text/javascript">

		var status = '#(status)#';
		var URLLogin = '#(URLLogin)#';
		var ygif = '#(YGIF)#'

		if (status == 0) {
			alert('Usuário não está logado ou a sessão expirou.')
			window.location.replace(URLLogin)
		}

	</script>

	<style>
	.cell-selected {
		background-color: #FFFFB9;
	}

	.dx-datagrid {
		user-select: none;
		-webkit-user-select: none;
	}		

	.dx-row2 { background-color: #F5F5F5; }
	.selected-container {
		padding: 20px;
		margin-left: 20px;
		background-color: rgba(191, 191, 191, 0.15);
		font-size: 115%;
		font-weight: bold;
	}
  .first-group {
		background-color: #ffffff;
  }
  .second-group{
		padding-top: 0px !important;
		padding-bottom: 0px !important;
		padding-left: 0px !important;
		padding-right: 0px !important;
		margin-top: 3px !important;
		margin-bottom: 3px !important;
		margin-left: 3px !important;
		margin-right: 0px !important;
		background-color: rgba(1, 178, 169, 0.15);
		border-top-right-radius: 5px;
		border-top-left-radius: 5px;
		border-top: 1px solid #E0E0E0;
		border-left: 1px solid #E0E0E0;
		border-right: 1px solid #E0E0E0;
		border-bottom: 1px solid #E0E0E0;
  }
  .third-group{
		padding-top: 0px !important;
		padding-bottom: 0px !important;
		padding-left: 0px !important;
		padding-right: 0px !important;
		margin-top: 0px !important;
		margin-bottom: 0px !important;
		margin-left: 0px !important;
		margin-right: 0px !important;
		background-color: #ffffff;
		border: 0px solid #E0E0E0;
  }
  .second-group .dx-form-group-caption {
		border: 0px solid red;
		margin-left: 3px !important;
		padding-top: 3px !important;
  }	
  .second-group .dx-form-group-content {
		background-color: #ffffff;
		color: red; 
		padding-left: 5px !important;
		padding-right: 5px !important;
  }	
	@keyframes fa-blink {
		0% { opacity: 1; }
		50% { opacity: 0.5; }
		100% { opacity: 0; }
	}
	.fa-blink {
		color: red;
		-webkit-animation: fa-blink 2.2s linear infinite;
		-moz-animation: fa-blink 2.2s linear infinite;
		-ms-animation: fa-blink 2.2s linear infinite;
		-o-animation: fa-blink 2.2s linear infinite;
		animation: fa-blink 2.2s linear infinite;
	}	
	</style>

	<body>
		<div id="toolbar"></div>
		<div id="divForm"></div>
		<div id="divAlterarConvenio"></div>
		<div id="loadpanel"></div>
		<div id="divPrintRelatorio"></div>

		<!-- REQUIRED JS SCRIPTS -->
		<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
		<script src=" #(YGIF)#global/plugins/extreme19.2.4/js/jquery.min.js"></script>

		<!-- JSZip library -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/jszip.min.js"></script>

		<!-- A DevExtreme library -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/dx.all.js"></script>

		<!-- DevExtreme-Intl module -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/localization/dx.messages.pt.js"></script>

		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/localization/dx.messages.pt.js"></script>

		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/dx-gantt.min.js"></script>

		<!-- Include all compiled plugins (below), or include individual files as needed -->
		<script src=" #(YGIF)#global/plugins/bootstrap-3.3.7/js/bootstrap.min.js"></script>
		
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/exceljs.min.js"></script>
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/FileSaver.min.js"></script>

		<!--Definições globais e criação de funcionalidades encapsuladas-->
		<script type="text/javascript">
			//Deixando variáveis disponíveis no cliente
			$.ajaxSetup({
			  headers : {   
			    'id_key' : '#(paramEncrypt)#'
			  }
			});

			var urlPreparacao 						= "#(URLPreparacao)#";
			var urlPreparacaoModLote 			= "#(URLPreparacaoModLote)#";
			var urlPreparacaoLote 				= "#(URLPreparacaoLote)#";
			var urlPreparacaoAgendamento	= "#(URLPreparacaoAgendamento)#";
			var urlPreparacaoOrc					= "#(URLPreparacaoOrc)#";
			var urlPreparacaoAdm					= "#(URLPreparacaoAdm)#";
			var urlSearch									= "#(URLSearch)#";
			var urlLink 									= "#(URLLink)#";
			var YBED 											= "#(YBED)#";
			var YUSER 										= "#(YUSER)#";
			var YLOCATION 								= "#(YLOCATION)#";
			var nomeLocal 								= "#(nomeLocal)#";
			
			arraySituacao = ["", "Reapresentado", "Aceito/Pago após reapresentação", "Não aceito/Recursar",
											 "Recurso enviado", "Aceito/ Pago após recurso", "Glosado" ]
			
			
			var numFaturaDS								= "";
			var numLoteDS									= "";
			
			var codStatus									= "";
			
			var altProcAgendand						= "";
			var altProcFatura 						= "";
			var altProcSeq								= "";
			
			var numFaturaPrint						= "";

			DevExpress.config({decimalSeparator: ",",thousandsSeparator: "."});
			DevExpress.localization.locale("pt");

			$(document).ready(function () {

			});

			loadPanel = $("#loadpanel").dxLoadPanel({
				visible: false,
				showIndicator: true,
				showPane: true,
				shading: true,
				shadingColor:"rgba(255,255,255,.6)",
				closeOnOutsideClick: false,
			}).dxLoadPanel("instance");

			objToolBar = $("#toolbar").dxToolbar({
				items: [{
					location: "after",
					widget	: "dxButton",
					options	: {
						icon	: "save",
						text	: "Salvar",
						hint	: "Salvar os Dados",
						type	: "success",
						stylingMode : "contained",
						elementAttr: {
				      id: "botaoSalvar"  
		        },
						onClick	: function(){
							var pCodGlosa = objForm.getEditor("glosa").option("value");
							if (pCodGlosa == "+") pCodGlosa = "";
							var flagGeral = objFormGeral.validate().isValid; 
							if (!flagGeral){
								DevExpress.ui.notify("Favor preencher os campos obrigatórios","warning");
								return;
							}
							$.getJSON(urlPreparacao,{method: "SetGlosa", pCodGlosa: pCodGlosa,
							pObjGeral: JSON.stringify(objFormGeral.option("formData"))},function(objRetorno){
								if (objRetorno.status==1){
									dSGlosa.reload();
									dSGlosasPendentes.reload();
									setTimeout(function(){
										objForm.getEditor("glosa").option("value",objRetorno.codGlosa);
									}, 20);
									DevExpress.ui.notify("Dados Salvos com Sucesso!","success");
								}else{
									DevExpress.ui.notify("Erro: "+objRetorno.status,"error");
								}
							});
						}
					}
				},{
					location: "after",
					widget	: "dxButton",
					options	: {
						text	: "Reapresentar",
						type	: "default",
						stylingMode : "contained",
						disabled: true, 
						elementAttr: {
				      id: "botaoReapresentar"  
		        },
						onClick	: function(){
							var pGlosa = objForm.getEditor("glosa").option("value");
							if (pGlosa == "" || pGlosa == null) {
								DevExpress.ui.notify("Selecione a Glosa.","warning");	
								return;
							}
							$.get(urlPreparacao,{method: "Reapresentar", pGlosa: pGlosa},function(status){
								if (status==1){
									DevExpress.ui.notify("Glosa reapresentada com Sucesso!","success");
									recuperarGlosa();
									$("#botaoReapresentar").dxButton("instance").option("disabled", 1);
									dSFaturas.reload();
									dSGlosasPendentes.reload();
									dSGuias.reload();
									dSRelatorios.reload();
									dSNF.reload();
								}else{
									DevExpress.ui.notify("Erro: "+status,"error");
								}
							});
						}
					}
				},{
					location: "after",
					widget	: "dxButton",
					options	: {
						icon	: "trash",
						hint	: "Remover",
						text	: "Remover",
						disabled: true, 
						type	: "danger",
						elementAttr: {
				      id: "botaoRemover"  
		        },
						stylingMode : "contained",
						onClick	: function(){
							var pGlosa = objForm.getEditor("glosa").option("value");
							if (pGlosa == "" || pGlosa == null) {
								DevExpress.ui.notify("Selecione a Glosa.","warning");	
								return;
							}
							$.get(urlPreparacao,{ method: "RemoveGlosa", pGlosa: pGlosa},function(retorno){
								if (retorno == 1) {
									DevExpress.ui.notify("Glosa removida com sucesso!","success");
									dSGlosa.reload();
									dSLote.reload();
									objForm.getEditor("glosa").option("value", "");
								}else {
									DevExpress.ui.notify("Erro: "+retorno,"warning");
								}
							});
						}
					}
				},{
					location: "after",
					widget	: "dxButton",
					options	: {
						icon	: "fa fa-eraser",
						hint	: "Limpar os Campos",
						text	: "Limpar",
						type	: "default",
						elementAttr: {
				      id: "botaoLimpar"  
		        },
						stylingMode : "contained",
						onClick	: function(){
							objForm.getEditor("glosa").option("value", "");
						}
					}
				}]
			}).dxToolbar("instance")

			dSGlosa = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					byKey: function(args) {
						return $.getJSON(urlPreparacao,{ method: "FindGlosa", pCodGlosa: args });
					},
					load: function(args) {
						return $.getJSON(urlPreparacao,{ method: "FindGlosa", skip: args.skip, 
						take: args.take, pSearchValue: args.searchValue});
					}
				})
			});

			objForm = $("#divForm").dxForm({
				activeStateEnabled:true,
				minColWidth: 50,
				screenByWidth: function(width) { return "lg"; },
				screenByWidth: function(width) { return "lg"; },
				height:function(){ 20},
				alignItemLabels:false,
				alignItemLabelsInAllGroups: false,
				items: [{
					colCount: 5,
					itemType: "group",
					cssClass: "first-group",
					items: [{
						colSpan: 3,
						dataField: "glosa",
          	label: { text: "Glosa", alignment: "right"},  
						editorType: "dxSelectBox",
						editorOptions: {
							dataSource: dSGlosa,
							searchEnabled: true,
							placeholder: "+",
							valueExpr: "codGlosa", 
							displayExpr: "codGlosa",
							showClearButton: true,
			        itemTemplate: function(data) {
				        return	"<div class='custom-item'>" +
				        					"<div>" + data.codGlosa + "</div>" +
				        					"<div style='color:red;font-size:10px'>Fonte Pagadora: " + data.fontPagadora + 
				        					" &nbsp; Lote: " + data.lote + " &nbsp; Período: " + data.dtIniLote +
				        					" - " + data.dtFinalLote +
				        					"</div>" +
				        				"</div>";
			        },
							onValueChanged: function(e) {
								if (e.value == "" || e.value == null) {
									objForm.getEditor("situacao").option("value","");
									objFormGeral.option("formData", {})
									objFormGeral.getEditor("fontePagadora").option("readOnly", 0);
									objFormGeral.getEditor("lote").option("readOnly", 0);
									objFaturas.option("disabled", 1);
									dSFaturas.reload();
									dSGuias.reload();
									dSRelatorios.reload();
									dSNF.reload();
									$("#botaoSalvar").dxButton("instance").option("disabled", 0);
									$("#botaoRemover").dxButton("instance").option("disabled", 1);
									$("#botaoNovaNotaFiscal").dxButton("instance").option("disabled", 1);
									$("#botaoEmitirNotaFiscal").dxButton("instance").option("disabled", 1);
									$("#botaoReapresentar").dxButton("instance").option("disabled", 1);
									codStatus = "";
									return 	
								}
								recuperarGlosa();
							}
						}
					},{
						colSpan: 2,
						dataField: "situacao",
						label: { text:"Situação", alignment: "right"},
						editorOptions: { readOnly: true}
					},{
						colSpan: 5,
						itemType: "tabbed",
						name 	: "abas",
						tabPanelOptions: {
		  			  selectedIndex: 0,
							deferRendering: false,
							animationEnabled: false,
							showNavButtons:true,
						},	
							height:'10px',
							tabs:[{
								title	: "Em Processo",
								items: [{
									template	: function (data, itemElement) {
										itemElement.append("<div id='divGlosasPendentes'>")
									}
								}],
							},{
								title	: "Geral",
								items: [{
									template	: function (data, itemElement) {
										itemElement.append("<div id='divGeral'>")
									}
								}],
							},{
								title	: "Fechamento",
								items: [{
									template	: function (data, itemElement) {
										itemElement.append("<div id='divFechamento'>")
									}
								}],
							}]
						}
					]
				}]
			}).dxForm("instance");

			objFormGlosasPendentes = $("#divGlosasPendentes").dxForm({
				scrollingEnabled	: true,
				showColonAfterLabel	: false,
				height	:function() { return window.innerHeight - 150;},
				screenByWidth: function(width) { return "lg"; },
				items	: [{
					template	: function (data, itemElement) {
						itemElement.append("<div id='divGlosasPendentesGrid' style='border: 0px solid red;width:"+(window.innerWidth-45)+"px;'></div>")
					}
				}]
			}).dxForm("instance");

			dSGlosasPendentes = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					load: function(args) {
						return $.getJSON(urlPreparacao,{ method: "GetGlosaPendentes"});
					},
				})
			});

			$("#divGlosasPendentesGrid").dxDataGrid({
				dataSource: dSGlosasPendentes,
				columns: [
					{dataField: "glosa", caption: "Glosa", alignment: "center", width: 110},
		 			{dataField: "fontPag", caption: "Fonte Pagadora", alignment: "center", width: 300},
				 	{caption: "Lote", alignment: "center", columns: [
					 	{dataField: "lote", caption: "Número", alignment: "center", width: 110},
					 	{dataField: "loteIni", caption: "Per. Inicial", alignment: "center", width: 80},
					 	{dataField: "loteFin", caption: "Per. Final", alignment: "center", width: 80},
				 	]},
				 	{caption: "Valor", alignment: "center", columns: [
					 	{dataField: "valorGlosa", caption: "Glosa", width: 90},
					 	{dataField: "valorPendente", caption: "Pendente", width: 90},
					 	{dataField: "valorAceito", caption: "Aceito", width: 90},
				 	]},
				 	{dataField: "situac", caption: "Situação", alignment: "center", width: 120},
				 	{dataField: "criadoEm", caption: "Criado Em", alignment: "center", width: 120, visible:0},
				 	{dataField: "criadoPor", caption: "Criado Por", alignment: "center", width: 120, visible:0 },
				 	{dataField: "reaprEm", caption: "Reapresentado Em", alignment: "center", width: 120},
				 	{dataField: "reaprPor", caption: "Reapresentado Por", alignment: "center", width: 120, visible:0},
				 	{dataField: "reaReaprEm", caption: "Re-Reapresentado Em", alignment: "center", width: 120, visible:0},
				 	{dataField: "reaReaprPor", caption: "Re-Reapresentado Por", alignment: "center", width: 120, visible:0}
				],
    		columnChooser: { enabled: true, mode: "dragAndDrop"},
				showColumnHeaders:true,
				allowColumnReordering: false,
				columnAutoWidth: true,
				showColumnLines: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				showBorders: true,
				headerFilter: { visible: false },
				grouping: { autoExpandAll: true },
				groupPanel: { visible: false, allowColumnDragging: true },
				columnFixing: { enabled: false },
				filterRow: { visible: false },
				export: { enabled: true },
				stateStoring: { enabled: false }, 
				wordWrapEnabled: true,
				searchPanel: { visible: true },
				height: function() { return window.innerHeight - 160;},
				selection: { mode: "single" },
				onSelectionChanged: function(selectedItems) {
					if (selectedItems.selectedRowsData.length>0){
						objForm.getEditor("glosa").option("value",selectedItems.selectedRowKeys[0].glosa);
						$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 1)
						dtGrid = selectedItems.component; 
						dtGrid.deselectAll();
					}
				},
			});

			dSFontePagadora =  new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					byKey: function(args) {
						return $.getJSON(urlPreparacaoModLote,{ method: "GetFATOrganizacao", pCodOrganizacao: args });
					},
					load: function(args) {
						return $.getJSON(urlPreparacaoModLote,{ method: "GetFATOrganizacao", skip: args.skip, 
						take: args.take, searchValue: args.searchValue, pFontePagadora: 1 });
					}
				})
			});

			dSLote = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					byKey: function(args) {
						return $.getJSON(urlPreparacao,{ method: "GetLote", pCodLote: args});
					},
					load: function(args) {
						var pCodFontePag = objFormGeral.getEditor("fontePagadora").option("value");
						if (pCodFontePag == "" || pCodFontePag == null) return [];
						return $.getJSON(urlPreparacao,{ method: "GetLote", skip: args.skip, 
						take: args.take, pSearchValue: args.searchValue, pCodFontePag:  pCodFontePag});
					}
				})
			});

			dSFaturas = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					load: function(args) {
						var pCodGlosa = objForm.getEditor("glosa").option("value");
						var d = $.Deferred();
						$.getJSON(urlPreparacao,{ method: "GetGlosaFaturas", pCodGlosa: pCodGlosa},function(objRetorno){
							d.resolve(objRetorno.dados);
							if (objRetorno != ""){
								$("#botaoReapresentar").dxButton("instance").option("disabled",objRetorno.statusBotRep);
							}
						});
						return d.promise();
					},
					update: function(key, objeto) {
						pCodGlosa = objForm.getEditor("glosa").option("value");
						var retorno = #server(VAR.CSP.FATGlosa.SetGlosaFaturas(pCodGlosa, key.numeroFatura, key.sequencia, objeto.codStatus, YBED))#
						retorno = retorno.split("~")
						dSGlosasPendentes.reload();
						objForm.getEditor("situacao").option("value",(
																														retorno[1]==1 ? "Aguardando Reapresentação" :
																														retorno[1]==2 ? "Reapresentado" :
																														retorno[1]==3 ? "Re-Reapresentado" :
																														"Encerrado"));
						dSGuias.reload();																														
						dSRelatorios.reload();
						dSNF.reload();
					}
				})
			});

			function removeFatura(pFatura, pSequencia){
				$.getJSON(urlPreparacao,{method: "RemoveFatura",
				pNumGlosa: objForm.getEditor("glosa").option("value"), pNumLote: "",
				pNumFatura: pFatura, pSeqProc	: pSequencia},function(){
					dSFaturas.reload();
					dSGuias.reload();
					dSRelatorios.reload();
					dSNF.reload();
				});
			}

			////Geral
			objFormGeral = $("#divGeral").dxForm({
				scrollingEnabled	: true,
				showColonAfterLabel	: false,
				alignItemLabels: true,
				height	:function() { return window.innerHeight - 150;},
				screenByWidth: function(width) { return "lg"; },
				colCount: 2,
				items	: [{
					itemType: "group",
					caption: "Lote",
					cssClass: "second-group",
					items: [{
						dataField: "fontePagadora", 
						label: { text:"Fonte Pagadora:", alignment: "right"},
						editorType: "dxSelectBox",
						editorOptions: {
							dataSource: dSFontePagadora,
							searchEnabled: true,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
							onValueChanged: function(e) {
								if (e.value == "" || e.value == null) {
									objFormGeral.getEditor("lote").option({value: null, readOnly: true});
								}else{
									dSLote.reload();
									objFormGeral.getEditor("lote").option({value: null, readOnly: false});
								}
							}
						},
						validationRules: [{ type: "required" }],
					},{ 
						dataField: "lote", 
						label: { text:"Lote:", alignment: "right"},
						editorType: "dxSelectBox",
						validationRules: [{ type: "required" }],
						editorOptions: {
							dataSource: dSLote,
							searchEnabled: true,
							valueExpr: "numero", 
							displayExpr: "numeroForm",
							showClearButton: true,
			        itemTemplate: function(data) {
				        return	"<div class='custom-item'>" +
				        					"<div style='color:"+(data.glosa == "" ? "" : "green")+";'>" + 
				        						data.numeroForm + 
				        						(
				        							data.glosa == "" ?
				        							"" :
				        							" | Glosa: " + data.glosa
				        						)
				        					"</div>"
				        				"</div>";
			        },
							onValueChanged: function(e) {
								dSFaturas.reload();
								if (e.value == "" || e.value == null) {
									objFormGeral.getEditor("criadoPor").option({value: ""});	
									objFormGeral.getEditor("criadoEm").option({value: ""});	
									objFormGeral.getEditor("alteradoPor").option({value: ""});	
									objFormGeral.getEditor("alteradoEm").option({value: ""});	
									return 	
								}
								var pCodFontePag 	= objFormGeral.getEditor("fontePagadora").option("value");
								var pCodLote			= e.value;
								$.getJSON(urlPreparacao,{ method: "ValidaLote", pCodFontePag: pCodFontePag, pCodLote: pCodLote},
								function(objRetorno) {
									if (objRetorno.codGlosa != "") {
										objForm.getEditor("glosa").option("value", objRetorno.codGlosa);
										recuperarGlosa();
									}
								});
							}
						}
					}]
				},{
					colCount: 5,
					itemType: "group",
					caption: "Auditoria",
					cssClass: "second-group",
					alignItemLabels: true,
					items: [{ 
						dataField: "criadoPor", colSpan: 3, label: { text:"Criado por:", alignment: "right"}, editorOptions: { readOnly: true}
					},{ 
						dataField: "criadoEm", colSpan: 2, label: { text:" Criado em:", alignment: "right"}, editorOptions: { readOnly: true}
					},{ 
						dataField: "alteradoPor", colSpan: 3, label: { text:"Alterado por:", alignment: "right"}, editorOptions: { readOnly: true}
					},{ 
						dataField: "alteradoEm", colSpan: 2, label: { text:"Alterado em:", alignment: "right"}, editorOptions: { readOnly: true}
					}]
				},{
					colSpan: 2,
					itemType: "group",
					caption: "Faturas",
					cssClass: "second-group",
					items: [{
						template: function (data, itemElement) { 
							itemElement.append("<div id='divFaturasGrid'>")
						},
					}]
				}]
			}).dxForm("instance");
			
			
			objFaturas = $("#divFaturasGrid").dxDataGrid({
				disabled: true,
				columns: [
					{ dataField: "numeroFaturaE", caption: "Número da Fatura", width: 150, groupIndex: 0, allowEditing: 0},
					{	dataField: "codTISS", caption: "Cód. TISS", width: 120, alignment: "center", allowEditing: 0},
					{	dataField: "procedimento", caption: "Procedimento", allowEditing: 0},
					{	dataField: "qtdeProcedimento", caption: "Qtde.", width: 120, alignment: "center", allowEditing: 0},
					{	dataField: "valor", caption:"Valor", dataType: "number", format: "R$ #,##0.00", width: 90, allowEditing: 0},
					{	dataField: "numGuia", caption: "Núm.Guia Atribuida p/ Operadora", width: 200, alignment: "center", allowEditing: 0},
					{	dataField: "descStatus", caption: "Situação", width: 200, alignment: "center",
						setCellValue: function (rowData, value) {
			        if (value == "" || value == null) return
			        objLinha = this;
			        var descStatus = arraySituacao[value];
							objLinha.defaultSetCellValue(rowData, "("+value+") "+descStatus);
							rowData.codStatus = value;	
				  	}
					},
					{	dataField: "altConv", caption: " ", width: 25, alignment: "center", allowEditing: 0,
						cellTemplate: function (container, options) { 
							if (options.data.codStatus == 1 || options.data.codStatus == 3) {
								container.append(
									"<span onClick=alterarConvenio('"+options.data.numeroFatura+"','"+options.data.sequencia+"')>" +
										"<i class='far fa-hospital' title='Alterar Convênio/Plano de Saúde' style='color:#337AB7;cursor:pointer;' />" +
									"</span>"
								);
							}
						}
					},
					{	dataField: "removeFatura", caption: " ", width: 25, alignment: "center", allowEditing: 0,
						cellTemplate: function (container, options) { 
							if (options.data.codStatus == 1 && options.data.strStatusGlosa == 1) {
								container.append(
									"<span onClick=removeFatura('"+options.data.numeroFatura+"','"+options.data.sequencia+"')>" +
										"<i class='far fa-trash-alt' title='Eliminar' style='color:#337AB7;cursor:pointer;' />" +
									"</span>"
								);
							}
						},
					},
					{	dataField: "branco", caption: " ", width: 15, allowEditing: 0 }
				],
				onEditingStart: function(e) {
					if (e.data.strStatusGlosa == 1) {
						e.cancel = 1;
					}
				},
				onEditorPreparing: function(e) {
					if (e.parentType == "dataRow" && e.dataField == "descStatus") {
						xCodGlosa = objForm.getEditor("glosa").option("value");
						xNumFatur = e.row.data.numeroFatura;
						xSequenc 	= e.row.data.sequencia;
						var objRet = #server(VAR.CSP.FATGlosa.GetStatusGlosaFaturas(xCodGlosa, xNumFatur, xSequenc))#.split("~");
						if (objRet[0] == 1) {
							arraySit = [
								{codStatus: "1", descStatus: "Reapresentado"},
							];
						}else if (objRet[0] == 2) {
							arraySit = [
								{codStatus: "1", descStatus: "Reapresentado"},
								{codStatus: "2", descStatus: "Aceito/Pago após reapresentação"},
								{codStatus: "3", descStatus: "Não aceito/Recursar"},
							];
						}else if (objRet[0] == 3 && objRet[1] == 2) {
							arraySit = [
								{codStatus: "2", descStatus: "Aceito/Pago após reapresentação"},
							];
						}else if (objRet[0] > 2) {
								arraySit = [
									{codStatus: "4", descStatus: "Recurso enviado"},
									{codStatus: "5", descStatus: "Aceito/ Pago após recurso"},
									{codStatus: "6", descStatus: "Glosado"}
								];
						}else {
							arraySit = [
								{codStatus: "1", descStatus: "Reapresentado"},
								{codStatus: "2", descStatus: "Aceito/Pago após reapresentação"},
								{codStatus: "3", descStatus: "Não aceito/Recursar"},
								{codStatus: "4", descStatus: "Recurso enviado"},
								{codStatus: "5", descStatus: "Aceito/ Pago após recurso"},
								{codStatus: "6", descStatus: "Glosado"}
							];
						}
						
						e.editorName = "dxSelectBox"; 
						e.editorOptions.dataSource = arraySit;
						e.editorOptions.value = e.row.data.codStatus;
						e.editorOptions.displayExpr = "descStatus";
						e.editorOptions.valueExpr = "codStatus";
						e.editorOptions.onValueChanged = function(arg) {
							e.setValue(arg.value);
						}
					}
				},
				export: { enabled: true },
    		onExporting: function(e) {
					var pGlosa 	= objForm.getEditor("glosa").option("value");
					var pFont 	= objFormGeral.getEditor("fontePagadora").option("displayValue");
					var Lote 		= objFormGeral.getEditor("lote").option("displayValue");
					if (typeof Object.assign !== 'function') {
					  // Must be writable: true, enumerable: false, configurable: true
					  Object.defineProperty(Object, "assign", {
					    value: function assign(target, varArgs) { // .length of function is 2
					      'use strict';
					      if (target === null || target === undefined) {
					        throw new TypeError('Cannot convert undefined or null to object');
					      }

					      var to = Object(target);

					      for (var index = 1; index < arguments.length; index++) {
					        var nextSource = arguments[index];

					        if (nextSource !== null && nextSource !== undefined) { 
					          for (var nextKey in nextSource) {
					            // Avoid bugs when hasOwnProperty is shadowed
					            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
					              to[nextKey] = nextSource[nextKey];
					            }
					          }
					        }
					      }
					      return to;
					    },
					    writable: true,
					    configurable: true
					  });
					}
					var workbook = new ExcelJS.Workbook();
					var worksheet = workbook.addWorksheet("Dados");
		      DevExpress.excelExporter.exportDataGrid({   
						worksheet: worksheet,
						component: e.component,
						topLeftCell: { row: 5, column: 1 },
					}).then(function() { 
						worksheet.getRow(1).getCell(1).value = "Data/Hora:"
						worksheet.getRow(1).getCell(2).value = "#($ZDateTime($Horolog,4))#";
						worksheet.getRow(1).getCell(3).value = "Usuário:"
						worksheet.getRow(1).getCell(4).value = YBED;

						worksheet.getRow(2).getCell(1).value = "Fonte Pagadora:"
						worksheet.getRow(2).getCell(2).value = pFont;
						worksheet.getRow(3).getCell(1).value = "Lote:"
						worksheet.getRow(3).getCell(2).value = Lote;

					}).then(function() {
						workbook.xlsx.writeBuffer().then(function(buffer) {   
							saveAs(
								new Blob(
									[buffer], { type: "application/octet-stream" }
								),
								"Glosa_"+pGlosa+"_"+pFont+".xlsx"
							);
						});
					});
					e.cancel = true;
		 		},
				searchPanel: { visible: true },
				dataSource: dSFaturas,
				editing: { mode: "cell", allowUpdating: true, useIcons: true},					
				filterRow: { visible: true },
				hoverStateEnabled: true,
				paging: { enabled: true, pageSize: 25 },
				pager: {
          showPageSizeSelector: true,
  		    allowedPageSizes: [10, 25, 50, 100],
					showInfo: true,
					showNavigationButtons: true,
    		},				
				onToolbarPreparing: function(e) {
					e.toolbarOptions.items.unshift({
						location: "after",
						widget: "dxButton",
						options: {
							elementAttr: {
					      id: "botaoInserirFatura"  
			        },
							icon: "add",
							text: "Inserir Fatura",
							type: "default",
							hint: "Inserir Fatura",
							onClick: function(e) {
								insereFaturaLote()
							}
						}
					})
				},
				height: function (){ return window.innerHeight - 350 },	
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
			}).dxDataGrid("instance");
		
			function recuperarGlosa(){
				var pCodGlosa = objForm.getEditor("glosa").option("value");
				$.getJSON(urlPreparacao,{ method: "GetGlosa", pCodGlosa: pCodGlosa},function(objRetorno){
					codStatus = objRetorno.codStatus;
					objForm.getEditor("situacao").option("value",objRetorno.status);
					objFormGeral.option("formData", objRetorno.geral)
					setTimeout(function(){
						objFormGeral.getEditor("lote").option("value",objRetorno.geral.lote);
					}, 10);
					objFormGeral.getEditor("fontePagadora").option("readOnly", 1);
					objFormGeral.getEditor("lote").option("readOnly", 1);
					objFaturas.option("disabled", 0);
					if (objRetorno.codStatus > 0) {
						$("#botaoRemover").dxButton("instance").option("disabled", 0);
						$("#botaoNovaNotaFiscal").dxButton("instance").option("disabled", 0);
						$("#botaoEmitirNotaFiscal").dxButton("instance").option("disabled", 0);
					}
					if (objRetorno.codStatus == 1) {
						$("#botaoInserirFatura").dxButton("instance").option("disabled", 0);
					}else{
						$("#botaoInserirFatura").dxButton("instance").option("disabled", 1);
					}
					$("#botaoSalvar").dxButton("instance").option("disabled", 1);
					setTimeout(function(){
						dSGuias.reload();
						dSRelatorios.reload();
						dSNF.reload();
					}, 20);
				});
			}
			
			function imprimirGuia(pNumFatura){
				numFaturaPrint = pNumFatura;
				$("#divImprimir").dxPopup("show");
				dSImpressoes.reload();
			}
			
			// Abre popup para pesquisar por faturas para inserção no pré-lote
			function insereFaturaLote(){
				popupOptions = {
					width: "90%",
					height: "90%",
					showTitle: true,
					title: "Pesquisa Faturas",
					visible: true,
					dragEnabled: false,
					closeOnOutsideClick: false
				}	
				$("#openPopup").remove()
				$(document.body).append("<div id='openPopup'></div>")
				$("#openPopup").html("<div id='pesquisaPopup'></div>")
				$("#openPopup").dxPopup(popupOptions)
				preparaPesquisaFaturaLote()
			}	
			
			dSDetailInsertFaturas	= new DevExpress.data.CustomStore({
				load: function(args) {
					return $.getJSON(urlPreparacao,{ method: "FindProcedimentos", 
					pNumGlosa: objForm.getEditor("glosa").option("value"),lote: numLoteDS, fatura: numFaturaDS});
				},	
				remove: function(args) { }
			});
			
			dSInsertFaturas = new DevExpress.data.CustomStore({
				load: function(args) {
					return $.getJSON(urlPreparacao,{ method: "FindFaturaLote", 
					lote:objFormGeral.getEditor("lote").option("value") });
				},
				remove: function(args) { }
			});
			
			function preparaPesquisaFaturaLote(){
				$("#pesquisaPopup").dxDataGrid({
					columns:[
						{dataField: "Fatura", caption: "Fatura", alignment: "center", width: 200},
						{dataField: "CodigodoPaciente", caption: "Paciente"},
						{dataField: "DataHoraAdmissao", caption: "Data/Hora de Admissão", dataType: "datetime", 
						width: 230, alignment: "center"}
					],
					dataSource: dSInsertFaturas, 
					selection: { mode: "single" },
					editing: { mode: "popup", texts: { confirmDeleteMessage: "" }},
					filterRow: { visible: true },
					hoverStateEnabled: true,
					paging: { enabled: true, pageSize: 25 },
					pager: {
						showPageSizeSelector: true,
						allowedPageSizes: [10, 25, 50, 100],
						showInfo: true,
						showNavigationButtons: true,
					},				
					height: "100%",	
					showBorders: true,
					showRowLines: true,
					rowAlternationEnabled: true,
					columnFixing: { enabled: true },
					onSelectionChanged: function(selectedItems) {
						if (selectedItems.selectedRowsData.length>0){
							selectedRowIndex = selectedItems.component.getRowIndexByKey(selectedItems.selectedRowKeys[0]);
							$("#pesquisaPopup").dxDataGrid("instance").deleteRow(selectedRowIndex);
							$.getJSON(urlPreparacao,{method: "InsertFatura", 
								pNumGlosa	: objForm.getEditor("glosa").option("value"),
								pNumLote	: objFormGeral.getEditor("lote").option("value"),
								pNumFatura: selectedItems.selectedRowKeys[0].Fatura,
								pSeqProc	: ""
							}, function(resp){
								dSFaturas.reload();
								dSGuias.reload();
								dSRelatorios.reload();
								dSNF.reload();
							});
						}
					},
					masterDetail: {
						enabled: true,
						autoExpandAll: false,
						template: function(container, options) { 
							numFaturaDS = options.data.Fatura;
							numLoteDS 	= objFormGeral.getEditor("lote").option("value");
							$("<div id='grid"+numFaturaDS.split("/")[0]+numFaturaDS.split("/")[1]+"'>").dxDataGrid({
								columns:[
									{dataField: "codTISS", caption: "Cód. TISS", width: 120, alignment: "center"},
									{dataField: "procedimento", caption: "Procedimento"},
									{dataField: "qtdeProcedimento", caption: "Qtde.", width: 120, alignment: "center"},
									{dataField: "numGuia", caption: "Núm.Guia Atribuida p/ Operadora", width: 200, alignment: "center"}
								],
								editing: { mode: "popup", texts: { confirmDeleteMessage: "" }},
								dataSource: dSDetailInsertFaturas,
								selection: { mode: "single" },
								filterRow: { visible: true },
								hoverStateEnabled: true,
								height: "100%",	
								showBorders: true,
								showRowLines: true,
								rowAlternationEnabled: true,
								columnFixing: { enabled: true },
								onSelectionChanged: function(selectedItems) {
									if (selectedItems.selectedRowsData.length>0){
										numLoteDS		= selectedItems.selectedRowKeys[0].lote;
										numFaturaDS	= selectedItems.selectedRowKeys[0].fatura;
										selectedRowIndex = selectedItems.component.getRowIndexByKey(selectedItems.selectedRowKeys[0]);
										$("#grid"+numFaturaDS.split("/")[0]+numFaturaDS.split("/")[1]).dxDataGrid("instance").deleteRow(selectedRowIndex);
										$.getJSON(urlPreparacao,{method: "InsertFatura", 
											pNumGlosa	: objForm.getEditor("glosa").option("value"),
											pNumLote	: objFormGeral.getEditor("lote").option("value"),
											pNumFatura: selectedItems.selectedRowKeys[0].fatura,
											pSeqProc	: selectedItems.selectedRowKeys[0].sequencia
										}, function(resp){
											dSFaturas.reload();
											dSGuias.reload();
											dSRelatorios.reload();
											dSNF.reload();
										});
									}
								}
							}).appendTo(container);
						}
					},	
				});
			}
			
			function alterarConvenio(pFatura, pSequencia) {
				altProcFatura = pFatura;
				altProcSeq		= pSequencia;
				var pCodGlosa = objForm.getEditor("glosa").option("value");
				$.getJSON(urlPreparacao, {method: "GetConvenioAlteracao", pCodGlosa: pCodGlosa,
				pFatura: pFatura, pSequencia: pSequencia}, function(objRetorno) {
					$("#divAlterarConvenio").dxPopup("show");
					altProcAgendand = objRetorno.codAgendamento;
					dSGuiasCadAlt.reload();
					dSComponente.reload();
					dSGuias.reload();
					dSRelatorios.reload();
					dSNF.reload();
					$("#formAlterarConvenio").dxForm("instance").getEditor("procedimento").option("value", objRetorno.procedimento);
					$("#formAlterarConvenio").dxForm("instance").getEditor("solicitante").option("value", objRetorno.solicitante);
					$("#formAlterarConvenio").dxForm("instance").getEditor("convenio").option("value", objRetorno.convenio);
					$("#formAlterarConvenio").dxForm("instance").getEditor("planoSaude").option("value", objRetorno.planoSaude);
					$("#formAlterarConvenio").dxForm("instance").getEditor("carteirinha").option("value", objRetorno.carteirinha);
					$("#formAlterarConvenio").dxForm("instance").getEditor("dataVencimento").option("value", objRetorno.dtVencimento);
					$("#formAlterarConvenio").dxForm("instance").getEditor("valor").option("value", objRetorno.valor);
					$("#formAlterarConvenio").dxForm("instance").getEditor("codGuia").option("value", objRetorno.codGuia);
				});
			}

			dSAlterarProcProcedimento = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					byKey: function(args) {
						if (altProcFlagProcAgen == 1) {
							return $.getJSON(urlPreparacaoAdm,{
								method							:	"GetProcedimentoAlteracao",
								pCodProduto					: args
							});
						}else{
							return $.getJSON(urlSearch,{
								method							:	"GetINART",
								pCodProduto					: args,
								pRequerAgendamento 	: 0,
								pAlias				: 1,
								pItemPedido		: 1
							});
							
						}
					},
					load: function(args) {
						if (altProcFlagProcAgen == 1) {
							return $.getJSON(urlPreparacao,{
								method							:	"GetProcedimentoAlteracao",
								pSkip								:	args.skip,
								pTake								:	args.take,
								pSearchValue				:	args.searchValue,
								pAltProcAgeProcAnt	: altProcAgeProcAnt
							});
						}else{
							return $.getJSON(urlSearch,{
								method							:	"GetINART",
								pSkip								:	args.skip,
								pTake								:	args.take,
								pSearchValue				:	args.searchValue,
								pRequerAgendamento 	: 0,
								pAlias							: 1,
								pItemPedido					: 1
							});
						}
					}
				})
			});
			
			
			dataSourceMedicoExterno = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",   
      		load: function() {
	        	return $.getJSON(urlPreparacaoAgendamento,{method: "CarregaProfissional", pFlagExterno: "E"});
      		}
				})
			});
			
			dSPlanoSaudeAlt = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",   
					load: function() {
						var pCodConvenio = $("#formAlterarConvenio").dxForm("instance").getEditor("convenio").option("value");
						return $.getJSON(urlPreparacaoAgendamento,{
							method:	"GetPlanoSaudeCampo",
							pCodOrganizacao: pCodConvenio
						});
					}
				})
			});
			
			dSGuiasCadAlt = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					loadMode: "raw",   
					load: function(){
	        	return $.getJSON(urlPreparacaoAdm, {method: "ListGuias", pCodAgendamento: altProcAgendand});
					},
				})
			});				

			dSComponente = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					load: function(){
						var pCodGlosa = objForm.getEditor("glosa").option("value");
	        	return $.getJSON(urlPreparacao, {method: "GetComponentes", pCodGlosa: pCodGlosa,
	        	pCodAdm: altProcFatura, pSeqProc: altProcSeq});
					},
					update: function(key, values) {
						pCodGlosa = objForm.getEditor("glosa").option("value");
						pCodAdm		= altProcFatura;
						pSeqProc	= altProcSeq;
						objDados = "";
						for (var coluna in values) {
							if (values.hasOwnProperty(coluna)) {
								valor = values[coluna];
								objDados = coluna+"~"+valor;
							}
						}
						var retorno = #server(VAR.CSP.FATGlosa.SetComponentes(pCodGlosa, pCodAdm, pSeqProc, key.procedimento, objDados, YBED))#
						dSGuias.reload();
						dSRelatorios.reload();
						dSNF.reload();
					}
				})
			});				
			
			$("#divAlterarConvenio").dxPopup({
				visible: false,
				title: "Alteração de Convênio/Plano de Saúde ou Guias e Senhas de Autorização",
				width: 950,
				height: 700,
				position: { my: "center", at: "center", of: window},
				dragEnabled: true,
				onHidden: function(){
				},
				contentTemplate: function(e) {
					formAltConvenio = $("<div id='formAlterarConvenio'>").dxForm({
						readOnly: false,
						alignItemLabels: true,
						showColonAfterLabel: true,
						labelLocation: "top",
						colCount: 4,
						items: [{
							colSpan: 4,
							dataField: "procedimento",
							label: { text: "Procedimento"},
							editorType: "dxSelectBox",
							editorOptions: {
								readOnly: true,
								dataSource: new DevExpress.data.DataSource({
									store: new DevExpress.data.CustomStore({
										byKey: function(args) {
											return $.getJSON(urlSearch,{
												method							:	"GetINART",
												pCodProduto					: args,
											});
										},
										load: function(args) {
											return $.getJSON(urlSearch,{
												method							:	"GetINART",
												pSkip								:	args.skip,
												pTake								:	args.take,
												pSearchValue				:	args.searchValue,
												pAlias							: 1,
												pItemPedido		: 1
											});
										}
									})
								}),
								searchEnabled: true,
								displayExpr: "DescProduto",
								valueExpr: "CodProduto",
							}
						},{
							colSpan: 4,
							dataField: "solicitante",
							label: { text: "Solicitante"},
							editorType: "dxSelectBox",
							editorOptions: {
								dataSource: dataSourceMedicoExterno,
								valueExpr: "CodProvider", 
								displayExpr: "DescProvider", 
								searchEnabled: true,
							}
						},{
							colSpan: 2,
							itemType: "group",
							cssClass: "second-group",
							caption: "Convênio/Plano de Saude",
							colCount: 7,
							items: [{							
								colSpan: 7,
								dataField: "convenio",
								label: { text: "Convênio"},
								editorType: "dxSelectBox",
								editorOptions: {
									readOnly: true,									
									dataSource: new DevExpress.data.DataSource({
										store: new DevExpress.data.CustomStore({
											byKey: function(args) {
												return $.getJSON(urlPreparacaoOrc,{method: "GetConvenio", pCodConvenio: args});
											},
											load: function(args) {
												return $.getJSON(urlPreparacaoOrc,{
													method				:	"GetConvenio",
													pSkip					:	args.skip,
													pTake					:	args.take,
													pSearchValue	:	args.searchValue,
													pCodConvenio  : "",
													pParticular 	: 0,
													pFlagConvenio : 1,
													pConvenio 		: ""

												});
											}
										})
									}),
									displayExpr: "NomeOrganizacao",
									valueExpr: "CodOrganizacao",
									searchEnabled: true,
								}
							},{
								colSpan: 7,
								dataField: "planoSaude",
								label: { text: "Plano de Saúde"},
								editorType: "dxSelectBox",
								editorOptions: {
									readOnly: true,
									dataSource: dSPlanoSaudeAlt,
									itemTemplate: function (data, itemIndex, element) {
										if (nomePaiOrganizacaoAnt != data.nomePaiOrganizacao){
											retorno = "<br><b><i>"+data.nomePaiOrganizacao+"</i></b><br>"+data.nomeOrganizacao;
											nomePaiOrganizacaoAnt = data.nomePaiOrganizacao
										}else{
											retorno = data.nomeOrganizacao;
										}
										return element.append(retorno)
									},
									displayExpr: "nomeOrganizacao",
									valueExpr: "codOrganizacao",
									searchEnabled: true,
								}
							},{
								colSpan: 3,
								dataField: "carteirinha",
								label: { text: "Carteirinha"},
								editorType: "dxTextBox",
							},{
								colSpan: 2,
								dataField: "dataVencimento",
								label: { text: "Vencimento Carteirinha"},
								editorType: "dxDateBox",
								editorOptions: {
									type: "date",
									width: 130,
									dateSerializationFormat: "yyyy-MM-dd",
								}
							},{
								colSpan: 2,
								dataField: "valor",
								label: { text: "Valor"},
								editorType: "dxNumberBox",
								editorOptions: {
									format: "#,##0.00",
								}
							}]
						},{
							colSpan: 2,
							itemType: "group",
							cssClass: "second-group",
							caption: "Guia e Senha de Autorização",
							colCount: 3,
							items: [{
								colSpan: 2,
								dataField: "codGuia",
								label: { text:"Guia"},
								editorType: "dxSelectBox",
								editorOptions: {
									dataSource: dSGuiasCadAlt,
									onValueChanged: function(e) {
										if (e.value) {
											$.getJSON(urlPreparacaoAdm, {method: "GetGuia", pCodAgendamento: altProcAgendand, 
											pNumAdmissaoControle: "", pSequencia: e.value}, function(objRetorno) {
												$("#formAlterarConvenio").dxForm("instance").getEditor("dataAutorizacao").option({"readOnly": true, value: objRetorno.dataAutorizacao});
												$("#formAlterarConvenio").dxForm("instance").getEditor("senha").option({"readOnly": true, value: objRetorno.senha});
												$("#formAlterarConvenio").dxForm("instance").getEditor("dataValidade").option({"readOnly": true, value: objRetorno.validadeSenha});
												$("#formAlterarConvenio").dxForm("instance").getEditor("numGuiaOperadora").option({"readOnly": true, value: objRetorno.numGuia});
											});
										}else{
											$("#formAlterarConvenio").dxForm("instance").getEditor("codGuia").option("value", "");
											$("#formAlterarConvenio").dxForm("instance").getEditor("dataAutorizacao").option({"readOnly": false, value: ""});
											$("#formAlterarConvenio").dxForm("instance").getEditor("senha").option({"readOnly": false, value: ""});
											$("#formAlterarConvenio").dxForm("instance").getEditor("dataValidade").option({"readOnly": false, value: ""});
											$("#formAlterarConvenio").dxForm("instance").getEditor("numGuiaOperadora").option({"readOnly": false, value: ""});
										}
									},
									showClearButton: true,
									searchEnabled: false,
									valueExpr: "sequencia", 
									displayExpr: "descricao",
								}
							},{colSpan: 1},{
								dataField: "dataAutorizacao",
								label: { text:"Data Autorização"},
								editorType: "dxDateBox",
								editorOptions : { useMaskBehavior: true, dateSerializationFormat: "yyyy-MM-dd", }
							},{
								colSpan: 2,
								dataField: "senha",
								label: { text:"Senha"},
							},{
								dataField: "dataValidade",
								label: { text:"Data de Validade Senha"},
								editorType: "dxDateBox",
								editorOptions : { useMaskBehavior: true, dateSerializationFormat: "yyyy-MM-dd", }
							},{
								colSpan: 2,
								dataField: "numGuiaOperadora",
								label: { text:"Número da Guia Atribuída pela Operadora:"},
							}]
						},{
							colSpan: 4,
							itemType: "group",
							cssClass: "second-group",
							caption: "Componente(s)",
							items: [{
								editorType: "dxDataGrid",
								editorOptions : { 
									columns: [
										{ dataField: "desconsiderar", caption: "Desconsiderar", width: 90, alignment: "center", allowEditing: 0,
											cellTemplate: function (container, options) { 
												container.append(
													$("<div class='confAgendamento' procedimento='"+options.data.procedimento+"' seqAgendamento='"+options.data.seqAgendamento+"'/>").dxCheckBox({
															value: options.data.desconsiderar,
															onValueChanged: function(e) {
																pCodGlosa = objForm.getEditor("glosa").option("value");
																pCodAdm		= altProcFatura;
																pSeqProc	= altProcSeq;
																pCodProc	= options.data.procedimento
																if (e.value) {
																	objDados = "desconsiderar~1"
																}else{
																	objDados = "desconsiderar~0"
																}
																var retorno = #server(VAR.CSP.FATGlosa.SetComponentes(pCodGlosa, pCodAdm, pSeqProc, pCodProc, objDados, YBED))#
																dSGuias.reload();
																dSRelatorios.reload();
																dSNF.reload();
															}
														}).appendTo(container)
												);
											}
										},
										{ dataField: "procedimentoDesc", caption: "Procedimento", allowEditing: 0},
										{ dataField: "quantidade", caption: "Quantidade", dataType: "number", width: 100 },
										{ dataField: "valor", caption: "Valor", dataType: "number", width: 100, format: "R$ #,##0.00" }
									],
									editing: { mode: "cell", allowUpdating: true, useIcons: true},
									dataSource: dSComponente,
									filterRow: { visible: false },
									hoverStateEnabled: true,
									paging: { enabled: false },
									height: "200px",	
									showBorders: true,
									showRowLines: true,
									rowAlternationEnabled: true,
								}	
							}],
						},{
							colSpan: 2,
							itemType: "button", horizontalAlignment: "right", buttonOptions: {
			 					icon: "save", text: "Salvar", type: "success", stylingMode: "contained",
								onClick: function(){
									var pProcedimento		= $("#formAlterarConvenio").dxForm("instance").getEditor("procedimento").option("value");
									
									var pSolicitante 		= $("#formAlterarConvenio").dxForm("instance").getEditor("solicitante").option("value");
									
									var pNumCarteirinha	= $("#formAlterarConvenio").dxForm("instance").getEditor("carteirinha").option("value");
									var pDtCarteirinha	= $("#formAlterarConvenio").dxForm("instance").getEditor("dataVencimento").option("value");
									var pValor					= $("#formAlterarConvenio").dxForm("instance").getEditor("valor").option("value");

									var pCodGuia 					= $("#formAlterarConvenio").dxForm("instance").getEditor("codGuia").option("value");
									var pDtAutorizacao 		= $("#formAlterarConvenio").dxForm("instance").getEditor("dataAutorizacao").option("value");
									var pSenha 						= $("#formAlterarConvenio").dxForm("instance").getEditor("senha").option("value");
									var pDtValidade 			= $("#formAlterarConvenio").dxForm("instance").getEditor("dataValidade").option("value");
									var pNumGuiaOperadora = $("#formAlterarConvenio").dxForm("instance").getEditor("numGuiaOperadora").option("value");

									if ((pProcedimento == "" || pProcedimento == null) && (pSolicitante == "" || pSolicitante == null)) {
										DevExpress.ui.notify("Favor informar o Procedimento/Solicitante.","warning");
										return;
									}
									
									var pCodGlosa = objForm.getEditor("glosa").option("value");

									$.get(urlPreparacao,{method:"ArmConvenioAlteracao", pCodGlosa: pCodGlosa, 
									pCodFatura: altProcFatura, pCodAgendamento: altProcAgendand, pSequencia: altProcSeq,
									pProcedimento: pProcedimento, 
									pNumCarteirinha: pNumCarteirinha, pDtCarteirinha: pDtCarteirinha, pCodGuia: pCodGuia,
									pDtAutorizacao: pDtAutorizacao, pSenha: pSenha, pDtValidade: pDtValidade,
									pNumGuiaOperadora: pNumGuiaOperadora, pSolicitante:pSolicitante, pValor: pValor},
									function(objRetorno){
										if (objRetorno ==  1) {
											dSGuias.reload();
											dSRelatorios.reload();
											DevExpress.ui.notify("Dados Salvos com Sucesso!","success");
											dSFaturas.reload();
											dSGuias.reload();
											dSRelatorios.reload();
											dSNF.reload();
										}else {
											DevExpress.ui.notify(objRetorno,"warning");
										}
									})
            		}
							}
						},{
							colSpan: 2,
							itemType: "button", horizontalAlignment: "left", buttonOptions: {
		          	type	: "default", text: "Fechar", icon: "close",
								onClick: function(){
									$("#divAlterarConvenio").dxPopup("hide");
								}
							}
						}]
					});
					e.append(formAltConvenio);
				}        		
			});
			
			
			////Fechamento
			objFormFechamento= $("#divFechamento").dxForm({
				scrollingEnabled	: true,
				showColonAfterLabel	: false,
				alignItemLabels: true,
				height	:function() { return window.innerHeight - 150;},
				screenByWidth: function(width) { return "lg"; },
				colCount: 2,
				items	: [{
					itemType: "group",
					caption: "Guias",
					cssClass: "second-group",
					items: [{
						template: function (data, itemElement) { 
							itemElement.append("<div id='divFechamentoGuias'>")
						},
					}]
				},{
					colCount: 5,
					itemType: "group",
					caption: "Relatórios",
					cssClass: "second-group",
					alignItemLabels: true,
					items: [{
						template: function (data, itemElement) { 
							itemElement.append("<div id='divFechamentoRelatorios' style='border: 0px solid red;width:100%'></div>")
						},
					}]
				},{
					colSpan: 2,
					itemType: "group",
					caption: "Notas Fiscais",
					cssClass: "second-group",
					items: [{
						template: function (data, itemElement) { 
							itemElement.append("<div id='divFechamentoNF' style='border: 0px solid red;width:"+(window.innerWidth-65)+"px;'></div>")
						},
					}]
				}]
			}).dxForm("instance");

			dSGuias = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					load: function(args) {
						var pGlosa = objForm.getEditor("glosa").option("value");
						if (pGlosa == "" || pGlosa == null) pGlosa = "";
						return $.getJSON(urlPreparacao,{ method: "GetGuias", pGlosa: pGlosa});
					}
				})
			});
			
			$("#divFechamentoGuias").dxDataGrid({
				columns: [
					{ dataField: "situacaoGlosa", caption: "Situação Glosa" },
					{ dataField: "familiadaTISS", caption: "Família" },
					{ dataField: "quantidade", caption: "Quantidade", dataType: "number" },
					{ dataField: "valor", caption: "Valor", dataType: "number", format: "R$ #,##0.00" },
					,{
						type		: "buttons",
						width		: "40px",
						buttons: [{
						hint: "Baixar XMLs das guias",
						icon: "fas fa-download",
						onClick: function(e) {
							console.log(e)
							geraXMLGuias(e.row.data.sitGlosa)
						}
					}]
				}],
				dataSource: dSGuias,
				filterRow: { visible: false },
				hoverStateEnabled: true,
				paging: { enabled: false },
				height: "150px",	
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
			});
			
			function geraXMLGuias(pTipo){
					var pGlosa = objForm.getEditor("glosa").option("value");
					loadPanel.show()
					$.getJSON(urlPreparacao,{method	:"geraXMLGuia",pGlosa: pGlosa, pTipo: pTipo},function(retorno){
						console.log(retorno)
						loadPanel.hide()
						if (retorno.status==0){
							DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
							return
						}
						var link=document.createElement('a');
						var filePath = retorno.arquivo
						link.href = filePath;
						link.download = filePath.substr(filePath.lastIndexOf('/') + 1);
						link.click();
					});
			}
			
			dSRelatorios = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					load: function(args) {
						var pGlosa = objForm.getEditor("glosa").option("value");
						if (pGlosa == "" || pGlosa == null) return [];
						return $.getJSON(urlPreparacao,{ method:"GetRelatorios", pGlosa: pGlosa },function(rs){console.log(rs)})
					}
				})
			});
			
			$("#divFechamentoRelatorios").dxDataGrid({
				columns: [{
					dataField: "modelo", caption: "Modelo", minWidth: ((window.innerWidth/2)-150)
				},{
					type: "buttons",
					buttons: [{
						hint: "Visualizar",
						icon: "fas fa-eye",
						onClick: function(e) {
							$("#divPrintRelatorio").dxPopup("instance").option("title", "Relatório: Modelo "+e.row.data.modelo)
							$("#divPrintRelatorio").dxPopup("show");
							$("#ifrPrintRelatorioConteudo").attr("src", "FATExtratoFaturamento.csp?YFORM="+e.row.data.modelo+
							"&YBED=#(YBED)#&YUSER=#(YUSER)#&YM=0&YLOCATION=#(YLOCATION)#&pDataInicial="+e.row.data.dataInicial+
							"&pDataFinal="+e.row.data.dataFinal+"&pNumLote="+e.row.data.lote+"");
						}
					}]
				}],
				dataSource: dSRelatorios,
				filterRow: { visible: false },
				hoverStateEnabled: true,
				paging: { enabled: false },
				height: function (){
					return "150px"
				},	
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
			});

			$("#divPrintRelatorio").dxPopup({
				visible: false,
				title: "Relatório",
				width: 1000,
				height:  800,
				position: {
					my: "center", 
					at: "center",
					of: window
				},
				dragEnabled: true,
				contentTemplate: function(e) {
					conteudo = $("<iframe id='ifrPrintRelatorioConteudo' width='980' height='748'></iframe>")
					e.append(conteudo);
				}
			});
			
			dSNF = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					load: function(args) {
						var pGlosa = objForm.getEditor("glosa").option("value");
						if (pGlosa == "" || pGlosa == null) return [];
						return $.getJSON(urlPreparacaoLote,{method:"recNotasFiscais", lote: pGlosa});
					}
				})
			}),
			
			$("#divFechamentoNF").dxDataGrid({
				columns: [{
					dataField	:"NumerodaNotaFiscal",
					caption		:"Nota Fiscal",
					dataType	: "number",
					format		: "000000000",
					alignment	: "center",
					width			: "80px"
				},{
					dataField	: "DatadeEmissao",
					caption		: "Data Emissão",
					dataType	: "datetime",
					alignment	: "center",
					width			: "100px"
				},{
					dataField	: "DatadeVencimento",
					caption		: "Data Vencimento",
					dataType	: "date",
					alignment	: "center",
					width			: "100px"
				},{
					dataField	: "RPS",
					caption		: "RPS",
					dataType	: "number",
					format		: "000000000",
					alignment	: "center",
					width			: "80px"
				},{
					dataField	: "SeriedoRPS",
					caption		: "Série",
					dataType	: "number",
					format		: "000",
					alignment	: "center",
					width			: "50px"
				},{
					dataField	: "DatadeEmissaoProvisoria",
					caption		: "Emissão Provisória",
					dataType	: "date",
					alignment	: "center"
				},{
					dataField	: "TipodeNotaFiscal",
					caption		: "Tipo de NF",
					alignment	: "center",
					width			: "100px"
				},{
					dataField	: "FontePagadora",
					caption		: "Fonte Pagadora",
					width			: "150px"
				},{
					dataField	: "ValorTotaldaNF",
					caption		: "Valor",
					dataType	: "number",
					format		: "R$ #,##0.00",
					width			: "120px"
				},{
					dataField	: "ModelodaNotaFiscal",
					caption		: "Modelo de Nota Fiscal",
					minWidth	: "150px"
				},{
					dataField	: "StatusdaNotaFiscal",
					caption		: "Situação",
					width		: "210px",
				},{
					type		: "buttons",
					buttons: [/*{
						hint: "Editar",
						icon: "fas fa-edit",
						visible: function(e) {
							if (e.row.data.CodStatusdaNotaFiscal>2) return false
							return true
						},
						onClick: function(e) {
							insereNotaFiscal(e.row.data.codigoNota)
						}
					}*/,{
						hint: "Emissão manual da Nota Fiscal",
						icon: "far fa-file-alt",
						visible: function(e) {
							if (e.row.data.CodStatusdaNotaFiscal>2) return false
							return true
						},
						onClick: function(e) {
							emissaoManual(e.row.data.codigoNota)
							return
							var clonedItem = $.extend({}, e.row.data, { ID: ++maxID });

							employees.splice(e.row.rowIndex, 0, clonedItem);
							e.component.refresh(true);
							e.event.preventDefault();
						}
					},{
						hint: "Excluir Nota Fiscal",
						icon: "fas fa-trash",
						visible: function(e) {
							if (e.row.data.CodStatusdaNotaFiscal>2) return false
							return true
						},
						onClick: function(e) {
							var result = DevExpress.ui.dialog.confirm("Confirma e exclusão da linha?", "Excluir linha");
							result.done(function(dialogResult) {
								if (!dialogResult){
									return
								}
								loadPanel.show()
								$.getJSON(urlPreparacaoLote,{
									method		:"removeNotaFiscal",
									codigoNota	: e.row.data.codigoNota,
								},function(retorno){
									if (retorno.status==0){
										DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
									}
									$("#divFechamentoNF").dxDataGrid("instance").getDataSource().reload()
									loadPanel.hide()
								})

							})
						}
					},{
						hint: "Cancelar Nota Fiscal",
						icon: "fas fa-ban",
						visible: function(e) {
							if (e.row.data.CodStatusdaNotaFiscal>2) return true
							return false
						},
						onClick: function(e) {
							var result = DevExpress.ui.dialog.confirm("Confirma o cancelamento da nota fiscal "+e.row.data.NumerodaNotaFiscal+"?", "Cancelar Nota Fiscal");
							result.done(function(dialogResult) {
							if (!dialogResult){
								return
							}
							loadPanel.show()
							$.getJSON(urlPreparacaoLote,{
								method		:"cancelaNotaFiscal",
								codigoNota	: e.row.data.codigoNota,
							},function(retorno){
								if (retorno.status==0){
									DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
								}
								$("#divFechamentoNF").dxDataGrid("instance").getDataSource().reload()
								loadPanel.hide()
							})

						})
					}
				}]						
			}],
			dataSource: dSNF,
			filterRow: { visible: false },
			hoverStateEnabled: true,
			paging: { enabled: false },
			height: function (){
				return window.innerHeight - 435;
			},	
			showBorders: true,
			showRowLines: true,
			rowAlternationEnabled: true,
			selection : {
				allowSelectAll	: true,
				mode			:"multiple",
			},
			onToolbarPreparing: function(e) {
				e.toolbarOptions.items.unshift({
					location: "after",
					widget: "dxButton",
					options: {		
						elementAttr: {
					  	id: "botaoEmitirNotaFiscal"  
			      },			
			      disabled: true,
						hint: "Emitir Nota Fiscal",
						text: "Emitir Nota Fiscal",
						type: "default",
						icon: "fas fa-file-invoice-dollar",
						onClick: function(e) {
							selecao = $("#divFechamentoNF").dxDataGrid("instance").getSelectedRowsData()
							var pendentes = []
							for (var i=0;i<selecao.length;i++){
								if (selecao[i].CodStatusdaNotaFiscal>2){
									continue
								}
								pendentes.push(selecao[i].codigoNota)
							}
							if (pendentes.length==0){
								DevExpress.ui.notify("Favor selecionar uma linha pendente de emissão/resposta", "warning", 4000);
								return
							}
							emiteNotaFiscal(pendentes)
						}
					}
				},{
					location: "after",
					widget: "dxButton",
					options: {
						elementAttr: {
					  	id: "botaoNovaNotaFiscal"  
			      },
			      disabled: true,					
						icon: "add",
						text: "Nova Nota Fiscal",
						type: "default",
						hint: "Inserir nova nota fiscal",
						onClick: function(e) {
							insereNotaFiscal("")
						}
					}
				})
			},					
		});
		
		function emiteNotaFiscal(pendentes){
			popupOptions = {
				width: "350px",
				height: "300px",
				showTitle: true,
				title: "Emissão de Nota Fiscal",
				visible: true,
				dragEnabled: false,
				closeOnOutsideClick: false,
				onHiding	: function(){
					$("#divFechamentoNF").dxDataGrid("instance").getDataSource().reload()
					$("#divFechamentoNF").dxDataGrid("instance").clearSelection()
				},
				toolbarItems: [{
					widget: "dxButton",
					location:"before",
					toolbar:"bottom",
					options: { 
						width	: "130px",
						type	: "default",
						icon	: "close",
						text	: "Fechar", 
						onClick : function(){
							$("#openPopup").dxPopup("hide")
						}
					}
				},{
					widget: "dxButton",
					location:"after",
					toolbar:"bottom",
					options: { 
						visible	: true,
						width	: "130px",
						type	: "success",
						icon	: "save",
						text	: "Confirmar", 
						onClick : function(){
							var formNota	= $("#pesquisaPopup").dxForm("instance")
							if (!formNota.validate().isValid){
								DevExpress.ui.notify("Há campos pendentes de preenchimento", "warning", 4000);
								return
							}
							var pGlosa = objForm.getEditor("glosa").option("value");
							$.post(urlPreparacao,{
								method	: "importaRespostaNF",
								pGlosa	: pGlosa,
								notas	: JSON.stringify($("#pesquisaPopup").dxForm("instance").option("formData").notas),
							},function(retorno){
								DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
								if (retorno.status==1){
									$("#divFechamentoNF").dxDataGrid("instance").getDataSource().reload()
									$("#openPopup").dxPopup("hide")
								}
							},"json")
						}
					}
				}]			        
			}	
			$("#openPopup").remove()
			$(document.body).append("<div id='openPopup'></div>")
			$("#openPopup").html("<div id='pesquisaPopup'></div>")
			$("#openPopup").dxPopup(popupOptions)
			$.post(urlPreparacaoLote,{
				method	: "emiteNotaFiscal",
				notas		: JSON.stringify(pendentes)
			},function(retorno){
				console.log(retorno)
				if (retorno.status==0){
					DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
					$("#openPopup").hide()
					return
				}
				$("#pesquisaPopup").dxForm({
					scrollingEnabled	: true,
					activeStateEnabled	: true,
					formData	: {
						notas	: pendentes
					},
					minColWidth	: 50,
					screenByWidth: function (width) {
						return "lg";
					},
					alignItemLabels: true,
					alignItemLabelsInAllGroups: true,
					items: [{
						itemType	: "group",
						items		: [{
							template : "<a href=# onclick=geraArquivo()><center>Download do arquivo gerado<center></a>"
						},{
							dataField	: "resposta",
							label		: {
								alignment: "right",
								text	: "Arquivo de Resposta"
							},
							editorType	: "dxFileUploader",
							validationRules: [{ type: "required" }],
								editorOptions : {
								selectButtonText: "Selecione o arquivo de resposta",
								labelText: "",
								accept: "",
								uploadMode: "instantly",
								uploadHeaders: {
									id_key: $.ajaxSetup().headers.id_key
								},
								uploadUrl: urlPreparacaoLote+"?method=uploadArquivoResposta",
								onUploaded: function(e) {
									$.getJSON(urlPreparacaoLote,{
										method		: "verificarArquivo"
									},function(retorno){
										if (retorno.mensagem){
											$("#pesquisaPopup").dxForm("instance").updateData("resposta","")
											DevExpress.ui.notify(retorno.mensagem, "warning", 4000);
										}
									})
								}			        
							}
						}]
					}]
				})
			})
		}
				
		
		function insereNotaFiscal(codigo){
			popupOptions = {
				width: "90%",
				height: "90%",
				showTitle: true,
				title: "Insere Nota Fiscal",
				visible: true,
				dragEnabled: false,
				closeOnOutsideClick: false,
				onHiding	: function(){
					$("#divFechamentoNF").dxDataGrid("instance").clearSelection()
				},
				toolbarItems: [{
					widget: "dxButton",
					location:"before",
					toolbar:"bottom",
					options: { 
						width	: "130px",
						type	: "default",
						icon	: "close",
						text	: "Fechar", 
						onClick : function(){
							$("#openPopup").dxPopup("hide")
						}
					}
				},{
					widget: "dxButton",
					location:"after",
					toolbar:"bottom",
					options: { 
						visible	: true,
						width	: "130px",
						type	: "success",
						icon	: "save",
						text	: "Salvar", 
						onClick : function(){
							var formNota	= $("#pesquisaPopup").dxForm("instance")
							if (!formNota.validate().isValid){
								DevExpress.ui.notify("Há campos pendentes de preenchimento", "warning", 4000);
								return
							}
							var pGlosa = objForm.getEditor("glosa").option("value");
							$.post(urlPreparacao,{method: "salvaNotaFiscal", pGlosa: pGlosa, 
							dados	: JSON.stringify(formNota.option("formData"))},function(retorno){
								DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
								if (retorno.status==1){
									$("#divFechamentoNF").dxDataGrid("instance").getDataSource().reload()
									$("#openPopup").dxPopup("hide")
								}
							},"json")
						}
					}
				}]			        
			}	
			$("#openPopup").remove()
			$(document.body).append("<div id='openPopup'></div>")
			$("#openPopup").html("<div id='pesquisaPopup'></div>")
			$("#openPopup").dxPopup(popupOptions)
			preparaFormNotaFiscal(codigo)
		}	
		
		function preparaFormNotaFiscal(codigo){
			var pGlosa = objForm.getEditor("glosa").option("value");
			$.getJSON(urlPreparacao,{method: "recPadraoNotaFiscal", pCodGlosa: pGlosa, pCodigo: codigo},function(retorno){
				console.log(retorno)
				if (retorno.status==0){
					DevExpress.ui.notify(retorno.mensagem, "warning", 4000);
					$("#openPopup").hide()
					return
				}
				$("#pesquisaPopup").dxForm({
					scrollingEnabled	: true,
					activeStateEnabled	: true,
					formData	: retorno.formData,
					minColWidth	: 50,
					screenByWidth: function (width) {
						return "lg";
					},
					alignItemLabels: true,
					alignItemLabelsInAllGroups: true,
					onContentReady	: function(e){
						if (retorno.formData.discriminacao){
							e.component.updateData("discriminacaoSaida","")	
						}
					},
					onInitialized: function(e){
						setTimeout(function(){ 
							e.component.beginUpdate()
							e.component.itemOption("priGrupo.valorTotal","visible",false)
							e.component.itemOption("priGrupo.emptyValor","colSpan",6)
							e.component.itemOption("priGrupo.emptyValor","visible",true)
							e.component.itemOption("priGrupo.impostos","visible",false)
							e.component.endUpdate()
						},50);
					},
					onFieldDataChanged: function(e){
						if (e.value==undefined) return
						if (e.dataField=="valorTotal"||e.dataField=="modelo"){
							return $.getJSON(urlPreparacaoLote,{
								method	: "calculaTributos",
								modelo	: e.component.option("formData").modelo,
								valor	: e.component.option("formData").valorTotal
							},function(retorno){
								e.component.getEditor("impostos").getDataSource().reload()
							})
						}
						if (e.dataField=="tipo"){
							if (e.value==1){
								if (e.component.itemOption("priGrupo.valorTotal").visible){
									e.component.beginUpdate()
									e.component.itemOption("priGrupo.valorTotal","visible",false)
									e.component.itemOption("priGrupo.emptyValor","colSpan",6)
									e.component.itemOption("priGrupo.emptyValor","visible",true)
									e.component.itemOption("priGrupo.impostos","visible",false)
									e.component.endUpdate()
								}
							}else{
								if (!e.component.itemOption("priGrupo.valorTotal").visible){
									e.component.beginUpdate()
									e.component.itemOption("priGrupo.valorTotal","visible",true)
									e.component.itemOption("priGrupo.emptyValor","colSpan",12)
									e.component.itemOption("priGrupo.emptyValor","visible",false)
									e.component.itemOption("priGrupo.impostos","visible",true)
									e.component.endUpdate()
								}
							}
						}
						if (e.dataField=="discriminacao"||e.dataField=="dataVencimento"){
							e.component.updateData("discriminacaoSaida","")	
						}
					},
					items: [{
						cssClass	: "first-group",
						itemType	: "group",
						name		: "priGrupo",
						colCount	: 12,
						items: [{
							cssClass	: "first-group",
							colSpan	 : 7,
							dataField: "tipo",
							label		: {
								alignment: "right",
								text	: "Tipo"
							},
							validationRules: [{ type: "required" }],
							editorType	: "dxSelectBox",
							editorOptions: {
								dataSource:  new DevExpress.data.CustomStore({
									loadMode: "raw",
									load: function(args) {
										return $.getJSON(urlPreparacaoLote,{
											method	: "getINPARA",
											chave	: "FATTIPONOTAFISCAL"
										})
									}
								}),
								valueExpr: "codigo", 
								displayExpr: "descricao",
							}				            
						},{
							itemType : "empty",
							colSpan	 : 5,
						},{
							cssClass	: "first-group",
							colSpan	 : 7,
							dataField: "modelo",
							validationRules: [{ type: "required" }],
							label		: {
								alignment: "right",
								text	: "Modelo de Nota Fiscal"
							},
							editorType	: "dxSelectBox",
							editorOptions: {
								dataSource:  new DevExpress.data.CustomStore({
									loadMode: "raw",
									load: function(args) {
										return $.getJSON(urlPreparacaoLote,{
											method	: "listModeloNotaFiscal"
										})
									}
								}),
								valueExpr: "codigo", 
								displayExpr: "descricao",
								onValueChanged: function(e){
									$.getJSON(urlPreparacaoLote,{
										method	: "recModeloNotaFiscal",
										codigo	: e.value
									},function(retorno){
										if (retorno.status==0){
											DevExpress.ui.notify(retorno.mensagem, "warning", 4000);
											$("#pesquisaPopup").dxForm("instance").updateData("modelo","")
											return
										}
										$("#pesquisaPopup").dxForm("instance").updateData("discriminacao",retorno.formData.discriminacao)
									})
								}
							}				            
						},{
							itemType : "empty",
							colSpan	 : 5
						},{
							cssClass	: "first-group",
							colSpan	 : 7,
							dataField: "fontePagadora",
							validationRules: [{ type: "required" }],
							label		: {
								alignment: "right",
								text	: "Fonte Pagadora"
							},
							editorType	: "dxSelectBox",
							editorOptions: {
								dataSource:  new DevExpress.data.CustomStore({
									loadMode: "raw",
									load: function(args) {
										return $.getJSON(urlPreparacaoLote,{
											method	: "getFontePagadora",
										})
									}
								}),
								valueExpr: "codigo", 
								displayExpr: "descricao",
								searchEnabled: true,
							},
						},{
							itemType : "empty",
							colSpan	 : 5,
						},{
							cssClass	: "first-group",
							colSpan	 : 6,
							dataField: "dataEmissao",
							validationRules: [{ type: "required" }],
							label		: {
								alignment: "right",
								text	: "Data de Emissão Provisória"
							},
							editorType	: "dxDateBox",
						},{
							cssClass	: "first-group",
							colSpan	 : 6,
							dataField: "dataVencimento",
							validationRules: [{ type: "required" }],
							label		: {
								alignment: "right",
								text	: "Data do Vencimento"
							},
							editorType	: "dxDateBox",
						},{
							cssClass	: "first-group",
							colSpan	 : 6,
							dataField: "valorTotal",
							label		: {
								alignment: "right",
								text	: "Valor Total da NF (R$)"
							},
							editorType	: "dxNumberBox",
							editorOptions	: {
								min		: 0,
								format	: "#,##0.00"
							}
						},{
							cssClass	: "first-group",
							colSpan	 : 6,
							dataField: "valorDeducoes",
							label		: {
								alignment: "right",
								text	: "Valor Total das Deduções (R$)"
							},
							editorType	: "dxNumberBox",
							editorOptions	: {
								min		: 0,
								format	: "#,##0.00"
							},
						},{
							itemType : "empty",
							name	 : "emptyValor",
							colSpan	 : 12
						},{
							cssClass	: "first-group",
							name	 : "impostos",
							colSpan	 : 12,
							label		: {
								alignment: "right",
								text	: "Impostos"
							},
							editorType : "dxDataGrid",
							editorOptions : {
								columns: [{
									dataField	:"tributo",
									caption		:"Tributo",
									visible		: false,
									formItem	: {
										colSpan		: 2,
										label		: {
											alignment: "right",
											text	: "Tributo"
										},						
										validationRules: [{ type: "required" }],
										editorType: "dxSelectBox",
										editorOptions: {
											valueExpr: "codigo", 
											displayExpr: "descricao",
											dataSource	: new DevExpress.data.DataSource({	
												store: new DevExpress.data.CustomStore({
													loadMode: "raw",
													load: function(args) {
												    return $.getJSON(urlPreparacaoLote,{
													  	method	:"listTributos"
													  });
												  }
												})
											})											                        
										}											
									}
								},{
									dataField	:"tributoNome",
									caption		:"Nome Tributo",
									formItem	: {
										visible	: false
									}
								},{
									dataField	: "aliquota",
									caption		: "Alíquota",
									dataType	: "number",
									format		: "#,##0.00",
									setCellValue: function(newData, value, currentRowData) {
										if (currentRowData.aliquota==value) return
										baseCalculo = currentRowData.baseCalculo
										newData.aliquota = value
										if (baseCalculo==undefined) return
										newData.valor = baseCalculo * value /100;
									},	
									formItem	: {
										validationRules: [{ type: "required" }],        
										label		: {
											alignment: "right",
											text	: "Alíquota"
										},						                        
										editorType: "dxNumberBox",
										editorOptions: {
											  min	: 0,
											  max : 100,
											  format : "##0.00"
										}
									}
								},{
									dataField	: "baseCalculo",
									caption		: "Base de Cálculo",
									dataType	: "number",
									format		: "#,##0.00",
									setCellValue: function(newData, value, currentRowData) {
										if (currentRowData.baseCalculo==value) return
										newData.baseCalculo = value
										//
										aliquota = currentRowData.aliquota
										if (aliquota==undefined) return
										newData.valor = value * aliquota /100;
									},	
									formItem	: {
										validationRules: [{ type: "required" }],        
										label		: {
											alignment: "right",
											text	: "Base de Cálculo"
										},						                        
										editorType: "dxNumberBox",
										editorOptions: {
										  min	: 0,
										  format : "#,##0.00"
										}
									}
								},{
									dataField	: "valor",
									caption		: "Valor",
									dataType	: "number",
									format		: "#,##0.00",
									allowEditing : false,

									formItem	: {
										label		: {
											alignment: "right",
											text	: "Valor do Tributo"
										},
										editorType: "dxNumberBox",
										editorOptions: {
											min			: 0,
											format 		: "#,##0.00"
										}
									}
								},{
									dataField	: "retidoFonte",
									caption		: "Retido na Fonte",
									dataType	: "boolean",
									formItem	: {
										editorType: "dxNumberBox",
										label		: {
											alignment: "right",
											text	: "Retido na Fonte?",
											showColon: false
										},
										editorType	: "dxSwitch",
										editorOptions : {
											switchedOnText:"Sim",
											switchedOffText:"Não",
										}
									}
								}],
								dataSource:  new DevExpress.data.CustomStore({
									insert : function(args){
										$.post(urlPreparacaoLote,{
											method	:"salvaImpostoNota",
											dados	: JSON.stringify(args)
										},"json")
									},
									remove : function(args){
										$.getJSON(urlPreparacaoLote,{
											method	:"removeImpostoNota",
											codigo	: args.tributo
										})
									},					            		
									update : function(argsOld,argsNew){
										var args = argsOld
										if (argsNew.tributo!=undefined) {
											args.tributo = argsNew.tributo
											args.tributoOld = argsOld.tributo
										}
										if (argsNew.aliquota!=undefined) {
											args.aliquota = argsNew.aliquota
										}
										if (argsNew.baseCalculo!=undefined) {
											args.baseCalculo = argsNew.baseCalculo
										}
										if (argsNew.valor!=undefined) {
											args.valor = argsNew.valor
										}
										if (argsNew.retidoFonte!=undefined) {
											args.retidoFonte = argsNew.retidoFonte
										}
										$.post(urlPreparacaoLote,{
											method	:"salvaImpostoNota",
											dados	: JSON.stringify(args)
										},"json")
									},
									load: function(args) {
										return $.getJSON(urlPreparacaoLote,{
											method	:"recImpostoNota"
										})
									}
								}),
								filterRow: { visible: false },
								hoverStateEnabled: true,
								paging: { enabled: false },
								height: function (){
									return "120px"
								},	
								editing: {
									mode: "popup",
									allowDeleting: true,
									allowUpdating: true,
									allowAdding: true,
									useIcons: true,
									popup: {
										title: "Tributos",
										width	: "600px",
										height	: "250px",
										showTitle: true,
									}
								},
								showBorders: true,
								showRowLines: true,
								rowAlternationEnabled: true,
							}
						},{
							cssClass	: "first-group",
							colSpan	 	: 6,
							dataField	:	"discriminacao",
							label		: {
								alignment: "right",
								text	: "Discriminação dos Serviços"
							},
							editorType : "dxTextArea",
							editorOptions: {
								height	: "150px"
							}
						},{
							cssClass	: "first-group",
							colSpan	 	: 6,
							dataField	:	"discriminacaoSaida",
							label		: {
								visible	: false
							},
							editorType : "dxTextArea",
							editorOptions: {
								readOnly	: true,
								height		: "150px"
							}
						}]
					}]
				})
			})
		}		
		
		function emissaoManual(codigo){
			popupOptions = {
				width: "350px",
				height: "300px",
				showTitle: true,
				title: "Emissão Manual de Nota Fiscal",
				visible: true,
				dragEnabled: false,
				closeOnOutsideClick: false,
				onHiding	: function(){
					$("#divFechamentoNF").dxDataGrid("instance").getDataSource().reload()
				},
				toolbarItems: [{
					widget: "dxButton",
					location:"before",
					toolbar:"bottom",
					options: { 
						width	: "130px",
						type	: "default",
						icon	: "close",
						text	: "Fechar", 
						onClick : function(){
							$("#openPopup").dxPopup("hide")
						}
					}
				},{
					widget: "dxButton",
					location:"after",
					toolbar:"bottom",
					options: { 
						visible	: true,
						width	: "130px",
						type	: "success",
						icon	: "save",
						text	: "Confirmar", 
						onClick : function(){
							var formNota	= $("#pesquisaPopup").dxForm("instance")
							if (!formNota.validate().isValid){
								DevExpress.ui.notify("Há campos pendentes de preenchimento", "warning", 4000);
								return
							}
							$.post(urlPreparacaoLote,{
							  	method	: "salvaEmissaoManual",
							  	dados	: JSON.stringify(formNota.option("formData"))
							},function(retorno){
								DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
								if (retorno.status==1){
									$("#divFechamentoNF").dxDataGrid("instance").getDataSource().reload()
									$("#openPopup").dxPopup("hide")
								}
							},"json")
						}
					}
				}]			        

			}	
			$("#openPopup").remove()
			$(document.body).append("<div id='openPopup'></div>")
			$("#openPopup").html("<div id='pesquisaPopup'></div>")
			$("#openPopup").dxPopup(popupOptions)
			$.getJSON(urlPreparacaoLote,{
				method		: "recRPS",
				codigoNota	: codigo
			},function(retorno){
				if (retorno.status==0){
					DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
					$("#openPopup").hide()
					return
				}

				$("#pesquisaPopup").dxForm({
					scrollingEnabled	: true,
					activeStateEnabled	: true,
					minColWidth	: 50,
					formData	: retorno.formData,
					screenByWidth: function (width) {
						return "lg";
					},
					alignItemLabels: true,
					alignItemLabelsInAllGroups: true,
					items: [{
						cssClass	: "second-group",
						itemType	: "group",
						caption		: "Informações",
						items		: [{
							dataField	: "rps",
							label		: {
								alignment: "right",
								text	: "RPS"
							},
							editorOptions: {
								readOnly	: true
							}
						},{
							dataField	: "serie",
							label		: {
								alignment: "right",
								text	: "Série"
							},
							editorOptions: {
								readOnly	: true
							}
						}]
					},{
						itemType	: "group",
						items		: [{
							dataField	: "NFe",
							validationRules: [{ type: "required" }],        
							label		: {
								alignment: "right",
								text	: "NF-e"
							},
						},{
							dataField	: "codigo",
							validationRules: [{ type: "required" }],        
							label		: {
								alignment: "right",
								text	: "Código de Verificação"
							},
						}]
					}]
				})
			})
		}		
					
	</script>
	</body>
</html>
