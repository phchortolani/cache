<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="pt-br">
	<script language="Cache" runat="server">
		do ^WWWVAR

		set YUSER 		= $get(%request.Data("YUSER", 1))
		set YBED 		= $get(%request.Data("YBED", 1))
		set YM 			= $get(%request.Data("YM", 1))
		set YLOCATION	= $get(%request.Data("YLOCATION", 1))

		set PortCache 	= $get(%request.CgiEnvs("SERVER_PORT"))
		set PageURL 	= $get(%request.CgiEnvs("CACHE_URL"))
		set PageName 	= %request.PageName
		set app 		= %request.Application
		set host 		= %request.CgiEnvs("HTTP_HOST")
		set url			= "http://"_host_app
		;
		set param="EP=1&YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&YLOCATION="_YLOCATION
		set paramEncrypt = $piece(##class(COM.fwk.ui.csp.CSPUtil).encrypt(param),"id_key=",2)
		
		set URLPreparacao	= "VAR.CSP.FATAcordoComercial.cls"
		set URLRegraComercial	= "VAR.CSP.FATRegraComercial.cls"
		set URLLogin 		= "COMLogin.cls"

		//Verifica se a sessão
		set status = $$VerifySession^VARCSPUtils(YBED, YUSER, url)
	</script>

	<head>

		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">

		<!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
		<title>Cadastro de Acordos Comerciais</title>

		<!-- Bootstrap CSS -->
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/bootstrap/css/bootstrap.min.css">
		<!-- Font Awesome -->
		<link href=" #(YGIF)#global/plugins/fontawesome/5.4.1/css/all.css" rel="stylesheet" type="text/css">

		<!-- Custom Elements -->
		<link href=" #(YGIF)#global/css/components-rounded.css" rel="stylesheet" id="style_components" type="text/css" />
		<link href=" #(YGIF)#global/css/plugins.css" rel="stylesheet" type="text/css" />
		<link href=" #(YGIF)#global/css/layout.css" rel="stylesheet" type="text/css" />
		<link href=" #(YGIF)#global/css/themes/light.css" rel="stylesheet" type="text/css" id="style_color" />
		<link href=" #(YGIF)#global/css/custom.min.css" rel="stylesheet" type="text/css" />

		<!-- Fonts Padrão IPP -->
		<link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Open+Sans:400,600,700,800">

		<!-- DevExtreme themes -->
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme20.2.4/Lib/css/dx.common.css" />
		<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme20.2.4/Lib/css/dx.light.compact.css" />

	    <link rel="stylesheet" type="text/css" href=" #(YGIF)#global/themes/css/alphalincv2.css" id="style_color" />

	</head>
	<style>
	.semBordas{
		padding-left:0px!important;
		padding-right:0px!important;
		margin-left:10px!important;
		margin-right:0px!important;
	}
	.dx-layout-manager .dx-label-h-align .dx-field-item-content .dx-checkbox, .dx-layout-manager .dx-label-h-align .dx-field-item-content .dx-switch{
		margin:0px;
	}
	.selected-container {
	    padding: 20px;
	    margin-left: 20px;
	    background-color: rgba(191, 191, 191, 0.15);
	    font-size: 115%;
	    font-weight: bold;
	}
	</style>
	<script type="text/javascript">

		var alterado = 0;
		var carregarDados = 1;
		var codRegraGlobal = "";
		var flVoltaCodigo = 0;
		
		var xTabela = "";
		
		var status = '#(status)#';
		var URLLogin = '#(URLLogin)#';
		var ygif = '#(YGIF)#'
		if (status == 0) {
			alert('Usuário não está logado ou a sessão expirou.')
			window.location.replace(URLLogin)
		}

	</script>

	<body>
		<div id="toolbar"></div>
		<div id="divForm"></div>
		<div id="loadpanel"></div>
		<div id="popover"></div>
		
		<!-- REQUIRED JS SCRIPTS -->
		<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
		<script src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/jquery.min.js"></script>

		<!-- JSZip library --> 
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/jszip.min.js"></script>

		<!-- A DevExtreme library -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/dx.all.js"></script>

		<!-- DevExtreme-Intl module -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/localization/dx.messages.pt.js"></script>

		<!-- Include all compiled plugins (below), or include individual files as needed -->
		<script src=" #(YGIF)#global/plugins/bootstrap-3.3.7/js/bootstrap.min.js"></script>

		<!-- Tag para implantação da funcionalidade de importação de Arquivos --> 
		<VARImportacaoArquivo>

		<!--Definições globais e criação de funcionalidades encapsuladas-->
		<script type="text/javascript">
			//Deixando variáveis disponíveis no cliente
			var urlPreparacao	= '#(URLPreparacao)#';
			var urlRegraComercial = '#(URLRegraComercial)#'
			var paramEncrypt 	= '#(paramEncrypt)#';
			var YBED			= '#(YBED)#'
			var fIni = 0;
			var categoriaFilter	= ""
			$.ajaxSetup({
			  headers : {   
			    'id_key' : '#(paramEncrypt)#'
			  }
			});

			DevExpress.localization.locale("pt");

			$(document)
				.ajaxError(function(jqxhr, textStatus, error) {
					var err = textStatus.status + ", " + textStatus.statusText;
		    		DevExpress.ui.notify("Problema no acesso à internet. Favor verificar (code: "+err+")", "error", 4000);
					loadPanel.hide();
				});	        
			
			setInterval(function () { verificaConexao(); }, 30000);


	        $(document).ready(function () {
		        carregaDataSources()
	        	montaTela()
	        	resizeMe()
	        	carregaAcordo("")
	        })
			$(window).resize(function() {
			  resizeMe()
			});	       
			
			function exibeHelp(e){
				texto = e.component.option("ajuda")
				$("#popover").dxPopover({
			        target: e.event.target,
			        contentTemplate: function(){
				        return $("<span style='font-size:12px;'>").append(texto)
			        }
			    });
	        	$("#popover").dxPopover("show");
			}
			
		  	function verificaConexao(){
		  		$.getJSON(urlPreparacao,{
			  		method:"validaSessao"
			  	},function(resp){
			        if (resp.status == 0) {
			            alert(resp.mensagem)
			            window.location.replace(URLLogin)
			        }
			  	})
		  	}
			
			function resizeMe(){
				$("#divForm").dxForm("instance").option("height",window.innerHeight - 60)
				var tamanhoAbas = window.innerHeight - 140
				if (tamanhoAbas<200) tamanhoAbas = 200
				$("#divGeral").dxForm("instance").option("height",tamanhoAbas)
				$("#divClientes").dxForm("instance").option("height",tamanhoAbas)
				$("#divTabela").dxForm("instance").option("height",tamanhoAbas)
				$("#divOrcar").dxForm("instance").option("height",tamanhoAbas)
				if ($("#divRegras").hasClass("dx-form")) {
					$("#divRegras").dxForm("instance").option("height",tamanhoAbas)
				}
				$("#divControle").dxForm("instance").option("height",tamanhoAbas)
				//
				var tamanhoTabela = window.innerHeight - 220
				$("#tabelaComercialTView").dxTreeView("instance").option("height",tamanhoTabela+60)
				$("#tabelaComercialList").dxList("instance").option("height",tamanhoTabela)
				$("#clienteComercialTView").dxTreeView("instance").option("height",tamanhoTabela+60)
				$("#clienteComercialList").dxList("instance").option("height",tamanhoTabela)
				var tamanhoAbasRegras = tamanhoAbas-125
				$(".abasRegrasComerciais").each(function(){
					var id="#"+$(this).attr("id")
					if ($(id).hasClass("dx-form")) {
						$(id).dxForm("instance").option("height",tamanhoAbasRegras)
					}
				})
				var tamanhoDetalhes = tamanhoAbasRegras-65
				$(".aplicaRegrasLeft").each(function(){
					var id="#"+$(this).attr("id")
					if ($(id).hasClass("dx-treeview")) {
						$(id).dxTreeView("instance").option("height",tamanhoDetalhes)
					}
				})
				$(".aplicaRegrasRight").each(function(){
					var id="#"+$(this).attr("id")
					if ($(id).hasClass("dx-widget")) {
						$(id).dxDataGrid("instance").option("height",tamanhoDetalhes)
					}
				})
				var tamanhoGrid = window.innerHeight - 290
				$("#divSubRegraAplicadaGrid").dxDataGrid("instance").option("height",tamanhoGrid)
			}
			
			function montaTela(){
				//
				// Monta o LoadPanel
				loadPanel = $("#loadpanel").dxLoadPanel({
			        visible: true,
			        showIndicator: true,
			        showPane: true,
			        shading: true,
			        shadingColor:"rgba(255,255,255,.6)",
			        closeOnOutsideClick: false,
			    }).dxLoadPanel("instance");

				// Monta toolbar
				$("#toolbar").dxToolbar({
				    items: [{
				    	location: "after",
				        widget: "dxButton",
				        options: {
					        elementAttr: {
						      id: "botaoSalvar"  
					        },
				            icon: "save",
				            hint: "Salvar os Dados",
				            text: "Salvar",
				            type: "default",
				            stylingMode: "contained",
				            onClick: function () {
								salvarDados(0)
				            }
				        }
				    }, {
				        location: "after",
				        widget: "dxButton",
				        options: {
				            icon: "fa fa-eraser",
				            hint: "Limpar os Campos",
				            type: "default",
							text: "Limpar",
				            stylingMode: "contained",
				            onClick: function () {
								if ($("#divForm").dxForm("instance").option("formData").acordo!=undefined&&$("#divForm").dxForm("instance").option("formData").acordo!=""){
									$("#divForm").dxForm("instance").updateData("acordo","")
								}else{
					            	carregaAcordo("")
								}
				            }
				        }
				    }]
				})

				// Monta formulário principal
				$("#divForm").dxForm({
				    activeStateEnabled: true,
				    minColWidth: 50,
				    screenByWidth: function (width) {
				        return "lg";
				    },
				    height: function () {
				        return window.innerHeight - 60
				    },
				    onContentReady: function (){
						montaAbas()
					},
				    alignItemLabels: false,
				    alignItemLabelsInAllGroups: false,
				    items: [{
				        itemType: "group",
				        items: [{
	       			        cssClass: "first-group",
				            dataField: "acordo",
						    label		: {
							    alignment: "right",
							    text	: "Acordo Comercial"
						    },
						    editorType	: "dxSelectBox",
							editorOptions: {
								dataSource: dataSourceAcordo,
			    		        valueExpr: "codigo", 
								displayExpr: "descricao",
								searchEnabled: true,
		                        width: "470px",
		                        showClearButton : true,
		                        onValueChanged: function(e){
			                        carregaAcordo(e.value)
			                    },
			                	buttons: ["clear",{
				                    name	: "search",
				                    location: "after",
				                    options: {
				                        stylingMode: "text",
				                        icon: "search",
				                        onClick: function() {
					                        abrePesquisaAcordo()
				                        }
				                    }
			                	}, "dropDown"]
			                }				            
				        },{
				            itemType	: "tabbed",
				            cssClass	: "first-group",
				            name		: "abas",
				            tabPanelOptions: {
				                deferRendering: false,
				                onOptionChanged: function(e){
					                if (e.value){
					                	if (e.value.title=="Regras Comerciais"){
						                	montaAbaRegras()
					                	}
					                	if (e.value.title=="Tabelas Comerciais"){
						                	dataSourceTabelaComercialO.reload()
					                	}
					                	if (e.value.title=="Orçamento"){
						                	dataSourceItensOrcar.reload()
					                	}
					                	if (e.value.title=="Auditoria"){
						                	montaGridRegrasAplicadasGeral()
					                	}
					                	
					                }
				                }
				            },
				            tabs: [{
				                title: "Geral",
				                items: [{
				                    template: function (data, itemElement) {
				                        itemElement.append("<div id='divGeral'>")
				                    }
				                }],
				            }, {
				                title: "Clientes Comerciais",
				                items: [{
				                    template: function (data, itemElement) {
				                        itemElement.append("<div id='divClientes'>")
				                    }
				                }]
				            }, {
				                title: "Tabelas Comerciais",
				                items: [{
				                    template: function (data, itemElement) {
				                        itemElement.append("<div id='divTabela'>")
				                    }
				                }]
				            }, {
				                title: "Regras Comerciais",
				                items: [{
				                    template: function (data, itemElement) {
				                        itemElement.append("<div id='divRegras'>")
				                    }
				                }]
				            }, {
				                title: "Orçamento",
				                items: [{
				                    template: function (data, itemElement) {
				                        itemElement.append("<div id='divOrcar'>")
				                    }
				                }]
				            }, {
				                title: "Auditoria",
				                items: [{
				                    template: function (data, itemElement) {
				                        itemElement.append("<div id='divControle'>")
				                    }
				                }]
				            }]
				        }]
				    }]
				})
			}			
			// Abre popup para pesquisar por organizações
			function abrePesquisaAcordo(){
				 popupOptions = {
			        width: "90%",
			        height: "90%",
			        showTitle: true,
			        title: "Pesquisar Acordos Comerciais",
			        visible: true,
			        dragEnabled: false,
			        closeOnOutsideClick: false
			    }	
			    $("#openPopup").remove()
			    $(document.body).append("<div id='openPopup'></div>")
	   			$("#openPopup").html("<div id='pesquisaPopup'></div>")
				$("#openPopup").dxPopup(popupOptions)
				preparaPesquisaAcordos()
			}		
			
			function preparaPesquisaAcordos(){
		        $("#pesquisaPopup").dxDataGrid({
			        columns:[{
						dataField	: "CodigodoAcordo",
						caption		: "Código",
						width		: "60px"
				   	},{
						dataField	: "Nome",
						caption		: "Nome"
				   	},{
						dataField	: "PrestadordeServico",
						caption		: "Prestador de Serviços"
				   	},{
						dataField	: "FontePagadora",
						caption		: "Fonte Pagadora"
				   	},{
						dataField	: "Recebedor",
						caption		: "Recebedor"
				   	},{
						dataField	: "Ativo",
						caption		: "Situação",
						width		: "120px"
				   	}],
					dataSource:  new DevExpress.data.CustomStore({
	            		load: function(args) {
		            		var deferred = $.Deferred()
				            $.getJSON(urlPreparacao,{
	        	            	method	:"pesquisaAcordo",
	        	            	filter	: JSON.stringify(args.filter),
	        	            	sort	: JSON.stringify(args.sort),
	        	            	take	: JSON.stringify(args.take),
	        	            	skip	: JSON.stringify(args.skip),
		        	    	},function(result){
								deferred.resolve(
									result.data, {
										totalCount: result.totalCount
									});
							});
							return deferred.promise();
	    	    		}	
	    			}),
	    			remoteOperations	: true,
		    		selection: { mode: "single" },
					filterRow: { visible: true },
					hoverStateEnabled: true,
					paging: { enabled: true, pageSize: 25 },
					pager: {
						showInfo				: true,
						showNavigationButtons 	: true,
			            showPageSizeSelector	: true,
	        		},		
					height: "100%",	
					showBorders: true,
					showRowLines: true,
					rowAlternationEnabled: true,
					columnFixing: {
			            enabled: true
			        },
					onSelectionChanged: function(selectedItems) {
						if (selectedItems.selectedRowsData.length>0){
							$("#divForm").dxForm("instance").updateData("acordo",selectedItems.selectedRowKeys[0].CodigodoAcordo)
							$("#openPopup").dxPopup("instance").hide()
						}
					}
				}).dxDataGrid("instance")
			}
			
			function carregaAcordo(codigo){
				if (flVoltaCodigo) {
					flVoltaCodigo=0
					return
				}
				/*if (alterado){
					var result = DevExpress.ui.dialog.confirm("Há dados não salvos. Deseja prosseguir?", "Dados não salvos");
				    result.done(function(dialogResult) {
				        if (!dialogResult){
					        flVoltaCodigo=1
					        $("#divForm").dxForm("instance").updateData("acordo",codRegraGlobal)
					        return
						}
						carregaAcordo2(codigo)
				    })
				    result.fail(function(){
				        flVoltaCodigo=1
				        $("#divForm").dxForm("instance").updateData("acordo",codRegraGlobal)
				        return
					})
				}else{*/
					carregaAcordo2(codigo)
				//}
			}
			
			
			function carregaAcordo2(codigo){
				codRegraGlobal = codigo
				loadPanel.show()
				setTimeout(function (){
					$.ajaxSetup({async:false})
					$.getJSON(urlPreparacao,{
	                    method:"recAcordo",
	                    codigo: codigo
	                },function(retorno){
		                carregarDados = 1
		                $("#divGeral").dxForm("instance").resetValues()
		                $("#divGeral").dxForm("instance").option("formData",retorno.formGeral)
		                $("#divClientes").dxForm("instance").option("formData",retorno.formClientes)
		                $("#divControle").dxForm("instance").option("formData",retorno.formControle)
		                montaFormConversor(retorno.formConversao,retorno.outros.contadorMoedas)
		                montaAbaRegras()
		                montaGridRegrasAplicadasGeral()
		                dataSourceOrganizacao.reload()
		                //Alteração Patricia
		                if (retorno.regraFatAcordo > 0) {
			                $("#divRegrasNoAcordo").css("color","orange").find("i").css("color","orange");
		                }else{
			                $("#divRegrasNoAcordo").css("color","#ffffff").find("i").css("color","#ffffff");
		                }
		                //		                
		                fIni = 1;
		                dataSourceTabelaComercialO.reload()
		                dataSourceClienteComercialSel.reload()
		                dataSourceTabelaComercialSel.reload()
		                dataSourceItensOrcar.reload()
		                //dataSourceRegrasGeral.reload()
		                loadPanel.hide()
						carregarDados = 0
						campoAlterado(0)
		                loadPanel.hide()
		                $.ajaxSetup({async:true});
		            })
				},100);
			}
			
			function carregaDataSources(){
				dataSourceVersaoTISS = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
	                loadMode: "raw",
		            load: function(args) {
	                    return $.getJSON(urlPreparacao,{
	    	            	method	:"getINPARA",
	    	            	chave	: "FATVERSAOTISS"
		                });
		                }
		            })
		        })		        

				dataSourceCategoriaTISS = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
	                loadMode: "raw",
		            load: function(args) {
	                    return $.getJSON(urlPreparacao,{
	    	            	method	:"getINPARA",
	    	            	chave	: "FATCATEGORIATISS"
		                });
		                }
		            })
		        })		        
				dataSourceAcordo = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
			            byKey: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getAcordo",
	                        	codigo	:args
			                });
		                },
			            load: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getAcordo",
	                        	skip:args.skip,
	                        	take:args.take,
	                        	filter:JSON.stringify(args.filter),
	                        	searchValue:args.searchValue
			                });
		                }
		            })
		        })		        

				dataSourcePrestadorServico = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
			            byKey: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getFontePagadora",
		    	            	campo	: "PrestadordeServicosAtivo",
	                        	codigo	:args
			                });
		                },
			            load: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getFontePagadora",
		    	            	campo	: "PrestadordeServicosAtivo",
	                        	skip	:args.skip,
	                        	take	:args.take,
	                        	filter	:JSON.stringify(args.filter),
	                        	searchValue:args.searchValue
			                });
		                }
		            })
				})
				
				dataSourceFontePagadora = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
			            byKey: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getFontePagadora",
		    	            	campo	: "FontePagadoraAtivo",
	                        	codigo	:args
			                });
			            },
			            load: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getFontePagadora",
		    	            	campo	: "FontePagadoraAtivo",
	                        	skip	:args.skip,
	                        	take	:args.take,
	                        	filter	:JSON.stringify(args.filter),
	                        	searchValue:args.searchValue
			                });
		                }
		            })
		        })		        

				dataSourceRecebedor = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
			            byKey: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getFontePagadora",
		    	            	campo	: "RecebedorAtivo",
	                        	codigo	:args
			                });
		                },
			            load: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getFontePagadora",
		    	            	campo	: "RecebedorAtivo",
	                        	skip	:args.skip,
	                        	take	:args.take,
	                        	filter	:JSON.stringify(args.filter),
	                        	searchValue:args.searchValue
			                });
		                }
		            })
		        })		        

				dataSourceTabelaComercialO = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
						loadMode: "raw",
			            load: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getTabelaComercial"
			                });
		                }
		            })
		        })		        
		        dataSourceTabelaComercialSel = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
						loadMode: "raw",
			            load: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getSelecaoTemporaria",
		    	            	tipo	: "tabelaComercial",
		    	            	fIni: fIni,
		    	            	xClient : 1
			                },function(rs){fIni = 0;});
		                }
		            })
		        })		        
		        dataSourceClienteComercialSel = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
						loadMode: "raw",
			            load: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getSelecaoTemporaria",
		    	            	tipo	: "clienteComercial"
			                });
		                }
		            })
		        })		        

		        dataSourceConvenios = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
						loadMode: "raw",
			            load: function(args) {
				            		return $.getJSON(urlPreparacao,{
		    	            	method	:"getSelecaoTemporaria",
		    	            	tipo	: "clienteComercial",
		    	            	tabela: xTabela,
		    	            	convenio: 1
			                });
		                }
		            })
		        })		        

				dataSourceOrganizacao = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
						loadMode: "raw",
			            load: function(args) {
				            var organizacao = $("#divClientes").dxForm("instance").option("formData").organizacao
		                    return $.getJSON(urlPreparacao,{
		    	            	method		:"getOrganizacao",
		    	            	codAcordo	: $("#divForm").dxForm("instance").option("formData").acordo,
		    	            	organizacao	: organizacao
			                });
		                }
		            })
		        })		        

				dataSourceOrganizacaoPai = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
			            byKey: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	: "getOrganizacaoPai",
	                        	codigo	: args
			                });
		                },
			            load: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	: "getOrganizacaoPai",
	                        	skip	: args.skip,
	                        	take	: args.take,
	                        	filter	: JSON.stringify(args.filter),
	                        	searchValue:args.searchValue
			                });
		                }
		            })
		        })		        

				dataSourceMoeda = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
	                loadMode: "raw",
		            load: function(args) {
	                    return $.getJSON(urlPreparacao,{
	    	            	method	:"getINPARA",
	    	            	chave	: "UNIDMONETARIATABELACOMERCIAL",
	    	            	somenteChave: 1
		                });
		                }
		            })
		        })		        
				dataSourceTipoFontePagadora = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
	                loadMode: "raw",
		            load: function(args) {
	                    return $.getJSON(urlPreparacao,{
	    	            	method	:"getINPARA",
	    	            	chave	: "FATFONTEPAGADORA"
		                });
		                }
		            })
		        })		        
				dataSourceRegras	 = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
			            byKey: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getRegras",
	                        	codigo	: args
			                });
		                },
			            load: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getRegras",
	                        	skip:args.skip,
	                        	take:args.take,
	                        	filter:JSON.stringify(args.filter),
	                        	searchValue:args.searchValue
			                });
		                }
		            })
		        })		        

				dataSourceItensOrcar	 = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
			            load: function(args) {
		                    return $.getJSON(urlPreparacao,{
		    	            	method	:"getItensOrcar",
	                        	skip:args.skip,
	                        	take:args.take,
	                        	filter:JSON.stringify(args.filter),
	                        	searchValue:args.searchValue
			                });
		                }
		            })
		        })		        

			}
			
			// Salva os dados da aba "Geral"
			function salvarDados(flSemNotificar){
				var codAcordo		= $("#divForm").dxForm("instance").option("formData").acordo
				var abaGeral		= $("#divGeral").dxForm("instance")
				var abaClientes		= $("#divClientes").dxForm("instance")
				var formConversor	= $("#formConversor").dxForm("instance")
				var msg = "",cont=0
				if (!abaGeral.validate().isValid){
					msg = "geral"
					cont++
				}
				if (!abaClientes.validate().isValid){
					msg = "clientes comerciais"
					cont++
				}
				if (msg!=""){
					if (!flSemNotificar){
		        		DevExpress.ui.notify("Há campos pendentes de preenchimento na"+(cont>1?"s":"")+" aba"+(cont>1?"s":"")+": "+msg, "warning", 4000);
					}
			        return
				}
				$.post(urlPreparacao,{
					method			: "salvar",
					codAcordo		: codAcordo,
					camposGeral		: JSON.stringify(abaGeral.option("formData")),
					camposClientes	: JSON.stringify(abaClientes.option("formData")),
					camposConversor	: JSON.stringify(formConversor.option("formData")),
					totalConversores: formConversor.itemOption("conversao").items.length/4
				},function(retorno){
					DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
					if (retorno.status==1){
						campoAlterado(0)
						//dataSourceRegrasGeral.reload()
						if (flSemNotificar) {
							return
						}
						dataSourceAcordo.reload()
						if ($("#divForm").dxForm("instance").option("formData").acordo==retorno.codAcordo){
							carregaAcordo(retorno.codAcordo)
						}else{
							$("#divForm").dxForm("instance").updateData("acordo",retorno.codAcordo)
						}
					}
				},"json")
			}			
			
			// Monta abas - chamado automaticamente ao término da montagem do form 'divForm'
			function montaAbas(){
				montaAbaGeral()
				montaAbaClientes()
				montaAbaTabela()
				montaAbaRegras()
				montaAbaOrcar()
				montaAbaControle()
			}
			
			
			// Monta aba 'Geral'
			function montaAbaGeral(){
				$("#divGeral").dxForm({
				    activeStateEnabled	: true,
				    alignItemLabels: true,
				    alignItemLabelsInAllGroups: true,
				    height: function () {
				        return window.innerHeight - 170
				    },
				    onFieldDataChanged: function(e){
					    campoAlterado(1)
					    if (e.dataField=="tipoFontePagadora"){
					    	if (!$("#divGeral").hasClass("dx-form")) return
						    if (e.value=="1"){
							    fontePagadora = e.component.getEditor("fontePagadora")
							    fontePagadora.option("disabled",true)
							    e.component.updateData("fontePagadora","")
						    }else{
							    fontePagadora = e.component.getEditor("fontePagadora")
							    fontePagadora.option("disabled",false)
						    }
					    }
				    },
				    minColWidth: 50,
				    screenByWidth: function (width) {
				        return "lg";
				    },
					scrollingEnabled	: true,
				    items		: [{
					    name		: "priNivel",
					    itemType	: "group",
					    cssClass	: "first-group",
					    colCount	: 12,
						items 	: [{
							colSpan		: 10,
						    dataField	:	"nome",
						    validationRules: [{ type: "required" }],        
						    editorOptions: {
							    buttons: [{
								    name	: "btnHelp",
				                    location: "after",
				                    options: {
				                        stylingMode: "text",
				                        icon: "far fa-question-circle",
				                        ajuda: "Insira um nome para este acordo comercial<br><br><i>Tipo de campo: Alphanumérico</i>",
				                        onClick: function(e) {
					                        exibeHelp(e)
				                        }
				                    }
			                	}]
						    },
						    label		: {
							    alignment: "right",
							    text	: "Nome"
						    },
						    
					    },{
						    colSpan		: 2,
						    dataField	:	"situacao",
						    label		: {
							    alignment: "right",
							    text	: "Ativo?",
							    showColon: false
						    },
						    editorType	: "dxSwitch",
						    editorOptions : {
							    switchedOnText:"Sim",
							    switchedOffText:"Não",
							    value	: 1
						    }
					    },{
						    colSpan		: 12,
						    dataField	: "prestadorServico",
						    label		: {
							    alignment: "right",
							    text	: "Prestador de Serviços"
						    },
						    validationRules: [{ type: "required" }],        
						    editorType	: "dxSelectBox",
							editorOptions: {
								dataSource	: dataSourcePrestadorServico,
			    		        valueExpr	: "codigo", 
								displayExpr	: "descricao",
								searchEnabled: true,
		                        width: "470px",
		                        showClearButton : true,
							    buttons: ["clear",{
								    name	: "btnHelp",
				                    location: "after",
				                    options: {
				                        stylingMode: "text",
				                        icon: "far fa-question-circle",
				                        ajuda: "Selecione o prestador de serviços deste acorco comercial<br><br><i>Tipo de campo: Cadastro de Organizações</i>",
				                        onClick: function(e) {
					                        exibeHelp(e)
				                        }
				                    }
			                	}, "dropDown"]
		                        
			                }				            

					    },{
						    colSpan		: 4,
						    dataField	: "tipoFontePagadora",
						    validationRules: [{ type: "required" }],        
						    label		: {
							    alignment: "right",
							    text	: "Tipo de Fonte Pagadora"
						    },
						    editorType	: "dxSelectBox",
							editorOptions: {
								dataSource: dataSourceTipoFontePagadora,
			    		        valueExpr: "codigo", 
								displayExpr: "descricao",
								searchEnabled: true,
							    buttons: [{
								    name	: "btnHelp",
				                    location: "after",
				                    options: {
				                        stylingMode: "text",
				                        icon: "far fa-question-circle",
				                        ajuda: "Selecione o tipo da fonte pagadora deste acordo comercial<br><br><i>Tipo de campo: Cadastro de Organizações</i>",
				                        onClick: function(e) {
					                        exibeHelp(e)
				                        }
				                    }
			                	}, "dropDown"]
							}
						    
					    },{
						    colSpan		: 8,
						    dataField	: "fontePagadora",
						    label		: {
							    alignment: "right",
							    text	: "Fonte Pagadora"
						    },
						    validationRules: [{ type: "required" }],        
						    editorType	: "dxSelectBox",
							editorOptions: {
								disabled	: true,
								dataSource	: dataSourceFontePagadora,
			    		        valueExpr	: "codigo", 
								displayExpr	: "descricao",
								searchEnabled: true,
							    showClearButton : true,
		                        width: "470px",
							    buttons: ["clear",{
								    name	: "btnHelp",
				                    location: "after",
				                    options: {
				                        stylingMode: "text",
				                        icon: "far fa-question-circle",
				                        ajuda: "Selecione a fonte pagadora deste acordo comercial (para tipo de fonte pagadora diferente de 'Particular')<br><br><i>Tipo de campo: Cadastro de Organizações</i>",
				                        onClick: function(e) {
					                        exibeHelp(e)
				                        }
				                    }
			                	}, "dropDown"]
			                }				            
					    },{
						    colSpan		: 12,
						    dataField	: "recebedor",
						    label		: {
							    alignment: "right",
							    text	: "Recebedor"
						    },
						    validationRules: [{ type: "required" }],        
						    editorType	: "dxSelectBox",
							editorOptions: {
								dataSource	: dataSourceRecebedor,
			    		        valueExpr	: "codigo", 
								displayExpr	: "descricao",
								searchEnabled: true,
								showClearButton : true,
		                        width: "470px",
							    buttons: ["clear",{
								    name	: "btnHelp",
				                    location: "after",
				                    options: {
				                        stylingMode: "text",
				                        icon: "far fa-question-circle",
				                        ajuda: "Selecione o recebedor deste acordo comercial<br><br><i>Tipo de campo: Cadastro de Organizações</i>",
				                        onClick: function(e) {
					                        exibeHelp(e)
				                        }
				                    }
			                	}, "dropDown"]
			                }				            
					    },{
						    colSpan		: 12,
						    itemType	: "group",
						    name		: "conversorMoedas",
						    caption		: "Conversor de Moedas",
   	       			        cssClass	: "second-group",
						    items		: [{
							    template	: "<div id='formConversor'></div>"
						    }]
					    },{
						    colSpan		: 12,
							itemType: "button",
							horizontalAlignment: "center",
					    	buttonOptions: {
						    	width	: "220px",
						    	icon	: "add",
						    	text	: "Adicionar Conversor",
						    	onClick : function(){
							    	insereConversor()
							    }
					    	}
							
						}]
				    }]
				})
			}


			function insereConversor(){
				var formulario = $("#formConversor").dxForm("instance")
				ret = formulario.itemOption("conversao").items
				tamanho = ret.length/4
				tamanho = tamanho + 1
				ret.push("")
	            formulario.itemOption("conversao", "items", getLinesOptions(ret,tamanho));
	            $("#divGeral").dxForm("instance")._scrollable.scrollBy(100000)
			}
			
			function getLinesOptions(obj,tamanho) {
		        var options = [];
		        for (var i = 1; i <= tamanho; i++){
			        for (var coluna=1;coluna<=4;coluna++){
			            options.push(generateNewLineOptions(i,obj,coluna,tamanho));
			        }
		        }
		        return options;
		    }

			function generateNewLineOptions(index,objeto,coluna,tamanho) {
				var visible = true
				var posicao = (((index-1)*4)+coluna)-1
				if (objeto[posicao]){
					visible = objeto[posicao].visible
				}
				var obj = objeto[coluna-1]
		        return {
			        itemType	 : obj.itemType,
			        horizontalAlignment	 : obj.horizontalAlignment,
			        cssClass 	 : obj.cssClass,
			        dataField	 : obj.dataField?obj.dataField.split("^")[0]+"^"+index:"",
			        name		 : obj.name?obj.name.split("^")[0]+"^"+index:"",
		            colSpan		 : obj.colSpan,
		            visible		 : visible,
		            label		 : obj.label,
		            editorType	 : obj.editorType,
		            editorOptions: obj.editorOptions,
		            buttonOptions:{
				    	icon	: obj.buttonOptions!=undefined?obj.buttonOptions.icon:"",
				    	type	: obj.buttonOptions!=undefined?obj.buttonOptions.type:"",
				    	hint	: obj.buttonOptions!=undefined?obj.buttonOptions.hint:"",
				    	onClick : obj.buttonOptions!=undefined?obj.buttonOptions.onClick:"",
			            elementAttr: {
	           				id : obj.name?obj.name.split("^")[0]+"^"+index:obj.dataField.split("^")[0]+"^"+index
           				}
		            }
           				

		        }
		    }
			

			function montaFormConversor(obj,numCampos){
				$("#formConversor").dxForm({
					formData	: obj,
				    activeStateEnabled	: true,
				    alignItemLabels: true,
				    alignItemLabelsInAllGroups: true,
				    screenByWidth: function (width) {
				        return "lg";
				    },
				    onContentReady : function(){
					   for (var i=2;i<=numCampos;i++){
						   insereConversor()
					   }
				    },
				    onFieldDataChanged: function(e){
				    	campoAlterado(1)
				    },
					scrollingEnabled	: true,
				    items		: [{
					    itemType	: "group",
					    name		: "conversao",
					    colCount	: 10,
					    items:		[{
						    colSpan		: 3,
						    dataField	: "moedaDestino^1",
						    cssClass	: "semBordas",
					    	label		: {
						    	alignment: "right",
						    	text	: "Conversor de Moedas"
					    	},
					    	editorType	: "dxSelectBox",
					    	editorOptions: {
								dataSource: dataSourceMoeda,
		    		        	valueExpr: "codigo", 
								displayExpr: "descricao",
							    buttons: [{
								    name	: "btnHelp",
				                    location: "after",
				                    options: {
				                        stylingMode: "text",
				                        icon: "far fa-question-circle",
				                        ajuda: "Selecione o tipo de moeda que será resultado desta conversão<br><br><i>Tipo de campo: Cadastro de Moedas</i>",
				                        onClick: function(e) {
					                        exibeHelp(e)
				                        }
				                    }
			                	}, "dropDown"]
					    	}
					    },{
						    colSpan		: 3,
						    dataField	: "moedaConversor^1",
						    cssClass	: "semBordas",
					    	label		: {
						    	alignment: "center",
						    	text	: "=",
						    	showColon: false
					    	},
					    	editorType	: "dxNumberBox",
					    	editorOptions: {
   							    showClearButton : true,
						    	format	: "#,###.###",
							    buttons: ["clear",{
								    name	: "btnHelp",
				                    location: "after",
				                    options: {
				                        stylingMode: "text",
				                        icon: "far fa-question-circle",
				                        ajuda: "Informe o valor de conversão (campo numérico)<br><br><i>Tipo de campo: Numérico</i>",
				                        onClick: function(e) {
					                        exibeHelp(e)
				                        }
				                    }
			                	}]
					    	}
					    },{
						    colSpan		: 3,
						    dataField	: "moedaOrigem^1",
						    cssClass	: "semBordas",
					    	label		: {
						    	alignment: "center",
						    	text	: "*",
						    	showColon: false
					    	},
					    	editorType	: "dxSelectBox",
					    	editorOptions: {
								dataSource: dataSourceMoeda,
		    		        	valueExpr: "codigo", 
								displayExpr: "descricao",
							    buttons: [{
								    name	: "btnHelp",
				                    location: "after",
				                    options: {
				                        stylingMode: "text",
				                        icon: "far fa-question-circle",
				                        ajuda: "Selecione o tipo de moeda que será a origem desta conversão<br><br><i>Tipo de campo: Cadastro de Moedas</i>",
				                        onClick: function(e) {
					                        exibeHelp(e)
				                        }
				                    }
			                	}, "dropDown"]
					    	}
					    },{
						    itemType	: "button",
						    name		: "removeLinha^1",
							horizontalAlignment: "center",
					    	buttonOptions: {
								elementAttr: {
	           						id : "removeLinha^1"
           						},			    	
						    	icon	: "remove",
						    	type	: "danger",
						    	hint	: "Remover Linha",
						    	onClick : function(e){
							    	var id  = e.component.option("elementAttr.id")
							    	var id 	= id.split("^")[1]
							    	var conversor = $("#formConversor").dxForm("instance")
							    	conversor.itemOption("conversao.moedaDestino^"+id,"visible",false)
							    	conversor.itemOption("conversao.moedaConversor^"+id,"visible",false)
							    	conversor.itemOption("conversao.moedaOrigem^"+id,"visible",false)
							    	conversor.itemOption("conversao.removeLinha^"+id,"visible",false)
							    	conversor.updateData("linhaRemovida^"+id,1)
							    	$("#divGeral").dxForm("instance")._scrollable.scrollBy(100000)
							    	//removeLinha()
							    }
					    	}
					    }]
				    }]
				})
			}

			function syncSelection(treeView,destino){
				campoAlterado(1)
        		var selectedFields = treeView.getSelectedNodes()
            		.map(function(node) { return node.itemData; });
            	var objRetorno = []
            	selectedFields = corrigeSelecionados(selectedFields,objRetorno)
		  		$.post(urlPreparacao,{
			  		method	: "atualizaSelecao",
			  		tipo	: destino,
			  		selecao : JSON.stringify(objRetorno)
		  		},function(retorno){
			  		if (destino=="clienteComercial"){
			  			dataSourceClienteComercialSel.reload()
			  		}else{
				  		dataSourceTabelaComercialSel.reload()
			  		}
			  	},"json")
    		}

			function corrigeSelecionados(obj,retorno){
				var disabled = false
				var objInterno = obj
				for (var i=0;i<objInterno.length;i++){
					var objFilho = objInterno[i]
					if (objFilho.items){
						var disabled = corrigeSelecionados(objFilho.items,retorno)
					}
					if (objFilho.disabled) {
						disabled = true
						continue
					}
					if (!disabled){
						retorno.push(objFilho)
					}
				}
				return disabled
			}
			
			// Monta aba 'Cliente'
			function montaAbaClientes(){
				$("#divClientes").dxForm({
				    activeStateEnabled	: true,
				    alignItemLabels: true,
				    alignItemLabelsInAllGroups: true,
				    height: function () {
				        return window.innerHeight - 170
				    },
				    onContentReady: function(){
				    	montaConjuntoClienteComercial()
				    },
				    minColWidth: 50,
				    screenByWidth: function (width) {
				        return "lg";
				    },
				    onFieldDataChanged: function(e){
					    campoAlterado(1)
					    if (e.dataField=="organizacao"){
						    dataSourceOrganizacao.reload()
						    syncSelection($("#clienteComercialTView").dxTreeView("instance"),"clienteComercial");
					    }
				    },
					scrollingEnabled	: true,
				    items		: [{
					    itemType	: "group",
					    cssClass	: "first-group",
					    colCount	: 12,
						items 	: [{
						    itemType	: "group",
						    colSpan		: 6,
						    items		: [{
							    dataField	: "organizacao",
							    label		: {
								    alignment: "right",
								    text	: "Organização"
							    },
							    validationRules: [{ type: "required" }],        
							    editorType	: "dxSelectBox",
								editorOptions: {
								    showClearButton : true,
									dataSource	: dataSourceOrganizacaoPai,
				    		        valueExpr	: "codigo", 
									displayExpr	: "descricao",
									searchEnabled: true,
				                	buttons: ["clear",{
					                	name	: "btnHelp",
					                    location: "after",
					                    options: {
					                        stylingMode: "text",
					                        icon: "far fa-question-circle",
					                        ajuda: "Selecione a organização dos clientes comerciais<br><br><i>Tipo de campo: Cadastro de Organizações</i>",
					                        onClick: function(e) {
						                        exibeHelp(e)
					                        }
					                    }
				                	}, "dropDown"]
				                }				            
							},{
							    dataField	: "clienteComercial",
							    label		: {
								    alignment: "right",
								    text	: "Cliente Comercial"
							    },
							    template	: "<div id='clienteComercialTView'>"
							}],
					    },{
						    colSpan		: 6,
						    dataField	: "clienteComercialSelecionados",
						    label		: {
							    visible	: false
						    },
						    template	: "<div class='selected-container'>Clientes comerciais selecionados:<div id='clienteComercialList'></div>"
					    }]
				    }]
				})
			}

			function montaConjuntoClienteComercial(){
				$("#clienteComercialTView").dxTreeView({
					dataSource: dataSourceOrganizacao,
					showCheckBoxesMode: "normal",
					onContentReady : function(e){
						syncSelection(e.component,"clienteComercial");
					},
					selectAllText: "Selecionar Tudo",
					showCheckBoxesMode:"selectAll",
					onSelectionChanged: function(e) {
			            syncSelection(e.component,"clienteComercial");
			        },
	                searchEnabled: true,
	                searchEditorOptions: {
	                	placeholder:"Pesquisar por clientes comerciais...",
	                	showClearButton: true,
					    buttons: ["clear",{
						    name	: "btnHelp",
		                    location: "after",
		                    options: {
		                        stylingMode	: "text",
		                        icon		: "far fa-question-circle",
		                        ajuda		: "Informe parte do código ou do nome do cliente comercial para filtrar os resultados.<br><br><i>Tipo de campo: Alfanumérico</i>",
		                        onClick		: function(e) {
			                        exibeHelp(e)
		                        }
		                    }
	                	}]
	                }
	                
				})

				$("#clienteComercialList").dxList({
					dataSource: dataSourceClienteComercialSel,
			        showScrollbar: "always",
			        itemTemplate: function(item) {
			            return "<div>" + item.caminho + "</div>";
			        }
				})
			}

			// Monta aba 'Tabela'
			function montaAbaTabela(){
				$("#divTabela").dxForm({
				    activeStateEnabled	: true,
				    alignItemLabels: true,
				    alignItemLabelsInAllGroups: true,
				    height: function () {
				        return window.innerHeight - 170
				    },
				    onContentReady: function(){
				    	montaConjuntoTabelaComercial()
				    },
				    minColWidth: 50,
				    screenByWidth: function (width) {
				        return "lg";
				    },
					scrollingEnabled	: true,
				    items		: [{
					    itemType	: "group",
					    cssClass	: "first-group",
					    colCount	: 12,
						items 	: [{
						    colSpan		: 6,
						    dataField	: "tabelaComercial",
						    label		: {
							    alignment: "right",
							    text	: "Tabela Comercial"
						    },
						    template	: "<div id='tabelaComercialTView'>"
					    },{
						    colSpan		: 6,
						    dataField	: "tabelaComercialSelecionados",
						    label		: {
							    visible	: false
						    },
						    template	: "<div class='selected-container'>Tabelas comerciais selecionadas:<div id='tabelaComercialList'></div>"
					    }]
				    }]
				})
			}

			function montaConjuntoTabelaComercial(){
				$("#tabelaComercialTView").dxTreeView({
					dataSource: dataSourceTabelaComercialO,
					showCheckBoxesMode: "normal",
					onSelectionChanged: function(e) {
			            syncSelection(e.component,"tabelaComercial");
			        },
	                searchEnabled: true,
	                searchEditorOptions: {
	                	placeholder:"Pesquisar por tabelas comerciais...",
	                	showClearButton: true,
					    buttons: ["clear",{
						    name	: "btnHelp",
		                    location: "after",
		                    options: {
		                        stylingMode	: "text",
		                        icon		: "far fa-question-circle",
		                        ajuda		: "Informe parte do código ou do nome da tabela comercial para filtrar os resultados.<br><br><i>Tipo de campo: Alfanumérico</i>",
		                        onClick		: function(e) {
			                        exibeHelp(e)
		                        }
		                    }
	                	}]
	                }
				})

				$("#tabelaComercialList").dxList({
			        dataSource: dataSourceTabelaComercialSel,
			        showScrollbar: "always",
			        onItemReordered: function(e){
				  		$.post(urlPreparacao,{
					  		method	: "atualizaSelecao",
					  		tipo	: "tabelaComercial",
					  		reOrder	: 1,
					  		selecao : JSON.stringify(e.component.option("items"))
				  		},function(retorno){
					  	},"json")
				    },
					itemDragging: {
                		allowReordering: true,			        
					},
	    			itemTemplate: function(itemData, itemIndex, itemElement){
							cor = "";
							if (itemData.regrasFatTabela == 1) cor = "orange";
		    			itemElement.append("<i class='far fa-list-alt' style='cursor:pointer;color:"+cor+";' title='Inserir Regras na tabela' onclick=abrePainelRegras('"+itemData.id+"','','')></i>&nbsp;&nbsp;<font style='"+(itemData.inelegivel?"text-decoration:line-through":"") + "'>"+itemData.caminho+
		    			(itemData.nomeClintTab == "" ? "" : "<br><span style='font-size:10px;'>"+itemData.nomeClintTab+"</span>"));
		    			if (!itemData.inelegivel){
		    				$("<div class='fas fa-ban' style='position:relative;left:-10px;color:red;cursor:pointer' onclick=inelegibilidade('"+itemData.id+"',"+!itemData.inelegivel+") title='Ativar a INELEGIBILIDADE do tabela'></div>").insertAfter(itemElement);
		    			}else{
		    				$("<div class='fas fa-check-circle' style='position:relative;left:-10px;color:green;cursor:pointer' onclick=inelegibilidade('"+itemData.id+"',"+!itemData.inelegivel+") title='Ativar a ELEGIBILIDADE do tabela'></div>").insertAfter(itemElement);
		    			}
		    		},
				})

			}
			
			function inelegibilidade(codTabela,situacao){
				if (situacao){
					var result = DevExpress.ui.dialog.confirm("Deseja <font color=red>INELEGIBILIZAR</font> os itens da tabela?", "Inelegibilidade");
				}else{
					var result = DevExpress.ui.dialog.confirm("Deseja <font color=green>ELEGIBILIZAR</font> os itens da tabela?", "Elegibilidade");
				}
				
			    result.done(function(dialogResult) {
			        if (!dialogResult){
				        return
					}
					$.post(urlPreparacao,{
						method			: "setInelegibilidade",
						codTabela		: codTabela,
						ativar			: situacao
					},function(retorno){
						if (retorno.status==0){
							DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
							return
						}
						dataSourceTabelaComercialSel.reload()
					})
			    })
			}
			//
			function abrePainelRegras(tabela,categoria,item){
				 popupOptions = {
			        width: "90%",
			        height: "90%",
			        showTitle: true,
			        title: "Regras Comerciais",
			        visible: true,
			        dragEnabled: false,
			        closeOnOutsideClick: false,
					toolbarItems: [{
						location:"before",
						toolbar :"top",
					},{
						widget: "dxButton",
						location:"before",
						toolbar:"bottom",
						options: { 
							width	: "130px",
							type	: "default",
							icon	: "close",
                			text	: "Fechar", 
                			onClick : function(){
	                			$("#openPopup").dxPopup("hide")
	                		}
						}
					}]				        
			    }	
			    $("#openPopup").remove()
			    $(document.body).append("<div id='openPopup'></div>")
	   			$("#openPopup").html("<div id='contentPopup'></div>")
				$("#openPopup").dxPopup(popupOptions)
				preparaTelaRegra(tabela,categoria,item)
			}
			function preparaTelaRegra(tabela,categoria,item){
				xTabela = tabela;
				$.getJSON(urlPreparacao,{
			  		method		: "getTelaRegra",
			  		acordo		: $("#divGeral").dxForm("instance").option("formData").nome,
			  		tabela		: tabela,
			  		categoria	: categoria,
			  		item		: item
			  	},function(resp){
					$("#contentPopup").dxForm({
					    activeStateEnabled	: true,
					    alignItemLabels: true,
					    alignItemLabelsInAllGroups: true,
					    onContentReady: function(){
						    montaConvenio()
						    montaGridRegrasAplicadas(tabela,categoria,item)
					    },
					    screenByWidth: function (width) {
					        return "lg";
					    },
						scrollingEnabled	: true,
						colCount	: 12,
					    items		: [{
						    colSpan		: 6,
						    template	: "<div class='selected-container'>Convênio:<div id='convenioList'></div>"
					    },{
						    colSpan		: 6,
						    itemType	: "group",
						    items		: [{
							    itemType	: "group",
							    caption		: "Ponto de Aplicação da Regra",
							    items		: resp.items,
						    },{
							    itemType	: "group",
							    caption		: "Regras Aplicadas",
							    items		: [{
								    template	: "<div id='dataGridRegrasAplicadas'></div>"
							    }],
						    }]
					    }]
					})
			  	})
			}
			// monta convênio
			function montaConvenio(){
				dataSourceConvenios.reload()
				$("#convenioList").dxList({
					dataSource: dataSourceConvenios,
			        showScrollbar: "always",
			        selectionMode	: "single",
			        showSelectionControls:true,
			        keyExpr:"id",
			        selectedItemKeys:["T"],
			        onSelectionChanged : function(){
				        $("#dataGridRegrasAplicadas").dxDataGrid("instance").getDataSource().reload()
			        },
			        itemTemplate: function(item) {
			            return "<div>" + item.caminho + "</div>";
			        }
				})
			}
			// montaGridRegrasAplicadas
			function montaGridRegrasAplicadas(tabela,categoria,item){
				
				tabelaAtual = tabela
				categoriaAtual = categoria
				itemAtual = item
				$("#dataGridRegrasAplicadas").dxDataGrid({
					wordWrapEnabled: true,
					columns		: [{
						dataField	: "nome",
						caption		: "Nome da Regra",
					},{
						dataField	: "tipo",
						caption		: "Tipo da Regra",
					},{
						dataField	: "origem",
						caption		: "Origem da Regra",
					},{
						dataField	: "pontoAplicacao",
						caption		: "Ponto de Aplicação",
					}],
					onCellPrepared: function(e){
						if (e.data&&e.data.inativo){
							e.cellElement[0].style.textDecoration = "line-through"
						}
					},
					dataSource	:  new DevExpress.data.CustomStore({
	            		remove: function(args) {
				            campoAlterado(1)
				            return $.getJSON(urlPreparacao,{
	        	            	method		: "removeRegrasAplicadas",
	        	            	id			: args.id
		        	    	},function(){
								salvarDados(1)
		        	    	});
	            		},
	            		load: function(args) {
		            		var convenio = $("#convenioList").dxList("instance").option("selectedItem")
		            		if (convenio==undefined) {
			            		convenio="T"
		            		}else{
			            		convenio = convenio.id
		            		}
				            return $.getJSON(urlPreparacao,{
	        	            	method		:"getRegrasAplicadas",
	        	            	tabela		: tabela,
	        	            	categoria	: categoria,
	        	            	item		: item,
	        	            	convenio	: convenio,
	        	            	organizacao	: $("#divClientes").dxForm("instance").option("formData").organizacao,
		        	    	});
	    	    		}	
	    			}),
	        		editing: {
			            mode: "cell",
			            allowDeleting: function(e){
				        	if (e.row.data.nivelAtual){
					        	return true
				        	}
				        	return false
				        },
	                    useIcons: true,
			        },					

					filterRow: { visible: false },
					height: $("#openPopup .dx-overlay-content").height()-(item||categoria?315:(tabela?280:245)),
					hoverStateEnabled: true,
					onToolbarPreparing: function(e) {
						e.toolbarOptions.items.unshift({
							location: "after",
							widget: "dxButton",
							options: {
								icon: "favorites",
								text: "Faturamento",
								type: "default",
								hint: "Alterar regras de faturamento",
								inputAttr: {
									campos: tabela+"^"+categoria+"^"+item
								},
								onClick: function(e) {
									campos = e.component.option("inputAttr.campos")
									tabela = campos.split("^")[0]
									categoria = campos.split("^")[1]
									item = campos.split("^")[2]
									abreTelaFaturamento(tabela,categoria,item)
								}
							}
						},{
							location: "after",
							widget: "dxButton",
							options: {
								icon: "add",
								text: "Novo",
								type: "default",
								hint: "Inserir nova regra",
								inputAttr: {
									campos: tabela+"^"+categoria+"^"+item
								},
								onClick: function(e) {
									campos = e.component.option("inputAttr.campos")
									tabela = campos.split("^")[0]
									categoria = campos.split("^")[1]
									item = campos.split("^")[2]
									insereNovaRegra(tabela,categoria,item,"")
								}
							}
						})
					},
					onCellClick : function(obj){
						id = obj.data.id.split(",")
						if (id[0]!="regrasItems"&&id[0]!="regrasAcordo"&&id[0]!="regrasTabela"&&id[0]!="regrasCategoria") return
						insereNovaRegra(tabelaAtual,categoriaAtual,itemAtual,obj.data.codigo)
					},
					paging: { enabled: false },
					pager: {
			            showPageSizeSelector: false,
	        		},				
					showBorders: true,
					showRowLines: true,
					rowAlternationEnabled: true,
				}).dxDataGrid("instance")
			}
			
			function abreTelaFaturamento(tabela,categoria,item){
				 popupOptions = {
			        width: "90%",
			        height: "90%",
			        showTitle: true,
			        title: "Regras de Faturamento",
			        visible: true,
			        dragEnabled: false,
			        closeOnOutsideClick: false,
					toolbarItems: [{
						location:"before",
						toolbar :"top",
					},{
						widget: "dxButton",
						location:"before",
						toolbar:"bottom",
						options: { 
							width	: "130px",
							type	: "default",
							icon	: "close",
                			text	: "Fechar", 
                			onClick : function(){
	                			$("#openPopupNovaRegra").dxPopup("hide")
	                		}
						}
					},{
						widget: "dxButton",
						location:"after",
						toolbar:"bottom",
						options: { 
							visible	: true,
							width	: "130px",
							type	: "default",
							icon	: "check",
                			text	: "Confirmar", 
                			onClick : function(){
	                			regras = $("#contentPopupNovaRegra").dxForm("instance")
	                			if (!regras.validate().isValid){
		                			DevExpress.ui.notify("Há campos pendentes de preenchimento", "warning", 4000);
		                			return
	                			}
								$.post(urlPreparacao,{
									method			: "confirmaRegraFaturamento",
									organizacao		: $("#divClientes").dxForm("instance").option("formData").organizacao,
									campos			: JSON.stringify(regras.option("formData"))
								},function(retorno){
									if (retorno.status==0){
										DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
										return
									}
									campoAlterado(1)
									$("#dataGridRegrasAplicadas").dxDataGrid("instance").refresh()
									salvarDados(1)
									$("#openPopupNovaRegra").dxPopup("hide")
								},'json')

	                		}
						}
					}]			        
			    }	
			    $("#openPopupNovaRegra").remove()
			    $(document.body).append("<div id='openPopupNovaRegra'></div>")
	   			$("#openPopupNovaRegra").html("<div id='contentPopupNovaRegra'></div>")
				$("#openPopupNovaRegra").dxPopup(popupOptions)
				preparaTelaFaturamento(tabela,categoria,item)

			}
			
			function preparaTelaFaturamento(tabela,categoria,item){
		  		$.getJSON(urlPreparacao,{
			  		method		:"getDadosFaturamento",
			  		tabela		: tabela,
			  		categoria	: categoria,
			  		item		: item,
			  		organizacao	: $("#divClientes").dxForm("instance").option("formData").organizacao,
			  		convenio	: $("#convenioList").dxList("instance").option("selectedItem").id
			  	},function(retorno){
					$("#contentPopupNovaRegra").dxForm({
						formData			: retorno.formFaturamento,
						scrollingEnabled	: true,
					    activeStateEnabled	: true,
					    minColWidth			: 50,
					    screenByWidth: function (width) {
					        return "lg";
					    },
					    height: function () {
					        return window.innerHeight - 170
					    },
					    width	: "100%",
					    alignItemLabels: true,
					    alignItemLabelsInAllGroups: true,
					    items		: [{
						    cssClass	: "first-group",
						    itemType	: "group",
						    name		: "primeiroGrupo",
						    colCount	: 12,
							items		: [{
								itemType	: "group",
								name		: "grpParticular",
								visible		: false,
								colSpan		: 12,
								colCount	: 12,
								items		: [{
								dataField	: "limiteDesconto",
								    colSpan		: 4,
								    label		: {
									    alignment: "right",
									    text	: "Limite de Desconto (%)"
								    },
								    editorType	: "dxNumberBox",
								},{
									itemType	: "empty",
									colSpan		: 8
								},{
									colSpan		: 12,
									dataField	: "nfDetalhe",
								    label		: {
									    alignment: "right",
									    text	: "NF deve apresentar o detalhamento da conta?",
									   	showColon: false
								    },
								    editorType	: "dxSwitch",
								    editorOptions : {
									    switchedOnText:"Sim",
									    switchedOffText:"Não",
								    }
								}]
							},{
								colSpan		: 12,
								itemType	: "group",
								caption		: "Inelegibilidade",
								name		: "grpInelegibilidade",
								cssClass	: "second-group",
								colCount	: 12,
								items		: [{
									colSpan		: 3,
									dataField	: "inelegivel",
								    label		: {
									    alignment: "right",
									    text	: "Ativar Inelegibilidade?",
									    showColon: false
								    },
								    editorType	: "dxSwitch",
								    editorOptions : {
									    switchedOnText:"Sim",
									    switchedOffText:"Não",
								    }
								}]
							},{
								colSpan		: 12,
								itemType	: "group",
								caption		: "Carteirinha",
								name		: "grpConvenio",
								visible		: false,
								cssClass	: "second-group",
								colCount	: 12,
								items		: [{
									colSpan		: 3,
									dataField	: "obrigatorioNumCarteirinha",
								    label		: {
									    alignment: "right",
									    text	: "Obrigatório o nº da carteirina?",
									    showColon: false
								    },
								    editorType	: "dxSwitch",
								    editorOptions : {
									    switchedOnText:"Sim",
									    switchedOffText:"Não",
								    }
								},{
									colSpan		: 3,
									dataField	: "mascara",
								    label		: {
									    alignment: "right",
									    text	: "Máscara"
								    },
								},{
									colSpan		: 3,
									dataField	: "minimoCaracteres",
								    label		: {
									    alignment: "right",
									    text	: "Mínimo de Caracteres"
								    },
								},{
									colSpan		: 3,
									dataField	: "maximoCaracteres",
								    label		: {
									    alignment: "right",
									    text	: "Máximo de Caracteres"
								    },
								}]
							},{
								colSpan		: 12,
								itemType	: "group",
								caption		: "Configurações TISS",
								cssClass	: "second-group",
								name		: "grpTISS",
								colCount	: 12,
								items		: [{
									colSpan		: 12,
									dataField	: "versaoTISS",
								    label		: {
									    alignment: "right",
									    text	: "Versão da Guia TISS"
								    },
								    editorType	: "dxSelectBox",
								    editorOptions : {
									    showClearButton : true,
									    dataSource	: dataSourceVersaoTISS,
					    		        valueExpr: "codigo", 
										displayExpr: "descricao",
								    }
								    
								},{
									visible		: true,
									colSpan		: 6,
									dataField	: "categoriaTISS",
								    label		: {
									    alignment: "right",
									    text	: "Categoria TISS"
								    },
								    editorType	: "dxSelectBox",
								    editorOptions : {
									    showClearButton : true,
									    dataSource	: dataSourceCategoriaTISS,
					    		        valueExpr: "codigo", 
										displayExpr: "descricao",
								    }
								},{
									visible		: true,
									colSpan		: 6,
									dataField	: "familiaTISS",
								    label		: {
									    alignment: "right",
									    text	: "Família TISS"
								    }
								}]
							},{
								colSpan		: 3,
								itemType	: "group",
								caption		: "Consultas",
								cssClass	: "second-group",
								items		: [{
									dataField	: "guiaAutorizacaoConsulta",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Guia de autorização?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "senhaAutorizacaoConsulta",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Senha de autorização?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "numGuiaOperadoraConsulta",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Nº Guia Operadora?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "codigoPrestadorConsulta",
							    	label		: {
								    	alignment: "right",
								    	text	: "Possuí código do prestador?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								}]
							},{
								colSpan		: 3,
								itemType	: "group",
								caption		: "SP/SADT",
								cssClass	: "second-group",
								items		: [{
									dataField	: "guiaAutorizacaoSPSADT",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Guia de autorização?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "senhaAutorizacaoSPSADT",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Senha de autorização?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "numGuiaOperadoraSPSADT",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Nº Guia Operadora?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "codigoPrestadorSPSADT",
							    	label		: {
								    	alignment: "right",
								    	text	: "Possuí código do prestador?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								}]
							},{
								colSpan		: 3,
								itemType	: "group",
								caption		: "Honorários",
								cssClass	: "second-group",
								items		: [{
									dataField	: "guiaAutorizacaoHonorarios",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Guia de autorização?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "senhaAutorizacaoHonorarios",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Senha de autorização?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "numGuiaOperadoraHonorarios",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Nº Guia Operadora?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "codigoPrestadorHonorarios",
							    	label		: {
								    	alignment: "right",
								    	text	: "Possuí código do prestador?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								}]
							},{
								colSpan		: 3,
								itemType	: "group",
								caption		: "Outras Despesas",
								cssClass	: "second-group",
								items		: [{
									dataField	: "guiaAutorizacaoOutras",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Guia de autorização?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "senhaAutorizacaoOutras",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Senha de autorização?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "numGuiaOperadoraOutras",
							    	label		: {
								    	alignment: "right",
								    	text	: "Obrigatório Nº Guia Operadora?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								},{
									dataField	: "codigoPrestadorOutras",
							    	label		: {
								    	alignment: "right",
								    	text	: "Possuí código do prestador?",
							    		showColon: false
							    	},
							    	editorType	: "dxSwitch",
							    	editorOptions : {
								    	switchedOnText:"Sim",
								    	switchedOffText:"Não",
							    	}
								}]
							}]
					    }]
					})
			  	})

			}			

			function insereNovaRegra(tabela,categoria,item,id){
				 popupOptions = {
			        width: "900px",
			        height: "200px",
			        showTitle: true,
			        title: "Adicionar Regra",
			        visible: true,
			        dragEnabled: false,
			        closeOnOutsideClick: false,
					toolbarItems: [{
						location:"before",
						toolbar :"top",
					},{
						widget: "dxButton",
						location:"before",
						toolbar:"bottom",
						options: { 
							width	: "130px",
							type	: "default",
							icon	: "close",
                			text	: "Fechar", 
                			onClick : function(){
	                			$("#openPopupNovaRegra").dxPopup("hide")
	                		}
						}
					},{
						widget: "dxButton",
						location:"after",
						toolbar:"bottom",
						options: { 
							visible	: true,
							width	: "130px",
							type	: "default",
							icon	: "check",
                			text	: "Confirmar", 
                			onClick : function(){
	                			regras = $("#contentPopupNovaRegra").dxForm("instance")
	                			if (!regras.validate().isValid){
		                			DevExpress.ui.notify("Há campos pendentes de preenchimento", "warning", 4000);
		                			return
	                			}
								$.post(urlPreparacao,{
									method			: "confirmaRegra",
									campos			: JSON.stringify(regras.option("formData"))
								},function(retorno){
									if (retorno.status==0){
										DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
										return
									}
									campoAlterado(1)
									$("#dataGridRegrasAplicadas").dxDataGrid("instance").refresh()
									salvarDados(1)
									$("#openPopupNovaRegra").dxPopup("hide")
								},'json')

	                		}
						}
					}]			        
			    }	
			    $("#openPopupNovaRegra").remove()
			    $(document.body).append("<div id='openPopupNovaRegra'></div>")
	   			$("#openPopupNovaRegra").html("<div id='contentPopupNovaRegra'></div>")
				$("#openPopupNovaRegra").dxPopup(popupOptions)
				preparaTelaNovaRegra(tabela,categoria,item,id)
			}
			
			function preparaTelaNovaRegra(tabela,categoria,item,id){
				$.getJSON(urlPreparacao,{
                    method		:"recRegra",
                    codigo		: id,
                    tabela		: tabela,
                    categoria	: categoria,
                    item		: item,
                    convenio	: $("#convenioList").dxList("instance").option("selectedItem").id,
                },function(retorno){
					$("#contentPopupNovaRegra").dxForm({
						formData: {
							situacao	: 1,
							tabela		: tabela,
							categoria	: categoria,
							item		: item,
							convenio	: $("#convenioList").dxList("instance").option("selectedItem").id,
							regra		: id,
							situacao	: !retorno.inativa
						},
					    activeStateEnabled	: true,
					    alignItemLabels: true,
					    alignItemLabelsInAllGroups: true,
					    onContentReady: function(){
						    dataSourceRegras.reload()
					    },
					    screenByWidth: function (width) {
					        return "lg";
					    },
						scrollingEnabled	: true,
						colCount	: 12,
					    items		: [{
						    colSpan		: 9,
						    dataField	: "regra",
						    label		: {
							    alignment: "right",
							    text	: "Regra"
						    },
						    editorType	: "dxSelectBox",
							validationRules: [{ type: "required" }],
							editorOptions: {
								dataSource: dataSourceRegras,
			    		        valueExpr: "codigo", 
								displayExpr: "descricao",
								searchEnabled: true,
								showClearButton : true,
								disabled	: (id==null)||(id=="")?false:true,
			                	buttons: ["clear",{
				                	name	: "btnHelp",
				                    location: "after",
				                    options: {
				                        stylingMode: "text",
				                        icon: "far fa-question-circle",
				                        ajuda: "Selecione a regra a ser aplicada<br><br><i>Tipo de campo: Cadastro de Regras Comerciais</i>",
				                        onClick: function(e) {
					                        exibeHelp(e)
				                        }
				                    }
			                	}, "dropDown",{
				                	name	: "btnCriaNovaRegra",
									location:"after",
									options:{
										icon	: "add",
										hint	: "Criar nova regra",
										type	: "default",
										stylingMode : "contained",
										onClick	: function(){
											adicionarNovaRegra()
										}
									}
								}]
			                }				            
					    },{
						    colSpan		: 2,
						    dataField	:	"situacao",
						    label		: {
							    alignment: "right",
							    text	: "Ativo?",
							    showColon: false
						    },
						    editorType	: "dxSwitch",
						    editorOptions : {
							    switchedOnText:"Sim",
							    switchedOffText:"Não",
						    }
					    },{
						    itemType	: "button",
						    name		: "validade",
							horizontalAlignment: "left",
					    	buttonOptions: {
						    	type	: retorno.comValidade?"danger":"normal",
						    	icon	: "clock",
						    	hint	: retorno.msgRetorno,
						    	onClick : function(){
							    	ativaIntervalo()
							    }
					    	}
					    },{
						    colSpan		: 12,
						    dataField	: "cliente",
						    disabled	: true,
						    label		: {
							    alignment	: "right",
							    text		: "Convênio",
						    },
						    editorType	: "dxTextBox",
						    editorOptions: {
						    	value		: $("#convenioList").dxList("instance").option("selectedItem").caminho
						    }
						    
					    }]
					})
                })
			}
			
			function ativaIntervalo(){
		  		$.getJSON(urlPreparacao,{
			  		method:"recIntervaloAtual"
			  	},function(resp){
					popupOptions = {
				        width: "700px",
				        height: "300px",
				        showTitle: true,
				        title: "Alterar Vigência da Regra",
				        visible: true,
				        dragEnabled: false,
				        position: { at: "top", my: "top"},
				        closeOnOutsideClick: false,
						toolbarItems: [{
							location:"before",
							toolbar :"top",
						},{
							widget: "dxButton",
							location:"before",
							toolbar:"bottom",
							options: { 
								width	: "130px",
								type	: "default",
								icon	: "close",
	                			text	: "Fechar", 
	                			onClick : function(){
		                			$("#openPopupIntervalo").dxPopup("hide")
		                		}
							}
						},{
							widget: "dxButton",
							location:"after",
							toolbar:"bottom",
							options: { 
								visible	: true,
								width	: "130px",
								type	: "default",
								icon	: "check",
	                			text	: "Confirmar", 
	                			onClick : function(){
		                			intervalo = $("#pesquisaPopupIntervalo").dxForm("instance")
		                			if (!intervalo.validate().isValid){
			                			DevExpress.ui.notify("Há campos pendentes de preenchimento", "warning", 4000);
			                			return
		                			}
									$.post(urlPreparacao,{
										method			: "confirmaIntervalo",
										campos			: JSON.stringify(intervalo.option("formData"))
									},function(retorno){
										if (retorno.status==0){
											DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
											return
										}
										validade = $("#contentPopupNovaRegra").dxForm("instance").getEditor("validade")
										if (retorno.comValidade){
											validade.option("type","danger")
										}else{
											validade.option("type","normal")
										}
										validade.option("hint",retorno.msgRetorno)
										$("#openPopupIntervalo").dxPopup("hide")
									},'json')
		                		}
							}
						}]			        
				        
				    }	
				    $("#openPopupIntervalo").remove()
				    $(document.body).append("<div id='openPopupIntervalo'></div>")
		   			$("#openPopupIntervalo").html("<div id='pesquisaPopupIntervalo'></div>")
					$("#openPopupIntervalo").dxPopup(popupOptions)
					$("#pesquisaPopupIntervalo").dxForm({
						scrollingEnabled	: true,
					    activeStateEnabled	: true,
					    screenByWidth		: function (width) {
					        return "lg";
					    },
					    formData	: resp.formData,
					    onFieldDataChanged: function(e){
						    if (e.value==undefined) return
						    if (e.dataField=="validoDe"){
							    e.component.getEditor("dataDe").option("disabled",!e.value)
						    }
						    if (e.dataField=="validoAte"){
								e.component.getEditor("dataAte").option("disabled",!e.value)
						    }
					    },
					    alignItemLabels: true,
					    alignItemLabelsInAllGroups: true,
					    colCount	: 2,
					    onContentReady: function(){
						    montaGridVigencias()
					    },
					    items		: [{
						    itemType	: "group",
						    items		: [{
							    dataField	: "validoDe",
							    label		: {
								    text	: "Válido de"
							    },
							    validationRules: [{ type: "required" }],        
							    editorType	: "dxRadioGroup",
							    editorOptions: {
								    dataSource : [{id:0,text:"Sempre"},{id:1,text:"Data"}],
								    valueExpr	: "id",
								    displayExpr : "text"
							    }
						    },{
							    dataField	: "dataDe",
							    editorType	: "dxDateBox",
							    label		: {
								    visible	: false
							    },
							    validationRules: [{ type: "required" }],        
							    editorOptions: {
								    disabled: !resp.formData.validoDe,
	    		                	placeholder:"Informe a data/hora inicial...",
								    type	: "datetime",
								    openOnFieldClick:true,
								    showAnalogClock:false,
								    showClearButton: true,
								    onValueChanged: function (e) {
					 					var form = $("#pesquisaPopupIntervalo").dxForm("instance");
					 					if (e.value == "" || e.value == null) {
	            							form.getEditor("dataAte").option("min", null);
					 					}else{
	            							form.getEditor("dataAte").option("min", e.value);
					 					}
	        						}

							    }
						    }]
					    },{
						    itemType	: "group",
						    items		: [{
							    dataField	: "validoAte",
							    label		: {
								    text	: "Até"
							    },
							    validationRules: [{ type: "required" }],        
							    editorType	: "dxRadioGroup",
							    editorOptions: {
								    dataSource : [{id:0,text:"Sempre"},{id:1,text:"Data"}],
								    valueExpr	: "id",
								    displayExpr : "text"
							    }
						    },{
							    dataField	: "dataAte",
							    editorType	: "dxDateBox",
							    label		: {
								    visible	: false
							    },
							    validationRules: [{ type: "required" }],        
							    editorOptions: {
								    disabled: !resp.formData.validoAte,
	    		                	placeholder:"Informe a data/hora final...",
								    type	: "datetime",
								    openOnFieldClick:true,
								    showAnalogClock:false,
								    showClearButton: true,
								    onValueChanged: function (e) {
					 					var form = $("#pesquisaPopupIntervalo").dxForm("instance");
					 					if (e.value == "" || e.value == null) {
	            							form.getEditor("dataDe").option("max", null);
					 					}else{
	            							form.getEditor("dataDe").option("max", e.value);
					 					}
	        						}
							    }
						    }]
					    },{
						    colSpan	: 2,
						    template: "<div id='divGridVigencia'>teste</div>"
					    }]
					})
			  	})
			}		
			
			function montaGridVigencias(){
				$("#divGridVigencia").dxDataGrid({
					columns: [{
						dataField	: "periodo",
						caption		: "Período",
					},{
						dataField	: "auditoria",
						width		: "300px"
					}],
					dataSource:  new DevExpress.data.CustomStore({
	            		load: function(args) {
				            return $.getJSON(urlPreparacao,{
	        	            	method	:"recuperaValidacoes"
		        	    	});
	    	    		}	
	    			}),
		    		selection: { mode: "single" },
					hoverStateEnabled: true,
					paging: { enabled: false},
					height: "115px",	
					showBorders: true,
					showRowLines: true,
					rowAlternationEnabled: true,
					columnFixing: {
			            enabled: false
			        }
				})
			}
			
			// Monta popup para adicionar nova regra
			
			function adicionarNovaRegra(){
				 popupOptions = {
			        width: "1000px",
			        height: "550px",
			        showTitle: true,
			        title: "Criar Nova Regra",
			        visible: true,
			        dragEnabled: false,
			        closeOnOutsideClick: false,
					toolbarItems: [{
						location:"before",
						toolbar :"top",
					},{
						widget: "dxButton",
						location:"before",
						toolbar:"bottom",
						options: { 
							width	: "130px",
							type	: "default",
							icon	: "close",
                			text	: "Fechar", 
                			onClick : function(){
	                			$("#openPopupCriaNovaRegra").dxPopup("hide")
	                		}
						}
					},{
						widget: "dxButton",
						location:"after",
						toolbar:"bottom",
						options: { 
							visible	: true,
							width	: "130px",
							type	: "default",
							icon	: "check",
                			text	: "Confirmar", 
                			onClick : function(){
	                			regras = $("#contentPopupCriaNovaRegra").dxForm("instance")
	                			if (!regras.validate().isValid){
		                			DevExpress.ui.notify("Há campos pendentes de preenchimento", "warning", 4000);
		                			return
	                			}

								var abaRegra		= $("#divSubRegra").dxForm("instance")
								$.post(urlRegraComercial,{
									method			: "salvar",
									camposGeral		: JSON.stringify(regras.option("formData")),
									camposRegra		: JSON.stringify(abaRegra.option("formData")),
								},function(retorno){
									DevExpress.ui.notify(retorno.mensagem, retorno.type, 4000);
									if (retorno.status==1){
										$("#contentPopupNovaRegra").dxForm("instance").updateData("regra",retorno.codRegra)
										$("#openPopupCriaNovaRegra").dxPopup("hide")
									}
								},'json')

	                		}
						}
					}]			        
			    }	
			    $("#openPopupCriaNovaRegra").remove()
			    $(document.body).append("<div id='openPopupCriaNovaRegra'></div>")
	   			$("#openPopupCriaNovaRegra").html("<div id='contentPopupCriaNovaRegra'></div>")
				$("#openPopupCriaNovaRegra").dxPopup(popupOptions)
				preparaTelaCriaNovaRegra()
			}
			
			function preparaTelaCriaNovaRegra(){
				criaDataSourceRegras()
				$("#contentPopupCriaNovaRegra").dxForm({
					formData: {
						situacao: 1,
					},
				    activeStateEnabled	: true,
				    alignItemLabels: true,
				    alignItemLabelsInAllGroups: true,
				    height: function () {
				        return window.innerHeight - 170
				    },
				    minColWidth: 50,
				    screenByWidth: function (width) {
				        return "lg";
				    },
				    scrollingEnabled	: true,
				    onFieldDataChanged: function(e){
					    if (e.dataField=="tipo"){
						    abreRegra(e.value)
					    }
					},
					scrollingEnabled	: true,
				    items		: [{
					    itemType	: "group",
					    cssClass	: "first-group",
					    colCount	: 12,
					    items		: [{
						    itemType	: "group",
						    cssClass	: "first-group",
						    colSpan		: 6,
						    colCount	: 12,
							items 	: [{
								colSpan		: 12,
							    dataField	:	"tipo",
							    validationRules: [{ type: "required" }],        
							    label		: {
								    alignment: "right",
								    text	: "Tipo de Regra"
							    },
							    editorType	: "dxSelectBox",
								editorOptions: {
									dataSource: dataSourceTipoRegra,
				    		        valueExpr: "codigo", 
									displayExpr: "descricao",
									searchEnabled: true
				                }				            

						    },{
								colSpan		: 12,
							    dataField	:	"nome",
							    validationRules: [{ type: "required" }],        
							    label		: {
								    alignment: "right",
								    text	: "Nome"
							    }
						    },{
							    colSpan		: 12,
							    dataField	: "descricao",
							    label		: {
								    alignment: "right",
								    text	: "Descrição"
							    }
						    }]
					    },{
						    colSpan		: 6,
						    template	: "<div id='ajuda'></div>"
					    }]
				    },{
					    colSpan		: 12,
					    template	: "<div id='divRegra'>"
				    }]
				})
			}
			
			function abreRegra(regra){
				$("#ajuda").empty()
				if (!regra){
					$("#divSubRegra").remove()
					return
				}
				$("#divRegra").html("<div id='divSubRegra'></div>")
				$("#divRegraAplicada").html("<div id='divSubRegraAplicada'></div>")
		  		$.get(urlRegraComercial,{
			  		method		: "recRegraTipo",
			  		codRegra	: $("#divForm").dxForm("instance").option("formData").regra,
			  		tipo		: regra
			  	},function(retorno){
				  	eval("var retorno = "+retorno)
				  	if (retorno.helpText){
				  		$("#ajuda").html("<div class='destaque'><i class='fas fa-info-circle' style='font-size:18px;color:#337ab7'></i>&nbsp;&nbsp;"+retorno.helpText+"</div>")
				  	}
					$("#divSubRegra").dxForm({
						scrollingEnabled	: true,
					    activeStateEnabled	: true,
					    minColWidth			: 50,
					    formData			: retorno.formData,
					    screenByWidth		: function (width) {
					        return "lg";
					    },
					    onFieldDataChanged: function(e){
						    if (e.value==undefined) return
						    campoAlterado(1)
						    var obj = e.component.itemOption("regra."+e.dataField)
						    if (obj==undefined) return
						    if (obj.elementAttr){
							    if (obj.elementAttr.ocultaExibe){
								    var oculta = obj.elementAttr.ocultaExibe
								    ocultaExibe(oculta,oculta.split("^")[e.value-1])
							    }
							    if (obj.elementAttr.atualizaDataSource){
								    var dados = obj.elementAttr.atualizaDataSource.split("^")
								    var formulario = $("#divSubRegra").dxForm("instance")
								    e.component.updateData(dados[0],"")
								    editor = e.component.getEditor(dados[0])
								    editor.option("disabled",false)
								    //eval(dados[1]+"="+e.value)
								    eval("dataSource"+dados[2]+".pageIndex(0)")
								    eval("dataSource"+dados[2]+".reload()")
							    }
							    
						    }
						},
					    alignItemLabels: true,
					    alignItemLabelsInAllGroups: true,
					    items		: retorno.items
					})

			  	
			  	})
			}
			
			function ocultaExibe(camposOcultar,campoExibir){
				var camposOcultar = camposOcultar.split("^")
				var formulario = $("#divSubRegra").dxForm("instance")
				formulario.beginUpdate()
				for (var i=0;i<camposOcultar.length;i++){
					formulario.itemOption("regra."+camposOcultar[i],"visible",false)
				}
				formulario.itemOption("regra."+campoExibir,"visible",true)
				formulario.endUpdate()
				return
			}
			
			function criaDataSourceRegras(){
					dataSourceRegra = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
							loadMode: "raw",
				            load: function(args) {
			                   	console.log("getRegras",args.searchValue)
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getRegras",
		                        	skip:args.skip,
		                        	take:args.take,
		                        	filter:JSON.stringify(args.filter),
		                        	searchValue:args.searchValue
				                });
			                }
			            })
			        })		        

					dataSourceTipoRegra = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
		                loadMode: "raw",
			            load: function(args) {
		                    return $.getJSON(urlRegraComercial,{
		    	            	method	:"getINPARA",
		    	            	chave	: "TIPOSREGRASCOMERCIAIS"
			                });
			                }
			            })
			        })		        

					dataSourceTabelaComercial = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
				            byKey: function(args) {
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getTabelaComercial",
		        	            	codigo	: args
				                });
			                },
				            load: function(args) {
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getTabelaComercial",
		        	            	take	: JSON.stringify(args.take),
		        	            	skip	: JSON.stringify(args.skip),
		        	            	searchValue:args.searchValue
				                });
			                }
			            })
			        })		        

					dataSourceItemTabelaComercial = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
				            byKey: function(args) {
					            var tabela = $("#divSubRegra").dxForm("instance").option("formData").tabelaComercial
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getTabelaComercialItens",
			    	            	tabela	: tabela,
		        	            	codigo	: args
				                });
			                },
				            load: function(args) {
					            var tabela = $("#divSubRegra").dxForm("instance").option("formData").tabelaComercial
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getTabelaComercialItens",
			    	            	tabela	: tabela,
		        	            	take	: JSON.stringify(args.take),
		        	            	skip	: JSON.stringify(args.skip),
		        	            	searchValue:args.searchValue
				                });
			                }
			            })
			        })		        

			        

					dataSourceAreasAplicacao = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
				        loadMode: "raw",
			            load: function(args) {
		                    return $.getJSON(urlRegraComercial,{
		    	            	method	:"getINPARA",
		    	            	chave	: "FATURAMENTOETAPAS",
	        	            	take	: JSON.stringify(args.take),
	        	            	skip	: JSON.stringify(args.skip),
	        	            	searchValue:args.searchValue
			                });
			                }
			            })
			        })	



					dataSourceTipoGuia = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
				            loadMode: "raw",
				            load: function(args) {
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getINPARA",
			    	            	chave	: "FATTIPODEGUIA",
			    	            	showKey	: 0
				                });
			                }
			            })
			        })		        

					dataSourceTipoAtendimento = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
							byKey: function(args) {
					            var tabela = $("#divSubRegra").dxForm("instance").option("formData").tipoGuia
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getTipoAtendimentoDataSource",
			    	            	tabela	: "FATTIPODEGUIAATEN"+tabela,
		        	            	codigo	: args
				                });
			                },
				            load: function(args) {
					            var tabela = $("#divSubRegra").dxForm("instance").option("formData").tipoGuia
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getTipoAtendimentoDataSource",
			    	            	tabela	: "FATTIPODEGUIAATEN"+tabela,
		        	            	take	: JSON.stringify(args.take),
		        	            	skip	: JSON.stringify(args.skip),
		        	            	searchValue:args.searchValue
				                });
			                }			            
			            })
			        })		        

					dataSourceStatusCobranca = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
				            loadMode: "raw",
				            load: function(args) {
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getINPARA",
			    	            	chave	: "STATUSCOBRANCAFAT",
			    	            	showKey	: 0
				                });
			                }
			            })
			        })		        

					dataSourceDocumentos = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
				            loadMode: "raw",
				            cacheRawData: true,
				            load: function(args) {
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getINPARA",
			    	            	chave	: "TIPOSDOCUMENTOS",
		        	            	take	: JSON.stringify(args.take),
		        	            	skip	: JSON.stringify(args.skip),
			    	            	showKey	: 0
				                });
			                }
			            })
			        })		
			        
					dataSourceINARTProcedimento = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
				            byKey: function(args) {
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getINARTProcedimento",
		                        	codigo	: args
				                });
			                },
				            load: function(args) {
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getINARTProcedimento",
		                        	skip	: args.skip,
		                        	take	: args.take,
		                        	filter	: JSON.stringify(args.filter),
		                        	searchValue:args.searchValue
				                });
			                }
			            })
			        })	

					dataSourceINARTProcedimentoComposto = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
				            loadMode: "raw",
				            load: function(args) {
					            var itemINART = $("#divSubRegra").dxForm("instance").option("formData").itemINART
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getINARTProcedimentoComposto",
			    	            	procedimento	: itemINART,
				                });
			                }
			            })
			        })	

					dataSourceGrupoPermissao = 	new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
				            loadMode: "raw",
				            load: function(args) {
			                    return $.getJSON(urlRegraComercial,{
			    	            	method	:"getGrupoPermissao"
				                });
			                }
			            })
			        })	
			}
			
			// Monta aba 'Regras'
			function montaAbaRegras(){
				$.getJSON(urlPreparacao,{
			  		method:"getTabelasRegras"
			  	},function(resp){
					$("#divRegras").dxForm({
					    activeStateEnabled	: true,
					    alignItemLabels: true,
					    alignItemLabelsInAllGroups: true,
					    height: function () {
					        return window.innerHeight - 170
					    },
					    onContentReady: function(){
						    if (resp.length>0){
						    	montaAbaRegraEspecifica(resp[0].dataField)
						    }
						    resizeMe()
					    	
					    },
					    minColWidth: 50,
					    screenByWidth: function (width) {
					        return "lg";
					    },
						scrollingEnabled	: true,
					    items		: [{
					    	itemType	:	"button",
							horizontalAlignment: "left",
				            buttonOptions: {
						        icon: "far fa-list-alt",
					    	    type: "default",
					        	text: "Regras no Acordo",
					        	hint: "Inserir Regras no Acordo",
					        	elementAttr: {
					            id: "divRegrasNoAcordo",
					        	},
					        	onClick: function() {
					            	abrePainelRegras('','','')
					        	}
					        }

					    },{
						    cssClass: "first-group",
			                dataField: "filtroItem",
						    label		: {
							    alignment: "right",
							    text	: "Pesquisar Itens"
						    },
			                visible	: resp.length<=0?false:true,
			                editorOptions:{
				                onValueChanged: function(){
				                	pesquisaItensTabela()
				                },
				                onEnterKey: function(){
				                	pesquisaItensTabela()
				                },
				                showClearButton : true,
				                placeholder:"Pesquisar por itens nas tabelas comerciais...",
							    buttons: ["clear",{
								    name	: "btnHelp",
				                    location: "after",
				                    options: {
				                        stylingMode	: "text",
				                        icon		: "far fa-question-circle",
				                        ajuda		: "Informe parte do código, da descrição, da categoria ou dos itens cobráveis dos itens para realizar a busca pelas tabelas do acordo comercial.<br><br><i>Tipo de campo: Alphanumérico</i>",
				                        onClick		: function(e) {
					                        exibeHelp(e)
				                        }
				                    }
			                	},{
								    name	: "btnFind",
				                    location: "after",
				                    options: {
				                        stylingMode	: "text",
				                        icon		: "search",
				                        onClick		: function(e) {
					                        pesquisaItensTabela()
				                        }
				                    }
			                	}],
			                }
			            },{
							itemType: "tabbed",
							name: "abas",
							tabPanelOptions: {
								deferRendering: false,
								itemTitleTemplate: function(e){
									return e.title
								},
				                onOptionChanged: function(e){
					                if (e.name=="selectedItem"&&e.value){
					                	montaAbaRegraEspecifica(e.value.dataField)
					                }
				                }
							},
							tabs: resp,
							visible	: resp.length<=0?false:true
					    }] 
					})
			  	})
			}
			
			function pesquisaItensTabela(){
	            abas = $("#divRegras").dxForm("instance").getEditor("abas")
	            var idAtual = abas.option("selectedItem").dataField
	            $("#aplicaRegraRight"+idAtual).dxDataGrid("instance").getDataSource().reload()
			}
			// Monta Aba da regra comercial especifica por tabela comercial
			function montaAbaRegraEspecifica(id){
				$("#regrasComerciais"+id).dxForm({
					scrollingEnabled	: true,
				    activeStateEnabled	: true,
				    minColWidth			: 50,
				    readOnly			: true,
				    screenByWidth		: function (width) {
				        return "lg";
				    },
				    onContentReady: function(){
					    montaAplicaRegra(id)
					    resizeMe()
				    },
				    alignItemLabels: true,
				    alignItemLabelsInAllGroups: true,
				    colCount	: 12,
				    items		: [{
					    colSpan	: 3,
					    itemType: "group",
					    caption : "Categorias",
       			        cssClass: "second-group",
					    items	:[{
					    	template: "<div id='aplicaRegraLeft"+id+"' class='aplicaRegrasLeft'></div>"
					    }]
				    },{
					    colSpan	: 9,
					    itemType: "group",
					    caption : "Itens",
       			        cssClass: "second-group",
					    items	:[{
						    template: "<div id='aplicaRegraRight"+id+"' class='aplicaRegrasRight'></div>"
					    }]
				    }]
				})
			}
			// Monta paineis da aba 'Regras Comerciais'
			function montaAplicaRegra(tabela){
				categoriaFilter = ""
	            $.getJSON(urlPreparacao,{
	            	method	:"getParametrosTabela",
	            	tabela	: tabela
    	    	},function(retorno){
			        $("#aplicaRegraLeft"+tabela).dxTreeView({
						dataSource:  new DevExpress.data.CustomStore({
		            		load: function(args) {
					            return $.getJSON(urlPreparacao,{
		        	            	method	:"getTabelaComercialCategorias",
		        	            	tabela	: tabela
			        	    	});
		    	    		}	
		    			}),
		    			itemTemplate: function(itemData, itemIndex, itemElement){
								cor = "";
								if (itemData.regrasFatCategoria == 1) cor = "orange";
			    			itemElement.append("<i class='far fa-list-alt' style='color:"+cor+";' title='Inserir Regras na categoria' onclick=abrePainelRegras('"+tabela+"','"+itemData.id+"','')></i>&nbsp;&nbsp;" + itemData.text);
			    		},
			    		onSelectionChanged: function (e){
			        		var selectedFields = e.component.getSelectedNodes()
				    		categoriaFilter = ""
				    		if (selectedFields.length>0){
				    			categoriaFilter = selectedFields[0].key
				    		}
				    		$("#aplicaRegraRight"+tabela).dxDataGrid("instance").getDataSource().reload()
			        	},
		                searchEnabled: true,
		                searchEditorOptions: {
		                	placeholder:"Pesquisar por categorias...",
		                	showClearButton: true,
						    buttons: ["clear",{
							    name	: "btnHelp",
			                    location: "after",
			                    options: {
			                        stylingMode	: "text",
			                        icon		: "far fa-question-circle",
			                        ajuda		: "Informe parte do código ou do nome da categoria para filtrar os resultados.<br><br><i>Tipo de campo: Alfanumérico</i>",
			                        onClick		: function(e) {
				                        exibeHelp(e)
			                        }
			                    }
		                	}]
		                	
		                },
		                selectByClick: true,
		                selectionMode: "single",
		                focusStateEnabled:false,
					}).dxTreeView("instance")

			        $("#aplicaRegraRight"+tabela).dxDataGrid({
				        columns:[{
					        dataField	: "Regras",
					        cellTemplate: function (container, options){
						        cor = "";
						        if (options.data.regrasFatItem == 1) cor = "orange";
						        $("<div>")
						        	.append($("<i>",{
							        	class	:	'far fa-list-alt',
							        	title	:	'Inserir Regras no item',
							        	style	:	'cursor:pointer;color:'+cor+";",
						       		}))
						       		.appendTo(container);
					        },
					        width		: "50px",
					        alignment	: "center",
					        allowExporting: false,
					        allowFiltering: false,
					        allowHeaderFiltering: false,
					        allowHiding: false,
					        allowReordering: false,
					        allowResizing: false,
					        allowSearch: false,
					        allowSorting: false
				        },{
							dataField	: "CodigodoItem",
							caption		: "Código",
							width		: "90px"
					   	},{
							dataField	: "DescricaodoItem",
							caption		: "Descrição"
					   	},{
							dataField	: "CategoriadoItem",
							caption		: "Categoria"
					   	},{
							dataField	: "itensCobraveis",
							caption		: "Itens Cobráveis"
					   	},{
							dataField	: "ValordoItem",
							caption		: "Valor",
							dataType	: "number",
							visible		: retorno.unidadeMonetaria==""?false:true,
							format		: retorno.unidadeMonetaria+" #,##0"+retorno.casasDecimais
					   	}],
						dataSource:  new DevExpress.data.CustomStore({
		            		load: function(args) {
			            		var deferred = $.Deferred()
			            		var filtro = $("#divRegras").dxForm("instance").option("formData").filtroItem
			            		if (filtro){
				            		vet = []
				            		vetor = []
				            		vetor.push("DescricaodoItem")
				            		vetor.push("contains")
				            		vetor.push(filtro)
				            		vet.push(vetor)
				            		vet.push("or")
				            		vetor = []
				            		vetor.push("CategoriadoItem")
				            		vetor.push("contains")
				            		vetor.push(filtro)
				            		vet.push(vetor)
				            		vet.push("or")
				            		vetor = []
				            		vetor.push("ItensCobraveis")
				            		vetor.push("contains")
				            		vetor.push(filtro)
				            		vet.push(vetor)
				            		args.filter = vet
			            		}
					            $.getJSON(urlPreparacao,{
		        	            	method	:"getTabelaComercialItens",
		        	            	tabela	: tabela,
		        	            	filtro	: $("#divRegras").dxForm("instance").option("formData").filtroItem,
		        	            	filter	: JSON.stringify(args.filter),
		        	            	sort	: JSON.stringify(args.sort),
		        	            	take	: JSON.stringify(args.take),
		        	            	skip	: JSON.stringify(args.skip),
		        	            	categoriaFilter : categoriaFilter
			        	    	},function(result){
									deferred.resolve(
										result.data, {
											totalCount: result.totalCount
										});
								});
								return deferred.promise();
		    	    		}	
		    			}),
		    			remoteOperations	: true,
		    			onCellClick: function(e){
			    			if (e.column.dataField="Regras"){
			    				abrePainelRegras(tabela,'',e.data.sequencia)
			    			}
			    		},
						filterRow: { visible: true },
						hoverStateEnabled: true,
						paging: { enabled: true, pageSize: 25 },
						pager: {
							showInfo				: true,
							showNavigationButtons 	: true,
				            showPageSizeSelector	: true,
		        		},		
						showBorders: true,
						showRowLines: true,
						rowAlternationEnabled: true,
					}).dxDataGrid("instance")
					resizeMe()

	    	   	})
				

			}
			

			// Monta aba 'Orçar'
			function montaAbaOrcar(){
				$("#divOrcar").dxForm({
				    activeStateEnabled	: true,
				    alignItemLabels: true,
				    alignItemLabelsInAllGroups: true,
				    height: function () {
				        return window.innerHeight - 170
				    },
				    minColWidth: 50,
				    screenByWidth: function (width) {
				        return "lg";
				    },
					scrollingEnabled	: true,
				    items		: [{
					    itemType	: "group",
					    cssClass	: "first-group",
					    colCount	: 12,
						items 	: [{
							colSpan		: 5,
							dataField	: "item",
							editorType	: "dxSelectBox",
							validationRules: [{ type: "required" }],        
							editorOptions: {
								dataSource	: dataSourceItensOrcar,
			    		        valueExpr	: "CodigodoItem", 
								displayExpr	: "DescricaodoItem",
								searchEnabled: true,
								showClearButton : true,
			                	placeholder:"Selecione o item para orçar...",
							    buttons: ["clear",{
								    name	: "btnHelp",
				                    location: "after",
				                    options: {
				                        stylingMode	: "text",
				                        icon		: "far fa-question-circle",
				                        ajuda		: "Informe um item para realizar o orçamento do mesmo. Por aqui você poderá validar a aplicação de regras realizadas pelo sistema.<br><br><i>Tipo de campo: Cadastro de Itens da Tabela Comercial</i>",
				                        onClick		: function(e) {
					                        exibeHelp(e)
				                        }
				                    }
			                	}, "dropDown"]
			                }			            
					    },{
						    colSpan	: 7,
						    itemType: "group",
						    colCount: 12,
						    items:[{
							    colSpan	: 2,
						    	itemType: "button",
								horizontalAlignment: "right",
						    	buttonOptions: {
							    	type	: "default",
							    	icon	: "fas fa-hand-holding-usd",
							    	text	: "Orçar",
							    	onClick : function(){
								    	orcarItem()
								    }
						    	}
						    },{
							    colSpan	: 3,
						    	itemType: "button",
								horizontalAlignment: "left",
						    	buttonOptions: {
							    	type	: "default",
							    	icon	: "fa fa-eraser",
							    	text	: "Limpar",
							    	onClick : function(){
								    	$("#divOrcar").dxForm("instance").resetValues()
								    	if ($("#divOrcarResult").hasClass("dx-widget")){
								    		$("#divOrcarResult").dxDataGrid("dispose")
								    	}
								    }
						    	}
						    }]
					    },{
						    colSpan	: 12,
					    	template: "<div id='divOrcarResult'></div>",
					    }]
				    }]
				})
			}
			
			function orcarItem(){
				var orcar = $("#divOrcar").dxForm("instance")
				if (!orcar.validate().isValid){
		        	DevExpress.ui.notify("Favor informar o item para realizar o orçamento", "warning", 4000);
			        return
				}
				loadPanel.show()
		  		$.getJSON(urlPreparacao,{
			  		method		: "orcarItem",
			  		codAcordo	: $("#divForm").dxForm("instance").option("formData").acordo,
			  		item		: orcar.option("formData").item,
			  		organizacao	: $("#divClientes").dxForm("instance").option("formData").organizacao,
			  	},function(resp){
				  	loadPanel.hide()
			        if (resp.status == 0) {
       					DevExpress.ui.notify(resp.mensagem, resp.type, 4000);
       					return
			        }
			        $("#divOrcarResult").dxDataGrid({
				        columns:[{
							dataField	: "item",
							caption		: "Item da Tabela",
							width		: "20%"
					   	},{
							dataField	: "categoria",
							caption		: "Categoria",
							width		: "100px"
					   	},{
							dataField	: "convenio",
							caption		: "Convênio / Plano de Saúde"
					   	},{
							dataField	: "qtde",
							caption		: "Quantidade",
							dataType	: "number",
							width		: "100px"
					   	},{
							dataField	: "valor",
							caption		: "Valor Total",
							dataType	: "number",
							width		: "100px",
							format		: "R$ #,##0.00"
					   	},{
							dataField	: "itemCobravel",
							caption		: "Item Cobrável",
					   	},{
						   	dataField	: "nomeTabela",
						   	caption		: "Tabela Comercial",
					   	}],
					   	wordWrapEnabled: true,
					   	noDataText: "Item não atendido no acordo atual",
						masterDetail: {
							autoExpandAll: true,
							enabled: true,
						    template: function(container, options) { 
						    	var currentEmployeeData = options.data;
						    			if (currentEmployeeData.compostos.length>0){
 						                	$("<div>")
						                    	.addClass("master-detail-caption")
						                    	.text("Componentes:")
						                    	.appendTo(container);
								                $("<div>")
								                    .dxDataGrid({
									                    wordWrapEnabled: true,
														columns		: [{
															dataField	: "composto",
															caption		: "Composto",
														},{
															dataField	: "qtde",
															caption		: "Quantidade",
															dataType	: "number",
															format		: "#,##0.##"
														},{
															dataField	: "valor",
															caption		: "Valor",
															dataType	: "number",
															format		: "R$ #,##0.00"
															
														}],
								                        columnAutoWidth: true,
								                        showBorders: true,
								                        dataSource: currentEmployeeData.compostos
								                    }).appendTo(container);
						                    	
						    			}
  						                $("<div>")
						                    .addClass("master-detail-caption")
						                    .text("Regras aplicadas:")
						                    .appendTo(container);
						                $("<div>")
						                    .dxDataGrid({
							                    wordWrapEnabled: true,
												columns		: [{
													dataField	: "nome",
													caption		: "Nome da Regra",
												},{
													dataField	: "tipo",
													caption		: "Tipo da Regra",
												},{
													dataField	: "origem",
													caption		: "Origem da Regra",
												},{
													dataField	: "pontoAplicacao",
													caption		: "Ponto de Aplicação",
												}],
												onCellPrepared: function(e){
													if (e.data&&e.data.inativo){
														e.cellElement[0].style.textDecoration = "line-through"
													}
												},
						                        columnAutoWidth: true,
						                        showBorders: true,
						                        dataSource: currentEmployeeData.regras
						                    }).appendTo(container);
						            }
						        },					   	
					   	dataSource	: resp.dataSource,
						filterRow: { visible: false },
						hoverStateEnabled: true,
						paging: { enabled: false, pageSize: 25 },
						height: "100%",	
						showBorders: true,
						showRowLines: true,
						rowAlternationEnabled: true,
						columnFixing: {
				            enabled: true
				        },
				    })
			  	})
				
			}
			
			// Monta aba 'Controle'
			function montaAbaControle(){
				$("#divControle").dxForm({
					scrollingEnabled	: true,
				    activeStateEnabled	: true,
				    minColWidth			: 50,
				    readOnly			: true,
				    screenByWidth		: function (width) {
				        return "lg";
				    },
				    height: function () {
				        return window.innerHeight - 170
				    },
				    onContentReady:function(){
					    montaGridRegrasAplicadasGeral()
				    },
				    alignItemLabels: true,
				    alignItemLabelsInAllGroups: true,
				    items		: [{
					    cssClass	: "first-group",
					    itemType	: "group",
					    colCount	: 2,
						items		: [{
						    dataField	:	"criadoEm",
						    label		: {
							    alignment: "right",
							    text	: "Criado Em"
						    },
						    editorOptions: {
							    width: "300px"
						    }
						},{
						    dataField	:	"criadoPor",
						    label		: {
							    alignment: "right",
							    text	: "Criado Por"
						    },
						    editorOptions: {
							    width: "300px"
						    }
						},{
						    dataField	:	"alteradoEm",
						    label		: {
							    alignment: "right",
							    text	: "Alterado Em"
						    },
						    editorOptions: {
							    width: "300px"
						    }
						},{
						    dataField	:	"alteradoPor",
						    label		: {
							    alignment: "right",
							    text	: "Alterado Por"
						    },
						    editorOptions: {
							    width: "300px"
						    }
						},{
							colSpan		: 2,
							template	: "<div id=regrasAplicadas></div>"
						}]
				    }]
				})
			}
			
			function montaGridRegrasAplicadasGeral(){
				$("#regrasAplicadas").dxForm({
					items		: [{
						itemType : "group",
						caption : "Regras Aplicadas",
						cssClass : "second-group",
						colCount : 12,
						items : [{
							colSpan	: 12,
							template : "<div id='divSubRegraAplicadaGrid'>"
						}]
					}]
				})
					
				$("#divSubRegraAplicadaGrid").dxDataGrid({
			        columns:[{
						dataField	: "regraComercial",
						caption		: "Regra Comercial",
						width		: "250px",
				   	},{
						dataField	: "tipoRegra",
						caption		: "Tipo de Aplicação",
						width		: "200px",
				   	},{
						dataField	: "ponto",
						caption		: "Ponto de Aplicação"
				   	}],
					dataSource:  new DevExpress.data.CustomStore({
	            		load: function(args) {
				            return $.getJSON(urlPreparacao,{
	        	            	method	:"getRegrasAplicadasGeral",
	        	            	codAcordo	: $("#divForm").dxForm("instance").option("formData").acordo,
		        	    	});
	    	    		}	
	    			}),
					filterRow: { visible: true },
					hoverStateEnabled: true,
					paging: { enabled: true, pageSize: 15 },
					pager: {
						showInfo				: true,
						showNavigationButtons 	: true,
			            showPageSizeSelector	: true,
	        		},		
					showBorders: true,
					showRowLines: true,
					rowAlternationEnabled: true,
					columnFixing: {
			            enabled: true
			        },
					wordWrapEnabled: true,					
				})
				
				resizeMe()

			}
			
			function campoAlterado(flAlterado){
				if (carregarDados) return
				if (alterado != flAlterado){
					alterado = flAlterado
					if (alterado){
						$("#botaoSalvar").removeClass("dx-button-default").addClass("dx-button-success")
					}else{
						$("#botaoSalvar").removeClass("dx-button-success").addClass("dx-button-default")
					}
				}
			}
		</script>
	</body>
</html>
