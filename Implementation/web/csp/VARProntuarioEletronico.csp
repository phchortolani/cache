<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="pt-br">
<script language="Cache" runat="server">
    do ^WWWVAR
 
	set YUSER = $get(%request.Data("YUSER", 1))
    set YBED = $get(%request.Data("YBED", 1)) 
    set YM = $get(%request.Data("YM", 1))
    set YLOCATION = $get(%request.Data("YLOCATION", 1))

    set bird = $$getBirdID^VARCSPUtils(YBED,YUSER)
    set token = $piece(bird,"~",1)
    set userBird = $piece(bird,"~",2)

    set PortCache = $get(%request.CgiEnvs("SERVER_PORT"))
    set PageURL = $get(%request.CgiEnvs("CACHE_URL"))
    set PageName = %request.PageName
    set app = %request.Application
    set host = %request.CgiEnvs("HTTP_HOST")
    set url = "http://"_host_app
	set param="EP=1&YBED="_YBED_"&YUSER="_YUSER_"&YLOCATION="_YLOCATION
	set paramEncrypt = $piece(##class(COM.fwk.ui.csp.CSPUtil).encrypt(param),"id_key=",2)
    set URLPreparacao = "VAR.CSP.VARProntuarioEletronico.cls"
		set URLSetor 			= "VAR.CSP.VARCadastroSalas.cls?YM="_YM_"&YBED="_YBED_"&YUSER="_YUSER_"&EP=1"
    set URLLogin = "COMLogin.cls"
    set URLLink = "www.cls"

    set nomeLocal = YLOCATION_" - "_$$SQLGetLocationName^VARSQL(YLOCATION)

    //Verifica se a sessão
    set status = $$VerifySession^VARCSPUtils(YBED, YUSER, url)
</script>

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Prontuário Eletrônico</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/bootstrap/css/bootstrap.min.css">
    <!-- Font Awesome -->
    <link href=" #(YGIF)#global/plugins/fontawesome/5.4.1/css/all.css" rel="stylesheet" type="text/css">

    <!-- Custom Elements -->
    <link href=" #(YGIF)#global/css/components-rounded.css" rel="stylesheet" id="style_components" type="text/css" />
    <link href=" #(YGIF)#global/css/plugins.css" rel="stylesheet" type="text/css" />
    <link href=" #(YGIF)#global/css/layout.css" rel="stylesheet" type="text/css" />
    <link href=" #(YGIF)#global/css/themes/light.css" rel="stylesheet" type="text/css" id="style_color" />
    <link href=" #(YGIF)#global/css/custom.min.css" rel="stylesheet" type="text/css" />

    <!-- Fonts Padrão IPP -->
    <!--<link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Open+Sans:400,600,700,800">-->

    <!-- DevExtreme themes -->
    <link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.common.css" />
    <!--<link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.light.css" />-->
    <link rel="stylesheet" type="text/css" href=" #(YGIF)#global/plugins/extreme19.2.4/css/dx.light.compact.css" />

	<link href=" #(YGIF)#global/themes/css/alphalinc.css" rel="stylesheet" type="text/css" id="style_color" />
    <style>
    .Padding-R4{
	    padding-right: 4px!important;
    }
    .Padding-L0{
	    padding-left: 0px!important;
    }
    .Padding-L0R0{
	    padding-left: 0px!important;
	    padding-right: 0px!important;
    }
    .Padding-L2R0{
	    padding-left: 2px!important;
	    padding-right: 0px!important;
    }
    .Padding-L4{
	    padding-left: 4px!important;
    }
    .second-group{
	    height:10px!important;
    }
  .grupo-dx{
     padding-top: 0px !important;
     padding-bottom: 0px !important;
     padding-left: 0px !important;
     padding-right: 0px !important;
     margin-top: 3px !important;
     margin-bottom: 3px !important;
     margin-left: 5px !important;
     margin-right: 0px !important;
     background-color: rgba(1, 178, 169, 0.15);
     border-top-right-radius: 5px;
     border-top-left-radius: 5px;
     border-top: 1px solid #E0E0E0;
     border-left: 1px solid #E0E0E0;
     border-right: 1px solid #E0E0E0;
     border-bottom: 1px solid #E0E0E0;
  }
  .grupo-dx .dx-form-group-caption {
		border: 0px solid red;
		margin-left: 3px !important;
		padding-top: 3px !important;
  }	
  .grupo-dx .dx-form-group-content {
	 	background-color: #ffffff;
	 	color: red; 
		padding-left: 5px !important;
		padding-right: 5px !important;
  }    
  .dx-tab.dx-tab-selected{
		background-color: rgba(1, 218, 197, 0.40);
  }
	
	._cpRigth {
		align-self: flex-end !important;
	}
  ._grBtnRight .dx-item-content.dx-box-item-content.dx-box-flex.dx-box {
		justify-content: flex-end !important; 
	}
  ._grBtnRight .dx-item.dx-box-item {
		flex: none !important; 
	}
	._grBtnRight .dx-field-button-item.dx-field-item {
		padding: 0 !important;
		padding-left: .75em !important;
	}
  
		@keyframes fa-blink {
			0% { opacity: 1; }
			50% { opacity: 0.5; }
			100% { opacity: 0; }
		}
		.fa-blink {
			color: red;
			-webkit-animation: fa-blink 2.2s linear infinite;
			-moz-animation: fa-blink 2.2s linear infinite;
			-ms-animation: fa-blink 2.2s linear infinite;
			-o-animation: fa-blink 2.2s linear infinite;
			animation: fa-blink 2.2s linear infinite;
		}	
		
		
</style>

</head>
    <script type="text/javascript">
		var horaInicio = ""
        var status = '#(status)#';
        var URLLogin = '#(URLLogin)#';
        var ygif = '#(YGIF)#'

        if (status == 0) {
            alert('Usuário não está logado ou a sessão expirou.')
            window.location.replace(URLLogin)
        }

    </script>

<body>
	<div id="toolbar"></div>
	<div style='min-width:1000px'>
		<div id="divForm" style='min-width:1000px'></div>
	</div>
	<div id="openPesquisa"></div>
	<div id="openPesquisaCID"></div>
	<div id="openPesquisa1"></div>
	<div id="transcription" style="display:none;"></div>
	<div id="dvAddResultado"></div>
	<div id="dvPopUpResultado"></div>
	<div id="openPesquisaArquivo"></div>
	<div id="dvDialog"></div>
	<div id="dvInsereTexto"></div>
	<div id="viewEvolucao"></div>
	<div id="viewHistorico"></div>
	<div id="viewHistoricoExameFisico"></div>
	<div id="loadpanel"></div>
	<div id="popup"></div>
	<div id="divLoad"></div>
	<div id="copiarProtocolo"></div>
	<div id="novoCodigoProtocolo"></div>
	<div id="idperfil"></div>
	<div id="divEditRelatorio"></div>
	<div style='position:absolute;top:10px;left:15px;'>
		<table>
			<tr>
				<td>
					<img src='#(YGIF)#/birdID.svg' width='50' onclick='verificaBirdID()' style='position:relative;cursor:pointer;#($select(token=0:"display:none",1:""))#'></img>
				</td>
				<td>
					<div id='dvInfoC' style='color:red;font-weight:900'></div>
				</td>
			</tr>
		</table>
	</div>
    <!-- REQUIRED JS SCRIPTS -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src=" #(YGIF)#global/plugins/extreme19.2.4/js/jquery.min.js"></script>

	<!-- JSZip library 
	<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/jszip.min.js"></script>

    <!-- A DevExtreme library 
    <script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/dx.web.js"></script>-->
    
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/jszip.min.js"></script>

		<!-- A DevExtreme library -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/dx.web.js"></script>

		<!-- DevExtreme-Intl module -->
		<script type="text/javascript" src=" #(YGIF)#global/plugins/extreme20.2.4/Lib/js/localization/dx.messages.pt.js"></script>
    <!-- DevExtreme-Intl module -->
    <script type="text/javascript" src=" #(YGIF)#global/plugins/extreme19.2.4/js/localization/dx.messages.pt.js"></script>
    
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src=" #(YGIF)#global/plugins/bootstrap-3.3.7/js/bootstrap.min.js"></script>

    <!--Definições globais e criação de funcionalidades encapsuladas-->
    <script type="text/javascript">
        //Deixando variáveis disponíveis no cliente
        var urlPreparacao = '#(URLPreparacao)#';
				var urlSetor = "#(URLSetor)#";
        var urlLink = '#(URLLink)#';
        var carregaExames = ""
        var YBED = '#(YBED)#';
        var YUSER = '#(YUSER)#';
        var YLOCATION = '#(YLOCATION)#';
        var nomeLocal = '#(nomeLocal)#';
        var formAbreCampo
        var campoAbreCampo
        var atualizarCampoHD = 0;
        var scrollTop = "";
        var tempHistorico = 1;
        
		$.ajaxSetup({
		  headers : {   
		    'id_key' : '#(paramEncrypt)#'
		  }
		});
        
    	objLoad = $("#divLoad").dxLoadPanel({
	    	visible: false,
				message:"Carregando.",
				width: 300,
				heigth: 150
		  }).dxLoadPanel("instance");

				var tamanhoForm = 250
				var codPaciente = ""
				var codPacienteValor = ""
				var gridAdmissoesAbertas = ""
				var gridHistorico = ""
				var gridAdmissoesPassagens = ""
				var histPassagem = ""
		 		var alteracao = 0
		 		var CategoriaAnt = ""
		 		var admissao = ""
		 		var seqReceituario = ""
		 		var seqExame = ""
	 			var receituarioItens = ""
	 			var receituarioRemoveDataHoraImp = ""
				//
		 		var seqDeclaracao = ""
	 			var declaracaoItens = ""
	 			var declaracaoRemoveDataHoraImp = ""
	 			var declaracaoTipoDocumento = ""
				//
		  		var tempoPanel = ""
		  		var gridExamesProtocolo = ""
		  		var flagHistExames = ""
			
			$(document)
				.ajaxSuccess(function(jqxhr, textStatus, error) {
					loadPanel.hide();
				})
				.ajaxError(function(jqxhr, textStatus, error) {
					loadPanel.hide();
				});

             setInterval(function () { 
                 verificaConexao();          
             }, 10000);
		  	
		  	$("#novoCodigoProtocolo").val("")
		  	$("#idperfil").val("")
		  	
		  	function verificaConexao(){
		  		$.getJSON(urlPreparacao,{
			  		method:"verificaConexao"
			  	},function(){
					$("#dvInfoC").html("")
				}).fail(function(jqxhr, textStatus, error) {
					$("#dvInfoC").html("<i class='text-primary fa-blink fas fa-exclamation-triangle' /> Problema de conexão com a internet. Verificar...")
		  		})
		  	}
				var prepareSearchInputs = (function () {
				// Prepara o formulário
			loadPanel = $("#loadpanel").dxLoadPanel({
		        shadingColor: 'rgba(0,0,0,0.1)',
		        visible: false,
		        showIndicator: true,
		        showPane: true,
		        shading: true,
		        closeOnOutsideClick: false,
				onShown: function(){
					clearTimeout(tempoPanel)
		             tempoPanel = setTimeout(function () { 
		                 loadPanel.hide();          
		             }, 15000);
		         }	        
		    }).dxLoadPanel("instance");
			
			popup = $("#popup").dxPopover({showEvent: "mouseenter",hideEvent: "mouseleave"}).dxPopover("instance");

			dados = ""
		 	toolBar = $("#toolbar").dxToolbar({
		        items: [{
			        location: "after",
			        widget	: "dxButton",
			        options	: {
				        icon	: "save",
				        //text	: "Salvar",
				        hint	: "Salvar os Dados",
				        //text	: "Salvar",
				        type	: "success",
				        stylingMode : "contained",
				        onClick	: function(){salvarDados()}
			        }
		        },{
			        location: "after",
			        widget	: "dxButton",
			        options	: {
				        icon	: "fas fa-power-off",
				        hint	: "Encerrar Consulta",
				        type	: "default",
				        stylingMode : "contained",
				        onClick	: function(){
			       			if (alteracao==0){
									var result = DevExpress.ui.dialog.confirm("<i>Confirma a finalização da consulta?", "Confirmação");
								    result.done(function(dialogResult) {
							        if (!dialogResult){
							        	return
							        }
							        loadPanel.show();
							        $.ajaxSetup({async: false});
							        $.getJSON(urlPreparacao,{
								        method:"FinalizaAdmissao", 
								        passagem: formulario.option("formData").Passagem
							        },function(objRetorno){
										if (objRetorno.status == 1) {
											alert("Consulta encerrada com sucesso.");
											location.reload();
										}else{
											DevExpress.ui.notify(objRetorno.status , "warning", 4000);
										}
										$.ajaxSetup({async: true});
										loadPanel.hide();
							        });
							       });
									}else{
										var result = DevExpress.ui.dialog.confirm("<i>Para continuar com a finalização, é necessário salvar os dados. Deseja salvar?", "Confirma armazenamento");
									    result.done(function(dialogResult) {
								        if (!dialogResult){
								        	return
								        }
										salvarDados()
										var result1 = DevExpress.ui.dialog.confirm("<i>Confirma a finalização da consulta?", "Confirmação");
									    result1.done(function(dialogResult1) {
								        if (!dialogResult1){
											DevExpress.ui.notify("Consulta Não finalizada.", "success", 4000);
								        	return
								        }
								        loadPanel.show();
								        $.ajaxSetup({async: false});
								        $.getJSON(urlPreparacao,{
									        method:"FinalizaAdmissao", 
									        passagem: formulario.option("formData").Passagem
									    },function(objRetorno){
											if (objRetorno.status == 1) {
												//codPaciente.option("value","")
												alert("Consulta Salva e Encerrada com sucesso.");
												location.reload();
											}else{
												DevExpress.ui.notify(objRetorno.status , "warning", 4000);
											}
											$.ajaxSetup({async: true});
											loadPanel.hide();
								        });
									    })
								    })
									}
					      }
			        }
		        },{
			        location: "after",
			        widget	: "dxButton",
			        options	: {
				        icon	: "print",
				        hint	: "Imprimir Passagem",
				        type	: "default",
				        stylingMode : "contained",
				        onClick	: function(){imprimeAlta(formulario.option("formData").Passagem)}
			        }
		        },{
			        location: "after",
			        widget	: "dxButton",
			        options	: {
				        icon	: "fa fa-exclamation-circle",
				        hint	: "Imprimir Termo de Consentimento (LGPD)",
				        type	: "default",
				        stylingMode : "contained",
				        onClick	: function(){imprimeLGPD()}
			        }
		        },{
			        location: "after",
			        widget	: "dxButton",
			        options	: {
				        icon	: "fa fa-eraser",
				        hint	: "Limpar os Campos",
				        type	: "default",
				        stylingMode : "contained",
				        onClick	: function(){
					        receituarioItens = ""
					        receituarioRemoveDataHoraImp = ""
					        declaracaoItens = ""
					        declaracaoRemoveDataHoraImp = ""
					        declaracaoTipoDocumento = ""
					        codPaciente.option("value","")
					    }
			        }
		        },{
			        location: "after",
			        widget	: "dxButton",
			        options	: {
				        text	: "PEP Digitalizado",
				        type	: "default",
				        stylingMode : "contained",
				        onClick	: function(){
					        abreListaArquivosVDOC()
					    }
			        }
		        },{
			        location: "after",
			        widget	: "dxButton",
			        options	: {
				        icon	: "far fa-book",
				        hint	: "Manual",
				        type	: "default",
				        stylingMode : "contained",
				        onClick	: function(){
					        window.open(ygif+"PEP/documentos/Manual PEP Medico.pdf")
					    	}
			        }
		        },{
			        location: "after",
			        widget	: "dxButton",
			        options	: {
				        text	: "Consultar Agenda",
				        type	: "default",
				        stylingMode : "contained",
				        onClick	: function(){
					        window.open("http://motion.logplanning.com.br","Motion")
					    	}
			        }
		        },{
			        location: "before",
			        template: "<div style='width:320px;'><span style='color:red'><b>Atenção:</b> Novo formato de informações na aba ANAMNESE.</span></div>" 
		        }]
		    }).dxToolbar("instance")
			formulario = $("#divForm").dxForm({
					activeStateEnabled:true,
			        formData: dados,
			        minColWidth:50,
					screenByWidth: function(width) {
			            return "lg";
			        },
			        onContentReady: function(){
				        carregaPacientes()
				        //carregarPaciente(codPacienteValor)
				    },
						onFieldDataChanged	: function(obj){
							if (toolBar.option("items")[0].disabled){
								return
							}
							if (formulario.option("formData").Passagem == "" || formulario.option("formData").Passagem == null) {
								return	
							}
							if (codPacienteValor == "" || codPacienteValor == null) {
								return	
							}
							dados = {}
							dados.campo = obj.dataField
							dados.valor = obj.value
							$.post(urlPreparacao,{
								method: "salvarDadosParcialAnamnese",
				            paciente	: codPacienteValor,
				            passagem	: formulario.option("formData").Passagem,
										dados		: JSON.stringify(dados)
							},function(retorno){
								if (retorno.status==0){
									DevExpress.ui.notify(retorno.mensagem, retorno.tipo, 4000);
								}
							},'json').fail(function(jqxhr, textStatus, error) {
								var err = textStatus + ", " + error;
					    	DevExpress.ui.notify("Problema no acesso à internet: "+err, "error", 4000);
					  	})
					},				    
					screenByWidth: function(width) {
			            return "lg";
			        },
				    height:function(){
						return window.innerHeight-60
					},
				    alignItemLabels:false,
				    alignItemLabelsInAllGroups:false,
			        items: [{
			            itemType: "group",
			            cssClass: "first-group",
			            colCount: 11,
			            items: [{
			                template: "<div class='form-avatar' style='height:105px;width:105px;'></div>"
			            }, {
			                itemType: "group",
			                colSpan: 4,
			                items: [{
				                itemType: "group",
				                colCount: 15,
				                items	: [{
									cssClass:"Padding-R4",
									colSpan: 14,
				                    dataField	: "Paciente",
				                    template	: function (data, itemElement) {
					                	itemElement.append("<div id='codPaciente'/>")
				                    },
				                    editorOptions: {
				                        
				                    }
				                },{
									cssClass:"Padding-L0",
									itemType: "button",
									horizontalAlignment: "right",
						            buttonOptions: {
								        stylingMode: "outlined",
								        icon: "search",
								        type: "normal",
								        hint: "Pesquisar Pacientes",
								        onClick: function() {
									        abrePesquisaPacientes()
								        }
						            }								
				                }, {
				                    dataField: "Nascimento",
				                    label		: {
										text	: "Nasc."
									},
				                    editorType: "dxDateBox",
				                    colSpan: 6,
				                    editorOptions: {
				                        width: "85px",
				                        height: "28px",
				                        readOnly: true
				                    }
      			                },{
	      			                colSpan: 4,
				                    dataField: "Idade",
				                    editorOptions: {
				                        width: "40px",
				                        height: "28px",
				                        readOnly: true
				                    }
      			                }, {
	      			                colSpan: 5,
				                    dataField: "Sexo",
			    	                editorOptions: {
			        	                width: "90px",
			        	                height: "28px",
			            	            readOnly: true
			                	    }
      			                }, {
	      			                colSpan: 5,
				                    dataField: "Telefone",
			    	                editorOptions: {
			        	                width: "100%",
			        	                height: "28px",
			            	            readOnly: true
			                	    }
      			                }, {
	      			                colSpan: 10,
				                    dataField: "Medico",
														label		: {
															text	: "Médico"
														},
			    	                editorOptions: {
			        	                width: "100%",
			        	                height: "28px",
			            	            readOnly: true
			                	    }
      			                }]
			                }]
		            },{
									itemType: "group",
									colSpan	: 5,
									items: [{
										itemType: "group",
										colCount: 5,
										items: [{
											dataField	: "AlergiasSel",
											editorType: "dxRadioGroup",
											label: { text: "Alergia" },
											editorOptions: {
												dataSource: [{text: "Não", value: "0"},{text: "Sim", value: "1"}], layout: "vertiacal", displayExpr:"text", valueExpr:"value", 
												onValueChanged: function (e) {  
													if (e.value == "1") {
														formulario.getEditor("Alergias").option({disabled: 0});
													}else{
														formulario.getEditor("Alergias").option({disabled: 1, value: ""});
													}
												}
											}
										},{
											colSpan:4,
											dataField	: "Alergias",
											label: { text: "A Que?" },
											editorType	: "dxTextArea",
											editorOptions: {
												readOnly: false,
												height	: 63,
												maxLength: 1000,
												disabled: 1
											}
										}]
									},{
										itemType: "group",
										colCount:2,
										items: [{
											dataField	: "Passagem",
											editorOptions: {
												height: "28px",
												readOnly: true
											}
										},{
											dataField	: "Prontuário",
											editorOptions: {
												height: "28px",
												readOnly: true
											}
										}]
									}]
				        },{
					        itemType: "group",
			                items: [{
			                	template: "<div class='alertas' style='height:80px'>"
			                },{	
			                	template: "<div id='relogio' style='vertical-align:bottom'</div>"
			                }]
			            }]
			        },{
				        cssClass: "second-group",
						itemType: "tabbed",
		                name 	: "abas",
						tabPanelOptions: {
							deferRendering: false,
							animationEnabled: false,
							showNavButtons:true,
							onSelectionChanged: function(e){
								if (e.addedItems[0].title == "Consulta Resultados / Evolutivo") {
									checaArquivo();
								}
							}
 				   		},	
 				   		height:'10px',
						tabs:[{
							title	: "Agenda",
							items: [{
			                    template	: function (data, itemElement) {
				                	itemElement.append("<div id='histAdmissoes'>")
                       		}}],
						},{
							title	: "Agenda Próx. 5 Dias",
							items: [{
			                    template	: function (data, itemElement) {
				                	itemElement.append("<div id='histAdmissoes5'>")
                       		}}],
						},{
							title	: "Histórico de Passagens",
							items: [{
			                    template	: function (data, itemElement) {
				                	itemElement.append("<div id='buscaHist'>")
				                	itemElement.append("<div id='histAdmissoesPassagens'>")
                       		}}],
						},{
							title	: "Anamnese",
							items: [{
			                    template	: function (data, itemElement) {
				                	itemElement.append("<div id='anamnese'></div>")
                       		}}],
						}, {
							title	: "Evolução",
							items: [{
			                    template	: function (data, itemElement) {
				                	itemElement.append("<div id='evolucao'>")
                       		}}],
						},{
							title	: "Requisição de Exames",
							items: [{
			                    template	: function (data, itemElement) {
				                	itemElement.append("<div id='reqExames'>")
                       		}}],
						}, {
							title	: "Receituário",
							items: [{
			                    template	: function (data, itemElement) {
				                	itemElement.append("<div id='receituario'>")
                       		}}],
						}, {
							title	: "Eventos Adversos",
							items: [{
			                    template	: function (data, itemElement) {
				                	itemElement.append("<div id='eventosAdversos'>")
                       		}}],
						}, {
							title	: "Consulta Resultados / Evolutivo",
							items: [{
			                    template	: function (data, itemElement) {
				                	itemElement.append("<div id='consultaResultado'>")
                       		}}],
						}, {
							title	: "Declaração/Relatório",
							items: [{
	              template	: function (data, itemElement) {
		            	itemElement.append("<div id='declaracao'>")
	           		}
	           	}],
						}, {
							title	: "Rec. LME",
							items: [{
	              template	: function (data, itemElement) {
		            	itemElement.append("<div id='recLME'>")
	           		}
	           	}],
						}]
					}]
	        }).dxForm("instance")
	        
	        //
        });


      function carregaAdmissoesAbertas(){
	      	if (parent.document.getElementById("spCabecalho")) {
		      	parent.document.getElementById("spCabecalho").innerHTML="Agenda Médica"
	      	}
	      	if (gridAdmissoesAbertas){
		      	gridAdmissoesAbertas.dispose()
	      	}
	      	if (gridHistorico){
		      	gridHistorico.dispose()
	      	}
	      	if (gridAdmissoesPassagens){
		      	gridAdmissoesPassagens.dispose()
	      	}
	        gridAdmissoesAbertas = $("#histAdmissoes").dxDataGrid({
				dataSource: new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
	    	            load: function(args) {
				            return $.getJSON(urlPreparacao,{
		        	            method:"carregaAdmissoesAbertas"
		            	    });
	                	}	
            		})
	        	}),
	        	filterSyncEnabled:false,
				columns: [
					{dataField: "Paciente",caption: "Paciente", alignment: "left"},
					{dataField: "Idade",caption: "Idade", dataType:"number",alignment: "center",width:"70px"},
					{dataField: "Admissao",caption: "Admissão", alignment: "center",width: "100px"},
					{dataField: "TipoConsulta",caption: "Tipo Atendimento", alignment: "center",width: "150px"},
					{dataField: "Tipo",caption: "Status", alignment: "center",width: "130px"},
					{dataField: "DataAgendamento",sortIndex:1,sortOrder:"asc",caption: "Agendamento",dataType:"datetime", alignment: "center",width: "160px"},
					{dataField: "DataAdmissao",sortIndex:0,sortOrder:"asc",caption: "Admissão",dataType:"datetime", alignment: "center",width: "160px"},
					{dataField: "ConfirmacaoSMS",caption: "Conf. SMS", alignment: "center",width: "80px"},
					{dataField: "Convenio",caption: "Convênio", alignment: "left",width: "120px"},
					{dataField: "Alertas",caption: "Alertas", alignment: "left", allowSorting: false, width: "100px",
						cellTemplate: function(container, options) {
							container.append("<div id='divIndicadorInterno"+options.row.rowIndex+"'>")
							$("#divIndicadorInterno"+options.row.rowIndex).html(options.data.Alertas)						
	                	}}
					],
				filterRow: { visible: false },
				hoverStateEnabled: true,
				paging: { enabled: true, pageSize: 10 },
				height: function() {
					return window.innerHeight - tamanhoForm;
				},	
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				selection: { mode: "single" },
				onSelectionChanged: function(selectedItems) {
					if (selectedItems.selectedRowsData.length>0){
						admissao = selectedItems.selectedRowKeys[0].Admissao
						codPacienteValor = selectedItems.selectedRowKeys[0].CodPaciente
						histPassagem = admissao
						if (selectedItems.selectedRowKeys[0].Tipo=="Aguar. Atendimento"){
							toolBar.option("items")[0].disabled=false
							toolBar.option("items")[1].disabled=false
						}else{
							toolBar.option("items")[0].disabled=true
							toolBar.option("items")[1].disabled=true
						}
						toolBar.option("items")[2].disabled=false
						toolBar.option("items")[3].disabled=false
						toolBar.option("items")[5].disabled=false;
						toolBar.repaint()
						codPaciente.option("value",codPacienteValor)
					}
				}
					
			}).dxDataGrid("instance");

	        gridAdmissoesAbertasCinco = $("#histAdmissoes5").dxDataGrid({
				dataSource: new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
	    	            load: function(args) {
				            return $.getJSON(urlPreparacao,{
		        	            method:"carregaAdmissoesAbertas",
		        	            periodo:5
		            	    });
	                	}	
            		})
	        	}),
	        	filterSyncEnabled:false,
				columns: [
					{dataField: "Paciente",caption: "Paciente", alignment: "left"},
					{dataField: "Idade",caption: "Idade", dataType:"number",alignment: "center",width:"70px"},
					{dataField: "Admissao",caption: "Admissão", alignment: "center",width: "100px"},
					//{dataField: "Tipo",caption: "Tipo", alignment: "center",width: "150px"},
					{dataField: "TipoConsulta",caption: "Tipo Atendimento", alignment: "center",width: "150px"},
					{dataField: "DataAgendamento",sortIndex:0,sortOrder:"asc",caption: "Agendamento",dataType:"datetime", alignment: "center",width: "160px"},
					//{dataField: "DataAdmissao",sortIndex:0,sortOrder:"asc",caption: "Admissão",dataType:"datetime", alignment: "center",width: "160px"},
					{dataField: "Convenio",caption: "Convênio", alignment: "left",width: "120px"},
					{dataField: "Alertas",caption: "Alertas", alignment: "left", allowSorting: false, width: "200px",
						cellTemplate: function(container, options) {
							container.append("<div id='divIndicadorInternoCinco"+options.row.rowIndex+"'>")
							$("#divIndicadorInternoCinco"+options.row.rowIndex).html(options.data.Alertas)						
	                	}}
					],
				filterRow: { visible: false },
				hoverStateEnabled: true,
				paging: { enabled: true, pageSize: 10 },
				height: function() {
					return window.innerHeight - tamanhoForm;
				},	
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				selection: { mode: "single" },
				onSelectionChanged: function(selectedItems) {
					if (selectedItems.selectedRowsData.length>0){
						/*admissao = selectedItems.selectedRowKeys[0].Admissao
						codPacienteValor = selectedItems.selectedRowKeys[0].CodPaciente
						histPassagem = admissao
						codPaciente.option("value",codPacienteValor)
						$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 0)*/
					
					
						admissao = selectedItems.selectedRowKeys[0].Admissao
						codPacienteValor = selectedItems.selectedRowKeys[0].CodPaciente
						histPassagem = admissao
						if (selectedItems.selectedRowKeys[0].Tipo=="Aguar. Atendimento"){
							toolBar.option("items")[0].disabled=false
							toolBar.option("items")[1].disabled=false
						}else{
							toolBar.option("items")[0].disabled=true
							toolBar.option("items")[1].disabled=true
						}
						toolBar.option("items")[2].disabled=false
						toolBar.option("items")[3].disabled=false
						toolBar.option("items")[5].disabled=false;
						toolBar.repaint()
						codPaciente.option("value",codPacienteValor)
						
						$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 0)

					
					
					}
				}
					
			}).dxDataGrid("instance");
			
			
	      	$("#buscaHist").dxForm({
		      	height:	"75px",
		      	colCount: 22,
				screenByWidth: function(width) {
		            return "lg";
		        },
				items	:  [{
					colSpan: 12,
			        dataField	: "Paciente",
                    template	: function (data, itemElement) {
	                	itemElement.append("<div id='consultaPaciente'>")
                    },
		        },{
			        colSpan: 5,
			        cssClass:"_cpRigth",
			        dataField	: "DataInicial",
			        editorType	: "dxDateBox",
					editorOptions : {
						width: "175px",
						showClearButton: true,
						useMaskBehavior: true,
						value: new Date(),
					}
		        },{
			        colSpan: 5,
			        cssClass:"_cpRigth",
			        dataField	: "DataFinal",
			        editorType	: "dxDateBox",
					editorOptions : {
						width: "175px",
						showClearButton: true,
						useMaskBehavior: true,
						value: new Date(),
					}
		        },
//		        {itemType:"empty", colSpan: 2},
		        {
						dataField: 'TipoAtendimento',
//						label: { alignment: 'left' },
						editorType: "dxSelectBox",
						colSpan: 8,
						editorOptions: {
							dataSource: [
								{"Codigo":"","Descricao":""},
								{"Codigo":"CONSULTA","Descricao":"Consulta"},
								{"Codigo":"TELEMEDICINA","Descricao":"Telemedicina"},
								{"Codigo":"APLICACAOMEDICAMENTO","Descricao":"Aplicação de Medicamento"},
								{"Codigo":"MIELOGRAMA","Descricao":"Mielograma"},
								{"Codigo":"PERMEABILIZACAOCATETER","Descricao":"Permeabilização de Cateter"},
								{"Codigo":"QUIMIOTERAPIA","Descricao":"Quimioterapia"},
								{"Codigo":"SANGRIATERAPEUTICA","Descricao":"Sangria Terapêutica"},
								{"Codigo":"TRANSFUSAOSANGUE","Descricao":"Transfusão de Sangue"}
							],
//							dataSource: new DevExpress.data.DataSource({
//								store: new DevExpress.data.CustomStore({
//									load: function(args) {
//										return $.getJSON(urlSetor,{method:"GetVARPARA",DescParametro:"SETOR", PEPEnf: 1});
//									}
//								})
//							}),
							valueExpr: "Codigo", 
							displayExpr: "Descricao"
						}
					},
					{
						itemType: "group",
						colSpan: 14,
						colCount: "auto",
						cssClass:"_grBtnRight",
						items:[
							{
					//cssClass:"Padding-L0R0",
					itemType: "button",
					//colSpan: 1,
					horizontalAlignment: "right",
		            buttonOptions: {
				        stylingMode: "contained",
				        icon: "search",
				        type: "default",
				        text: "Pesquisar",
				        hint: "Pesquisar",
				        onClick: function() {
					        gridAdmissoesPassagens.getDataSource().reload()
				        }
		            }								
                },{
					//cssClass:"Padding-L2R0",
					itemType: "button",
					//colSpan: 1,
					horizontalAlignment: "right",
		            buttonOptions: {
				        stylingMode: "contained",
				        icon: "clear",
				        type: "default",
				        text: "Limpar",
				        hint: "Limpar Campos",
				        onClick: function() {
					        $("#buscaHist").dxForm("instance").resetValues()
					        gridAdmissoesPassagens.getDataSource().reload()
				        }
		            }								
							}
						]
					}]
		     })
		     
		     $("#consultaPaciente").dxSelectBox({
				dataSource: new DevExpress.data.DataSource({
					store: new DevExpress.data.CustomStore({
						byKey: function(args) {
							return $.getJSON(urlPreparacao,{
								method:"GetPacientes",
								codigo: args
							});
						},
						load: function(args) {
							return $.getJSON(urlPreparacao,{
								method:"GetPacientes",
								usuario: YBED,
								skip:args.skip,
								take:args.take,
								searchValue:args.searchValue
							});
						}
					})
				}),
				onFocusOut: function(obj){
					obj.component.close()
				},
				searchEnabled: true,
				valueExpr: "Codigo", 
				displayExpr: "Descricao", 
				showClearButton: true,
			}).dxSelectBox("instance");
	        gridAdmissoesPassagens = $("#histAdmissoesPassagens").dxDataGrid({
				dataSource: new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
	    	            load: function(args) {
				            console.log(tempHistorico)
				            return $.getJSON(urlPreparacao,{
		        	            method:"histAdmissoes",
		        	            paciente : $("#consultaPaciente").dxSelectBox("instance").option("value"),
		        	            dataInicial	: JSON.stringify($("#buscaHist").dxForm("instance").option("formData").DataInicial),
		        	            dataFinal	: JSON.stringify($("#buscaHist").dxForm("instance").option("formData").DataFinal),
		        	            historico	: 1, //tempHistorico ? 1 : 0,
								tipoAtendimento: $("#buscaHist").dxForm("instance").option("formData").TipoAtendimento
		            	    },function(){
			            	 tempHistorico = 1;  	
			           	});
			            	 
	                	}	
            		})
	        	}),
				columns: [
					{dataField: "Paciente",caption: "Paciente", alignment: "left"},
					{dataField: "Admissao",caption: "Admissão", alignment: "center"},
					{dataField: "TipoConsulta",caption: "Tipo Atendimento", alignment: "center",width: "150px"},
					{dataField: "Status",caption: "Status", alignment: "center"},
					{dataField: "DataAdmissao",caption: "Data da Admissão", sortIndex:1,sortOrder:"desc",dataType:"date", alignment: "center"},
					{dataField: "HoraAdmissao",caption: "Hora da Admissão", alignment: "center"},
					{dataField: "Medico",caption: "Médico", alignment: "center"},
					{dataField: "DataAlta",caption: "Data da Finalização", dataType:"date", alignment: "center"},
					{dataField: "HoraAlta",caption: "Hora da Finalização", alignment: "center"},
					{dataField: "Sumario",caption: "Sumário da Finalização", alignment: "center",
						cellTemplate: function(container, options) {
							var iconeVDOC = ""
							if (options.data.flagTemArquivo == 1) {
								var iconeVDOC = "<i class='text-success fas fa-folder-open' title='Arquivos Passagem Anteriores (VDOC)' onclick='abreLista'VDOC()') style='cursor:pointer'/>&nbsp;&nbsp;&nbsp;"	
							}
							if (options.data.Status=="Encerrada"){
								var arrTipoConsulta = [
									"TRANSFUSAOSANGUE", 
									"MIELOGRAMA",
									"SANGRIATERAPEUTICA",
									"APLICACAOMEDICAMENTO",
									"PERMEABILIZACAOCATETER"
								];
								
								//if (arrTipoConsulta.some(function(item){return item == options.data.TipoConsulta.toUpperCase()})) {
								if (options.data.codProntuario)	{
									container.append(iconeVDOC+"<i class=\"text-success fas fa-eye\" title=\"Exibir Resumo da Passagem\" onclick=\"viewPEPEnf('"+options.data.Admissao+"','"+options.data.codProntuario+"','"+options.data.setor+"')\" style=\"cursor:pointer\"/>")
								
								} else if ( arrTipoConsulta.some(function(item){return item == options.data.TipoConsulta.toUpperCase()}) ) {
									
									container.append("");
								
								} else {
									
									container.append(iconeVDOC+"<i class='text-success fas fa-print' title='Imprimir Resumo da Passagem' onclick=imprimeAlta('"+options.data.Admissao+"') style='cursor:pointer'/>")
								
								}
								
								
								
							}else if(options.data.Admissao=="Registros Anteriores"){
								container.append(iconeVDOC+"<i class='text-success fa fa-search' title='Visualizar Históricos Anteriores' onclick=abreHistoricosAnteriores() style='cursor:pointer'/>")
							}
          	}
          },
          
				],
				filterRow: { visible: true },
				hoverStateEnabled: true,
				paging: { enabled: true, pageSize: 25 },
				pager: {
		            showPageSizeSelector: true,
        		    allowedPageSizes: [10, 25, 50, 100],
					showInfo: true,
					showNavigationButtons: true,
        		},				
				height: function() {
					return window.innerHeight - tamanhoForm-50;
				},	
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				selection: { mode: "single" },
				onSelectionChanged: function(selectedItems) {
					if (selectedItems.selectedRowKeys[0].codProntuario) return;
					if (selectedItems.selectedRowsData.length>0){
						codPacienteValor = selectedItems.selectedRowKeys[0].CodPaciente
						admissao = selectedItems.selectedRowKeys[0].Admissao
						loadPanel.show();
			 			setTimeout(function(){ 
			 				$.ajaxSetup({async: false});
							codPaciente.option("value",codPacienteValor)
							formulario.updateData("Passagem",admissao)
							formulario.updateData("Medico",#server(VAR.CSP.VARProntuarioEletronico.RecuperaMedico(admissao))#)
							exibirAbas()
							//if (selectedItems.selectedRowKeys[0].Status=="Agendado"||selectedItems.selectedRowKeys[0].Status=="Admitido"){
							if (selectedItems.selectedRowKeys[0].Status=="Em Aberto"){
								toolBar.option("items")[0].disabled=false
								toolBar.option("items")[1].disabled=false
							}else{
								toolBar.option("items")[0].disabled=true
								toolBar.option("items")[1].disabled=true
							}
							toolBar.option("items")[2].disabled=false
							toolBar.option("items")[3].disabled=false
							toolBar.option("items")[5].disabled=false;
							toolBar.repaint()
							$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 3)
							carregaAnamnese(admissao)
							carregaEvolucao(admissao)
							carregaReqExames(admissao)
							carregaPrescricoes(admissao)
							carregaEventosAdversos(admissao)
							carregaResultado(admissao)
							carregaDeclaracoes(admissao)
							carregaRecLME(admissao)
							carregaEvolucao(admissao)
							$.ajaxSetup({async: true});
							loadPanel.hide();
						}, 500);
					}					
				}
			}).dxDataGrid("instance");
			

	  }
	  
	  function viewPEPEnf(admissao,prontuario,codSetor) {
		  
		  if (!admissao || !prontuario || !codSetor) return;
		  var pagina = "";
		  if (codSetor == "QUIMIOTERAPIA") 					pagina = "VARContrAtendQuimioterapico";
			if (codSetor == "TRANSFUSAOSANGUE") 			pagina = "VARContrAtendTransfusional";
			if (codSetor == "MIELOGRAMA") 						pagina = "VARContrAtendMielograma";
			if (codSetor == "SANGRIATERAPEUTICA") 		pagina = "VARContrAtendSangriaTerapeutica";
			if (codSetor == "APLICACAOMEDICAMENTO") 	pagina = "VARContrAtendAplicMedicamento";
			if (codSetor == "PERMEABILIZACAOCATETER") pagina = "VARContrAtendPermeabilizacaoCateter";
			
			window.open(pagina + ".csp?YBED=#(YBED)#&YUSER=#(YUSER)#&YM=0&YGIF=#(YGIF)#&YLOCATION=#(YLOCATION)#"+
								"&pAdmissao="+admissao+"&pCodProntuario="+prontuario+"&RO=1",
								"Controle"+codSetor,"");							
		}
	  

	  
	  function salvarDados(){
		  
	  	paciente = codPaciente.option("value")
	  	passagem = formulario.option("formData").Passagem
		//
	  	if (paciente==" "||paciente==""||paciente==null){
		  	DevExpress.ui.notify("Selecione o paciente", "warning", 4000);
		  	return false
	  	}
	  	if (passagem==" "||passagem==""||passagem==null){
		  	DevExpress.ui.notify("Selecione uma passagem do paciente", "warning", 4000);
		  	return false
	  	}
	  	if (typeof formAnamnese=="undefined"){
		  	formAnamnese = $("#anamnese").dxForm("instance")
	  	}
	  	if (!formAnamnese.validate().isValid){
		  	DevExpress.ui.notify("Há campos inválidos na aba 'Anamnese'", "warning", 4000);
		  	return false
	  	}
	  	dadosAnamnese = formAnamnese.option("formData")
	  	//dadosExame = formExame.option("formData")
	  	if (typeof formReceituario!="undefined"){
		  	receituarioItens = formReceituario.getEditor("receituario").option("value");
	  	}
	  	if (typeof formDeclaracao!="undefined"){
		  	declaracaoTipoDocumento = formDeclaracao.getEditor("tipoDocumento").option("value");
		  	declaracaoItens = formDeclaracao.getEditor("declaracao").option("value");
		  	declaracaoRemoveDataHoraImp = formDeclaracao.getEditor("removeDataHoraImp").option("value");
	  	}
	  	dadosEvolucao = ""
	  	if (typeof formEvolucao!="undefined"){
		  	dadosEvolucao = formEvolucao.option("formData")
	  	}
	  	pAlergia = $("#divForm").dxForm("instance").getEditor("Alergias").option("value");
	  	pAlergiaSel = $("#divForm").dxForm("instance").getEditor("AlergiasSel").option("value");
		loadPanel.show();
		$.post(urlPreparacao,{
            method		:"salvarDados",
            paciente	: codPacienteValor,
            passagem	: passagem,
            anamnese	: JSON.stringify(dadosAnamnese),
            evolucao	: JSON.stringify(dadosEvolucao),
            pAlergia: pAlergia,
            pAlergiaSel: pAlergiaSel
	    },function(retorno){
		    loadPanel.hide();
			DevExpress.ui.notify(retorno.mensagem, retorno.tipo, 4000);
			if (retorno.status==1){
				return
				loadPanel.show();
				$.ajaxSetup({async: false});
				carregaAnamnese(passagem)
				carregaEvolucao(passagem)
				carregaReqExames(passagem)
				carregaPrescricoes(passagem, 1)
				carregaEventosAdversos(passagem)
				carregaResultado(passagem)
				carregaDeclaracoes(passagem, 1)
				carregaRecLME(passagem)
				$.ajaxSetup({async: true});
				loadPanel.hide();
			}
		},'json').fail(function(jqxhr, textStatus, error) {
			loadPanel.hide();
			var err = textStatus + ", " + error;
    		DevExpress.ui.notify("Problema no acesso à internet: "+err, "error", 4000);
  		})
	  	
	  }
	  
	  function carregaHistorico(){
	      	if (gridAdmissoesAbertas){
		      	gridAdmissoesAbertas.dispose()
	      	}
	      	if (gridHistorico){
		      	gridHistorico.dispose()
	      	}
			loadPanel.show();
            $.getJSON(urlPreparacao,{
	            method:"histAdmissoes",
	            paciente: codPacienteValor
    	    },function(retorno){
		        gridHistorico = $("#histAdmissoes").dxDataGrid({
					dataSource: retorno.data,
					columns: [
						{dataField: "Admissao",caption: "Admissão", alignment: "center"},
						{dataField: "Tipo",caption: "Tipo", alignment: "center"},
						{dataField: "TipoConsulta",caption: "Tipo Atendimento", alignment: "center",width: "150px"},
						//{dataField: "local",caption: "Local", alignment: "center"},
						{dataField: "Status1",caption: "Status", alignment: "center"},
						{dataField: "DataAdmissao",caption: "Data da Admissão", sortIndex:0,sortOrder:"desc",dataType:"date", alignment: "center"},
						{dataField: "HoraAdmissao",caption: "Hora da Admissão", alignment: "center"},
						{dataField: "DataAgendamento",caption: "Data do Agendamento", dataType:"date", alignment: "center"},
						{dataField: "HoraAgendamento",caption: "Hora da Agendamento", alignment: "center"},
						{dataField: "Medico",caption: "Médico", alignment: "center"},
						{dataField: "DataAlta",caption: "Data da Finalização", dataType:"date", alignment: "center"},
						{dataField: "HoraAlta",caption: "Hora da Finalização", alignment: "center"},
						{dataField: "Sumario",caption: "Sumário da Finalização", alignment: "center",
							cellTemplate: function(container, options) {
								var iconeVDOC = ""
								if (options.data.flagTemArquivo == 1) {
									var iconeVDOC = "<i class='text-success fas fa-folder-open' title='Arquivos Passagem Anteriores (VDOC)' onclick='abreListaArquivosVDOC()') style='cursor:pointer'/>&nbsp;&nbsp;&nbsp;"	
								}
								if (options.data.Status=="Encerrada"){
									container.append(iconeVDOC+"<i class='text-success fas fa-print' title='Imprimir Resumo da Passagem' onclick=imprimeAlta('"+options.data.Admissao+"') style='cursor:pointer'/>")
								}else if(options.data.Admissao=="Registros Anteriores"){
									container.append(iconeVDOC+"<i class='text-success fa fa-search' title='Visualizar Históricos Anteriores' onclick=abreHistoricosAnteriores() style='cursor:pointer'/>")
								}
				          	}
				          },
					],
					filterRow: { visible: true },
					hoverStateEnabled: true,
					paging: { enabled: false, pageSize: 25 },
					pager: {
			            showPageSizeSelector: true,
	        		    allowedPageSizes: [10, 25, 50, 100],
						showInfo: true,
						showNavigationButtons: true,
	        		},				
					height: function() {
						return window.innerHeight - tamanhoForm;
					},	
					showBorders: true,
					showRowLines: true,
					rowAlternationEnabled: true,
					selection: { mode: "single" },
					onSelectionChanged: function(selectedItems) {
						if (selectedItems.selectedRowsData.length>0){
							admissao = selectedItems.selectedRowKeys[0].Admissao
							if (admissao=="Registros Anteriores"){
								return
							}
							loadPanel.show();
				 			setTimeout(function(){ 
								exibirAbas()
								formulario.updateData("Passagem",admissao)
								formulario.updateData("Medico",#server(VAR.CSP.VARProntuarioEletronico.RecuperaMedico(admissao))#)
								if (selectedItems.selectedRowKeys[0].Status=="Em Aberto"){
									//if (selectedItems.selectedRowKeys[0].Status=="Agendado"||selectedItems.selectedRowKeys[0].Status=="Admitido"){
									toolBar.option("items")[0].disabled=false
									toolBar.option("items")[1].disabled=false
								}else{
									toolBar.option("items")[0].disabled=true
									toolBar.option("items")[1].disabled=true
								}
								toolBar.option("items")[2].disabled=false
								toolBar.option("items")[3].disabled=false
								toolBar.option("items")[5].disabled=false;
								toolBar.repaint()
								$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 3)
								$.ajaxSetup({async: false});
								carregaAnamnese(admissao)
								carregaEvolucao(admissao)
								carregaReqExames(admissao)
								carregaPrescricoes(admissao)
								carregaEventosAdversos(admissao)
								carregaResultado(admissao)
								carregaDeclaracoes(admissao)
								carregaRecLME(admissao)
								$.ajaxSetup({async: true});
								loadPanel.hide();
							}, 500);
						}
					},
					onToolbarPreparing: function(e) {
						//e.toolbarOptions.visible = !retorno.aberto
						e.toolbarOptions.items.unshift(
							{
								location: "after",
								widget: "dxButton",
								options: {
									icon: "fas fa-sign-in-alt",
									text: "Abrir Admissão",
									height: 28,
									hint: "Abrir Admissão para o Paciente",
									onClick: function(e) {
										var result = DevExpress.ui.dialog.confirm("Deseja abrir uma nova admissão para o(a) paciente <b>"+codPaciente.option("displayValue")+"</b>?", "Nova admissão");
								    result.done(function(dialogResult) {
											if (!dialogResult){
												return
											}
											$.getJSON(urlPreparacao, {
												method: "criaAdmissao",
												paciente: codPacienteValor
											},function(retorno){
												DevExpress.ui.notify(retorno.mensagem, retorno.tipo, 4000);
												if (retorno.status){
													carregaHistorico()
												}
											})
										});					    
									}
								}
							}
						)
					}				
				}).dxDataGrid("instance")
    	    })

        }

		function imprimeAlta(alta){
			imprimir(1,alta)
		}
		
		function imprimeEvolucao(pAdm, pData, pHora){
            $.getJSON(urlPreparacao,{
                method	:"verificaIndiceEvolucao",
                pAdm	: pAdm,
                pData	: pData,
                pHora	: pHora
            },function(retorno){
				imprimir(10, formulario.option("formData").Passagem, retorno.chave);
            })
		}
		
		function imprimeLGPD(){
			imprimir(5,formulario.option("formData").Passagem)
		}

		function visualizaEvolucao(pAdm, pData, pHora){
			var idImp =  "0||"+pAdm+"||"+pData+"||"+pHora
			loadPanel.show();

            $.getJSON(urlPreparacao,{
                method	:"recEvolucaoAnterior",
                pAdm	: pAdm,
                pData	: pData,
                pHora	: pHora,
                passagem: formulario.option("formData").Passagem
            },function(retorno){
				$("#viewEvolucao").dxPopup({
					visible: true,
					title: retorno.title,
					width: "90%",
					height: "95%",
					position: {
						my: "center",
						at: "center",
						of: window
					},
					dragEnabled: true,
					contentTemplate: function(e) {
						conteudoDialog = $("<div id='divViewEvolucao'>")
						e.append(conteudoDialog);
						$("#divViewEvolucao").dxForm({
							formData: retorno,
							scrollingEnabled	: true,
							showColonAfterLabel	: false,
							readOnly	: formulario.option("formData").Passagem==pAdm&&!toolBar.option("items")[0].disabled?false:true,
	 			    		height		:"100%",
	 			    		onContentReady: function(){
		 			    		loadPanel.hide();
		 			    	},
							screenByWidth: function(width) {
					            return "lg";
					        },
							onFieldDataChanged	: function(obj){
								if ($("#divViewEvolucao").dxForm("instance").option("readOnly")){
									return
								}
								formEvolucao.updateData(obj.dataField,obj.value)
							},					        
					        items	:  [{
					        itemType: "group",
				            colCount: 6,
							items: [{
								colSpan		: 6,
								dataField	: "cid",
								label		: {
									text	: "Diag/CID:"
								},
								editorType	: "dxTagBox",
					            editorOptions: {
		            		        valueExpr: "Codigo", 
									displayExpr: "Descricao",
									dataSource: new DevExpress.data.DataSource({
							            store: new DevExpress.data.CustomStore({
						                byKey: function(args) {
						                    return $.getJSON(urlPreparacao,{
							                    method:"getCID",
							                    codigo: args
							                });
						                },
										load: function(args) {
											return $.getJSON(urlPreparacao,{
												method:"getCID",
												skip:args.skip,
												take:args.take,
												searchValue:args.searchValue,
												filter:JSON.stringify(args.filter)
											});
										}						                
							            })
							        })
					            },
					            //				            
							},{
					    	itemType: "group",
					            colCount:2,
					            alignItemLabels : true,
					            items :[{
									dataField	: "pa1",
									editorType	: "dxNumberBox",
									cssClass:"Padding-R4",
									editorOptions: {
										width		: "60px",	
									},
									label		: {
										text	: "PA:"
									}
								},{
									cssClass:"Padding-L4",
									dataField	: "pa2",
									editorType	: "dxNumberBox",
									editorOptions: {
										width		: "60px",	
									},
									label		: {
										text	: "X"
									}
								}]
							},{
								colSpan		: 2,
								dataField	: "pulso",
								editorType	: "dxNumberBox",
								label		: {
									text	: "Pulso:"
								}
							},{
								colSpan		: 3,
								dataField	: "temp",
								editorType	: "dxNumberBox",
								label		: {
									text	: "Temp:"
								}
							}]
				          },{
							colCount		: 15,
							itemType: "group",
							items: [{
								dataField	: "descricao",
								label		: {
									text	: "Descrição:"
								},
								colSpan		: 15,
								editorType	: "dxTextArea",
						        editorOptions: {
							        
	           						height:150,
						        }
							}]
	    	            },{
					        itemType: "group",
							items: [{
								dataField	: "conduta",
								label		: {
									text	: "Conduta:"
								},
								editorType	: "dxTextArea",
						        editorOptions: {
	           						height:150,
							        
						        }

							}]
					    }]
			    	}).dxForm("instance")
					
				}		
			})})
			
		}
		
				function montarOsCampos(){
					if (formAnamnese.getEditor("antecedentesGestacionais") && (formAnamnese.getEditor("antecedentesGestacionais").option("value") == 0 || formAnamnese.getEditor("antecedentesGestacionais").option("value") == "")) {
						formAnamnese.getEditor("qtdeGestacaoNormal").option({"readOnly":1});
						formAnamnese.getEditor("qtdeGestacaoCesaria").option({"readOnly":1});
						formAnamnese.getEditor("qtdeGestacaoAborto").option({"readOnly":1});
						formAnamnese.getEditor("outrosGestacao").option({"readOnly":1});
						formAnamnese.getEditor("qtdeGestacaoOutros").option({"readOnly":1});
					}
					if (formAnamnese.getEditor("manifHemorragicasPetequia") && formAnamnese.getEditor("manifHemorragicasPetequia").option("value") == 0) {
						formAnamnese.getEditor("manifHemorragicasPetequiaDescricao").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("manifHemorragicasHematoma") && formAnamnese.getEditor("manifHemorragicasHematoma").option("value") == 0) {
						formAnamnese.getEditor("manifHemorragicasHematomaDescricao").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("manifHemorragicasEquimoses") && formAnamnese.getEditor("manifHemorragicasEquimoses").option("value") == 0) {
						formAnamnese.getEditor("manifHemorragicasEquimosesDescricao").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("pletorico") && formAnamnese.getEditor("pletorico").option("value") == 0) {
						formAnamnese.getEditor("pletoricoQtde").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("descorado") && formAnamnese.getEditor("descorado").option("value") == 0) {
						formAnamnese.getEditor("descoradoQtde").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("icterico") && formAnamnese.getEditor("icterico").option("value") == 0) {
						formAnamnese.getEditor("ictericoQtde").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("outros") && formAnamnese.getEditor("outros").option("value") == 0) {
						formAnamnese.getEditor("outrosDescricao").option({"readOnly":1,"value":""});
						formAnamnese.getEditor("outrosQtde").option({"readOnly":1,"value":""});
					}								
					if (formAnamnese.getEditor("ganglioCervicalDir") && formAnamnese.getEditor("ganglioCervicalDir").option("value") == 0) {
						formAnamnese.getEditor("ganglioCervicalDirQtde").option({"readOnly":1,"value":""});
						formAnamnese.getEditor("ganglioCervicalDirTam").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("ganglioCervicalEsq") && formAnamnese.getEditor("ganglioCervicalEsq").option("value") == 0) {
						formAnamnese.getEditor("ganglioCervicalEsqQtde").option({"readOnly":1,"value":""});
						formAnamnese.getEditor("ganglioCervicalEsqTam").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("ganglioAxilarDir") && formAnamnese.getEditor("ganglioAxilarDir").option("value") == 0) {
						formAnamnese.getEditor("ganglioAxilarDirQtde").option({"readOnly":1,"value":""});
						formAnamnese.getEditor("ganglioAxilarDirTam").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("ganglioAxilarEsq") && formAnamnese.getEditor("ganglioAxilarEsq").option("value") == 0) {
						formAnamnese.getEditor("ganglioAxilarEsqQtde").option({"readOnly":1,"value":""});
						formAnamnese.getEditor("ganglioAxilarEsqTam").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("ganglioInguinalDir") && formAnamnese.getEditor("ganglioInguinalDir").option("value") == 0) {
						formAnamnese.getEditor("ganglioInguinalDirQtde").option({"readOnly":1,"value":""});
						formAnamnese.getEditor("ganglioInguinalDirTam").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("ganglioInguinalEsq") && formAnamnese.getEditor("ganglioInguinalEsq").option("value") == 0) {
						formAnamnese.getEditor("ganglioInguinalEsqQtde").option({"readOnly":1,"value":""});
						formAnamnese.getEditor("ganglioInguinalEsqTam").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("ganglioOutros") && formAnamnese.getEditor("ganglioOutros").option("value") == 0) {
						formAnamnese.getEditor("ganglioOutrosDesc").option({"readOnly":1,"value":""});
						formAnamnese.getEditor("ganglioOutrosQtde").option({"readOnly":1,"value":""});
						formAnamnese.getEditor("ganglioOutrosTam").option({"readOnly":1,"value":""});
					}
					if (formAnamnese.getEditor("figadoPalpavel") && formAnamnese.getEditor("figadoPalpavel").option("value") == 0) {
						formAnamnese.getEditor("figadoTamanho").option({"readOnly": 1, "value":""});
					}
					if (formAnamnese.getEditor("bacoPalpavel") && formAnamnese.getEditor("bacoPalpavel").option("value") == 0) {
						formAnamnese.getEditor("bacoTamanho").option({"readOnly": 1, "value":""});
					}
				}
		
        function carregaAnamnese(passagem, pIndexTab){
	          $.getJSON(urlPreparacao,{
                method:"carregaAnamnese",
                passagem: passagem
            },function(retorno){
							setTimeout(function(){ 
								formAnamnese.beginUpdate();
								if (retorno.orgaosNormal == 0 || retorno.orgaosNormal == "") {
									formAnamnese.itemOption("exameFisico.exameFisicoCamposGP8", "visible", false);
								}
								if (retorno.ganglio == 0) {
									formAnamnese.itemOption("exameFisico.exameFisicoCamposGP6", "visible", false);
								}
								if (retorno.manifHemorragicas == 0) {
									formAnamnese.itemOption("exameFisico.exameFisicoCamposGP4", "visible", false);
								}
								//console.log(retorno.exameFisicaoNormal)
								if (retorno.exameFisicaoNormal == 0 || retorno.exameFisicaoNormal == "") {
									//formAnamnese.itemOption("exameFisico.exameFisicoCamposGP1", "visible", 0);
									//console.log(retorno.exameFisicaoNormal+"Aqui")
									formAnamnese.itemOption("exameFisico.exameFisicoCamposGP2", "visible", 0);
									formAnamnese.itemOption("exameFisico.exameFisicoCamposGP3", "visible", 0);
									formAnamnese.itemOption("exameFisico.exameFisicoCamposGP4", "visible", 0);
									formAnamnese.itemOption("exameFisico.exameFisicoCamposGP5", "visible", 0);
									formAnamnese.itemOption("exameFisico.exameFisicoCamposGP6", "visible", 0);
									formAnamnese.itemOption("exameFisico.exameFisicoCamposGP7", "visible", 0);
									formAnamnese.itemOption("exameFisico.exameFisicoCamposGP9", "visible", 1);	
								}else{
									formAnamnese.itemOption("exameFisico.exameFisicoCamposGP9", "visible", 0);	
								}
								formAnamnese.endUpdate();	
								montarOsCampos();
							}, 500);

	            /*if (typeof formAnamnese!="undefined"){
		            formAnamnese.option("formData",retorno)
            		formAnamnese.option("readOnly",toolBar.option("items")[0].disabled)
								alteracao=0
								if (retorno.copiadoDe == "") {
					    		$("#divCopiarAnamnese").html("")
								}else{
					    		$("#divCopiarAnamnese").html("Preenchido em "+retorno.copiadoDe+" | <a href='#' onClick='limparAnamnese();'>Limpar</a>&nbsp; &nbsp; &nbsp; ")
								}
								if (formulario.option("formData").Sexo == "Masculino ") {
									formAnamnese.itemOption("AntecPessoais.historiaMenstrual", "visible", false);
									formAnamnese.itemOption("AntecPessoais.antecedentesGestacionais", "visible", false);
									formAnamnese.itemOption("AntecPessoais.qtdeGestacao", "visible", false);
									formAnamnese.itemOption("AntecPessoais.datasGestacionais", "visible", false);
									formAnamnese.option("items")[2].items[1].items[2].label.text = " ";
									formAnamnese.option("items")[2].items[1].label.text = " ";
									$("#btDatasGest1").html("")
								}else{
									formAnamnese.itemOption("AntecPessoais.historiaMenstrual", "visible", true);
									formAnamnese.itemOption("AntecPessoais.antecedentesGestacionais", "visible", true);
									formAnamnese.itemOption("AntecPessoais.qtdeGestacao", "visible", true);
									$("#btDatasGest1").html("<div id='btDatasGest'></div>")
									formAnamnese.itemOption("AntecPessoais.datasGestacionais", "visible", true);
									formAnamnese.option("items")[2].items[1].items[2].label.text = "Datas Gestacionais:";
									formAnamnese.option("items")[2].items[1].label.text = "Antec. Gestacionais:";
									btDatasGest = $("#btDatasGest").dxButton({
										hint: "Adicionar datas gestacionais",
										disabled	: !retorno.antecedentesGestacionais,
										icon: "add",
							      stylingMode: "outlined",
										type: "default",
										onClick: function() {
											addDatasGestacionais()
										}
									}).dxButton("instance");
								}
								//
		            return
	            }*/
							formAnamnese = $("#anamnese").dxForm({
							formData	: retorno,
							scrollingEnabled	: true,
							showColonAfterLabel	: false,
							height	:function() { return window.innerHeight - (tamanhoForm); },
							screenByWidth: function(width) { return "lg"; },
							onFieldDataChanged	: function(obj){
								if (toolBar.option("items")[0].disabled){
									return
								}
								dados = {}
								dados.campo = obj.dataField
								dados.valor = obj.value
								$.post(urlPreparacao,{
									method		: "salvarDadosParcialAnamnese",
									paciente	: codPacienteValor,
									passagem	: formulario.option("formData").Passagem,
									dados		: JSON.stringify(dados)
								},function(retorno){
									if (retorno.status==0){
										DevExpress.ui.notify(retorno.mensagem, retorno.tipo, 4000);
									}
								},'json').fail(function(jqxhr, textStatus, error) {
									var err = textStatus + ", " + error;
									DevExpress.ui.notify("Problema no acesso à internet: "+err, "error", 4000);
								})
								alteracao=1
								if (obj.dataField=="peso"){
									peso = obj.value*1
									altura = formAnamnese.option("formData").altura*1
									alturaIMC = altura*altura
									imc = ""
									if (alturaIMC!=0){
										imc = peso/alturaIMC
										imc = imc.toFixed(2)
									}
									sc = 0.007184 * Math.pow(altura*100,.725) * Math.pow(peso,.425)
									sc = sc.toFixed(3)
									//
									formAnamnese.updateData("sc",sc)
									formAnamnese.updateData("imc",imc)
								}
								if (obj.dataField=="altura"){
									altura = obj.value*1
									peso = formAnamnese.option("formData").peso*1
									alturaIMC = altura*altura
									imc = ""
									if (alturaIMC!=0){
										imc = peso/alturaIMC
										imc = imc.toFixed(2)
									}
									sc = 0.007184 * Math.pow(altura*100,.725) * Math.pow(peso,.425)
									sc = sc.toFixed(3)
									//
									formAnamnese.updateData("sc",sc)
									formAnamnese.updateData("imc",imc)
								}
								if (obj.dataField=="antecedentesCirurgicos"){
									if (obj.value==1){
										var editor = formAnamnese.getEditor("antecedentesCirurgicosTexto");
										editor.option("disabled",false)
									}else{
										formAnamnese.updateData("antecedentesCirurgicosTexto","")
										var editor = formAnamnese.getEditor("antecedentesCirurgicosTexto");
										editor.option("disabled",true)
									}
								}
								if (obj.dataField=="paiFalecido"){
									if (obj.value==1){
										var editor = formAnamnese.getEditor("causaFalecimentoPai");
										editor.option("disabled",false)
									}else{
										var editor = formAnamnese.getEditor("causaFalecimentoPai");
										editor.option("disabled",false)
									}
								}
								if (obj.dataField=="maeFalecida"){
									if (obj.value==1){
										var editor = formAnamnese.getEditor("causaFalecimentoMae");
										editor.option("disabled",false)
									}else{
										var editor = formAnamnese.getEditor("causaFalecimentoMae");
										editor.option("disabled",false)
									}
								}
								/*if (obj.dataField=="antecedentesGestacionais"){
									if (formulario.option("formData").Sexo == "Masculino "){
										return
									}
									if (obj.value){
										//btDatasGest.option("disabled",false)
										//var editor = formAnamnese.getEditor("qtdeGestacao");
										//editor.option("disabled",false)
										var editor = formAnamnese.getEditor("qtdeGestacaoNormal");
										editor.option("readOnly",false)
										var editor = formAnamnese.getEditor("qtdeGestacaoCesaria");
										editor.option("readOnly",false)
										var editor = formAnamnese.getEditor("qtdeGestacaoAborto");
										editor.option("readOnly",false)
										var editor = formAnamnese.getEditor("outrosGestacao");
										editor.option("readOnly",false)
										var editor = formAnamnese.getEditor("qtdeGestacaoOutros");
										editor.option("readOnly",false)
									}else{
										//btDatasGest.option("disabled",true)
										//var editor = formAnamnese.getEditor("qtdeGestacao");
										//editor.option("disabled",true)
										//editor.option("value","")
										var editor = formAnamnese.getEditor("qtdeGestacaoNormal");
										editor.option("readOnly",true)
										editor.option("value","")
										var editor = formAnamnese.getEditor("qtdeGestacaoCesaria");
										editor.option("readOnly",true)
										editor.option("value","")
										var editor = formAnamnese.getEditor("qtdeGestacaoAborto");
										editor.option("readOnly",true)
										editor.option("value","")
										var editor = formAnamnese.getEditor("outrosGestacao");
										editor.option("readOnly",true)
										editor.option("value","")
										var editor = formAnamnese.getEditor("qtdeGestacaoOutros");
										editor.option("readOnly",true)
										editor.option("value","")


										//var editor = formAnamnese.getEditor("datasGestacionais");
										//editor.option("value","")
										//formAnamnese.resetValues()
									}
								}*/
							},
							readOnly	: toolBar.option("items")[0].disabled,
							items	:  [{
								template: function (data, itemElement) {
									itemElement.append("<div id='divCopiarAnamnese' style='border:0px solid red;text-align:right'>")
								}		                           	
							},{
								itemType: "group",
								alignItemLabels: true,
								items	:  [{
									itemType: "tabbed",
                  tabPanelOptions: { 
                  	selectedIndex: (typeof pIndexTab!="undefined" ? pIndexTab : 0),
                  	deferRendering: false 
                  },
                  tabs: [{
                  	title	: "História e Sintomas",
										items: [{
											itemType: "group",
											alignItemLabels: true,
											alignItemLabelsInAllGroups:false,
											colCount: 2,
											items: [{
												itemType: "group",
												alignItemLabels: false,
												alignItemLabelsInAllGroups:false,
												items: [{
													itemType: "group",
													cssClass: "grupo-dx",
													caption: "História e Sintomas",
													items: [{
														dataField	: "historiaSintomas",
														editorType	: "dxTextArea",
														label: { visible	: false },
														editorOptions: {
															height:65,
															//maxLength: 1000,
															onFocusIn : function(){
																abreCampoTexto("História e Sintomas","anamnese","historiaSintomas")
															},
														}
													}]
												},{	
													itemType: "group",
													cssClass: "grupo-dx",
													caption: "Antecedentes Familiares",
													alignItemLabels: false,
													alignItemLabelsInAllGroups:false,
													items: [{
														dataField	: "paiFalecido",
														label		: { text	: "Pai Falecido?" },
														editorType	: "dxRadioGroup",
														editorOptions: {
															layout		: "horizontal",
															valueExpr	: "value", 
															displayExpr	: "text",
															dataSource	: [
																{"text"	: "Sim", "value"	: "1"},
																{"text"	: "Não", "value"	: "0"
															}]
														}
													},{
														dataField	: "cidFalecimentoPai",
														label		: { text	: "CID:" },
														editorType	: "dxTagBox",
														editorOptions: {
															valueExpr: "Codigo", 
															displayExpr: "Descricao",
															searchEnabled: true,
															buttons: [{
																name: "btnPesquisarcidFalecimentoPai",
																location: "before",
																options: {
																	hint: "Pesquisar",
																	icon: "fa fa-search",
																	type: "normal",
																	onClick: function() {
																		abrePesquisaCID(formAnamnese.getEditor("cidFalecimentoPai"), formAnamnese.getEditor("cidFalecimentoPai").option("value"));
																	}
																}
															}],
															itemTemplate: function (data, itemIndex, element) {
																if (CategoriaAnt != data.Categoria){
																	retorno = "<b><i>"+data.Categoria+"</i></b><br><br>"
																	CategoriaAnt = data.Categoria
																	element.append(retorno)
																}
																return element.append(data.Descricao)
															},							
															dataSource: new DevExpress.data.DataSource({
																store: new DevExpress.data.CustomStore({
																	byKey: function(args) {
																		return $.getJSON(urlPreparacao,{
																			method:"getCID",
																			codigo: args});
																	},
																	load: function(args) {
																		return $.getJSON(urlPreparacao,{
																			method:"getCID",
																			usuario: YBED,
																			skip:args.skip,
																			take:args.take,
																			searchValue:args.searchValue,
																			filter:JSON.stringify(args.filter)
																		});
																	}
																})
															})
														}
													},{
														dataField	: "causaFalecimentoPai",
														label		: { text	: "Causa do Falecimento:", },
														editorType	: "dxTextBox",
														editorOptions: {
															maxLength: 200,
															disabled : !retorno.paiFalecido,
														}							
													},{
														dataField	: "maeFalecida",
														label		: { text	: "Mãe Falecida?" },
														editorType	: "dxRadioGroup",
														editorOptions: {
															layout		: "horizontal",
															valueExpr	: "value", 
															displayExpr	: "text",
															dataSource	: [
																{"text"	: "Sim", "value"	: "1"},
																{"text"	: "Não", "value"	: "0"
															}]
														}
													},{
														dataField	: "cidFalecimentoMae",
														label		: {text	: "CID:"},
														editorType	: "dxTagBox",
														editorOptions: {
															valueExpr: "Codigo", 
															displayExpr: "Descricao",
															searchEnabled: true,
															buttons: [{
																name: "btnPesquisarcidFalecimentoMae",
																location: "before",
																options: {
																	hint: "Pesquisar",
																	icon: "fa fa-search",
																	type: "normal",
																	onClick: function() {
																		abrePesquisaCID(formAnamnese.getEditor("cidFalecimentoMae"), formAnamnese.getEditor("cidFalecimentoMae").option("value"));
																	}
																}
															}],
															itemTemplate: function (data, itemIndex, element) {
																if (CategoriaAnt != data.Categoria){
																	retorno = "<b><i>"+data.Categoria+"</i></b><br><br>"
																	CategoriaAnt = data.Categoria
																	element.append(retorno)
																}
																return element.append(data.Descricao)
															},							
															dataSource: new DevExpress.data.DataSource({
																store: new DevExpress.data.CustomStore({
																	byKey: function(args) {
																		return $.getJSON(urlPreparacao,{
																			method:"getCID",
																			codigo: args
																		});
																	},
																	load: function(args) {
																		return $.getJSON(urlPreparacao,{
																			method:"getCID",
																			usuario: YBED,
																			skip:args.skip,
																			take:args.take,
																			searchValue:args.searchValue,
																			filter:JSON.stringify(args.filter)
																		});
																	}
																})
															})
														}
													},{
														dataField	: "causaFalecimentoMae",
														label		: {text	: "Causa do Falecimento:",},
														editorType	: "dxTextBox",
														editorOptions: {
															maxLength: 200,
															disabled : !retorno.maeFalecida,
														}
													},{
														dataField	: "outrosFalecimento",
														label		: {text	: "Outros:",},
														editorType	: "dxTextArea",
														editorOptions: {
															height : 60,
															maxLength: 1000
														}
													}]
												}]
											},{
												itemType: "group",
												cssClass: "grupo-dx",
												caption	: "Antecedentes Pessoais",
												name	: "AntecPessoais",
												items: [{
													dataField	: "molestiasPregressasAtuais",
													label		: {
														text	: "Moléstias Pregressas e Atuais:"
													},
													editorType	: "dxTagBox",
													editorOptions: {
														itemTemplate: function (data, itemIndex, element) {
															if (CategoriaAnt != data.Categoria){
																retorno = "<b><i>"+data.Categoria+"</i></b><br><br>"
																CategoriaAnt = data.Categoria
																element.append(retorno)
															}
															return element.append(data.Descricao)
														},
														buttons: [{
															name: "btnPesquisarMolestiasPregressasAtuais",
															location: "before",
															options: {
																hint: "Pesquisar",
																icon: "fa fa-search",
																type: "normal",
																onClick: function() {
																	abrePesquisaCID(formAnamnese.getEditor("molestiasPregressasAtuais"), formAnamnese.getEditor("molestiasPregressasAtuais").option("value"));
																}
															}
														}],							
														valueExpr: "Codigo", 
														displayExpr: "Descricao",
														searchEnabled: true,
														onValueChanged: function(e){
															if (typeof formEvolucao!="undefined"){
																formEvolucao.getEditor("molestiasPregressasAtuaisEvolucao").option("value",e.value);
															}
														},
														dataSource: new DevExpress.data.DataSource({
															store: new DevExpress.data.CustomStore({
																byKey: function(args) {
																	return $.getJSON(urlPreparacao,{
																		method:"getCID",
																		codigo: args
																	});
																},
																load: function(args) {
																	return $.getJSON(urlPreparacao,{
																		method:"getCID",
																		usuario: YBED,
																		skip:args.skip,
																		take:args.take,
																		searchValue:args.searchValue,
																		filter:JSON.stringify(args.filter)
																	});
																}
															})
														})
													},				            
												},{
													//colSpan		: 10,
													dataField	: "molestiasPregressasLivre",
													label		: {
														text	: "Observação:",
													},
													editorType	: "dxTextArea",
													editorOptions: {
														maxLength: 2500,
														height : 60,
														onValueChanged: function(e){
															if (typeof formEvolucao!="undefined"){
																formEvolucao.getEditor("molPregressasLivreEvolucao").option("value",e.value);
															}
														},
													}
												},{
													//colSpan		: 10,
													itemType: "group",
													colCount: 4,
													visible: formulario.option("formData").Sexo == "Masculino " ? false : true,
													alignItemLabels: true,
													//label	: {text	: "Antec. Gestacionais:"},
													items: [{
														//cssClass:"Padding-R0",
														//cssClass:"Padding-L0",
														dataField	: "antecedentesGestacionais",
														label		: {text	: "Antec. Gestacionais:", visible: true},
														editorType	: "dxCheckBox",
														editorOptions: {
																onValueChanged: function(e) {
																	formAnamnese.getEditor("qtdeGestacaoNormal").option({"readOnly":!e.value,"value":""});
																	formAnamnese.getEditor("qtdeGestacaoCesaria").option({"readOnly":!e.value,"value":""});
																	formAnamnese.getEditor("qtdeGestacaoAborto").option({"readOnly":!e.value,"value":""});
																	formAnamnese.getEditor("outrosGestacao").option({"readOnly":!e.value,"value":""});
																	formAnamnese.getEditor("qtdeGestacaoOutros").option({"readOnly":!e.value,"value":""});
																}
															}	
													},{
														//colSpan	: 2,
														dataField	: "qtdeGestacaoNormal",
														label		: { text	: "Parto Normal:"},
														editorType	: "dxNumberBox",
														editorOptions: {
															width:'50px',
															//readOnly : retorno.antecedentesGestacionais,
														}							
													},{
														//colSpan	: 1,
														dataField	: "qtdeGestacaoCesaria",
														label		: { text	: "Cesária:"},
														editorType	: "dxNumberBox",
														editorOptions: {
															width:'50px',
															//readOnly : retorno.antecedentesGestacionais,
														}							
													},{
														//colSpan	: 1,
														dataField	: "qtdeGestacaoAborto",
														label		: { text	: "Aborto:"},
														editorType	: "dxNumberBox",
														editorOptions: {
															width:'50px',
															//readOnly : retorno.antecedentesGestacionais,
														}							
													},{
													},{
														colSpan	: 2,
														dataField	: "outrosGestacao",
														label		: { text	: "Outros:"},
														editorType	: "dxTextBox",
														editorOptions: {
															//readOnly : retorno.antecedentesGestacionais,
														}							
													},{
														//colSpan	: 1,
														dataField	: "qtdeGestacaoOutros",
														label		: { text	: "Qtde:"},
														editorType	: "dxNumberBox",
														editorOptions: {
															width:'50px',
															//readOnly : retorno.antecedentesGestacionais,
														}						
													}]
												},{
													//colSpan		: 10,
													dataField	: "historiaMenstrual",
													visible: formulario.option("formData").Sexo == "Masculino " ? false : true,
													label		: { text	: "História Menstrual:" },
													editorType	: "dxTextArea",
													editorOptions: { maxLength: 200 }
												},{
													//colSpan		: 10,
													dataField	: "descendencia",
													label		: { text	: "Descendência:" },
													editorType	: "dxTextArea",
													editorOptions: { maxLength: 200 }
												},{
													//colSpan		: 4,
													dataField	: "antecedentesCirurgicos",
													label		: { text	: "Antecedentes Cirúrgicos?:" },
													editorType	: "dxRadioGroup",
													editorOptions: {
														layout:"horizontal",
														valueExpr: "value", 
														displayExpr: "text",
														dataSource : [
															{"text": "Sim", "value": "1" },
															{"text": "Não", "value": "0" },
															{"text": "Não Sabe", "value": "2"}
														]
													}
												},{
													dataField	: "antecedentesCirurgicosTexto",
													label		: { text	: "Qual Antecedente?:", },
													editorType	: "dxTextBox",
													editorOptions: {
														maxLength: 200,
														disabled : retorno.antecedentesCirurgicos==1?false:true,
													}							
												},{
													dataField	: "habitosVicios",
													label		: { text	: "Hábitos e Vícios:" },
													editorOptions: { maxLength: 200 },
													editorType	: "dxTextArea",
												}]
											},{
												colSpan: 2,
												template: function (data, itemElement) {
													var height = window.innerHeight - 780;
													if (height < 0) height = 0;
													itemElement.append("<div style='height:"+height+"px;border:0px solid red;text-align:right'>")
												}
											}]
										}]
                  },{
                  	title	: "Medicações Utilizadas",
										items: [{
											editorType	: "dxDataGrid",
											editorOptions: {
												dataSource: new DevExpress.data.DataSource({
													store: new DevExpress.data.CustomStore({
											  		key: "contador",
											  		loadMode: "raw",   
											  		load: function() {
												  		return $.getJSON(urlPreparacao,{method:"listaMedicamentosUtilizados",
												  		codPaciente:codPacienteValor});
											  		},
						  				  		insert: function (values) {
												  		objDados = new Array;
															for (var coluna in values) {
																if (values.hasOwnProperty(coluna)) {
																	valor = values[coluna];
																	objDados.push(coluna+"~"+valor);
																}
															}
															var retorno = #server(VAR.CSP.VARProntuarioEletronico.ArmMedicamentosUtilizados(codPacienteValor, "", objDados, YBED))#;
											    	},
											    	update: function (key, values) {
												  		objDados = new Array;
															for (var coluna in values) {
																if (values.hasOwnProperty(coluna)) {
																	valor = values[coluna];
																	objDados.push(coluna+"~"+valor);
																}
															}
															var retorno = #server(VAR.CSP.VARProntuarioEletronico.ArmMedicamentosUtilizados(codPacienteValor, key, objDados, YBED))#;
											    	},									    	
														remove: function (key) {
															var retorno = #server(VAR.CSP.VARProntuarioEletronico.ExcMedicamentosUtilizados(codPacienteValor, key, YBED))#;
											    	}	
									    		}),
												}),
												columns: [
													{	dataField: "contador", caption: "Seq.", width: 70, allowEditing: 0, visible: 1 },
													{	dataField: "medicamentoDesc", caption: "Medicamento", alignment: "center", validationRules: [{ type: "required" }], 
														setCellValue: function (rowData, value) {
											        if (value == "" || value == null) return
											        objLinha = this;
											        var descItem = #server(VAR.CSP.VARProntuarioEletronico.RecuperaMedicamento(value))#;
															objLinha.defaultSetCellValue(rowData, descItem.split("~")[3]);
															rowData.medicamento = value;	
												  	}
												  },
													{	dataField: "observacao", caption: "Observação", alignment: "center", allowEditing: 1, visible: 1 },
													{	dataField: "criadoPor", caption: "Criado Por", alignment: "center", allowEditing: 0, visible: 0 },
													{	dataField: "criadoEm", caption: "Criado Em", alignment: "center", allowEditing: 0, visible: 0 },
												],
												onEditorPreparing: function(e) {
													if (e.parentType == "dataRow" && e.dataField == "medicamentoDesc") {
														e.editorName = "dxSelectBox"; 
														e.editorOptions.dataSource = new DevExpress.data.DataSource({
															store: new DevExpress.data.CustomStore({
																byKey: function(args) {
																	return $.getJSON(urlPreparacao,{
																		method:"listaMedicamentosDosagem",
																		usuario: YBED,
																		myId:args
																	});
																},
																load: function(args) {
																	return $.getJSON(urlPreparacao,{
																		method:"listaMedicamentosDosagem",
																		usuario: YBED,
																		skip:args.skip,
																		take:args.take,
																		searchValue:args.searchValue,
																		filter:JSON.stringify(args.filter)
																	});
																}
															})
														});
														e.editorOptions.value = e.row.data.procedimento;
														e.editorOptions.displayExpr = "DescMedicamento";
														e.editorOptions.valueExpr = "CodMedicamento";						
														e.editorOptions.searchEnabled = true;
														e.editorOptions.onValueChanged = function(arg) {
															e.setValue(arg.value);
														}
													}
												},
												columnChooser: { enabled: true, mode: "dragAndDrop"},
												allowColumnReordering: false,
												editing: { mode: "cell", allowAdding: true, allowUpdating: true, allowDeleting: true, useIcons: true },
												columnAutoWidth: false,
												showColumnLines: true,
												showRowLines: true,
												rowAlternationEnabled: true,
												hoverStateEnabled: true,
												showBorders: true,
												headerFilter: { visible: true },
												grouping: { autoExpandAll: true },
												groupPanel: { visible: false, allowColumnDragging: true },
												columnFixing: { enabled: false },
												filterRow: { visible: false },
												height: function(){
													var height = window.innerHeight - 320;
													if (height < 200) height = 200
													return height	
												},
												export: { enabled: false },
												stateStoring: { enabled: false }, 
												wordWrapEnabled: true,
												searchPanel: { visible: true }, 
											}			                           	
										}]
                  },{
                  	title	: "Exame Físico",
										items: [{
											itemType: "group",
											name: "exameFisicoCamposGP1",
											colCount:8,
											alignItemLabels : false,
											alignItemLabelsInAllGroups:false,
											items :[{
												itemType: "group",
												colCount:2,
												alignItemLabels : false,
												items :[{
													dataField	: "pa1",											
													editorType	: "dxNumberBox",
													cssClass:"Padding-R4",
													editorOptions: {width		: "45px",	},
													label		: {text	: "PA:"}
												},{
													cssClass:"Padding-L4",
													editorType	: "dxNumberBox",
													dataField	: "pa2",
													editorOptions: {width		: "45px",	},
													label		: {text	: "X"}
												}]
											},{
												dataField	: "pulso",
												editorType	: "dxNumberBox",
												label		: {text	: "Pulso:"},
												editorOptions: {max: "200"}
											},{
												dataField	: "temp",
												editorType	: "dxNumberBox",
												label		: {text	: "Temp/°C:"},
												editorOptions: {max: "99"}
											},{
												dataField	: "peso",
												editorType	: "dxNumberBox",
												label		: {text	: "Peso/Kg:"},
												editorOptions: {max: "1000"}
											},{
												dataField	: "altura",
												editorType	: "dxNumberBox",
												label		: {text	: "Altura:"},
												editorOptions: {format: "#0.## m"}
											},{
												dataField	: "sc",
												editorType	: "dxNumberBox",
												editorOptions: {readOnly	: true, width: 70},
												label		: {text	: "SC m²:"}
											},{
												dataField	: "imc",
												editorOptions: {readOnly	: true, width: 70},
												editorType	: "dxNumberBox",
												label		: {text	: "IMC:"}
											},{
												editorType: "dxButton",
												editorOptions: {
													text: "Histórico",
													icon: "fas fa-history",
										      //stylingMode: "outlined",
													type: "default",
													onClick: function() {
														$("#viewHistoricoExameFisico").dxPopup("show");
														dSHistoricoExameFisico.reload();
													}
												}
											}]
										},{
											dataField	: "exameFisicaoNormal",
											label: {text: "Alterações Físicas:"},
											editorType	: "dxRadioGroup",
											editorOptions: {
												layout:"horizontal",
												valueExpr: "value", 
												displayExpr: "text",
												dataSource: [{"text": "Sim", "value": "1"}, {"text": "Não", "value": "0" }],
												onValueChanged: function(e){
													scrollTop = formAnamnese._scrollable.scrollTop()
													if (e.value == 0) {
														formAnamnese.getEditor("orgaosNormal").option("value", "0");
														formAnamnese.getEditor("ganglio").option("value", "0");
														formAnamnese.getEditor("manifHemorragicas").option("value", "0");
														formAnamnese.beginUpdate();
														//formAnamnese.itemOption("exameFisico.exameFisicoCamposGP1", "visible", 0);
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP2", "visible", 0);
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP3", "visible", 0);
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP4", "visible", 0);
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP5", "visible", 0);
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP6", "visible", 0);
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP7", "visible", 0);
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP9", "visible", 1);	
														formAnamnese.endUpdate();
														montarOsCampos();
													}else{
														formAnamnese.beginUpdate()
														if (formAnamnese.getEditor("antecedentesGestacionais") && (formAnamnese.getEditor("antecedentesGestacionais").option("value") == 0 || formAnamnese.getEditor("antecedentesGestacionais").option("value") == "")) {
															formAnamnese.getEditor("qtdeGestacaoNormal").option({"readOnly":1});
															formAnamnese.getEditor("qtdeGestacaoCesaria").option({"readOnly":1});
															formAnamnese.getEditor("qtdeGestacaoAborto").option({"readOnly":1});
															formAnamnese.getEditor("outrosGestacao").option({"readOnly":1});
															formAnamnese.getEditor("qtdeGestacaoOutros").option({"readOnly":1});
														}
														scrollTop = formAnamnese._scrollable.scrollTop()
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP9", "visible", 0);	
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP7", "visible", 1);
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP5", "visible", 1);
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP3", "visible", 1);
														formAnamnese.itemOption("exameFisico.exameFisicoCamposGP2", "visible", 1);
														//formAnamnese.itemOption("exameFisico.exameFisicoCamposGP1", "visible", 1);
														formAnamnese.endUpdate();
														montarOsCampos();
													}
													formAnamnese._scrollable.scrollBy(scrollTop)													
												}
											}
										},{
											itemType: "group",
											alignItemLabels : false,
											name: "exameFisicoCamposGP2",
											colCount: 5,
											items:[{
												alignItemLabels : false,
												itemType: "group",
												colCount: 3, 
												items:[{
													dataField: "descorado", 
													label: { text:"Descorado:"},
													editorType: "dxCheckBox",
													editorOptions: {
														onValueChanged: function(e) {
															formAnamnese.getEditor("descoradoQtde").option({"readOnly":!e.value,"value":""});
														}
													}					
												},{
													colSpan	: 2,
													dataField	: "descoradoQtde",
													label		: { text	: "Qtde.:"},
													editorType	: "dxNumberBox",
													editorOptions: {
														min: 0, max: 4, width: 70,
														buttons: [{
															location: "adter",
															name: "descoradoIcon",
															options: {
																text: "(+)", width: 38, type: "normal",
																onClick: function() {
																	var qtde = new Number(formAnamnese.getEditor("descoradoQtde").option("value"));
																	if (qtde < 4) {
																		qtde = qtde + 1;	
																	}
																	formAnamnese.getEditor("descoradoQtde").option("value", qtde);
																}
															}
														}],
													}
												}]
											},{
												alignItemLabels : false,
												itemType: "group",
												colCount: 3, 
												items:[{
													dataField: "icterico", 
													label: { text:"Ictérico:"},
													editorType: "dxCheckBox",
													editorOptions: {
														onValueChanged: function(e) {
															formAnamnese.getEditor("ictericoQtde").option({"readOnly":!e.value,"value":""});
														}
													}					
												},{
													colSpan	: 2,
													dataField	: "ictericoQtde",
													label		: { text	: "Qtde.:"},
													editorType	: "dxNumberBox",
													editorOptions: {
														min: 0, max: 4, width: 70,
														buttons: [{
															location: "adter",
															name: "ictericoIcon",
															options: {
																text: "(+)", width: 38, type: "normal",
																onClick: function() {
																	var qtde = new Number(formAnamnese.getEditor("ictericoQtde").option("value"));
																	if (qtde < 4) {
																		qtde = qtde + 1;	
																	}
																	formAnamnese.getEditor("ictericoQtde").option("value", qtde);
																}
															}
														}],
													}							
												}]
											},{
												alignItemLabels : false,
												itemType: "group",
												colCount: 3, 
												items:[{
													dataField: "pletorico", 
													label: { text:"Pletórico:"},
													editorType: "dxCheckBox",
													editorOptions: {
														onValueChanged: function(e) {
															formAnamnese.getEditor("pletoricoQtde").option({"readOnly":!e.value,"value":""});
														}
													}					
												},{
													colSpan	: 2,
													dataField	: "pletoricoQtde",
													label		: { text	: "Qtde.:"},
													editorType	: "dxNumberBox",
													editorOptions: {
														min: 0, max: 4, width: 70,
														buttons: [{
															location: "adter",
															name: "pletoricoIcon",
															options: {
																text: "(+)", width: 38, type: "normal",
																onClick: function() {
																	var qtde = new Number(formAnamnese.getEditor("pletoricoQtde").option("value"));
																	if (qtde < 4) {
																		qtde = qtde + 1;	
																	}
																	formAnamnese.getEditor("pletoricoQtde").option("value", qtde);
																}
															}
														}],
													}							
												}]
											},{
												alignItemLabels : false,
												itemType: "group",
												colSpan: 2, 
												colCount: 3, 
												items:[{
													dataField: "outros", 
													label: { text:"Outros:"},
													editorType: "dxCheckBox",
													editorOptions: {
														onValueChanged: function(e) {
															formAnamnese.getEditor("outrosDescricao").option({"readOnly":!e.value,"value":""});
															formAnamnese.getEditor("outrosQtde").option({"readOnly":!e.value,"value":""});
														}
													}
												},{
													dataField: "outrosDescricao", 
													label: { text:"Descrição:", visible: false},
													editorOptions: {width: 150}
												},{
													dataField	: "outrosQtde",
													label		: { text	: "Qtde.:"},
													editorType	: "dxNumberBox",
													editorOptions: {
														min: 0, max: 4, width: 70,
														buttons: [{
															location: "adter",
															name: "outrosIcon",
															options: {
																text: "(+)", width: 38, type: "normal",
																onClick: function() {
																	var qtde = new Number(formAnamnese.getEditor("outrosQtde").option("value"));
																	if (qtde < 4) {
																		qtde = qtde + 1;	
																	}
																	formAnamnese.getEditor("outrosQtde").option("value", qtde);
																}
															}
														}],
													}
												}]
											}]
										},{
											itemType: "group",
											alignItemLabels : false,
											caption: " ",
											name: "exameFisicoCamposGP3",
											items:[{
												dataField	: "manifHemorragicas",
												label: {text: "Manifestações Hemorrágicas:"},
												editorType	: "dxRadioGroup",
												editorOptions: {
													layout:"horizontal",
													valueExpr: "value", 
													displayExpr: "text",
													dataSource: [{"text": "Sim", "value": "1"}, {"text": "Não", "value": "0" }],
													onValueChanged: function(e){
														scrollTop = formAnamnese._scrollable.scrollTop()
														if (e.value == 1) {
															formAnamnese.beginUpdate();
															formAnamnese.itemOption("exameFisico.exameFisicoCamposGP4", "visible", true);
															formAnamnese.endUpdate();
															montarOsCampos();
														}else{
															formAnamnese.beginUpdate();
															formAnamnese.itemOption("exameFisico.exameFisicoCamposGP4", "visible", false);
															formAnamnese.endUpdate();
															montarOsCampos();
														}
														formAnamnese._scrollable.scrollBy(scrollTop)
													}
												}
											}]
										},{
											itemType: "group",
											alignItemLabels : false,
											alignItemLabelsInAllGroups:false,											
											name: "exameFisicoCamposGP4",
											colCount: 12,
											items:[{
												itemType: "group",
												name: "exameFisicoCamposGP4A",
												items:[{
													dataField: "manifHemorragicasPetequia", 
													label: { text:"Petéquia:"},
													editorType: "dxCheckBox",
													editorOptions: {
														onValueChanged: function(e) {
															formAnamnese.getEditor("manifHemorragicasPetequiaDescricao").option({"readOnly":!e.value,"value":""});
														}
													}
												}]	
											},{
												itemType: "group",
												name: "exameFisicoCamposGP4B",
												colSpan: 3,
												items:[{
													dataField: "manifHemorragicasPetequiaDescricao", 
													label: { visible: false},
													editorType: "dxTextArea",
													editorOptions: {
														onFocusIn : function(){
															if (!formAnamnese.getEditor("manifHemorragicasPetequiaDescricao").option("readOnly")) {
																abreCampoTexto("Manifestações Hemorrágicas - Petequia","anamnese","manifHemorragicasPetequiaDescricao")
															}
														},
													},
												}]
											},{
												itemType: "group",
												name: "exameFisicoCamposGP4C",
												items:[{
													dataField: "manifHemorragicasHematoma", 
													label: { text:"Hematoma:"},
													editorType: "dxCheckBox",
													editorOptions: {
														onValueChanged: function(e) {
															formAnamnese.getEditor("manifHemorragicasHematomaDescricao").option({"readOnly":!e.value,"value":""});
														}
													}
												}]
											},{
												itemType: "group",
												name: "exameFisicoCamposGP4D",
												colSpan: 3,
												items:[{
													dataField: "manifHemorragicasHematomaDescricao", 
													label: {text: "Local:", visible: false},
													editorType: "dxTextArea",
													editorOptions: {
														onFocusIn : function(){
															if (!formAnamnese.getEditor("manifHemorragicasHematomaDescricao").option("readOnly")) {
																abreCampoTexto("Manifestações Hemorrágicas - Hematoma","anamnese","manifHemorragicasHematomaDescricao")
															}
														},
													},
												}]
											},{
												itemType: "group",
												name: "exameFisicoCamposGP4E",
												items:[{
													dataField: "manifHemorragicasEquimoses", 
													label: { text:"Equimoses:"},
													editorType: "dxCheckBox",
													editorOptions: {
														onValueChanged: function(e) {
															formAnamnese.getEditor("manifHemorragicasEquimosesDescricao").option({"readOnly":!e.value,"value":""});
														}
													}
												}]
											},{
												itemType: "group",
												name: "exameFisicoCamposGP4F",
												colSpan: 3,
												items:[{
													dataField: "manifHemorragicasEquimosesDescricao", 
													label: { visible: false},
													editorType: "dxTextArea",
													editorOptions: {
														onFocusIn : function(){
															if (!formAnamnese.getEditor("manifHemorragicasEquimosesDescricao").option("readOnly")) {
																abreCampoTexto("Manifestações Hemorrágicas - Equimoses","anamnese","manifHemorragicasEquimosesDescricao")
															}
														},
													},
												}]
											},{
												itemType: "group",
												visible: false,
												name: "exameFisicoCamposGP4G",
												colSpan: 3,
												items:[{
													
												}]
											},{
												itemType: "group",
												visible: false,
												name: "exameFisicoCamposGP4H",
												colSpan: 3,
												items:[{
													
												}]
											},{
												itemType: "group",
												name: "exameFisicoCamposGP4I",
												visible: false,
												colSpan: 3,
												items:[{
													
												}]
											}
											
											/*{
												dataField: "manifHemorragicasLocal", 
												label: { text:"Local:"},
												editorType: "dxSelectBox",
												editorOptions: {
													dataSource: [
														{id: "PETEQUIA", text: "Petéquia"}, {id: "HEMATOMA", text: "Hematoma"}, 
														{id: "EQUIMOSES", text: ""}
													],
													valueExpr: "id", 
													displayExpr: "text",
													showClearButton: true,
													width: 150 
												}
											},{
												colSpan: 2,
												dataField: "manifHemorragicasTronco", 
												label: { text:"Tronco:"},
												editorType: "dxTextArea",
											},{
												colSpan: 2,
												dataField: "manifHemorragicasMembroInf", 
												label: { text:"Membro Inferior:"},
												editorType: "dxTextArea",
											},{
												colSpan: 2,
												dataField: "manifHemorragicasMembroSup", 
												label: { text:"Membro Superior:"},
												editorType: "dxTextArea",
											}*/]
										},{
											itemType: "group",
											alignItemLabels : false,
											caption: " ",
											name: "exameFisicoCamposGP5",
											items:[{
												dataField	: "ganglio",
												label: {text: "Gânglio:"},
												editorType	: "dxRadioGroup",
												editorOptions: {
													layout:"horizontal",
													valueExpr: "value", 
													displayExpr: "text",
													dataSource: [{"text": "Sim", "value": "1"}, {"text": "Não", "value": "0" }],
													onValueChanged: function(e){
														scrollTop = formAnamnese._scrollable.scrollTop()
														if (e.value == 1) {
															formAnamnese.beginUpdate();
															formAnamnese.itemOption("exameFisico.exameFisicoCamposGP6", "visible", true);
															formAnamnese.endUpdate();
															montarOsCampos();
														}else{
															formAnamnese.beginUpdate();
															formAnamnese.itemOption("exameFisico.exameFisicoCamposGP6", "visible", false);
															formAnamnese.endUpdate();
															montarOsCampos();
														}
														formAnamnese._scrollable.scrollBy(scrollTop)
													}
												}
											}]
										},{
											itemType: "group",
											alignItemLabels : true,
											name: "exameFisicoCamposGP6",
											colCount: 6,
											items:[{
												dataField: "ganglioCervicalDir", 
												label: { text:"Cervical Direito:"},
												editorType: "dxCheckBox",
												editorOptions: {
													onValueChanged: function(e) {
														formAnamnese.getEditor("ganglioCervicalDirQtde").option({"readOnly":!e.value,"value":""});
														formAnamnese.getEditor("ganglioCervicalDirTam").option({"readOnly":!e.value,"value":""});
													}
												}
											},{
												dataField: "ganglioCervicalDirQtde", 
												label: { text:"Qtde:"},
												editorType: "dxNumberBox",
											},{
												dataField: "ganglioCervicalDirTam", 
												label: { text:"Tamanho:"},
												editorType: "dxTextBox",
											},{
												dataField: "ganglioCervicalEsq", 
												label: { text:"Cervical Esquerdo:"},
												editorType: "dxCheckBox",
												editorOptions: {
													onValueChanged: function(e) {
														formAnamnese.getEditor("ganglioCervicalEsqQtde").option({"readOnly":!e.value,"value":""});
														formAnamnese.getEditor("ganglioCervicalEsqTam").option({"readOnly":!e.value,"value":""});
													}
												}
											},{
												dataField: "ganglioCervicalEsqQtde", 
												label: { text:"Qtde:"},
												editorType: "dxNumberBox",
											},{
												dataField: "ganglioCervicalEsqTam", 
												label: { text:"Tamanho:"},
												editorType: "dxTextBox",
											},{
												dataField: "ganglioAxilarDir", 
												label: { text:"Axilar Direito:"},
												editorType: "dxCheckBox",
												editorOptions: {
													onValueChanged: function(e) {
														formAnamnese.getEditor("ganglioAxilarDirQtde").option({"readOnly":!e.value,"value":""});
														formAnamnese.getEditor("ganglioAxilarDirTam").option({"readOnly":!e.value,"value":""});
													}
												}
											},{
												dataField: "ganglioAxilarDirQtde", 
												label: { text:"Qtde:"},
												editorType: "dxNumberBox",
											},{
												dataField: "ganglioAxilarDirTam", 
												label: { text:"Tamanho:"},
												editorType: "dxTextBox",
											},{
												dataField: "ganglioAxilarEsq", 
												label: { text:"Axilar Esquerdo:"},
												editorType: "dxCheckBox",
												editorOptions: {
													onValueChanged: function(e) {
														formAnamnese.getEditor("ganglioAxilarEsqQtde").option({"readOnly":!e.value,"value":""});
														formAnamnese.getEditor("ganglioAxilarEsqTam").option({"readOnly":!e.value,"value":""});
													}
												}
											},{
												dataField: "ganglioAxilarEsqQtde", 
												label: { text:"Qtde:"},
												editorType: "dxNumberBox",
											},{
												dataField: "ganglioAxilarEsqTam", 
												label: { text:"Tamanho:"},
												editorType: "dxTextBox",
											},{
												dataField: "ganglioInguinalDir", 
												label: { text:"Inguinal Direito:"},
												editorType: "dxCheckBox",
												editorOptions: {
													onValueChanged: function(e) {
														formAnamnese.getEditor("ganglioInguinalDirQtde").option({"readOnly":!e.value,"value":""});
														formAnamnese.getEditor("ganglioInguinalDirTam").option({"readOnly":!e.value,"value":""});
													}
												}
											},{
												dataField: "ganglioInguinalDirQtde", 
												label: { text:"Qtde:"},
												editorType: "dxNumberBox",
											},{
												dataField: "ganglioInguinalDirTam", 
												label: { text:"Tamanho:"},
												editorType: "dxTextBox",
											},{
												dataField: "ganglioInguinalEsq", 
												label: { text:"Inguinal Esquerdo:"},
												editorType: "dxCheckBox",
												editorOptions: {
													onValueChanged: function(e) {
														formAnamnese.getEditor("ganglioInguinalEsqQtde").option({"readOnly":!e.value,"value":""});
														formAnamnese.getEditor("ganglioInguinalEsqTam").option({"readOnly":!e.value,"value":""});
													}
												}
											},{
												dataField: "ganglioInguinalEsqQtde", 
												label: { text:"Qtde:"},
												editorType: "dxNumberBox",
											},{
												dataField: "ganglioInguinalEsqTam", 
												label: { text:"Tamanho:"},
												editorType: "dxTextBox",
											},{
												dataField: "ganglioOutros", 
												label: { text:"Outros:"},
												editorType: "dxCheckBox",
												editorOptions: {
													onValueChanged: function(e) {
														formAnamnese.getEditor("ganglioOutrosDesc").option({"readOnly":!e.value,"value":""});
														formAnamnese.getEditor("ganglioOutrosQtde").option({"readOnly":!e.value,"value":""});
														formAnamnese.getEditor("ganglioOutrosTam").option({"readOnly":!e.value,"value":""});
													}
												}
											},{
												dataField: "ganglioOutrosDesc", 
												label: { text:"Descrição:", "visible": false},
												editorType: "dxTextBox",
											},{
												dataField: "ganglioOutrosQtde", 
												label: { text:"Qtde:"},
												editorType: "dxNumberBox",
											},{
												colSpan: 3,
												dataField: "ganglioOutrosTam", 
												label: { text:"Tamanho:"},
												editorType: "dxTextBox",
												editorOptions: {width: 150}
											}]
										},{
											itemType: "group",
											alignItemLabels : false,
											caption: " ",
											name: "exameFisicoCamposGP7",
											colCount: 3,
											items:[{
												colSpan: 3,
												dataField	: "orgaosNormal",
												label: {text: "Anormalidade nos Órgãos:"},
												editorType	: "dxRadioGroup",
												editorOptions: {
													layout:"horizontal",
													valueExpr: "value", 
													displayExpr: "text",
													dataSource: [{"text": "Sim", "value": "1"}, {"text": "Não", "value": "0" }],
													onValueChanged: function(e){
														if (e.value == 1) {
															formAnamnese.beginUpdate();
															formAnamnese.itemOption("exameFisico.exameFisicoCamposGP8", "visible", true);
															formAnamnese.endUpdate();
															montarOsCampos();
														}else{
															formAnamnese.beginUpdate();
															formAnamnese.itemOption("exameFisico.exameFisicoCamposGP8", "visible", false);
															formAnamnese.endUpdate();
															montarOsCampos();
														}
													}
												}
											}]
										},{
											itemType: "group",
											alignItemLabels : false,
											name: "exameFisicoCamposGP8",
											colCount: 3,
											items:[{
												itemType: "group",
												alignItemLabels : false,
												caption: "Baço",
												cssClass: "grupo-dx",
												minWidth: 320,
												items:[{
													dataField	: "bacoPalpavel",
													label: {text: "Palpável:"},
													editorType	: "dxRadioGroup",
													editorOptions: {
														layout:"horizontal",
														valueExpr: "value", 
														displayExpr: "text",
														dataSource: [{"text": "Sim", "value": "1"}, {"text": "Não", "value": "0" }],
														onValueChanged: function(e){
															if (e.value == 1) {
																formAnamnese.getEditor("bacoTamanho").option({"readOnly": false, "value":""});
															}else{
																formAnamnese.getEditor("bacoTamanho").option({"readOnly": true, "value":""});
															}
														}
													}
												},{
													dataField	: "bacoTamanho",
													label: {text: "Tamanho:"},
													editorType	: "dxTextBox",
												},{
													template: function (data, itemElement) {
														var height = window.innerHeight - 382;
														if (height < 0) height = 0;
														itemElement.append("<div style='height:6px;border:0px solid red;text-align:right'>")
													}
												}]
											},{
												itemType: "group",
												alignItemLabels : false,
												caption: "Figado",
												cssClass: "grupo-dx",
												minWidth: 320,
												items:[{
													dataField	: "figadoPalpavel",
													label: {text: "Palpável:"},
													editorType	: "dxRadioGroup",
													editorOptions: {
														layout:"horizontal",
														valueExpr: "value", 
														displayExpr: "text",
														dataSource: [{"text": "Sim", "value": "1"}, {"text": "Não", "value": "0" }],
														onValueChanged: function(e){
															if (e.value == 1) {
																formAnamnese.getEditor("figadoTamanho").option({"readOnly": false, "value":""});
															}else{
																formAnamnese.getEditor("figadoTamanho").option({"readOnly": true, "value":""});
															}
														}
													}
												},{
													dataField	: "figadoTamanho",
													label: {text: "Tamanho:"},
													editorType	: "dxTextBox",
												},{
													template: function (data, itemElement) {
														var height = window.innerHeight - 382;
														if (height < 0) height = 0;
														itemElement.append("<div style='height:6px;border:0px solid red;text-align:right'>")
													}
												}]
											},{
												itemType: "group",
												alignItemLabels : false,
												caption: "Pulmão",
												cssClass: "grupo-dx",
												minWidth: 320,
												items:[{
													dataField	: "pulmaoAlterado",
													label: {text: "Alterado:"},
													editorType	: "dxRadioGroup",
													editorOptions: {
														layout:"horizontal",
														valueExpr: "value", 
														displayExpr: "text",
														dataSource: [{"text": "Sim", "value": "1"}, {"text": "Não", "value": "0" }],
														onValueChanged: function(e){
														}
													}
												},{
													dataField	: "pulmaoObservacao",
													label: {text: "Observação:"},
													editorType	: "dxTextArea",
												}]
											},{
												itemType: "group",
												alignItemLabels : false,
												caption: "Coração",
												cssClass: "grupo-dx",
												minWidth: 320,
												items:[{
													dataField	: "coracaoAlterado",
													label: {text: "Alterado:"},
													editorType	: "dxRadioGroup",
													editorOptions: {
														layout:"horizontal",
														valueExpr: "value", 
														displayExpr: "text",
														dataSource: [{"text": "Sim", "value": "1"}, {"text": "Não", "value": "0" }],
														onValueChanged: function(e){
														}
													}
												},{
													dataField	: "coracaoObservacao",
													label: {text: "Observação:"},
													editorType	: "dxTextArea",
												}]
											},{
												itemType: "group",
												alignItemLabels : false,
												caption: "Membros Inferior",
												cssClass: "grupo-dx",
												minWidth: 320,
												items:[{
													dataField	: "membrosInfEdema",
													label: {text: "Edema:"},
													editorType	: "dxRadioGroup",
													editorOptions: {
														layout:"horizontal",
														valueExpr: "value", 
														displayExpr: "text",
														dataSource: [{"text": "Sim", "value": "1"}, {"text": "Não", "value": "0" }],
														onValueChanged: function(e){
														}
													}
												},{
													dataField	: "membrosInfOutros",
													label: {text: "Outros:"},
													editorType	: "dxTextArea",
												}]
											},{
												itemType: "group",
												alignItemLabels : false,
												caption: "Membros Superior",
												cssClass: "grupo-dx",
												minWidth: 320,
												items:[{
													dataField	: "membrosSupEdema",
													label: {text: "Edema:"},
													editorType	: "dxRadioGroup",
													editorOptions: {
														layout:"horizontal",
														valueExpr: "value", 
														displayExpr: "text",
														dataSource: [{"text": "Sim", "value": "1"}, {"text": "Não", "value": "0" }],
														onValueChanged: function(e){
														}
													}
												},{
													dataField	: "membrosSupOutros",
													label: {text: "Outros:"},
													editorType	: "dxTextArea",
												}]
											}]	
										},{
											itemType: "group",
											alignItemLabels : false,
											name: "exameFisicoCamposGP9",
											items: [{
												template: function (data, itemElement) {
													var height = window.innerHeight - 382;
													if (height < 0) height = 0;
													itemElement.append("<div style='height:"+height+"px;border:0px solid red;text-align:right'>")
												}
											}]
										}]
                  },{
                  	title	: "Conclusão",
										items: [{
											itemType: "group",
											items:[{
												dataField	: "hd",
												label		: {
													text	: "HD:"
												},
												editorType	: "dxTagBox",
												editorOptions: {
													onValueChanged:function(e){
														if (atualizarCampoHD != 0) return;
														atualizarCampoHD = 1;
														if (typeof formEvolucao!="undefined"){
															//if (formEvolucao.option("formData").cid.length==0||formEvolucao.option("formData").cid==e.value){
															formEvolucao.getEditor("cid").option("value",e.value);

															///formEvolucao.updateData("cid",e.value)
															//}
															atualizarCampoHD = 0;
														}
													},
													valueExpr: "Codigo", 
													displayExpr: "Descricao",
													searchEnabled: true,
													buttons: [{
														name: "btnPesquisarHD",
														location: "before",
														options: {
															hint: "Pesquisar",
															icon: "fa fa-search",
															type: "normal",
															onClick: function() {
																abrePesquisaCID(formAnamnese.getEditor("hd"), formAnamnese.getEditor("hd").option("value"));
															}
														}
													}],
													itemTemplate: function (data, itemIndex, element) {
														if (CategoriaAnt != data.Categoria){
															retorno = "<b><i>"+data.Categoria+"</i></b><br><br>"
															CategoriaAnt = data.Categoria
															element.append(retorno)
														}
														return element.append(data.Descricao)
													},							
													dataSource: new DevExpress.data.DataSource({
														store: new DevExpress.data.CustomStore({
															byKey: function(args) {
																return $.getJSON(urlPreparacao,{
																	method:"getCID",
																	codigo: args
																});
															},
															load: function(args) {
																return $.getJSON(urlPreparacao,{
																	method:"getCID",
																	usuario: YBED,
																	skip:args.skip,
																	take:args.take,
																	searchValue:args.searchValue,
																	filter:JSON.stringify(args.filter)
																});
															}
														})
													})
												},				            
											},{
												dataField	: "hdLivre",
												label		: {text	: "  ",},
												editorType	: "dxTextArea",
												editorOptions: {
													maxLength: 2500,
													height : 60,
													onValueChanged: function(e){
														if (typeof formEvolucao!="undefined"){
															formEvolucao.getEditor("cidLivre").option("value",e.value);
														}
													},
												}
											},{
												dataField	: "observacaoConclusao",
												label		: {text	: "Observação:"},
												editorType	: "dxTextArea",
												editorOptions: {
													maxLength: 2500,
													height : 60,
												}
											}]
										},{
											itemType: "group",
											items:[{
												dataField	: "conduta",
												label		: {text	: "Conduta:"},
												editorType	: "dxTextArea",
												editorOptions: {
													height:80,
													maxLength: 1000
												}
											}]
										},{
											template: function (data, itemElement) {
												var height = window.innerHeight - 582;
												if (height < 0) height = 0;
												itemElement.append("<div style='height:"+height+"px;border:0px solid red;text-align:right'>")
											}
										}]
									}]
                }]
							}]
						}).dxForm("instance")


					if (retorno.copiadoDe == "") {
		    		$("#divCopiarAnamnese").html("")
					}else{
		    		$("#divCopiarAnamnese").html("Preenchido em "+retorno.copiadoDe+" | <a href='#' onClick='limparAnamnese();'>Limpar</a>&nbsp; &nbsp; &nbsp; ")
					}

		    	//.html()
		    	
		    	btDatasGest = $("#btDatasGest").dxButton({
						hint: "Adicionar datas gestacionais",
						disabled	: !retorno.antecedentesGestacionais,
						icon: "add",
			      stylingMode: "outlined",
						type: "default",
						onClick: function() {
							addDatasGestacionais()
						}
				}).dxButton("instance");
       })
       
				/*alteracao=0
				if (retorno.copiadoDe == "") {
	    		$("#divCopiarAnamnese").html("")
				}else{
	    		$("#divCopiarAnamnese").html("Preenchido em "+retorno.copiadoDe+" | <a href='#' onClick='limparAnamnese();'>Limpar</a>&nbsp; &nbsp; &nbsp; ")
				}*/

			            
	    }

        function carregaEvolucao(passagem){
            $.getJSON(urlPreparacao,{
                method:"carregaEvolucao",
                passagem: passagem
            },function(retornoEvolucao){
	            formEvolucao = $("#evolucao").dxForm({
					formData	: retornoEvolucao,
					scrollingEnabled	: true,
					showColonAfterLabel	: false,
					readOnly	: toolBar.option("items")[0].disabled,
 			    	height	:function() {
						return window.innerHeight - (tamanhoForm);
					},
					screenByWidth: function(width) {
			            return "lg";
			        },
					onFieldDataChanged	: function(obj){
						if (toolBar.option("items")[0].disabled){
							return
						}
						dados = {}
						dados.campo = obj.dataField
						dados.valor = obj.value
						$.post(urlPreparacao,{
							method		: "salvarDadosParcialEvolucao",
				            paciente	: codPacienteValor,
				            passagem	: formulario.option("formData").Passagem,
							dados		: JSON.stringify(dados)
						},function(retorno){
							if (retorno.status==0){
								DevExpress.ui.notify(retorno.mensagem, retorno.tipo, 4000);
							}else{
								if ($("#divEvolucao").html()!=undefined){
									divEvolucao.getDataSource().reload()
								}
							}
						},'json').fail(function(jqxhr, textStatus, error) {
							var err = textStatus + ", " + error;
				    		DevExpress.ui.notify("Problema no acesso à internet: "+err, "error", 4000);
				  		})
						alteracao=1
					},
			        items	:  [{
				        itemType: "group",
			            colCount: 9,
						items: [{
							colSpan		: 9,
							dataField	: "cid",
							label		: {
								text	: "Diag/CID:"
							},
							editorType	: "dxTagBox",
				            editorOptions: {
	            		        valueExpr: "Codigo", 
								displayExpr: "Descricao",
								value: eval(#server(VAR.CSP.VARProntuarioEletronico.recuperaUltimaDiagEvolucao(formulario.option("formData").Passagem))#),
								onValueChanged: function(e){
									if (atualizarCampoHD != 0) return;
									atualizarCampoHD = 2;
									if (typeof formAnamnese!="undefined"){
										formAnamnese.getEditor("hd").option("value",e.value);
										atualizarCampoHD = 0;
									}
								},
								searchEnabled: true,
								buttons: [{
									name: "btnPesquisarDiag",
									location: "before",
									options: {
										hint: "Pesquisar",
										icon: "fa fa-search",
										type: "normal",
										onClick: function() {
											abrePesquisaCID(formEvolucao.getEditor("cid"), formEvolucao.getEditor("cid").option("value"));
										}
									}
					      }],

								itemTemplate: function (data, itemIndex, element) {
									if (CategoriaAnt != data.Categoria){
										retorno = "<b><i>"+data.Categoria+"</i></b><br><br>"
										CategoriaAnt = data.Categoria
										element.append(retorno)
									}
									return element.append(data.Descricao)
						        },
						        //value: formAnamnese.getEditor("hd").option("value"),							
								dataSource: new DevExpress.data.DataSource({
						            store: new DevExpress.data.CustomStore({
					                byKey: function(args) {
					                    return $.getJSON(urlPreparacao,{
						                    method:"getCID",
						                    codigo: args
						                });
					                },
						            load: function(args) {
						                    return $.getJSON(urlPreparacao,{
							                    method:"getCID",
					                        	usuario: YBED,
					                        	skip:args.skip,
					                        	take:args.take,
					                        	searchValue:args.searchValue,
					                        	filter:JSON.stringify(args.filter)
							                });
						                }
						            })
						        })
				            },
				            //				            
						},{
									colSpan		: 9,
									dataField	: "cidLivre",
									label		: {
										text	: "  ",
									},
									editorType	: "dxTextArea",
									editorOptions: {
										maxLength: 2500,
										height : 60,
										onValueChanged: function(e){
											if (typeof formAnamnese!="undefined"){
												formAnamnese.getEditor("hdLivre").option("value",e.value);
											}
										},
									}
								},{
				    	itemType: "group",
				            colCount:2,
				            colSpan:2,
				            alignItemLabels : true,
				            items :[{
								dataField	: "pa1",
								editorType	: "dxNumberBox",
								cssClass:"Padding-R4",
								editorOptions: {
									width		: "60px",	
								},
								label		: {
									text	: "PA:"
								}
							},{
								cssClass:"Padding-L4",
								dataField	: "pa2",
								editorType	: "dxNumberBox",
								editorOptions: {
									width		: "60px",	
								},
								label		: {
									text	: "X"
								}
							}]
						},{
							colSpan		: 1,
							dataField	: "pulso",
							editorType	: "dxNumberBox",
							label		: {
								text	: "Pulso:"
							}
						},{
							colSpan		: 1,
							dataField	: "temp",
							editorType	: "dxNumberBox",
							label		: {
								text	: "Temp/ºC:"
							}
						},{colSpan		: 5,}]
					},
					{
						dataField	: "molestiasPregressasAtuaisEvolucao",
						label		: {
							text	: "Moléstias Pregressas e Atuais:"
						},
						editorType	: "dxTagBox",
						editorOptions: {
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
							searchEnabled: true,
							disabled: true,
							dataSource: new DevExpress.data.DataSource({
								store: new DevExpress.data.CustomStore({
									byKey: function(args) {
										return $.getJSON(urlPreparacao,{
											method:"getCID",
											codigo: args
										});
									},
									load: function(args) {
										return $.getJSON(urlPreparacao,{
											method:"getCID",
											usuario: YBED,
											skip:args.skip,
											take:args.take,
											searchValue:args.searchValue,
											filter:JSON.stringify(args.filter)
										});
									}
								})
							}),
							value: formAnamnese.getEditor("molestiasPregressasAtuais").option("value")
						}
					},{
	        	dataField	: "molPregressasLivreEvolucao",
	        	disabled: true,
						label		: {
							text	: "Observação:",
						},
            editorType	: "dxTextArea",
            editorOptions: {
	            height : 60,
							value: formAnamnese.getEditor("molestiasPregressasLivre").option("value")
            },
          },{
						colCount		: 15,
						itemType: "group",
						items: [{
							dataField	: "descricao",
							label		: {
								text	: "Descrição:"
							},
							colSpan		: 14,
							editorType	: "dxTextArea",
					        editorOptions: {
						        onFocusIn : function(){
							    	abreCampoTexto("Descrição","evolucao","descricao")
							    },
           						height:150,
           						//maxLength: 1000
					        }
						},{
					    	colSpan	: 1,
			            	template: "<div style='margin-top: 20px;font-size: 20px;color: #0059B2;align:left'><i id='rec' class='fas fa-microphone' title='Gravar' style='cursor: pointer;'></i></div>"
				    	}]
    	            },{
				        itemType: "group",
						items: [{
							dataField	: "conduta",
							label		: {
								text	: "Conduta:"
							},
							editorType	: "dxTextArea",
					        editorOptions: {
           						height:150,
						        onFocusIn : function(){
							    	abreCampoTexto("Conduta","evolucao","conduta")
							    },
           						//maxLength: 1000
					        }

						}]
    	            
				    },{
			            itemType: "group",
	                    template	: function (data, itemElement) {
		                	itemElement.append("<div id='divEvolucao'>")
	                    },
			        }]
		    	}).dxForm("instance")
		    	//
				window.SpeechRecognition = window.SpeechRecognition ||
				window.webkitSpeechRecognition ||
				null;

				//caso não suporte esta API DE VOZ                              
				if (window.SpeechRecognition === null) {
					$("#rec").style("display", "block");
				}else {
					var recognizer = new window.SpeechRecognition();
					var transcription = document.getElementById("transcription");
					recognizer.lang = 'pt-BR';
					//Para o reconhecedor de voz, não parar de ouvir, mesmo que tenha pausas no usuario
					recognizer.continuous = true;

					recognizer.onresult = function(event){
						transcription.textContent = "";
						for (var i = event.resultIndex; i < event.results.length; i++) {
							if(event.results[i].isFinal){
				  				transcription.textContent = event.results[i][0].transcript;
				  				var conteudoJaFalado = formEvolucao.option("formData").descricao
				  				formEvolucao.updateData("descricao",conteudoJaFalado+transcription.textContent+" ")
				  				//campoObservacao.option("value",conteudoJaFalado+transcription.textContent+" ");
				  			}else{
						        transcription.textContent += event.results[i][0].transcript;
				  				var conteudoJaFalado = formEvolucao.option("formData").descricao
				  				formEvolucao.updateData("descricao",conteudoJaFalado+transcription.textContent)
							}
						}
					}
				}
				var gravando = 0;
				$("#rec").click(function(){
					try {
						if (gravando == 0) {
							texto = ""
							recognizer.start();
							gravando = 1;	
							$("#rec").attr("class", "fas fa-microphone-slash")
						}else{
							recognizer.stop();
							gravando = 0;	
							var conteudoJaFalado = formEvolucao.option("formData").descricao
							formEvolucao.updateData("descricao",conteudoJaFalado+texto)
							$("#rec").attr("class", "fas fa-microphone")
						}
						
					} catch(ex) {
						console.log("error: "+ex.message);
					}
					
				})
		    	//
		    	dataSourceEvolucao = new DevExpress.data.DataSource({
			            store: new DevExpress.data.CustomStore({
		    	            load: function(args) {
					            return $.getJSON(urlPreparacao,{
			        	            method	: "listaEvolucao",
			        	            passagem: formulario.option("formData").Passagem
			            	    });
		                	}	
	            		})
		        	})

		    	divEvolucao = $("#divEvolucao").dxDataGrid({
					dataSource: dataSourceEvolucao,
					columns: [
						{dataField: "Data",caption: "Data",dataType:"date",alignment: "center",width:"100px"},
						{dataField: "Hora",caption: "Hora",alignment: "center",width:"80px"},
						{dataField: "PA",caption: "P.A.",alignment: "center",width:"80px"},
						{dataField: "Pulso",caption: "Pulso",dataType:"number",alignment: "center",width:"80px"},
						{dataField: "Temp",caption: "Temp./ºC",dataType:"number",alignment: "center",width:"80px"},
						{dataField: "Descricao",caption: "Descrição",alignment: "left"},
						{dataField: "Conduta",caption: "Conduta",alignment: "left"},
						{dataField: "Imprimir",caption: "Imprimir",width:"80px", alignment: "center",
							cellTemplate: function(container, options) {
								container.append("<i class='text-success fas fa-print' title='Imprimir' onclick=imprimeEvolucao('"+options.data.adm+"','"+options.data.DataO+"','"+options.data.HoraO+"') style='cursor:pointer'/>")
	          				}
	          			},
						{dataField: "Visualizar",caption: "Visualizar",width:"80px", alignment: "center",
							cellTemplate: function(container, options) {
								container.append("<i class='text-success fas fa-eye' title='Visualizar' onclick=visualizaEvolucao('"+options.data.adm+"','"+options.data.DataO+"','"+options.data.HoraO+"') style='cursor:pointer'/>")
	          				}
	          			},
					],
					filterRow: { visible: false },
					hoverStateEnabled: true,
					paging: { enabled: false, pageSize: 25 },
					pager: {
			            showPageSizeSelector: true,
	        		    allowedPageSizes: [10, 25, 50, 100],
						showInfo: true,
						showNavigationButtons: true,
	        		},				
					height: function() {
						var tamanho = window.innerHeight - tamanhoForm-328
						if (tamanho<200){
							tamanho = 200
						}
						return tamanho;
					},	
					showBorders: true,
					showRowLines: true,
					rowAlternationEnabled: true,
				}).dxDataGrid("instance")
		    	
            })

            
        }
        
        function abreCampoTexto(titulo,formulario,campo){
	        $.ajaxSetup({async: false});
	        formAbreCampo = formulario
	        campoAbreCampo = campo
	        if (campo=="descricao") valor = $("#"+formAbreCampo).dxForm("instance").option("formData").descricao
	        if (campo=="conduta") valor = $("#"+formAbreCampo).dxForm("instance").option("formData").conduta
	        if (campo=="historiaSintomas") valor = $("#"+formAbreCampo).dxForm("instance").option("formData").historiaSintomas
	        if (campo=="manifHemorragicasPetequiaDescricao") valor = $("#"+formAbreCampo).dxForm("instance").option("formData").manifHemorragicasPetequiaDescricao
	        if (campo=="manifHemorragicasHematomaDescricao") valor = $("#"+formAbreCampo).dxForm("instance").option("formData").manifHemorragicasHematomaDescricao
	        if (campo=="manifHemorragicasEquimosesDescricao") valor = $("#"+formAbreCampo).dxForm("instance").option("formData").manifHemorragicasEquimosesDescricao
	        $("#dvInsereTexto").dxPopup("instance").option("title",titulo)
	        $("#dvInsereTexto").dxPopup("instance").show()
	        $("#dvConteudoTexto").dxTextArea("instance").option("readOnly",toolBar.option("items")[0].disabled)
	        $("#dvConteudoTexto").dxTextArea("instance").option("value",valor)
	        $.ajaxSetup({async: true});
        }
        
        var perfilExameAnt="";
        function carregaReqExames(passagem){
            $.getJSON(urlPreparacao,{
                method	:"carregaReqExames",
                passagem: passagem
            },function(retorno){
	            carregaDataSourcesExames();
				formExame = $("#reqExames").dxForm({
			    	readOnly	: toolBar.option("items")[0].disabled,
 			    	height		:function() {
						return window.innerHeight - (tamanhoForm);
					},
					screenByWidth: function(width) {
			            return "lg";
			        },
			        colCount	: 2,
                    items: [{
	                    itemType: "group",
				    	colCount	: 20,
			    		items	:[{
				    		colSpan	: 20,
							template: "<div id='divExamesHeader'></div>"
					    },{
				            cssClass:"Padding-R4",
				            colSpan		: 18,
							dataField	: "TipoExame",
							editorType	: "dxSelectBox",
				            editorOptions: {
								onFocusOut: function(obj){
									obj.component.close()
								},
								dataSource: [{
									"Codigo":"1",
									"Descricao":"Exame Laboratório"
								},{
									"Codigo":"2",
									"Descricao":"Outros Exames"
								}],
						        valueExpr: "Codigo", 
								displayExpr: "Descricao",
								showClearButton: false,
								searchEnabled: false,
								value: "1",
								onValueChanged:function(e){
									if (carregaExames==1){
										dataSourceProtocolo.pageIndex(0)
										dataSourceProtocolo.reload()
										carregaExames=0
										return
									}
									$.getJSON(urlPreparacao,{
										method:	"novaFichaExame"
									},function(){
										divExamesCadastrados.clearSelection()
										divExamesDetalhes.getDataSource().reload()
										$("#dvSeqExameCod").html("")
										$("#dvSeqExameTexto").html("&nbsp;")									
										dataSourceProtocolo.pageIndex(0)
										dataSourceProtocolo.reload()
										formExame.updateData("Exame","")
									})
								}
				            }	
						},{
							colSpan		: 2,
							template: "<b><div id='dvSeqExameCod' style='display:none' /><div id='dvSeqExameTexto'>&nbsp;</div>"
						},{
				            cssClass:"Padding-R4",
				            colSpan		: 19,
							dataField	: "Exame",
							editorType	: "dxSelectBox",
				            editorOptions: {
								onFocusOut: function(obj){
									obj.component.close()
								},
								dataSource: dataSourceProtocolo,
						        valueExpr: "Codigo", 
								displayExpr: "DescricaoComposta",
								showClearButton: true,
								searchEnabled: true,
								//grouped: true,
								itemTemplate: function (data, itemIndex, element) {
									if (perfilExameAnt != data.Perfil){
										retorno = "<b><i>"+data.Perfil+"</i></b><br><br>"
										perfilExameAnt = data.Perfil
										element.append(retorno)
									}
									return element.append(data.DescricaoComposta)
								},
								onValueChanged:function(e){
									addExames(e.value,formExame.option("formData").TipoExame)
									formExame.updateData("Exame","")
								}
				            }	
						},{
							cssClass:"Padding-L0R0",
							itemType: "button",
							horizontalAlignment: "right",
				            buttonOptions: {
						        stylingMode: "outlined",
						        icon: "favorites",
						        type: "normal",
						        hint: "Criar/Editar Protocolos de Exames",
						        onClick: function() {
							        $("#novoCodigoProtocolo").val("");
							        var pListaExames = divExamesDetalhes.getDataSource().items().map(function(i){return i.CodExame+'^'+i.Observacoes}).join("~");
							        editaProtocolos(formExame.option("formData").TipoExame, pListaExames);
						        }
				            }								
						},{
						    colSpan	: 20,
		                    template	: function (data, itemElement) {
			                	itemElement.append("<div id='divExamesDetalhes'>")
		                    },
					    }]
                    },{
						template: "<div id='divExamesCadastrados'></div>"
	                }]
		    	}).dxForm("instance")
	            carregaDataGridExames()
		    	$("#divExamesHeader").html("<table width='100%'><tr><td width=20% align='left'><img src='"+ygif+"/logo_Compra.gif' width='90px'></td><td style='color:darkgreen;font-size:20px;text-align:center'><b>Centro de Hematologia de SP</b></td><td align='right'><div id='btnNovoExame' />&nbsp;<div id='btnSalvarExames' /><br><br></td></tr></table>")
		    	$(".negrito.dx-field-item-label-text").attr("style","font-weight:900")
			    botaoNovoExame = $("#btnNovoExame").dxButton({
					hint		: "Nova Ficha de Exames",
					disabled	: toolBar.option("items")[0].disabled,
					icon		: "fa fa-eraser",
			        stylingMode	: "contained",
					type		: "default",
					onClick: function() {
						$.getJSON(urlPreparacao,{
							method:	"novaFichaExame"
						},function(){
							divExamesCadastrados.clearSelection()
							divExamesDetalhes.getDataSource().reload()
						})
						$("#dvSeqExameCod").html("")
						$("#dvSeqExameTexto").html("&nbsp;")
					}
				}).dxButton("instance")
			    botaoSalvarExames = $("#btnSalvarExames").dxButton({
					hint: "Salvar",
					icon: "save",
					disabled	: toolBar.option("items")[0].disabled,
			        stylingMode: "contained",
					type: "success",
					onClick: function() {
						setTimeout(function(){ addFichaExames();}, 20);
					}
				}).dxButton("instance")

            })
	            
	           	return
		    	/*formExame = $("#reqExames").dxForm({
			    	readOnly	: toolBar.option("items")[0].disabled,
 			    	height		:function() {
						return window.innerHeight - (tamanhoForm);
					},
					screenByWidth: function(width) {
			            return "lg";
			        },
			    	items		:  [{
				    	itemType: "group",
				    	alignItemLabels : true,
				    	colCount: 2,
				        items	:  [{
				            itemType: "group",
				            colCount: 15,
				            items 	: [{
					            cssClass:"Padding-R4",
					            colSpan		: 14,
								dataField	: "Exames Laboratório",
								editorType	: "dxSelectBox",
					            editorOptions: {
									dataSource: dataSourceProtocolo,
							        valueExpr: "Codigo", 
									displayExpr: "DescricaoComposta",
									showClearButton: true,
									searchEnabled: true,
									onValueChanged:function(e){
										addExames(e.value,1)
									}
					            }	
							},{
								cssClass:"Padding-L0",
								itemType: "button",
								horizontalAlignment: "right",
					            buttonOptions: {
							        stylingMode: "outlined",
							        icon: "favorites",
							        type: "normal",
							        hint: "Criar/Editar Protocolos de Exames Laboratorial",
							        onClick: function() {
								        editaProtocolos(1)
							        }
					            }								
							},{
								colSpan		: 15,
			                    template	: function (data, itemElement) {
				                	itemElement.append("<div id='divExamesDetalhes'>")
			                    },
							}]
				        },{
				            itemType: "group",
				            colCount: 15,
				            items 	: [{
					            colSpan		: 14,
					            cssClass:"Padding-R4",
								cdataField	: "Outros Exames",
								editorType	: "dxSelectBox",
					            editorOptions: {
									dataSource: dataSourceProtocoloDiversos,
							        valueExpr: "Codigo", 
									displayExpr: "DescricaoComposta",
									showClearButton: true,
									searchEnabled: true,
									onValueChanged:function(e){
										addExames(e.value,2)
									}
					            }	
			                    /*template	: function (data, itemElement) {
				                	itemElement.append("<div id='codPerfilDiversos'>")
			                    },*//*
							},{
								cssClass:"Padding-L0",
								itemType: "button",
								horizontalAlignment: "right",
					            buttonOptions: {
							        stylingMode: "outlined",
							        icon: "favorites",
							        type: "normal",
							        hint: "Criar/Editar Protocolo de Outros Exames",
							        onClick: function() {
								        editaProtocolos(2)
							        }
					            }								
							},{
								colSpan		: 15,
			                    template	: function (data, itemElement) {
				                	itemElement.append("<div id='divExamesDiversosDetalhes'>")
			                    },
							}]
				        }]
			    	},{
						    dataField	: "removeDataHoraImpRequisicao",
								label		: {
									text	: "Remover Data/Hora da Impressão?"
								},
				            editorType	: "dxRadioGroup",
				            editorOptions: {
					            value		: "0",
					            layout		:"horizontal",
	            		        valueExpr	: "value", 
								displayExpr	: "text",
					            dataSource 	: [{
							        "text": "Sim",
							        "value": 1
							    },
							    {
							        "text": "Não",
							        "value": 0
							    }]
				            }
					    
				    }]
		    	}).dxForm("instance")
	            carregaDataGridExames()

            })*/
        }        


		function addFichaExames(){
            $.getJSON(urlPreparacao,{
                method	  : "addFichaExames",
                nseq	  : $("#dvSeqExameCod").html(),
            },function(retorno){
				seqExame = "";
				$("#dvSeqExameCod").html("")
				$("#dvSeqExameTexto").html("")
	            alteracao=1
	            divExamesCadastrados.clearSelection()
	            divExamesDetalhes.getDataSource().reload()
	            divExamesCadastrados.getDataSource().reload()
            })			
		}

		
        function carregaPrescricoes(passagem, pSalvar){
            $.getJSON(urlPreparacao,{
                method:"carregaPrescricoes",
                passagem: passagem
            },function(retorno){
	            if ($("#receituario")[0].classList[0]=="dx-form"){
				    formReceituario.resetValues()
		            formReceituario.option("readOnly",toolBar.option("items")[0].disabled)
		            botaoNovoReceita.option("disabled",toolBar.option("items")[0].disabled)
		            botaoSalvarReceita.option("disabled",toolBar.option("items")[0].disabled)
		            dataSourceGridReceitas.pageIndex(0)
		            dataSourceGridReceitas.reload()
		            alteracao=0
  							if (typeof pSalvar) {
	  							formReceituario.getEditor("receituario").option("value",receituarioItens);
	  							if (receituarioRemoveDataHoraImp != "") {
		  							formReceituario.getEditor("removeDataHoraImp").option("value",receituarioRemoveDataHoraImp);
	  							}
  							}
		            return
	            }
	            carregaDataSourceReceitas()
		    	formReceituario = $("#receituario").dxForm({
			    	//formData	: [],
			    	readOnly	: toolBar.option("items")[0].disabled,
			        scrollingEnabled	: true,
			    	height	:function() {
						return window.innerHeight - (tamanhoForm);
					},
					screenByWidth: function(width) {
			            return "lg";
			        },
					colCount	: 2,
			    	items	:  [{
  					    alignItemLabels:false,
					    alignItemLabelsInAllGroups:false,
				    	itemType: "group",
				    	colCount	: 20,
			    		items	:[{
				    		colSpan	: 20,
							template: "<div id='divReceituarioHeader'></div>"
					    },{
						    colSpan	: 19,
					    	cssClass	: "negrito",
					    	dataField	: "medicamento",
							label		: {
								text	: "Medicamento"
							},
				            editorType	: "dxSelectBox",
				            editorOptions: {
								onFocusOut: function(obj){
									obj.component.close()
								},
				                searchEnabled: true,
				                showClearButton: true,
		        		        valueExpr: "CodMedicamento", 
								displayExpr: "DescMedicamento",
								searchEnabled: true,
								itemTemplate: function (data, itemIndex, element) {
									retorno = "";
									if (data.Fav>0){
										retorno = "<i class='fa fa-star' title='Receitado "+data.Fav+" vezes'></i>"
									}
									return retorno+" "+data.DescMedicamento
						        },							
								dataSource: new DevExpress.data.DataSource({
						            store: new DevExpress.data.CustomStore({
					                byKey: function(args) {
					                    return $.getJSON(urlPreparacao,{
				        	            	method	:"listaMedicamentos",
						                    codigo	: args
						                });
					                },
						            load: function(args) {
					                    return $.getJSON(urlPreparacao,{
				        	            	method	:"listaMedicamentos",
											searchValue:args.searchValue,
				                        	skip:args.skip,
				                        	take:args.take,
											
						                });
						                }
						            })
						        })
				            }
					    },{
						    cssClass	: "Padding-L0",
						    itemType: "button",
							horizontalAlignment: "right",
				            buttonOptions: {
						        stylingMode: "contained",
						        icon: "add",
						        type: "default",
						        hint: "Adicionar Medicamento na receita",
						        onClick: function() {
							        var editor = formReceituario.getEditor("medicamento");
							        var med = formReceituario.option("formData").medicamento
							        formReceituario.updateData("medicamento","")
							        if (med==null||med==""){
								        return
							        }
							        medicamento = editor.option("displayValue")
							        
						            $.getJSON(urlPreparacao,{
						                method	:"addMedicamento",
						                med		: med
						            })			
							        //
							        receita = formReceituario.option("formData").receituario
									if (receita==""||receita==null){
										//formReceituario.updateData("receituario","1 - "+medicamento)
										formReceituario.updateData("receituario",medicamento)
									}else{
										if (receita.indexOf("\n")<0){
											//receita = receita+"\n"+"2 - "+medicamento
											receita = receita+"\n"+medicamento
										}else{
											rec = receita.split("\n")
											ultimalinha = rec[rec.length-1].split(" - ")
											ultimoContador = ultimalinha[0]*1
											if (ultimoContador==undefined){
												conta=1;
											}else{
												conta=(ultimoContador*1)+1;
											}
											if (rec.length<=30){
												//receita = receita+"\n"+conta+" - "+medicamento
												receita = receita+"\n"+medicamento
											}
										}
										formReceituario.updateData("receituario",receita)
									}
						        }
				            }
					    },{
						    colSpan	: 20,
					    	cssClass	: "negrito",
					    	dataField	: "receituario",
							label		: {
								text	: "Receituário"
							},
				            editorType	: "dxTextArea",
					        editorOptions: {
								height:180,
								onKeyDown:function(e){
									receituario = this._options.text
									if (receituario==null){
										return
									}
									if (receituario==""){
										//formReceituario.updateData("receituario","1 - ")
										formReceituario.updateData("receituario","")
									}
									rec = receituario.split("\n")
									if (rec.length>30){
										DevExpress.ui.notify("Máximo de 30 linhas por receituário", "warning", 4000);
										var receituario = ""
										for (var i=0;i<30;i++){
											if (receituario!="") {
												receituario = receituario +"\n"
											}
											receituario = receituario + rec[i]
										}
										formReceituario.updateData("receituario",receituario)
										return
									}									
								},
								onEnterKey: function (e) {
									receituario = this._options.text
									if (receituario==null){
										return
									}
									rec = receituario.split("\n")
									ultimalinha = rec[rec.length-2].split("-")
									ultimoContador = ultimalinha[ultimalinha.length-2]
									if (ultimoContador==undefined){
										conta=1;
									}else{
										conta=(ultimoContador*1)+1;
									}
									if (rec.length<=30){
										//receituario = receituario+conta+" - "
										receituario = receituario
									}
									formReceituario.updateData("receituario",receituario)

					        	}								
							}
					    },{
						    itemType: "empty"
					    }]
				    },{
					    alignItemLabels: false,
					    alignItemLabelsInAllGroups:false,
				    	itemType: "group",
			    		items	:[{
						    dataField	: "tipoImpressao",
						    cssClass	: "negrito",
								label		: {
									text	: "Tipo de Receituário"
								},
		            editorType	: "dxSelectBox",
		            editorOptions: {
									onFocusOut: function(obj){
										obj.component.close()
									},
									dataSource: ["Controle Especial", "Normal"],
									width: "180px",
									value: "Normal"
		            }
		          },{
								template: "<div id='divReceitasGrid'></div>"
							}]
				    }]
		    	}).dxForm("instance")
		    	carregaDataGridReceitas()
		    	$("#divReceituarioHeader").html("<table width='100%'><tr><td rowspan=2 width=2%><td rowspan=2 width=20% align='left'><img src='"+ygif+"/logo_Compra.gif' width='120px'></td><td style='color:darkgreen;font-size:20px;text-align:center'><b>Centro de Hematologia de SP</b></td><td rowspan=2 width=20% align='right'><div id='btnNovoReceita' />&nbsp;<div id='btnSalvarReceita' /><br><br><b><div id='dvSeqReceitaCod' style='display:none' /><div id='dvSeqReceitaTexto'>&nbsp;</div></td></tr><tr><td style='text-align:center'>Av. Brigadeiro Luís Antônio, 2533 - Jardim Paulista,<br>São Paulo - SP, 01401-000</td></tr><tr></tr><tr><td colspan=3><br></td></table>")
		    	$(".negrito.dx-field-item-label-text").attr("style","font-weight:900")
			    botaoNovoReceita = $("#btnNovoReceita").dxButton({
					hint: "Novo Receituário",
					disabled	: toolBar.option("items")[0].disabled,
					icon: "fa fa-eraser",
			        stylingMode: "contained",
					type: "default",
					onClick: function() {
						$.getJSON(urlPreparacao,{
                method	:"limparMedicamentos"
						})
						divReceitasGrid.clearSelection()
						$("#dvSeqReceitaCod").html("")
						$("#dvSeqReceitaTexto").html("&nbsp;")
						formReceituario.resetValues()
						
						formReceituario.getEditor("tipoImpressao").option("value","Normal");
					}
				}).dxButton("instance")
			    botaoSalvarReceita = $("#btnSalvarReceita").dxButton({
					hint: "Salvar",
					icon: "save",
					disabled	: toolBar.option("items")[0].disabled,
			        stylingMode: "contained",
					type: "success",
					onClick: function() {
						addReceita()
					}
				}).dxButton("instance")
            })
        }        
		function addReceita(){
            $.get(urlPreparacao,{
                method	:"addReceita",
                nseq	: $("#dvSeqReceitaCod").html(),
                receita	: formReceituario.option("formData").receituario,
                impressao: formReceituario.option("formData").removeDataHoraImp
            },function(retorno){
							seqReceituario = "";
							$("#dvSeqReceitaCod").html("")
							$("#dvSeqReceitaTexto").html("")
	            
	            alteracao=1
	            formReceituario.resetValues()
	            formReceituario.getEditor("tipoImpressao").option("value","Normal");
	            dataSourceGridReceitas.pageIndex(0)
	            dataSourceGridReceitas.reload()
	            divReceitasGrid.clearSelection()
            })			
		}
		
	/*Declaracoes*/
	function carregaDeclaracoes(passagem, pSalvar){
		$.getJSON(
			urlPreparacao,
			{
				method:"carregaDeclaracoes",
				passagem: passagem
			},function(retorno){
				if ($("#declaracao")[0].classList[0]=="dx-form"){
					formDeclaracao.resetValues()
					formDeclaracao.option("readOnly",toolBar.option("items")[0].disabled)
					botaoNovaDeclaracao.option("disabled",toolBar.option("items")[0].disabled)
					botaoSalvarDeclaracao.option("disabled",toolBar.option("items")[0].disabled)
					dataSourceGridDeclaracoes.pageIndex(0)
					dataSourceGridDeclaracoes.reload()
					alteracao=0
					if (typeof pSalvar) {
						formDeclaracao.getEditor("declaracao").option("value",declaracaoItens);
						formDeclaracao.getEditor("tipoDocumento").option("value",declaracaoTipoDocumento);
						if (declaracaoRemoveDataHoraImp != "") {
							formDeclaracao.getEditor("removeDataHoraImp").option("value",declaracaoRemoveDataHoraImp);
						}
					}
					formDeclaracao.getEditor("declaracao").option("readOnly",toolBar.option("items")[0].disabled);
					formDeclaracao.getEditor("tipoDocumento").option("readOnly",toolBar.option("items")[0].disabled);
					carregaDataGridReceitas();
					return
				}
				carregaDataSourceDeclaracoes()
				formDeclaracao = $("#declaracao").dxForm({
					//formData	: [],
					//readOnly	: toolBar.option("items")[0].disabled,
					scrollingEnabled	: true,
					height	:function() {
						return window.innerHeight - (tamanhoForm);
					},
					screenByWidth: function(width) {
			            return "lg";
			        },
					colCount	: 2,
					items	:  [{
						alignItemLabels:false,
						alignItemLabelsInAllGroups:false,
						itemType: "group",
						colCount	: 20,
						items	:[{
							colSpan	: 20,
							template: "<div id='divDeclaracaoHeader'></div>"
						},{
							colSpan	: 20,
							dataField	: "tipoDocumento",
							label		: {
								text	: "Tipo do Documento"
							},
							editorType	: "dxRadioGroup",
							editorOptions: {
								readOnly: toolBar.option("items")[0].disabled,
								value		: "0",
								layout		:"horizontal",
								valueExpr	: "value", 
								displayExpr	: "text",
								dataSource 	: [{
									"text": "Relatório",
									"value": 1
								},
								{
									"text": "Declaração",
									"value": 0
								}]
							}
						},{
							colSpan	: 20,
							cssClass	: "negrito",
							dataField	: "declaracao",
							label		: {
								text	: "Anotações"
							},
							editorType	: "dxTextArea",
							editorOptions: {
								readOnly: toolBar.option("items")[0].disabled,
								height:180,
							}
						},{
							itemType: "empty"
						},{
							colSpan	: 18,
							dataField	: "removeDataHoraImp",
							label		: {
								text	: "Remover Data/Hora da Impressão"
							},
							editorType	: "dxRadioGroup",
							editorOptions: {
								value		: "0",
								layout		:"horizontal",
								valueExpr	: "value", 
								displayExpr	: "text",
								dataSource 	: [{
									"text": "Sim",
									"value": 1
								},
								{
									"text": "Não",
									"value": 0
								}]
							}
						},
						{
							colSpan	: 2,
							itemType: "empty"
						},
						{
							itemType: "empty"
						},
						{
							colSpan	: 18,
							dataField	: "cid",
							label		: {
								text	: "CID na Impressão"
							},
							editorType	: "dxRadioGroup",
							editorOptions: {
								value		: "1",
								layout		:"horizontal",
								valueExpr	: "value", 
								displayExpr	: "text",
								dataSource 	: [{
									"text": "Sim",
									"value": 1
								},
								{
									"text": "Não",
									"value": 0
								}]
							}
						}]
					},{
						template: "<div id='divDeclaracoesGrid'></div>"
					}]
				}).dxForm("instance")
				carregaDataGridDeclaracoes()
				$("#divDeclaracaoHeader").html("<table width='100%'><tr><td rowspan=2 width=2%><td rowspan=2 width=20% align='left'><img src='"+ygif+"/logo_Compra.gif' width='120px'></td><td style='color:darkgreen;font-size:20px;text-align:center'><b>Centro de Hematologia de SP</b></td><td rowspan=2 width=20% align='right'><div id='btnNovaDeclaracao' />&nbsp;<div id='btnSalvarDeclaracao' /><br><br><b><div id='dvSeqDeclaracaoCod' style='display:none' /><div id='dvSeqDeclaracaoTexto'>&nbsp;</div></td></tr><tr><td style='text-align:center'>Av. Brigadeiro Luís Antônio, 2533 - Jardim Paulista,<br>São Paulo - SP, 01401-000</td></tr><tr></tr><tr><td colspan=3><br></td></table>")
				$(".negrito.dx-field-item-label-text").attr("style","font-weight:900")
				botaoNovaDeclaracao = $("#btnNovaDeclaracao").dxButton({
					hint: "Nova Declaração",
					disabled	: toolBar.option("items")[0].disabled,
					icon: "add",
					stylingMode: "contained",
					type: "default",
					onClick: function() {
						
						divDeclaracoesGrid.clearSelection()
						$("#dvSeqDeclaracaoCod").html("")
						$("#dvSeqDeclaracaoTexto").html("&nbsp;")
						formDeclaracao.resetValues()
					}
				}).dxButton("instance")
				botaoSalvarDeclaracao = $("#btnSalvarDeclaracao").dxButton({
					hint: "Salvar",
					icon: "save",
					disabled	: false, //toolBar.option("items")[0].disabled,
					stylingMode: "contained",
					type: "success",
					onClick: function() {
						
						addDeclaracao()
					}
				}).dxButton("instance")
			}
		)
	}       
	
	var dataSourceResultado = new DevExpress.data.DataSource({
		store: new DevExpress.data.CustomStore({
			load: function(args) {
				return $.getJSON(urlPreparacao,{
					method	:"listaResultados",
					passagem: formulario.option("formData").Passagem
				},function(rs){});
			},
			update: function (key, values) {
				for (var coluna in values) {
					if (values.hasOwnProperty(coluna)) {
						#server(VAR.CSP.VARProntuarioEletronico.ArmResultaExame(formulario.option("formData").Passagem, key.id, coluna, values[coluna], YBED))#;
					}
				}
				//dataSourceResultadoPopUp.reload();
			}					
		})
	});
	 
	function addDeclaracao(){
		$.getJSON(
			urlPreparacao,
			{
				method		: "addDeclaracao",
				admissao: admissao,
				nseq		: $("#dvSeqDeclaracaoCod").html(),
				tipo		: formDeclaracao.option("formData").tipoDocumento,
				declaracao  : formDeclaracao.option("formData").declaracao,
				impressao	: formDeclaracao.option("formData").removeDataHoraImp,
				cid: formDeclaracao.option("formData").cid
			},
			function(retorno){
				seqDeclaracao = "";
				$("#dvSeqDeclaracaoCod").html("")
				$("#dvSeqDeclaracaoTexto").html("")
				alteracao = 1
				formDeclaracao.resetValues()
				dataSourceGridDeclaracoes.pageIndex(0)
				dataSourceGridDeclaracoes.reload()
				divDeclaracoesGrid.clearSelection()
			}
		)	
	}
	//Fim Declarações		
		
        function carregaEventosAdversos(passagem){
					$.getJSON(urlPreparacao,{
						method:"carregaEventosAdversos",
						passagem: passagem
					},function(retorno){
						if ($("#eventosAdversos")[0].classList[0]=="dx-form"){
							formEventosAdversos.resetValues()
							formEventosAdversos.option("readOnly",toolBar.option("items")[0].disabled)
							divEventosAdversos.option("editing").allowDeleting=!toolBar.option("items")[0].disabled
							dataSourceEventosAdversos.pageIndex(0)
							dataSourceEventosAdversos.reload()
							alteracao=0
							return
						}
						formEventosAdversos = $("#eventosAdversos").dxForm({
							formData	: {},
							readOnly	: toolBar.option("items")[0].disabled,
							scrollingEnabled	: true,
							height	:function() {
								return window.innerHeight - (tamanhoForm);
							},
							screenByWidth: function(width) {
					            return "lg";
					        },
							onFieldDataChanged	: function(){alteracao=1},
							items	:  [{
								itemType: "group",
								template	: function (data, itemElement) {
									itemElement.append("<div id='divEventosAdversos'></div>")
								},
							},{
								itemType: "group",
								colCount: 2,
								items: [{
									dataField	: "data",
									label		: {
										text	: "Data"
									},
									editorType	: "dxDateBox",
									editorOptions : {
										showClearButton: true,
										useMaskBehavior: true,
										max		: new Date()							
									},
								},{
									dataField	: "hora",
									editorOptions : {
										mask: "00:00",
									},
									label		: {
										text	: "Hora"
									}

								},{
									dataField	: "descricao",
									label		: {
										text	: "Descrição"
									},
									editorType	: "dxTextArea",
									editorOptions: {
										height:80
									}
								},{
									dataField	: "conduta",
									label		: {
										text	: "Conduta"
									},
									editorType	: "dxTextArea",
									editorOptions: {
										height:80
									}
								}
								,{
									colSpan: 2,
									dataField	: "conclusao",
									label		: {
										text	: "Conclusão"
									},
									editorType	: "dxTextArea",
									editorOptions: {
										height:60
									}
								},{
									colSpan	: 2,
									itemType: "button",
									horizontalAlignment: "right",
									buttonOptions: {
										stylingMode: "contained",
										icon: "add",
										type: "success",
										hint: "Adicionar Eventos Adversos",
										text: "Adicionar",
										onClick: function() {
											if (toolBar.option("items")[0].disabled){
												return
											}
											if (!formEventosAdversos.validate().isValid){
												DevExpress.ui.notify("Há campos inválidos", "warning", 4000);
												return
											}
											dadosAdversos = formEventosAdversos.option("formData")
											alteracao=1
											$.getJSON(urlPreparacao,{
												method	 	:"salvaAdversos",
												dataNew		: JSON.stringify(dadosAdversos)
											},function(ret){
												DevExpress.ui.notify(ret.mensagem, ret.tipo, 4000);
												formEventosAdversos.resetValues()
												dataSourceEventosAdversos.pageIndex(0)
												dataSourceEventosAdversos.reload()
												divEventosAdversos.clearSelection()
											});
										}
									}
								}]
							}]
						}).dxForm("instance")
						//
						dataSourceEventosAdversos = new DevExpress.data.DataSource({
							store: new DevExpress.data.CustomStore({
								remove : function(args){
									alteracao=1
									$.getJSON(urlPreparacao,{
										method	 	:"deletaEventosAdversos",
										data		: args.DataO,
										hora		: args.HoraO
									});
								},					
								load: function(args) {
									return $.getJSON(urlPreparacao,{
										method	: "listaEventosAdversos",
										passagem: formulario.option("formData").Passagem
									});
								}	
							})
						})
						divEventosAdversos = $("#divEventosAdversos").dxDataGrid({
							dataSource: dataSourceEventosAdversos,
							columns: [
								{dataField: "Data",caption: "Data",dataType:"date",alignment: "center",width:"15%"},
								{dataField: "Hora",caption: "Hora",alignment: "center",width:"15%"},
								{dataField: "Descricao",caption: "Descrição",alignment: "left"},
								{dataField: "Conduta",caption: "Conduta",alignment: "left"},
								{dataField: "Conclusao",caption: "Conclusão",alignment: "left"}
							],
							editing: {
								//mode: "batch",
								mode: "cell",
								allowDeleting: !toolBar.option("items")[0].disabled,
								useIcons: true,
							},	
							onSelectionChanged: function(selectedItems) {
								if (selectedItems.selectedRowsData.length>0){
									formEventosAdversos.updateData("data",selectedItems.selectedRowsData[0].Data)
									formEventosAdversos.updateData("hora",selectedItems.selectedRowsData[0].Hora)
									formEventosAdversos.updateData("descricao",selectedItems.selectedRowsData[0].Descricao)
									formEventosAdversos.updateData("conduta",selectedItems.selectedRowsData[0].Conduta)
								}
							},
							selection: { mode: "single" },
							filterRow: { visible: false },
							hoverStateEnabled: true,
							paging: { enabled: true, pageSize: 10 },
							height: function() {
								var tamanho = window.innerHeight - tamanhoForm-328
								if (tamanho<200){
									tamanho = 200
								}
								return tamanho;
								
								
							},	
							showBorders: true,
							showRowLines: true,
							rowAlternationEnabled: true,
						}).dxDataGrid("instance")
					})
        }        



				function colunaData(container, options) {
					if (!options.value) {
						return	
					}
					var corFont = "";
					var coluna = options.column.dataField
					var colunaHiLow = coluna+"-HiLow"
					if (options.data[colunaHiLow] != "NORMAL" && options.data[colunaHiLow] != "") {
						var corFont = "red";
					}					
					if (options.value.length > 1000) {
						container.html("<i class='far fa-comment-lines' ria-hidden='true' onClick=exibirTitle('"+options.data.id+"','"+options.column.dataField+"');></i>&nbsp; "+options.value+"").css("color", corFont);				
					}else{
						container.html(options.value).attr("title", options.value).css("color", corFont);
					}
				}

				function exibirTitle(p1,p2){
					$("#dvDialog").dxPopup("show");
					$("#dvConteudoDialog").html(#server(VAR.CSP.VARProntuarioEletronico.getResultado(p1,p2))#);
				}
	
				var headerTemplate = function (header, info) {
					$('<div>').html("<span onClick=imprimirResultado('"+info.column.caption+"'); style='font-size:16px;'><i fas class='fas fa-file-pdf' style='color:red;cursor:pointer'></i> &nbsp; </span>"+info.column.caption).css('font-size', '16px').appendTo(header);
					//
				};

				var headerTemplateSelecionar = function (header, info) {
					$('<div>').html("<span onClick=selecionarExame('"+info.column.admissao+"'); style='font-size:16px;'><i fas class='fas fa-check-circle' style='color:green;cursor:pointer'></i> &nbsp; "+info.column.caption+"</span>").css('font-size', '16px').appendTo(header);
					//
				};
				
				var headerTemplateExames = function (header, info) {
					$('<div>').html("<span><span onclick=\"getListHistExames('"+info.column.admissao+"')\" style=\"font-size:16px;\"><i fas class='fas fa-check-circle' style='color:green;cursor:pointer'></i></span> &nbsp; <span>"+info.column.caption+"</span></span>").css('font-size', '16px').appendTo(header);
					//
				};

				function selecionarExame(p1) {
					$.get(urlPreparacao,{
          	method: "addExameResultadoAdmissao",
            pAdmissao: p1
          },function(retorno){
	          dataSourceAddExame.reload();
						$("#viewHistorico").dxPopup("hide");
					});
				}
				
				function getListHistExames(pAdmissao) {
					$.get(urlPreparacao,{
          	method	:"addExames",
            passagem: pAdmissao
          },function(retorno){
	          flagHistExames = 1;
	          divExamesDetalhes.getDataSource().reload();
	          setTimeout(function(){ flagHistExames = 0 }, 1000);
						$("#viewHistorico").dxPopup("hide");
					});
				}

        function carregaResultado(admissao){
            $.getJSON(urlPreparacao,{
                method:"carregaResultados",
                admissao: admissao
            },function(retorno){
		    	formResultado = $("#consultaResultado").dxForm({
 			    	height	:function() {
						return window.innerHeight - (tamanhoForm);
					},
					screenByWidth: function(width) {
			            return "lg";
			        },
			    	items	:  [{
			            template: "<div id='divResultados'></div>"
				    }]
		    	}).dxForm("instance")
					$("#divResultados").dxDataGrid({
						dataSource: dataSourceResultado,
						keyExpr: "id",
						columns: eval(#server(VAR.CSP.VARProntuarioEletronico.ImpColunasResultados(formulario.option("formData").Passagem))#),
						filterRow: { visible: false },
						hoverStateEnabled: true,
						//paging: { enabled: true, pageSize: 10 },
						onEditingStart: function(e) {
							var coluna = e.column.dataField
							var colunaUsuario = coluna+"-Usuario"
							if (e.data[colunaUsuario] != YBED) {
								e.cancel = true
							}
						},
						customizeColumns: function (columns) {
							if (YBED == "JULIO" || YBED == "VALTER") {
								$.each(columns, function (_, element) {
									if (element.caption != "Perfil" && element.caption != "Composto" && element.caption != "Exame") {
										element.headerCellTemplate = headerTemplate;
									}
								});
							}
						},
						onCellHoverChanged: function(event){
							if (event.rowType != "data") {
								popup.hide();
								return;
							}
							var coluna = event.column.dataField
							var colunaHiLow = coluna+"-HiLow"
							var colunaValorReferencia = coluna+"-ValorReferencia"
							if (event.data[coluna] == undefined) {
								popup.hide();
								return;
							}
							if (event.data[colunaValorReferencia] != "" || event.data[colunaHiLow] != "") {
								var hintFormatado = "";
								hintFormatado += "<b>Resultado: </b>"+event.data[coluna]+"<br>";
								hintFormatado += "<b>Referência: </b>"+event.data[colunaValorReferencia]+"<br>";
								hintFormatado += "<b>Situação: </b>"+event.data[colunaHiLow]+"<br>";
								popup.hide();
								popup.option("contentTemplate", function(contentElement) {
									$("<span style='font-size:12px;'>")
										.append(hintFormatado)
										.appendTo(contentElement);         
								});
								popup.option({"target":event.cellElement});
								popup.show();
							}else{
								popup.hide();
							}						
						},	
						grouping: {
							allowCollapsing: true,
							autoExpandAll: true,
						},
						sorting: {
	          	mode: "multiple"
	        	},
						headerFilter: {
							visible:true
						},		
						filterRow:{
							visible:true
						},
						groupPanel: {
							visible: true
						},
						editing: {
							mode: "batch",
							allowUpdating: true,
							//allowAdding: true,
							useIcons: true
						},	
						height: function() {
							var tamanho = window.innerHeight - 250
							if (tamanho < 300){
								tamanho = 300
							}
							return tamanho;
						},
						paging: { enabled: false, pageSize: 10 },
						columnFixing: { enabled: true },
						showBorders: true,
						showRowLines: true,
						columnChooser: {
							enabled: true,
							mode: "dragAndDrop" 
						},
						stateStoring: {
				    	enabled: false
						},
						rowAlternationEnabled: true,
						onToolbarPreparing: function(e) {
							e.toolbarOptions.items.unshift(
								{
									location: "after",
									widget: "dxButton",
									options: {
										icon: "fas fa-window-maximize",
										height: 28,
										width: 28,
										hint: "Abrir Resultados em Pop-up",
										onClick: function(e) {
											$("#dvPopUpResultado").dxPopup("show");
											montaDivResultado()
											//dataSourceResultadoPopUP.reload();
										}
									}
								},{
									location: "after",
									widget: "dxButton",
									options: {
										icon: "fa fa-expand",
										height: 28,
										width: 28,
										hint: "Expandir",
										onClick: function(e) {
											var expanding = e.component.option("icon") === "fa fa-expand";
											if (expanding){
												$("#divResultados").dxDataGrid("instance").expandAll();
											}else{
												$("#divResultados").dxDataGrid("instance").collapseAll();	
											}
											e.component.option("hint", expanding ? "Recolher" : "Expandir");
											e.component.option("icon", expanding ? "fa fa-compress" : "fa fa-expand");
										}
									}
								},{
									location: "after",
									widget: "dxButton",
									options: {
										icon: "fa fa-upload",
										height: 28,
										width: 28,
										hint: "Upload de Exames",
										onClick: function(e) {
											var passagem = formulario.option("formData").Passagem;
											window.open("VARUploadArquivo.csp?passagem="+passagem,"uploadArquivo","width=550,height=400,"+
											"scrollbars=0,resizable=0,menubar=0,location=0,top=0,left=100")

											//uploadExames()
										}
									}
								},{
									location: "after",
									widget: "dxButton",
									options: {
										icon: "fas fa-folder-open",
										height: 28,
										width: 28,
										hint: "Arquivos",
										onClick: function(e) {
											abreListaArquivos()
										}
									}
								},{
									location: "after",
									widget: "dxButton",
									options: {
										icon: "add",
										height: 28,
										width: 28,
										hint: "Adicionar Resultado",
										onClick: function(e) {
											
											$("#dvAddResultado").dxPopup("show");
											var formAddResultado = $("#formAddResultado").dxForm("instance");
											formAddResultado.getEditor("exame").option("value","");
											formAddResultado.getEditor("data").option("value","");
											
											//formAddResultado.getEditor("resultado").option("value","");
	
											#server(VAR.CSP.VARProntuarioEletronico.LimparResultaExameAddNew(YBED))#
											
											recuperaExamesAdicionados();
											
											
										}
									}
								})
							}				
						})
					})
        }        


var templateEdit = function(container, options) {
    var campo=options.column.dataField
    container
    .html(options.text+"&nbsp;&nbsp;<i fas class='fa fa-search' onclick='visualizaResultados()' style='cursor:pointer'>")
};


function visualizaResultados(){
	window.open(ygif+"PEP/documentos/MODELO_PEDIDO_DE_EXAMES.pdf")
}

function carregaDataSourcesExames(){
	dataSourceProtocolo = new DevExpress.data.DataSource({
        store: new DevExpress.data.CustomStore({
            byKey: function(args) {
                if (args==""||args==null){
	                return
                }
                return $.getJSON(urlPreparacao,{
                    method	: "listaPerfilExames",
                    codigo	: args
                });
            },
            
            load: function(args) {
                return $.getJSON(urlPreparacao,{
                    method	: "listaPerfilExames",
                    tipo	: formExame.option("formData").TipoExame,
                	skip	: args.skip,
                	take	: args.take,
                	searchValue:args.searchValue
                },function(e){});
            }
            
        }),
        //group: "Perfil"
        
        /*
        loadMode: "raw",
        
        
        load:function(){
            return $.getJSON(urlPreparacao,{
                    method	: "listaPerfilExames",
                    tipo	: formExame.option("formData").TipoExame,
                	origem	: 1
                });
        }}),
        //group: "Perfil"
        */
    })
    //
	dataSourceGridProtocolo = new DevExpress.data.DataSource({
		store: new DevExpress.data.CustomStore({
			insert : function(args){
				alteracao=1
				$.getJSON(urlPreparacao,{
					method	 	:"salvaExame",
					tipo	  	: formExame.option("formData").TipoExame,
					dataNew		: JSON.stringify(args)
				});
			},
			remove : function(args){
				alteracao=1
				$.getJSON(urlPreparacao,{
					method	 	:"deletaExame",
					tipo	  	: formExame.option("formData").TipoExame,
					codigo		: args.CodExame
				});
			},
			update : function(argsOld,argsNew){
				alteracao=1
				if (argsNew.CodExame==undefined){
					argsNew.CodExame = argsOld.CodExame
				}
				if (argsNew.Observacoes==undefined){
					argsNew.Observacoes = argsOld.Observacoes
				}
				flagHistExames = 1;
				$.getJSON(urlPreparacao,{
					method 	:"salvaExame",
					tipo	: formExame.option("formData").TipoExame,
					edit	: 1,
					dataOld	: JSON.stringify(argsOld),
					dataNew	: JSON.stringify(argsNew)
				});
				setTimeout(function(){ flagHistExames = 0 },1000);
			},					
			load: function(args) {
				return $.getJSON(urlPreparacao,{
					method	  : "recExames",
					tipo	  : (flagHistExames ? null : formExame.option("formData").TipoExame)
				},function(rs){});
			}	
		})
	})
		        
				
			dataSourceGridProtocoloDiversos = new DevExpress.data.DataSource({
	            store: new DevExpress.data.CustomStore({
					insert : function(args){
						alteracao=1
						$.getJSON(urlPreparacao,{
							method	 	:"salvaExame",
							tipo	  	: 2,
							dataNew		: JSON.stringify(args)
						});
					},
					remove : function(args){
						alteracao=1
						$.getJSON(urlPreparacao,{
							method	 	:"deletaExame",
							tipo	  	: 2,
							codigo		: args.CodExame
						});
					},					
					update : function(argsOld,argsNew){
						alteracao=1
						if (argsNew.CodExame==undefined){
							argsNew.CodExame = argsOld.CodExame
						}
						if (argsNew.Observacoes==undefined){
							argsNew.Observacoes = argsOld.Observacoes
						}
						$.getJSON(urlPreparacao,{
							method 	:"salvaExame",
							tipo	: 2,
							edit	: 1,
							dataOld	: JSON.stringify(argsOld),
							dataNew	: JSON.stringify(argsNew)
						});
					},					
					load: function(args) {
						return $.getJSON(urlPreparacao,{
							method	  : "recExames",
							tipo	  : 2
						});
					}	
        		})
        	})

		}
		
		function carregaDataGridExames(){
	    	divExamesDiversosDetalhes = $("#divExamesDiversosDetalhes").dxDataGrid({
				dataSource	: dataSourceGridProtocoloDiversos,
				disabled	: toolBar.option("items")[0].disabled,
				columns		: [{
					dataField: "Descricao",
					caption: "Exame", 
					alignment: "left",
	                allowEditing: false,
				},{
					dataField	: "Observacoes",
					caption		: "Observações",
					width		: "50%"
					
        		}],
				filterRow: { visible: false },
				hoverStateEnabled: true,
				paging: { enabled: true, pageSize: 10 },
				editing: {
		            //mode: "batch",
		            mode: "cell",
		            allowUpdating: !toolBar.option("items")[0].disabled,
		            allowDeleting: !toolBar.option("items")[0].disabled,
                    useIcons: true,
		        },					
				height: function() {
					return window.innerHeight - tamanhoForm-95;
				},	
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				onToolbarPreparing: function(e) {
					e.toolbarOptions.items.unshift(/*{
						location: "after",
						widget: "dxButton",
						options: {
							icon: "fa fa-search",
							height: 28,
							width: 28,
							hint: "Consultar Exames Realizados",
							onClick: function(e) {
								consultaExames(2)
							}
						}
					},*/{
						location: "after",
						widget: "dxButton",
						options: {
							icon: "fa fa-print",
							height: 28,
							width: 28,
							hint: "Imprimir Requisição de Exames",
							onClick: function(e) {
								imprimir(3,formulario.option("formData").Passagem)
							}
						}
					},{
						location: "after",
						widget: "dxButton",
						options: {
							icon: "add",
							height: 28,
							width: 28,
							hint: "Adicionar Exames",
							onClick: function(e) {
								addExamesPopup(2)
							}
						}
					})
				}				
			}).dxDataGrid("instance")
			
	    	divExamesDetalhes = $("#divExamesDetalhes").dxDataGrid({
				dataSource	: dataSourceGridProtocolo,
				disabled	: toolBar.option("items")[0].disabled,
				columns		: [{
					dataField: "Descricao",
					caption: "Exame", 
					alignment: "left",
	                allowEditing: false,
				},{
					dataField	: "Observacoes",
					caption		: "Observações",
					width		: "50%"
					
        		}],
				filterRow: { visible: false },
				hoverStateEnabled: true,
				paging: { enabled: true, pageSize: 16 },
				editing: {
		            mode: "cell",
		            allowUpdating: !toolBar.option("items")[0].disabled,
		            allowDeleting: !toolBar.option("items")[0].disabled,
                    useIcons: true
		        },					
				height: function() {
					return window.innerHeight - tamanhoForm - 155;
				},	
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
			}).dxDataGrid("instance")

	    	divExamesCadastrados = $("#divExamesCadastrados").dxDataGrid({
				dataSource: new DevExpress.data.DataSource({
					store: new DevExpress.data.CustomStore({
						key: 'Seq',
						update: function(key, values) {
							$.post(urlPreparacao,{
								method: "updateExameCadastrado",
								admissao: admissao,
								nseq: key,
								dataHora: values.DataHora,
								cid: values.cid,
								relatorio: 1
							});
						},
						remove: function(key){
							alteracao = 1;
							$.getJSON(urlPreparacao, {
								method: "deletaExameCadastrado",
								nseq: key,
								admissao: admissao,
							});
						},
						load: function() {
							return $.getJSON(urlPreparacao, {
            		method: "recExamesCadastrados"
          		});
						}
					})
				}),
				//disabled	: toolBar.option("items")[0].disabled, // Jamilson Breve - alterado - 14/05/2021
				columns		: [{
					dataField: "Seq",
					caption: "Seq", 
					alignment: "left",
	                width		: "8%",
	                allowEditing: false,
	                alignment	: "center",
				},{
					dataField	: "Exames",
					caption		: "Exames",
					allowEditing: false,
        		},{
					dataField	: "DataHora",
					caption		: "Data/Hora Impressão?",
					dataType	: "boolean",
					width		: "90px",
					allowEditing: true,
        		},{
					dataField	: "cid",
					caption		: "CID Impressão?",
					dataType	: "boolean",
					width		: "45px",
					allowEditing: true,
        		},{
	        		dataField	: "Imprimir",
	        		alignment	: "center",
	        		allowEditing: false,
	        		width		: "70px",
						cellTemplate: function(container, options) {
						container.append("<i class='text-success fa fa-print' title='Imprimir Requisição de Exames' onclick=imprimirExames('"+options.key+"') style='cursor:pointer'/>")
		          	}
	        	},{
	        		dataField	  : "Relatorio",
	        		caption 	  : "Relatório Complementar",
	        		alignment		: "center",
	        		allowEditing: false,
	        		width				: "90px",
							cellTemplate: function(container, options) {
								if(options.data.RelAnexo == 0){
									container.append("<i class='text-success fa fa-pencil' title='Imprimir Relatorios Complementares 1' onclick=RelatorioComplementar('"+admissao+"','"+options.key+"','"+2+"') style='cursor:pointer'/>")
								}
								else{
									container.append("")
								}
		          }
	        	}],
				filterRow: { visible: false },
				hoverStateEnabled: true,
				paging: { enabled: true, pageSize: 10 },
				editing: {
		            mode: "cell",
		            allowUpdating: true, //!toolBar.option("items")[0].disabled,
		            allowDeleting: !toolBar.option("items")[0].disabled,
                useIcons: true
		        },					
				height: function() {
					return window.innerHeight - tamanhoForm;
				},	
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				wordWrapEnabled:true,
				onCellClick: function(dados){
					if (dados.columnIndex < 2 && dados.data){
						seq = dados.data.Seq;
			      $.ajaxSetup({async: false});
			      carregaExames = 1;
						seqExame = seq+"~"+dados.data.Tipo;
						
						$("#dvSeqExameCod").html(seq);
						$("#dvSeqExameTexto").html("Seq.: "+seq);
			      formExame.updateData("TipoExame",dados.data.Tipo);
			      
						$.getJSON(urlPreparacao, {
			      	method:"recExamesLinha",
			        nseq: seq
			      }, function(retorno){
	            flagHistExames = 1;
	            dataSourceGridProtocolo.pageIndex(0);
            	dataSourceGridProtocolo.reload();
            	setTimeout(function(){ flagHistExames = 0 }, 1000);
	            $.ajaxSetup({async: true});
            });
					} else {
						addFichaExames();
					}
				},
				/*onSelectionChanged: function(selectedItems) {
					if (selectedItems.selectedRowsData.length>0){
						seq = selectedItems.selectedRowsData[0].Seq;
			            $.ajaxSetup({async: false});
			            carregaExames = 1
						seqExame = seq+"~"+selectedItems.selectedRowsData[0].Tipo
						$("#dvSeqExameCod").html(seq)
						$("#dvSeqExameTexto").html("Seq.: "+seq)
			            formExame.updateData("TipoExame",selectedItems.selectedRowsData[0].Tipo)
						$.getJSON(urlPreparacao,{
			                method	:"recExamesLinha",
			                nseq	: seq
			            },function(retorno){
				            dataSourceGridProtocolo.pageIndex(0)
			            	dataSourceGridProtocolo.reload()
				            $.ajaxSetup({async: true});
			            })
						//formReceituario.updateData("receituario",selectedItems.selectedRowsData[0].Receituario)
						//formReceituario.updateData("removeDataHoraImp",selectedItems.selectedRowsData[0].removeDataHoraImp)
					}
				},*/
				selection: { mode: "single" },
				onToolbarPreparing: function(e) {
					e.toolbarOptions.items.unshift({
						location: "after",
						widget: "dxButton",
						options: {
							icon	: "undo",
							height	: 28,
							text	: "Histórico de Exames",
							hint	: "Exibir Histórico de Exames Solicitados",
					        stylingMode	: "contained",
							type		: "default",
							onClick	: function(e) {
								abreHistorico(1, 2)
							}
						}
					})
				}				
			}).dxDataGrid("instance")
			
		}
		
		function imprimirVerifyBirdID(tipo, passagem, sequ) {
			$.getJSON(urlPreparacao,{
				method:"verificaBirdID"
			}, function(ret) {
				if (ret == 1) {
					if (tipo == 2) imprimirExamesBird(tipo,passagem,sequ);
				}
				else {
					if (tipo == 2) imprimir(tipo,passagem,sequ);
				}
			});
		}
		
		function imprimirExamesBird(tipo, passagem, sequ) {
			var fRemoverImprimirData = 0;
			var pTipoReceituario = "Normal";
			var seqDeclaracao = typeof(seqDeclaracao)=='undefined' ? '' : seqDeclaracao;
			
			if (!sequ) {
				DevExpress.ui.notify("Selecione a lista de Exame", "warning", 4000);
				return;
			}
			
			if (toolBar.option("items")[0].disabled) {
				alteracao = 0;
			}
			
			if (alteracao==0||tipo==10){
				$.post(urlPreparacao,{
          method:"Impressoes",
          tipoImpressao: tipo,
          passagem: passagem,
          fRemoverImprimirData: fRemoverImprimirData,
          seqDeclaracao: seqDeclaracao,
          idEvolucao: sequ,
          pTipoReceituario: pTipoReceituario,
          codPaciente: codPaciente.option("value"),
          flagGravarBird: "requisicaoExames"
	      },function(retorno){
	        eval(retorno)
        });				
			}else{
				var result = DevExpress.ui.dialog.confirm("<i>Para continuar com a impressão, é necessário salvar os dados. Deseja salvar?", "Confirma armazenamento");
		    result.done(function(dialogResult) {
	        if (!dialogResult) return;
	        $.ajaxSetup({async: false});
					salvarDados();
					$.get(urlPreparacao,{
	          method:"Impressoes",
	          tipoImpressao: tipo,
	          passagem: passagem,
	          fRemoverImprimirData: fRemoverImprimirData,
	          seqDeclaracao: seqDeclaracao,
	          idEvolucao: sequ,
	          pTipoReceituario: pTipoReceituario,
	          codPaciente: codPaciente.option("value"),
	          flagGravarBird: "requisicaoExames"
	        },function(retorno){
	          $.ajaxSetup({async: true});
		      	eval(retorno);
	        })
		    })
			}
		}
		
		function imprimirExames(sequ){
			imprimirVerifyBirdID(2, formulario.option("formData").Passagem, sequ);
		}
		function abreHistorico(tipo, pFlagResultado){
			loadPanel.show();
            $.getJSON(urlPreparacao,{
                method	 :"getHistorico",
                passagem : formulario.option("formData").Passagem,
                tipo	 : tipo
            },function(retorno){
				$("#viewHistorico").dxPopup({
					visible: true,
					title: "Histórico "+retorno.title,
					width: "90%",
					height: "95%",
					position: {
						my: "center",
						at: "center",
						of: window
					},
					dragEnabled: true,
					contentTemplate: function(e) {
						conteudoDialog = $("<div id='divViewHistorico'>")
						e.append(conteudoDialog);
						$("#divViewHistorico").dxDataGrid({
							dataSource: retorno.dataSource,
							columns : retorno.columns,
							customizeColumns: function (columns) {
								
								if (pFlagResultado == 1) {
									$.each(columns, function (_, element) {
										if (element.caption != "Exame") {
											element.headerCellTemplate = headerTemplateSelecionar;
										}
									});
								} else if (pFlagResultado == 2) {
									$.each(columns, function (_, element) {
										if (element.caption != "Exame") {
											element.headerCellTemplate = headerTemplateExames;
										}
									});
								}
							},
							filterRow: { visible: false },
							hoverStateEnabled: true,
							paging: { 
								enabled: false 
							},
							height: function() {
								return window.innerHeight-120;
							},	
							showBorders: true,
							showRowLines: true,
							rowAlternationEnabled: true,
							wordWrapEnabled:true,
							onCellPrepared: function (dados) {
								
								if (tipo == 2 || tipo == 3) {
									if (dados.rowType == "data" && dados.column.dataType == "string"){
								
										//dados.cellElement[0].innerHTML = dados.text;
										
										if (dados.columnIndex == 0) {
											var icon = "<i fas class='fas fa-check-circle' style='color:green'></i> ";
											var span = $("<span>").css("cursor", "pointer").html(icon + dados.text);
											
											if (tipo == 2) {
												span.click(function(event){ addHistReceituario(dados.data) });
											} else if (tipo == 3) {
												span.click(function(event){ addHistDeclaracao(dados.data) });
											}
											
											dados.cellElement[0].innerHTML = "";
											dados.cellElement[0].appendChild(span.get(0));
										}
									}
								}
							}
			    	}).dxDataGrid("instance")
					
					}		
				})
			})
		}
		
		function addExames(codPerfil,tipoPerfil){
			if (codPerfil==""||codPerfil==null){
				return
			}
			$.getJSON(urlPreparacao,{
                method	:"addExames",
                codigo	: codPerfil,
                tipo	: tipoPerfil
            },function(){
	            alteracao=1
            	dataSourceGridProtocolo.pageIndex(0)
            	dataSourceGridProtocolo.reload()
	        });
		}
		
		function carregaDataSourceReceitas(){
			dataSourceGridReceitas = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					update: function (key, values) {
						$.post(urlPreparacao,{
							method	 	:"updateReceitaCadastrada",
							admissao: admissao,
							nseq		: key.SeqReceita,
							dataHora	: values.removeDataHoraImp,
							cid: values.cid,
							relatorio: 0
						},function(){
						},'json');
					},
					remove : function(args){
						alteracao=1
						$.getJSON(urlPreparacao,{
							method	 	:"deletaReceita",
							codigo		: args.SeqReceita,
							admissao: admissao
						});
					},
					load: function(args) {
						return $.getJSON(urlPreparacao,{
							method	  	: "recReceitas"
						});
					}	
				})
			})

		}
		function carregaDataGridReceitas(){
	    	divReceitasGrid = $("#divReceitasGrid").dxDataGrid({
				dataSource	: dataSourceGridReceitas,
				columns		: [{
					dataField: "SeqReceita",
					caption: "Seq", 
					alignment: "center",
					width		: "40px",
					allowEditing: false
				},{
					dataField	: "Receituario",
					caption		: "Receituário",
					width		: "60%",
					allowEditing: false
           		},{
					dataField	: "removeDataHoraImp",
					caption		: "Data/Hora Impressão?",
					dataType	: "boolean",
					width		: "90px",
					allowEditing: true,
        		},{
					dataField	: "cid",
					caption		: "CID Impressão?",
					dataType	: "boolean",
					width		: "45px",
					allowEditing: true,
        		},{
	        		dataField	: "Imprimir",
	        		alignment	: "center",
	        		allowEditing: false,
	        		width		: "70px",
							cellTemplate: function(container, options) {
								container.append("<i class='text-success fa fa-print imprimirReceituario' title='Imprimir Requisição de Exames' data-seq='"+options.key.SeqReceita+"' onclick='imprimirRec(this)' style='cursor:pointer'/>")
		          }
        		},{
	        		dataField	  : "Relatorio",
	        		caption 	  : "Relatório Complementar",
	        		alignment		: "center",
	        		allowEditing: false,
	        		width				: "90px",
							cellTemplate: function(container, options) {
								if(options.data.RelAnexo == 0){
									container.append("<i class='text-success fa fa-pencil' title='Imprimir Relatorios Complementares' onclick=RelatorioComplementar('"+admissao+"','"+options.key.SeqReceita+"','"+4+"') style='cursor:pointer'/>")
								}
								else{
									container.append("")
								}
							}
	        	}],
				filterRow: { visible: false },
				hoverStateEnabled: true,
				paging: { enabled: true, pageSize: 10 },
				editing: {
		            //mode: "batch",
		            mode: "cell",
		            allowUpdating: true, //!toolBar.option("items")[0].disabled,
		            allowDeleting: !toolBar.option("items")[0].disabled,
                    useIcons: true,
		        },					
				height: function() {
					return window.innerHeight - tamanhoForm;
				},
				onCellClick: function(dados){
					if (dados.columnIndex<2){
						seqReceituario = dados.data.SeqReceita;
						$("#dvSeqReceitaCod").html(dados.data.SeqReceita)
						$("#dvSeqReceitaTexto").html("Seq.: "+dados.data.SeqReceita)
						formReceituario.updateData("receituario",dados.data.Receituario)
					}else{
						divReceitasGrid.clearSelection()
						$("#dvSeqReceitaCod").html("")
						$("#dvSeqReceitaTexto").html("&nbsp;")
						//formReceituario.resetValues()
						//formReceituario.updateData("tipoImpressao","Normal")
					}
				},
				/*
				onSelectionChanged: function(selectedItems) {
					if (selectedItems.selectedRowsData.length>0){
						seqReceituario = selectedItems.selectedRowsData[0].SeqReceita;
						$("#dvSeqReceitaCod").html(selectedItems.selectedRowsData[0].SeqReceita)
						$("#dvSeqReceitaTexto").html("Seq.: "+selectedItems.selectedRowsData[0].SeqReceita)
						formReceituario.updateData("receituario",selectedItems.selectedRowsData[0].Receituario)
						formReceituario.updateData("removeDataHoraImp",selectedItems.selectedRowsData[0].removeDataHoraImp)
					}
				},*/
				selection: { mode: "single" },
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				onToolbarPreparing: function(e) {
					e.toolbarOptions.items.unshift({
						location: "after",
						widget: "dxButton",
						options: {
							icon	: "undo",
							height	: 28,
							text	: "Histórico de Receituários",
							hint	: "Exibir Histórico de Receituários",
					        stylingMode	: "contained",
							type		: "default",
							onClick	: function(e) {
								abreHistorico(2, 0)
							}
						}
					})
				}				
			}).dxDataGrid("instance")
		}

		function imprimirReceituario(sequ){
			imprimir(4,formulario.option("formData").Passagem,sequ)
		}
		//Declarações
		
		function carregaDataSourceDeclaracoes(){
			dataSourceGridDeclaracoes = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					remove : function(args){
						alteracao=1
						$.getJSON(urlPreparacao,{
							method	 	:"deletaDeclaracao",
							codigo		: args.SeqDeclaracao
						});
					},
					load: function(args) {
						return $.getJSON(urlPreparacao,{
							method	  	: "recDeclaracao"
						},function(rs){});
					}	
				})
			})

		}
		function carregaDataGridDeclaracoes(){
	    	divDeclaracoesGrid = $("#divDeclaracoesGrid").dxDataGrid({
				dataSource	: dataSourceGridDeclaracoes,
				//disabled	: toolBar.option("items")[0].disabled, // Jamilson Breve - alterado - 14/05/2021
				columns		: [{
					dataField: "SeqDeclaracao",
					caption: "Seq", 
					alignment: "left"
				},{
					dataField	: "Declaracao",
					caption		: "Descrição",
					width		: "40%"
           		},{
					dataField	: "tipoDocumentoExt",
					caption		: "Tipo",
					width		: "15%"
           		},{
					dataField	: "removeDataHoraImpExt",
					caption		: "Data/Hora na Impressão?",
					width		: "10%"
           		},{
					dataField	: "cid",
					caption		: "CID Impressão?",
					width		: "10%"
           		}],
				filterRow: { visible: false },
				hoverStateEnabled: true,
				paging: { enabled: true, pageSize: 10 },
				editing: {
		            //mode: "batch",
		            mode: "popup",
		            allowUpdating: false,
		            allowAdding	 : false,
		            allowDeleting: true,
                    useIcons: true,
		        },					
				height: function() {
					return window.innerHeight - tamanhoForm;
				},	
				onSelectionChanged: function(selectedItems) {
					if (selectedItems.selectedRowsData.length>0){
						seqDeclaracao = selectedItems.selectedRowsData[0].SeqDeclaracao;
						$("#dvSeqDeclaracaoCod").html(selectedItems.selectedRowsData[0].SeqDeclaracao)
						$("#dvSeqDeclaracaoTexto").html("Seq.: "+selectedItems.selectedRowsData[0].SeqDeclaracao)
						formDeclaracao.updateData("declaracao",selectedItems.selectedRowsData[0].Declaracao)
						formDeclaracao.updateData("tipoDocumento",selectedItems.selectedRowsData[0].tipoDocumento)
						formDeclaracao.updateData("removeDataHoraImp",selectedItems.selectedRowsData[0].removeDataHoraImp)
						formDeclaracao.updateData("cid",selectedItems.selectedRowsData[0].cid=="Sim"?1:0)
					}
				},
				selection: { mode: "single" },
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				onToolbarPreparing: function(e) {
					e.toolbarOptions.items.unshift({
						location: "after",
						widget: "dxButton",
						options: {
							icon: "fa fa-print",
							height: 28,
							width: 28,
							hint: "Imprimir Declaração",
							onClick: function(e) {
								imprimir(40,formulario.option("formData").Passagem)
							}
						}
					});
					
					e.toolbarOptions.items.unshift({
						location: "after",
						widget: "dxButton",
						options: {
							icon	: "undo",
							height	: 28,
							text	: "Histórico de Declaração",
							hint	: "Exibir Histórico de Declaração/Relatório",
					    stylingMode	: "contained",
							type		: "default",
							onClick	: function(e) {
								abreHistorico(3, 0);
							}
						}
					});
				}			
			}).dxDataGrid("instance")
		}	
		//Fim

		function imprimirResultado(pData){
			$.get(urlPreparacao,{
				method	:"ImprimirResultado",
				paciente: codPacienteValor,
				data		: pData
			},function(retorno){
				eval(retorno)
			})
		}

		function imprimirRec(self) {
			var pTipoReceituario = formReceituario.getEditor("tipoImpressao").option("value");
			$.getJSON(urlPreparacao,{
				method:"verificaBirdID"
			}, function(ret) {
				if (ret == 1) imprimirReceituarioBird(self,pTipoReceituario);
				else imprimirReceituario(pTipoReceituario!="Normal" ? self.dataset.seq : '');
			});
		}

		function imprimirReceituarioBird(self,pTipoReceituario) {
			var fRemoverImprimirData = 0;
			var passagem = formulario.option("formData").Passagem;
			//var pTipoReceituario = formReceituario.getEditor("tipoImpressao").option("value");
			
			if (toolBar.option("items")[0].disabled) alteracao = 0;
			
			if (pTipoReceituario == "Normal") {
				if (alteracao == 0) {
					$('.imprimirReceituario').each(function(){
						$.post(urlPreparacao, { method: "Impressoes", tipoImpressao: 4, passagem: passagem,
							fRemoverImprimirData: fRemoverImprimirData, seqDeclaracao: seqDeclaracao,
							idEvolucao: this.dataset.seq, pTipoReceituario: pTipoReceituario, codPaciente: codPaciente.option("value"),
							flagGravarBird: "receituarioNormal"
						},function(retorno) {
							console.log(retorno)
							eval(retorno);
						});
					});
				}else {
					var result = DevExpress.ui.dialog.confirm("<i>Para continuar com a impressão, é necessário salvar os dados. Deseja salvar?", "Confirma armazenamento");
					result.done(function(dialogResult) {
						if (!dialogResult) return;
						$.ajaxSetup({async: false});
						salvarDados();
						$('.imprimirReceituario').each(function(){ 
							$.get(urlPreparacao, { method:"Impressoes", tipoImpressao: 4, passagem: passagem, 
								fRemoverImprimirData: fRemoverImprimirData, seqDeclaracao: seqDeclaracao,
								idEvolucao: this.dataset.seq, pTipoReceituario: pTipoReceituario,
								codPaciente: codPaciente.option("value"), flagGravarBird: "receituarioNormal"
							},function(retorno){
								$.ajaxSetup({async: true});
								console.log(retorno)
								eval(retorno);
							});
						});
					});
				}
			}else {
				if (alteracao == 0) {
					for (var i=0;i<1;i++) {
						$.post(urlPreparacao, { method: "Impressoes", tipoImpressao: 4, passagem: passagem, 
							fRemoverImprimirData: fRemoverImprimirData, seqDeclaracao: seqDeclaracao,
							idEvolucao: self.dataset.seq, pTipoReceituario: pTipoReceituario, 
							codPaciente: codPaciente.option("value"), flagGravarBird: "receituarioEspecial"
						},function(retorno) {
							eval(retorno);
						});
					}
				}else {
					var result = DevExpress.ui.dialog.confirm("<i>Para continuar com a impressão, é necessário salvar os dados. Deseja salvar?", "Confirma armazenamento");
					result.done(function(dialogResult) {
						if (!dialogResult) return;
						$.ajaxSetup({async: false});
						salvarDados();
						for (var i=0;i<1;i++) {
							$.get(urlPreparacao, { method:"Impressoes", tipoImpressao: 4, passagem: passagem,
								fRemoverImprimirData: fRemoverImprimirData, seqDeclaracao: seqDeclaracao,
								idEvolucao: self.dataset.seq, pTipoReceituario: pTipoReceituario,
								codPaciente: codPaciente.option("value"), flagGravarBird: "receituarioEspecial"
							},function(retorno){
								$.ajaxSetup({async: true});
								eval(retorno);
							});
						}
					});
				}
			}
		}

		/*function imprimirReceituarioBird(self,pTipoReceituario) {
			var fRemoverImprimirData = 0;
			var passagem = formulario.option("formData").Passagem;
			//var pTipoReceituario = formReceituario.getEditor("tipoImpressao").option("value");
			
			if (toolBar.option("items")[0].disabled) alteracao = 0;
			
			if (pTipoReceituario == "Normal") {
				
				if (alteracao == 0) {
					$('.imprimirReceituario').each(function(){
						$.post(urlPreparacao, {
		          method: "Impressoes",
		          tipoImpressao: 4,
		          passagem: passagem,
		          fRemoverImprimirData: fRemoverImprimirData,
		          seqDeclaracao: seqDeclaracao,
		          idEvolucao: this.dataset.seq,
		          pTipoReceituario: pTipoReceituario,
		          codPaciente: codPaciente.option("value")
			      },function(retorno) {
			        eval(retorno);
			      });
					});
				}
				else {
					var result = DevExpress.ui.dialog.confirm("<i>Para continuar com a impressão, é necessário salvar os dados. Deseja salvar?", "Confirma armazenamento");
			    result.done(function(dialogResult) {
			    	if (!dialogResult) return;
			    	$.ajaxSetup({async: false});
						salvarDados();
			    	$('.imprimirReceituario').each(function(){
				      $.get(urlPreparacao, {
		            method:"Impressoes",
		            tipoImpressao: 4,
		            passagem: passagem,
		            fRemoverImprimirData: fRemoverImprimirData,
		            seqDeclaracao: seqDeclaracao,
		            idEvolucao: this.dataset.seq,
		            pTipoReceituario: pTipoReceituario,
		            codPaciente: codPaciente.option("value")
		          },function(retorno){
		            $.ajaxSetup({async: true});
		            eval(retorno);
		          });
			    	});
			    });
				}
			}
			else {
				if (alteracao == 0) {
					for (var i=0;i<2;i++) {
						$.post(urlPreparacao, {
		          method: "Impressoes",
		          tipoImpressao: 4,
		          passagem: passagem,
		          fRemoverImprimirData: fRemoverImprimirData,
		          seqDeclaracao: seqDeclaracao,
		          idEvolucao: self.dataset.seq,
		          pTipoReceituario: pTipoReceituario,
		          codPaciente: codPaciente.option("value")
			      },function(retorno) {
			        eval(retorno);
			      });
					}
				}
				else {
					var result = DevExpress.ui.dialog.confirm("<i>Para continuar com a impressão, é necessário salvar os dados. Deseja salvar?", "Confirma armazenamento");
			    result.done(function(dialogResult) {
			    	if (!dialogResult) return;
			    	$.ajaxSetup({async: false});
						salvarDados();
			    	for (var i=0;i<2;i++) {
				      $.get(urlPreparacao, {
		            method:"Impressoes",
		            tipoImpressao: 4,
		            passagem: passagem,
		            fRemoverImprimirData: fRemoverImprimirData,
		            seqDeclaracao: seqDeclaracao,
		            idEvolucao: self.dataset.seq,
		            pTipoReceituario: pTipoReceituario,
		            codPaciente: codPaciente.option("value")
		          },function(retorno){
		            $.ajaxSetup({async: true});
		            eval(retorno);
		          });
			    	}
			    });
				}
			}
		}*/
		
		function imprimir(tipo,passagem,xIdEvolucao){
			var fRemoverImprimirData = 0;
			if ((tipo == 2 || tipo == 3) && (xIdEvolucao=="" || xIdEvolucao==null)){
				DevExpress.ui.notify("Selecione a lista de Exame", "warning", 4000);
				return;
			}
			var pTipoReceituario = "Normal";
			if (tipo == 4) {
				var pTipoReceituario = formReceituario.getEditor("tipoImpressao").option("value");
				if (pTipoReceituario != "Normal" && xIdEvolucao == "") {
					DevExpress.ui.notify("Selecione o receituário", "warning", 4000);
					return;
				}
			}
			if (tipo == 40 && seqDeclaracao == "") {
				DevExpress.ui.notify("Selecione a Declaração", "warning", 4000);
				return;
			}
			if (toolBar.option("items")[0].disabled){
				alteracao=0;
			}
			
			if (alteracao==0||tipo==10){
				$.post(urlPreparacao,{
          method:"Impressoes",
          tipoImpressao: tipo,
          passagem: passagem,
          fRemoverImprimirData: fRemoverImprimirData,
          seqDeclaracao: seqDeclaracao,
          idEvolucao: xIdEvolucao,
          pTipoReceituario: pTipoReceituario,
          codPaciente: codPaciente.option("value")
	      },function(retorno){
	        eval(retorno)
        });				
			}else{
				var result = DevExpress.ui.dialog.confirm("<i>Para continuar com a impressão, é necessário salvar os dados. Deseja salvar?", "Confirma armazenamento");
		    result.done(function(dialogResult) {
	        if (!dialogResult) return;
	        $.ajaxSetup({async: false});
					salvarDados();
					$.get(urlPreparacao,{
	          method:"Impressoes",
	          tipoImpressao: tipo,
	          passagem: passagem,
	          fRemoverImprimirData: fRemoverImprimirData,
	          seqDeclaracao: seqDeclaracao,
	          idEvolucao: xIdEvolucao,
	          pTipoReceituario: pTipoReceituario,
	          codPaciente: codPaciente.option("value")
	        },function(retorno){
	          $.ajaxSetup({async: true});
		      	eval(retorno)
	        })
		    })
			}
		
		}
		
	function carregaPacientes(){
		ocultaAbas()
		gravarPaciente=0
		if (codPaciente){
			gravarPaciente=1
			codPaciente.dispose()
		}			
		codPaciente = $("#codPaciente").dxSelectBox({
			dataSource: new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					byKey: function(args) {
						return $.getJSON(urlPreparacao,{
							method:"GetPacientes",
							codigo: args
						});
					},
					load: function(args) {
						return $.getJSON(urlPreparacao,{
							method:"GetPacientes",
							usuario: YBED,
							skip:args.skip,
							take:args.take,
							searchValue:args.searchValue
						});
					}
				})
			}),
			searchEnabled: true,
			valueExpr: "Codigo", 
			displayExpr: "Descricao",
			showClearButton: false,
			value: codPacienteValor,
			onFocusOut: function(obj){
				obj.component.close()
			},
			buttons: [{
				name: "clearButton",
				location: "after",
				options: {
					visible: 1,
					icon: "clear",
					stylingMode: "text",
					width: 42,
          elementAttr: {
	          class: "currency"
          },
					onClick: function() {
						if (toolBar.option("items")[0].disabled){
							alteracao=0
						}
						if (alteracao!=0){
							var result = DevExpress.ui.dialog.confirm("<i>Gostaria de salvar as alterações?", "Confirma armazenamento");
						    result.done(function(dialogResult) {
				        if (!dialogResult){
									location.reload();
									return
				        }
								salvarDados();
					 			setTimeout(function(){ 
									location.reload();
								}, 500);
					    })
						}else{
							location.reload();
						}
					}
				}
      }],
			onValueChanged: function(e) {
				var d = new Date();
				horaInicio = d.getTime();
				carregaHorario()
				carregarPaciente(e.value)
				//data.component.updateData(data.dataField, e.value);
				tempHistorico = 0;
				$("#buscaHist").dxForm("instance").resetValues();
				$("#consultaPaciente").dxSelectBox("instance").option("value", e.value);
				gridAdmissoesPassagens.getDataSource().reload();
			}
		}).dxSelectBox("instance");
		if (gravarPaciente==1){
			carregarPaciente(codPaciente.option("value"))
			//
		}

	}
	    
	    $("#selectBoxContainer").find('.dx-icon-clear').on('click', function () {  
  			  alert('click');  
			});
	    
	    function carregaHorario(){
		    if (codPaciente.option("value")==""||codPaciente.option("value")==null){
			    $("#relogio").html("")
			    return
		    }
			var d = new Date();
			var agora = d.getTime();
			var segundos =  Math.round((agora-horaInicio)/1000)
			var minutos = Math.trunc(segundos/60)
			if (minutos<10){
				minutos = "0"+minutos
			}
			segundos = segundos%60
			if (segundos<10){
				segundos = "0"+segundos
			}
			color = ""
			if (minutos>=15){
				color = "orange"
			}
			if (minutos>=20){
				color = "red"
			}
			var horario = minutos+":"+segundos
		    $("#relogio").html("<font style='font-size:12px' color="+color+">"+(color==""?"":"<b>")+"Tempo:\n<font style='font-size:15px'>"+horario)
		    setTimeout("carregaHorario()",1000)
	    }
			function carregarPaciente(paciente){
				if (paciente==null||paciente==""){
					ocultaAbas()
					$(".dx-tabpanel").dxTabPanel("instance").option("selectedIndex", 0)
					$(".form-avatar").css("background-image","")
					$(".alertas").html("")
					toolBar.option("items")[5].disabled=true;
					toolBar.repaint()
					$("#divForm").dxForm("instance").updateData("Nascimento","")
					$("#divForm").dxForm("instance").updateData("Idade","")
					$("#divForm").dxForm("instance").updateData("Sexo","")
					$("#divForm").dxForm("instance").updateData("Telefone","")
					$("#divForm").dxForm("instance").updateData("Telefone2","")
					$("#divForm").dxForm("instance").updateData("Alergias","")
					$("#divForm").dxForm("instance").updateData("AlergiasSel","")
					$("#divForm").dxForm("instance").updateData("Passagem","")
					$("#divForm").dxForm("instance").updateData("Medico","")
					$("#divForm").dxForm("instance").updateData("Prontuário","")
					carregaAdmissoesAbertas()
					return
				}
				toolBar.option("items")[5].disabled=false;
				toolBar.repaint()
				codPacienteValor = paciente
				$.getJSON(urlPreparacao,{
					method:"recPaciente",
					codPaciente:paciente,
					passagem:admissao
				},function(retorno){
					if (parent.document.getElementById("spCabecalho")) {
						parent.document.getElementById("spCabecalho").innerHTML="Prontuário Eletrônico - PEP"
					}
					formulario.option("formData", retorno)
					$(".form-avatar").css("background-image","url("+retorno.ImageSRC+")")
					$(".alertas").html('<font size=4>'+retorno.Alertas+'</font>')
					ocultaAgenda()
					ocultaAbas()
					carregaHistorico()
					setTimeout(function(){
						toolBar.option("items")[5].disabled=false;
						toolBar.repaint()
					},100)
				})
			}
	    function ocultaAgenda(){
			$(".dx-item.dx-tab").each(function(){
				if ($(this)[0].innerText=="Agenda") {
					$(this)[0].innerText="Hist. Admissões"
				}
				if ($(this)[0].innerText=="Agenda Próx. 5 Dias") {
					$(this).addClass("dx-state-invisible")
					return
				}
				if ($(this)[0].innerText=="Histórico de Passagens") {
					$(this).addClass("dx-state-invisible")
					return
				}
			})
		}
	    function ocultaAbas(){
			$(".dx-item.dx-tab").each(function(){
				if ($(this)[0].innerText=="Hist. Admissões"||$(this)[0].innerText=="Agenda") {
					$(this)[0].innerText="Agenda"
					return
				}
				if ($(this)[0].innerText=="Agenda Próx. 5 Dias") {
					$(this).removeClass("dx-state-invisible")
					return
				}
				if ($(this)[0].innerText=="Histórico de Passagens") {
					$(this).removeClass("dx-state-invisible")
					return
				}
				
				$(this).addClass("dx-state-invisible")
			})
			toolBar.option("items")[0].disabled=true
			toolBar.option("items")[1].disabled=true
			toolBar.option("items")[2].disabled=true
			toolBar.option("items")[5].disabled=true;
			toolBar.repaint()
			//toolBar.item("salvar", "visible", false);
			//toolBar.option("disabled",true)
		}
		
		function exibirAbas(){
			$(".dx-item.dx-tab").each(function(){
				if ($(this)[0].innerText=="Agenda") {
					$(this)[0].innerText="Hist. Admissões"
				}
				if ($(this)[0].innerText=="Agenda Próx. 5 Dias") {
					$(this).addClass("dx-state-invisible")
					return
				}
				if ($(this)[0].innerText=="Histórico de Passagens") {
					$(this).addClass("dx-state-invisible")
					return
				}
				$(this).removeClass("dx-state-invisible")
			})
		}
		
		function addDatasGestacionais(){
			 if (toolBar.option("items")[0].disabled){
				 return
			 }
			 popupOptions = {
		        width: 400,
		        height: 450,
		        showTitle: true,
		        title: "Adicionar Datas Gestacionais",
		        visible: true,
		        dragEnabled: false,
		        closeOnOutsideClick: false
		    }		
		    if ($("#openPesquisa").html()!=""){
		    	pesquisaExames.dispose()
		    	openPesquisa.dispose()
		    	$("#pesquisaExames").remove();
		    }
   			$("#openPesquisa").html("<div id='pesquisaExames'></div><br><div id='divExamesDetalhesPopupx'></div>")
			openPesquisa = $("#openPesquisa").dxPopup(popupOptions).dxPopup("instance")
			preparaDatasGestacionaisPopup()
		}
		
        function preparaDatasGestacionaisPopup(){
	        {
		        pesquisaExames = $("#pesquisaExames").dxForm({
		            itemType: "group",
        			cssClass: "first-group",
        			colCount: 1,
					screenByWidth: function(width) {
			            return "lg";
			        },
                    items: [{
	                    dataField: "DataGestacional",
	                    editorOptions: {
             				width: "100%",
							showClearButton: true,
							useMaskBehavior: true,
             				max		: new Date()
            			},
						editorType	: "dxDateBox",
						validationRules: [{ type: "required" }],
						
                    },{
						itemType: "button",
						horizontalAlignment: "right",
			            buttonOptions: {
					        stylingMode: "contained",
					        icon: "add",
					        type: "success",
					        hint: "Adicionar Data Gestacional",
					        text: "Adicionar",
					        onClick: function() {
								if (!pesquisaExames.validate().isValid){
									DevExpress.ui.notify("Há campos inválidos", "warning", 4000);
									return
								}
								dados = pesquisaExames.option("formData")
								alteracao=1
								$.getJSON(urlPreparacao,{
									method	 	:"salvaDataGestacional",
									dados		: JSON.stringify(dados)
								},function(ret){
						            DevExpress.ui.notify("Data gestacional adicionada com sucesso!", "success", 4000);
					            	pesquisaExames.resetValues()
					            	dataSourceGridDataGestacional.pageIndex(0)
					            	dataSourceGridDataGestacional.reload()
								});
					        }
			            }								

					}]
	            }).dxForm("instance")

			dataSourceGridDataGestacional = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
					remove : function(args){
						alteracao=1
						$.getJSON(urlPreparacao,{
							method	 	:"deletaDataGestacional",
							data		: args.DataO
						});
					},
					load: function(args) {
						return $.getJSON(urlPreparacao,{
							method	  : "recDataGestacional"
						},function(ret){
							
							vetor = []
							for (cont=0;cont<ret.length;cont++){
								vetor.push(ret[cont].DataF)
							}
							formAnamnese.updateData("datasGestacionais",vetor)
						});
					}	
				})
			})

		    	divExamesDetalhesPopup = $("#divExamesDetalhesPopupx").dxDataGrid({
					columns		: [{
						dataField: "Data",
						caption: "Data Gestacional", 
						alignment: "center",
		                allowEditing: false,
		                dataType:"date"
					}],
					editing: {
			            mode: "cell",
			            allowDeleting: !toolBar.option("items")[0].disabled,
	                    useIcons: true,
			        },					
					filterRow: { visible: false },
					hoverStateEnabled: true,
					paging: { enabled: true, pageSize: 10 },	
					showBorders: true,
					height: "240",
					showRowLines: true,
					rowAlternationEnabled: true,
				}).dxDataGrid("instance")
	            divExamesDetalhesPopup.option("dataSource",dataSourceGridDataGestacional)

	        }
	    }
		
		
		function addExamesPopup(tipo){
			 if (toolBar.option("items")[0].disabled){
				 return
			 }
			 popupOptions = {
		        width: 800,
		        height: 450,
		        showTitle: true,
		        title: "Adicionar Exames",
		        visible: true,
		        dragEnabled: false,
		        closeOnOutsideClick: false
		    }		
		    if ($("#openPesquisa").html()!=""){
		    	pesquisaExames.dispose()
		    	openPesquisa.dispose()
		    	$("#pesquisaExames").remove();
			    if (typeof divExamesDetalhesPopup!="undefined"){
				    divExamesDetalhesPopup.dispose()
				    $("#divExamesDetalhesPopupx").remove();
			    }
		    }
   			$("#openPesquisa").html("<div id='pesquisaExames'></div><br><div id='divExamesDetalhesPopupx'></div>")
			openPesquisa = $("#openPesquisa").dxPopup(popupOptions).dxPopup("instance")
			preparaExamesPopup(tipo)
		}

		
        function preparaExamesPopup(tipo){
	        {
			dataSourceExame = 	new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
	                byKey: function(args) {
	                    return $.getJSON(urlPreparacao,{
        	            	method	:"listaExames",
        	            	tipo	: tipo,
		                    codigo	: args
		                });
	                },
		            load: function(args) {
	                    return $.getJSON(urlPreparacao,{
        	            	method	:"listaExames",
        	            	tipo	: tipo,
							searchValue:args.searchValue,
                        	skip:args.skip,
                        	take:args.take,
		                });
		                }
		            })
		        })		        
		        pesquisaExames = $("#pesquisaExames").dxForm({
		            itemType: "group",
        			cssClass: "first-group",
        			colCount: 20,
					screenByWidth: function(width) {
			            return "lg";
			        },
                    items: [{
	                    colSpan		: 19,
	                    cssClass:"Padding-R4",
	                    dataField	: "CodExame",
						label		: {
							text	: "Código Exame"
						},
	                    editorOptions: {
             				width: "100%"
            			},
						editorType	: "dxSelectBox",
						validationRules: [{ type: "required" }],
			            editorOptions: {
							onFocusOut: function(obj){
								obj.component.close()
							},
			                searchEnabled: true,
	        		        valueExpr: "CodExame", 
							displayExpr: "DescExame",
							searchEnabled: true,
							dataSource: dataSourceExame
			            }
                    },{
						itemType: "button",
						cssClass:"Padding-L0",
						horizontalAlignment: "right",
			            buttonOptions: {
					        stylingMode: "outlined",
					        icon: "favorites",
					        type: "normal",
					        disabled: 1,
					        hint: "Cadastrar Novo Exame",
					        onClick: function() {
						        cadastraExames(tipo)
					        }
			            }								

					},{
						colSpan : 20,
						itemType: "button",
						horizontalAlignment: "right",
			            buttonOptions: {
					        stylingMode: "contained",
					        icon: "add",
					        type: "success",
					        hint: "Adicionar Exame",
					        text: "Adicionar",
					        onClick: function() {
								if (!pesquisaExames.validate().isValid){
									DevExpress.ui.notify("Há campos inválidos", "warning", 4000);
									return
								}
								dados = pesquisaExames.option("formData")
								alteracao=1
								$.getJSON(urlPreparacao,{
									method	 	:"salvaExame",
									tipo	  	: tipo,
									dataNew		: JSON.stringify(dados)
								},function(ret){
									if (ret==0){
										DevExpress.ui.notify("Exame já consta na lista!", "error", 4000);
										return
									}
						            DevExpress.ui.notify("Exame adicionado com sucesso!", "success", 4000);
						            pesquisaExames.resetValues()
						            dataSourceGridProtocolo.pageIndex(0)
					            	dataSourceGridProtocolo.reload()
						            
								});
					        }
			            }								

					}]
	            }).dxForm("instance")

		    	divExamesDetalhesPopup = $("#divExamesDetalhesPopupx").dxDataGrid({
					columns		: [{
						dataField: "Descricao",
						caption: "Exame", 
						alignment: "left",
		                allowEditing: false,
					},{
						dataField	: "Observacoes",
						caption		: "Observações",
						width		: "50%"
						
		    		}],
					editing: {
			            mode: "cell",
			            allowUpdating: !toolBar.option("items")[0].disabled,
			            allowDeleting: !toolBar.option("items")[0].disabled,
	                    useIcons: true,
			        },					
					filterRow: { visible: false },
					hoverStateEnabled: true,
					paging: { enabled: true, pageSize: 10 },	
					showBorders: true,
					height: "240",
					showRowLines: true,
					rowAlternationEnabled: true,
				}).dxDataGrid("instance")
            	divExamesDetalhesPopup.option("dataSource",dataSourceGridProtocolo)

	        }
	    }
		
		
	    function consultaExames(tipo){
			 popupOptions = {
		        width: 800,
		        height: 550,
		        showTitle: true,
		        title: "Pesquisa Exames",
		        visible: true,
		        dragEnabled: false,
		        closeOnOutsideClick: false
		    }		
		    if ($("#openPesquisa").html()!=""){
		    	pesquisaExames.dispose()
		    	openPesquisa.dispose()
		    }
   			$("#openPesquisa").html("<div id='pesquisaExames'></div>")
			openPesquisa = $("#openPesquisa").dxPopup(popupOptions).dxPopup("instance")
			preparaPesquisaExame(tipo)
		}

	    function cadastraExames(tipo){
			 popupOptions = {
		        width: 700,
		        height: 200,
		        showTitle: true,
		        title: "Cadastrar Exames",
		        visible: true,
		        dragEnabled: false,
		        closeOnOutsideClick: false
		    }		
		    if ($("#openPesquisa1").html()!=""){
		    	pesquisaExames1.dispose()
		    	openPesquisa1.dispose()
		    }
   			$("#openPesquisa1").html("<div id='pesquisaExames1'></div>")
			openPesquisa1 = $("#openPesquisa1").dxPopup(popupOptions).dxPopup("instance")
			preparaCadastraExame(tipo)
		}

        function preparaCadastraExame(tipo){
	        pesquisaExames1 = $("#pesquisaExames1").dxForm({
		        scrollingEnabled	: true,
				screenByWidth: function(width) {
		            return "lg";
		        },
				items:[{
					itemType: "group",
					items	: [{
						dataField	: "descricao",
						label		: {
							text	: "Descrição do Exame"
						},
					}]
				},{
					itemType: "button",
					horizontalAlignment: "right",
		            buttonOptions: {
				        stylingMode: "contained",
				        icon: "save",
				        type: "success",
				        hint: "Salvar",
				        text: "Salvar",
				        onClick: function() {
	   			            $.getJSON(urlPreparacao,{
	        	            	method		: "salvarExame",
	        	            	descricao	: pesquisaExames1.option("formData").descricao,
	        	            	tipo		: tipo
		        	    	},function(result){
			        	    	if (result.status==0){
				        	    	DevExpress.ui.notify(result.retorno, "warning", 4000);
				        	    	return
			        	    	}
			        	    	DevExpress.ui.notify(result.retorno, "sucess", 4000);
			        	    	dataSourceExame.pageIndex(0)
			        	    	dataSourceExame.reload()
			        	    	openPesquisa1.hide()
		        	    	})

				        }
		            }								

				}]
					
		        }).dxForm("instance")
	    }




	    function uploadExames(tipo){
			 popupOptions = {
		        width: 600,
		        height: 350,
		        showTitle: true,
		        title: "Upload de Exames",
		        visible: true,
		        dragEnabled: false,
		        closeOnOutsideClick: false
		    }		
		    if ($("#openPesquisa").html()!=""){
		    	pesquisaExames.dispose()
		    	openPesquisa.dispose()
		    }
   			$("#openPesquisa").html("<form id='form' method='post' action='' enctype='multipart/form-data'>"+
   															"<div id='pesquisaExames'></div></form>")
				openPesquisa = $("#openPesquisa").dxPopup(popupOptions).dxPopup("instance")
				preparaUpload()
		}

		function abrePesquisaPacientes(){
			 popupOptions = {
		        width: "90%",
		        height: "90%",
		        showTitle: true,
		        title: "Pesquisa Pacientes",
		        visible: true,
		        dragEnabled: false,
		        closeOnOutsideClick: false
		    }		
		    if ($("#openPesquisa").html()!=""){
		    	pesquisaExames.dispose()
		    	openPesquisa.dispose()
		    }
   			$("#openPesquisa").html("<div id='pesquisaExames'></div>")
			openPesquisa = $("#openPesquisa").dxPopup(popupOptions).dxPopup("instance")
			preparaPesquisaPacientes()
		}		
		
		function preparaPesquisaPacientes(){
	        pesquisaExames = $("#pesquisaExames").dxDataGrid({
				dataSource:  new DevExpress.data.CustomStore({
            		load: function(args) {
	            		var deferred = $.Deferred()
			            $.getJSON(urlPreparacao,{
        	            	method	:"pesquisaPacientes",
        	            	filter	: JSON.stringify(args.filter),
        	            	sort	: JSON.stringify(args.sort),
        	            	take	: JSON.stringify(args.take),
        	            	skip	: JSON.stringify(args.skip),
	        	    	},function(result){
							deferred.resolve(
								result.data, {
									totalCount: result.totalCount
								});
						});
						return deferred.promise();
    	    		}	
    			}),
    			remoteOperations	: true,
    			columns:[{
	    				dataField : "PatientID",
	    				caption   : "Código",
	    				width	  : "70px"
	    			},{
	    				dataField : "PID",
	    				caption   : "Prontuário",
	    				width	  : "100px"
	    			},{
		    			dataField : "Name",
		    			caption   : "Nome",
		    			width	  : "200px"
	    			},{
		    			dataField : "SSN",
		    			caption   : "CPF",
		    			width	  : "100px"
	    			},{
		    			dataField : "DOB",
		    			caption   : "Data Nasc.",
		    			width	  : "100px",
		    			dataType  : "date"
	    			},{
		    			dataField : "Gender",
		    			caption   : "Sexo",
		    			width	  : "100px"
	    			},{
		    			dataField : "MothersName",
		    			caption   : "Nome da Mãe",
		    			width	  : "200px"
	    			},{
		    			dataField : "Tel",
		    			caption   : "Telefone 1",
		    			width	  : "100px"
	    			},{
		    			dataField : "FREE2",
		    			caption   : "Telefone 2",
		    			width	  : "100px"
	    			},{
		    			dataField : "Email",
		    			caption   : "E-mail",
		    			width	  : "150px"
	    			},{
		    			dataField : "Street",
		    			caption   : "Logradouro",
		    			width	  : "200px"
	    			},{
		    			dataField : "FREE4",
		    			caption   : "Número",
		    			width	  : "70px"
	    			},{
		    			dataField : "FREE3",
		    			caption   : "Complemento",
		    			width	  : "100px"
	    			},{
		    			dataField : "FREE6",
		    			caption   : "Bairro",
		    			width	  : "150px"
	    			},{
		    			dataField : "City",
		    			caption   : "Cidade",
		    			width	  : "150px"
	    			},{
		    			dataField : "State",
		    			caption   : "Estado",
		    			width	  : "70px"
	    			}
	    		],
	    		selection: { mode: "single" },
				filterRow: { visible: true },
				hoverStateEnabled: true,
				paging: { enabled: true, pageSize: 25 },
				pager: {
		            showPageSizeSelector: true,
        		    allowedPageSizes: [10, 25, 50, 100],
					showInfo: true,
					showNavigationButtons: true,
        		},				
				height: "100%",	
				showBorders: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				columnFixing: {
		            enabled: true
		        },
				onSelectionChanged: function(selectedItems) {
					if (selectedItems.selectedRowsData.length>0){
						codPacienteValor = selectedItems.selectedRowKeys[0].PatientID
						codPaciente.option("value",codPacienteValor)
						openPesquisa.hide()
					}
				}
			}).dxDataGrid("instance")
		}

		
		function abreHistoricosAnteriores(){
			paciente = codPaciente.option("value")
			 popupOptions = {
		        width: 900,
		        height: 450,
		        showTitle: true,
		        title: "Registros Anteriores",
		        visible: true,
		        dragEnabled: false,
		        closeOnOutsideClick: false
		    }		
		    if ($("#openPesquisa").html()!=""){
		    	pesquisaExames.dispose()
		    	openPesquisa.dispose()
		    }
   			$("#openPesquisa").html("<div id='pesquisaExames'></div>")
			openPesquisa = $("#openPesquisa").dxPopup(popupOptions).dxPopup("instance")
			preparaRegistrosAnteriores(paciente)

		}
	    
        function preparaRegistrosAnteriores(paciente){
            $.getJSON(urlPreparacao,{
                method:"carregaRegistrosAnteriores",
                paciente: paciente
            },function(retorno){
		        pesquisaExames = $("#pesquisaExames").dxForm({
			        formData	: retorno,
			        scrollingEnabled	: true,
					screenByWidth: function(width) {
			            return "lg";
			        },
					items:[{
						itemType: "group",
						items	: formAnamnese.option("items")
					},{
						itemType: "button",
						horizontalAlignment: "right",
			            buttonOptions: {
					        stylingMode: "contained",
					        icon: "save",
					        type: "success",
					        hint: "Salvar",
					        text: "Salvar",
					        onClick: function() {
						        salvarRegistrosAnteriores(paciente)
					        }
			            }								

					}]
					
		        }).dxForm("instance")
            })
		}
	    function salvarRegistrosAnteriores(paciente){
			if (!pesquisaExames.validate().isValid){
				DevExpress.ui.notify("Há campos inválidos", "warning", 4000);
				return
			}
			dadosRegistrosAnteriores = pesquisaExames.option("formData")
	        $.getJSON(urlPreparacao,{
	            method	: "salvarRegistrosAnteriores",
	            paciente: paciente,
	            dados	: JSON.stringify(dadosRegistrosAnteriores)
	        },function(retorno){
		        DevExpress.ui.notify(retorno.mensagem, retorno.tipo, 4000);
		        if (retorno.status==1){
		        	pesquisaExames.updateData("codigo",retorno.codigo)
		        	dataSourceProtocolo.pageIndex(0)
		        	dataSourceProtocolo.reload()
		        }
		    });

		}
	    function editaProtocolos(tipo, pListaExames){
		    
		    if (tipo==1){
		    	titulo = "Criar/Editar Protocolos de Exames Laboratorial"
		    }else{
		    	titulo = "Criar/Editar Protocolos de Outros Exames"
		    }
			 popupOptions = {
		        width: 900,
		        //height: 350,
		        showTitle: true,
		        title: titulo,
		        visible: true,
		        dragEnabled: false,
		        closeOnOutsideClick: false
		    }		
		    if ($("#openPesquisa").html()!=""){
		    	pesquisaExames.dispose()
		    	openPesquisa.dispose()
		    }
   			$("#openPesquisa").html("<div id='pesquisaExames' style='height: 1000px'></div>")
			openPesquisa = $("#openPesquisa").dxPopup(popupOptions).dxPopup("instance")
			preparaProtocolos(tipo, pListaExames)
		}

        function preparaProtocolos(tipo, pListaExames)
        {
	        dataSourceProtocoloCodigo = new DevExpress.data.DataSource({
	          store: new DevExpress.data.CustomStore({
	            byKey: function(args) {
	              if (args==""||args==null){
	                return
	              }
	                return $.getJSON(urlPreparacao,{
	                  method	:"listaPerfilExames",
	                  tipo	: tipo,
	                  codigo	: args
	              });
	            },
	          load: function(args) {
	                  return $.getJSON(urlPreparacao,{
	                    method	: "listaPerfilExames",
	                    tipo	: tipo,
	                    	skip	: args.skip,
	                    	take	: args.take,
	                    	searchValue:args.searchValue,
	                    	pTipoList: 1
	                });
	              }
	          })
	      	});
				        
	        pesquisaExames = $("#pesquisaExames").dxForm({
		        scrollingEnabled	: true,
		    	height	:function() {
					return window.innerHeight - (tamanhoForm);
				},
				screenByWidth: function(width) {
		            return "lg";
		        },
				colCount	: 15,
				items:[{
					colSpan		: 15,
					dataField	: "codigo",
					label		: {
						text	: "Código do Protocolo"
					},
					editorType	: "dxSelectBox",
		            editorOptions: {
						onFocusOut: function(obj){
							obj.component.close()			
						},
        		        valueExpr			: "Codigo", 
        		        acceptCustomValue	: false,
						displayExpr			: "Descricao",
						placeholder 		: "+",
						showClearButton		: true,
						searchEnabled		: true,
						onValueChanged		: function(valor){
							recProtocolo(valor.value)
							dataSourceProtocoloExame.reload()
						},
						itemTemplate: function (data, itemIndex, element) {
							if (perfilExameAnt != data.Perfil){
								retorno = "<b><i>"+data.Perfil+"</i></b><br><br>"
								perfilExameAnt = data.Perfil
								element.append(retorno)
							}
							return element.append(data.DescricaoComposta)
						},
						dataSource: dataSourceProtocoloCodigo
		            }
				},{
					colSpan		: 15,
					dataField	: "descricao",
					validationRules: [{ type: "required" }],
					label		: {
						text	: "Descrição"
					},
				},{
					colSpan		: 15,
					dataField	: "perfilparticular",
					label		: {text	: "Perfil Particular?", visible: true},
					editorType	: "dxCheckBox",
					disabled	: true,
					value		: true,
					editorOptions: {
						onValueChanged: function(e) {
							var pPerfilParticular = pesquisaExames.option("formData").perfilparticular;
						}
					}
				},{
					colSpan		: 15,
					template	: function (data, itemElement) {
			    	itemElement.append("<div id='divExamesProtocolo'>")
		      },		      
				},{
					colSpan		: 15,
					template	: function (data, itemElement) {
			    	itemElement.append("<div id='divAddGrupo'>")
		      },		      
				}]
	    }).dxForm("instance")

			dataSourceProtocoloExame = new DevExpress.data.DataSource({
				store: new DevExpress.data.CustomStore({
		  		key: "CodigodoExame",
		  		loadMode: "raw",   
		  		load: function() {
			  		var pCodigoProtocolo = pesquisaExames.option("formData").codigo
		      	return $.getJSON(urlPreparacao,{
			      	method: "GetExamesProtocolo",
			      	pCodigoProtocolo: pCodigoProtocolo,
			      	pListaExames: pListaExames
			      });
		  		},
		  		insert: function (values) 
		  		{
			  		var pCodigoProtocolo = pesquisaExames.option("formData").codigo
			  		var pDescricao = pesquisaExames.option("formData").descricao
			  		var pPerfilParticular = 1
			  		
			      	if (pCodigoProtocolo == null && pDescricao == "") {
						DevExpress.ui.notify("Selecionar um Código do Protocolo ou Informar a Descrição", "error", 4000);
			      		return;
			      	}
			      	
			      	if (pCodigoProtocolo == null) {
				      	var pCodigoProtocolo = ""	
			      	}
			      	
			        objDados = new Array;
					for (var coluna in values) {
						if (values.hasOwnProperty(coluna)) {
							valor = values[coluna];
							objDados.push(coluna+"~"+valor);
						}
					}
					
					var retorno = #server(VAR.CSP.VARProntuarioEletronico.ArmExamesProtocolo(pCodigoProtocolo, pDescricao, formExame.option("formData").TipoExame, "", objDados, YBED, pPerfilParticular))#;
					
			      	if (pesquisaExames.option("formData").codigo == null || ($("#copiarProtocolo").val()=="1")) {
				      	var array = retorno.split("~");
				      	dataSourceProtocoloCodigo.reload();
				      	pesquisaExames.updateData("codigo",array[1])				      
				      	dataSourceProtocolo.reload();
			      	}
			      	refreshDados();
			    },
				update: function (key, values) 
				{
			  		var pCodigoProtocolo = pesquisaExames.option("formData").codigo
			  		var pDescricao = pesquisaExames.option("formData").descricao
			  		var pPerfilParticular = pesquisaExames.option("formData").perfilparticular
    				var idRow = key;
					objDados = new Array;
					for (var coluna in values) {
						if (values.hasOwnProperty(coluna)) {
							valor = values[coluna];
							if (coluna=="Observacao")
							{
								objDados.push(coluna+"~"+valor);
								objDados.push("CodigoExame"+"~"+key);
							}
						}
					}
					//if ($("#copiarProtocolo").val()=="1" && (pPerfilParticular=="0")) {
					//	var retorno = #server(VAR.CSP.VARProntuarioEletronico.CopiaArmExamesProtocolo($("#novoCodigoProtocolo").val(), pDescricao, formExame.option("formData").TipoExame, "", objDados, YBED, pPerfilParticular))#;
					//} else {
						var retorno = #server(VAR.CSP.VARProntuarioEletronico.ArmExamesProtocolo(pCodigoProtocolo, pDescricao, formExame.option("formData").TipoExame, "", objDados, YBED, pPerfilParticular))#;
					//}
					if (retorno!="")
					{
				      	var array = retorno.split("~");
						
						if ($("#novoCodigoProtocolo").val()!="") {
							var mensagem = "Novo Protocolo: "+array[1]+" gerado com sucesso."
							DevExpress.ui.notify(mensagem, "warning",4000);
							$("#pesquisaExames").dxForm("instance").getEditor("codigo").option("value",array[1]);
							//$("#novoCodigoProtocolo").val("")
							dataSourceProtocoloCodigo.reload()
							refreshDados()
						}
						$("#novoCodigoProtocolo").val(array[1])
					}
					refreshDados();
				}, 
				remove: function (key) 
				{
			  		var pCodigoProtocolo = pesquisaExames.option("formData").codigo;
						#server(VAR.CSP.VARProntuarioEletronico.ExcluirExamesProtocolo(pCodigoProtocolo, formExame.option("formData").TipoExame, key, YBED))#;
						refreshDados();
		    	}					
			})
		});

	    gridExamesProtocolo = $("#divExamesProtocolo").dxDataGrid({
				dataSource: dataSourceProtocoloExame,
				columns: [
					{	dataField: "DescricaodoExame", caption: "Exame", alignment: "center",
						validationRules: [{ type: "required" }], setCellValue: function (rowData, value) {
			        if (value == "" || value == null) return
			        objLinha = this;
			        var retorno = #server(VAR.CSP.VARProntuarioEletronico.GetDescExame(value))#;
			        
			        retorno = retorno.split("~"); 
							objLinha.defaultSetCellValue(rowData, retorno[1]);
							rowData.CodigodoExame = retorno[0];
				  	}, 
					},
					{	dataField: "Observacao", caption: "Observação", alignment: "center"},
				],
				onEditorPreparing: function(e) {
					
					if (e.parentType == "dataRow" && (e.dataField == "Observacao")) {
						e.editorName = "dxTextArea"; 
					
		      }  
					if (e.parentType == "dataRow" && e.dataField == "DescricaodoExame") {
						e.editorName = "dxSelectBox";
						
						e.editorOptions.dataSource = new DevExpress.data.DataSource({
							store: new DevExpress.data.CustomStore({
								byKey: function(args) {
									return $.getJSON(urlPreparacao,{
										method	:"listaExames",
										tipo	: tipo,
										codigo	: args
									});
								},
								load: function(args) {
									return $.getJSON(urlPreparacao,{
										method	:"listaExames",
										tipo	: tipo,
										searchValue:args.searchValue,
										skip:args.skip,
										take:args.take,
									});
								}
							})
						});
						e.editorOptions.value = e.row.data.medicacao;
						e.editorOptions.displayExpr = "DescExame";
						e.editorOptions.valueExpr = "CodExame";
						e.editorOptions.searchEnabled = 1;
						e.editorOptions.onValueChanged = function(arg) {
							e.setValue(arg.value);
						}
					}

				},
				columnChooser: { enabled: false, mode: "dragAndDrop"},
				allowColumnReordering: false,
				editing: {
					mode: "batch", // Specifying the edit mode
					allowAdding: true, // Enable editing
					allowUpdating: true, // Enable editing
					allowDeleting: true,
					useIcons: true
				},
				onEditingStart: function(e) {
					var FlagEditar = e.data.FlagEditar;
					if (FlagEditar == 1 && e.column.dataField == "DescricaodoExame"){
						e.cancel = true;
					}
				},		
				columnAutoWidth: false,
				showColumnLines: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				hoverStateEnabled: true,
				showBorders: true,
				headerFilter: { visible: false },
				grouping: { autoExpandAll: true },
				groupPanel: { visible: false, allowColumnDragging: true },
				columnFixing: { enabled: false },
				filterRow: { visible: false },		height: 350,
				export: { enabled: false },
				stateStoring: { enabled: false }, 
				wordWrapEnabled: true,
				onToolbarPreparing: function(e) {
					e.toolbarOptions.items.unshift({
						location: "after",
						widget: "dxButton",
						options: {
							type: "success",
							hint: "Atualizar Protocolo",
							name: "atualizarProtocolo",
							icon: "save",
							onClick: function(e) {
								var pCodigoProtocolo = $("#pesquisaExames").dxForm("instance").getEditor("codigo").option("value");
								var pDescricao = $("#pesquisaExames").dxForm("instance").getEditor("descricao").option("value");
								var pPerfilParticular = $("#pesquisaExames").dxForm("instance").getEditor("perfilparticular").option("value");
								
								
								if ((pCodigoProtocolo == null || pCodigoProtocolo == "") && pDescricao == "") {
									DevExpress.ui.notify("Selecionar um Código do Protocolo ou Informar a Descrição", "error", 4000);
				      		return;
				      	}
				      	
				      	if (pCodigoProtocolo == null) {
							    var pCodigoProtocolo = ""	
						    }
						    
				      	var listObs = $("#divExamesProtocolo").find('.dx-datagrid-content tr.dx-data-row td:nth-child(2)').get().map(function(el){return el.innerText})
				      	var pListaExames = gridExamesProtocolo.getDataSource().items().map(function(v,i){
					      	return v.CodigodoExame + "^" + listObs[i];
					      }).join("~");
				      	
				      	var retorno = #server(VAR.CSP.VARProntuarioEletronico.ArmProtocolo(pCodigoProtocolo, pDescricao, formExame.option("formData").TipoExame, YBED, pPerfilParticular,pListaExames))#;
								
								var array=retorno.split("~");
								if (array[0]==1){
									var mensagem = "Protocolo: "+array[1]+" atualizado com sucesso."
									DevExpress.ui.notify(mensagem, "warning",4000);
									$("#pesquisaExames").dxForm("instance").getEditor("codigo").option("value",array[1]);
								}
								dataSourceProtocoloCodigo.reload()
								refreshDados()
							}
						}
					},{
						location: "after",
						widget: "dxButton",
						options: {
							text: "",
							type: "danger",
							hint: "Excluir Protocolo",
							icon: "remove",
							onClick: function(e) {
								excluirProtocolo()
								dataSourceProtocoloCodigo.reload();
							}
						}
					},{
						location: "after",
						widget: "dxButton",
						options: {
							hint: "Adicionar Grupo",
							icon: "fas fa-plus-circle",
							onClick: function(e) {
								var pCodigoProtocolo = $("#pesquisaExames").dxForm("instance").getEditor("codigo").option("value");
								var pDescricao = $("#pesquisaExames").dxForm("instance").getEditor("descricao").option("value");
				      	if ((pCodigoProtocolo == null || pCodigoProtocolo == "") && pDescricao == "") {
									DevExpress.ui.notify("Selecionar um Código do Protocolo ou Informar a Descrição", "error", 4000);
				      		return;
				      	}
								$("#divAddGrupo").dxPopup("show");
								$("#formAddGrupo").dxForm("instance").getEditor("exames").option("value","");
							}
						}
					})
				}
			}).dxDataGrid("instance");
			
			$("#divAddGrupo").dxPopup({
				title: "Adicionar Grupo",
				width: 650,
				height: 280,
				position: {
					my: "center",
					at: "center",
					of: window
				},
				dragEnabled: true,
				contentTemplate: function(e) {
					formAddGrupo = $("<div id='formAddGrupo'>").dxForm({
						readOnly: false,
						alignItemLabels: true,
						showColonAfterLabel: true,
						labelLocation: "top",
						colCount: 2,
						items: [{
								colSpan: 2,
								dataField	: "exames",
								label		: {
									text	: "Exames"
								},
								editorType	: "dxTagBox",
								editorOptions: {
									showSelectionControls: true,
									selectionMode: "multiple",
									searchEnabled: true,
									valueExpr: "CodExame", 
									displayExpr: "DescExame",
									searchEnabled: true,
									dataSource: new DevExpress.data.DataSource({
										store: new DevExpress.data.CustomStore({
											byKey: function(args) {
												return $.getJSON(urlPreparacao,{
													method	:"listaExames",
													tipo	: tipo,
													codigo	: args
												});
											},
											load: function(args) {
												return $.getJSON(urlPreparacao,{
													method	:"listaExames",
													tipo	: tipo,
													searchValue:args.searchValue,
													skip:args.skip,
													take:args.take,

												});
											}
										})
									})
								}
							},
							{itemType: "button", horizontalAlignment: "right", buttonOptions: {
		           	text: "Salvar", icon: "save",
								onClick: function(){
									var pExames = $("#formAddGrupo").dxForm("instance").getEditor("exames").option("value");
									if (pExames == "" || pExames == null) {
										DevExpress.ui.notify("Selecionar o exame", "error", 4000);
					      		return;
									}
									var pCodigoProtocolo = $("#pesquisaExames").dxForm("instance").getEditor("codigo").option("value");
									var pDescricao = $("#pesquisaExames").dxForm("instance").getEditor("descricao").option("value");
									var pPerfilParticular = $("#pesquisaExames").dxForm("instance").getEditor("perfilparticular").option("value");
					      	if (pCodigoProtocolo == null && pDescricao == "") {
										DevExpress.ui.notify("Selecionar um Código do Protocolo ou Informar a Descrição", "error", 4000);
					      		return;
					      	}
					      	if (pCodigoProtocolo == null) {
						      	var pCodigoProtocolo = ""	
					      	}
									if (pExames) pExames = pExames.join(",");
									var aExames = pExames.split(",");
									for (var i = 0; i < aExames.length; i++) {
						        objDados = new Array;
									objDados.push("CodigodoExame~"+aExames[i]);
									
									var retorno = #server(VAR.CSP.VARProntuarioEletronico.ArmExamesProtocolo(pCodigoProtocolo, pDescricao, formExame.option("formData").TipoExame, "", objDados, YBED, pPerfilParticular))#;
							      	if (pesquisaExames.option("formData").codigo == null) {
								      	var array = retorno.split("~");
								      	pCodigoProtocolo = array[1];
							      	}
								}
						      	dataSourceProtocoloCodigo.reload();
						      	pesquisaExames.updateData("codigo",pCodigoProtocolo)
						      	dataSourceProtocolo.reload();
					      		$("#divAddGrupo").dxPopup("hide");
							}}
							},
							{itemType: "button", horizontalAlignment: "left", buttonOptions: {
		          			text: "Fechar", icon: "close",
							onClick: function(){
								$("#divAddGrupo").dxPopup("hide");
							}}
							}
						]
					});
					
					e.append(formAddGrupo);
				}        		
			});
		}
		
		function refreshDados()
		{
			divExamesCadastrados.clearSelection()
			divExamesDetalhes.getDataSource().reload()
			$("#dvSeqExameCod").html("")
			$("#dvSeqExameTexto").html("&nbsp;")									
			dataSourceProtocolo.pageIndex(0)
			dataSourceProtocolo.reload()
			addExames("",formExame.option("formData").TipoExame)
			formExame.updateData("Exame","")
		}

		function salvaProtocolo(tipo){
			
			if (!pesquisaExames.validate().isValid){
				DevExpress.ui.notify("Há campos inválidos", "warning", 4000);
				return
			}
			dadosProtocolo = pesquisaExames.option("formData")
	        $.getJSON(urlPreparacao,{
	            method	: "salvaProtocolo",
	            tipo	: tipo,
	            dados	: JSON.stringify(dadosProtocolo)
	        },function(retorno){
		        DevExpress.ui.notify(retorno.mensagem, retorno.tipo, 4000);
		        if (retorno.status==1){
		        	pesquisaExames.updateData("codigo",retorno.codigo)
		        	dataSourceProtocolo.pageIndex(0)
		        	dataSourceProtocolo.reload()
		        }
		    });

		}

		function excluirProtocolo(){
			codigo = pesquisaExames.option("formData").codigo
	        if (codigo==""||codigo==undefined){
		        DevExpress.ui.notify("Informe um Protocolo", "warning", 4000);
		        return
	        }
	        $.getJSON(urlPreparacao,{
	            method	: "excluirProtocolo",
	            codigo	: codigo
	        },function(retorno){
		        DevExpress.ui.notify(retorno.mensagem, retorno.tipo, 4000);
		        if (retorno.status==1){
		        	pesquisaExames.updateData("codigo","")
		        	dataSourceProtocolo.pageIndex(0)
		        	dataSourceProtocolo.reload()
		        }

		    });

		}
		
		function recProtocolo(codProtocolo){
	        $.getJSON(urlPreparacao,{
	            method	:"getPerfilExames",
	            codigo	: codProtocolo
	        },function(retorno){
		        pesquisaExames.updateData("descricao",retorno.descricao)
		        pesquisaExames.updateData("exames",retorno.exames)
		        pesquisaExames.updateData("perfilparticular",retorno.perfilparticular)
			    $("#copiarProtocolo").val("0");
		        if (retorno.perfilparticular=="0") {
			        $("#copiarProtocolo").val("1");
		        } 

		    });
			
		}
		
        function preparaUpload(){
	        pesquisaExames = $("#pesquisaExames").dxForm({
		        scrollingEnabled	: true,
		    	height	:function() {
					return window.innerHeight - (tamanhoForm);
				},
				screenByWidth: function(width) {
		            return "lg";
		        },
				items:[{
					dataField	: "DataDoExame",
					editorType	: "dxDateBox",
				},{
					dataField	: "Exame",
					template	: "<div id='CdExame'></div>"
				},{
					template	: "<div id='ArquivoExame'></div>"
				},{
					template	: "<div id='uploadButtons'></div>",
				}]
				
	        }).dxForm("instance")
	        exames = $("#CdExame").dxSelectBox({
	        	dataSource: new DevExpress.data.DataSource({
		            store: new DevExpress.data.CustomStore({
			            load: function(args) {
		                    return $.getJSON(urlPreparacao,{
			                    method	:"listaExames",
			                    searchValue:args.searchValue,
	                        	skip:args.skip,
	                        	take:args.take,
			                    
			                });
		                }
		            })
	        	}),
				onFocusOut: function(obj){
					obj.component.close()
				},
		        valueExpr: "CodExame", 
						displayExpr: "DescExame",
						showClearButton: true
					})
	        upload = $("#ArquivoExame").dxFileUploader({
	        	selectButtonText: "Selecione o Arquivo",
        		labelText: "",
        		accept: "pdf/*",
        		uploadMode: "instantly",
        		uploadUrl: urlPreparacao+"&method=Teste"+"&file=",
        		 /*onValueChanged: function(e){
             		$.get(urlPreparacao,{
	        	            	method	:"Teste",
	        	            	file	: tipo
		        	    	});
             		
             		console.log(e.value)               
                            
                
        		 }*/
        	}).dxFileUploader("instance");
				}
        function preparaPesquisaExame(tipo){
	        {
		        pesquisaExames = $("#pesquisaExames").dxDataGrid({
					dataSource:  new DevExpress.data.CustomStore({
	            		load: function(args) {
				            return $.getJSON(urlPreparacao,{
	        	            	method	:"listaResultados",
	        	            	tipo	: tipo,
	        	            	passagem: formulario.option("formData").Passagem
		        	    	});
	    	    		}	
        			}),
					columns: [{
						dataField: "CodExame",
						caption: "Exame", 
						alignment: "left",
						validationRules: [{ type: "required" }],
						lookup: {
	                		dataSource: new DevExpress.data.CustomStore({
	    	            		byKey: function(args) {
						            return $.getJSON(urlPreparacao,{
			        	            	method	:"listaExames",
			        	            	codigo	: args
		    	        	    	});
	            	    		},
	    	            		load: function(args) {
						            return $.getJSON(urlPreparacao,{
			        	            	method	:"listaExames",
			        	            	searchValue:args.searchValue,
			                        	skip:args.skip,
			                        	take:args.take,
		    	        	    	});
	            	    		}	
		        			}),
	                		displayExpr: "DescExame",
	                		valueExpr: "CodExame"
	            		}},{
							dataField	: "13/12/2019",
							caption		: "13/12/2019",
							alignment	: "center"
	            		},{
							dataField	: "13/11/2019",
							caption		: "13/11/2019",
							alignment	: "center"
	            		},{
							dataField	: "01/07/2019",
							caption		: "01/07/2019",
							alignment	: "center"
	            		},{
							dataField	: "22/05/2019",
							caption		: "22/05/2019",
							alignment	: "center"
	            		},{
							dataField	: "15/04/2019",
							caption		: "15/04/2019",
							alignment	: "center"
	            		}
					],
					filterRow: { visible: false },
					hoverStateEnabled: true,
					paging: { enabled: true, pageSize: 10 },
					height: "450px",	
					showBorders: true,
					showRowLines: true,
					rowAlternationEnabled: true,
				}).dxDataGrid("instance")
	        }
	    }
	    function resizeMe(){
		    return
		    if (typeof formulario!="undefined"){
		    	formulario.option("height",window.innerHeight - 60)
		    }
		    if (gridHistorico!="") {
			    gridHistorico.option("height",window.innerHeight - tamanhoForm)
		    }
			if (gridAdmissoesAbertas!="") {
				gridAdmissoesAbertas.option("height",window.innerHeight - tamanhoForm)
			}
			if (typeof formAnamnese!="undefined"){
				formAnamnese.option("height",window.innerHeight - tamanhoForm)
			}
			if (typeof formEvolucao!="undefined"){
				formEvolucao.option("height",window.innerHeight - tamanhoForm)
			}
			if (typeof formExame!="undefined"){
				formExame.option("height",window.innerHeight - tamanhoForm)
			}
			if (typeof formReceituario!="undefined"){
				formReceituario.option("height",window.innerHeight - tamanhoForm)
			}
			if (typeof formEventosAdversos!="undefined"){
				formEventosAdversos.option("height",window.innerHeight - tamanhoForm)
			}
			if (typeof divExamesDetalhes!="undefined"){
				divExamesDetalhes.option("height",window.innerHeight - tamanhoForm-45)
			}
			if (typeof divExamesDiversosDetalhes!="undefined"){
				divExamesDiversosDetalhes.option("height",window.innerHeight - tamanhoForm-45)
			}
			if (typeof divReceitasGrid!="undefined"){
				divReceitasGrid.option("height",window.innerHeight - tamanhoForm)
			}
			if (typeof divEvolucao!="undefined"){
				divEvolucao.option("height",window.innerHeight - tamanhoForm-328)
			}
			if (typeof divEventosAdversos!="undefined"){
				divEventosAdversos.option("height",window.innerHeight - tamanhoForm-328)
			}
			
		}

		function verificaBirdID(){
			$.getJSON(urlPreparacao,{
				method:"verificaBirdID"
			},function(ret){
				if (ret==2){
					return
				}
				if (ret==0){
					autenticacaoBirdID()
				}else{
					sairBirdID()
				}
			})
		}
		function sairBirdID(){
			var result = DevExpress.ui.dialog.confirm("Deseja sair do BirdID?", "Sair do BirdID?");
		    result.done(function(dialogResult) {
		        if (!dialogResult){
			        return
				}
                $.getJSON(urlPreparacao, {method: "revokeBirdID"},function(){DevExpress.ui.notify("Desconectado do BirdID com sucesso!", "success", 4000);})
		    });					    
		}
		
		function autenticacaoBirdID(){
		    if ($("#openPesquisa").html()!=""){
		    	pesquisaExames.dispose()
		    	openPesquisa.dispose()
		    }
   			$("#openPesquisa").html("<div id='pesquisaExames'></div>")
			openPesquisa = $("#openPesquisa").dxPopup({
		        width: '450px',
		        height: '300px',
		        showTitle: true,
		        title: "Autenticar no BirdID?",
		        visible: true,
		        dragEnabled: true,
		        closeOnOutsideClick: false,
				toolbarItems: [
				{
					location:"before",
					toolbar :"top",
				},{
					widget: "dxButton",
					location:"before",
					toolbar:"bottom",
					options: { 
						width	: "130px",
						type	: "default",
						icon	: "close",
            			text	: "Fechar", 
            			onClick : function(){
                			$('#openPesquisa .dx-closebutton').trigger('click');
                		}
					}
				},{
					widget: "dxButton",
					location:"after",
					toolbar:"bottom",
					options: { 
						width	: "130px",
						type	: "default",
						icon	: "check",
            			text	: "Autenticar", 
            			onClick : function(){
							if (!pesquisaExames.validate().isValid){
								DevExpress.ui.notify("Há campos inválidos", "warning", 4000);
								return
							}
							loadPanel.show();
					        $.getJSON(urlPreparacao,{
						        method	: "authBirdID",
						        username: pesquisaExames.option("formData")["Usuário"],
						        password: pesquisaExames.option("formData")["Código atual (OTP)"]
		    				},function(ret){
			    				loadPanel.hide();
			    				if (ret.status==1){
				    				openPesquisa.hide()
				    				DevExpress.ui.notify(ret.mensagem, "success", 4000);
				    				return
			    				}
			    				DevExpress.ui.notify(ret.mensagem, "warning", 4000);
			    			});
                		}
					}
				}]		        
			}).dxPopup("instance")
			
			pesquisaExames = $("#pesquisaExames").dxForm({
		        width:"100%",
		        colCount:10,
				screenByWidth: function(width) {
		            return "lg";
		        },
		        items: [{
			        template: "<img src='"+ygif+"/birdID.svg' width='100'></img>"
		        },{
			        colSpan:9,
			        template: "Para autorizar Prontuário Eletrônico a fazer uma assinatura utilizando o seu Bird ID, preencha os campos abaixo:<br><br>"
		        },{
			        colSpan:10,
			        dataField	: "Usuário",
			        editorOptions:{
			        	value	: '#(userBird)#',
			        },
					validationRules: [{
	                    type: "required"
	                }],				            
		        },{
			        colSpan:10,
			        dataField	: "Código atual (OTP)",
			        editorType	: "dxTextBox",
			        editorOptions	: {
				        mode	: "password"
			        },
					validationRules: [{
	                    type: "required"
	                }],				            
		        }]
			}).dxForm("instance")
			loadPanel.hide();
		}

    DevExpress.localization.locale("pt");
		$(document).ready(function () {
			$.ajaxSetup({async: false});
			prepareSearchInputs();
			carregaAdmissoesAbertas()
			if ('#(token)#'==''){
				autenticacaoBirdID()
			}
			$.ajaxSetup({async: true});
			//carregaPacientes()
		});
		$(window).resize(function() {
			resizeMe()
		});	       


		function abrePesquisaCID(objRetornoCID, conteudoCampo){
			 popupOptions = {
		        width: "90%",
		        height: "90%",
		        showTitle: true,
		        title: "Pesquisa CID",
		        visible: true,
		        dragEnabled: false,
		        closeOnOutsideClick: false,
		        onHidden: function(){
							arrayCID	= conteudoCampo;
							if (typeof arrayCID == "string") {
								arrayCID	= new Array;
							}
							//if (typeof formEvolucao!="undefined"){
							openPesquisaCIDLista.getSelectedRowsData().then(function (rowData) {
								$.each(rowData, function(count, dados) {
									if (arrayCID.indexOf(dados.CodigodoCID) == -1) { 
										arrayCID.push(dados.CodigodoCID);
									}
								});
							}).done(function(){
				      	objRetornoCID.option("value", arrayCID)  
							});
			      }
		    
		    }		
		    if ($("#openPesquisaCID").html()!=""){
		    	openPesquisaCID.dispose()
		    	openPesquisaCIDLista.dispose()
		    }
	 			$("#openPesquisaCID").html("<div id='openPesquisaCIDLista'></div>")
				openPesquisaCID = $("#openPesquisaCID").dxPopup(popupOptions).dxPopup("instance")
				preparaPesquisaCID(conteudoCampo)
		}		
		
		function preparaPesquisaCID(pConteudoCampo){
	      openPesquisaCIDLista = $("#openPesquisaCIDLista").dxDataGrid({
				dataSource:  new DevExpress.data.DataSource({
					store: new DevExpress.data.CustomStore({
						key: "CodigodoCID",
						//loadMode: "raw",
						load: function(){
				        	return $.getJSON(urlPreparacao, {method: "getListCID"},function(retorno){
								openPesquisaCIDLista.selectRows(pConteudoCampo, true); 
							});
						}
					})
				}),
				columns: [
					{dataField: "CodigodoCID",caption: "Código"},
					{dataField: "DescricaoResumida", caption: "Descrição"},
					{dataField: "DescCategoria",caption: "Categoria", groupIndex: 0},
				],	
				allowColumnReordering: true,
				columnAutoWidth: true,
				selection: { mode: "multiple", deferred: true },
				allowColumnResizing: true,
				height: "100%",	
				headerFilter: { visible: false },
				hoverStateEnabled: true,
				filterRow: { visible: true },
				showBorders: true,
				showRowLines: true,
				grouping: { autoExpandAll: false },
				searchPanel: { visible: false }, 
				groupPanel: { visible: false },
				export: { enabled: false },
				stateStoring: { enabled: false }, 
				columnChooser: { enabled: false, mode: "dragAndDrop" },
				sorting: { mode: "multiple" },
				rowAlternationEnabled: true,
				wordWrapEnabled:true,
				pager: {
					showPageSizeSelector: true,
					allowedPageSizes: [20, 50, 100, 150, 200],
					showInfo: true,
					showNavigationButtons: true,
					visible: true 
				},
				paging: { enabled: true, pageSize: 20 }
			}).dxDataGrid("instance")
		}

		function abreListaArquivos(){
			 popupOptions = {
		        width: "700",
		        height: "500",
		        showTitle: true,
		        title: "Lista Arquivos",
		        visible: true,
		        dragEnabled: false,
		        closeOnOutsideClick: false,
		    }		
		    if ($("#openPesquisaArquivo").html()!=""){
		    	openPesquisaArquivo.dispose()
		    	openPesquisaArquivoLista.dispose()
		    }
	 			$("#openPesquisaArquivo").html("<div id='openPesquisaArquivoLista'></div>")
				openPesquisaArquivo = $("#openPesquisaArquivo").dxPopup(popupOptions).dxPopup("instance")
				preparaPesquisaArquivo()
		}		
		
		function preparaPesquisaArquivo(){
	      openPesquisaArquivoLista = $("#openPesquisaArquivoLista").dxDataGrid({
				dataSource:  new DevExpress.data.DataSource({
					store: new DevExpress.data.CustomStore({
						loadMode: "raw",
						load: function(){
							var passagem = formulario.option("formData").Passagem;
							return $.getJSON(urlPreparacao, {method: "getArquivos",passagem:passagem},function(retorno){
								checaArquivo();
							});
						},
						remove : function(args){
							#server(VAR.CSP.VARProntuarioEletronico.removerArquivo(args.Arquivo))#
						}
					})
				}),
				columns: [
					{dataField: "DataDoExame"},
					{dataField: "Passagem"},
					{dataField: "Exame"},
				],	
				editing: {
					mode: "row",
					allowDeleting: true,
					useIcons: true
				},
				onCellPrepared: function(e) {
				var passagem = formulario.option("formData").Passagem;
				if(e.rowType === "data" && e.column.command === "edit" && e.data.Passagem != passagem) {
				e.cellElement.empty();
				}
			},
				allowColumnReordering: true,
				columnAutoWidth: true,
				allowColumnResizing: true,
				height: "100%",	
				headerFilter: { visible: false },
				hoverStateEnabled: true,
				filterRow: { visible: true },
				showBorders: true,
				showRowLines: true,
				grouping: { autoExpandAll: false },
				searchPanel: { visible: false }, 
				groupPanel: { visible: false },
				export: { enabled: false },
				stateStoring: { enabled: false }, 
				columnChooser: { enabled: false, mode: "dragAndDrop" },
				sorting: { mode: "multiple" },
				rowAlternationEnabled: true,
				wordWrapEnabled:true,
				onRowClick: function(e){
					if (e.rowType == "data") {
						window.open(e.key.Arquivo,"Visualizar")
					}
				},
				pager: {
					showPageSizeSelector: true,
					allowedPageSizes: [20, 50, 100, 150, 200],
					showInfo: true,
					showNavigationButtons: true,
					visible: true 
				},
				paging: { enabled: true, pageSize: 20 }
			}).dxDataGrid("instance")
		}

		function abreListaArquivosVDOC(){
			 popupOptions = {
		        width: "700",
		        height: "500",
		        showTitle: true,
		        title: "Lista Prontuário Digitalizado",
		        visible: true,
		        dragEnabled: false,
		        closeOnOutsideClick: false,
		    }		
		    if ($("#openPesquisaArquivo").html()!=""){
		    	openPesquisaArquivo.dispose()
		    	openPesquisaArquivoLista.dispose()
		    }
		    dataSourceArquivoVDOC.reload();
	 			$("#openPesquisaArquivo").html("<div id='openPesquisaArquivoLista'></div>")
				openPesquisaArquivo = $("#openPesquisaArquivo").dxPopup(popupOptions).dxPopup("instance")
				preparaPesquisaArquivoVDOC()
		}		
				dataSourceArquivoVDOC = new DevExpress.data.DataSource({ 
					store: new DevExpress.data.CustomStore({
						loadMode: "raw",
						load: function(){
							var passagem = formulario.option("formData").Passagem;
							return $.getJSON(urlPreparacao, {method: "getArquivosVDOC",paciente: formulario.option("formData").Codigo},function(retorno){
								
							});
						},
						remove : function(args){
							#server(VAR.CSP.VARProntuarioEletronico.removerArquivoVDOC(args.Arquivo))#
						}
					})
				});
			function preparaPesquisaArquivoVDOC(){
	      openPesquisaArquivoLista = $("#openPesquisaArquivoLista").dxDataGrid({
				dataSource: dataSourceArquivoVDOC,
				columns: [
					{dataField: "Documento"},
					{dataField: "dataModificacao", caption: "Data"},
				],	
				editing: {
					mode: "row",
					allowDeleting: true,
					useIcons: true
				},
				allowColumnReordering: true,
				columnAutoWidth: true,
				allowColumnResizing: true,
				height: "100%",	
				headerFilter: { visible: false },
				hoverStateEnabled: true,
				filterRow: { visible: true },
				showBorders: true,
				showRowLines: true,
				grouping: { autoExpandAll: false },
				searchPanel: { visible: false }, 
				groupPanel: { visible: false },
				export: { enabled: false },
				stateStoring: { enabled: false }, 
				columnChooser: { enabled: false, mode: "dragAndDrop" },
				sorting: { mode: "multiple" },
				rowAlternationEnabled: true,
				wordWrapEnabled:true,
				onRowClick: function(e){
					if (e.rowType == "data") {
						window.open(e.key.Arquivo,"Visualizar")
					}
				},
				pager: {
					showPageSizeSelector: true,
					allowedPageSizes: [20, 50, 100, 150, 200],
					showInfo: true,
					showNavigationButtons: true,
					visible: true 
				},
				paging: { enabled: true, pageSize: 20 },
				onToolbarPreparing: function(e) {
				e.toolbarOptions.items.unshift({
					location: "after",
					widget: "dxButton",
					options: {
						icon: "fa fa-upload",
						height: 28,
						width: 28,
						hint: "Upload de Prontuário",
						onClick: function(e) {
							var prontuario = formulario.option("formData").Prontuário;
							var paciente = formulario.option("formData").Codigo;
							window.open("VARUploadProntuario.csp?prontuario="+prontuario+"&paciente="+paciente,"uploadArquivo","width=450,height=300,"+
							"scrollbars=0,resizable=0,menubar=0,location=0,top=100,left=100")
							//uploadExames()
						}
					}
				})
			}
			}).dxDataGrid("instance")
		}


		function alertAnexo(){
			DevExpress.ui.notify('Arquivo armazenado com sucesso!', 'success', 4000);	
		}

		var exameAdd = ""
		dataSourceAddExame = new DevExpress.data.DataSource({
			store: new DevExpress.data.CustomStore({
				load: function(){
        	return $.getJSON(urlPreparacao, {method: "getExameAdd", codExame: exameAdd},function(retorno){ console.log(retorno)});
				},update: function (key, values) {
					
					for (var coluna in values) {
						
						if (values.hasOwnProperty(coluna)) {
							#server(VAR.CSP.VARProntuarioEletronico.ArmResultaExameAddNew(key.id, values[coluna], YBED))#
						}
					}
				}					
			})
		})

		
		$("#dvAddResultado").dxPopup({
			visible: false,
			title: "Adicionar/Editar Resultado",
			width: 800,
			height:  580,
			position: {
				my: "center",
				at: "center",
				of: window
			},
			onHidden: function(){
				#server(VAR.CSP.VARProntuarioEletronico.LimparResultaExameAddNew(YBED))#
				dataSourceAddExame.reload();
				salvarDados()
				dataSourceResultado.reload();
			},
			dragEnabled: true,
			contentTemplate: function(e) {
				formAddExame= $("<div id='formAddResultado'>").dxForm({
				readOnly: false,
				alignItemLabels: true,
				showColonAfterLabel: true,
				screenByWidth: function(width) {
		            return "lg";
		        },
				labelLocation: "left",
				colCount: 6,
				items: [
					{dataField: "data", colSpan:2, editorType: "dxDateBox"
					,validationRules: [{ type: "required" }], 
					},{ colSpan: 2},
					{ 
						itemType: "button", horizontalAlignment: "right", 
						buttonOptions: { 
							type:"default", text: "Hist. Exames",
							showTitle: true,
							elementAttr: { title: "Histório de Exames" }, 
							onClick: function(){
								abreHistorico(1, 1)
							}
						}
					},{ 
						itemType: "button", horizontalAlignment: "right", 
						buttonOptions: { 
							type:"default", text: "Recupera Exames",
							onClick: function(){
								recuperaExamesAdicionados();
							}
						}
					},
					
					{ dataField: "exame", colSpan: 5, label:{text:"Exame"}, editorType: "dxTagBox", 
						editorOptions: {
							onFocusOut: function(obj){
								obj.component.close()
							},
							dataSource: new DevExpress.data.DataSource({
								store: new DevExpress.data.CustomStore({
									byKey: function(args) {
									  return $.getJSON(urlPreparacao,{
									    method	: "listaPerfilExames",
									    codigo	: args
										});
									},
									load: function(args) {
									  return $.getJSON(urlPreparacao,{
									    method	: "listaPerfilExames",
									    tipo	: 1,
								    	skip	: args.skip,
								    	take	: args.take,
								    	searchValue:args.searchValue
										});
									}
								})
							}),
							value: "",
							searchEnabled: true,
							valueExpr: "Codigo", 
							displayExpr: "Descricao",
							searchEnabled: true,
						}
					},{ 
						itemType: "button", colSpan: 1, horizontalAlignment: "left", 
						buttonOptions: { 
							type:"default", text: "Adicionar", 
							onClick: function(){
								var tExames = $("#formAddResultado").dxForm("instance").getEditor("exame").option("value");
								if (tExames == "" || tExames == null) {
									DevExpress.ui.notify("Favor informar o exame.", "warning", 4000);
									return
								}
								tExames = tExames.join(",");
								$.get(urlPreparacao,{
									method	: "addExameResultado",
									exame		: tExames
								},function(rs){
									$("#formAddResultado").dxForm("instance").getEditor("exame").option("value","")
									dataSourceAddExame.reload();
								});
							}
						}
					},
					{ 
						colSpan: 6, template	: function (data, itemElement) {
					  	itemElement.append("<div id='gridAddExame'/>")
				    },
					},{},{},
					{ template	: function (data, itemElement) {
					  	itemElement.append("<div id='btnSalvarAddExame'/>")
				    },
					},{ 
						itemType: "button", colSpan: 1, horizontalAlignment: "left", 
						buttonOptions: { 
							type:"default", icon: "close", text: "Fechar", 
							onClick: function(){
								#server(VAR.CSP.VARProntuarioEletronico.LimparResultaExameAddNew(YBED))#
								dataSourceAddExame.reload();
								$("#dvAddResultado").dxPopup("hide");
							}
						}
					},{ 
						itemType: "button", colSpan: 1, horizontalAlignment: "left", 
						buttonOptions: { 
							type:"default", icon: "clear", text: "Limpar", 
							onClick: function(){
								var formAddResultado = $("#formAddResultado").dxForm("instance");
								formAddResultado.getEditor("exame").option("value","");
								formAddResultado.getEditor("data").option("value","");
								#server(VAR.CSP.VARProntuarioEletronico.LimparResultaExameAddNew(YBED))#
								dataSourceAddExame.reload();
							}
						}
					}	
				]
				});
				e.append(formAddExame);
				$("#gridAddExame").dxDataGrid({
					dataSource: dataSourceAddExame,
					columns: [
						{dataField: "descPerfil", caption: "Perfil", allowEditing: 0, groupIndex: 0, sortOrder: 0},
						{dataField: "descComposto", caption: "Composto", allowEditing: 0, groupIndex: 1, sortOrder: 1},
						{dataField: "descExame", caption: "Exame", allowEditing: 0},
						{dataField: "resultado", allowEditing: 1},
					],
					keyExpr: "id",
					grouping: {
						allowCollapsing: true,
						autoExpandAll: true,
					},
					editing: {
						mode: "batch",
						allowUpdating: true,
						useIcons: true
					},
					paging: { enabled:false },					
					height: 340,	
					showBorders: true,
					showRowLines: true,
				});            
				$("#btnSalvarAddExame").dxButton({ 
					type:"success", icon: "save", text: "Salvar", disabled: false, 
					onClick: function(){
						var formAddResultado = $("#formAddResultado").dxForm("instance");
						var fData 			= formAddResultado.getEditor("data").option("text");
							
						if (fData == "") {
							DevExpress.ui.notify("Favor informar o campo Data.", "warning", 4000);
							return
						}
						
//						if ($("#gridAddExame").dxDataGrid("instance").getController('editing').hasChanges()) {
//							
//							var result = DevExpress.ui.dialog.confirm("<i>Há itens sem armazenamento, confirma a finalização?", "Confirmação");
//						    result.done(function(rs) {
//					        if (!rs){
//					        	return
//					        }
//									var status = #server(VAR.CSP.VARProntuarioEletronico.ArmResultaExameNew(formulario.option("formData").Passagem, fData, YBED))#;
//									if (status == 1) {
//										carregaResultado(admissao)
//										$("#dvAddResultado").dxPopup("hide");
//										return
//									}else{
//										DevExpress.ui.notify(status, "warning", 4000);
//										return
//									}
//						    });
//						}else{
							// HDESKCHSP-161 salva os dados alterados do grid antes
							$("#gridAddExame").dxDataGrid("instance").saveEditData().done(function(){
								
								var status = #server(VAR.CSP.VARProntuarioEletronico.ArmResultaExameNew(formulario.option("formData").Passagem, fData, YBED))#;
								if (status == 1) {
									dataSourceAddExame.reload();
									carregaResultado(admissao)
									$("#dvAddResultado").dxPopup("hide");
									return
								}else{
									DevExpress.ui.notify(status, "warning", 4000);
									return
								}
								
							});
//						}
					}
				})
				e.append(formAddExame);
			}
		});

		dataSourceResultadoPopUP = new DevExpress.data.DataSource({
      	store: new DevExpress.data.CustomStore({
				load: function(args) {
					return $.getJSON(urlPreparacao,{
						method	:"listaResultados",
						passagem: formulario.option("formData").Passagem
					},function(rs){});
				},
				update: function (key, values) {
					for (var coluna in values) {
						if (values.hasOwnProperty(coluna)) {
							#server(VAR.CSP.VARProntuarioEletronico.ArmResultaExame(formulario.option("formData").Passagem, key.id, coluna, values[coluna], YBED))#;
						}
					}
				}					
			})
		})
		
		function recuperaExamesAdicionados()
		{
			$.getJSON(urlPreparacao,{
					method			: "getExamesAdicionados",
					codPaciente: codPacienteValor,
					usuario: YBED
				},function(objRetorno){
					//console.log(objRetorno);
					dataSourceAddExame.reload();

			})
			
		}
		
		$("#dvDialog").dxPopup({
			visible: false,
			title: "Resultado",
			width: 800,
			height:  600,
			position: {
				my: "center",
				at: "center",
				of: window
			},
			dragEnabled: true,
			contentTemplate: function(e) {
				conteudoDialog = $("<div id='dvConteudoDialog' style='overflow-y:auto;height:500px;'></div>")
				e.append(conteudoDialog);
			}		
		});

		$("#dvInsereTexto").dxPopup({
			visible: false,
			title: "Resultado",
			width: 1000,
			height:  500,
			position: {
				my: "center",
				at: "center",
				of: window
			},
			onShown: function(){
				$("#dvConteudoTexto").dxTextArea("instance").focus()
			},
			dragEnabled: true,
			contentTemplate: function(e) {
				conteudoDialog = $("<div id='dvConteudoTexto'>")
				e.append(conteudoDialog);
				$("#dvConteudoTexto").dxTextArea({
					height	: 400,
					maxLength: 10000,
					onFocusOut: function(obj){
						valor = $("#dvConteudoTexto").dxTextArea("instance").option("value")
			        	$("#"+formAbreCampo).dxForm("instance").updateData(campoAbreCampo,valor)

						$("#dvInsereTexto").dxPopup("instance").hide()
					}
				})
				
			}		
		});
		
		
		$("#dvPopUpResultado").dxPopup({
			visible: false,
			title: "Consulta Resultados/Evolutivo",
			width: window.innerWidth - 20,
			height:  window.innerHeight - 20,
			position: {
				my: "center",
				at: "center",
				of: window
			},
			onHidden: function(){
				salvarDados()
			},
			dragEnabled: true,
			contentTemplate: function(e) {
				formPopUpResultado= $("<div id='formPopUpResultado'><div id='formPopUpResultado1'></div></div>")
				e.append(formPopUpResultado);
			}
		});
		
		function montaDivResultado(){
			if ($("#formPopUpResultado1")) $("#formPopUpResultado1").remove();

			$("#formPopUpResultado").html("<div id='formPopUpResultado1'>Teste</div>");
			
			$("#formPopUpResultado1").dxDataGrid({
				dataSource: dataSourceResultadoPopUP,	
				keyExpr: "id",
				columns: eval(#server(VAR.CSP.VARProntuarioEletronico.ImpColunasResultados(formulario.option("formData").Passagem))#),
				filterRow: { visible: false },
				hoverStateEnabled: true,
				onEditingStart: function(e) {
					var coluna = e.column.dataField
					var colunaUsuario = coluna+"-Usuario"
					if (e.data[colunaUsuario] != YBED) {
						e.cancel = true
					}
				},	
				onCellHoverChanged: function(event){
					if (event.rowType != "data") {
						popup.hide();
						return;
					}
					var coluna = event.column.dataField
					var colunaHiLow = coluna+"-HiLow"
					var colunaValorReferencia = coluna+"-ValorReferencia"
					if (event.data[coluna] == undefined) {
						popup.hide();
						return;
					}
					if (event.data[colunaValorReferencia] != "" || event.data[colunaHiLow] != "") {
						var hintFormatado = "";
						hintFormatado += "<b>Resultado: </b>"+event.data[coluna]+"<br>";
						hintFormatado += "<b>Referência: </b>"+event.data[colunaValorReferencia]+"<br>";
						hintFormatado += "<b>Situação: </b>"+event.data[colunaHiLow]+"<br>";
						popup.hide();
						popup.option("contentTemplate", function(contentElement) {
							$("<span style='font-size:12px;'>")
								.append(hintFormatado)
								.appendTo(contentElement);         
						});
						popup.option({"target":event.cellElement});
						popup.show();
					}else{
						popup.hide();
					}						
				},
				grouping: {
					allowCollapsing: true,
					autoExpandAll: true,
				},
				sorting: {
        	mode: "multiple"
      	},
				headerFilter: {
					visible:true
				},		
				filterRow:{
					visible:true
				},
				groupPanel: {
					visible: true
				},
				editing: {
					mode: "batch",
					allowUpdating: true,
					useIcons: true
				},	
				height: window.innerHeight - 120,				
				columnFixing: { enabled: true },
				showBorders: true,
				showRowLines: true,
				columnChooser: {
					enabled: true,
					mode: "dragAndDrop" 
				},
				stateStoring: {
		    	enabled: false
				},
				rowAlternationEnabled: true,
			});
		}
		
		function limparAnamnese(){
			formAnamnese.option("formData",[]);
			$("#divCopiarAnamnese").html("");
		}

		function checaArquivo(){
			$.getJSON(urlPreparacao, {method: "getArquivos",passagem:formulario.option("formData").Passagem},function(retorno){
				if (retorno.length > 0) {
					$(".fa-folder-open").css("color","red");
	        DevExpress.ui.notify("Há exames em anexos!", "warning", 4000);
				}else{	
					$(".fa-folder-open").css("color","");	
				}
			});
		}
		
		
	function carregaRecLME(passagem){
		$.getJSON(urlPreparacao,{
			method:"carregaRecLME",
			passagem: passagem
		},function(retorno){
			formRecLME = $("#recLME").dxForm({
				formData	: retorno,
				scrollingEnabled	: true,
				showColonAfterLabel	: false,
				height	:function() {
					return window.innerHeight - (tamanhoForm);
				},
				screenByWidth: function(width) {
					return "lg";
				},
				onFieldDataChanged	: function(obj){
					if (toolBar.option("items")[0].disabled){
						return
					}
					dados = {}
					dados.campo = obj.dataField
					dados.valor = obj.value
					$.post(urlPreparacao,{
						method		: "salvarDadosParcialLME",
						paciente	: codPacienteValor,
						passagem	: formulario.option("formData").Passagem,
						dados		: JSON.stringify(dados)
					},function(retorno){
						if (retorno.status==0){
							DevExpress.ui.notify(retorno.mensagem, retorno.tipo, 4000);
						}
					},'json').fail(function(jqxhr, textStatus, error) {
						var err = textStatus + ", " + error;
						DevExpress.ui.notify("Problema no acesso à internet: "+err, "error", 4000);
					})
					alteracao=1
				},
				readOnly	: toolBar.option("items")[0].disabled,
				items	:  [
					{
						itemType: "group",
						colCount: 4,
						items: [
							{
								dataField	: "numeroCNES",
								editorType	: "dxTextBox",
								label		: {
									text	: "Número do CNES:"
								},
								editorOptions: {
					      	readOnly: true                  
	              },
							},{
								dataField	: "nomeEstabelecimento",
								editorType	: "dxTextBox",
								colSpan: 3,
								editorOptions: {
					      	readOnly: true                  
	              },
	              label		: {
									text	: "Nome Estabelecimento:"
								},
							},{
								dataField	: "nomePaciente",
								editorType	: "dxTextBox",
								colSpan: 3,
								editorOptions: {
					      	readOnly: true                  
	              },
	              label		: {
									text	: "Nome Completo do Paciente:"
								},
							},{
								dataField	: "pesoPaciente",
								validationRules: [{ type: "required" }],
								editorType	: "dxTextBox",
								colSpan: 1,
								editorOptions: {
					      	readOnly: false                  
	              },
	              label		: {
									text	: "Peso do Paciente:"
								},
							},{
								dataField	: "nomeMaePaciente",
								editorType	: "dxTextBox",
								validationRules: [{ type: "required" }],
								colSpan: 3,
								editorOptions: {
					      	readOnly: false                  
	              },
	              label		: {
									text	: "Nome da Mãe do Paciente:"
								},
							},{
								dataField	: "alturaPaciente",
								editorType	: "dxTextBox",
								validationRules: [{ type: "required" }],
								colSpan: 1,
								editorOptions: {
					      	readOnly: false                  
	              },
	              label		: {
									text	: "Altura do Paciente:"
								},
							},{
								dataField	: "telefoneContado",
								editorType	: "dxTextBox",
								colSpan: 2,
								editorOptions: {
					      	readOnly: false                  
	              },
	              label		: {
									text	: "Telefone(s) para contato:"
								},
							},{
								dataField	: "emailContado",
								editorType	: "dxTextBox",
								colSpan: 2,
								editorOptions: {
					      	readOnly: false                  
	              },
	              label		: {
									text	: "E-mail do paciente:"
								},
							},{
								dataField	: "tipoDocumento",
								colSpan: 2,
								editorType	: "dxRadioGroup",
	              label		: {
									text: "Documento:"
								},
								editorOptions: {
									dataSource: [{text: "CPF", value: "CPF"},{text: "CNS", value: "CNS"}], 
									displayExpr:"text", valueExpr:"value", layout: "horizontal", 
								}
							},{
								dataField	: "numeroDocumento",
								editorType	: "dxTextBox",
								colSpan: 2,
								editorOptions: {
					      	readOnly: false                  
	              },
	              label		: {
									text	: "Número Documento:"
								},
							},{
								dataField	: "raca",
								colSpan: 4,
								validationRules: [{ type: "required" }],
								editorType	: "dxRadioGroup",
	              label		: {
									text: "Raça/Cor/Etnia:"
								},
								editorOptions: {
									dataSource: [{text: "Branca", value: "Branca"},{text: "Preta", value: "Preta"},
									{text: "Parda", value: "Parda"},{text: "Amarela", value: "Amarela"},
									{text: "Indígena", value: "Indigena"},{text: "Sem Informação", value: "SemInformacao"}], 
									displayExpr:"text", valueExpr:"value", layout: "horizontal", 
									onValueChanged: function (e) {  
										if (e.value == "Indigena") {
											formRecLME.getEditor("etnia").option({readOnly: 0});
										}else{
											formRecLME.getEditor("etnia").option({readOnly: 1, value: ""});
										}
									}
								}
							},{
								dataField	: "etnia",
								colSpan: 4,
								editorType	: "dxTextBox",
	              label		: {
									text: "Etnia:"
								},
								editorOptions: {
									readOnly: true
								}
							}
						]
					},{
						itemType: "group",
						alignItemLabels : false,
						items: [{
							colspan: 4,
              template	: function (data, itemElement) {
	            	itemElement.append("<div id='divMedicamentoLME' style='borderColor: red'></div>")
              },
              label		: {
								visible	: false
							},
		        }]
					},{
						itemType: "group",
						alignItemLabels : false,
						items: [{
							dataField	: "codigoDoenca",
							validationRules: [{ type: "required" }],
							label		: {
								text	: "CID:"
							},
							editorType	: "dxTagBox",
							editorOptions: {
								itemTemplate: function (data, itemIndex, element) {
									if (CategoriaAnt != data.Categoria){
										retorno = "<b><i>"+data.Categoria+"</i></b><br><br>"
										CategoriaAnt = data.Categoria
										element.append(retorno)
									}
									return element.append(data.Descricao)
								},
								buttons: [{
									name: "btnPesquisarcodigoDoenca",
									location: "before",
									options: {
										hint: "Pesquisar",
										icon: "fa fa-search",
										type: "normal",
										onClick: function() {
											abrePesquisaCID(formRecLME.getEditor("codigoDoenca"), formRecLME.getEditor("codigoDoenca").option("value"));
										}
									}
								}],							
								valueExpr: "Codigo", 
								displayExpr: "Descricao",
								searchEnabled: true,
								dataSource: new DevExpress.data.DataSource({
									store: new DevExpress.data.CustomStore({
										byKey: function(args) {
											return $.getJSON(urlPreparacao,{
												method:"getCID",
												codigo: args
											});
										},
										load: function(args) {
											return $.getJSON(urlPreparacao,{
												method:"getCID",
												usuario: YBED,
												skip:args.skip,
												take:args.take,
												searchValue:args.searchValue,
												filter:JSON.stringify(args.filter)
											});
										}
									})
								})
							},				            
						}]
					},{
						itemType: "group",
						alignItemLabels : false,
						caption	: "Anamnese:",
						items: [{
							dataField	: "anamnese",
							validationRules: [{ type: "required" }],
							editorType	: "dxTextArea",
              label		: {
								visible	: false
							},
							editorOptions: {
								readOnly: false,
								height	: 75
							}
						}]	
					},{
						itemType: "group",
						caption	: "Paciente realizou tratamento prévio ou está em tratamento de doença?",
						colCount: 8,
						alignItemLabels : false,
						items: [{
							dataField	: "tratamentoPrevio",
							validationRules: [{ type: "required" }],
							editorType	: "dxRadioGroup",
              label		: {
								visible	: false
							},
							editorOptions: {
								dataSource: [{text: "Não", value: "0"},{text: "Sim", value: "1"}], 
								displayExpr:"text", valueExpr:"value", layout: "vertical", 
								onValueChanged: function (e) {  
									if (e.value == "1") {
										formRecLME.getEditor("tratamentoRelatar").option({readOnly: 0});
									}else{
										formRecLME.getEditor("tratamentoRelatar").option({readOnly: 1, value: ""});
									}
								}
							}
						},{
							colSpan: 7,
							dataField	: "tratamentoRelatar",
							editorType	: "dxTextArea",
              label		: {
								text	: "Relatar:"
							},
							editorOptions: {
								readOnly: true,
							}
						}]	
					},{
						itemType: "group",
						caption	: "Atestado de Capacidade",
						alignItemLabels : false,
						colCount: 8,
						items: [{
							colSpan: 8,
							template	: function (data, itemElement) {
	            	itemElement.append("<div>A solicitação do medicamento deverá ser realizada pelo paciente. Entretanto, fica dispensada a obrigatoriedade da presença física do paciente considerado incapaz de acordo com o artigo 3º e 4º do Código Civil. O paciente é considerado incapaz?</div>")
              },
						},{
							dataField	: "atestadoCapacidade",
							editorType	: "dxRadioGroup",
							validationRules: [{ type: "required" }],
              label		: {
								visible	: false
							},
							editorOptions: {
								dataSource: [{text: "Não", value: "0"},{text: "Sim", value: "1"}], 
								displayExpr:"text", valueExpr:"value", layout: "vertical", 
								onValueChanged: function (e) {  
									if (e.value == "1") {
										formRecLME.getEditor("atestadoNome").option({readOnly: 0});
									}else{
										formRecLME.getEditor("atestadoNome").option({readOnly: 1, value: ""});
									}
								}
							}
						},{
							colSpan: 7,
							dataField	: "atestadoNome",
							editorType	: "dxTextBox",
              label		: {
								text	: "Nome do Responsável:"
							},
							editorOptions: {
								readOnly: true,
							}
						}]	
					},{
						itemType: "group",
						colCount: 4,
						alignItemLabels : false,
						items: [{
							dataField	: "nomeMedico",
							editorType	: "dxTextBox",
							colSpan: 2,
              label		: {
								text: "Médico Solicitante:"
							},
							editorOptions: {
				      	readOnly: true                  
              },
						},{
							dataField	: "cnsMedicoSolicitante",
							validationRules: [{ type: "required" }],
							editorType	: "dxTextBox",
              label		: {
								text: "CNS Médico Solicitante:"
							}
						},{
							dataField	: "dataSolicitacao",
							validationRules: [{ type: "required" }],
							editorType	: "dxDateBox",
              label		: {
								text: "Data Solicitação:"
							}
						}]
					},{
						itemType: "group",
						caption	: " ",
						alignItemLabels : false,
						colCount: 2,
						items: [{
							colSpan: 2,
							template	: function (data, itemElement) {
	            	itemElement.append("<div>PREENCHIDOS POR:</div>")
              },
						},{
							dataField	: "preenchidoPor",
							editorType	: "dxRadioGroup",
							colSpan: 2,
							validationRules: [{ type: "required" }],
              label		: {
								visible	: false
							},
							editorOptions: {
								dataSource: [{text: "Paciente", value: "Paciente"},{text: "Mãe do paciente", value: "MaePaciente"}
								,{text: "Responsável", value: "Responsavel"},{text: "Médico solicitante", value: "MedicoSolicitante"}
								,{text: "Outro", value: "Outro"}], 
								displayExpr:"text", valueExpr:"value", layout: "horizontal", 
								onValueChanged: function (e) {  
									if (e.value == "Outro") {
										formRecLME.getEditor("preenchidoNome").option({readOnly: 0});
										formRecLME.getEditor("preenchidoCPF").option({readOnly: 0});
									}else{
										formRecLME.getEditor("preenchidoNome").option({readOnly: 1, value: ""});
										formRecLME.getEditor("preenchidoCPF").option({readOnly: 1, value: ""});
									}
								}
							}
						},{
							dataField	: "preenchidoNome",
							editorType	: "dxTextBox",
              label		: {
								text	: "Nome:"
							},
							editorOptions: {
								readOnly: true,
							}
						},{
							dataField	: "preenchidoCPF",
							editorType	: "dxTextBox",
              label		: {
								text	: "CPF:"
							},
							editorOptions: {
								readOnly: true,
							}
						}]	
					},{
						itemType: "group",
						alignItemLabels : false,
						colCount: 2,
						items: [{
							colSpan: 8,
							template	: function (data, itemElement) {
	            	itemElement.append("<div style='color:red;'>(*) Campos obrigatórios.</div>")
              },
						},{
              label		: {
								visible: false
							},
							cssClass:"Padding-L0R0",
							itemType: "button",
							horizontalAlignment: "right",
	            buttonOptions: {
								icon: "fa fa-print",
								height: 28,
								text	: "Imprimir",
								hint	: "Imprimir Requisição de Exame LME",
				        stylingMode	: "contained",
								type		: "default",
								onClick	: function(e) {
									if (!formRecLME.validate().isValid){
										DevExpress.ui.notify("Preencher os campos obrigatórios.", "warning", 4000);
										return
									}
									imprimir(35, formulario.option("formData").Passagem)
								}
	            }
						}]
					}		
				]
			}).dxForm("instance")
			
			$("#divMedicamentoLME").dxDataGrid({
				dataSource: new DevExpress.data.DataSource({
					store: new DevExpress.data.CustomStore({
			  		key: "sequencia",
			  		loadMode: "raw",   
			  		load: function() {
			      	return $.getJSON(urlPreparacao,{method:"GetMedicamentosLME",passagem:passagem});
			  		},
			  		insert: function (values) {
			        objDados = new Array;
							for (var coluna in values) {
								if (values.hasOwnProperty(coluna)) {
									valor = values[coluna];
									valor = valor ? valor : '';
									objDados.push(coluna+"~"+valor);
								}
							}
							#server(VAR.CSP.VARProntuarioEletronico.ArmMedicamentoLME(passagem, "", objDados, YBED))#;
			    	},
						update: function (key, values) {
							var idRow = key;
							objDados = new Array;
							for (var coluna in values) {
								if (values.hasOwnProperty(coluna)) {
									valor = values[coluna];
									valor = valor ? valor : '';
									objDados.push(coluna+"~"+valor);
								}
							}
							#server(VAR.CSP.VARProntuarioEletronico.ArmMedicamentoLME(passagem, idRow, objDados, YBED))#;
						},
						remove: function (key) {
							#server(VAR.CSP.VARProntuarioEletronico.ExcluirMedicamentoLME(passagem, key, YBED))#;
			    	}					
					})
				}),
				columns: [
					{	dataField: "nomeMedicamento", caption: "Medicamento", alignment: "center", validationRules: [{ type: "required" }],
						setCellValue: function (rowData, value) {
			        if (value == "" || value == null) return
			        objLinha = this;
			        var retorno = #server(VAR.CSP.VARProntuarioEletronico.RecuperaMedicamento(value))#;
							retorno = retorno.split("~"); 
							if (retorno[0] == 0) {
								DevExpress.ui.notify(retorno[1],"warning",2000);
								return;	
							}
							objLinha.defaultSetCellValue(rowData, retorno[2]);
							rowData.medicamento = retorno[1];	
				  	},
				  },
				  { 
				  	caption: "Quantidade Coletada", alignment: "center", columns: [
						  {dataField: "mes1", caption: "1º Mês", alignment: "center", dataType: "number", width: 100},
						  {dataField: "mes2", caption: "2º Mês", alignment: "center", dataType: "number", width: 100},
						  {dataField: "mes3", caption: "3º Mês", alignment: "center", dataType: "number", width: 100},
						  {dataField: "mes4", caption: "4º Mês", alignment: "center", dataType: "number", width: 100},
						  {dataField: "mes5", caption: "5º Mês", alignment: "center", dataType: "number", width: 100},
						  {dataField: "mes6", caption: "6º Mês", alignment: "center", dataType: "number", width: 100},
				  	]
				  }
				],
				onEditorPreparing: function(e) {
					if (e.parentType == "dataRow" && e.dataField == "nomeMedicamento") {
						e.editorName = "dxSelectBox"; 
						e.editorOptions.dataSource = new DevExpress.data.DataSource({
							store: new DevExpress.data.CustomStore({
								byKey: function(args) {
									return $.getJSON(urlPreparacao,{
										method	:"listaMedicamentos",
										codigo	: args
									});
								},
								load: function(args) {
									return $.getJSON(urlPreparacao,{
										method	:"listaMedicamentos",
										searchValue:args.searchValue,
										skip:args.skip,
										take:args.take,
									});
								}
							})
						});
						e.editorOptions.value = e.row.data.medicamento;
						e.editorOptions.displayExpr = "DescMedicamento";
						e.editorOptions.valueExpr = "CodMedicamento";
						e.editorOptions.searchEnabled = 1;
						e.editorOptions.onFocusOut =function(obj){
							obj.component.close()
						};
						e.editorOptions.onValueChanged = function(arg) {
							e.setValue(arg.value);
						}
					}
				},
				columnChooser: { enabled: false, mode: "dragAndDrop"},
				allowColumnReordering: false,
				editing: {
					mode: "batch", // Specifying the edit mode
					allowAdding: true, // Enable editing
					allowUpdating: true, // Enable editing
					allowDeleting: true,
					useIcons: true
				},
				columnAutoWidth: false,
				showColumnLines: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				hoverStateEnabled: true,
				showBorders: true,
				headerFilter: { visible: false },
				groupPanel: { visible: false, allowColumnDragging: true },
				columnFixing: { enabled: false },
				filterRow: { visible: false },
				height:function(){
					return 250
				},
				export: { enabled: false },
				stateStoring: { enabled: false }, 
				wordWrapEnabled: true
			});
		});
	}
		
	dSHistoricoExameFisico = new DevExpress.data.DataSource({
		store: new DevExpress.data.CustomStore({
  		loadMode: "raw",   
  		load: function() {
	  		passagem = formulario.option("formData").Passagem
	  		return $.getJSON(urlPreparacao,{method:"getHistoricoExameFisico", passagem: passagem,
					paciente: codPacienteValor});
  		}
		})
	});
	
	function CopiarExameFisico(pCodPassagemOrigem, pCodPassagemDestino) {
		var result = DevExpress.ui.dialog.confirm("<i>Confirma a copia dos dados?", "Confirmação");
		result.done(function(dialogResult) {
			if (!dialogResult){
				return
			}
			var rs = #server(VAR.CSP.VARProntuarioEletronico.CopiarExameFisico(pCodPassagemOrigem, pCodPassagemDestino, YBED))#;	
			if (rs == 1) {	 
				DevExpress.ui.notify("Dados copiado com sucesso" , "success", 4000);
				passagem = formulario.option("formData").Passagem;
				carregaAnamnese(passagem, 2)
				$("#viewHistoricoExameFisico").dxPopup("hide");
			}else{
				DevExpress.ui.notify("Erro: " + rs , "warning", 4000);
			}	
		});	
	}
		
	$("#viewHistoricoExameFisico").dxPopup({
		visible: false,
		title: "Histórico Exame Físico",
		width: "80%",
		height: "85%",
		position: {
			my: "center",
			at: "center",
			of: window
		},
		dragEnabled: true,
		contentTemplate: function(e) {
			conteudoDialog = $("<div>").dxDataGrid({	
				dataSource: dSHistoricoExameFisico,			
				columns: [
					{dataField: "Copiar",caption: "Copiar", width: 60, fixed: 1, fixedPosition: 'left', alignment: "center", 
						cellTemplate: function (container, options) { 
							if (options.data.Copiar == 1) {
					  		passagem = formulario.option("formData").Passagem
								conteudo = "<span><i class='fas fa-copy' title='Copiar' style='color:#337AB7;cursor:pointer;' " 
								+ "onClick=CopiarExameFisico('"+options.data.Passagem+"','"+passagem+"');/></span>";
							}else{
								conteudo = "<span>&nbsp;</span>";
							}	
							container.append(
								$("<div style='text-align: center;width:100%' />")
									.html(conteudo)
									.appendTo(container)
							);
						}
					
					},
					{dataField: "Passagem",caption: "Passagem", alignment: "left", width: 120, fixed: 1, fixedPosition: 'left', alignment: "center" },
					{dataField: "DataHora",caption: "Data/Hora", width: 130, fixed: 1, fixedPosition: 'left',alignment: "center" },
					{dataField: "PressaoArterial",caption: "Pressão Arterial", width: 60,alignment: "center"},
					{dataField: "Pulso",caption: "Pulso", width: 60,alignment: "center"},
					{dataField: "Temp",caption: "Temp./°C", width: 60,alignment: "center"},
					{dataField: "Peso",caption: "Peso/Kg", width: 60,alignment: "center"},
					{dataField: "Altura",caption: "Altura/cm", width: 60,alignment: "center"},
					{dataField: "SC",caption: "SC m²", width: 60,alignment: "center"},
					{dataField: "IMC",caption: "IMC", width: 60,alignment: "center"},
					{caption: "Alterações Físicas", columns: [
						{dataField: "AF",caption: " ", width: 40,alignment: "center"},
						{caption: "Descorado", columns: [
							{dataField: "AFDescorado",caption: " ", width: 40,alignment: "center"},
							{dataField: "AFDescoradoQtde",caption: "Qtde.", width: 50,alignment: "right"},
						]},
						{caption: "Ictérico", columns: [
							{dataField: "AFIcterico",caption: " ", width: 40,alignment: "center"},
							{dataField: "AFIctericoQtde",caption: "Qtde.", width: 50,alignment: "right"},
						]},
						{caption: "Pletórico", columns: [
							{dataField: "AFPletorico",caption: " ", width: 40,alignment: "center"},
							{dataField: "AFPletoricoQtde",caption: "Qtde.", width: 50,alignment: "right"},
						]},
						{caption: "Outros", columns: [
							{dataField: "AFOutros",caption: " ", width: 40,alignment: "center"},
							{dataField: "AFOutrosDescricao",caption: "Descrição", width: 150},
							{dataField: "AFOutrosQtde",caption: "Qtde.", width: 50,alignment: "right"},
						]},
						{caption: "Manifestações Hemorrágicas", columns: [
							{dataField: "MH",caption: " ", width: 40,alignment: "center"},
							{caption: "Petéquia", columns: [
								{dataField: "MHPetequia",caption: " ", width: 40,alignment: "center"},
								{dataField: "MHPetequiaObservacao",caption: "Observação", width: 200},
							]},
							{caption: "Outros", columns: [
								{dataField: "MHHematoma",caption: " ", width: 40,alignment: "center"},
								{dataField: "MHHematomaObservacao",caption: "Observação", width: 200},
							]},
						{caption: "Outros", columns: [
								{dataField: "MHEquimoses",caption: " ", width: 40,alignment: "center"},
								{dataField: "MHOutrosObservacao",caption: "Observação", width: 200},
							]},
						]},
						{caption: "Gânglio", columns: [
							{dataField: "Ga",caption: " ", width: 40,alignment: "center"},
							{caption: "Cervical Direito", columns: [
								{dataField: "GaCervicalDireito",caption: " ", width: 40,alignment: "center"},
								{dataField: "GaCervicalDireitoQtde",caption: "Qtde.", width: 60,alignment: "right"},
								{dataField: "GaCervicalDireitoTamanho",caption: "Tamanho", width: 60,alignment: "right"},
							]},
							{caption: "Cervical Esquerdo", columns: [
								{dataField: "GaCervicalEsquerdo",caption: " ", width: 40,alignment: "center"},
								{dataField: "GaCervicalEsquerdoQtde",caption: "Qtde.", width: 60,alignment: "right"},
								{dataField: "GaCervicalEsquerdoTamanho",caption: "Tamanho", width: 60,alignment: "right"},
							]},
							{caption: "Axilar Direito", columns: [
								{dataField: "GaAxilarDireito",caption: " ", width: 40,alignment: "center"},
								{dataField: "GaAxilarDireitoQtde",caption: "Qtde.", width: 60,alignment: "right"},
								{dataField: "GaAxilarDireitoTamanho",caption: "Tamanho", width: 60,alignment: "right"},
							]},
							{caption: "Axilar Esquerdo", columns: [
								{dataField: "GaAxilarEsquerdo",caption: " ", width: 40,alignment: "center"},
								{dataField: "GaAxilarEsquerdoQtde",caption: "Qtde.", width: 60,alignment: "right"},
								{dataField: "GaAxilarEsquerdoTamanho",caption: "Tamanho", width: 60,alignment: "right"},
							]},
							{caption: "Inguinal Direito", columns: [
								{dataField: "GaInguinalDireito",caption: " ", width: 40,alignment: "center"},
								{dataField: "GaInguinalDireitoQtde",caption: "Qtde.", width: 60,alignment: "right"},
								{dataField: "GaInguinalDireitoTamanho",caption: "Tamanho", width: 60,alignment: "right"},
							]},
							{caption: "Inguinal Esquerdo", columns: [
								{dataField: "GaInguinalEsquerdo",caption: " ", width: 40,alignment: "center"},
								{dataField: "GaInguinalEsquerdoQtde",caption: "Qtde.", width: 60,alignment: "right"},
								{dataField: "GaInguinalEsquerdoTamanho",caption: "Tamanho", width: 60,alignment: "right"},
							]},
							{caption: "Outros", columns: [
								{dataField: "GaOutros",caption: " ", width: 40,alignment: "center"},
								{dataField: "GaOutrosDescricao",caption: "Descrição", width: 150},
								{dataField: "GaOutrosQtde",caption: "Qtde.", width: 60,alignment: "right"},
								{dataField: "GaOutrosTamanho",caption: "Tamanho", width: 60,alignment: "right"},
							]},
						]},
						{caption: "Anormalidade nos Órgãos", columns: [
							{dataField: "AO",caption: " ", width: 40,alignment: "center"},
							{caption: "Baço", columns: [
								{dataField: "AOBacoPalpavel",caption: "Palpável", width: 70,alignment: "center"},
								{dataField: "AOBacoTamanho",caption: "Tamanho", width: 70,alignment: "right"},
							]},
							{caption: "Figado", columns: [
								{dataField: "AOFigadoPalpavel",caption: "Palpável", width: 70,alignment: "center"},
								{dataField: "AOFigadoTamanho",caption: "Tamanho", width: 70,alignment: "right"},
							]},
							{caption: "Pulmão", columns: [
								{dataField: "AOPulmaoAlterado",caption: "Alterado", width: 70,alignment: "center"},
								{dataField: "AOPulmaoObservacao",caption: "Observação", width: 200},
							]},
							{caption: "Coração", columns: [
								{dataField: "AOCoracaoAlterado",caption: "Alterado", width: 70,alignment: "center"},
								{dataField: "AOCoracaoObservacao",caption: "Observação", width: 200},
							]},
							{caption: "Membros Inferior", columns: [
								{dataField: "AOMembrosInferiorEdema",caption: "Edema", width: 70,alignment: "center"},
								{dataField: "AOMembrosInferiorOutros",caption: "Outros", width: 200},
							]},
							{caption: "Membros Superior", columns: [
								{dataField: "AOMembrosSuperiorEdema",caption: "Edema", width: 70,alignment: "center"},
								{dataField: "AOMembrosSuperiorOutros",caption: "Outros", width: 200}  		
							]},
						]},
					]},
				],
				columnChooser: { enabled: false, mode: "dragAndDrop"},
				showColumnHeaders:true,
				allowColumnReordering: false,
				columnAutoWidth: true,
				showColumnLines: true,
				showRowLines: true,
				rowAlternationEnabled: true,
				showBorders: true,
				headerFilter: { visible: false },
				grouping: { autoExpandAll: false },
				groupPanel: { visible: false, allowColumnDragging: true },
				columnFixing: { enabled: false },
				filterRow: { visible: false },
				export: { enabled: false },
				stateStoring: { enabled: false }, 
				wordWrapEnabled: false,
				searchPanel: { visible: false },
				height: function(){
					return window.innerHeight-200
				},
			});
			e.append(conteudoDialog);
		}
	});	
	var popupRelComplementar = ""
	function RelatorioComplementar(pNumAdmissao,pSeq,pTipo){
			var result = DevExpress.ui.dialog.confirm("<i>Para continuar com a impressão, é necessário salvar os dados. Deseja salvar?", "Confirma armazenamento");
			result.done(function(dialogResult) {
				if (!dialogResult) return;
	      $.ajaxSetup({async: false});
				salvarDados();		
				if(popupRelComplementar != ""){
						popupRelComplementar.dispose();
					}
				$.getJSON(urlPreparacao,{
			  		method:"getRelatoriosComplementares",
			  		pAdmissao: pNumAdmissao,
			  		pSeq: pSeq,
			  		pTipo: pTipo
			  },function(objetoRetorno){
						popupRelComplementar = $("#divEditRelatorio").dxPopup({
							title: "Relatórios Complementares",
							width: '800px',
							height: '600px',
							showTitle: true,
							visible: true,
							dragEnabled: false,
							closeOnOutsideClick: false,
							toolbarItems: [{
								widget: "dxButton",
								location:"before",
								toolbar:"bottom",
								options: { 
									width	: "130px",
									type	: "default",
									icon	: "close",
									text	: "Fechar", 
									onClick : function(){
										$("#divEditRelatorio").dxPopup("hide")
									}
								}
							},{
								widget: "dxButton",
								location:"after",
								toolbar:"bottom",
								options: { 
									width	: "130px",
									type	: "default",
									icon	: "fa fa-print",
									text	: "Imprimir", 
									onClick : function(){
										flagRel = $("#divEditRelatorioForm").dxForm("instance").validate().isValid;
										if(!flagRel){
												DevExpress.ui.notify("Favor preencher os campos obrigatórios", "warning");
												return
											}
										loadPanel.show();
								  	$.get(urlPreparacao,{
								  		method:"armRelatorioComplementar",
								  		pAdmissao: pNumAdmissao,
								  		pSeq: pSeq,
								  		pTipo: pTipo,
								  		dados: JSON.stringify($("#divEditRelatorioForm").dxForm("instance").option("formData")),
							  		},function(rs){
								  			var xpiece = rs.split("_self")
								  			if(xpiece.length > 1){
											  	var piece = rs.split("~");
											  	var tempo = 1;
											  	for (i = 0; i < piece.length ; i++) {
												  	var link = piece[i].split("'")[1];
														var a = $("<a id='a"+i+"' href='"+link+"' download style='visibility: hidden;'>"+link+"</a>");
														$("body").append(a);
														setTimeout(function(){
															a.get(0).click()
															a.remove();
															if (i == (piece.length-1)) {
																loadPanel.hide();
															}
														},tempo)
														//if (tempo < 2) tempo = tempo + 500
									  			}
								  			}
								  			else{
								  				eval(rs)
								  			}
								  			$("#divEditRelatorio").dxPopup("hide")
								  			$.ajaxSetup({async: true});
										})
									}
								}
					}],
						contentTemplate: function(e) {
							e.append("<div id='divEditRelatorioForm' style='height:520px; overflow-y:auto;'>");
						}
				}).dxPopup("instance")
				$("#divEditRelatorioForm").dxForm({
						alignItemLabels: true,
						showColonAfterLabel: false,
						screenByWidth: function(width) { return "lg"; },
						labelLocation: "top",
						items: objetoRetorno
				})
			})
		})	
	}
	
	function addHistReceituario(obj) {
		///if (obj && obj.CodMed != "") {
		if (obj) {
			$.get(urlPreparacao, {method: "limparMedicamentos"})
			.done(function() {
				$.get(urlPreparacao, {method: "addMedicamento", med: obj.CodMed});
			});

			obj.Receituario = obj.Receituario.replaceAll("<br>","\n");
			formReceituario.updateData("receituario",obj.Receituario);
			
			$("#viewHistorico").dxPopup("hide");
			
		}
	}
	
	function addHistDeclaracao(obj) {
		formDeclaracao.resetValues();
		formDeclaracao.updateData("declaracao", obj.descricao);
		formDeclaracao.updateData("tipoDocumento", obj.tipoOrigem);
		formDeclaracao.updateData("removeDataHoraImp", obj.dtHrImpOrigem);
		formDeclaracao.updateData("cid", obj.cidImpOrigem);
		$("#viewHistorico").dxPopup("hide");
	}

 </script>
</body>

</html>
