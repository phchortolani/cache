<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMSYS" type="INC" timestamp="58440,0"><![CDATA[
#;-------------------------------------------------------------------------------
#; History: (purged old entries 07-Aug-2006 GRF)
#; 03-Dec-2013	SCR		SESDF-655: CacheIndex macro
#; 19-Mar-2011	shobby	SR17682: %occInclude
#; 20-Jul-2009	PPP		SR16773: ScanDelimiter is a function now
#; 08-Jan-2009	GRF		SR15632: prepare AddQuotes definition
#; 25-Sep-2008	GRF		Added following 3 changes from OLDDEV
#; 05-Jun-2008	GRF		BR014941: Parentheses around %obj
#; 08-May-2008	shobby	BR014941: Improved speed of $$$Index
#; 11-Feb-2008	shobby	BR014697: Removed ROLLBACK test from ISERR
#; 05-Jul-2007	shobby	BR014409: include COMSYSJS
#; 28-Feb-2007	GRF		Moved string and date macro definitions to those files.
#; 09-Jan-2007	Steve S	SR15342: Reverse Order Macros
#; 03-Jan-2007	GRF		SR15338: ISOK/ISERR revised; removed obsolete barcode tags;
#; 							Define MakeStatus and DecomposeStatus
#; 02-Jan-2007	GRF		SR15337: WWWSPEI codes
#; 25-Oct-2006	Steve S	SR14915: FormatParagraph
#; 18-Oct-2006	JW		SR15134: Edited Kill macro
#; 13-Oct-2006	RPW		SR14914: Let's macro the Replace command. (JW - Let's not)
#; 28-Sep-2006	Steve S	SR14956: RangeCheck Macro
#; 21-Aug-2006	PO		SR14549: New date range macro
#; 09-Aug-2006	PO		SR14877: Include new date macros
#; 19-Jun-2006	Steve S	SR14613: JSText/HTMLText
#; 21-Apr-2006	PO/RPW	SR14427: Moved JS from FINSYS
#; 09-Mar-2006	JW		SR14265: Added KEY1, KEY2
#; 27-Jan-2006	PO		SR14130: Included UnEscapeHyperEventData & removed check for
#; 							whether sub-routine call is required in EscapeHyperEventData
#; 23-Jan-2006	PO		SR14109: Macros OrdersInvoiceEndsWithDot & OrderLinesInvoiceEndsWithDot
#; 06-Jan-2006	SC		SR13798: reinstated decode wrapper for @Net button error messages
#;-------------------------------------------------------------------------------
 
#; NOTE : COMSYSWWW includes WWWConst

#include COMSYSDate
#include COMSYSNum
#include COMSYSString
#include COMSYSWWW
#include COMSYSOutput
#include COMSYSEnum
#include COMGridEdit31Interface
#include COMTab
#include COMEditor
#include COMSYSJS
#include %occInclude 
 
#;-------------------------------------------------------------------------------
#; SR13395 - whether we can use syntax highlighting.
#define CANCODECHECK	(($System.Version.GetOS()["Windows") || ($System.Version.GetNumber()>=5.2))
 
#;define DEVMODE		$get(^Development)
#define DEVMODE		$select($get(%request)'="":('$find($get(%request.CgiEnvs("HTTP_USER_AGENT")),"Windows CE"))&&($get(^Development)),1:$get(^Development))
 
#; SR17612	- Change INHERIT from 2 to ""
#; SR17541 - Inherited switches are set to 2 and resolved as boolean values
#;           at a higher level (e.g. through the Location Hierarchy)
#define INHERIT		""
#define OK			1
#define YES			1
#define NO			0
#define HASERROR	-1
#define ALWAYS		1
#define NEVER		0
#; @NetManager No and Indexed No
#define ANNO		""
#define ANINO		" "
#define ANBOOLEAN(%1)	$select(%1:$$$YES,1:$$$ANNO)
#; WWWSPEI special status
#define SPEINotOwned  9
#define HardFail      0
#define SaveOkay      1
#define SoftFail      9
#; Bit Mapping processing (WWWBITSET)
#define BitMapSet     1
#define BitMapKill    0
 
#;-------------------------------------------------------------------------------
#; The listbuild function can generate a numeric value from the binary prefix
#; in certain circumstances.
#; e.g. if the first binary characters are hex "32 01" simply using + will
#; generate a value 2, incorrectly reporting the status is correct.
#; 
#; Usage:
#;    set strStatus = $$$YES
#;    set strStatus = $$$MakeStatus(idErrorNo)
#;    
#;    $$$DecomposeStatus(strStatus)
#;         - resets strStatus to value $listbuild(idErrorNo) if has error prefix
#; 
#; strStatus should return "0"_space_list or "1" (cf Intersystem errors).
#define ISOK(%sc)			(+%sc)
#;define ISERR(%sc)			(('%sc)&&(%sc'="ROLLBACK"))    ;BR014697
#define ISERR(%sc)			('%sc)
#define ErrorPrefix			"0 "
#def1arg MakeStatus(%1)		$$$ErrorPrefix_$listbuild(%1)
#define DecomposeStatus(%1)	s:($e(%1,1,2)=$$$ErrorPrefix) %1=$e(%1,3,$l(%1))
#;-------------------------------------------------------------------------------
 
#def1arg Colour(%obj) 		$$Colour^COMUtilStr(%obj)
#def1arg Storage(%obj)		^mtemp("Tree",YUSER,%obj)
 ;BR014941 #define  Index(%obj)		$$Index^COMUtils(%obj)
#define  Index(%obj)		$select(+(%obj)=(%obj):(%obj),1:$$Index^COMUtilIndex(%obj))
#define  CacheIndex(%obj)		$select(+(%obj)=(%obj):(%obj),1:$$CacheIndex^COMUtilIndex(%obj))
#def1arg Save(%obj)			$$Save^COMUtils(%obj)
#; define  Kill(%class,%id)	KILL^COMUtils(%class,%id)		SR15134
#define  Kill(%class,%id)	$$KILL^COMUtils(%class,%id)
#def1arg Text(%str)			$$DecodeError^COMUtilError(%str)
#define	 TextSimple(%str)	$$^WWWTEXT(%str)
#define  Error(%obj)		do ReturnError^COMUtilError(%obj)
 
#; SR15632 - AddQuotes defn added to clarify multiple definitions of $$$Add
#; This Add definition is deprecated and should be replaced by $$$AddQuotes - where not defined differently
#define Add(%obj)			$select(%obj=+%obj:%obj,1:""""_%obj_"""")
#define AddQuotes(%obj)		$select(%obj=+%obj:%obj,1:""""_%obj_"""")
#define AddToRow(%1)		set lstRow = lstRow_$listbuild(%1)
#define Display(%1)			$select(%1="":"---",$$$YES:%1)

 
#define NoKey(%obj)			(($get(%obj)="")||(%obj="+"))
#define Escape(%obj)		##class(%CSP.Page).EscapeURL(%obj)
#define Unescape(%obj)		##class(%CSP.Page).UnescapeURL(%obj)
#define NoCR(%str)			$translate($get(%str),"|")
#define VStoBreak(%str)		$$Replace^COMUtilStr($get(%str),"|","<BR>")
#;SR14915
#define FormatParagraph(%1) $$Replace^COMUtilStr($get(%1),"|","<p />")
#define NoRecord(%str)		($translate(%str,Y)="")
 
 
#; SR14956 - Check that a value (string/number) falls within a range.
#define RangeCheck(%1,%2,%3) $select(((%3'="")&&(%1]]%3)):$$$NO,((%2'="")&&(%2'=%1)&&(%2]]%1)):$$$NO,1:$$$YES)
 
#def1arg ExecuteSite(%obj)	$$trySiteEvent^COMDCMSiteEvent(%obj)
 
#; <GRF>  TODO
#;     remove *Const.INC entries
#; #def1arg SaveGlobal(%obj) $$Save^SALUtils(YM,%obj)
#;     changed to entry here
#; #defarg SaveGlobal(%Class,%Keys,%Data) $$Save^COMUtilGlo(%Class,%Keys,%Data)
#;     Already added #include COMSYS to COM* and IN* routines using $$$SaveGlobal
#;     Need to check SAL*
#;     Need to make key string before each $$$SaveGlobal - more efficient than
#;     trying to work out if right number of keys - entries are hard coded.
 
#define PublicANMVars APMCO,APMLANG,APMNAMESPACE,APMQUERY,APMUSER,Y,YC,YM,YUCI,YUSER,YBED
 
	// ***********************************************
	// Set debug entries that are maintained if TROLLBACK occurs
	// e.g.  if $$$DebugTest $$$JournalOff set ^SAVE=value $$$JournalOn
#define JournalOn	do $zu(139,0)
#define JournalOff	do $zu(139,1)
	// ***********************************************
	
	// Write variables in memory to file in disclinc/dump/{user}
#define DevMem(%1)	do DevMem^COMUtilLog(%1)
	
	// ***********************************************
	// TODO : Use macro to clarify operation
	//    End-Of-File handling for sequential files
	// do $ZUTIL(68,40,1)
	//    Eliminates the <ENDOFFILE> error for sequential
	//    files for the current process. Instead, when
	//    the end of a file is reached, the READ command
	//    returns a null string, the $ZPOS special variable
	//    is set to "" (the null string), and the $ZEOF
	//    special variable is set to 1. 
	// ***********************************************
	
#; TODO : Are these required - taken from SYSDisc.INC and may be obsolete
#;        Note variation in CacheTemp Global used
#define TStart(%1,%2)	new TransactionLevel do $zu(139,1) set TransactionLevel=$I(^CacheTempTransactionCount),^CacheTempTransactions($job,%1,TransactionLevel)=$h_""|""_%2 do $zu(139,0) tstart
#define TCommit(%1)		new CurrentTlevel,NewTLevel set CurrentTlevel=$tlevel tcommit:CurrentTlevel  set NewTLevel=$tlevel if CurrentTlevel>NewTLevel do $zu(139,1) kill ^CacheTempTransactions($job,%1,TransactionLevel) do $zu(139,0)
#define TRollback(%1)	trollback:$tlevel>0  do $zu(139,1) kill:$d(TransactionLevel) ^CacheTempDiscTransactions($job,%1,TransactionLevel) do $zu(139,0)
	// ***********************************************

#; NOTE : %str passed to $$$Text *MUST* be include $listbuild if message contains values.
#def1arg AlertVB(%str)			write $$Alert^COMViewSetupVB(%str)
#define	Alert(%str)				do Alert^COMConst($$$Text(%str,1))
#define AlertInScript(%str)		do AlertInScript^COMConst($$$Text(%str,1))
#define AlertString(%str)		do Alert^COMConst(%str)
#def1arg CallBack(%str)			$$CallBack^COMViewSetupVB(%str)
#define ShowPrompt(%1,%2,%3)	do ShowPrompt^COMConst(%1,%2,%3)
 
#define DLFError			zt "DLFE"
 
 
#;	^Dump = "\\orion\DiscLinc\Dump\,####"         updated on call and creates file
#;	\\orion\DiscLinc\Dump\{YBED}\Dump-YYYY-MM-DD-hh-mm-ss-####@Subr+Offset^Routine-+1.htm
#define Dump				do ##class(Common.Dump).DumpFile()
 
 
#; If global %g is not null, return %g. Otherwise return %r (which should set %g)
#define GetGlobal(%g,%r)	$select($get(%g)'="":$get(%g),1:%r)
 
 
#; Micro Operations:
#;
#; For the client side javascript code see the function retvalcheck in library eventbroker??.js
  
#define EscapeHyperEventData(%str) $$EscapeString^COMUtilStr(%str,$$$AllMicroOps,$$$YES)
#define UnEscapeHyperEventData(%str) $$UnEscapeString^COMUtilStr(%str,$$$AllMicroOps,$$$YES)
 
#define AllMicroOps $$$AlertFollowing_$$$AlertAndFocus_$$$Confirm_$$$Prompt_$$$Open_$$$Perform_$$$ParentPerform
#define AlertFollowing "!"
#define AlertAndFocus  "§"
#define Confirm        "&"
#define Prompt         "?"
#define Open		   "@"
#define Perform        "#"
#define ParentPerform  "þ"

#define CONTEXT ('$get(^SysSetup("ContextMenu")) && ($get(YUSER)'=""))
#define TERMRUN	($piece($IO,"|",2)'="TNT")&&($piece($IO,"|",2)'="TRM")

#define OrdersInvoiceEndsWithDot(%obj)     ($get(^SysSetup("Duplicate invoice fix"))=1 && ($extract($reverse($$$INAUFInvoiceNumber(%obj)))=".") && ($length($$$INAUFInvoiceNumber(%obj)) > 1))
#define OrderLinesInvoiceEndsWithDot(%obj) ($get(^SysSetup("Duplicate invoice fix"))=1 && ($extract($reverse($$$INAUFPInvoiceNumber(%obj)))=".") && ($length($$$INAUFPInvoiceNumber(%obj)) > 1))
 
#define ButtonOK		1
#define ButtonCancel	2
#define ButtonAbort		3
#define ButtonRetry		4
#define ButtonIgnore	5
#define ButtonYes		6
#define ButtonNo		7
 
 
#define VAR if $get(Y)="" do ^WWWVAR
 
#define REPFolder		"Report"
 
#define DirDown		1
#define DirUp		-1
 
#define YQHandler(%1)	if $$$ISOK(%1) { set YQ = $$$YQEnable } else { set YQ = $$$YQDisable(%1) }
#define YQMessage		$extract(YQ,2,$length(YQ))
 
#define JS(%1)			$$$StartScript() write %1 $$$EndScript()
#define JSBoolean(%1)	$select(%1="true":$$$YES,1:$$$NO)
 
 
#define LOCKCODE	"="
#; THE LENGTH OF THE ABOVE!!!
#define LOCKCODELEN 1
#define LOCKCALL	"$$"
 
#define InHyperEvent			(($get(%session)'="")&&$IsObject(%session)&&($get(^CacheTempInHyperEvent(%session.SessionId,$job))))
#define NotInHyperEvent			(($get(%session)'="")&&$IsObject(%session)&&'($get(^CacheTempInHyperEvent(%session.SessionId,$job))))
 
#define StartScript(%str)		do StartScript^COMUtiljavascript(%str)
#define EndScript(%str)			do EndScript^COMUtiljavascript()
#define InScriptTag				$data(^CacheTempjavascript(YUSER))
#define AtScriptClosingLevel	($get(^CacheTempjavascript(YUSER))=1)
 
#; Would have liked to YERROR to report detail of application error in email but
#; YERROR is changed before writting mailto hyperlink
#define AppError(%1)	$listbuild("Com00251",%1) do ##class(Common.Dump).DumpFile($$$Text($listbuild("Com00251",%1)))
 
#define EnumDisplayTypeExcel	0
#define EnumDisplayTypeCSV		1
#define EnumDisplayTypeCOMView	-1
 

#define	Contains(%1,%2)			$listfind($listbuild%1,%2)

#define Coalesce(%1,%2)			$select(%1'="":%1,1:%2)			
 

#define HYPERValidation(%f)		($$$WWW120ConstantFieldValidating($get(^WWW120(0,%f,1)))&&'$get(^SysSetup("NoHyper",%f)))
 
#; Formula Evaluation Calculator
#;------------------------------------------ 
#define NotANumber		":NaN"
#define InvalidChar		":ERR"
#define BadFunction		":BF"
#define BracketCount	":BC"
#define UnknownFunction	":UF"
 
#;  used by build routines
#define KILLOUT(%1)		set ^WWWOUT(0,$increment(NUMMER),0,1)=%1
 
#define ExecuteCode(%1)	$$ExecuteCode^COMUtils(%1)
#define FREE			"_FREE"
 
#define NewLineCharForMemoFields "|"
  
#define GetSizeEvent(%1,%2) "var result=EventValue(document.WWW.YUCI.value,document.WWW.YUSER.value,document.WWW.YFORM.value,'Start','GetSize^COMViewSession','"_%2_"','6','NOVALUE');result=result.split('"_%1_"'); var "_%2_"Height=result[0];"_%2_"Width=result[1];"

#;SR16773
#define ScanDelim $$GetScanDelim^COMUtils()

#; $order	SR14421
#; vvvvvvvvvvvvvvvvvvvvv
#;
#; Because functionality is obscured using these macros, their use is now     *** DEPRECATED ***
#; 
#define Order1(%2,%1)						set %1 = "" for { set %1 = $order(%2(%1)) quit:%1=""
#define Order2(%2,%3,%1)					set %1 = "" for { set %1 = $order(%2(%3,%1)) quit:%1=""
#define Order3(%2,%3,%4,%1)					set %1 = "" for { set %1 = $order(%2(%3,%4,%1)) quit:%1=""
#define Order4(%2,%3,%4,%5,%1)				set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%1)) quit:%1=""
#define Order5(%2,%3,%4,%5,%6,%1)			set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%1)) quit:%1=""
#define Order6(%2,%3,%4,%5,%6,%7,%1)		set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%7,%1)) quit:%1=""
#define Order7(%2,%3,%4,%5,%6,%7,%8,%1)		set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%7,%8,%1)) quit:%1=""
#define Order8(%2,%3,%4,%5,%6,%7,%8,%9,%1)	set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%7,%8,%9,%1)) quit:%1=""
 
#; $order macros in reverse SR15342
#define RevOrder1(%2,%1)						set %1 = "" for { set %1 = $order(%2(%1),-1) quit:%1=""
#define RevOrder2(%2,%3,%1)						set %1 = "" for { set %1 = $order(%2(%3,%1),-1) quit:%1=""
#define RevOrder3(%2,%3,%4,%1)					set %1 = "" for { set %1 = $order(%2(%3,%4,%1),-1) quit:%1=""
#define RevOrder4(%2,%3,%4,%5,%1)				set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%1),-1) quit:%1=""
#define RevOrder5(%2,%3,%4,%5,%6,%1)			set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%1),-1) quit:%1=""
#define RevOrder6(%2,%3,%4,%5,%6,%7,%1)			set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%7,%1),-1) quit:%1=""
#define RevOrder7(%2,%3,%4,%5,%6,%7,%8,%1)		set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%7,%8,%1),-1) quit:%1=""
#define RevOrder8(%2,%3,%4,%5,%6,%7,%8,%9,%1)	set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%7,%8,%9,%1),-1) quit:%1=""
 
#define DirOrder1(%2,%1,%dir)						set %1 = "" for { set %1 = $order(%2(%1),%dir) quit:%1=""
#define DirOrder2(%2,%3,%1,%dir)					set %1 = "" for { set %1 = $order(%2(%3,%1),%dir) quit:%1=""
#define DirOrder3(%2,%3,%4,%1,%dir)					set %1 = "" for { set %1 = $order(%2(%3,%4,%1),%dir) quit:%1=""
#define DirOrder4(%2,%3,%4,%5,%1,%dir)				set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%1),%dir) quit:%1=""
#define DirOrder5(%2,%3,%4,%5,%6,%1,%dir)			set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%1),%dir) quit:%1=""
#define DirOrder6(%2,%3,%4,%5,%6,%7,%1,%dir)		set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%7,%1),%dir) quit:%1=""
#define DirOrder7(%2,%3,%4,%5,%6,%7,%8,%1,%dir)		set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%7,%8,%1),%dir) quit:%1=""
#define DirOrder8(%2,%3,%4,%5,%6,%7,%8,%9,%1,%dir)	set %1 = "" for { set %1 = $order(%2(%3,%4,%5,%6,%7,%8,%9,%1),%dir) quit:%1=""

#; $query - %2 is the array, and %1 the variable	SR14508
#; QueryKey returns all the array subscripts
#; QueryANKey - returns the @net key (no company / trailing 1)
#; QueryANid - returns last @net node 				SR15084
#define Query(%2,%1)				set %1=%2,%3=$qlength(%1),%4=$name(@%1,%3) for { set %1=$query(@%1) quit:(%1="")||($name(@%1,%3)'=%4)
#define QueryKey(%1)				$piece($extract(%1,1,$length(%1)-1),"(",2)
#define QueryANKey(%1)				$piece(%1,",",2,$length(%1,",")-1)
#define QueryANid(%1)				$piece(%1,",",$length(%1,",")-1)


#define End									}
#define EndErr(%1)							quit:$$$ISERR(%1) }

#; ^^^^^^^^^^^^^^^^^^^^^

]]></Routine>
</Export>