<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="EnsUtil" type="INC" timestamp="58440,0"><![CDATA[
 
#ifndef NODEBUG
#define DEBUG
#endif
 
#ifdef DEBUG
#define ASSERTNOLOG(%condition)    If '(%condition) { BREAK  Write !,"Assert Condition Failed: "_##quote(%condition) }
#else
#define ASSERTNOLOG(%condition)
#endif
 
#; Macros to get current class and method at compile time. 
#define CurrentClass         ##expression(""""_$get(%classname)_"""")
#define CurrentMethod        ##expression(""""_$get(%methodname)_"""")
#define ClassSQLTable(%c)		($$$comClassKeyGet(%c,$$$cCLASSsqlschemaname)_"."_$$$comClassKeyGet(%c,$$$cCLASSsqltablename))
 
#; Current Timestamp in ODBC format
#define timeUTCtoUTCH(%utc)  $zdatetimeh(%utc,3,,,,,,,,0)
#define timeUTCHtoUTC(%utch) $zdatetime(%utch,3,,3)
#define timeUTC              $zdatetime($ztimestamp,3,,3)
#define timeUTCH             $ztimestamp
#define timeLocal            ##class(Ens.DataType.UTC).LogicalToOdbc($$$timeUTC)
#define timeUTCtoLocal(%utc) ##class(Ens.DataType.UTC).LogicalToOdbc(%utc)
#define timeLocaltoUTC(%utc) ##class(Ens.DataType.UTC).OdbcToLogical(%utc)
#define timeCmp(%t2,%t1)     $$HorologCmp^EnsUtil($$$timeUTCtoUTCH(%t2),$$$timeUTCtoUTCH(%t1))
#define timeDiff(%t2,%t1)    $$HorologDiff^EnsUtil($$$timeUTCtoUTCH(%t2),$$$timeUTCtoUTCH(%t1))
#define timeHDiff(%t2,%t1)   $$HorologDiff^EnsUtil(%t2,%t1)
#define timeAddSecs(%t2,%s)  $$$timeUTCHtoUTC($$HorologAddSecs^EnsUtil($$$timeUTCtoUTCH(%t2),%s))
 
#; Get a Class Parameter from another class
#define GetClassParameter(%cls,%parm) $$$comMemberKeyGet(%cls,$$$cCLASSparameter,%parm,$$$cPARAMdefault)
 
#; Test if object variable is defined and not Null
#define IsdefObject(%obj)       ($Data(%obj)#2&&$IsObject(%obj))
 
#; Test if an I/O device name indicates it is a terminal device
#define IsTerminalDevice(%io)	$S($e(%io,1,5)="/dev/":$lf($lb("pts","tty"),$e($p(%io,"/",3),1,3)),1:$lf($lb("TRM","TNT","TNA"),$tr(%io,"0123456789|:.")))
 
#; DisplayString macros
#def1arg StatusText(%args)          $$GetOneStatusText^%apiOBJ(%args)
#def1arg StatusDisplayString(%args) $$getAllErrorTexts^EnsUtil(%args)
#def1arg StatusEquals(%args)        $$StatusEquals^%apiOBJ(%args)
 
#define  PAD(%s,%l) $Extract($Reverse($Justify($Reverse(%s),%l)),1,%l)
#define  NUM(%i,%l) $Translate($Justify(%i,%l)," ","0")
 
#define  AND(%l,%r) $ZBoolean(%l,%r,1)
#define  OR(%l,%r)  $ZBoolean(%l,%r,7)
#define  XOR(%l,%r) $ZBoolean(%l,%r,6)
 
#define OBJCOUNT(%var) Set %var=0 do {Set o="" for { Set o=$zobjnext(o) Quit:o=""  Set %var=%var+1}} while 0
 
#ifndef envEnsembleRoot
#define envEnsembleRoot                         $get(^SourceRoot($ZU(5)),$get(^%qSourceRoot($ZU(5)),$get(^%SYS("SourceRoot",$ZU(5)))))
#endif
 
#ifndef envEnsembleDir
#define envEnsembleDir                          $select($$$envEnsembleRoot'="":$$$envEnsembleRoot,1:"m:/")
 
#define archiveArchiveData	1
#define archivePurgeHeader	2
#define archivePurgeBody	4
 
#endif
]]></Routine>
</Export>