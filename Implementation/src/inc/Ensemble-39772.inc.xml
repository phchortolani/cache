<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="Ensemble" type="INC" timestamp="58440,0"><![CDATA[
#include %occInclude
#include %occErrors
#;
#define EnsMajorVersion $system.Version.GetMajor()
#define EnsMinorVersion $system.Version.GetMinor()
#;
#define DEBUG
#;
#define staticCachedObject(%name)   $$$EnsJobLocal("CachedObject",$$$EnsRuntime("CheckSum"),%name)
#define staticCachedChecksum(%name) $$$EnsJobLocal("CachedChecksum",$$$EnsRuntime("CheckSum"),%name)
#;
#define ConfigTypeName(%t)      $case(%t, $$$eHostTypeUnknown:"Unknown", $$$eHostTypeService:"BusinessService", $$$eHostTypeProcess:"BusinessProcess", $$$eHostTypeOperation:"BusinessOperation", $$$eHostTypeActor:"Actor", :"Unknown")
#define JobConfigName           $G($$$EnsJobStatus($$$SystemName,$Job,$$$eJobGuestConfigName),$G($$$EnsJobStatus($$$SystemName,$Job,$$$eJobStartConfigName)))
#define JobSessionId            $$$EnsJobLocal("JobSessionId")
#define DoTrace                 $S($D($$$EnsJobLocal("DoTrace")):$$$EnsJobLocal("DoTrace"),1:##class(Ens.Util.Trace).DoTrace())
#;
#ifdef DEBUG
#define ASSERT(%condition)      If '(%condition) { BREAK  $$$LOGASSERT(##quote(%condition)) }
#define TRACE(%arg)             $$$catTRACE("user",%arg)
#define sysTRACE(%arg)          $$$catTRACE("system",%arg)
#define catTRACE(%cat,%arg)     Do:$$$DoTrace ##class(Ens.Util.Trace).WriteTrace(%cat,$$$CurrentClass,$$$CurrentMethod,%arg)
#else
#define NODEBUG
#define ASSERT(%condition)
#define TRACE(%arg)
#define sysTRACE(%arg)
#define catTRACE(%arg)
#endif
#;
#define newlogLevelFatal		1
#define newlogLevelError		2
#define newlogLevelWarning		3
#define newlogLevelConfig		4
#define newlogLevelInfo			5
#define newlogLevelUserTrace	6
#define newlogLevelSysTrace		7
#define newLOG(%level,%cat,%msg) Do:(%level'>$g(^Ens.Debug("log"))) ##class(Ens.Util.Log).newLog($$$CurrentClass,$$$CurrentMethod,%level,%cat,%msg) 
#;
#define LOGSTATUS(%status)      Do ##class(Ens.Util.Log).LogStatus($$$CurrentClass,$$$CurrentMethod,%status)
#define LOGASSERT(%arg)         Do ##class(Ens.Util.Log).LogAssert($$$CurrentClass,$$$CurrentMethod,%arg)
#define LOGERROR(%arg)          Do ##class(Ens.Util.Log).LogError($$$CurrentClass,$$$CurrentMethod,%arg)
#define LOGWARNING(%arg)        Do ##class(Ens.Util.Log).LogWarning($$$CurrentClass,$$$CurrentMethod,%arg)
#define LOGALERT(%arg)          Do ##class(Ens.Util.Log).LogAlert($$$CurrentClass,$$$CurrentMethod,%arg)
#define LOGINFO(%arg)           Do ##class(Ens.Util.Log).LogInfo($$$CurrentClass,$$$CurrentMethod,%arg)
#;
#def1arg EnsError(%args)        ##class(Ens.Util.Error).EnsError($$$CurrentClass,$$$CurrentMethod,%args)
#define  EnsSystemError         ##class(Ens.Util.Error).EnsSystemError($$$CurrentClass,$$$CurrentMethod)
#define  SystemError            ##class(Ens.Util.Error).ExceptionStatus()
#def1arg SystemErrorType(%t)    ##class(Ens.Util.Error).ExceptionStatus(%t)
#;
#; Abstract Base IO Log macros
#define abNEWIOLOGENTRY(%base,%isin,%sc,%txt,%meth,%obj) Do:%base.ArchiveIO %base.NewIOLogEntry(%isin,%sc,%txt,%meth,%base.%SessionId,%obj)
#define abSAVEIOLOGENTRY(%base,%sc,%txt,%obj)   Do:$IsObject(%base.IOLogEntry) %base.SaveIOLogEntry(%sc,%txt,%obj)
#define abCLOSEIOLOGENTRY(%base,%sc,%txt,%obj)  Do:$IsObject(%base.IOLogEntry) %base.CloseIOLogEntry(%sc,%txt,%obj)
#;
#; IO Log macros for Business Operation & Business Service
#define NEWINIOLOGENTRY(%sc,%txt,%obj)        $$$abNEWIOLOGENTRY(.,1,%sc,%txt,$$$CurrentMethod,%obj)
#define NEWOUTIOLOGENTRY(%sc,%txt,%meth,%obj) $$$abNEWIOLOGENTRY(.,0,%sc,%txt,%meth,%obj)
#define SAVEIOLOGENTRY(%sc,%txt,%obj)         Do:$IsObject(..IOLogEntry) ..SaveIOLogEntry(%sc,%txt,%obj)
#define CLOSEIOLOGENTRY(%sc,%txt,%obj)        Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(%sc,%txt,%obj)
#;define SAVEIOLOGENTRY(%sc,%txt,%obj)        $$$abSAVEIOLOGENTRY(.,%sc,%txt,%obj}
#;define CLOSEIOLOGENTRY(%sc,%txt,%obj)       $$$abCLOSEIOLOGENTRY(.,%sc,%txt,%obj)
#;
#; IO Log macros for Inbound & Outbound Adapters
#define ANEWINIOLOGENTRY(%sc,%txt,%obj)  $$$abNEWIOLOGENTRY(..BusinessHost,1,%sc,%txt,$$$CurrentMethod,%obj)
#define ANEWOUTIOLOGENTRY(%sc,%txt,%obj) $$$abNEWIOLOGENTRY(..BusinessHost,0,%sc,%txt,$$$CurrentMethod,%obj)
#define ASAVEIOLOGENTRY(%sc,%txt,%obj)   Do:$IsObject(..BusinessHost.IOLogEntry) ..BusinessHost.SaveIOLogEntry(%sc,%txt,%obj)
#define ACLOSEIOLOGENTRY(%sc,%txt,%obj)  Do:$IsObject(..BusinessHost.IOLogEntry) ..BusinessHost.CloseIOLogEntry(%sc,%txt,%obj)
#;
#define WEBTRACE(%msg) If ($IsObject($G(%response))) { Write %msg,! Do %response.Flush() }
#define SysWebTrace(%s) $$$sysTRACE(%s) $$$WEBTRACE(%s)
#;
#define SystemName         "sys"
#;
#define EnsConfig          ^Ens.Config
#define EnsDebug           ^Ens.Debug
#define EnsRuntime         ^Ens.Runtime
#define EnsQueue           ^Ens.Queue
#define EnsJobLock         ^Ens.JobLock
#define EnsJobStatus       ^Ens.JobStatus
#define EnsActiveMessage   ^Ens.ActiveMessage
#define EnsJobRequest      ^Ens.JobRequest
#define EnsSuspended       ^Ens.Suspended
#define EnsJobLocal        %Ensemble
#;
#def1arg EnsRuntimeAppData        ^Ens.RuntimeAppData
#def1arg EnsStaticAppData(%subs)  ^Ens.AppData(%subs)
#;
#define DispatchNameToConfigName(%dispatchname)       $$$EnsRuntime("DispatchName",%dispatchname)
#;
#define ConfigRoot(%configname)                  $$$EnsRuntime("ConfigItem",%configname)
#define ConfigClassName(%configname)             $$$EnsRuntime("ConfigItem",%configname,"ClassName")
#define ConfigOnTaskClassName(%configname)       $$$EnsRuntime("ConfigItem",%configname,"OnTaskClassName")
#define ConfigQueueName(%configname)             $$$EnsRuntime("ConfigItem",%configname,"QueueName")
#define ConfigIsEnabled(%configname)             $$$EnsRuntime("ConfigItem",%configname,"IsEnabled")
#define ConfigChecksum(%configname)              $$$EnsRuntime("ConfigItem",%configname,"Checksum")
#define ConfigRunAsJob(%configname)              $$$EnsRuntime("ConfigItem",%configname,"Job")
#define ConfigId(%configname)                    $$$EnsRuntime("ConfigItem",%configname,"%Id")
#define ConfigBusinessType(%configname)          $$$EnsRuntime("ConfigItem",%configname,"BusinessType")
#define ConfigInactivityTimeout(%configname)     $$$EnsRuntime("ConfigItem",%configname,"InactivityTimeout")
#define ConfigPoolSize(%configname)              $$$EnsRuntime("ConfigItem",%configname,"PoolSize")
#define ConfigSchedule(%configname)              $$$EnsRuntime("ConfigItem",%configname,"Schedule")
#define ConfigTrace(%configname)                 $$$EnsRuntime("ConfigItem",$S(""=%configname:"%Production",1:%configname),"Trace")
#define ConfigSettingRoot(%configname)           $$$EnsRuntime("ConfigItem",%configname,"Setting")
#define ConfigSetting(%configname,%target,%name) $$$EnsRuntime("ConfigItem",%configname,"Setting",%target,%name)
#define ConfigProdSetting(%name)                 $$$EnsRuntime("ConfigItem","%Production","Setting",%name)
#;
#include EnsConstants
#include EnsErrors
#include EnsUtil
#;
#; Status & Counter macros
#;
#; Global used to hold monitor status and counters
#; Do not use these macros except in the macro definitions in this file
#define EnsHostMonitorRoot     ^CacheTemp.EnsHostMonitor
#define EnsHostCounterRoot     ^CacheTemp.EnsHostCounter
#define EnsJobMonitorRoot      ^CacheTemp.EnsJobMonitor
#define EnsLogMonitorRoot      ^CacheTemp.EnsLogMonitor
#;
#; Host Monitor Macros
#def1arg OrderHostMonitor(%arg)               $order($$$EnsHostMonitorRoot($zu(5),%arg))
#define  KillAllHostMonitor                   Kill $$$EnsHostMonitorRoot($zu(5))
#def1arg KillHostMonitor(%host)               Kill $$$EnsHostMonitorRoot($zu(5),%host)
#define  SetHostMonitor(%host,%prop,%val)     Set $$$EnsHostMonitorRoot($zu(5),%host,%prop)=%val,$$$EnsHostMonitorRoot($zu(5),%host,$$$eMonitorLastActivity)=$$$timeUTC
#define  RegisterHostMonitorJob(%host,%job)   Set $$$EnsHostMonitorRoot($zu(5),%host,$$$eMonitorJob,%job)="",$$$EnsHostMonitorRoot($zu(5),%host,$$$eMonitorLastActivity)=$$$timeUTC
#define  GetHostMonitor(%host,%prop)          $G($$$EnsHostMonitorRoot($zu(5),%host,%prop))
#;
#; Counter Macros
#def1arg OrderHostCounter(%args)              $$$EnsHostCounterRoot($zu(5),%args)
#define  KillAllHostCounter                   Kill $$$EnsHostCounterRoot($zu(5))
#define  KillHostCounter(%host,%day,%slot)    Kill $$$EnsHostCounterRoot($zu(5),%host,%day,%slot)
#; count of host actions over time split into intervals
#define  IncHostCounterTime(%host) 	          Set tUTCH=$$$timeUTCH If $I($$$EnsHostMonitorRoot($zu(5),%host,$$$eMonitorCount)),$I($$$EnsHostCounterRoot($zu(5),%host,+tUTCH,$P(tUTCH,",",2)\$$$EnsCounterInterval)) {} $$$SetHostMonitor(%host,$$$eMonitorStatus,"OK")
#define  GetHostCounter(%host,%day,%slot)     $G($$$EnsHostCounterRoot($zu(5),%host,%day,%slot))
#;
#; Job Monitor Macros
#def1arg OrderJobMonitor(%arg)                $order($$$EnsJobMonitorRoot($zu(5),%arg))
#define  EnsJobMonitorNode(%job)              $$$EnsJobMonitorRoot($zu(5),%job)
#define  KillAllJobMonitor                    Kill $$$EnsJobMonitorRoot($zu(5))
#define  KillJobMonitor(%job)                 Kill $$$EnsJobMonitorRoot($zu(5),%job)
#define  SetJobMonitor(%host,%job,%prop,%val) Set $$$EnsJobMonitorRoot($zu(5),%job,%host,%prop)=%val,$$$EnsJobMonitorRoot($zu(5),%job,%host,$$$eMonitorLastActivity)=$$$timeUTC
#define  GetJobMonitor(%host,%job,%prop)      $G($$$EnsJobMonitorRoot($zu(5),%job,%host,%prop))
#; count of total actions since job was started
#define  IncJobCounterTime(%host,%job)        If $I($$$EnsJobMonitorRoot($zu(5),%job,%host,$$$eMonitorCount)) {} $$$SetJobMonitor(%host,%job,$$$eMonitorStatus,"OK")
#;
#; Log Monitor Macros
#def1arg OrderLogMonitor(%arg)                $order($$$EnsLogMonitor($zu(5),%arg))
#define  KillAllLogMonitor                    Kill $$$EnsLogMonitorRoot($zu(5))
#define  KillLogMonitor(%type)                Kill $$$EnsLogMonitorRoot($zu(5),%type)
#define  SetLogMonitor(%type,%prop,%val)      Set $$$EnsLogMonitorRoot($zu(5),%type,%prop)=%val,$$$EnsLogMonitorRoot($zu(5),%type,$$$eMonitorLastActivity)=$$$timeUTC
#define  GetLogMonitor(%type,%prop)           $G($$$EnsLogMonitorRoot($zu(5),%type,%prop))
#define  IncLogCounter(%host)                 If $I($$$EnsLogMonitorRoot($zu(5),%host,$$$eMonitorCount)) {} $$$SetLogMonitor(%host,$$$eMonitorStatus,"OK")
#;
#; size (in seconds) of the interval used by host activity counter
#define EnsCounterInterval                    10
#;
#define queueSyncCallQueueName			("_SyncCall:"_$job)
#define queueSystemSignalQueueName			("_SystemSignal:"_$job)
#define queueIsPrivateQueue(%name)		($e(%name,1)="_")
#;
#; Synchronous Commit Set/Clear macros
#define SyncCommitSet(%t)           Set %t=$G($$$EnsConfig("SyncCommit",$G($$$EnsJobLocal("ConfigName"),"%Production")),$G($$$EnsConfig("SyncCommit"),0))  Set:%t %t='$ZU(68,21,1)
#define SyncCommitClear(%t)         Do:%t $ZU(68,21,0)
 
]]></Routine>
</Export>