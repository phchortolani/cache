<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="COM.fwk.util.RefactorUtil">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="findReplaceClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>routinePrefix:%String,className:%String,newClassName:%String</FormalSpec>
<Implementation><![CDATA[
	w !
	
	write !, "Replacing references for class " _ className _ " for class " _ newClassName, !

	set searchedText = "##class(" _ className _ ")"
	set newText = "##class(" _ newClassName _ ")"
	
	do ..findReplaceMAC(routinePrefix, searchedText, newText)
	do ..findReplaceINT(routinePrefix, searchedText, newText)
	do ..findReplaceCLS(routinePrefix, className, newClassName)
	
	w !
]]></Implementation>
</Method>

<Method name="findReplaceMAC">
<ClassMethod>1</ClassMethod>
<FormalSpec>routinePrefix:%String,termToFind:%String,termToReplace:%String</FormalSpec>
<Implementation><![CDATA[
	write "MAC files: "
	do ##class(RefactorUtil).findReplaceRoutines("rMAC", routinePrefix, termToFind, termToReplace)
]]></Implementation>
</Method>

<Method name="findReplaceINT">
<ClassMethod>1</ClassMethod>
<FormalSpec>routinePrefix:%String,termToFind:%String,termToReplace:%String</FormalSpec>
<Implementation><![CDATA[
	write "INT files: "
	do ##class(RefactorUtil).findReplaceRoutines("ROUTINE", routinePrefix, termToFind, termToReplace)
]]></Implementation>
</Method>

<Method name="findReplaceCLS">
<ClassMethod>1</ClassMethod>
<FormalSpec>classPrefix:%String,oldClassName:%String,newClassName:%String</FormalSpec>
<Implementation><![CDATA[
	set className = classPrefix
	set numberOfClasses = 0
	set numberOfClassesReplaced = 0
	
	write "CLS files: "
	
	for {
		set className = $order(^oddDEF(className))
	
		if (className = "") {
			// end of the list
			quit
		}
		
		if ($extract(className, 1, $length(classPrefix)) '= classPrefix) {
			// started iterating on another routine prefix
			quit
		}
		
		set numberOfClasses = numberOfClasses + 1
		
		set classDef = ##class(%Dictionary.ClassDefinition).%New(className)
		
		set numberOfSuperClassesReplaced = ..findReplaceCLSSuperClasses(classDef, oldClassName, newClassName)
		set numberOfPropertiesReplaced = ..findReplaceCLSProperties(className, oldClassName, newClassName)
		set numberOfMethodReturnsReplaced = ..findReplaceCLSMethodReturns(classDef, oldClassName, newClassName)
		set numberOfMethodContentsReplaced = ..findReplaceCLSMethodContents(classDef, oldClassName, newClassName)

		if (numberOfSuperClassesReplaced > 0 || numberOfPropertiesReplaced > 0 || numberOfMethodReturnsReplaced > 0 || numberOfMethodContentsReplaced > 0) {
			set numberOfClassesReplaced = numberOfClassesReplaced + numberOfSuperClassesReplaced + numberOfPropertiesReplaced + numberOfMethodReturnsReplaced + numberOfMethodContentsReplaced
		}
	}
	
	
	write numberOfClasses _ " classes verified, " _ numberOfClassesReplaced _ " references replaced.", !
]]></Implementation>
</Method>

<Method name="findReplaceCLSSuperClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>classDef:%Dictionary.ClassDefinition,className:%String,newClassName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set superClasses = $get(^oddDEF(classDef.Name, 60))
	
	if (superClasses = "") {
		quit 0
	}
	
	set numberOfReplaces = 0
	
	for i = 1 : 1 : $length(superClasses, ",") {
		set superClass = $piece(superClasses, ",", i)
		//w " superClass : " _ superClass, !
		
		if (superClass = className) {
			set $piece(superClasses, ",", i) = newClassName
			set numberOfReplaces = numberOfReplaces + 1
		}
	}
	
	if (numberOfReplaces > 0) {
		set ^oddDEF(classDef.Name, 60) = superClasses
	}
	
	quit numberOfReplaces
]]></Implementation>
</Method>

<Method name="findReplaceCLSProperties">
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,classReferencedName:%String,newClassReferencedName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set numberOfReplaces = 0
	
	set propertyName = ""
	
	for {
		set propertyName = $order(^oddDEF(className, "a", propertyName))

		if (propertyName = "") {
			quit
		}
		
		set propertyType = $get(^oddDEF(className, "a", propertyName, 5))
		
		if (propertyType = "") {
			continue
		}

		//w " propertyType : " _ propertyType, !
		
		if (propertyType = classReferencedName) {
			set ^oddDEF(className, "a", propertyName, 5) = newClassReferencedName
			set numberOfReplaces = numberOfReplaces + 1
		}
	}
	
	quit numberOfReplaces
]]></Implementation>
</Method>

<Method name="setClassParameterValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%Dictionary.ClassDefinition,parameterName:%String,newParameterValue:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	if ('$data(^oddDEF(className, "p", parameterName))) {
		quit
	}
	
	set ^oddDEF(className, "p", parameterName, 22) = newParameterValue
]]></Implementation>
</Method>

<Method name="findReplaceCLSMethodReturns">
<ClassMethod>1</ClassMethod>
<FormalSpec>classDef:%Dictionary.ClassDefinition,className:%String,newClassName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set numberOfReplaces = 0
	
	set methodName = ""
	
	for {
		set methodName = $order(^oddDEF(classDef.Name, "m", methodName))
		
		if (methodName = "") {
			quit
		}
		
		set methodReturnType = $get(^oddDEF(classDef.Name, "m", methodName, 42))

		if (methodReturnType = "") {
			continue
		}

		//w " methodReturnType : " _ methodReturnType, !
		//w " className : " _ className, !
		
		if (methodReturnType = className) {
			set ^oddDEF(classDef.Name, "m", methodName, 42) = newClassName
			set numberOfReplaces = numberOfReplaces + 1
		}
	}

	quit numberOfReplaces
]]></Implementation>
</Method>

<Method name="findReplaceCLSMethodParameters">
<ClassMethod>1</ClassMethod>
<FormalSpec>classDef:%Dictionary.ClassDefinition,className:%String,newClassName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set numberOfReplaces = 0
	
	set methodName = ""
	
	for {
		set methodName = $order(^oddDEF(classDef.Name, "m", methodName))
		
		if (methodName = "") {
			quit
		}
		
		set params = $get(^oddDEF(classDef.Name, "m", methodName, 27))
		
		if (params = "") {
			continue
		}
		
		for i = 1 : 1 : $length(params, ",") {
			
			set param = $piece(params, ",", i)
			
			set paramType = $piece(param, ":", 2)
	
			if (paramType = "") {
				continue
			}

			//w " paramType : " _ paramType, !
	
			if (paramType = className) {
				
				set $piece(param, ":", 2) = newClassName
				set $piece(params, ",", i) = param
				set ^oddDEF(classDef.Name, "m", methodName, 27) = params
				
				set numberOfReplaces = numberOfReplaces + 1
			}
		}
	}

	quit numberOfReplaces
]]></Implementation>
</Method>

<Method name="findReplaceCLSMethodContents">
<ClassMethod>1</ClassMethod>
<FormalSpec>classDef:%Dictionary.ClassDefinition,className:%String,newClassName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set searchedText = "##class(" _ className _ ")"
	set newText = "##class(" _ newClassName _ ")"

	set numberOfReplaces = 0
	
	set methodName = ""
	
	for {
		set methodName = $order(^oddDEF(classDef.Name, "m", methodName))

		if (methodName = "") {
			quit
		}
		
		set lineNumber = ""
		
		for {
			
			set lineNumber = $order(^oddDEF(classDef.Name, "m", methodName, 30, lineNumber))

			if (lineNumber = "") {
				quit
			}
			
			set lineContent = ^oddDEF(classDef.Name, "m", methodName, 30, lineNumber)
			
			set findPosition = $find(lineContent, searchedText, 0)
			set lengthOfSearchedText = $length(searchedText)

			if (findPosition > 0) { 
				
				//write !, methodName _ "(" _ lineNumber _ "): " _ lineContent, !
				
				set newLine = $extract(lineContent, 1, (findPosition - lengthOfSearchedText - 1)) _
							  newText _
							  $extract(lineContent, findPosition, $length(lineContent))
				
				set ^oddDEF(classDef.Name, "m", methodName, 30, lineNumber) = newLine
				
				set numberOfReplaces = numberOfReplaces + 1
				
				//write !,routineName _ "(" _ lineNumber _ ") (New): " _ newLine
			}
		}
	}
	
	quit numberOfReplaces
]]></Implementation>
</Method>

<Method name="findReplaceRoutines">
<Description><![CDATA[

Finds and replace a specific text in routines.

<p>

Can be configured to replace MAC files 
(routineGlobalName = rMAC) or INT files 
(routineGlobalName = ROUTINE) as their global
definition is identical.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>routineGlobalName:%String,routinePrefix:%String,termToFind:%String,termToReplace:%String</FormalSpec>
<Implementation><![CDATA[
	set routineName = routinePrefix
	set numberOfRoutines = 0
	set numberOfRoutinesReplaced = 0
	
	for {
		set globalReference = "^" _ routineGlobalName _ "(""" _ routineName _ """)"
		set routineName = $order(@globalReference)
	
		if (routineName = "") {
			// end of the list
			quit
		}
		
		if ($extract(routineName, 1, $length(routinePrefix)) '= routinePrefix) {
			// started iterating on another routine prefix
			quit
		}
		
		if (##class(StringUtil).endsWith(routineName, ".T1")) {
			// classes with this suffix are auto generated by net 
			// manager for the Persistent classes
			continue
		}
		
		//w "routine: " _ routineName, !
		
		set numberOfRoutines = numberOfRoutines + 1
		
		set lineNumber = 0
		
		set numberOfChanges = 0
	
		for {
			set globalReference = "^" _ routineGlobalName _ "(""" _ routineName _ """,0," _ lineNumber _ ")"
			set lineNumber = $order(@globalReference)
			
			if ((lineNumber = "") || (+lineNumber = 0) ) {
				quit
			}
			
			set globalReference = "^" _ routineGlobalName _ "(""" _ routineName _ """,0," _ lineNumber _ ")"
			set lineContent = $get(@globalReference)
			set findPosition = $find(lineContent, termToFind, 0)
			set lengthOfTermToFind = $length(termToFind)

			if (findPosition > 0) {
				
				//write !, routineName _ "(" _ lineNumber _ "): " _ lineContent, !
				
				set newLine = $extract(lineContent,1,(findPosition - lengthOfTermToFind - 1))_
							  termToReplace_
							  $extract(lineContent,findPosition,$length(lineContent))
				
				set globalReference = "^" _ routineGlobalName _ "(""" _ routineName _ """,0," _ lineNumber _ ")"
				set @globalReference = newLine
				
				set numberOfChanges = numberOfChanges + 1
				
				//write !,routineName _ "(" _ lineNumber _ ") (New): " _ newLine
			}
		}
		
		if (numberOfChanges > 0) {
			//write numberOfChanges _ " replaces in routine " _ routineName, !
			//set compileCommand = "ZL "_routineName_" ZS  H 2"
			set numberOfRoutinesReplaced = numberOfRoutinesReplaced + 1
			//write !,routineName _ "(" _lineNumber _ ") (CC): " _ compileCommand, !
			//xecute compileCommand
		}
	}
	
	write numberOfRoutines _ " routines verified, " _ numberOfRoutinesReplaced _ " references replaced.", !
]]></Implementation>
</Method>
</Class>
</Export>