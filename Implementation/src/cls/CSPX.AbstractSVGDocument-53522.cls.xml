<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.AbstractSVGDocument">
<Description><![CDATA[
Abstract Document used to server SVG-editor documents into Studio<br>
Subclasses need to provide:<br>
RegisterExtension Projection<br>
Save method<br>
Exists method<br>
EDITORURL parameter<br>
DOCUMENTCLASS parameter<br> ]]></Description>
<Abstract>1</Abstract>
<ClassType/>
<IncludeCode>Ensemble</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Studio.AbstractDocument</Super>
<System>3</System>

<Parameter name="EDITORURL">
<Description><![CDATA[
URL to use to get actual editor for Studio to display.]]></Description>
</Parameter>

<Parameter name="DOCUMENTCLASS">
<Description><![CDATA[
If set, name of superclass used for documents of this type.<br>
For example, Ens.DataTransformDTL]]></Description>
</Parameter>

<Parameter name="EXTENSION">
<Description><![CDATA[
File extension used for this document (e.g., .dtl)]]></Description>
</Parameter>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Method name="GetClassName">
<Description><![CDATA[
return the corresponding class name for this document]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$P(pName,".",1,$L(pName,".")-1)
]]></Implementation>
</Method>

<Method name="HasExtension">
<Description><![CDATA[
Check to see that the file type matches]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>name:%String,ext:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[($ZCVT($E(name,$L(name)-$L(ext)+1,*),"L")=$ZCVT(ext,"L"))
]]></Implementation>
</Method>

<Method name="Load">
<Description><![CDATA[
Return URL for Studio to use to load editor.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK

	Do {
		// Determine the CSP application for the management portal, otherwise use the default
		Set cspapp = ##class(%EnsembleMgr).DetermineMgmtURLForNamespace()
		Set:cspapp="" cspapp=$system.CSP.GetDefaultApp($ZU(5))_"/"
		Set:cspapp="" cspapp="/csp/"_$ZCVT($ZU(5),"L")_"/"
		Set cspapp = $P(cspapp,"/",1,$L(cspapp,"/")-1)
		
		// get URL and send it to Studio
		If (..#EDITORURL="") {
			// assert: this should not happen
			Set href = "No editor defined for this document!"
		}
		ElseIf ('..Exists(..Name)) {
			// new document
			Set href = cspapp _ "/" _ ..#EDITORURL
		}
		Else {
			Set href = cspapp _ "/" _ ..#EDITORURL _ "?$ID1="_$ZCVT(..Name,"O","URL")
		}

		Do ..Clear()
		Do ..Code.WriteLine(href)

	} While(0)

Exit
	Quit tSC
Trap
	Set $ZT=""
	Write !,"Error opening document: ",..Name," ",$ZE
	Goto Exit
]]></Implementation>
</Method>

<Method name="Exists">
<Description><![CDATA[
Return 1 if the given document exists and 0 if it does not.<br>
Subclass should override this behavior.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tExists=0

	Do {
		// strip off extension
		Set cls = ..GetClassName(name)
		Set tExists = ##class(%Dictionary.ClassDefinition).%ExistsId(cls)
	} While(0)

Exit
	Quit tExists
Trap
	Set $ZT="",tZE=$ZE,tSC=$$$ERROR($$$CacheError,$g(tZE))
	Goto Exit
]]></Implementation>
</Method>

<Method name="Compile">
<Description><![CDATA[
Compile this document]]></Description>
<FormalSpec>flags:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	If (..#DOCUMENTCLASS'="") {
		Write !,$$$FormatText($$$Text("Compiling document '%1'"),..Name)
		Set tSC = $System.OBJ.Compile(..GetClassName(..Name),flags,,1)
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Delete">
<Description><![CDATA[
Delete the class that corresponds to document <var>name</var>.
Subclass should override this behavior for non-class based editors.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	If (..#DOCUMENTCLASS'="") {
		Set tSC = $System.OBJ.Delete(..GetClassName(name))
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="TimeStamp">
<Description><![CDATA[
Return the timestamp of routine 'name' in %TimeStamp format. This is used to determine if the routine has
been updated on the server and so needs reloading from Studio. So the format should be $zdatetime($horolog,3),
or "" if the routine does not exist.<br>
Subclass should override this behavior for non-class based editors.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[
	If (..#DOCUMENTCLASS'="") {
		// strip off extension; find TimeChanged for class
		Set cls = ..GetClassName(name)
		Quit $ZDT($$$defClassKeyGet(cls,$$$cCLASStimechanged),3)
	}
	Else {
		Quit ""
	}
]]></Implementation>
</Method>
<Query name="List">
<Description><![CDATA[
Subclass should override this query for non-class based editors.]]></Description>
<Type>%Query</Type>
<FormalSpec>Directory:%String,Flat:%Boolean,System:%Boolean</FormalSpec>

<Parameter name="ROWSPEC" value="name:%String,modified:%TimeStamp,size:%Integer,directory:%String"/>
</Query>


<Method name="ListExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,Directory:%String,Flat:%Boolean,System:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle = ""
	If Directory'="" Quit $$$OK
	
	// get list of classes
	Set tRS = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:SubclassOf")

	Do tRS.Execute(..#DOCUMENTCLASS)
	While (tRS.Next()) {
		Set qHandle("Classes",tRS.Data("Name")) = ""
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ListFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,&amp;Row:%List,&amp;AtEnd:%Integer=0</FormalSpec>
<PlaceAfter>ListExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle = $O(qHandle("Classes",qHandle))
	If (qHandle '= "") {
		
		Set tTime = $ZDT($$$defClassKeyGet(qHandle,$$$cCLASStimechanged),3)
		Set Row = $LB(qHandle _ ..#EXTENSION,tTime,,"")
		Set AtEnd = 0
	}
	Else {
		Set Row = ""
		Set AtEnd = 1
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ListClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary</FormalSpec>
<PlaceAfter>ListExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetOther">
<Description><![CDATA[
Return other document types that this is related to.
Passed a name and you return a comma separated list of the other documents it is related to
or "" if it is not related to anything<br>
Subclass should override this behavior for non-class based editors.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If (..#DOCUMENTCLASS="") {
		// no related item
		Quit ""
	}
	
	Set result = "",tCls=..GetClassName(Name)
	
	// This changes with MAK1867
	If ..HasExtension(Name,..#EXTENSION),$$$defClassDefined(tCls),..Exists(Name) {
		Set:result'="" result=result_","
		Set result = result _ tCls _ ".cls"
	}
	
	Quit result
]]></Implementation>
</Method>
</Class>
</Export>