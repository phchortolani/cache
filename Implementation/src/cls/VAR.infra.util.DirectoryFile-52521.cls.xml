<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.util.DirectoryFile">
<Description><![CDATA[Directory and File methods.<br>
&nbsp;<br>
History:<br>
2009-Apr-02&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Created by Pablo]]></Description>
<ClassType/>
<Import>VAR.infra.cache</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="Exists">
<Description><![CDATA[Returns if the specified directory or file exists.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrDirOrFile: directory or file complete path<br>
&nbsp;<br>
Returns: if it exists]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrDirOrFile:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set pathSymbol = ..GetPathSymbol()

	set pstrDirOrFile = $case($extract(pstrDirOrFile, $length(pstrDirOrFile),
		$length(pstrDirOrFile)), pathSymbol:$extract(pstrDirOrFile, 1,
		$length(pstrDirOrFile) - 1), :pstrDirOrFile)

	quit ($zutil(140, 4, pstrDirOrFile) = 0)]]></Implementation>
</Method>

<Method name="GetFormattedDir">
<Description><![CDATA[Returns the directory with a slash '\' appended at the end if not present.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrDir: directory complete path<br>
&nbsp;<br>
Returns: the formatted directory]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrDir:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set pathSymbol = ..GetPathSymbol()

	quit $case($extract(pstrDir, $length(pstrDir), $length(pstrDir)),
		pathSymbol:pstrDir, :pstrDir_pathSymbol)]]></Implementation>
</Method>

<Method name="CreateDir">
<Description><![CDATA[Creates the directory specified.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrFormattedDir: (formatted)
directory complete path<br>
&nbsp;<br>
Returns: succeded or not]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrFormattedDir:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit ($zutil(140, 9, pstrFormattedDir) = 0)]]></Implementation>
</Method>

<Method name="DeleteFile">
<Description><![CDATA[Deletes the filename specified.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrFileName: file complete path<br>
&nbsp;<br>
Returns: succeded or not]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrFileName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit ($zutil(140, 5, pstrFileName) = 0)]]></Implementation>
</Method>

<Method name="GetNamespaceSubdir">
<Description><![CDATA[Returns a subdirectory path based on the current physical database dir.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrSubdirName: subdirectory name<br>
&nbsp;<br>
Returns: the subdirectory path]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrSubdirName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set realDir = ##class(Database).GetRealDir()
	if ($length(realDir) > 0) {
		quit ..ConcatPath(realDir, pstrSubdirName_..GetPathSymbol())
	}

	quit ..GetFormattedDir($zutil(12, pstrSubdirName))]]></Implementation>
</Method>

<Method name="GetManagerSubdir">
<Description><![CDATA[Returns a subdirectory path based on the manager (Mgr) physical dir.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrSubdirName: subdirectory name<br>
&nbsp;<br>
Returns: the subdirectory path]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrSubdirName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..GetFormattedDir(..GetFormattedDir($zutil(12))_pstrSubdirName)]]></Implementation>
</Method>

<Method name="GetOSDir">
<Description><![CDATA[Corrects a directory path based on the current OS.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrDirName: directory complete path<br>
&nbsp;<br>
Returns: the corrected directory path]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrDirName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..FixPathSymbol($zutil(147, pstrDirName))]]></Implementation>
</Method>

<Method name="GetPathSymbol">
<Description><![CDATA[Gets the current path symbol for the running operating system (*nix or Windows)]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set result = ""

	if (##class(Util).IsWindows()) {
		set result = "\"
	}
	else {
		set result = "/"
	}

	quit result]]></Implementation>
</Method>

<Method name="FixPathSymbol">
<Description><![CDATA[This method corrects all path symbols in a file name to have the correct version for
the current operating system.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	if (fileName = "") {
		quit ""
	}

	set right = ..GetPathSymbol()
	set wrong = ""

	// Define the wrong slash
	if (right = "/") {
		set wrong = "\"
	}
	else {
		set wrong = "/"
	}

	// Clean the string
	quit $translate(fileName, wrong, right)]]></Implementation>
</Method>

<Method name="FixUnixPathSymbol">
<Description><![CDATA[This method corrects all path symbols in a file name to have the correct version for
the UNIX operating system.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	if (fileName = "") {
		quit ""
	}

	set right = "/"
	set wrong = "\"

	// Clean the string
	quit $translate(fileName, wrong, right)]]></Implementation>
</Method>

<Method name="FixDirectory">
<ClassMethod>1</ClassMethod>
<FormalSpec>directory:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set directory = ..FixPathSymbol(directory)
	if ($extract(directory, $length(directory), $length(directory)) '=
			(..GetPathSymbol())) {
		set directory = directory_..GetPathSymbol()
	}
	
	quit directory]]></Implementation>
</Method>

<Method name="ConcatPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>directory:%String,suffix:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set directory = ..FixDirectory(directory)
	set suffix = ..FixPathSymbol(suffix)
	if ('$length(suffix)) {
		quit directory
	}

	if ($extract(suffix, 1, 1) = ..GetPathSymbol()) {
		set suffix = $extract(suffix, 2, $length(suffix))
	}

	quit directory_suffix]]></Implementation>
</Method>

<Method name="IsFileOverwritable">
<Description><![CDATA[Tests if the filename is writable or ovewritable (it erases an existing file in the process).
The system leaves a zero lentgh file.

fileName - the complete path/filename (absolute)
errorMessage - a user friendly error message explaining why the file is not writable]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>targetFileName:%String,&amp;errorMessage:%String="",&amp;sc:%Status</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	// Make sure the directory exists
	set directory = ##class(%File).GetDirectory(targetFileName)
	if (##class(%File).DirectoryExists(directory)) {
		// Try to create it or overwrite it
		set file = ##class(%File).%New(targetFileName)
		set sc = file.Open("NW")
		if (##class(Errors).IsErrorQuiet(sc)) {
			set errorMessage = "Could not create file '"_targetFileName_"'. "_
				"Make sure the directory exists and that you have permission "_
				"to (over)write to the file."

			// Try to close it, anyway (there is a bug in Cache for Windows
			// that sometimes causes it to keep the file open and ignore close())
			do file.Close()
			quit $$$NO
		} 

		do file.Close()
	}
	else {
		set errorMessage = "The directory '"_directory_" ' doesn't exist!"
		quit $$$NO
	}

	quit $$$YES]]></Implementation>
</Method>

<Method name="CreateDirectoryChain">
<Description><![CDATA[This method creates a directory, returning an error status if it
was not possible.

Parameters:
  dir - full directory path, optionaly ending in slash (acording to the O.S.)
  
  Examples:
  1) e:\xx\yyy\zzzz
  2) e:\xx\yyy\zzzz\
  3) /home/john/projects/alphalinca
  4) /home/john/projects/alphalinca/]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fullPath:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set st = $$$YES
	set dir = fullPath

	// Get rid of the ending slash, if it exists, because
	// Cache's routine doesn't work with it
	set length = $length(dir)
	set char = $extract(dir, length, length)
	if ((char = "\") || (char = "/")) {
		set dir = $extract(dir, 1, length - 1)
	}

	// Create dir
	if ('##class(%File).CreateDirectoryChain(dir)) {
		// TODO: replace this with language texts
		set st = ##class(Errors).MakeErrorStatus("It was not possible to "_
			"create the target directory "_dir)
	}

	quit st]]></Implementation>
</Method>

<Method name="CreateDirectoryChainFromFile">
<Description><![CDATA[This method creates a directory, returning an error status if it
was not possible. The path is extracted by using only the path part of
a complete path specification. The system ignores what is already created,
so there is no error unless the creation is not allowed by the operating system.

DO NOT USE IT FOR directories

Parameters:
  fullFileName - full directory path + filename, (acording to the O.S.)
  
  Example:
  1) e:\xx\yyy\zzzz\filename.txt
  directory crated e:\xx\yyy\zzzz
  
  2) /home/john/projects/alphalinca/file2.txt
  directory created: /home/john/projects/alphalinca]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fullFileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if ($get(fullFileName) = "") {
		quit ##class(Errors).MakeErrorStatus("The system couldn't not "_
			"create an empty directory!")
	}

	quit ..CreateDirectoryChain(##class(%File).GetDirectory(fullFileName))]]></Implementation>
</Method>

<Method name="Delete">
<Description><![CDATA[Deletes a file and optionally display a message]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>externalFileName:%String="",printMessage:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set st = $$$YES

	// Make sure it exists before deleting it :-)
	if (##class(%File).Exists(externalFileName)) {
		do ##class(%File).Delete(externalFileName)

		if (printMessage) {
			w !, "Deleted: "_externalFileName
		}
	}

	// TODO: check out return codes for DELETE
	quit st]]></Implementation>
</Method>

<Method name="GetFileNameFromFullPath">
<Description><![CDATA[Returns the file name part of the full path file name.
Example: "e:\projects\AlphalincMain\src\mac\test.mac" -> "test.mac"]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fullPath:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set result = ""
	if ($get(fullPath) '= "") {
		// It the specified path ends with a slash it is a directory name,
		// and the file name is empty (can't use ..GetPathSymbol() because
		// we want to test for both cases
		if (('##class(Strings).EndsWith(fullPath, "\")) &&
		    ('##class(Strings).EndsWith(fullPath, "/"))) {
			// Total number of parts, where a part is anything separated
			// by / or \
			set nPieces = ##class(%File).GetDirectoryLength(fullPath)

			// Get the last part
			set result = ##class(%File).GetDirectoryPiece(fullPath, nPieces)
		}
	}

	quit result]]></Implementation>
</Method>
</Class>
</Export>