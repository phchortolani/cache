<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.util.Util">
<Description><![CDATA[Utility methods.<br>
&nbsp;<br>
History:<br>
2009-Apr-02&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Created by Pablo]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="GetErrors">
<Description><![CDATA[Returns the errors found in the status (if any) separated by carriege
return + line feed and, optionally, a '&lt;BR>' tag.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrStatus: the status<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pblnIsHtml: is result needed in html format?<br>
&nbsp;<br>
Returns: the error messages]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrStatus:%Status,pblnIsHtml:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set strErrorMessages = ""
	
	if ($$$ISERR(pstrStatus))
	{
		do $System.Status.DecomposeStatus(pstrStatus, .lstErrors)
		
		set strErrorCode = ""
		while (1)
		{
			set strErrorCode = $order(lstErrors(strErrorCode))
			quit:(strErrorCode = "")
			
			set strErrorMessage = $translate(lstErrors(strErrorCode), $char(0), "")
			set strErrorMessages = strErrorMessages_strErrorMessage_
				$case($length(strErrorMessage, $char(10)), 1:$char(13)_$char(10), :"")
			if (pblnIsHtml)
			{
				set strErrorMessages = strErrorMessages_"<BR>"
			}
		}
	}
	
	do ..Replace(.strErrorMessages, $char(10), $char(13)_$char(10))
	do ..Replace(.strErrorMessages, $char(13)_$char(13), $char(13))
	
	quit strErrorMessages]]></Implementation>
</Method>

<Method name="Replace">
<Description><![CDATA[Replaces all occurences of a string in a text.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrText (ByRef): the complete text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrFrom: the string being searched<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrTo: the string to replace<br>
&nbsp;<br>
Returns: the count of replaces applied]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;pstrText:%String,pstrFrom:%String,pstrTo:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	set count = 0

	if ($length(pstrTo, pstrFrom) > 2)
	{
		quit count
	}
	elseif ($length(pstrTo, pstrFrom) = 1)
	{
		while ($length(pstrText, pstrFrom) > 1)
		{
			set pstrText = $piece(pstrText, pstrFrom, 1)_pstrTo_
				$piece(pstrText, pstrFrom, 2, $length(pstrText, pstrFrom))
		}

		set count = $increment(count)
	}
	elseif ($length(pstrTo, pstrFrom) = 2)
	{
		for i = 1:1:($length(pstrText, pstrFrom) - 1)
		{
			set str = $piece(pstrText, pstrFrom, 1, i)_pstrTo_
				$piece(pstrText, pstrFrom, i + 1, $length(pstrText, pstrFrom))
		}

		set count = $increment(count)
	}
	
	quit count]]></Implementation>
</Method>

<Method name="ToUpper">
<Description><![CDATA[Converts a text to uppercase.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrText: the text<br>
&nbsp;<br>
Returns: the text in uppercase]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrText:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $zconvert(pstrText, "U")]]></Implementation>
</Method>

<Method name="GetNumberFixSize">
<Description><![CDATA[Returns a number converted to string with a fixed size. If
the number is smaller then the size expected, its filled with
0's on the left until it reaches the specified size.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strNumber: the number (it can be a string)<br>
&nbsp;<br>
Returns: the number formatted]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>strNumber:%String,intSize:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set strNumber = $extract(strNumber, 1, intSize)
	
	for i = ($length(strNumber) + 1):1:intSize
	{
		set strNumber = "0"_strNumber
	}
	
	quit strNumber]]></Implementation>
</Method>

<Method name="GetNamespace">
<Description><![CDATA[Returns the namespace in uppercase.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the namespace]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..ToUpper($znspace)]]></Implementation>
</Method>

<Method name="ExecExternalProgram">
<Description><![CDATA[Executes an external program and waits for the process to return.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrExecCmd: the command line to execute<br>
&nbsp;<br>
Returns: the return code received from the external program]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrExecCmd:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	quit $zf(-1, pstrExecCmd)]]></Implementation>
</Method>

<Method name="GetComputerName">
<Description><![CDATA[Returns the computer name.<br>
&nbsp;<br>
Returns: the computer name]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(Strings).UpperCase($zutil(110))]]></Implementation>
</Method>

<Method name="IsWindows">
<Description><![CDATA[Validates if the operating system is Windows.<br>
&nbsp;<br>
Returns: true if the operating system is Windows]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit (##class(Strings).UpperCase($System.Version.GetCompBuildOS()) =
			##class(Strings).UpperCase("Windows"))]]></Implementation>
</Method>

<Method name="IsNix">
<Description><![CDATA[Validates if the operating system is NIX.<br>
&nbsp;<br>
Returns: true if the operating system is NIX]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	//#define ISUNIX ($zversion(1) = 3)

	quit (##class(Strings).UpperCase($System.Version.GetCompBuildOS()) =
			##class(Strings).UpperCase("UNIX"))]]></Implementation>
</Method>
</Class>
</Export>