<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alDRP.dMovementType">
<Description><![CDATA[
Movement Types provide a record of the source of a transaction as well
as indicating which period information is to be updated when the data is
finally processed.<br><br>
]]></Description>
<ClassType>serial</ClassType>
<IncludeCode>COMSYS</IncludeCode>
<Super>%SerialObject</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; History:
; 24-May-2013	SCR		CORE-94: Reserve Medical Dispense
; 28-Apr-2008	GRF		Remove index and balances until needed
;---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="MovementTypeId">
<Description><![CDATA[
Source of transaction
Initially based on : ^WWW101(0,"UMSATZART1",SPRACHE,Class,1)   [later extended]]]></Description>
<Type>alSYS.dt.dtInteger</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00486"/>
</Property>

<UDLText name="T">
<Content>
/*------------------------------------------
; Initial Value for MovementTypeId
;   0  InitialLoad                     FIXME ?
;   0  Sale
;   1  Receipt
;   5  Relocate
;   7  ReceiptReverse
;   8  ReturnToSupplier		//SR17297
;  11  Issue
;  12  Reservation
;  21  DispenseToPatient
;  22  DispenseToPatientReverse
;  22  IssueReversal
;  30  Transfer (TransferIssue)
;  31  TransferReceipt
;  32  TransferReverse
;  35  ManufacturingIssue
;  36  ManufacturingReceipt
;  37  ManufacturingIssueReversal
;  38  ManufacturingReceiptReversal
;  40  Adjustment
;  41  Stocktake
;  51  Relocate By Pallet    // SR17715
;  61  Medical Dispense  (Used for Reservation Only, Actual Move is done by INIssue) ; CORE-94
;-----------------------------------------*/
</Content>
</UDLText>

<UDLText name="T">
<Content>
/*  Removed until needed - probably more appropriate in dMovement Class
/// Property of alSOH.dPeriodBalance to be updated by QtyReceived
/// Some movement types may not require updates
Property BalancePropIn As %String;

/// Property of alSOH.dPeriodBalance to be updated by QtyIssued
/// Some movement types may not require updates
Property BalancePropOut As %String;
*/
</Content>
</UDLText>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<UDLText name="T">
<Content>
// Index IDKEY On MovementTypeId [ IdKey, PrimaryKey, Unique ];

</Content>
</UDLText>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="Populate">
<Description><![CDATA[
Initial population of the class]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; OBSOLETE : Serial nature means values not set up
	;            RETAIN AT PRESENT as documentation of which period balances are
	;            updated.
	; 
	; 
	; History:
	; 20-Feb-2008	HQN		Fixed populate to handle change in ID INDEX
	; 27-Nov-2007	GRF		SR15615: created
	; 						todo :
	; 						- verify property names
	; 						- verify class names - do we need full packages?
	; 						- internationalise descriptions - replace with text codes
	; 						- expand options?
	;-------------------------------------------------------------------------------
	
	; Some movement types may not require updates
	
	;       idAppParam   AddToStock          DeductFromStock  ^WWW101(0,"UMSATZART1")
	;----------------------------------------------------------------
	set arr(0)  =  "0~"                 _"~QtySales"           ; * Sale
 ;	set arr(1)  =  "1~QtyPOReceived"    _"~"                   ;   Purchase
 ;	set arr(2)  =  "2~Qty???"           _"~"                   ; * Production              (Finished Goods)
 	set arr(3)  =  "3~QtyTransferIn"    _"~QtyTransferOut"     ; * Interwarehouse Traffic  (Transfer)
 	set arr(4)  =  "4~QtyAdjustIn"      _"~QtyAdjustOut"       ; * Adjustment
	set arr(5)  =  "5~"                 _"~"                   ; * Movement
 ;	set arr(6)  =  "6~Qty???"           _"~"                   ;   Customer Returns
 ;	set arr(7)  =  "7~"                 _"~Qty???"             ;   Return To Supplier
 ;	set arr(8)  =  "8~"                 _"~Qty???"             ;   Issue to Production
 ;	set arr(9)  =  "9~"                 _"~Qty???"             ;   Issue to External Production
 ;	set arr(10) = "10~Qty???"           _"~"                   ;   Receive From External Production
	set arr(11) = "11~QtyRequisitionIn" _"~QtyRequisitionOut"  ;   Requisition
	
	set loop=""
	for {
		set loop = $order(arr(loop))
		quit:loop=""
		
		set objPopulate=##class(alDRP.dMovementType).%New()
		set objPopulate.MovementTypeId = $piece(arr(loop),"~",1)
		set objPopulate.BalancePropIn  = $piece(arr(loop),"~",2)   
		set objPopulate.BalancePropOut = $piece(arr(loop),"~",3)   
		do objPopulate.%Save()
	}
]]></Implementation>
</Method>

<Method name="UpdateSOHPeriod">
<Description><![CDATA[
<pre>
	Params:
		pidMoveType			Movement Source Transaction Package
		pstrBalanceProp		"BalancePropIn or "BalancePropOut"
		pidLocn				Site Location/Department
		pidItem				Stock Item
		pdteMovement		Date of Movement Transaction
		pfltQtyReceived		Quantity being Received
		pfltQtyIssued		Quantity being Picked
</pre>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pidMoveType,pidLocn,pidItem,pdteMovement,pfltQtyReceived,pfltQtyIssued</FormalSpec>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 27-Nov-2007	GRF		SR15615: Prototype
	; 						todo :
	; 						- verify "dSOH.iPeriodBalance" and "alSOH.iPeriod"
	; 						- wrapper (get objBalance once if common date?  Which date?
	; 						  SOHPeriod calculation?
	;-------------------------------------------------------------------------------
	set objMovement = ##class(alDRP.dMovementType).%OpenId(pidMoveType)
	if (objMovement'=$$$NULLOREF) {
		set strFieldIn  = objMovement.BalancePropIn
		set strFieldOut = objMovement.BalancePropOut
		
		set idPeriod = ##class(alSOH.iPeriod).GetPeriod(pdteMovement)
		if strFieldIn'="" {
			do ##class(dSOH.iPeriodBalance).UpdatePeriod(pidLocn, pidItem, idPeriod, strFieldIn, pfltQtyReceived)
		}
		if strFieldOut'="" {
			do ##class(dSOH.iPeriodBalance).UpdatePeriod(pidLocn, pidItem, idPeriod, strFieldOut, pfltQtyIssued)
		}
	}
]]></Implementation>
</Method>

<Method name="UpdatePeriod">
<Description><![CDATA[
<pre>
	Params:
		pidLocn				Site Location/Department
		pidItem				Stock Item
		pidPeriod			Statistical Period
		pstrField			Property name
		pfltQuantity		Quantity being Picked or Received
</pre>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pidLocn,pidItem,pidPeriod,pstrField,pfltQuantity</FormalSpec>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; TODO : Move to dSOH.iPeriodBalance?
	; 
	; History:
	; 27-Nov-2007	GRF		SR15615: Prototype
	; 						todo :
	; 						- verify "dSOH.PeriodBalance"
	; 						- sc?
	;-------------------------------------------------------------------------------
	set idBalanceKey = pidLocn_"||"_pidItem_"||"_pidPeriod
	set objBalance = ##class(dSOH.PeriodBalance).%OpenId(idBalanceKey)
	if objBalance'=$$$NULLOREF {
		if pstrField'="" {
			set $zobjproperty(objBalance,strField) = $zobjproperty(objBalance,strField) + pfltQuantity
			do objBalance.%Save()
		}
	}
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%New</METHOD> method to 
provide notification that a new instance of an object is being created.

<P>If this method returns an error then the object will not be created.]]></Description>
<FormalSpec>initvalue:%CacheString</FormalSpec>
<Private>1</Private>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	; Copy values over if downcasting
	if ($get(initvalue) '= "") && ($isobject(initvalue)) && initvalue.%Extends(%this.%ClassName(1)) {
		set %this.MovementTypeId = initvalue.MovementTypeId
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Validate">
<FormalSpec>pobjMovement:alDRP.dMovement</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	write !,"parent validate"
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Confirm">
<FormalSpec>pobjMovement:alDRP.dMovement</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	write !,"parent confirm"
	quit $$$OK
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>dMovementTypeState</State>
<StreamLocation>^alDRP.dMovementTypeS</StreamLocation>
<Data name="dMovementTypeState">
<Subscript>"alDRP.dMovementType"</Subscript>
<Value name="1">
<Value>MovementTypeId</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>