<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.webservice.alphalinc.ObtemUnidadesMedida">
<Description><![CDATA[Esta classe implementa todos os web services a serem utilizados pela Integração de Unidades de Medida entre Alphalinc e InfoSaúde, especificamente para o cliente Heva.]]></Description>
<ClassType/>
<Import>VAR.infra.integracao,VAR.common.soap,VAR.infra.util,alWEB.WS</Import>
<IncludeCode>INConst,VARConst,VARLog,WWWSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService</Super>

<Parameter name="NAMESPACE">
<Default>http://tempuri.org</Default>
</Parameter>

<Parameter name="SERVICENAME">
<Description><![CDATA[Name of the WebService.]]></Description>
<Default>ObtemUnidadesMedida</Default>
</Parameter>

<Parameter name="SOAPVERSION">
<Description><![CDATA[This is the SOAP version supported by the service.]]></Description>
<Default>1.1</Default>
</Parameter>

<Parameter name="MAXIMOREGISTROSPORVEZ">
<Type>%Integer</Type>
<Default>20</Default>
</Parameter>

<Method name="ObtemUnidadesMedida">
<Description><![CDATA[Método para ler as unidades de medidas . <BR>
<BR>
Parâmetros:<BR><UL>
<LI>IdInicio (obrigatório) - ID de referência para buscar as próximas unidades de medida;
</UL>
<BR>
Retorno:<BR><UL>
<LI>ResultadoUnidadeMedida - Contém uma Lista de Unidades de Medida
</UL>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,IdInicio:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>ResultadoUnidadeMedida</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	set resultado = ##class(ResultadoUnidadeMedida).%New()
 	set resultado.UnidadesMedida = ##class(%ListOfObjects).%New()

	set strStatus = ##class(Session).ValidateSession(SessionId,
		MsgSequence, .strError, , ..%ClassName()_"."_$$$MethodName)
	if ('$$$ISOK(strStatus)) set strStatus = $$$MakeStatus(strError)
 
	if ($$$ISOK(strStatus)) {
		set %("%KEY", "YBED") = "WEBSERVICE"
		set %("%KEY", "YPWD") = ""
		set %("%KEY", "YM") = 0

		$$$VAR

		set SPRACHE = "PT"

		set entidade = ##class(GerenciaFilaPendencias).%GetParameter("ENTIDADEUNIDADEMEDIDA")

		&sql(DECLARE cursorObtemUnidadesMedida CURSOR FOR
			 SELECT   VARDadoAIntegrar.ID,
			          VARDadoAIntegrar.Acao,
			          VARDadoAIntegrar.Chave1Entidade,
			          VARDadoAIntegrar.Chave2Entidade, 
			          VARDadoAIntegrar.OrdemNaFila,
			          VARDadoAIntegrar.AtualizadoEm,
			          INARTPACK.Quantity, INARTPACK.Unit
			 INTO     :idIntegracao, :acao, :chave1Entidade, :chave2Entidade, :ordemNaFila,
			 		  :atualizadoEm, :quant, :unit
			 FROM     SQLUser.VARDadoAIntegrar, SQLUser.INARTPACK
			 WHERE    VARDadoAIntegrar.Entidade = :entidade
			 AND      VARDadoAIntegrar.Chave1Entidade =* INARTPACK.ItemNo
			 AND      VARDadoAIntegrar.Chave2Entidade =* INARTPACK.OuterUnit
			 AND      VARDadoAIntegrar.Integrado = 'N'
			 ORDER BY VARDadoAIntegrar.OrdemNaFila)
		&sql(OPEN cursorObtemUnidadesMedida)
		&sql(FETCH cursorObtemUnidadesMedida)

		if ($length(IdInicio) > 0) {
			while (SQLCODE = 0) {
				if (idIntegracao = IdInicio) {
					&sql(FETCH cursorObtemUnidadesMedida)
					quit
				}

				&sql(FETCH cursorObtemUnidadesMedida)
			}
		}
	
		while (SQLCODE = 0) {
			set chave = chave1Entidade_","_chave2Entidade
			set wsUnidadeMedida = ##class(UnidadeMedida).%New()
			set objUnidadeMedida = $get(^INARTPACK(YM, chave1Entidade, chave2Entidade, 1))
			if (acao '= ##class(GerenciaFilaPendencias).%GetParameter("ACAOEXCLUIR")) {
				if ('$$IsInventoryUnit^INARTPACK(chave)) {
					set qtUnidadeReferencia = $$ConvertUOMConversionToSmallest^INUOMConversion(chave1Entidade, unit)
					if (qtUnidadeReferencia <= 0){
						set strStatus = $$$MakeStatus("Erro de conversão para unidade base Produto: "_chave1Enteidade_" Uniadade: "_unit)
						quit
					}
					set quant = quant * qtUnidadeReferencia
				}
				set wsUnidadeMedida.Quantidade		 = 1/quant
			}
			else {
				set wsUnidadeMedida.Quantidade		 = 0
			}
			
			set wsUnidadeMedida.IdIntegracao 	 = idIntegracao
			set wsUnidadeMedida.NoItem 			 = chave1Entidade
			set wsUnidadeMedida.UnidadeEntrada   = chave2Entidade
			set wsUnidadeMedida.Acao			 = acao
			set wsUnidadeMedida.UnidadeDeEstoque = $$IsInventoryUnit^INARTPACK(chave)
			set wsUnidadeMedida.UnidadeMinima 	 = $$IsBaseUnit^INARTPACK(chave)
			;set wsUnidadeMedida.Inativo 		 = $$$INARTPACKIsObsolete(objUnidadeMedida) //Desconsiderar
			set wsUnidadeMedida.Inativo 		 = 0
			set wsUnidadeMedida.TipoDispensacao  = $$$INARTPACKIssueType(objUnidadeMedida)
			set wsUnidadeMedida.UnidReferencia	 = $$GetUnitOfMeasure^INART(chave1Entidade)
			set wsUnidadeMedida.OrdemNaFila		 = $zdatetime(ordemNaFila, 3, 1)
			set wsUnidadeMedida.AtualizadoEm	 = $zdatetime(atualizadoEm, 3, 1)
			do resultado.UnidadesMedida.Insert(wsUnidadeMedida)
			if (resultado.UnidadesMedida.Count() >= ..#MAXIMOREGISTROSPORVEZ) quit

			&sql(FETCH cursorObtemUnidadesMedida)
		}

		&sql(CLOSE cursorObtemUnidadesMedida)
	    set strStatus = $$$OK
	}

    if ($$$ISOK(strStatus)) {
        set resultado.CodigoRetorno = resultado.%GetParameter("CODIGORETORNOSUCESSO")
        set resultado.MensagemErro = ""
    }
    else {
        set resultado.CodigoRetorno = resultado.%GetParameter("CODIGORETORNOERROCONHECIDO")
        set resultado.MensagemErro = $$DecodeError^COMUtilError(strStatus)
    }

 	quit resultado]]></Implementation>
</Method>

<Method name="ConfirmaIntegracao">
<Description><![CDATA[Método para confirmar uma unidade de medida integrada. <BR>
<BR>
Parâmetros:<BR><UL>
<LI>NoItem (obrigatório) - número do item da unidade de medida;
<LI>UnidadeEntrada (obrigatório) - Unidade de entrada da unidade de medida;
</UL>
<BR>
Retorno:<BR><UL>
<LI>Resultado - resultado padrão
</UL>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,AtualizadoEm:%TimeStamp,NoItem:%String,UnidadeEntrada:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>Resultado</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	set resultado = ##class(Resultado).%New()

	set strStatus = ##class(Session).ValidateSession(SessionId,
		MsgSequence, .strError, , ..%ClassName()_"."_$$$MethodName)
	if ('$$$ISOK(strStatus)) {
		set strStatus = $$$MakeStatus(strError)
	}
	if ($$$ISOK(strStatus)) {
		set %("%KEY", "YBED") = "WEBSERVICE"
		set %("%KEY", "YPWD") = ""
		set %("%KEY", "YM") = 0

		$$$VAR

		set SPRACHE = "PT"

		set strStatus = ##class(GerenciaFilaPendencias).ConfirmaIntegracao(
			##class(GerenciaFilaPendencias).%GetParameter("ENTIDADEUNIDADEMEDIDA"),
			AtualizadoEm,
			NoItem,
			UnidadeEntrada,
			##class(GerenciaFilaPendencias).%GetParameter("CHAVEVAZIA"),
			##class(GerenciaFilaPendencias).%GetParameter("CHAVEVAZIA"),
			##class(GerenciaFilaPendencias).%GetParameter("CHAVEVAZIA"))
	}

    if ($$$ISOK(strStatus)) {
        set resultado.CodigoRetorno = resultado.%GetParameter("CODIGORETORNOSUCESSO")
        set resultado.MensagemErro = ""
    }
    else {
        set resultado.CodigoRetorno = resultado.%GetParameter("CODIGORETORNOERROCONHECIDO")
        set resultado.MensagemErro = $$DecodeError^COMUtilError(strStatus)
    }

 	quit resultado]]></Implementation>
</Method>
</Class>
</Export>