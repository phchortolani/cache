<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsHL7MsgFilterForm">
<Description><![CDATA[
An autoform for gathering VDoc Message Filter info and storing and transmitting it]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>CSPX.EnsMsgFilterForm</Super>
<System>3</System>

<Method name="CreateInstance">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;pID:%String</FormalSpec>
<ReturnType>%CSP.Util.AutoForm</ReturnType>
<Implementation><![CDATA[
#define SetPropVal(%prop)		Set tObj.%prop=..%prop##expression("DisplayToLogical")($G(%request.Data("%prop",1)))
#define SetSesPropVal(%prop)	Set tObj.%prop=..%prop##expression("DisplayToLogical")($G(%session.Data("EnsMsgFilterForm","%prop",1)))

	Set:+$G(pID(1))=$G(pID(1)) pId(1)=""
	Set tObj = ..%New()
	Set tObj.TermsStr="" ; force because of system bug

	#; Set values from Session for the ones we want to persist
	If $D(%request.Data("$CLASS",1)) { // We are in the Form submit, not the page/pane/form redraw
		If '$D(%request.Data("$AUTOFORM_RESET",1)) && '$D(%request.Data("$AUTOFORM_OPEN",1)) {
			If $D(%request.Data("MaxRows",1)) {
				$$$SetPropVal(Status)
				$$$SetPropVal(StartTime)
				$$$SetPropVal(EndTime)
				$$$SetPropVal(StartId)
				$$$SetPropVal(EndId)

				$$$SetPropVal(Type)
				$$$SetPropVal(Source)
				$$$SetPropVal(IsError)
				$$$SetPropVal(MaxRows)
				$$$SetPropVal(SortOrder)
				$$$SetPropVal(TimeFormat)
				$$$SetPropVal(ColorBy)
				$$$SetPropVal(TermsStr)

				Set:""'=tObj.TermsStr sc=tObj.%Terms.Clear(), tSC=##class(Ens.Util.XML.Reader).ObjectsFromString(tObj.%Terms,tObj.TermsStr,"EnsPortal.MsgFilter.Term")
			}
		}
	} Else { // We are in a redraw not a submit
		If $D(%request.Data("Status",1))
		|| $D(%request.Data("StartTime",1))
		|| $D(%request.Data("EndTime",1))
		|| $D(%request.Data("StartId",1))
		|| $D(%request.Data("EndId",1)) {
			$$$SetPropVal(Status)
			$$$SetPropVal(StartTime)
			$$$SetPropVal(EndTime)
			$$$SetPropVal(StartId)
			$$$SetPropVal(EndId)
		}
	 	If $D(%session.Data("EnsMsgFilterForm")) {
			Do ..cleanReqData(1) ; prevent the framework from messing with the values we put in.
			$$$SetSesPropVal(Type)
			$$$SetSesPropVal(Source)
			$$$SetSesPropVal(IsError)
			$$$SetSesPropVal(MaxRows)
			$$$SetSesPropVal(SortOrder)
			$$$SetSesPropVal(TimeFormat)
			$$$SetSesPropVal(ColorBy)
			$$$SetSesPropVal(TermsStr)
	 	}
	 	ElseIf $D(%request.Data("MaxRows",1)) {
			$$$SetPropVal(Type)
			$$$SetPropVal(Source)
			$$$SetPropVal(IsError)
			$$$SetPropVal(MaxRows)
			$$$SetPropVal(SortOrder)
			$$$SetPropVal(TimeFormat)
			$$$SetPropVal(ColorBy)
			$$$SetPropVal(TermsStr)
	 	}
		Set:""'=tObj.TermsStr sc=tObj.%Terms.Clear(), tSC=##class(Ens.Util.XML.Reader).ObjectsFromString(tObj.%Terms,tObj.TermsStr,"EnsPortal.MsgFilter.Term")
	}

	Set:""=tObj.Type tObj.Type=3
	Set:""=tObj.SortOrder tObj.SortOrder=2
	Set:""=tObj.TimeFormat tObj.TimeFormat=12
	Set:+tObj.MaxRows<=0 tObj.MaxRows=100
	Quit tObj
]]></Implementation>
</Method>

<Method name="OnSubmit">
<FormalSpec>&amp;pID:%String,pSubmit:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define GetPropVal(%prop) Set ..%prop=$ZStrip(..%prop,"<>W") Set %response.Context("%prop")=..%prop##expression("LogicalToDisplay")(..%prop), %session.Data("EnsMsgFilterForm","%prop",1)=%response.Context("%prop")

	// set parm to make query run
	Set %response.Context("$EXEC") = 1

	If (pSubmit = "$AUTOFORM_RESET") {
		// get default values & submit those
		Do ..cleanReqData() ; prevent the framework from messing with the values we put in.
		Kill pID  Set tObj=..CreateInstance(.pID)
		Quit tObj.OnSubmit(.pID, "$AUTOFORM_SEARCH")
	} Else { Set tSC=$$$OK }
	Do:$$$ISERR(tSC) $system.Status.DisplayError(tSC)

	$$$GetPropVal(Status)
	$$$GetPropVal(StartId)
	$$$GetPropVal(EndId)
	$$$GetPropVal(StartTime)
	$$$GetPropVal(EndTime)
	
	$$$GetPropVal(Type)
	$$$GetPropVal(Source)
	$$$GetPropVal(IsError)
	$$$GetPropVal(MaxRows)
	$$$GetPropVal(SortOrder)
	$$$GetPropVal(TimeFormat)
	$$$GetPropVal(ColorBy)
	$$$GetPropVal(TermsStr)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="cleanReqData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pContextOnly:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
#define CleanVal(%prop)		Kill %request.Data("%prop",1)

	If 'pContextOnly {
		$$$CleanVal(Status)
		$$$CleanVal(StartTime)
		$$$CleanVal(EndTime)
		$$$CleanVal(StartId)
		$$$CleanVal(EndId)
	}
	$$$CleanVal(Type)
	$$$CleanVal(Source)
	$$$CleanVal(IsError)
	$$$CleanVal(MaxRows)
	$$$CleanVal(SortOrder)
	$$$CleanVal(TimeFormat)
	$$$CleanVal(ColorBy)
	$$$CleanVal(TermsStr)
]]></Implementation>
</Method>

<Method name="OnDefineButtons">
<Description><![CDATA[
define buttons]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;pButtons:%CSP.Util.FormButton</FormalSpec>
<Implementation><![CDATA[
	&html<<div id="filter_name" align="left">filter name</div>>
	
	Set pButtons(1) = ##class(%CSP.Util.FormButton).%New()
	Set pButtons(1).Name = "$AUTOFORM_SEARCH"
	Set pButtons(1).Caption = $$$Text("Search","Ensemble")
	Set pButtons(1).OnClick = "filterSearch(this);"

	Set pButtons(2) = ##class(%CSP.Util.FormButton).%New()
	Set pButtons(2).Name = "$AUTOFORM_RESET"
	Set pButtons(2).Caption = $$$Text("Reset","Ensemble")
	Set pButtons(2).OnClick = "filterReset(this);"

	Set pButtons(3) = ##class(%CSP.Util.FormButton).%New()
	Set pButtons(3).Name = "$AUTOFORM_ShowDups"
	Set pButtons(3).Caption = $$$Text("Show Dups","Ensemble")
	//Set pButtons(3).Title = $$$Text("Show Duplicate ControlID messages","Ensemble")
	Set pButtons(3).OnClick = "showDups(this);"

	Set pButtons(4) = ##class(%CSP.Util.FormButton).%New()
	Set pButtons(4).Name = "$AUTOFORM_ShowGaps"
	Set pButtons(4).Caption = $$$Text("Show Gaps","Ensemble")
	//Set pButtons(4).Title = $$$Text("Show messages before and after a message gap","Ensemble")
	Set pButtons(4).OnClick = "showGaps(this);"

	Set pButtons(5) = ##class(%CSP.Util.FormButton).%New()
	Set pButtons(5).Name = "$AUTOFORM_ShowLates"
	Set pButtons(5).Caption = $$$Text("Show Lates","Ensemble")
	//Set pButtons(5).Title = $$$Text("Show messages that arrived out of sequence too late","Ensemble")
	Set pButtons(5).OnClick = "showLates(this);"
]]></Implementation>
</Method>

<Method name="NextTerm">
<Description><![CDATA[
Find the next valid term in the terms list, skipping over adjacent OR's and leading or trailing OR's]]></Description>
<FormalSpec>&amp;iTerm</FormalSpec>
<ReturnType>EnsPortal.MsgFilter.Term</ReturnType>
<Implementation><![CDATA[
	Set tPrev=$$$NULLOREF, tCount=..%Terms.Count(), tFirstIter=(iTerm>1), tFirstCall='tFirstIter, iTerm=iTerm-1
	For { Set iTerm=iTerm+1  Quit:iTerm>tCount  Set tTerm=..%Terms.GetAt(iTerm)  Continue:'$IsObject(tTerm)
		If '(tFirstIter||tTerm.IsValid()) { Set tTerm=$$$NULLOREF }
		ElseIf '$IsObject(tPrev) { Set tPrev=tTerm, tTerm=$$$NULLOREF }
		ElseIf tPrev.Type="OR" && (tTerm.Type="OR" || tFirstCall) { Set tPrev=tTerm, tTerm=$$$NULLOREF }
		Else { Quit }
		Set tFirstIter=0 ; we have already checked iTerm.IsValid() for the first one incoming, except for the very first time.
	}
	Quit:'$IsObject(tPrev) $$$NULLOREF
	Quit:tPrev.Type="OR"&&'$IsObject(tTerm) $$$NULLOREF
	Quit tPrev
]]></Implementation>
</Method>

<Method name="DrawHEADExtra">
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Merge tID = pInstance.IDValues
	Set tVDocClass = $G(%request.Data("VDOCCLASS",1),"EnsLib.HL7.Message")
	Set tVDocName = $G(%request.Data("DOCNAME",1),"HL7")
	Set tSearchTableClass = $G(%request.Data("SEARCHTBL",1),"EnsLib.HL7.SearchTable")

	Set tDefTermType = $G(%session.Data("DEFTYPE",1),tVDocName_" SearchTable Field")
	Set tDefClass = $G(%session.Data("DEFCLASS",1),$Case(tDefTermType,tVDocName_" SearchTable Field":tSearchTableClass, :tVDocClass))
	Set tDefProp = $G(%session.Data("DEFPROP",1))

	Set tError = $G(%request.Data("ERROR",1))
	Set tIsError = (tError '= "")
	Set sError = $$$EnsMsgError
	Set tStatus = $S(tIsError:sError, 1:$$$EnsMsgOk)

	Do ..Styles()
	Do ..JavaScript1(tVDocName)
	Do ..JavaScript2(tDefTermType,tDefClass,tDefProp,tVDocName,tVDocClass,tSearchTableClass)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawHTMLExtra">
<FormalSpec>&amp;pID:%String,pActionURL:%String="&quot;,&amp;pButtons:FormButton,pTarget:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set tTermSetSet="",tMsgFilter="",tIsError=0
	Set tVDocName = $G(%request.Data("DOCNAME",1),"HL7")
	Set tSearchTableClass = $G(%request.Data("SEARCHTBL",1),"EnsLib.HL7.SearchTable")
	Set tMsgFilterName = $G(%request.Data("$ID1",1))
	Set tMsgFilter = $$$NULLOREF
	Set tIsNew = 0

	If ('$IsObject(tMsgFilter)) {
		Set tMsgFilter = ..ProcessSubmit(%request, .pID) ; new
		Set tMsgFilter.%Name="", tMsgFilterName=""
		Set tStatus = $S(tIsError:sError, 1:$$$LocalizeText("Ensemble","NewMsgFilter","New MsgFilter"))
		Set tIsNew = 1, tMsgFilterName=""
	}
	Set sFilterName = $$$LocalizeText("TermEditor","sFilterName","Message Filter Name:")
	Set sTermsDesc = $$$LocalizeText("TermEditor","sTermsDesc","Detailed filter terms:")
	Set sTermsNone = $$$LocalizeText("TermEditor","sTermsNone","No detailed filter terms found")

 &html<
 	<tr><td COLSPAN="10" ><hr>

<table border="0" class="LayoutMain" width="100%" height="100%" cellpadding="0" cellspacing="0">

<tr height="100%">
<td width="80%">

<!-- theForm used to submit changes -->
<input type="hidden" name="theButton" value="">
<input type="hidden" name="TermsStr" value="">
> If $C(0)=$G(%request.Data("$ID1",1),$C(0)) {
  &html<<input type="hidden" name="$ID1" value="">>
} &html<

<div style="margin-left:3%;margin-right:3%;" >
<div class="text1">#(sTermsDesc)#</div>

<!-- details for term -->
>
 If tIsError { &html<
<div style="color:red;"><csp:text Domain="TermEditor" TextId="ErrorSave">An error ocurred while saving this TermList:</csp:text>
<pre style="background:white; border: 1px solid gray;">
<script language="Cache" runat="server">
	Do $system.Status.DisplayError(tError)
</script>
</pre>
<hr>
</div>
> }

 &html<
<div id="table"><b>#(sTermsNone)#</b></div>

</table>
</div>

</td></tr></table>
>
 Do ..jsGenerate(tMsgFilter,tVDocName,tSearchTableClass)

 &html<
<script language="javascript">
	var div = self.document.getElementById("filter_name");
	div.change=NameChange;
	div.setAttrFromPopup = setAttrFromPopup;
	div.innerHTML = (''=='#(tMsgFilterName)#') ? '' : '#(sFilterName)#<b>#(tMsgFilterName)#</b><hr>';
	createTermList();
</script>
>
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="JavaScript1">
<ClassMethod>1</ClassMethod>
<FormalSpec>tVDocName</FormalSpec>
<Implementation><![CDATA[
	Set msgRemoveTermPrompt = $$$LocalizeText("TermEditor","msgRemoveTermPrompt","Do you wish to remove this term?")
	Set msgRemoveCondPrompt = $$$LocalizeText("TermEditor","msgRemoveCondPrompt","Do you wish to remove this condition?")
	Set msgResetPrompt = $$$LocalizeText("TermEditor","msgResetPrompt","Reset to default values?")
 	Set msgFilterNameExists = $$$LocalizeText("TermEditor","msgFilterNameExists","Overwrite? The name is already in use:")
 /*
	Set msgList = $$$LocalizeText("TermEditor","msgList","Return to list of terms")
	Set msgListCmd = $$$LocalizeText("TermEditor","msgListCmd","Term List")

	Set msgfilterReset = $$$LocalizeText("TermEditor","msgfilterReset","Revert to last saved version.")
	Set msgRevertCmd = $$$LocalizeText("TermEditor","msgRevertCmd","Revert")

	Set msgFilterSave = $$$LocalizeText("TermEditor","msgFilterSave","Save this set of filter terms")
	Set msgSaveCmd = $$$LocalizeText("TermEditor","msgSaveCmd","Save")

	Set msgFilterOpen = $$$LocalizeText("TermEditor","msgFilterOpen","Delete this TermList")
	Set msgOpenCmd = $$$LocalizeText("TermEditor","msgOpenCmd","Delete")

	Set msgSummaryDesc = $$$LocalizeText("TermEditor","msgSummaryDesc2R","Use the following table to view and edit the summary information for this Message Routing Term.")
 */
	Do js1
	Quit
js1
	&html<
<script language="JavaScript">

function escHTML(val)
{
	return escXML(val);
}

// quote any special xml characters within text
function escXML(text)
{
	var out = '';
	
	// don't escape numbers
	if (text == (text * 1)) {
		return text;
	}
	// skip null values
	if (text == null || text == '') {
		return '';
	}
	// escape special characters
	for (var p = 0; p < text.length; p++) {
		var ch = text.charAt(p);
		switch (ch) {
		case '&':
			out += '&amp;';
			break;
		case '<':
			out += '&lt;';
			break;
		case '>':
			out += '&gt;';
			break;
		case '"':
			out += '&quot;';
			break;
		default:
			out += ch;
			break;
		}
	}
	return out;
}

// commands

var isModified = false;
var vdocName = '#(tVDocName)#';

function setModified(flag)
{
	if (!isModified == !flag) {
		return;
	}
	isModified = flag;
	self.document.getElementById('$AUTOFORM_RESET').disabled = !flag;
}

function addTerm()
{
	var nterm = termList.terms['new'];

	if ('OR' == nterm.termType) {
		if (!termList.terms.length) { alert('An OR cannot be inserted as the only search condition'); return false; }
	} else {
		if ('Header Field' != nterm.termType) {
			if (nterm.sourceClass == '') { alert('Please select a class before adding the search term'); return false; }
		}
		if (nterm.conditions[0].Prop == '') { alert('Please select a property before adding the search term'); return false; }
	}
	termList.addTerm(nterm);
	nterm = new Term(defTermType,defClass);  termList.terms['new'] = nterm;
	addCondition('new');
	//!!! self.document.theForm['Type_'+termList.terms.length-1].change();
}

function addCondition(tno)
{
	var term = termList.terms[tno];
	var join = (!term.conditions || 0==term.conditions.length) ? 'IF' : (1==(term.conditions.length) ? 'AND' : term.conditions[term.conditions.length-1].join);
	term.addCondition(new Condition(join,defProp,'=',''));
	termList.renderHTML();
	setModified(true);
}

function removeTerm(id)
{
	var term = termList.terms[id];
	if (confirm('#(msgRemoveTermPrompt)#')) {
		termList.terms.splice(id,1);
		termList.renderHTML();
		setModified(true);
	}
	return true;
}	

function removeCondition(tno,cno)
{
	var term = termList.terms[tno];
	var cond = term.conditions[cno];
	if (confirm('#(msgRemoveCondPrompt)#')) {
		term.conditions.splice(cno,1);
		termList.renderHTML();
		setModified(true);
	}
	return true;
}

function moveTermUp(id)
{
	if (id > 0) {
		var term1 = termList.terms[id-1];
		var term2 = termList.terms[id];
		termList.terms[id-1] = term2;
		termList.terms[id] = term1;
		termList.renderHTML();
		setModified(true);
	}
	return true;
}

function moveTermDown(id)
{
	if (id < termList.terms.length - 1) {
		var term1 = termList.terms[id+1];
		var term2 = termList.terms[id];
		termList.terms[id+1] = term2;
		termList.terms[id] = term1;
		termList.renderHTML();
		setModified(true);
	}
	return true;
}

function filterSearch(btn)
{
	var form = self.document.theForm;
	form.TermsStr.value = termList.serialize();
	form.theButton.value = btn.value,  form.theButton.name = btn.name; // use theButton dummy to simulate the non-javascript button submission form variable
	form.submit();
	return true;
}

function filterReset(btn)
{
	if (confirm('#(msgResetPrompt)#')) {
		var form = self.document.theForm;
		form.TermsStr.value = termList.serialize();
		form.theButton.value = btn.value,  form.theButton.name = btn.name; // use theButton dummy to simulate the non-javascript button submission form variable
		form.$ID1.value='';
		form.submit();
		return true;
	}
	return false;
}

function showLates(btn)
{
	var form = self.document.theForm;
	form.TermsStr.value = termList.serialize();
	form.theButton.value = btn.value,  form.theButton.name = btn.name; // use theButton dummy to simulate the non-javascript button submission form variable
	form.submit();
	return true;
}

function showDups(btn)
{
	var form = self.document.theForm;
	form.TermsStr.value = termList.serialize();
	form.theButton.value = btn.value,  form.theButton.name = btn.name; // use theButton dummy to simulate the non-javascript button submission form variable
	form.submit();
	return true;
}

function showGaps(btn)
{
	var form = self.document.theForm;
	form.TermsStr.value = termList.serialize();
	form.theButton.value = btn.value,  form.theButton.name = btn.name; // use theButton dummy to simulate the non-javascript button submission form variable
	form.submit();
	return true;
}

</script>
 >
 Quit
]]></Implementation>
</Method>

<Method name="JavaScript2">
<ClassMethod>1</ClassMethod>
<FormalSpec>tDefTermType,tDefClass,tDefProp,tVDocName,tVDocClass,tSearchTableClass</FormalSpec>
<Implementation><![CDATA[
	//Set msgRemoveCmd = "&#9587;"
	Set msgRemoveCmd = "X"

	Set msgNewTerm = $$$LocalizeText("TermEditor","msgNewTerm","Add a new term")
	Set msgEnable = $$$LocalizeText("TermEditor","msgEnable","Enable or disable this term")
	Set msgNewCond = $$$LocalizeText("TermEditor","msgNewCond","Add a new condition")

	Set msgDelTerm = $$$LocalizeText("TermEditor","msgDelTerm","Delete this term")
	Set msgDelCond = $$$LocalizeText("TermEditor","msgDelCond","Delete this condition")
	Set msgEditOp = $$$LocalizeText("TermEditor","msgEditOp","Edit this value")
	Set msgNewCmd = $$$LocalizeText("TermEditor","msgNewCmd","Add")
	Set msgEditCmd = "..."
	Set msgUpCmd = "&#9650;"
	Set msgDownCmd = "&#9660;"

	Set msgUpTerm = $$$LocalizeText("TermEditor","msgUpTerm","Move this term up one position")
	Set msgDownTerm = $$$LocalizeText("TermEditor","msgDownTerm","Move this term down one position")

	Set sFilterName = $$$LocalizeText("TermEditor","sFilterName","Message Filter Name:")
	Set sTermType = $$$LocalizeText("TermEditor","sTermType","Type")
	Set sConditions = $$$LocalizeText("TermEditor","sConditions","Conditions")
	Set sDeleting = $$$LocalizeText("Ensemble","sDeleting","Deleting...")
	Set sModified = $$$LocalizeText("TermEditor","sModified","Modified")
	Set sSaving = $$$LocalizeText("TermEditor","sSaving","Saving...")
	Do js2
	Do js3
	Do js4
	Quit
js2
 &html<
<script language="JavaScript">

function setAttrFromPopup(mode, value)
{
	this.value = value;
	//this.change(mode);
}

function onChangeCtrlValue(ctrlid)
{
	// if value is '', then mark as default
	var ctrl = self.document.theForm[ctrlid];
	if (ctrl) {
		if ('' == ctrl.value) {
			ctrl.className = 'defaultValue';
		}
		else {
			ctrl.className = '';
		}
	}
}

// display the operand editor popup
// *ctrlid* is id of input control
function editValue(ctrlid)
{
	var ctrl = self.document.theForm[ctrlid];
	var id = ctrl.id.split("_");
	var termid = id[1];
	var term = termList.terms[termid];
	var oterm = originalTermList.terms[termid];
	var cond = term.conditions[('new'==termid) ? 0 : id[2]];
	var ocond = (oterm ? oterm.conditions[('new'==termid) ? 0 : id[2]] : null);
	var escval = escape(ctrl.value);  escval = escval.replace(/\+/g,"%2B"); // extra escape for "+" to avoid IE bugs!
	ctrl.edit(escval, id, term, oterm, cond, ocond);
}

function showPopup(ctrl, mode, dochange, escval, escclass, escdoctype)
{
	var pval = ctrl.value;
	var url = 'UtilEnsRoutingRuleList.csp?&MODE=' + escape(mode) +
  				'&VALUE=' + escval +
  				'&MSGCLASS=' + escclass +
  				'&DOCTYPE=' + ((escdoctype) ? escdoctype : '') +
  				'&MULTISELECT=0';
	var sFeatures="dialogHeight: 450px; dialogWidth: 600px; dialogTop: " + event.clientY + "px; dialogLeft: " + event.clientX + "px; edge: Sunken; center: Yes; help: No; resizable: Yes; status: No;";

	self.showModalDialog(url, ctrl, sFeatures);  // use IE Modal Dlg.
	var nval = ctrl.value;
	if (nval != pval) {
		if (dochange) ctrl.change(mode);
		return true;
	}
	return false;
}

function popupName()
{
	var div = self.document.getElementById("filter_name");
	var name = div.innerHTML;
	name=name.split('B>')[1];
	if (name) name=name.split('</')[0];
	div.value=(name) ? name : '';
	showPopup(div,'instance',true,escape(div.value),"CSPX.EnsMsgFilterForm");
	return div.value;
}

function ClassEdit(escval, id, term, oterm, cond, ocond)
{
	var termType = term.termType
	var mode = (vdocName+' Document Property' == termType) ? 'msgClass' : (vdocName+' SearchTable Field' == termType) ? 'searchtableClass' : 'vdocClass';
	showPopup(this,mode,true,escval,escval);
}

function PropEdit(escval, id, term, oterm, cond, ocond)
{
	var term = termList.terms[id[1]];
	var sclass = ('Header Field' == term.termType) ? 'Ens.MessageHeader' : term.sourceClass;
	if ('' == sclass) {
		alert('Please select a class to choose a property from');
		return;
	}
	var termType = term.termType.replace(vdocName,'VDoc');
	var mode = 'objProp';
	switch (termType) {
	case 'VDoc SearchTable Field':
		mode='searchProp';
		// no break;
	default:
		return showPopup(this,mode,true,escval,escape(sclass));

	case 'VDoc Segment Field':
		mode='vdocSegField';
		// special double popup for Segment Find paths
		var val = this.value;
		var segCat = ':';
		var segField = val;
		var pstart = val.indexOf(':{');
		var pstart2 = val.indexOf(':[');
		if (pstart2 >= 0 && pstart2 < pstart) pstart=pstart2
	  //alert('!!!val='+val+', pstart='+pstart+', char at Len-1='+val.charAt(val.length-1)+', segCat='+segCat+', segField='+segField);
		if (-1 != pstart) {
			segCat = val.substring(0,pstart+1);
			segField = '[' + val.substring(pstart+2);
		} else if (':' == val.charAt(val.length-1)) {
			segCat = val; segField = '';
		}
		if ('[' == segField.charAt(0)) {
			if (']' == segField.charAt(segField.length-1) || '}' == segField.charAt(segField.length-1)) {
				segField = segField.substring(1,segField.length-1);
			} else { segField = segField.substring(1); }
		}
		var sf=segField.split(':');
		var segName = sf[0];
		var fieldName = (sf[1] ? sf[1] : '');
		var escSegType = escape(segCat + segName);
		if ('' == segName) {
			alert("Please use the following menu to select a Segment Type before selecting a segment field")
			this.value = segCat + segName;
			if (showPopup(this,'vdocSegType',false,escSegType,escape(sclass),escSegType)) {
				var sf=this.value.split(':');
				segCat = sf[0] + ':';
				segName = sf[1].split("  (")[0];
				val = segCat + ((segName == '') ? '' : '[' + segName + ":" + fieldName + ']');
			} else {
				this.value = val;
				return false;
			}
		}
		if (segCat.length <= 1) {
			alert('You must specify a segment Category before you can browse for a segment field path');
			this.value = val;
			return false;
		}
		escSegType = escape(segCat + segName);
		this.value = ((segName == '') ? '' : segName + ":" + fieldName);
		if (showPopup(this,mode,false,escape(this.value),escape(sclass),escSegType)) {
			var sf=this.value.split(':');
			var segName = sf[0];
			var fieldName = sf[1];
			this.value = segCat + ((segName == ':') ? '' : '[' + segName + ":" + fieldName + ']');
			if (this.value != pval) this.change(mode);
			return true;
		} else {
			this.value = val;
			return false;
		}
		break;

	case 'VDoc Property Path':
		mode='vdocPropPath';
		// special double popup for virtual property paths
		var val = this.value, pval = val;
		var docType = ':';
		var propPath = val;
		var pstart = val.indexOf(':{');
	  //alert('!!!val='+val+', pstart='+pstart+', char at Len-1='+val.charAt(val.length-1)+', docType='+docType+', propPath='+propPath);
		if (-1 != pstart) {
			docType = val.substring(0,pstart+1);
			propPath = val.substring(pstart+1);
		} else if (':' == val.charAt(val.length-1)) {
			docType = val; propPath = '';
		}
		if ('{' == propPath.charAt(0)) {
			if ('}' == propPath.charAt(propPath.length-1)) { propPath = propPath.substring(1,propPath.length-1); }
			else { propPath = propPath.substring(1); }
		}
	  //alert('!!!2val='+val+', pstart='+pstart+', char at Len-1='+val.charAt(val.length-1)+', docType='+docType+', propPath='+propPath);
		if (':' == docType) {
			alert("Please use the following menu to select a DocType before selecting a virtual property path")
			this.value='';
			if (showPopup(this,'vdocType',false,escape(this.value),escape(sclass))) {
				docType = ((this.value.length) ? this.value + ':' : '');
				val = docType + ((propPath.length) ? '{' + propPath + '}' : '');
			} else {
				this.value = val;
				return false;
			}
		}
		if (docType.length <= 1) {
			alert('You must specify a DocType before you can browse for a virtual property path');
			this.value = val;
			return false;
		}
		var escdoctype = escape(docType.substring(0,docType.length-1));
		this.value = propPath;
	 	if (showPopup(this,mode,false,escape(propPath),escape(sclass),escdoctype)) {
			propPath = this.value;
			this.value = docType + ((propPath.length) ? '{' + propPath + '}' : '');
			if (this.value != pval) this.change(mode);
			return true;
		} else {
			this.value = val;
			return false;
		}
		break;
	}
}

/// Return value for named term attribute in specified term
function getTermAttr(termId,attr)
{
	var term = termList.terms[termId];
	return term[attr];
}

// ---
// events

function keyup(ctrl)
{
	ctrl.change();
}

function NameChange(mode)
{
	termList.Name = this.value;
	this.innerHTML = (''==this.value) ? '' : '#(sFilterName)#<b>'+this.value+'</b><hr>';
	this.value
}

function TypeChange(mode)
{
	var id = this.id.split("_");
	var oterm = originalTermList.terms[id[1]];
	var term = termList.terms[id[1]];
	var pval=term.termType;
	if (this.value == pval) return;
	term.termType = this.value;
	var isOR = (this.value == 'OR');
	var isHeaderOR = (this.value == 'Header Field') || isOR;
	term.sourceClass = ((isHeaderOR) ? '' : ((this.value == vdocName+' SearchTable Field') ? '#(tSearchTableClass)#' : '#(tVDocClass)#'))

	if (isHeaderOR || pval == 'Header Field' || pval == 'OR') {
		if (isOR || pval == 'OR') {
			for (c in term.conditions) {
				var cond = term.conditions[c];
				var idc = (id[1] == 'new') ? '' : '_' + c;
				var ctrl;
				ctrl = self.document.theForm['Prop_' + id[1] + idc];
				ctrl.value = isOR ? '----' : cond.Prop;
				ctrl.disabled = isOR;
				ctrl = self.document.theForm['PropEdit_' + id[1] + idc];
				ctrl.disabled = isOR;

				ctrl = self.document.theForm['Op_' + id[1] + idc];
				ctrl.value = isOR ? '' : cond.Op;
				ctrl.disabled = isOR;
	
				ctrl = self.document.theForm['OpVal_' + id[1] + idc];
				ctrl.value = isOR ? '----' : cond.OpVal;
				ctrl.disabled = isOR;
			}
		}
	}
	if (oterm && this.value == oterm.termType) {
		this.className = "";
	} else {
		//this.className = "Modified";
	}
	setModified('new' != id[1]);
}

function PropChange(mode)
{
	var id = this.id.split("_");
	var oterm = originalTermList.terms[id[1]];
	var term = termList.terms[id[1]];
	var cno = id[2];
	if ('new' == id[1]) cno = 0;
	var cond = term.conditions[cno];
	var ocond = (oterm ? oterm.conditions[cno] : null);
	var pval=cond.Prop;
	if (this.value == pval) return;
	cond.Prop = this.value;

	if (ocond && this.value == ocond.Prop) {
		this.className = "";
	} else {
		this.className = "Modified";
	}
	setModified(true);
	return 1;
}

function OpChange(mode)
{
	var id = this.id.split("_");
	var oterm = originalTermList.terms[id[1]];
	var term = termList.terms[id[1]];
	var cno = id[2];
	if ('new' == id[1]) cno = 0;
	var cond = term.conditions[cno];
	var ocond = (oterm ? oterm.conditions[cno] : null);
	var pval=cond.Op;
	if (this.value == pval) return;
	cond.Op = this.value;

	if (ocond && this.value == ocond.Op) {
		this.className = "";
	} else {
		this.className = "Modified";
	}
	setModified(true);
	return 1;
}

function OpValChange(mode)
{
	var id = this.id.split("_");
	var oterm = originalTermList.terms[id[1]];
	var term = termList.terms[id[1]];
	var cno = id[2];
	if ('new' == id[1]) cno = 0;
	var cond = term.conditions[cno];
	var ocond = (oterm ? oterm.conditions[cno] : null);
	var pval=cond.OpVal;
	if (this.value == pval) return;
	cond.OpVal = this.value;

	if (ocond && this.value == ocond.OpVal) {
		this.className = "";
	} else {
		this.className = "Modified";
	}
	setModified(true);
	return 1;
}

function JoinChange(mode)
{
	var id = this.id.split("_");
	var oterm = originalTermList.terms[id[1]];
	var term = termList.terms[id[1]];
	var cond = term.conditions[id[2]];
	var ocond = (oterm ? oterm.conditions[id[2]] : null);
	var pval=cond.join;
	if (this.options[this.selectedIndex].value == pval) return;
	cond.join = this.options[this.selectedIndex].value;

	if (ocond && cond.join == ocond.join) {
		this.className = "";
	} else {
		this.className = "Modified";
	}
	setModified(true);
	return 1;
}

function enableTerm(ctrl,val)
{
	ctrl.className = "Modified";
	var id = ctrl.id.split("_");
	var term = termList.terms[id[1]];
	term.disabled = !val;
	
	// update table
	var tr = self.document.getElementById('row_' + id[1]);
	if (term.disabled) {
		tr.className = 'DisabledRow';
	} else {
		tr.className = id[1]%2 ? 'OddRow' : 'EvenRow';
	}
	setModified(true);
}
</script>
 >
 Quit
 
js3
 &html<
<script language="JavaScript">

var termList = null;
var originalTermList = null;
var defTermType = #(##class(%CSP.Page).QuoteJS(tDefTermType))#;
var defClass = #(##class(%CSP.Page).QuoteJS(tDefClass))#;
var defProp = #(##class(%CSP.Page).QuoteJS(tDefProp))#;

/// client-side terms objects

function TermList(name,desc,newCond)
{
	this.terms = new Array();
	this.name = name;
	this.description = desc;
	this.PropError = '';
	this.OpValError = '';

	// methods
	this.addTerm = TermList_addTerm;
	this.renderHTML = TermList_renderHTML;
	this.initMethods = TermList_initMethods;
	this.serialize = TermList_serialize;
	this.clone = TermList_clone;
	this.setAttrFromPopup = setAttrFromPopup;

	if (newCond) {
		var cond = new Condition('',defProp,'=','');
		var term = new Term(defTermType,defClass);
		term.conditions[0] = cond;
		this.terms['new'] = term;
	}
}

function TermList_clone()
{
	var clone = new TermList(this.name, this.description,false);
	for (var t in this.terms) {
		clone.terms[t] = this.terms[t].clone();
	}
	return clone;
}

function TermList_serialize()
{
	var s = '';
	s += '<termList name="' + escXML(this.name) + '"';
	//s += ' xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"';
	s += '>\n';
	if (this.description && this.description != '') {
		s += '<description>' + escXML(this.description) + '</description>\n';
	}
	for (var r = 0; r < this.terms.length; r++) {
		s += this.terms[r].serialize();
	}
	s += this.terms['new'].serialize();
	s += '</termList>';
	return s;
}

function TermList_renderHTML()
{
	var div = self.document.getElementById("table");
	if (!div) {
		return;
	}
	var html = '';
	html += '<table class="Terms" border="0" cellpadding="0" cellspacing="0">';
	html += '<tr><th>&nbsp;</th><th>#(sTermType)#</th><th>#(sConditions)#</th></tr>';
	
	for (var t=0; t<this.terms.length; t++) {
		html += '<tr id="row_' + t +'" class="' + (this.terms[t].disabled ? 'DisabledRow' : (t%2==0 ? 'EvenRow' : 'OddRow')) + '">';
		html += this.terms[t].renderHTML(t);
		html += '</tr>';
	}

	// Add-criterion-term values row
	html += '<tr class="TemplateRow">';
	html += '<td><input title="#(msgNewTerm)#" type="button" class="EditButton" onclick="addTerm();" value="#(msgNewCmd)#"></td>';
	
	var nterm=this.terms['new'];
	html += '<td>&nbsp;<select id="Type_new" onchange="this.change();">' + getTermTypeOptions(nterm.termType) + '</select>&nbsp;</td>';

	// condition column
	html += '<td valign="top"><table class="Conditions" width="100%" border="0" cellpadding="0" cellspacing="0">';
		html += '<td align=left><div id="IF_new">&nbsp;<font size=2>IF</font>&nbsp;</div></td>';
		var cond=nterm.conditions[0]
		if ('OR' != nterm.TermType) {
			tDef = escHTML(cond.Prop);
			tDefOp = escHTML(cond.Op);
			tDefOpVal = escHTML(cond.OpVal);
			tDis = '';
		} else {
			tDef = '----';
			tDefOp = '';
			tDefOpVal = '----';
			tDis = 'disabled ';
		}
		html += '<td nowrap>&nbsp;<input type="text" size="30" ' + tDis + 'id="Prop_new" value="' + tDef + '" onkeyup="keyup(this);">';
			html += '<input class="EditButton" id="PropEdit_new" type="button" value="#(msgEditCmd)#" ' + tDis + 'title="#(msgEditOp)#" onclick="editValue(\'Prop_new\');">&nbsp;</td>';
		html += '<td nowrap>&nbsp;<select id="Op_new" ' + tDis + 'value="' + tDefOp + '" onchange="this.change();">' + getOperatorOptions(cond.Op) + '</select>&nbsp;</td>';
		html += '<td nowrap align="left">';
			html += '<input type="text" size="16" ' + tDis + ((this.OpValError!='') ? 'class="Error" title="' + this.OpValError + '"' : '') + ' id="OpVal_new" value="' + tDefOpVal + '" onchange="this.change();" onkeyup="keyup(this);">';
		html += '</td>';

	html += '</table></td>';
	html += '</tr></table>';
	//alert('!!! '+html);
 	div.innerHTML = html;
	termList.initMethods();
	return html;
}

function TermList_initMethods()
{
	// do 'new' ctls
	var form = self.document.theForm;
	var id0  = new Array('Type','Prop','Op','OpVal');
	for (var i in id0) {
		var ctrl=form[id0[i] + '_new'];
		ctrl.change=self[id0[i] + 'Change'];
		if (self[id0[i] + 'Edit']) { ctrl.edit=self[id0[i] + 'Edit']; }
		ctrl.setAttrFromPopup = self.setAttrFromPopup;
	}
	for (tno=0; tno<this.terms.length; tno++) {
		this.terms[tno].initMethods(tno);
	}
}

function TermList_addTerm(term)
{
	this.terms[this.terms.length] = term;
	return term;
}

</script>
 >
 Quit
 
js4
 &html<
<script language="JavaScript">

function Term(termType, sourceClass)
{
	this.conditions = new Array();
	this.disabled = false;

	this.termType = termType;
	this.sourceClass = sourceClass;

	// methods
	this.addCondition = Term_addCondition;
	this.renderHTML = Term_renderHTML;
	this.initMethods = Term_initMethods;
	this.serialize = Term_serialize;
	this.clone = Term_clone;
}

function Term_clone()
{
	var clone = new Term(this.termType, this.sourceClass);
	clone.disabled = this.disabled;
	for (var c in this.conditions) {
		clone.addCondition(this.conditions[c].clone());
	}
	return clone;
}

function Term_serialize()
{
	var s = '', ttype = this.termType.replace(vdocName,"VDoc");
	s += '<term'
	if (this.disabled) {s += ' disabled="true"'; }
	switch (ttype) {
	 case 'VDoc Document Property':  ttype='Body Property'; break;
	}
	if (ttype!='') {s += ' termType="' + escXML(ttype) + '"'; }
	if (this.sourceClass!='') {s += ' sourceClass="' + escXML(this.sourceClass) + '"'; }
	s += '>\n';

	for (var c in this.conditions) {
		s += this.conditions[c].serialize();
	}
	s += '</term>\n';
	return s;
}

// render a term as HTML
function Term_renderHTML(tno)
{
	var html = '';

	// enabled column
	html += '<td><table class="Conditions"><tr><td align="center"><input title="#(msgEnable)#" type="checkbox" id="enabled_' + tno + '" ' + (this.disabled ? '' : 'checked') + ' onclick="enableTerm(this,this.checked);"></td><td>';
	if (tno > 0) {
		html += '<input type="button" title="#(msgUpTerm)#" class="EditButton" onclick="moveTermUp(' + tno + ');" value="#(msgUpCmd)#">';
	} else {
		html += '&nbsp;';
	}
	html += '</td></tr><tr><td align="center"><input type="button" title="#(msgDelTerm)#" class="RemoveButton" onclick="removeTerm(' + tno + ');" value="#(msgRemoveCmd)#"></td><td>';
	if (tno < termList.terms.length - 1) {
		html += '<input type="button" title="#(msgDownTerm)#" class="EditButton" onclick="moveTermDown(' + tno + ');" value="#(msgDownCmd)#">';
	} else {
		html += '&nbsp;';
	}
	html += '</td</tr></table></td>';

	// term type column
	html += '<td>&nbsp;<select id="Type_'+tno+'" onchange="this.change();">' + getTermTypeOptions(this.termType) + '</select>&nbsp;</td>';

	// condition column
	html += '<td valign="top"><table class="Conditions" width="100%" border="0" cellpadding="0" cellspacing="0">';
	for (var c in this.conditions) {
		html += '<tr align="right">';
		html += this.conditions[c].renderHTML(tno,c);
		html += '</tr>';
	}
	if ('' == tDis) {
		// new-condition button
		html += '<tr align="right" valign="top">';
		html += '<td  align="left" colspan="5">';
		if (this.conditions.length>0) { html += '&nbsp;'; }
		html += '<div class="Condition"><a title="#(msgNewCond)#" href="javascript: addCondition(' + tno + ');">#(msgNewCmd)#</a></div>';
		html += '</td></tr>';
	}	
	html += '</table></td>';

	return html;
}

function Term_initMethods(tno)
{
	// do ctls
	var form = self.document.theForm;	
	var id0  = new Array('Type');
	for (var i in id0) {
		var ctrl=form[id0[i] + '_' + tno];
		ctrl.change=self[id0[i] + 'Change'];
		if (self[id0[i] + 'Edit']) { ctrl.edit=self[id0[i] + 'Edit']; }
		ctrl.setAttrFromPopup = self.setAttrFromPopup;
	}
	for (cno in this.conditions) {
		this.conditions[cno].initMethods(tno,cno);
	}
}

function Term_addCondition(cond)
{
	this.conditions[this.conditions.length] = cond;
	return cond;
}

function Condition(join,Prop,Op,OpVal)
{
	this.join = (join == '') ? 'IF' : join;
	this.Prop = Prop;
	this.PropError = '';
	this.Op = Op;
	this.OpVal = OpVal;
	this.OpValError = '';
	
	// methods
	this.renderHTML = Condition_renderHTML;
	this.initMethods = Condition_initMethods;
	this.serialize = Condition_serialize;
	this.clone = Condition_clone;
}

function Condition_clone()
{
	var clone = new Condition(this.join,this.Prop,this.Op,this.OpVal);
	return clone;
}

function Condition_serialize()
{
	var s = '';
	s += '<condition';
	s += ' join="' + escXML(this.join) + '"';
	s += ' Prop="' + escXML(this.Prop) + '"';
	
	if (this.Op != '') {
		s += ' Op="' + escXML(this.Op) + '"';
		s += ' OpVal="' + escXML(this.OpVal) + '"';
	}
	s += '/>\n';
	return s;
}

// render a condition as HTML
function Condition_renderHTML(tno,cno)
{
	var html = '';
	var term=termList.terms[tno];
	if ('OR' != term.termType) {
		tDef = escHTML(this.Prop);
		tDefOp = escHTML(this.Op);
		tDefOpVal = escHTML(this.OpVal);
		tDis = '';
		html += '<td>&nbsp;<input type="button" title="#(msgDelCond)#" class="RemoveButton" onclick="removeCondition('+tno+','+cno+');" value="#(msgRemoveCmd)#">&nbsp;</td>';
		if (cno == 0) {
			html += '<td align=left>&nbsp;<font size=2>IF</font>&nbsp;</td>';
		} else {
			html += '<td>&nbsp;<select id="Join_'+tno+'_'+cno+'" onchange="this.change();">' + getJoinOptions(this.join) + '</select>&nbsp;</td>';
		}
	} else {
		tDef = '----';
		tDefOp = '';
		tDefOpVal = '----';
		tDis = 'disabled ';
		html += '<td colspan=2></td>';
	}
	html += '<td nowrap align="left">';
	html += '<input type="text" size="30" ' + tDis + (this.PropError!='' ? 'class="Error" title="' + this.PropError + '"' : '') + ' id="Prop_'+tno+'_'+cno+'" value="' + tDef + '" onchange="this.change();" onkeyup="keyup(this);">';
		html += '<input class="EditButton" id="PropEdit_'+tno+'_'+cno+'" type="button" value="#(msgEditCmd)#" ' + tDis + 'title="#(msgEditOp)#" onclick="editValue(\'Prop_'+tno+'_'+cno+'\');">&nbsp;';

	html += '</td><td nowrap>';
	html += '&nbsp;<select id="Op_'+tno+'_'+cno+'" ' + tDis + 'value="' + tDefOp + '" onchange="this.change();">' + getOperatorOptions(tDefOp) + '</select>&nbsp;</td>';
	html += '<td nowrap align="left">';
	html += '<input type="text" size="16" ' + tDis + ((this.OpValError!='') ? 'class="Error" title="' + this.OpValError + '"' : '') + ' id="OpVal_'+tno+'_'+cno+'" value="' + tDefOpVal + '" onchange="this.change();" onkeyup="keyup(this);">';

	html += '</td>';
	//alert('!!! html='+html);
	return html;
}

function Condition_initMethods(tno,cno)
{
	// do ctls
	var form = self.document.theForm;	
	var id0  = new Array('Join','Prop','Op','OpVal');
	for (var i in id0) {
		//alert('!!! '+id0[i] + '_' + tno + '_' + cno+' = '+id0[i] + 'Change');
		var ctrl=form[id0[i] + '_' + tno + '_' + cno];
		if (ctrl) {
			ctrl.change=self[id0[i] + 'Change'];
			if (self[id0[i] + 'Edit']) { ctrl.edit=self[id0[i] + 'Edit']; }
			ctrl.setAttrFromPopup = self.setAttrFromPopup;
		}
	}
}

</script>
 >
 Quit
]]></Implementation>
</Method>

<Method name="isDefaultNewTerm">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTerm,tVDocName,tSearchTableClass</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Quit:'$IsObject(pTerm) 0
	Set tDefTermType = $G(%session.Data("DEFTYPE",1),tVDocName_" SearchTable Field")
	Set tDefClass = $G(%session.Data("DEFCLASS",1),tSearchTableClass)
	Quit:pTerm.Disabled||(pTerm.Type'=tDefTermType)||(pTerm.SourceClass'=tDefClass)||'$IsObject(pTerm.Conditions)||(1'=pTerm.Conditions.Count()) 0
	Set tDefProp = $G(%session.Data("DEFPROP",1))
	Set tCond=pTerm.Conditions.GetAt(1)
	Quit ((tCond.JoinOp="IF") && (tCond.Prop=tDefProp) && (tCond.Op="=") && (tCond.OpVal=""))
]]></Implementation>
</Method>

<Method name="jsGenerate">
<ClassMethod>1</ClassMethod>
<FormalSpec>tMsgFilter,tVDocName,tSearchTableClass</FormalSpec>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// create list generating functions
	Write "<script language=""javascript"">",!

	Write !,"function getTermTypeOptions(val)",!
	Write "{",!
	Write " var html='';",!
	Set tList = "Header Field,"_tVDocName_" Document Property,"_tVDocName_" SearchTable Field,"_tVDocName_" Segment Field,"_tVDocName_" Property Path,OR"
	Set tDelim = $E(tList,1)
	For i = 1:1:$L(tList,",") {	Set t = $P(tList,",",i)
		Write " html += '<option ' + (val=='" _ t _ "' ? 'selected ' : '') + 'value=""" _ t _ """>" _ $$$LocalizeText("Ensemble",t,t) _ "</option>';",!
	}
	Write " return html;",!
	Write "}",!

	Write !,"function getJoinOptions(val)",!
	Write "{",!
	Write " var html='';",!
	Set tList = "AND,OR"
	For i = 1:1:$L(tList,",") { Set t = $P(tList,",",i)
		Write " html += '<option ' + (val=='" _ t _ "' ? 'selected ' : '') + 'value=""" _ t _ """>" _ t _ "</option>';",!
	}
	Write " return html;",!
	Write "}",!

	Write !,"function getOperatorOptions(val)",!
	Write "{",!
	Write " var html='';",!
	Set tList = ..#FunctionList
	Set tDelim = $E(tList,1)
	For i = 1:1:$L(tList,",") {	Set t = $P(tList,",",i)  Continue:""=t
		Write " html += '<option ' + (val==escHTML('" _ t _ "') ? 'selected ' : '') + 'value=""'+escHTML('" _ t _ "')+'"">' + escHTML('" _ t _ "') + '</option>';",!
	}
	Write " return html;",!
	Write "}",!

	// create initial TermList using values from the server
	Write !,"function createTermList()",!
	Write "{",!
	If ($IsObject(tMsgFilter)) {
		&js<
			var term;
			termList = new TermList(#(##class(%CSP.Page).QuoteJS(tMsgFilter.%Name))#,#(##class(%CSP.Page).QuoteJS(tMsgFilter.%Description))#,true);
		>
		Set tCount=tMsgFilter.%Terms.Count(), tTerm=$$$NULLOREF
		For t=1:1:tCount { Set tPrev=tTerm, tTerm = tMsgFilter.%Terms.GetAt(t)
			Set tTerm.Type=$Case(tTerm.Type
					,"Body Property":tVDocName_" Document Property"
					,"VDoc SearchTable Field":tVDocName_" SearchTable Field"
					,"VDoc Segment Field":tVDocName_" Segment Field"
					,"VDoc Property Path":tVDocName_" Property Path"
					,:tTerm.Type)
			Continue:t=tCount&&..isDefaultNewTerm(tTerm,tVDocName,tSearchTableClass) ; skip duplicated 'new' row
			&js<
				term = termList.addTerm(new Term(#(##class(%CSP.Page).QuoteJS(tTerm.Type))#, #(##class(%CSP.Page).QuoteJS(tTerm.SourceClass))#));
			>
			If (tTerm.Disabled) {
				&js<term.disabled = true;>
			}
			For c = 1:1:tTerm.Conditions.Count() {
				Set tCond = tTerm.Conditions.GetAt(c)
				&js<
					var cond = new Condition(#(##class(%CSP.Page).QuoteJS(tCond.JoinOp))#,#(##class(%CSP.Page).QuoteJS(tCond.Prop))#,#(##class(%CSP.Page).QuoteJS(tCond.Op))#,#(##class(%CSP.Page).QuoteJS(tCond.OpVal))#);
					term.addCondition(cond);
				>
				/*
				Set tOK = ##class(Ens.Term.ExpressionParser).Validate(tCond.Prop, .tErrMsg, tTerm.SourceClass)
				If ('tOK) {
					&js<cond.PropError = #(##class(%CSP.Page).QuoteJS(tErrMsg))#;>
				}
				Set tOK = ##class(Ens.Term.ExpressionParser).Validate(tCond.OpVal, .tErrMsg, tTerm.SourceClass)
				If ('tOK) {
					&js<cond.OpValError = #(##class(%CSP.Page).QuoteJS(tErrMsg))#;>
				}
				*/
			}
		}
		&js<
			originalTermList = termList.clone();
			termList.renderHTML();
		>
	}
	Write "}",!
	Write "</","script>",!

	Quit
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>
</Export>