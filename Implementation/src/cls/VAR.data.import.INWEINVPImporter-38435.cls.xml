<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="VAR.data.import.INWEINVPImporter">
<ClassType/>
<IncludeCode>INConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>AbstractImporter</Super>

<Parameter name="DEBUG">
<Description><![CDATA[

Command:
> do ##class(VAR.data.import.INWEINVPImporter).importFile()

Fields
	StocktakeNumber;Employee;StocktakeDate;SystemDate;Remark;ConsolidateReceiptDates;Sorting;
	CountingList;Status;SiteLocation;FromStockLocation;ToStockLocation;Notes;NumberofCounts;
	CreateLockOnSnapshot;NoStockOnHandandActive;EarliestPostDate;
]]></Description>
<Type>%Integer</Type>
<Default>0</Default>
</Parameter>


<Method name="importFile">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	quit ..import(##class(DirectoryFile).GetNamespaceSubdir("files")_
		"INWEINVP_DASA.csv")
]]></Implementation>
</Method>

<Method name="%OnNew">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..ignoreHeaderLine = 1
	if (..#DEBUG) set ..printProgress = 0

	// Remoção dos registros antigos antes da importação.
	new total, codInventario, continuar, sc

	set total = 0
	set codInventario = $order(^INWEINVP(YM, ""))
	while ($length(codInventario) > 0) {
		set total = $increment(total)

		set codInventario = $order(^INWEINVP(YM, codInventario))
	}

	if (total > 0) {
		write !, "Existem "_total_" registros na global ^INWEINVP("_YM_"). Os mesmos serão removidos antes da importação. "
		read "Deseja continuar? (S/N) ", continuar#1
		write !

		if ((continuar '= "S") && (continuar '= "s")) quit $$$CUSTOMERROR("Operação abortada.")

		set total = 0
		set codInventario = $order(^INWEINVP(YM, ""))
		while ($length(codInventario) > 0) {
			if ($data(^INWEINVP(YM, codInventario, 1))) {
				set sc = $$$Kill("INWEINVP", codInventario)
				if ($$$ISOK(sc)) {
					set total = $increment(total)
					write $char(13)_"Erasing line #"_total
				}
				else {
					$$$VARLOGERROR(sc)
				}
			}

			set codInventario = $order(^INWEINVP(YM, codInventario))
		}
		write $char(13)_"Erase completed successfully!"
		write !, "Foram removidos "_total_" registros da global ^INWEINVP("_YM_")."
	}

	quit ##super()
]]></Implementation>
</Method>

<Method name="process">
<FormalSpec>pintRegistros:%Integer,pstrLinha:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap = "exceptionProc"
	set strStatus = $$$OK

	set obj = ""
	set key										= ..getField(pstrLinha, 1)
	set $$$INWEINVPEmployee(obj) 				= ..getField(pstrLinha, 2)
	set $$$INWEINVPStocktakeDate(obj) 			= ..getField(pstrLinha, 3)
	set $$$INWEINVPSystemDate(obj) 				= ..getField(pstrLinha, 4)
	set $$$INWEINVPRemark(obj) 					= ..getField(pstrLinha, 5)
	set $$$INWEINVPConsolidateReceiptDates(obj)	= ..getField(pstrLinha, 6)
	set $$$INWEINVPSorting(obj) 				= ..getField(pstrLinha, 7)
	set $$$INWEINVPCountingList(obj) 			= ..getField(pstrLinha, 8)
	set $$$INWEINVPStatus(obj) 					= ..getField(pstrLinha, 9)
	set $$$INWEINVPSiteLocation(obj) 			= ..getField(pstrLinha, 10)
	set $$$INWEINVPNotes(obj) 					= ..getField(pstrLinha, 13)
	set $$$INWEINVPNumberofCounts(obj) 			= ..getField(pstrLinha, 14)
	set $$$INWEINVPCreateLockOnSnapshot(obj) 	= ..getField(pstrLinha, 15)
	set $$$INWEINVPNoStockOnHandandActive(obj) 	= ..getField(pstrLinha, 16)
	set $$$INWEINVPEarliestPostDate(obj) 		= ..getField(pstrLinha, 17)
	if (..#DEBUG) {
		do ..print(..lineBreak_"key="_key_", obj="_obj)
	}
	else {
		set strStatus = $$$Save("INWEINVP", key, obj, 1)
	}

finallyProc
	quit strStatus

exceptionProc
 	set $ztrap = ""
	set strStatus = $$$CUSTOMERROR($zerror)

	goto finallyProc
]]></Implementation>
</Method>
</Class>
</Export>