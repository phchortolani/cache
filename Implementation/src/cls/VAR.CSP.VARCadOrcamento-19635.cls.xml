<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.CSP.VARCadOrcamento">
<ClassType/>
<IncludeCode>MEDConst,VARConst,INConst,WWWConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page</Super>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	$$$VAR
	Set method = $get(%request.Data("method",1))
	Job ##Class(VAR.CSP.VARCadAgendamento).LiberaReservaSemAgendamento()
	Xecute "do .."_method_"()"
	Return $$$OK]]></Implementation>
</Method>

<Method name="GerarOrcamento">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"

	Set YBED					= $Get(%request.Data("YBED",1))
	Set pCodPaciente 	= $Get(%request.Data("pCodPaciente",1))

	Set chave = $$GetNextNumber^COMUtils("VAROrcamento","")

	Set validade = +$Horolog + $$$VARAgendamentoConfOrcamentoValidadeDias(^VARAgendamentoConf(YM, 0, 1))

	Set objeto = $Get(^VAROrcamento(YM, chave, 1))
	Set $$$VAROrcamentoCodigodoPaciente(objeto) = pCodPaciente
	Set $$$VAROrcamentoSituacao(objeto) 				= 1
	Set $$$VAROrcamentoCriadoEm(objeto) 				= $Horolog
	Set $$$VAROrcamentoCriadoPor(objeto) 				= YBED
	Set $$$VAROrcamentoValidade(objeto) 				= validade
	
	Set strStatus = $$$Save("VAROrcamento", chave, objeto, $$$YES)
	
	Set listRetorno = {}
	Set listRetorno.status				= strStatus
	Set listRetorno.codOrcamento 	= chave
	Do listRetorno.%ToJSON()

	Return $$$OK]]></Implementation>
</Method>

<Method name="CancelarOrcamento">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 				= 0
	Set Y 				= "~"
	Set erro			=	0
	;
	Set YBED 						= $Get(%request.Data("YBED",1))
	Set pCodAgendamento	= $Get(%request.Data("pCodOrcamento",1))
	Tstart
	Try{
		Set objeto = $Get(^VAROrcamento(YM, pCodAgendamento, 1))
		Set $$$VAROrcamentoSituacao(objeto) 		= 2
		Set $$$VAROrcamentoAlteradoEm(objeto) 	= $Horolog
		Set $$$VAROrcamentoAlteradoPor(objeto) 	= YBED
		Set strStatus = $$$Save("VAROrcamento", pCodAgendamento, objeto, $$$YES)
	}
	Catch(err){
		#dim err as %Exception.SystemException
		set strStatus = err.DisplayString()
		set erro			=	err
	}
	set retorno = {}
	if 'erro{
		Tcommit
		set retorno.codigo 		= $Get(chave)
		Set retorno.status 		= strStatus
	}Else{
		Trollback
		Set retorno.status 		= strStatus
	}
 	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="ArmazenarOrcamento">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 				= 0
	Set Y 				= "~"
	Set erro			=	0
	;
	Set YBED 						= $Get(%request.Data("YBED",1))
	Set pCodAgendamento	= $Get(%request.Data("pCodOrcamento",1))
	Set pObservacao			= $Get(%request.Data("pObservacao",1))
	Set pEmail					= $Get(%request.Data("pEmail",1))
	Set pCodPlanoSaudeConvenio	= $Get(%request.Data("pCodPlanoSaudeConvenio",1))
	Set pCodPlanoSaude					= $Get(%request.Data("pCodPlanoSaude",1))
	Set pPlanoSaudeCarteirinha	= $Get(%request.Data("pPlanoSaudeCarteirinha",1))
	Tstart
	Try{
		Set objeto = $Get(^VAROrcamento(YM, pCodAgendamento, 1))
		Set codPaciente 												= $$$VAROrcamentoCodigodoPaciente(objeto)
		Set $$$VAROrcamentoSituacao(objeto) 		= 3
		Set $$$VAROrcamentoObservacao(objeto) 	= pObservacao
		Set $$$VAROrcamentoConvenio(objeto) 		= pCodPlanoSaudeConvenio
		Set $$$VAROrcamentoPlanodeSaude(objeto) = pCodPlanoSaude
		Set $$$VAROrcamentoCarteirinha(objeto) 	= pPlanoSaudeCarteirinha
		Set $$$VAROrcamentoAlteradoEm(objeto) 	= $Horolog
		Set $$$VAROrcamentoAlteradoPor(objeto) 	= YBED
		Set strStatus = $$$Save("VAROrcamento", pCodAgendamento, objeto, $$$YES)
		If ($$$ISERR(strStatus)) {
			Quit	
		}
		Set objMEDPatient = $Get(^MEDPatient(YM, codPaciente, 1))
		If ($ZConvert($$$MEDPatientEmail(objMEDPatient),"l") '= $ZConvert(pEmail,"l")) {
			Set $$$MEDPatientEmail(objMEDPatient) = $ZConvert(pEmail,"l")
			Set strStatus = $$$Save("MEDPatient", codPaciente, objMEDPatient, $$$YES)
		}
	}
	Catch(err){
		#dim err as %Exception.SystemException
		set strStatus = err.DisplayString()
		set erro			=	err
	}
	set retorno = {}
	if 'erro{
		Tcommit
		set retorno.codigo 		= $Get(chave)
		Set retorno.status 		= strStatus
	}Else{
		Trollback
		Set retorno.status 		= strStatus
	}
 	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="EditarOrcamento">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"

	Set YBED					= $Get(%request.Data("YBED",1))
	Set pCodOrcamento = $Get(%request.Data("pCodOrcamento",1))

	Set objeto = $Get(^VAROrcamento(YM, pCodOrcamento, 1))
	
	Set listRetorno = {}
	Set listRetorno.codPaciente	= $$$VAROrcamentoCodigodoPaciente(objeto)
	Set listRetorno.observacao	= $$$VAROrcamentoObservacao(objeto)	
	Set listRetorno.codPlanoSaudeConvenio	= $$$VAROrcamentoConvenio(objeto) 
	Set listRetorno.codPlanoSaude					= $$$VAROrcamentoPlanodeSaude(objeto) 
	Set listRetorno.planoSaudeCarteirinha	= $$$VAROrcamentoCarteirinha(objeto) 
	
	Do listRetorno.%ToJSON()

	Return $$$OK]]></Implementation>
</Method>

<Method name="GetValidade">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodOrcamento</FormalSpec>
<Implementation><![CDATA[	If (pCodOrcamento = "") return ""
	Return $ZDate($$$VAROrcamentoValidade($Get(^VAROrcamento(0, pCodOrcamento, 1))),4)]]></Implementation>
</Method>

<Method name="InserirProcedimento">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"

	Set YBED							= $Get(%request.Data("YBED",1))
	Set pCodOrcamento 		= $Get(%request.Data("pCodOrcamento",1))
	Set pCodProcedimento 	= $Get(%request.Data("pCodProcedimento",1))

	Set grupoAgendamento 	= $$$INARTGrupodeAgendamento($Get(^INART(YM, pCodProcedimento, 1)))
	Set requerAgendamento	= $$$INARTRequerAgendamento($Get(^INART(YM, pCodProcedimento, 1)))

	;Set valor = ..GetValorProcedimento(pCodProcedimento, "", "")
	Set valor = 0

	Set objeto = $Get(^VAROrcamentoProcedimentos(YM, pCodOrcamento, pCodProcedimento, 1))
	Set $$$VAROrcamentoProcedimentosGrupoAgendamento(objeto) 			= grupoAgendamento
	Set $$$VAROrcamentoProcedimentosProcedimentoAgendado(objeto) 	= requerAgendamento
	Set $$$VAROrcamentoProcedimentosValor(objeto) 								= valor
	Set $$$VAROrcamentoProcedimentosQtdeAgenda(objeto) 						= 1
	Set $$$VAROrcamentoProcedimentosValorTotal(objeto) 						= (valor * 1)

	Set strStaus = $$$Save("VAROrcamentoProcedimentos", pCodOrcamento_$$$COMMA_pCodProcedimento, objeto, $$$YES)
	
	Write strStaus
	
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetProcOrcamento">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"
	Set YBED					= $Get(%request.Data("YBED",1))
	Set pCodOrcamento = $Get(%request.Data("pCodOrcamento",1))
	Set pCodPlanoSaudeConvenio = $Get(%request.Data("pCodPlanoSaudeConvenio",1))
	Set arrayRetorno 	= []
	
	Set meuSQL = "Select * From SQLUser.VAROrcamentoProcedimentos "
	Set meuSQL = meuSQL _ "	Where Company = 0 And CodigoOrcamento = '"_pCodOrcamento_"' "
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",.meuSQL)
	While rSet.%Next() {
		Set procAgendado 	= rSet.%Get("ProcedimentoAgendado")
		Set procedimento 	= rSet.%Get("Procedimento")
		Set grupoAgendam 	= rSet.%Get("GrupoAgendamento")
		;
		Set objRegraComercial = ##Class(VAR.util.FATRegrasComerciais).%New(procedimento, pCodPlanoSaudeConvenio)
		If ('$IsObject(objRegraComercial)) {
			Set valor		= 0
			Set valorTotal	= 0
		}Else{
			Set valor			= objRegraComercial.ValorUnitario
			For i=1:1:objRegraComercial.Componentes.Count(){
				Set componente = objRegraComercial.Componentes.GetAt(i)
				If (componente.Valor <= 0) Continue
				Set valor = valor + componente.Valor
			}
			Set valorTotal		= valor * rSet.%Get("QtdeAgenda")
			Set objOrcamento 	= $Get(^VAROrcamentoProcedimentos(YM,pCodOrcamento,procedimento,1))
			Set $$$VAROrcamentoProcedimentosValor(objOrcamento) 			= valor
			Set $$$VAROrcamentoProcedimentosValorTotal(objOrcamento) 	= valorTotal
			Set strStaus = $$$Save("VAROrcamentoProcedimentos", pCodOrcamento_$$$COMMA_procedimento, objOrcamento, $$$YES)
		}
		;
		Set qtdeAgenda		= rSet.%Get("QtdeAgenda") 
		;Set valorTotal		= rSet.%Get("ValorTotal") 
		Set jejum 				= $$$INARTNecessidadeJejum($Get(^INART(YM, procedimento, 1)))
		Set codExecutor = ""
		&SQL(
			Select Executor Into :codExecutor From SQLUser.VARManualExame
			Where Company = 0 And CodigoExame = :procedimento
						And Situacao = 'A'
		)
		Set tempoResultado = ""
		If (codExecutor '= "") {
			Set objVARManualExame = $Get(^VARManualExame(YM, procedimento, codExecutor, 1))
			Set tempoResultado = $$$VARManualExameTempoResultado(objVARManualExame)
		}
	
		Set listRetorno = {}
		Set listRetorno.grupo									= $Select(procAgendado=1:"Procedimentos Agendados",1:"Procedimentos não Agendados")
		Set listRetorno.procAgendado					= procAgendado
		Set listRetorno.procedimento					= procedimento
		Set listRetorno.procedimentoDesc			= $$SQLGetDescricaoProduto^VARSQL(procedimento,1)
		Set listRetorno.grupoAgendamento			= grupoAgendam
		Set listRetorno.grupoAgendamentoDesc	= $$GetDescGrupoAgendamento^VARSQL(grupoAgendam)
		Set listRetorno.jejum 								= $Select(+jejum=1:"Sim",1:"Não")
		Set listRetorno.tempoResultado 				= $Select($Get(tempoResultado)'="":(tempoResultado\3600)_":"_((tempoResultado#3600)\60),1:"")
		Set listRetorno.codExecutor						= codExecutor
		Do listRetorno.%Set("valor", +valor, "number")
		Do listRetorno.%Set("qtdeAgenda", +qtdeAgenda, "number")
		Do listRetorno.%Set("valorTotal", +valorTotal, "number")
		Set listRetorno.horario								= ""
		If (procAgendado = 1) {
			Set listRetorno.horario	= ..GetHorarioDisponivel(procedimento)
		}
		Do arrayRetorno.%Push(listRetorno)
	}

	Do arrayRetorno.%ToJSON()
	
	Return $$$OK]]></Implementation>
</Method>

<Method name="RemoverProcOrcamento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodOrcamento,pCodProcedimento,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y 		= "~"
	Set YBED 	= pYBED

	Return $$$Kill("VAROrcamentoProcedimentos", pCodOrcamento_$$$COMMA_pCodProcedimento)]]></Implementation>
</Method>

<Method name="AtualizarProcOrcamento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodOrcamento,pCodProcedimento,pQtdeAgenda,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y 		= "~"
	Set YBED 	= pYBED

	;Set valor = ..GetValorProcedimento(pCodProcedimento, "", "")

	Set objeto = $Get(^VAROrcamentoProcedimentos(YM, pCodOrcamento, pCodProcedimento, 1))
	;Set $$$VAROrcamentoProcedimentosValor(objeto) 								= valor
	Set $$$VAROrcamentoProcedimentosQtdeAgenda(objeto) 	= pQtdeAgenda
	Set $$$VAROrcamentoProcedimentosValorTotal(objeto) = ($$$VAROrcamentoProcedimentosValor(objeto)  * pQtdeAgenda)

	Set strStaus = $$$Save("VAROrcamentoProcedimentos", pCodOrcamento_$$$COMMA_pCodProcedimento, objeto, $$$YES)
	
	Return strStaus]]></Implementation>
</Method>

<Method name="GetHorarioDisponivel">
<ClassMethod>1</ClassMethod>
<FormalSpec>pProcedimento</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	Set dataAtendimento = ""
	Set horaAtendimento = ""
	
	Set dataLimite = +$Horolog
	Set horaLimite = $Piece($Horolog,",",2) + 300
	
	Set pProcedimentoE = ""

	Set meuSQL = "Select Top 1 Horario.DatadeAtendimento, Horario.HoradeAtendimento "
	Set meuSQL = meuSQL _ "From SQLUser.MEDProviderAgendaHorario As Horario, "
	Set meuSQL = meuSQL _ "SQLUser.MEDProviderAgenda As Agenda, SQLUser.INART As INART " 
	Set meuSQL = meuSQL _ "Where Horario.Company = 0 And Agenda.Company = 0 And INART.Company = 0 "
	Set meuSQL = meuSQL _ "And Horario.CodigoProfissional = Agenda.CodigoProfissional "
	Set meuSQL = meuSQL _ "And Horario.ReferenciaPai = Agenda.Sequencia "
	Set meuSQL = meuSQL _ "And Agenda.GrupoAgendamento = INART.GrupodeAgendamento "
	Set meuSQL = meuSQL _ "And INART.ItemNumber = '"_pProcedimento_"' "
	Set meuSQL = meuSQL _ "And (Agenda.RestricaoGeral Is Null Or "
	Set meuSQL = meuSQL _ "(';'||Agenda.RestricaoGeral||';') Not Like '%;"_pProcedimento_";%') " 
	Set meuSQL = meuSQL _ "And (Horario.DatadeAtendimento > '"_dataLimite_"' "
	Set meuSQL = meuSQL _ "Or (Horario.DatadeAtendimento = '"_dataLimite_"' "
	Set meuSQL = meuSQL _ "And HoradeAtendimento >= '"_horaLimite_"' ))"
	Set meuSQL = meuSQL _ "And (Horario.Admissao Is Null Or Horario.Admissao = '') "
	Set meuSQL = meuSQL _ "Order By Horario.DatadeAtendimento, Horario.HoradeAtendimento "
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	While (rSet.%Next()) {
		Set dataAtendimento = rSet.%Get("DatadeAtendimento")
		Set horaAtendimento = rSet.%Get("HoradeAtendimento")
	}
	;
	If (dataAtendimento = "") {
		Set meuSQL = "Select Top 1 Horario.DatadeAtendimento, Horario.HoradeAtendimento "
		Set meuSQL = meuSQL _ "From SQLUser.VARGrupoAgendamentoHorario As Horario, "
		Set meuSQL = meuSQL _ "SQLUser.INART As INART Where Horario.Company = 0 And INART.Company = 0 "
		Set meuSQL = meuSQL _ "And Horario.CodigodoGrupo = INART.GrupodeAgendamento "
		Set meuSQL = meuSQL _ "And INART.ItemNumber = '"_pProcedimento_"' "
		Set meuSQL = meuSQL _ "And (Horario.Admissao Is Null Or Horario.Admissao = '') "
		Set meuSQL = meuSQL _ "And $$GetMEDReservaHorarioTemp^VARSQL( "
		Set meuSQL = meuSQL _ "			Horario.SaladeAtendimento||'OO'||Horario.LeitodeAtendimento, "
		Set meuSQL = meuSQL _ "			Horario.DatadeAtendimento, "
		Set meuSQL = meuSQL _ "			Horario.HoradeAtendimento, "
		Set meuSQL = meuSQL _ "			20) = 0 "
		Set meuSQL = meuSQL _ "And ( "
		Set meuSQL = meuSQL _ "	Horario.DatadeAtendimento > '"_dataLimite_"' "
		Set meuSQL = meuSQL _ "	Or (Horario.DatadeAtendimento = '"_dataLimite_"' "
		Set meuSQL = meuSQL _ "	And HoradeAtendimento >= '"_horaLimite_"') "
		Set meuSQL = meuSQL _ ") "
		Set meuSQL = meuSQL _ "Order By Horario.DatadeAtendimento, Horario.HoradeAtendimento "
		Set rSet = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
		While (rSet.%Next()) {
			Set dataAtendimento = rSet.%Get("DatadeAtendimento")
			Set horaAtendimento = rSet.%Get("HoradeAtendimento")
		}
	}
	
	If (dataAtendimento '= "") {
		Return $ZDate(dataAtendimento,4)_" "_$ZTime(horaAtendimento,2)
	}
	Return ""]]></Implementation>
</Method>

<Method name="GetValorProcedimento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodProcedimento,pCodAgendamento="",pSequencia=""</FormalSpec>
<Implementation><![CDATA[	Set rValor = 0
	Set codItem = ""
	For {
		Set codItem = $Order(^VARProcedItensUtilizados(0, pCodProcedimento, codItem))	
		Quit:codItem=""

		If (pCodAgendamento '= "" && ($Data(^VARAgendamentoItensDesc(0,pCodAgendamento,pSequencia,codItem)))) {
			Continue			
		}

		Set objeto 	= ^VARProcedItensUtilizados(0, pCodProcedimento, codItem, 1)
		Set qtde 		= $$$VARProcedItensUtilizadosQuantidade(objeto)
		Set valor 	= $$GetINARTSalesPrice^VARSQL(codItem)
		
		Set rValor = rValor + valor
	}
	Set rValor = rValor + $$GetINARTSalesPrice^VARSQL(pCodProcedimento)
	Return rValor]]></Implementation>
</Method>

<Method name="GetOrcamentos">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"

	Set YBED					= $Get(%request.Data("YBED",1))
	Set pCodPaciente 	= $Get(%request.Data("pCodPaciente",1))

	Set arrayRetorno 	= []

	Set meuSQL = "Select Orc.Numero, Orc.CriadoEm, Orc.Validade, Proc.Procedimento, "
	Set meuSQL = meuSQL _ "Proc.GrupoAgendamento, Proc.ProcedimentoAgendado, Orc.Situacao "
	Set meuSQL = meuSQL _ "From SQLUser.VAROrcamento As Orc "
	Set meuSQL = meuSQL _ "Left Join SQLUser.VAROrcamentoProcedimentos As Proc "
	Set meuSQL = meuSQL _ "On Proc.Company = 0 And Proc.CodigoOrcamento = Orc.Numero "
	Set meuSQL = meuSQL _ "Where Orc.Company = 0 And Orc.CodigodoPaciente = '"_pCodPaciente_"' "
	Set meuSQL = meuSQL _ "And Orc.Situacao In (3,4) "
	Set meuSQL = meuSQL _ "Order By Orc.Numero"
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	Set antNumOrcamento = ""
	Set arrayProcedimentos = []
	While (rSet.%Next()) {

		Set numOrcamento 	= rSet.%Get("Numero")
		Set criadoEm 			= rSet.%Get("CriadoEm")
		Set validade 			= rSet.%Get("Validade")
		Set procedimento 	= rSet.%Get("Procedimento")
		Set grupoAgend 		= rSet.%Get("GrupoAgendamento")
		Set procAgendado 	= rSet.%Get("ProcedimentoAgendado")
		Set situacao 			= rSet.%Get("Situacao")

		If (antNumOrcamento '= numOrcamento) {
			If (arrayProcedimentos.%Size() > 0) {
				Set listOrcamento.procedimento 	= arrayProcedimentos
				Do arrayRetorno.%Push(listOrcamento)
			}
			Set arrayProcedimentos = []
			Set antNumOrcamento = numOrcamento
		}
		If (+$Horolog > validade && (situacao = 3)) {
			Set situacao = 2
		}
		Set listOrcamento									= {}
		Set listOrcamento.numeroOrcamento	= numOrcamento
		Set listOrcamento.data 						= $ZDateTime(criadoEm,4,2)
		Set listOrcamento.validade 				= $ZDate(validade,4)
		Set listOrcamento.situacao				= situacao

		Set listDados 									= {}
		Set listDados.procedimento 			= procedimento
		Set listDados.procedimentoDesc	= $$SQLGetDescricaoProduto^VARSQL(procedimento,1)
		Set listDados.grupoAgend				= grupoAgend
		Set listDados.grupoAgendDesc		= $$GetDescGrupoAgendamento^VARSQL(grupoAgend)
		Set listDados.procAgendado			= procAgendado
		Do arrayProcedimentos.%Push(listDados)
	}
	If (arrayProcedimentos.%Size() > 0) {
		Set listOrcamento.procedimento 	= arrayProcedimentos
		Do arrayRetorno.%Push(listOrcamento)
	}
	Do arrayRetorno.%ToJSON()
	
	Return $$$OK]]></Implementation>
</Method>

<Method name="AgendarOrcamento">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"

	Set YBED					= $Get(%request.Data("YBED",1))
	Set pCodOrcamento = $Get(%request.Data("pCodOrcamento",1))

	Set ^mtemp.Orcamento(YBED) = pCodOrcamento

	Return $$$OK]]></Implementation>
</Method>

<Method name="GetPreferencia">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"
	
	Set pCodProcedimento	= $Get(%request.Data("pCodProcedimento",1))

	Set arrayRetorno = []
	If (pCodProcedimento = "") {
		Do arrayRetorno.%ToJSON()
		Return $$$OK
	}
	
	Set grupoAgendamento 	= $$$INARTGrupodeAgendamento($Get(^INART(YM, pCodProcedimento, 1)))

	If ($Data(^VARGrupoAgendamentoHorario(YM, grupoAgendamento))) {
		Set meuSQL = "Select Loc.Sala, Loc.LeitoEquipamento, INART.GrupodeAgendamento "
		Set meuSQL = meuSQL _ "From SQLUser.VARGrupoAgendamentoLocAtend As Loc, "
		Set meuSQL = meuSQL _ "SQLUser.INART As INART "
		Set meuSQL = meuSQL _ "Where Loc.Company = 0 And INART.Company = 0 "
		Set meuSQL = meuSQL _ "And Loc.CodigoGrupo = INART.GrupodeAgendamento "
		Set meuSQL = meuSQL _ "And INART.ItemNumber = '"_pCodProcedimento_"' "
		Set meuSQL = meuSQL _ "Group BY Loc.Sala, Loc.LeitoEquipamento"
		Set rSet = ##class(%SQL.Statement).%ExecDirect("",.meuSQL)
		While rSet.%Next() {
			Set codGrupoAgendamento = rSet.%Get("GrupodeAgendamento")
			Set codProfissional			= rSet.%Get("Sala")_"||"_rSet.%Get("LeitoEquipamento")
			Set listRetorno = {}
			Set listRetorno.codProfissional 	= codProfissional
			Set listRetorno.nomeProfissional	= $$GetDescSalasAtendimentos^VARSQL(rSet.%Get("Sala"), rSet.%Get("LeitoEquipamento"))
			Set listRetorno.sexo							= ""
			Set listRetorno.selecionado				= ""
			Do arrayRetorno.%Push(listRetorno)
		}
	}Else{
		Set meuSQL = "Select Agenda.CodigoProfissional, Agenda.GrupoAgendamento "
		Set meuSQL = meuSQL _ "From SQLUser.INART As INART, SQLUser.MEDProviderAgenda As Agenda "
		Set meuSQL = meuSQL _ "Where Agenda.Company = 0 And INART.Company = 0 "
		Set meuSQL = meuSQL _ "And INART.ItemNumber = '"_pCodProcedimento_"' "
		Set meuSQL = meuSQL _ "And Agenda.GrupoAgendamento = INART.GrupodeAgendamento "
		Set meuSQL = meuSQL _ "And (Agenda.RestricaoGeral Is Null Or "
		Set meuSQL = meuSQL _ "(';'||Agenda.RestricaoGeral||';') Not Like '%;"_pCodProcedimento_";%') "
		Set meuSQL = meuSQL _ "Group BY Agenda.CodigoProfissional"
		Set rSet = ##class(%SQL.Statement).%ExecDirect("",.meuSQL)
		While rSet.%Next() {
			Set codGrupoAgendamento = rSet.%Get("GrupoAgendamento")
			Set codProfissional			= rSet.%Get("CodigoProfissional")
			Set listRetorno = {}
			Set listRetorno.codProfissional 	= codProfissional
			Set listRetorno.nomeProfissional	= $$SQLGetProviderName^VARSQL(codProfissional)
			Set listRetorno.sexo							= $$SQLGetProviderSexo^VARSQL(codProfissional, "E")
			Set listRetorno.selecionado				= ""
			Do arrayRetorno.%Push(listRetorno)
		}
	}
	Do arrayRetorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetHorarioProfissional">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"

	Set dataLimite = +$Horolog
	Set horaLimite = $Piece($Horolog,",",2) + 300

	Set pCodProcedimento	= $Get(%request.Data("pCodProcedimento",1))
	Set pCodProfissional	= $Get(%request.Data("pCodProfissional",1))
	
	Set listRetorno		= {}
	Set arrayDados 		= []
	Set arrayColunas 	= []
	If (pCodProcedimento = "") {
		Set listRetorno	= {}
		Set listRetorno.dados 	= arrayDados
		Set listRetorno.colunas = arrayColunas
		Do listRetorno.%ToJSON()
		Return $$$OK
	}
	Kill tDataAtendimento
	Set meuSQL = "Select Horario.DatadeAtendimento, Horario.HoradeAtendimento, Agenda.GrupoAgendamento, "
	Set meuSQL = meuSQL _ "Horario.TempodeAtendimento, Agenda.Unidade, Horario.Admissao "
	Set meuSQL = meuSQL _ "From SQLUser.MEDProviderAgendaHorario As Horario, "
	Set meuSQL = meuSQL _ "SQLUser.MEDProviderAgenda As Agenda, SQLUser.INART As INART "
	Set meuSQL = meuSQL _ "Where Horario.Company = 0 And Agenda.Company = 0 And INART.Company = 0 "
	Set meuSQL = meuSQL _ "And Horario.CodigoProfissional = Agenda.CodigoProfissional "
	Set meuSQL = meuSQL _ "And Horario.ReferenciaPai = Agenda.Sequencia "
	Set meuSQL = meuSQL _ "And Agenda.GrupoAgendamento = INART.GrupodeAgendamento "
	Set meuSQL = meuSQL _ "And Horario.CodigoProfissional = '"_pCodProfissional_"' "
	Set meuSQL = meuSQL _ "And INART.ItemNumber = '"_pCodProcedimento_"' "
	Set meuSQL = meuSQL _ "And (Agenda.RestricaoGeral Is Null Or "
	Set meuSQL = meuSQL _ "(';'||Agenda.RestricaoGeral||';') Not Like '%;"_pCodProcedimento_";%') "
	Set meuSQL = meuSQL _ "And (Horario.DatadeAtendimento > '"_dataLimite_"' "
	Set meuSQL = meuSQL _ "Or (Horario.DatadeAtendimento = '"_dataLimite_"' And HoradeAtendimento >= '"_horaLimite_"'))"
	Set meuSQL = meuSQL _ "And (Horario.Admissao Is Null Or Horario.Admissao = '') "
	Set meuSQL = meuSQL _ "And $$GetMEDReservaHorarioTemp^VARSQL(Horario.CodigoProfissional, "
	Set meuSQL = meuSQL _ "Horario.DatadeAtendimento, Horario.HoradeAtendimento, 20) = 0 "

	Set rSet = ##class(%SQL.Statement).%ExecDirect("",.meuSQL)
	While rSet.%Next() {
		
		Set grupoAgendamento	= rSet.%Get("GrupoAgendamento")
		Set numAdmissao				= rSet.%Get("Admissao")
		Set dataAtendimento		= rSet.%Get("DatadeAtendimento")
		Set horaAtendimento		= rSet.%Get("HoradeAtendimento")
		Set tempoAtendimento	= rSet.%Get("TempodeAtendimento")
		Set unidade						= rSet.%Get("Unidade")
		
		If (dataAtendimento'=""&&($Data(^MEDProviderAgendaAusencia(YM,pCodProfissional,dataAtendimento)))) {
			Set xObjeto = $Get(^MEDProviderAgendaAusencia(YM, pCodProfissional, dataAtendimento, 1))
			If ($$$MEDProviderAgendaAusenciaIndicadordoDia(xObjeto) = $$$YES) {
				Continue
			}Else{
				If (horaAtendimento '= "") {
					If (horaAtendimento >= $$$MEDProviderAgendaAusenciaHoraInicial(xObjeto) && 
							(horaAtendimento <= $$$MEDProviderAgendaAusenciaHoraFinal(xObjeto))) {
						Continue
					}
				}
			}	
		}
		
		If ('$Data(tDataAtendimento(dataAtendimento))) {
			Set tDataAtendimento(dataAtendimento) = ""
			Set tDataAtendimento = $Get(tDataAtendimento) + 1
			If (tDataAtendimento = 31) {
				Quit	
			}	
			Set listColuna = {}
			Set listColuna.dataField 				= $ZDate(dataAtendimento,4)
			Set listColuna.caption 					= $ZDate(dataAtendimento,4)
			Set listColuna.unidade 					= $$SQLGetLocationName^VARSQL(unidade)
			Set listColuna.tempoAtendimento = tempoAtendimento
			Set listColuna.alignment 				= "center"
			Set listColuna.width 						= "80"
			Do arrayColunas.%Push(listColuna)
			Set count = 0
		}
		Set objeto = arrayDados.%Get(count)
		If (objeto = "") {
			Set objeto = {}	
		}
		Do objeto.%Set($ZDate(dataAtendimento,4), $ZTime(horaAtendimento,2))
		Do objeto.%Set($ZDate(dataAtendimento,4)_"reservado", 0)

		Do arrayDados.%Set(count, objeto)
		Set count = count + 1
	}

	Set listRetorno	= {}
	Set listRetorno.dados 	= arrayDados
	Set listRetorno.colunas = arrayColunas
	Do listRetorno.%ToJSON()

	Return $$$OK]]></Implementation>
</Method>

<Method name="GetHorarioSalaLeito">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"

	Set dataLimite = +$Horolog
	Set horaLimite = $Piece($Horolog,",",2) + 300

	Set pCodAgendamento		= $Get(%request.Data("pCodAgendamento",1))
	Set pCodProcedimento	= $Get(%request.Data("pCodProcedimento",1))
	Set pCodProfissional	= $Get(%request.Data("pCodProfissional",1))
	Set pCodSala 					= $Piece(pCodProfissional,"||",1)
	Set pCodLeito 				= $Piece(pCodProfissional,"||",2)
	Set pForcarEncaixe		= $Get(%request.Data("pForcarEncaixe",1))
	Set pSelectRangeSemana= $Get(%request.Data("pSelectRangeSemana",1))
	
	Set listRetorno		= {}
	Set arrayDados 		= []
	Set arrayColunas 	= []
	If (pCodProcedimento = "") {
		Set listRetorno	= {}
		Set listRetorno.dados 	= arrayDados
		Set listRetorno.colunas = arrayColunas
		Do listRetorno.%ToJSON()
		Return $$$OK
	}
	Kill tDataAtendimento
	Set meuSQL = "Select Horario.DatadeAtendimento, Horario.HoradeAtendimento, Horario.TempodeAtendimento, Horario.CodigodoGrupo, "
	Set meuSQL = meuSQL _ "$$GetVARSalasAtendimentosUnidade^VARSQL(Horario.SaladeAtendimento) As Unidade "
	Set meuSQL = meuSQL _ "From SQLUser.VARGrupoAgendamentoHorario As Horario, "
	Set meuSQL = meuSQL _ "SQLUser.INART As INART Where Horario.Company = 0 And INART.Company = 0 "
	Set meuSQL = meuSQL _ "And Horario.CodigodoGrupo = INART.GrupodeAgendamento "
	Set meuSQL = meuSQL _ "And Horario.SaladeAtendimento = '"_pCodSala_"' "
	Set meuSQL = meuSQL _ "And Horario.LeitodeAtendimento = '"_pCodLeito_"' "
	Set meuSQL = meuSQL _ "And INART.ItemNumber = '"_pCodProcedimento_"' "
	If (pForcarEncaixe '= 1) {
		Set meuSQL = meuSQL _ "And (Horario.Admissao Is Null Or Horario.Admissao = '') "
		Set meuSQL = meuSQL _ "And $$GetMEDReservaHorarioTemp^VARSQL(Horario.SaladeAtendimento||'OO'||Horario.LeitodeAtendimento, "
		Set meuSQL = meuSQL _ "Horario.DatadeAtendimento, Horario.HoradeAtendimento, 20) = 0 "
	}
	Set meuSQL = meuSQL _ "And (Horario.DatadeAtendimento > '"_dataLimite_"' Or (Horario.DatadeAtendimento = '"_dataLimite_"' "
	Set meuSQL = meuSQL _ "And HoradeAtendimento >= '"_horaLimite_"'))"	
	If (pSelectRangeSemana '= "") {
		Set meuSQL = meuSQL _ "And $$SQLDiaSemana^VARSQL(Horario.DatadeAtendimento) In ('"_$Replace(pSelectRangeSemana,",","','")_"') "	
	}
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",.meuSQL)
	While rSet.%Next() {
		
		Set codigodoGrupo			= rSet.%Get("CodigodoGrupo")
		Set dataAtendimento		= rSet.%Get("DatadeAtendimento")
		Set horaAtendimento		= rSet.%Get("HoradeAtendimento")
		Set tempoAtendimento	= rSet.%Get("TempodeAtendimento")
		Set unidade						= rSet.%Get("Unidade")

		If ($Data(^VARGrupoAgendamentoAusencia(YM, codigodoGrupo, pCodSala, pCodLeito, dataAtendimento))) {
			Set xObjeto = $Get(^VARGrupoAgendamentoAusencia(YM, codigodoGrupo, pCodSala, pCodLeito, dataAtendimento, 1))
			If ($$$VARGrupoAgendamentoAusenciaIndicadordoDia(xObjeto) = $$$YES) {
				Continue
			}Else{
				If (horaAtendimento >= $$$VARGrupoAgendamentoAusenciaHoraInicial(xObjeto) && 
						(horaAtendimento <= $$$VARGrupoAgendamentoAusenciaHoraFinal(xObjeto))) {
					Continue
				}
			}	
		}

		
		If ('$Data(tDataAtendimento(dataAtendimento))) {
			Set tDataAtendimento(dataAtendimento) = ""
			Set tDataAtendimento = $Get(tDataAtendimento) + 1
			If (tDataAtendimento = 11) {
				Quit	
			}	
			Set listColuna = {}
			Set listColuna.dataField 				= $ZDate(dataAtendimento,4)
			Set listColuna.caption 					= $ZDate(dataAtendimento,4)
			Set listColuna.unidade 					= $$SQLGetLocationName^VARSQL(unidade)
			Set listColuna.tempoAtendimento = tempoAtendimento
			Set listColuna.alignment 				= "center"
			Set listColuna.width 						= "80"
			Do arrayColunas.%Push(listColuna)
			Set count = 0
		}
		Set objeto = arrayDados.%Get(count)
		If (objeto = "") {
			Set objeto = {}	
		}
		Do objeto.%Set($ZDate(dataAtendimento,4), $ZTime(horaAtendimento,2))
		Do objeto.%Set($ZDate(dataAtendimento,4)_"reservado", 0)
		Do arrayDados.%Set(count, objeto)
		Set count = count + 1
	}

	Set listRetorno	= {}
	Set listRetorno.dados 	= arrayDados
	Set listRetorno.colunas = arrayColunas
	Do listRetorno.%ToJSON()

	Return $$$OK]]></Implementation>
</Method>

<Method name="Imprimir">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM = 0 
	Set Y  = "~"
	
	Set pCodOrcamento = $get(%request.Data("pCodOrcamento",1))
	Set YBED 					= $get(%request.Data("YBED",1))

	Set folder = $Piece($Get(^VARJasper(YM,YM,1)),Y,1)

	Set link = $$Start^VARJasperRun("VARAgendOrcamento")
	Set link = $$addUserParameter^VARJasperRun(link,"pCodOrcamento",pCodOrcamento)
	Set link = $$addUserParameter^VARJasperRun(link,"CompiledDir",folder)
	Set link = $$addParameter^VARJasperRun(link,YBED,1)
	Do ViewInForm^VARJasperRun(link,"Impressao",2)
	
	Return $$$OK]]></Implementation>
</Method>

<Method name="Enviar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM = 0 
	Set Y  = "~"
	;
	Set pCodOrcamento = $Get(%request.Data("pCodOrcamento",1))
	Set fCodOrcamento = $Replace(pCodOrcamento,"/","_")
	Set YBED 					= $Get(%request.Data("YBED",1))
	;
	Set objeto 				= $Get(^VAROrcamento(YM, pCodOrcamento, 1))
	Set codPaciente 	= $$$VAROrcamentoCodigodoPaciente(objeto)
	Set objMEDPatient = $Get(^MEDPatient(YM, codPaciente, 1))
	Set email 				= $ZConvert($$$MEDPatientEmail(objMEDPatient),"l")
	If (email = "") {
		Write "Paciente sem e-mail cadastrado."
		Return $$$OK	
	}
	;
	;Prepara a url da geração do pdf
	Set folder 	= $Piece($Get(^VARJasper(YM,YM,1)),Y,1)
	Set link 		= $$Start^VARJasperRun("VARAgendOrcamento")
	Set link 		= $$addUserParameter^VARJasperRun(link,"pCodOrcamento",pCodOrcamento)
	Set link 		= $$addUserParameter^VARJasperRun(link,"CompiledDir",folder)
	Set link		= $$addUserParameter^VARJasperRun(link,"debugMode","1")
	Set link		= $$addUserParameter^VARJasperRun(link,"dateTime",$ZDateTime($Horolog,3,1))
	Set link		= $$addUserParameter^VARJasperRun(link,"operatingUser",$Get(YBED))
	Set link		= $$addUserParameter^VARJasperRun(link,"namespace",$Get(YUCI))
	Set link		= $$addUserParameter^VARJasperRun(link,"imageWebAddress",$$$VARJasperImageWebAddress($Get(^VARJasper(YM,YM,1))))
	Set link		= $$addUserParameter^VARJasperRun(link,"isExplicitIdentification",$$isExplicitLicenseUserIdentification^COMSTARTZstart())
	Set link 		= $$addParameter^VARJasperRun(link,YBED,1)
	;
	;Gera o arquivo pdf
	Set tomcat							=	$Piece($Get(^VARJasper(YM,YM,1)),Y,5)
	Set tomcatport					= $Piece($Get(^VARJasper(YM,YM,1)),Y,6)
	Set tomcatportExternal	= $Piece($Get(^VARJasper(YM,YM,1)),Y,4)
  Set server 							= tomcat
  Set port 								= tomcatport
  Set url 								= $Piece(link,tomcatportExternal,2,$Length(link,tomcatportExternal))
	Set httprequest					=	##class(%Net.HttpRequest).%New()
	Set httprequest.Server	=	server
	Set httprequest.Port		=	port
	Set tSc 								= httprequest.Get(url) ; Aqui pode ser get, put, post, ...
	If $$$ISERR(tSc) {
		Write "Servidor de relatórios indisponível"
		Return $$$OK
	}
	Set arquivo = httprequest.HttpResponse.Data.Read()
	If ($Length(arquivo)=0) {
		Write "Erro na geração do relatório"
		Return $$$OK
	}
	;
	;Salva o arquivo temporário
	Set dname = $$GetDiretorioFisico^VARBRDiretorios(0,12)
	If ($Extract(dname, $Length(dname)) '= "\") {
		Set dname = dname _ "\"
	}
	Set dname = dname _ "orcamento" _ "\" 
	If ('##class(%File).DirectoryExists(dname)) {
		Do ##class(%File).CreateDirectoryChain(dname)
	}
	If ($$$isWINDOWS) {
		Set dname = $Replace(dname,"/","\")
	}Else{
		Set dname = $Replace(dname,"\","/")
	}	
	Set file=##class(%File).%New(dname_fCodOrcamento_".pdf")
	Do file.Open("WSN")
	Do file.Write(arquivo)
	Do file.Close()
	;
	If (file.Size <= 0) {
		Write "Erro na geração do arquivo."	
		Return $$$OK
	}
	;
	;Envia arquivo por Email
	Set objWWW0121 	= $Get(^WWW0121(YM, YM, 0, 1))
  Set objWWW012 	= $Get(^WWW012(YM, YM, 1))
  ;
  Set server 								= ##class(%Net.SMTP).%New()
  Set server.smtpserver 		= $$$WWW012TCPIPEMailServer(objWWW012)
  Set server.port 					= $$$WWW012PortNumberSMTP(objWWW012)
  Set auth									=	##class(%Net.Authenticator).%New()
  Set auth.UserName					=	$$$WWW012AutoEmailUsername(objWWW012)
  Set auth.Password					=	$$$WWW012AutoEmailPassword(objWWW012)
  ;
  Set server.authenticator 	= auth
  Set server.AuthFrom				=	auth.UserName
  ;
	Set msg 									= ##class(%Net.MailMessage).%New()
	Set From 									= server.authenticator.UserName
	Set msg.From 							= From
	;
	Do msg.To.Insert(email)
	Set msg.Subject  = $$$WWW0121LocationName(objWWW0121)_" - Orcamento"
	Set msg.IsBinary = 0
	Set msg.IsHTML	 = 1
	Do msg.AttachFile(dname, fCodOrcamento_".pdf", 0,"iso-8859-1",.count)
	;
	Set MSG = "<html><body><table cellpadding='0' cellspacing='0' border='0' align='center'><tr>"
  Set MSG = MSG _ "<td width='300' height='40px' colspan='2' align='center' style='font-family:arial;background-color: #c5f0df;border-top: 1px solid #cccccc;border-bottom: 1px solid #cccccc;'><br>"
  Set MSG = MSG _ $$$WWW0121LocationName(objWWW0121)_"<br><br></td>"
  Set MSG = MSG _ "<td width='300' colspan='2' align='center' style='font-family:arial;background-color: #c5f0df;border-top: 1px solid #cccccc;border-bottom: 1px solid #cccccc;'>Orcamento</td>"
  Set MSG = MSG _ "</tr><tr>"
  Set MSG = MSG _ "<td colspan='4' height='100'>"
	Set MSG = MSG _ "<table cellpadding='2' cellspacing='0' border='0'>"
  Set MSG = MSG _ "<tr>"
  Set MSG = MSG _ "<td style='font-family:arial;font-size:14px;text-align: left;' width='450'>Ola <b>"_$$$MEDPatientName(objMEDPatient)_"</b>,</td>"
  Set MSG = MSG _ "</tr><tr>"
  Set MSG = MSG _ "<td style='font-family:arial;font-size:14px;text-align: left;' width='450'>"
  Set MSG = MSG _ "&nbsp; Segue orcamento em anexo!<br>"
  Set MSG = MSG _ "</td></tr></table></td></tr><tr>"
  Set MSG = MSG _ "<td colspan='4' align='left' height='60' style='font-family:arial;font-size:12px;'>"
  Set MSG = MSG _ "Obrigado.</td></tr></table></body></html>"
	Do msg.TextData.Write(MSG)
	Set strStatus = server.Send(msg)
	If $$$ISERR(strStatus) {
		Write server.Error
		Return $$$OK
	}	
	;
	;Apagar arquivo
	Do ##class(%File).Delete(dname_fCodOrcamento_".pdf")
	Write $$$OK
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetConvenio">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set pCodConvenio	= $Get(%request.Data("pCodConvenio",1))
	Set pTake 				= $Get(%request.Data("pTake",1))
	Set pSkip 				= $Get(%request.Data("pSkip",1))
	Set pSearchValue 	= $Get(%request.Data("pSearchValue",1))
	Set pParticular 	= $Get(%request.Data("pParticular",1))
	Set pFlagConvenio = $Get(%request.Data("pFlagConvenio",1))
	Set pConvenio 		= $Get(%request.Data("pConvenio",1))
	
	If (pTake = "") Set pTake = 20
	
	Set pTake = pTake + pSkip
	Set pSkip = pSkip + 1
		
	Set meuSQL = "Select * From (Select top "_pTake_" CodigodaOrganizacao, Nome From SQLUser.FATOrganizacao "
	Set meuSQL = meuSQL_"Where Company = 0 And Ativo = 1 "
	IF (pCodConvenio '= "") {
		Set meuSQL = meuSQL_"And CodigodaOrganizacao = '"_pCodConvenio_"' "
	}Else{
		If (pFlagConvenio = 1) {
			Set meuSQL = meuSQL_"And ConvenioAtivo = 1 "
		}
		If (pParticular = 1) {
			Set meuSQL = meuSQL_"And Eparticular = 1 "
		}
		If (pParticular = 0) {
			Set meuSQL = meuSQL_"And NVL(Eparticular,0) = 0 "
		}
		If (pConvenio '= "") {
			Set meuSQL = meuSQL_"And OrganizacaoPai = '"_pConvenio_"' "
		}
		Set meuSQL = meuSQL_"Order By Nome "
	}
	Set meuSQL = meuSQL_") Where %VID Between "_pSkip_" and "_pTake_" "
	;
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",.meuSQL)	;
	Set arrayDados = []
	;
 	While (rSet.%Next()) {
		Set listDados = {}
		Do listDados.%Set("CodOrganizacao", rSet.%Get("CodigodaOrganizacao"))
		Do listDados.%Set("NomeOrganizacao", rSet.%Get("Nome"))
		Do arrayDados.%Push(listDados)
 	}
 	;
 	Do arrayDados.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetPacienteNaoIdentificado">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
		Set YM = 0 
		Set Y  = "~"

		Set pCodigo = "NI000001"
		If ($Data(^MEDPatient(0, pCodigo))) {
			Return
		}
		Set obj = ""
		Set $$$MEDPatientName(obj) 					= "Sem Identificação"
		Set $$$MEDPatientGender(obj) 				= "F"
		Set $$$MEDPatientDOB(obj) 					= +$Horolog
		Set $$$MEDPatientSSN(obj) 					= "00000000000"
		Set $$$MEDPatientMothersName(obj) 	= "Sem Identificação"
		set $$$MEDPatientCreatedDate(obj) 	= $Horolog
		Set strStatus = $$$Save("MEDPatient",pCodigo,obj,$$$YES)	
		Return]]></Implementation>
</Method>
</Class>
</Export>