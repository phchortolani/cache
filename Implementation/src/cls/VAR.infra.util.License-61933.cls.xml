<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.util.License">
<ClassType/>
<IncludeCode>WWWConst,VARLog</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject,%XML.Adaptor</Super>

<Method name="RecordEntry">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set $ZTrap = "ExceptionRegisterLicense"
	
	set now = $horolog
	set date = +now
	set time = $piece(now,",",2)
	set pidLicense = date_","_time
	
	set Y = "~"
	
	Do ..GetActiveSessions(.currentActiveAlphalincSessions)
	
	Set sessionsInPeriod = ..GetCurrentCSPSessionsInPeriod()
	Set sessionsActive	 = ..GetCurrentCSPSessionsActive()
	
	Set objLicense = ""_
						$System.License.LUConsumed()_Y_
						$System.License.LUAvailable()_Y_
						$System.License.LUMaxConsumed()_Y_
						$System.License.LUMinAvailable()_Y_
						$System.License.KeyLicenseUnits()_Y_
						$get(currentActiveAlphalincSessions)_Y_
						sessionsInPeriod_Y_
						sessionsInPeriod
	
	Set ^VARLicenseUsageLog(0,date,time,1) = objLicense
	
	Quit $$$OK
	
ExceptionRegisterLicense
	Set $Ztrap = ""
	$$$VARLOGERROR($zerror)
	Quit 0]]></Implementation>
</Method>

<Method name="GetCurrentCSPSessionsInPeriod">
<Description><![CDATA[[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Quit ..GetCacheCount(8)]]></Implementation>
</Method>

<Method name="GetCurrentCSPSessionsActive">
<Description><![CDATA[[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Quit ..GetCacheCount(6)]]></Implementation>
</Method>

<Method name="GetCacheCount">
<Description><![CDATA[[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCount:%Integer</FormalSpec>
<Implementation><![CDATA[	set result = ""
	
	set fileName = $zu(168)_"ShowCounts.txt"
	set strFile=##class(%Library.File).%New(fileName)
	open fileName:("NW"):10
	set previousIO=$IO
	use fileName
	do $ZUTIL(68,40,1) 
	
	Do $System.License.ShowCounts()
	
	use previousIO
	close fileName
 
	do strFile.Open("R")
	for i=1:1 {
		set intLength=100
		set strLine = strFile.Read(.intLength)
		quit:strFile.AtEnd
		if (( i - 3 ) = $get(pCount) ) {
			set result = $number($extract(strLine,1,7))
		}
	}
	do strFile.Close()
	
	quit result]]></Implementation>
</Method>

<Method name="GetActiveSessions">
<Description><![CDATA[[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;currentActiveAlphalincSessions:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	;-------------------------------------------------------------------------------
	; Return Current Session Numbers in an Array
	; 
	; ByRef arrActiveSessions (as global array)
	; OR
	; Global Ref. arrActiveSessions (ie. "^CacheTempCurrentSessions")
	; 
	; ByRef intCount (returns total number of open sessions)
	;
	; History:
	; 27-Feb-2009	FC		SESPE-759 Created
	;-------------------------------------------------------------------------------
	Set strStatus = $$$OK
	Set arrActiveSessions = ""
	Set intCount = $Get(intCount)
	
	// Alphalinc User Sessions
	// -----------------------
	for dteDay = +$horolog-1,+$horolog {  //sessions started yesterday or today only
		set idSession = ""
		for {
			set idSession = $order(^CacheTempSessionStart(dteDay,idSession))
			quit:idSession=""
			
			continue:'$data(^WWWUSER(0,idSession))           //invalid session id
			continue:'$data(^CacheTempSession(idSession))    //invalid session id
			continue:$listget(^CacheTempSession(idSession),2)'=$zu(5)  //count own namespce only
			continue:$data(^CacheTempSessionEnd(idSession))  //Session Ended
			continue:'$data(^CacheTempSessionLastAction(idSession))
			set ^zzFelipe($i(^zzFelipe)) = idSession
			set dteLastAction = $listget(^CacheTempSessionLastAction(idSession),1)
			
			if (+dteLastAction = +$horolog) && ($piece(dteLastAction,",",2) < ($piece($horolog,",",2)-900)) continue  //session not active
			if (+dteLastAction < +$horolog) && ($piece($horolog,",",2) > 900) continue  //session not active
			
			set intCount = intCount + 1
		}
	}
	
	// Alphalinc Web Service Sessions
	// ------------------------------
	try {
		do ##class(alWEB.WS.Session).ClearSessions()
		set sqlRS = ##class(%Library.ResultSet).%New()
	    if (sqlRS.Prepare("SELECT %ID FROM alWEB_WS.Session")) {
		    if (sqlRS.Execute()) {
			    while (sqlRS.Next()) {
				    set idSession = sqlRS.Get("ID")
				    if (idSession '= "") && (..ValidateSession(idSession) = 1) {
						set intCount = intCount + 1
						if $extract($get(arrActiveSessions)) = "^" {
							set @arrActiveSessions@("WS"_idSession)=""
						} else {
							set arrActiveSessions("WS"_idSession)=""
						}
				    }
			    }
		    }
	    }
	}
    catch strErro {
	    ;$$$CUSTOMERROR($zerror)
    }
    
    Set currentActiveAlphalincSessions = intCount
 
	Quit strStatus]]></Implementation>
</Method>

<Method name="ValidateSession">
<Description><![CDATA[[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	;-------------------------------------------------------------------------------
	; Validate web service session and count last MsgSequenceNo plus 1
	; 
	; History:
	; 31-Mar-2009	shobby	SR16446:	Validate that the webservice call came from an allowed IP address
	; 04-Feb-2008	shobby	SR16325:	Changed the sign of the 'overlay'
	;-------------------------------------------------------------------------------
	Set strErrorCode = ""
	Set strStatus = 1
	
	if +$get(SessionId) = 0 {
		set ErrorCode="#alW00005: Invalid Session Id" ;BR014564;25-Jan-2008
		Set strStatus = 0
	}
	if ##class(alWEB.WS.Utils).%ExistsId(SessionId) {
		set objSession = ##class(alWEB.WS.Utils).%OpenId(SessionId)
		if objSession ="" {
			set ErrorCode="#alW00005: Invalid Session Id"  ;BR014564;25-Jan-2008
			Set strStatus = 0
		}
		
		if (strStatus) {		
			//check for logout time
			set LogoutTime = ((objSession.ConnectDate*86400) +
			                   objSession.ConnectTime        +
			                   objSession.AutoLogoutSecs       )  //Date + Time + Seconds Alive
							 
			set CurrentTime = (($horolog*86400) + $piece($horolog,",",2))
			if (LogoutTime < (CurrentTime-100)) {  //session expired (100 secs overlay if validation is made to check for next call) ;SR16325
				set sc = ##class(alWEB.WS.Session).EndSession(SessionId)
				set ErrorCode="#alW00008: Session Expired"  ;BR014564;25-Jan-2008
				Set strStatus = 0
			}
		
			//check for general access
			if (strStatus) && (objSession.GrantAccess '= 1) {
				set ErrorCode="Login Failed"
				set objSession.FailedRequest=objSession.FailedRequest+1
				set sc = objSession.%Save()
				if objSession.FailedRequest>3 {
					set sc = ##class(alWEB.WS.Session).EndSession(SessionId)
					set ErrorCode="#alW00006: Session Terminated"  ;BR014564;25-Jan-2008
				}
				Set strStatus = 0
			}
		
			//check for sevice access  ;SR16266
			// SR17809 only check for WWWWSClients
			if (strStatus) && (ServiceName '= "") && ($get(^SysSetup("WSUsers"))'="@NM") {
				set Granted = $$$WWWWSClientGrantedServices($get(^WWWWSClient(0,objSession.ClientIdent,objSession.UserIdent,1)))
				if ('$find(Granted,ServiceName)) {
					set ErrorCode="#alW00011: No Permission For This Service" ;SR16266
					Set strStatus = 0
				}
			}
		
			//check for message sequence
			if (strStatus) && (objSession.MsgInSequence = 1) && ($get(MsgSequenceNo) '= 0) {
				if ($get(SetNextSeqNo) = 1) {  //set new sequence
					set objSession.MsgSequenceNo=MsgSequenceNo-1
					set objSession.FailedRequest=0  //reset failure
					set sc = objSession.%Save()
					if 'sc {
						set ErrorCode="#alW00009: Internal Error"  ;BR014564;25-Jan-2008
						Set strStatus = 0
					}
			
				} elseif (strStatus) && (+$get(MsgSequenceNo) '= (objSession.MsgSequenceNo + 1)) {  //wrong sequence
					set objSession.FailedRequest=objSession.FailedRequest+1
					set ErrorCode="Message Not In Sequence"
					set sc = objSession.%Save()
					if objSession.FailedRequest>3 {
						set sc = ##class(alWEB.WS.Session).EndSession(SessionId)
						set ErrorCode="#alW00006: Session Terminated"  ;BR014564;25-Jan-2008
					}
					Set strStatus = 0
			
				} elseif (strStatus) {  //save next seq number
					set objSession.MsgSequenceNo=MsgSequenceNo
					set objSession.FailedRequest=0  //reset failure
					set sc = objSession.%Save()
					if 'sc {
						set ErrorCode="#alW00009: Internal Error"  ;BR014564;25-Jan-2008
						Set strStatus = 0
					}
				}
			}
			kill objSession
		}
	}
	set ErrorCode="#alW00005: Invalid Session Id"  ;BR014564;25-Jan-2008
	
	$$$VARLOGERROR(ErrorCode)
	
	quit strStatus]]></Implementation>
</Method>
</Class>
</Export>