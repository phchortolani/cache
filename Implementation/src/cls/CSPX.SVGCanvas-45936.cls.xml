<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.SVGCanvas">
<Description><![CDATA[
Renders canvas for SVG-based editors.<br>
This class provides the common framework used by svg-based editors.
Subclasses provide the actual implmentation.]]></Description>
<ClassType/>
<IncludeCode>Ensemble</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Parameter name="CONTENTTYPE">
<Default>image/svg-xml</Default>
</Parameter>


<Parameter name="JSINCLUDES">
<Description><![CDATA[
Comma-delimited list of additional .js files that this page includes]]></Description>
</Parameter>

<Parameter name="WIDTH">
<Description><![CDATA[
Initial width of editor]]></Description>
<Default>2000</Default>
</Parameter>


<Parameter name="HEIGHT">
<Description><![CDATA[
Initial height of editor]]></Description>
<Default>2000</Default>
</Parameter>


<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// Avoid IE HTTP 1.1 bugs
	Set %response.HTTPVersion = "HTTP/1.0"
	
	// force output to be UTF-8
	Set %response.CharSet="UTF-8"

	// prevent session blocking
	Do %session.Unlock()
 	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Write "<?xml version=""1.0"" ?>",!

	&html<<svg 
			xmlns="http://www.w3.org/2000/svg"
			xmlns:xlink="http://www.w3.org/1999/xlink"
			id="svg" 
			onload="InitializeCanvas()" 
			zoomAndPan="disable" 
			>>

	Do ..DrawStyleSheet()
	Do ..DrawDefs()
	Do ..DrawScript()
	Do ..OnDrawCanvas()

	&html<</svg>>
	
	Do %response.Flush()

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawStyleSheet">
<Description><![CDATA[
Draw style sheet]]></Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// find svg font from config global
	Set tFont = $G(^Ens.SVGStyle("font-family"),"tahoma,verdana")

	Write "<style type=""text/css""><![CDATA[",!
	&html<
text, tspan {
  pointer-events: none;
  font-size: 17;
  font-family: #(tFont)#;
}
	>
	
	// let subclass do more work
	Do ..OnDrawStyleSheet()
	
	Write "]]]]><![CDATA[></style>>"
]]></Implementation>
</Method>

<Method name="OnDrawStyleSheet">
<Description><![CDATA[
Callback: draw additional style sheet definitions for this canvas]]></Description>
<ClassMethod>1</ClassMethod>
</Method>


<Method name="DrawDefs">
<Description><![CDATA[
Draw defs section]]></Description>
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
</Method>


<Method name="DrawScript">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// include files
	Write "<script type=""text/ecmascript"" xlink:href=""enssvg.js""/>",!
	
	For n = 1:1:$L(..#JSINCLUDES,",") {
		Write "<script type=""text/ecmascript"" xlink:href=""",$P(..#JSINCLUDES,",",n),"""/>",!
	}

	// common scripts
	Write "<script language=""text/javascript""><![CDATA[",!

	&js<

// inspector delimiters
var insDelim1 = '\x01';
var insDelim2 = '\x03';

var api = new Object();
var readOnlyFlag = false;
var canvasName = '#(..%ClassName(1))#';
	
function InitializeCanvas()
{
	// associate API methods with loading <div> in html parent
	api.getProperty = canvas_getProperty;
	api.setProperty = canvas_setProperty;
	api.getDocument = canvas_setDocument;
	api.setDocument = canvas_getDocument;
	api.invokeOperation = canvas_invokeOperation;
	
	api.raiseSelectEvent = canvas_raiseSelectEvent;
	api.raiseDocumentEvent = canvas_raiseDocumentEvent;

	// find loading div in outer html
	var loadingDiv = self.document.getElementById("loading");
	if (loadingDiv) {
		loadingDiv.api = api;
	}
	else {
		alert("ASSERT: loadingDiv not found");
	}
	
	// init canvas size
	setCanvasSize(#(..#WIDTH)#,#(..#HEIGHT)#);

	// init zoom
	setZoom(getCookie(canvasName,100));
	
	// test for additional init callback
	if (initCanvas) {
		initCanvas();
	}
	
	// for browser-version, notify container that we are done loading
	if (self.initEditor) {
		self.initEditor();
	}
}

// raise a *SELECT* event;
// proplist is a list of property values for inspector to show
// first property is Name of selected item
function canvas_raiseSelectEvent(proplist)
{
	var state = '';
	
	// each prop is of form:
	// Name:Type:Value\x01
	if (proplist) {
		for (var n = 0; n != proplist.length; n++) {
			state += proplist[n] + insDelim1;
		}
	}
	
	// place state into results div
	canvas_setResultsDiv(state);

	// raise event
	self.raiseEvent('SELECT');
}

// raise a *document* event;
// state is new document "state"
function canvas_raiseDocumentEvent(state)
{
	// place state into results div
	canvas_setResultsDiv(state);

	// raise inspector event
	self.raiseEvent('document');
}

// set the value of the results element for the external system to read.
function canvas_setResultsDiv(value)
{
	// find results div
	var results = self.document.getElementById("results");

	// place value into results
	// ignore type
	if (results) {
		results.innerHTML = value;
	}
}
	>

	Do ..OnDrawScript()

	Write "]]]]><![CDATA[></script>>"
]]></Implementation>
</Method>

<Method name="OnDrawScript">
<Description><![CDATA[
Callback: draw additional script definitions for this canvas]]></Description>
<ClassMethod>1</ClassMethod>
</Method>


<Method name="OnDrawCanvas">
<Description><![CDATA[
Draw main svg canvas]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
<!-- canvas -->
<svg id="canvasSVG" x="0" y="0" width="100%" height="100%">
</svg>
>
]]></Implementation>
</Method>
</Class>
</Export>