<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.webservice.alphalinc.ObtemRecebimentos">
<Description><![CDATA[Esta classe implementa todos os web services a serem utilizados pela Integração de Recebimento entre Alphalinc e InfoSaúde, especificamente para o cliente Heva.]]></Description>
<ClassType/>
<Import>VAR.common.soap,alWEB.WS,VAR.infra.integracao</Import>
<IncludeCode>VARLog,MEDConst,COMAlphaWeb,COMSYS,WWWSYS,VARErros</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService</Super>

<Parameter name="NAMESPACE">
<Default>http://tempuri.org</Default>
</Parameter>

<Parameter name="SERVICENAME">
<Description><![CDATA[Name of the WebService.]]></Description>
<Default>ObtemRecebimentos</Default>
</Parameter>

<Parameter name="SOAPVERSION">
<Description><![CDATA[This is the SOAP version supported by the service.]]></Description>
<Default>1.1</Default>
</Parameter>

<Parameter name="MAXIMOREGISTROSPORVEZ">
<Type>%Integer</Type>
<Default>20</Default>
</Parameter>

<Method name="ObterRecebimentos">
<Description><![CDATA[Método Retorna Os Recebimentos Pendentes de Integrar. <BR>
<BR>
Parâmetros:<BR><UL>
<LI>SessionId
</UL>
<BR>
Retorno:<BR><UL>
<LI>Recebimentos - Contém uma Lista de Recebimentos a serem integrados
</UL>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,IdInicio:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>ResultadoRecebimento</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	set resultado = ##class(ResultadoRecebimento).%New()
 	set resultado.Recebimentos  = ##class(%ListOfObjects).%New()

	set strStatus = ##class(Session).ValidateSession(SessionId,
		MsgSequence, .strError, , ..%ClassName()_"."_$$$MethodName)
	if ('$$$ISOK(strStatus)) {
		set strStatus = $$$MakeStatus(strError)
	}

	if ($$$ISOK(strStatus)) {
		set %("%KEY", "YBED") = "WEBSERVICE"
		set %("%KEY", "YPWD") = ""
		set %("%KEY", "YM") = 0

		$$$VAR
		
		set SPRACHE = "PT"

	    set entidade = ##class(GerenciaFilaPendencias).%GetParameter("ENTIDADERECEBIMENTO")
  	    &sql(DECLARE cursorRecebimento CURSOR FOR
        	 SELECT   VARDadoAIntegrar.ID,
			          ReceiptNumber, Location, TypeOfReceiving, Supplier,
					  Notes, Status, InvoiceNumber,
					  FREE3, InvoiceDate, InvoiceTotal, SummaryTotal,
					  CreatedBy, CreatedDate, ProcessedBy, ProcessedDate,
					  INKOND.DiscountPaymentDays, INKOND.FREE1, INKOND.FREE2,
					  INREC.FREE14, INREC.FREE20, FREE15, FREE21,
			          FREE22, INREC.FREE34, INREC.FREE35, INREC.FREE36, INREC.FREE37,
			          INREC.FREE38, INREC.SummaryTotal, 
			          VARDadoAIntegrar.OrdemNaFila, VARDadoAIntegrar.AtualizadoEm
			 INTO	  :IdIntegracao, :NoRecebimento, :LocalRecebimento,
			 		  :TipoRecebimento, :Fornecedor, :Observacoes, :Status,
			 		  :NotaFiscal, :NoSerieNF, :DataEmissao, :TotalNF,
			 		  :TotalRecebimento, :CriadoPor, :CriadoEm, :ProcessadoPor,
			 		  :ProcessadoEm, :DiasParaPagamento, :NumParcelas,
			 		  :DiasEntreParcelas, :CodFormaPagamento, :NaturezaOperacao,
					  :DataPgto, :ICMS, :PercentualICMS, :BaseCalculoICMS, 
					  :ValorICMSSubstituicao, :BaseCalculoICMSSubstituicao, :ValorSeguro, 
					  :DespesasAcessorias, :ValorTotalProdutos,
					  :OrdemNaFila, :AtualizadoEm
			 FROM	  SQLUser.VARDadoAIntegrar, SQLUser.INREC, SQLUser.INKOND
			 WHERE    VARDadoAIntegrar.Entidade = :entidade
			 AND      VARDadoAIntegrar.Chave1Entidade =* INREC.ReceiptNumber
			 AND      VARDadoAIntegrar.Integrado = 'N'
			 AND      INKOND.TermFlag = INREC.FREE14
			 AND 	  INREC.TYPE = 2
			 AND 	  INREC.STATUS = 1
			 ORDER BY VARDadoAIntegrar.OrdemNaFila)
	    &sql(OPEN cursorRecebimento)
	    &sql(FETCH cursorRecebimento)

		if ($length(IdInicio) > 0) {
			while (SQLCODE = 0) {
				if (IdIntegracao = IdInicio) {
					&sql(FETCH cursorRecebimento)
					quit
				}

				&sql(FETCH cursorRecebimento)
			}
		}

	    while ('SQLCODE) {
			set recebimento = ##class(Recebimento).%New()
			set fornecedorInfoSaude = ##class(ConversaoInfoSaude).GetFornecedorInfoSaude(Fornecedor)
			set recebimento.IdIntegracao = IdIntegracao
			set recebimento.NoRecebimento = NoRecebimento
			set recebimento.LocalRecebimento = LocalRecebimento
			set recebimento.TipoRecebimento = TipoRecebimento
			set recebimento.Fornecedor = fornecedorInfoSaude
			set recebimento.Observacoes = Observacoes
			set recebimento.Status = Status
			set recebimento.NotaFiscal = NotaFiscal
			set recebimento.NoSerieNF = NoSerieNF
			set recebimento.DataEmissao = DataEmissao
			set recebimento.TotalNF = TotalNF
			set recebimento.TotalRecebimento = TotalRecebimento
			set recebimento.CriadoPor = CriadoPor
			set recebimento.CriadoEm = $zdatetime(CriadoEm, 3, 1)
			set recebimento.ProcessadoPor = ProcessadoPor
			set recebimento.ProcessadoEm = $zdatetime(ProcessadoEm, 3, 1)
			set recebimento.FormaPagamento = DiasParaPagamento
			set recebimento.CodFormaPagamento = CodFormaPagamento
			set recebimento.NaturezaDaOperacao = NaturezaOperacao
			set recebimento.DataPagamento = DataPgto
			set recebimento.ICMS = ICMS
			set recebimento.PercentualICMS = PercentualICMS
			set recebimento.BaseCalculoICMS = BaseCalculoICMS
			set recebimento.BaseCalculoICMSSubstituicao = BaseCalculoICMSSubstituicao
			set recebimento.ValorICMSSubstituicao = ValorICMSSubstituicao
			set recebimento.ValorSeguro = ValorSeguro
			set recebimento.DespesasAcessorias = DespesasAcessorias
			set recebimento.OrdemNaFila = $zdatetime(OrdemNaFila, 3, 1)
			set recebimento.AtualizadoEm = $zdatetime(AtualizadoEm, 3, 1)
			do ..PreencheRecebimento(.recebimento, NoRecebimento)
			if (+NumParcelas > 0) && (+TotalRecebimento > 0) 
				&& (+recebimento.NotaFiscal > 0) && ($length(recebimento.NoSerieNF) >0) {
				do ..PreencheParcelas(TotalRecebimento, NumParcelas, DiasEntreParcelas, NoRecebimento,.recebimento)
				do resultado.Recebimentos.Insert(recebimento)
				if (resultado.Recebimentos.Count() >= ..#MAXIMOREGISTROSPORVEZ) quit
			}

	        &sql(FETCH cursorRecebimento)
	    }

	    &sql(CLOSE cursorRecebimento)
	    set strStatus = $$$OK
	}

    if ($$$ISOK(strStatus)) {
        set resultado.CodigoRetorno = resultado.%GetParameter("CODIGORETORNOSUCESSO")
        set resultado.MensagemErro = ""
    }
    else {
        set resultado.CodigoRetorno = resultado.%GetParameter("CODIGORETORNOERROCONHECIDO")
        set resultado.MensagemErro = $$DecodeError^COMUtilError(strStatus)
    }

 	quit resultado]]></Implementation>
</Method>

<Method name="PreencheParcelas">
<ClassMethod>1</ClassMethod>
<FormalSpec>TotalRecebimento,NumParcelas,DiasEntreParcelas,NoRecebimento,&amp;recebimento:Recebimento</FormalSpec>
<Implementation><![CDATA[	do ..GetValorParcelas(TotalRecebimento, NumParcelas, .MaiorParcela, 
		.DemaisParcelas, .PercentDemaisParcelas, .PercentMaiorParcela)	

	for i = 1:1:NumParcelas {
		set parcela = ##class(RecebimentoParcelas).%New()
		set parcela.NoDiasAtePgto = $piece(DiasEntreParcelas, ",", i)
		set parcela.NoParcela = i
		set parcela.NoRecebimento = NoRecebimento
		set parcela.NotaFiscal = recebimento.NotaFiscal
		set parcela.SerieNF    = recebimento.NoSerieNF

		if (i = 1) {
			set parcela.Porcentagem = PercentMaiorParcela
			set parcela.ValorParcela = MaiorParcela
		}
		else {
			set parcela.Porcentagem = PercentDemaisParcelas
			set parcela.ValorParcela = DemaisParcelas
		}

	 	do recebimento.Parcelas.Insert(parcela)			
	}]]></Implementation>
</Method>

<Method name="GetValorParcelas">
<ClassMethod>1</ClassMethod>
<FormalSpec>TotalRecebimento,NumParcelas,&amp;MaiorParcela,&amp;DemaisParcelas,&amp;PercentDemaisParcelas,&amp;PercentMaiorParcela</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if (NumParcelas = 0 ) {
		quit $$$MakeStatus("%1", "Imposível divisão por zero - O Número de Parcelas deve ser maior que zero")
	}
	set perc = 100/NumParcelas
	set PercentDemaisParcelas = $Normalize(perc,2)
	set resto = 100 - (PercentDemaisParcelas * NumParcelas)
	set PercentMaiorParcela = PercentDemaisParcelas + resto

	set DemaisParcelas = TotalRecebimento * (PercentDemaisParcelas/100)
	set MaiorParcela = TotalRecebimento * (PercentMaiorParcela/100)]]></Implementation>
</Method>

<Method name="ObterEstornoRecebimentos">
<Description><![CDATA[Método Retorna Os Recebimentos Pendentes de Integrar. <BR>
<BR>
Parâmetros:<BR><UL>
<LI>SessionId
</UL>
<BR>
Retorno:<BR><UL>
<LI>Recebimentos - Contém uma Lista de Recebimentos a serem estornados
</UL>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,IdInicio:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>ResultadoRecebimento</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	set resultado = ##class(ResultadoRecebimento).%New()
 	set resultado.Recebimentos  = ##class(%ListOfObjects).%New()
 	
	set strStatus = ##class(Session).ValidateSession(SessionId,
		MsgSequence, .strError, , ..%ClassName()_"."_$$$MethodName)
	if ('$$$ISOK(strStatus)) {
		set strStatus = $$$MakeStatus(strError)
	}
	if ($$$ISOK(1)) {
		set %("%KEY", "YBED") = "WEBSERVICE"
		set %("%KEY", "YPWD") = ""
		set %("%KEY", "YM") = 0

		$$$VAR
	    
		set SPRACHE = "PT"

	    set entidade = ##class(GerenciaFilaPendencias).%GetParameter("ENTIDADERECEBIMENTO")
  	    &sql(DECLARE cursorEstornoRecebimento CURSOR FOR
  	    	 SELECT   VARDadoAIntegrar.ID,
			          ReceiptNumber, FREE29, ProcessedDate, ReceiptSourceNo,
  	    		      VARDadoAIntegrar.OrdemNaFila, 
			          VARDadoAIntegrar.AtualizadoEm
  	    	 INTO     :IdIntegracao, :NoEstorno, :Justificativa, :EstornadoEm, :Recebimento,
  	    	 		  :OrdemNaFila, :AtualizadoEm
			 FROM	  SQLUser.VARDadoAIntegrar, SQLUser.INREC
			 WHERE    VARDadoAIntegrar.Entidade = :entidade
			 AND      VARDadoAIntegrar.Chave1Entidade =* INREC.ReceiptNumber
			 AND      VARDadoAIntegrar.Integrado = 'N'
			 AND 	  INREC.TYPE = 5
			 AND 	  INREC.STATUS = 1
			 ORDER BY VARDadoAIntegrar.OrdemNaFila)
	    &sql(OPEN cursorEstornoRecebimento)
	    &sql(FETCH cursorEstornoRecebimento)

		if ($length(IdInicio) > 0) {
			while (SQLCODE = 0) {
				if (IdIntegracao = IdInicio) {
					&sql(FETCH cursorEstornoRecebimento)
					quit
				}

				&sql(FETCH cursorEstornoRecebimento)
			}
		}

	    while ('SQLCODE) {
			set recebimento = ##class(Recebimento).%New()
			set LocalRecebimento = ""
			set TipoRecebimento  = "" 
			set Fornecedor  = "" 
			set Observacoes  = "" 
			set Status  = "" 
			set NotaFiscal  = "" 
			set NoSerieNF  = "" 
			set DataEmissao  = "" 
			set TotalNF  = "" 
			set TotalRecebimento  = ""  
			set CriadoPor  = ""  
			set CriadoEm  = ""  
			set ProcessadoPor  = "" 
			set ProcessadoEm  = ""  
			set DiasParaPagamento  = ""  
			set NumParcelas  = "" 
			set DiasEntreParcelas  = ""  
			set CodFormaPagamento  = ""  
			set NaturezaOperacao  = "" 
			set DataPgto  = "" 
			set ICMS  = ""  
			set PercentualICMS  = ""
			
			&sql(
			 SELECT   ReceiptNumber, Location, TypeOfReceiving, Supplier,
					  Notes, Status, InvoiceNumber,
					  FREE3, InvoiceDate, InvoiceTotal, SummaryTotal,
					  CreatedBy, CreatedDate, ProcessedBy, ProcessedDate,
					  INKOND.DiscountPaymentDays, INKOND.FREE1, INKOND.FREE2,
					  INREC.FREE14, INREC.FREE20, FREE15, FREE21,
			          FREE22 			          
			 INTO	  :NoRecebimento, :LocalRecebimento,
			 		  :TipoRecebimento, :Fornecedor, :Observacoes, :Status,
			 		  :NotaFiscal, :NoSerieNF, :DataEmissao, :TotalNF,
			 		  :TotalRecebimento, :CriadoPor, :CriadoEm, :ProcessadoPor,
			 		  :ProcessadoEm, :DiasParaPagamento, :NumParcelas,
			 		  :DiasEntreParcelas, :CodFormaPagamento, :NaturezaOperacao,
					  :DataPgto, :ICMS, :PercentualICMS					  
			 FROM	  SqlUser.INREC, SQLUser.INKOND
			 WHERE    INREC.ReceiptNumber = :Recebimento
			 AND      INKOND.TermFlag = INREC.FREE14
			 AND 	  INREC.TYPE = 2
			 AND 	  INREC.STATUS = 4)
			
			set recebimento.IdIntegracao = IdIntegracao
			set recebimento.NoRecebimento = NoEstorno 
			set recebimento.LocalRecebimento = LocalRecebimento
			set recebimento.TipoRecebimento = TipoRecebimento
			set fornecedorInfoSaude = ##class(ConversaoInfoSaude).GetFornecedorInfoSaude(Fornecedor)			
			set recebimento.Fornecedor = fornecedorInfoSaude
			set recebimento.Observacoes = Observacoes
			set recebimento.Status = Status
			set recebimento.NotaFiscal = NotaFiscal
			set recebimento.NoSerieNF = NoSerieNF
			set recebimento.DataEmissao = DataEmissao
			set recebimento.TotalNF = TotalNF
			set recebimento.TotalRecebimento = TotalRecebimento
			set recebimento.CriadoPor = CriadoPor
			set recebimento.CriadoEm =$zdatetime(CriadoEm,3,1) 
			set recebimento.ProcessadoPor = ProcessadoPor
			set recebimento.ProcessadoEm = $zdatetime(ProcessadoEm,3,1)
			set recebimento.Justificativa = Justificativa
			set recebimento.EstornadoEm = $zdatetime(EstornadoEm,3,1)
			set recebimento.RecebimentoEstornado = NoRecebimento
			set recebimento.OrdemNaFila = $zdatetime(OrdemNaFila, 3, 1)
			set recebimento.AtualizadoEm = $zdatetime(AtualizadoEm, 3, 1)
			do ..PreencheRecebimento(.recebimento, NoRecebimento)
			if (+NumParcelas > 0) && (+TotalRecebimento > 0) {	
				do ..PreencheParcelas(TotalRecebimento, NumParcelas, DiasEntreParcelas, NoRecebimento, .recebimento)
				do resultado.Recebimentos.Insert(recebimento)
				if (resultado.Recebimentos.Count() > ..#MAXIMOREGISTROSPORVEZ) quit
			}
	        &sql(FETCH cursorEstornoRecebimento)
	    }

	    &sql(CLOSE cursorEstornoRecebimento)

	    if (SQLCODE) quit $$$ERROSQL(SQLCODE)
	    set strStatus = $$$OK
	}

    if ($$$ISOK(strStatus)) {
        set resultado.CodigoRetorno = resultado.%GetParameter("CODIGORETORNOSUCESSO")
        set resultado.MensagemErro = ""
    }
    else {
        set resultado.CodigoRetorno = resultado.%GetParameter("CODIGORETORNOERROCONHECIDO")
        set resultado.MensagemErro = $$DecodeError^COMUtilError(strStatus)
    }

	quit resultado]]></Implementation>
</Method>

<Method name="ConfirmaIntegracao">
<Description><![CDATA[Método para confirmar a integração dos recebimentos. <BR>
<BR>
Parâmetros:<BR><UL>
<LI>NoRecebimento (obrigatório) - Número do Recebimento
</UL>
<BR>
Retorno:<BR><UL>
<LI>Resultado - Resultado Padrão
</UL>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,AtualizadoEm:%TimeStamp,NoRecebimento:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>Resultado</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	set resultado = ##class(Resultado).%New()

	set strStatus = ##class(Session).ValidateSession(SessionId,
		MsgSequence, .strError, , ..%ClassName()_"."_$$$MethodName)
	if ('$$$ISOK(strStatus)) {
		set strStatus = $$$MakeStatus(strError)
	}

	if ($$$ISOK(strStatus)) {
		set %("%KEY", "YBED") = "WEBSERVICE"
		set %("%KEY", "YPWD") = ""
		set %("%KEY", "YM") = 0

		$$$VAR

		set SPRACHE = "PT"

		set strStatus = ##class(GerenciaFilaPendencias).ConfirmaIntegracao(
			##class(GerenciaFilaPendencias).%GetParameter("ENTIDADERECEBIMENTO"),
			AtualizadoEm,
			NoRecebimento,
			##class(GerenciaFilaPendencias).%GetParameter("CHAVEVAZIA"),
			##class(GerenciaFilaPendencias).%GetParameter("CHAVEVAZIA"),
			##class(GerenciaFilaPendencias).%GetParameter("CHAVEVAZIA"),
			##class(GerenciaFilaPendencias).%GetParameter("CHAVEVAZIA"))
	}

    if ($$$ISOK(strStatus)) {
        set resultado.CodigoRetorno = resultado.%GetParameter("CODIGORETORNOSUCESSO")
        set resultado.MensagemErro = strStatus_""
    }
    else {
        set resultado.CodigoRetorno = resultado.%GetParameter("CODIGORETORNOERROCONHECIDO")
        set resultado.MensagemErro = $$DecodeError^COMUtilError(strStatus)
    }

 	quit resultado]]></Implementation>
</Method>

<Method name="ForcaIntegracao">
<ClassMethod>1</ClassMethod>
<FormalSpec>NoRecebimento:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[	$$$VAR

	quit ##class(GerenciaFilaPendencias).RegistraEvento(
		##class(GerenciaFilaPendencias).%GetParameter("ENTIDADERECEBIMENTO"),
		NoRecebimento,
		##class(GerenciaFilaPendencias).%GetParameter("CHAVEVAZIA"),
		##class(GerenciaFilaPendencias).%GetParameter("CHAVEVAZIA"),
		##class(GerenciaFilaPendencias).%GetParameter("CHAVEVAZIA"),
		##class(GerenciaFilaPendencias).%GetParameter("CHAVEVAZIA"),
		##class(GerenciaFilaPendencias).%GetParameter("ACAOPROCESSAR"))]]></Implementation>
</Method>

<Method name="PreencheRecebimento">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;recebimento:Recebimento,NoRecebimento:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set codigo = NoRecebimento
    do ..PreencheDescontoNota(.recebimento, NoRecebimento)

    &sql(DECLARE cursorRecebimentoLinha CURSOR FOR
         SELECT   line.ReceiptNumber, line.LineNumber, line.Order1,
				  line.OrderLine, line.Location, line.Item,
				  line.ItemDescription, line.OrderQuantity,
				  line.OrderedUnit, line.TotalCost, line.Supplier,
				  line.LotNumber, line.Brand, line.ExpirationDate,
				  line.StockLocation,
				  (inaufp.Quantity - inaufp.IncomingGoodsQuantity) as quantidade
		 INTO	  :NoRecebimento, :Linha, :OrdemCompra,
		 		  :LinhaOrdemCompra, :LocalRecebimento, :NoItem,
		 		  :ItemDescricao, :QuantidadeComprada, 
		 		  :UnidadeComprada, :CustoTotal, :Fornecedor, 
		 		  :NoLote, :Marca, :Validade, 
		 		  :LocalEstoque, 
		 		  :quantidadeEstorno
		 		  FROM	  SqlUser.INRECLine line, SqlUser.inaufp inaufp
          WHERE   line.ReceiptNumber = :codigo
	      AND 	  inaufp.OrderNo = line.Order1
	      AND 	  inaufp.ItemNumber= line.Item)

    &sql(OPEN cursorRecebimentoLinha)
    &sql(FETCH cursorRecebimentoLinha)
    while ('SQLCODE) {
	   	if (Linha#1=0){
		   	do ..GetValoresINAvgCost(NoItem, .custoMedioAnterior,
		    	.valorUltimoRecebimento)
	    
			set linhaRecebimento = ##class(RecebimentoLinha).%New()
			set linhaRecebimento.NoRecebimento = NoRecebimento
			set linhaRecebimento.CustoTotal = CustoTotal
			set fornecedorInfoSaude = ##class(ConversaoInfoSaude).GetFornecedorInfoSaude(Fornecedor)			
			set linhaRecebimento.Fornecedor = fornecedorInfoSaude
			set linhaRecebimento.ItemDescricao = ItemDescricao
			set linhaRecebimento.Linha	= Linha
			set linhaRecebimento.LinhaOrdemCompra = LinhaOrdemCompra
			set linhaRecebimento.LocalEstoque = LocalEstoque
			set linhaRecebimento.LocalRecebimento = LocalRecebimento
			set linhaRecebimento.Marca = Marca
			set linhaRecebimento.NoItem = NoItem
			set linhaRecebimento.NoLote = NoLote
			set linhaRecebimento.OrdemCompra = OrdemCompra
			set linhaRecebimento.QuantidadeComprada = QuantidadeComprada
			set linhaRecebimento.UnidadeComprada = UnidadeComprada
			set linhaRecebimento.Validade = Validade
			set linhaRecebimento.CustoMedioAnterior = custoMedioAnterior
			set linhaRecebimento.ValorUltimoRecebimento = valorUltimoRecebimento
			set linhaRecebimento.QuantidadeAposEstorno = quantidadeEstorno
			do ..PreencheDescontos(.linhaRecebimento)
			do recebimento.LinhaInsert(linhaRecebimento)
	   	}
        &sql(FETCH cursorRecebimentoLinha)
    }
	
    &sql(CLOSE cursorRecebimentoLinha)
    if (SQLCODE) quit $$$ERROSQL(SQLCODE)]]></Implementation>
</Method>

<Method name="GetValoresINAvgCost">
<ClassMethod>1</ClassMethod>
<FormalSpec>Item,&amp;CustoMedioAnterior,&amp;ValorUltimoRecebimento</FormalSpec>
<Implementation><![CDATA[	set CustoMedioAnterior = 0 
	set ValorUltimoRecebimento = 0 	

	&sql(DECLARE cursorRecebimentoINAvgCost CURSOR FOR
         SELECT   CurrentAvgCost, IncomingGoodsCost
         INTO	  :CustoMedioAnterior, :ValorUltimoRecebimento
         FROM	  SqlUser.INAvgCost 
         WHERE	  item = :Item
         GROUP BY ID
         HAVING   ID = MAX(ID))
    &sql(OPEN cursorRecebimentoINAvgCost)
    &sql(FETCH cursorRecebimentoINAvgCost)
    &sql(CLOSE cursorRecebimentoINAvgCost)
    if (SQLCODE) quit $$$ERROSQL(SQLCODE)]]></Implementation>
</Method>

<Method name="PreencheDescontos">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;linhaRecebimento:RecebimentoLinha</FormalSpec>
<Implementation><![CDATA[	set linhaRecebimento.PrecoComDesconto = 0
	set Item = linhaRecebimento.NoItem  
	set NoRecebimento = linhaRecebimento.NoRecebimento
	&sql(DECLARE cursorRecebimentoSummary CURSOR FOR
      SELECT    LineNumber,Item, DiscountType, LineType, AverageCost,Status,
		        Sum(CostAfterDiscount) as TotalAposDesconto,
		        Sum(DiscountRate)as TotalDesconto,
		        UnitCost, ReceivedUnit, UnitQtyReceived,
		        FREE1, FREE2, FREE3, FREE4, FREE5, FREE6, FREE7
	  INTO 		:Linha, :NoItem, :TipoDesconto, :TipoLinha, :CustoMedio, :Status,
		        :PrecoComDesconto,
		        :ValorDesconto,
		        :CustoUnitario, :UnidadeRecebida,:UnitQtyReceived,
		        :CodigoItemFornecedor, :DescricaoItemFornecedor, :CodigoNCMItem, 
		        :BaseCalculoICMSProduto, :ValorCalculoICMSProduto, :AliquotaICMSProduto, 
		        :CodigoFiscalOperacaoItem 
	  FROM 		SqlUser.INRECSummary summ
	  WHERE   	summ.ReceiptNumber = :NoRecebimento
	  AND     	(summ.Item = :Item)
	  GROUP BY 	Item, DiscountType, LineType)
	  
    &sql(OPEN cursorRecebimentoSummary)
    &sql(FETCH cursorRecebimentoSummary)
    while ('SQLCODE) {
		if (Linha#1=0){
			set linhaRecebimento.CustoUnitario = CustoUnitario
			set linhaRecebimento.UnidadeRecebida = UnidadeRecebida
			set linhaRecebimento.QuantidadeRecebida = UnitQtyReceived  
		}
		else{
		    if (TipoLinha = 4){				
				set linhaRecebimento.FreteProduto = ValorDesconto
			}
		    if (TipoLinha = 5){
				set linhaRecebimento.AcrescimoProduto = ValorDesconto
			}
		    if (TipoLinha = 1){			   
				///ToDo mudar para pegar deconto em % ou R$
				If (TipoDesconto = 1){
					set linhaRecebimento.DescontoProduto = PrecoComDesconto
				}
				else{
					set linhaRecebimento.DescontoProduto = ValorDesconto
				}
		    }
		    if (TipoLinha = 3){
			    If (TipoDesconto = 0){
		    		set linhaRecebimento.IPIProduto = ValorDesconto
			    }
		    	If (TipoDesconto = 1){
		    		set linhaRecebimento.PercentualIPIProduto = ValorDesconto
		    		set linhaRecebimento.IPIProduto = PrecoComDesconto
		    	}
		    }
		}
		set linhaRecebimento.PrecoComDesconto =linhaRecebimento.PrecoComDesconto + PrecoComDesconto
		set linhaRecebimento.Status = Status
		set linhaRecebimento.CustoMedio = CustoMedio
		set linhaRecebimento.CodigoItemFornecedor = CodigoItemFornecedor
		set linhaRecebimento.DescricaoItemFornecedor = DescricaoItemFornecedor
		set linhaRecebimento.CodigoNCMItem = CodigoNCMItem
		set linhaRecebimento.BaseCalculoICMSProduto = BaseCalculoICMSProduto
		set linhaRecebimento.ValorCalculoICMSProduto = ValorCalculoICMSProduto
		set linhaRecebimento.AliquotaICMSProduto = AliquotaICMSProduto
		set linhaRecebimento.CodigoFiscalOperacaoItem = CodigoFiscalOperacaoItem
        &sql(FETCH cursorRecebimentoSummary)
    }  
   	&sql(CLOSE cursorRecebimentoSummary)
    if (SQLCODE) quit $$$ERROSQL(SQLCODE)]]></Implementation>
</Method>

<Method name="PreencheDescontoNota">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;recebimento:Recebimento,NoRecebimento:%String</FormalSpec>
<Implementation><![CDATA[	&sql(DECLARE cursorRecebimentoSummary1 CURSOR FOR
      SELECT 	LineNumber,Item, DiscountType, LineType, 
      			Sum(CostAfterDiscount) as TotalAposDesconto,
        		Sum(DiscountRate)as TotalDesconto,
        		DiscountCode
      INTO 		:Linha, :NoItem, :TipoDesconto, :TipoLinha,
        	 	:ValorTaxaDescontoNota, 
        	 	:ValorDesconto, 
        	 	:CodDesconto
	  FROM 		SqlUser.INRECSummary
	  WHERE   	ReceiptNumber = :NoRecebimento
	  AND     	(Item is null)
	  GROUP BY 	Item, DiscountType, LineType)
    &sql(OPEN cursorRecebimentoSummary1)
    &sql(FETCH cursorRecebimentoSummary1)
    while ('SQLCODE) {
		if (Linha#1=0){
		    if (TipoLinha = 4){				
				set recebimento.TipoFrete = CodDesconto
		    	set recebimento.FreteNota = ValorDesconto
			}
		    if (TipoLinha = 5){
				set recebimento.AcrescimoNota = ValorDesconto
			}
		    if (TipoLinha = 1){
			    If (TipoDesconto = 0){
					set recebimento.DescontoNota = ValorDesconto
			    }
			    If (TipoDesconto = 1){
					set recebimento.PercentualDescontoNota = ValorDesconto
					set recebimento.DescontoNota = ValorTaxaDescontoNota
			    }
			}
			set recebimento.ValorDescontoAcrescimoNota  = 
				recebimento.ValorDescontoAcrescimoNota + ValorTaxaDescontoNota
		}
    	 &sql(FETCH cursorRecebimentoSummary1)
    }  
   	&sql(CLOSE cursorRecebimentoSummary1)
    if (SQLCODE) quit $$$ERROSQL(SQLCODE)]]></Implementation>
</Method>
</Class>
</Export>