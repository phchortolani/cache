<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsEntMsgTablePane">
<Description><![CDATA[
Specialized pane for displaying a list of messages.]]></Description>
<ClassType/>
<IncludeCode>EnsUI</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>CSPX.EnsMsgTablePane</Super>
<System>3</System>

<Parameter name="IDCOL">
<Description><![CDATA[
Name of ID Column if "More Data" link is to be offered ($NextID variable must be supported in CreateResultSet() also)]]></Description>
<Default>ID</Default>
</Parameter>


<Property name="Systems">
<Description><![CDATA[
Array of System Monitor address structures]]></Description>
<MultiDimensional>1</MultiDimensional>
</Property>


<Method name="CreateResultSet">
<FormalSpec>&amp;pID:%String,&amp;pRS:%ResultSet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	#; if not an explicit execute request (or history), skip it
	If '$D(%request.Data("$EXEC",1)) {
		Set pRS = $$$NULLOREF
		Quit $$$OK
	}
	#; get request parms via object
	Set tFilterObj = ##class(CSPX.EnsMsgFilterForm).CreateInstance(.pID)
	Set tNextId=$G(%request.Data("$NextID",1))
 w:$G(^Ens.Debug("UtilEnsMessages","terms")) "terms count="_tFilterObj.%Terms.Count()_", name='"_tFilterObj.%Name_"',tNextId="_tNextId_"<br>"
	Set pID(2)=tFilterObj, pID(3)=tNextId

	Set tSubmitBtn=$G(%request.Data("$SUBMITBTN",1))
	If tSubmitBtn="$AUTOFORM_ShowDups" {
		Set pRS = ##class(%ResultSet).%New($$$CurrentClass_":EnumerateDups")
		Quit $$$OK
	}
	ElseIf tSubmitBtn="$AUTOFORM_ShowGaps" {
		Set pRS = ##class(%ResultSet).%New($$$CurrentClass_":EnumerateGaps")
		Quit $$$OK
	}
	ElseIf tSubmitBtn="$AUTOFORM_ShowLates" {
		Set pRS = ##class(%ResultSet).%New($$$CurrentClass_":EnumerateLates")
		Quit $$$OK
	}
	&html<<input type='hidden' name='Status' value='#(tFilterObj.Status)#'>>
	&html<<input type='hidden' name='StartTime' value='#(tFilterObj.StartTime)#'>>
	&html<<input type='hidden' name='EndTime' value='#(tFilterObj.EndTime)#'>>
	&html<<input type='hidden' name='StartId' value='#(tFilterObj.StartId)#'>>
	&html<<input type='hidden' name='EndId' value='#(tFilterObj.EndId)#'>>
	&html<<input type='hidden' name='Type' value='#(tFilterObj.Type)#'>>
	&html<<input type='hidden' name='Source' value='#(tFilterObj.Source)#'>>
	&html<<input type='hidden' name='IsError' value='#(tFilterObj.IsError)#'>>
	&html<<input type='hidden' name='MaxRows' value='#(tFilterObj.MaxRows)#'>>
	&html<<input type='hidden' name='SortOrder' value='#(tFilterObj.SortOrder)#'>>
	&html<<input type='hidden' name='TimeFormat' value='#(tFilterObj.TimeFormat)#'>>
	&html<<input type='hidden' name='ColorBy' value='#(tFilterObj.ColorBy)#'>>
	&html<<input type='hidden' name='TermsStr' value='#(tFilterObj.TermsStr)#'>>

	Set pRS = ##class(%ResultSet).%New($$$CurrentClass_":Enumerate")
	Quit $$$OK
]]></Implementation>
</Method>
<Query name="Enumerate">
<Description><![CDATA[
List the messages matching the given filter object, skipping to start from NextId if given.]]></Description>
<Type>%Query</Type>
<FormalSpec>FilterObj:CSPX.EnsMsgFilterForm,NextId:%String="&quot;,PaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>

<Parameter name="ROWSPEC" value="System,ID,TimeCreated,Session,Status,Error,Source"/>
</Query>


<Method name="EnumerateExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,pFilterObj:CSPX.EnsMsgFilterForm,&amp;pNextIds:%String="&quot;,pPaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 w:$G(^Ens.Debug("UtilEnsMessages","terms")) "terms count="_pFilterObj.%Terms.Count()_", name='"_pFilterObj.%Name_"'<br>"
	Set:'$IsObject(pPaneObj) pPaneObj=##class(EnsHL7MsgTablePane).%New()
 	Set qHandle=0, qHandle("iconn")=0, qHandle("row")=0, qHandle("pane")=pPaneObj, qHandle("filt")=pFilterObj, tSC=$$$OK

	// Build local list of servers
   	&sql(DECLARE C1 CURSOR FOR
		SELECT ID INTO :tId FROM Ens_Config.MonitorNamespace ORDER BY ID)
	&sql(OPEN C1)  For i=1:1 { &sql(FETCH C1)  Quit:SQLCODE
		Set qHandle(i)=##class(Ens.Config.MonitorNamespace).%OpenId(tId)
	} &sql(CLOSE C1)  Set qHandle=i-1

	// Send requests to the Servers
	For iConn=1:1:qHandle { Set tConnection=qHandle(iConn)  Continue:'$IsObject(tConnection)
		Set pPaneObj.Systems(tConnection.Name)=tConnection
		Set tNextId=$G(pNextIds(tConnection.Name))
		Set tClient=##class(%CSP.Monitor.Client).%New()
		Set tClient.Timeout=pFilterObj.Timeout+1
		Set tClient.Location="http"_$S(""'=tConnection.SSLConfig:"s",1:"")_"://"_tConnection.IPAddress_"/csp/"_tConnection.Namespace_"/_CSP.Monitor.Server.cls"
		
		If ""'=tConnection.SOAPCredentials {
			Set tSC1=##Class(Ens.Config.Credentials).GetCredentialsObj(.tCreds,$$$CurrentClass,"Ens.Config.Credentials",tConnection.SOAPCredentials) If $$$ISERR(tSC1) Set tSC=$$$ADDSC(tSC,tSC1)
			If $$$ISOK(tSC) && '$IsObject(tCreds) Set tSC=$$$ADDSC(tSC,$$$ERROR($$$EnsErrNoCredentials,tConnection.SOAPCredentials))
		}
		Do:(""'=tConnection.SOAPCredentials)&&$IsObject(tCreds)&&(""'=tCreds.Username)&&(""=tClient.SessionCookie) tClient.WSSecurityLogin(tCreds.Username, tCreds.Password)
		Set tClient.SSLConfiguration=tConnection.SSLConfig
		Try {
			Set tWebMethod=tClient.WebMethod("MessageSearch")
			Set tSC=pFilterObj.XMLExportToStream(.tStream,"MsgFilter")
			Set tWebMethod.FilterObjStr=tStream
			Set tWebMethod.Timeout=tClient.Timeout
			Set tWebMethod.NextId=$G(pNextIds(tConnection.Name))
			Set tWebMethod.Type="HL7Search"
			Do tClient.InvokeClient(tWebMethod,tWebMethod.%RequestName,##class(EnsLib.SOAP.OutboundAdapter).getAction(tWebMethod,tClient.%ClassName(1)),0)
		 	Set qHandle(iConn,"client")=tClient, qHandle(iConn,"webmethod")=tWebMethod
		} Catch errobj {
			Set tSC=$$$ADDSC(tSC,$$$ERROR($$$EnsErrGeneral,"Exception "_errobj.Name_" "_errobj.Location_" *"_errobj.Data_$S(errobj.Name'["ZSOAP":"",1:$$$StatusDisplayString(%objlasterror))))
		}
	}

	// Poll for responses from the servers
	Set t0=$ZH, pPaneObj.%colNames=0, qHandle("numDone")=0
	While qHandle("numDone")<qHandle {
		For iConn=1:1:qHandle { Set tWebMethod=$G(qHandle(iConn,"webmethod"))
			If $IsObject(tWebMethod) {
				Set tRS=tWebMethod.%Result
				$$$sysTRACE("Got Result "_tRS)
				Set qHandle(iConn,"rs")=tRS, qHandle("numDone")=qHandle("numDone")+1
				#; Set up list of columns
				If 'pPaneObj.%colNames && $IsObject(tRS) {
					Set pPaneObj.%colNames = tRS.GetColumnCount()
					For iCol = 1:1:pPaneObj.%colNames {
						Set pPaneObj.%colNames(iCol) = tRS.GetColumnHeader(iCol)
					}
				}
			}
			If $ZH-(pFilterObj.Timeout+2) > t0 {
				Set qHandle("timedOut")=1, qHandle(iConn,"timedOut")=1
				Quit
			}
		}
		Quit:$G(qHandle("timedOut"))
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="EnumeratePrepare">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,p1:%String,p2:%Integer,p3:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/// As side effect of calling Prepare is to clear RS.HasInfo, which we want in this case.
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="EnumerateGetInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>colinfo:%List,parminfo:%List,idinfo:%List,qHandle:%Binary,extoption:%Integer=0,extinfo:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s:'($d(^oddCOM("CSPX.EnsHL7MsgTablePane","q","Enumerate",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2:$d(^oddCOM(clientinfo,"q","Enumerate",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Enumerate",21),clientinfo)#2),1:$d(^oddDEF("CSPX.EnsHL7MsgTablePane","q","Enumerate",21),clientinfo)#2) clientinfo=$g(^%qCacheObjectKey(1,"q",21))
	If clientinfo'="" {
		Set tPaneObj=$G(qHandle("pane"))
		Set colinfo=$LG(clientinfo,1),parminfo=$LG(clientinfo,2),idinfo=$LG(clientinfo,3),extent=$LG(clientinfo,4)
		Set tLL=$LL(colinfo), tCC=$S($IsObject(tPaneObj):tPaneObj.%colNames,1:0)
		Set colinfo=$LB($LB("System",10,"System"))_colinfo
		For iCol=tLL+1:1:tCC { Set tColName=tPaneObj.%colNames(iCol)
			Set:","_tPaneObj.HiddenColumns_","'[(","_tColName_",") colinfo=colinfo_$LB($LB(tColName,10,tColName))
		}
		Set:$Get(extinfo) extinfo=$s($d(^oddCOM("CSPX.EnsHL7MsgTablePane","q","Enumerate",38))#2:^(38),$d(^oddCOM($g(^(2),"CSPX.EnsHL7MsgTablePane"),"q","Enumerate",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM("CSPX.EnsHL7MsgTablePane","q","Enumerate",2),"CSPX.EnsHL7MsgTablePane"),"q","Enumerate",38))#2:^(38),1:$g(^%qCacheObjectKey(1,"q",38))))
		Quit 1
	}
	Quit $$GetInfo^%SYS.DynamicQuery("CSPX.EnsHL7MsgTablePane","Enumerate",.colinfo,.parminfo,.idinfo,.qHandle,extoption,.extinfo)
]]></Implementation>
</Method>

<Method name="EnumerateFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,&amp;Row:%List,&amp;AtEnd:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Set tPaneObj=qHandle("pane"), tCols=tPaneObj.%colNames, Row="", AtEnd=0
	While 1 {
		Set:'qHandle("row") qHandle("iconn")=$S(qHandle("iconn")>=qHandle:"", ""=qHandle("iconn"):"", 1:qHandle("iconn")+1), qHandle("row")=(""'=qHandle("iconn"))
		If ""=qHandle("iconn") Set AtEnd=1 Quit
		Set tRS=qHandle(qHandle("iconn"),"rs")
		Set:qHandle("row") qHandle("row")=tRS.Next()  Continue:'qHandle("row")
		Set Row=$LB(qHandle(qHandle("iconn")).Name) ; first col is connection system name
		Set tDate=tRS.GetData(2)
		If 'tDate { Set Row=Row_$LB("",$Case(tDate,"<md>":"<More Data>","<to>":"<Timed Out>",:"<Unknown End Marker:'"_tDate_"'>"),"","","","") For i=2:1:tCols { Set Row=Row_$LB("") } }
		Else {
			For iCol=1:1:tCols {
				Set Row=Row_$LB(tRS.GetData(iCol))
			}
		}
		Quit
	}
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="EnumerateClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
 	Quit $$$OK
]]></Implementation>
</Method>
<Query name="EnumerateDups">
<Type>%Query</Type>
<FormalSpec>FilterObj:CSPX.EnsMsgFilterForm,NextId:%String="&quot;,PaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<SqlQuery> /* from EnsLib.HL7.SequenceManager:
$lb(..%PrimaryRequestHeader.%Id(),pMessage.%Id(),tControlId,tList)
 */</SqlQuery>

<Parameter name="ROWSPEC" value="ID,TimeCreated,Session,Status,Error,Source,BodyID,BodyControlID,DupBodyIDs"/>
</Query>


<Method name="EnumerateDupsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,pFilterObj:CSPX.EnsMsgFilterForm,&amp;pNextIds:%String="&quot;,pPaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle="", qHandle("filt")=pFilterObj
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="EnumerateDupsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,&amp;Row:%List,&amp;AtEnd:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Set tSC=##class(EnsLib.HL7.SequenceManager).GetDuplicatedList(.tArray,.qHandle,1)  Quit:$$$ISERR(tSC) tSC
	If ""=qHandle Set AtEnd=1
	Set tHdrId=$LG($G(tArray(1)))
	If ""'=tHdrId {
	    Set tFilterObj=qHandle("filt")
	    Set dateLen=12
	    Set:tFilterObj.TimeFormat'="" dateLen = tFilterObj.TimeFormat
		&sql(Select ID,
				{fn RIGHT(%EXTERNAL(head.TimeCreated),:dateLen )} As TimeCreated,
				SessionId As Session,
				Status,
				CASE IsError WHEN 1 THEN 'Error' ELSE 'OK' END As Error,
				SourceConfigName As Source
			 Into :tID,:tTimeCreated,:tSession,:tStatus,:tError,:tSource From Ens.MessageHeader head where ID = :tHdrId)
		If 'SQLCODE {
			Set Row=$LB(tID,tTimeCreated,tSession,tStatus,tError,tSource,$LG($G(tArray(1)),2),$LG($G(tArray(1)),3),$LG($G(tArray(1)),4))
		} Else {
			Set Row=$LB("NA","","","","","","","","")
		}
	}
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="EnumerateDupsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
 	Quit $$$OK
]]></Implementation>
</Method>
<Query name="EnumerateGaps">
<Description><![CDATA[
This one does not currently return objects, only the sequence number of the message that should have arrived, and the higher sequence number of the one that already arrived]]></Description>
<Type>%Query</Type>
<FormalSpec>FilterObj:CSPX.EnsMsgFilterForm,NextId:%String="&quot;,PaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<SqlQuery> /* from EnsLib.HL7.SequenceManager:
$lb(tNext,$o(^EnsLib.HL7SM("thread",tType,tFacility,tApplication,tThread,"list&quot;,"&quot;)))
 */</SqlQuery>

<Parameter name="ROWSPEC" value="ID,TimeCreated,Session,Status,Error,Source,Seq,TargetSeq"/>
</Query>


<Method name="EnumerateGapsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,pFilterObj:CSPX.EnsMsgFilterForm,&amp;pNextIds:%String="&quot;,pPaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle="", qHandle("filt")=pFilterObj
 	Quit $$$OK
]]></Implementation>
</Method>

<Method name="EnumerateGapsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,&amp;Row:%List,&amp;AtEnd:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Set tSC=##class(EnsLib.HL7.SequenceManager).GetExpiredList(.tArray,.qHandle,1)  Quit:$$$ISERR(tSC) tSC
	If ""=qHandle Set AtEnd=1
	Set tHdrId=$LG($G(tArray(1)))
	If ""'=tHdrId {
	    Set tFilterObj=qHandle("filt")
	    Set dateLen=12
	    Set:tFilterObj.TimeFormat'="" dateLen = tFilterObj.TimeFormat
	    /*
		&sql(Select ID,
				{fn RIGHT(%EXTERNAL(head.TimeCreated),:dateLen )} As TimeCreated,
				SessionId As Session,
				Status,
				CASE IsError WHEN 1 THEN 'Error' ELSE 'OK' END As Error,
				SourceConfigName As Source
			 Into :tID,:tTimeCreated,:tSession,:tStatus,:tError,:tSource From Ens.MessageHeader head where ID = :tHdrId)
		If 'SQLCODE {
			Set Row=$LB(tID,tTimeCreated,tSession,tStatus,tError,tSource,$LG($G(tArray(1)),1),$LG($G(tArray(1)),2))
		} Else { */
			Set Row=$LB("GAP","","","","","",$LG($G(tArray(1)),1),$LG($G(tArray(1)),2))
		/*}*/
	}
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="EnumerateGapsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
 	Quit $$$OK
]]></Implementation>
</Method>
<Query name="EnumerateLates">
<Type>%Query</Type>
<FormalSpec>FilterObj:CSPX.EnsMsgFilterForm,NextId:%String="&quot;,PaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<SqlQuery> /* from EnsLib.HL7.SequenceManager:
^EnsLib.HL7SM("metric",&quot;outofsequence")=3
^EnsLib.HL7SM("metric",&quot;outofsequence",1)=$lb("3474&quot;,"235&quot;,"10006",&quot;10001")
^EnsLib.HL7SM("metric",&quot;outofsequence",2)=$lb("3475&quot;,"236&quot;,"10008",&quot;10001")
^EnsLib.HL7SM("metric",&quot;outofsequence",3)=$lb("3476&quot;,"237&quot;,"10008",&quot;10001")
$lb(..%PrimaryRequestHeader.%Id(),pMessage.%Id(),tSeqNumber,^EnsLib.HL7SM("thread",tType,tFacility,tApplication,pThread,"next&quot;))
$lb(tHeaderId,tMessageId,tSeqNumber,tSeqNumber+1)
 */</SqlQuery>

<Parameter name="ROWSPEC" value="ID,TimeCreated,Session,Status,Error,Source,BodyID,Seq,NextSeq"/>
</Query>


<Method name="EnumerateLatesExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,pFilterObj:CSPX.EnsMsgFilterForm,&amp;pNextIds:%String="&quot;,pPaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle="", qHandle("filt")=pFilterObj
 	Quit $$$OK
]]></Implementation>
</Method>

<Method name="EnumerateLatesFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,&amp;Row:%List,&amp;AtEnd:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Set tSC=##class(EnsLib.HL7.SequenceManager).GetOutOfSequenceList(.tArray,.qHandle,1)  Quit:$$$ISERR(tSC) tSC
	If ""=qHandle Set AtEnd=1
	Set tHdrId=$LG($G(tArray(1)))
	If ""'=tHdrId {
	    Set tFilterObj=qHandle("filt")
	    Set dateLen=12
	    Set:tFilterObj.TimeFormat'="" dateLen = tFilterObj.TimeFormat
		&sql(Select ID,
				{fn RIGHT(%EXTERNAL(head.TimeCreated),:dateLen )} As TimeCreated,
				SessionId As Session,
				Status,
				CASE IsError WHEN 1 THEN 'Error' ELSE 'OK' END As Error,
				SourceConfigName As Source
			 Into :tID,:tTimeCreated,:tSession,:tStatus,:tError,:tSource From Ens.MessageHeader head where ID = :tHdrId)
		If 'SQLCODE {
			Set Row=$LB(tID,tTimeCreated,tSession,tStatus,tError,tSource,$LG($G(tArray(1)),2),$LG($G(tArray(1)),3),$LG($G(tArray(1)),4))
		} Else {
			Set Row=$LB("NA","","","","","","","","")
		}
	}
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="EnumerateLatesClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
 	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetColorByColumn">
<Description><![CDATA[
Subclass can override this to specify the name of column used 
to distinctly color rows]]></Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $G(%request.Data("ColorBy",2))
]]></Implementation>
</Method>

<Method name="GetLinks">
<FormalSpec>&amp;pValues,&amp;pLinks</FormalSpec>
<Implementation><![CDATA[
	If $TR(pValues(4),$C(0)) '= "" {
		Set pLinks(4) = "UtilEnsMsgTrace.csp?$ID1="_pValues(4)
	}
]]></Implementation>
</Method>

<Method name="MakeLink">
<FormalSpec>pInstance:%CSP.Util.PageInstance,pHREF,&amp;pRowID,&amp;pValue</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tConnection=$G(..Systems(pValue(1)))
	Set pAddr=$S('$IsObject(tConnection):"",1:"http://"_tConnection.IPAddress_"/csp/"_tConnection.Namespace_"/")
	
	If $$$IsdefObject(pInstance) {
		Quit:""=pValue(2) ""
		Quit pInstance.MakeLink(pAddr_pHREF,.pRowID)
	} Else {
		Quit ##class(%CSP.Page).Link(pAddr_pHREF)
	}
]]></Implementation>
</Method>
</Class>
</Export>