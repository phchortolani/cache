<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="alINV.dItemPolicy">
<ClassType>persistent</ClassType>
<IncludeCode>COMSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent</Super>
<LegacyInstanceContext>1</LegacyInstanceContext>
<UDLText name="T">
<Content>// 15-Jun-2009 	PPP 	SR16510: New Property to Match @NM Class ID</Content>
</UDLText>

<Property name="KeyName">
<Type>alSYS.dt.dtString</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00316"/>
</Property>

<Property name="Description">
<Type>alSYS.dt.dtString</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00313"/>
</Property>

<Property name="IsDefault">
<Type>alSYS.dt.dtBoolean</Type>
<InitialExpression>"0"</InitialExpression>

<Parameter name="CAPTION" value="AL00315"/>
</Property>
<UDLText name="T">
<Content>// ++++++++++++++++++++++++++++++++++++++++++</Content>
</UDLText>

<Property name="InventoryItems">
<Type>alINV.dItem</Type>
<Cardinality>many</Cardinality>
<Inverse>ItemPolicy</Inverse>
<Relationship>1</Relationship>

<Parameter name="CAPTION" value="AL00314"/>
</Property>

<Property name="Attributes">
<Type>alINV.dPolicyAttribute</Type>
<Cardinality>many</Cardinality>
<Inverse>ItemPolicy</Inverse>
<Relationship>1</Relationship>

<Parameter name="CAPTION" value="AL00311"/>
</Property>

<Property name="Bundles">
<Type>alSOH.dBundle</Type>
<Cardinality>many</Cardinality>
<Inverse>ItemPolicy</Inverse>
<Relationship>1</Relationship>

<Parameter name="CAPTION" value="AL00312"/>
</Property>

<Property name="StorageType">
<Type>alLOC.dStorageType</Type>
<Cardinality>one</Cardinality>
<Inverse>ItemPolicies</Inverse>
<Relationship>1</Relationship>

<Parameter name="CAPTION" value="AL00317"/>
</Property>
<UDLText name="T">
<Content>// ++++++++++++++++++++++++++++++++++++++++++</Content>
</UDLText>
<Index name="IDXStorageType">
<Properties>StorageType</Properties>
</Index>
<UDLText name="T">
<Content>// ++++++++++++++++++++++++++++++++++++++++++</Content>
</UDLText>
<Query name="GetDefaultItemPolicy">
<Type>%SQLQuery</Type>
<SqlQuery>SELECT %ID FROM dItemPolicy
 WHERE (IsDefault = '1')</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<UDLText name="T">
<Content>// ++++++++++++++++++++++++++++++++++++++++++</Content>
</UDLText>

<Method name="%OnDelete">
<Description><![CDATA[This callback method is invoked by the <METHOD>%Delete</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being deleted.

<P>If this method returns an error then the object will not be deleted.
[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	;--------------------------------------------------------------------------------
	; History: 
	; 15-Jun-2009 	PPP 	SR16510: Delete the attributes associated with the Policy
	;--------------------------------------------------------------------------------
	set sc = $$$OK
	set objPolicy = ..%Open(oid)
	set objResultSet = ##class(%Library.ResultSet).%New()
	set sc = objResultSet.Prepare("SELECT ID FROM alINV.dPolicyAttribute WHERE ItemPolicy = ?")
	if $$$ISOK(sc) {
		set sc = objResultSet.Execute(objPolicy.%Id())
		if $$$ISOK(sc) {
			while objResultSet.Next(.sc) {
				set sc = ##class(alINV.dPolicyAttribute).%DeleteId(objResultSet.Data("ID"))
				quit:$$$ISERR(sc)
			}
		}
	}
	quit sc]]></Implementation>
</Method>

<Method name="CreateBundle">
<Description><![CDATA[Helper Method to return a dBundle with the dItemPolicy set]]></Description>
<ReturnType>alSOH.dBundle</ReturnType>
<Implementation><![CDATA[	set objBundle = ##class(alSOH.dBundle).%New()
	set objBundle.ItemPolicy = %this
	quit objBundle]]></Implementation>
</Method>

<Method name="GenerateBundleHash">
<ClassMethod>1</ClassMethod>
<FormalSpec>Item:alINV.dItem,objHashtable:%Library.ArrayOfDataTypes</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	;-------------------------------------------------------------------------------
	; History.
	; 
	; 22-Jan-2009	SCR		SR16320:  Use Common Base64 & UTF8 Conversion for Unicode
	; 30-July-2008	Luke	SR15807:  Corrected the Hash mapping to be called and returned
	;-------------------------------------------------------------------------------
	
	set intHarshIncrementor = 13
	
	; corrected loop, generated hash is keyed via $order of strKey
	set strHashkey = Item.%Id()
	set strKey = ""
	for {
		set strValue = objHashtable.GetNext(.strKey)
		quit:(strKey = "")
		
		set strHashkey = strHashkey_strKey_strValue
	}
	
	//set strHashkey = ##class(%xsd.base64Binary).LogicalToXSD(strHashkey) //SR15807
	set strHashkey = $$GetBase64Encode^COMUtilStr(strHashkey) //SR16320
	
	quit strHashkey
	//quit $System.Encryption.MD5Encode(strHashkey) //SR15807]]></Implementation>
</Method>

<Method name="GetAttributeViaId">
<FormalSpec>pidAttribute:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	;-------------------------------------------------------------------------------
	; FIXME : <GRF> returning either ...
	; 		$$$OK			from first line if no entries
	; 		Status Error	if we have more than one entry
	; 		$$$NULLOREF		if we have a single entry that isn't a policy attribute (impossible?)
	; 		a valid OREF	if we have a single entry that *IS* a policy attribute
	; Should return status and oref separately.
	; 
	; History:
	; 15-Jan-2010	GRF		SR15796: use alINV0008
	; 18-Apr-2008	HQN		SR15672: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set objResultSet = ##class(%Library.ResultSet).%New()
	if objResultSet.Prepare("SELECT %ID FROM dPolicyAttribute WHERE ItemPolicy = ? AND Attribute->%ID = ?") {
		if objResultSet.Execute(%this.%Id(), pidAttribute) {
			set blnAttribFound = $$$NO
			while objResultSet.Next() {
				if (blnAttribFound = $$$YES) {
					set strMessage = $$$Text("alINV008")
					set sc = $$$ERROR($$$GeneralError,strMessage)
					quit
				}
				if (blnAttribFound = $$$NO) {
					set sc = ##class(alINV.dPolicyAttribute).%OpenId(objResultSet.Data("ID"))
					set blnAttribFound = $$$YES
				}
			}
		}
	}
	
	quit sc]]></Implementation>
</Method>

<Method name="GetDefaultItemPolicy">
<ClassMethod>1</ClassMethod>
<ReturnType>alINV.dItemPolicy</ReturnType>
<Implementation><![CDATA[	// TODO : return sc and process it
	
	;-------------------------------------------------------------------------------
	; 01-May-2008	GRF		Equivalent of $$$MakeStatus
	; 26-Feb-2008	HQN		TODO: Move to embedded SQL for speed
	; 22-Feb-2008	HQN		Moved logic from iSOH
	;-------------------------------------------------------------------------------
	set objResultSet = ##class(%Library.ResultSet).%New("alINV.dItemPolicy:GetDefaultItemPolicy")
	set iItemPolicyCount = 0
	if objResultSet.Execute() {
		while objResultSet.Next() {
			set iItemPolicyCount = iItemPolicyCount + 1
			set:'$data(objItemPolicy) objItemPolicy = ##class(alINV.dItemPolicy).%OpenId(objResultSet.Data("ID")) ; Grab first one
		}
	} else {
		; TODO : Query error?
	}
	
	if iItemPolicyCount > 1 {
		set strMessage = $$$Text("alINV0004")      ; "More than 1 default item policy set up"
		set sc = $$$ERROR($$$GeneralError,strMessage)
	}
	if '$data(objItemPolicy) {
		; TODO : Setup Error! No Item policy found
	}
	quit $get(objItemPolicy)]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^alINV.dItemPolicyD</DataLocation>
<DefaultData>dItemPolicyDefaultData</DefaultData>
<IdLocation>^alINV.dItemPolicyD</IdLocation>
<IndexLocation>^alINV.dItemPolicyI</IndexLocation>
<StreamLocation>^alINV.dItemPolicyS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="dItemPolicyDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Description</Value>
</Value>
<Value name="3">
<Value>IsDefault</Value>
</Value>
<Value name="4">
<Value>StorageType</Value>
</Value>
<Value name="5">
<Value>KeyName</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>