<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="SourceControl.data.global.NetManagerForm">
<ClassType/>
<Import>SourceControl.control,SourceControl.data</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>GlobalBase</Super>

<Method name="ExportAll">
<Description><![CDATA[
Exports all Net Manager Forms]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set strStatus = $$$OK

	set nErrors = 0
	set nExported = 0

	// Get all the forms
	set id = ""
	for {
		set id = $order(^WWW120(0, id))
		quit:(id = "")

		set strStatus = ..Export(id, 2) // 1=Print messages to the console
										// 2=Print global nodes
		if ($$$ISERR(strStatus)) {
			set nErrors = nErrors + 1
		}
		else {
			set nExported = nExported + 1
		}
	}

	write !, "Number of exported files: "_nExported
	write !, "Number of errors during export: "_nErrors

	quit nErrors
]]></Implementation>
</Method>

<Method name="Export">
<Description><![CDATA[
Exports a Netmanager Form]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,printMessage:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK

	if ($get(id) = "") {
		quit ##class(Errors).MakeAndPrintErrorStatus("Empty form name!",
			printMessage)
	}

	if ('$data(^WWW120(0, id))) {
		quit ##class(Errors).MakeAndPrintErrorStatus("Net Manager form "_
			"definition not found:"_id_". Skipping it.", printMessage)
	}

	set subs = $listbuild("0,"_##class(Strings).QuoteString(id))

	// The piece #50 of location ^WWW120(0,"WWWLNG",1) is the total number
	// of hits, and that must be ignored from the exported form definition
	set ignoredLocation = "^WWW120(0,"_##class(Strings).QuoteString(id)_",1)"
	set ignoredPieces = 50
	set ignoredList = $listbuild($listbuild(ignoredLocation, ignoredPieces))

	set fileName = ##class(DirectoryFile).ConcatPath(
		##class(Config).GetExternalNMFormDir(),
		##class(FileControl).GetSafeFilename(id)_"."_
		##class(FileType).%GetParameter("TXTFORM"))

	set sc = ..ExportGlobalNode(fileName, id, ..GetGlobals(),
		subs, ignoredList, printMessage=2, .ignored, 0)

	if ($$$ISOK(sc) && ('ignored)) {
		if (printMessage) {
			write !, "Form '"_id_"' successfully exported as "_
				"'"_fileName_"'"
		}

		// Update the timestamp, so that the source control can use it to
		// prevent the same file from being loaded again.
		do ##class(FileControl).UpdateTimeStamp(fileName)
	}

	if ($$$ISOK(sc)) {
		// The piece #50 of location ^WWW120(0,"WWWLNG",1) is the total number
		// of hits, and that must be ignored from the exported form definition
		set ignoredLocation = "^WWW120(0,"_##class(Strings).QuoteString(id)_",1)"
		set ignoredPieces = 50
		set ignoredList = $listbuild($listbuild(ignoredLocation, ignoredPieces))

		set fileName = ##class(DirectoryFile).ConcatPath(
			##class(Config).GetExternalNMFormDir(),
			##class(FileControl).GetSafeFilename(id)_"."_
			##class(FileType).%GetParameter("TXTCUSTOMFORM"))

		set sc = ..ExportGlobalNode(fileName, id, ..GetCustomGlobals(),
			subs, ignoredList, printMessage=2, .ignored, 1)

		if ($$$ISOK(sc) && ('ignored)) {
			if (printMessage) {
				write !, "Form '"_id_"' successfully exported as "_
					"'"_fileName_"'"
			}

			// Update the timestamp, so that the source control can use it to
			// prevent the same file from being loaded again.
			do ##class(FileControl).UpdateTimeStamp(fileName)
		}
	}

	quit sc
]]></Implementation>
</Method>

<Method name="IsToIgnore">
<ClassMethod>1</ClassMethod>
<FormalSpec>globalName:%String,node:%String,custom:%Boolean</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#define WWW124Custom(%obj) $piece(%obj,"~",68)

	if ((globalName = "^WWW124") ||
		(globalName = "^COMHelpButton")) {
		if (globalName = "^COMHelpButton") {
			set node = "^WWW124"_$piece(node, "^COMHelpButton", 2,
				$length(node, "^COMHelpButton"))
		}
		set button = $get(@node)

		if ((('custom) && ($$$WWW124Custom(button) = $$$YES)) ||
			(custom && ($$$WWW124Custom(button) '= $$$YES))) {
			quit 1
		}
	}
	elseif ((globalName = "^WWW1211") ||
			(globalName = "^WWW1221") ||
			(globalName = "^WWW127")) {
		set record = $get(@node)

		if ($length($translate(record, "~", "")) = 0) {
			quit 1
		}
	}

	quit 0
]]></Implementation>
</Method>

<Method name="GetGlobals">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit $listbuild("^WWW120", "^WWW1201", "^WWW1203", "^WWW121", "^WWW1210",
		"^WWW1211", "^WWW122", "^WWW1221", "^WWW123", "^WWW1231", "^WWW1232",
		"^WWW124", "^WWW1251", "^WWW129", "^WWW1291", "^WWW131", "^WWW132",
		"^WWW133", "^WWWDRAGDROP", "^WWWDRAGDROPD", "^WWW120DynTable",
		"^WWW120DynTableLine", "^COMHelp", "^COMHelpField", "^COMHelpButton",
		"^WWW127", "^WWW122C2", "^COMGridEditParameter", "^WWW120Hook")
		//^WWW126 is only a user data, not meta data from NM
		//^WWW1261 is not needed
]]></Implementation>
</Method>

<Method name="GetCustomGlobals">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit $listbuild("^WWW120D", "^WWW1203D", "^WWW121D", "^WWW121D1",
		"^WWW122D", "^WWW122D1", "^WWW122D2", "^WWW124D", "^WWW124",
		"^COMHelpButton","^WWW120VARHook")
]]></Implementation>
</Method>
</Class>
</Export>