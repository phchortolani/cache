<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.Portal.Monitor">
<Description><![CDATA[
This page displays monitoring information for the current running production.
]]></Description>
<IncludeCode>Ensemble</IncludeCode>
<Super>CSPX.Portal.Template</Super>
<System>4</System>

<Parameter name="APPLICATION">
<Description><![CDATA[
Class name of application this page belongs to.]]></Description>
<Default>CSPX.Portal.Application</Default>
</Parameter>


<Parameter name="PAGENAME">
<Description><![CDATA[
Displayed name of this page.]]></Description>
<Default>Ensemble System Monitor</Default>
</Parameter>


<Property name="lastUpdate">
<Description><![CDATA[
Time of last update]]></Description>
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>$$$timeLocal</InitialExpression>
</Property>


<Property name="autoUpdate">
<Description><![CDATA[
Indicates whether auto-update is enabled.]]></Description>
<Type>%ZEN.Datatype.boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>


<Property name="monitorHeight">
<Description><![CDATA[
Used to pass size information to the server.]]></Description>
<Type>%ZEN.Datatype.integer</Type>
</Property>


<Property name="monitorWidth">
<Description><![CDATA[
Used to pass size information to the server.]]></Description>
<Type>%ZEN.Datatype.integer</Type>
</Property>

<XData name="Style">
<Description><![CDATA[
This Style block contains page-specific CSS style definitions.]]></Description>
<Data><![CDATA[
<style type="text/css">
body {
	font-family: Verdana;
	background: #FFFFFF;
}

/* style for title bar */
#title {
	background: #000040;
	background-image: url(/csp/broker/images/grad-blue-10x30.png);
	background-repeat: repeat-x;
	color: white;
	font-size: 1.5em;
	font-weight: bold;
	padding: 5px;
	border-bottom: 1px solid black;
	text-align: center;
}

#lastUpdate {
	font-weight: bold;
}

#monitor {
}

#details {
	background: #C0C0C0;
	background-image: url(/csp/broker/images/grad-halfgray-10x100.png);
	background-repeat: repeat-x;
	color: black;
	font-size: 0.7em;
	padding: 5px;
	border: 1px solid black;
	margin-top: 0px;
	margin-bottom: 10px;
	height: 500px;
	width: 200px;
	overflow-x: auto;
	overflow-y: auto;
}

#details td {
	font-size: 0.8em;
	vertical-align: middle;
}

.MonitorWrapper {
	border: 1px solid gray;
}

.MonitorSummary {
	background: #000080;
	padding-left: 25px;
}

.MonitorSummary table {
	color: white;
	font-size: 0.8em;
}

.MonitorCaption {
	color: white;
	background: #000040;
	background-image: url(/csp/broker/images/grad-blue-10x30.png);
	background-repeat: repeat-x;
	font-weight: bold;
	font-size: 1.0em;
	padding: 2px;
	padding-left: 25px;
	border-top: 1px solid black;
	border-left: 1px solid black;
	border-right: 1px solid black;
	border-bottom: 1px solid gray;
	text-align: left;
}

.MonitorScrollBox {
	overflow-y: auto;
	background: #C0C0C0;
	background-image: url(/csp/broker/images/grad-halfgray-10x500.png);
	background-repeat: repeat-x;
}

.MonitorTable {
	background: white;
	border: 1px solid black;
	font-size: 0.8em;
	width: 100%;
}

.MonitorTable td {
	border-right: 1px solid gray;
	border-bottom: 1px solid gray;
}

.MonitorTable td.Item {
	cursor: pointer;
}

/* item mouse is over */
.ItemHover {
	background: yellow;
}

.DetailLabel {
	font-weight: bold;
	color: darkblue;
}

.DetailValue {
	padding-left: 10px;
}

.SummaryLabel {
	font-weight: bold;
}

.Lamp {
	text-align: center;
	color: darkblue;
	width: 20px;
	min-width: 20px;
	font-weight: bold;
}

</style>
]]></Data>
</XData>
<XData name="detailPane">
<Description><![CDATA[
This XML block defines the contents of this page.]]></Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen" title="">
<timer id="timer" ontimeout="zenPage.updateMonitor(zenThis);" timeout="11000"/>
<hgroup width="100%" cellVAlign="top">
<!-- This HTML block shows the details for the selected item. -->
<html id="details" OnDrawContent="DrawDetails"/>

<!-- This HTML block shows the status tables. -->
<html id="monitor" width="*" OnDrawContent="DrawMonitorInfo"/>
<spacer width="20"/>
</hgroup>
</pane>
]]></Data>
</XData>

<Method name="updateMonitor">
<Description><![CDATA[
Update the monitor pane.]]></Description>
<FormalSpec>timer</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[
	var sidebar = zenPage.getComponentById('details');
	var divSidebar = sidebar.getEnclosingDiv();

	// find divs for title & mainMenu
	var title = zenPage.getComponentById('titleBar');
	var locator = zenPage.getComponentById('locatorBar');
	var divTitle = title.getEnclosingDiv();
	var divLocator = locator.getEnclosingDiv();

	var winHeight = zenGetWindowHeight();
	var winWidth = zenGetWindowWidth();

	// adjust size of menu
	zenPage.monitorHeight = winHeight - (parseInt(divTitle.offsetHeight) + parseInt(divLocator.offsetHeight)) - 20;
	zenPage.monitorWidth = winWidth - (parseInt(divSidebar.offsetWidth)) - 20;
	
	var html = zenPage.getComponentById('monitor');
	html.refreshContents(true);
	zenPage.setLastUpdate();

	if (timer && this.autoUpdate) {
		timer.startTimer();
	}
]]></Implementation>
</Method>

<Method name="setLastUpdate">
<Description><![CDATA[
Set the last update field.
<var>time</var> is the last update time to display.]]></Description>
<FormalSpec>time</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[
	if (time) {
		zenPage.lastUpdate = time;
	}
	else {
		time = zenPage.lastUpdate;
	}

	var lu = self.document.getElementById('lastUpdate');
	if (lu){
		lu.innerHTML = time;
	}
]]></Implementation>
</Method>

<Method name="setAutoUpdate">
<Description><![CDATA[
Set autoUpdate mode.]]></Description>
<FormalSpec>flag</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[
	zenPage.autoUpdate = flag;
	var timer = zenPage.getComponentById('timer');
	if (flag) {
		zenPage.updateMonitor(timer);
	}
	else {
		timer.clearTimer();
	}
]]></Implementation>
</Method>

<Method name="selectItem">
<Description><![CDATA[
An item has been selected, show details for it.]]></Description>
<FormalSpec>cat,id,name</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[
	var details = zenPage.getComponentById('details');
	details.setProperty('seed',cat+"~"+id+"~"+name);
]]></Implementation>
</Method>

<Method name="DrawDetails">
<Description><![CDATA[
Draw contents of details region.
<var>pSeed</var> contains 
category~id~name (~ is a delimiter) for the selected item.]]></Description>
<FormalSpec>seed:%ZEN.Datatype.string</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tCategory = $P(seed,"~",1)
	Set tID = $P(seed,"~",2)
	Set tName = $P(seed,"~",3)
	Set tLink = ""
	
	&html<<div>#($$$Text("Last update:"))#</div>>
	&html<<div id="lastUpdate">#(..lastUpdate)#</div>>
	&html<<table><tr><td style="text-size:0.8em;"><input type="checkbox" onclick="zenPage.setAutoUpdate(this.checked);" #($S(..autoUpdate:"checked",1:""))#/>#($$$Text("Auto update"))#</td></tr></table>>

	&html<<hr/>>
	Set tProd = $G($$$EnsRuntime("Name"))
	If (tProd'="") {
		&html<<div>#($$$Text("Current production:"))#<br/><b>#($ZCVT(tProd,"O","HTML"))#</b></div>>
	}
	Else {
		&html<<div>#($$$Text("No production running"))#</div>>
	}

	&html<<hr/>>
	&html<<div>#($$$Text("Details for selected item"))#</div>>

	#; construct array of details, and links
	#; tDetails(n) = $LB(caption,value)
	#; tLinks(n) = $LB(caption,url)
	Set n = 0

	If (tCategory = "BusinessService") {
		Set tCat = $$$Text("Business Service")
		Set tDetails($INCREMENT(n)) = $LB($$$Text("Category"),$$$Text("Business Service"))
		Set tDetails($INCREMENT(n)) = $LB($$$Text("Name"),tName)

		If (tID '= "") {
			Set tLinks($INCREMENT(n)) = $LB($$$Text("Event Log"),"UtilEnsLog.csp?Source=" _ $ZCVT(tID,"O","URL"))
			Set tLinks($INCREMENT(n)) = $LB($$$Text("Queue Contents"),"UtilEnsQList.csp?$ID1="_$ZCVT(tID,"O","URL"))
		}
	}
	ElseIf (tCategory = "BusinessOperation") {
		Set n = 0
		Set tDetails($INCREMENT(n)) = $LB($$$Text("Category"),$$$Text("Business Operation"))
		Set tDetails($INCREMENT(n)) = $LB($$$Text("Name"),tName)

		If (tID '= "") {
			Set tLinks($INCREMENT(n)) = $LB($$$Text("Event Log"),"UtilEnsLog.csp?Source=" _ $ZCVT(tID,"O","URL"))
			Set tLinks($INCREMENT(n)) = $LB($$$Text("Queue Contents"),"UtilEnsQList.csp?$ID1="_$ZCVT(tID,"O","URL"))
		}
	}
	ElseIf (tCategory = "Queue") {
		Set tDetails($INCREMENT(n)) = $LB($$$Text("Category"),$$$Text("Queue"))

		If (tName=$$$Text("**Suspended Messages**")) {
			Set tDetails($INCREMENT(n)) = $LB($$$Text("Name"),$$$Text("Suspended Messages"))
			Set tLinks($INCREMENT(n)) = $LB($$$Text("Queue Contents"),"UtilEnsSesSuspended.csp")
		}
		Else {
			Set tDetails($INCREMENT(n)) = $LB($$$Text("Name"),tName)
			Set tLinks($INCREMENT(n)) = $LB($$$Text("Queue Contents"),"UtilEnsQList.csp?$ID1="_$ZCVT(tID,"O","URL"))
		}
	}
	ElseIf (tCategory = "EventLog") {

		#; get more details
		&sql(SELECT TimeLogged,ConfigName ,Text, SourceMethod,Type
			INTO :tTimeLogged,:tHost,:tText,:tMethod,:tType
			FROM Ens_Util.Log WHERE ID = :tID)

		Set tCat = $Case(tType,2:$$$Text("Error"),3:$$$Text("Warning"),6:$$$Text("Alert"),:$$$Text("Other"))
		Set tDetails($INCREMENT(n)) = $LB($$$Text("Category"),tCat)
		Set tDetails($INCREMENT(n)) = $LB($$$Text("ID"),tID)

		Set tDetails($INCREMENT(n)) = $LB($$$Text("Time"),$G(tTimeLogged))
		Set tDetails($INCREMENT(n)) = $LB($$$Text("Source"),$G(tHost))
		Set tDetails($INCREMENT(n)) = $LB($$$Text("Method"),$G(tMethod))
		Set tDetails($INCREMENT(n)) = $LB($$$Text("Text"),$ZCVT($G(tText),"O","HTML"))

		#; go to Event log, show messages near this one as well
		Set tLinks($INCREMENT(n)) = $LB($$$Text("More Details"),"UtilEnsLog.csp?StartId=" _ $ZCVT(tID-2,"O","URL") _ "&EndId=" _ $ZCVT(tID+2,"O","URL"))
	}

	#; show set of details
	Set n = $O(tDetails(""))
	While (n '= "") {
		Set tName = $LG(tDetails(n),1)
		Set tValue = $LG(tDetails(n),2)

		&html<<div class="DetailLabel">#($ZCVT(tName,"O","HTML"))#</div>>
		&html<<div class="DetailValue">#(tValue)#</div>>

		Set n = $O(tDetails(n))
	}

	&html<<br/>>

	#; show links
	Set n = $O(tLinks(""))
	While (n '= "") {
		Set tCaption = $LG(tLinks(n),1)
		Set tUrl = $LG(tLinks(n),2)
		&html<<div style="padding-bottom: 5px;"><a href="#(..Link(tUrl))#">#(tCaption)#</a></div>>
		Set n = $O(tLinks(n))
	}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawMonitorInfo">
<Description><![CDATA[
Acquire and display monitoring data as a series of tables.]]></Description>
<FormalSpec>seed:%ZEN.Datatype.string</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	Try {
		#; get list of user metrics
		Set tUserMetricCount = 0
		Do ..GetUserMetricClasses(.tUserMetrics)

		Set n = $O(tUserMetrics(""))
		While (n '= "") {
			Set tMetric = $G(tUserMetrics(n,"Metric"))
			If (tMetric '= "") {
				Set tUserMetricCount = tUserMetricCount + 1
				Set tMetricTitle(tUserMetricCount) = $G(tUserMetrics(n,"Title"),tMetric)
				Set tMetricInstance = $G(tUserMetrics(n,"Instance"))

				Set tSC = ..GetUserMetricInfo(.tMetric,.tStats,.tSummary,tMetricInstance)
				Quit:$$$ISERR(tSC)
				Set tMetricName(tUserMetricCount) = tMetric
			}
			Set n = $O(tUserMetrics(n))
		}
		Quit:$$$ISERR(tSC)
	
		#; gather info
		Set tSC = ..GetHostInfo(.tStats,.tSummary)
		Quit:$$$ISERR(tSC)

		Set tSC = ..GetQueueInfo(.tStats,.tSummary)
		Quit:$$$ISERR(tSC)

		Set tSC = ..GetEventLogInfo(.tStats,.tSummary)
		Quit:$$$ISERR(tSC)

		Set tCellHeight = ..monitorHeight
		Set:tCellHeight="" tCellHeight = 600
		
		Set tRows = 2 + ((tUserMetricCount+1)\2)
		Set tCellHeight = (tCellHeight / tRows) - 50
		Set tCellHeight = $FN(tCellHeight,"",2)

		#; display the info; use a table to layout the boxes
		&html<<table border="0" width="100%">>

		&html<<tr valign="top">>

		&html<<td width="45%">>
		Set tSC = ..DrawInfoTable("BusinessService",.tStats,$$$Text("Input Connections"),.tSummary,2,,,tCellHeight)
		Quit:$$$ISERR(tSC)
		&html<</td>>

		&html<<td width="1%">&nbsp;</td>>

		&html<<td width="45%">>
		Set tSC = ..DrawInfoTable("BusinessOperation",.tStats,$$$Text("Output Connections"),.tSummary,2,,,tCellHeight)
		Quit:$$$ISERR(tSC)

		&html<</td>>
		&html<</tr>>

		&html<<tr valign="top">>
		&html<<td width="45%">>

		Set tSC = ..DrawInfoTable("Queue",.tStats,$$$Text("Queues"),.tSummary,2,1,$$$Text("Items within the queue"),tCellHeight)
		Quit:$$$ISERR(tSC)
		&html<</td>>
		&html<<td width="1%">&nbsp;</td>>
		&html<<td width="45%">>

		Set tSC = ..DrawInfoTable("EventLog",.tStats,$$$Text("Event Log"),.tSummary,1,1,$$$Text("Elapsed time since error was logged"),tCellHeight)
		Quit:$$$ISERR(tSC)

		&html<</td>>
		&html<</tr>>
		If (tUserMetricCount>0) {
			For r = 3:1:tRows {
				&html<<tr valign="top">>

				For n = 1:1:2 {
					Set mn = ((r-3)*2) + n
					If (mn <= tUserMetricCount) {
						&html<<td width="45%">>
						Set tSC = ..DrawInfoTable(tMetricName(mn),.tStats,tMetricTitle(mn),.tSummary,1,1,,tCellHeight)
						Quit:$$$ISERR(tSC)
						&html<</td>>
						If (n=1) {
							&html<<td width="1%">&nbsp;</td>>
						}
					}
					Else {
						&html<<td width="45%">&nbsp;</td>>
					}
				}
				&html<</tr>>
			}
		}
		&html<</table>>

		#; update time field on client
		Set ..lastUpdate = $$$timeLocal
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}

	Quit tSC
]]></Implementation>
</Method>

<Method name="GetUserMetricClasses">
<Description><![CDATA[
Return a list of Business Metric classes that serve
up user dashboard information.<br/>
The list of Business Metrics is determined by looking at the 
^Ens.MonitorSettings global. This takes the following form:
<example>
 Set ^Ens.MonitorSettings("MetricClasses",1,"Metric") = NameOfMetric
 Set ^Ens.MonitorSettings("MetricClasses",1,"Title") = TitleToDisplay
 Set ^Ens.MonitorSettings("MetricClasses",1,"Instance") = MetricInstance // (optional)
</example>
Additional metrics would use a higher second subscript.]]></Description>
<FormalSpec>*pUserSettings</FormalSpec>
<Implementation><![CDATA[	Merge pUserSettings = ^Ens.Monitor.Settings("MetricClasses")
]]></Implementation>
</Method>

<Method name="GetUserMetricInfo">
<Description><![CDATA[
Get information from the given business metric cache and place it into
<var>pInfo</var> array.<br/>
If <var>pMetricInstance</var> is supplied, then it specifies the metric instance
to use, otherwise the first (or only) one is used.]]></Description>
<FormalSpec>pMetric:%String,&amp;pInfo,&amp;pSummary,pMetricInstance:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	Try {
		#; get info from metric cache
		If (pMetricInstance '= "") {
			Set tInstance = pMetricInstance
		}
		Else {
			#; find first instance
			Set tInstance = $O(^Ens.Metrics(pMetric,""))
		}
		If (tInstance="") {
			#; identify this as a metric info
			Set tBucket = "$$$METRIC:" _ pMetric
			Set pSummary(tBucket,1) = $LB($$$Text("Status"),$$$Text("No Data"))
			Quit
		}

		#; identify this as a metric info
		Set tBucket = "$$$METRIC:" _ pMetric _ ":" _ tInstance
		
		#; is this metric running
		Set tIsRunning = +$G(^Ens.Metrics(pMetric,tInstance,"%IsRunning"))
		Set tHasData = +$D(^Ens.Metrics(pMetric,tInstance))

		If ('tHasData) {
			Set pSummary(tBucket,1) = $LB($$$Text("Status"),$$$Text("No Data"))
		}
		Else {
			Set pSummary(tBucket,1) = $LB($$$Text("Last Update"),$G(^Ens.Metrics(pMetric,tInstance,"%LastUpdate")))
			If ('tIsRunning) {
				Set pSummary(tBucket,2) = $LB($$$Text("Status"),$$$Text("Not running"))
			}
		}

		Set tProp = $O(^Ens.Metrics(pMetric,tInstance,""))
		While (tProp '= "") {
			If ($E(tProp,1,1) '= "%") {
				#; metric information
				#; $LB(id,name,type,lamp,icon,value)
				Set tName = tProp
				Set:(tName=+tName) tName=$FN(tName,",")
				Set tMsg = ""
				Set tStatus = $S(tIsRunning:"OK",1:"DISABLED")
				Set tLamp = $Case(tStatus,"OK":"#80FF80","ERROR":"#FF4040","INACTIVE":"#FFFF80",:"#808080")
				Set tIcon = $Case(tStatus,"ERROR":"!","INACTIVE":"-","DISABLED":"X",:"")
				Set tID = tName
				Set tValue = $G(^Ens.Metrics(pMetric,tInstance,tProp))
				Set tSort1 = $Case(tStatus,"OK":3,"ERROR":1,:2)
				Set tSort2 = tName
				Set pInfo(tBucket,tSort1,tSort2) = $LB(tID,tName,tType,tLamp,tIcon,tValue)
			}
			Set tProp = $O(^Ens.Metrics(pMetric,tInstance,tProp))
		}
		Quit:$$$ISERR(tSC)
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	
	#; return modified name
	Set:$D(tBucket) pMetric = tBucket
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetHostInfo">
<Description><![CDATA[
Get information about currently running hosts and place it into
<var>pInfo</var> array.]]></Description>
<FormalSpec>&amp;pInfo,&amp;pSummary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	Try {
		#; summary
		Kill tResult
		Do ##class(CSPX.EnsHomeSummary).GetServiceSummary(.tResult,0)
		Set pSummary("BusinessService",1) = $LB($$$Text("Last Activity"),$G(tResult("1LastActivityTime")))
		Set pSummary("BusinessService",2) = $LB($$$Text("Completed"),$FN($G(tResult("2ActivitiesCompleted")),","))

		Kill tResult
		Do ##class(CSPX.EnsHomeSummary).GetOperationSummary(.tResult,0)
		Set pSummary("BusinessOperation",1) = $LB($$$Text("Last Activity"),$G(tResult("1LastActivityTime")))
		Set pSummary("BusinessOperation",2) = $LB($$$Text("Completed"),$FN($G(tResult("2ActivitiesCompleted")),","))
		Set pSummary("BusinessOperation",3) = $LB($$$Text("In Progress"),$FN($G(tResult("3MessagesInProgress")),","))

		#; host information
		#; run query to get stats, then group into buckets
		#dim tRS As %ResultSet
		Set tRS = ##class(%ResultSet).%New()
		Set tRS.ClassName = "Ens.Util.Statistics"
		Set tRS.QueryName = "EnumerateHostStatus"
	
		Set tSC = tRS.Execute()
		Quit:$$$ISERR(tSC)

		While (tRS.Next(.tSC)) {
			Quit:$$$ISERR(tSC)
			
			Set tType = tRS.Data("Type")
			Set tName = tRS.Data("Name")
			
			#; Skip internal services
			If (tName = "EnsLib.Testing.Service")||
				(tName = "Ens.ManagerService")||
				(tName = "Ens.ScheduleService") {
				Continue
			}
			
			Set tAdapterState = tRS.Data("AdapterState")
			Set tMsg = tRS.Data("Status") _ $S(tAdapterState="":"",1:"("_ tAdapterState_")")
			Set tStatus = $ZCVT(tRS.Data("Status"),"U")
			Set tBucket = tType
			Set tLamp = $Case(tStatus,"OK":"#80FF80","ERROR":"#FF4040","INACTIVE":"#FFFF80",:"#808080")
			Set tIcon = $Case(tStatus,"ERROR":"!","INACTIVE":"-","DISABLED":"X",:"")
			Set tID = tName
			Set tName = $P(tName,".",$L(tName,".")) // short name

			Set tSort1 = $Case(tStatus,"OK":3,"ERROR":1,:2)
			Set tSort2 = tName

			#; $LB(id,name,type,lamp,icon,a state)
			Set pInfo(tBucket,tSort1,tSort2) = $LB(tID,tName,tType,tLamp,tIcon,tMsg)
		}
		Quit:$$$ISERR(tSC)
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetQueueInfo">
<Description><![CDATA[
Get information about currently running queues and place it into
<var>pInfo</var> array under "Queues".]]></Description>
<FormalSpec>&amp;pInfo,&amp;pSummary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	Try {
		#; queue information
		Set tRS = ##class(%ResultSet).%New()
		Set tRS.ClassName = "Ens.Queue"
		Set tRS.QueryName = "Enumerate"
		
		Set tSC = tRS.Execute()
		Quit:$$$ISERR(tSC)

		Set n = 0
		Set tTotal = 0
		Set tType = "Queue"
		While (tRS.Next(.tSC)) {
			Quit:$$$ISERR(tSC)

			Set n = n + 1
			Set tCount = tRS.Data("Count")

			#; set lamp color by count
			Set tIcon = ""
			If (tCount < 1) {
				Set tLamp = "#00FF00"
			}
			ElseIf (tCount < 10) {
				Set tLamp = "#40A000"
			}
			ElseIf (tCount < 50) {
				Set tLamp = "#808000"
			}
			ElseIf (tCount < 200) {
				Set tLamp = "orange"
			}
			Else {
				Set tLamp = "#FF4040"
				Set tIcon = "!"
			}

			Set tTotal = tTotal + tCount
			Set tName = tRS.Data("Name")
			Set tBucket = tType
			Set tID = tName
			Set tName = $P(tName,".",$L(tName,".")) // short name

			Set tSort1 = -tCount
			Set tSort2 = tName

			Set tCount = $FN(tCount,",")

			#; $LB(id,name,type,lamp,icon,count)
			Set pInfo(tBucket,tSort1,tSort2) = $LB(tID, tName,tType,tLamp,tIcon,tCount)
		}
		Quit:$$$ISERR(tSC)

		#; find suspended messages and add to queue info
		&sql(SELECT COUNT(*) INTO :tSusCount From Ens.MessageHeader WHERE Status = 5)

		Set tIcon = "S"
		Set tLamp = $S(tSusCount=0:"#00FF00",1:"orange")
		Set tName = $$$Text("**Suspended Messages**")

		Set pInfo(tType,-tSusCount,"zzz") = $LB(tName,tName,tType,tLamp,tIcon,tSusCount)
		Set tTotal = tTotal + tSusCount

		Set pSummary("Queue",1) = $LB($$$Text("Total Queued Messages"),$FN(tTotal,","))
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetEventLogInfo">
<Description><![CDATA[
Get information about top items within the Event Log and place it into
<var>pInfo</var> array under "EventLog"]]></Description>
<FormalSpec>&amp;pInfo,&amp;pSummary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	Try {
		#; summary
		Do ##class(CSPX.EnsHomeSummary).GetLogSummary(.tResult,0)
		Set pSummary("EventLog",2) = $LB($$$Text("Last Error"),$G(tResult("1LastErrorTime")))
		Set pSummary("EventLog",1) = $LB($$$Text("Errors Since Last Start"),$FN($G(tResult("2TotalErrorCount")),","))

		#; run query to get stats
		#dim tRS As %ResultSet

		Set tStartTime = $G($$$EnsRuntime("StartTime"))

		Set tSQL = "SELECT TOP 100 ID, TimeLogged,Type,ConfigName As Source,Text"
		Set tSQL = tSQL _ " FROM Ens_Util.Log "
		Set tSQL = tSQL _ " WHERE Type IN (2,3,6)" // error,warning,alert
		Set:tStartTime'="" tSQL = tSQL _ " AND TimeLogged >= '"_tStartTime_"'"
		Set tSQL = tSQL _ " ORDER BY ID DESC"

		Set tRS = ##class(%ResultSet).%New()

		Set tSC = tRS.Prepare(tSQL)
		Quit:$$$ISERR(tSC)

		Set tSC = tRS.Execute()
		Quit:$$$ISERR(tSC)

		Set n = 0
		Set tBucket = "EventLog"
		Set tH = $ZTIMESTAMP
		Set tMinutes = (+tH*24*60)+(($P(tH,",",2))\60)

		While (tRS.Next(.tSC)) {
			Quit:$$$ISERR(tSC)
			
			Set n = n + 1
			Set tID = tRS.Data("ID")
			Set tType = "EventLog"
			Set tEventType = tRS.Data("Type")
			Set tText = tRS.Data("Text")
			Set:($E(tText,1,5)="ERROR") tText = $P(tText,":",2,999)
			Set tName = tID _ ": " _ tText
			Set tTime = tRS.Data("TimeLogged")
			
			#; find age of event
			Set tTLog = $ZDTH(tTime,3)
			Set tTLogMinutes = (+tTLog*24*60)+(($P(tTLog,",",2))\60)
			Set tAge = tMinutes - tTLogMinutes
			Set tIcon = $S(tEventType=6:"A",tEventType=3:"W",1:"!")

			If (tAge < 120) {
				Set tMsg = $$$FormatText($$$Text("%1 min"),tAge)
				Set tLamp = "red"
			}
			ElseIf (tAge > (24*14*60)) {
				Set tMsg = $$$FormatText($$$Text("%1 wk"),tAge\(24*60*7))
				Set tLamp = "#C04040"
			}
			Else {
				Set tMsg = $$$FormatText($$$Text("%1 hr"),tAge\60)
				Set tLamp = "orange"
			}

			#; sort by age
			Set tSort1 = tAge
			Set tSort2 = n

			#; $LB(id,name,type,lamp,icon,msg)
			Set pInfo(tBucket,tSort1,tSort2) = $LB(tID,tName,tType,tLamp,tIcon,tMsg)
		}
		Quit:$$$ISERR(tSC)
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="DrawInfoTable">
<Description><![CDATA[
Render HTML for one category of monitor info.]]></Description>
<FormalSpec>pCategory:%String,&amp;pInfo,pTitle:%String,&amp;pSummary,pCols:%Integer=2,pShowDetail:%Boolean=0,pDetailTitle:%String="&quot;,pCellHeight:%Integer=200</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	Try {
		&html<<div class="MonitorWrapper">>
		&html<<div class="MonitorCaption">#($ZCVT(pTitle,"O","HTML"))#</div>>

		#; if present, show summary info
		If $D(pSummary(pCategory)) {
			&html<<div class="MonitorSummary"><table border="0" cellpadding="1"><tr>>
			Set k = $O(pSummary(pCategory,""))
			While (k'="") {
				Set tLabel = $LG(pSummary(pCategory,k),1)
				Set tValue = $LG(pSummary(pCategory,k),2)
				&html<<td class="SummaryLabel" nowrap>#($ZCVT(tLabel,"O","HTML"))#:&nbsp;</td><td class="SummaryValue" nowrap>#($ZCVT(tValue,"O","HTML"))#&nbsp;&nbsp;</td>>
				Set k = $O(pSummary(pCategory,k))
			}
			&html<</tr></table></div>>
		}

		#; table of items
		#; mouseout/over logic is needed as IE is not good at hover styles
		Set mlogic = "onmouseover=""this.className='ItemHover';"" onmouseout=""this.className='Item';"" "
		&html<<div class="MonitorScrollBox" style="height:#(pCellHeight)#px;">>
		&html<<table class="MonitorTable" border="0" cellpadding="0" cellspacing="0">>
		&html<<tr>>
		Set col = 1

		Set tKey = $O(pInfo(pCategory,""))
		While (tKey '= "") {
			Set tKey2 = $O(pInfo(pCategory,tKey,""),1,data)
			While (tKey2 '= "") {
				If (col > pCols) {
					#; end of this row
					&html<</tr><tr>>
					Set col = 1
				}

				Set tID = $LG(data,1)
				Set tName = $LG(data,2)
				Set tShortName = tName
				Set tShortName2 = $S($L(tShortName)>50:$E(tShortName,1,50)_"...",1:tShortName)
				Set tLampStyle = "background:" _ $LG(data,4,"#C0C0C0") _ ";"
				Set tIcon = $LG(data,5)
				Set tDetail = $LG(data,6)
				Set:tIcon="" tIcon = "&#149;"
				If (pCategory = "EventLog") {
					Set tShortName = $S(tIcon="A":$$$Text("Alert"),tIcon="W":$$$Text("Warning"),1:$$$Text("Error"))
					Set tLampStyle = "background:" _ $S(tIcon="A":"yellow;",tIcon="W":"orange;",1:"red;")
				}
				&html<<td class="Lamp" style="#(tLampStyle)#">&nbsp;#(tIcon)#&nbsp;</td><td class="Item" nowrap title="#($ZCVT(tShortName,"O","HTML"))#" onclick="zenPage.selectItem('#($ZCVT(pCategory,"O","JS"))#','#($ZCVT(tID,"O","JS"))#','#($ZCVT(tShortName,"O","JS"))#');" #(mlogic)#>&nbsp;#($ZCVT(tShortName2,"O","HTML"))#&nbsp;</td>>
				If (pShowDetail) {
					&html<<td style="text-align:right;" nowrap title="#($ZCVT(pDetailTitle,"O","HTML"))#">&nbsp;#(tDetail)#&nbsp;</td>>
				}
				Set col = col + 1
				Set tKey2 = $O(pInfo(pCategory,tKey,tKey2),1,data)
			}
			Set tKey = $O(pInfo(pCategory,tKey))
		}

		#; are there detail columns
		If (col <= pCols) {
			&html<<td colspan="#((2+pShowDetail)*(1+pCols-col))#" style="background: #F0F0F0;">&nbsp;</td>>
		}		
		&html<</tr></table>>
		&html<</div></div>>
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}

	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnAfterCreatePage">
<Description><![CDATA[
Set Locator bar and determine whether to show change password option.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Add locator links for this page to the locator bar
	Set tLocator = ..%GetComponentById("locatorBar")
	Set tLocatorLink = ##class(%ZEN.Auxiliary.locatorLink).%New()
	Do tLocator.links.Insert(tLocatorLink)
	Do ..%AddComponent(tLocatorLink)
	Set tLocatorLink.caption = "Ensemble"
	Set tMgmtLink = ##class(%CSP.Page).Link(##class(%EnsembleMgr).DetermineMgmtURLForNamespace($ZU(5)))
	Set tLocatorLink.href = $ZCVT(tMgmtLink,"O","URL")
	
	Set tLocatorLink = ##class(%ZEN.Auxiliary.locatorLink).%New()
	Do tLocator.links.Insert(tLocatorLink)
	Do ..%AddComponent(tLocatorLink)
	Set tLocatorLink.caption = $$$Text("System Monitor")
	Set tLocatorLink.href = $ZCVT(%request.URL,"O","URL")
	
	Quit 1
]]></Implementation>
</Method>

<Method name="DrawTitle">
<Description><![CDATA[
Used to draw title for this page. pHelpAddress is need to build the link for Help for this page.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pSeed = $$$TextHTML("System Monitor")
	Set pHelpAddress = "Ensemble,SystemMonitor"
	Do %application.DrawTitle(pSeed_"^"_pHelpAddress)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="onlayoutHandler">
<Description><![CDATA[
This client event, if present, is fired when the page 
is first loaded or whenever it is resized.<br>
If this is called at load time, then <var>load</var> will
be true.]]></Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[
	// adjust size of side bar etc
	var sidebar = zenPage.getComponentById('details');
	var divSidebar = sidebar.getEnclosingDiv();

	// find divs for title & mainMenu
	var title = zenPage.getComponentById('titleBar');
	var locator = zenPage.getComponentById('locatorBar');
	var divTitle = title.getEnclosingDiv();
	var divLocator = locator.getEnclosingDiv();

	// find height of window
	var winHeight = zenGetWindowHeight();

	// adjust size of menu
	var sz = winHeight - (parseInt(divTitle.offsetHeight) + parseInt(divLocator.offsetHeight)) - 20;
	divSidebar.style.height = sz + 'px';
]]></Implementation>
</Method>

<Method name="onServerMethodError">
<Description><![CDATA[
Intercept xmlHTTP errors and reload page rather than
putting up alert box.]]></Description>
<FormalSpec>err</FormalSpec>
<Language>javascript</Language>
<Implementation><![CDATA[	top.document.location.reload();
]]></Implementation>
</Method>
</Class>
</Export>