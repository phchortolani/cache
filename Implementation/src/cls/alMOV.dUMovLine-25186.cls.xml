<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alMOV.dUMovLine">
<Description><![CDATA[

The Movement Lines <p>
Currently is implemented using Pseudo relations that allow developers to interact 
with the object as if it were a true object.<br>
<p>
TODO<br>
move away from the current @nM v1 system of relations and development.<br>
when this occurs, the Pseudo relations need to be changed/removed ]]></Description>
<ClassType>persistent</ClassType>
<IncludeCode>INConst,COMSYS</IncludeCode>
<Super>User.INMOVLine</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; History:
; 30-Jan-2008	HQN		SR15625 Changed class signature dREQIssueLine to dUReqIssueLine
; 30-Jan-2008	LB		SR15626 Changed class signature of dStatus to dUStatus
; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
; 28-NOV-2007	LB		SR15598: Created 
/---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="objFromStorage">
<Description><![CDATA[
Pseudo relation to Implement better object relations under a @nM enviroment<br>
The Transient to represent FromStorage property from <class>User.INMOVLine</class>   ]]></Description>
<Type>alLOC.dUStorage</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00534"/>
</Property>


<Property name="objToStorage">
<Description><![CDATA[
Pseudo relation to Implement better object relations under a @nM enviroment<br>
The Transient to represent ToStorage property from <class>User.INMOVLine</class>    ]]></Description>
<Type>alLOC.dUStorage</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00535"/>
</Property>


<Property name="IssueLines">
<Type>alREQ.dUReqIssueLine</Type>
<Collection>list</Collection>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00532"/>
</Property>


<Property name="Movement">
<Description><![CDATA[
Pseudo relation to Implement better object relations under a @nM enviroment<br>
The Transient to represent the parent movement  ]]></Description>
<Type>alMOV.dUMov</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00533"/>
</Property>

<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="%OnBeforeSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called before 
any data is written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.
<p>Makes sure edited transient objects have their values saved</p>]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 17-Sep-2010	SCR		SR17571: Call to supper
	;-------------------------------------------------------------------------------
	//save issue lines
	set delim = ";"
	set strIDs = "" //delim
		
	for loopi =1:1:%this.IssueLines.Count() {
		set tempLine = %this.IssueLines.GetAt(loopi)
		do tempLine.%SetModified($$$NO)
		set strIDs = strIDs _tempLine.%Id()_delim	
	}
	set i%IssueLine = strIDs
	if (%this.objToStorage '= $$$NULLOREF) && (%this.objToStorage.%IsModified()) {
		set i%ToStorage= %this.objToStorage.StockLocation	
	}
	
	if (%this.objFromStorage '= $$$NULLOREF) && (%this.objFromStorage.%IsModified()) {
		set i%FromStorage= %this.objFromStorage.StockLocation	
	}
	set sc=##Super(insert) ; SR17471
	quit sc
]]></Implementation>
</Method>

<Method name="IsFirmable">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 16-Jan-2009	GRF		SR16284: test for zero quantity (or null)
	; 04-Nov-2008	HQN		SR16101: In the case of a dBundleStock getting reduced
	; 							to zero prior to this processing, return meaningful
	; 							error
	; 29-Oct-2008	HQN		SR16101: Replicated Qty Available check from 
	; 							alDRP.dMovementType.Relocate so we can check 
	; 							validity from external calls eg: @nm button (dis)able
	; 14-Oct-2008	Luke	15910 Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK 
	
	if i%FromStorage = i%ToStorage {
		set strMessage = $$$Text("IN00855")    ; "Can not move Item to the same storage"
		set sc =$$$ERROR($$$GeneralError,strMessage)
 	}
	; SR16101 vvvv
	if $$$ISOK(sc) {
		set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement:GetReservedForBundleStore")
		set sc = objResultSet.Execute(%this.Item,%this.Movement.Location.Location,%this.FromStorage.StockLocation,%this.Bundle)
		if $$$ISOK(sc) {
			set fltQtyPlanned = 0
			while objResultSet.Next(.sc) {
				set fltQtyPlanned = fltQtyPlanned + objResultSet.Data("QtyRequired")
			}
			set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(%this.Item_"||"_%this.Movement.Location.Location_"||"_%this.FromStorage.StockLocation_"||"_%this.Bundle,,.sc)
			; 04-Nov-2008 vvvv
			if objBundleStock = $$$NULLOREF {      ; "Not enough Items in Storage (Quantity = %1)"
				set sc = $$$ERROR($$$GeneralError,$$$Text($listbuild("alMOV0003",0)))
			; 04-Nov-2008 ^^^^
			
			} elseif +%this.QtyRequired = 0 {      ; "Required Quantity can not be 0"   ; SR16284
				set sc = $$$ERROR($$$GeneralError,$$$Text($listbuild("alMOV0001")))
				
			} elseif $$$ISOK(sc) && (%this.QtyRequired > (objBundleStock.QtyOnHand - fltQtyPlanned)) {
				set sc = $$$ERROR($$$GeneralError,$$$Text($listbuild("alMOV0004",fltQtyOnHand,fltQtyPlanned)))
			}           ; "Not enough Items in Storage (Quantity = %1)(Planned Quantity = %2)"
		}
	}
	; SR16101 ^^^^
	quit sc
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
Method setDeepLineId()
{
	set delim = ";&quot;
	set strIDs = delim
	for loopi =1:1:%this.IssueLines.Count() {
		set tempLine = %this.IssueLines.GetAt(loopi)
		do tempLine.%SetModified($$$NO)
		set strIDs = strIDs _tempLine.%Id()_delim
		
	}
	set i%IssueLine = strIDs
}*/
</Content>
</UDLText>


<Method name="%OnOpen">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Open</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being opened.

<P>If this method returns an error then the object will not be opened.</P>
<P>Load all lines for this record, sets modified to $$$NO</br>
Workaround for pseudo relations, this would be automated for true Relations
</P>]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 11-Feb-2009	DavidR	SR16338 Added extra check to ensure that the routine does
	; 							not continue if there are no issue lines, causing a
	; 							failure.
	; 24-Jan-2008	HQN		SR15625 Changed class signature dINIssueLine to dUIssueLine
	; 18-Dec-2007	HQN		Use GetInstance instead of %Open
	;-------------------------------------------------------------------------------
	set delim = ";"
	if (%this.IssueLines.Count() = 0) && (i%IssueLine '= $$$NULLOREF){ ;SR16338
		set blnModified = %this.IssueLines.%IsModified()
		set strList  = i%IssueLine

		set loopLength = $length(strList,delim) 
		for loopi = 1:1:loopLength {
			set tempLine = ##class(alISS.dUIssueLine).GetInstance($piece(strList,delim,loopi))
			if tempLine '= "" {
				do tempLine.%SetModified(0)
				do %this.IssueLines.Insert(tempLine)
			}
		}
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="FromStorageSet">
<Description><![CDATA[
Pseudo relation. <br>
This is an over-ride of the Setter of the FromStorage of type <code>alLOC.dUStorage</code> <p>
Set the Underlying @nM FromStorage (which is a string) and creates a Transient property of 
type <code>alLOC.dUStorage</code> <p>

It method is automatically called when you set the <code>FromStorage</code> with either a 
string or a <code>alLOC.dUStorage</code> object<br>
 Params:<br>
 
 Returns: <br>
 	<class>%Library.Status</class>]]></Description>
<FormalSpec>objStorage</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 04-Apr-2008 	Luke	extended the setting of the Store to handle V2 object if 
	; 						needed 
	; 24-Jan-2008	HQN		SR15625 Changed class signature dStorage to dUStorage
	;-------------------------------------------------------------------------------
	if $IsObject(objStorage) && objStorage.%Extends("alLOC.dUStorage") {
			set i%objFromStorage = objStorage
			set i%FromStorage    = objStorage.StockLocation
			
	} elseif $IsObject(objStorage) && objStorage.%Extends("alLOC.dStorage") {
			set i%objFromStorage = ##class(alLOC.dUStorage).%OpenId(%this.Company_"||"_objStorage.Location.Code_"||"_objStorage.Code)
			set i%FromStorage    = i%objFromStorage.StockLocation
			
	} else {
		set i%FromStorage = objStorage
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="FromStorageGet">
<Description><![CDATA[
Pseudo relation. <br>
Creates a <class>alLOC.dUStorage</class> based on the <code>alMOV.dUMov</code> Location and
this lines storage. <br>

It method is automatically called when you access the <code>FromStorage</code><br>
 Params:<br>
 
 Returns: <br>
 	<class>alLOC.dUStorage</class>]]></Description>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dStorage to dUStorage
	;-------------------------------------------------------------------------------
	if (i%FromStorage '= $$$NULLOREF) && (i%objFromStorage = $$$NULLOREF) && (%this.Movement '= $$$NULLOREF) {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Movement.Location.Location_"||"_i%FromStorage)
		if (objStorage '= $$$NULLOREF) {
			set i%objFromStorage = objStorage
		}
	}
	quit i%objFromStorage
]]></Implementation>
</Method>

<Method name="ToStorageSet">
<Description><![CDATA[
Pseudo relation. <br>
This is an over-ride of the Setter of the ToStorage of type <code>alLOC.dUStorage</code> <p>
Set the Underlying @nM ToStorage (which is a string) and creates a Transient property of 
type <code>alLOC.dUStorage</code> <p>

It method is automatically called when you set the <code>ToStorage</code> with either a 
string or a <code>alLOC.dUStorage</code> object<br>
 Params:<br>
 
 Returns: <br>
 	<class>%Library.Status</class>]]></Description>
<FormalSpec>objStorage</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dStorage to dUStorage
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if $IsObject(objStorage) && objStorage.%Extends("alLOC.dUStorage") {
		//if (objStorage.ParentLocation = %this.Movement.ToLocn) {
			set i%objToStorage = objStorage
			set i%ToStorage    = objStorage.StockLocation
			do i%objToStorage.%SetModified($$$NO)
			/*
			set blnReturn = $$$YES
		} else {
			set blnReturn = $$$NO
			
		}*/
		
	} else {
		set i%ToStorage = objStorage
	}
	quit sc
]]></Implementation>
</Method>

<Method name="ToStorageGet">
<Description><![CDATA[
Pseudo relation. <br>
Creates a <class>alLOC.dUStorage</class> based on the <code>alMOV.dUMov</code> Location and
this lines storage. <br>

It method is automatically called when you access the <code>ToStorage</code><br>
 Params:<br>
 
 Returns: <br>
 	<class>alLOC.dUStorage</class>]]></Description>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dStorage to dUStorage
	;-------------------------------------------------------------------------------
	if (i%ToStorage '= $$$NULLOREF) && (i%objToStorage = $$$NULLOREF) && (%this.Movement '= $$$NULLOREF) {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Movement.Location.Location_"||"_i%ToStorage)
		if (objStorage '= $$$NULLOREF) {
			set i%objToStorage = objStorage
		}
	}
	
	quit i%objToStorage
]]></Implementation>
</Method>

<Method name="CreateMoveLine">
<ClassMethod>1</ClassMethod>
<Implementation/>
</Method>

<Method name="MovementGet">
<Description><![CDATA[
Pseudo relation. <br>
This creates the relationship between this , the line , and the header <p>
Creates a <class>alMOV.dUMov</class> based on the <code>StockMovementNumber</code> of this object.<p>
It method is automatically called when you access the <code>Movement</code><br>
 Params:<br>
 
 Returns: <br>
 	<class>alLOC.dUStorage</class>]]></Description>
<ReturnType>alMOV.dUMov</ReturnType>
<Implementation><![CDATA[
	if (i%Movement = $$$NULLOREF) && (%this.StockMovementNumber '= $$$NULLOREF) {
		set i%Movement = ##class(alMOV.dUMov).%OpenId("0||"_%this.StockMovementNumber)
	}
	quit i%Movement
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
/// Checks to see if the object identified by the ID &lt;var&gt;id&lt;/var&gt; exists in the extent.
/// 
/// &lt;p&gt;Returns &lt;CLASS&gt;%Boolean&lt;/CLASS&gt; TRUE is it exists, FALSE if it does not.
ClassMethod %ExistsId(id As %String) As %Boolean [ CodeMode = generator, ProcedureBlock = 1 ]
{
	;-------------------------------------------------------------------------------
	; Wrapper to prepend company to key before checking for record
	; 
	; History
	; 27-Nov-2007	GRF		SR15615: Created
	;-------------------------------------------------------------------------------
	set %code=0
	$$$GENERATE(" quit %Super.%ExistsId("&quot;0||"&quot;_id)")
	quit $$$OK
}*/
</Content>
</UDLText>


<Method name="CreateMovement">
<Description><![CDATA[
Creates a <class>alDRP.dMovement</class> based on the information of the 
Line. <br>
this is then passed to <class>alSOH.iSOH</class> ValidateMovement 
and <class>alSOH.iSOH</class> ConfirmMovement which completes the movement process 
<p>
 Params:<br>
 
 Returns: <br>
 	<class>%Status</class>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 10-Oct-2008 	Luke	SR16025 Code clean up .... removed commented code from apr-2008 and sep-2008
	; 09-sep-2008 	Luke	SR15897 Reverted SR15800:
	; 01-Aug-2008	Luke	SR15814: Corrected sc formation and use of $$$Text
	; 16-Jul-2008   Luke    SR15800: Add check if the Conversion has been run
	; 22-Apr-2008	HQN		SR15673: Corrected reference to iUINV
	; 07-Mar-2008   Luke	Changed to Movement State Engine Mechanics
	; 05-Mar-2008	Luke	moved movment to V2 object coding 
	; 27-Nov-2007	LB		SR15597: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
			
	set objMove      = ##class(alMOV.dMovement).%New()
	set objMove.Item = ##class(alINV.iUINV).GetItem(%this.Item)   ; FIXME ,.sc //SR15673	
	set objMove.FromLocn    = ##class(alLOC.iLOC).GetLocation(%this.Movement.Location.Location)
	set objMove.ToLocn      = ##class(alLOC.iLOC).GetLocation(%this.Movement.Location.Location)
	set objMove.FromStorage = ##class(alLOC.iLOC).GetStorage(%this.Movement.Location.Location,%this.FromStorage.StockLocation)
	set objMove.ToStorage   = ##class(alLOC.iLOC).GetStorage(%this.Movement.Location.Location,%this.ToStorage.StockLocation)	
	set objMove.Bundle = ##class(alSOH.dBundle).%OpenId(%this.Bundle)
	set objMove.Reference   = %this.Movement.StockMovementNumber
	set objMove.LineNumber  = %this.Number
	set objMove.QtyPicked   = %this.QtyRequired
	set objMove.QtyReceived = 0
	set objMove.QtyRequired = %this.QtyRequired
	set objMove.Completed   = $$$NO
	set sc = objMove.ChangeState(4)

	quit sc
]]></Implementation>
</Method>

<Method name="ANMSave">
<Description><![CDATA[
<p>Saves the record utilising <code>$$Save^COMUtils</code>
Relies on INConst.inc macros to set the pieces of the record</br>
<b>NOTE: Should be code generated</b>
</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; V1 Save
	; 
	; History:
	; 30-Oct-2009	DWR		SR16999: pass status message into $$DecodeError^COMUtilError
	; 31-Jul-2008	Luke	SR15814: Corrected use of SC 
	; 06-Dec-2007	GRF		Get from INMOVLine
	;-------------------------------------------------------------------------------
 	set sc = $$$OK // SR15814:
	set ANMKeyLine = %this.Movement.StockMovementNumber_","_%this.Number 
	set ANMMovLine = $get(^INMOVLine(0,%this.Movement.StockMovementNumber,%this.Number,1))
	
	set $$$INMOVLineBundle(ANMMovLine)      = i%Bundle
	set $$$INMOVLineFromStorage(ANMMovLine) = i%FromStorage 
	set $$$INMOVLineToStorage(ANMMovLine)   = i%ToStorage 
	set $$$INMOVLineItem(ANMMovLine)        = i%Item 
	set $$$INMOVLineQTYPicked(ANMMovLine)   = i%QTYPicked
	set $$$INMOVLineQTYReceived(ANMMovLine) = i%QTYReceived
	set $$$INMOVLineQtyRequired(ANMMovLine) = i%QtyRequired
	set $$$INMOVLineQTYPicked(ANMMovLine)   = i%QTYPicked
	set $$$INMOVLineQTYReceived(ANMMovLine) = i%QTYReceived
	set $$$INMOVLineIssueLine(ANMMovLine)	= i%IssueLine
	
	set strStatus = $$Save^COMUtils("INMOVLine",ANMKeyLine,ANMMovLine,$$$YES) // SR15814:
	if $$$ISERR(strStatus){
	;	set strMessage = $$DecodeError^COMUtilError() // SR15814:     
		set strMessage = $$DecodeError^COMUtilError(strStatus) // SR15814:     
		set sc =$$$ERROR($$$GeneralError,strMessage) // SR15814:
	}
  	quit sc
]]></Implementation>
</Method>
<Query name="GetMovLines">
<Type>%SQLQuery</Type>
<FormalSpec>StockMovementNumber:%String</FormalSpec>
<SqlQuery>	SELECT %ID FROM dUMovLine WHERE (StockMovementNumber = :StockMovementNumber)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>