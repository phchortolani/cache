<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.cache.Namespace">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="GetDirNamespaceList">
<ClassMethod>1</ClassMethod>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[	// Looking for all the namespaces in caché installation.
	for intLoop = 1:1:$zutil(90, 0)
	{
		set arrNamespaces($zutil(90, 2, 0, intLoop)) = ""
	}

 	// Filling the dir list with the namespaces found.
 	set lstDirNamespace = ##class(%ArrayOfDataTypes).%New()
 	set intLoop = 0
 	set strNamespace = ""
 	while ($length($order(arrNamespaces(strNamespace))) > 0)
 	{
	 	set strNamespace = $order(arrNamespaces(strNamespace))
		set strPath = $$defdir^%GLO(strNamespace)

		do lstDirNamespace.SetAt(strNamespace, strPath)
 	}

	quit lstDirNamespace]]></Implementation>
</Method>

<Method name="GetAlphaLincList">
<ClassMethod>1</ClassMethod>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[	// Look for ECP connections
	for intLoop = 0:1
	{
		set strGetClientState = $System.ECP.GetClientState(intLoop)
		quit:('$find(strGetClientState, "^"))

		set arrECP($piece(strGetClientState, "^", 3)) = $piece(strGetClientState,
			"^", 1)
	}

	// Looking for all the namespaces in caché installation.
	for intLoop = 1:1:$zu(90, 0)
	{
		set arrNamespaces($zu(90, 2, 0, intLoop)) = ""
	}

 	// Filling the namespace list with the namespaces found.
 	set lstAlphaLinc = ##class(%ListOfDataTypes).%New()
 	set intLoop = 0
 	set strNamespace = ""
 	while ($length($order(arrNamespaces(strNamespace))) > 0)
 	{
	 	set strNamespace = $order(arrNamespaces(strNamespace))
		set blnValid = $$$NO
		if (($extract(strNamespace) = "%") || ($extract(strNamespace) = "@"))
		{
			// Ignore System namespaces
		}
		elseif ($$defsys^%GLO(strNamespace) '= "")
		{
			// ECP connected database. Ignore if ECP is down.
			set blnValid = (arrECP($$defsys^%GLO(strNamespace)) = 5) // 5 = Normal
		}
		else
		{
			set strPath = $$defdir^%GLO(strNamespace)
			if (strPath '= "")
			{
				if (('##class(%Dictionary.ClassDefinition).%ExistsId("%SYSTEM.Database")) ||
				    ##class(%SYSTEM.Database).Exists(strPath))
				{
					// Found a valid database. Is it Alphalinc?
					set blnValid = ..IsAlphalinc(strNamespace)
				}
			}
		}

		if (blnValid)
		{
			do lstAlphaLinc.Insert(strNamespace)
			set intLoop = intLoop + 1
		}
 	}
 
	quit lstAlphaLinc]]></Implementation>
</Method>

<Method name="IsAlphalinc">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrNamespace:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set $ztrap = "exception"

	set blnIsAlphalinc = $data(^[pstrNamespace]WWWVERSION(0, "AlphaLinc"))

finally
	quit blnIsAlphalinc

exception
 	set $ztrap = ""
	set blnIsAlphalinc = $$$NO

	goto finally]]></Implementation>
</Method>
</Class>
</Export>