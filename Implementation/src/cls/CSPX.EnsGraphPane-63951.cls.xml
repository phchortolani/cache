<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsGraphPane">
<Description><![CDATA[
An AutoPage pane that displays an SVG graph.]]></Description>
<ClassType/>
<IncludeCode>Ensemble</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Util.Pane</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Parameter name="RefreshRate">
<Default>7000</Default>
</Parameter>


<Property name="AutoRefresh">
<Description><![CDATA[
If true, then this table is automatically updated.]]></Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>


<Method name="DrawHEAD">
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Merge tID = pInstance.IDValues
	
	Set tCurrHost = $G(tID(1))

	// override table style
	&html<
<style>
TABLE.LayoutMain TD.LayoutContentCol {
	background: #A0A0EE;
	padding-left: 0px;
	vertical-align: top;
}

TABLE.Graph {
	font-size: 0.8em;
}

.Text1 {
	font-weight: bold;
	font-family: verdana;
	padding-left: 10px;
}

.MonitorMenu {
	color: yellow;
	font-family: verdana;
	padding-left:2px;
	background: #000040;
	background-image: url(/csp/broker/images/grad-blue-10x30.png);
	background-repeat: repeat-x;
}

#SVGEmbed{
	overflow:hidden;
	border:1px solid darkblue;
}

#hostMenu {
	height: 310px;
}

</style>>

	&html<
<script language="javascript">

var currHost = '#($ZCVT(tCurrHost,"O","JS"))#';

// time used for refresh
var timerID = null;

// call this to dynamically refresh the table
function refreshGraph()
{
	if (timerID) {
		self.clearTimeout(timerID);
	}

	var auto = true;
	callServerRefresh(auto,currHost,timeWindow,yMinValue,yMaxValue);
}

// pick best grid lines for graph
function updateGridLines()
{
	var xgrid = 0;
	var ygrid = 10;
	var labels = null;
	
	switch (timeWindow) {
	case 1:
		xgrid = 7;
		labels = "60m:50m:40m:30m:20m:10m:0";
		break;
	case 8:
		xgrid = 9;
		labels = "8h:7h:6h:5h:4h:3h:2h:1h:0";
		break;
	case 24:
		xgrid = 25;
		labels = "24h:21h:18h:15h:12h:9h:6h:3h:0";
		break;
	case 168:
		xgrid = 8;
		labels = "7d:6d:5d:4d:3d:2d:1d:0";
		break;
	}

	// x labels
	var lblArray = null;
	if (labels) {
		lblArray = labels.split(':');
	}

	getGraph().setGridLines(xgrid,ygrid);
	getGraph().setXLabels(lblArray);
}

// set best scale to match data
function updateScale(yMax)
{
	var yscale = 10;
	
	if (yMax > 10) {
		var log = Math.LOG10E * Math.log(yMax);
		var f = Math.floor(log);
		if ((log - f) > .65) {
			yscale = Math.pow(10,f+1);
		}
		else if ((log - f) > .3) {
			yscale = Math.pow(10,f) * 5;
		}
		else {
			yscale = Math.pow(10,f) * 2;
		}
	}

	yMaxValue = yscale;
	getGraph().setScale(0, yscale);
}

function setTimeWindow(tw)
{
	if (tw != timeWindow) {
		timeWindow = tw;
		updateGridLines();
		refreshGraph();
	}
}

function changeHost()
{
	var select = self.document.getElementById("hostMenu");
	setHost(select.value);
}

function setHost(host)
{
	currHost = host;

	var span = self.document.getElementById("hostSpan");
	if (span) {
		span.innerText = currHost;
	}
	refreshGraph();
}

// update contents of host menu
// list is csv list of values
function setHostMenu(list)
{
	var select = self.document.getElementById("hostMenu");
	if (!select) return;

	// get current set of values; see if there is a change
	var oldlist = '';
	for (var i = 0; i < select.options.length; i++) {
		oldlist = oldlist + (oldlist=='' ? '' : ',') + select.options[i].value;
	}
	if (list == oldlist) return;

	var old = select.value;
	var items = list.split(",");
	select.options.length = 0
	var oldExists = false;
	var first = '';

	for (var i = 0; i < items.length; i++) {
		var val = items[i];
		if (i == 0) {
			first = val;
		}
		if (val == old) {
			oldExists = true;
		}
		select.options[select.options.length] = new Option(val,val);
	}

	if (!oldExists) {
		// old instance no longer exists
		setHost(first);
	}
	else {
		select.value = old;
	}
}

</script>
	>

	// write out methods that perform the hyper-calls
	Write "<script>",!
	Write "function callServerRefresh(auto,host,timewin,ymin,ymax)",!
	Write "{",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsGraphPane.RefreshGraph","auto,host,timewin,ymin,ymax",1)
 	Write ";",!
	Write "}",!

	Write "</script>",!
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawBODY">
<Description><![CDATA[
Draw the BODY of the detail pane]]></Description>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// get page ID values
	Merge tID = pInstance.IDValues
	Set tCurrHost = $G(tID(1))
	
	Set ..Text = ..LocalizeText("@Ensemble:ActivityHistory@Activity History")
	Set lTime = ..LocalizeText("@Ensemble:Time@Time")
	Set lhour = ..LocalizeText("@Ensemble:hour@hour")
	Set lhours = ..LocalizeText("@Ensemble:hours@hours")
	Set lday = ..LocalizeText("@Ensemble:day@day")
	Set lweek = ..LocalizeText("@Ensemble:week@week")

	&html<<table border="0" cellpadding="0" cellspacing="0">
		<tr><td>>

	// menu of monitor items
	&html<<div class="MonitorMenu">#($$$Text("Item","Ensemble"))#</div>>
	&html<<select id="hostMenu" size="15" onchange="changeHost();">>

	Set tHost="" For { Set tHost=$$$OrderHostMonitor(tHost)  Quit:""=tHost
		Write "<option ",$S(tHost=tCurrHost:"selected",1:"")," value=""",$ZCVT(tHost,"O","HTML"),""">",$ZCVT(tHost,"O","HTML"),!
	}
	&html<</select>>
		
	&html<</td><td align="left">>

	If (..Text '= "") {
		// show descriptive text
		Set updatemsg = ..LocalizeText("@Ensemble:LastUpdate@Last update:")
		If (..AutoRefresh) {
			Set updatemsg = ..LocalizeText("@Ensemble:LastAutoUpdate@Last auto-update:")
		}
		Set updatehelp = ..LocalizeText("@Ensemble:LastAutoUpdate@Click here to refresh this table.")

		&html<<table border="0" cellpadding="3" width="100%"><tr>
			<td align="left" class="Text1">#(..LocalizeText(..Text))#: <span id="hostSpan">#($ZCVT(tCurrHost,"O","HTML"))#</span></td>
			<td align="right" class="Text" nowrap>
			<a title="#(updatehelp)#" class="LastUpdate" onclick="refreshGraph();">
			#(updatemsg)#&nbsp;<b>
			<span id="lastupdate">#($$$timeLocal)#</span></b>&nbsp;</a>
			</td></tr></table>>
	}


	Set svgWidth = 800
	Set svgHeight = .382 * svgWidth

	Set zoom = 100
	Set embWidth = svgWidth * (zoom / 100)
	Set embHeight = svgHeight * (zoom / 100)

	Set tTimeWindow = $G(%session.Data("Monitor","TimeWindow"),1)
	Set tyMaxValue = $G(%session.Data("Monitor","yMaxValue"),200)
	Set tyMinValue = $G(%session.Data("Monitor","yMinValue"),0)

	&html<
	<script language="javascript">
// size of graph
var graphWidth = #(svgWidth)#;
var graphHeight = #(svgHeight)#;

var timeWindow = #(tTimeWindow)#;
var yMaxValue = #(tyMaxValue)#;
var yMinValue = #(tyMinValue)#;

	</script>
	>


	&html<<table class="Graph"><tr>
		<td>&nbsp;</td>
		<td><embed id="SVGEmbed" name="SVGEmbed" type="image/svg+xml" src="cspgraph.svg" height="#(embHeight)#" width="#(embWidth)#" ></td>
		</tr>
		<tr><td>&nbsp;</td>
		<td align="right"><b>#(lTime)#:</b>
		<input type="radio" name="time" #($S(tTimeWindow=1:"checked",1:""))# onclick="setTimeWindow(1);">1 #(lhour)#&nbsp;
		<input type="radio" name="time" #($S(tTimeWindow=8:"checked",1:""))# onclick="setTimeWindow(8);">8 #(lhours)#&nbsp;
		<input type="radio" name="time" #($S(tTimeWindow=24:"checked",1:""))# onclick="setTimeWindow(24);">1 #(lday)#&nbsp;
		<input type="radio" name="time" #($S(tTimeWindow=168:"checked",1:""))# onclick="setTimeWindow(168);">1 #(lweek)#&nbsp;
		</td></tr>

		</table>
		>

	&html<</td></tr></table>>
	
	Set tJS = ..GetGraphData(tCurrHost,tTimeWindow,.tMaxVal)
	
	Write "<script language=""javascript"">",!
	&html<

function getGraph()
{
	return self.document.getElementById("SVGEmbed").getSVGDocument().getElementById("1_SVGChart").chart;
}
	
function initGraphData()
{
	var graph = getGraph();

	var data = new Array();
	#(tJS)#	
	>
	
	&html<	
	updateGridLines();
	updateScale(#(tMaxVal)#);
	graph.setSeries(0,data,"yellow");
	
	timerID = setTimeout("refreshGraph();",#(..#RefreshRate)#);
}
	>
	
	Write "</script>",!

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetGraphData">
<Description><![CDATA[
Returns a string of JavaScript that contains graph values for host.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pHost:%String,pHours:%Integer,&amp;pMaxVal:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set pMaxVal = 0 // find largest value
	Set tJS = ""
	If (pHost = "") {
		Quit ""
	}
	
	// handle time windows
	If (pHours = 1) {
		Set tCount = 360
		Set tIntervalSize = 10
	}
	ElseIf (pHours = 8) {
		Set tCount = 360
		Set tIntervalSize = 80
	}
	ElseIf (pHours = 24) {
		Set tCount = 360
		Set tIntervalSize = 240
	}
	ElseIf (pHours = 168) {
		Set tCount = 360
		Set tIntervalSize = 1680
	}
	Else {
		Quit ""
	}

	// get graph points (for today) (last n-points)
	Do ##class(Ens.Util.Statistics).GetCounterValues(pHost,.tValues, tCount, tIntervalSize)
	
	For n = 1:1:tCount {
		Set tVal = +$G(tValues(n))
		Set pMaxVal = $S(tVal>pMaxVal:tVal,1:pMaxVal)
		Set tJS = tJS _ "data[" _ (n-1) _ "] = " _ tVal _ "; "
	}

	Quit tJS
]]></Implementation>
</Method>

<Method name="RefreshGraph">
<Description><![CDATA[
Called from client to refresh the graph
pTimeWin is the time scale for the graph (and is limited to a set of values)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pAuto:%Boolean,pHost:%String,pTimeWin:%Integer=1,pyMinVal:%Integer=0,pyMaxVal:%Integer=200</FormalSpec>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set $ZT = "Trap"
	
	// remember settings
	Set %session.Data("Monitor","yMinValue") = pyMinVal
	Set %session.Data("Monitor","yMaxValue") = pyMaxVal
	Set %session.Data("Monitor","TimeWindow") = pTimeWin
	
	// update host menu
	Set tList = ""
	Set tHost="" For { Set tHost=$$$OrderHostMonitor(tHost)  Quit:""=tHost
		Set tList = tList _ $S(tList="":"",1:",") _ tHost
	}

	// tell client to update host menu
	Write "CSPPage.setHostMenu('" _ $ZCVT(tList,"O","JS") _ "');",!
	
	// js preamble
	&js<var graph = CSPPage.getGraph();>
	&js<var data = new Array();>

	Set tJS = ..GetGraphData(pHost,pTimeWin,.tMaxVal)
	&js<#(tJS)#>

	&js<updateScale(#(tMaxVal)#);>

	&js<graph.setSeries(0,data,"yellow");>

	&js<span = self.document.getElementById("lastupdate");>
	&js<if (span) { span.innerText = '#($$$timeLocal)#'; }>

	// refresh rate
	If (pAuto = "true") {
		Set rate = $G(%session.Data("RefreshRate"),..#RefreshRate)
		&js<timerID = self.setTimeout("refreshGraph()",#(rate)#);>
	}

Done	
	Quit
	
Trap
	Set $ZT = ""
	&js<alert("RefreshGraph Error: #($ZE)#");>
	Goto Done
]]></Implementation>
</Method>

<Method name="OnGenerateCode">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set code = ""
	If (..AutoRefresh '= "") {
		Set code = code _ " Set tPane.AutoRefresh = " _ +..AutoRefresh _ $$$EOL
	}

	Quit code
]]></Implementation>
</Method>
</Class>
</Export>