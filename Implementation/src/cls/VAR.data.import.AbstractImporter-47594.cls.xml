<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.data.import.AbstractImporter">
<Abstract>1</Abstract>
<ClassType/>
<Import>VAR.infra.util</Import>
<IncludeCode>COMSYS,VARLog,VARUtil</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Property name="separator">
<Type>%String</Type>
<InitialExpression>";"</InitialExpression>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ignoreHeaderLine">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="printProgress">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="lineBreak">
<Type>%String</Type>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="file">
<Private>1</Private>
</Property>

<Property name="previousFile">
<Private>1</Private>
</Property>

<Method name="import">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrFilePath:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	;do ..loginAlphalinc("0", "CARGADEDADOS", "")

	write !, "File = """_pstrFilePath_""""
	//quit $$Transaction^COMTransaction("zimportTxn^"_..%ClassName(1)_".1("""_pstrFilePath_""")", $$$NO)
	quit ..importTxn(pstrFilePath)]]></Implementation>
</Method>

<Method name="loginAlphalinc">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompany:%String,pstrLogin:%String,pstrPassword:%String</FormalSpec>
<Implementation><![CDATA[	set %("%KEY", "YM") = pstrCompany
	set %("%KEY", "YBED") = pstrLogin
	set %("%KEY", "YPWD") = pstrPassword

	$$$VAR]]></Implementation>
</Method>

<Method name="importTxn">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrFilePath:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set obj = ..%New()
	set strStatus = obj.importAndProcess(pstrFilePath)
	kill obj

	quit strStatus]]></Implementation>
</Method>

<Method name="%OnNew">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if (##class(Util).IsWindows()) {
		set ..lineBreak = $char(13)_$char(10)
	}
	else {
		set ..lineBreak = $char(10)
	}

	quit $$$OK]]></Implementation>
</Method>

<Method name="importAndProcess">
<FormalSpec>pstrFilePath:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set pstrFilePath = ##class(DirectoryFile).FixPathSymbol(pstrFilePath)
	if ($length(pstrFilePath) = 0) {
		quit $$$VARLOGSCRERRSTATUS($$$CUSTOMERROR("No file informed!"))
	}
	if ('##class(DirectoryFile).Exists(pstrFilePath)) {
		quit $$$VARLOGSCRERRSTATUS($$$CUSTOMERROR("File '"_pstrFilePath_"' doesn't exists!"))
	}

	$$$VARLOGSCRINFO("Opening file '"_pstrFilePath_"' ...")
	set ..file = pstrFilePath
	open pstrFilePath:("RS"::):30
	if ('$test) {
		quit $$$VARLOGSCRERRSTATUS($$$CUSTOMERROR("Error while opening file '"_pstrFilePath_"'"))
	}

	set $ztrap = "exceptionImpProc"
	set strStatus = $$$OK

	set ..previousFile = $io
	$$$VARLOGSCRINFO("Reading file ...")
	write !!
	use ..file

	set intRecords = 0
	set intErrors = 0
	set strGlobalErrorName = "^CacheTempImportErrors("""_$znspace_""","""_..%ClassName(1)_""")"
	kill @strGlobalErrorName

	while (1) {
		read strLine#1000000:30
		set intRecords = $increment(intRecords)
		if ('$test) {
			set $ecode = "Error while reading file '"_pstrFilePath_"', "_
				"line #"_intRecords
		}
		if (..ignoreHeaderLine && (intRecords = 1)) continue
		if ($length(strLine) = 0) continue

		set strStatus = ..process(intRecords, strLine)
		if ($$$ISERR(strStatus)) {
			set @strGlobalErrorName@(intRecords) =
				$zstrip($extract(strStatus, 2, $length(strStatus)), "<>W")
			set intErrors = $increment(intErrors)
		}

		use ..previousFile
		if (..printProgress) {
			write $char(13)_"Processing line #"_intRecords_" "_
				"(press 'Ctrl + A' to abort)"
		}
		hang 0.001
		read key#1:0.001
		if ($test) {
			write ..lineBreak_"'Ctrl + A' pressed. Would you like to abort? "_
				"(S/N) "
			read key#1:10
			if ($test && (##class(Strings).UpperCase(key) = "S")) {
				write ..lineBreak
				set $ecode = "Operation aborted by user on line #"_
					intRecords
			}
			else {
				write ..lineBreak_..lineBreak
			}
		}
		use ..file
	}

	if ($length(..file) > 0) {
		close ..file
		set ..file = ""
		use ..previousFile
	}

finallyImpProc
	if ($$$ISOK(strStatus)) {
		write !, "Process completed successfully!"
	}
	else {
		write !, "Error while processing: "_##class(Util).GetErrors(strStatus)
	}
	write !, "Total lines processed: "_intRecords
	write !, "Lines that raised error during execution: "_intErrors
	write !, "The errors can be visualized on "_strGlobalErrorName

	do ..finalize()

	quit strStatus

exceptionImpProc
 	set $ztrap = ""
	if ($extract($zerror, 1, $length("<ENDOFFILE>")) = "<ENDOFFILE>") {
		set strStatus = $$$OK
	}
	elseif ($extract($zerror, 1, $length("<ECODETRAP>")) = "<ECODETRAP>") {
		set strStatus = $$$CUSTOMERROR($ecode)
		set $ecode = ""
	}
	else {
		set strStatus = $$$CUSTOMERROR($zerror)
	}

	if ($length(..file) > 0) {
		close ..file
		use ..previousFile
	}

	if ($$$ISERR(strStatus)) {
		$$$VARLOGSCRERROR(##class(Util).GetErrors(strStatus, 0))
	}

	goto finallyImpProc]]></Implementation>
</Method>

<Method name="process">
<Abstract>1</Abstract>
<FormalSpec>pintRecords:%Integer,pstrLine:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	ztrap "ERRO"]]></Implementation>
</Method>

<Method name="finalize"/>

<Method name="getField">
<FormalSpec>pstrLine:%String,pintPosition:%Integer</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	#define TB  9
	#define LF 10
	#define CR 13
	#define SC 59

	set strField = $piece(pstrLine, ..separator, pintPosition)
	set strField = ##class(Strings).FullReplace(strField, "\s", $char($$$SC))
	set strField = ##class(Strings).FullReplace(strField, "\t", $char($$$TB))
	set strField = ##class(Strings).FullReplace(strField, "\n", $char($$$LF))
	set strField = ##class(Strings).FullReplace(strField, "\r", $char($$$CR))
	set strField = $zstrip(strField, "<>W")

	quit strField]]></Implementation>
</Method>

<Method name="print">
<FormalSpec>pstrText:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	use ..previousFile
	write pstrText
	use ..file]]></Implementation>
</Method>

<Method name="addOrderedValue">
<FormalSpec>str:%String,separator:%String,value:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	kill values
	if ($length(str) > 0) {
		for i = 1:1:$length(str, separator) {
			set values($piece(str, separator, i)) = ""
		}
	}

	set values(value) = ""

	set str = ""
	set i = 0
	set key = $order(values(""))
	while ($length(key) > 0) {
		set $piece(str, separator, $increment(i)) = key

		set key = $order(values(key))
	}

	quit str]]></Implementation>
</Method>
</Class>
</Export>