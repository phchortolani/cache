<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="SourceControl.data.global.NetManagerCustomUserParameter">
<ClassType/>
<Import>SourceControl.control,SourceControl.data</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>GlobalBase</Super>

<Method name="ExportAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set strStatus = $$$OK

	set nErrors = 0
	set nExported = 0

	// Get all the custom user parameters
	set id = ""
	for {
		set id = $order(^VARPARA(0, id))
		quit:(id = "")

		set strStatus = ..Export(id, 2)
		if (##class(Errors).IsError(strStatus)) {
			set nErrors=nErrors+1
		} else {
			set nExported=nExported+1
		}
	}

	write !, "Number of exported files: "_nExported
	write !, "Number of errors during export: "_nErrors

	quit nErrors
]]></Implementation>
</Method>

<Method name="Export">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,printMessage:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$YES

	if ($get(id) = "") {
		quit ##class(Errors).MakeAndPrintErrorStatus("Empty custom user parameter "_
			"prefix! Skipping it.", printMessage)
	}

	set fileName = ##class(DirectoryFile).ConcatPath(
		##class(Config).GetExternalNMUserParametersDir(),
		##class(FileControl).GetSafeFilename(id)_"."_
		##class(FileType).%GetParameter("TXTCUSTOMPARAMETERS"))

	// Empty ignored list
	set ignoredList = ""

	// Are we exporting it or removing it? 
	if ($data(^VARPARA(0, id))) {
		// Subscripts for VARPARA are either numbers or double-quoted
		// strings.	
		set subs = $listbuild("0,"_##class(Strings).QuoteString(id))
		set globalList = $listbuild("^VARPARA")
		set sc = ..ExportGlobalNode(fileName, id, globalList, subs,
			ignoredList, printMessage=2, .ignored, 0)

		if ($$$ISOK(sc) && ('ignored)) {
			if (printMessage) {
				write !, "@NM custom user parameters '"_id_"' successfully "_
					"exported as '"_fileName_"'"
			}

			// Update the timestamp, so that the source control can use it
			// to prevent the same file from being loaded again.
			do ##class(FileControl).UpdateTimeStamp(fileName)
		}
	}
	else {
		// Removing it (exporting the deletion)
		set sc = ##class(DirectoryFile).Delete(fileName, printMessage)
	}

	quit sc
]]></Implementation>
</Method>

<Method name="GetGlobals">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $listbuild("")
]]></Implementation>
</Method>

<Method name="GetCustomGlobals">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $listbuild("^VARPARA")
]]></Implementation>
</Method>
</Class>
</Export>