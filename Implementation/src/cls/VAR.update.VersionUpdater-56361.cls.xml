<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.update.VersionUpdater">
<ClassType/>
<Import>VAR.infra.util</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Parameter name="VERSIONCONFIG">
<Type>%String</Type>
<Default>^VAR.update.VersionUpdater("CURRENTVERSION")</Default>
</Parameter>

<Parameter name="VERSIONHISTORY">
<Type>%String</Type>
<Default>^VAR.update.VersionUpdater("VERSIONHISTORY")</Default>
</Parameter>

<Parameter name="UPDATEPACKAGE">
<Type>%String</Type>
<Default>VAR.update</Default>
</Parameter>

<Parameter name="CLASSPREFIX">
<Type>%String</Type>
<Default>ScriptRelease</Default>
</Parameter>

<Method name="UpdateVersion">
<ClassMethod>1</ClassMethod>
<FormalSpec>package:%String=""</FormalSpec>
<Implementation><![CDATA[	set instance = ..%New()
	do instance.Update(package)]]></Implementation>
</Method>

<Method name="Clean">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	kill @..#VERSIONCONFIG
	kill @..#VERSIONHISTORY]]></Implementation>
</Method>

<Method name="Update">
<FormalSpec>package:%String=""</FormalSpec>
<Implementation><![CDATA[	write !!, "Starting updater for package '"_package_"' ..."
	if ($data(@..#VERSIONCONFIG) = 0) {
		write !, "Initializing version number ..."
		set @..#VERSIONCONFIG = "00.00.000"
	}

	set majorRelease = +$piece(@..#VERSIONCONFIG, ".", 1)
	set minorRelease = +$piece(@..#VERSIONCONFIG, ".", 2)
	set buildRelease = +$piece(@..#VERSIONCONFIG, ".", 3)
	if ($length(package) = 0) set package = ..#UPDATEPACKAGE

	// Naming convention for script class: ScriptRelease<VV>r<RR>
	set className = package_"."_..#CLASSPREFIX_
		##class(Strings).FormatNumber(majorRelease, 2)_"r"_
		##class(Strings).FormatNumber(minorRelease, 2)
	set classDefinition = ##class(%Dictionary.ClassDefinition).%OpenId(className)
	while ($isObject(classDefinition)) {
		write !, "  Calling update script for release "_
			##class(Strings).FormatNumber(majorRelease, 2)_"."_
			##class(Strings).FormatNumber(minorRelease, 2)
		set scriptObject = $System.OBJ.New(className)
		if ('$isObject(scriptObject)) {
			write !, "    Error: update script not found."
			quit
		}
		do scriptObject.SetUpdater(##this)
		set status = scriptObject.Update()
		if (status '= $$$OK) quit
		write !, "  Script finished", !

		set majorReleaseBkp = majorRelease
		set minorReleaseBkp = minorRelease
		set majorRelease = +$piece(@..#VERSIONCONFIG, ".", 1)
		set minorRelease = +$piece(@..#VERSIONCONFIG, ".", 2)
		set buildRelease = +$piece(@..#VERSIONCONFIG, ".", 3)
		if ((majorRelease = majorReleaseBkp) &&
		    (minorRelease = minorReleaseBkp)) {
			quit
		}

		set className = package_"."_..#CLASSPREFIX_
			##class(Strings).FormatNumber(majorRelease, 2)_"r"_
			##class(Strings).FormatNumber(minorRelease, 2)
		set classDefinition = ##class(%Dictionary.ClassDefinition).%OpenId(className)
	}

	// Special script class: ScriptReleaseExternal
	set className = package_".ScriptExternal"
	set classDefinition = ##class(%Dictionary.ClassDefinition).%OpenId(className)
	if ($isObject(classDefinition)) {
		write !, "  Calling update script for external settings"
		set scriptObject = $System.OBJ.New(className)
		if ('$isObject(scriptObject)) {
			write !, "    Error: update script not found."
			quit
		}
		set status = scriptObject.Update()
		if (status '= $$$OK) quit
		write !, "  Script finished", !
	}

	write !, "Updater finished"]]></Implementation>
</Method>

<Method name="GetCurrentVersion">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit @..#VERSIONCONFIG]]></Implementation>
</Method>

<Method name="IncVersion">
<FormalSpec>index:%Integer</FormalSpec>
<Implementation><![CDATA[	set size = 0
	if ((index >= 1) && (index <= 2)) {
		write !, "Incrementing release"
		set size = 2
	}
	elseif (index = 3) {
		write !, "Incrementing build"
		set size = 3
	}
	set $piece(@..#VERSIONCONFIG, ".", index) =
		##class(Strings).FormatNumber(
			+$piece(@..#VERSIONCONFIG, ".", index) + 1, size)
	if ((index >= 1) && (index <= 2)) {
		set $piece(@..#VERSIONCONFIG, ".", 3) =
			##class(Strings).FormatNumber(0, 3)
	}
	if (index = 1) {
		set $piece(@..#VERSIONCONFIG, ".", 2) =
			##class(Strings).FormatNumber(0, 2)
	}

	set @..#VERSIONHISTORY = $increment(@..#VERSIONHISTORY)
	set @(..#VERSIONHISTORY)@(@..#VERSIONHISTORY) =
		$zdatetime($horolog, 3, 1, 3)_"|"_@..#VERSIONCONFIG]]></Implementation>
</Method>

<Method name="GetVersionHistory">
<ClassMethod>1</ClassMethod>
<FormalSpec>index:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $get(@(..#VERSIONHISTORY)@(index))]]></Implementation>
</Method>

<Method name="UpdateAlphalincModuleVersion">
<ClassMethod>1</ClassMethod>
<FormalSpec>module:%String,majorRelease:%Integer,minorRelease:%Integer,build:%Integer</FormalSpec>
<Implementation><![CDATA[	#define WWWVERSIONActualVersionNo(%obj) $piece(%obj,"~",1)
	#define WWWVERSIONLastUpdated(%obj) $piece(%obj,"~",2)
	
	if (($length(module) = 0) || ($length(majorRelease) = 0) ||
		($length(minorRelease) = 0) || ($length(build) = 0)) {
		quit
	}
	
	set $$$WWWVERSIONActualVersionNo(^WWWVERSION(0, module, 1)) = majorRelease_"."_minorRelease_"."_build
	set $$$WWWVERSIONLastUpdated(^WWWVERSION(0, module, 1)) = $piece($horolog, ",", 1)]]></Implementation>
</Method>
</Class>
</Export>