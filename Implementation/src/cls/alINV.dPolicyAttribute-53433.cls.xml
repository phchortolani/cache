<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alINV.dPolicyAttribute">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent</Super>

<Parameter name="IDENTIFIEDBY">
<Default>ItemPolicy</Default>
</Parameter>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Property name="Attribute">
<Type>alINV.dAttribute</Type>
<Cardinality>one</Cardinality>
<Inverse>PolicyAttributes</Inverse>
<Relationship>1</Relationship>

<Parameter name="CAPTION" value="AL00262"/>
</Property>


<Property name="IsUnique">
<Type>%Boolean</Type>

<Parameter name="CAPTION" value="AL00263"/>
</Property>


<Property name="Optional">
<Type>alSYS.dt.dtBoolean</Type>
</Property>


<Property name="ItemPolicy">
<Type>alINV.dItemPolicy</Type>
<Cardinality>one</Cardinality>
<Inverse>Attributes</Inverse>
<Relationship>1</Relationship>

<Parameter name="CAPTION" value="AL00264"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Index name="AttributesIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Attribute</Properties>
<Unique>1</Unique>
</Index>

<Index name="ItemPolicyIndex">
<Description><![CDATA[
The <var>IDENTIFIEDBY</var> parameter can optionally be set to the name 
of a required property whose type is a reference to another class (not a literal). 
This property's IDKEY is then used as the prefix for the IDKEY of this class.]]></Description>
<Properties>ItemPolicy</Properties>
</Index>


<Method name="CreateBundleAttribute">
<FormalSpec>strValue:%String</FormalSpec>
<ReturnType>alSOH.dBundleAttribute</ReturnType>
<Implementation/>
</Method>

<Method name="ValidateBundleAttribute">
<FormalSpec>objAttribute:alSOH.dBundleAttribute</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;---------------------------------------------------------------------------------
	; Returns whether the dBundleAttribute passes this instance's validation rules
	; 
	; History:
	; 09-Jul-2009	PPP		SR16721: Optional policy definitions (can be 1-Yes, 2-No, 3-Optional)
	;						which means that other that Lot Number the others can be blank
	; 02-Jun-2009	PPP		SR16510: Need to get the Bundle Id before checking (only if it exists)
	; 06-Jan-2009	HQN		SR16268: Created
	;---------------------------------------------------------------------------------
	set blnValid = $$$YES
	if (%this.IsUnique) {
		set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleAttribute:GetValueForItemAttribute")
		set sc = objResultSet.Execute(objAttribute.Bundle.Item.ItemId, objAttribute.AttributeName)
		if $$$ISOK(sc) {
			while objResultSet.Next(.sc) {
				quit:objAttribute.Bundle.%Id()=""
				if (objResultSet.Data("AttributeValue") = objAttribute.AttributeValue) &&
				   (objAttribute.Bundle.%Id() '= objResultSet.Data("Bundle"))             {
					set blnValid = $$$NO
				}
			}
		}
	} elseif (objAttribute.AttributeValue = "") {
		if objAttribute.AttributeName = "Lot Number" {   //SR16721
			set blnValid = $$$NO
		}
	}
	quit blnValid
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("Attributes")</DataLocation>
<DefaultData>dPolicyAttributeDefaultData</DefaultData>
<IdLocation>^alINV.dItemPolicyC("Attributes")</IdLocation>
<IndexLocation>^alINV.dPolicyAttributeI</IndexLocation>
<StreamLocation>^alINV.dPolicyAttributeS</StreamLocation>
<Data name="dPolicyAttributeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>IsUnique</Value>
</Value>
<Value name="3">
<Value>Optional</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>