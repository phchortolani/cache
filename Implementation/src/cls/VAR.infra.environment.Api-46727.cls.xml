<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.environment.Api">
<Description><![CDATA[Classe responsável por interfacear com uma DLL externa feita em C
que permite ter acesso completo ao sistema operacional

Obs.: a classe foi desenvolvida como singleton para garantir que
      não ocorra concorrência de múltiplas chamadas em paralelo
      pelo mesmo processo]]></Description>
<ClassType/>
<Import>VAR.infra.util</Import>
<IncludeCode>VARUtil,VARLog</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="GetInstance">
<ClassMethod>1</ClassMethod>
<ReturnType>Api</ReturnType>
<Implementation><![CDATA[	if ('$isObject($get(%EnvironmentApi))) set %EnvironmentApi = ..%New()

	quit %EnvironmentApi]]></Implementation>
</Method>

<Method name="GetDllPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>update:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	if ('update) {
		set dllToolPath = ##class(DirectoryFile).GetOSDir(
			##class(DirectoryFile).GetNamespaceSubdir("util"))
		// SysTools directory for tests:
		//set dllToolPath = "C:\Projetos\systools\main\Implementation\monitor\bin\"
	}
	else {
		set dllToolPath = ##class(DirectoryFile).GetOSDir(
			##class(DirectoryFile).GetNamespaceSubdir("util/update"))
	}

	if (##class(Util).IsNix()) {
		if ($System.Version.Is64Bits()) {
			quit dllToolPath_"libMonitor64.so"
		}
		else {
			quit dllToolPath_"libMonitor32.so"
		}
	}
	elseif (##class(Util).IsWindows()) {
		if ($System.Version.Is64Bits()) {
			quit dllToolPath_"Monitor64.dll"
		}
		else {
			quit dllToolPath_"Monitor32.dll"
		}
	}

	quit ""]]></Implementation>
</Method>

<Method name="IsDllAvailable">
<ClassMethod>1</ClassMethod>
<FormalSpec>update:%Boolean=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).Exists(..GetDllPath(update))]]></Implementation>
</Method>

<Method name="Free">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set %EnvironmentApi = $$$NULLOREF
	kill %EnvironmentApi]]></Implementation>
</Method>

<Property name="DllId">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="GetPartitionIdFromDirDiskId">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="GetPartitionCountDiskId">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="GetPartitionIdFromSeqDiskId">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="GetPartitionInfoDiskId">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="%OnNew">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..Refresh()]]></Implementation>
</Method>

<Method name="Clear">
<Implementation><![CDATA[	if (..DllId '= 0) {
		do ..UnloadDll(..DllId)
		set ..DllId = 0
	}]]></Implementation>
</Method>

<Method name="Refresh">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set status = $$$OK

	if (..IsDllAvailable(1)) {
		do ..Clear()
		do ##class(DirectoryFile).DeleteFile(..GetDllPath(0))
		do ##class(%File).Rename(..GetDllPath(1), ..GetDllPath(0))
	}
	if (..DllId = 0) {
		set status = ..InitDll()
	}

	quit status]]></Implementation>
</Method>

<Method name="GetInstallationDirectory">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $System.Util.InstallDirectory()]]></Implementation>
</Method>

<Method name="GetPrimaryDirectoryJournal">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(%SYS.Journal.System).GetPrimaryDirectory()]]></Implementation>
</Method>

<Method name="GetAlternateDirectoryJournal">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(%SYS.Journal.System).GetAlternateDirectory()]]></Implementation>
</Method>

<Method name="GetDatabaseDirectoryList">
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[	kill arrNamespaces
	for i = 1:1:$zu(90, 0) {
		set namespace = $zu(90, 2, 0, i)

		// Ignore System and ECP databases
		if (($extract(namespace) '= "%") && ($extract(namespace) '= "@") &&
			($length($$defsys^%GLO(namespace)) = 0)) {
			set path = $$defdir^%GLO(namespace)

			if (('$data(arrNamespaces(namespace))) && ($zutil(49, path) >= 0)) {
				set arrNamespaces(namespace) = path
			}
		}
	}

	set list = ##class(%ListOfDataTypes).%New()
	set namespace = $order(arrNamespaces(""))
	while ($length(namespace) > 0) {
		do list.Insert(arrNamespaces(namespace))

		set namespace = $order(arrNamespaces(namespace))
	}

	quit list]]></Implementation>
</Method>

<Method name="GetPartitionIdFromDir">
<FormalSpec>Dir:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	if ((..DllId = 0) || ($length(Dir) = 0)) quit ""

	set result = ..CallFuncDll(..DllId, ..GetPartitionIdFromDirDiskId, Dir)
	set id = $piece(result, ",", 1)
	set errorcode = +$piece(result, ",", 2)
	set errordescription = $piece(result, ",", 3)

	if (errorcode '= 0) {
		set id = ""
		$$$VARLOGERROR("DLL error: "_errorcode_"-"_errordescription)
	}

	quit id]]></Implementation>
</Method>

<Method name="GetPartitionCount">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	if (..DllId = 0) quit 0

	set result = ..CallFuncDll(..DllId, ..GetPartitionCountDiskId)
	set count = +$piece(result, ",", 1)
	set errorcode = +$piece(result, ",", 2)
	set errordescription = $piece(result, ",", 3)

	if (errorcode '= 0) {
		set count = 0
		$$$VARLOGERROR("DLL error: "_errorcode_"-"_errordescription)
	}

	quit count]]></Implementation>
</Method>

<Method name="GetPartitionIdFromSeq">
<FormalSpec>Seq:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	if ((..DllId = 0) || (Seq = 0)) quit ""

	set result = ..CallFuncDll(..DllId, ..GetPartitionIdFromSeqDiskId, Seq)
	set id = $piece(result, ",", 1)
	set errorcode = +$piece(result, ",", 2)
	set errordescription = $piece(result, ",", 3)

	if (errorcode '= 0) {
		set id = ""
		$$$VARLOGERROR("DLL error: "_errorcode_"-"_errordescription)
	}

	quit id]]></Implementation>
</Method>

<Method name="GetPartitionInfo">
<FormalSpec>Id:%String,&amp;Type:%String,&amp;Size:%Double,&amp;Used:%Double</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set Type = ""
	set Size = 0
	set Used = 0

	if ((..DllId = 0) || ($length(Id) = 0)) quit ""

	set result = ..CallFuncDll(..DllId, ..GetPartitionInfoDiskId, Id)
	set Type = $piece(result, ",", 1)
	set Size = (+$piece(result, ",", 2) * 100 \ 1) / 100
	set Used = (+$piece(result, ",", 3) * 100 \ 1) / 100
	set errorcode = +$piece(result, ",", 4)
	set errordescription = $piece(result, ",", 5)

	if (errorcode '= 0) {
		set Type = ""
		set Size = 0
		set Used = 0
		$$$VARLOGERROR("DLL error: "_errorcode_"-"_errordescription)

		quit 0
	}

	quit 1]]></Implementation>
</Method>

<Method name="%OnClose">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	do ..Clear()

	quit $$$OK]]></Implementation>
</Method>

<Method name="InitDll">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if ('..IsDllAvailable()) quit $$$VARLOGERRSTATUS($$$CUSTOMERROR("Monitor DLL not available"))

	set ..DllId = ..LoadDll(..GetDllPath())
	if (..DllId = 0) quit $$$VARLOGERRSTATUS($$$CUSTOMERROR("Monitor DLL not loaded"))

	set ..GetPartitionIdFromDirDiskId = ..GetFuncIdDll(..DllId, "get_partition_id_from_dir_disk")
	set ..GetPartitionCountDiskId = ..GetFuncIdDll(..DllId, "get_partition_count_disk")
	set ..GetPartitionIdFromSeqDiskId = ..GetFuncIdDll(..DllId, "get_partition_id_from_seq_disk")
	set ..GetPartitionInfoDiskId = ..GetFuncIdDll(..DllId, "get_partition_info_disk")

	quit $$$OK]]></Implementation>
</Method>

<Method name="LoadDll">
<FormalSpec>DllPath:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	set $ztrap = "exception"

	set id = $zf(-4, 1, DllPath)

finally
	quit id

exception
	set $ztrap = ""

	set id = 0

	goto finally]]></Implementation>
</Method>

<Method name="GetFuncIdDll">
<FormalSpec>DllId:%Integer,FuncName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	set $ztrap = "exception"

	set id = $zf(-4, 3, DllId, FuncName)

finally
	quit id

exception
	set $ztrap = ""

	set id = 0

	goto finally]]></Implementation>
</Method>

<Method name="CallFuncDll">
<FormalSpec>DllId:%Integer,FuncId:%Integer,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	$$$INITCRITICALSECTION("envApiDLL")
	quit:$$$TIMEOUTCRITICALSECTION $$$ERRORTIMEOUTCS("envApiDLL")

	set $ztrap = "exception"

	set result = $zf(-5, DllId, FuncId, $get(P1), $get(P2),
		$get(P3), $get(P4), $get(P5), $get(P6), $get(P7),
		$get(P8), $get(P9), $get(P10))
	
finally
	$$$ENDCRITICALSECTION("envApiDLL")

	quit result
	
exception
	set $ztrap = ""

	set result = ""

	goto finally]]></Implementation>
</Method>

<Method name="UnloadDll">
<FormalSpec>DllId:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set $ztrap = "exception"

	set result = ($zf(-4, 2, DllId) = 0)

finally
	quit result

exception
	set $ztrap = ""

	set result = 0

	goto finally]]></Implementation>
</Method>
</Class>
</Export>