<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="alSOH.iSOH">
<Description><![CDATA[<h1><u>Stock On Hand (SOH) Module</u></h1>
<br>
To use the SOH module, you must first create a transaction. <br>
All changes to the SOH must be instigated by a correctly formed <code>StockHistory</code> object<br>
This forces a Audit trail to be formed and the correct use of the module.<br> 
However, GetSOH <b>does not</b> need a <code>StockHistory</code> object as it only<br>
reports the amount on hand and does not change the data of the module.
<p>]]></Description>
<Abstract>1</Abstract>
<ClassType/>
<IncludeCode>%occInclude,COMSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>

<Method name="testBundle">
<Description><![CDATA[<h3>Get a Bundle for an Item</h3>
<PRE>
 This will check for an existing bundle and create a new bundle if required
 
 <h4>Params:</h4>
 pBundleProperties			Array of Attributes to search for

 <h4>Returns:</h4>
 Returns alSOH.dBundle id.
 </pre>]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>alSOH.dBundle</ReturnType>
<Implementation><![CDATA[	;-------------------------------------------------------------------------------
	; History:
	; 21-Apr-2008	HQN		SR15651: Changed concurrency to none, Item isn't changed
   	; 							Changed from SQL Lookup to code generated hashcode
	; 15-Apr-2008	HQN		SR15673: Removed %RegisteredObject, interfaces should
	; 							never be able to be instantiated 
	;-------------------------------------------------------------------------------
	set pidItem = "dev00"
	set sc = $$$OK
	set pBundleProperties = ##class(%ArrayOfDataTypes).%New()
	set objItem           = ##class(alINV.dItem).%OpenId(pidItem,0)
	set objItemPolicy = objItem.ItemPolicy
	set strHashCode   = objItemPolicy.GenerateBundleHash(objItem,.pBundleProperties)
	set rs = ##class(%Library.ResultSet).%New()
	
	if rs.Prepare("SELECT %ID FROM alSOH.dBundle WHERE HashKey ="""_strHashCode_"""") {
		if rs.Execute() {
			if rs.Next(.sc) {
				; Concurrency Set to 'no locking', Bundles shouldn't be edited
				set objBundle = ##class(alSOH.dBundle).%OpenId(rs.Data("ID"),0)
			}
		}
	}
	do rs.%Close()

	; Return a new bundle based on defaults since existing one not found
	if '$data(objBundle) {
		; create new bundle based on policy and attributes passed in
		set objBundle = ##class(alSOH.dBundle).%New()
		set objBundle.ItemPolicy = objItem.ItemPolicy
		set objBundle.Item       = objItem

		for loop=1:1:objItemPolicy.Attributes.Count() {
			set objAttribute = objItem.ItemPolicy.Attributes.GetAt(loop).Attribute
			set objBundleAttribute = ##class(alSOH.dBundleAttribute).%New()
			set objBundleAttribute.Bundle         = objBundle
 			set objBundleAttribute.AttributeName  = objAttribute.Name
 			set objBundleAttribute.AttributeValue = pBundleProperties.GetAt(objAttribute.Name)
		}
		set pStatus = objBundle.%Save()
	}
	quit objBundle]]></Implementation>
</Method>
<UDLText name="T">
<Content>// ClassMethod GetBundle(pidItem As %String, ByRef pBundleProperties As %Library.ArrayOfDataTypes, ByRef pStatus As %Status = 1) As alSOH.dBundle</Content>
</UDLText>

<Method name="ValidateBundleProps">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:%String,&amp;pBundleProperties:%Library.ArrayOfDataTypes,&amp;pbundle:alSOH.dBundle</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	;-------------------------------------------------------------------------------
	; History:
	; 18-Mar-2009	DavidR	SR16406: Adde listbuild to error
	; 23-Sep-2008	Luke	SR15877: Created added validity checks on the passed in  
	; 							parameters; added a byref Status for testing
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set objItem = ##class(alINV.dItem).%OpenId(pidItem,0)
	
	/********************************************
			Data Check
	*********************************************/
	
	if objItem = $$$NULLOREF {
		set strMessage = $$$Text("IN00800")
		set sc         = $$$ERROR($$$GeneralError,strMessage)
	} ; "Item not provided"
	
	if $$$ISOK(sc) {
		set objItemPolicy = objItem.ItemPolicy
		if objItemPolicy.Attributes.Count() '= pBundleProperties.Count(){
			set strMessage = $$$Text("alSOH0004")
			set sc         = $$$ERROR($$$GeneralError,strMessage)
		} ; "Incorrect amount of Properties being set for Bundle attributes"
	

		if $$$ISOK(sc) {
			for loopPolicyAttributes=1:1:objItemPolicy.Attributes.Count() {
				set objAttribute = objItem.ItemPolicy.Attributes.GetAt(loopPolicyAttributes).Attribute
				
				if 'pBundleProperties.IsDefined(objAttribute.Name) {
					set strMessage = $$$Text($listbuild("alSOH0005",objAttribute.Name))  ;SR16406
					set tempSC     = $$$ERROR($$$GeneralError,strMessage)
					set sc         = $$$ADDSC(tempSC,sc)
				} ; "Attribute (%1) is not set correctly on the Bundle"
			}
		}
	}
	
	if $$$ISOK(sc) {
		set pbundle = ##class(alSOH.iSOH).GetBundle(pidItem,pBundleProperties)
	}
	quit sc]]></Implementation>
</Method>

<Method name="GetBundle">
<Description><![CDATA[<h3>Get a Bundle for an Item</h3>
<PRE>
 This will check for an existing bundle and create a new bundle if required
 
 <h4>Params:</h4>
 pBundleProperties			Array of Attributes to search for

 <h4>Returns:</h4>
 Returns alSOH.dBundle id.
 </pre>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:%String,&amp;pBundleProperties:%Library.ArrayOfDataTypes</FormalSpec>
<ReturnType>alSOH.dBundle</ReturnType>
<Implementation><![CDATA[	;-------------------------------------------------------------------------------
	; History:
	; 18-Mar-2010	PPP		SR17237: Replaced the SQL Prepare to a SQL compiled Method 
	;						(alSOH.iBundle::GetBundleIDforHashKey)
	; 06-Jan-2009	HQN		SR16268: Validation for attribute values may fail, return
	; 						$$$NULLOREF
	; 21-Apr-2008	HQN		SR15651: Changed concurrency to none, Item isn't changed
   	; 							Changed from SQL Lookup to code generated hashcode
	; 15-Apr-2008	HQN		SR15673: Removed %RegisteredObject, interfaces should
	; 							never be able to be instantiated 
	;-------------------------------------------------------------------------------
	set sc = $$$OK

	set objItem       = ##class(alINV.dItem).%OpenId(pidItem,0)
	set objItemPolicy = objItem.ItemPolicy
			
	/********************************************
			get bundle
	*********************************************/
			
	set strHashCode   = objItemPolicy.GenerateBundleHash(objItem,.pBundleProperties)
		
	set idBundle = ##class(alSOH.iBundle).GetBundleIDforHashKey(strHashCode)
	if idBundle'=$$$NULLOID {
		set pobjBundle = ##class(alSOH.dBundle).%OpenId(idBundle,0,.sc)	
	}

	/********************************************
			create bundle
	*********************************************/
			
	; Return a new bundle based on defaults since existing one not found
	if '$data(objBundle) {
		; create new bundle based on policy and attributes passed in
		set objBundle = ##class(alSOH.dBundle).%New()
		set objBundle.ItemPolicy = objItem.ItemPolicy
		set objBundle.Item       = objItem
		
		for loopPolicyAttributes=1:1:objItemPolicy.Attributes.Count() {
			set objAttribute = objItem.ItemPolicy.Attributes.GetAt(loopPolicyAttributes).Attribute
			set objBundleAttribute = ##class(alSOH.dBundleAttribute).%New()
			set objBundleAttribute.Bundle         = objBundle
 			set objBundleAttribute.AttributeName  = objAttribute.Name
 			set objBundleAttribute.AttributeValue = pBundleProperties.GetAt(objAttribute.Name)
		}
		set sc = objBundle.%Save()
		set:$$$ISERR(sc) objBundle = $$$NULLOREF ; SR16268
	}
	quit objBundle]]></Implementation>
</Method>

<Method name="SourceStock">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:%String,pidLocn:%String,pidStorage:%String</FormalSpec>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[	//////////////////
	///  KEEP      ///
	//////////////////
	
	;-------------------------------------------------------------------------------
	; Returns list of alSOH.dBundleStock
	; 
	; History:
	; 29-Apr-2008	GRF		SR15694: Pass optional Storage through to GetStock to
	; 							limit BundleStorages to those in that storage;
	; 							Put Item first to keep Locn with Storage
	; 22-Apr-2008	HQN		SR15673: Corrected reference to iUINV
	; 25-Mar-2008	HQN		Changed for pi calls to use true objects instead of pids
	; 20-Feb-2008	Luke	SR15625 change method callsto V2 objects
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	; 16-Nov-2007	LB		SR15598: Created 
	;-------------------------------------------------------------------------------
	set objItem  = ##class(alINV.iUINV).GetItem(pidItem)   ; FIXME ,.sc // SR15673
	set objLocn  = ##class(alLOC.iLOC).GetLocation(pidLocn)
	set objStore = ##class(alLOC.iLOC).GetStorage(pidLocn,$get(pidStorage))  ; $$$NULLOREF okay here
	
	set lstStock = ##class(alSOH.piSOH).GetStock(objItem,objLocn,objStore)
	
	quit lstStock]]></Implementation>
</Method>

<Method name="SourceStockV2">
<ClassMethod>1</ClassMethod>
<FormalSpec>objItem:alINV.dItem,objLocn:alLOC.dLocation,objStore:alLOC.dStorage</FormalSpec>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[	///KEEP
	;-------------------------------------------------------------------------------
	; Returns list of alSOH.dBundleStock
	; 
	; History:
	; 16-May-2008	GRF		SR15694: Copied from SourceStock
	;-------------------------------------------------------------------------------
	set lstStock = ##class(alSOH.piSOH).GetStock(objItem,objLocn,$get(objStore))
	
	quit lstStock]]></Implementation>
</Method>

<Method name="GetQtyOnHand">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="",pidStorage:alLOC.dStorage="",pblnExclBlocked:%Boolean=1</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[	##class(alSOH.piSOHQty).GetQtyOnHand(pidItem,pidLocn,pidStorage,pblnExclBlocked)]]></Implementation>
</Method>

<Method name="GetQtyAvailable">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="",pidStorage:alLOC.dStorage="",pblnExclBlocked:%Boolean=1,pidProgram:%String="",pidExclExpired:%Boolean=1</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[	##class(alSOH.piSOHQty).GetQtyAvailable(pidItem,pidLocn,pidStorage,pblnExclBlocked,pidProgram,pidExclExpired)]]></Implementation>
</Method>
<UDLText name="T">
<Content>// 06-Jul-2012	shobby	SR18055: New parameter pidExclExpired on GetQtyAvailable</Content>
</UDLText>

<Method name="GetQtyPlanned">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="",pidStorage:alLOC.dStorage="",pblnExclBlocked:%Boolean=1</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[	##class(alSOH.piSOHQty).GetQtyPlanned(pidItem,pidLocn,pidStorage,pblnExclBlocked)]]></Implementation>
</Method>

<Method name="GetQtyBlocked">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="",pidStorage:alLOC.dStorage="",pblnExclBlocked:%Boolean=1</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[	##class(alSOH.piSOHQty).GetQtyBlocked(pidItem,pidLocn,pidStorage,pblnExclBlocked)]]></Implementation>
</Method>

<Method name="GetDefaultItemPolicy">
<ClassMethod>1</ClassMethod>
<FormalSpec>ItemId:%String</FormalSpec>
<ReturnType>alINV.dItemPolicy</ReturnType>
<Implementation><![CDATA[	//////////////////
	///  KEEP      ///
	//////////////////
	;-------------------------------------------------------------------------------
	;
	;  FIXME : Don't need ItemId.
	;
	; History:
	; 22-Feb-2008	HQN		Moved logic into alINV.dItemPolicy
	; 20-Feb-2008	HQN		Created
	;-------------------------------------------------------------------------------
	quit ##class(alINV.dItemPolicy).GetDefaultItemPolicy()]]></Implementation>
</Method>

<Method name="OnBuild">
<ClassMethod>1</ClassMethod>
<FormalSpec>blnDelete:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	;-------------------------------------------------------------------------------
	;         
	;      ************* IF ANY CHANGES ARE TO BE MADE, LOOK AT *****************
	;         				     'ConvertSOH' method
	;
	;  FIXME : Don't need blnDelete.
	;
	;-------------------------------------------------------------------------------
	; History:
	; 04-Sep-2008	GRF		Cleanup - disabled block => zzRetain
	; 15-Aug-2008	Luke	SR15813: Populate dTransactionType
	; 05-May-2008	HQN		Removed ReceiveDate from LotNumber Policy lookup
	; 01-May-2008	PPP		SR15705: Use ConvertSOH
	; 29-Apr-2008	Luke	SR15695: removed the purchase cost settings for the bundle creation
	; 28-Apr-2008	HQN		SR15692: Corrected Lot Number Lookup
	; 24-Apr-2008 	Luke	SR15688 Removed the Storage from the Item policy 
	; 22-Apr-2008	HQN		SR15673: Added dMovement to Deletions,
	; 							dStockHistory links to dMovement
	; 							Changed dStockHistory to %KillExtent due to failsafe
	; 							built in to %DeleteExtent
	; 21-Apr-2008	HQN		SR15673: Added Blank Policy, was missing
	; 							Using alSOH.dUINWE instead of User.INWE
	; 							Optionally Delete extents of SOH before repopulating
	; 							Added additional ::%Close()'s to mimise meory footprint
	; 17-Apr-2008	Luke	SR15676: Change the cost geting mechanisim
	; 16-Apr-2008	GRF		standardise layout
	; 07-Mar-2008	Luke	Moved code to use New Movements with State Engine 
	; 03-Mar-2008	Luke	Edited to allow transaction handling (alSOH.dStockHistory)
	; 27-Feb-2008	Luke	Created
	;-------------------------------------------------------------------------------
	set sc = ##class(alSOH.dTransactionType).Populate() ; 15-Aug-2008 Luke SR15813
	quit sc]]></Implementation>
</Method>

<Method name="SanityCheck">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set lstFails = ##class(%Library.ListOfDataTypes).%New()
	
	set rs = ##class(%ResultSet).%New()
	do rs.Prepare("select ID from alSOH.dStockBalance")
	do rs.Execute()
	
	//do lstFails.Insert("Bundles to INWE")
	set bundleStockTotal = 0
	set message2 = ""
	set message1 = ""
	
	while (rs.Next(.sc)) {
		if ($SYSTEM.Status.IsOK(sc)) {  // check if this succeeded without errors
			set objBundleStock = ##class(alSOH.dStockBalance).%OpenId(rs.Data("ID"))
			set bundleStockTotal = objBundleStock.QtyOnHand
			set tempItem = objBundleStock.Item
			set tempLocn = objBundleStock.Location 
			set SOHqty = 0
			for locLoop = 1:1:tempLocn.Storages.Count() {
				set tempStore = tempLocn.Storages.GetAt(locLoop)
				set objSOH =##class(alSOH.dSOH).%OpenId(tempStore.%Id()_"||"_tempItem.%Id())
				if objSOH '= "" {
				//	write !,"Stockbalance" _objBundleStock.%Id()_"         SOH :" _objSOH.%Id()_"              List Count :" _lstFails.Count()
					set SOHqty = SOHqty+objSOH.QtyOnHand
					
					set rs3 = ##class(%ResultSet).%New()
					do rs3.Prepare("select ID from alSOH.dBundleStock Where Storage ='" _ tempStore.%Id()_"' and Item = '" _ tempItem.%Id() _"'")
					do rs3.Execute()
					set BundleQty = 0
					while (rs3.Next(.sc)) {
						if ($SYSTEM.Status.IsOK(sc)) {  // check if this succeeded without errors
							set objBundle = ##class(alSOH.dBundleStock).%OpenId(rs3.Data("ID"))
							set BundleQty = BundleQty + objBundle.QtyOnHand
						}
					}
					if objSOH.QtyOnHand '= BundleQty {
						set message1 = "SOH Failed With Bundles : SOH Qty " _SOHqty_ "     Over All Bundles : "_BundleQty    
						do lstFails.Insert(message1)
					}
				}
				
			}

			if SOHqty '= bundleStockTotal {
				set message2 = "Stockbalance Failed With SOH : bundleStockTotal :"_bundleStockTotal  _"   SOH Qty " _SOHqty_ "Over All Bundles :"    
				do lstFails.Insert(message2)
			}
		}
	}
	for loopk = 1:1:lstFails.Count() {
		write !,lstFails.GetAt(loopk)
	}
	quit]]></Implementation>
</Method>

<Method name="ConvertSOH">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	///KEEP
	;-------------------------------------------------------------------------------
	; Interface call for the rebuilding of SOH
	; 
	; History:
	; 02-May-2008	Luke	removed core code into private population interface 
	; 01-May-2008	PPP		Created
	;-------------------------------------------------------------------------------
	quit ##class(alSOH.piPopulate).ConvertSOHV2(pidItem)]]></Implementation>
</Method>

<Method name="IsQtyAvailable">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alSYS.dt.dtString,pstrLocList:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtBoolean</ReturnType>
<Implementation><![CDATA[	;-------------------------------------------------------------------------------
	; Given an Item and Location List, return if QOH exist
	;
	; Inputs :
	;	1. pidItem		alSYS.dt.dtString
	;	2. pstrLocList	alSYS.dt.dtString  e.g "5,5072" (Comma Separated List)
	;
	; Returns
	;	Boolean
	;
	; History:
	; 06-Aug-2010	PPP		SR17296: Created
	;-------------------------------------------------------------------------------
	set fltQty = 0
	set strLocList = (","_pstrLocList_",")
	
	&SQL(
		SELECT Sum({fn ABS(QtyOnHand)})
		INTO :fltQty
		FROM alSOH.dSOH 
		WHERE Item = :pidItem
		AND :strLocList [ (',' || Storage->Location || ',')

	)
	
	quit $select(fltQty:$$$YES,1:$$$NO)]]></Implementation>
</Method>
</Class>
</Export>