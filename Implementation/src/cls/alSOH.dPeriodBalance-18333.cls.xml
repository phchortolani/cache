<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSOH.dPeriodBalance">
<Description><![CDATA[
Stock Period Balance]]></Description>
<ClassType>persistent</ClassType>
<IncludeCode>COMDebug,INSYS</IncludeCode>
<Super>%Persistent</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; History: 
; 11-Nov-2009	PPP		SR17023: Added QtySubType
; 28-Apr-2009	PPP		SR16469: Created Cost
; 15-Jun-2009	DWR		SR16473: Created Value properties
; 14-Apr-2009	PPP		SR16468: Captions for Properies
; 03-Feb-2009	HQN		SR16341: Added QtyInTransit
; 25-Jan-2008	LB		SR15626: Created 
;---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="Item">
<Type>alINV.dItem</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00091"/>
</Property>


<Property name="Location">
<Type>alLOC.dLocation</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00092"/>
</Property>


<Property name="SOHPeriod">
<Type>dSOHPeriod</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00107"/>
</Property>


<Property name="OpenQtyOnHand">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00093"/>
</Property>


<Property name="QtySupplierReceipt">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00103"/>
</Property>


<Property name="QtySupplierReturn">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00104"/>
</Property>


<Property name="QtyCustomerReturn">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00096"/>
</Property>


<Property name="QtySale">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00102"/>
</Property>


<Property name="QtyManufacturingReceipt">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00099"/>
</Property>


<Property name="QtyManufacturingIssue">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00098"/>
</Property>


<Property name="QtyTransferReceipt">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00106"/>
</Property>


<Property name="QtyTransferIssue">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00105"/>
</Property>


<Property name="QtyAdjustmentIn">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00094"/>
</Property>


<Property name="QtyAdjustmentOut">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00095"/>
</Property>


<Property name="QtyNonStockIn">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00100"/>
</Property>


<Property name="QtyNonStockOut">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00101"/>
</Property>


<Property name="CloseQtyOnHand">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00090"/>
</Property>


<Property name="QtyInTransit">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00097"/>
</Property>


<Property name="Cost">
<Type>alSYS.dt.dtCurrency</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {Cost}=##class(alSOH.dPeriodBalance).GetCost({ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>

<Parameter name="CAPTION" value="AL00156"/>
</Property>


<Property name="OpenValueOnHand">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00281"/>
</Property>


<Property name="ValueSupplierReceipt">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00282"/>
</Property>


<Property name="ValueSupplierReturn">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00283"/>
</Property>


<Property name="ValueCustomerReturn">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00284"/>
</Property>


<Property name="ValueSale">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00285"/>
</Property>


<Property name="ValueManufacturingReceipt">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00286"/>
</Property>


<Property name="ValueManufacturingIssue">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00287"/>
</Property>


<Property name="ValueTransferIssue">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00288"/>
</Property>


<Property name="ValueTransferReceipt">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00289"/>
</Property>


<Property name="ValueInTransit">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00290"/>
</Property>


<Property name="ValueAdjustmentIn">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00291"/>
</Property>


<Property name="ValueAdjustmentOut">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00292"/>
</Property>


<Property name="ValueNonStockIn">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00293"/>
</Property>


<Property name="ValueNonStockOut">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00294"/>
</Property>


<Property name="ValueOther">
<Type>alSYS.dt.dtNumeric</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00295"/>
</Property>


<Property name="CloseValueOnHand">
<Type>alSYS.dt.dtCurrency</Type>
<InitialExpression>"0&quot;</InitialExpression>

<Parameter name="CAPTION" value="AL00296"/>
</Property>


<Property name="PeriodDescription">
<Type>alSYS.dt.dtString</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {PeriodDescription}=##class(alSOH.dPeriodBalance).GetPeriodDescription({ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>

<Parameter name="CAPTION" value="AL00450"/>
</Property>

<UDLText name="T">
<Content>
//SR17023

</Content>
</UDLText>


<Property name="QtySubType">
<Type>alSOH.dPeriodSubType</Type>

<Parameter name="CAPTION" value="AL00646"/>
</Property>

<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Index name="Index">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Location,Item,SOHPeriod</Properties>
<Unique>1</Unique>
</Index>

<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="GetPeriodDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidPeriodBalance</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the PeriodDescription of a Period
	;
	; History:
	; 08-Aug-2009	PPP		SRxxxxx: Created
	;-------------------------------------------------------------------------------
	set strDescription = ""
	set objPeriod = ##class(alSOH.dPeriodBalance).%OpenId(pidPeriodBalance, 0)
	if objPeriod '= $$$NULLOREF {
		set strDescription = objPeriod.PeriodDescription
	}
	quit strDescription
]]></Implementation>
</Method>

<Method name="PeriodDescriptionGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the PeriodDescription of a Period
	;
	; History:
	; 08-Aug-2009	PPP		SRxxxxx: Created
	;-------------------------------------------------------------------------------
	quit ..SOHPeriod.PeriodType.Description
]]></Implementation>
</Method>

<Method name="CostGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the Cost of the PeriodBalance as at the Period End Date
	;
	; History:
	; 06-Apr-2011	shobby	SR17698.1: Item may have been deleted.  Don't crash, just
	;							throw up some XXXX's for someone to see on the report.
	; 28-Apr-2009	PPP		SR16469: Created
	;-------------------------------------------------------------------------------
	if %this.Item="" quit "XXXX"		;SR17698
	quit +$$GetCostAsAtDate^INARTAVG(%this.Item.%Id(),%this.SOHPeriod.EndDate)
]]></Implementation>
</Method>

<Method name="Populate">
<FormalSpec>pblnAnyData:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History: 
	; 11-Apr-2011	shobby	SR17698.3 : Set a flag if there are any history records.
	; 05-Apr-2011	shobby	SR17698: Only include stock items (NonStock = $$$NO)
	; 22-Nov-2010	PPP		SR17617: Get the QOH,VOH at the end of the previous period
	;							..GetPeriodClosingBalance
	; 02-Aug-2010	PPP		SR17478: Even if no History set the Period Balance Record
	;							with the Opening and Closing Qtys's for an item if they exist
	; 11-Nov-2009	PPP		SR17023: Zero out the User defined SOH data as well
	; 15-Jun-2009	DWR		SR16473: new properties listed as per SR
	; 							populate the openValueOnHand via stockHistory record
	; 03-Jan-2009	HQN		Handle new property: QtyInTransit
	; 18-Aug-2008	HQN		SR15801: Using New logic from UpdateViaStockHistory
	; 15-Aug-2008	HQN		SR15801: Created
	; 						Using PeriodBalanceInProperty and PeriodBalanceOutProperty
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set intStockHistoryCount = 0
	set pblnAnyData=$$$NO	;SR17698.3
	
	set %this.OpenQtyOnHand             = 0
	set %this.QtySupplierReceipt        = 0
	set %this.QtySupplierReturn         = 0
	set %this.QtyCustomerReturn         = 0
	set %this.QtySale                   = 0
	set %this.QtyManufacturingReceipt   = 0
	set %this.QtyManufacturingIssue     = 0
	set %this.QtyTransferReceipt        = 0
	set %this.QtyTransferIssue          = 0
	set %this.QtyAdjustmentIn           = 0
	set %this.QtyAdjustmentOut          = 0
	set %this.QtyNonStockIn             = 0
	set %this.QtyNonStockOut            = 0
	set %this.CloseQtyOnHand            = 0
	set %this.QtyInTransit	            = 0
	set %this.OpenValueOnHand           = 0
	set %this.ValueSupplierReceipt      = 0
	set %this.ValueSupplierReturn       = 0 
	set %this.ValueCustomerReturn       = 0
	set %this.ValueSale                 = 0 
	set %this.ValueManufacturingReceipt = 0
	set %this.ValueManufacturingIssue   = 0 
	set %this.ValueTransferIssue        = 0 
	set %this.ValueTransferReceipt      = 0
	set %this.ValueInTransit            = 0
	set %this.ValueAdjustmentIn         = 0
	set %this.ValueAdjustmentOut        = 0
	set %this.ValueNonStockIn           = 0
	set %this.ValueNonStockOut          = 0
	set %this.ValueOther                = 0
	set %this.CloseValueOnHand          = 0
	set %this.ValueInTransit            = 0

	//SR17023
	set objSubType = %this.QtySubType
	for idField=1:1:10 {
		do $zobjmethod(objSubType,"QtyFree"_idField_"Set",0)
		do $zobjmethod(objSubType,"ValueFree"_idField_"Set",0)				
	}
	do $zobjmethod(objSubType,"ConsumptionSet",0)
	do $zobjmethod(objSubType,"ValueConsumptionSet",0)				
		
	set qtyOnHand = 0
	set objResultSet = ##class(%Library.ResultSet).%New()
	;SR17698 set sc = objResultSet.Prepare("SELECT * FROM alSOH.dStockHistory WHERE item = ? AND location = ? AND dateConfirmed >= ? AND dateConfirmed <= ?")
	set sc = objResultSet.Prepare("SELECT * FROM alSOH.dStockHistory WHERE NonStock=0 AND item = ? AND location = ? AND dateConfirmed >= ? AND dateConfirmed <= ?")  ;SR17698
	if objResultSet.Execute(%this.Item.%Id(), %this.Location.%Id(), %this.SOHPeriod.StartDate, %this.SOHPeriod.EndDate) {
		while objResultSet.Next() {
			set intStockHistoryCount = intStockHistoryCount + 1
			if intStockHistoryCount=1 {
				set %this.OpenQtyOnHand   = objResultSet.Data("QOHLocn")
				set %this.OpenValueOnHand = objResultSet.Data("ValueOnHandLocn")
			}

			set objStockHistory = ##class(alSOH.dStockHistory).%OpenId(objResultSet.Data("ID"),0,.sc)
			if $$$ISOK(sc) set sc = %this.AddViaStockHistory(objStockHistory)
			if $$$ISOK(sc) 	set pblnAnyData=$$$YES	;SR17698.3
		}
	}

	if $$$ISOK(sc) {
		//SR17478: If no History set the Period Balance Record
		if 'intStockHistoryCount {
			set dteToDate = (%this.SOHPeriod.StartDate-1)

		//	Get the QOH,VOH at the end of the previous period.   SR17617
		//	set fltQOHLocn = ##class(alSOH.iSOHBalance).GetTrnQtyDateRangeUseP(%this.Item.%Id(), %this.Location.%Id(), 1, dteToDate, "")
			set lstVal = ..GetPeriodClosingBalance(%this.Item.%Id(), %this.Location.%Id(), %this.SOHPeriod.PeriodType.%Id(), dteToDate)
		
			
		//	Only set the record if QOH exists  //SR17617
			if $listget(lstVal) {
		//	if fltQOHLocn {
		//		set fltVOHLocn = fltQOHLocn * $$GetCostForLocn^INAvgCost(%this.Item.%Id(),%this.Location.%Id(),dteToDate) 

				set fltQOHLocn = $listget(lstVal,1)
				set fltVOHLocn = $listget(lstVal,2)

				set %this.OpenQtyOnHand    = fltQOHLocn
				set %this.OpenValueOnHand  = fltVOHLocn

				set %this.CloseQtyOnHand   = fltQOHLocn
			 	set %this.CloseValueOnHand = fltVOHLocn
			 	set %this.ValueOther       = 0
			}
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetPeriodClosingBalance">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alSYS.dt.dtString,pidLocation:alSYS.dt.dtString,pPeriodType:alSYS.dt.dtString,pDate:alSYS.dt.dtDate</FormalSpec>
<ReturnType>alSYS.dt.dtFloat</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get the QOH & Value given an Item, Loc, PeriodType and Date (based on Period Info)
	;
	; Returns: $lb(qoh,value on hand)
	;
	; History: 
	; 22-Nov-2010	PPP		SR17617: Created - Speed up Generate Process						
	;-------------------------------------------------------------------------------
	set fltQOH = 0
	set fltVal = 0
	
	//Get the relevant Period for the given Date
	&sql(SELECT ID INTO :idSOHPeriod 
			FROM alSOH.dSOHPeriod 
			WHERE periodtype =:pPeriodType 
			AND startdate <= :pDate 
			AND enddate >= :pDate
	)

	//write !,"idSOHPeriod:"_idSOHPeriod," SQLCODE:"_SQLCODE
	
	if SQLCODE = 0 {
		if idSOHPeriod '= $$$NULLOID {
			&sql(SELECT CloseQtyOnHand, CloseValueOnHand 
					INTO :fltQOH, :fltVal 
					FROM alSOH.dPeriodBalance 
					WHERE Item 		= :pidItem
					AND Location 	= :pidLocation
					AND SOHPeriod 	= :idSOHPeriod
			)
		}
	}		
	quit $listbuild(fltQOH,fltVal)
]]></Implementation>
</Method>

<Method name="AddViaStockHistory">
<FormalSpec>objStockHistory:alSOH.dStockHistory</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; See Populate() in alSOH.dTransactionType - shows the PeriodBalance property that will be updated
	; 
	; History:
	; 
	; 22-Nov-2010	PPP		SR17562: Updated Consumptions for Non-Stock transations
	;								 Updated Consumption Period Balance qty based on default
	;								 type if INSOHSubTypeMap did not exist
	; 11-Nov-2009	PPP		SR17023: Added User defined SOH Updates based on @NM
	; 							Class INSOHSubTypeMap
	; 16-Jun-2009   DWR		SR16473: added the population of Closing Value On Hand
	; 22-Aug-2008	HQN		SR15801: Update %this with values from objStockHistory
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	if objStockHistory.QtyMoved>=0 {
		do $zobjmethod(%this,objStockHistory.TxType.PeriodBalancePropertyIn_"Set",$zobjmethod(%this,objStockHistory.TxType.PeriodBalancePropertyIn_"Get") + objStockHistory.QtyMoved)
		do $zobjmethod(%this,objStockHistory.TxType.PeriodBalanceValueIn_"Set",$zobjmethod(%this,objStockHistory.TxType.PeriodBalanceValueIn_"Get") + objStockHistory.TxValue)
	
	} else {
		do $zobjmethod(%this,objStockHistory.TxType.PeriodBalancePropertyOut_"Set",$zobjmethod(%this,objStockHistory.TxType.PeriodBalancePropertyOut_"Get") + objStockHistory.QtyMoved)
		do $zobjmethod(%this,objStockHistory.TxType.PeriodBalanceValueOut_"Set",$zobjmethod(%this,objStockHistory.TxType.PeriodBalanceValueOut_"Get") + objStockHistory.TxValue)
	}
	set %this.CloseQtyOnHand   = objStockHistory.QOHLocn + objStockHistory.QtyMoved
 	set %this.CloseValueOnHand = objStockHistory.ValueOnHandLocn + (objStockHistory.QtyMoved * objStockHistory.StdPrice)
 	set %this.ValueOther       = (%this.CloseValueOnHand - %this.OpenValueOnHand) - objStockHistory.TxValue
	
	//SR17023 User defined SOH Updates
	set idMovement = +objStockHistory.MovementType.MovementTypeId

	//SR17562 - if the transaction is a NonStock, add it to Consumptions
	set objSubType = %this.QtySubType
	if objStockHistory.NonStock {
		//If Non Stock the qty sign must be reversed for e.g. Rec Qty, Issue Rec Qty etc (Consumed Qty)
		do $zobjmethod(objSubType,"ConsumptionSet",$zobjmethod(objSubType,"ConsumptionGet") + ((objStockHistory.QtyMoved)*-1) )
		do $zobjmethod(objSubType,"ValueConsumptionSet",$zobjmethod(objSubType,"ValueConsumptionGet") + objStockHistory.TxValue)				
		set blnConsumptionAdded = $$$YES		
	}

	if $data(^INSOHSubTypeMap(0,idMovement)) {
		
		//set objSubType = %this.QtySubType		//SR17562
		set idTrnSubType = objStockHistory.SubType
		
		set idSubType=""
		for {
			set idSubType = $order(^INSOHSubTypeMap(0,idMovement,idSubType))
			quit:idSubType=""
			
			set idField = $get(^INSOHSubTypeMap(0,idMovement,idSubType,1))
		
			//All Data - No SubType Definition or Equals Trn SubType
			if (idSubType=999) || (idTrnSubType=idSubType) {
				if idField {
					do $zobjmethod(objSubType,"QtyFree"_idField_"Set",$zobjmethod(objSubType,"QtyFree"_idField_"Get") + objStockHistory.QtyMoved)
					do $zobjmethod(objSubType,"ValueFree"_idField_"Set",$zobjmethod(objSubType,"ValueFree"_idField_"Get") + objStockHistory.TxValue)				
				} else {
					//SR17562 - Do not add consumptions twice
					if +$get(blnConsumptionAdded) = $$$NO {
						do $zobjmethod(objSubType,"ConsumptionSet",$zobjmethod(objSubType,"ConsumptionGet") + objStockHistory.QtyMoved)
						do $zobjmethod(objSubType,"ValueConsumptionSet",$zobjmethod(objSubType,"ValueConsumptionGet") + objStockHistory.TxValue)				
					}
				}
			}
		}

	} else {
		//SR17562 Consumption Details/Qty for Period Balances
		; TransactionType		TxnID
		; ===========================
		; Sale					0
		; Dispense Issue		21
		; Dispense Return		22
		; ManufacturingIssue	35
		; ManufacturingReturn	37
	
		if (",0,21,22,35,37,") [ (","_idMovement_",") {
			if +$get(blnConsumptionAdded) = $$$NO {
				do $zobjmethod(objSubType,"ConsumptionSet",$zobjmethod(objSubType,"ConsumptionGet") + objStockHistory.QtyMoved)
				do $zobjmethod(objSubType,"ValueConsumptionSet",$zobjmethod(objSubType,"ValueConsumptionGet") + objStockHistory.TxValue)				
			}
						
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="UpdateViaStockHistory">
<ClassMethod>1</ClassMethod>
<FormalSpec>objStockHistory:alSOH.dStockHistory</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History: 
	; 10-Nov-2010	SCR		SR17611: Update SOHLockLevel to 0
	; 15-Oct-2008	HQN		SR16030: Base the active date based on history date
	; 13-Oct-2008	HQN		SR16030: Only calculate active dPeriodTypes
	; 20-Aug-2008	HQN		Returning %Status on SQL operations
	; 18-Aug-2008	HQN		SR15801: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set lstPeriodCycles = ##class(%Library.ListOfDataTypes).%New()
	set objResultSet    = ##class(%Library.ResultSet).%New("alSOH.dPeriodCycle:Extent")
	set sc = objResultSet.Execute() 
	
	if $$$ISOK(sc) {
		while objResultSet.Next(.sc) {
			do lstPeriodCycles.Insert(objResultSet.Data("ID"))
		}
	}
	
	if $$$ISOK(sc) {
		for loopPeriodCycles=1:1:lstPeriodCycles.Count() {
			set objResultSet = ##class(%Library.ResultSet).%New("%DynamicQuery:SQL")
			set sc = objResultSet.Prepare("SELECT * FROM alSOH.dPeriodType WHERE periodcycle = ? AND (DateClosed IS NULL OR DateClosed <= ?)")
			if $$$ISOK(sc) {
				set sc = objResultSet.Execute(lstPeriodCycles.GetAt(loopPeriodCycles),objStockHistory.DateConfirmed)
				if $$$ISOK(sc) {
					while objResultSet.Next(.sc) {
						set objPeriodType = ##class(alSOH.dPeriodType).%OpenId(objResultSet.Data("ID"),0,.sc)
						set objSOHPeriod = objPeriodType.GetPeriodViaDate(objStockHistory.DateConfirmed)
						//SR17611
						//set objPeriodBalance = ##class(alSOH.dPeriodBalance).%OpenId(objStockHistory.Location.%Id()_"||"_objStockHistory.Item.%Id()_"||"_objSOHPeriod.%Id(),4,.sc)
						set objPeriodBalance = ##class(alSOH.dPeriodBalance).%OpenId(objStockHistory.Location.%Id()_"||"_objStockHistory.Item.%Id()_"||"_objSOHPeriod.%Id(),$$$SOHLockLevel,.sc)
						if $$$ISERR(sc) {
							set objPeriodBalance = ##class(alSOH.dPeriodBalance).%New()
							set objPeriodBalance.Location  = objStockHistory.Location
							set objPeriodBalance.Item      = objStockHistory.Item
							set objPeriodBalance.SOHPeriod = objSOHPeriod

							if $$$SOHLockLevel=0 {  ; SR17611 vvvvvv
								do objPeriodBalance.%DowngradeConcurrency(0)
							}						; SR17611 ^^^^^^
							set sc = objPeriodBalance.%Save()
							
							set:$$$ISOK(sc) sc = objPeriodBalance.Populate()
							
						} else {
							set sc = objPeriodBalance.AddViaStockHistory(objStockHistory)
						}
						set sc = objPeriodBalance.%Save()
					}
				}
			}
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetCost">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidPeriodBalance</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the Cost of the PeriodBalance as at the Period End Date
	;
	; History:
	; 28-Apr-2009	PPP		SR16469: Created
	;-------------------------------------------------------------------------------
	set fltCost = 0
	set objPeriodBalance = ##class(alSOH.dPeriodBalance).%OpenId(pidPeriodBalance, 0)
	if objPeriodBalance '= $$$NULLOREF {
		set fltCost = objPeriodBalance.Cost
	}
	quit fltCost
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^alSOH.dPeriodBalanceD</DataLocation>
<DefaultData>dPeriodBalanceDefaultData</DefaultData>
<IdLocation>^alSOH.dPeriodBalanceD</IdLocation>
<IndexLocation>^alSOH.dPeriodBalanceI</IndexLocation>
<StreamLocation>^alSOH.dPeriodBalanceS</StreamLocation>
<Data name="dPeriodBalanceDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CloseQtyOnHand</Value>
</Value>
<Value name="3">
<Value>OpenQtyOnHand</Value>
</Value>
<Value name="4">
<Value>QtyAdjustmentIn</Value>
</Value>
<Value name="5">
<Value>QtyAdjustmentOut</Value>
</Value>
<Value name="6">
<Value>QtyCustomerReturn</Value>
</Value>
<Value name="7">
<Value>QtyManufacturingIssue</Value>
</Value>
<Value name="8">
<Value>QtyManufacturingReceipt</Value>
</Value>
<Value name="9">
<Value>QtyNonStockIn</Value>
</Value>
<Value name="10">
<Value>QtyNonStockOut</Value>
</Value>
<Value name="11">
<Value>QtySale</Value>
</Value>
<Value name="12">
<Value>QtySupplierReceipt</Value>
</Value>
<Value name="13">
<Value>QtySupplierReturn</Value>
</Value>
<Value name="14">
<Value>QtyTransferIssue</Value>
</Value>
<Value name="15">
<Value>QtyTransferReceipt</Value>
</Value>
<Value name="16">
<Value>QtyInTransit</Value>
</Value>
<Value name="17">
<Value>OpenValueOnHand</Value>
</Value>
<Value name="18">
<Value>ValueSupplierReceipt</Value>
</Value>
<Value name="19">
<Value>ValueSupplierReturn</Value>
</Value>
<Value name="20">
<Value>ValueCustomerReturn</Value>
</Value>
<Value name="21">
<Value>ValueSale</Value>
</Value>
<Value name="22">
<Value>ValueManufacturingReceipt</Value>
</Value>
<Value name="23">
<Value>ValueManufacturingIssue</Value>
</Value>
<Value name="24">
<Value>ValueTransferIssue</Value>
</Value>
<Value name="25">
<Value>ValueTransferReceipt</Value>
</Value>
<Value name="26">
<Value>ValueInTransit</Value>
</Value>
<Value name="27">
<Value>ValueAdjustmentIn</Value>
</Value>
<Value name="28">
<Value>ValueAdjustmentOut</Value>
</Value>
<Value name="29">
<Value>ValueNonStockIn</Value>
</Value>
<Value name="30">
<Value>ValueNonStockOut</Value>
</Value>
<Value name="31">
<Value>ValueOther</Value>
</Value>
<Value name="32">
<Value>CloseValueOnHand</Value>
</Value>
<Value name="33">
<Value>QtySubType</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>