<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="WWW.DiscDate">
<Description><![CDATA[
WWW.DiscDate<br><br>

Author: Robert Wuttke<br><br>

Usage:<br>
Where <CLASS>%Date</CLASS> would be used for a property, use <CLASS>WWW.DiscDate</CLASS>, <b>WWW001OO</b> now uses this instead of <CLASS>%Library.Date</CLASS>.<br><br>
This allows for the Disclinc extensions to date formatting +$h.xxxxx to be correctly displayed at the SQL side as the browser side.<br><br>
One thing to note that Y,YM,YBED,SPRACHE should be defined to get your specific date formatting, otherwise
it will use the defaults.]]></Description>
<ClassType>datatype</ClassType>
<ClientDataType>DOUBLE</ClientDataType>
<IncludeGenerator>%occInclude,%occUtility</IncludeGenerator>
<OdbcType>DOUBLE</OdbcType>
<ProcedureBlock>1</ProcedureBlock>
<SqlCategory>DOUBLE</SqlCategory>

<Parameter name="XSDTYPE">
<Description><![CDATA[
Declares the XSD type used when projecting XML Schemas.]]></Description>
<Default>double</Default>
</Parameter>


<Method name="XSDToLogical">
<Description><![CDATA[
Converts the SOAP encoded input decimal value into a Cache numeric value.
Returns "" for error.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	If ($$$defClassKeyGet(%class,$$$cCLASSclasstype)=$$$cCLASSCLASSTYPEDATATYPE) || $$$comMemberKeyGet(%class,$$$cCLASSparameter,"XMLENABLED",$$$cPARAMdefault) {
		Set %codemode=$$$cMETHCODEMODEEXPRESSION
		set %code="$$^WWWDATE(%val)"
	} Else {
		Set %code=0 
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToXSD">
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%Float</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If ($$$defClassKeyGet(%class,$$$cCLASSclasstype)=$$$cCLASSCLASSTYPEDATATYPE) || $$$comMemberKeyGet(%class,$$$cCLASSparameter,"XMLENABLED",$$$cPARAMdefault) {
		Set %codemode=$$$cMETHCODEMODEEXPRESSION
		set %code="$$^WWWDATE1(%val)"
	} Else {
		Set %code=0 
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DisplayToLogical">
<Description><![CDATA[
Converts the input value <var>%val</var>, which is a string representing an integer,
into a logical integer value.
<p>Returns the logical integer value of the input string <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
 s %code=0
 s %codemode=$$$cMETHCODEMODEEXPRESSION
 set %code="$$^WWWDATE1(%val)"
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="Normalize">
<Description><![CDATA[
Converts <var>%val</var> to a normalized value.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[%val
]]></Implementation>
</Method>

<Method name="IsValidDT">
<Description><![CDATA[
Tests if the logical value <var>%val</var>, which is an integer value, is valid.
The validation is based on the class parameter settings used
for the class attribute this data type is associated with.
In this case, <a href="#MAXVAL">MAXVAL</a> and <a href="#MINVAL">MINVAL</a>.
<p>Returns true (1) if the value <var>%val</var> is valid, otherwise false (0).]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%Float</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 s %code=0
 s %codemode=$$$cMETHCODEMODEEXPRESSION
 s %code="$isvalidnum(%val,0)"
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToDisplay">
<Description><![CDATA[
Converts the value of <var>%val</var>, which is in logical integer format, into a display string.
The formatting is based on the value of the FORMAT parameter.
<p>Returns the formatted value of <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%Float</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s %code=0
 s %codemode=$$$cMETHCODEMODEEXPRESSION
 s %code="$$^WWWDATE(%val)"
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToOdbc">
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%Float</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s %code=0
 s %codemode=$$$cMETHCODEMODEEXPRESSION
 s %code="$$^WWWDATE(%val)"
 QUIT $$$OK
]]></Implementation>
</Method>
</Class>
</Export>