<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSYS.Script.iScript">
<Description><![CDATA[
<b> The primary interface for data and mechanics internal to the Scripting module</b><br>
this allows external modules to interface and get data from this package without touching the 
underlying data structures. <br> 

<br>

If your looking for information on how to interact with the scripting engine, please see 
<br><code>alSYS.Script.iScriptEngine</code><br>]]></Description>
<Abstract>1</Abstract>
<ClassType/>
<IncludeCode>%occCommon</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>

<Method name="getConditionList">
<Description><![CDATA[
Obtains all types that have a "Conditional" type (<code>alSYS.Script.data.dScriptType</code>) <br> 
These may be "=" , "'="
<br>
<filename> Ninjas  </filename> <br>
this allows ease of use for external calls (such as from the compiler )
to get relevant information<br>
Returns: <br>
list of all "Conditional" types<br>]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 10-Oct-2007	LB		SR15616: Created 
	;-------------------------------------------------------------------------------
	set lstReturn = ##class(%Library.ListOfDataTypes).%New() 
	set rs        = ##class(%ResultSet).%New()
	do rs.Prepare("SELECT %ID FROM alSYS_Script_data.dScriptType where alSYS_Script_data.dScriptType.screenType = 'Conditional'")
	do rs.Execute()
	
	while (rs.Next(.sc)) { 
		if ($$$ISOK(sc)) {
			set objConditionType = ##class(alSYS.Script.data.dScriptType).%OpenId(rs.Data("ID"))
			set sc = lstReturn.Insert(objConditionType.Type)
		}
	}
	quit lstReturn
]]></Implementation>
</Method>

<Method name="getOrderNodes">
<Description><![CDATA[
Returns a result set of the Nodes of Logic line 
(<code>alSYS.Script.data.dScriptLogicLine</code>) ordered Sequence of 
the node(<code>alSYS.Script.data.dScriptNode</code>) <br>
IE.  Where "1||2" is passed in<br>
<code>SELECT * FROM alSYS_Script_data.dScriptNode 
where alSYS_Script_data.dScriptNode.ParentLL = '1||2' 
order by Sequence</code><br>

 Params:<br>
 pstrLLID			the parent of the current logic line  <br>
 pstrCurrentLine	the current logic line 
 Returns: <br>
 the result set of nodes<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrLLID:%String,pstrCurrentLine:%String</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 10-Oct-2007	LB		SR15616: Created 
	;-------------------------------------------------------------------------------
	set rs = ##class(%ResultSet).%New()
	do rs.Prepare("SELECT %ID, Name, NodeType, Method, Sequence, Parameter FROM alSYS_Script_data.dScriptNode where alSYS_Script_data.dScriptNode.ParentLL = '" _pstrLLID_"||"_ pstrCurrentLine_"' order by Sequence")
	do rs.Execute()
	quit rs
]]></Implementation>
</Method>

<Method name="getNodeType">
<Description><![CDATA[
gets a <code>alSYS.Script.data.dScriptType</code> based on a ID  <br>
<br>
 Params:<br>
 pstrID		the ID of the Type to be returned <br>

 Returns: <br>
<code>alSYS.Script.data.dScriptType</code><br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrID:%String</FormalSpec>
<ReturnType>alSYS.Script.data.dScriptType</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 15-Oct-2007	LB		SR15616: Created 
	;-------------------------------------------------------------------------------
	quit ##class(alSYS.Script.data.dScriptType).%OpenId(pstrID)
]]></Implementation>
</Method>

<Method name="getNode">
<Description><![CDATA[
gets a <code>alSYS.Script.data.dScriptNode</code> based on a ID  <br>
<br>
 Params:<br>
 pstrID		the ID of the node to be returned <br>

 Returns: <br>
<code>alSYS.Script.data.dScriptNode</code><br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrID:%String</FormalSpec>
<ReturnType>alSYS.Script.data.dScriptType</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 15-Oct-2007	LB		SR15616: Created 
	;-------------------------------------------------------------------------------
	quit ##class(alSYS.Script.data.dScriptNode).%OpenId(pstrID)
]]></Implementation>
</Method>

<Method name="OnBuild">
<Description><![CDATA[
Builds and Populates the relative data stores within the Script module <br>
This calls <code>##class(alSYS.Script.piScriptPopulate).Populate()</code> which does the
work. <br>
<br>
It only populates and no class creation occurs <br>

TODO <br>
create and compile default scripts 
<br>
Returns: <br>
The string value of the error<br>]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 12-Dec-2007	LB		SR15616: Status check
	; 30-Nov-2007 	LB		SR15616: Added additional calls 
	; 05-Nov-2007	LB		SR15616: Created 
	;-------------------------------------------------------------------------------
	set sc = ##class(alSYS.Script.piScriptPopulate).Populate()
	if $$$ISOK(sc) {
		set sc =  ##class(alSYS.Script.piScriptPopulate).reqMatrixdata()
	}
	if $$$ISOK(sc) {
	 	set sc =  ##class(alSYS.Script.piScriptPopulate).reqStatus()
	}
	; FIXME : <GRF> do we need $$$ISOK here?
	do ##class(alSYS.Script.piScriptPopulate).PopulateScriptClass()
	
	if $$$ISOK(sc) {
		set rs = ##class(%ResultSet).%New()
		do rs.Prepare("select * from alSYS_Script_data.dScriptClass")
		do rs.Execute()
		
	 	while rs.Next(.sc) {
			if ($SYSTEM.Status.IsOK(sc)) {
			// check if this succeeded without errors
				set objClass = ##class(alSYS.Script.data.dScriptClass).%OpenId(rs.Data("ID"))
				set sc       = ##class(alSYS.Script.piScriptEngine).compile(objClass)
			}
		}
	}
	quit sc
]]></Implementation>
</Method>
</Class>
</Export>