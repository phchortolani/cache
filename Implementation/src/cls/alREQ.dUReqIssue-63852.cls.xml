<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alREQ.dUReqIssue">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>alISS.dUIssue</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; 26-Mar-2013	SCR		HEVA-811: Force Compile
; 14-Oct-2009	SCR		SR16940 Added [ Required ] to IssueNumber
; 31-Mar-2008	HQN		Changed DemandType to required, forces validation on creation
; 24-Jan-2008	HQN		SR15625 Changed class signature dINIssue to dUIssue and
; 							dREQ to dUReq
; 30-Jan-2008	LB		SR15626 Changed the signature of dStatus to dUStatus
/---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="Company">
<Type>%String</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00209"/>

<Parameter name="MAXLEN" value="30"/>

<Parameter name="TRUNCATE" value="1"/>

<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>


<Property name="DemandType">
<Description><![CDATA[
DemandType]]></Description>
<Type>%Numeric</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00212"/>
</Property>


<Property name="FromLocn">
<Description><![CDATA[
FromLocn]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00213"/>

<Parameter name="MAXLEN" value="30"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="IssueLines">
<Type>alREQ.dUReqIssueLine</Type>
<Collection>list</Collection>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00210"/>
</Property>


<Property name="IssueNumber">
<Description><![CDATA[
IssueNumber]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00214"/>

<Parameter name="COLLATION" value="EXACT"/>

<Parameter name="TRUNCATE" value="1"/>

<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>


<Property name="Priority">
<Description><![CDATA[
Priority]]></Description>
<Type>%Numeric</Type>

<Parameter name="CAPTION" value="AL00215"/>
</Property>


<Property name="Reference">
<Description><![CDATA[
Reference]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00216"/>

<Parameter name="MAXLEN" value="30"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="Status">
<Description><![CDATA[
Status]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00217"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="ToLocn">
<Description><![CDATA[
ToLocn]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00218"/>

<Parameter name="MAXLEN" value="30"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="Requisition">
<Type>alREQ.dUReq</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00211"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Query name="ByReqNum">
<Type>%SQLQuery</Type>
<FormalSpec>strReqNum:%String</FormalSpec>
<SqlQuery>SELECT %ID FROM dUReqIssue
 WHERE (Reference = :strReqNum)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="AutoClose">
<Description><![CDATA[
<p>Attempts to set this record's Status Property to Auto - Close(9)</p>
<p>Can only Auto - Close if all lines are closed</p>
<p>Attempts to Auto - Close Requisition</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	; 01-Aug-2008	Luke	SR15814: Corrected sc formation and use of $$$Text
	; 02-May-2008	Luke	SR15699: Language codes for errors
	set sc = $$$OK
	if %this.IsClosable() {
		; check if all lines closed
		set blnLinesClosed = $$$YES //SR15814:
		for loopLines=1:1:%this.IssueLines.Count() {
			if %this.IssueLines.GetAt(loopLines).IsClosable() {
 				set blnLinesClosed= $$$NO //$$$MakeStatus("alREQ0001") ;"All lines not closed" //SR15699
			}
			quit:'blnLinesClosed ; for break
		}
		
		
		//if $$$ISOK(blnLinesClosed) { //SR15814:
		if blnLinesClosed {
			set %this.Status = 9 ; Auto - Close
			set sc = %this.%Save()
			do %this.Requisition.AutoClose()
		} else { //SR15814:
			set strMessage = $$$Text("alREQ0001")      // SR15814:
			set sc =$$$ERROR($$$GeneralError,strMessage)
		}
	} else {
		set strMessage = $$$Text("alREQ0002")      // SR15814:
		set sc =$$$ERROR($$$GeneralError,strMessage)
		//set sc= $$$MakeStatus("alREQ0002") ;""Already Closed" //SR15699
	}
	quit sc
]]></Implementation>
</Method>

<Method name="PartialIssue">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set blnReturn = $$$NO
	if %this.QtyRequired > ReqLine.QtyIssued {
		set blnReturn = $$$YES
	} 
	quit blnReturn
]]></Implementation>
</Method>

<Method name="ConfirmReceipt">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$OK
]]></Implementation>
</Method>

<Method name="ConfirmPick">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateIssueLines">
<FormalSpec>objReqLine:alREQ.dUReqLine,*sc:%Status</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 26-Jul-2010	PPP		SR17470: Used %Save instead of ANMSave which was causing the error
	;						SR17470:2 - Needed to set the Line Number property
	; 25-Mar-2010	SCR		SR17251: Use GetDefaultReceiptStorage for unsourced line
	; 09-Dec-2009	shobby	SR17034: Passed id of program in to SourceIssue
	; 18-Nov-2009	DWR		SR17044: use specific language text to alert user to 
	; 							problem storage. appears to be setting a string as 
	; 							an object, this causes a failure in manualwindows build
	; 05-Jun-2009	PPP		SR16544: If Reqn is a Kit, get the Despatch Storage of
	; 							the Sending Location
	; 29-May-2009	PPP		SR16586:Do not proceed if any the default REC storage is
	; 							not defined for any Req Line
	; 07-Oct-2008 	Luke	SR15992 correct new line with no stock line number 
	; 01-Aug-2008	Luke	SR15814: Corrected sc naming and use of $$$Text
	; 14-May-2008	Luke 	SR15741 removed out of date goods from being shown 
	; 30-Jan-2008	HQN		SR15625 Change class sig dREQIssueLine to dUReqIssueLine
	; 24-Jan-2008 	HQN		SR15625 Change class signature dREQLine to dUReqLine
	; 18-Dec-2007	HQN		Get base units for item from INART
	; 13-Dec-2007	HQN		Manually Set Primary Keys on lines; %Save doesn't
	; 							allocate keys for ANM classes
	; 12-Dec-2007	HQN		Removed empty lines for Issues that are suggested
	; 							as partial; Only creates empty line for
	; 							Unsourceable Reqs; Converted to use %Save
	; 11-Dec-2007	HQN		Corrected QtyRequired; Now retains value of
	; 							ReqLine::QtyRequired over split IssueLines
	; 06-Dec-2007	GRF		Error message; sc as parameter
	; 06-Dec-2007	HQN		Corrected QtyRequired value on the created IssueLine
	; 
	; TODO: Handle exceptional cases of INART not having base units defined
	; 		potential Garbage in at the moment
	;-------------------------------------------------------------------------------
	//set sc = $$$YES //SR15814:

	set sc = $$$OK
	set fltQtyRequired     = objReqLine.QtyRequired - objReqLine.QtyIssued
	set fltLineQtyRequired = fltQtyRequired
	set objIssueLinesList  = ##class(%Library.ListOfObjects).%New()
	
	set objStockList = ##class(alDRP.iDRP).SourceIssue(objReqLine.Item,
	                                                   objReqLine.FromStockLocn.Location,
	                                                   fltQtyRequired,
	                                                   objReqLine.Requisition.Program1)	;SR17034
	
	set fltQtyIssued  = 0
	set strLineNumber = objReqLine.LineNumber ; $$$NULLOREF ; Inherit line numbering from ReqLine
	set strSubLineNumber = $$$NULLOREF

	if $$$ISOK(sc) {
		for idxStock=1:1:objStockList.Count() {
			quit:$$$ISERR(sc)
			set objStockIssue = objStockList.GetAt(idxStock)
			
			set min(fltQtyRequired)           = ""
			set min(objStockIssue.QtyToIssue) = ""
			set fltQtyIssued = $order(min(""))        ; minimum value
			kill min
			
			if (fltQtyIssued > 0) {
				set objIssueLine = ##class(alREQ.dUReqIssueLine).%New()
				set objIssueLine.Company     = %this.Requisition.Company
				set objIssueLine.IssueNumber = %this.IssueNumber
				set objIssueLine.Reference   = objReqLine.LineNumber	
				
				set objIssueLine.FromStorage = objStockIssue.Storage.Code

	; vvvvv	SR17044		
	;			set objIssueLine.ToStorage   = objReqLine.Requisition.ToLocn.GetDefaultReceiptStorage(objReqLine.Item)
	;			if (objIssueLine.ToStorage = $$$NULLOREF) {
	; ^^^ vvv			
				set objToStorage = objReqLine.Requisition.ToLocn.GetDefaultReceiptStorage(objReqLine.Item)
				set objIssueLine.ToStorage   = objToStorage
				if (objToStorage = $$$NULLOREF) {
	; ^^^^^ SR17044
	;				set strMessage = $$$Text($listbuild("alLOC0001",objReqLine.Requisition.ToLocn.Location))  ;SR17044
					set strMessage = $$$Text($listbuild("alLOC0010",$$$StrWWW0121ReceiptStorage,objReqLine.Requisition.ToLocn.Location))
					set sc =$$$ERROR($$$GeneralError,strMessage)
					
					set fltQtyRequired = 0 ; skip further processing
					quit               ; "No default storage found for location %1"
				}
				
				//SR16544: If Requistion is a Kit, get the Despatch Storage of the Sending Locn
				if objReqLine.Requisition.Type = 4 {
	;				set objStorage = objReqLine.Requisition.objFromLocn.GetDefaultDespatchStorage(objReqLine.Item)				
					set objStorage = objReqLine.Requisition.FromLocn.GetDefaultDespatchStorage(objReqLine.Item)				
					set objIssueLine.DespatchStorage = objStorage
					if (objIssueLine.DespatchStorage = $$$NULLOREF) {
	;					set strMessage = $$$Text($listbuild("alLOC0009",objReqLine.Requisition.FromLocn.Location)) ;SR17044
						set strMessage = $$$Text($listbuild("alLOC0010",$$$StrWWW0121DespatchStorage,objReqLine.Requisition.FromLocn.Location))
						set sc =$$$ERROR($$$GeneralError,strMessage)
						
						set fltQtyRequired = 0 ; skip further processing
						quit           ; "No Despatch Storage found for location %1"
					}
				}
				set objIssueLine.Bundle      = objStockIssue.Bundle.%Id()
				if (strSubLineNumber '= $$$NULLOREF) set objIssueLine.LineNumber = strLineNumber_"."_$translate($justify(strSubLineNumber,2,0)," ","0") ; mimic ANM Grid lines
				if (objIssueLine.LineNumber = "")    set objIssueLine.LineNumber = strLineNumber
				set objIssueLine.Item        = objReqLine.Item
				set objIssueLine.Unit        = $$$INARTUnitofMeasure($get(^INART(objIssueLine.Company,objIssueLine.Item,1))) ; objReqLine.Unit
				set objIssueLine.QtyRequired = fltLineQtyRequired
				set objIssueLine.QtyIssued   = fltQtyIssued
				set objIssueLine.Status      = ##class(alSYS.Status.dUStatus).%OpenId("0||INIssueLine||1") // Open //SR15626 <lb>
				set objIssueLine.Demand      = objReqLine.Demand
								
				set sc = objIssueLine.%Save()

				if ($$$ISOK(sc)) { ; exception handling?
					do objIssueLinesList.Insert(objIssueLine)
					set fltQtyRequired = fltQtyRequired - fltQtyIssued
					set:(strLineNumber = $$$NULLOREF) strLineNumber = objIssueLine.LineNumber
					set strSubLineNumber = $i(strSubLineNumber)
				}
			}
			quit:(fltQtyRequired = 0) ; break out of for loop
		}
		
		if $$$ISERR(sc) quit ""				//EARLY EXIT	//SR16586   ; FIXME : in contravention to coding standards
		
		/* remaining Qty, could not source, make blank entries */
		/* only create empty issue lines for unsourcables */
		if (objIssueLinesList.Count() = 0) {
			set objIssueLine = ##class(alREQ.dUReqIssueLine).%New()
			set objIssueLine.Company     = %this.Requisition.Company
			set objIssueLine.IssueNumber = %this.IssueNumber
			set objIssueLine.Reference   = objReqLine.LineNumber

			//SR17470:2
			//if (strLineNumber = $$$NULLOREF) set objIssueLine.LineNumber = strLineNumber_"."_$translate($justify(strSubLineNumber,2,0)," ","0") ; mimic ANM Grid lines  //SR15992
			if (strSubLineNumber '= $$$NULLOREF) set objIssueLine.LineNumber = strLineNumber_"."_$translate($justify(strSubLineNumber,2,0)," ","0") ; mimic ANM Grid lines
			if (objIssueLine.LineNumber = "")    set objIssueLine.LineNumber = strLineNumber
			
			set objIssueLine.Item        = objReqLine.Item
			set objIssueLine.Unit        = objReqLine.Unit
			set objIssueLine.QtyRequired = fltLineQtyRequired
			set objIssueLine.QtyIssued   = 0
			set objIssueLine.ToStorage   = objReqLine.Requisition.ToLocn.GetDefaultReceiptStorage(objReqLine.Item) ; SR17251
			//set objIssueLine.ToStorage   = objReqLine.Requisition.ToLocn.GetDefaultStorage(objReqLine.Item)

			//SR16544: If Requistion is a Kit, get the Despatch Storage of the Sending Locn
			if objReqLine.Requisition.Type = 4 {
				set objIssueLine.DespatchStorage = objReqLine.Requisition.FromLocn.GetDefaultDespatchStorage(objReqLine.Item)				
			}

			set objIssueLine.Status      = ##class(alSYS.Status.dUStatus).%OpenId("0||INIssueLine||1") // Open //SR15626 <lb>
			set objIssueLine.Demand      = objReqLine.Demand
			
			//SR17470
			//if ($$$ISOK(objIssueLine.ANMSave())) {
			set sc = objIssueLine.%Save()
			if ($$$ISOK(sc)) {
				do objIssueLinesList.Insert(objIssueLine)
				set fltQtyRequired   = fltQtyRequired - fltQtyIssued
				set strSubLineNumber = $increment(strSubLineNumber)
			}                                                             ; TODO : exception handling?
		}
	}
	
	quit objIssueLinesList
]]></Implementation>
</Method>

<Method name="RequisitionGet">
<ReturnType>alREQ.dUReq</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008 	HQN		SR15625 Changed class signature dREQ to dUReq
	; 07-Dec-2007	HQN		Changed DemandType value comparison to reflect new
	; 							status code (5 -> 7)
	;-------------------------------------------------------------------------------
	if (i%Requisition = $$$NULLOREF) {
		if (%this.DemandType = 7) && (%this.Reference '= $$$NULLOREF) {
			set i%Requisition = ##class(alREQ.dUReq).%OpenId("0||"_%this.Reference)
		}
	}
	quit i%Requisition
]]></Implementation>
</Method>

<Method name="%OnDelete">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Delete</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being deleted.

<P>If this method returns an error then the object will not be deleted.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Status 2 = Firmed
	;        3 = Active
	;        7 = Active/Pending
	; 
	; History:
	; 13-May-2009	PPP		SR16199	POS Issue uses the same Issue with no requisition
	; 24-Jan-2008	HQN		SR15625 Changed class signature dINIssue to dUIssue
	; 12-Dec-2007	HQN		Corrected constants and macro comparitors
	;-------------------------------------------------------------------------------
	set sc = $$$YES
	; Issues need to clean up source
	set enumReqActiveStatus   = 3
	set enumIssueActiveStatus = 7
	set objIssue      = ##class(alISS.dUIssue).%Open(oid)
	set objReq        = objIssue.Requisition
	set lstIssueLines = objIssue.IssueLines
	
	for loopIssues=1:1:lstIssueLines.Count() {
		set objIssueLine = lstIssueLines.GetAt(loopIssues)
		set sc = objIssueLine.%Delete(objIssueLine.%Oid())
		quit:($$$ISERR(sc))
	}
	
	if objReq'=$$$NULLOREF {   //16199
		; delete Pseudo relationships because they don't have referential integrity
		if $$$ISOK(sc)                                          &&
		   (objReq.Status.StatusCode   = enumReqActiveStatus)   &&
		   (objIssue.Status.StatusCode = enumIssueActiveStatus)    {
			
			; update INReq status to revert back so it can be further processed
			set objReq.Status = ##class(alSYS.Status.dUStatus).%OpenId("0||INReq||2") ; Firmed status// Open //SR15626 
			set sc = objReq.%Save()
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="FirmIssue">
<Description><![CDATA[

	<p>Attempts to Autoclose the Requisition if we're closed</p>
	]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Status 2 = Firmed
	;        3 = Active
	;        7 = Active/Pending
	;        8 = Manual-Close
	;        9 = Auto-Close
	; 
	; 
	; History:
	; 11-Aug-2010	PPP		SR17495: Always do the Req Status check (not conditional)
	; 02-Feb-2010	PPP		SR17145: Do not set Req status to 7 if any line is not 7
    ; 29-May-2009	PPP		SR16586: Simplify Process (remove unnecessary calls to
    ; 							Script Engine/State Engine)
	; 02-Oct-2008  	Luke	SR15980 add check for act pnd & change on the REQ status  
	; 04-Dec-2007 	GRF		Language Text
	; 06-Dec-2007  	HQN		Merged common code into INIssue::FirmIssue()
	; 							Autoclose call instead of directly setting status
	;-------------------------------------------------------------------------------
	set sc = ##super()
	
	if '$$$ISERR(sc) && ((%this.Status.StatusCode = 8) || (%this.Status.StatusCode = 9)) {
		do %this.Requisition.AutoClose()
	}
	//} elseif(%this.Status.StatusCode = 7) {      //SR17495
	if $$$ISOK(sc) {
		set blnFound2 = $$$NO
		set blnFound7 = $$$NO
		
		for loopj=1:1:%this.Requisition.ReqLines.Count() {
			quit:blnFound2 
			set objReqLine = %this.Requisition.ReqLines.GetAt(loopj)
			set idSta      = objReqLine.Status.StatusCode
			
			if (idSta = 2) || (idSta = 3) { //SR17145
				set blnFound2 = $$$YES
			
			} elseif (idSta = 7) {
				set blnFound7 = $$$YES
			}
		}
		//Status is still Active if there are Req Lines Outstanding	//SR16586
		if blnFound2 {
			set %this.Requisition.Status.StatusCode = 3				//Active
		
		} elseif blnFound7 {
			set %this.Requisition.Status.StatusCode = 7				//Act/Pending
		}
		set sc = %this.Requisition.%Save()
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="PrepareIssue">
<Description><![CDATA[

	<p>Attempts to Autoclose the Requisition if we're closed</p>
	]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Status 4 = Prepared
	; 
	; History:
	; 04-Jun-2009	PPP		SR16544 : Created
	;-------------------------------------------------------------------------------
	set sc = ##super()
	
	if $$$ISOK(sc) && (%this.Status.StatusCode = 4) {
		set %this.Requisition.Status.StatusCode = 4
		set sc = %this.Requisition.%Save()
		//SR15980 
	}
	quit sc
]]></Implementation>
</Method>

<Method name="ReleaseIssue">
<Description><![CDATA[
<p>Changes status to <class>WWWStatus</class>::INIssue::Firmed(2)
and processes all Lines to do the same</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; History :
	;-------------------------------------------------------------------------------
	set sc  = %this.FirmIssue()
	quit sc
]]></Implementation>
</Method>

<Method name="GetByReqNum">
<ClassMethod>1</ClassMethod>
<FormalSpec>strReqNum:%String,*sc</FormalSpec>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	// FIXME : "Output sc As %Status"
	set objIssues    = ##class(%Library.ListOfObjects).%New()
	set objResultSet = ##class(%Library.ResultSet).%New("alREQ.dUReqIssue:ByReqNum")
	set sc = objResultSet.Execute(strReqNum)
	
	if $$$ISOK(sc) {
		while objResultSet.Next(.sc) {
			quit:($$$ISERR(sc))
			
			set objIssue = ##class(alREQ.dUReqIssue).%OpenId(objResultSet.Data("ID"))
			do objIssues.Insert(objIssue)
		}
	}
	quit objIssues
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>