<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSOH.dStockHistory">
<Description><![CDATA[
Item Stock History]]></Description>
<ClassType>persistent</ClassType>
<OdbcType>INTEGER</OdbcType>
<ProcedureBlock>1</ProcedureBlock>
<SqlCategory>INTEGER</SqlCategory>
<Super>%Persistent</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; History:
; 20-Dec-2013	SCR		UFH-12: Added Indexes, ItemLoc &amp; Item
; 10-May-2012	shobby	SR18009:Index
; 10-Nov-2009	PPP		SR17023:Added SubType as %String
; 14-Apr-2009	PPP		SR16468:Captions for Properies
; 04-Feb-2009	HQN		SR16341: Store MovementType again, index TxType
; 02-Oct-2008	GRF		SR15810: Add Query GetHistoryByStorageForPeriod
; 10-Sep-2008	PPP		SR15885: Saving the Bundle on the transation,
;							Restoring from BundleAttributes each time is a big hit
;							(removed field BundleAttributes)
; 29-Apr-2008	HQN		SR15697: Changed Bundle to Transient and now store away
; 							Bundle.Attributes as BundleAttributes, allows Historic
; 							Capture of values
; 28-Apr-2008	GRF		Revise property names
; 24-Apr-2008	GRF		Add Index
; 22-Apr-2008	HQN		SR15667 Added initial values for DateConfirmed
; 							and TimeConfirmed, these are used in ChangeQty of SOH
; 							classes
; 24-Jan-2008	LB		SR15626 Created
;---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="Item">
<Type>alINV.dItem</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00069"/>
</Property>


<Property name="Location">
<Type>alLOC.dLocation</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00071"/>
</Property>


<Property name="Storage">
<Type>alLOC.dStorage</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00080"/>
</Property>


<Property name="Bundle">
<Type>alSOH.dBundle</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00067"/>
</Property>

<UDLText name="T">
<Content>
// Property BundleAttributes As %ArrayOfDataTypes [ Required ];

</Content>
</UDLText>


<Property name="TxType">
<Type>alSOH.dTransactionType</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00082"/>
</Property>


<Property name="MovementType">
<Type>alDRP.dMovementType</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00073"/>
</Property>


<Property name="Reference">
<Type>alSYS.dt.dtString</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00078"/>
</Property>


<Property name="LineNumber">
<Type>alSYS.dt.dtString</Type>

<Parameter name="CAPTION" value="AL00070"/>
</Property>


<Property name="QtyMoved">
<Type>alSYS.dt.dtFloat</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00077"/>
</Property>

<UDLText name="T">
<Content>
// OPENING Qty On Hand for Storage

</Content>
</UDLText>


<Property name="QOHStorage">
<Type>alSYS.dt.dtFloat</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00076"/>
</Property>

<UDLText name="T">
<Content>
// OPENING Qty On Hand for Location

</Content>
</UDLText>


<Property name="QOHLocn">
<Type>alSYS.dt.dtFloat</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00075"/>
</Property>


<Property name="LotNumber">
<Type>alSYS.dt.dtString</Type>

<Parameter name="CAPTION" value="AL00072"/>
</Property>


<Property name="BatchNumber">
<Type>alSYS.dt.dtString</Type>

<Parameter name="CAPTION" value="AL00066"/>
</Property>

<UDLText name="T">
<Content>
// Property WorkSheet As alDRP.dWorkSheet [ Required ];

</Content>
</UDLText>

<UDLText name="T">
<Content>
// FIXME : Processed as Qty rather than Value - already have QtyMoved

</Content>
</UDLText>


<Property name="TxValue">
<Type>alSYS.dt.dtCurrency</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00083"/>
</Property>

<UDLText name="T">
<Content>
// FIXME : Not being populated?  cf INStockVal total value by storage?

</Content>
</UDLText>


<Property name="ValueOnHandLocn">
<Type>alSYS.dt.dtCurrency</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00084"/>
</Property>


<Property name="StdPrice">
<Type>alSYS.dt.dtFloat</Type>

<Parameter name="CAPTION" value="AL00079"/>
</Property>

<UDLText name="T">
<Content>
// Property HistoryTimeStamp As %TimeStamp [ InitialExpression = {$zdt($horolog,3)}, Required ];

</Content>
</UDLText>


<Property name="DateConfirmed">
<Type>alSYS.dt.dtDate</Type>
<InitialExpression>+$horolog</InitialExpression>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00068"/>
</Property>


<Property name="TimeConfirmed">
<Type>alSYS.dt.dtTime</Type>
<InitialExpression>$piece($horolog,",&quot;,2)</InitialExpression>

<Parameter name="CAPTION" value="AL00081"/>
</Property>


<Property name="NonStock">
<Type>alSYS.dt.dtBoolean</Type>

<Parameter name="CAPTION" value="AL00074"/>
</Property>

<UDLText name="T">
<Content>
// SR17023

</Content>
</UDLText>


<Property name="SubType">
<Type>alSYS.dt.dtString</Type>

<Parameter name="CAPTION" value="AL00624"/>
</Property>


<Property name="PhysicalStorage">
<Type>alLOC.dStorage</Type>

<Parameter name="CAPTION" value="AL00763"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Index name="Index">
<Properties>Item,Location,DateConfirmed,Storage</Properties>
</Index>

<Index name="idxReceipt">
<Properties>Reference,LineNumber</Properties>
</Index>

<Index name="TxTypeIndex">
<Properties>TxType</Properties>
</Index>

<Index name="ItemLoc">
<Properties>Item,Location</Properties>
</Index>

<Index name="Item">
<Properties>Item</Properties>
</Index>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Query name="GetHistoryByStorage">
<Type>%SQLQuery</Type>
<FormalSpec>Storage:alLOC.dStorage</FormalSpec>
<SqlQuery>SELECT %ID FROM dStockHistory
 WHERE (Storage = :Storage)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="GetHistoryByStorageForPeriod">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem,Storage:alLOC.dStorage,FromDate:alSYS.dt.dtDate,ToDate:alSYS.dt.dtDate</FormalSpec>
<SqlQuery>SELECT %ID FROM dStockHistory
 WHERE (Item = :Item AND Storage = :Storage AND DateConfirmed &gt;= :FromDate AND DateConfirmed &lt;= :ToDate)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="%OnAfterSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called after 
the object's data has been successfully written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	;
	; History:
	; 10-Sep-2009	PPP		SR16884: If Item is a Consumable - Trn is flagged as NonStock,
	;								 which can used for no SOH balances
	; 12-Jun-2009	PPP		SR16637: Only update QOH records for new Trn Records
	; 23-Oct-2008	GRF		SR15902: Corrected tag in dUItemLocation
	; 13-May-2008	Luke	SR15665 added Location over rides 
	; 24-Jan-2008	Luke 	SR15626 Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	//SR16637:No updates if the record is not new
	if '$get(insert) quit sc											//EARLY EXIT

	//SR16884
	//set blnOverRide = ##class(alINV.dUItemLocation).IsConsumable(%this.Storage.Location.%Id(), %this.Item.%Id()) //SR15665
	set blnNonStock   = %this.NonStock
	
	if 'blnNonStock {
		if $$$ISOK(sc) {
			set Item     = %this.Item
			set Storage  = %this.Storage
			set Bundle   = %this.Bundle
			set QtyMoved = %this.QtyMoved

			set sc = ##class(alSOH.dBundleStock).ChangeQuantity(Item,Storage,Bundle,QtyMoved)
		}
	}
		
	if $$$ISOK(sc) {
		/*
		set objLedIn = ##class(alGL.dLedgerInterface).%New()
		set objLedIn.Item             = %this.Item
		set objLedIn.Location         = %this.Location
		//set objLedIn.TxType 
		
		set objLedIn.Reference        = %this.Reference
		set objLedIn.LineNumber       = %this.LineNumber
		set objLedIn.GLPeriod         = "GLPeriod"
		set objLedIn.QtyMoved         = %this.QtyMoved
		set objLedIn.ReasonCode       = "ReasonCode"
		
		set objLedIn.TxValue          = 0
		set objLedIn.ValueOnHandLocn  = 0
		set objLedIn.StdPrice         = 0
		set objStkBal = ##class(alSOH.dStockBalance).%OpenId(%this.Item.%Id()_"||"_%this.Location.%Id())
		if objStkBal '= "" { 
			set objLedIn.QtyOnHandLocn = objStkBal.QtyOnHand
		}
		
		set objLedIn.StockHistory     = %this
		set objLedIn.GLReference      = "GLReference"
		set objLedIn.NonStock         = $$$YES
		set objLedIn.QLAccount        = "QLAccount"
		
		set objLedIn.PostingCharacteristic = "PostingCharacteristic"
		set sc = objLedIn.%Save()
		*/
	}
	if $$$ISERR(sc) {
		set sc = $system.Status.AppendStatus(($$$ERROR($$$GeneralError,"Error Proccessing Stock History" )),sc)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="%OnDelete">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Delete</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being deleted.

<P>If this method returns an error then the object will not be deleted.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	;
	; History:
	; 22-Jul-2010	PPP		SR:Clear Relevant Qty classes when Stock Trn is deleted
	; xx-xxx-2008	xxx		SRxxxxx:Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set objStkHist = ..%Open(oid,4,.sc)
	
	if $$$ISOK(sc) {
		set blnOverRide = ##class(alINV.dUItemLocation).IsConsumable(objStkHist.Location.%Id(), objStkHist.Item.%Id())
		if 'blnOverRide {	//-Ve Qty
			set sc = ##class(alSOH.dBundleStock).ChangeQuantity(objStkHist.Item,objStkHist.Storage,objStkHist.Bundle,(objStkHist.QtyMoved*-1))
		}
	}

	; FIXME - Need this to be temporarily changed till we find a better method, as we need to 
	; delete the stock history transactions when converting from V1-V2 for a specific item.
	; Maybe an authorization override  (PPP 01-May-2008)

	quit sc
	
	//quit $$$OK
	//quit $$$ERROR($$$GeneralError,"Can not delete a Stock History File")
]]></Implementation>
</Method>

<Method name="%OnValidateObject">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%ValidateObject</METHOD> method to 
provide notification that the current object is being validated.

<P>If this method returns an error then <METHOD>%ValidateObject</METHOD> will fail.]]></Description>
<Private>1</Private>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	if %this.Item.ItemPolicy '= %this.Bundle.ItemPolicy {
		;if '$data(^CacheTempAllowPolicyMissmatch($job)) {
		;	set sc = $system.Status.Error(5001, %this.%ClassName(1)_" ItemPolicy mismatch between Item.%Id()="_%this.Item.%Id()_" and Bundle.%Id()="_%this.Bundle.%Id())
		;}
	}
	quit sc
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^alSOH.dStockHistoryD</DataLocation>
<DefaultData>dStockHistoryDefaultData</DefaultData>
<IdLocation>^alSOH.dStockHistoryD</IdLocation>
<IndexLocation>^alSOH.dStockHistoryI</IndexLocation>
<StreamLocation>^alSOH.dStockHistoryS</StreamLocation>
<Data name="dStockHistoryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>BatchNumber</Value>
</Value>
<Value name="3">
<Value>BundleAttributes</Value>
</Value>
<Value name="4">
<Value>DateConfirmed</Value>
</Value>
<Value name="5">
<Value>Item</Value>
</Value>
<Value name="6">
<Value>LineNumber</Value>
</Value>
<Value name="7">
<Value>Location</Value>
</Value>
<Value name="8">
<Value>LotNumber</Value>
</Value>
<Value name="9">
<Value>NonStock</Value>
</Value>
<Value name="10">
<Value>QOHLocn</Value>
</Value>
<Value name="11">
<Value>QOHStorage</Value>
</Value>
<Value name="12">
<Value>QtyMoved</Value>
</Value>
<Value name="13">
<Value>Reference</Value>
</Value>
<Value name="14">
<Value>StdPrice</Value>
</Value>
<Value name="15">
<Value>Storage</Value>
</Value>
<Value name="16">
<Value>TimeConfirmed</Value>
</Value>
<Value name="17">
<Value>TxType</Value>
</Value>
<Value name="18">
<Value>TxValue</Value>
</Value>
<Value name="19">
<Value>ValueOnHandLocn</Value>
</Value>
<Value name="20">
<Value>Bundle</Value>
</Value>
<Value name="21">
<Value>MovementType</Value>
</Value>
<Value name="22">
<Value>SubType</Value>
</Value>
<Value name="23">
<Value>PhysicalStorage</Value>
</Value>
</Data>

<Property name="BatchNumber"/>

<Property name="Bundle"/>

<Property name="DateConfirmed"/>

<Property name="Item"/>

<Property name="LineNumber"/>

<Property name="Location"/>

<Property name="LotNumber"/>

<Property name="MovementType"/>

<Property name="NonStock"/>

<Property name="PhysicalStorage"/>

<Property name="QOHLocn"/>

<Property name="QOHStorage"/>

<Property name="QtyMoved"/>

<Property name="Reference"/>

<Property name="StdPrice"/>

<Property name="Storage"/>

<Property name="SubType"/>

<Property name="TimeConfirmed"/>

<Property name="TxType"/>

<Property name="TxValue"/>

<Property name="ValueOnHandLocn"/>
</Storage>
</Class>
</Export>