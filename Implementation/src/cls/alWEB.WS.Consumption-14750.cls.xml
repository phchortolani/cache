<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alWEB.WS.Consumption">
<Description><![CDATA[
alWEB.WS.Consumption]]></Description>
<ClassType/>
<IncludeCode>COMSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService,alWEB.WS.Utils</Super>

<Parameter name="SERVICENAME">
<Description><![CDATA[
Name of the WebService.]]></Description>
<Default>Consumption</Default>
</Parameter>


<Parameter name="NAMESPACE">
<Description><![CDATA[
Namespace of the WebService.]]></Description>
<Default>http://www.disclinc.com</Default>
</Parameter>


<Method name="GetLocQtyDtl">
<Description><![CDATA[
Request stock quantity detail data for item and site location
<br><br>
<b>Input Parameters:</b><br>
SessionId (Required) = WebService Session<br>
MsgSequence (Required) = Message Sequence Number of this call<br>
LocationId (Required) = Site Location for the item being queried<br>
ItemNumber (Required) = Item Number of the stock quantity being queried<br>
CalcType (Required) = Type of stock quantity requested<br>
	(2) QOH - All stock<br>
	(4) RQOH - Reserved stock<br>
	(8) SQOH - Allocated stock<br>
	(10) HQOH - Blocked (Hold) stock<br>
	(0) AQOH - Available stock (QOH-RQOH-SQOH-HQOH)<br>
	(21) ATP - Available to promise (Requires a current or future date)<br>
	(22) PAB - Projected available balance (Requires a current or future date)<br>
	(23) CPAB - Critical projected available balance (Requires a current or future date)<br>
RequiredDate (Conditional) = Date that the stock quantity is requested for. This
is only required for ATP, PAB, CPAB. It will be ignored by the other Types.<br>
Parameter = [not in use]<br>
IssueType (Required) =<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(I) Inpatient<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(O) OutPatient<br>]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,LocationId:%String,ItemNumber:%String,CalcType:%Integer=0,RequiredDate:%String,Parameter:%String,IssueType:%String="&quot;</FormalSpec>
<ReturnType>alWEB.WSResult.GetLocQtyDtlResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
    // History:
    // 16-Dec-2010	GRF		SR17631: Reference to objResult in PostProcess call
    //							doesn't need "." prefix
    // 24-Aug-2010	SCR		SR17506: Add Extra Logging for Source Location
    // 02-Sep-2009	DWR		SR16866: Change the namespace if location requires it and
    // 							revert back after executing calls.
    // 25-Feb-2009	DavidR	SR16385: changed logging to happen if no error log created first
    // 10-Feb-2009	shobby	SR16348: New parameter 'IssueType'.
    // 05-Feb-2009	shobby	SRBR014985: Added logging
    // 05-Nov-2008	FIS		SR16122: Delete Storage Id from return
    // 29-Oct-2008	shobby	SRBR014985: Added BatchNumber
    // 01-Oct-2008	TF/FIS	SRBR014564: Created
	//------------------------------------------------------------------------------
	
	set objResult = ##class(alWEB.WSResult.GetLocQtyDtlResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	// Make sure in the correct Namespace  SR16866
	do CheckNamespace^COMEntity(LocationId,.CurrentNS)
		
	//validate session
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) && ((CalcType=21) || (CalcType=22) || (CalcType=23)) {
		set RequiredDate=##class(%Library.Date).OdbcToLogical(RequiredDate)
		if 'RequiredDate {  //invalid date
			set strStatus = $$$MakeStatus("#alW00004: "_$$$Text("alW00004")_" '"_$piece($piece(RequiredDate,"'",2),"'",1)_"'")  //Invalid required date or format (use ODBC format 'YYYY-MM-DD')
		}
	}
	
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()
		set strStatus = ..ExecuteCall("GetLocQtyDtl^INWSConsumptionInterface(.arrResponse,"""_$get(ItemNumber)_""","""_$get(LocationId)_""","""_$get(CalcType)_""","""_$get(RequiredDate)_""","""_$get(IssueType)_""")",objResponse)  ;16348
		
		if $$$ISOK(strStatus) {
			set strProp = ""
			for {
				set strValue = objResponse.ReturnArray.GetNext(.strProp)
				quit:strProp=""
				
				if strProp = """TotalQty""" {
					set objResult.TotalQty = strValue
				
				} elseif strProp = """SourceLocation""" {  ; SR17506
					set objResult.SourceLocation = strValue
				
				} elseif strProp = """OriginalLocation""" {
					set objResult.OriginalLocation = strValue
				
				} else {
					set objResultLine = ##class(alWEB.WSResult.GetLocQtyDtlResultLines).%New()
					set objResultLine.BaseQuantity      = $listget(strValue,2) ;16348
					set objResultLine.ExpiryDate        = $listget(strValue,3)
					;set objResultLine.ReceivingDate    = $listget(strValue,4)
					set objResultLine.LotNumber         = $listget(strValue,5)
					set objResultLine.BatchNumber       = $listget(strValue,6) ;BR014985
					set objResultLine.BaseUOM           = $listget(strValue,7) ;16348
					set objResultLine.DispenseQuantity  = $listget(strValue,8) ;16348
					set objResultLine.DispenseUOM       = $listget(strValue,9) ;16348
					
					do objResult.LineDetails.Insert(objResultLine)
				}
			}
		}
	}
	quit ..PostProcess(strStatus,CurrentNS,objResult,$$$MethodName)
]]></Implementation>
</Method>

<Method name="AddDemand">
<Description><![CDATA[
Add Demand at a location for soft allocation/reservation
<br><br>
<b>Input Parameters:</b><br>
SessionId (Required) = WebService Session Id<br>
MsgSequence (Required) = Message Sequence Number of this call<br>
LocationId (Required) = Location Id<br>
ItemNumber (Required) = Item number<br>
BaseQuantity (Required) = Demand quantity<br>
BaseUOM (Optional) = Unit of Measure of the BaseQuantity (as enum).  If not defined will use Alphalinc configuration.<br>
DueDate (Required) = Demand due date in ODBC format (YYYY-MM-DD)<br>
QtyOrdered [not in use]<br>
UOMOrdered [not in use]<br>
IssueType (Required) =<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(I) Inpatient<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(O) OutPatient<br>
OrderRef (Optional) = Order Reference<br>
Parameter = [not in use]<br>]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,LocationId:%String,ItemNumber:%String,BaseQuantity:%Float,BaseUOM:%String,DueDate:%String,QtyOrdered:%Float,UOMOrdered:%String,IssueType:%String,OrderRef:%String,Parameter:%String</FormalSpec>
<ReturnType>alWEB.WSResult.AddDemandResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
    // TODO: Combine EditDemand and AddDemand in to a single routine.
    // 
    // History:
    // 16-Dec-2010	GRF		SR17631: Reference to objResult in PostProcess call
    //							doesn't need "." prefix
    // 02-Sep-2009	DWR		SR16866: Change the namespace if location requires it and
    // 							revert back after executing calls.
    // 26-Feb-2009	shobby	SR16389: Validate the date
    // 25-Feb-2009	DavidR	SR16385: changed logging to happen if no error log created first
    // 11-Feb-2008	shobby	SR16348:	Changed Quantity to BaseQuantity, added BaseUOM, IssueType
    // 05-Feb-2008	shobby	SRBR014985: Added logging
    // 01-Oct-2008	FIS		SRBR014564: Created
	//------------------------------------------------------------------------------
	
	set objResult = ##class(alWEB.WSResult.AddDemandResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	// Make sure in the correct Namespace  SR16866
	do CheckNamespace^COMEntity(LocationId,.CurrentNS)
		
	//validate session
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) set strStatus=..ConvertOdbcToLogical(.DueDate)
	//get data
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()
		
		set strStatus = ..ExecuteCall("AddDemand^INWSConsumptionInterface(.arrResponse,"""_$get(LocationId)_""","""_$get(ItemNumber)_""","""_$get(BaseQuantity)_""","""_$get(BaseUOM)_""","""_$get(DueDate)_""","""_$get(QtyOrdered)_""","""_$get(UOMOrdered)_""","""_$get(IssueType)_""","""_$get(OrderRef)_""")",.objResponse) ;16348
		if $$$ISOK(strStatus) {
			set objResult.ReturnValue = objResponse.ReturnValue  //demand no.
			set strProp = ""

			for {
				set strValue = objResponse.ReturnArray.GetNext(.strProp)
				quit:strProp=""
				
				if $extract($translate(strProp,""""),1,5)="Issue" {
					; Translates issue into Dispense.  Dispense is not really the right word but we don't want
					; Trak to have to change their webservice.
					set $zobjproperty(objResult,$translate($$Replace^COMUtilStr(strProp,"Issue","Dispense"),""""))=strValue					
				} else {
					set $zobjproperty(objResult,$translate(strProp,""""))=strValue
				}
			}
		}
	}
	quit ..PostProcess(strStatus,CurrentNS,objResult,$$$MethodName)
]]></Implementation>
</Method>

<Method name="EditDemand">
<Description><![CDATA[
Change existing Demand at a location
<br><br>
<b>Input Parameters:</b><br>
SessionId (Required) = WebService Session Id<br>
MsgSequence (Required) = Message Sequence Number of this call<br>
LocationId (Required) = Location Id<br>
DemandId (Conditional) = Demand number<br>
NewQuantity (Optional) = new Demand quantity<br>
NewDueDate (Optional) = new Demand due date in ODBC format (YYYY-MM-DD)<br>
NewOrderRef (Optional) = new Order Reference<br>
NewIssueType (Required) =<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(I) Inpatient<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(O) OutPatient<br>
Parameter = [not in use]<br>]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,LocationId:%String,DemandId:%String,NewQuantity:%Float,NewDueDate:%String,NewOrderRef:%String,NewIssueType:%String,Parameter:%String</FormalSpec>
<ReturnType>alWEB.WSResult.AddDemandResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
    // History:
    // 16-Dec-2010	GRF		SR17631: Reference to objResult in PostProcess call
    //							doesn't need "." prefix
    // 02-Sep-2009	DWR		SR16866: Change the namespace if location requires it and
    // 							revert back after executing calls.
    // 26-Feb-2009	shobby	SR16389: Validate the date
    // 25-Feb-2009	DavidR	SR16385: changed logging to happen if no error log created first
    // 11-Feb-2008	shobby	SR16348:	Changed Quantity to BaseQuantity, added BaseUOM, IssueType
    // 05-Feb-2008	shobby	SRBR014985: Added logging
    // 01-Oct-2008	FIS		SRBR014564: Created
	//------------------------------------------------------------------------------
	
	set objResult = ##class(alWEB.WSResult.AddDemandResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	// Make sure in the correct Namespace  SR16866
	do CheckNamespace^COMEntity(LocationId,.CurrentNS)
		
	//validate session
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) set strStatus=..ConvertOdbcToLogical(.NewDueDate)
	
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()		
		set strStatus = ..ExecuteCall("EditDemand^INWSConsumptionInterface(.arrResponse,"""_$get(LocationId)_""","""_$get(DemandId)_""","""_$get(NewQuantity)_""","""_$get(NewDueDate)_""","""_$get(NewOrderRef)_""","""_$get(NewIssueType)_""")",objResponse)
		if $$$ISOK(strStatus) {
		
			set objResult.ReturnValue = objResponse.ReturnValue  //demand no.
			set strProp = ""

			for {
				set strValue = objResponse.ReturnArray.GetNext(.strProp)
				quit:strProp=""
				
				if $extract($translate(strProp,""""),1,5)="Issue" {
					; Translates issue into Dispense.  Dispense is not really the right word but we don't want
					; Trak to have to change their webservice.
					set $zobjproperty(objResult,$translate($$Replace^COMUtilStr(strProp,"Issue","Dispense"),""""))=strValue
				
				} else {
					set $zobjproperty(objResult,$translate(strProp,""""))=strValue
				}
			}
		}
	}
	quit ..PostProcess(strStatus,CurrentNS,objResult,$$$MethodName)
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
/// History
/// 07-Jul-2009 DWR		SR16642: Moved to WS.Utils
/// 26-Feb-2009	shobby	SR16389: Common code to convert and validate date parameters
ClassMethod ConvertOdbcToLogical(pdteDate As %String) As %String [ Private ]
{
	set strStatus=$$$OK
	set dteDate=##class(%Library.Date).OdbcToLogical(pdteDate)
	if ('dteDate)&amp;&amp;(dteDate'="&quot;) {  //invalid date
		set strStatus = $$$MakeStatus("#alW00001: "_$$$Text($listbuild("alW00001",pdteDate)))  //Invalid due date or format (use ODBC format 'YYYY-MM-DD')
	} else {
		set pdteDate=dteDate
	}
	quit strStatus
}
*/
</Content>
</UDLText>


<Method name="Dispense">
<Description><![CDATA[
Dispense Items at a location
<br><br>
<b>Input Parameters:</b><br>
SessionId (Required) = WebService Session Id<br>
MsgSequence (Required) = Message Sequence Number of this call<br>
LocationId (Required) = Location Id<br>
ItemNumber (Required) = Item number<br>
BaseQuantity (Required) = Demand quantity<br>
LotNumber (Conditional) = Required For Items With Lot Tracking<br>
DemandId (Conditional) = referred Demand number to be reduced/deleted<br>
Administered (Optional) = Dispensed And Administered (decreases SOH)<br>
SQOHRef (Conditional, Only if Not Administered)= Reference for Item tracking<br>
Parameter = [not in use]<br>]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,LocationId:%String,ItemNumber:%String,BaseQuantity:%Float,LotNumber:%String,DemandId:%String,Administered:%Boolean=1,SQOHRef:%String,Parameter:%String</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
    // History:
    // 16-Dec-2010	GRF		SR17631: Reference to objResult in PostProcess call
    //							doesn't need "." prefix
    // 02-Sep-2009	DWR		SR16866: Change the namespace if location requires it and
    // 							revert back after executing calls.
    // 25-Feb-2009	DavidR	SR16385: changed logging to happen if no error log created first
    // 12-Feb-2009	SCR		SR16348: Changed to QuantityBase
    // 05-Feb-2009	shobby	SRBR014985: Added logging
    // 05-Nov-2008	FIS		SR16122: Track by Lot Number not Storage Id
    // 01-Oct-2008	FIS		SRBR014564: Created
	//------------------------------------------------------------------------------
	
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	// Make sure in the correct Namespace  SR16866
	do CheckNamespace^COMEntity(LocationId,.CurrentNS)
		
	//validate session
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()
		
		if Administered = $$$YES {  //Dispensed and Administered
			/// 
			/// FIXME:
			/// -> Use issuing without order, NOT Adjustment
			;set strStatus = ..ExecuteCall("AdjustSOH^INWSConsumptionInterface(.strResponse,"""_$get(LocationId)_""","""_$get(ItemNumber)_""","""_$get(Quantity)_""","""_$get(StorageId)_""","""_$get(DemandId)_""")",objResponse)
			set strStatus = ..ExecuteCall("AdjustSOH^INWSConsumptionInterface(.strResponse,"""_$get(LocationId)_""","""_$get(ItemNumber)_""","""_$get(BaseQuantity)_""","""_$get(LotNumber)_""","""_$get(DemandId)_""")",objResponse)  ;SR16122
		
		} else {  //Dispensed Only (keep item/stock tracking)
			///
			/// NOT IMPLEMANTED YET !!!
			/// 
			/// Re-locate items to a "hidden location" (use SQOHRef as pseudo SOH, ie. patient id)
			/// until administered
			set strStatus = $$$MakeStatus("not implemented")
		}
		
		set objResult.ReturnValue = objResponse.ReturnValue  //adjustmend no. (INADJ header)
	}
	
	quit ..PostProcess(strStatus,CurrentNS,objResult,$$$MethodName)
]]></Implementation>
</Method>

<Method name="Administer">
<Description><![CDATA[
#### NOT INPLEMENTED YET ####
<br><br>
Administer Items at a location
<br><br>
<b>Input Parameters:</b><br>
SessionId (Required) = WebService Session Id<br>
MsgSequence (Required) = Message Sequence Number of this call<br>
DispenseId (Required) = Dispense Number<br>
ItemNumber (Required) = Item number<br>
Quantity (Required) = Quantity<br>
Parameter = [not in use]<br>]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,LocationId:%String,DispenseId:%String,Quantity:%Float,Parameter:%String</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
    // History:
    // 16-Dec-2010	GRF		SR17631: Reference to objResult in PostProcess call
    //							doesn't need "." prefix
    // 02-Sep-2009	DWR		SR16866: Change the namespace if location requires it and
    // 							revert back after executing calls.
    // 25-Feb-2009	DavidR	SR16385: changed logging to happen if no error log created first
    // 05-Feb-2008	shobby	SRBR014985: Added logging
    // 01-Oct-2008	FIS		SRBR014564: Created
	//------------------------------------------------------------------------------
	
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	// Make sure in the correct Namespace  SR16866
	do CheckNamespace^COMEntity(LocationId,.CurrentNS)
		
	//validate session
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) {
		///
		/// NOT IMPLEMENTED YET
		///
		/// consume items from the "hidden location"
		/// -> issuing without order, NOT Adjustment
		///
		set objResult.ReturnValue = ""
	}
	quit ..PostProcess(strStatus,CurrentNS,objResult,$$$MethodName)
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
/// Return Pick Details
/// &lt;br&gt;&lt;br&gt;
/// The Pick of an Issue can be based on the Issue Type
/// &lt;br&gt;&lt;br&gt;
/// &lt;b&gt;Input Parameters:&lt;/b&gt;&lt;br&gt;
/// SessionId (Required) = WebService Session Id&lt;br&gt;
/// MsgSequence (Required) = Message Sequence Number of this call&lt;br&gt;
/// DemandId (Required) = Demand Number&lt;br&gt;
/// IssueType (Optional) = Issue Type&lt;br&gt;
/// PickQuantity (Required) = Quantity&lt;br&gt;
/// PickUOM (Required) = Pick Unit of Measure&lt;br&gt;
/// Parameter = [not in use]&lt;br&gt;
Method Pick(SessionId As %String, MsgSequence As %Integer, DemandId As %String, IssueType As %String, PickQuantity As %Float, PickUOM As %String, Parameter As %String) As alWEB.WSResult.UniversalResult [ WebMethod ]
{
	//------------------------------------------------------------------------------
    // History:
    // 11-Mar-2009	DavidR	Removed, no longer required
    // 25-Feb-2009	DavidR	SR16385: changed logging to happen if no error log created first
    // 11-Feb-2009	SCR		SR16348: Created
	//------------------------------------------------------------------------------
	
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	//validate session
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_".&quot;_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()
		
		set strStatus = ..ExecuteCall("Pick^INWSConsumptionInterface2(.strResponse,"&quot;"_$get(DemandId)_"&quot;",&quot;"&quot;_$get(IssueType)_"&quot;",&quot;"&quot;_$get(PickQuantity)_"&quot;",&quot;"&quot;_$get(PickUOM)_"&quot;")&quot;,objResponse)  ;SR16122
		do Pick^INWSConsumptionInterface2
		set objResult.ReturnValue = objResponse.ReturnValue  //adjustmend no. (INADJ header)
	}
	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(strStatus))
	}else{
	do objResult.LogDetails(..%ClassName()_".&quot;_$$$MethodName)	
	}
	quit objResult
}*/
</Content>
</UDLText>


<Method name="Return">
<Description><![CDATA[
Return Items to a location
<br><br>
<b>Input Parameters:</b><br>
SessionId (Required) = WebService Session Id<br>
MsgSequence (Required) = Message Sequence Number of this call<br>
LocationId (Required) = Location Id<br>
DispenseId (Conditional, if traceable) = Dispense number<br>
ItemNumber (Conditional, if No Dispense Id) = Item to be returned<br>
LotNumber (Conditional, if No Dispense Id) = Lot Number<br>
ExpiryDate (Conditional, if No Dispense Id) = Expiry Date<br>
Quantity (Required) = Return Quantity<br>
Parameter = [not in use]<br>]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,LocationId:%String,DispenseId:%String,ItemNumber:%String,LotNumber:%String,ExpiryDate:%String,Quantity:%Float,Parameter:%String</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
    // History:
    // 16-Dec-2010	GRF		SR17631: Reference to objResult in PostProcess call
    //							doesn't need "." prefix
    // 02-Sep-2009	DWR		SR16866: Change the namespace if location requires it and
    // 							revert back after executing calls.
    // 25-Feb-2009	DavidR	SR16385: changed logging to happen if no error log created first
    // 05-Feb-2008	shobby	SRBR014985: Added logging
    // 01-Oct-2008	FIS		SRBR014564: Created
	//------------------------------------------------------------------------------
	
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	// Make sure in the correct Namespace  SR16866
	do CheckNamespace^COMEntity(LocationId,.CurrentNS)
		
	//validate session
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()
		/// 
		/// FIXME:
		/// -> Use receiving without order, NOT Adjustment
		set strStatus = ..ExecuteCall("ReturnSOH^INWSConsumptionInterface(.strResponse,"""_$get(LocationId)_""","""_$get(DispenseId)_""","""_$get(ItemNumber)_""","""_$get(LotNumber)_""","""_$get(ExpiryDate)_""","""_$get(Quantity)_""")",objResponse)
		if $$$ISOK(strStatus) {
			set objResult.ReturnValue = objResponse.ReturnValue  //return no. (INADJ header)
		}
	}
	quit ..PostProcess(strStatus,CurrentNS,objResult,$$$MethodName)
]]></Implementation>
</Method>

<Method name="Reverse">
<Description><![CDATA[
Reverse Items to a location.  Similar to a return but reopens the demand
allowing quantities to be changed, based on the assumption that the Dispense
was erroneous.
<br><br>
<b>Input Parameters:</b><br>
SessionId (Required) = WebService Session Id<br>
MsgSequence (Required) = Message Sequence Number of this call<br>
LocationId (Required) = Location Id<br>
DispenseId (Conditional, if traceable) = Dispense number<br>
ItemNumber (Conditional, if No Dispense Id) = Item to be returned<br>
LotNumber (Conditional, if No Dispense Id) = Lot Number<br>
ExpiryDate (Conditional, if No Dispense Id) = Expiry Date<br>
Quantity (Required) = Return Quantity<br>
Parameter = [not in use]<br>]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,LocationId:%String,DispenseId:%String,ItemNumber:%String,LotNumber:%String,ExpiryDate:%String,Quantity:%Float,Parameter:%String</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
    // History:
    // 16-Dec-2010	GRF		SR17631: Reference to objResult in PostProcess call
    //							doesn't need "." prefix
    // 14-Dec-2010	shobby	SR17631: Reverse.  Almost identical to Return.
    // 02-Sep-2009	DWR		SR16866: Change the namespace if location requires it and
    // 							revert back after executing calls.
    // 25-Feb-2009	DavidR	SR16385: changed logging to happen if no error log created first
    // 05-Feb-2008	shobby	SRBR014985: Added logging
    // 01-Oct-2008	FIS		SRBR014564: Created
	//------------------------------------------------------------------------------
	
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	// Make sure in the correct Namespace  SR16866
	do CheckNamespace^COMEntity(LocationId,.CurrentNS)
		
	//validate session
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()
		/// 
		/// FIXME:
		/// -> Use receiving without order, NOT Adjustment
		set strStatus = ..ExecuteCall("ReturnSOH^INWSConsumptionInterface(.strResponse,"""_$get(LocationId)_""","""_$get(DispenseId)_""","""_$get(ItemNumber)_""","""_$get(LotNumber)_""","""_$get(ExpiryDate)_""","""_$get(Quantity)_""",1)",objResponse)  //SR17631
		if $$$ISOK(strStatus) {
			set objResult.ReturnValue = objResponse.ReturnValue  //return no. (INADJ header)
		}
	}
	quit ..PostProcess(strStatus,CurrentNS,objResult,$$$MethodName)
]]></Implementation>
</Method>

<Method name="GetAvgCost">
<Description><![CDATA[
Get Item Average Costs
<br><br>
<b>Input Parameters:</b><br>
SessionId (Required) = WebService Session Id<br>
MsgSequence (Required) = Message Sequence Number of this call<br>
LocationId (Required) = Location Number<br>
ItemNumber (Required) = Item number<br>
Date (Optional) = Average Cost As Per Date (ODBC format)<br>
Parameter = [not in use]<br>]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,LocationId:%String,ItemNumber:%String,Date:%String,Parameter:%String</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
    // History:
    // 16-Dec-2010	GRF		SR17631: Reference to objResult in PostProcess call
    //							doesn't need "." prefix
    // 02-Sep-2009	DWR		SR16866: Change the namespace if location requires it and
    // 							revert back after executing calls.
    // 25-Feb-2009	DavidR	SR16385: changed logging to happen if no error log created first
    // 05-Feb-2008	shobby	SRBR014985: Added logging
    // 02-Jan-2009	FIS		SR16266: Date Added
    // 30-Dec-2008	FIS		SR16266: Created
	//------------------------------------------------------------------------------
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	// Make sure in the correct Namespace
	do CheckNamespace^COMEntity(LocationId,.CurrentNS)
		
	//validate session
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) && ($get(Date) '= "") {
		set Date=##class(%Library.Date).OdbcToLogical(Date)
		if 'Date {  //invalid date
			set strStatus = $$$MakeStatus("#alW00010: "_$$$Text("alW00010")_" '"_$piece($piece(Date,"'",2),"'",1)_"'")
		} // "Invalid date or format (use ODBC format 'YYYY-MM-DD')"
	}
	
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()
		set strStatus = ..ExecuteCall("GetAvgCost^INWSConsumptionInterface(.strResponse,"""_$get(LocationId)_""","""_$get(ItemNumber)_""","""_$get(Date)_""")",objResponse)
		if $$$ISOK(strStatus) {
			set objResult.ReturnValue = objResponse.ReturnValue  //return no. (INADJ header)
		}
	}
	quit ..PostProcess(strStatus,CurrentNS,objResult,$$$MethodName)
]]></Implementation>
</Method>

<Method name="PostProcess">
<FormalSpec>strStatus,CurrentNS,objResult,pMethodName</FormalSpec>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Return Result.
	; 		Subroutine of existing repeated code.
	;		TODO: Need a PreProcess for repeating code at the start of each method.
	;
	; Inputs:
	; 	CurrentNS : This is the original namespace before the calls to
	; 	            CheckNamespace^COMEntity in the calling methods.  We will revert
	; 	            to this namespace at the end of this method.
	;
	; Returns:
	;
	; History:
	; 16-Dec-2010	shobby	SR17631: Changed $$$MethodName to pMethodName
	; 16-Dec-2010	shobby	SR17631: First $znspace is now redundant; use
	;							pMethodName
	; 16-Dec-2010	shobby	SR17631: Created
	;-------------------------------------------------------------------------------
	;
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		set objResult = ..ReturnFault(..ResultError(strStatus))
		
	} else {
		do objResult.LogDetails(..%ClassName()_"."_pMethodName_"; Namespace: "_$znspace)
	}
	;make sure to revert back to normal namespace if changed
	if CurrentNS'=""{
		set $znspace = CurrentNS
	}
	quit objResult
]]></Implementation>
</Method>
</Class>
</Export>