<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alDRP.dMovementType.RelocateByPallet">
<ClassType>serial</ClassType>
<Super>alDRP.dMovementType</Super>

<Property name="MovementTypeId">
<Description><![CDATA[
Source of transaction
Based On : ^WWW101(0,"UMSATZART1",SPRACHE,Class,1)   ; TODO]]></Description>
<Type>alSYS.dt.dtInteger</Type>
<Final>1</Final>
<InitialExpression>"51&quot;</InitialExpression>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00474"/>
</Property>


<Method name="Validate">
<FormalSpec>pobjMove:alDRP.dMovement</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Check that the quantity being issued is available
	; (i.e. doesn't exceed the QOH less any other allocations)
	; 
	; History:
	; 21-Apr-2011	GRF		SR17715: Created from alDRP.dMovementType.Relocate
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	if pobjMove.Completed {
		set strMessage = $$$Text("IN00711")      ; "This movement is already completed."
		set sc = $$$ERROR($$$GeneralError,strMessage)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="Confirm">
<FormalSpec>pobjMove:alDRP.dMovement</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define enumAverageCost		9
	;-------------------------------------------------------------------------------
	; Movement of stock between Storages within a Location
	;  - No Average Cost update
	;  - No Stock to Finance Interface required
	;  - No Adjustment to Stock Values
	; 
	; History
	; 28-Apr-2011	GRF		SR17715: Update to INLP is now performed AFTER all lines
	;							have been adjusted requiring New Physical Storage
	;							to be passed as new param to (alSOH.piSOH).Post in
	;							step 2.
	; 21-Apr-2011	GRF		SR17715: Created from alDRP.dMovementType.Relocate
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set idItem   = pobjMove.Item.ItemId
	set fltQtyOH = pobjMove.QtyReceived
	set fltCost  = $$GetCost^INItemCost(idItem,pobjMove.FromLocn.Code,$$$enumAverageCost)
	;set idPallet = pobjMove.FromStorage.Code
	;kill ^CacheTempMovePallet(idPallet)
	
	;+++++++++++++++++++++++++++++++++++++++
	LOCK +^alSOHProcessing(idItem):2
	if '$test {
		set strMessage = $$$Text($listbuild("IN00853",idItem))
		set sc = $$$ERROR($$$GeneralError,strMessage)  
	;	"Can not acquire a lock for Item: (%1) please try again"
	;+++++++++++++++++++++++++++++++++++++++
	
	} else {
	; 1. Reduce Stock On Hand at TSU (Old Physical Storage)
	;---------------------------------------
		
		set objTransType   = ##class(alSOH.dTransactionType).%OpenId(7)
		set objFromStkHist = ##class(alSOH.piSOH).Post(pobjMove,
													   pobjMove.FromLocn,
													   pobjMove.FromStorage,
													  -fltQtyOH,
													   fltCost,
													   objTransType,
													   .sc)
		
	; 2. Increase Stock On Hand at TSU (New Physical Storage)
	;---------------------------------------
		
		set objTransType   = ##class(alSOH.dTransactionType).%OpenId(8)
		set objFromStkHist = ##class(alSOH.piSOH).Post(pobjMove,
													   pobjMove.FromLocn,
													   pobjMove.FromStorage,
													   fltQtyOH,
													   fltCost,
													   objTransType,
													   .sc,
													   pobjMove.ToStorage)
	;+++++++++++++++++++++++++++++++++++++++
		LOCK -^alSOHProcessing(idItem)
	;+++++++++++++++++++++++++++++++++++++++
	}
	quit sc
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>
</Export>