<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSOH.dSOH">
<ClassType>persistent</ClassType>
<IncludeCode>INSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; History:
; 14-Apr-2009	PPP		SR16468:Captions for Properties
; 30-Apr-2008	HQN		Added GetViaLocation query, used from Issue screen
; 28-Apr-2008	GRF		Revise index
; 24-Jan-2008	LB		SR15626 Created 
;---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="Item">
<Type>alINV.dItem</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00059"/>
</Property>


<Property name="QtyOnHand">
<Type>alSYS.dt.dtFloat</Type>

<Parameter name="CAPTION" value="AL00061"/>
</Property>


<Property name="QOHAdjustment">
<Type>alSYS.dt.dtFloat</Type>
<InitialExpression>"0&quot;</InitialExpression>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00060"/>
</Property>

<UDLText name="T">
<Content>
//Property ValueOnHand As alSYS.dt.dtCurrency [ InitialExpression = "0&quot; ];

</Content>
</UDLText>


<Property name="Storage">
<Type>alLOC.dStorage</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00062"/>
</Property>

<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Index name="Index">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Item,Storage</Properties>
<Unique>1</Unique>
</Index>

<Index name="ItemIDX">
<Properties>Item</Properties>
</Index>

<Index name="StorageIDX">
<Properties>Storage</Properties>
</Index>

<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Query name="GetItems">
<Type>%SQLQuery</Type>
<FormalSpec>Storage:alLOC.dStorage</FormalSpec>
<SqlQuery>SELECT %ID FROM dSOH
 WHERE (Storage = :Storage)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="GetStorages">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem</FormalSpec>
<SqlQuery>SELECT %ID FROM dSOH
 WHERE (Item = :Item)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<Query name="GetViaLocation">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem,Location:alLOC.dLocation</FormalSpec>
<SqlQuery>SELECT %ID FROM dSOH
 WHERE (Item = :Item AND Storage-&gt;Location = :Location)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="QtyOnHandSet">
<FormalSpec>pfltQty:%Float</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	set %this.QOHAdjustment = %this.QOHAdjustment + (pfltQty - i%QtyOnHand)
	set i%QtyOnHand = pfltQty
	quit sc
]]></Implementation>
</Method>

<Method name="DataTakeOn">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 22-Apr-2008	HQN		SR15673: Corrected reference to iUINV
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set rs = ##class(%ResultSet).%New()
	do rs.Prepare("select ID from SQLUser.INStockVal")
	do rs.Execute()
	
	while (rs.Next(.sc)) {
		if ($SYSTEM.Status.IsOK(sc)) {  // check if this succeeded without errors
			set objSOHV1 = ##class(User.INStockVal).%OpenId(rs.Data("ID"))
			set objSOH   = ##class(alSOH.dSOH).%New()
			
			set objSOH.Item = ##class(alINV.iUINV).GetItem(objSOHV1.Item)   ; FIXME ,.sc // SR15673 
			set objSOH.QtyOnHand     = objSOHV1.Quantity 
			set objSOH.QOHAdjustment = 0
			set objSOH.Storage       = ##class(alLOC.iLOC).GetStorage(objSOHV1.Location,objSOHV1.StockLocation)
			
			set sc = objSOH.%Save()
		//	set sc = objSOH.SanityCheck()
		}
	}
	
	quit strStatus
]]></Implementation>
</Method>

<Method name="ChangeQuantity">
<Description><![CDATA[
Changes the Quantity for an item on within a SOH object. it can accept negative numbers 
 Params:
 piObj				The Stock On Hand Object 
 pidQty				The Quantity 
 
 Returns: 
 %Status]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidStorage:alLOC.dStorage,pfltQtyMoved:%Float</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 10-Nov-2010	SCR		SR17611: Update SOHLockLevel to 0
	; 21-Apr-2008	HQN		SR15651: Removed redundant sc check
	; 						Changed to exclusive lock
	; 01-Apr-2008	Luke	SR15653 Correct the update of the SOH objects up the chain 
	; 31-Mar-2008	HQN		Corrected syntax of %Delete
	; 19-Feb-2008	Luke	SR15625 Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	; Open Object; If not open, create a new entry
	set newFile = $$$NO
	//SR17611
	//set objSOH  = ##class(alSOH.dSOH).%OpenId(pidItem.%Id()_"||"_pidStorage.%Id(),4,.sc)
	set objSOH  = ##class(alSOH.dSOH).%OpenId(pidItem.%Id()_"||"_pidStorage.%Id(),$$$SOHLockLevel,.sc)
	if objSOH = $$$NULLOREF {
		set objSOH = ##class(alSOH.dSOH).%New()
		set objSOH.Item     = pidItem
		set objSOH.Storage  = pidStorage
		set newFile = $$$YES
	}
	
	; Update the Qty on hand
	;      if new Qty On Hand = 0 Delete Object +else+ Save Object
	set objSOH.QtyOnHand = objSOH.QtyOnHand + pfltQtyMoved
	set sc = ##class(alSOH.dStockBalance).ChangeQuantity(pidItem,pidStorage.Location,pfltQtyMoved) //SR15653
	if $$$ISOK(sc) {
		if objSOH.QtyOnHand=0 {
			if 'newFile {
				 set sc = ##class(alSOH.dSOH).%DeleteId(objSOH.%Id())
			}
		} else {
			set sc = objSOH.%Save()
		}
	}
	do objSOH.%Close()

	if $$$ISERR(sc) {
		set sc = $system.Status.AppendStatus(($$$ERROR($$$GeneralError,"Error changing qty on alSOH.dSOH")),sc)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetSOH">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidStorage:alLOC.dStorage</FormalSpec>
<ReturnType>alSOH.dSOH</ReturnType>
<Implementation><![CDATA[
	set objStkBundle = ##class(alSOH.dSOH).%OpenId(pidItem.%Id()_"||"_ pidStorage.%Id() )
	
	if objStkBundle = "" {
		set objStkBundle = ##class(alSOH.dSOH).%New()
		set objStkBundle.Item      = pidItem
		set objStkBundle.Storage   = pidStorage
		set objStkBundle.QtyOnHand = 0
		
		set strStatus = objStkBundle.%Save()
	}
	quit objStkBundle
]]></Implementation>
</Method>

<Parameter name="DEFAULTCONCURRENCY">
<Default>0</Default>
</Parameter>

<UDLText name="T">
<Content>
//SR17611

</Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^alSOH.dSOHD</DataLocation>
<DefaultData>dSOHDefaultData</DefaultData>
<IdLocation>^alSOH.dSOHD</IdLocation>
<IndexLocation>^alSOH.dSOHI</IndexLocation>
<StreamLocation>^alSOH.dSOHS</StreamLocation>
<Data name="dSOHDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>QtyOnHand</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>