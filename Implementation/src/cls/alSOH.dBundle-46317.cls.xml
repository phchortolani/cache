<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSOH.dBundle">
<Description><![CDATA[
An Item based on a collection of defined attributes
This could be Lot or Effect Date on any other attribute including combinations.]]></Description>
<ClassType>persistent</ClassType>
<Super>%Persistent</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; History: 
; 09-Apr-2009	PPP		SR16469: Changed LotNumber &amp; UseByDate to be calculated fields with data
; 						populated from Bundle Attributes (used in queries &amp; views)
; 30-Apr-2008	HQN		SR15667: Changed CreationDate to a TimeStamp so PickSequence
; 						on dBundle can be  accurate
; 24-Apr-2008	GRF		SR15660: add HashKeyIndex
; 25-Jan-2008	Lb		SR15626 Change relationships and some types to reflect design  
;---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Parameter name="IDENTIFIEDBY">
<Description><![CDATA[
The <var>IDENTIFIEDBY</var> parameter can optionally be set to the name 
of a required property whose type is a reference to another class (not a literal). 
This property's IDKEY is then used as the prefix for the IDKEY of this class.]]></Description>
<Default>ItemPolicy</Default>
</Parameter>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Property name="Item">
<Type>alINV.dItem</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00014"/>
</Property>


<Property name="HashKey">
<Type>alSYS.dt.dtString</Type>

<Parameter name="CAPTION" value="AL00013"/>

<Parameter name="MAXLEN" value="2000"/>
</Property>


<Property name="BatchNumber">
<Type>alSYS.dt.dtString</Type>

<Parameter name="CAPTION" value="AL00010"/>
</Property>


<Property name="AvgCost">
<Description><![CDATA[
Historical Average Cost when bundle generated]]></Description>
<Type>alSYS.dt.dtCurrency</Type>

<Parameter name="CAPTION" value="AL00009"/>
</Property>

<UDLText name="T">
<Content>
// Property LotNumber As alSYS.dt.dtString(CAPTION = "AL00016");

</Content>
</UDLText>

<UDLText name="T">
<Content>
// Property LotNumber As alSYS.dt.dtString(CAPTION = "AL00016") [ Calculated, SqlComputeCode = { Set {LotNumber}=##class(alSOH.dBundle).GetLotNumber({ID})}, SqlComputed ];

</Content>
</UDLText>


<Property name="LotNumber">
<Type>alSYS.dt.dtString</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {LotNumber}=##class(alSOH.dBundle).GetProperty({ID},"Lot Number")</SqlComputeCode>
<SqlComputed>1</SqlComputed>

<Parameter name="CAPTION" value="AL00016"/>
</Property>

<UDLText name="T">
<Content>
// SR17266

</Content>
</UDLText>


<Property name="CreationDate">
<Type>alSYS.dt.dtTimeStamp</Type>
<InitialExpression>$zdatetime($horolog,3)</InitialExpression>

<Parameter name="CAPTION" value="AL00011"/>
</Property>

<UDLText name="T">
<Content>
// Property UseByDate As alSYS.dt.dtDate(CAPTION = "AL00017");

</Content>
</UDLText>

<UDLText name="T">
<Content>
// Property UseByDate As alSYS.dt.dtDate(CAPTION = "AL00017") [ Calculated, SqlComputeCode = { Set {UseByDate}=##class(alSOH.dBundle).GetUseByDate({ID})}, SqlComputed ];

</Content>
</UDLText>


<Property name="UseByDate">
<Type>alSYS.dt.dtDate</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {UseByDate}=##class(alSOH.dBundle).GetProperty({ID},"Use By Date")</SqlComputeCode>
<SqlComputed>1</SqlComputed>

<Parameter name="CAPTION" value="AL00017"/>
</Property>

<UDLText name="T">
<Content>
// SR17266

</Content>
</UDLText>


<Property name="Visible">
<Type>alSYS.dt.dtBoolean</Type>

<Parameter name="CAPTION" value="AL00018"/>
</Property>

<UDLText name="T">
<Content>
// Property Description As alSYS.dt.dtString(CAPTION = "AL00012") [ Calculated, SqlComputeCode = { Set {Description}=##class(alSOH.dBundle).GetBundleDescription({ID})}, SqlComputed ];

</Content>
</UDLText>


<Property name="Description">
<Type>alSYS.dt.dtString</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {Description}=##class(alSOH.dBundle).GetProperty({ID},"Description")</SqlComputeCode>
<SqlComputed>1</SqlComputed>

<Parameter name="CAPTION" value="AL00012"/>
</Property>


<Property name="Brand">
<Type>alSYS.dt.dtString</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {Brand}=##class(alSOH.dBundle).GetProperty({ID},"Brand")</SqlComputeCode>
<SqlComputed>1</SqlComputed>

<Parameter name="CAPTION" value="AL00321"/>
</Property>


<Property name="Owner">
<Type>alSYS.dt.dtString</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {Owner}=##class(alSOH.dBundle).GetProperty({ID},"Owner")</SqlComputeCode>
<SqlComputed>1</SqlComputed>

<Parameter name="CAPTION" value="AL00322"/>
</Property>


<Property name="Program">
<Type>alSYS.dt.dtString</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {Program}=##class(alSOH.dBundle).GetProperty({ID},"Program")</SqlComputeCode>
<SqlComputed>1</SqlComputed>

<Parameter name="CAPTION" value="AL00323"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Property name="ItemPolicy">
<Type>alINV.dItemPolicy</Type>
<Cardinality>one</Cardinality>
<Inverse>Bundles</Inverse>
<Relationship>1</Relationship>

<Parameter name="CAPTION" value="AL00015"/>
</Property>


<Property name="Attributes">
<Type>alSOH.dBundleAttribute</Type>
<Cardinality>children</Cardinality>
<Inverse>Bundle</Inverse>
<Relationship>1</Relationship>

<Parameter name="CAPTION" value="AL00008"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<UDLText name="T">
<Content>
// Index SortKey On (Item, SortKey) [ Unique ];

</Content>
</UDLText>

<UDLText name="T">
<Content>
// Index IDKEY On Item [ PrimaryKey, Unique ];

</Content>
</UDLText>

<Index name="HashKeyIndex">
<Properties>HashKey</Properties>
</Index>

<Index name="ItemPolicyIndex">
<Properties>ItemPolicy</Properties>
</Index>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="%ValidateObject">
<Description><![CDATA[
This method performs automatic validation of an object's attribute values. 
It is called by <METHOD>%Save</METHOD> before persistent objects are stored to the database.
<p><METHOD>%ValidateObject</METHOD> does the following:
<ol>
<li>It tests if any required property values are missing.</li>
<li>If specified (if the <i>PROPERTYVALIDATION</i> class parameter is set to <i>ValidateOnSave</i>), 
it tests property validation.</li>
<li>If present, it will call a user-supplied <METHOD>%OnValidateObject</METHOD> method.</li>
</ol>

<p>If any of these tests fail, <METHOD>%ValidateObject</METHOD> immediately returns an error value. 
<METHOD>%Save</METHOD> (if it is the caller of <METHOD>%ValidateObject</METHOD>) will stop its operation, 
rollback any transactions it has started, and also return.

<p>Returns a <CLASS>%Status</CLASS> value indicating success or failure.]]></Description>
<FormalSpec>force:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 10-Feb-2009	HQN		SR16323: Utilise new Method GetBundleHash
	; 06-Jan-2008	HQN		SR16268: Handle new validation rules associated with a 
	; 							dPolicyAttribute
	;-------------------------------------------------------------------------------
	set sc=$$$OK
	
	for loopAttributes=1:1:%this.Attributes.Count() {
		set objAttribute = %this.Attributes.GetAt(loopAttributes)
		set loopPolicyAttribute = %this.ItemPolicy.Attributes.FindObjectId(%this.ItemPolicy.%Id()_"||"_objAttribute.AttributeName)
		if ('%this.ItemPolicy.Attributes.GetAt(loopPolicyAttribute).ValidateBundleAttribute(objAttribute)) {
			set sc = $$$ERR("PolicyAttribute Validation failed :"_objAttribute.AttributeName)
		}
		quit:$$$ISERR(sc) 					// SR16268
	}
	
	if $$$ISOK(sc) && ((i%HashKey)="") { 	// SR16268
		set i%HashKey = ..GetBundleHash()
	}
	quit sc
]]></Implementation>
</Method>

<Method name="DescriptionGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the Description of the Bundle based on the Item Policy settings
	;
	; History:
	; 10-Sep-2008	PP		SR15885: Created
	;-------------------------------------------------------------------------------
	set pidKey = ""
	set strAttributeValues = ""
	for {
		set objAttribute = %this.Attributes.GetNext(.pidKey)
		quit:(pidKey = "")
		
		set pidPolicyAttribute = %this.ItemPolicy.Attributes.FindObjectId(%this.ItemPolicy.%Id()_"||"_objAttribute.AttributeName)
		set:(pidPolicyAttribute '= "") objPolicyAttribute = %this.ItemPolicy.Attributes.GetAt(pidPolicyAttribute)
		continue:(objAttribute.AttributeName="ReceiptNo")
				
		if ($data(objPolicyAttribute)) && (objPolicyAttribute.Attribute.DataType = "%Date") {
			set strAttributeValues = strAttributeValues_objAttribute.AttributeName_":"_$$^WWWDATE($piece(objAttribute.AttributeValue,".",1))_" "
		} else {
			set strAttributeValues = strAttributeValues_objAttribute.AttributeName_":"_objAttribute.AttributeValue_" "
		}
	}
	//set strAttributeValues = strAttributeValues
	
	quit strAttributeValues
]]></Implementation>
</Method>

<Method name="LotNumberGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the LotNumber of the Bundle based on the Item Policy settings
	; if it exists
	;
	; History:
	; 15-Jun-2009 	PPP 	SR16510: Use GetValue Method
	; 09-Apr-2009	PPP		SR16469: Created
	;-------------------------------------------------------------------------------
	quit ..GetValue("Lot Number")
]]></Implementation>
</Method>

<Method name="UseByDateGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the LotNumber of the Bundle based on the Item Policy settings
	; if it exists
	;
	; History:
	; 15-Jun-2009 	PPP 	SR16510: Use GetValue Method
	; 09-Apr-2009	PPP		SR16469: Created
	;-------------------------------------------------------------------------------

	quit ..GetValue("Use By Date")
]]></Implementation>
</Method>

<Method name="BrandGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the Brand of the Bundle based on the Item Policy settings
	; if it exists
	;
	; History:
	; 15-Jun-2009 	PPP 	SR16510: Use GetValue Method
	;-------------------------------------------------------------------------------

	quit ..GetValue("Brand")
]]></Implementation>
</Method>

<Method name="OwnerGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the Owner of the Bundle based on the Item Policy settings
	; if it exists
	;
	; History:
	; 15-Jun-2009 	PPP 	SR16510: Use GetValue Method
	;-------------------------------------------------------------------------------

	quit ..GetValue("Owner")
]]></Implementation>
</Method>

<Method name="ProgramGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the Program of the Bundle based on the Item Policy settings
	; if it exists
	;
	; History:
	; 15-Jun-2009 	PPP 	SR16510: Use GetValue Method
	;-------------------------------------------------------------------------------

	quit ..GetValue("Program")
]]></Implementation>
</Method>

<Method name="GetValue">
<FormalSpec>pstrAttributeName:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtString</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get the Attribute Value based on the Item Policy settings
	; if it exists
	;
	; History:
	; 15-Jun-2009 	PPP 	SR16510: Created
	;-------------------------------------------------------------------------------
	set pidKey = ""
	set strAttributeValue = ""
	for {
		set objAttribute = %this.Attributes.GetNext(.pidKey)
		quit:(pidKey = "")
		
		set pidPolicyAttribute = %this.ItemPolicy.Attributes.FindObjectId(%this.ItemPolicy.%Id()_"||"_objAttribute.AttributeName)
		set:(pidPolicyAttribute '= "") objPolicyAttribute = %this.ItemPolicy.Attributes.GetAt(pidPolicyAttribute)
		continue:(objAttribute.AttributeName="ReceiptNo")
				
		if ($data(objPolicyAttribute)) && (objAttribute.AttributeName = pstrAttributeName) {
			set strAttributeValue = objAttribute.AttributeValue
		}
	}
	
	quit strAttributeValue
]]></Implementation>
</Method>

<Method name="GetAttributes">
<FormalSpec>*parrArributes:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get the Attribute Values 
	;
	; History:
	; 26-Sep-2013	SCR		CORE-266:Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	kill parrArributes
	set pidKey = ""
	for {
		set objAttribute = %this.Attributes.GetNext(.pidKey)
		quit:(pidKey = "")
		set parrArributes(objAttribute.AttributeName) = objAttribute.AttributeValue
	}	
	quit sc
]]></Implementation>
</Method>

<Method name="GetDefaultBundle">
<ClassMethod>1</ClassMethod>
<FormalSpec>objBundle:alSOH.dBundle</FormalSpec>
<ReturnType>alSOH.dBundle</ReturnType>
<Implementation><![CDATA[
	set hashmap = ##class(%Library.ArrayOfDataTypes).%New()
	do hashmap.SetAt(objBundle.Attributes.GetAt(objBundle.Attributes.FindObjectId(objBundle.%Id()_"||ReceiveDate")).AttributeValue, "ReceiveDate")
	do hashmap.SetAt("0", "ReceiptNo")
	quit ##class(alSOH.iSOH).GetBundle(objBundle.Item.%Id(),hashmap)
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*************	MADE REDUNDANT WITH THE GetProperty method *********
ClassMethod GetBundleDescription(pidBundle) As %String
{
	set strDescription = "&quot;
	set objBundle = ##class(alSOH.dBundle).%OpenId(pidBundle, 0)
	if objBundle '= $$$NULLOREF {
		set strDescription = objBundle.Description
	}
	
	quit strDescription
}

ClassMethod GetLotNumber(pidBundle) As %String
{
	set strDescription = "&quot;
	set objBundle = ##class(alSOH.dBundle).%OpenId(pidBundle, 0)
	if objBundle '= $$$NULLOREF {
		set strDescription = objBundle.LotNumber
	}
	
	quit strDescription
}

ClassMethod GetUseByDate(pidBundle) As %String
{
	set strDescription = "&quot;
	set objBundle = ##class(alSOH.dBundle).%OpenId(pidBundle, 0)
	if objBundle '= $$$NULLOREF {
		set strDescription = objBundle.UseByDate
	}
	
	quit strDescription
}
 *************************************************************/
</Content>
</UDLText>


<Method name="GetProperty">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidBundle,pstrAttribute</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Use this method to call the Get of the property (Generic)
	;
	; History:
	; 10-Apr-2010	shobby	SR17266: Rewrote.  This was very slow.
	; 15-Jun-2009 	PPP 	SR16510: Used in the property definition above which
	;						makes the GetLotNumber, GetUseByDate methods redundant
	;						The other properties Owner, Program, Brand also use this
	;-------------------------------------------------------------------------------
	;SR17266 set strDescription = ""
	;SR17266 set objBundle = ##class(alSOH.dBundle).%OpenId(pidBundle, 0)
	;SR17266 if objBundle '= $$$NULLOREF {
	;SR17266 	set strDescription = $zobjmethod(objBundle,pstrProperty_"Get")
	;SR17266 }

	;SR17266 quit strDescription

	set strValue=""
	
	if (pidBundle'="") {     ; Get the Use by date for the bundle
		&sql(select AttributeValue into :strValue
		     from alSOH.dBundleAttribute
		     where Bundle=:pidBundle            and
		           AttributeName=:pstrAttribute
		)
	}
	quit strValue
]]></Implementation>
</Method>

<Method name="GetBundleHash">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Calculates the hash based on the current attribtues
	; 
	; History:
	; 09-Feb-2009	HQN		SR16323: Created
	;-------------------------------------------------------------------------------
	set objHashTable = ##class(%Library.ArrayOfDataTypes).%New()
	for loopAttributes=1:1:%this.Attributes.Count() {
		set objAttribute = %this.Attributes.GetAt(loopAttributes)
		do objHashTable.SetAt(objAttribute.AttributeValue, objAttribute.AttributeName)
	}
	quit ##class(alINV.dItemPolicy).GenerateBundleHash(%this.Item,objHashTable)
]]></Implementation>
</Method>

<Method name="IsInProgram">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alSYS.dt.dtString,pidProgram:alSYS.dt.dtString</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Determines if the specified item has bundles of the specified program
	; 
	; Called By: INARTCallbackHandler
	; 
	; History:
	; 25-Nov-2009	shobby	SR17034: Created
	;-------------------------------------------------------------------------------
	set intCount = 0
	set SQLCODE  = 0
	
	&sql( SELECT TOP 1 count(ID) into :intCount
	      FROM alSOH.dBundle
	      where Item=:pidItem AND Program=:pidProgram
	)   ; SR17034
	quit intCount
]]></Implementation>
</Method>

<Method name="GetBundleIDforHashKey">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrHash:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtString</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get the Bundle ID given a Hash Key
	;
	; ByRef :
	; 	
	; Returns: %Float
	;
	; History:
	; 17-Oct-2013	shobby		CORE-287: Moved from alSOH.iBundle
	;-------------------------------------------------------------------------------
	set idBundle = ""

	&sql(
		SELECT %ID
		INTO :idBundle
		FROM alSOH.dBundle
		WHERE HashKey = :pstrHash
	)
	quit idBundle
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("Bundles")</DataLocation>
<DefaultData>dBundleDefaultData</DefaultData>
<IdLocation>^alINV.dItemPolicyC("Bundles")</IdLocation>
<IndexLocation>^alSOH.dBundleI</IndexLocation>
<StreamLocation>^alSOH.dBundleS</StreamLocation>
<Data name="dBundleDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>AvgCost</Value>
</Value>
<Value name="3">
<Value>BatchNumber</Value>
</Value>
<Value name="4">
<Value>CreationDate</Value>
</Value>
<Value name="5">
<Value>HashKey</Value>
</Value>
<Value name="6">
<Value>Item</Value>
</Value>
<Value name="7">
<Value>LotNumber</Value>
</Value>
<Value name="8">
<Value>UseByDate</Value>
</Value>
<Value name="9">
<Value>Visible</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>