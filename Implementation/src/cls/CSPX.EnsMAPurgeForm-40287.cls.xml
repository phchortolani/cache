<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsMAPurgeForm">
<Description><![CDATA[
A simple login AutoForm class...]]></Description>
<ClassType/>
<IncludeCode>Ensemble,%syPidtab</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject,%CSP.Util.AutoForm</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Property name="NumberDaysToKeep">
<Description><![CDATA[
Purge except this number of days]]></Description>
<Type>%Integer</Type>
<InitialExpression>7</InitialExpression>
</Property>


<Property name="BodiesToo">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>


<Property name="KeepIntegrity">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>


<Parameter name="RefreshRate">
<Description><![CDATA[
Default refresh rate in seconds]]></Description>
<Default>4</Default>
</Parameter>


<Method name="CreateInstance">
<Description><![CDATA[
Event Log Max Number to Delete]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;pID:%String</FormalSpec>
<ReturnType>%CSP.Util.AutoForm</ReturnType>
<Implementation><![CDATA[
	Set tObj = ..%New()
	Set tObj.NumberDaysToKeep = $G(%session.Data("Purge","NumberDaysToKeep"),7)
	Set tObj.BodiesToo = $G(%session.Data("Purge","BodiesToo"),0)
	Set tObj.KeepIntegrity = $G(%session.Data("Purge","KeepIntegrity"),1)
	
	Quit tObj
]]></Implementation>
</Method>

<Method name="OnSubmit">
<FormalSpec>&amp;pID:%String,pSubmit:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // pID contains $ID values from URL
    If (pSubmit = "$AUTOFORM_PURGE") {
        // Save NumberDaysToKeep,BodiesToo values
   		Set %session.Data("Purge","NumberDaysToKeep") = ..NumberDaysToKeep
   		Set %session.Data("Purge","BodiesToo") = ..BodiesToo
   		Set %session.Data("Purge","KeepIntegrity") = ..KeepIntegrity
   		
		Kill ^EnsPortal("MAPurge")
		Set ^EnsPortal("MAPurge","launchstatus")="X"
		Job ClassMethod^%apiOBJ(..%ClassName(1),"BackgroundPurge",..NumberDaysToKeep,..KeepIntegrity,..BodiesToo)::5
		If $test {
	   		Set ^EnsPortal("MAPurge","launchstatus")="J"_$ZChild
	   		Hang 0.1
		} Else {
	   		Set ^EnsPortal("MAPurge","launchstatus")=0
		}
    }   
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnDefineButtons">
<Description><![CDATA[
define standard Login buttons]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;pButtons:%CSP.Util.FormButton</FormalSpec>
<Implementation><![CDATA[
	Set pButtons(1) = ##class(%CSP.Util.FormButton).%New()
	Set pButtons(1).Name = "$AUTOFORM_PURGE"
	Set pButtons(1).Caption = $$$Text("Start Purge")
]]></Implementation>
</Method>

<Method name="DrawHTMLForm">
<Description><![CDATA[
Draw an HTML form for this form object.<BR>
<var>pObj</var> is an instance of the form object that
provides the initial values for the form.<BR>
<var>pActionURL</var> is the URL to submit this form to.<BR>
<var>pButtons</var> is an array of submit buttons to display for the form. If 
not provided, the default <I>Save</I> and <I>Cancel</I> buttons are shown.
<var>pButtons</var> is an integer-subscripted array of <class>FormButton</class> objects.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pObj:%RegisteredObject,&amp;pID:%String,pActionURL:%String="&quot;,&amp;pButtons:%CSP.Util.FormButton,pTarget:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tClass=$$$CurrentClass
	// generate FORM/table headers
	&html<
	 <form action="#(pActionURL)#" method="POST" name="theForm" TARGET="#(pTarget)#">
	 <input type="HIDDEN" name="$CLASS" VALUE="#(tClass)#">
	 <input type="HIDDEN" name="$FRAME" VALUE="#(pTarget)#">
	 <input type="HIDDEN" name="CSPCHD" VALUE="#(%session.CSPSessionCookie)#">>

	 Set id = $O(pID(""))
	 While (id '= "") {
	 	&html<<input type="HIDDEN" name="$ID#(id)#" VALUE="#($ZCVT(pID(id),"O","HTML"))#">>
	 	Set id = $O(pID(id))
	 }

	 Set pObj.NumberDaysToKeep = $G(%session.Data("Purge","NumberDaysToKeep"),7)
	 Set pObj.BodiesToo = $G(%session.Data("Purge","BodiesToo"),0)
	 Set pObj.KeepIntegrity = $G(%session.Data("Purge","KeepIntegrity"),1)

	// do not create fields for ourself...
	 Do ##class(Ens.Purge).GetAllCounts(.count)

	 Set LogCount = count("Event Log")
	 Set MsgCount = count("Messages")
	 Set BPCount = count("Business Processes")
	 Set RuleCount = count("Business Rule Log")
	 Set IOLogCount = count("I/O Log")

	// Set tPane = ##class(%CSP.Util.Pane).%New()

	 Set tTypeOfRecord = $$$TextHTML("Type of Record")
	 Set tEventLog = $$$TextHTML("Event Log")
	 Set tCurrentCount = $$$TextHTML("Current Count")
	 Set tPurge = $$$TextHTML("Purge@Purge")
	 Set tRuleLog = $$$TextHTML("Business Rule Log")
	 Set tIOLog = $$$TextHTML("I/O Log")
	 Set tMsg = $$$TextHTML("Messages")
	 Set tIncBodies = $$$TextHTML("Include message bodies")
	 Set tBodies = $$$TextHTML("Message Bodies")
	 Set tBP = $$$TextHTML("Business Processes")
	 Set tNotPurge = $$$TextHTML("Do not purge most recent")
	 Set tDays = $$$TextHTML("days")
	 Set tPurged = $$$TextHTML("Purged")
	 Set tKeepIntegrity = $$$TextHTML("Keep data integrity")

	 &html<<table class='AutoForm'>>
	 &html<<tr class='AutoFormCaption'><th valign='center' nowrap>#(tTypeOfRecord)#</th><th nowrap>#(tCurrentCount)#</th></tr>>

	 &html<<tr><td class='AutoFormCaption' nowrap>#(tEventLog)#</td><td class='AutoFormControl' align='center'>#(LogCount)#</td></tr>>
	 &html<<tr><td class='AutoFormCaption' nowrap>#(tMsg)#</td><td class='AutoFormControl' align='center'>#(MsgCount)#</td></td></tr>>
	 &html<<tr><td class='AutoFormCaption' nowrap>&nbsp;#(tBP)#</td><td class='AutoFormControl' align='center'>#(BPCount)#</td></tr>>
	 &html<<tr><td class='AutoFormCaption' nowrap>&nbsp;#(tRuleLog)#</td><td class='AutoFormControl' align='center'>#(RuleCount)#</td></tr>>
	 &html<<tr><td class='AutoFormCaption' nowrap>#(tIOLog)#</td><td class='AutoFormControl' align='center'>#(IOLogCount)#</td></tr>>

	 &html<<tr><td colspan='3'><hr></td></tr>>
	 &html<<tr><td class='AutoFormCaption' nowrap>#(tIncBodies)#</td><td class='AutoFormControl' align='center'><input type='checkbox' name='BodiesToo'#($S('pObj.BodiesToo:"",1:" CHECKED"))# id='cb_BodiesToo' title="Also purge MessageBodies"></td></tr>>
	 &html<<tr><td class='AutoFormCaption' nowrap>#(tKeepIntegrity)#</td><td class='AutoFormControl' align='center'><input type='checkbox' name='KeepIntegrity'#($S('pObj.KeepIntegrity:"",1:" CHECKED"))# id='cb_KeepIntegrity' title="Only purge data that are of completed status"></td></tr>>
	 &html<<tr><td class='AutoFormCaption' nowrap>&nbsp;#(tNotPurge)#</td><td class='AutoFormControl' align='center'><input type='text' size='2' name='NumberDaysToKeep' value='#(pObj.NumberDaysToKeep)#'> #(tDays)#</td></tr>>

	// now generate HTML for all of our properties
	//Set sc = ##class(CSPX.EnsPurgeAutoFormGenerator).GenerateHTMLForm(%class.Name,%code)
	//If ($$$ISERR(sc)) {
	//	Quit sc
	//}
	 &html<<tr><td class="AutoFormLabel">&nbsp;</td>>
	 &html<<td class="AutoFormButton">>
	
	// test for user-provided buttons method
	If $$$comMemberKeyGet($$$CurrentClass,$$$cCLASSmethod,"OnDefineButtons",$$$cMETHrunnable) {
		 If ('$D(pButtons)) {
		 	Do ..OnDefineButtons(.pButtons)
		 }
	}
	
	// write purge result
	Set tButton=1
	If '$D(^EnsPortal("MAPurge")) {
		Do ..DrawFormButtons(.pButtons)
	} Else {
		If (""=$G(^EnsPortal("MAPurge","finished"))) {
			&html<<table border=1 cellspacing=0 cellpadding=2>>
			If (0=$G(^EnsPortal("MAPurge","launchstatus"))) {
				&html<<tr><td bgcolor=red>Background purge job failed to launch</td></tr>>
			} Else {
				Set tJob=$G(^EnsPortal("MAPurge","job"))
				If ""=tJob {
					&html<<tr><td bgcolor=orange>Background purge job #($G(^EnsPortal("MAPurge","launchstatus")))# is starting up</td></tr>>
					Set tButton=0
				} Else {
					Set tSlot=$ZU(67,3,tJob)
					#; JO2062 Change to use $$$JOBSRVTYPE/$$$CDIRECTSRV not 80 & 96
					If '((2=$ZU(61,0,tSlot))&&$Case($ZU(61,10,tSlot),$$$JOBSRVTYPE:0,$$$CDIRECTSRV:0,:1)) {
						&html<<tr><td bgcolor=red>Background purge job #(tJob)# (started #($$$timeUTCtoLocal($G(^EnsPortal("MAPurge","started"))))#) is dead</td></tr>>
					} Else {
						&html<<tr><td bgcolor=green colspan=2>Background purge job #(tJob)# is currently running (since #($$$timeUTCtoLocal($G(^EnsPortal("MAPurge","started"))))#)</td></tr>>
						&html<<tr><td nowrap>#(tIncBodies)#</td><td align=right>#($S($G(^EnsPortal("MAPurge","bodiesToo")):"yes",1:"no"))#</td></tr>>
						&html<<tr><td nowrap>#(tKeepIntegrity)#</td><td align=right>#($S($G(^EnsPortal("MAPurge","keepIntegrity")):"yes",1:"no"))#</td></tr>>
						&html<<tr><td nowrap>#(tNotPurge)#</td><td align=right>#($G(^EnsPortal("MAPurge","daysToKeep")))# #(tDays)#</td></tr>>
						Set tButton=0
					}
				}
			}
			&html<</table>>
			Do:tButton ..DrawFormButtons(.pButtons)
		} Else { ; finished
			Do ..DrawFormButtons(.pButtons)
		
			&html<</td></tr><tr><td colspan=3>>
			&html<<table border=1 cellspacing=0 cellpadding=2>>
			&html<<tr><th colspan=2>Report of last purge</th></tr>>
			set tStarted=$G(^EnsPortal("MAPurge","started"))
			set tFinished=$G(^EnsPortal("MAPurge","finished"))
			if tStarted'="" {
				&html<<tr><td class='AutoFormCaption'>Job Started on</td><td align='center'>#($$$timeUTCtoLocal(tStarted))#</td></tr>
					<tr><td class='AutoFormCaption'>Job Finished on</td><td align='center'>#($$$timeUTCtoLocal(tFinished))#</td></tr>>
			} else {
				&html<<tr><td class='AutoFormCaption'>Job Started on</td><td>&nbsp;</td></tr>
					<tr><td class='AutoFormCaption'>Job Finished on</td><td>&nbsp;</td></tr>>
			}
			&html<<tr><th colspan=2>Parameters</th></tr>
				<tr><td class='AutoFormCaption'>#(tIncBodies)#</td><td align=right>#($S($G(^EnsPortal("MAPurge","bodiesToo")):"yes",1:"no"))#</td></tr>
				<tr><td class='AutoFormCaption'>#(tKeepIntegrity)#</td><td align=right>#($S($G(^EnsPortal("MAPurge","keepIntegrity")):"yes",1:"no"))#</td></tr>
				<tr><td class='AutoFormCaption'>#(tNotPurge)#</td><td align=right>#($G(^EnsPortal("MAPurge","daysToKeep")))# #(tDays)#</td></tr>>
			Set status=$G(^EnsPortal("MAPurge","status"))
			&html<<tr><td colspan=2 align='center' #($S($$$ISERR(status):"bgcolor=orange",1:""))#>>
			Write $ZCVT($$$StatusDisplayString(status),"O","HTML")
			&html<</td></tr>>
	
			Set LogsDeleted = +$G(^EnsPortal("MAPurge","Deleted","Event Logs"))
			Set MsgsDeleted = +$G(^EnsPortal("MAPurge","Deleted","Ensemble Messages"))
			Set BodiesDeleted = +$G(^EnsPortal("MAPurge","Deleted","Message Bodies"))
			Set BPsDeleted = +$G(^EnsPortal("MAPurge","Deleted","Business Processes"))
			Set RulesDeleted = +$G(^EnsPortal("MAPurge","Deleted","Business Rule Logs"))
			Set IOLogsDeleted = +$G(^EnsPortal("MAPurge","Deleted","I/O Logs"))
	
		 	If ((""'=LogsDeleted)&&(""'=MsgsDeleted)&&(""'=BodiesDeleted)&&(""'=BPsDeleted)&&(""'=RulesDeleted)&&(""'=IOLogsDeleted)) {
		 		&html<<tr><td colspan="3"><div class="output"><table><tr><th colspan="2">#(tPurged)#</th></tr>>
		 		If ""'=LogsDeleted  &html<<tr><td nowrap>#(tEventLog)#</td><td align="right">#(LogsDeleted)#</td></tr>>
		 		If ""'=MsgsDeleted  &html<<tr><td nowrap>#(tMsg)#</td><td align="right">#(MsgsDeleted)#</td></tr>>
		 		If ""'=BodiesDeleted  &html<<tr><td nowrap>#(tBodies)#</td><td align="right">#(BodiesDeleted)#</td></tr>>
		 		If ""'=BPsDeleted   &html<<tr><td nowrap>#(tBP)#</td><td align="right">#(BPsDeleted)#</td></tr>>
		 		If ""'=RulesDeleted &html<<tr><td nowrap>#(tRuleLog)#</td><td align="right">#(RulesDeleted)#</td></tr>>
		 		If ""'=IOLogsDeleted  &html<<tr><td nowrap>#(tIOLog)#</td><td align="right">#(IOLogsDeleted)#</td></tr>>
		 		&html<</td></tr></table></div></td></tr>>
		 	}
		}
	}
	&html<</td></tr></table>>
	&html<</form>>

	// start auto-refresh
	If $G(%session.Data("Home","RefreshRate")) > 0 && 'tButton {
		Set rate = $G(%session.Data("Home","RefreshRate"),..#RefreshRate) * 1000
		&html<<script language="javascript">
		var timerID = self.setInterval("refreshTable()",#(rate)#);

		// call this to dynamically refresh 
		function refreshTable()
		{
			//if (timerID) {
				//self.clearTimeout(timerID);
				//self.clearInterval(timerID);
			//}
			self.document.location = '#(##class(%CSP.Page).Link("UtilEnsMAPurge.csp"))#';
		}
		</script>>
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="BackgroundPurge">
<ClassMethod>1</ClassMethod>
<FormalSpec>daysToKeep,keepIntegrity,bodiesToo</FormalSpec>
<Implementation><![CDATA[
	#include EnsUtil
	Set $ZT="Trap"
	Kill ^EnsPortal("MAPurge","launchstatus")
	If $D(^EnsPortal("MAPurge")) {
		Quit ; another job is running somewhere. Only run if launched. The launcher will clean dead jobs.
	}
	Set ^EnsPortal("MAPurge","started")=$$$timeUTC
	Set ^EnsPortal("MAPurge","job")=$Job
	Set ^EnsPortal("MAPurge","daysToKeep")=daysToKeep
	Set ^EnsPortal("MAPurge","keepIntegrity")=keepIntegrity
	Set ^EnsPortal("MAPurge","bodiesToo")=bodiesToo
	Set tSC = ##class(Ens.Purge).PurgeAll(.Deleted,daysToKeep,keepIntegrity,bodiesToo)
	Merge ^EnsPortal("MAPurge","Deleted")=Deleted
Exit
	Set ^EnsPortal("MAPurge","status")=tSC
	Set ^EnsPortal("MAPurge","finished")=$$$timeUTC
	Quit
Trap	
	Set $ZT=""
	Set tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>
</Class>
</Export>