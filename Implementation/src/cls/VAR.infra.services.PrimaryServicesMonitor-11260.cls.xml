<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.services.PrimaryServicesMonitor">
<ClassType/>
<Import>VAR.infra.cache,VAR.infra.log,VAR.infra.util,VAR.infra.services</Import>
<IncludeCode>VARLog,VARUtil</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Parameter name="WARNINGDAYS">
<Type>%Integer</Type>
<Default>15</Default>
</Parameter>

<Method name="InstallService">
<Description><![CDATA[Install the service

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	// A cada hora durante todo o dia
	set intHr = 0  // 0-23
	set intMin = 1 // 0-59
	set intStartTime = ((intHr * 60 * 60) + (intMin * 60))
	do ##class(Task).Insert($znspace, $znspace_" Primary Services Monitor",
		"do ##class("_..%ClassName(1)_").VerifyAndStartService()",0, 
		0, 1, "", 1, intStartTime, "", "PrimaryServices.log", .task, "1", 1)

	set blData = ##class(Library).InstallDataPrimaryServices()
	if ($$$ISERR(blData)) {
		$$$VARLOGERROR("Error saving data of Primary Services on User.VARServicesController")
	}]]></Implementation>
</Method>

<Method name="UninstallService">
<Description><![CDATA[Uninstall the service

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ..StopService()

	set blData = ##class(Library).UninstallDataPrimaryServices()
	if ($$$ISERR(blData)) {
		$$$VARLOGERROR("Error deleting data of Primary Services from User.VARServicesController")
	}

	do ##class(Task).Delete($znspace_" Primary Services Monitor")]]></Implementation>
</Method>

<Method name="VerifyAndStartService">
<Description><![CDATA[Verifies if the service is still running, 
if not it calls the Start() method.

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set primaryServices = ..%New()

	if ('primaryServices.IsRunning()) {
		do primaryServices.Start()
	}
	
	if (primaryServices.IsSuspended()) {
		do primaryServices.Resume()
	}]]></Implementation>
</Method>

<Method name="StopService">
<Description><![CDATA[Stop the service

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set primaryServices = ..%New()

	if (primaryServices.IsRunning()) {
		do primaryServices.Stop()
	}]]></Implementation>
</Method>

<Method name="RestartService">
<Description><![CDATA[Restart the service and wait until 

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VARLOGINFO("Restarting Primary Services...")

	do ..StopService()
	do ..VerifyAndStartService()]]></Implementation>
</Method>

<Method name="Start">
<Description><![CDATA[Start the service

Params:

Returns: status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if (..IsRunning()) quit $$$OK
	
	set $ecode = ""
	set $ztrap = ""

	try {
		do ##class(Logger).LogJobIdStart($job)
		$$$VARLOGINFO("Starting Primary Services Monitor")

		set ^VAR.infra.services.PrimaryServicesMonitor = 0

		job StartThread^VARRemote(..%ClassName(1))::20
	}
	catch erro {
		do ..Stop()
		$$$VARLOGERROR("Erro: "_erro.Message_" Codigo Erro: "_erro.Code)				
	}

	quit $$$OK]]></Implementation>
</Method>

<Method name="IsRunning">
<Description><![CDATA[Verify if the service is running.

Params:

Returns: yes / no]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set intJobId = +$get(^VAR.infra.services.PrimaryServicesMonitor)
	if (intJobId '= 0) {
		if ($SYSTEM.Version.GetNumber() >= 2008.1) {
			set objProcess = ##class(%SYS.ProcessQuery).%OpenId(intJobId)
		}
		else {
			set objProcess = ##class(%SYSTEM.Process).%OpenId(intJobId)
		}

		if ($isObject(objProcess)) quit 1
	}

	quit 0]]></Implementation>
</Method>

<Method name="Resume">
<Description><![CDATA[Resume the service

Params:

Returns: status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if ('..IsSuspended()) quit $$$OK
	
	set $ecode = ""
	set $ztrap = ""

	try {
		$$$VARLOGINFO("Primary Services Monitor had been suspended")
		do ##class(Task).Resume($znspace_" Primary Services Monitor")

	}
	catch erro {
	}

	quit $$$OK]]></Implementation>
</Method>

<Method name="IsSuspended">
<Description><![CDATA[Verify if the service is suspended.

Params:

Returns: yes / no]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set task = ##class(%SYSTEM.Task).OpenId($znspace_" Primary Services Monitor")
	if ('$isObject(task)) quit 0
	
	if (+task.Suspended '= 0) quit 1
	
	quit 0]]></Implementation>
</Method>

<Method name="Stop">
<Description><![CDATA[Stop the service

Params:

Returns: status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	try {
		$$$VARLOGINFO("Stopping Primary Service Monitor")
	}
	catch {
	}
	
	try {
		set ^VAR.infra.services.PrimaryServicesMonitor = 0
	}
	catch {
	}

	try {
		set objExePrim = ##class(Helper).%New()
		do objExePrim.StopServicesByFrequency(objExePrim.%GetParameter("SERVICESPERMINUTE"))
		do objExePrim.StopServicesByFrequency(objExePrim.%GetParameter("SERVICESPERHOUR"))
	}
	catch {
	}

	try {		
		do ##class(VAR.infra.services.Util).DeletePidFile("PrimaryServices.pid")
	}
	catch {
	}

	quit $$$OK]]></Implementation>
</Method>

<Method name="StartThread">
<Description><![CDATA[Executes the code for license logging.

Params:

Returns:]]></Description>
<Implementation><![CDATA[	// Controle para iniciar somente em um servidor de aplicação no ambiente de produção
	if ((##class(VAR.infra.util.Util).GetComputerName() '= "SVWDASA01") 
		&& (##class(VAR.infra.util.Util).GetComputerName() '= "SVWDASA03")) {
		quit
	}

	set ^VAR.infra.services.PrimaryServicesMonitor = $job
	do ##class(VAR.infra.services.Util).CreatePidFile("PrimaryServices.pid", $job)
	
	set countMin = ##class(Helper).%GetParameter("MINUTE")
	set countHr  = ##class(Helper).%GetParameter("HOUR")

	set objExePrim = ##class(Helper).%New()
	while (^VAR.infra.services.PrimaryServicesMonitor) {
		if ($$isExplicitLicenseUserIdentification^COMSTARTZstart()) {
			if ('$$allocServiceLicense^COMSTARTZstart("SERVICES")){
				hang 1
				continue
			}
		}
		
		// Every minute
		if (countMin = ##class(Helper).%GetParameter("MINUTE")) {
			do objExePrim.RunServicesByFrequency(objExePrim.%GetParameter("SERVICESPERMINUTE"))
			set countMin = 0
		}

		// Every hour
		if (countHr = ##class(Helper).%GetParameter("HOUR")) {
			do objExePrim.RunServicesByFrequency(objExePrim.%GetParameter("SERVICESPERHOUR"))
			set countHr = 0
		}

		set countMin = countMin + 1
		set countHr  = countHr  + 1

		hang 1
	}]]></Implementation>
</Method>
</Class>
</Export>