<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSOH.dUSourcingPolicy">
<Description><![CDATA[
Interim Item Policy based on @NM INItemPolicy]]></Description>
<ClassType>persistent</ClassType>
<IncludeCode>INConst,COMSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>User.INItemPolicy</Super>

<Method name="ConvertOnSave">
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Called By: %OnAfterSave - 
	;
	; History
	; 09=)ct-2013	SCR		CORE-266: Added Optional Flag
	; 15-Jan-2010	GRF		Use loop rather than i
	; 26-Nov-2009	PPP		SR17059: When updating the Sourcing Attribute was not
	; 							cleared - corrected
	; 14-Jul-2009	PPP		SR16721: Optional policy definitions
	; 15-Jun-2009 	PPP 	SR16510: Created
	;-------------------------------------------------------------------------------
	set sc    = $$$OK
	set objV1 = ##class(alSOH.dUSourcingPolicy).%OpenId("0||"_pKey,0,.sc)	
	
	if objV1 '= $$$NULLOREF {
		set objSourcingPolicy = ##class(alSOH.dSourcingPolicy).GetPolicyByKey(pKey)
		
		if objSourcingPolicy = $$$NULLOREF {
			set objSourcingPolicy  	= ##class(alSOH.dSourcingPolicy).%New() 
		}
		
		if objSourcingPolicy '= $$$NULLOREF {
			set objSourcingPolicy.SourceAttribute = ""     //SR17059
			set objSourcingPolicy.KeyName         = pKey
			set objSourcingPolicy.Description     = objV1.Description
			
			set blnIsLotUnique = +objV1.IsLotUnique
			set blnIsLotReq    = +objV1.LotNumber
			set blnIsExpiryReq = +objV1.ExpiryDate
			set intBrandReq    = +objV1.Brand              //SR16721
			set intProgReq     = +objV1.Program1
			set intOwnerReq    = +objV1.Owner
			set blnIsDefault   = +objV1.DefaultPolicy
			set idPickMethod   =  objV1.PickingMethod
			
			//NEED TO CLEAR ALL ATTRIBUTE ENTRIES BEFORE SETTING THEM AGAIN
			//MAY NEED TO CHECK WHAT IS AVAILABLE AND IF ANYTHING HAS CHANGED BEFORE CLEARING
			
			//Remove all Policy Attributes that relate to this Policy
			for loop=objSourcingPolicy.Attributes.Count():-1:1 {
				set sc = objSourcingPolicy.Attributes.GetAt(loop).%Delete(objSourcingPolicy.Attributes.GetAt(loop).%Oid())
				quit:$$$ISERR(sc)
				
				do objSourcingPolicy.Attributes.RemoveAt(loop)
			}
			
			//Reset all the attributes based on the definition
			if $$$ISOK(sc) {
	// Lot Number	
				if blnIsLotReq {
					if ##class(alINV.dAttribute).%ExistsId("Lot Number") {
						set objLotNum = ##class(alINV.dAttribute).%OpenId("Lot Number")
					} else {
						set objLotNum = ##class(alINV.dAttribute).%New()
						set objLotNum.DataType  = "%String"
						set objLotNum.Name      = "Lot Number"
						set objLotNum.SortOrder = 1
					}

					if $IsObject(objLotNum) {
						set objPolAttLot = ##class(alINV.dPolicyAttribute).%New()	
						set objPolAttLot.ItemPolicy = objSourcingPolicy
						set objPolAttLot.Attribute  = objLotNum

						if blnIsLotUnique {
							set objPolAttLot.IsUnique  = $$$YES	
						}
					}
				}
				
	// Expiry Date - Use By Date
				if blnIsExpiryReq {
					if ##class(alINV.dAttribute).%ExistsId("Use By Date") {
						set objUseByDate = ##class(alINV.dAttribute).%OpenId("Use By Date")
					} else {
						set objUseByDate = ##class(alINV.dAttribute).%New()
						set objUseByDate.DataType  = "%Date"
						set objUseByDate.Name      = "Use By Date"
						set objUseByDate.SortOrder = 1
					}

					if $IsObject(objUseByDate) {
						set objSourcingPolicy.SourceAttribute = objUseByDate
	
						set objPolAttUBD = ##class(alINV.dPolicyAttribute).%New()	
						set objPolAttUBD.ItemPolicy = objSourcingPolicy
						set objPolAttUBD.Attribute  = objUseByDate
					}
				}
				
	// Brand            //SR16721
				if (intBrandReq = 1) || (intBrandReq = 3) {
					if ##class(alINV.dAttribute).%ExistsId("Brand") {
						set objBrand = ##class(alINV.dAttribute).%OpenId("Brand")
					} else {
						set objBrand = ##class(alINV.dAttribute).%New()
						set objBrand.DataType  = "%String"
						set objBrand.Name      = "Brand"
						set objBrand.SortOrder = 1
					}

					if $IsObject(objBrand) {
						set objPolAttBrd = ##class(alINV.dPolicyAttribute).%New()	
						set objPolAttBrd.ItemPolicy = objSourcingPolicy
						set objPolAttBrd.Attribute  = objBrand
						if (intBrandReq = 3) {
							set objPolAttBrd.Optional = $$$YES
						}
					}
				}
				
	// Program          //SR16721
				if (intProgReq = 1) || (intProgReq = 3) {
					if ##class(alINV.dAttribute).%ExistsId("Program") {
						set objProg = ##class(alINV.dAttribute).%OpenId("Program")
					} else {
						set objProg = ##class(alINV.dAttribute).%New()
						set objProg.DataType  = "%String"
						set objProg.Name      = "Program"
						set objProg.SortOrder = 1
					}

					if $IsObject(objProg) {
						set objPolAttPrg = ##class(alINV.dPolicyAttribute).%New()	
						set objPolAttPrg.ItemPolicy = objSourcingPolicy
						set objPolAttPrg.Attribute  = objProg
						if (intProgReq = 3) {
							set objPolAttPrg.Optional = $$$YES
						}
					}
				}
				
	// Owner            //SR16721
				if (intOwnerReq = 1) || (intOwnerReq = 3) {
					if ##class(alINV.dAttribute).%ExistsId("Owner") {
						set objOwner = ##class(alINV.dAttribute).%OpenId("Owner")
					} else {
						set objOwner = ##class(alINV.dAttribute).%New()
						set objOwner.DataType  = "%String"
						set objOwner.Name      = "Owner"
						set objOwner.SortOrder = 1
					}
					if $IsObject(objOwner) {
						set objPolAttOwn = ##class(alINV.dPolicyAttribute).%New()	
						set objPolAttOwn.ItemPolicy = objSourcingPolicy
						set objPolAttOwn.Attribute  = objOwner
						if (intOwnerReq = 3) {
							set objPolAttOwn.Optional = $$$YES
						}
					}
				}
				
				if blnIsDefault {
					set objSourcingPolicy.IsDefault = $$$YES			
				}

				set objSourcingPolicy.SourceType = $case(idPickMethod,
															1:"FIFO",
															2:"LIFO",
															3:"FEFO",
															:"Storage")
				set sc = objSourcingPolicy.%Save()

				do objSourcingPolicy.%Close()
			}
		} //End objSourcingPolicy
	}	//End objV1
	quit sc
]]></Implementation>
</Method>

<Method name="ConvertOnDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Called when the @NM INItemPolicy is deleted
	;
	;
	;
	; History
	; 15-Jun-2009 	PPP 	SR16510: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK

	set objV1 = ##class(alSOH.dUSourcingPolicy).%OpenId("0||"_pKey,0,.sc)	
	
	if objV1 '= $$$NULLOREF {
		set objPolicy = ##class(alSOH.dSourcingPolicy).GetPolicyByKey(pKey)

		if objPolicy '= $$$NULLOREF {
			set sc =##class(alSOH.dSourcingPolicy).%DeleteId(objPolicy.%Id())
		}
   
   	} else {
		set strMessage = $$$Text($listbuild("alINV0007",pKey))
		set sc = $$$ERROR($$$GeneralError,strMessage)   
   	} ; "Can not delete Item Policy (%1).  Please review the validity of the data."
	quit sc
]]></Implementation>
</Method>

<Method name="UpdatePolicyKeyName">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Called By: COMPIT - 	to ensure that the new field 'KeyName' on d ItemPolicy is
	;						populated
	;
	;
	;
	; History
	; 15-Jun-2009 	PPP 	SR16510: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK

	;+++++++++++++++++++++++++++++++++++++++
	TSTART
	;+++++++++++++++++++++++++++++++++++++++

	do ##class(alINV.dItemPolicy).%PurgeIndices()
	do ##class(alINV.dItemPolicy).%BuildIndices()

	set objResultSet = ##class(%Library.ResultSet).%New()
	
	if objResultSet.Prepare("SELECT ID FROM alINV.dItemPolicy") {
		if objResultSet.Execute() {

			while objResultSet.Next() {
				set idPolicy = objResultSet.Data("ID")
				//write !,idPolicy

				set objPolicy = ##class(alINV.dItemPolicy).%OpenId(idPolicy)
				set objPolicy.KeyName = idPolicy
				set sc = objPolicy.%Save()

				quit:$$$ISERR(sc)
				//do objPolicy.%Close()
			}
		}
	}

	;+++++++++++++++++++++++++++++++++++++++
	if $$$ISOK(sc) {
		if $TLEVEL>0 TCOMMIT
	} else {
		TROLLBACK
	}
	;+++++++++++++++++++++++++++++++++++++++
	
	quit sc
]]></Implementation>
</Method>

<Method name="InSyncPolicies">
<ClassMethod>1</ClassMethod>
<FormalSpec>pblnFix:alSYS.dt.dtBoolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Method to check if the policies are in Sync between V1 & V2 data
	;
	; Parameters : Pass 1 - to Fix any errors reported at the same time
	;
	; Returns: None
	;
	; History
	; 25-Nov-2009 	PPP 	SR17059: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK

	;+++++++++++++++++++++++++++++++++++++++
	TSTART
	;+++++++++++++++++++++++++++++++++++++++
	
	set idPolicyKey = ""
	for {
		set idPolicyKey = $order(^INItemPolicy(0,idPolicyKey))
		quit:idPolicyKey=""
		
		set blnError     = $$$NO
		set objPolicy    = $get(^INItemPolicy(0,idPolicyKey,1))

		set blnUseByDate = +$$$INItemPolicyExpiryDate(objPolicy)
		set blnLotNo     = +$$$INItemPolicyLotNumber(objPolicy)
		set blnLotUnique = +$$$INItemPolicyIsLotUnique(objPolicy)
		set intBrand     = +$$$INItemPolicyBrand(objPolicy)       		//(can be 1-Yes, 2-No, 3-Optional)
		set intOwner     = +$$$INItemPolicyOwner(objPolicy)
		set intProgram   = +$$$INItemPolicyProgram1(objPolicy)

		if blnLotNo  {
			set arrAttributes("Lot Number") = ""
		}
		if blnUseByDate {
			set arrAttributes("Use By Date") = ""
		}

		if (intBrand=1)   || (intBrand=3) {
			set arrAttributes("Brand") = ""
		}
		if (intOwner=1)   || (intOwner=3) {
			set arrAttributes("Owner") = ""
		}
		if (intProgram=1) || (intProgram=3) {
			set arrAttributes("Program") = ""
		}
		
		write !,"Policy : ",idPolicyKey
		
		set objSourcingPolicy = ##class(alSOH.dSourcingPolicy).GetPolicyByKey(idPolicyKey)
		set sc = ##class(alSOH.iBundle).GetAttributesForPolicy(objSourcingPolicy.%Id(), .arrReqAttributes)
		
		if $$$ISOK(sc) {  	//if attributes match with required Get the Bundle
			if ##class(alSOH.iBundle).VerifyAttributes(.arrAttributes,.arrReqAttributes)'=$$$YES {
				set blnError = $$$YES
				write !,"  Attribute Mismatch for Policy Key : "_idPolicyKey
			}
		}
		
		set idPickMethod = $case($$$INItemPolicyPickingMethod(objPolicy),
															1:"FIFO",
															2:"LIFO",
															3:"FEFO",
															:"Storage")		
		
		if objSourcingPolicy.SourceType '= idPickMethod {
			set blnError = $$$YES
			write !,"  SourceType Mismatch for Policy Key : "_idPolicyKey_" "_objSourcingPolicy.SourceType_"/"_idPickMethod
		}

		if objSourcingPolicy.IsDefault '= +$$$INItemPolicyDefaultPolicy(objPolicy) {
			set blnError = $$$YES
			write !,"  Default Policy Mismatch for Policy Key : "_idPolicyKey
		}
	
	
		//Fix the Error	
		if blnError {
			if pblnFix {
				write !,"  *** Re-Converting Policy Key"
				set sc = ..ConvertOnSave(idPolicyKey)
				write ", Status :",sc
			}
		} else {
			write " Ok"
		}
	}
	
	;+++++++++++++++++++++++++++++++++++++++
	if $$$ISOK(sc) {
		if $TLEVEL>0 TCOMMIT
	} else {
		TROLLBACK
	}
	;+++++++++++++++++++++++++++++++++++++++
	
	quit sc
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>