<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alTFR.dUTransfer">
<ClassType>persistent</ClassType>
<IncludeCode>INConst,WWWConst</IncludeCode>
<Super>User.INTFR</Super>

<Property name="Dispatch">
<Description><![CDATA[
Dispatch]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="Dispatch"/>

<Parameter name="MAXLEN" value="30"/>
</Property>

<UDLText name="T">
<Content>/* SR15660 */
</Content>
</UDLText>


<Property name="TfrLines">
<Description><![CDATA[
Pseudo relation to Implement better object relations under a @nM enviroment<br>
The Transient swizzled Pseudo object property to represent TfrLines, the 
relationship between Tfr and TfrLine (head and lines)  ]]></Description>
<Type>alTFR.dUTransferLine</Type>
<Collection>list</Collection>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00445"/>
</Property>


<Property name="ReceivingLocation">
<Description><![CDATA[
Receiving Location]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="Receiving Location"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="SendingLocation">
<Description><![CDATA[
Sending Location]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="Sending Location"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="TransferNumber">
<Description><![CDATA[
Transfer Number]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="Transfer Number"/>

<Parameter name="COLLATION" value="EXACT"/>

<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<UDLText name="T">
<Content>/* SR17638 Moved Query GetTfrLines to alTFR.dUTransferLine */
</Content>
</UDLText>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="Issue">
<Description><![CDATA[
Bundle
Pseudo relation. <br>
This is an over-ride of the getter to create the relationship between the Header 
and its lines <p>
This query is automatically called when you call the <code>TransferLines</code> 
 Params:<br>
 
 Returns: <br>
 	<class>%ListOfObjects</class>
Use in the Pseudo relation between the Transfer header and its lines. <br>
It is run when the property TfrLines is called.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 29-Oct-2008	HQN		SR15862: Created
	;-------------------------------------------------------------------------------
	;set sc = %this.IsIssuable()
	set sc = $$$OK
	if $$$ISOK(sc) set sc = %this.%UpgradeConcurrency(4)
	if $$$ISOK(sc) {
		tstart
		if %this.%ValidateObject {
			for loopLines=1:1:%this.TfrLines.Count() {
				set scChild = %this.TfrLines.GetAt(loopLines).Issue()
				set sc = $$$ADDSC(scChild,sc)
				quit:$$$ISERR(sc)
			}
		}
		if $$$ISERR(sc) {
			trollback
		} else {
			tcommit:$tlevel>0
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="Ship">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Processes a dPlannedMovement to indicate that this Transfer has impacted SOH
	; from this storage to INTRANSIT, Only does V2 side of processing, V1 handled
	; via INTRNShip.mac
	; 
	; Return:
	; 	sc indicating success or error
	; 	
	; History:
	; 22-Sep-2008	HQN		SR15862: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	;set sc = %this.IsShipable()
	; for each line, attempt to ship them
	for loopLines=1:1:%this.TfrLines.Count() {
		set childSc = %this.TfrLines.GetAt(loopLines).Ship()
		if $$$ISERR(childSc) set sc = $$$ADDSC(sc,childSc)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="%OnOpen">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Open</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being opened.

<P>If this method returns an error then the object will not be opened.]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 21-Dec-2010	shobby	SR17638: Query has moved to dUTransferLine
	; 29-Oct-2008	HQN	Upgraded to take into account sql errors
	;-------------------------------------------------------------------------------
	set objResultSet = ##class(%Library.ResultSet).%New("alTFR.dUTransferLine:GetTfrLines")  //SR17638
	set sc = objResultSet.Execute(%this.TransferNumber) 
	if $$$ISOK(sc) {
		while objResultSet.Next(.sc) {
			do %this.TfrLines.InsertObjectId(objResultSet.Data("ID"))
		}
	}		
	quit sc
]]></Implementation>
</Method>

<Method name="CreateFromReq">
<ClassMethod>1</ClassMethod>
<FormalSpec>objUReq:alREQ.dUReq</FormalSpec>
<ReturnType>alTFR.dUTransfer</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 10-Apr-2014	SCR		SESDF-995: The Transfer Report is not carrying the NOTE field.
	; 10-Jan-2014	shobby	HEVA-1349: FREE1 has become RequisitionNumber
    ; 24-Oct-2013	SCR		SESDF-669: set Created Date & Time
	; 22-Aug-2012	shobby	SR18086: Fixes a due date problem at the requisition when creating a transfer
	; 31-Mar-2011	shobby	SR17692: With the 'Shipped' field not set, the @netManager
	;							index would become corrupt on save where the null value
	;							was changed to be -100000000000000.  (1E14 %BuildIndices)
	; 23-Sep-2010	shobby	SR17485: Only create lines if they haven't already been closed.
	; 25-Feb-2010	GRF		SR17034: Faulty if test corrected - missing parentheses;
	; 							logic inverted so no longer needs else & empty if.
	; 09-Dec-2009	shobby	SR17034: Program1
	; 08-Jan-2009	HQN		Created
	;-------------------------------------------------------------------------------
	set objUTransfer = ""
	;if (objUReq.Status.StatusCode = 8 || objUReq.Status.StatusCode = 9) {  ; SR17034
	;} else {
	if (objUReq.Status.StatusCode '= 8) && (objUReq.Status.StatusCode '= 9) {
		set objUTransfer = ##class(alTFR.dUTransfer).%New()
		set strFormName  = $get(%("%KEY","YFORM"))
		set %("%KEY","YFORM") = "INIssue"
		set objUTransfer.TransferNumber = $$^WWWNEXT("INTFR")
		set %("%KEY","YFORM") = strFormName
		if (objUReq.DueDate < $h) {				;SR18086
     		set objUReq.DueDate = +$h			;SR18086
 		}										;SR18086
	
		set objUTransfer.Company           = objUReq.Company
		set objUTransfer.DueDate           = objUReq.DueDate
		set objUTransfer.SendingLocation   = objUReq.FromLocn
		set objUTransfer.ReceivingLocation = objUReq.ToLocn
		set objUTransfer.FREE4			   = objUReq.FREE11
		set objUTransfer.Dispatch		   = ##class(alTFR.dUTransfer).GetDefaultDispatch(objUReq.FromLocn,objUReq.ToLocn) ; Get Default INTransitLocn
		set objUTransfer.TransferType      = "Remote"
		set objUTransfer.Status            = 0                  ; Created
		set objUTransfer.TransferDate      = +$horolog
		set objUTransfer.Program1          = objUReq.Program1   ; SR17034
		set objUTransfer.Shipped		   = ""					; SR17692
		set objUTransfer.RequisitionNumber = objUReq.ReqNum		; HEVA-1349
		set objUTransfer.CreatedBy		   = $get(%request.Data("YBED",1))
		set objUTransfer.CreatedDate       = $horolog
		
		; Create Lines
		for loopReqLines=1:1:objUReq.ReqLines.Count() {
			if 'objUReq.ReqLines.GetAt(loopReqLines).IsClosed() { ;SR17485
				set objUTFRLine = ##class(alTFR.dUTransferLine).CreateFromReqLine(objUReq.ReqLines.GetAt(loopReqLines))
				if objUTFRLine '= $$$NULLOREF {
					set objUTFRLine.TransferNumber = objUTransfer.TransferNumber
					do objUTransfer.TfrLines.Insert(objUTFRLine)
					set objUTFRLine.TransferLineNumber = objUTransfer.TfrLines.Count()
					
					if (+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(0,0,1)))) {
						set objUTFRLine.FREE5 = $$^WWWTR(0,4,##class(alSOH.iSOH).GetQtyAvailable(objUTFRLine.Item,objUTransfer.SendingLocation,"",$$$YES))
						set objUTFRLine.FREE6 = $$^WWWTR(0,4,##class(alSOH.iSOH).GetQtyAvailable(objUTFRLine.Item,"","",$$$YES))
					}
				}
			}
		}
	}
	quit objUTransfer
]]></Implementation>
</Method>

<Method name="GetDefaultDispatch">
<ClassMethod>1</ClassMethod>
<FormalSpec>objFromLocn:alLOC.dULocation,objToLocn:alLOC.dULocation</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; For the get the default INDRPUMLKW record associated for the Transfer from 
	; idFromLocn to idToLocn
	; 
	; History:
	; 22-Jul-2014	shobby	RVCONTAGEM-9: Return id rather than object.
	; 03-Dec-2013	SCR		SESDF-655: Use To Location if going from a non lotcontrolled location to a lot controlled location
	; 19-Jan-2009	HQN		SR16373: Correctly use company 0 instead of YM
	; 09-Jan-2009	HQN		Created
	;-------------------------------------------------------------------------------
	set idDispatch = ""
	; Check INDRPUMTVOR before INDRPUMLKW
	if $data(^INDRPUMTVOR(0,objFromLocn.Location,objToLocn.Location)) {
		set idDispatch = $$$INDRPUMTVORDispatchType($get(^INDRPUMTVOR(0,objFromLocn.Location,objToLocn.Location,1)))
	} else {
		set objVORG			= $get(^INVORG(0,0,1))
		set idDispatcCalc	= $$$INVORGDefaultDispatch(objVORG)
		if idDispatcCalc=1 {
			set idLoc	= objToLocn.Location
		} else {
			set idLoc	= objFromLocn.Location
		}
		; Special Non Lot to Lot tranfer test, always use Sending Loc
		if $$OnlyTrackPrograms^INBundleUtils(objFromLocn.Location) &&
				'$$OnlyTrackPrograms^INBundleUtils(objToLocn.Location) {
			set idLoc	= objFromLocn.Location
		}
		set idDispatch = $order(^INDRPUMLKWs(0,1,idLoc,""))
	}
	;RVCONTAGEM-9 set objDispatch = ##class(alTFR.dUINDRPUMLKW).%OpenId("0||"_idDispatch,,.sc)
	;RVCONTAGEM-9 quit objDispatch
	quit idDispatch
]]></Implementation>
</Method>

<Method name="ReceivingLocationSet">
<FormalSpec>ReceivingLocn</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 14-Jan-2009	HQN		SR16296: Created
	;-------------------------------------------------------------------------------
	if $IsObject(ReceivingLocn) && ReceivingLocn.%Extends("alLOC.dULocation") {
		set i%ReceivingLocation = ReceivingLocn.Location
	} else {
		set i%ReceivingLocation = ReceivingLocn
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SendingLocationSet">
<FormalSpec>SendingLocn</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 14-Jan-2009	HQN		SR16296: Created
	;-------------------------------------------------------------------------------
	if $IsObject(SendingLocn) && SendingLocn.%Extends("alLOC.dULocation") {
		set i%SendingLocation = SendingLocn.Location
	} else {
		set i%SendingLocation = SendingLocn
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DispatchSet">
<FormalSpec>Dispatch</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 14-Jan-2009	HQN		SR16296: Created
	;-------------------------------------------------------------------------------
	if $IsObject(Dispatch) && Dispatch.%Extends("alTFR.dUINDRPUMLKW") {
		set i%Dispatch = Dispatch.ModeOfShipment
	} else {
		set i%Dispatch = Dispatch
	}
	quit $$$OK
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>

<Property name="Company"/>

<Property name="CreatedBy"/>

<Property name="CreatedDate"/>

<Property name="DeliveryListPrinted"/>

<Property name="Dispatch"/>

<Property name="DueDate"/>

<Property name="FREE1"/>

<Property name="FREE10"/>

<Property name="FREE11"/>

<Property name="FREE12"/>

<Property name="FREE13"/>

<Property name="FREE14"/>

<Property name="FREE15"/>

<Property name="FREE2"/>

<Property name="FREE3"/>

<Property name="FREE4"/>

<Property name="FREE5"/>

<Property name="FREE6"/>

<Property name="FREE7"/>

<Property name="FREE8"/>

<Property name="FREE9"/>

<Property name="Firmed"/>

<Property name="LoadListPrinted"/>

<Property name="PickListPrinted"/>

<Property name="ProcessedBy"/>

<Property name="ProcessedDate"/>

<Property name="Program1"/>

<Property name="ReceiptNumber"/>

<Property name="Received"/>

<Property name="ReceivingLocation"/>

<Property name="ReceivingLocnName"/>

<Property name="ReversalStatus"/>

<Property name="SendingLocation"/>

<Property name="SendingLocnName"/>

<Property name="Shipped"/>

<Property name="Status"/>

<Property name="Tour"/>

<Property name="TourDate"/>

<Property name="TransferDate"/>

<Property name="TransferNumber"/>

<Property name="TransferType"/>
</Storage>
</Class>
</Export>