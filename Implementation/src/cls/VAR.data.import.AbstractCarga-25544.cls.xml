<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.data.import.AbstractCarga">
<ClassType/>
<Import>VAR.infra.util</Import>
<IncludeCode>COMSYS,VARLog,VARUtil</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Property name="separador">
<Type>%String</Type>
<InitialExpression>";"</InitialExpression>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ignorarPrimeiraLinha">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="imprimirAndamento">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="quebraLinha">
<Type>%String</Type>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="arquivo">
<Private>1</Private>
</Property>

<Property name="arquivoAnterior">
<Private>1</Private>
</Property>

<Method name="importar">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCaminhoArquivo:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	do ..loginAlphalinc("0", "CARGADEDADOS", "")

	write !, "zimportarTxn^"_..%ClassName(1)_".1("""_pstrCaminhoArquivo_""")"
	set strStatus = $$Transaction^COMTransaction(
		"zimportarTxn^"_..%ClassName(1)_".1("""_pstrCaminhoArquivo_""")",
		$$$NO)]]></Implementation>
</Method>

<Method name="loginAlphalinc">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompany:%String,pstrLogin:%String,pstrSenha:%String</FormalSpec>
<Implementation><![CDATA[	set %("%KEY", "YM") = pstrCompany
	set %("%KEY", "YBED") = pstrLogin
	set %("%KEY", "YPWD") = pstrSenha

	$$$VAR]]></Implementation>
</Method>

<Method name="importarTxn">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCaminhoArquivo:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set obj = ..%New()
	set strStatus = obj.importarEProcessar(pstrCaminhoArquivo)
	kill obj

	quit strStatus]]></Implementation>
</Method>

<Method name="%OnNew">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if (##class(Util).IsWindows()) {
		set ..quebraLinha = $char(13)_$char(10)
	}
	else {
		set ..quebraLinha = $char(10)
	}

	quit $$$OK]]></Implementation>
</Method>

<Method name="importarEProcessar">
<FormalSpec>pstrCaminhoArquivo:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set pstrCaminhoArquivo = ##class(DirectoryFile).FixPathSymbol(
		pstrCaminhoArquivo)
	if ($length(pstrCaminhoArquivo) = 0) {
		quit $$$VARLOGSCRERRSTATUS($$$CUSTOMERROR("Nenhum arquivo informado!"))
	}
	if ('##class(DirectoryFile).Exists(pstrCaminhoArquivo)) {
		quit $$$VARLOGSCRERRSTATUS($$$CUSTOMERROR("Arquivo '"_pstrCaminhoArquivo_"' não existe!"))
	}

	$$$VARLOGSCRINFO("Abrindo arquivo '"_pstrCaminhoArquivo_"' ...")
	set ..arquivo = pstrCaminhoArquivo
	open pstrCaminhoArquivo:("RS"::):30
	if ('$test) {
		quit $$$VARLOGSCRERRSTATUS($$$CUSTOMERROR("Erro ao abrir arquivo '"_pstrCaminhoArquivo_"'"))
	}

	set $ztrap = "exceptionImpProc"
	set strStatus = $$$OK

	set ..arquivoAnterior = $io
	$$$VARLOGSCRINFO("Lendo arquivo ...")
	write !!
	use ..arquivo

	set intRegistros = 0
	set intErros = 0
	set strGlobalErrorName = "^CacheTempCargaErros("""_$znspace_""","""_..%ClassName(1)_""")"
	kill @strGlobalErrorName

	while (1) {
		read strLinha#10000:30
		set intRegistros = $increment(intRegistros)
		if ('$test) {
			set $ecode = "Erro ao ler no arquivo '"_pstrCaminhoArquivo_"', "_
				"linha #"_intRegistros
		}
		if (..ignorarPrimeiraLinha && (intRegistros = 1)) continue
		if ($length(strLinha) = 0) continue

		set strStatus = ..processar(intRegistros, strLinha)
		if ($$$ISERR(strStatus)) {
			set @strGlobalErrorName@(intRegistros) =
				$zstrip($extract(strStatus, 2, $length(strStatus)), "<>W")
			set intErros = $increment(intErros)
		}

		use ..arquivoAnterior
		if (..imprimirAndamento) {
			write $char(13)_"Processando linha #"_intRegistros_" "_
				"(pressione 'Ctrl + A' para abortar)"
		}
		hang 0.01
		read tecla#1:0.01
		if ($test) {
			write ..quebraLinha_"'Ctrl + A' pressionado. Deseja abortar? "_
				"(S/N) "
			read tecla#1:10
			if ($test && (##class(Strings).UpperCase(tecla) = "S")) {
				write ..quebraLinha
				set $ecode = "Operação abortada pelo usuário na linha #"_
					intRegistros
			}
			else {
				write ..quebraLinha_..quebraLinha
			}
		}
		use ..arquivo
	}

	if ($length(..arquivo) > 0) {
		close ..arquivo
		set ..arquivo = ""
		use ..arquivoAnterior
	}

finallyImpProc
	if ($$$ISOK(strStatus)) {
		write !, "Processamento concluído com sucesso!"
	}
	else {
		write !, "Erro no processamento: "_##class(Util).GetErrors(strStatus)
	}
	write !, "Total de linhas processadas: "_intRegistros
	write !, "Linhas que geraram erro de processamento: "_intErros
	write !, "Os erros podem ser visualizados em "_strGlobalErrorName

	quit strStatus

exceptionImpProc
 	set $ztrap = ""
	if ($extract($zerror, 1, $length("<ENDOFFILE>")) = "<ENDOFFILE>") {
		set strStatus = $$$OK
	}
	elseif ($extract($zerror, 1, $length("<ECODETRAP>")) = "<ECODETRAP>") {
		set strStatus = $$$CUSTOMERROR($ecode)
		set $ecode = ""
	}
	else {
		set strStatus = $$$CUSTOMERROR($zerror)
	}

	if ($length(..arquivo) > 0) {
		close ..arquivo
		use ..arquivoAnterior
	}

	if ($$$ISERR(strStatus)) {
		$$$VARLOGSCRERROR(##class(Util).GetErrors(strStatus, 0))
	}

	goto finallyImpProc]]></Implementation>
</Method>

<Method name="processar">
<Abstract>1</Abstract>
<FormalSpec>pintRegistros:%Integer,pstrLinha:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	ztrap "ERRO"]]></Implementation>
</Method>

<Method name="getCampo">
<FormalSpec>pstrLinha:%String,pintPosicao:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set strCampo = $piece(pstrLinha, ..separador, pintPosicao)
	set strCampo = $zstrip(strCampo, "<>W")

	quit strCampo]]></Implementation>
</Method>

<Method name="imprimir">
<FormalSpec>pstrTexto:%String</FormalSpec>
<Implementation><![CDATA[	use ..arquivoAnterior
	write pstrTexto
	use ..arquivo]]></Implementation>
</Method>
</Class>
</Export>