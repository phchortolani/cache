<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alWEB.WS.Utils.Disclinc.Package">
<Abstract>1</Abstract>
<UDLText name="T">
<Content>
//04-Nov-2010	shobby	SR16062:    Should be DEPRECATED when we move to ASDE

</Content>
</UDLText>

<UDLText name="T">
<Content>
//09-Jul-2009	shobby	SR16725:	Make this an Abstract class

</Content>
</UDLText>


<Method name="Export">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrPath:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Exports data/routines in to files.
	; 
	; Notes:
	; 	1. Hardcoded only for those relevant to alWEB
	;   2. List of namespaces currently to be kept in sync
	;   	DEV		(localhost)
	;   	DEV		(Orion)
	;   	UFH		(Alphalinc - at Trak)
	;   	UFHSUP	(Alphalinc - at Trak)
	;   	DEV1-54 (Codesplit)
	;   	UFH		(Tony)
	;   	UFH		(Andre??)
	; 
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 12-Feb-2009	SCR			SR16348: Added INART,INARTPACK,WWWFORM3,WWWFORMCOMMON
	; 10-Nov-2008	shobby		SR16062: Added application parameter
	; 23-Oct-2008	shobby		SR16062: Created
	;-------------------------------------------------------------------------------
	new (pstrPath)
	do ExportPackage^WWWCOFAExportAndImport("WWWDataEx",1,pstrPath_"\DataExchangeForm")
	do ExportPackage^WWWCOFAExportAndImport("WWWDataEx",2,pstrPath_"\DataExchangeClass")
	do ExportPackage^WWWCOFAExportAndImport("WWWWS",1,pstrPath_"\DataExchangeClientForm")
	do ExportPackage^WWWCOFAExportAndImport("WWWWS",2,pstrPath_"\DataExchangeClientClass")
	;do ExportPackage^WWWCOFAExportAndImport("INARTPACK",1,pstrPath_"\INARTPACKForm")
	;do ExportPackage^WWWCOFAExportAndImport("INARTPACK",2,pstrPath_"\INARTPACKClass")
	do ExportPackage^WWWCOFAExportAndImport("INART",1,pstrPath_"\InartForm")
	do ExportPackage^WWWCOFAExportAndImport("INART",2,pstrPath_"\InartClass")
	do ExportPackage^WWWCOFAExportAndImport("IN",5,pstrPath_"\INText")
	
	set VORG(1,1)="WWW101"
	set VORG(1,2)="WWW101"
	set VORG(1,3)=pstrPath_"\DataExchangeParameters"
	set VORG(1,8)="WWWDATAEXACTSA"
	do ExportApplicationParameters^WWWCOFAExportAndImport(1)
	
	set lstCode="INConst.INC,COMUtilStr.MAC,WWWWSClient.MAC,WWWDataExchangeQueue.MAC,WWWSYS.INC,WWWDataExPatch.MAC"
	set lstCode=lstCode_",WWWSETS.MAC,WWWSETK.MAC,WWWDataExMessage.MAC,WWWDataExMessageProp.MAC"
	set lstCode=lstCode_",WWWDataExchange.MAC,INWSConsumptionInterface.MAC"
	set lstCode=lstCode_",INART.MAC,INARTPACK.MAC,WWWFORM3.MAC,WWWFORMCOMMON.MAC,INUOMConversion.MAC"
	do $System.OBJ.Export(lstCode,pstrPath_"\DataExchangeRoutine")
	do $System.OBJ.ExportPackage("alWEB",pstrPath_"\alWEB")
	do $System.OBJ.ExportPackage("WSSample",pstrPath_"\WSSample")
	
	write !,!,!, " ******** Remember to patch in changes from SR16126"
	quit
]]></Implementation>
</Method>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrPath:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Imports data/routines in to the current namespace based on files generated by
	; the ExportPackage function.
	;
	; **** This must be called in the following manner to avoid scoping issues with the VORG variable
	; d ##class(alWEB.WS.Utils).ImportPackage("c:\temp",.VORG)
	; 
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 05-Feb-2009	shobby		SR16062: Put in Andreas' suggestion for copying classes.	
	; 31-Jan-2009	shobby		SR16062: Improved the logic for creating the User.zzPackage
	; 31-Jan-2009	shobby		SR16062: Don't proceed if any file is missing.
	; 10-Nov-2008	shobby		SR16062: Added application parameter
	; 10-Nov-2008	shobby		SR16062: Changed the routine to NOT ProcedureBlock
	; 23-Oct-2008	shobby		SR16062: Created.
	;-------------------------------------------------------------------------------
	#Include COMSYS
	new (pstrPath)		; This is deliberate!

	if ..%ClassName()'="zzPackage" {
	    if ##class(%Dictionary.ClassDefinition).%ExistsId("User.zzPackage") {
	        do ##class(%Dictionary.ClassDefinition).%DeleteId("User.zzPackage")
	    }
	    set y = ##class(%Dictionary.ClassDefinition).%OpenId("alWEB.WS.Utils.Disclinc.Package")
	    if (y '= "") {
	        set x = y.%ConstructClone()
	        do x.NameSet("User.zzPackage")
	        if (x.%Save()) {
	            do $System.OBJ.Compile("User.zzPackage")  // <--- NOT SURE IF THIS IS REQUIRED, I THINK NO
	            do ##class(User.zzPackage).Import(pstrPath)
	        }
	    }
	}
	
	;if ..%ClassName()'="zzPackage" {
	;	kill ^oddDEF("User.zzPackage")
	;	merge ^oddDEF("User.zzPackage")=^oddDEF("alWEB.WS.Utils.Disclinc.Package")
	;	set x=##class(%ClassDefinition).%OpenId("User.zzPackage")
	;	do x.%Save()
	;	do $System.OBJ.Compile("User.zzPackage")
	;	do ##class(User.zzPackage).Import(pstrPath)
	;	quit
	;}
	$$$VAR
	
	; TODO $$Save will call WWWDataExchange which may not be present.
	set strStatus=$$Save^COMUtils("COMConst","WWWDataEx","1~1",1)
	if $$$ISOK(strStatus) set strStatus=$$Save^COMUtils("COMConst","WWWWSClient","1~1",1)
	if $$$ISOK(strStatus) {
		do Generate^COMConst("WWW")
InartForm		
		set lstFiles1="DataExchangeClass;DataExchangeForm;DataExchangeClientClass;DataExchangeClientForm;DataExchangeParameters;InartClass;InartForm;INText"
		;set lstFiles1="DataExchangeClass;DataExchangeForm;DataExchangeClientClass;DataExchangeClientForm;DataExchangeParameters"
		set lstFiles2="DataExchangeRoutine;alWEB;WSSample"
		
		set lstFiles=lstFiles1_";"_lstFiles2
		for intLoop=1:1:$length(lstFiles,";") {
			if '##class(%Library.File).Exists(pstrPath_"\"_$piece(lstFiles,";",intLoop)) {
				set strStatus=$$$MakeStatus(" Import File '"_$piece(lstFiles,";",intLoop)_"' missing.")
			}
			quit:$$$ISERR(strStatus)
		}
	}
	if $$$ISOK(strStatus) {
		for intLoop=1:1:$length(lstFiles1,";") {
			set VORG(1,1)=pstrPath_"\"_$piece(lstFiles1,";",intLoop)
			set VORG(1,2)=1
			do Import^WWWCOFAExportAndImport(1,$$$NO)
		}
		do $System.OBJ.Load(pstrPath_"\DataExchangeRoutine","FRCK")
		do $System.OBJ.DeletePackage("alWEB")
		do $System.OBJ.Load(pstrPath_"\alWEB")
		do $System.OBJ.CompilePackage("alWEB","FRCK")
		do $System.OBJ.DeletePackage("WSSample")
		do $System.OBJ.Load(pstrPath_"\WSSample")
		do $System.OBJ.CompilePackage("WSSample","FRCK")
	
		do Run^WWWDataExPatch()
		write !,!,!, " ******** Remember to patch in changes from SR16126"
	} else {
		write strStatus
	}
	
	quit
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^alWEB.WS.Utils.Disc819.PackageD</DataLocation>
<DefaultData>PackageDefaultData</DefaultData>
<IdLocation>^alWEB.WS.Utils.Disc819.PackageD</IdLocation>
<IndexLocation>^alWEB.WS.Utils.Disc819.PackageI</IndexLocation>
<StreamLocation>^alWEB.WS.Utils.Disc819.PackageS</StreamLocation>
<Data name="PackageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>