<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.CSP.VARParametrosIntegracoes">
<ClassType/>
<IncludeCode>MEDConst,VARConst,INConst,WWWConst,FATConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page</Super>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	$$$VAR
	Set method = $get(%request.Data("method",1))
	Xecute "do .."_method_"()"
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetTabelaDePara">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 				= 0
	Set Y 				= "~"
	;
	Set YBED 				= $Get(%request.Data("YBED",1))
	Set pCliente 		= $Get(%request.Data("pCliente",1))
	Set pTipoTabela = $Get(%request.Data("pTipoTabela",1))
	;
	Set retorno = []
	Set meuSQL = "Select * From SQLUser.VARParametrosIntegracoesDePara "
	Set meuSQL = meuSQL _ "Where Company = 0 And Cliente = '"_pCliente_"' "
	Set meuSQL = meuSQL _ "And TipodeTabela = '"_pTipoTabela_"' "
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	While(rSet.%Next()){
		Set list = {}
		Set list.sequencia 		= rSet.%Get("Sequencia")
		Set list.de 					= rSet.%Get("De")
		Set list.para 				= rSet.%Get("Para")
		Set list.paraDesc 		= $$SQLGetDescricaoProduto^VARSQL(rSet.%Get("Para"),1)
		Set list.criadoPor 		= $$SQLGetUserName^VARSQL(rSet.%Get("CriadoPor"))
		Set list.criadoEm 		= $ZDateTime(rSet.%Get("CriadoEm"),4,2)
		Set list.alteradoPor 	= $Select(rSet.%Get("AlteradoPor")="":"",1:$$SQLGetUserName^VARSQL(rSet.%Get("AlteradoPor")))
		Set list.alteradoEm 	= $Select(rSet.%Get("AlteradoPor")="":"",1:$ZDateTime(rSet.%Get("AlteradoEm"),4,2))
		Do retorno.%Push(list)
	}	
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="ArmTabelaDePara">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCliente,pTipoTabela,pSequencia,pObjDados,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y	 		= "~"
	Set YBED 	= pYBED
	
	If (pSequencia = "") {
		Set pSequencia = $Order(^VARParametrosIntegracoesDePara(YM, pCliente, pTipoTabela, ""),-1) + 1 
	}
	
	Set objeto = $Get(^VARParametrosIntegracoesDePara(YM, pCliente, pTipoTabela, pSequencia, 1))
	
	Set index = "" 
	For {
		Set index = $Order(pObjDados(index)) 
		Quit:index=""

		Set campo = $Piece(pObjDados(index),"~",1)
		Set valor = $Piece(pObjDados(index),"~",2)
		
		Set:campo="de" $$$VARParametrosIntegracoesDeParaDe(objeto)	= valor
		Set:campo="para" $$$VARParametrosIntegracoesDeParaPara(objeto)	= valor

	}
	If ($$$VARParametrosIntegracoesDeParaCriadoEm(objeto) = "") {
		Set $$$VARParametrosIntegracoesDeParaCriadoEm(objeto) = $Horolog
		Set $$$VARParametrosIntegracoesDeParaCriadoPor(objeto) = YBED
	}Else{
		Set $$$VARParametrosIntegracoesDeParaAlteradoEm(objeto) = $Horolog
		Set $$$VARParametrosIntegracoesDeParaAlteradoPor(objeto) = YBED
	}

	Set status = $$$Save("VARParametrosIntegracoesDePara",pCliente_$$$COMMA_pTipoTabela_$$$COMMA_pSequencia,objeto,$$$YES)

	Return status]]></Implementation>
</Method>

<Method name="ExcTabelaDePara">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCliente,pTipoTabela,pSequencia,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y	 		= "~"
	Set YBED 	= pYBED
	
	Return $$$Kill("VARParametrosIntegracoesDePara",pCliente_$$$COMMA_pTipoTabela_$$$COMMA_pSequencia)]]></Implementation>
</Method>

<Method name="ArmDados">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 				= 0
	Set Y 				= "~"
	;
	Set YBED 												= $Get(%request.Data("YBED",1))
	Set pPreventCodConvenio  				= $Get(%request.Data("pPreventCodConvenio",1))
	Set pPreventCodPlanSaude 				= $Get(%request.Data("pPreventCodPlanSaude",1))
	Set pPreventModuloUpload				= $Get(%request.Data("pPreventModuloUpload",1))
	Set pMotionCodModulo 						= $Get(%request.Data("pMotionCodModulo",1))
	Set pMotionFinanceiroCodModulo 	= $Get(%request.Data("pMotionFinanceiroCodModulo",1))
	;
	Set strStatus = $$$OK
	Set erro 			= ""
	;
	Tstart
	Try{
		Set objVARParametrosIntegracoes = $Get(^VARParametrosIntegracoes(YM, "PREVENT", 1))
		If (
				($$$VARParametrosIntegracoesConvenio(objVARParametrosIntegracoes) '= pPreventCodConvenio) ||
			 	($$$VARParametrosIntegracoesPlanodeSaude(objVARParametrosIntegracoes) '= pPreventCodPlanSaude) ||
			 	($$$VARParametrosIntegracoesModuloUploadArquivo(objVARParametrosIntegracoes) '= pPreventModuloUpload)
		){ 
			Set $$$VARParametrosIntegracoesConvenio(objVARParametrosIntegracoes) = pPreventCodConvenio
			Set $$$VARParametrosIntegracoesPlanodeSaude(objVARParametrosIntegracoes) = pPreventCodPlanSaude
			Set $$$VARParametrosIntegracoesModuloUploadArquivo(objVARParametrosIntegracoes) = pPreventModuloUpload
			If ($$$VARParametrosIntegracoesCriadoEm(objVARParametrosIntegracoes) = "") {
				Set $$$VARParametrosIntegracoesCriadoEm(objVARParametrosIntegracoes) 	= $Horolog
				Set $$$VARParametrosIntegracoesCriadoPor(objVARParametrosIntegracoes) = YBED
			}Else{
				Set $$$VARParametrosIntegracoesAlteradoEm(objVARParametrosIntegracoes) 	= $Horolog
				Set $$$VARParametrosIntegracoesAlteradoPor(objVARParametrosIntegracoes) = YBED
			}
			Set strStatus = $$$Save("VARParametrosIntegracoes", "PREVENT", objVARParametrosIntegracoes, $$$YES)
		}	 
		If ($$$ISERR(strStatus)) {
			Set erro = strStatus
			Quit	
		}
		///Motion
		Set objVARParametrosIntegracoes = $Get(^VARParametrosIntegracoes(YM, "MOTION", 1))
		If ($$$VARParametrosIntegracoesModuloGeracaoArquivo(objVARParametrosIntegracoes) '= pMotionCodModulo){ 
			Set $$$VARParametrosIntegracoesModuloGeracaoArquivo(objVARParametrosIntegracoes) = pMotionCodModulo
			If ($$$VARParametrosIntegracoesCriadoEm(objVARParametrosIntegracoes) = "") {
				Set $$$VARParametrosIntegracoesCriadoEm(objVARParametrosIntegracoes) 	= $Horolog
				Set $$$VARParametrosIntegracoesCriadoPor(objVARParametrosIntegracoes) = YBED
			}Else{
				Set $$$VARParametrosIntegracoesAlteradoEm(objVARParametrosIntegracoes) 	= $Horolog
				Set $$$VARParametrosIntegracoesAlteradoPor(objVARParametrosIntegracoes) = YBED
			}
			Set strStatus = $$$Save("VARParametrosIntegracoes", "MOTION", objVARParametrosIntegracoes, $$$YES)
		}	 
		If ($$$ISERR(strStatus)) {
			Set erro = strStatus
			Quit	
		}		
		///Motion Financeiro
		Set objVARParametrosIntegracoes = $Get(^VARParametrosIntegracoes(YM, "MOTIONFINANCEIRO", 1))
		If ($$$VARParametrosIntegracoesModuloGeracaoArquivo(objVARParametrosIntegracoes) '= pMotionFinanceiroCodModulo){ 
			Set $$$VARParametrosIntegracoesModuloGeracaoArquivo(objVARParametrosIntegracoes) = pMotionFinanceiroCodModulo
			If ($$$VARParametrosIntegracoesCriadoEm(objVARParametrosIntegracoes) = "") {
				Set $$$VARParametrosIntegracoesCriadoEm(objVARParametrosIntegracoes) 	= $Horolog
				Set $$$VARParametrosIntegracoesCriadoPor(objVARParametrosIntegracoes) = YBED
			}Else{
				Set $$$VARParametrosIntegracoesAlteradoEm(objVARParametrosIntegracoes) 	= $Horolog
				Set $$$VARParametrosIntegracoesAlteradoPor(objVARParametrosIntegracoes) = YBED
			}
			Set strStatus = $$$Save("VARParametrosIntegracoes", "MOTIONFINANCEIRO", objVARParametrosIntegracoes, $$$YES)
		}	 
		If ($$$ISERR(strStatus)) {
			Set erro = strStatus
			Quit	
		}		
	}
	Catch(err){
		#dim err as %Exception.SystemException
		set strStatus = err.DisplayString()
		set erro			=	err
	}
	Set retorno = {}
	If 'erro{
		Tcommit
		Set retorno.status 		= strStatus
	}Else{
		Trollback
		Set retorno.status 		= strStatus
	}
 	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetDados">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y 		= "~"
	Set YBED 	= $Get(%request.Data("YBED",1))
	;
	Set listRetorno = {}
	;Prevent
	Set objeto = $Get(^VARParametrosIntegracoes(YM, "PREVENT", 1))
	Set listRetorno.preventCodConvenio 	= $$$VARParametrosIntegracoesConvenio(objeto)
	Set listRetorno.preventCodPlanSaude	= $$$VARParametrosIntegracoesPlanodeSaude(objeto)
	Set listRetorno.preventModuloUpload	= $$$VARParametrosIntegracoesModuloUploadArquivo(objeto)
	;Motion
	Set objeto = $Get(^VARParametrosIntegracoes(YM, "MOTION", 1))
	Set listRetorno.motionCodModulo 	= $$$VARParametrosIntegracoesModuloGeracaoArquivo(objeto)
	;Motion Financeiro
	Set objeto = $Get(^VARParametrosIntegracoes(YM, "MOTIONFINANCEIRO", 1))
	Set listRetorno.motionCodModuloFinanceiro 	= $$$VARParametrosIntegracoesModuloGeracaoArquivo(objeto)
	;
	Do listRetorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetArquivos">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 				= 0
	Set Y 				= "~"
	Set YBED 			= $Get(%request.Data("YBED",1))
	Set pCliente 	= $Get(%request.Data("pCliente",1))
	;
	Set retorno = []
	;
	Set nameSpaceAtual = $namespace
	Set nameSpaceIntegracao = "LEAN-PREV-INT"	;Definir o NameSpace da Integração
	Set $namespace = nameSpaceIntegracao
	;
	Set meuSQL = "Select * From Integracoes_agendamento_prevent_intermediaria.Arquivo "
	Set meuSQL = meuSQL _ "Order By dataHoraCriacao Desc"
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	While(rSet.%Next()){
		Set list = {}
		Set list.arquivo = rSet.%Get("id")
		Set list.dataHoraRecebimento = $ZDate($ZDateH($Piece(rSet.%Get("dataHoraCriacao")," ",1),3),4)_" "_$Piece(rSet.%Get("dataHoraCriacao")," ",2)
		Set list.fileName = $Piece($Piece(rSet.%Get("fileName"),"_",1),"/",$Length(rSet.%Get("fileName"),"/"))
		Do retorno.%Push(list)
	}
	;
	Set $namespace = nameSpaceAtual
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetSolicitacoes">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 				= 0
	Set Y 				= "~"
	Set YBED 			= $Get(%request.Data("YBED",1))
	Set pCliente 	= $Get(%request.Data("pCliente",1))
	Set pArquivo	=	$get(%request.Data("pArquivo",1))
	;
	Set retorno = []
	;
	Set nameSpaceAtual = $namespace
	Set nameSpaceIntegracao = "LEAN-PREV-INT"	;Definir o NameSpace da Integração
	Set $namespace = nameSpaceIntegracao
	;
	Set meuSQL = "Select * From Integracoes_agendamento_prevent_intermediaria.Solicitacao "
	Set meuSQL = meuSQL _ "Where Arquivo = '"_pArquivo_"'"
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	While(rSet.%Next()){
		Set tProcedimentos = ""
		Set meuSQLProc 	= "Select * From Integracoes_agendamento_prevent_intermediaria.SolicitacaoAmostraExame "
		Set meuSQLProc 	= meuSQLProc _ "Where Id  Like '"_rSet.%Get("id")_"||%'"
		Set rSetProc 		= ##class(%SQL.Statement).%ExecDirect("",meuSQLProc)
		While(rSetProc.%Next()){
			Set tProcedimentos = tProcedimentos_$Select(tProcedimentos="":"",1:"; ")_rSetProc.%Get("idLis")
		}
		Set list = {}
		Set list.solicitacao = rSet.%Get("id")
		Set list.codPaciente = rSet.%Get("codigoPacienteAlpha")
		Set list.codLis = rSet.%Get("todosCodigoLis")
		Set list.nome = rSet.%Get("nomePaciente")
		Set list.dataNascimento = $Select(rSet.%Get("datanascimentoPaciente")="":"",1:$ZDate(rSet.%Get("datanascimentoPaciente"),4,,4))
		Set list.sexo = rSet.%Get("sexoPaciente")
		Set list.numeroAdmissao = rSet.%Get("numeroAdmissao")
		Set list.statusIntegracao = rSet.%Get("statusIntegracao")
		Set list.mensagem = rSet.%Get("mensagem")
		Set list.procedimentos = tProcedimentos
		Set list.numeroAgendamento = ""
		Set list.cor = ""
		If (rSet.%Get("numeroAdmissao") '= "") {
			Set list.cor = "#337AB7"
			Set $namespace = nameSpaceAtual
			Set objVARAgendamentoAdmissao = $Get(^VARAgendamentoAdmissao(YM,rSet.%Get("numeroAdmissao"),1))
			Set list.numeroAgendamento = $$$VARAgendamentoAdmissaoNumerodoAgendamento(objVARAgendamentoAdmissao)
			Set meuSQLProc = "Select * From SQLUser.VARAgendamentoProcedimentos "
			Set meuSQLProc = meuSQLProc _ "Where Company = 0 And ControleAdmissao = '"_rSet.%Get("numeroAdmissao")_"' "
			Set rSetProc = ##class(%SQL.Statement).%ExecDirect("",meuSQLProc)
			While(rSetProc.%Next()){
				If (rSetProc.%Get("Guia") = "" || (rSetProc.%Get("Solicitante") = "")) {
					Set list.cor = "red"
					Quit
				}
			}
			Set $namespace = nameSpaceIntegracao
		}
		Do retorno.%Push(list)
	}
	;
	Set $namespace = nameSpaceAtual
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="ArmSolicitacao">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCliente,pId,pStatus,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y	 		= "~"
	Set YBED 	= pYBED
	;	
	Set nameSpaceAtual = $namespace
	Set nameSpaceIntegracao = "LEAN-PREV-INT"	;Definir o NameSpace da Integração
	Set $namespace = nameSpaceIntegracao
	;
 	TStart
 	Set obj = ##Class(Integracoes.agendamento.prevent.intermediaria.Solicitacao).%OpenId(pId)
 	Set obj.statusIntegracao = pStatus
  Set strStatus = obj.%Save(0)
 	If ('$$$ISERR(strStatus)) {
	 	TCommit	
		Return "success~Linha atualizada com sucesso!" 
 	}
 	TRollback
	Return "error~Erro na atualizção da linha!\n"_strStatus]]></Implementation>
</Method>

<Method name="CarregarProcedimento">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 						= 0
	Set Y	 						= "~"
	Set YBED 					= $Get(%request.Data("YBED",1))
	Set pCodAdmissao 	= $Get(%request.Data("pCodAdmissao",1))
	;
	Set arrayRetono = []
	If (pCodAdmissao = "") {
		Do arrayRetono.%ToJSON()
		Return $$$OK
	}	
	;
	Set flagJaCad	= 0
	Set meuSQL = "Select * From SQLUser.VARAgendamentoProcedimentos "
	Set meuSQL = meuSQL _ "Where Company = 0 And ControleAdmissao = '"_pCodAdmissao_"' "
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	While(rSet.%Next()){
		Set list = {}
		Set list.sequencia 		= rSet.%Get("Sequencia")
		Set list.procedimento = $$SQLGetDescricaoProduto^VARSQL(rSet.%Get("Procedimento"),1)
		If (rSet.%Get("Guia") '= "" || (rSet.%Get("Solicitante") '= "") || 
			 (rSet.%Get("NumdaCarteirinha") '= "") || (rSet.%Get("VencimentodaCarteirinha") '= "")) {
			Set flagJaCad = 1
		}
		Do arrayRetono.%Push(list)
	}
	;
	If (flagJaCad = 0) {
		Set list = {"sequencia": "T", "procedimento": "Todos"}
		Do arrayRetono.%Push(list)
	}	
	;
	Do arrayRetono.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetProcedimentoAlteracao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 										= 0
	Set Y	 										= "~"
	Set YBED 									= $Get(%request.Data("YBED",1))
	Set pCodAgendamento				= $Get(%request.Data("pCodAgendamento",1))
	Set pNumAdmissaoControle	= $Get(%request.Data("pNumAdmissaoControle",1))
	Set pSequencia						= $Get(%request.Data("pSequencia",1))
	Set pCliente							= $Get(%request.Data("pCliente",1))
	Set listDados = {}
	If (pSequencia = "T") {
		Set objVARParametrosIntegracoes = $Get(^VARParametrosIntegracoes(YM, pCliente, 1))
		Set listDados.procedimento 	= ""
		Set listDados.solicitante 	= ""
		Set listDados.convenio 			= $$$VARParametrosIntegracoesConvenio(objVARParametrosIntegracoes)
		Set listDados.planoSaude 		= $$$VARParametrosIntegracoesPlanodeSaude(objVARParametrosIntegracoes)
		Set listDados.carteirinha 	= ""
		Set listDados.dtVencimento 	= ""
		Set listDados.codGuia 			= ""
	}Else{
		Set objeto = $Get(^VARAgendamentoProcedimentos(YM, pCodAgendamento, pSequencia, 1))
		Set dtVencimento = $$$VARAgendamentoProcedimentosVencimentodaCarteirinha(objeto)
		Set listDados.solicitante 	= $$$VARAgendamentoProcedimentosSolicitante(objeto)
		Set listDados.convenio 			= $$$VARAgendamentoProcedimentosConvenio(objeto)
		Set listDados.planoSaude 		= $$$VARAgendamentoProcedimentosPlanodeSaude(objeto)
		Set listDados.carteirinha 	= $$$VARAgendamentoProcedimentosNumdaCarteirinha(objeto)
		Set listDados.dtVencimento 	= $Select(dtVencimento="":"",1:$ZDate(dtVencimento,3))
		Set listDados.codGuia 			= $$$VARAgendamentoProcedimentosGuia(objeto)
	}
	Do listDados.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="ArmConvenioAlteracao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM = 0 
	Set Y  = "~"
	
	Set pCodAgendamento = $Get(%request.Data("pCodAgendamento",1))
	Set pSequencia			= $Get(%request.Data("pSequencia",1))
	Set pCodConvenio		= $Get(%request.Data("pCodConvenio",1))
	Set pCodPlano				= $Get(%request.Data("pCodPlano",1))
	Set pNumCarteirinha	= $Get(%request.Data("pNumCarteirinha",1))
	Set pDtCarteirinha	= $Get(%request.Data("pDtCarteirinha",1))
	
	Set pCodGuia					= $Get(%request.Data("pCodGuia",1))
	Set pDtAutorizacao		= $Get(%request.Data("pDtAutorizacao",1))
	Set pSenha						= $Get(%request.Data("pSenha",1))
	Set pDtValidade				= $Get(%request.Data("pDtValidade",1))
	Set pNumGuiaOperadora	= $Get(%request.Data("pNumGuiaOperadora",1))

	Set pSolicitante		= $Get(%request.Data("pSolicitante",1))

	Set YBED 						= $Get(%request.Data("YBED",1))
	
	If (pSequencia = "T") {
		Set status = ""
		Set xSequencia = ""
		For {
			Set xSequencia = $Order(^VARAgendamentoProcedimentos(YM, pCodAgendamento, xSequencia))
			Quit:xSequencia=""

			Set objeto = $Get(^VARAgendamentoProcedimentos(YM, pCodAgendamento, xSequencia, 1))
			Set codProcedimento = $$$VARAgendamentoProcedimentosProcedimento(objeto)
			
			If (pCodConvenio = "") {
				Set status = "Informar o convênio."
				Quit
			}
			If (pCodPlano = "") {
				Set status =  "Informar o plano de saúde."
				Quit
			}
			Set objRegraComercial = ##Class(VAR.util.FATRegrasComerciais).%New(codProcedimento, pCodPlano)
			If (objRegraComercial.isInelegivel = 1) {
				Set status = "Procedimento "_$$SQLGetDescricaoProduto^VARSQL(codProcedimento, 1)_", não atendido pelo Plano de Saúde informado."
				Quit
			}
			If (objRegraComercial.Componentes.Count() > 0) {
				Set xProcedimentos = ""
				For count = 1 : 1 : objRegraComercial.Componentes.Count() {
					Set objRegraComerCompont = objRegraComercial.Componentes.GetAt(count)
					;
					If (objRegraComerCompont.Procedimento '= "" && ($Data(^VARAgendamentoItensDesc(YM, pCodAgendamento, pSequencia, objRegraComerCompont.Procedimento)))) Continue
					;
					If (objRegraComerCompont.isInelegivel = 1) {
						Set xProcedimentos = xProcedimentos_$Select(xProcedimentos="":"",1:", ")_objRegraComerCompont.DescricaoDoItem_" "
					}
				}
				If (xProcedimentos '= "") {
					Set status =  "O(s) item(ns) "_xProcedimentos_", não é(são) atendido(s) pelo Plano de Saúde informado."
					Quit
				}
			}	
			If ((objRegraComercial.isCarteirinhaObrigatoria = 1) && (pNumCarteirinha = "")) {
				Set status = "Favor informar numero da carterinha."
				Quit
			}
			If (objRegraComercial.isCarteirinhaObrigatoria = 1 && ($Length(pNumCarteirinha) > objRegraComercial.CarteirinhaMax || ($Length(pNumCarteirinha) < objRegraComercial.CarteirinhaMin))) {
				Set status = "Numero de caracteres invalidos para a carteirinha."
				Quit
			}
		}
		If (status '= "") {
			Write status
			Quit	
		}
	}Else{
		Set objeto = $Get(^VARAgendamentoProcedimentos(YM, pCodAgendamento, pSequencia, 1))
		Set codProcedimento = $$$VARAgendamentoProcedimentosProcedimento(objeto)
		
		If (pCodConvenio = "") {
			Write "Informar o convênio."
			Return $$$OK
		}
		If (pCodPlano = "") {
			Write "Informar o plano de saúde."
			Return $$$OK
		}
		Set objRegraComercial = ##Class(VAR.util.FATRegrasComerciais).%New(codProcedimento, pCodPlano)
		If (objRegraComercial.isInelegivel = 1) {
			Write "Procedimento não atendido pelo Plano de Saúde informado."
			Return $$$OK
		}
		If (objRegraComercial.Componentes.Count() > 0) {
			Set xProcedimentos = ""
			For count = 1 : 1 : objRegraComercial.Componentes.Count() {
				Set objRegraComerCompont = objRegraComercial.Componentes.GetAt(count)
				;
				If (objRegraComerCompont.Procedimento '= "" && ($Data(^VARAgendamentoItensDesc(YM, pCodAgendamento, pSequencia, objRegraComerCompont.Procedimento)))) Continue
				;
				If (objRegraComerCompont.isInelegivel = 1) {
					Set xProcedimentos = xProcedimentos_$Select(xProcedimentos="":"",1:", ")_objRegraComerCompont.DescricaoDoItem_" "
				}
			}
			If (xProcedimentos '= "") {
				Write "O(s) item(ns) "_xProcedimentos_", não é(são) atendido(s) pelo Plano de Saúde informado."
				Return $$$OK
			}
		}	
		If ((objRegraComercial.isCarteirinhaObrigatoria = 1) && (pNumCarteirinha = "")) {
			Write "Favor informar numero da carterinha."
			Return $$$OK
		}
		If (objRegraComercial.isCarteirinhaObrigatoria = 1 && ($Length(pNumCarteirinha) > objRegraComercial.CarteirinhaMax || ($Length(pNumCarteirinha) < objRegraComercial.CarteirinhaMin))) {
			Write "Numero de caracteres invalidos para a carteirinha."
			Return $$$OK
		}
	}	

	Set objetoGuia = ""
	If (pCodGuia = "" && (pDtAutorizacao '= "" || (pSenha '= "") || (pDtValidade '= "") || (pNumGuiaOperadora '= ""))) {
		If (pDtAutorizacao '= "") Set pDtAutorizacao = $ZDateH(pDtAutorizacao,3,,,,,,,+$Horolog)
		If (pDtValidade '= "") Set pDtValidade = $ZDateH(pDtValidade,3,,,,,,,+$Horolog)
		;
		Set pCodGuia = $Order(^VARAgendamentoGuia(YM, pCodAgendamento, ""),-1) + 1
		;
		Set objetoGuia = $Get(^VARAgendamentoGuia(YM, pCodAgendamento, pCodGuia, 1))
		Set $$$VARAgendamentoGuiaDataAutorizacao(objetoGuia)	= pDtAutorizacao
		Set $$$VARAgendamentoGuiaSenha(objetoGuia) = pSenha
		Set $$$VARAgendamentoGuiaDatadeValidadeSenha(objetoGuia) = pDtValidade
		Set $$$VARAgendamentoGuiaNumerodaGuiaAtribuidapela(objetoGuia) = pNumGuiaOperadora
		Set $$$VARAgendamentoGuiaCriadoPor(objetoGuia) = YBED
		Set $$$VARAgendamentoGuiaCriadoEm(objetoGuia) = $Horolog
	}
	If (objRegraComercial.isObrigatorioGuiaAutorizacao = 1 && (pCodGuia = "")) {
		Write "Favor informar a Guia de Autorização."
		Return $$$OK
	}
	
	If (objetoGuia '= "") {
		Set strStatus = $$$Save("VARAgendamentoGuia", pCodAgendamento_$$$COMMA_pCodGuia, objetoGuia, $$$YES)
	}	
	
	If (pSequencia = "T") {
		Set status = ""
		Set xSequencia = ""
		For {
			Set xSequencia = $Order(^VARAgendamentoProcedimentos(YM, pCodAgendamento, xSequencia))
			Quit:xSequencia=""

			Set objeto = $Get(^VARAgendamentoProcedimentos(YM, pCodAgendamento, xSequencia, 1))

			Set $$$VARAgendamentoProcedimentosConvenio(objeto)								= pCodConvenio	
			Set $$$VARAgendamentoProcedimentosPlanodeSaude(objeto)						= pCodPlano
			Set $$$VARAgendamentoProcedimentosNumdaCarteirinha(objeto)				= pNumCarteirinha
			Set $$$VARAgendamentoProcedimentosVencimentodaCarteirinha(objeto)	= $Select(pDtCarteirinha="":"",1:$ZDateH(pDtCarteirinha,3))
			Set $$$VARAgendamentoProcedimentosGuia(objeto)										= pCodGuia
			Set $$$VARAgendamentoProcedimentosSolicitante(objeto)							= pSolicitante
			Set strStatus = $$$Save("VARAgendamentoProcedimentos", pCodAgendamento_$$$COMMA_xSequencia, objeto, $$$YES)
		}
	}Else{
		Set $$$VARAgendamentoProcedimentosConvenio(objeto)								= pCodConvenio	
		Set $$$VARAgendamentoProcedimentosPlanodeSaude(objeto)						= pCodPlano
		Set $$$VARAgendamentoProcedimentosNumdaCarteirinha(objeto)				= pNumCarteirinha
		Set $$$VARAgendamentoProcedimentosVencimentodaCarteirinha(objeto)	= $Select(pDtCarteirinha="":"",1:$ZDateH(pDtCarteirinha,3))
		Set $$$VARAgendamentoProcedimentosGuia(objeto)										= pCodGuia
		Set $$$VARAgendamentoProcedimentosSolicitante(objeto)							= pSolicitante
		Set strStatus = $$$Save("VARAgendamentoProcedimentos", pCodAgendamento_$$$COMMA_pSequencia, objeto, $$$YES)
	}
	Write strStatus
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetAdmissoes">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 				= 0
	Set Y 				= "~"
	Set YBED 			= $Get(%request.Data("YBED",1))
	;
	Set retorno = []
	;
	Set meuSQL = "Select * From SQLUser.VARAgendamentoAdmissao "
	Set meuSQL = meuSQL _ "Order By CriadoData Desc, CriadoHora Desc "
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	While(rSet.%Next()){
		Set codAgendamento = rSet.%Get("NumerodoAgendamento")
		Set objAgendamento = $Get(^VARAgendamento(YM, codAgendamento, 1))
		Set codPaciente		 = $$$VARAgendamentoCodigodoPaciente(objAgendamento)
		
		Set list = {}
		Set list.dataHora = $ZDate(rSet.%Get("CriadoData"),4)_" "_$ZTime(rSet.%Get("CriadoHora"),2)
		Set list.numeroAdmissao = rSet.%Get("CodigodaAdmissao")
		Set list.paciente = $$SQLGetPatientName^VARSQL(codPaciente)
		Set codAgendamento = rSet.%Get("NumerodoAgendamento")
		Set todosProcedimentos = ""
		Set sequencia = ""
		For {
			Set sequencia = $Order(^VARAgendamentoProcedimentos(YM, codAgendamento, sequencia))
			Quit:sequencia=""

			Set objeto = $Get(^VARAgendamentoProcedimentos(YM, codAgendamento, sequencia, 1))

			Set codProcedimentoPara = $$$VARAgendamentoProcedimentosProcedimento(objeto)
			Set codProcedimentoDe 	= ""
			
			&Sql(
				Select De 
				Into :codProcedimentoDe
				From SQLUser.VARParametrosIntegracoesDePara
				Where Company = :YM 
							And Cliente = 'MOTION' 
							And Para = :codProcedimentoPara)

			Set todosProcedimentos = todosProcedimentos _ 
															 $Select(todosProcedimentos="":"",1:", ") _ 
															 $Select(codProcedimentoDe = "" :
																 "<span style='color:red;'>"_codProcedimentoPara_"</span>", 1:
																 "<span>"_codProcedimentoPara_"</span>"
															 )
		}
		Set list.procedimentos = todosProcedimentos
		Do retorno.%Push(list)
	}
	;
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetModulo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y 		= "~"
	Set YBED	= $Get(%request.Data("YBED",1))		
	;
	Set retorno = []
	Set meuSQL  = "Select * From SQLUser.VARBRDiretorios"
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	While(rSet.%Next()){
		Set list = {}
		Set list.id = rSet.%Get("Modulo")
		Set list.text = rSet.%Get("Descricao")
		Do retorno.%Push(list)
	}
	;
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GerarArquivoIntegracaoMotion">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodAdmissao="",pDownload=0,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 						= 0
	Set Y 						= "~"
	If (pCodAdmissao = "") {
		Set YBED 					= $Get(%request.Data("YBED",1))
		Set pCodAdmissao 	= $Get(%request.Data("pCodAdmissao",1))
		Set pDownload 		= +$Get(%request.Data("pDownload",1))
		Set pYBED					= ""
	}Else{
		Set YBED = pYBED
	}
	;
	Set fCodAdmissao	= $Replace(pCodAdmissao,"/","_")
	;
	Set objeto = $Get(^VARParametrosIntegracoes(YM, "MOTION", 1))
	Set codModulo = $$$VARParametrosIntegracoesModuloGeracaoArquivo(objeto)
	;
	If (codModulo = "") {
		Write:pYBED="" "Módulo para geração do arquivo não cadastrado!"	
		Return "Módulo para geração do arquivo não cadastrado!"	
	}		
	;
	Set dname = $$GetDiretorioFisico^VARBRDiretorios(0,codModulo)
	If ($$$isWINDOWS) Set dname = $Replace(dname,"/","\"),del="\"
	Else  Set dname = $Replace(dname,"\","/"),del="/"
	If ('##class(%File).DirectoryExists(dname)) Do ##class(%File).CreateDirectoryChain(dname)
	If (pDownload = 1) {
		Set dname = dname_"\Download"
		If ($$$isWINDOWS) Set dname = $Replace(dname,"/","\")
		Else  Set dname = $Replace(dname,"\","/")
		If ('##class(%File).DirectoryExists(dname)) Do ##class(%File).CreateDirectoryChain(dname)
	}
	Do ##class(%File).Delete(dname_del_fCodAdmissao_".txt")
	;
	Set objFile = ##Class(%File).%New(dname_del_fCodAdmissao_".txt")
	Do objFile.Open("WSN")
	;
	Set objVARAgendamentoAdmissao = $Get(^VARAgendamentoAdmissao(YM, pCodAdmissao, 1))
	If (objVARAgendamentoAdmissao = "") {
		Write:pYBED="" "Admissão inválida!"	
		Return "Admissão inválida!"
	}
	Set codAgendamento 	= $$$VARAgendamentoAdmissaoNumerodoAgendamento(objVARAgendamentoAdmissao)
	Set dataAdmissao 		= $$$VARAgendamentoAdmissaoCriadoData(objVARAgendamentoAdmissao)
	Set horaAdmissao 		= $$$VARAgendamentoAdmissaoCriadoHora(objVARAgendamentoAdmissao)
	Set objVARAgendamento = $Get(^VARAgendamento(YM, codAgendamento, 1))	
	Set codPaciente = $$$VARAgendamentoCodigodoPaciente(objVARAgendamento)
	;
	Set objPatient = $Get(^MEDPatient(YM, codPaciente, 1))
	Kill tempProcedimentos
	Kill tempProcedimentos1
	;
	Set sequencia = ""
	For {
		Set sequencia = $Order(^VARAgendamentoProcedimentos(YM, codAgendamento, sequencia))
		Quit:sequencia=""

		Set objeto = $Get(^VARAgendamentoProcedimentos(YM, codAgendamento, sequencia, 1))

		If ($$$VARAgendamentoProcedimentosControleAdmissao(objeto) '= pCodAdmissao) Continue
				
		Set codProcedimentoPara = $$$VARAgendamentoProcedimentosProcedimento(objeto)
		Set codProcedimentoDe 	= ""
		
		&Sql(
			Select De 
			Into :codProcedimentoDe
			From SQLUser.VARParametrosIntegracoesDePara
			Where Company = :YM 
						And Cliente = 'MOTION' 
						And Para = :codProcedimentoPara)
		If ($$$VARAgendamentoProcedimentosCodigoItemparaMotion(objeto)'="") {
			Set codProcedimentoDe = $$$VARAgendamentoProcedimentosCodigoItemparaMotion(objeto)
		}
		If (codProcedimentoDe = "") Continue
	
		Set solicitante = $$$VARAgendamentoProcedimentosSolicitante(objeto)
		Set:solicitante="" solicitante = "X1"
	
		Set seqSolicitante = ""
		If ('$Data(tempProcedimentos1("MED", solicitante))) {
			Set seqSolicitante = $Order(tempProcedimentos("MED", ""),-1) + 1
			Set tempProcedimentos("MED", seqSolicitante) = solicitante
			Set tempProcedimentos1("MED", solicitante) = seqSolicitante
		}Else{
			Set seqSolicitante = tempProcedimentos1("MED", solicitante)
		}
		Set tempProcedimentos("PROC", codProcedimentoDe) = dataAdmissao_Y_horaAdmissao_Y_seqSolicitante
		;	
	}
	
	If ('$Data(tempProcedimentos)) {
		Write:pYBED="" "Arquivo sem procedimento"
		Return "Arquivo sem procedimento"	
	}
	;Geração do Arquivo
	Set xCodMedico = $Get(tempProcedimentos("MED", 1))
	Set xObjMEDProvider = ""
	Set:xCodMedico'="" xObjMEDProvider = $Get(^MEDProvider(YM, xCodMedico, 1))
	;
	Do objFile.WriteLine("[Paciente]")
	Do objFile.WriteLine("CodPac="_codPaciente)
	Do objFile.WriteLine("NumPac="_$Replace(pCodAdmissao,"/",""))
	Do objFile.WriteLine("Nome="_$$$MEDPatientName(objPatient))
	Do objFile.WriteLine("Apagar=N")
	Do objFile.WriteLine("Internado=S")
	Do objFile.WriteLine("RegHos=168480")              
	Do objFile.WriteLine("Idade="_$ZDate($$$MEDPatientDOB(objPatient),3))
	Do objFile.WriteLine("IdadeReal=") ;0320815
	Do objFile.WriteLine("Cor=")
	Do objFile.WriteLine("Sexo="_$Select(+$$$MEDPatientGender(objPatient)=1:"M",1:"F"))
	Do objFile.WriteLine("Peso=")
	Do objFile.WriteLine("Altura=000")
	Do objFile.WriteLine("Telefone="_$$$MEDPatientTel(objPatient))
	Do objFile.WriteLine("Endereco="_$$$MEDPatientStreet(objPatient)_", "_$$$MEDPatientFREE4(objPatient)_" "_$$$MEDPatientFREE3(objPatient))
	Do objFile.WriteLine("Bairro="_$$$MEDPatientFREE6(objPatient))
	Do objFile.WriteLine("CEP="_$$$MEDPatientZipCode(objPatient))
	Do objFile.WriteLine("Cidade="_$$$MEDPatientCity(objPatient))
	Do objFile.WriteLine("Estado="_$$$MEDPatientState(objPatient))
	Do objFile.WriteLine("Doc="_$$$MEDPatientSSN(objPatient))
	Do objFile.WriteLine("EstCivil=")
	Do objFile.WriteLine("Medico="_$$$MEDProviderName(xObjMEDProvider))
	Do objFile.WriteLine("DataEntrega=")
	Do objFile.WriteLine("Observacoes="_$$GetFontePagadora^VARSQL($$$VARAgendamentoConvenio(objVARAgendamento), 1))
	Do objFile.WriteLine("Correio=")
	Do objFile.WriteLine("Entrega=88")
	Do objFile.WriteLine("Procedencia=88")
	Do objFile.WriteLine("Convenio=1")
	Do objFile.WriteLine("CodInternet="_$$GetSenhaAgendamento^VARSQL(pCodAdmissao))
	Do objFile.WriteLine("Empresa="_$$$VARAgendamentoEmpresaContratante(objVARAgendamento))
	Do objFile.WriteLine("DocMedico="_$$$MEDProviderSSN(xObjMEDProvider))
	Do objFile.WriteLine("UFMedico="_$$$MEDProviderFREE3(xObjMEDProvider))
	Do objFile.WriteLine("NomeMae="_$$$MEDPatientMothersName(objPatient))
	Do objFile.WriteLine("NroAndar=3")
	Do objFile.WriteLine("Usuario="_$$$VARAgendamentoAdmissaoCriadoPor(objVARAgendamentoAdmissao))
	Do objFile.WriteLine("NroProntuario="_$$$MEDPatientPID(objPatient))
	Do objFile.WriteLine("")
	
	Set seqMedico = ""
	For {
		Set seqMedico = $Order(tempProcedimentos("MED", seqMedico))
		Quit:seqMedico=""
		
		Set codMedico = tempProcedimentos("MED", seqMedico)
		Set objMEDProvider = $Get(^MEDProvider(YM, codMedico, 1))
		
		Do objFile.WriteLine("[Medico"_seqMedico_"]")
		Do objFile.WriteLine("Medico="_$$$MEDProviderName(objMEDProvider))
		Do objFile.WriteLine("DocMedico="_$$$MEDProviderSSN(objMEDProvider))
		Do objFile.WriteLine("UFMedico="_$$$MEDProviderFREE3(objMEDProvider))
		Do objFile.WriteLine("")
	}

	Set seqProcedimento = ""
	Set codProcedimento = ""
	For {
		Set codProcedimento = $Order(tempProcedimentos("PROC", codProcedimento))
		Quit:codProcedimento=""

		Set dtAdmissao = $Piece(tempProcedimentos("PROC", codProcedimento),Y,1)
		Set hrAdmissao = $Piece(tempProcedimentos("PROC", codProcedimento),Y,2)
		Set seqMedico	 = $Piece(tempProcedimentos("PROC", codProcedimento),Y,3)

		Do objFile.WriteLine("[Exame"_$Increment(seqProcedimento)_"]")  
		Do objFile.WriteLine("Exame="_codProcedimento)
		Do objFile.WriteLine("DataColeta="_$ZDate(dtAdmissao,3))
		Do objFile.WriteLine("HoraColeta="_$ZTime(hrAdmissao,2))
		Do objFile.WriteLine("Faturar=S")
		Do objFile.WriteLine("Imprimir=S")
		Do objFile.WriteLine("Material=S")
		Do objFile.WriteLine("Guia=")
		Do objFile.WriteLine("Apagar=")
		Do objFile.WriteLine("Medicos="_$Select(seqMedico="":"",1:"Medico"_seqMedico))
		Do objFile.WriteLine("")
	}
	Do objFile.Close()
	;
	If (pYBED '= "") {
		Return $$$OK
	}
	Write $$$OK_Y_$Replace(YGIF_$Piece(dname,del,($Length(dname,del)-2),$Length(dname,del))_"/"_fCodAdmissao_".txt","\","/") 
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetLotes">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 				= 0
	Set Y 				= "~"
	Set YBED 			= $Get(%request.Data("YBED",1))
	;
	Set objeto = $Get(^VARParametrosIntegracoes(YM, "MOTIONFINANCEIRO", 1))
	Set retorno = []
	;
	Set meuSQL = "Select * From SQLUser.FATLote "
	Set meuSQL = meuSQL _ "Order By CriadoEm Desc"
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	While(rSet.%Next()){
		Set notaFiscal = "", todasNotasFiscais = ""
		For {
			Set notaFiscal = $Order(^FATNotaFiscals(YM,1,rSet.%Get("CodigodoLote"),notaFiscal))
			Quit:notaFiscal=""
			
			Set conteudoNotaFiscal 	= $Get(^FATNotaFiscal(YM, notaFiscal, 1))
			Set numeNotaFiscal			= $$$FATNotaFiscalNumerodaNotaFiscal(conteudoNotaFiscal)
			Set isParticular	 			= $$$FATNotaFiscalENotaparaParticular(conteudoNotaFiscal)
			;
			If (isParticular) Continue
			
			Set todasNotasFiscais = todasNotasFiscais _ $Select(todasNotasFiscais="":"",1:"; ") _ numeNotaFiscal	
		}
		Set list = {}
		Set list.dataHora 		= $ZDateTime(rSet.%Get("CriadoEm"),3,2)
		Set list.numeroLote 	= rSet.%Get("CodigodoLote")
		Set list.notaFiscal 	= todasNotasFiscais
		Set list.codSituacao 	= rSet.%Get("Status")
		Set list.descSituacao = ##Class(User.Search.PesquisasJson).GetDescricaoINPARA("FATLOTESTATUS", rSet.%Get("Status"))
		Set list.modulo				= $$$VARParametrosIntegracoesModuloGeracaoArquivo(objeto)

		Do retorno.%Push(list)
	}
	;
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GerarArquivoIntegracaoMotionFinanceiro">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNumLote="",pDownload=0,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 						= 0
	Set Y 						= "~"
	If (pNumLote = "") {
		Set YBED 			= $Get(%request.Data("YBED",1))
		Set pNumLote 	= $Get(%request.Data("pNumLote",1))
		Set pDownload = +$Get(%request.Data("pDownload",1))
		Set pYBED			= ""
	}Else{
		Set YBED = pYBED
	}
	;
	Set objeto = $Get(^VARParametrosIntegracoes(YM, "MOTIONFINANCEIRO", 1))
	Set codModulo = $$$VARParametrosIntegracoesModuloGeracaoArquivo(objeto)
	;
	If (codModulo = "" && (+pDownload = 0)) {
		Write:pYBED="" "Módulo para geração do arquivo não cadastrado!"	
		Return "Módulo para geração do arquivo não cadastrado!"	
	}		
	;
	Set flagModulo = 1
	if (codModulo = "") Set codModulo = 0, flagModulo = 0
	;
	Set dname = $$GetDiretorioFisico^VARBRDiretorios(0,codModulo)
	If ($$$isWINDOWS) Set dname = $Replace(dname,"/","\"),del="\"
	Else  Set dname = $Replace(dname,"\","/"),del="/"
	If ('##class(%File).DirectoryExists(dname)) Do ##class(%File).CreateDirectoryChain(dname)
	If (pDownload = 1) {
		Set dname = dname_"\Download"
		If ($$$isWINDOWS) Set dname = $Replace(dname,"/","\")
		Else  Set dname = $Replace(dname,"\","/")
		If ('##class(%File).DirectoryExists(dname)) Do ##class(%File).CreateDirectoryChain(dname)
	}
	Do ##class(%File).Delete(dname_del_YBED_".xml")
	;
	Set objFile = ##Class(%File).%New(dname_del_YBED_".xml")
	Do objFile.Open("WSN")
	;
	Set objXML = ##class(%XML.Writer).%New()
 	Set Sc = objXML.OutputToString()
 	Set objXML.Indent = 1
 	Set objXML.SuppressXmlns = 0
 	Set objXML.Summary = 1
 	;
	Set objInicializacao = ##Class(VAR.MotionFinanceiro.Principal).%New()
	For count = 1 : 1 : $Length(pNumLote,";"){
		Set numlote = $Piece(pNumLote,";",count)
		;
		Set conteudoLote 	= $Get(^FATLote(YM, numlote, 1))
		Set modeloLote		= $$$FATLoteModelodeLote(conteudoLote)
		;
		Set conteudoModeloLote = $Get(^FATModeloLote(YM, modeloLote, 1))
		Set contaFinanceira	 = $$$FATModeloLoteContaFinanceira(conteudoModeloLote)
		;
		Set notaFiscal = ""
		For {
			Set notaFiscal = $Order(^FATNotaFiscals(YM,1,numlote,notaFiscal))
			Quit:notaFiscal=""
			;
			Set conteudoNotaFiscal 	= $Get(^FATNotaFiscal(YM, notaFiscal, 1))
			Set numeNotaFiscal			= $$$FATNotaFiscalNumerodaNotaFiscal(conteudoNotaFiscal)
			Set dataEmissao					= $$$FATNotaFiscalDatadeEmissao(conteudoNotaFiscal)
			Set codFontePagadora	 	= $$$FATNotaFiscalFontePagadora(conteudoNotaFiscal)
			Set dataVencimento	 		= $$$FATNotaFiscalDatadeVencimento(conteudoNotaFiscal)
			Set valorTotalNF	 			= $$$FATNotaFiscalValorTotaldaNF(conteudoNotaFiscal)
			Set isParticular	 			= $$$FATNotaFiscalENotaparaParticular(conteudoNotaFiscal)
			;
			If (isParticular) {
				Continue
			}Else{
				Set conteudoFontePagadora = $Get(^FATOrganizacao(YM, codFontePagadora, 1))
				Set siglaFontePag	= $$$FATOrganizacaoSigla(conteudoFontePagadora)
				Set nomeFontePag	= $$$FATOrganizacaoNome(conteudoFontePagadora)
				Set cnpjFontePag	= $$$FATOrganizacaoCNPJ(conteudoFontePagadora)
				Set cpfFontePag		= ""
			}
			;
			Set objPagador 			= ##Class(VAR.MotionFinanceiro.Pagador).%New()
			Set objPagador.ID 	= siglaFontePag
			Set objPagador.Nome = nomeFontePag
			Set objPagador.CNPJ = cnpjFontePag
			Set objPagador.CPF 	= cnpjFontePag
			;
			Set objContaFinanceira = ##Class(VAR.MotionFinanceiro.ContaFinanceira).%New()
			Set objContaFinanceira.ID 	= contaFinanceira
			Set objContaFinanceira.Nome = $$SQLGetUserParamDescVAR^VARSQL("VARCONTAFINANCEIRA~"_contaFinanceira)
			;
			Set objNotaFiscal = ##Class(VAR.MotionFinanceiro.NotaFiscal).%New()
			Set objNotaFiscal.NumeroNotaFiscal 	= numeNotaFiscal
			Set objNotaFiscal.DataEmissao 			= $ZDate(dataEmissao,4)
			Set objNotaFiscal.Pagador 					= objPagador
			Set objNotaFiscal.ValorBruto 				= valorTotalNF
			Set objNotaFiscal.Vencimento 				= $ZDate(dataVencimento,4)
			Set objNotaFiscal.ContaFinanceira		= objContaFinanceira
			;
			Kill tempCentrosCustos
			Set numFaturas = ""
			For {
				Set numFaturas = $Order(^FATLoteFaturas(YM, numlote, numFaturas))
				Quit:numFaturas=""
				Set seqFaturas = ""
				For {
					Set seqFaturas = $Order(^FATLoteFaturas(YM, numlote, numFaturas, seqFaturas))
					Quit:seqFaturas=""
					;
					Set conteudoFATLoteFaturas = $Get(^FATLoteFaturas(YM, numlote, numFaturas, seqFaturas, 1))
					Set codProcedimento 	= $$$FATLoteFaturasProcedimento(conteudoFATLoteFaturas)
					Set valorProcedimento = $$$FATLoteFaturasValordoProcedimento(conteudoFATLoteFaturas)
					;
					Set conteudoINART = $Get(^INART(YM, codProcedimento, 1))
					Set codCentroCusto = $$$INARTCentrodeCusto(conteudoINART)
					If (codCentroCusto = "") Continue
					;
					Set tempCentrosCustos(codCentroCusto) = $Get(tempCentrosCustos(codCentroCusto)) + valorProcedimento
				}					
			}
			Set codCentroCusto = ""
			For {
				Set codCentroCusto = $Order(tempCentrosCustos(codCentroCusto))
				Quit:codCentroCusto=""
				;
				Set conteudoVARCentroCusto = $Get(^VARCentroCusto(YM, codCentroCusto, 1))
				;
				Set objCentroCustoXML = ##Class(VAR.MotionFinanceiro.CentroCusto).%New()
				Set objCentroCustoXML.Codigo 	= codCentroCusto
				Set objCentroCustoXML.Nome 		= $$SQLGetTextoSemAcento^VARSQL($$$VARCentroCustoNomedoCentrodeCusto(conteudoVARCentroCusto))
				Set objCentroCustoXML.Valor 	= tempCentrosCustos(codCentroCusto)
				;
				Do objNotaFiscal.CentrosCustos.SetAt(objCentroCustoXML, objNotaFiscal.CentrosCustos.Count() + 1)
			}
			;
			Do objInicializacao.NotaFiscal.SetAt(objNotaFiscal, objInicializacao.NotaFiscal.Count() + 1)
		}
	}
	;
	Set tStatus = objXML.RootObject(objInicializacao)
	;	
	Do objFile.Write(objXML.GetXMLString())
	;	
	Do objFile.Close()
	;
	If (pYBED '= "") {
		Return $$$OK
	}
	If (flagModulo = 0) {
		Write $$$OK_Y_$Replace(YGIF_$Piece(dname,del,($Length(dname,del)-1),$Length(dname,del))_"/"_YBED_".xml","\","/") 
	}Else{
		Write $$$OK_Y_$Replace(YGIF_$Piece(dname,del,($Length(dname,del)-2),$Length(dname,del))_"/"_YBED_".xml","\","/") 
	}
	Return $$$OK]]></Implementation>
</Method>
</Class>
</Export>