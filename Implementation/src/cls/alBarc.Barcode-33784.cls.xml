<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alBarc.Barcode">
<ClassType>persistent</ClassType>
<Super>%Persistent</Super>

<Property name="LabelId">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00703"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="Location">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00704"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="GTIN">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00699"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="Quantity">
<Type>%Float</Type>

<Parameter name="CAPTION" value="AL00706"/>
</Property>


<Property name="ItemNumber">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00702"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="LotNumber">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00705"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="ExpiryDate">
<Type>%Date</Type>

<Parameter name="CAPTION" value="AL00698"/>
</Property>


<Property name="ItemDescription">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00700"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="UnitOfMeasure">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00707"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<UDLText name="T">
<Content>
//Property ItemLotExpiry As %String [ Calculated ];  -&gt; does not work with WASP Labeler !!!

</Content>
</UDLText>


<Property name="ItemLotExpiry">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00701"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<UDLText name="T">
<Content>
/*
Method ItemLotExpiryGet() As %String
{
	quit ..ItemLotExpiry = $listbuild(..ItemNumber,..LotNumber,$select(..ExpiryDate'="&quot;:$zdate(..ExpiryDate,3),1:"&quot;))
}
*/
</Content>
</UDLText>


<Method name="%OnBeforeSave">
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//set ..ItemLotExpiry = $listbuild(..ItemNumber,..LotNumber,$select(..ExpiryDate'="":$zdate(..ExpiryDate,3),1:""))
	set ..ItemLotExpiry = ..ItemNumber_"||"_..LotNumber_"||"_$select(..ExpiryDate'="":$zdate(..ExpiryDate,3),1:"")_"||"_..Quantity_"||"_..LabelId
	quit $$$OK
]]></Implementation>
</Method>

<Method name="PrintReceipt">
<ClassMethod>1</ClassMethod>
<FormalSpec>Location,ItemNumber,LotNumber="&quot;,ExpiryDate="&quot;,Quantity=1,NoOfCopies=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	;
	; History:
	; 05-Aug-2010	GRF		-: Replace include and macro with hard-coded value
	; 09-Apr-2010	GRF		SR17268.1: Replace [NoOfCopies] substitution with direct
	; 							set in Parameter string
	; ??-???-2010	FIS		SR17268: Created
	;-------------------------------------------------------------------------------
	;set Program = "WaspLabeler"
	set Program = "Bartender"
	
	// Create Sample Barcode
	set obj = ##class(alBarc.Barcode).%OpenId(1)  //one and only barcode  //TODO: create one barcode file for each receipt for re-printing ?
	set obj.LabelId    = "1"
	set obj.Location   = $get(Location)
	//set obj.GTIN       = $get(GTIN)
	set obj.ItemNumber = $get(ItemNumber)
	set obj.LotNumber  = $get(LotNumber)
	set obj.ExpiryDate = $get(ExpiryDate)
	set obj.Quantity   = $get(Quantity)
	
	if ($get(^INART(0,ItemNumber,1))'="") {
		set obj.ItemDescription = $piece($get(^INART(0,ItemNumber,1)),"~",1)
	}
	set unit = $piece($get(^INART(0,ItemNumber,1)),"~",40)
	if (unit'="") && ($get(^WWW101(0,"EINHEIT","EN",unit,1))'="") {
		set obj.UnitOfMeasure = $piece($get(^WWW101(0,"EINHEIT","EN",unit,1)),"~",1)
	}
	set savestatus = obj.%Save()
	if ('savestatus) {
		//set ^zzTony = $translate(##class(%Library.Status).LogicalToOdbc(savestatus),$char(9))
		quit savestatus
	}
	
	set strStatus = $$$NO
	
	
	
	if (Program = "WaspLabeler") {
		set strAppPath   = "C:\Program Files\Wasp Technologies\Labeler\"   // Label Printer Installation Path
		set strAppName   = "Wlab32.exe"                                    // Label Printer Exe File
		set strLabel     = "a_receipt.LAB"                                 // Label Name (Path/Name)
		
		// Build Command Line. Example:
		// ----------------------------
		// Wlab32[.exe] [path/filename] [-p] [-l n] [-c m] [-q]
		// Optional Parameters:
		// -p Opens the specified LAB file and prints it. (Note: Only one file can be printed from the command line at a time.)
		// -l n Prints 'n' labels (optional, default=1). (Note: '-p' parameter required.)
		// -c m Prints 'm' copies (optional, default=1). (Note: '-p' parameter required.)
		// -q Launches the application in quiet mode (i.e. does not show the Welcome screen on startup, does not show ?Objects outside label border? warning message)
		// -u Unloads the running Wlab32.exe (i.e., closes the application)
		
	; SR17268.1 vvv
	;	set strParameter = "-p -c[NoOfCopies] -u"
	;	set strCommand   = """"_strAppPath_strAppName_""""_" "_strLabel
	;	if (strParameter '= "") {
	;		set strCommand = strCommand_" "_strParameter
	;	}
	;	if $find(strCommand,"[NoOfCopies]") {
	;		set strCommand = $$Replace^COMUtilStr(strCommand,"[NoOfCopies]",NoOfCopies)
	;	}
	;	;set strStatus = $zf(-1,strCommand)  //wait for execute error
	;	set strStatus = $zf(-2,strCommand)  //run as child process
	;	if (strStatus = 0) {  //return 0 = no error
	;		set strStatus = $$$OK
	;	} else {                //return 1 = error
	;		set strStatus = $$$NO
	;	}
	
		set strParameter = "-p -c"_NoOfCopies_" -u"
		set strCommand   = """"_strAppPath_strAppName_""""_" "_strLabel_" "_strParam
		set strStatus = '$zf(-2,strCommand)  //run as child process - returns 0 if no error, 1 if error
	; SR17268.1 ^^^
	
	
	
	} elseif (Program = "Bartender") {	// Label Printer Installation Path
		// ACTIVE-X LINE CONTROL
		// =====================
		// Label Name (Path/Name)
		set strLabel = "D:\BarTender\Formats\CN\LIVECN-2DPILOT2.btw"  //TODO: add path and file to company parameters
		
	//	#include Activate.BarTender
		set $ztrap = "ActiveXError"
		
		set btApp = ##class(Activate.BarTender.Application).%New()
		set btApp.Visible = 1
		
		set btFormat = btApp.Formats.Open(strLabel,0,$$$NULLOREF)
		
		set btFormat.IdenticalCopiesOfLabel = NoOfCopies
   		do btFormat.PrintOut(0,0)
   		
	//	do btApp.Quit($$$btDoNotSaveChanges)
		do btApp.Quit(1)
		kill btApp
	
		/*
		// COMAND LINE CONTROL
		// ===================
		set strAppPath   = "C:\Program Files\Seagull\BarTender Suite\BarTender\"
		set strAppName   = "bartend.exe"                                           // Label Printer Exe File
		set strLabel     = "AL_Receipt.btw"                                        // Label Name (Path/Name) - MUST BE IN SAME PATH !
		
		// Build Command Line. Example:
		// ----------------------------
		// bartend.exe [path/filename] [-p] [-l n] [-c m] [-q]
		set strCommand   = """"_strAppPath_strAppName_""""_" /F=\"_strLabel_" /FP /C="_NoOfCopies_" /UID=_SYSTEM /PWD=sys /NOSPLASH /MIN=SystemTray /X"  ;_""
	
		;set strStatus = $zf(-1,strCommand)  //wait for execute error
		set strStatus = $zf(-2,strCommand)  //run as child process
		if (strStatus = 0) {  //return 0 = no error
			set strStatus = $$$OK
		} else {                //return 1 = error
			set strStatus = $$$NO
		}*/

	}

	quit strStatus
	
ActiveXError
	if $find($zerror,"ZACTX") {
		write %objlasterror
		set $zerror=""
	} else {
		do $system.OBJ.DisplayError()
		//do ^WWWERROR
	}
	quit ""
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^alBarc.BarcodeD</DataLocation>
<DefaultData>BarcodeDefaultData</DefaultData>
<IdLocation>^alBarc.BarcodeD</IdLocation>
<IndexLocation>^alBarc.BarcodeI</IndexLocation>
<StreamLocation>^alBarc.BarcodeS</StreamLocation>
<Data name="BarcodeDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LabelId</Value>
</Value>
<Value name="3">
<Value>Location</Value>
</Value>
<Value name="4">
<Value>GTIN</Value>
</Value>
<Value name="5">
<Value>Quantity</Value>
</Value>
<Value name="6">
<Value>ItemNumber</Value>
</Value>
<Value name="7">
<Value>LotNumber</Value>
</Value>
<Value name="8">
<Value>ExpiryDate</Value>
</Value>
<Value name="9">
<Value>ItemDescription</Value>
</Value>
<Value name="10">
<Value>UnitOfMeasure</Value>
</Value>
<Value name="11">
<Value>ItemLotExpiry</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>