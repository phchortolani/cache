<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.Dashboard.Meter">
<Description><![CDATA[
Base class for SVG-based dashboard meters.]]></Description>
<ClassType/>
<IncludeCode>Ensemble</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Parameter name="MINWIDTH">
<Description><![CDATA[
Minimum width, in logical units, of this meter.]]></Description>
<Type>INTEGER</Type>
<Default>100</Default>
</Parameter>


<Parameter name="MINHEIGHT">
<Description><![CDATA[
Minimum height, in logical units, of this meter.]]></Description>
<Type>INTEGER</Type>
<Default>100</Default>
</Parameter>


<Parameter name="WIDTH">
<Description><![CDATA[
Default width, in logical units, of this meter.]]></Description>
<Type>INTEGER</Type>
<Default>100</Default>
</Parameter>


<Parameter name="HEIGHT">
<Description><![CDATA[
Default height, in logical units, of this meter.]]></Description>
<Type>INTEGER</Type>
<Default>100</Default>
</Parameter>


<Parameter name="SHOWLABEL">
<Description><![CDATA[
Should this meter display the standard label]]></Description>
<Type>BOOLEAN</Type>
<Default>1</Default>
</Parameter>


<Property name="Width">
<Description><![CDATA[
Width, in logical units, of this meter.
Note, this value is determined by the WIDTH class parameter.]]></Description>
<Type>%Integer</Type>
<InitialExpression>..#WIDTH</InitialExpression>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="Height">
<Description><![CDATA[
Height, in logical units, of this meter.
Note, this value is determined by the HEIGHT class parameter.]]></Description>
<Type>%Integer</Type>
<InitialExpression>..#HEIGHT</InitialExpression>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="Level">
<Description><![CDATA[
Represents the initial level of the meter.]]></Description>
<Type>%Float</Type>
<InitialExpression>0</InitialExpression>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Property name="RangeLower">
<Description><![CDATA[
Represents the lower value of the meter range.]]></Description>
<Type>%Float</Type>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="RangeUpper">
<Description><![CDATA[
Represents the upper value of the meter range.]]></Description>
<Type>%Float</Type>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="ThresholdLower">
<Description><![CDATA[
Represents the lower threshold level for the meter.]]></Description>
<Type>%Float</Type>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="ThresholdUpper">
<Description><![CDATA[
Represents the upper threshold level for the meter.]]></Description>
<Type>%Float</Type>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="ScaleFactor">
<Description><![CDATA[
For numeric displays, the meter will multiply the current
level by this amount before displaying it.]]></Description>
<Type>%Float</Type>
<InitialExpression>1</InitialExpression>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="Label">
<Description><![CDATA[
The label displayed for the meter.]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="50"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="Description">
<Description><![CDATA[
Description for the meter.]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="250"/>

<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>


<Property name="Metric">
<Description><![CDATA[
Business Metric service (config name) providing the metric for this meter.]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="128"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="Property">
<Description><![CDATA[
Metric property providing the metric for this meter.]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="128"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="Method">
<Description><![CDATA[
Optional method, within the Dashboard class, used to transform
the Property value]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="128"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="XPos">
<Description><![CDATA[
X Position, in logical units, of this meter.]]></Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Property name="YPos">
<Description><![CDATA[
Y Position, in logical units, of this meter.]]></Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Property name="ShowLabel">
<Description><![CDATA[
Indicates that the label should be displayed for this meter.]]></Description>
<Type>%Boolean</Type>
<InitialExpression>..#SHOWLABEL</InitialExpression>
<ReadOnly>1</ReadOnly>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Property name="IsRunning">
<Description><![CDATA[
Indicates that the production providing the metrics for this meter is running.]]></Description>
<Type>%Boolean</Type>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Property name="MeterId">
<Description><![CDATA[
Id used when meter is placed on client page]]></Description>
<Type>%Integer</Type>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Property name="PropertyCount">
<Description><![CDATA[
Number of properties displayed by this meter]]></Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Property name="Link">
<Description><![CDATA[
If present, the link (URL) used to drill into details for this meter.]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="128"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="DefList">
<Description><![CDATA[
Contains list of properties using default values.]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="200"/>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Method name="OnSVGHead">
<Description><![CDATA[
Called before any scripts, styles, defs are written
Usually used to pick up include files]]></Description>
<ClassMethod>1</ClassMethod>
</Method>


<Method name="OnSVGStyle">
<Description><![CDATA[
Draw the style section of this SVG meter]]></Description>
<ClassMethod>1</ClassMethod>
</Method>


<Method name="OnSVGScript">
<Description><![CDATA[
Draw the script section of this SVG meter]]></Description>
<ClassMethod>1</ClassMethod>
</Method>


<Method name="OnSVGDefs">
<Description><![CDATA[
Draw the defs section of this SVG meter]]></Description>
<ClassMethod>1</ClassMethod>
</Method>


<Method name="OnSVGInitJS">
<Description><![CDATA[
Generate JavaScript to initialize client-side
meter object]]></Description>
</Method>

<Method name="OnSVGBody">
<Description><![CDATA[
Draw the body of this SVG meter
<var>id</var> is a run-time assigned id value that must
be used to prefix any DOM identifiers within this meter]]></Description>
</Method>

<Method name="GenerateCode">
<Description><![CDATA[
Called by Dashboard class to generate code to
create an instace of this object.
The object instance is called <var>tMeter</var>.
The generated code will be called in the context of the OnPage method of the CSPX.Dashboard.Page class.]]></Description>
<FormalSpec>pCode:%CharacterStream,pLevel:%Integer=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do:(..Label'="") pCode.WriteLine(" Set tMeter.Label=""" _ ..Label _ """")
	Do:(..Metric'="") pCode.WriteLine(" Set tMeter.Metric=""" _ ..Metric _ """")
	Do:(..Property'="") pCode.WriteLine(" Set tMeter.Property=""" _ ..Property _ """")
	Do:(..Width'="") pCode.WriteLine(" Set tMeter.Width=" _ ..Width)
	Do:(..Height'="") pCode.WriteLine(" Set tMeter.Height=" _ ..Height)
	Do:(..ScaleFactor'="") pCode.WriteLine(" Set tMeter.ScaleFactor=" _ ..ScaleFactor)
	Do:(..Method'="") pCode.WriteLine(" Set tMeter.Method=""" _ ..Method _ """")

	// these values get defaults from the metric class
	// if not defined by the meter (use abbreviations)
	Set tDefList = ""

	If (..Link="") {
		Do pCode.WriteLine(" Set tMeter.Link=##class(%CSP.Page).Link(tMeter.GetDefault(""Link""))")
		Set tDefList = tDefList _ $S(tDefList="":"",1:"|") _ "L"
	}
	Else {
		Do pCode.WriteLine(" Set tMeter.Link=##class(%CSP.Page).Link(""" _ ..Link _ """)")
	}
	If (..RangeLower="") {
		Do pCode.WriteLine(" Set tMeter.RangeLower=tMeter.GetDefault(""RangeLower"")")
		Set tDefList = tDefList _ $S(tDefList="":"",1:"|") _ "RL"
	}
	Else {
		Do pCode.WriteLine(" Set tMeter.RangeLower=""" _ ..RangeLower _ """")
	}
	If (..RangeUpper="") {
		Do pCode.WriteLine(" Set tMeter.RangeUpper=tMeter.GetDefault(""RangeUpper"")")
		Set tDefList = tDefList _ $S(tDefList="":"",1:"|") _ "RU"
	}
	Else {
		Do pCode.WriteLine(" Set tMeter.RangeUpper=""" _ ..RangeUpper _ """")
	}

	If (..ThresholdLower="") {
		Do pCode.WriteLine(" Set tMeter.ThresholdLower=tMeter.GetDefault(""ThresholdLower"")")
		Set tDefList = tDefList _ $S(tDefList="":"",1:"|") _ "TL"
	}
	Else {
		Do pCode.WriteLine(" Set tMeter.ThresholdLower=""" _ ..ThresholdLower _ """")
	}

	If (..ThresholdUpper="") {
		Do pCode.WriteLine(" Set tMeter.ThresholdUpper=tMeter.GetDefault(""ThresholdUpper"")")
		Set tDefList = tDefList _ $S(tDefList="":"",1:"|") _ "TU"
	}
	Else {
		Do pCode.WriteLine(" Set tMeter.ThresholdUpper=""" _ ..ThresholdUpper _ """")
	}

	If (..Description="") {
		// no default for description
	}
	Else {
		Do pCode.WriteLine(" Set tMeter.Description=""" _ ..Description _ """")
	}

	Do pCode.WriteLine(" Set tMeter.DefList=""" _ tDefList _ """")

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SetClientProperties">
<CodeMode>objectgenerator</CodeMode>
<Implementation><![CDATA[
	If (%class.Name = "CSPX.Dashboard.Meter") {
		Quit $$$OK
	}
	
	For i = 1:1:%compiledclass.Properties.Count() {
		Set prop = %compiledclass.Properties.GetAt(i)
		Set type = $$$NormalizeClassname(prop.Type)
		
		If (prop.Collection = "") {
		
			// create client name
			Set cname = prop.Name
			If (cname = "Metric") {
				// metric value
				Do %code.WriteLine(" Write ""meter.metric = '"" _ $ZCVT(##class(CSPX.Dashboard.Renderer).EvalMetric(..Metric),""O"",""JS"") _ ""';"",!")
			}
			Else {
				Set $E(cname,1,1) = $ZCVT($E(cname,1,1),"L")
				Do %code.Write(" Write ""meter." _ cname _ " = ")
				If ((type = "Ens.DataType.Metric") ||
					(type = "%Library.Boolean") || 
					(type = "%Library.Integer") || 
					(type = "%Library.Float")) {
						
					Do %code.WriteLine(""",+.." _ prop.Name _ ","";"",!")
				}
				ElseIf (type = "CSPX.Dashboard.GridDimension") {
					// special handling for Grids
					Do %code.WriteLine(""",$S($IsObject(.." _ prop.Name _ "):""'""_.."_prop.Name_".Source_""'"",1:""null""),"";"",!")
				}
				Else {
					Do %code.WriteLine("'"",$ZCVT(.." _ prop.Name _ ",""O"",""JS""),""';"",!")
				}
			}
		}
	}

	// other properties
	Do %code.WriteLine(" Write ""meter.units = '"" _ $ZCVT(..GetUnits(),""O"",""JS"") _ ""';"",!")

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetUnits">
<Description><![CDATA[
Returns the units used for the metric associated with this meter.
Units are a user-defined string specified (by the UNITS parameter) within
the BusinessMetric class.]]></Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $ZT = "Trap"
	Set tUnits = ""
	If ((..Metric '= "") && (..Property '= "")) {
		// convert Metric to class name
		Set tClass = $$$ConfigClassName(..Metric)
		Set tUnits = $zobjclassmethod(tClass,..Property_"Units")
	}
Done
	Quit tUnits
Trap
	Set $ZT = ""
	Goto Done
]]></Implementation>
</Method>

<Method name="GetDefault">
<Description><![CDATA[
Returns the default value (from the Metric class) for the given property
(e.g., RangeLower, etc).]]></Description>
<FormalSpec>pName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap", tValue=""
	Do {
		If ((..Metric '= "") && (..Property '= "")) {
			// convert Metric to class name
			Set tMetric = $P(..Metric,"(",1) // pull off metric name
			Set tClass = $G($$$ConfigClassName(tMetric))  Quit:""=tClass
			Set tValue = $zobjclassmethod(tClass,..Property_pName)
		}
	} While(0)
Done
	Quit tValue
Trap
	Set $ZT=""
	Goto Done
]]></Implementation>
</Method>

<Method name="WidthSet">
<FormalSpec>%val:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// don't allow width below minimum
	Set i%Width = $S(%val>..#MINWIDTH:%val,1:..#MINWIDTH)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="HeightSet">
<FormalSpec>%val:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// don't allow height below minimum
	Set i%Height = $S(%val>..#MINHEIGHT:%val,1:..#MINHEIGHT)
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>