<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alTFR.dUTransferLine">
<ClassType>persistent</ClassType>
<IncludeCode>COMSYS,INConst</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>User.INTFRLine</Super>
<UDLText name="T">
<Content>
// Property BaseQuantity As %Float(CAPTION = "AL00175") [ Required ];

</Content>
</UDLText>

<UDLText name="T">
<Content>
// Property Reference As %String(CAPTION = "AL00178", MAXLEN = 30);

</Content>
</UDLText>

<UDLText name="T">
<Content>
// Property Item As %String(CAPTION = "AL00176", MAXLEN = 30) [ Required ];

</Content>
</UDLText>


<Property name="Transfer">
<Description><![CDATA[
Base Quantity
Reference
Item
Pseudo relation to Implement better object relations under a @nM enviroment<br>
The Transient to represent the parent adjustment ]]></Description>
<Type>alTFR.dUTransfer</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00174"/>
</Property>

<UDLText name="T">
<Content>
// Property Quantity As %Float(CAPTION = "AL00177") [ Required ];

</Content>
</UDLText>


<Property name="Unit">
<Description><![CDATA[
Quantity
Unit]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00179"/>

<Parameter name="MAXLEN" value="30"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<UDLText name="T">
<Content>
// 23-Sep-2010	shobby	SR17485: Transfer lines contain the line number of the requisition

</Content>
</UDLText>

<Query name="GetTransfersViaRequisition">
<Type>%SQLQuery</Type>
<FormalSpec>idReq:%String</FormalSpec>
<SqlQuery>SELECT DISTINCT TransferNumber As ID FROM dUTransferLine
 WHERE (Reference [ :idReq||',&apos;)</SqlQuery>
</Query>

<UDLText name="T">
<Content>
// SR17485

</Content>
</UDLText>

<Query name="GetTfrLinesViaReqLines">
<Type>%SQLQuery</Type>
<FormalSpec>idReq:%String,idLine:%String</FormalSpec>
<SqlQuery>	
SELECT TransferNumber As ID,TransferLineNumber as Line FROM dUTransferLine
 WHERE (Reference = :idReq_",&quot;_:idLine)</SqlQuery>
</Query>

<UDLText name="T">
<Content>
// SR17638 - GetTFRLines moved from dUTransfer

</Content>
</UDLText>

<Query name="GetTfrLines">
<Type>%SQLQuery</Type>
<FormalSpec>pidTransfer:%String</FormalSpec>
<SqlQuery>SELECT %ID FROM dUTransferLine WHERE (TransferNumber = :pidTransfer)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="TransferGet">
<Description><![CDATA[
Pseudo relation. <br>
This creates the relationship between this, the line, and the header <p>
Creates a <class>alTFR.dUTransfer</class> based on the <code>TransferNumber</code> of this object.<p>
It method is automatically called when you access the <code>Transfer</code><br>
 Params:<br>
 
 Returns: <br>
 	<class>alTFR.dUTransfer</class>]]></Description>
<ReturnType>alTFR.dUTransfer</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 29-Oct-2008	HQN	Correct usage of i% r%
	;-------------------------------------------------------------------------------
	if (i%Transfer = $$$NULLOID) && (%this.TransferNumber '= $$$NULLOREF) {
		set i%Transfer = "0||"_%this.TransferNumber
	}
	if (r%Transfer = $$$NULLOREF) && (i%Transfer '= $$$NULLOID) {
		set r%Transfer = ##class(alTFR.dUTransfer).%OpenId(i%Transfer)
	}
	quit r%Transfer
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="UpdateObject">
<FormalSpec>pidFromINWE:%String,pobjFromINWE:%String,pidToINWE:%String,pobjToINWE:%String,pQtyTransfer:%Float</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Called by : INWE1V2 - Creation of V2 objects from V1 transaction
	; 
	; Note: though pobjToINWE is passed in, the attributes used to generate a
	;       matching bundle should match with those in pidFromINWE and the 'To'
	;       record is therefore not used.
	; 
	; History:
	; 09-sep-2008 	Luke	SR15897 Reverted SR15800:
	; 01-Aug-2008	Luke	SR15814: Corrected sc formation and use of $$$Text
	; 16-Jul-2008   Luke    SR15800: Add check if the Conversion has been run
	; 06-May-2008	GRF		SR15717: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
		set objMove = ##class(alTFR.dMovementIssue).%New()
	 //	set objMove.MovementType    <<<    alDRP.dMovementType.TransferIssue
	 	set objMove.Bundle  = %this.GetBundleFromINWE(pidFromINWE,pobjFromINWE,.sc)
	 	
	 	set idFromLocn  = $$$KEY2(pidFromINWE)
	 	set idFromStore = $$$KEY3(pidFromINWE)
	 	set idToLocn    = $$$KEY2(pidToINWE)
	 	set idToStore   = $$$KEY3(pidToINWE)
		
		if $$$ISOK(sc) {
			set objItem = ##class(alINV.iUINV).GetItem(%this.Item,.sc) //SRSR15673
		}
		if $$$ISOK(sc) {
			set objMove.Item        = objItem
			
			set objMove.FromLocn    = ##class(alLOC.iLOC).GetLocation(idFromLocn)
			set objMove.FromStorage = ##class(alLOC.iLOC).GetStorage(idFromLocn,idFromStore)
			set objMove.ToLocn      = ##class(alLOC.iLOC).GetLocation(idToLocn)
			set objMove.ToStorage   = ##class(alLOC.iLOC).GetStorage(idToLocn,idToStore)
		 	
		 //	set objMove.DueDate         = %this.                      ; Not Implemented yet
			set objMove.Reference       = %this.TransferNumber
			set objMove.LineNumber      = %this.TransferLineNumber
			set objMove.QtyPicked       = pQtyTransfer
			set objMove.QtyReceived     = 0
			set objMove.QtyRequired     = 0
			set objMove.Supply          = ""
			set objMove.Demand          = %this.Demand
			set objMove.Completed       = $$$NO
		}	
		if $$$ISOK(sc) {
			set sc = objMove.ChangeState(4)       ; alSYS.State.iStateMachine
		}   ;	Processed through (alDRP.dMovementType.TransferIssue).Confirm()
	quit sc
]]></Implementation>
</Method>

<Method name="GetBundleFromINWE">
<FormalSpec>pidINWE:%String,pobjINWE:%String,*sc:%Status</FormalSpec>
<ReturnType>alSOH.dBundle</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 01-Aug-2008	Luke	SR15814: Corrected sc formation and use of $$$Tex
	; 20-May-2008	GRF		SR15717: Replace result set with direct access to policy
	; 							attributes; Lot Number error message
	; 13-May-2008	HQN 	SR15699: Translated errors
	; 09-May-2008	GRF		SR15717: Correction to ReceiveDate
	; 22-Apr-2008	HQN		SR15673: Corrected reference to iUINV
	;-------------------------------------------------------------------------------
	set strReference = %this.TransferNumber_","_%this.TransferLineNumber
	set objItem = ##class(alINV.iUINV).GetItem(%this.Item,.sc) // SR15673
	
	if $$$ISOK(sc) {
		set objPolicy = objItem.ItemPolicy
		set hashmap   = ##class(%ArrayOfDataTypes).%New()
		
		for loop=1:1:objPolicy.Attributes.Count() {
			set obj     = objPolicy.Attributes.GetAt(loop) 
			set objAttr = obj.Attribute
			
			if objAttr.Name = "Lot Number" {
				set strAttrValue = $$$INWELotNo(pobjINWE)
				if strAttrValue'="" {
					do hashmap.SetAt(strAttrValue, "Lot Number")
				} else {
					set strMessage = $$$Text($lb("alTFR0004",strReference))      // SR15814:
					set sc =$$$ERROR($$$GeneralError,strMessage)
					//set sc = $$$MakeStatus("alTFR0004",strReference) ; Transfer (%1) Lot Number not set
				}
				
				
 			} elseif objAttr.Name = "Purchase Cost" {
	 			set strAttrValue = $$$INWEUnitPrice(pobjINWE)
				if strAttrValue'="" {
					do hashmap.SetAt(strAttrValue, "Purchase Cost")
				} else {
					set sc = $$$MakeStatus("alTFR0001",strReference) ; Transfer (%1) Purchase Cost not set ; SR15699
				}
				
				
 			} elseif objAttr.Name = "ReceiptNo"     {
	 		;	set strAttrValue = $piece(pobjINWE,"~",1)
	 			set strAttrValue = $piece($piece(pidINWE,",",4),".",2)
				if strAttrValue="" set strAttrValue = "0"
				do hashmap.SetAt(strAttrValue, "ReceiptNo")
				
				
 			} elseif objAttr.Name = "ReceiveDate"   {
	 			set strAttrValue = +$piece($piece(pidINWE,",",4),".",1)
				if strAttrValue'="" {
					do hashmap.SetAt(strAttrValue, "ReceiveDate")
				} else {
					set strMessage = $$$Text($lb("alTFR0002",strReference))      // SR15814:
					set sc =$$$ERROR($$$GeneralError,strMessage)
					//set sc = $$$MakeStatus("alTFR0002",strReference) ; Transfer (%1) ReceiveDate not set ; SR15699
				}
				
				
 			} elseif objAttr.Name = "Use By Date"   {
	 			set strAttrValue = $$$INWEUseableUntilDate(pobjINWE)
				if strAttrValue'="" {
					do hashmap.SetAt(strAttrValue, "Use By Date")
				} else {
					set strMessage = $$$Text($lb("alTFR0003",strReference))      // SR15814:
					set sc =$$$ERROR($$$GeneralError,strMessage)
					//set sc = $$$MakeStatus("alTFR0003",strReference) ; Transfer (%1) Use By Date not set ; SR15699
				}
			}
		}
		
	}
	if $$$ISOK(sc) {
		set objBundle = ##class(alSOH.iSOH).GetBundle(%this.Item,.hashmap)
	} else {
		set objBundle = $$$NULLOREF
	}
		
	quit objBundle
]]></Implementation>
</Method>

<Method name="Ship">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	; For every planned movement associated with this transfer line, ship it
	set lstMovements = ##class(%Library.ListOfObjects).%New()
	set lstMovements.ElementType = "alDRP.dPlannedMovement"
	
	set objResultSet = ##class(%Library.ResultSet).%New()
	if objResultSet.Prepare("SELECT * FROM alDRP.dPlannedMovement WHERE Item = ? AND FromLocn = ? AND REFERENCE = ? AND LineNumber = ?") {
		if objResultSet.Execute(%this.Item,%this.Transfer.SendingLocation,%this.TransferNumber,%this.TransferLineNumber) {
			while objResultSet.Next() {
				do lstMovements.InsertObjectId(objResultSet.Data("ID"))
			}
		}
	}
	for loopMovements=1:1:lstMovements.Count() {
		set objMove = lstMovements.GetAt(loopMovements)
		set childSc = objMove.ChangeState(4)
		set:$$$ISERR(childSc) sc = $$$ADDSC(sc, childSc)
	}
	quit $$$ERROR($$$MethodNotImplemented)
]]></Implementation>
</Method>

<Method name="CreateFromReqLine">
<ClassMethod>1</ClassMethod>
<FormalSpec>objUReqLine:alREQ.dUReqLine</FormalSpec>
<ReturnType>alTFR.dUTransferLine</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 22-Apr-2013	SCR		HEVA-764: Changed Default Qty based on Req Unit
	; 15-Sep-2011	GRF		SR17823.1: QtyIssue is in Inventory Unit
	; 06-Sep-2011	GRF		SR17823: Transfer qty should be reduced by qty already
	;							issued even if not yet received.
	; 25-May-2011	GRF		SR17250: relocate GetQtyDecimals; fix parentheses in IF
	; 07-Feb-2011	GRF		SR17579: Justify BaseQuantity result (FIXME : Consider V2 for INART)
	; 04-Feb-2011	GRF		SR17579: Rename CalculateBaseQuantity
	;-------------------------------------------------------------------------------
	set objTfrLine = ""
	if '(objUReqLine.Rejected || objUReqLine.Cancelled) && '((objUReqLine.Status.StatusCode = 7) || (objUReqLine.Status.StatusCode = 8)) {
	// SR17823.1 vvv
		set idItem    = objUReqLine.Item
		set idUnit    = objUReqLine.Unit  ; [Req Unit]
		set idInvUnit = $$$INARTUnitofMeasure($get(^INART(0,idItem,1)))
		
		set fltIssuedQty = $$Convert^INUOMConversion(idItem,objUReqLine.QtyIssued,idInvUnit,idUnit)
	// SR17823.1 ^^^
	
		set objTfrLine = ##class(alTFR.dUTransferLine).%New()
		set objTfrLine.Company   = objUReqLine.Company
	//	set (objTfrLine.Item,idItem) = objUReqLine.Item        ; SR17823.1 vvv
	//	set (objTfrLine.Unit,idUnit) = objUReqLine.Unit                               ; [Req Unit]
		set objTfrLine.Item      = idItem
		set objTfrLine.Unit      = idUnit                                             ; [Req Unit]
	//	set objTfrLine.Quantity  = objUReqLine.QtyOrdered - objUReqLine.QtyReceived   ; [Req Unit] SR17823, SR17823.1 ^^^
		set objTfrLine.Quantity  = objUReqLine.QtyOrdered - fltIssuedQty              ; [Req Unit]
		if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(0,0,1)))) {
			set objTfrLine.FREE1        = objUReqLine.QtyOrdered
			set objTfrLine.FREE2        = objUReqLine.QtyIssued
			if (objUReqLine.QtyRequired - objUReqLine.QtyIssued)>0 {
				set objTfrLine.Quantity     =  objUReqLine.QtyOrdered - fltIssuedQty ; HEVA-764 
				;set objTfrLine.Quantity     = objUReqLine.QtyRequired - objUReqLine.QtyIssued

			}else{
				quit $$$NULLOREF
			}
		}else{
			set objTfrLine.Quantity     = objUReqLine.QtyOrdered - objUReqLine.QtyReceived
		}
		set objTfrLine.Reference = objUReqLine.ReqNumber_","_objUReqLine.LineNumber
	//                                                                                                   ; SR17579 vvv
	//	set objTfrLine.BaseQuantity = $$CalculateBaseQuantity^INUOMConversion(objTfrLine.Item,objTfrLine.Unit,objTfrLine.Quantity) ; TODO: Utilise Pure V2 Calculations
		set fltBaseQty = $$CalcInventoryQty^INUOMConversion(objTfrLine.Item,objTfrLine.Unit,objTfrLine.Quantity) ; [Inv Unit]
		
	//	set objTfrLine.BaseQuantity = fltBaseQty                                         ; [Invent Unit]
	//	set idInventUnit = $piece($get(^INART(0,idItem,1)),"~",40)
	//	set intNumDP     = $$GetQtyDecimals^COMGridEditUtil("INTFRReqLine",2,idInventUnit,2)  ; may also be called from form INTFRLine? - keep forms in sync if so ; SR17250
		set intNumDP     = $$GetDecimalPlaces^COMUtilNum("INTFRReqLine",2,idUnit,"","")

		set objTfrLine.BaseQuantity = +$justify(fltBaseQty,0,intNumDP)                    ; [Invent Unit] ; SR17579 ^^^
	}
	quit objTfrLine
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>