<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.mail.MailSender">
<ClassType/>
<Import>VAR.infra.util</Import>
<ProcedureBlock>0</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Property name="Port">
<Type>%Integer</Type>
</Property>

<Property name="Server">
<Type>%String</Type>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="User">
<Type>%String</Type>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Password">
<Type>%String</Type>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnNew">
<FormalSpec>pServer:%String,pPort:%Integer,pUser:%String,pPassword:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set status = $system.Status.OK()
	if ($get(pPort) = 0) quit $system.Status.Error(0,"No port defined")
	set ..Port = pPort
	
	if ($get(pServer) = "") quit $system.Status.Error(0,"No server defined") 
	set ..Server = pServer 
	
	set ..User = $get(pUser)
	set ..Password = $get(pPassword)
	quit status]]></Implementation>
</Method>

<Method name="SendMail">
<FormalSpec>pFrom:%String,pTo:%String,pCc:%String,pBcc:%String,pSubject:%String,pMessage:%String,pIsHtml:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	new status, smtp, message, authenticator, i, DISPLAYTO, NAME, ADDRESS
	set status = $$$OK
	set pTo = ##class(Strings).FullReplace(pTo, "|", "")
	set pTo = ##class(Strings).FullReplace(pTo, ";", ",")
	set pCc = ##class(Strings).FullReplace(pCc, "|", "")
	set pCc = ##class(Strings).FullReplace(pCc, ";", ",")
	set pBcc = ##class(Strings).FullReplace(pBcc, "|", "")
	set pBcc = ##class(Strings).FullReplace(pBcc, ";", ",")
	set smtp=##class(%Net.SMTP).%New()
	set smtp.smtpserver = ..Server
	set smtp.port       = ..Port
	set message=##class(%Net.MailMessage).%New()
	
	// Authentication
	if (..User '= "") {
		set authenticator=##class(%Net.Authenticator).%New() ; use default authentication list
		set authenticator.UserName   = ..User
		set authenticator.Password   = ..Password
		set smtp.authenticator = authenticator
	}
	
	set message.From= pFrom
	// to list
 	set i = 1
	while ($piece(pTo,",",i) '= ""){
		set DISPLAYTO = $piece(pTo,",",i)
		set NAME = $piece(DISPLAYTO,"<",1)
		set ADDRESS = $piece(DISPLAYTO,"<",2)
		if ( $piece(DISPLAYTO,"<",2) = "") {
			do message.To.Insert(NAME)  
		} else {
			do message.To.Insert(NAME_" <"_ADDRESS) 
		}
		set i = i +1
	}
	// cc list
	set i = 1
	while ($piece(pCc,",",i) '= ""){
		set DISPLAYTO = $piece(pCc,",",i)
		set NAME = $piece(DISPLAYTO,"<",1)
		set ADDRESS = $piece(DISPLAYTO,"<",2)
		if ( $piece(DISPLAYTO,"<",2) = "") {
			do message.Cc.Insert(NAME)  
		} else {
			do message.Cc.Insert(NAME_" <"_ADDRESS) 
		}
		set i = i +1
	}
	// bcc list
	set i = 1
	while ($piece(pBcc,",",i) '= ""){
		set DISPLAYTO = $piece(pBcc,",",i)
		set NAME = $piece(DISPLAYTO,"<",1)
		set ADDRESS = $piece(DISPLAYTO,"<",2)
		if ( $piece(DISPLAYTO,"<",2) = "") {
			do message.Bcc.Insert(NAME)  
		} else {
			do message.Bcc.Insert(NAME_" <"_ADDRESS) 
		}
		set i = i +1
	}
	set message.Subject=pSubject
	set message.Charset="iso-8859-1"
 	set message.IsHTML  = ''pIsHtml
 	// test
	do message.TextData.Write(pMessage)
	
	// Send email
	set status=smtp.Send(message)
	
	if 'status {
		w ##class(%SYSTEM.Status).DisplayError(status)
		do $System.Status.DecomposeStatus(status, .lstErrors)
	}
	quit status]]></Implementation>
</Method>

<Method name="countEmailList">
<FormalSpec>list:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	new count
	set count = 0
	while ($piece(list,",",count+1) '= ""){
		set count = count + 1
	}
 
	quit count]]></Implementation>
</Method>
</Class>
</Export>