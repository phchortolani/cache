<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alREQ.dUReqLine">
<ClassType>persistent</ClassType>
<IncludeCode>INConst,COMSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<StorageStrategy>StorageAtNet</StorageStrategy>
<Super>User.INReqLine</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; History
; 15-Jan-2009	HQN		Moved GetReqLines query from dUReq so the table schema
; 							compiles in correct sequence
; 30-Jan-2008	LB		SR15626 Changed the signature of dStatus to dUStatus
; 24-Jan-2008	HQN		SR15625 Copied from INREQLine; Changed class signature
; 							dLocation to dULocation and dREQ to dUReq
/---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="Company">
<Type>%String</Type>
<InitialExpression>"0&quot;</InitialExpression>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00248"/>

<Parameter name="MAXLEN" value="30"/>

<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>


<Property name="objFromStockLocn">
<Type>alLOC.dULocation</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00253"/>
</Property>


<Property name="objStatus">
<Type>alSYS.Status.dUStatus</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00254"/>
</Property>


<Property name="QtyIssued">
<Description><![CDATA[
QtyIssued]]></Description>
<Type>%Float</Type>
<InitialExpression>0</InitialExpression>

<Parameter name="CAPTION" value="QtyIssued"/>
</Property>


<Property name="QtyReceived">
<Description><![CDATA[
QtyReceived]]></Description>
<Type>%Float</Type>
<InitialExpression>0</InitialExpression>

<Parameter name="CAPTION" value="QtyReceived"/>
</Property>


<Property name="QtyToIssue">
<Description><![CDATA[
QtyToIssue]]></Description>
<Type>%Float</Type>
<InitialExpression>0</InitialExpression>

<Parameter name="CAPTION" value="QtyToIssue"/>
</Property>


<Property name="Requisition">
<Type>alREQ.dUReq</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00250"/>
</Property>


<Property name="objSupply">
<Type>User.INDRPSUPPLY</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00255"/>
</Property>


<Property name="Supply">
<Type>%String</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00251"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="objDemand">
<Type>User.INDRPDEMAND</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00252"/>
</Property>


<Property name="Demand">
<Type>%String</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00249"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Query name="GetReqLines">
<Type>%SQLQuery</Type>
<FormalSpec>ReqNum:%String</FormalSpec>
<SqlQuery>SELECT %ID,Company,DueDate,FromStockLocn,Item,LineNumber,QtyIssued,QtyOrdered,QtyReceived,QtyRequired,QtyToIssue,QtyToReceive,ReqNumber,Status,Unit FROM alREQ.dUReqLine
 WHERE (ReqNumber = :ReqNum)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="upDateStatus">
<Description><![CDATA[
Updates the Status Field on the gridline for status by creating a status object
and taking the description from it. <br><br>

 TODO: When we access to a USER interface, get the User details from the interface and 
 get the information regarding the date of the parent from the DATEN. <br>
 At the moment resides in the INReqLine.mac <br>]]></Description>
<Implementation><![CDATA[
	// TODO DELETE from script and here  <lb>
	; FIXME : <GRF> rename as UpdateStatus()
	;do UpdateManualField^COMGridEdit31Interface(%this.LineNumber,10,%this.Status.StatusCode)
]]></Implementation>
</Method>

<Method name="StatusSet">
<FormalSpec>Arg</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $IsObject(Arg) && Arg.%Extends("alSYS.Status.dUStatus") { 
		set i%objStatus = $$$NULLOREF
		set i%Status = Arg.StatusCode
	} elseif (Arg?.N1"||".A1"||".N) {
		set i%Status = $piece(Arg,"||",3) ; hack, OID expected in this format "0||ClassName||YKEY"
	} else {
		set i%Status = Arg
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="StatusGet">
<ReturnType>alSYS.Status.dUStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 25-Feb-2008	GRF		Corrected pairing of parentheses
	;-------------------------------------------------------------------------------
	;quit ##class(alSYS.Status.dUStatus).%OpenId("0||INReqLine||"_i%Status)
	if ((i%Status '= $$$NULLOREF) && (i%objStatus = "")) ||
	   ($IsObject(i%objStatus)   &&  (i%objStatus.StatusCode '= i%Status)) {
		set i%objStatus =  ##class(alSYS.Status.dUStatus).%OpenId("0||INReqLine||"_i%Status)
	}
	quit i%objStatus
]]></Implementation>
</Method>

<Method name="RequisitionSet">
<FormalSpec>objReq:alREQ.dUReq</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	; attempt to do auto swizzling as a relation
	set i%Requisition = objReq
]]></Implementation>
</Method>

<Method name="RequisitionGet">
<ReturnType>alREQ.dUReq</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008 	HQN		SR15625 Changed class signature dREQ to dUReq
	;-------------------------------------------------------------------------------
	if (i%Requisition = $$$NULLOREF) && (%this.ReqNumber '= "") {
		set i%Requisition = ##class(alREQ.dUReq).%OpenId("0||"_%this.ReqNumber)
	}
	quit i%Requisition
]]></Implementation>
</Method>

<Method name="getHeaderStatus">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// TODO : Clean up <lb>
	// Looks like we can remove this as it is not accessed
	 
	//FIXME : <GRF> rename as GetHeaderStatus()
	quit ..Requisition.Status
]]></Implementation>
</Method>

<Method name="NewRecord">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set returnval = $$$NO 
	//set x = %this.%Id() 
	if %this.%Id() = $$$NULLOREF {
		set returnval = $$$YES 
	}
	quit returnval
]]></Implementation>
</Method>

<Method name="ANMSave">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 30-Oct-2009	DWR		SR16999: pass status message into $$DecodeError^COMUtilError
	; 07-Aug-2008	Luke	SR15814 SR15831: corrected sc return value
	; 01-Aug-2008	Luke	SR15814: Corrected sc formation and use of $$$Tex
	;-------------------------------------------------------------------------------
	set sc = $$$OK 
	set ANMKeyLine = %this.Requisition.ReqNum_","_%this.LineNumber 
	set ANMReqLine = $get(^INReqLine(%this.Company,%this.Requisition.ReqNum,%this.LineNumber,1))
	set $$$INReqLineItem(ANMReqLine)          = i%Item 
	set $$$INReqLineUnit(ANMReqLine)          = i%Unit
	set $$$INReqLineQtyOrdered(ANMReqLine)    = i%QtyOrdered
	set $$$INReqLineQtyRequired(ANMReqLine)   = i%QtyRequired
	set $$$INReqLineQtyToReceive(ANMReqLine)  = i%QtyToReceive
	set $$$INReqLineQtyReceived(ANMReqLine)   = i%QtyReceived
	set $$$INReqLineQtyToIssue(ANMReqLine)    = i%QtyToIssue
	set $$$INReqLineQtyIssued(ANMReqLine)     = i%QtyIssued
	set $$$INReqLineFromStockLocn(ANMReqLine) = i%FromStockLocn
	set $$$INReqLineStatus(ANMReqLine)        = i%Status
	set $$$INReqLineDueDate(ANMReqLine)       = i%DueDate

  	set strStatus = $$Save^COMUtils("INReqLine",ANMKeyLine,ANMReqLine,$$$YES)
	; should this be a save always without checking locks?
	if $$$ISERR(strStatus){
		set strMessage = $$DecodeError^COMUtilError(strStatus)    
		set sc = $$$ERROR($$$GeneralError,strMessage)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="SupplyGet">
<ReturnType>User.INDRPSUPPLY</ReturnType>
<Implementation><![CDATA[
	if (%this.%Id()'=$$$NULLOREF) && (i%objSupply=$$$NULLOREF) {
		set objResultSet = ##class(%Library.ResultSet).%New()
		do objResultSet.Prepare("SELECT ID FROM SQLUser.INDRPSUPPLY WHERE SupplyType = 7 AND RequisitionNumber = ? AND Reference = ?")
		set sc = objResultSet.Execute(%this.ReqNumber, %this.LineNumber) 
		if objResultSet.Next(.sc) {
			set objSupply = ##class(User.INDRPSUPPLY).%OpenId(objResultSet.Get("ID"))
			if '$$$ISERR(objSupply) {
				set i%Supply    = objSupply.SupplyNo
				set i%objSupply = objSupply
			}
		}
	}
	quit i%objSupply
]]></Implementation>
</Method>

<Method name="DemandGet">
<ReturnType>User.INDRPDEMAND</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 07-Dec-2007	HQN		Changed DemandType value comparison to reflect new
	; 							status code (5 -> 7)
	;-------------------------------------------------------------------------------
	if (%this.%Id()'=$$$NULLOREF) && (i%objDemand=$$$NULLOREF) {
		set objResultSet = ##class(%Library.ResultSet).%New()
		do objResultSet.Prepare("SELECT ID FROM SQLUser.INDRPDEMAND WHERE DemandType = 7 AND RequisitionNumber = ? AND Reference = ?")
		set sc = objResultSet.Execute(%this.ReqNumber, %this.LineNumber)
		if objResultSet.Next(.sc) {
			set objDemand = ##class(User.INDRPDEMAND).%OpenId(objResultSet.Get("ID"))
			if '$$$ISERR(objDemand) {
				set i%Demand = objDemand.DemandNo
				set i%objDemand = objDemand
			}
		}
	}
	quit i%objDemand
]]></Implementation>
</Method>

<Method name="FromStockLocnSet">
<FormalSpec>strStockLocn</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;-------------------------------------------------------------------------------
	if $IsObject(strStockLocn) && strStockLocn.%Extends("alLOC.dULocation") {
		set i%objFromStockLocn = strStockLocn
		set i%FromStockLocn = i%objFromStockLocn.Location
		
	} elseif (strStockLocn?.N1"||".A1"||".N) {
		set i%FromStockLocn = $piece(strStockLocn,"||",3) ; hack, OID expected in this format "0||ClassName||YKEY"
		
	} else {
		set i%FromStockLocn = strStockLocn
	}
]]></Implementation>
</Method>

<Method name="FromStockLocnGet">
<ReturnType>alLOC.dULocation</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;-------------------------------------------------------------------------------
	if (i%FromStockLocn '= $$$NULLOREF) && (i%objFromStockLocn = $$$NULLOREF) {
		set objFromStockLocn = ##class(alLOC.dULocation).%OpenId("0||"_i%FromStockLocn)
		if (objFromStockLocn '= $$$NULLOREF) {
			set i%objFromStockLocn = objFromStockLocn
		}
	}
	quit i%objFromStockLocn
]]></Implementation>
</Method>

<Method name="AutoClose">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;---------------------------------------------------------------------
	; History
    ; 05-Jul-2012 	SCR 	SR18045:Consider Rejected Quantity also
	; 03-Jun-2011	PPP		SR17776:If Already closed do not try closing
	; 26-Feb-2008	GRF		Error code; $$$MakeStatus (SR15814?)
	; 18-Dec-2007	HQN		Altered check to utilise QtyReceived instead
	; 							of Issued
	;---------------------------------------------------------------------
	set sc = $$$OK

	if '%this.IsClosed()	{
		if %this.IsClosable() {
        	;if %this.QtyReceived >= %this.QtyRequired {
        	if (%this.QtyReceived + %this.QtyRejected)>= %this.QtyRequired {
				set %this.Status = 9 ; Auto - Close
			}
			set sc = %this.%Save()
		} else {
			set strMessage = $$$Text("IN00731")
			set sc = $$$ERROR($$$GeneralError,strMessage)
		} ; "Not in a closable state"
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="ManuallyClose">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;---------------------------------------------------------------------
	; History
	; 20-Sep-2010	shobby	SR17485: Don't close if not closeable.
	; 27-Jan-2010	PPP		SR17145: If the Req Line has an Imported Demand, 
	;						reset the demand values
	; 14-Dec-2007	HQN		Check for NULLOREF INDRP due to Open ReqLines
	; 06-Dec-2007	HQN		TODO: Remove/Unlink Issues associated with
	; 							this Requisition
	;---------------------------------------------------------------------
	set sc=$$$OK
	if ..IsClosable() {
		set objManualCloseStatus = ##class(alSYS.Status.dUStatus).%OpenId("0||INReqLine||8") ; M-Close
		set objAutoCloseStatus   = ##class(alSYS.Status.dUStatus).%OpenId("0||INReqLine||9") ; A-Close

		if (%this.QtyRequired > %this.QtyIssued) {
			set %this.QtyRequired = %this.QtyIssued 
		}
		if (%this.QtyRequired > %this.QtyReceived) {
			set %this.QtyRequired = %this.QtyReceived
		}
		set %this.Status = objManualCloseStatus

		// Update Imported Demand    ; SR17145
		if %this.ImportedDemand {
			do ResetDemand^INDRPReq(%this)
		
		} else {
			; set closed for DRP records
			if %this.Supply '= $$$NULLOREF {
				set %this.Supply.Closed = $$$YES
				do %this.Supply.%Save()
			}

			if %this.Demand '= $$$NULLOREF {
				set %this.Demand.DemandClosed = $$$YES
				do %this.Demand.%Save()
			}
		}
	} else {
		set strMessage = $$$Text("IN01265")
		set sc = $$$ERROR($$$GeneralError,strMessage)
	} ; "Unable to close."
	quit sc
]]></Implementation>
</Method>

<Method name="ManuallyCloseRelated">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (..Requisition.Type = 1) { ; Department
		set sc=..ManuallyCloseRelatedIssues()
	} elseif (..Requisition.Type = 2) { ;Transfers
		set sc=..ManuallyCloseRelatedTransfers()
	}
	quit sc
]]></Implementation>
</Method>

<Method name="ManuallyCloseRelatedIssues">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Close the issues related to this line
	;	
	; Called By : Button
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 13-Sep-2010	shobby	SR17485:Created
	;-------------------------------------------------------------------------------
	
	set lstIssues = ##class(alREQ.dUReqIssue).GetByReqNum(%this.ReqNumber,.sc)
	if $$$ISOK(sc) {
		for loopIssues=1:1:lstIssues.Count() {
			set objIssue = lstIssues.GetAt(loopIssues)
			if objIssue.Status.StatusCode = 1 { ; Open Issue
				for loopIssueLine=1:1:objIssue.IssueLines.Count() {
					set objIssueLine = objIssue.IssueLines.GetAt(loopIssueLine)
					if objIssueLine.Reference=%this.LineNumber {
						set sc = objIssueLine.ManuallyClose()
						if $$$ISOK(sc) set sc = objIssueLine.%Save()
					}
					quit:$$$ISERR(sc)
				}
			}
			quit:$$$ISERR(sc)
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="ManuallyCloseRelatedTransfers">
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Close the issues related to this line
	;	
	; Called By : Button
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 13-Sep-2010	shobby	SR17485:Created
	;-------------------------------------------------------------------------------
	
	set sc = $$$OK

	set objResultSet = ##class(%Library.ResultSet).%New("alTFR.dUTransferLine:GetTfrLinesViaReqLines")
	set sc = objResultSet.Execute(%this.ReqNumber,%this.LineNumber)

	if $$$ISOK(sc) {
		while objResultSet.Next(.sc) {
			quit:$$$ISERR(sc)
			set idTransferLine="0||"_objResultSet.Data("ID")_"||"_objResultSet.Data("Line")
			set objUTransferLine = ##class(alTFR.dUTransferLine).%OpenId(idTransferLine,,.sc)
			if objUTransferLine '= $$$NULLOREF {
				set intStatus = objUTransferLine.Transfer.Status
				if (intStatus = 0) {		; Open
					if objUTransferLine.Transfer.TfrLines.Count()=1 {
						set sc = objUTransferLine.Transfer.%DeleteId(objUTransferLine.%Id())
					}
					if $$$ISOK(sc) set sc = objUTransferLine.%DeleteId(objUTransferLine.%Id())
				} else {  ; Firmed and others
					set sc = $$$MakeStatus("Unable to delete") ;######    ; FIXME WWW009
				}
			}
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="FirmRequisition">
<Description><![CDATA[
Firms the REQLine <br>

checks to see if it is firmable, 
then creates a supply and demand if it can be. 
<br>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 12-Feb-2010	GRF		SR17145/2: INDRPReq functions return strStatus - convert
	; 							to sc here if necessary
	; 11-Feb-2010	PPP		SR17145/1: Checked Status correctly
	; 27-Jan-2010	PPP		SR17145: If the Req Line has an Imported Demand, do not
	; 							create a new one
	; 07-Dec-2007	HQN		SR15598: Checks validity before processing
	;-------------------------------------------------------------------------------
	/* now set prior to operating
	if (%this.QtyOrdered = $$$NULLOREF) || (%this.QtyOrdered = 0) {
		set %this.QtyOrdered = %this.QtyRequired 
	}*/
	set sc = %this.IsFirmable()
	if $$$ISOK(sc) {
		if %this.DueDate = ""     set %this.DueDate     = +$horolog
		if %this.QtyToIssue = ""  set %this.QtyToIssue 	= 0
		if %this.QtyIssued = ""   set %this.QtyIssued 	= 0
		if %this.QtyReceived = "" set %this.QtyReceived = 0

		//set sc = $$$NO
		//SR17145
		/*if %this.ImportedDemand || ($$CreateSupply^INDRPReq(%this,.supplykey) && $$CreateDemand^INDRPReq(%this,supplykey)) {
			set %this.Status = 2                                 ; Firmed
			set sc = %this.ANMSave()
		}
		*/
		
		//SR17145
		//set strStatus =$$$OK
		set supplyKey = ""
		if %this.ImportedDemand {      // Update demand
			set strStatus = $$UpdateDemand^INDRPReq(%this)
			
		} else {                       // Create a Demand & Supply
			set strStatus = $$CreateSupply^INDRPReq(%this,.supplykey)     // SR17145/1 SR17145/2
			if $$$ISOK(strStatus) {
				set strStatus = $$CreateDemand^INDRPReq(%this,supplykey)
			}
		}
 		if $$$ISERR(strStatus) {
 			set sc = $$$ERROR($$$GeneralError,$$DecodeError^COMUtilError(strStatus))   ; SR17145/2
 		}
		
		if $$$ISOK(sc) {
			set %this.Status = 2                                 ; Firmed
			set sc = %this.ANMSave()		
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
Checks to see if the object identified by the ID <var>id</var> exists in the extent.

<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>id:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Wrapper to prepend company to key before checking for record
	; 
	; 
	; TODO : Check if now obsolete
	; 
	; History
	; 27-Nov-2007	GRF		SR15615: Created
	;-------------------------------------------------------------------------------
	set %code=0
	$$$GENERATE(" quit ##super(""0||""_id)")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="IsFirmable">
<Description><![CDATA[
Checks if the Line can be changed into a firmed status. <br>
this checks <br>
	- QtyRequired is greater than 0 and not less then 0  <br>
<br>
TODO <br>
Add Location validation review<br>
if %this.objFromStockLocn<br>
if %this.ReqNumber.objToLocn<br>
ValidRelation^WWWFieldValidation<br>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; History
	; 08-Jun-2010	PPP		SR17351: Allow ""/0 on QuantityRequired
	; 09-Oct-2008 	Luke 	SR16017: Allow "" on the datedue field
	; 07-Oct-2008	Luke	SR15946: added date check on the line 
	; 01-Aug-2008	Luke	SR15814: Corrected sc formation and use of $$$Text
	; 20-May-2008	HQN		SR15762: Corrected passing back status code for QtyRequired
	; 02-May-2008	Luke	SR15699: Language codes for errors
	; 13-Dec-2007	GRF		Additional validation of locations
	; 07-Dec-2007	HQN		SR15598: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	//VV SR17351
	// (%this.QtyRequired = "") || (%this.QtyRequired < 0) {
	//	set strMessage =$$$Text($listbuild("alREQ0003",%this.LineNumber))
	//	set sc =$$$ERROR($$$GeneralError,strMessage)
	//}
	//if $$$ISOK(sc) && (%this.QtyRequired = 0) {
	//	set strMessage =$$$Text($listbuild("alREQ0004",%this.LineNumber))
	//	set sc =$$$ERROR($$$GeneralError,strMessage)
	//}	//^^ SR17351
	
	if $$$ISOK(sc) && (%this.DueDate '= "" ) {
		if (%this.DueDate < $horolog) {
			set strMessage = $$$Text("INREQ23")       
			set sc = $$$ERROR($$$GeneralError,strMessage)
		}
	}
	
	if $$$ISOK(sc) {
	; Check INReqLine FromLocn to INReq ToLocn must be same main locn but different locn
		set ANMKey    = %this.Requisition.ReqNum_","_%this.LineNumber 
		set ANMData   = $get(^INReqLine(%this.Company,%this.Requisition.ReqNum,%this.LineNumber,1))
		set strStatus = $$$OK 
 		set strStatus = $$TempReqLineValidation^WWW0121(ANMKey,ANMData,%this.Company,%this.FromStockLocn.Location)
 		if $$$ISERR(strStatus) {
 			set sc = $$$ERROR($$$GeneralError,$$DecodeError^COMUtilError(strStatus))
 		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="IsClosed">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Checks if this line is already closed.
	; 
	; History
	; 22-Sep-2010	shobby		SR17485: Created
	;-------------------------------------------------------------------------------
	set blnResult = $$$NO
	//Firmed, ManualClosed, AutoClosed	//SR16586 (Added 2) //SR16838 (Removed 2)
	//7 - Active/Pending	
	if (%this.Status.StatusCode = 8) || (%this.Status.StatusCode = 9) {  ;SR17485
		set blnResult = $$$YES
	}
	
	quit blnResult
]]></Implementation>
</Method>

<Method name="IsClosable">
<Description><![CDATA[
Checks the validity of a REQLine to be closed.]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 20-Sep-2010	shobby	SR17485: Don't allow closing of Active/Pending.
	; 13-Aug-2009	PPP		SR16838: The Status = 2, Firmed, does not need to be checked.
    ; 29-May-2009	PPP		SR16586: Simplify Process (remove unnecessary calls to Script Engine/State Engine)
	; 19-Dec-2007	HQN		SR15598: Created
	;-------------------------------------------------------------------------------
	set blnResult = $$$YES
	//Firmed, ManualClosed, AutoClosed
	//7 - Active/Pending	
	if (%this.Status.StatusCode = 8) || (%this.Status.StatusCode = 9)|| (%this.Status.StatusCode = 7) {  ;SR17485
		set blnResult = $$$NO
	}
	
	quit blnResult
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called before 
any data is written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 17-Sep-2010	SCR		SR17471: Call to super
	; 16-Dec-2007	HQN		Check for NULLOREFs
	;-------------------------------------------------------------------------------
	if (i%objStatus '= $$$NULLOREF) && (i%objStatus.%IsModified()) {
		set i%Status = i%objStatus.StatusCode
	}
	set sc = ##Super(insert) ; SR17471
	
	quit sc
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>