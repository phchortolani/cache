<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsHL7MsgTablePane">
<Description><![CDATA[
Specialized pane for displaying a list of messages.]]></Description>
<ClassType/>
<IncludeCode>Ensemble,EnsUI</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>CSPX.EnsMsgTablePane</Super>
<System>3</System>

<Method name="CreateResultSet">
<FormalSpec>&amp;pID:%String,&amp;pRS:%ResultSet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	#; if not an explicit execute request (or history), skip it
	If ($G(^Ens.Debug("DelayQueries"))&&'$D(%request.Data("$EXEC",1))) {
		Set pRS = $$$NULLOREF
		Quit $$$OK
	}
	#; get request parms via object
	Set tFilterObj = ##class(CSPX.EnsMsgFilterForm).CreateInstance(.pID)
	Set tNextId=$G(%request.Data("$NextID",1))
 w:$G(^Ens.Debug("UtilEnsMessages","terms")) "terms count="_tFilterObj.%Terms.Count()_", name='"_tFilterObj.%Name_"',tNextId="_tNextId_"<br>"
	Set pID(2)=tFilterObj, pID(3)=tNextId

	Set tSubmitBtn=$G(%request.Data("$SUBMITBTN",1))
	If tSubmitBtn="$AUTOFORM_ShowDups" {
		Set pRS = ##class(%ResultSet).%New($$$CurrentClass_":EnumerateDups")
		Quit $$$OK
	}
	ElseIf tSubmitBtn="$AUTOFORM_ShowGaps" {
		Set pRS = ##class(%ResultSet).%New($$$CurrentClass_":EnumerateGaps")
		Quit $$$OK
	}
	ElseIf tSubmitBtn="$AUTOFORM_ShowLates" {
		Set pRS = ##class(%ResultSet).%New($$$CurrentClass_":EnumerateLates")
		Quit $$$OK
	}
	&html<<input type='hidden' name='Status' value='#(tFilterObj.Status)#'>>
	&html<<input type='hidden' name='StartTime' value='#(tFilterObj.StartTime)#'>>
	&html<<input type='hidden' name='EndTime' value='#(tFilterObj.EndTime)#'>>
	&html<<input type='hidden' name='StartId' value='#(tFilterObj.StartId)#'>>
	&html<<input type='hidden' name='EndId' value='#(tFilterObj.EndId)#'>>
	&html<<input type='hidden' name='Type' value='#(tFilterObj.Type)#'>>
	&html<<input type='hidden' name='Source' value='#(tFilterObj.Source)#'>>
	&html<<input type='hidden' name='IsError' value='#(tFilterObj.IsError)#'>>
	&html<<input type='hidden' name='MaxRows' value='#(tFilterObj.MaxRows)#'>>
	&html<<input type='hidden' name='SortOrder' value='#(tFilterObj.SortOrder)#'>>
	&html<<input type='hidden' name='TimeFormat' value='#(tFilterObj.TimeFormat)#'>>
	&html<<input type='hidden' name='ColorBy' value='#(tFilterObj.ColorBy)#'>>
	&html<<input type='hidden' name='TermsStr' value='#(tFilterObj.TermsStr)#'>>
	
	Set pRS = ##class(%ResultSet).%New($$$CurrentClass_":Enumerate")
	Quit $$$OK
]]></Implementation>
</Method>
<Query name="EnumerateDups">
<Type>%Query</Type>
<FormalSpec>FilterObj:CSPX.EnsMsgFilterForm,NextId:%String="&quot;,PaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<SqlQuery> /* from EnsLib.HL7.SequenceManager:
$lb(..%PrimaryRequestHeader.%Id(),pMessage.%Id(),tControlId,tList)
 */</SqlQuery>

<Parameter name="ROWSPEC" value="ID,TimeCreated,Session,Status,Error,Source,BodyID,BodyControlID,DupBodyIDs"/>
</Query>


<Method name="EnumerateDupsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,pFilterObj:CSPX.EnsMsgFilterForm,pNextId:%String="&quot;,pPaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle="", qHandle("filt")=pFilterObj
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="EnumerateDupsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,&amp;Row:%List,&amp;AtEnd:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Set tSC=##class(EnsLib.HL7.SequenceManager).GetDuplicatedList(.tArray,.qHandle,1)  Quit:$$$ISERR(tSC) tSC
	If ""=qHandle Set AtEnd=1
	Set tHdrId=$LG($G(tArray(1)))
	If ""'=tHdrId {
	    Set tFilterObj=qHandle("filt")
	    Set dateLen=12
	    Set:tFilterObj.TimeFormat'="" dateLen = tFilterObj.TimeFormat
		&sql(Select ID,
				{fn RIGHT(%EXTERNAL(head.TimeCreated),:dateLen )} As TimeCreated,
				SessionId As Session,
				Status,
				CASE IsError WHEN 1 THEN 'Error' ELSE 'OK' END As Error,
				SourceConfigName As Source
			 Into :tID,:tTimeCreated,:tSession,:tStatus,:tError,:tSource From Ens.MessageHeader head where ID = :tHdrId)
		If 'SQLCODE {
			Set Row=$LB(tID,tTimeCreated,tSession,tStatus,tError,tSource,$LG($G(tArray(1)),2),$LG($G(tArray(1)),3),$LG($G(tArray(1)),4))
		} Else {
			Set Row=$LB("NA","","","","","","","","")
		}
	}
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="EnumerateDupsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
 	Quit $$$OK
]]></Implementation>
</Method>
<Query name="EnumerateGaps">
<Description><![CDATA[
This one does not currently return objects, only the sequence number of the message that should have arrived, and the higher sequence number of the one that already arrived]]></Description>
<Type>%Query</Type>
<FormalSpec>FilterObj:CSPX.EnsMsgFilterForm,NextId:%String="&quot;,PaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<SqlQuery> /* from EnsLib.HL7.SequenceManager:
$lb(tNext,$o(^EnsLib.HL7SM("thread",tType,tFacility,tApplication,tThread,"list&quot;,"&quot;)))
 */</SqlQuery>

<Parameter name="ROWSPEC" value="ID,TimeCreated,Session,Status,Error,Source,Seq,TargetSeq"/>
</Query>


<Method name="EnumerateGapsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,pFilterObj:CSPX.EnsMsgFilterForm,pNextId:%String="&quot;,pPaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle="", qHandle("filt")=pFilterObj
 	Quit $$$OK
]]></Implementation>
</Method>

<Method name="EnumerateGapsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,&amp;Row:%List,&amp;AtEnd:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Set tSC=##class(EnsLib.HL7.SequenceManager).GetExpiredList(.tArray,.qHandle,1)  Quit:$$$ISERR(tSC) tSC
	If ""=qHandle Set AtEnd=1
	Set tHdrId=$LG($G(tArray(1)))
	If ""'=tHdrId {
	    Set tFilterObj=qHandle("filt")
	    Set dateLen=12
	    Set:tFilterObj.TimeFormat'="" dateLen = tFilterObj.TimeFormat
	    /*
		&sql(Select ID,
				{fn RIGHT(%EXTERNAL(head.TimeCreated),:dateLen )} As TimeCreated,
				SessionId As Session,
				Status,
				CASE IsError WHEN 1 THEN 'Error' ELSE 'OK' END As Error,
				SourceConfigName As Source
			 Into :tID,:tTimeCreated,:tSession,:tStatus,:tError,:tSource From Ens.MessageHeader head where ID = :tHdrId)
		If 'SQLCODE {
			Set Row=$LB(tID,tTimeCreated,tSession,tStatus,tError,tSource,$LG($G(tArray(1)),1),$LG($G(tArray(1)),2))
		} Else { */
			Set Row=$LB("GAP","","","","","",$LG($G(tArray(1)),1),$LG($G(tArray(1)),2))
		/*}*/
	}
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="EnumerateGapsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
 	Quit $$$OK
]]></Implementation>
</Method>
<Query name="EnumerateLates">
<Type>%Query</Type>
<FormalSpec>FilterObj:CSPX.EnsMsgFilterForm,NextId:%String="&quot;,PaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<SqlQuery> /* from EnsLib.HL7.SequenceManager:
^EnsLib.HL7SM("metric",&quot;outofsequence")=3
^EnsLib.HL7SM("metric",&quot;outofsequence",1)=$lb("3474&quot;,"235&quot;,"10006",&quot;10001")
^EnsLib.HL7SM("metric",&quot;outofsequence",2)=$lb("3475&quot;,"236&quot;,"10008",&quot;10001")
^EnsLib.HL7SM("metric",&quot;outofsequence",3)=$lb("3476&quot;,"237&quot;,"10008",&quot;10001")
$lb(..%PrimaryRequestHeader.%Id(),pMessage.%Id(),tSeqNumber,^EnsLib.HL7SM("thread",tType,tFacility,tApplication,pThread,"next&quot;))
$lb(tHeaderId,tMessageId,tSeqNumber,tSeqNumber+1)
 */</SqlQuery>

<Parameter name="ROWSPEC" value="ID,TimeCreated,Session,Status,Error,Source,BodyID,Seq,NextSeq"/>
</Query>


<Method name="EnumerateLatesExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,pFilterObj:CSPX.EnsMsgFilterForm,pNextId:%String="&quot;,pPaneObj:EnsHL7MsgTablePane=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set qHandle="", qHandle("filt")=pFilterObj
 	Quit $$$OK
]]></Implementation>
</Method>

<Method name="EnumerateLatesFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary,&amp;Row:%List,&amp;AtEnd:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Set tSC=##class(EnsLib.HL7.SequenceManager).GetOutOfSequenceList(.tArray,.qHandle,1)  Quit:$$$ISERR(tSC) tSC
	If ""=qHandle Set AtEnd=1
	Set tHdrId=$LG($G(tArray(1)))
	If ""'=tHdrId {
	    Set tFilterObj=qHandle("filt")
	    Set dateLen=12
	    Set:tFilterObj.TimeFormat'="" dateLen = tFilterObj.TimeFormat
		&sql(Select ID,
				{fn RIGHT(%EXTERNAL(head.TimeCreated),:dateLen )} As TimeCreated,
				SessionId As Session,
				Status,
				CASE IsError WHEN 1 THEN 'Error' ELSE 'OK' END As Error,
				SourceConfigName As Source
			 Into :tID,:tTimeCreated,:tSession,:tStatus,:tError,:tSource From Ens.MessageHeader head where ID = :tHdrId)
		If 'SQLCODE {
			Set Row=$LB(tID,tTimeCreated,tSession,tStatus,tError,tSource,$LG($G(tArray(1)),2),$LG($G(tArray(1)),3),$LG($G(tArray(1)),4))
		} Else {
			Set Row=$LB("NA","","","","","","","","")
		}
	}
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="EnumerateLatesClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;qHandle:%Binary</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
 	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>