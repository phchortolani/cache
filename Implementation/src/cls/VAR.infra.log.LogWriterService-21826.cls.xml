<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.log.LogWriterService">
<Description><![CDATA[The LogWriter service is responsible for registering the information
found in a temporary global node into a phisical file. The service
runs in background and executes in a specified time interval.<br>
&nbsp;<br>
History:<br>
2009-Apr-02&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Created by Pablo]]></Description>
<ClassType/>
<Import>VAR.common,VAR.infra.cache,VAR.infra.util</Import>
<IncludeCode>VARUtil,VARLog</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Parameter name="LEVEL">
<Description><![CDATA[Log Level = "Error", "Warning", "Info", "Debug"]]></Description>
<Type>%String</Type>
<Default>Debug</Default>
</Parameter>

<Parameter name="INTERVAL">
<Description><![CDATA[Time interval]]></Description>
<Type>%Integer</Type>
<Default>10</Default>
</Parameter>

<Property name="File">
<Description><![CDATA[File descriptor]]></Description>
<Type>%String</Type>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="ServiceInstall">
<Description><![CDATA[Installs the service.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ..ServiceUninstall()

	do ##class(Task).Insert($znspace, "Logger Service",
		"do ##class("_..%ClassName(1)_").ServiceCheckAndStart()",
		0, 0, 1, "", 0, (8 * 60 * 60), +$horolog, "LoggerService.log", .task)

	do ##class(CompressTool).ValidateInstallation(1)]]></Implementation>
</Method>

<Method name="ServiceUninstall">
<Description><![CDATA[Uninstalls the service.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(Task).Delete("Logger Service")]]></Implementation>
</Method>

<Method name="ServiceCheckAndStart">
<Description><![CDATA[Checks and starts the service.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set logWriterService = ..%New()
	if ('logWriterService.IsRunning()) {
		do logWriterService.Start()
	}]]></Implementation>
</Method>

<Method name="ServiceStop">
<Description><![CDATA[Stops the service.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set logWriterService = ..%New()
	if (logWriterService.IsRunning()) {
		do logWriterService.Stop()
	}]]></Implementation>
</Method>

<Method name="Start">
<Description><![CDATA[Starts the service (if not already running).<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit:(..IsRunning()) $$$OK
	
	if ('##class(DirectoryFile).Exists(..GetLogDir())) {
		if ('##class(DirectoryFile).CreateDir(..GetLogDir())) {
			quit $$$CUSTOMERROR("Error while trying to create directory '"_..GetLogDir()_"'")
		}
	}

	set $ecode = ""
	set $ztrap = ""

	set ..File = ""
	do ##class(Logger).LogJobIdStart($job)
	$$$VARLOGINFO("Log started at "_$zversion)

	set ^VAR.infra.log.LogWriterService = 0
	job StartThread^VARRemote(..%ClassName(1))::20

	quit $$$OK]]></Implementation>
</Method>

<Method name="IsRunning">
<Description><![CDATA[Checks if the service is running.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: yes / no]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set intJobId = +$get(^VAR.infra.log.LogWriterService)
	if (intJobId '= 0) {
		if ($SYSTEM.Version.GetNumber() >= 2008.1) {
			set objProcess = ##class(%SYS.ProcessQuery).%OpenId(intJobId)
			quit:($isObject(objProcess)) 1
		}
		else {
			set objProcess = ##class(%SYSTEM.Process).%OpenId(intJobId)
			quit:($isObject(objProcess)) 1
		}		
	}
	quit 0]]></Implementation>
</Method>

<Method name="Stop">
<Description><![CDATA[Stops the service (asynchronous call).<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set ^VAR.infra.log.LogWriterService = 0

	quit $$$OK]]></Implementation>
</Method>

<Method name="StartThread">
<Description><![CDATA[Background job entry point.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns:]]></Description>
<Implementation><![CDATA[	set ^VAR.infra.log.LogWriterService = $job

	do ..ProcessLogs()
	do ..EndProcessLogs()]]></Implementation>
</Method>

<Method name="ProcessLogs">
<Description><![CDATA[Loop to process logs.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	while (^VAR.infra.log.LogWriterService) {
		do ..ProcessLog()

		hang ..#INTERVAL
	}]]></Implementation>
</Method>

<Method name="ProcessLog">
<Description><![CDATA[Process a single log.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set nivelTransacao = $tlevel
	set $ztrap = "exception"

	set globalLog = ##class(Logger).%GetParameter("GLOBALNODE")_","""_##class(Strings).UpperCase($ZNSPACE)_""","""")"
	while (+$order(@globalLog) > 0) {
		//tstart
		set codigo = +$order(@globalLog)
		set globalBufferLog = ##class(Logger).%GetParameter("GLOBALNODE")_","""_##class(Strings).UpperCase($ZNSPACE)_""","_codigo_")"
		set bufferLog = @globalBufferLog
		kill @globalBufferLog
		//tcommit

		set status = ..WriteBufferLog(bufferLog)
	}
	
finally
	quit $$$OK

exception
 	set $ztrap = ""
 	
 	if (nivelTransacao '= $tlevel) {
 		trollback
 	}

	goto finally]]></Implementation>
</Method>

<Method name="WriteBufferLog">
<Description><![CDATA[Writes a buffer log (LogEvent serialized in XML) to the file.<br>
Checks and opens a new file each day, compacting last log file.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrBuffer: the buffer log<br>
&nbsp;<br>
Returns: the status]]></Description>
<FormalSpec>pstrBuffer:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set $ztrap = "exception"
	set strStatus = $$$OK

	if (..File '= ..GetFileName()) {
		if ($length(..File) > 0) {
			close ..File
			set ..File = ""
		}
		
		do ..CompactLastLog()

		set ..File = ..GetFileName()
		open ..File:("ERWAS"::):30
		if ('$test) {
			set ..File = ""

			quit $$$CUSTOMERROR("Error while openning file '"_..GetFileName()_"'")
		}
	}

	set objLogEvent = ##class(LogEvent).GetInstance(pstrBuffer)
	if (($isObject(objLogEvent)) &&
	    (objLogEvent.Level <= objLogEvent.GetLevelCode(..#LEVEL))) {
		set io = $io
		use ..File

		write objLogEvent.GetLogText(), !

		use io
	}

finally
	quit strStatus

exception
 	set $ztrap = ""
	set strStatus = $$$CUSTOMERROR($zerror)

	if ($length(..File) > 0) {
		close ..File
		set ..File = ""
	}

	goto finally]]></Implementation>
</Method>

<Method name="EndProcessLogs">
<Description><![CDATA[End of log process.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set $ztrap = "exception"
	set status = $$$OK
	
	$$$VARLOGINFO("Log stopped")
	do ..ProcessLog()

	if ($length(..File) > 0) {
		close ..File
	}

	do ##class(Logger).LogJobIdStop($job)

finally
	quit status

exception
 	set $ztrap = ""
 	set status = $$$CUSTOMERROR($zerror)

	goto finally]]></Implementation>
</Method>

<Method name="CompactLastLog">
<Description><![CDATA[Compacts last log file.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the status]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set logFile = ##class(DirectoryFile).GetOSDir(..GetFileName(1, 0))
	quit:('##class(DirectoryFile).Exists(logFile)) $$$OK

	set logZipDir = ##class(DirectoryFile).GetOSDir(
		##class(DirectoryFile).GetNamespaceSubdir("log\zip"))
	if ('##class(DirectoryFile).Exists(logZipDir)) {
		if ('##class(DirectoryFile).CreateDir(logZipDir)) {
			quit $$$CUSTOMERROR("Error while trying to create directory '"_logZipDir_"'")
		}
	}

	set fileName = ..GetFileName(0, 0)
	set logZipFile = ##class(DirectoryFile).GetOSDir(
		logZipDir_$piece(fileName, ".", 1)_".7z")
	quit:(##class(DirectoryFile).Exists(logZipFile)) $$$OK

	set result = ##class(CompressTool).ExecCompressTool("a -t7z -mx=9 -y -bd "_logZipFile_
		" "_logFile)
	if ('result) {
		do ##class(DirectoryFile).DeleteFile(logFile)
	}

	quit $$$OK]]></Implementation>
</Method>

<Method name="GetLogDir">
<Description><![CDATA[Gets the log directory.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the log directory]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).GetNamespaceSubdir("log")]]></Implementation>
</Method>

<Method name="GetFileName">
<Description><![CDATA[Gets the log file name.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pblnWithDir: include directory path?<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pblnToday: today = yes, yesterday = no<br>
&nbsp;<br>
Returns: the log file name]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pblnWithDir:%Boolean=1,pblnToday:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set fileName = ""
	if (pblnWithDir) {
		set fileName = fileName_..GetLogDir()
	}
	set fileName = fileName_##class(Util).GetNamespace()_"_"
	if (pblnToday) {
		set fileName = fileName_$translate($zdate($horolog, 3), "-", "_")
	}
	else {
		set fileName = fileName_$translate($zdate(
			##class(DateTime).GetYesterday(), 3), "-", "_")
	}
	set fileName = fileName_".out"

	quit fileName]]></Implementation>
</Method>
</Class>
</Export>