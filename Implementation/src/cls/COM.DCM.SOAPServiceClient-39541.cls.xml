<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="COM.DCM.SOAPServiceClient">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebClient</Super>

<Method name="InvokeClient">
<Description><![CDATA[
Execute the Web Method represented by the descriptor class on
the server.  If an error is detected, a ztrap "SOAP" will be issued with
%objlasterror containing the error %Status.  If is the responsibilty of the
caller of the proxy method to set an error trap and test for $ZE["&lt;ZSOAP&gt;".
Note that if a SOAP fault is received, then the error is $$$SOAPFaultReceived.]]></Description>
<FormalSpec>proxy:%SOAP.ProxyDescriptor,methodName:%String,Action:%String,oneWay:%Boolean=0</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	#; Create SOAP request
	//09-Jun-2009	PPP	SRAdhoc - Needs to return a %Status
	Set io=$io
	Set stream=##class(%FileBinaryStream).%New()
	Set sc=stream.Write("") ; force stream's file to open
	If $$$ISERR(sc) Goto SOAPError
	Set file=stream.Filename ; get filename and make current device
	Use file
	$$$SETIO("UTF8")
	Set sc=..WriteSOAPMessage(proxy,proxy.%RequestName,0)
	Close file
	Use io
	If $$$ISERR(sc) Goto SOAPError

	#; Use transport to get response.
	Set responseStream=##class(%FileBinaryStream).%New()
	Set transport=..Transport
	If transport="" Set transport=##this
	Set sc=transport.DoSOAPRequest(##this,Action,oneWay,stream,responseStream)
	If $$$ISERR(sc) Goto SOAPError
	Do responseStream.Rewind()
	
	#; If one-way, check for empty stream
	If oneWay {
		Set len=1
		Set data=responseStream.Read(.len)
		Do responseStream.Rewind()
		If len<=0 Quit
	}

	#; Get an XML content handler that parses message into ^CacheTemp 
	Set tHandler=##Class(%XML.ImportHandler).%New()
	If '$isObject(tHandler) Quit $$$ERROR($$$CannotCreateObject,"%XML.ImportHandler")
	Set tHandler.KeepWhitespace=1 // Need whitespace for XMLImport
	#; and an entity resolver
	Set tResolver=##Class(%XML.SAX.EntityResolver).%New()
	If '$isObject(tResolver) Quit $$$ERROR($$$CannotCreateObject,"%XML.SAX.EntityResolver")

	#; Parse the message into ^CacheTemp
	Set sc=##Class(%XML.SAX.Parser).ParseFile(responseStream.Filename,tHandler,tResolver,..SAXFlags)
	If $$$ISERR(sc) Goto SOAPError

	#; Validate the SOAP envelope. 
	Set sc=..ProcessSOAPEnvelope(tHandler,oneWay,.message,.versionMismatch)
	If $$$ISERR(sc) Goto SOAPError

	If 'oneWay {
		#; Import the SOAP response.
		Set sc=proxy.ImportSOAPMessage(methodName_"Response",methodName_"Result",tHandler,message)
		If $$$ISERR(sc) Goto SOAPError
	}

	Quit sc

SOAPError 
    Set %objlasterror=sc 
    Ztrap "SOAP"
    Quit sc
]]></Implementation>
</Method>

<Method name="Execute">
<ClassMethod>1</ClassMethod>
<FormalSpec>Site:%String,Code:%String,&amp;Param1:%Library.ArrayOfDataTypes,&amp;Param2:%Library.ArrayOfDataTypes,&amp;Param3:%Library.ArrayOfDataTypes,&amp;Param4:%Library.ArrayOfDataTypes</FormalSpec>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
</Method>


<Parameter name="SERVICENAME">
<Description><![CDATA[
SERVICENAME - Should be the name of the service for which this is a proxy.
Override this parameter in the subclass.]]></Description>
<Default>SOAPService</Default>
</Parameter>
</Class>
</Export>