<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="COM.fwk.exception.BaseException">
<Description><![CDATA[

Base Exception class.
Contains properties and methods used for exception tracking.

<p>
author: Francisco Fiuza Lima - Disclinc Brazil
]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Property name="description">
<Description><![CDATA[
Exception description ]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="300"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="nestedException">
<Description><![CDATA[
An inner exception that may be the cause of the current one]]></Description>
<Type>COM.fwk.exception.BaseException</Type>
</Property>


<Property name="stackTrace">
<Description><![CDATA[
A stack that keeps the command tree associated with this exception]]></Description>
<Type>%String</Type>
<Collection>list</Collection>

<Parameter name="MAXLEN" value="100"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Method name="%OnNew">
<Description><![CDATA[

Creates an exception object. 
Go though the $stack and store the command at each level of the 
stack on stackTrace property.
Sets property id to the last exception Id saved. 
<p>
author: Francisco Fiuza Lima - Disclinc Brazil
]]></Description>
<FormalSpec>description:%String="(Exception thrown without description)",nestedException:BaseException=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..description=description
	do ..descriptionSet(description)
	do ..nestedExceptionSet(nestedException)
	
	// Creating the Stack Trace
	set m = ""
	
	for i=($stack):-1:0
	{
		;write $stack(i,"place")_"("_i_")"_"<BR>"
		do ..stackTrace.Insert($stack(i,"place"))
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="printStackTraceForTerminal">
<Description><![CDATA[

Shows the stack trace at a terminal
<p>
author: Francisco Fiuza Lima - Disclinc Brazil
]]></Description>
<Implementation><![CDATA[	do ..printStackTrace($Char(10,13))
]]></Implementation>
</Method>

<Method name="printStackTraceForHTML">
<Description><![CDATA[

Shows the stack trace at a browser
<p>
author: Francisco Fiuza Lima - Disclinc Brazil
]]></Description>
<Implementation><![CDATA[	do ..printStackTrace("<BR>")
]]></Implementation>
</Method>

<Method name="printStackTrace">
<Description><![CDATA[

Shows the stack trace
<p>
author: Francisco Fiuza Lima - Disclinc Brazil
]]></Description>
<Implementation><![CDATA[	write ..getStackTrace()
]]></Implementation>
</Method>

<Method name="getStackTrace">
<Description><![CDATA[

Returns a string that contains all text (commands)
from the current stack trace entries
<p>
author: Francisco Fiuza Lima - Disclinc Brazil
]]></Description>
<FormalSpec>breakLineSymbol:%String,tab:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set stackTrace = ""
	
	// starts from the line number 4 because
	// the three ones stand for the error treatment
	// code
	
	for i = 1 : 1 : ..stackTrace.Count()
	{
		set stackLine = ..stackTrace.GetAt(i)
		set stackTrace = stackTrace _ tab _ stackLine _ breakLineSymbol	
	}
	if $isObject(..nestedException)
	{
		set stackTrace = stackTrace _ "<br> nestedException <br>"
		set stackTrace = stackTrace _ ..nestedExceptionGet().getStackTrace(breakLineSymbol, tab _ "&nbsp;&nbsp;&nbsp;&nbsp;")
	}
	
	quit stackTrace
]]></Implementation>
</Method>

<Method name="toString">
<Description><![CDATA[

Prints the exception information.
<p>
author: Francisco Fiuza Lima - Disclinc Brazil
]]></Description>
<Implementation><![CDATA[	write ..getBaseExceptionString()
]]></Implementation>
</Method>

<Method name="getBaseExceptionString">
<Description><![CDATA[

Returns a string with all data related to the current exception,
including the class name, id, description and the stack trace, 
that shows the command tree associated with the exception.
<p>
author: Francisco Fiuza Lima - Disclinc Brazil
]]></Description>
<FormalSpec>tab:%String="",breakLineSymbol:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set:'$data(breakLineSymbol) breakLineSymbol = $Char(10,13)
	
	set baseExceptionString = ""
	
	set newTab = tab_"    "
	
	set baseExceptionString = baseExceptionString_tab_"["_..%ClassName(1)_breakLineSymbol
	;set baseExceptionString = baseExceptionString_newTab_"[id: "_..id_"]"_breakLineSymbol
	set baseExceptionString = baseExceptionString_newTab_"[description: "_..description_"]"_breakLineSymbol
	set baseExceptionString = baseExceptionString_newTab_"[stackTrace: "_breakLineSymbol
	set baseExceptionString = baseExceptionString_..getStackTrace(breakLineSymbol, newTab_"    ")
	set baseExceptionString = baseExceptionString_newTab_"]"_breakLineSymbol
	
	if $isObject(..nestedException)
	{
		set baseExceptionString = baseExceptionString_newTab_"[nestedException: "_breakLineSymbol
		set baseExceptionString = baseExceptionString_..nestedException.getBaseExceptionString(newTab_"    ", breakLineSymbol)
		set baseExceptionString = baseExceptionString_newTab_"]"_breakLineSymbol
	}
	else
	{
		set baseExceptionString = baseExceptionString_newTab_"[nestedException: ]"_breakLineSymbol
	}

	set baseExceptionString = baseExceptionString_tab_"]"_breakLineSymbol
	
	quit baseExceptionString
]]></Implementation>
</Method>

<Method name="handleGeneralException">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// If the exception was generated by CachÃ©, then we have to encapsulate it in a
	// Runtime exception, so we can have the stack trace.
	if '$find($ZERROR, "ECODETRAP")
	{
		;write "<BR>FRank"
		// TO DO: Check why this method is being called about 6 times per exception.
		set %COMfwkException = ##class(COM.fwk.exception.RuntimeException).%New($PIECE($PIECE($ZERROR,"<",2),">",1), $get(%COMfwkException))
	}
]]></Implementation>
</Method>
</Class>
</Export>