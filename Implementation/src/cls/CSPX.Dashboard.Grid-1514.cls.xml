<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.Dashboard.Grid">
<Description><![CDATA[
Grid Meter for Ensemble Dashboard.
The Grid Meter displays a set of data as a simple table.]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Meter</Super>
<System>3</System>

<Parameter name="MINWIDTH">
<Default>75</Default>
</Parameter>


<Parameter name="MINHEIGHT">
<Default>75</Default>
</Parameter>


<Property name="Columns">
<Description><![CDATA[
Data specification for grid columns.]]></Description>
<Type>GridDimension</Type>

<Parameter name="XMLNAME" value="Columns"/>

<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>


<Property name="Rows">
<Description><![CDATA[
Data specification for grid rows.]]></Description>
<Type>GridDimension</Type>

<Parameter name="XMLNAME" value="Rows"/>

<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>


<Property name="RowHeight">
<Description><![CDATA[
Display height (in logical units) of each row in the grid.]]></Description>
<Type>%Integer</Type>
<InitialExpression>10</InitialExpression>

<Parameter name="MINVAL" value="0"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="LabelHeight">
<Description><![CDATA[
Display height (in logical units) of the upper labels in the grid.]]></Description>
<Type>%Integer</Type>
<InitialExpression>10</InitialExpression>

<Parameter name="MINVAL" value="0"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="LabelWidth">
<Description><![CDATA[
Display width (in logical units) of the side labels in the grid.]]></Description>
<Type>%Integer</Type>
<InitialExpression>25</InitialExpression>

<Parameter name="MINVAL" value="0"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="MaxRows">
<Description><![CDATA[
Maximum number of rows to display in the grid.]]></Description>
<Type>%Integer</Type>
<InitialExpression>40</InitialExpression>

<Parameter name="MINVAL" value="0"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="MaxColumns">
<Description><![CDATA[
Maximum number of columns to display in the grid.]]></Description>
<Type>%Integer</Type>
<InitialExpression>40</InitialExpression>

<Parameter name="MINVAL" value="0"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="CellStyle">
<Description><![CDATA[
Default CSS Style applied to grid cells. E.g. "fill: blue;"]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="100"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="LabelStyle">
<Description><![CDATA[
CSS Style applied to grid labels. E.g. "fill: blue;"]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="100"/>

<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>


<Property name="LabelSource">
<Description><![CDATA[
Not supported at this time.]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="64"/>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Property name="Unsupported">
<Description><![CDATA[
Internal flag for unsupport row/columns combinations.]]></Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Property name="ColLabels">
<Description><![CDATA[
Internal holder for initial column labels.]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="10000"/>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Property name="RowLabels">
<Description><![CDATA[
Internal holder for initial row labels.]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="10000"/>

<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>


<Method name="OnSVGStyle">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
.Grid-OuterPanel {
	fill: #000040;
	stroke: darkgray;
	stroke-width: 1;
	filter: url(#dropShadow);
}

.Grid-InnerPanel {
	fill: #EEEEFF;
	stroke: none;
}

.Grid-CellLine {
	fill: none;
	stroke: gray;
	stroke-width: 0.33;
	opacity: 1.0;
}
	>
]]></Implementation>
</Method>

<Method name="OnSVGHead">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// include js file
	Write "<script type='text/ecmascript' xlink:href='svggrid.js'/>",!
]]></Implementation>
</Method>

<Method name="OnSVGScript">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	&js<
function Grid_setProperty(property,value,idx)	
{
	switch (property) {
	default:
		return false;

	case 'series':
		// value is a ":" delimited set of points
		if (this.seriesData[idx] == value) {
			return;
		}
		this.seriesData[idx] = value;

		// find values to display
		var plotVals
		plotVals = value.split(":");
		this.grid.setData(idx,plotVals);
		break;

	case 'xlabels':
		// value is a ":" delimited set of labels
		var labels = value.split(':');
		
		// apply to either rows or columns
		if ('instances' == this.columns) {
			this.grid.setColLabels(labels);
		}
		else {
			this.grid.setRowLabels(labels);
		}
		break;
	}
	return true;
}
	>
]]></Implementation>
</Method>

<Method name="OnSVGBody">
<Description><![CDATA[
Draw the body of this SVG meter]]></Description>
<Implementation><![CDATA[	&html<<g id="#(..MeterId)#_grid" transform="translate(5,5)" />>
]]></Implementation>
</Method>

<Method name="OnSVGInitJS">
<Implementation><![CDATA[
	// find source of data: col, rows, or default
	Set tList = ""
	Set flow = ""
	Set tColType = $S($IsObject(..Columns):..Columns.Source,1:"")
	Set tRowType = $S($IsObject(..Rows):..Rows.Source,1:"")
	Set tColReverse = $S($IsObject(..Columns):..Columns.Reverse,1:0)
	Set tRowReverse = $S($IsObject(..Rows):..Rows.Reverse,1:0)
	Set tColAgg = $S($IsObject(..Columns):..Columns.Aggregate,1:"")
	Set tRowAgg = $S($IsObject(..Rows):..Rows.Aggregate,1:"")
	Set tColAggLbl = $S($IsObject(..Columns):..Columns.AggregateLabel,1:"")
	Set tRowAggLbl = $S($IsObject(..Rows):..Rows.AggregateLabel,1:"")

	If (tColType = "series") {
		Set tList = ..Columns.SeriesList
		Set flow = "vertical"
	}
	ElseIf (tRowType = "series") {
		Set tList = ..Rows.SeriesList
		Set flow = "horizontal"
	}
	ElseIf (tColType = "instances") {
		Set tList = ..Rows.SeriesList
		Set flow = "vertical"
	}
	ElseIf (tRowType = "instances") {
		Set tList = ..Columns.SeriesList
		Set flow = "horizontal"
	}

	// build the grid
	&js<meter.grid = new Grid(meter,#(..MeterId)#,document.getElementById("#(..MeterId)#_grid"),#(..Width-10)#,#(..Height-25)#,#(..LabelWidth)#,#(..LabelHeight)#,#(..MaxRows)#,#(..MaxColumns)#,'#(..LabelStyle)#','#(..CellStyle)#',#($Case(+..Unsupported,1:"true",:"false"))#,'#(flow)#',#($Case(tColReverse,1:"true",:"false"))#,#($Case(tRowReverse,1:"true",:"false"))#,'#(tColAgg)#','#(tRowAgg)#','#(tColAggLbl)#','#(tRowAggLbl)#');>

	// set up initial data for grid
	&js<meter.seriesData = new Array();>
	&js<meter.seriesProperty = new Array();>
	&js<meter.seriesInstance = new Array();>
	&js<meter.seriesLabel = new Array();>

	If $IsObject(tList) {
		For i = 1:1:tList.Count() {
			Set tItem = tList.GetAt(i)
			&js<meter.seriesProperty[#(i-1)#] = '#(tItem.Property)#';>
			&js<meter.seriesInstance[#(i-1)#] = '#(tItem.Instance)#';>
			&js<meter.seriesLabel[#(i-1)#] = '#(tItem.Label)#';>

			// special processing for instance v. history
			If (((tColType = "instances")&&(tRowType = "history")) ||
				((tRowType = "instances")&&(tColType = "history")) ){
				For n = 1:1:$L(tItem.Data,"^") {
					&js<meter.seriesData[#(n-1)#] = '#($P(tItem.Data,"^",n))#';>
				}
			}
			Else {
				&js<meter.seriesData[#(i-1)#] = '#(tItem.Data)#';>
			}
		}
	}

	// test for labels
	&js<
	if (meter.colLabels != '') {
		var labels = meter.colLabels.split(':');
		meter.grid.setColLabels(labels);
	}
	if (meter.rowLabels != '') {
		var labels = meter.rowLabels.split(':');
		meter.grid.setRowLabels(labels);
	}
	>
]]></Implementation>
</Method>

<Method name="GenerateCode">
<Description><![CDATA[
Called by Dashboard class to generate code to
create an instance of this object.
The object instance is called <var>tMeter</var>.]]></Description>
<FormalSpec>pCode:%CharacterStream,pLevel:%Integer=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ##super(pCode)

	Do:(..LabelSource'="") pCode.WriteLine(" Set tMeter.LabelSource=""" _ ..LabelSource _ """")
	Do:(..CellStyle'="") pCode.WriteLine(" Set tMeter.CellStyle=""" _ ..CellStyle _ """")
	Do:(..LabelStyle'="") pCode.WriteLine(" Set tMeter.LabelStyle=""" _ ..LabelStyle _ """")
	Do:(..RowHeight'="") pCode.WriteLine(" Set tMeter.RowHeight=""" _ ..RowHeight _ """")
	Do:(..MaxRows'="") pCode.WriteLine(" Set tMeter.MaxRows=""" _ ..MaxRows _ """")
	Do:(..MaxColumns'="") pCode.WriteLine(" Set tMeter.MaxColumns=""" _ ..MaxColumns _ """")
	Do:(..LabelHeight'="") pCode.WriteLine(" Set tMeter.LabelHeight=""" _ ..LabelHeight _ """")
	Do:(..LabelWidth'="") pCode.WriteLine(" Set tMeter.LabelWidth=""" _ ..LabelWidth _ """")

	// dimension definitions
	If '$IsObject(..Rows) {
		// create default rows object
		Do pCode.WriteLine(" Set tMeter.Rows = ##class(CSPX.Dashboard.GridDimension).%New() // default")
		Do pCode.WriteLine(" Set tMeter.Rows.Source = ""series""")
		Do pCode.WriteLine(" Set tSeries = ##class(CSPX.Dashboard.GridSeries).%New()")
		Do pCode.WriteLine(" Set tSeries.Property=""" _ ..Property _ """")
		Do pCode.WriteLine(" Set tSeries.Label=""" _ ..Property _ """")
		Do pCode.WriteLine(" Do tMeter.Rows.SeriesList.Insert(tSeries)")
	}
	Else {
		Set:..Rows.Source=$C(0) ..Rows.Source=""
		Do pCode.WriteLine(" Set tMeter.Rows = ##class(CSPX.Dashboard.GridDimension).%New()")
		Do pCode.WriteLine(" Set tMeter.Rows.Source = """ _ ..Rows.Source _ """")
		Do pCode.WriteLine(" Set tMeter.Rows.Aggregate = """ _ ..Rows.Aggregate _ """")
		Do pCode.WriteLine(" Set tMeter.Rows.AggregateLabel = """ _ ..Rows.AggregateLabel _ """")
		Do pCode.WriteLine(" Set tMeter.Rows.Size = " _ +..Rows.Size)
		Do pCode.WriteLine(" Set tMeter.Rows.Reverse = " _ +..Rows.Reverse)

		Set count = ..Rows.SeriesList.Count()
		If (count = 0) {
			// if no series, use Property for this object
			Do pCode.WriteLine(" Set tSeries = ##class(CSPX.Dashboard.GridSeries).%New()")
			Do pCode.WriteLine(" Set tSeries.Property=""" _ ..Property _ """")
			Do pCode.WriteLine(" Set tSeries.Label=""" _ ..Label _ """")
			Do pCode.WriteLine(" Do tMeter.Rows.SeriesList.Insert(tSeries)")
		}
		Else {
			If ((..Rows.Source = "history") || (..Rows.Source = "instances")) {
				// we only care about the first series in this case
				Set count = 1
			}
			
			For i=1:1:count {
				Set tSeries = ..Rows.SeriesList.GetAt(i)
				Do pCode.WriteLine(" Set tSeries = ##class(CSPX.Dashboard.GridSeries).%New()")
				Do:(tSeries.Property'="") pCode.WriteLine(" Set tSeries.Property=""" _ tSeries.Property _ """")
				Do:(tSeries.Instance'="") pCode.WriteLine(" Set tSeries.Instance=""" _ tSeries.Instance _ """")
				If (tSeries.Label'="") {
					Do pCode.WriteLine(" Set tSeries.Label=""" _ tSeries.Label _ """")
				}
				Else {
					Do pCode.WriteLine(" Set tSeries.Label=""" _ tSeries.Property _ """")
				}
				Do pCode.WriteLine(" Do tMeter.Rows.SeriesList.Insert(tSeries)")
			}
		}
	}

	If '$IsObject(..Columns) {
		// create default columns object
		Do pCode.WriteLine(" Set tMeter.Columns = ##class(CSPX.Dashboard.GridDimension).%New() // default")
		Do pCode.WriteLine(" Set tMeter.Columns.Source = ""series""")
		Do pCode.WriteLine(" Set tSeries = ##class(CSPX.Dashboard.GridSeries).%New()")
		Do pCode.WriteLine(" Set tSeries.Property=""" _ ..Property _ """")
		Do pCode.WriteLine(" Set tSeries.Label=""" _ ..Property _ """")
		Do pCode.WriteLine(" Do tMeter.Columns.SeriesList.Insert(tSeries)")
	}
	Else {
		Set:..Columns.Source=$C(0) ..Columns.Source=""
		Do pCode.WriteLine(" Set tMeter.Columns = ##class(CSPX.Dashboard.GridDimension).%New()")
		Do pCode.WriteLine(" Set tMeter.Columns.Source = """ _ ..Columns.Source _ """")
		Do pCode.WriteLine(" Set tMeter.Columns.Aggregate = """ _ ..Columns.Aggregate _ """")
		Do pCode.WriteLine(" Set tMeter.Columns.AggregateLabel = """ _ ..Columns.AggregateLabel _ """")
		Do pCode.WriteLine(" Set tMeter.Columns.Size = " _ +..Columns.Size)
		Do pCode.WriteLine(" Set tMeter.Columns.Reverse = " _ +..Columns.Reverse)

		Set count = ..Columns.SeriesList.Count()
		If (count = 0) {
			// if no series, use Property for this object
			Do pCode.WriteLine(" Set tSeries = ##class(CSPX.Dashboard.GridSeries).%New()")
			Do pCode.WriteLine(" Set tSeries.Property=""" _ ..Property _ """")
			Do pCode.WriteLine(" Set tSeries.Label=""" _ ..Label _ """")
			Do pCode.WriteLine(" Do tMeter.Columns.SeriesList.Insert(tSeries)")
		}
		Else {
			If ((..Columns.Source = "history") || (..Columns.Source = "instances")) {
				// we only care about the first series in this case
				Set count = 1
			}
			For i=1:1:count {
				Set tSeries = ..Columns.SeriesList.GetAt(i)
				Do pCode.WriteLine(" Set tSeries = ##class(CSPX.Dashboard.GridSeries).%New()")
				Do:(tSeries.Property'="") pCode.WriteLine(" Set tSeries.Property=""" _ tSeries.Property _ """")
				Do:(tSeries.Instance'="") pCode.WriteLine(" Set tSeries.Instance=""" _ tSeries.Instance _ """")
				If (tSeries.Label'="") {
					Do pCode.WriteLine(" Set tSeries.Label=""" _ tSeries.Label _ """")
				}
				Else {
					Do pCode.WriteLine(" Set tSeries.Label=""" _ tSeries.Property _ """")
				}
				Do pCode.WriteLine(" Do tMeter.Columns.SeriesList.Insert(tSeries)")
			}
		}
	}

	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>