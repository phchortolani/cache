<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alWEB.WSResult.BasicResult">
<Abstract>1</Abstract>
<IncludeCode>WWWConst,COMSYS,INConst</IncludeCode>

<Property name="SessionId">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00037"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="MsgSequence">
<Type>%Integer</Type>

<Parameter name="CAPTION" value="AL00036"/>
</Property>


<Property name="Encryption">
<Type>%Boolean</Type>

<Parameter name="CAPTION" value="AL00035"/>
</Property>


<Property name="ANMSessionId">
<Description><![CDATA[
01-Jul-2011		SCR		SR17809: Added ANM Session ID]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00778"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Method name="PrepareLog">
<Description><![CDATA[
Log Details of Request and Response Message.]]></Description>
<FormalSpec>&amp;%request,ClassName:%String="&quot;,MethodName:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (ClassName '= "") {
		set clsDef = ##class(%Dictionary.ClassDefinition).%OpenId(ClassName)
		for idx=1:1:clsDef.Methods.Count() {
			set mthDef = clsDef.Methods.GetAt(idx)
			if MethodName '="" continue:mthDef.Name'=MethodName
			set %request.Data("MethodName",1)=ClassName_"."_MethodName
			for idxx=1:1:$length(mthDef.FormalSpec,",") {
				set param = $piece($piece(mthDef.FormalSpec,",",idxx),":",1)
				if (param '= "") && ($get(@param) '= "") {
					set %request.Data(param,1) = @param
				}
			}
		}
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="LogDetails">
<Description><![CDATA[
Log Details of Request and Response Message]]></Description>
<FormalSpec>pstrMethodName:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------ 
	//Create New Log Entry	
	//
	// History
	// 01-Aug-2010	shobby	SR17504: Improve logging of item number in header.
	// 26-Mar-2009	shobby	SR16451: Moved SessionId info into a subroutine.
	// 05-Mar-2009	shobby	SR16385: Moved SessionId info outside of the param loop.
	// 03-Mar-2009	DavidR	SR16385: check if password has been passed in and overwrite
	// 							it with "****" this stops people form accessing other
	// 							peoples passwords.
	// 03-Mar-2009	DavidR	SR16385: extended the check of input parameters to populate
	// 							the header record if relevant fields are empty.
	// 23-Feb-2009	DavidR	SR16385: store the log into searchable persistent @NM class ^WSLog
	// 							removed ^cacheTempWSLog entries.	
	// 19-Feb-2009	shobby	SR16348: Get the property definitions from the compiled class so that
	//								 inherited properties are reported as well.
	//------------------------------------------------------------------------------ 
	set fltStarted = $zh
	do ^WWWVAR
	
	set idWSLog   = $$^WWWNEXT("WWWWSLog")
	set objWSLog  = $get(^WWWWSLog(0,idWSLog,1))
	
	set $$$WWWWSLogResponse(objWSLog) = "OK"
	
	set $$$WWWWSLogMethodName(objWSLog) = pstrMethodName
	
	//Log Time Stamp of Response
	set $$$WWWWSLogMsgReceived(objWSLog) = $horolog
	
	//Log Response Data
	set objClsDef = ##class(%Library.CompiledClass).%OpenId(..%ClassName(1))
	
	for idLoop=1:1:objClsDef.Properties.Count() {
        set strProp = objClsDef.Properties.GetAt(idLoop)

        continue:strProp=""
        
        //ReturnArray
        if (strProp.Collection = "array") {
	        set objArray = $zobjmethod(##this,strProp.Name_"Get")
			        
	        if (objArray '= "") {
				set strKey = ""		
		        for {
			        set strVal = objArray.GetNext(.strKey)
					quit:strVal=""
			        
					set idParamO = strProp.Name_" "_strKey_":"
	
	; Method 1	Tilde delimiters - single line
		        	set objWSParamO = strVal.ListPropAsString()
	        		set strStatus = $$$Save("WWWWSLogParamO",idWSLog_$$$COMMA_idParamO,objWSParamO,1)
				
	; Method 2	Listbuild - separate lines
				/*	set lstProps = strVal.ListProp()
					
					for loop = 1:1:$listlength(lstProps) {
						set lstProperty = $listget(lstProps,loop)
							set idKey  = idWSLog_$$$COMMA_idParamO_$listget(lstProperty,1)
							set objWSParamO = $listget(lstProperty,2)
							if objWSParamO'="" {
								set strStatus = $$$Save("WWWWSLogParamO",idKey,objWSParamO,1)
							}
					}
	; -----	*/			
		        }
	        }
        
        //Non Universal Return Types
		} elseif ($extract(strProp.Type) '= "%") {
			set objRelShipDef = ##class(%Library.CompiledClass).%OpenId(strProp.Type)
			
			if (objRelShipDef '= "") {
			    set objRelShipObj = $zobjmethod(##this,strProp.Name_"Get")
			    
			    for intPos=1:1:objRelShipObj.Count() {
					for idRelLoop=1:1:objRelShipDef.Properties.Count() {
				        set strRelProp = objRelShipDef.Properties.GetAt(idRelLoop)
				        continue:strRelProp=""
				        
						set strVal = $zobjmethod(objRelShipObj.GetAt(intPos),strRelProp.Name_"Get")
						continue:$piece(strVal,"@",2)=..%ClassName(1)
						
						set idParam =strRelProp.Name
						set objWSParamO = ""
						set $$$WWWWSLogParamOValue1(objWSParamO) = strVal
						set strStatus = $$$Save("WWWWSLogParamO",idWSLog_$$$COMMA_idParamO,objWSParamO,1)
					}
				}
			}
        } else {
	        //ReturnValue, ReturnStatus
			set idParamO =strProp.Name
			set objWSParamO =""
			set $$$WWWWSLogParamOValue1(objWSParamO) = $zobjmethod(##this,strProp.Name_"Get")
			set strStatus = $$$Save("WWWWSLogParamO",idWSLog_$$$COMMA_idParamO,objWSParamO,1)
        }
	}
	
	//Log Input Parameters
	
	if ($get(%session) '= "") {
		set $$$WWWWSLogRemoteAddr(objWSLog) = $get(%request.CgiEnvs("REMOTE_ADDR"))
		
		set strParam=""
		for {
			set strParam=$order(%request.Data(strParam))
			quit:strParam=""
			set objWSParamI ="" ; $get(^WWWWSLogParamI(0,idWSLog,strParam,1))

			set $$$WWWWSLogParamIValue1(objWSParamI) = $get(%request.Data(strParam,1))
						
			; overwrite the password with a default hidden characters string
			if (strParam = "Password"){
				set objWSParamI = $get(%request.Data(strParam,1))
				set $piece(objWSParamI,1-99)= "****" 
			}

			;set strStatus = $$$Save("WWWWSLogParamI",idWSLog_$$$COMMA_strParam,objWSParamI,1)
			
			if (strParam = "LocationId") {
					set $$$WWWWSLogLocation(objWSLog)  = $get(%request.Data(strParam,1))
			}
				
			if (strParam = "ItemNumber"){
					if $$$WWWWSLogItemNumber(objWSLog)="" set $$$WWWWSLogItemNumber(objWSLog)= $get(%request.Data(strParam,1)) ;17504
			}
				;if there is no Session ID in the header already, check for parameter to populate			
			if (strParam = "SessionId") && $$$WWWWSLogSessionID(objWSLog)=$$$NULLOREF{
					set $$$WWWWSLogSessionID(objWSLog) = $get(%request.Data(strParam,1))
			}
				;if there is no method in the header already, check for parameter to populate			
			if (strParam = "soap_method") && ($$$WWWWSLogMethodName(objWSLog)=""){
					set $$$WWWWSLogMethodName(objWSLog) = $get(%request.Data(strParam,1))
			}
				;if there is no Client Id in header, check for parameter to pass in
			if (strParam = "ClientIdent") && ($$$WWWWSLogClientID(objWSLog)=""){
					set $$$WWWWSLogClientID(objWSLog) = $get(%request.Data(strParam,1))
			}
			if (strParam="DemandId") {
				;17504
				do ..AddItemNumber(.objWSLog,$get(%request.Data("LocationId",1)),$get(%request.Data("DemandId",1)))
			}
			set strStatus = $$$Save("WWWWSLogParamI",idWSLog_$$$COMMA_strParam,objWSParamI,1)
			

			;//Log Client Info
			;if (strParam = "SessionId") {
			;	set objSession = ##class(alWEB.WS.Session).%OpenId($get(%request.Data(strParam,1)))
			;	if (objSession '= "") {
			;		set $$$WWWWSLogClientID(objWSLog) = objSession.ClientIdent 
			;		set $$$WWWWSLogUserID(objWSLog)   = objSession.UserIdent
			;		set $$$WWWWSLogMsgSeqNo(objWSLog) = objSession.MsgSequenceNo
			;		set $$$WWWWSLogSessionID(objWSLog)= objSession.%Id()
			;	}
			;}
		}
	}

	if ..SessionId'="" {
		; SR16385 shobby.   Put this information here as with the Connect not all will be available
		; 					at time of PrepareLog
		do ..AddSessionInfo(.objWSLog,..SessionId) ;SR16451
	}

	set $$$WWWWSLogDuration(objWSLog) = $zh - fltStarted
	set strStatus = $$$Save("WWWWSLog",idWSLog,objWSLog,1)
	quit strStatus
]]></Implementation>
</Method>

<Method name="AddSessionInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjWSLog,pidSession</FormalSpec>
<Implementation><![CDATA[
	;------------------------------------------------------------------------------ 
	; Add client information to the log	
	;
	; History	
	; 19-Feb-2009	shobby	SR16451: Created
	;------------------------------------------------------------------------------ 
	if pidSession'="" {
		set objSession = ##class(alWEB.WS.Session).%OpenId(pidSession)
		if (objSession '= "") {
			set $$$WWWWSLogClientID(pobjWSLog) = objSession.ClientIdent 
			set $$$WWWWSLogUserID(pobjWSLog)   = objSession.UserIdent
			set $$$WWWWSLogMsgSeqNo(pobjWSLog) = objSession.MsgSequenceNo
			set $$$WWWWSLogSessionID(pobjWSLog)= pidSession
		}
	}
]]></Implementation>
</Method>

<Method name="AddItemNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjWSLog,pidLocation,pidDemand</FormalSpec>
<Implementation><![CDATA[
	;------------------------------------------------------------------------------ 
	; Make sure Item number is put in to header	
	;
	; History	
	; 01-Aug-2010	shobby	SR17504: Created
	;------------------------------------------------------------------------------ 
	if (pidLocation'="")&&(pidDemand'="") {
		set objDemand=$get(^INDRPDEMAND(0,pidLocation,pidDemand,1))
		if $$$INDRPDEMANDItemNo(objDemand)'="" {
			set $$$WWWWSLogItemNumber(pobjWSLog)=$$$INDRPDEMANDItemNo(objDemand)
		}
	}
]]></Implementation>
</Method>
</Class>
</Export>