<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="Common.Dump">
<Description><![CDATA[
Error logging

History:
13-Dec-2001	shobby		Removed RetreiveError method, it was calling a non-existent class and would fail to compile under Cache 4.x
04-Nov-1999	Pau Prashanth	Increased the MAXLEN for ErrReference to 1000
23-Jul-1999	Paul Prashanth	Creation ]]></Description>
<Final>0</Final>
<Abstract>1</Abstract>
<ClassType/>
<Hidden>0</Hidden>
<IncludeCode>%occKeyword,%occOptions,%occObject,%occReference</IncludeCode>
<IncludeGenerator>%occInclude</IncludeGenerator>
<NoContext>0</NoContext>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Persistent</Super>
<System>0</System>

<Method name="AddError">
<Description><![CDATA[
Add error to error log and trap environment variables

Parameters:
Class		%String		Error Classs
Code		%String		Error Code to be logged
Description	%String		Error Description
Level		%Integer		Error Level (1-8)
ObjID		%String		Object ID	
Reference	%String		Any Programmer Comments
ReturnStatus	%Status		The Error Status returned
Type		%Integer		Type of Error (1-Traped Error,2-Object Error)
UserName 	%String		User Name or ID

Returns:%Status
Returns $$$OK if the query executes successfully, otherwise returns an error code.

History:
30-Aug-2002	Robert Wuttke	Added allow dump so expected errors can not cause the file to be created
26-Apr-2001	Steve Robin	Added DumpFile
19-Apr-2001	Steve Robin	Improved Error Trap
27-Feb-2001	Steve Robin	Show Error details on screen
13-Oct-1999	Nigel Spencer	Removed call to BACK^%ETN to increase speed of error handling
23-Jul-1999	Paul Prashanth	Creation]]></Description>
<Final>0</Final>
<NotInheritable>0</NotInheritable>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>ErrClass:%String="&quot;,ErrCode:%String="&quot;,ErrDescription:%String="&quot;,ErrLevel:%Integer=4,ErrObjID:%String,ErrReference:%String,ErrReturnStatus:%Status,ErrType:%Integer=1,ErrUserName:%String="&quot;,pblnDoDump:%Boolean=1</FormalSpec>
<NotForProperty>0</NotForProperty>
<Private>0</Private>
<ReturnType>%Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[

 do:pblnDoDump ..DumpFile(ErrDescription)
 
 quit $$$OK

AddErrorTrap
 set $ztrap=""
 set $ZERROR="Cannot write the Error Log"  do BACK^%ETN
 quit $$$OK
]]></Implementation>
</Method>

<Method name="Dump">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>pstrDumpDesc:%String="&quot;,pblnDumpHTML:%Boolean=1</FormalSpec>
<Private>0</Private>
<ProcedureBlock>0</ProcedureBlock>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 new intDumpOref

 set $ztrap="DumpError"
 Set intDumpOref=0
 kill ^mtemp("ErrorDump",$j)
 if pblnDumpHTML {
 	Write "<PRE>"
 	Write "Description: ",..DumpData(pstrDumpDesc),"  Logged at ",$zdt($h,3),!
 	Write "<A HREF=""#Variables"">Variables</A> <A HREF=""#Stack"">Call Stack</A> <A HREF=""#Objects"">Objects</A>",!
 	Write "Index",!
 }
 Do ..DumpVariables(pstrDumpDesc,pblnDumpHTML)
 if pblnDumpHTML {
 	Write "</PRE>"
 }
 kill ^mtemp("ErrorDump",$j)
 quit

DumpError
 set $ztrap=""
 do BACK^%ETN
 quit
]]></Implementation>
</Method>

<Method name="DumpData">
<Description><![CDATA[
Decodes Object Data

Parameters:
pstrData		%string		Data to decode
pintMode		%Integer		Mode (2=Variable)

Returns: Data

History:
	03-Mar-2014	SCR			HEVA-1343:Improve $List Display
15-Mar-2002	Steve Robin	Added Quotes to Null Values
23-Apr-2001	Steve Robin	Variable Name Option
14-Apr-2001	Steve Robin	Created]]></Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>pstrData:%String,pintMode:%Integer=1</FormalSpec>
<Private>0</Private>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 New intListLen,intItem,intMode,intLen,strVar,strListVal
 New strOut,strChar,strAscii
 New blnControl,blnLast

 Set strOut=""
 Set intListLen=..ListLength(pstrData)
 
 if intListLen {
	 set strOut="$LB("
	 for intItem=1:1:intListLen {
		 set strListVal=$listget(pstrData,intItem,"@No@Value@")
		 if strListVal'="@No@Value@" {
			 set strVar=..DumpData(strListVal)
			 set:+strVar'=strVar strVar=""_strVar_""
			 set strOut=strOut_strVar
		 }
		 if intItem'=intListLen set strOut=strOut_","
	 }
	 set strOut=strOut_")"
 } elseif +pstrData=pstrData {
	 set strOut=pstrData
 } else {
	 set blnLast=$$$NO,intMode=0,intLen=$length(pstrData)
	 for intItem=1:1:intLen {
		 set blnLast=intItem=intLen
		 set strChar=$extract(pstrData,intItem)
		 set blnControl=0
		 set strAscii=$ascii(strChar)
		 if (strAscii<32) || (strAscii>126) set blnControl=1
		 if blnControl {
			 if 'intMode && (intItem>1) set strOut=strOut_"""_"
			 set strOut=strOut_$select(intMode:",",1:"$C(")_strAscii
			 set intMode=1
			 if blnLast set strOut=strOut_")"
		 } else {
			 if intMode set strOut=strOut_")_"""
			 if intItem=1 set strOut=strOut_""""
			 set strChar=$case(strChar,"&":"&25","<":"&lt",">":"&gt",:strChar)
			 set strOut=strOut_strChar
			 if blnLast set strOut=strOut_""""
			 set intMode=0
		 }
	 }
	 
	 if pintMode=2 {
		 set strOut=$extract(strOut,2,$length(strOut)-1)
	 }
	 
	 if strOut="" set strOut=""""""
 }
 
 Quit strOut
]]></Implementation>
</Method>

<Method name="DumpFile">
<Description><![CDATA[
Dump the Error to A File

Parameters:
pstrDumpDesc		%String

Returns:		Nothing

History:
22-Mar-2005 Robert W	Put the name of the developer into the dump path
18-May-2001	Steve Robin	Changed Var Names
14-Apr-2001	Steve Robin	Created]]></Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>pstrDumpDesc:%String="&quot;,pstrForceUser:%String="&quot;</FormalSpec>
<Private>0</Private>
<ProcedureBlock>0</ProcedureBlock>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 new strDumpPath,strDumpSpec,strIO
 new strDumpFile,strDumpIndex
 new intDumpCount


 set strDumpSpec=$get(^Dump)
 set intDumpCount=$piece(strDumpSpec,",",2)+1
 set strDumpPath=$piece(strDumpSpec,",",1)

 if strDumpPath="" quit  ; No Path short ciruit exit

 set $piece(^Dump,",",2)=intDumpCount

 set strDumpPath=##class(%Library.File).NormalizeDirectory(strDumpPath)

 ;if $extract(strDumpPath,$length(strDumpPath))'="\" set strDumpPath=strDumpPath_"\"
 
 if pstrForceUser="" set pstrForceUser=$get(YBED)
 if pstrForceUser'="" {
	 set strDumpPath=strDumpPath_pstrForceUser
 }
 
 set strDumpPath=##class(%Library.File).NormalizeDirectory(strDumpPath)
 
 if '##class(%File).DirectoryExists(strDumpPath) {
	 do ##class(%File).CreateDirectoryChain(strDumpPath)
 }

 //set strDumpFile=$zdt($h,3)_" "_$translate($justify(intDumpCount,5)," ","0")_"@"_$stack($stack(-1)-1,"PLACE")_".htm"
 set strDumpFile=$tr($zdt($h,3),":","-")_" "_$translate($justify(intDumpCount,5)," ","0")_"@"_$stack($stack(-1)-1,"PLACE")_".htm"
 ; WTF? I don't think we need this line.  set strDumpFile=$translate()
 
 set strDumpFile=strDumpPath_"Dump-"_strDumpFile

 open strDumpFile:"NSW":1  
 else  quit 0  ; Can not open file

 set strIO=$io
 use strDumpFile
 do ..Dump(pstrDumpDesc)
 use strIO
 close strDumpFile
 quit 1
]]></Implementation>
</Method>

<Method name="DumpVariables">
<Description><![CDATA[
Dump Varaibles & Stack

Parameters:
pstrDumpError	%String		Error String
pblnDumpHTML	%boolean	Gererate HTML Tags/Links

Returns: Nothing

History:
11-Aug-2010 Steve Robin Added OjectListing
09-Mar-2002	Steve Robin	Changed Variable list to Set var
18-May-2001	Steve Robin	Changed Var Names & Exclude thme from list
23-Apr-2001	Steve Robin	Added Local Array Reporting, exclude '%obj'
19-Apr-2001	Steve Robin	Improved Stack Reporting
16-Apr-2001	Steve Robin	Added Stack
14-Apr-2001	Steve Robin	Created]]></Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>pstrDumpError:%String,pblnDumpHTML:%Boolean=1</FormalSpec>
<Private>0</Private>
<ProcedureBlock>0</ProcedureBlock>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 New strDumpVar,strDumpSub,strDumpRef,strDumpTag,strDumpRtn
 New intDumpFrame,intDumpLine,intDumpNext,intDumpErrorLine,objCurrent

 if pblnDumpHTML write "<A NAME=""Variables""></A>"

 Write !!,"Description ",..DumpData(pstrDumpError)
 if pstrDumpError[">" {
 	new $etrap
 	; Special trap to skip next line if there is an error
 	set $etrap="set $ecode="""" q"
 	set strDumpRef=$piece(pstrDumpError,">",2)
 	set intDumpErrorLine=+$piece(strDumpRef,"+",2) ; Get Error Line Number
 	if 'intDumpErrorLine {   ; No Line Number
 		write !,"Code ",..DumpData($text(@strDumpRef),2)
 	} else {
 		set intDumpNext=intDumpErrorLine-2
 		if intDumpNext<0 set intDumpNext=0
 		write !,"Code Segment!"
 		for intDumpLine=intDumpNext:1:intDumpErrorLine+2 {  ; Show Code Segment
	 		set strDumpRef=$piece(strDumpRef,"+")_"+"_intDumpLine_"^"_$piece(strDumpRef,"^",2)
 			write !
 			if intDumpLine=intDumpErrorLine write " ---> "
 			write ?10,..DumpData($text(@strDumpRef),2)
 		}
 	}
 }

 write !,"Variables: "
 set strDumpVar=""
 for {
	 set strDumpVar=$order(@strDumpVar)
	 quit:strDumpVar=""
	 
	 if $extract(strDumpVar,1,4)="%obj" quit  ; Dont Do this one
 	 if " strDumpVar strDumpSub pblnDumpHTML intDumpCount pstrDumpDesc pstrDumpError strDumpFile strDumpPath strDumpSpec intDumpErrorLine intDumpLine intDumpNext intDumpOref strDumpRef "[strDumpVar continue
 	 if $data(@strDumpVar)#2 {
 	 	write !,"set "_strDumpVar,"=",..DumpData($get(@strDumpVar))
 	 }
 	 set strDumpSub=strDumpVar
 	 for {
	 	 set strDumpSub=$query(@strDumpSub)
	 	 quit:strDumpSub=""
	 	 
	 	 write !,"set "_..DumpData(strDumpSub,2),"=",..DumpData(@strDumpSub)
 	 }
 }
 write !!,"Call Stack"
 if pblnDumpHTML write "<A NAME=""Stack""></A>",!
 for intDumpFrame=$stack(-1):-1:1 {
 	write "Frame=",intDumpFrame
 	write " Type=",$stack(intDumpFrame)
 	write " Location=",$stack(intDumpFrame,"PLACE")
 	write " Code=",$stack(intDumpFrame,"MCODE"),!
 }
 do ..Object(pblnDumpHTML)
 Quit
]]></Implementation>
</Method>

<Method name="Object">
<ClassMethod>1</ClassMethod>
<FormalSpec>pblnDumpHTML:%Boolean</FormalSpec>
<Implementation><![CDATA[

 write !,"Objects: "
 if pblnDumpHTML write "<A NAME=""Objects""></A>",!
 if pblnDumpHTML {
	do ..ObjectSummary(pblnDumpHTML)
 }
 do ..ObjectList(pblnDumpHTML)
]]></Implementation>
</Method>

<Method name="ObjectSummary">
<ClassMethod>1</ClassMethod>
<FormalSpec>pblnDumpHTML:%Boolean</FormalSpec>
<Implementation><![CDATA[
 write "<table border=1><tr>",!
 set intCol=0
 	
 set objCurrent=""
 for  {
	 set objCurrent=$zobjnext(objCurrent)
	 quit:objCurrent=""
	 write "<td><A HREF='#"_$tr(objCurrent,"@",".")_"'>"
	 write objCurrent
	 try {
	 	write " id = "
	 	write $listget(objCurrent.%Oid(),1)
	 } catch {}
	 write "</A></td>",!
	 set intCol=intCol+1
	 if intCol>4 {
		 set intCol=0
		 write "</tr><tr>",!
	 }
	
 }
 write "</tr></table>"
]]></Implementation>
</Method>

<Method name="ObjectList">
<ClassMethod>1</ClassMethod>
<FormalSpec>pblnDumpHTML:%Boolean</FormalSpec>
<Implementation><![CDATA[
 set objCurrent=""
 for  {
	 set objCurrent=$zobjnext(objCurrent)
	 quit:objCurrent=""
	 if pblnDumpHTML {
	 	write "<A NAME='"_$tr(objCurrent,"@",".")_"'>"
	 } 
	 write !,objCurrent,!
	 do $System.OBJ.Dump(objCurrent)

}
]]></Implementation>
</Method>

<Method name="GetDescription">
<Description><![CDATA[
Gets the error description for a given Error Code (Standard or User defined errors)

Parameters:
pintErrNum	%Integer		Error Number

Returns:%String
Returns error descripion.

History:
13-Aug-1999	Paul Prashanth	Creation

Notes :
The error description will be returned in the following format

'ERROR #425: Property parameter not declared']]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pintErrNum:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 ; Return Error Description
 new strError           ; Error array
 ;
 do DecomposeStatus^%apiOBJ($$$ERR(pintErrNum),.strError)
 quit $get(strError(1))
]]></Implementation>
</Method>

<Method name="ListLength">
<Description><![CDATA[
Return the ListLength of a List

Parameters:
pstrList		%string		List

Return:	Count

History:
23-Apr-2001	Steve Robin	Double Check List
19-Apr-2001	Steve Robin	Improved Error Trapping
14-Apr-2001	Steve Robin	Created]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrList:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 new intItem,intCount
 new strData

 Set $Ztrap="ListLengthError"

 set intCount=$Listlength(pstrList)

 for intItem=1:1:intCount {  ; Double check list
 	set strData=$listGet(pstrList,intItem)
 }

 quit intCount

ListLengthError
 set $ecode=""
 Quit 0
]]></Implementation>
</Method>
</Class>
</Export>