<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.mobile.PersistenceLogicImpl">
<ClassType/>
<IncludeCode>COMSYS,WWWConst</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>VAR.mobile.JavaAbstract</Super>

<Method name="isRecordExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,className:%String,keys:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set className = ##class(Util).cleanBinaryZero(className)
	set keys = ##class(Util).cleanBinaryZero(keys)

	quit $data(@..getRecordRef(company, className, keys))]]></Implementation>
</Method>

<Method name="getRecordValues">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,className:%String,keys:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set className = ##class(Util).cleanBinaryZero(className)
	set keys = ##class(Util).cleanBinaryZero(keys)

	quit $get(@..getRecordRef(company, className, keys))]]></Implementation>
</Method>

<Method name="getNextSeq">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,className:%String,keys:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set className = ##class(Util).cleanBinaryZero(className)
	set keys = ##class(Util).cleanBinaryZero(keys)

	if ('##class(SessionLogicImpl).isOpen()) quit ""

	set nextCounter = ""

	do ##class(NetManagetHelper).changeCompany(company)
	if ($length(keys) = 0) {
		set nextCounter = $$^WWWNEXT(className)
	}
	else {
		set nextCounter = $$^WWWNEXT1(className, keys, $length(keys, $$$COMMA) + 1)
	}
	do ##class(NetManagetHelper).restoreCompany()

	quit nextCounter]]></Implementation>
</Method>

<Method name="getTransactionLevel">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	quit $tlevel]]></Implementation>
</Method>

<Method name="beginTransaction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	if ($tlevel = 0) tstart]]></Implementation>
</Method>

<Method name="commitTransaction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	while ($tlevel > 0) { tcommit }]]></Implementation>
</Method>

<Method name="rollbackTransaction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	if ($tlevel > 0) trollback]]></Implementation>
</Method>

<Method name="saveRecord">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,className:%String,keys:%String,values:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>StatusBean</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set className = ##class(Util).cleanBinaryZero(className)
	set keys = ##class(Util).cleanBinaryZero(keys)
	set values = ##class(Util).cleanBinaryZero(values)

	set result = ##class(StatusBean).%New()

	if ('##class(SessionLogicImpl).isOpen()) {
		set result.Code = result.%GetParameter("ERRORSESSIONNOTOPENED")
        do result.Messages.Insert("Session not opened")
        quit result
	}

	do ##class(NetManagetHelper).changeCompany(company)
	set strStatus = $$$Save(className, keys, values, $$$YES)

    if ($$$ISOK(strStatus)) {
		set result.Code = result.%GetParameter("SUCCESS")
    }
	else {
		set result.Code = result.%GetParameter("ERRORGENERIC")
        do result.Messages.Insert($$DecodeError^COMUtilError(strStatus))
	}
	do ##class(NetManagetHelper).restoreCompany()

	quit result]]></Implementation>
</Method>

<Method name="deleteRecord">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,className:%String,keys:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>StatusBean</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set className = ##class(Util).cleanBinaryZero(className)
	set keys = ##class(Util).cleanBinaryZero(keys)

	set result = ##class(StatusBean).%New()

	if ('##class(SessionLogicImpl).isOpen()) {
		set result.Code = result.%GetParameter("ERRORSESSIONNOTOPENED")
        do result.Messages.Insert("Session not opened")
        quit result
	}

	do ##class(NetManagetHelper).changeCompany(company)
	set strStatus = $$$Kill(className, keys)

    if ($$$ISOK(strStatus)) {
		set result.Code = result.%GetParameter("SUCCESS")
    }
	else {
		set result.Code = result.%GetParameter("ERRORGENERIC")
        do result.Messages.Insert($$DecodeError^COMUtilError(strStatus))
	}
	do ##class(NetManagetHelper).restoreCompany()

	quit result]]></Implementation>
</Method>

<Method name="getRecordRef">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,className:%String,keys:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set className = ##class(Util).cleanBinaryZero(className)
	set keys = ##class(Util).cleanBinaryZero(keys)

	if ($extract(keys, 1, 1) '= """") set keys = """"_keys
	if ($extract(keys, $length(keys), $length(keys)) '= """") set keys = keys_""""

	quit "^"_className_"("""_company_""", "_keys_", 1)"]]></Implementation>
</Method>

<Method name="allocLicence">
<ClassMethod>1</ClassMethod>
<FormalSpec>username:%String=""</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[	if (username= "") {
		set username = $GET(YBED)
	}
	set objWWW013 = $GET(^WWW013(0,username,1))
	set userId = $$$WWW013LicenseUserId(objWWW013)
	do allocMobileLicense^COMSTARTZstart(userId)]]></Implementation>
</Method>

<Method name="unallocLicence">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[	do $System.License.Login($char(0))]]></Implementation>
</Method>
</Class>
</Export>