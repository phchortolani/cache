<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alWEB.WS.DataExchange">
<Description><![CDATA[
alWEB.WS.DataExchange]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService,alWEB.WS.Utils</Super>

<Parameter name="SERVICENAME">
<Description><![CDATA[
Name of the WebService.]]></Description>
<Default>DataExchange</Default>
</Parameter>


<Parameter name="NAMESPACE">
<Description><![CDATA[
Namespace of the WebService.]]></Description>
<Default>http://www.disclinc.com</Default>
</Parameter>


<Method name="GetData">
<Description><![CDATA[
Pick Up New or Changed Data<br>
<b>Input Parameters:</b><br>
SessionId = WebService Session Id<br>
MsgSequence = Message Sequence Number of this call<br>
KeepData = Keep Data after request (1 = Requires Confirmation To Mark Record As Send, 0 = dflt.)<br>]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,KeepData:%Boolean=0</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//---------------------------------------------
	// History:
	// 22-Jan-2009	SCR		SR16320:  Use Common Base64 & UTF8 Conversion for Unicode
	// 10-Oct-2008	FIS 	SRBR014564: Updated to new web service logic
	// 17-Jan-2008 	FIS 	SRBR014564: Created
	//---------------------------------------------
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	//validate session
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) {
		
		//vvvvvvvvvv set environment parameter for @net Manager
		// TO BE REPLACED BY NEW V1 -> V2 ENVIRONMENT SETTING
		set %("%KEY","YBED") = "WEBSERVICE"
		set %("%KEY","YPWD") = $piece($get(^WWW013(0,"WEBSERVICE",1)),"~",2)
		set %("%KEY","YM") = 0
		do ^WWWVAR
		//^^^^^^^^^^
		
		set xml        = ""     //message data
		set syncMsg    = ""     //message number
		set blnEncrypt = $$$NO  //message encryption ?
		
		//call function
		set objSession = ##class(alWEB.WS.Session).%OpenId(SessionId)
		if (objSession '= "") {
			set strStatus = $$GetData^WWWDataExchange(objSession.ClientIdent,.xml,.syncMsg,.blnEncrypt)
			if '$$$ISOK(strStatus) {
		   		set strStatus = $$$MakeStatus($$$Text("IN00001"))
			}
			if $$$ISOK(strStatus) && (KeepData '= 1) && (xml '= "") {
				set strStatus = $$FlagProcessed^WWWDataExchange(objSession.ClientIdent,syncMsg)
				if '$$$ISOK(strStatus) {
			   		set strStatus = $$$MakeStatus($$$Text("IN00001"))
				}
			}
			if $$$ISOK(strStatus) {
				if (xml = "") {  //no data
					//set strStatus = $$$MakeStatus($$$Text("IN00001"))
				
				} elseif ($extract(xml) = "<") && ($extract(xml,$length(xml)) = ">") {  //xml data		
					set objResult.ReturnValue = syncMsg  //message id
					set strTagName=""
					set objXMLReader = ##class(%XML.Reader).%New() // Create a new XML Reader class	
					set strStatus = ##class(%XML.TextReader).ParseString(xml,.objXMLReader) // Create an instance of %XML.TextReader
		    		if $$$ISOK(strStatus) {
		       			while (objXMLReader.Read()) {	 // Read all elements within the document
					        if (objXMLReader.NodeType = "element") { 
					    		set strTagName = objXMLReader.Name   //The target property name from data string
					    		if (strTagName = "Message") {
					        		for idA=1:1:objXMLReader.AttributeCountGet() {
					        			if (objXMLReader.MoveToAttributeIndex(idA)) {
					        				do objResult.ReturnArray.SetAt(objXMLReader.Value,"Message_"_objXMLReader.Name)
					        			}
					        		}
					    		}
				    		}
			    			if (objXMLReader.NodeType = "chars") && (strTagName '= "") {  // the the content between elements
								do objResult.ReturnArray.SetAt(objXMLReader.Value,strTagName)
			    			}
		       			}
		    		}
				
				} else {  //delimitered string		
					;set objResult.ReturnValue = syncMsg  //message id
					if (blnEncrypt = $$$YES) {
						set objResult.Encryption = $$$YES

						//set xml = $system.Encryption.Base64Encode(xml)
						set xml = $$GetBase64Encode^COMUtilStr(xml) //SR16320
					}
					set objResult.ReturnValue = xml
				}
			}
		}
	}
	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(strStatus))
	} else {											//DavidR 
	
	//return message
 ;	do objResult.LogDetails()   
	do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)   ;SR16385
	quit objResult
	}
]]></Implementation>
</Method>

<Method name="SendData">
<Description><![CDATA[
Send Data for Data Syncronizing<br>
<b>Input Parameters:</b><br>
SessionId = WebService Session Id<br>
MsgSequence = Message Sequence Number of this call<br>
Data = Data (as string or XML Structure)<br>
Encryption = Data Encrypted (yes/no)<br>
<b>Output Values:</b><br>
Status Code (0=Error, 1=Data Received OK)]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,Data:%String,Encryption:%Boolean</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//---------------------------------------------
	// History:
	// 22-Jan-2009	SCR		SR16320:  Use Common Base64 & UTF8 Conversion for Unicode
	// 10-Oct-2008 	FIS 	SRBR014564: Updated to new web service logic
	// 18-Jan-2008 	FIS 	SRBR014564: Created
	//---------------------------------------------
	
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	//validate session
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) {
		//vvvvvvvvvv set environment parameter for @net Manager
		// TO BE REPLACED BY NEW V1 -> V2 ENVIRONMENT SETTING
		set %("%KEY","YBED") = "WEBSERVICE"
		set %("%KEY","YPWD") = $piece($get(^WWW013(0,"WEBSERVICE",1)),"~",2)
		set %("%KEY","YM") = 0
		do ^WWWVAR
		//^^^^^^^^^^
		
		set objSession = ##class(alWEB.WS.Session).%OpenId(SessionId)	
		if (objSession '= "") {
			if ($get(Encryption) = $$$YES) {
				//set Data = $system.Encryption.Base64Decode($get(Data))
				set Data = $$GetBase64Decode^COMUtilStr($get(Data)) //SR16320
			}
			set strStatus = $$PushData^WWWDataExchange(objSession.ClientIdent,$get(Data))
			if $$$ISOK(strStatus) {
				set strStatus = $$In^WWWDataExchange(objSession.ClientIdent)	
				if $$$ISOK(strStatus) {
					set objResult.ReturnStatus = $$$OK
				}
			}
		}
	}
		
	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(strStatus))
	} else {									//DavidR
	
		//return message
	 ;	do objResult.LogDetails()   
		do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)   ;SR16385
	
		quit objResult
	}
]]></Implementation>
</Method>

<Method name="Confirm">
<Description><![CDATA[
Get Data for Data Syncronizing<br>
<b>Input Parameters:</b><br>
SessionId = WebService Session Id<br>
MsgSequence = Message Sequence Number of this call<br>
SyncMsgNumber = Synchronising Message Number (To Confirm Reveicing)<br>
<b>Output Values:</b><br>
Status Code (0=Error, 1=OK)]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,SyncMsgNumber:%String</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//---------------------------------------------
    // History:
	// 10-Oct-2008 FIS SRBR014564: Updated to new web service logic
    // 17-Jan-2008 FIS SRBR014564: Created
	//---------------------------------------------
	
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	//validate session
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) {
		//vvvvvvvvvv set environment parameter for @net Manager
		// TO BE REPLACED BY NEW V1 -> V2 ENVIRONMENT SETTING
		set %("%KEY","YBED") = "WEBSERVICE"
		set %("%KEY","YPWD") = $piece($get(^WWW013(0,"WEBSERVICE",1)),"~",2)
		set %("%KEY","YM") = 0
		do ^WWWVAR
		//^^^^^^^^^^
		
		set objSession = ##class(alWEB.WS.Session).%OpenId(SessionId)
		if (objSession '= "") {
			set strStatus = $$FlagProcessed^WWWDataExchange(objSession.ClientIdent,$get(SyncMsgNumber))
			if $$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
				set objResult.ReturnValue="OK"
			}
		}
	}
	
	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(strStatus))
	} else {				//Davidr
	
			//return message
			do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)
			quit objResult
	}
]]></Implementation>
</Method>

<Method name="ChangeAccess">
<Description><![CDATA[
Changes a Remote system from Slave to Master<br>
<b>Input Parameters:</b><br>
SessionId = WebService Session Id<br>
MsgSequence = Message Sequence Number of this call<br>
SyncMsgNumber = Synchronising Message Number (To Confirm Reveicing)<br>
<b>Output Values:</b><br>
Status Code (0=Error, 1=OK)]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,RuleNo:%String,AccessPeriod:%Integer</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[

	//---------------------------------------------
    // History:
	// 10-Oct-2008 FIS SRBR014564: Updated to new web service logic
    // 31-May-2008 VIJAY Created
	//---------------------------------------------
	
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	//validate session
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}


	if $$$ISOK(strStatus) {
		//vvvvvvvvvv set environment parameter for @net Manager
		// TO BE REPLACED BY NEW V1 -> V2 ENVIRONMENT SETTING
		set %("%KEY","YBED") = "WEBSERVICE"
		set %("%KEY","YPWD") = $piece($get(^WWW013(0,"WEBSERVICE",1)),"~",2)
		set %("%KEY","YM") = 0
		do ^WWWVAR
		//^^^^^^^^^^
	
		set objSession = ##class(alWEB.WS.Session).%OpenId(SessionId)
		if (objSession '= "") {
			set strStatus = $$ChangeAccessRights^WWWDataExchange(objSession.ClientIdent,RuleNo,+$get(AccessPeriod))
			if $$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
				set objResult.ReturnStatus = $$$OK
			}
		}
	}
	
	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(strStatus))
	} else {				//DavidR
			//return message
		 ;	do objResult.LogDetails()   
			do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)   ;SR16385
			quit objResult
	}
]]></Implementation>
</Method>
</Class>
</Export>