<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alMOV.dUMov">
<ClassType>persistent</ClassType>
<IncludeCode>COMConst,COMSYS,WWWConst,INConst</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>User.INMOV</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; History:
; 27-Apr-2011	GRF		SR17715: Add MovPallets
; 30-Jan-2008	LB		SR15626: Changed the signature of dStatus to dUStatus
; 24-Jan-2008	HQN		SR15625: Changed class signature dLocation to dULocation
; 28-Nov-2007	LB		SR15598: Created 
/---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="MovLines">
<Description><![CDATA[
Pseudo relation to Implement better object relations under a @nM enviroment<br>
The Transient swizzled Pseudo object property to represent MovLines, the 
relationship between Mov and MovLine (head and lines)  ]]></Description>
<Type>alMOV.dUMovLine</Type>
<Collection>list</Collection>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00239"/>
</Property>


<Property name="MovPallets">
<Type>alMOV.dUMovPallet</Type>
<Collection>list</Collection>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00766"/>
</Property>


<Property name="objLocn">
<Description><![CDATA[
Pseudo relation to Implement better object relations under a @nM enviroment<br>
The Transient swizzled Pseudo object to represent Locn
property from <class>User.INMOV</class>   ]]></Description>
<Type>alLOC.dULocation</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00240"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="StatusSet">
<Description><![CDATA[
Pseudo relation. <br>
This is an over-ride of the Setter of the Status

This method is automatically called when you set the <code>Status</code> with either a 
string or a <code>alSYS.Status.dUStatus</code> object<br>
 Params:<br>
 arg 		- the object or the string value of the status 
 Returns: <br>
 	<class>%Status</class>]]></Description>
<FormalSpec>Arg</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	;History:
	;30-Jan-2008	LB		SR15626 Changed the signature of dStatus to dUStatus
	;28-NOV-2007	LB		SR15598: Created 
	;-------------------------------------------------------------------------------
	if $IsObject(Arg) {
		set i%Status = Arg.StatusCode
		
	} elseif (Arg?.N1"||".A1"||".N) {
		set i%Status = $piece(Arg,"||",3) ; OID expected in this format "YM||ClassName||YKEY"
		
	} else {
		set i%Status = Arg
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckLineBundle">
<FormalSpec>pBundle:alSOH.dBundle</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set blnReturn = $$$NO 
	
	for loopLines = 1:1:..MovLines.Count() {
		set tempMovLine = ..MovLines.GetAt(loopLines)
		
		if pBundle.%Id() = tempMovLine.Bundle {
			set blnReturn = $$$YES
			quit
		}
	}
	quit blnReturn
]]></Implementation>
</Method>

<Method name="IsFirmable">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 26-Feb-2009	HQN		SRAdHoc: Check for line existence
	; 14-Oct-2008	Luke	SR15910 Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if ..MovLines.Count() = 0 {
		set sc = $$$ERROR($$$GeneralError,$$$Text("INMOV02")) ; "No lines to move"
	}
	if $$$ISOK(sc) {
		for loopLines = 1:1:..MovLines.Count() {
			set tempMovLine = ..MovLines.GetAt(loopLines)
			set sc          = tempMovLine.IsFirmable()
			quit:$$$ISERR(sc)
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="IsFirmableByPallet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 27-Apr-2011	GRF	SR17715: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if ..MovPallets.Count() = 0 {
		set sc = $$$ERROR($$$GeneralError,$$$Text("INMOV02")) ; "No lines to move"
	}
	if $$$ISOK(sc) {
		for loopLines = 1:1:..MovPallets.Count() {
			set tempMovPallet = ..MovPallets.GetAt(loopLines)
			set sc          = tempMovPallet.IsFirmable()
			quit:$$$ISERR(sc)
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="CreateMovLines">
<Description><![CDATA[
/objReqLine As alREQ.dUReqLine, Output sc As %Status) As %ListOfObjects]]></Description>
<FormalSpec>strCompany:%String,objFromStore:alLOC.dStorage,fltItemQty,*sc:%Status</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 02-Apr-2008	Luke	Created
	;-------------------------------------------------------------------------------
	set sc = $$$YES
	set objMovLinesList  = ##class(%Library.ListOfObjects).%New()
	
	set objbundleStock = ""
	set lstBundlestock = "" 
	set rs=##class(%ResultSet).%New()
	set strSQL = "select id from alSOH.dBundleStock where storage = '"_objFromStore.%Id()_"'"
	
	if $$$ISOK(rs.Prepare(strSQL)) {
		if $$$ISOK(rs.Execute()) {		
			for {
				quit:'rs.Next()
				
				set objbundleStock= ##class(alSOH.dBundleStock).%OpenId(rs.Data("ID"))
				if objbundleStock '= "" {
					continue:..CheckLineBundle(objbundleStock.Bundle)
					
					set objMovLine = ##class(alMOV.dUMovLine).%New()
					
					set objMovLine.Company     = strCompany
					set objMovLine.FromStorage = objbundleStock.Storage
					
					set tempStore = %this.Location.GetDefaultOnHandStorage(objbundleStock.Item.ItemId,.sc)
					if tempStore = $$$NULLOREF { 
						set objMovLine.ToStorage = $$$NULLOREF
					} else {
						set objMovLine.ToStorage = tempStore
					}
					set objMovLine.Bundle      = objbundleStock.Bundle.%Id()
				//	set:(strSubLineNumber '= $$$NULLOREF) objMovLine.LineNumber = strLineNumber_"."_$translate($justify(strSubLineNumber,2,0)," ","0") ; mimic ANM Grid lines
				//	set:(objMovLine.LineNumber = "") objMovLine.LineNumber = strLineNumber
					set objMovLine.Item        = objbundleStock.Item.ItemId  //objItem
					set objMovLine.Unit        = $$$INARTUnitofMeasure($get(^INART(strCompany,objbundleStock.Item.ItemId,1))) ; objReqLine.Unit
					set objMovLine.QtyRequired = objbundleStock.QtyOnHand
				//	set objMovLine.Status      = ##class(alSYS.Status.dUStatus).%OpenId("0||INMovLine||1")
					
					do objMovLinesList.Insert(objMovLine)
				}
			}
		}
	}
	do rs.%Close()
	
   quit objMovLinesList
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
	Property Bundle As %String(CAPTION = "Bundle", MAXLEN = 30);
	Property Company As %String(MAXLEN = 30, XMLPROJECTION = "attribute") [ Required ];
	/// From Storage
	Property FromStorage As %String(CAPTION = "From Storage", MAXLEN = 30) [ Required ];
	/// IssueLine
	Property IssueLine As %String(CAPTION = "IssueLine", MAXLEN = 4096);
	/// Item
	Property Item As %String(CAPTION = "Item&quot;, MAXLEN = 30) [ Required ];
	/// Number
	Property Number As %String(CAPTION = "Number", COLLATION = "EXACT", XMLPROJECTION = "attribute") [ Required ];
	/// QTYPicked
	Property QTYPicked As %Numeric(CAPTION = "QTYPicked");
	/// QTYReceived
	Property QTYReceived As %Numeric(CAPTION = "QTYReceived");
	/// QtyRequire
	Property QtyRequired As %Numeric(CAPTION = "QtyRequired");
	/// Stock Movemen Number
	Property StockMovementNumber As %String(CAPTION = "Stock Movement Number", COLLATION = "EXACT", MAXLEN = 30, XMLPROJECTION = "attribute") [ Required ];
	/// ToStorage
	Property ToStorage As %String(CAPTION = "ToStorage", MAXLEN = 30) [ Required ];
	/// Unit
	Property Unit As %String(CAPTION = "Unit&quot;, MAXLEN = 30);
	*/
</Content>
</UDLText>

<UDLText name="T">
<Content>
/*
		if (fltQtyIssued &gt; 0) {
			set objMovLine = ##class(alMOV.dUMovLine).%New()
			set objIssueLine.Company   = strCompany
			//set objMovLine.IssueNumber = %this.IssueNumber
			set objMovLine.FromStorage = objFromStore.Code
			set objMovLine.ToStorage   = objToStore.Code
			
			set objMovLine.Bundle      = objBundleStock.Bundle.%Id()
			set:(strSubLineNumber '= $$$NULLOREF) objMovLine.LineNumber = strLineNumber_".&quot;_$translate($justify(strSubLineNumber,2,0)," &quot;,"0&quot;) ; mimic ANM Grid lines
			set:(objMovLine.LineNumber = "&quot;) objMovLine.LineNumber = strLineNumber
			set objMovLine.Item        = objItem
			set objMovLine.Unit        = $$$INARTUnitofMeasure($get(^INART(objIssueLine.Company,objIssueLine.Item,1))) ; objReqLine.Unit
			set objMovLine.QtyRequired = fltLineQtyRequired
			set objIssueLine.Status      = ##class(alSYS.Status.dUStatus).%OpenId("0||INMovLine||1")
			
			;set objItemLocation = ##class(User.INDRPITEM).%OpenId(0_"||&quot;_objReqLine.FromStockLocn.Location_"||&quot;_objIssueLine.Item)
			set sc = objMovLine.%Save()
			if ($$$ISOK(sc)) { ; exception handling?
				do objMovLinesList.Insert(objMovLine)
				set fltQtyRequired = fltQtyRequired - fltQtyIssued
				set:(strLineNumber = $$$NULLOREF) strLineNumber = objMovLine.Number
				set strSubLineNumber = $i(strSubLineNumber)
			}
		}
		quit:(fltQtyRequired = 0) ; break out of for loop*/
</Content>
</UDLText>

<UDLText name="T">
<Content>/* remaining Qty, could not source, make blank entries */
</Content>
</UDLText>

<UDLText name="T">
<Content>/* only create empty issue lines for unsourcables */
</Content>
</UDLText>

<UDLText name="T">
<Content>
/*if (objMovLinesList.Count() = 0) {
		set objMovLine = ##class(alMOV.dUMovLine).%New()
		set objMovLine.Company     = strCompany
		//set objMovLine.IssueNumber = %this.IssueNumber
		//set objMovLine.Reference   = objReqLine.LineNumber
		set:(strLineNumber '= $$$NULLOREF) objMovLine.Number = strLineNumber_".&quot;_$translate($justify(strSubLineNumber,2,0)," &quot;,"0&quot;) ; mimic ANM Grid lines
		*/
</Content>
</UDLText>

<UDLText name="T">
<Content>
// set objMovLine.Item        = objItem

</Content>
</UDLText>

<UDLText name="T">
<Content>
// set objIssueLine.Unit        = objReqLine.Unit

</Content>
</UDLText>

<UDLText name="T">
<Content>
// set objIssueLine.QtyRequired = fltLineQtyRequired

</Content>
</UDLText>

<UDLText name="T">
<Content>
// set objIssueLine.QtyIssued   = 0

</Content>
</UDLText>

<UDLText name="T">
<Content>
// set objMovLine.ToStorage   = objToStore.Code

</Content>
</UDLText>

<UDLText name="T">
<Content>
// set objMovLine.Status      = ##class(alSYS.Status.dUStatus).%OpenId("0||INMovLine||1")

</Content>
</UDLText>

<UDLText name="T">
<Content>
// set objIssueLine.Demand      = objReqLine.Demand

</Content>
</UDLText>

<UDLText name="T">
<Content>
// 	if ($$$ISOK(objMovLine.ANMSave())) {

</Content>
</UDLText>

<UDLText name="T">
<Content>
// 		do objMovLinesList.Insert(objMovLine)

</Content>
</UDLText>

<UDLText name="T">
<Content>
// 		set fltQtyRequired = fltQtyRequired - fltQtyIssued

</Content>
</UDLText>

<UDLText name="T">
<Content>
// 		set strSubLineNumber = $increment(strSubLineNumber)

</Content>
</UDLText>

<UDLText name="T">
<Content>
// 	}                                                             

</Content>
</UDLText>

<UDLText name="T">
<Content>
// } 

</Content>
</UDLText>


<Method name="StatusGet">
<Description><![CDATA[
Pseudo relation. <br>
This is an over-ride of the getter of the status <p>

This method is automatically called when you call the <code>Status</code> property <p> 
 Params:<br>
 
 Returns: <br>
 	<class>alSYS.Status.dUStatus</class>]]></Description>
<ReturnType>alSYS.Status.dUStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	;History:
	;28-NOV-2007	LB		SR15598: Created 
	;-------------------------------------------------------------------------------
	set strReturn = ##class(alSYS.Status.dUStatus).%OpenId("0||INMOV||"_i%Status)  //SR15626
	quit strReturn
]]></Implementation>
</Method>

<Method name="LocationSet">
<Description><![CDATA[
Pseudo relation. <br>
This is an over-ride of the Setter of the Location of type <code>alLOC.dULocation</code> <p>
Set the Underlying @nM FromStorage (which is a string) and creates a Transient property of 
type <code>alLOC.dULocation</code> <p>

This method is automatically called when you set the <code>Location</code> with either a 
string or a <code>alLOC.dULocation</code> object<br>
 Params:<br>
 
 Returns: <br>
 	<class>%Library.Status</class>]]></Description>
<FormalSpec>Locn</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	; 04-Dec-2007	GRF		Single exit point
	;-------------------------------------------------------------------------------
	if $IsObject(Locn) && Locn.%Extends("alLOC.dULocation") {
		set i%objLocn  = Locn
		set i%Location = Locn.Location
	} else {
		set i%Location = Locn
	}
	quit $$$YES
]]></Implementation>
</Method>

<Method name="LocationGet">
<Description><![CDATA[
Pseudo relation. <br>
Creates a <code>alLOC.dULocation</code> based on the Location <br>

This method is automatically called when you access the <code>Location</code><br>
 Params:<br>
 
 Returns: <br>
 	<class>alLOC.dULocation</class>]]></Description>
<ReturnType>alLOC.dULocation</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	;History:
	;24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;28-NOV-2007	LB		SR15598: Created 
	;-------------------------------------------------------------------------------
	if (i%Location '= $$$NULLOREF) && (i%objLocn = $$$NULLOREF) {
		set objLocn = ##class(alLOC.dULocation).%OpenId(0_"||"_i%Location)
		if (objLocn '= $$$NULLOREF) {
			set i%objLocn = objLocn
			do i%objLocn.%SetModified($$$NO)
		}
	}
	quit i%objLocn
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
/// &lt;p&gt;Saves the record utilising &lt;code&gt;$$Save^COMUtils&lt;/code&gt;
/// Relies on INConst.inc macros to set the pieces of the record&lt;/br&gt;
/// &lt;b&gt;NOTE: Should be code generated&lt;/b&gt;
/// &lt;/p&gt;
/// &lt;p&gt;Returns a &lt;class&gt;%Status&lt;/class&gt; value indicating success or failure.&lt;/p&gt;
Method ANMSave(blnDpSav As %Boolean = 0) As %Status
{
	;-------------------------------------------------------------------------------
	; History
	; 30-Oct-2009	DWR		SR16999: pass status message into $$DecodeError^COMUtilError
	; 31-Jul-2008	Luke	SR15814: corrected the status on @nM call
	; 26-Feb-2008	GRF		Quit move lines if error in ANMSave
	; 27-Nov-2007	LB		SR15597: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set ANMKey = %this.StockMovementNumber 
	set ANMMov = $get(^INMOV(%this.Company,%this.StockMovementNumber,1))
	
	set $$$INMOVDateCompleted(ANMMov) = i%DateCompleted
	set $$$INMOVDateEntered(ANMMov)   = i%DateEntered
	set $$$INMOVLocation(ANMMov)      = i%Location
	set $$$INMOVNotes(ANMMov)         = i%Notes
	set $$$INMOVStatus(ANMMov)        = i%Status
	set $$$INMOVStorage(ANMMov)       = i%Storage
	
	if blnDpSav {
		if (%this.MovLines '= $$$NULLOREF) || ( %this.MovLines.Count() '= 0 ) {
			for loopLines = 1:1:..MovLines.Count() {
				set tempMovLine = ..MovLines.GetAt(loopLines)
				set sc          = tempMovLine.ANMSave()
				quit:$$$ISERR(sc)
			}
		}
	}
	
	if $$$ISOK(sc) {
		set tempSC = $$Save^COMUtils("INMOV",ANMKey,ANMMov,$$$YES)
		if $$$ISERR(tempSC){
			set strMessage = $$DecodeError^COMUtilError(tempSC)
			set sc =$$$ERROR($$$GeneralError,strMessage)
		}
		//set sc = $$Save^COMUtils("INMOV",ANMKey,ANMMov,$$$YES)
		; FIXME : should this be a save always without checking locks?
	}
	quit sc
}
*/
</Content>
</UDLText>


<Method name="CreateMoveLine">
<Description><![CDATA[
Accepts an object that will either be a <class>alREQ.dUReq</class> or an <class>alISS.dUIssue</class><p>
The passed in object is check and a <class>alMOV.dUMovLine</class> for each line that is:<p>
 - Where the Item and From Location is not already contained in the movement (if so, it adds the quantity)<br>
 - has a status of firmed <br>
 <p>
 checks the storage to make sure there is enough stock, and finially adds the 
 new movement lines to current movement. 
 <br>
 Params:<br>
 objPassedin  - an object to be check for Issues <br>
 Returns: <br>
  a <class>%ListOfObjects</class> of <class>alMOV.dUMovLine</class><br>]]></Description>
<FormalSpec>objPassedin,pintCount:%Integer=0,*sc:%Status</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	;
	; History:
	; 20-May-2009	GRF		SRBR014965: Cleanup line number commented code
	; 31-Jul-2008	Luke	SR15814: Add correct calls to $$$Text and setting of sc
	; 24-Jan-2008	HQN		SR15625 Changed class signature dREQ to dUReq
	; 17-Dec-2007	Luke	Add IssueLine Swizzle object insertion; Add Line Counter;
	;						Add Status return in output for mac file useage 
	; 11-Dec-2007	PPP		Do not load Issues that have not yet been firmed.
	; 07-Dec-2007	PPP		"set movline.ToStorage" to the Default OnHand Storage
	;							(GetDefaultOnHandStorage) for the Item; Update QOH
	;							to GetItemSOHIncBlocked - which includes Blocked Qty	
	; 06-Dec-2007	Luke	Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set rtnList     = ##class(%Library.ListOfObjects).%New()
	set lstReqIssue = ##class(%Library.ListOfObjects).%New()
	
	if $IsObject(objPassedin) {
		if objPassedin.%ClassName() = "dUReq" {
			set lstReqIssue  = ##class(alISS.iISS).GetlstReqIssueBasedOnReqID(objPassedin.ReqNum)
		} else {
			set sc = lstReqIssue.Insert(objPassedin)
		}		
	}
	
	for loopIssue = 1:1:lstReqIssue.Count() {
		set objIssue = lstReqIssue.GetAt(loopIssue)
		continue:(objIssue.Status.StatusCode = 1)    ; not yet firmed
		
		// a check to see it the Mov locn and the Iss locn are the same
		// this is to get around the User typing in issues that don't belong to them
		if i%Location = objIssue.ToLocn.Location {
			if objIssue '= $$$NULLOREF {
				set intQty = 0
				
				for loopI=1:1:objIssue.IssueLines.Count() { 
					set objIssueLine = objIssue.IssueLines.GetAt(loopI)
					if objIssueLine.Status.StatusCode = 7 {
						set tempItem        = objIssueLine.Item
						set tempFromStorage = objIssueLine.ToStorage
						set blnFound        = $$$NO
							
	//	Look at the current Movline to see if we have a item AND bundle pair that match 
	//	If we do, we add the qty to it instead of creating a new one
	//	- OK we would like to do this, but bundle is not 100%, so we use 
	//	Storage to and from + Item 
						
						if $data(arrItem(tempItem,tempFromStorage)) {
							set intLn=$get(arrItem(tempItem,tempFromStorage))
							set (%this.MovLines.GetAt(intLn)).QtyRequired = (%this.MovLines.GetAt(intLn)).QtyRequired +objIssueLine.QtyIssued
							do movline.IssueLines.Insert(objIssueLine)
							set blnFound = $$$YES
						}
						
						if 'blnFound {
							set movline                     = ##class(alMOV.dUMovLine).%New()
							set movline.Company             = %this.Company
							set movline.StockMovementNumber = %this.StockMovementNumber
							set movline.Bundle              = objIssueLine.Bundle
							set movline.Item                = objIssueLine.Item
							set movline.Unit                = objIssueLine.Unit
							set movline.QtyRequired         = objIssueLine.QtyIssued
							set movline.QTYReceived         = movline.QtyRequired
							
							set pintCount      = pintCount + 1
							set movline.Number = pintCount
							
							do movline.IssueLines.Insert(objIssueLine)
						//	set strIDs = strIDs _tempLine.%Id()_delim
						//	set delim = ";"
						//	set movline.IssueLine = movline.IssueLine _delim_objIssueLine.%Id()
							
							do objIssueLine.%SetModified($$$NO)
							//'ToStorage' of Issue Line becomes the 'FromStorage' of the final Move
							set movline.FromStorage         = objIssueLine.ToStorage
							
							//The 'ToStorage' of the Move will be calcualted as the default onhand storage for the Item						
							set movline.ToStorage           = %this.Location.GetDefaultOnHandStorage(movline.Item)
							if movline.ToStorage = $$$NULLOREF {
								set strMessage = $$$Text("IN00734")
								set sc =$$$ERROR($$$GeneralError,strMessage)
							} // "To Storage needs to be specified"
														
							do rtnList.Insert(movline)
							set sc = %this.MovLines.Insert(movline)
							set arrItem(tempItem,tempFromStorage)=movline.Number
						//	%this.MovLines.Count()
						}
						
					//} else {
						// WRONG STATUS, ,,, respond to user
					}
				}
			}
		}	
	}
	
	// If there is enough stock in the FromStorage then do the relocation/move of the stock
	// otherwise remove the issueline from the current move (not yet ready)
	
	if $$$ISOK(sc) {
		for loopI=1:1:rtnList.Count() {
			set movline = rtnList.GetAt(loopI)
			set fltQty = (movline.FromStorage).GetItemSOHIncBlocked(movline.Item)
			
			if fltQty < movline.QtyRequired {
				set sc = rtnList.RemoveAt(loopI)
			}
		}
	}
	set sc  = %this.%Save()
	quit rtnList
]]></Implementation>
</Method>

<Method name="CreateMoveLineV2">
<Description><![CDATA[
Accepts an object that will either be a <class>alREQ.dUReq</class> or an <class>alISS.dUIssue</class><p>
The passed in object is check and a <class>alMOV.dUMovLine</class> for each line that is:<p>
 - Where the Item and From Location is not already contained in the movement (if so, it adds the quantity)<br>
 - has a status of firmed <br>
 <p>
 checks the storage to make sure there is enough stock, and finially adds the 
 new movement lines to current movement. 
 <br>
 Params:<br>
 objPassedin  - an object to be check for Issues <br>
 Returns: <br>
  a <class>%ListOfObjects</class> of <class>alMOV.dUMovLine</class><br>]]></Description>
<FormalSpec>objPassedin,pintCount:%Integer=0,*sc:%Status</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	;
	; History:
	; 20-May-2009	GRF		SRBR014965: Cleanup line number commented code
	; 23-Oct-2008	GRF		SR15902: Call to GetQtyOnHand ***MUST*** include blocked
	; 							storages since we have to be able to move stock out
	; 							of those storages.
	; 03-Oct-2008	Luke	SR15979: add issues link 
	; 25-Sep-2008	Luke	SR15895: Correct the Save and Use V2 QOH check through iSOH
	; 31-Jul-2008	Luke	SR15814: Add correct calls to $$$Text and setting of sc
	; 24-Jan-2008	HQN		SR15625 Changed class signature dREQ to dUReq
	; 17-Dec-2007	Luke	Add IssueLine Swizzle object insertion; Add Line Counter;
	;						Add Status return in output for mac file useage 
	; 11-Dec-2007	PPP		Do not load Issues that have not yet been firmed.
	; 07-Dec-2007	PPP		"set movline.ToStorage" to the Default OnHand Storage
	;							(GetDefaultOnHandStorage) for the Item; Update QOH
	;							to GetItemSOHIncBlocked - which includes Blocked Qty	
	; 06-Dec-2007	Luke	Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set rtnList     = ##class(%Library.ListOfObjects).%New()
	set lstReqIssue = ##class(%Library.ListOfObjects).%New()
	set strSubLineNumber = $$$NULLOREF
	set strLineNumber = %this.MovLines.Count()
	
	if $IsObject(objPassedin) {
		if objPassedin.%ClassName() = "dUReq" {
			set lstReqIssue  = ##class(alISS.iISS).GetlstReqIssueBasedOnReqID(objPassedin.ReqNum)
		} else {
			set sc = lstReqIssue.Insert(objPassedin)
		}		
	}
	
	for loopIssue = 1:1:lstReqIssue.Count() {
		set objIssue = lstReqIssue.GetAt(loopIssue)
		continue:(objIssue.Status.StatusCode = 1)    ; not yet firmed   ; 11-Dec-2007
		
		// a check to see it the Mov locn and the Iss locn are the same 
		// this is to get around the User typing in issues that don't belong to them
		if i%Location = objIssue.ToLocn.Location {
			if objIssue '= $$$NULLOREF {
				set intQty = 0
				
				for loopI=1:1:objIssue.IssueLines.Count() { 
					set objIssueLine = objIssue.IssueLines.GetAt(loopI)
					
					if objIssueLine.Status.StatusCode = 7 {
						set tempItem        = objIssueLine.Item
						set tempFromStorage = objIssueLine.ToStorage
						set blnFound        = $$$NO
							
	//	Look at the current Movline to see if we have a item AND bundle pair that match 
	//	If we do, we add the qty to it instead of creating a new one
	//	- OK we would like to do this, but bundle is not 100%, so we use 
	//	Storage to and from + Item 
						/*
						if $data(arrItem(tempItem,tempFromStorage)) {
							set intLn=$get(arrItem(tempItem,tempFromStorage))
							set (%this.MovLines.GetAt(intLn)).QtyRequired = (%this.MovLines.GetAt(intLn)).QtyRequired +objIssueLine.QtyIssued
							do movline.IssueLines.Insert(objIssueLine)
							set blnFound = $$$YES
						}
						
						if 'blnFound {*/
							
							set movline                     = ##class(alMOV.dUMovLine).%New()
							set movline.Company             = %this.Company
							set movline.StockMovementNumber = %this.StockMovementNumber
							set movline.Bundle              = objIssueLine.Bundle
							set movline.Item                = objIssueLine.Item
							set movline.Unit                = objIssueLine.Unit
							set movline.QtyRequired         = objIssueLine.QtyIssued
							set movline.QTYReceived         = movline.QtyRequired
							set movline.IssueLine           = objIssueLine.%Id()   ; SR15979
							
							set pintCount      = pintCount + 1
							set movline.Number = pintCount
							
							do movline.IssueLines.Insert(objIssueLine)
						//	set strIDs = strIDs _tempLine.%Id()_delim
						//	set delim = ";"
						//	set movline.IssueLine = movline.IssueLine _delim_objIssueLine.%Id()
							
							do objIssueLine.%SetModified($$$NO)
							
				//	'ToStorage' of Issue Line becomes the 'FromStorage' of the final Move
							set movline.FromStorage  = objIssueLine.ToStorage
							
				//	The 'ToStorage' of the Move will be calculated as the default onhand storage for the Item						
							set movline.ToStorage = %this.Location.GetDefaultOnHandStorage(movline.Item)
							if movline.ToStorage = $$$NULLOREF {
								set strMessage = $$$Text("IN00734")
								set sc =$$$ERROR($$$GeneralError,strMessage)
							} // "To Storage needs to be specified"
													
					//		set arrItem(tempItem,tempFromStorage)=movline.Number
					//		if ($$$ISOK(sc)) { ; exception handling?
								do rtnList.Insert(movline) 
									
 ;								set sc = %this.MovLines.Insert(movline) //SR15895
					//			do objMovLinesList.Insert(objMovLine)
					//			set:(strLineNumber = $$$NULLOREF) strLineNumber = movline.Number
					//			set strSubLineNumber = $i(strSubLineNumber)
					//		}
							
					//		%this.MovLines.Count()
					//	}
						
					} else {
						// WRONG STATUS, ,,, respond to user
					}
				}
			}
		}	
	}
  
	// If there is enough stock in the FromStorage then do the relocation/move of the stock
	// otherwise remove the issueline from the current move (not yet ready)
	
	// VVVV  SR15895
	if $$$ISOK(sc) {
		for loopI=1:1:rtnList.Count() {
			set movline  = rtnList.GetAt(loopI)
			set objItem  = ##class(alINV.iUINV).GetItem(movline.Item)
			set objLoc   = ##class(alLOC.iLOC).GetLocation(movline.FromStorage.Location.Location)
			set objStore = ##class(alLOC.iLOC).GetStorage(movline.FromStorage.Location.Location,movline.FromStorage.StockLocation)
		;	set fltQty   = ##class(alSOH.iSOH).GetQtyOnHand(objItem.%Id(), objLoc.%Id(), objStore.%Id())         ; SR15902
			set fltQty   = ##class(alSOH.iSOH).GetQtyOnHand(objItem.%Id(), objLoc.%Id(), objStore.%Id(), $$$NO)
			if fltQty < movline.QtyRequired {
				set sc = rtnList.RemoveAt(loopI)
			} 
		}
	}
	// ^^^^  SR15895
 	set sc  = %this.%Save()
	
	quit rtnList
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
/// Checks to see if the object identified by the ID &lt;var&gt;id&lt;/var&gt; exists in the extent.
/// 
/// &lt;p&gt;Returns &lt;CLASS&gt;%Boolean&lt;/CLASS&gt; TRUE is it exists, FALSE if it does not.
ClassMethod %ExistsId(id As %String) As %Boolean [ CodeMode = generator, ProcedureBlock = 1 ]
{
	;-------------------------------------------------------------------------------
	; Wrapper to prepend company to key before checking for record
	; 
	; History
	; 27-Nov-2007	GRF		SR15615: Created
	;-------------------------------------------------------------------------------
	set %code=0
	$$$GENERATE(" quit %Super.%ExistsId("&quot;0||"&quot;_id)")
	quit $$$OK
}
*/
</Content>
</UDLText>


<Method name="FirmMove">
<Description><![CDATA[
Firms the Move Object to allocate stock through creating <class>alDRP.dMovement</class> objects <p>
and sets the Status of the Mov object to Completed. (2 INMOV Completed)
 <p>
 checks the storage to make sure there is enough stock, and finially adds the 
 new movement lines to current movement. 
 <br>
 Params:<br>
 Returns: <br>
  a <class>%Status</class> ]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2013	SCR		SESPE-460: Added Record Locking
	; 29-Apr-2010	CARLOS/PPP	SR17271:Update modifications protocol for INMOV
	; 26-Feb-2009	HQN		SRAdHoc: Check for validity before processing
	; 31-Jul-2008	Luke	SR15814: Add correct calls to $$$Text and setting of sc
	; 18-Dec-2007	Luke	Change second loop index name (causing infinite loop)
	; 04-Dec-2007	GRF		Language Text
	;-------------------------------------------------------------------------------
	set sc = ..IsFirmable()

	if $$$ISOK(sc) {
	 ;++++++++++++++++++++++++++++++++++++++++++
		tstart
	 ;++++++++++++++++++++++++++++++++++++++++++
		for loopi = 1:1:%this.MovLines.Count() {
			set movline = %this.MovLines.GetAt(loopi) 
			
			set movline = ##class(alMOV.dUMovLine).%OpenId(movline.%Id())
			
			
			if $$$ISOK(sc) {
				if (movline.ToStorage   '= $$$NULLOREF) && 
				   (movline.FromStorage '= $$$NULLOREF) && 
				   (movline.QtyRequired > 0)               {
					
		   //////////////////////
		   //   V2 Sourcing    //
		   //////////////////////
					if movline.ToStorage.StockLocation '= movline.FromStorage.StockLocation {
						; SESPE-460 vvvv
						set idItem = movline.Item
						lock +^alSOHProcessing(idItem):2
						if '$test {
							set strMessage = $$$Text($listbuild("IN00853",idItem))
							set sc = $$$ERROR($$$GeneralError,strMessage)  
							;	"Can not acquire a lock for Item: (%1) please try again"
							quit

						}
						set:($$$ISOK(sc)) sc = movline.CreateMovement()
						; set sc = movline.CreateMovement()
						; SESPE-460 ^^^^
						if $$$ISERR(sc) {
							set strMessage = $$$Text($listbuild("IN00726",movline.Item))
							set sc = $$$ERROR($$$GeneralError,strMessage)
					    	
					    } else {
							set movline.QTYReceived = movline.QtyRequired  
							set intTempQty          = movline.QTYReceived 
						    for loopj =1:1:movline.IssueLines.Count() {
							    set tempLine = movline.IssueLines.GetAt(loopj)
							    if tempLine '= "" {
									set sc = tempLine.UpdateQTY(.intTempQty)
									//movline.QTYReceived)
									if $$$ISOK(sc) {
										do tempLine.AutoClose()
									}								
								}
						    }
					    }
					}	
				}
			}
		}
		
		if ($$$ISOK(sc)) {
			set %this.Status = ##class(alSYS.Status.dUStatus).%OpenId("0||INMOV||2") 	//SR15626
			set %this.DateModified = $horolog 											//SR17271
			set %this.ModifiedBy1 = $get(%("%KEY","YBED")) 								//SR17271
			;set %this.ModifiedBy1 = $get(%request.Data("YBED",1)) 						//SR17271
			set sc = %this.%Save()
			//..ANMSave($$$YES)
		}
		
	 ;++++++++++++++++++++++++++++++++++++++++++
		if ($$$ISERR(sc)) {
			trollback             // one of the saves failed, rollback
		
		} else {
		    tcommit:($tlevel>0)   // everything is ok, commit
		}
	 ;++++++++++++++++++++++++++++++++++++++++++
	}
	quit sc
]]></Implementation>
</Method>

<Method name="FirmPalletMove">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 10-Apr-2013	SCR		SESPE-460: Record Locking moved to movline.CreateMovement
	; 24-Jan-2013	SCR		SESPE-460: Added Record Locking
	; 27-Apr-2011	GRF		SR17715: Created
	;-------------------------------------------------------------------------------
	set sc = ..IsFirmableByPallet()
	
	if $$$ISOK(sc) {
	 ;++++++++++++++++++++++++++++++++++++++++++
		tstart
	 ;++++++++++++++++++++++++++++++++++++++++++
		for loopi = 1:1:%this.MovPallets.Count() {
			set movPallet = %this.MovPallets.GetAt(loopi) 
			
			//set movPallet = ##class(alMOV.dUMovPallet).%OpenId(movPallet.%Id())  ; FIXME : Is this really needed?
			
			if (movPallet.ToStorage'=$$$NULLOREF) && 
			   (movPallet.Pallet'=$$$NULLOREF)    {
					
		   //////////////////////
		   //   V2 Sourcing    //
		   //////////////////////
				if movPallet.ToStorage.StockLocation'= movPallet.Pallet.StockLocation {
					set sc = movPallet.CreateMovement()
				}	
			}
			
		}
		
		if ($$$ISOK(sc)) {
			set %this.Status = ##class(alSYS.Status.dUStatus).%OpenId("0||INMOV||2")
			set %this.DateModified = $horolog
			set %this.ModifiedBy1 = $get(%request.Data("YBED",1))
			set sc = %this.%Save()
		}
		
	 ;++++++++++++++++++++++++++++++++++++++++++
		if ($$$ISERR(sc)) {
			trollback             // one of the saves failed, rollback
		
		} else {
		    tcommit:($tlevel>0)   // everything is ok, commit
		}
	 ;++++++++++++++++++++++++++++++++++++++++++
	}
	quit sc
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called before 
any data is written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 17-Sep-2010	SCR		SR17571: Call to supper
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if (%this.objLocn '= $$$NULLOREF) && (%this.objLocn.%IsModified())  {
		set i%Location = %this.objLocn.Location
	}
	if (%this.Status '= $$$NULLOREF) && (%this.Status.%IsModified()) {
		set i%Status = %this.Status.StatusCode
	}

	set sc=##Super(insert) ; SR17471
	quit sc
]]></Implementation>
</Method>

<Method name="%OnOpen">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Open</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being opened.

<P>If this method returns an error then the object will not be opened.]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 27-Apr-2011	GRF		SR17715: Load pallet lines if appropriate
	; 23-Dec-2010	shobby	SR17638: Use query in dUMovLine
	; 29-Oct-2008	HQN		SR15823: Refactor to take into account SQL errors using
	; 							standard variable names
	;-------------------------------------------------------------------------------
	set objResultset = ##class(%Library.ResultSet).%New("alMOV.dUMovLine:GetMovLines")  //SR17638
	
	set sc = objResultset.Execute(%this.StockMovementNumber)
	
	while objResultset.Next(.sc) {
		do %this.MovLines.InsertObjectId(objResultset.Data("ID"))
	}
	do %this.MovLines.%SetModified($$$NO)
	
	// SR17715 vvv
	set objResultset = ##class(%Library.ResultSet).%New("alMOV.dUMovPallet:GetMovPallets")  
	
	set sc = objResultset.Execute(%this.StockMovementNumber)
	
	while objResultset.Next(.sc) {
		do %this.MovPallets.InsertObjectId(objResultset.Data("ID"))
	}
	do %this.MovPallets.%SetModified($$$NO)
	quit sc
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>