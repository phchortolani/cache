<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alWEB.WS.Control">
<Description><![CDATA[
alWEB.WS.Control Alphalinc Web Service Interface Control]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService,alWEB.WS.Utils</Super>

<Parameter name="SERVICENAME">
<Description><![CDATA[
Web Service Session Control]]></Description>
<Default>Control</Default>
</Parameter>


<Parameter name="NAMESPACE">
<Description><![CDATA[
SOAP Namespace for the WebService]]></Description>
<Default>http://www.disclinc.com</Default>
</Parameter>


<Method name="Connect">
<Description><![CDATA[
Connect to Alphalinc to use any Web Service Interface<br>
<u>Login Procedere Part 1 (of 2)</u><br>
<b>Input Parameter:</b><br>
ClientIdent = Your Client Identification Number (Alphalinc Access Code)<br>
UserIdent = Client User Identification (optional)<br>
Password = Pass password for Login Process in 1 Step only (optional) (MD5 Hashcode optional)<br>
AutoLogoutSecs = Number of seconds until session expires (default = 84600 secs (24 hours))<br>
MsgInSequence = Switch Sequence control On or Off (default = On)<br>
<b>Output Parameter:</b><br>
SessionId<br>
ANMSessionId]]></Description>
<FormalSpec>ClientIdent:%String,UserIdent:%String,Password:%String,AutoLogoutSecs:%Integer=86400,MsgInSequence:%Boolean=1</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	; History
	; 
	; 30-Jun-2011	SCR		SR17809: Check for @NM Login
	; 08-Apr-2009	shobby	SR16451: Moved closing session until after the details have been logged if there is an error.
	; ------------------------------------------------------------------
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	
	if AutoLogoutSecs = "" set AutoLogoutSecs = 86400
	if MsgInSequence = "" set MsgInSequence = 1

	set strStatus = $$$OK
	set blnEndSession=$$$NO
	
	set SessionId = ##class(alWEB.WS.Session).StartSession($get(ClientIdent),$get(UserIdent),AutoLogoutSecs,MsgInSequence)
	if 'SessionId {
		;quit ##class(alWEB.WS.Utils).XMLResult(,,0)
		set strStatus = $$$MakeStatus("#IN00825: "_$$$Text("IN00825"))
	}
	
	//if login procedere in 1 step (with password)
	if $$$ISOK(strStatus) && ($get(Password) '= "") {
		set status = ##class(alWEB.WS.Session).Login(SessionId,Password,.ErrorCode,.ANMSessionId) ; SR17809
		;set status = ##class(alWEB.WS.Session).Login(SessionId,Password,.ErrorCode)
		if 'status {
			set blnEndSession=$$$YES
			;do ##class(alWEB.WS.Session).EndSession(SessionId) ;16446 ;16451
			;quit ##class(alWEB.WS.Utils).XMLResult(,,0,ErrorCode)
			set strStatus = $$$MakeStatus(ErrorCode)
		}
	}
	
	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		if blnEndSession set %request.Data("SessionId",1)=SessionId		;16451
		set objFault=..ReturnFault(..ResultError(strStatus))
		if blnEndSession do ##class(alWEB.WS.Session).EndSession(SessionId) ;16446 ;16451

		quit objFault
	}else{
	set objResult.ReturnValue = SessionId
	set objResult.SessionId=SessionId ;SR16385 shobby
	set objResult.ANMSessionId=$get(ANMSessionId) ; SR17809
 ;	do objResult.LogDetails()   
	do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)   ;SR16385
	}
	quit objResult
]]></Implementation>
</Method>

<Method name="Login">
<Description><![CDATA[
Connect to Alphalinc to use any Web Service Interface<br>
<u>Login Procedere Part 2 (of 2)</u><br>
<b>Input Parameter:</b><br>
SessionId = Session Id Number from Login procedere Part 1<br>
Password = Login Password (Client or User Password) (MD5 Hashcode optional)<br>
<b>Output Parameter:</b><br>
StatusCode]]></Description>
<FormalSpec>SessionId:%String,Password:%String</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	
	set strStatus = ##class(alWEB.WS.Session).Login($get(SessionId),$get(Password),.ErrorCode,.ANMSessionId) ; SR17809
	;set strStatus = ##class(alWEB.WS.Session).Login($get(SessionId),$get(Password),.ErrorCode)
	if '$$$ISOK(strStatus) {
		;quit ##class(alWEB.WS.Utils).XMLResult(SessionId,,0,ErrorCode)  //login failed
		set strStatus = $$$MakeStatus(ErrorCode)
	}
	
	//Return Result
	if '$$$ISOK(strStatus) {  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(strStatus))
	}
	
	;quit ##class(alWEB.WS.Utils).XMLResult(SessionId,,1,"")  //login OK
	set objResult.ReturnValue = "OK"
	set objResult.ANMSessionId = ANMSessionId ; SR17809
	do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)   ;SR16385

	quit objResult
]]></Implementation>
</Method>

<Method name="Logout">
<Description><![CDATA[
Disconnect from Alphalinc Web Service Interface<br>
<b>Input Parameter:</b><br>
SessionId = Session Id<br>
<b>Output Parameter:</b><br>
StatusCode]]></Description>
<FormalSpec>SessionId:%String</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	
	set strStatus = ##class(alWEB.WS.Session).EndSession($get(SessionId))

	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(strStatus))
	}else{
	;quit ##class(alWEB.WS.Utils).XMLResult(SessionId,,status,"")
	set objResult.ReturnValue = "OK"
	do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)   ;SR16385
	}
	quit objResult
]]></Implementation>
</Method>

<Method name="SetMsgSequence">
<Description><![CDATA[
Set Sequence Number for Web Service Sequence Control<br>
Use this method if you want to control validation of next web service call.<br>
It is not needed to set each sequence number if sequence control is switched On.
Normally each call counts plus 1 in sequence, but there might be reasons why the
sequence should not be predictable (i.e. for individual transaction numbers).<br>
<b>Input Parameter:</b><br>
SessionId = Session Id<br>
NextMsgSequenceNo = Number of Sequence for Next Web Service call<br>
<b>Output Parameter:</b><br>
StatusCode]]></Description>
<FormalSpec>SessionId:%String,NextMsgSequenceNo:%Integer</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	
	set strStatus = ##class(alWEB.WS.Session).ValidateSession($get(SessionId),NextMsgSequenceNo,.ErrorCode,1)
	
	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(ErrorCode))
	}else{
	;quit ##class(alWEB.WS.Utils).XMLResult(SessionId,,status,$get(ErrorCode))
	set objResult.ReturnValue = "OK"
	do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)   ;SR16385
	quit objResult
	}
]]></Implementation>
</Method>

<Method name="VerifySession">
<Description><![CDATA[
Verify Alphalinc Web Service Session<br>
<b>Input Parameter:</b><br>
SessionId = Session Id<br>
<b>Output Parameter:</b><br>
StatusCode
ErrorMessage (if session is invalid)]]></Description>
<FormalSpec>SessionId:%String</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	
	set strStatus = ##class(alWEB.WS.Session).ValidateSession($get(SessionId),0,.ErrorCode)
	
	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(ErrorCode))
	}else{
	;quit ##class(alWEB.WS.Utils).XMLResult(SessionId,,status,$get(ErrorCode))
	set objResult.ReturnValue = "OK"
	do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)   ;SR16385
	quit objResult
	}
]]></Implementation>
</Method>

<Method name="SetUser">
<Description><![CDATA[
Create a Alphalinc User<br>
<b>Input Parameters:</b><br>
SessionId (Required) = WebService Session Id<br>
MsgSequence (Required) = Message Sequence Number of this call<br>
Id (Required) = User Id (No spaces, Upper case, must be unique)<br>
Name (Required) = User Name<br>
Password (Required) = Password<br>
HomeLocation (Required) = Default Location
AllowedLocations (Optional) = List of Locations (Comma Delimeted)<br>
Email (Optional) = Email<br>
Access (Required) = User Access<br>]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,Id:%String,Name:%String,Password:%String,HomeLocation:%String,AllowedLocations:%String,Email:%String="&quot;,Access:%String</FormalSpec>
<ReturnType>alWEB.WSResult.UniversalResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
    // History:
    // 28-Jun-2011	SR177809: Created
	//------------------------------------------------------------------------------
	set objResult = ##class(alWEB.WSResult.UniversalResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
		
	//validate session
	
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()
		
		set strStatus = ..ExecuteCall("CreateUser^WWW013(.strResponse,"""_$get(Id)_""","""_$get(Name)_""","""_$get(Password)_""","""_$get(HomeLocation)_""","""_$get(AllowedLocations)_""","""_$get(Email)_""","""_$get(Access)_""")",.objResponse)  ;SR16122
		
		set objResult.ReturnValue = objResponse.ReturnValue  //adjustmend no. (INADJ header)
	}
	
	quit ..PostProcess(strStatus,$znspace,objResult,$$$MethodName)
]]></Implementation>
</Method>

<Method name="PostProcess">
<FormalSpec>strStatus,CurrentNS,objResult,pMethodName</FormalSpec>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Return Result.
	; 		Subroutine of existing repeated code.
	;		TODO: Need a PreProcess for repeating code at the start of each method.
	;
	; Inputs:
	; 	CurrentNS : This is the original namespace before the calls to
	; 	            CheckNamespace^COMEntity in the calling methods.  We will revert
	; 	            to this namespace at the end of this method.
	;
	; Returns:
	;
	; History:
	; 05-Jun-2011	shobby	SR17809: Created (Copied from Consumption)
	;-------------------------------------------------------------------------------
	;
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		set objResult = ..ReturnFault(..ResultError(strStatus))
		
	} else {
		do objResult.LogDetails(..%ClassName()_"."_pMethodName_"; Namespace: "_$znspace)
	}
	;make sure to revert back to normal namespace if changed
	if CurrentNS'=""{
		set $znspace = CurrentNS
	}
	quit objResult
]]></Implementation>
</Method>
</Class>
</Export>