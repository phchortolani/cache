<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSOH.iStockHistory">
<Description><![CDATA[
Stock History Interface Methods]]></Description>
<Abstract>1</Abstract>
<ClassType/>
<IncludeCode>%occInclude</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>

<Method name="GetTranDate">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem,pidLocation="&quot;,pidTrnType="&quot;,pidType=1</FormalSpec>
<ReturnType>alSYS.dt.dtDate</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the Last/First Transaction for an Item And Location
	;
	; Inputs:
	; SupplierReturn		1
	; SupplierReceipt		2
	; Sale					3
	; CustReturns			4
	; ManufacturingIssue	5
	; ManufacturingReceipt	6
	; TransferIssue			7
	; TransferReceipt		8
	; Adjustment			9
	; InTransit				10 
	; pidType = 1 (First) - Default, 2 (Last)
	;
	; Returns:
	;
	; History:
	; 28-May-2010	PPP		SR17296: pidLocation can be blank
	; 2010			PPP		SR<>: Created
	;-------------------------------------------------------------------------------
	set dteDate = ""
	
	if pidType = 2 {
		if pidLocation '= "" {
			&SQL(
				SELECT Top 1 DateConfirmed INTO :dteDate
				FROM alSOH.dStockHistory
				WHERE Item = :pidItem 
				AND Location = :pidLocation
				AND ((TxType = :pidTrnType) OR (:pidTrnType is null))
				ORDER BY ID Desc
			)
		
		} else {
			&SQL(
				SELECT Top 1 DateConfirmed INTO :dteDate
				FROM alSOH.dStockHistory
				WHERE Item = :pidItem 
				AND ((TxType = :pidTrnType) OR (:pidTrnType is null))
				ORDER BY ID Desc
			)		
		}
		
	} else {
		if pidLocation '= "" {
			&SQL(
				SELECT Top 1 DateConfirmed INTO :dteDate
				FROM alSOH.dStockHistory
				WHERE Item = :pidItem 
				AND Location = :pidLocation
				AND ((TxType = :pidTrnType) OR (:pidTrnType is null))
			)	
		
		} else {
			&SQL(
				SELECT Top 1 DateConfirmed INTO :dteDate
				FROM alSOH.dStockHistory
				WHERE Item = :pidItem 
				AND ((TxType = :pidTrnType) OR (:pidTrnType is null))
			)		
		}
	}
	quit dteDate
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
//Gets the QtyMoved for an Item, Location &amp; Reference #

</Content>
</UDLText>


<Method name="GetReferenceQty">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem,pidLocation,pidRef,pidLine</FormalSpec>
<ReturnType>alSYS.dt.dtFloat</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the QtyMoved for an Item, Location & Reference #
	;
	; Inputs:
	; idItem, idLocation, idReference, idLineNumber
	;
	; Returns: Qty - Float
	;
	; History:
	; 22-Dec-2009	PPP		SR17094: Created
	;-------------------------------------------------------------------------------
	set fltQty = 0
	
	&SQL(
		SELECT Sum(QtyMoved)
		INTO :fltQty
		FROM alSOH.dStockHistory
		WHERE (Item		= :pidItem)
		AND (Location 	= :pidLocation)
		AND (Reference 	= :pidRef)
		AND (LineNumber	= :pidLine)
	)
	quit -fltQty
]]></Implementation>
</Method>

<Method name="ItemHasTransactions">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem</FormalSpec>
<ReturnType>alSYS.dt.dtBoolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Check if Item has Transactions
	;
	; Inputs:	pidItem
	;
	; Returns:	Boolean
	;
	; History:
	; 20-May-2010	PPP		SR17468: Created
	;-------------------------------------------------------------------------------
	set idSOH = ""
	
	&SQL(
		SELECT TOP 1 ID
		INTO :idSOH
		FROM alSOH.dStockHistory
		WHERE (Item		= :pidItem)
	)
	quit $select(idSOH'="":$$$YES,1:$$$NO)
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
//Gets the Bundle ID for an Item, Location &amp; Reference #

</Content>
</UDLText>


<Method name="GetBundleFromTrn">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem,pidLocation,pidRef,pidLine</FormalSpec>
<ReturnType>alSYS.dt.dtString</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Gets the QtyMoved for an Item, Location & Reference #
	;
	; Inputs:
	; idItem, idLocation, idReference, idLineNumber
	;
	; Returns: Bundle ID, String
	;
	; History:
	; 06-Jul-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	set idBundle = ""
	
	&SQL(
		SELECT Bundle
		INTO :idBundle
		FROM alSOH.dStockHistory
		WHERE (Item		= :pidItem)
		AND (Location 	= :pidLocation)
		AND (Reference 	= :pidRef)
		AND (LineNumber	= :pidLine)
	)
	quit idBundle
]]></Implementation>
</Method>

<Method name="GetBundlesForRecLine">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alSYS.dt.dtString,pidLocation:alSYS.dt.dtString,pidRec:alSYS.dt.dtString,pidLine:alSYS.dt.dtString,*parrBundles:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Given an Item, Location, Receipt/Line get the Bundles Created
	; 
	;
	; Inputs :
	;	1. pobjItem		
	;	2. pidStorage 	
	;	3. pidRec
	;   4. pidLine
	;
	; Returns
	;   parrBundles (byRef)
	;	Status
	;
	; History:
	; 13-Aug-2010	PPP		SR16573: Created
	;-------------------------------------------------------------------------------
	set rs     = ##class(%ResultSet).%New()
	set strSQL = "SELECT Bundle FROM alSOH.dStockHistory WHERE (Item = ?) AND (Location = ?) AND (Reference = ?) AND (LineNumber\1 = ?)"
	
	set sc = rs.Prepare(strSQL)
	
	if $$$ISOK(sc) {
		set sc = rs.Execute(pidItem,pidLocation,pidRec,pidLine)
		
		if $$$ISOK(sc) {
			for {
				quit:'rs.Next()
				
				set idBundle  = rs.Data("Bundle")
				if idBundle '="" {
					set parrBundles(idBundle)=""
				}
			}
		}
	}
	quit sc
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
//End of Class

</Content>
</UDLText>
</Class>
</Export>