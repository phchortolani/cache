<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="COM.fwk.util.SQLUtil">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="executeSQLFile">
<Description><![CDATA[

Executes SQL queries in a file. The queries must be
separated by a ';' character and there must no other use for it.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String</FormalSpec>
<Implementation><![CDATA[
	
	if ('##class(%File).Exists(fileName)) {
		w "The file doesn't exist."
		quit
	}

	set file = ##class(%File).%New(fileName)
	
	do file.Open("RS")
	
	set content = ""
	set buffer = file.Read(100)
	
	while (buffer '= "") {
		set content = content _ buffer
		set buffer = file.Read(100)
	}
	
	do ..executeSQLScripts(content)
]]></Implementation>
</Method>

<Method name="executeSQLScripts">
<Description><![CDATA[

Executes SQL scripts, separated by a ';'. The ';'
must not be used inside the queries.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>scripts:%String</FormalSpec>
<Implementation><![CDATA[
	set countScripts = $length(scripts, ";")
	
	for i = 1 : 1 : countScripts {
		set script = $piece(scripts, ";", i)
		do ..executeSQLScript(script)
	}
]]></Implementation>
</Method>

<Method name="executeSQLScript">
<Description><![CDATA[

Executes a SQL script.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>script:%String</FormalSpec>
<Implementation><![CDATA[
	
	set script = ##class(COM.fwk.util.StringUtil).trim(script)
	
	if ($length(script) = 0) {
		quit
	}
	
	set result = ##class(%ResultSet).%New()
	
	set prepareStatus = result.Prepare(script)
	
	if ($$$ISERR(prepareStatus)) {
		do $System.Status.DisplayError(prepareStatus)
		quit
	}
	
	set executeStatus = result.Execute()
	
	if (executeStatus = "") {
		quit
	}
		
	write !, script, !

	if ((' ..isNoDataStatusCode(executeStatus)) && $$$ISERR(executeStatus)) {
		do $System.Status.DisplayError(executeStatus)
		quit
	}
	
	if (..isNoDataStatusCode(executeStatus)) { 
		write "Query executed. No rows affected. ", !
		
	} else {
		write "Query executed. Some rows affected. ", !
	}
	
	
	do result.Close()
]]></Implementation>
</Method>

<Method name="isNoDataStatusCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>status:%Status</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	
	If ' $$$ISERR(status) {
		quit 0
	}
		
	set err = ""
	
	Do DecomposeStatus^%apiOBJ(status, .err, "-d")
	
	set foundNoData = 0

	For i = 1 : 1 : err {
		
		if ($find(err(i), "SQLCODE: 100") '= 0) {
			
			// the SQLCODE 100 stands for 'no data'
			set foundNoData = 1
		}
	}

	quit foundNoData
]]></Implementation>
</Method>
</Class>
</Export>