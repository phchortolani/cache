<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="SourceControl.fix.SourceFix">
<ClassType/>
<Import>SourceControl,SourceControl.xml,SourceControl.control,SourceControl.data,VAR.infra.cache</Import>
<ProcedureBlock>0</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="RecompileAllRelevantClasses">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// Get all the class names
	set rs = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
 	do rs.Execute()
 	while (rs.Next()) {
    	set id = rs.Data("Name")
    	if ($extract(id, 1, $length("%")) = "%") continue
    	if ($extract(id, 1, $length("SourceControl")) = "SourceControl") continue
    	if ($extract(id, 1, $length("VAR.")) = "VAR.") continue
    	if ($extract(id, 1, $length("csp.")) = "csp.") continue
    	if ($extract(id, 1, $length("Ens")) = "Ens") continue
    	if ($extract(id, 1, $length("CSPX")) = "CSPX") continue
    	if (##class(SourceBase).IsGeneratedSource(id_"."_
    			##class(FileType).%GetParameter("TXTCLS"))) {
	    	continue
    	}

    	// Check if the name of class exists
    	if (id '= "") {
	    	// Check if the class *really* exists (source code)
	    	set cd = ##class(%Dictionary.ClassDefinition).%OpenId(id)
	    	if ((cd '= "") && ('cd.Deployed) && (cd.Abstract)) {
		    	set items(id_"."_##class(FileType).%GetParameter("TXTCLS")) = ""
	    	}
    	}
	}

	do ##class(Exporter).BlockExporter()
	set sc = $System.OBJ.CompileList(.items, "cfkvo3byr")
	do ##class(Exporter).ReleaseExporter()
]]></Implementation>
</Method>

<Method name="FixClasstypeAllRelevantClasses">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// Get all the class names
	set rs = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
 	do rs.Execute()
 	while (rs.Next()) {
    	set id = rs.Data("Name")
    	if ($extract(id, 1, $length("%")) = "%") continue
    	if ($extract(id, 1, $length("SourceControl")) = "SourceControl") continue
    	if ($extract(id, 1, $length("VAR.")) = "VAR.") continue
    	if ($extract(id, 1, $length("csp.")) = "csp.") continue
    	if ($extract(id, 1, $length("Ens")) = "Ens") continue
    	if ($extract(id, 1, $length("CSPX")) = "CSPX") continue
    	if (##class(SourceBase).IsGeneratedSource(id_"."_
    			##class(FileType).%GetParameter("TXTCLS"))) {
	    	continue
    	}

    	// Check if the name of class exists
    	if (id '= "") {
	        set externalFileName = ##class(FileControl).GetExternalFileName(id_"."_
	        	##class(FileType).%GetParameter("TXTCLS"))

			if (##class(%File).Exists(externalFileName) &&
				'##class(XMLClassInterpreter).HasClassType(externalFileName)) {
		        if (##class(%Dictionary.ClassDefinition).%ExistsId(id)) {
			        write !, "Special case: removing 'classtype' from '"_id_"'"
					set cdef = ##class(%Dictionary.ClassDefinition).%OpenId(id)
					set cdef.ClassType = "datatype"	// These two lines are
					set cdef.ClassType = ""			// neccessary
					do cdef.%Save()
					do $System.OBJ.Compile(id, "cfkvo3byr")
		        }
			}
    	}
	}
]]></Implementation>
</Method>

<Method name="FixTypeProcBlockAllRelevClasses">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// Get all the class names
	set rs = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
 	do rs.Execute()
 	while (rs.Next()) {
    	set id = rs.Data("Name")
    	if ($extract(id, 1, $length("%")) = "%") continue
    	if ($extract(id, 1, $length("SourceControl")) = "SourceControl") continue
    	if ($extract(id, 1, $length("VAR.")) = "VAR.") continue
    	if ($extract(id, 1, $length("csp.")) = "csp.") continue
    	if ($extract(id, 1, $length("Ens")) = "Ens") continue
    	if ($extract(id, 1, $length("CSPX")) = "CSPX") continue
    	if (##class(SourceBase).IsGeneratedSource(id_"."_
    			##class(FileType).%GetParameter("TXTCLS"))) {
	    	continue
    	}

    	// Check if the name of class exists
    	if (id '= "") {
	        set externalFileName = ##class(FileControl).GetExternalFileName(id_"."_
	        	##class(FileType).%GetParameter("TXTCLS"))

			if (##class(%File).Exists(externalFileName)) {
				set hasClassType = ##class(XMLClassInterpreter).HasClassType(externalFileName)
				set hasProcedureBlock = ##class(XMLClassInterpreter).HasProcedureBlock(externalFileName)
				if (('hasClassType) || ('hasProcedureBlock)) {
			        if (##class(%Dictionary.ClassDefinition).%ExistsId(id)) {
				        if (('hasClassType) && ('hasProcedureBlock)) {
				        	write !, "Special case: removing 'classtype' and setting 'procedureblock' from '"_id_"'"
				        }
				        elseif ('hasClassType) {
				        	write !, "Special case: removing 'classtype' from '"_id_"'"
				        }
				        elseif ('hasProcedureBlock) {
				        	write !, "Special case: setting 'procedureblock' from '"_id_"'"
				        }

						set cdef = ##class(%Dictionary.ClassDefinition).%OpenId(id)
						if ('hasClassType) {
							set cdef.ClassType = "datatype"	// These two lines are
							set cdef.ClassType = ""			// neccessary
						}
						if ('hasProcedureBlock) {
							set cdef.ProcedureBlock = 1		// Default value
						}
						do cdef.%Save()
						do $System.OBJ.Compile(id, "cfkvo3byr")
			        }
				}
			}
    	}
	}
]]></Implementation>
</Method>
</Class>
</Export>