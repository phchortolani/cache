<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alDRP.dMovementType.Stocktake">
<ClassType>serial</ClassType>
<IncludeCode>INConst</IncludeCode>
<Super>alDRP.dMovementType</Super>

<Property name="MovementTypeId">
<Description><![CDATA[
Source of transaction]]></Description>
<Type>alSYS.dt.dtInteger</Type>
<InitialExpression>"41&quot;</InitialExpression>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00477"/>
</Property>


<Method name="Validate">
<FormalSpec>pobjMove:alDRP.dMovement</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 13-May-2008   GRF		SR15660: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if pobjMove.Completed {
		set strMessage = $$$Text("IN00711")      ; "This movement is already completed."
		set sc =$$$ERROR($$$GeneralError,strMessage)
	}

	quit sc
]]></Implementation>
</Method>

<Method name="Confirm">
<FormalSpec>pobjMove:alADJ.dMovementStocktake</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define enumAverageCost		9
	;-------------------------------------------------------------------------------
	; Update the BundleStock and StockHistory plus incidentals
	;
	;	.QtyPicked		The change quantity being applied to THIS bundle - negative
	;					values reduce the QOH and vice versa.
	;					
	;				TODO : Check that this still applies for Stocktake transactions
	; 
	; History
	; 12-Jul-2010	SCR		SR17387: Pass Source Details, Form & Rec to Finance
	; 11-Nov-2009	GRF		SR16871: relocate unlock to cover data being updated
	; 02-Nov-2009	GRF		SR16871: INItemCost with location replaces INARTKOST;
	; 							Remove ConfirmMovement
	; 21-Oct-2009	GRF		SR16875: TxnValue should be extended cost
	; 23-Sep-2009	GRF		SR16880: relocate absolute fltCost from alSFI.dStockFin
	; 14-Sep-2009	DWR		SR16880: call to new alSFI.dStockFin class
	; 18-Mar-2009	DavidR	SR16406: Added $listbuild to error
	; 27-Oct-2008	GRF		SR15802: Match input parameter type for ReasonCode; pass
	;							ReasonCode to INStockMovement
	; 14-Oct-2008	GRF		SR15810: "quit sc" moved outside last if block; lock ok
	;							actions moved in with $$$ISOK; Add ConfirmMovement
	;							call
	; 29-Sep-2008	Luke	SR15818: Added Lock Checks 
	; 27-Aug-2008	Luke	SR15691: Corrected the calculation of fltCost
	; 20-Aug-2008	HQN		SR15801: Added periodbalance handling
	; 12-Aug-2008	Luke    SR15691: Added external calls for costings 
	; 12-Aug-2008	Luke	SR15813: added transaction types to processing 
	; 13-May-2008   GRF		SR15660: Created
	;-------------------------------------------------------------------------------
	set sc     = $$$OK
	set idItem = pobjMove.Item.ItemId
	
	;+++++++++++++++++++++++++++++++++++++++
	LOCK +^alSOHProcessing(idItem):2
	if '$test {
		set strMessage = $$$Text($listbuild("IN00853",idItem))
		set sc = $$$ERROR($$$GeneralError,strMessage)  
	; "Can not acquire a lock for Item: (%1) please try again"
	;+++++++++++++++++++++++++++++++++++++++
	
	; SR16871 vvv
	;}
	;if $$$ISOK(sc) {
	;	lock -^alSOHProcessing(idItem)
	} else {
	; SR16871 ^^^
	
	;	set fltCost = $$GetCostV2^INARTKOST(idItem) ; SR16871
		set fltCost = $$GetCost^INItemCost(idItem,pobjMove.FromLocn.Code,$$$enumAverageCost)
		
	; Stocktake : Stock History & Period Balance
	;---------------------------------------
		set objTransType   = ##class(alSOH.dTransactionType).%OpenId(9)
		set objFromStkHist = ##class(alSOH.piSOH).Post(pobjMove, 
													   pobjMove.FromLocn,
													   pobjMove.FromStorage,
													   pobjMove.QtyPicked,
													   fltCost,
													   objTransType,
													   .sc)
	
		set:$$$ISOK(sc) sc = ##class(alSOH.dPeriodBalance).UpdateViaStockHistory(objFromStkHist)
	;+++++++++++++++++++++++++++++++++++++++ ; SR16871
		LOCK -^alSOHProcessing(idItem)
	;+++++++++++++++++++++++++++++++++++++++
	}
	
	; Stock to Finance Interface            ; SR16880
	;---------------------------------------
	if $$$ISOK(sc) {
		set idDeleteStorage = $$$INVORGDeleteStockLocation($get(^INVORG(0,0,1)))
		
		if fltCost <0 {   ; SR16880
			set fltCost = -fltCost 
		}
		
		set objStockFin = ##class(alSFI.dStockFin).%New()
		set objStockFin.TxnType        = pobjMove.MovementType
		set objStockFin.TxnTypeRef     = "ADJ"
		set objStockFin.AuditRef       = "alDRP.dMovementType.Stocktake"
		set objStockFin.TxnInformation = "Stocktake"
		set objStockFin.Item           = pobjMove.Item
		set objStockFin.Quantity       = -pobjMove.QtyPicked
	;	set objStockFin.TxnValue       = fltCost                  ; SR16875
		set objStockFin.TxnValue       = -fltCost * pobjMove.QtyPicked   ; FIXME : Check sign <GRF>
		set objStockFin.FromLocn       = pobjMove.FromLocn
		set objStockFin.FromStorage    = pobjMove.FromStorage
		set objStockFin.ToLocn         = pobjMove.FromLocn
		set objStockFin.ToStorage      = ##class(alLOC.iULOC).GetStorage(pobjMove.FromLocn.Code,idDeleteStorage)
		set objStockFin.Reason         = pobjMove.ReasonCode
		set objStockFin.SourceRec	   = pobjMove.Reference		; SR17387
		set objStockFin.SourceForm	   = "INWEINVD"		; SR17387
		set objStockFin.SourceDetail   = 34352_","_pobjMove.Reference_","_$piece(pobjMove.LineNumber,"||",2) ; SR17387
		                                 ; "Stocktake %1, Line %2"
		set sc = objStockFin.StockToFin()
		set YUSER =%("%KEY","YUSER") 
		set:YUSER="" YUSER=" "
		; Set to ensure not processed twice, is checked in FIBU^INARTHIST
		set:$$$ISOK(sc) ^CacheTemp(YUSER,"FIBURecord")=$$$YES
	}
		
	/* ; SR16871 vvv
	; Back Populate V1
	;---------------------------------------
	if $get(^SysSetup("KeepOldStockHistory")) && $$$ISOK(sc) {
		set idDeleteStorage = $$$INVORGDeleteStockLocation($get(^INVORG(0,0,1)))
		
		set sc = $$ConfirmMovement^INStockMovement(idItem,
												   pobjMove.Bundle,
												  -pobjMove.QtyPicked,
												   pobjMove.FromLocn.Code,
												   pobjMove.FromStorage.Code,
												   pobjMove.FromLocn.Code,
												   idDeleteStorage,
												   pobjMove.MovementType.MovementTypeId,
												   pobjMove.Reference,
												   pobjMove.LineNumber,
												   pobjMove.ReasonCode )		
	}
	*/ ; SR16871 ^^^
	quit sc
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>
</Export>