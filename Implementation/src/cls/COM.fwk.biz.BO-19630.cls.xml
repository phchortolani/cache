<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="COM.fwk.biz.BO">
<Description><![CDATA[
BO is the base class for the business layer. It provides
the methods that mostly all subclasses will need, to get 
data about sessions, parameters, errors etc.]]></Description>
<Abstract>1</Abstract>
<ClassType/>
<Import>COM.fwk.entity</Import>
<IncludeCode>COMSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Property name="nmSession">
<Description><![CDATA[
Represents the current Net Manager session where you have information
about user, company, language etc.]]></Description>
<Type>COM.fwk.Session</Type>
<Private>1</Private>
</Property>


<Method name="getSession">
<Description><![CDATA[
Gets a reference to the Session object, 
that contains information about the Net Manager
session, like username, companycode, language.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<ReturnType>COM.fwk.Session</ReturnType>
<Implementation><![CDATA[
	
	if (..nmSession = "") {
		set ..nmSession = ##class(COM.fwk.Session).%New()
	}
	
	quit ..nmSession
]]></Implementation>
</Method>

<Method name="printError">
<Description><![CDATA[
Prints an error on the screen.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>statusCode:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	 

	set ^TharsisDebug(..getSession().getSessionId()) = statusCode

	If $$$ISERR(statusCode) {
		
		set err = ""
		
		Do DecomposeStatus^%apiOBJ(statusCode, .err, "-d")
	
		For i=1:1:err {
			Write err(i) _ "<BR>"
		}
	}

	quit
]]></Implementation>
</Method>

<Method name="raiseStatusException">
<Description><![CDATA[
Throws an exception when an status error occurs.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>status:%Status,breakLineSymbol:%String="&lt;BR&gt;"</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	If $$$ISERR(status) {
		
		set err = ""
		
		Do DecomposeStatus^%apiOBJ(status, .err, "-d")
	
		set message = ""
		For i=1:1:err {
			set message = message_err(i)_breakLineSymbol
		}
		
		do ..raiseRuntimeException(message)
	}

	quit
]]></Implementation>
</Method>

<Method name="getCurrentTimeStamp">
<Description><![CDATA[
Gets the current date and time.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<Private>1</Private>
<ReturnType>%Library.TimeStamp</ReturnType>
<Implementation><![CDATA[	quit ..getTimeStamp($horolog)
]]></Implementation>
</Method>

<Method name="getTimeStamp">
<Description><![CDATA[
Take a string and returns the corresponding timestamp value.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>horolog:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Library.TimeStamp</ReturnType>
<Implementation><![CDATA[
	if (horolog = "") {
		quit ""
	}

	if ($length(horolog, ",") '= 2) {
		// is not on the $horolog format, so returns itself
		quit horolog	
	}
	
	quit ##class(%Library.TimeStamp).DisplayToLogical($zdatetime(horolog, 3))
]]></Implementation>
</Method>

<Method name="getTimeStampStr">
<Description><![CDATA[
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>horolog:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Library.TimeStamp</ReturnType>
<Implementation><![CDATA[
	if (horolog = "") {
		quit ""
	}

	if ($length(horolog, ",") = 2) {
		// is not on the $horolog format, so returns itself
		quit horolog	
	}
	
	quit $zdatetime(horolog)
]]></Implementation>
</Method>

<Method name="getApplicationParameter">
<Description><![CDATA[

Gets an application parameter.

<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>parameterName:%String,searchValue:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(COM.fwk.www.bo.ApplicationParameterBO).%New().getParameterText(parameterName, , searchValue)
]]></Implementation>
</Method>

<Method name="getSystemParameter">
<Description><![CDATA[

Gets a system parameter.

<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>parameterName:%String,searchValue:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(COM.fwk.www.bo.SystemParameterBO).%New().getParameterText(parameterName, , searchValue)
]]></Implementation>
</Method>

<Method name="getComparisonStatusText">
<Description><![CDATA[

Gets the text for a comparison status code from the application
parameters.
<p>
Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>searchValue:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..getApplicationParameter("TS_COMPARISON_STATUS", searchValue)
]]></Implementation>
</Method>

<Method name="getComparisonResultText">
<Description><![CDATA[

Gets the text for a comparison result code from the application
parameters.
<p>
Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>searchValue:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	quit ..getApplicationParameter("TS_DIFF_RESULT", searchValue)
]]></Implementation>
</Method>

<Method name="getLanguageText">
<Description><![CDATA[
Returns the text for an specific code, company and language.

<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>key:%String,v1:%String="",v2:%String="",v3:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	set moduleAbbreviation = ..getModuleAbbreviation()
 	
	if (' ##class(COM.fwk.util.StringUtil).startsWith(key, moduleAbbreviation)) {
		set key = moduleAbbreviation _ key
	}

	quit ##class(COM.fwk.www.bo.LanguageTextBO).%New().getText(key, v1, v2, v3)
]]></Implementation>
</Method>

<Method name="getObjectProperty">
<Description><![CDATA[
Returns the value of a property of an object.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>objectORef:%ObjectHandle,propertyName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $ZOBJMETHOD(objectORef, propertyName _ "Get")
]]></Implementation>
</Method>

<Method name="setObjectProperty">
<Description><![CDATA[
Sets the value of a property of an object.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>objectORef:%ObjectHandle,propertyName:%String,value:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $ZOBJMETHOD(objectORef, propertyName _ "Set", value)
]]></Implementation>
</Method>

<Method name="loadPersistentEntity">
<Description><![CDATA[
Reads the data of a persistent entity from the database.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>persistentEntityName:%String,persistentEntityId:%String</FormalSpec>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[	quit $System.OBJ.OpenId(persistentEntityName, persistentEntityId)
]]></Implementation>
</Method>

<Method name="createPersistentEntity">
<Description><![CDATA[

Creates a new instance of the entity passed as parameter
with the id received

<p>

Doesn't save the persistent entity

<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>persistentEntityName:%String,persistentEntityId:%String</FormalSpec>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[
	//w "(" _ $length(persistentEntityId, "||") _ ":" _ persistentEntityId _ ")"
	set newEntity = $System.OBJ.New(persistentEntityName)

	set pks = ##class(COM.fwk.www.bo.ClassPKBO).%New().listByClass(persistentEntityName)
	
	//w "(" _ pks.Count() _ ")"
	
	if ((pks.Count() + 1) '= $length(persistentEntityId, "||")) {
		// the "+ 1" is for the Company pk, that is not
		// in the pks list, but in the id
		do ..raiseRuntimeException("The id received has a different number of fields than the pk list of the entity.")
	}
	
	set companyCode = $piece(persistentEntityId, "||", 1)
	do ..setObjectProperty(newEntity, "Company", companyCode)
	
	for i = 1 : 1 : pks.Count() { 
	
		set pkDTO = pks.GetAt(i)
		
		// the value is the i + 1 piece of the persistentEntityId
		// because the first one, the Company, is not on the 
		// pks list returned by the WWW.Business.ClassPKBO,
		// and was set before this 'for' loop
		
		set value = $piece(persistentEntityId, "||", i + 1)
	
		
		do ..setObjectProperty(newEntity, pkDTO.fieldName, value)
	}
	
	//do newEntity.%Save()
	
	quit newEntity
]]></Implementation>
</Method>

<Method name="removeCharacter">
<Description><![CDATA[
Removes a character from a string.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>str:%String,charToBeRemoved:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit ..substituteCharacter(str, charToBeRemoved, "")
	/*set charToBeRemovedPosition = $find(str, charToBeRemoved) 
	
	while (charToBeRemovedPosition '= 0) {
		
		set $extract(str, charToBeRemovedPosition - 1) = ""
		
		set charToBeRemovedPosition = $find(str, charToBeRemoved) 
	}
	
	quit str*/
]]></Implementation>
</Method>

<Method name="substituteCharacter">
<Description><![CDATA[
Substitutes a character for another string in a text.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String,charToBeReplaced:%String,replacementString:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set charToBeRemovedPosition = $find(str, charToBeReplaced) 
	
	while (charToBeRemovedPosition '= 0) {
		
		set $extract(str, charToBeRemovedPosition - 1) = replacementString
		
		set charToBeRemovedPosition = $find(str, charToBeReplaced) 
	}
	
	quit str
]]></Implementation>
</Method>

<Method name="raiseException">
<Description><![CDATA[
Throws and exception to be handled by the system.

<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>exception:COM.fwk.exception.BaseException</FormalSpec>
<Implementation><![CDATA[
	// Just setting the $ECODE puts the system in an error state. The
	// exception will have to be handled in some level.
	set %COMfwkException = exception
	set $ECODE = %COMfwkException
]]></Implementation>
</Method>

<Method name="raiseBusinessException">
<Description><![CDATA[
Throws a business exception to the system, based on the error code received.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>errorCode:%String</FormalSpec>
<Implementation><![CDATA[
	set errorMessage = ..getLanguageText(..getModuleAbbreviation()_"ERR"_errorCode)
	do ..raiseException(##class(COM.fwk.exception.BusinessException).%New(errorMessage, $get(%COMfwkException)))
]]></Implementation>
</Method>

<Method name="raiseRuntimeException">
<Description><![CDATA[
Throws a runtime error to the system, using the description received.
<p>

Author: Tharsis Campos - Disclinc Brazil
]]></Description>
<FormalSpec>exceptionDescription:%String</FormalSpec>
<Implementation><![CDATA[	do ..raiseException(##class(COM.fwk.exception.RuntimeException).%New(exceptionDescription, $get(%COMfwkException)))
]]></Implementation>
</Method>

<Method name="getModuleAbbreviation">
<Description><![CDATA[
Just throws an exception to tell the developer that he needs to implement 
this method in the subclass. This is done because there is no way to create
abstract methods.

<p>

Author: Tharsis Campos - Disclinc Brazil]]></Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	do ..raiseRuntimeException("This method should be implemented on its subclasses.")
]]></Implementation>
</Method>

<Method name="persistentIdToNManagerId">
<Description><![CDATA[

Converts a persistent id to respective net manager id.

<p>

Conversion: companyCode||pk1||pk2||...||pkn turns to
pk1,pk2,...,pkn.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<FormalSpec>persistentId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(PersistentUtil).persistentIdToNManagerId(persistentId)
]]></Implementation>
</Method>

<Method name="nManagerIdToPersistentId">
<Description><![CDATA[

Converts a persistent id to respective net manager id.

<p>

Conversion: companyCode||pk1||pk2||...||pkn turns to
pk1,pk2,...,pkn.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<FormalSpec>nManagerId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(PersistentUtil).nManagerIdToPersistentId(nManagerId, ..getSession().getCurrentCompanyCode())
]]></Implementation>
</Method>

<Method name="getLocationName">
<FormalSpec>locationCode:%String,companyCode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (locationCode = "") {
		quit ""
	}
	
	if (' $data(companyCode)) {
		set companyCode = ..getSession().getCurrentCompanyCode()
	}
	
	quit ##class(COM.fwk.www.bo.LocationBO).%New().getLocation(companyCode, locationCode).name
]]></Implementation>
</Method>

<Method name="getNextKey">
<FormalSpec>fullClassName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(COM.fwk.www.bo.ClassBO).%New().getNextKey(fullClassName)
]]></Implementation>
</Method>
</Class>
</Export>