<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.license.MailNotifierService">
<Description><![CDATA[The LogWriter service is responsible for registering the information
found in a temporary global node into a physical file. The service
runs in background and executes in a specified time interval.<br>
&nbsp;<br>
History:<br>
2009-Apr-02&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Created by Pablo]]></Description>
<ClassType/>
<Import>VAR.common,VAR.infra.cache,VAR.infra.mail,VAR.infra.util</Import>
<IncludeCode>VARUtil,VARLog,WWWConst,VARConst</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Parameter name="LEVEL">
<Description><![CDATA[Log Level = "Error", "Warning", "Info", "Debug"]]></Description>
<Type>%String</Type>
<Default>Debug</Default>
</Parameter>

<Parameter name="INTERVAL">
<Description><![CDATA[Time interval]]></Description>
<Type>%Integer</Type>
<Default>10</Default>
</Parameter>

<Parameter name="WARNINGDAYS">
<Type>%Integer</Type>
<Default>15</Default>
</Parameter>

<Parameter name="HOUR">
<Description><![CDATA[0-23]]></Description>
<Type>%Integer</Type>
<Default>0</Default>
</Parameter>

<Parameter name="MINUTE">
<Description><![CDATA[0-59]]></Description>
<Type>%Integer</Type>
<Default>10</Default>
</Parameter>

<Parameter name="DAYOFWEEK">
<Description><![CDATA[Day of the week = 1 = sunday -> 7 = saturday]]></Description>
<Type>%Integer</Type>
<Default>1</Default>
</Parameter>

<Method name="ServiceInstall">
<Description><![CDATA[Installs the service.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ..ServiceUninstall()

	do ##class(Task).Insert($znspace, "License Notifier",
		"do ##class("_..%ClassName(1)_").ServiceCheckAndStart()",
		0, 1, 1, ..#DAYOFWEEK, 0, (..#HOUR * 60 * 60)+(..#MINUTE * 60), +$horolog,
		"LicenseNotifierService.log", .task)]]></Implementation>
</Method>

<Method name="ServiceUninstall">
<Description><![CDATA[Uninstalls the service.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(Task).Delete("License Notifier")]]></Implementation>
</Method>

<Method name="ServiceCheckAndStart">
<Description><![CDATA[Checks and starts the service.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set licenseNotifierService = ..%New()

	if ('licenseNotifierService.IsRunning())
	{
		do licenseNotifierService.Start()
	}]]></Implementation>
</Method>

<Method name="ServiceStop">
<Description><![CDATA[Stops the service.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set licenseNotifierService = ..%New()

	if (licenseNotifierService.IsRunning())
	{
		do licenseNotifierService.Stop()
	}]]></Implementation>
</Method>

<Method name="Start">
<Description><![CDATA[Starts the service (if not already running).<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if (..IsRunning()) quit $$$OK

	set ^VAR.infra.license.MailNotifier = 0
	job StartThread^VARRemote(..%ClassName(1))::20

	quit $$$OK]]></Implementation>
</Method>

<Method name="IsRunning">
<Description><![CDATA[Checks if the service is running.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: yes / no]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set intJobId = +$get(^VAR.infra.license.MailNotifier)
	set namespace = $znspace

	if (intJobId '= 0)
	{
		if ($SYSTEM.Version.GetNumber() >= 2008.1) {
			set objProcess = ##class(%SYS.ProcessQuery).%OpenId(intJobId)
			if ($isObject(objProcess)) quit 1
		}
		else {
			set objProcess = ##class(%SYSTEM.Process).%OpenId(intJobId)
			if ($isObject(objProcess)) quit 1
		}		
	}

	quit 0]]></Implementation>
</Method>

<Method name="Stop">
<Description><![CDATA[Stops the service (asynchronous call).<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set ^VAR.infra.license.MailNotifier = 0

	quit $$$OK]]></Implementation>
</Method>

<Method name="StartThread">
<Description><![CDATA[Background job entry point.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns:]]></Description>
<Implementation><![CDATA[	set ^VAR.infra.license.MailNotifier = $job

	$$$VARLOGINFO("Mail Notifier Service Thread Started at "_$zdatetime($h))
	if (..IsLicenseExpiringSoon()) {
		$$$VARLOGINFO("License is expiring in less than '"_..#WARNINGDAYS_"' days. Notifying administrators.")
		do ..SendMail()
	}

	do ..Stop()]]></Implementation>
</Method>

<Method name="SendMail">
<Implementation><![CDATA[	set from = "no-reply@disclinc.com" //admin@disclinc.com
		set dataExpiracao = ##class(LicenseInfo).LicenseExpirationDate()
		set dias = (dataExpiracao - $horolog)
		set to = ..GetUsuariosAutorizados()
		set subject = "Monitor de Licenças em "_$zdate($horolog, 4)
		set message = "A chave de ativação do Caché/Alphalinc vai vencer "_
			"em "_$zdate(dataExpiracao, 4)_"<BR><BR><BR><BR>""Obs: Esta mensagem "_
			" é automática e não precisa ser respondida."""
		set info = ##class(SmtpServerRetriever).RetrieveInfo()
		set server = $piece(info, "~", 1)
		set port = $piece(info, "~", 2)
		set user = $piece(info, "~", 3)
		set password = $piece(info, "~", 4)
		
		set smtp = ##class(MailSender).%New(server, port, user, password)
		set status = smtp.SendMail(from, to, "", "", subject, message)
		
	quit status]]></Implementation>
</Method>

<Method name="IsLicenseExpiringSoon">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit (##class(LicenseInfo).IsLicenseExpiring(..%GetParameter("WARNINGDAYS")))]]></Implementation>
</Method>

<Method name="GetUsuariosAutorizados">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set objCliente  = $get(^VARParametroCliente(0,0,1))
	set strUsuarios = $piece(objCliente,"~",13)
	set delimiter   = ";"
	
	for i=1:1:$length(strUsuarios,delimiter) {
		
		set idUser   = $piece(strUsuarios,delimiter,i)
		set objUser  = $get(^WWW013(0,idUser,1))
		set strNome  = $$$WWW013Name(objUser)
		set strEmail = $$$WWW013EMailAddress(objUser)
		
		set strFormatada = strNome_" <"_strEmail_">"
		
		if (strEmail '= "") {
			set $piece(strUsuarios,delimiter,i) = strFormatada
		}
		else {
			set $piece(strUsuarios,delimiter,i) = ""
		}
	}
	
 	quit strUsuarios]]></Implementation>
</Method>
</Class>
</Export>