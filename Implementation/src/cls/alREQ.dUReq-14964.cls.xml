<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alREQ.dUReq">
<Description><![CDATA[

<p>Requisition Object</p>
<p>Represents a request for stock from one location to another location
within a site</p>
]]></Description>
<ClassType>persistent</ClassType>
<IncludeCode>COMConst,COMSYS,WWWConst,INConst</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>User.INReq</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
// 27-Feb-2008	HQN		Added default values for properties when utilising object
// 						directly
// 						Added V2 User handling and defaults from User
// 24-Jan-2008 	HQN		SR15625 Copied from dREQ; Changed class signature dLocation
// 							to dULocation &amp; dREQLine to dUReqLine
/---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="CreatedBy">
<Description><![CDATA[
Created By]]></Description>
<Type>%String</Type>
<InitialExpression>"UNKNOWN"</InitialExpression>

<Parameter name="CAPTION" value="Created By"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="CreatedOn">
<Description><![CDATA[
Created On]]></Description>
<Type>WWW.DiscTimestamp</Type>
<InitialExpression>+$h</InitialExpression>

<Parameter name="CAPTION" value="Created On"/>
</Property>


<Property name="objToLocn">
<Description><![CDATA[
Transient storage for swizzled Pseudo object property]]></Description>
<Type>alLOC.dULocation</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00247"/>
</Property>


<Property name="objFromLocn">
<Description><![CDATA[
Transient storage for swizzled Pseudo object property]]></Description>
<Type>alLOC.dULocation</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00245"/>
</Property>


<Property name="objStatus">
<Description><![CDATA[
Transient storage for swizzled Pseudo object property]]></Description>
<Type>alSYS.Status.dUStatus</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00246"/>
</Property>


<Property name="ReqLines">
<Description><![CDATA[
Transient storage for swizzled Pseudo object relation]]></Description>
<Type>alREQ.dUReqLine</Type>
<Collection>list</Collection>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00243"/>
</Property>


<Property name="Status">
<Description><![CDATA[
Status]]></Description>
<Type>%String</Type>
<InitialExpression>"1&quot;</InitialExpression>

<Parameter name="CAPTION" value="Status"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="User">
<Type>alUSR.dUser</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00244"/>
</Property>


<Method name="RequisitionAllowed">
<Description><![CDATA[

<p>Returns whether a Requisition is allowed for this instance</p>
]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 01-Nov-2007	LB		SR15600: Created 
	;-------------------------------------------------------------------------------
	set blnReturn = $$$YES
	if %this.ToLocn = %this.FromLocn {
		set blnReturn = $$$NO
	} 
 ;	TODO : <GRF> Need to ensure same main location
	quit blnReturn
]]></Implementation>
</Method>

<Method name="FirmRequisition">
<Description><![CDATA[
<p>Locks this record from further editing</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History :
	; 07-Dec-2007	HQN		Moved validation into IsFirmable
	;-------------------------------------------------------------------------------
	; Req is invalid with no DueDate, set to today
	set:(%this.DueDate = "") %this.DueDate = +$horolog
	set sc = %this.IsFirmable()

	for loopReqLine = 1:1:%this.ReqLines.Count() {
		set reqLine = %this.ReqLines.GetAt(loopReqLine)
 ;++++++++++++++++++++++++++++++++++++++++++
		tstart
		
		set sc = reqLine.FirmRequisition()
	
		if $$$ISOK(sc) {
			tcommit:($tlevel > 0)
		} else {
			trollback
			quit								;	for break
		}
 ;++++++++++++++++++++++++++++++++++++++++++
	}

	quit sc
]]></Implementation>
</Method>

<Method name="StatusSet">
<Description><![CDATA[

<p>Sets the status for this record</p>
<p>Expected input to be:</br>
Params:</br>
<ul>
	<li>User.WWWStatus.%Oid</li>
	<li>WWWStatus::INReq::(Status Constant) as Integer</li>
	<li>%Library.ObjectHandle(Instance of WWWStatus)</li>
</ul>
</p>
]]></Description>
<FormalSpec>Arg</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// && Arg.%Extends("alSYS.Status.dUStatus")
	if ($IsObject(Arg)) {
		set i%Status    = Arg.StatusCode
		set i%objStatus = $$$NULLOREF
		
	} elseif (Arg?.N1"||".A1"||".N) {
		set i%Status = $piece(Arg,"||",3) ; OID expected in this format "YM||ClassName||YKEY"
		
	} else {
		set i%Status = Arg
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="StatusGet">
<ReturnType>alSYS.Status.dUStatus</ReturnType>
<Implementation><![CDATA[
	//set strReturn =  %this.Company_"||INReq||"_i%Status
	if (i%Status '= $$$NULLOREF) && (i%objStatus = $$$NULLOREF) {
		set i%objStatus =  ##class(alSYS.Status.dUStatus).%OpenId("0||INReq||"_i%Status)
	}
	quit i%objStatus
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
Method ReqLinesGet() As %ListOfObjects
{
	if (i%ReqLines = $$$NULLOREF) {
		set blnModified = %this.%IsModified()
		set objReqLines    = ##class(%ListOfObjects).%New()
		set reqLinesQuery = ##class(%ResultSet).%New("alREQ.dUReq:GetReqLines")
		set sc = reqLinesQuery.Execute(%this.ReqNum)
		while (reqLinesQuery.Next(.sc)) {
			if ($SYSTEM.Status.IsOK(sc)) {
				set objReqLine = ##class(alREQ.dUReqLine).%OpenId(reqLinesQuery.Data("ID&quot;))
				if (objReqLine '= $$$NULLOREF) {
					;set objReqLine.Requisition = %this
					do objReqLines.Insert(objReqLine)
				}
			}
		}
		if objReqLines.Count() &gt; 0 {
			set i%ReqLines = objReqLines
			do i%ReqLines.%SetModified($$$NO) ; Loading doesn't touch modification bit
			do %this.%SetModified(blnModified) ; Loading doesn't touch modification bit
		}
	}
	quit i%ReqLines
}
*/
</Content>
</UDLText>


<Method name="ManuallyClose">
<Description><![CDATA[
	Manually close a Requisition Entry<br>
	Returns a <class>%Status</class> refering to success/failure<p>
	Closes Requisition Lines, which in turn closes/process
		RequisitionIssueLines and updates state of DRP records</p>

 Params:<br>
 
 Returns: <br>
 	<class>%Status</class>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History :
	; 03-Jun-2011	PPP		SR17776: When deleting Transfers update relevant info
	; 23-Sep-2010	shobby	SR17485: Quit out of loop if error on any line.
	; 23-Sep-2010	shobby	SR17485: Open transfer requires 0||
	; 23-Sep-2010	shobby	SR17485: On INReq the key is ReqNum not ReqNumber
	; 22-Sep-2010	shobby	SR17485.b: Don't check IsIssued for transfers. 
	; 22-Sep-2010	shobby	SR17485.b: Corrected %Library.ResultSet spelling
	; 14-Jan-2008	HQN		SR16296: Support ReqType:2 Transfers
	; 28-Feb-2008	HQN		Changed dStatus to dUStatus
	; 30-Jan-2008	HQN		SR15625: Changed class signature dREQIssue to dUReqIssue
	; 14-Dec-2007	HQN		$$$ISOK should be $$$ISERR
	; 12-Dec-2007	HQN		Implemented Close Open Issues if this has any
	; 						Converted to %Save
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set objManualCloseStatus = ##class(alSYS.Status.dUStatus).%OpenId("0||INReq||8") ; M-Close
	set objAutoCloseStatus   = ##class(alSYS.Status.dUStatus).%OpenId("0||INReq||9") ; A-Close
	//if (%this.Status =(##class(User.WWWStatus).%OpenId("0||INReq||7")).%Id()) {
	
	if (%this.ReqLines = $$$NULLOREF) || ( %this.ReqLines.Count() = 0 ) {
		set %this.Status = objManualCloseStatus ; M-Close
		set sc = %this.%Save()
	
	} else {
		//tstart
		set objReqLines = %this.ReqLines
		for loopLines = 1:1:objReqLines.Count() {
			set objReqLine = objReqLines.GetAt(loopLines)
			if 'objReqLine.IsClosed() set sc  = objReqLine.ManuallyClose()
			quit:($$$ISERR(sc))
		}
		if $$$ISERR(sc) {
		//	trollback
		} else {
			set %this.Status = objManualCloseStatus ; M-Close
			set sc = %this.%Save()
			if $$$ISOK(sc) {
				; Determine Type
				if (%this.Type = 1) { ; Department			;SR17485.b
					if (%this.IsIssued()) {					;SR17485.b
						; Manually close open Issues(Update Status[es])
						set lstIssues = ##class(alREQ.dUReqIssue).GetByReqNum(%this.ReqNum,.sc)
						if $$$ISOK(sc) {
							for loopIssues=1:1:lstIssues.Count() {
								set objIssue = lstIssues.GetAt(loopIssues)
								if objIssue.Status.StatusCode = 1 { ; Open Issue
									do objIssue.ManuallyClose()
								}
							}
						}
					}
				; SR16296 vvvv
				} elseif (%this.Type = 2) { ; Transfer
					;for l=1:1:100 hang 1
					set objResultSet = ##class(%Library.ResultSet).%New("alTFR.dUTransferLine:GetTransfersViaRequisition") ;SR17485
					set sc = objResultSet.Execute(%this.ReqNum)	;SR17485
					if $$$ISOK(sc) {
						while objResultSet.Next(.sc) {
							//set idUTransfer  = "0||"_objResultSet.Data("ID")												;SR17485
							set idTfr = objResultSet.Data("ID")		//SR17776
							set idUTransfer  = "0||"_idTfr			;SR17485
							set objUTransfer = ##class(alTFR.dUTransfer).%OpenId(idUTransfer,,.sc)	;SR17485
							if objUTransfer '= $$$NULLOREF {
								if (objUTransfer.Status = 0) || (objUTransfer.Status = 1) { ; Open / Firmed
									//set sc = objUTransfer.%DeleteId(objUTransfer.%Id())
									//SR17776 VVV
									set strStatus = $$OnBeforeDelete^INTRN("",idTfr)
									if $$$ISOK(strStatus) {
									    set sc = objUTransfer.%DeleteId(objUTransfer.%Id())
									}
									if $$$ISERR(strStatus) {
										set sc = $$$ERROR($$$GeneralError,strStatus)
									}
									/// SR17776 ^^^
								} elseif (objUTransfer.Status = 2) { ; Sent
									//set sc = $$$ERR("NOT SUPPORTED YET")
									; Reverse?
								} elseif (objUTransfer.Status = 3) { ; Received
									//set sc = $$$ERR("NOT SUPPORTED YET")
								}
							}
							quit:$$$ISERR(sc)																		;SR17485
						}
					}
					; SR16296 ^^^^
				}
			}
		//	tcommit
		}
		
	} 
	//}
	quit sc
]]></Implementation>
</Method>

<Method name="Print">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$OK
]]></Implementation>
</Method>

<Method name="ANMSave">
<FormalSpec>blnDpSav:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 30-Oct-2009	DWR		SR16999: pass status message into $$DecodeError^COMUtilError
	; 01-Aug-2008	Luke	SR15814: Corrected sc formation and use of $$$Text
	;-------------------------------------------------------------------------------
	
	set sc     = $$$OK
 ;	set ANMKey = %this.Company_","_%this.ReqNum 
	set ANMKey = %this.ReqNum 
	set ANMReq = ^INReq(%this.Company,%this.ReqNum,1)
	
	set $$$INReqStatus(ANMReq)      = i%Status
	set $$$INReqDate1(ANMReq)       = i%Date1
	set $$$INReqToLocn(ANMReq)      = i%ToLocn
	set $$$INReqFromLocn(ANMReq)    = i%FromLocn
	set $$$INReqDueDate(ANMReq)     = i%DueDate
	set $$$INReqPriority(ANMReq)    = i%Priority
	set $$$INReqType(ANMReq)     = i%Type
	set $$$INReqProcessDate(ANMReq) = i%ProcessDate
	set $$$INReqReceiveDate(ANMReq) = i%ReceiveDate
	
	if blnDpSav {
	; FIXME : Is NULLOREF test unnecessary?	
		if (..ReqLines '= $$$NULLOREF) || (..ReqLines.Count() '= 0) {
			for loopLines = 1:1:..ReqLines.Count() {
				set tempReqLine = ..ReqLines.GetAt(loopLines)
				set sc          = tempReqLine.ANMSave()
	/*
			set ANMKeyLine =  %this.Company_","_ %this.ReqNum 
			set ANMReqLine = ^INReqLine(%this.Company,%this.ReqNum,loopLines)
			 1 Item 
			 2 Unit 
			 3 QtyOrdered 
			 4 Required Quantity 
			 5 QtyToReceive  
			 6 QtyReceived   
			 7 QtyToIssue  
			 8 QtyIssued  
			 9 From Dept/Site  
			 10 Line Status 
			 11 DueDate  
	*/
				// ^INReqLine(0,"P0060000002",1,1)=1020~1~~4~~~~~3~1~60963
			}
		}
	}
	set strStatus = $$Save^COMUtils("INReq",ANMKey,ANMReq,$$$YES) // SR15814:
	; should this be a save always without checking locks?
	if $$$ISERR(strStatus){
	;	set strMessage = $$DecodeError^COMUtilError() // SR15814:     
		set strMessage = $$DecodeError^COMUtilError(strStatus) // SR15814:  ; SR16999   
		set sc =$$$ERROR($$$GeneralError,strMessage) // SR15814:
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="ANMIsModified">
<Description><![CDATA[
Returns true (1) if this instance has been modified, otherwise false (0).
calls to Super IsModified()]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 19-Dev-2007	LB		change comparators to object variables
	; 07-Nov-2007	LB		SR15600: Created 
	;-------------------------------------------------------------------------------
	set blnReturn = $$$NO
	set objReq = ##class(alREQ.dUReq).%OpenId(%this.Company,%this.ReqNum)
	if objReq'= $$$NULLOREF {
		if (objReq.Company             '= i%Company)     ||
		   (objReq.Date1               '= i%Date1)       ||
		   (objReq.DueDate             '= i%DueDate)     ||
		   (objReq.FromLocn.Location   '= i%FromLocn)    ||
		   (objReq.Priority    		   '= i%Priority)    ||
		   (objReq.ProcessDate 		   '= i%ProcessDate) ||
		   (objReq.ReceiveDate         '= i%ReceiveDate) ||
		   (objReq.ReqNum              '= i%ReqNum)      ||
		   (objReq.Type             '= i%Type)     ||
		   (objReq.Status.StatusCode   '= i%Status)      ||
		   (objReq.ToLocn.Location     '= i%ToLocn)         {
			set blnReturn = $$$YES
		}
		do objReq.%Close()
	}
	quit blnReturn
]]></Implementation>
</Method>

<Method name="IsModified">
<Description><![CDATA[
Returns true (1) if this instance has been modified, otherwise false (0).
calls to Super IsModified()

Calls the @nM version of the IsModified (<code>ANMIsModified</code>
this is because calling the %IsModified directly will always be modified in an 
@net Manager system <br>]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 01-Nov-2007	LB		SR15600: Created 
	;-------------------------------------------------------------------------------
	quit ..ANMIsModified()
]]></Implementation>
</Method>

<Method name="IsFirmable">
<Description><![CDATA[
	<p>Based on current instance state, returns wether it can go to the
	Firmed(WWWStatus::INReq::2) State</p>
]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 30-Oct-2009	DWR		SR16999: pass status message into $$DecodeError^COMUtilError
	; 29-Oct-2008	HQN		Can't set FIRMED if already ISSUED
	; 12-Sep-2008	HQN		SR15903: Check FromStockLocn against this.ToLocn
	; 01-Aug-2008	Luke	SR15814: Corrected sc formation and use of $$$Text and use of status
	; 13-Dec-2007	GRF		Additional validation of locations
	; 07-Dec-2007	HQN		SR15598: Created; Moved and clarified No Lines check
	; 							from FirmRequisition
	;-------------------------------------------------------------------------------
	set sc = '..IsIssued()
	if %this.ReqLines.Count() = 0 {
		set reqLineRow = $$$NULLOREF
		set strMessage = $$$Text("INREQ15")      // SR15814:
		set sc =$$$ERROR($$$GeneralError,strMessage)
		//set sc = $$$MakeStatus("INREQ15")   ; No lines exist on Requisition
	}
	
	if $$$ISOK(sc) {
	; Check INReq From/To Locns - same main location but different locn
		set ANMKey  = %this.ReqNum
		set ANMData = $get(^INReq(%this.Company,%this.ReqNum,1))
		// VVVV // SR15814:
		set strStatus = $$$OK
		set strStatus = $$TempReqValidation^WWW0121(ANMKey,ANMData,%this.Company,%this.ToLocn.Location,%this.FromLocn.Location) // SR15814:
		if $$$ISERR(strStatus){
			;set strMessage = $$DecodeError^COMUtilError()      
			set strMessage = $$DecodeError^COMUtilError(strStatus)     ; SR16999      
			set sc =$$$ERROR($$$GeneralError,strMessage) // SR15814:
		}
 		//set sc      = $$TempReqValidation^WWW0121(ANMKey,ANMData,%this.Company,%this.ToLocn.Location,%this.FromLocn.Location)
 		// ^^^^ // SR15814:
	}
	if $$$ISOK(sc) {
		for loopLines=1:1:%this.ReqLines.Count() {
			set sc = %this.ReqLines.GetAt(loopLines).IsFirmable()      
			if %this.ReqLines.GetAt(loopLines).FromStockLocn = %this.ToLocn {
				set sc = $$$ERROR($$$GeneralError,$$$Text("IN00404")) ;Requisition requires different locations SR15903
			}
			quit:($$$ISERR(sc))
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="NewRecord">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set returnval = $$$NO 
	//set x = %this.%Id() 
	if %this.%Id() = $$$NULLOREF {
		set returnval = $$$YES 
	}
	quit returnval
]]></Implementation>
</Method>

<Method name="CreateIssue">
<Description><![CDATA[

Create an Issue Header for objLocation for all outstanding lines from this INReq
]]></Description>
<FormalSpec>objLocation:alLOC.dULocation,*sc:%Status</FormalSpec>
<ReturnType>alREQ.dUReqIssue</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Called By :
	; 	INReqIssueAsReq
	; 
	; History:
	; 01-Dec-2009	shobby	SR17034: Include Program1
	; 04-Jun-2009	PPP		SR16544: Type can be Dep Issue or Kit, from the Reqn
	; 18-Mar-2009	DavidR	SR16406: Added Listbuild to error
	; 01-Aug-2008	Luke	SR15814: Corrected sc formation and use of $$$Text
	; 31-Mar-2008	HQN		Force OpenId on DemandType, catches setup errors
	; 25-Feb-2008	HQN		SR15625 Changed class signature dStatus to dUStatus
	; 30-Jan-2008	HQN		SR15625 Changed class signature dREQIssue to dUReqIssue
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	; 13-Dec-2007	HQN		Set IssueNumber to ANM generated key
	; 12-Dec-2007	HQN		Converted to %Save
	; 06-Dec-PPP	PPP		SR15598 : Demand Type updated from 5 - Supplies to 
	; 							7 - Requisitions
	; 06-Nov-2007	GRF		Create Issue Lines returns sc as ByRef
	;-------------------------------------------------------------------------------
	
	//for %david = 1:1:100 hang 1
	
	//1 ; Open Status for INIssue
	;***************************************
	tstart 
	;***************************************
	
	set objIssue = ##class(alREQ.dUReqIssue).%New()
	set objIssue.Company    = %this.Company
	set objIssue.DemandType = ##class(User.WWW101).%OpenId("AL-DEMANDTYPE||EN||7").SearchItem 	; Requisition type from INDRPDEMAND/INDRPSUPPLY constants
	set objIssue.Reference  = %this.ReqNum
	set objIssue.FromLocn   = objLocation.Location
	set objIssue.ToLocn     = %this.ToLocn
	set objIssue.Priority   = %this.Priority
	set objIssue.Status     = ##class(alSYS.Status.dUStatus).%OpenId("0||INIssue||1") ; Open Status
	set objIssue.Program1	= %this.Program1	;SR17034
	set strFormName = %("%KEY","YFORM")
	set %("%KEY","YFORM") = "INIssue"
	set objIssue.IssueNumber = $$^WWWNEXT("INIssue") ; ANM provided key
	set %("%KEY","YFORM") = strFormName

	//set objIssue.Type     = 1				//Inter-Departmental Issue
	set objIssue.Type     = %this.Type		//Inter-Departmental Issue
	set sc = objIssue.%Save()
	
	;---------------------------------------
	; Req Header		1:1						Issue Header
	; 
	;  loopReqLine vvv							GetAt				Insert
	;		Req Line	1:n							1	Issue Line	1
	;     	
	;		Req Line	1:n	 CreateIssueLines =>	1	Issue Line	2
	;				     							2	Issue Line	3
	;	
	;		Req Line	1:n							1	Issue Line	4
	;---------------------------------------
	
	if $$$ISOK(sc) {
		for loopReqLine = 1:1:%this.ReqLines.Count() {
			set objReqLine = %this.ReqLines.GetAt(loopReqLine)
			
		;	create Issue only where there is required stock not previously issued for this location
			if (objReqLine.QtyRequired > objReqLine.QtyIssued) &&
			   (objReqLine.FromStockLocn = objIssue.FromLocn)     {
				
				; create IssueLine from dUReqLine
				set objIssueLines = objIssue.CreateIssueLines(objReqLine,.sc)
				quit:$$$ISERR(sc)
				
				for loopIssueLine=1:1:objIssueLines.Count() {
					set objIssueLine = objIssueLines.GetAt(loopIssueLine)
					do objIssue.IssueLines.Insert(objIssueLine)	
				}
			}
		}
	}
	
	if $$$ISOK(sc) {
	;	None of requisition lines belonging to this location still have stock waiting for issue
		if (objIssue.IssueLines.Count() > 0) {
			set %this.Status = ##class(alSYS.Status.dUStatus).%OpenId("0||INReq||3") ; active
			set sc = %this.ANMSave()
		} else {
			set strMessage = $$$Text($listbuild("INREQ16",%this.ReqNum)) ;"Couldn't create an issue for Requisition %1"     // SR15814: ;SR16406
			set sc =$$$ERROR($$$GeneralError,strMessage)
		}
	}
	if $$$ISOK(sc) {
	;***************************************
		tcommit:($tlevel>0)
	} else {
		trollback
		set objIssue = $$$NULLOREF
	;***************************************
	}
	; should notify of errors
	quit objIssue
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
method saveCode() as %String
{
	;***************************************
		tstart 
	;***************************************
	set sc = objIssue.ANMSave()
	if $$$ISOK(sc) {
	
		for loopReqLine = 1:1:%this.ReqLines.Count() {
			set objReqLine = %this.ReqLines.GetAt(loopReqLine)
			; create Issue only for lines that are in the same locn as this issue
			if (objReqLine.QtyRequired &gt; objReqLine.QtyIssued) &amp;&amp;
			   (objReqLine.FromStockLocn = objIssue.FromLocn)     {
				
				; create IssueLine from dUReqLine
				set objIssueLines = objIssue.CreateIssueLines(objReqLine,.sc)
				if $$$ISERR(sc) {
	;***************************************
					trollback
					quit ; for break
	;***************************************
				} else {
					for loopIssueLine=1:1:objIssueLines.Count() {
						set objIssueLine = objIssueLines.GetAt(loopIssueLine)
						do objIssue.IssueLines.Insert(objIssueLine)						
					}
					;set objIssue.IssueLines = objIssueLines ;.%ConstructClone($$$YES)
				}
			} else {
				; ReqLine already fulfilled
			}
		}
		if $$$ISOK(sc) {
			set %this.Status = ##class(alSYS.Status.dStatus).%OpenId("0||INReq||3") ; active
			if %this.ANMSave() &amp;&amp; (objIssue.IssueLines.Count() &gt; 0) {
		;***************************************
				tcommit
				quit objIssue
			} else {
				trollback
				quit $$$NO_"No lines created"      ; FIXME : status
		;***************************************
			}
		} else {
			
		}
	}
}
*/
</Content>
</UDLText>


<Method name="ToLocnGet">
<ReturnType>alLOC.dULocation</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;-------------------------------------------------------------------------------
	if (i%ToLocn '= $$$NULLOREF) && (i%objToLocn = $$$NULLOREF) {
		set objToLocn = ##class(alLOC.dULocation).%OpenId(0_"||"_i%ToLocn)
		if (objToLocn '= $$$NULLOREF) {
			set i%objToLocn = objToLocn
		}
	}
	quit i%objToLocn
]]></Implementation>
</Method>

<Method name="ToLocnSet">
<FormalSpec>ToLocn</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;-------------------------------------------------------------------------------
	if $IsObject(ToLocn) && ToLocn.%Extends("alLOC.dULocation") {
		set i%objToLocn = ToLocn
		set i%ToLocn    = ToLocn.Location
	} else {
		set i%ToLocn = ToLocn
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="FromLocnGet">
<ReturnType>alLOC.dULocation</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;-------------------------------------------------------------------------------
	if (i%FromLocn '= $$$NULLOREF) && (i%objFromLocn = $$$NULLOREF) {
		set objFromLocn = ##class(alLOC.dULocation).%OpenId("0||"_i%FromLocn)
		if (objFromLocn '= $$$NULLOREF) {
			set i%objFromLocn = objFromLocn
		}
	}
	quit i%objFromLocn
]]></Implementation>
</Method>

<Method name="FromLocnSet">
<FormalSpec>FromLocn</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;-------------------------------------------------------------------------------
	if $IsObject(FromLocn) && FromLocn.%Extends("alLOC.dULocation") {
		set i%objFromLocn = FromLocn
		set i%FromLocn    = FromLocn.Location
	} else {
		set i%FromLocn = FromLocn
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ReqLinesCount">
<Description><![CDATA[
a hack to get around the fact that the script engine can't handle
properties that are objects properly (YET :) ) ]]></Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..ReqLines.Count()
]]></Implementation>
</Method>

<Method name="%OnDelete">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Delete</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being deleted.

<P>If this method returns an error then the object will not be deleted.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	set objReq = ##class(alREQ.dUReq).%Open(oid)
	; FIXME : $$$NULLOREF?
	set listReqLines = objReq.ReqLines
	
	for loopReqLines=1:1:listReqLines.Count() {
		set objReqLine = listReqLines.GetAt(loopReqLines)
		set sc = objReqLine.%Delete(objReqLine.%Oid())
		quit:$$$ISERR(sc)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="%ExistsId">
<Description><![CDATA[
Checks to see if the object identified by the ID <var>id</var> exists in the extent.

<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>id:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Wrapper to prepend company to key before checking for record
	; 
	; History
	; 27-Nov-2007	GRF		SR15615: Created
	;-------------------------------------------------------------------------------
	set %code=0
	$$$GENERATE(" quit ##super(""0||""_id)")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="AutoClose">
<Description><![CDATA[
<p>Attempt to move status to WWWStatus::INReq::9 state</p>
 
 Returns: Status containing why it couldn't switch state]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; If all lines are closed, make sure requisition is closed
	; 
	; History
	; 
	; 21-May-2013	SCR		CORE-95: If Transfer (inter-site) use Rec & Rejected qty for closing
	; 19-Dec-2007	HQN		Corrected logic for detecting line closability
	; 							Corrected Status setter
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	
	if (%this.IsClosable()) {
		set blnAllLinesClosed = $$$YES
		for loopLines=1:1:%this.ReqLines.Count() {
			set objReqLine = %this.ReqLines.GetAt(loopLines)
			if objReqLine.IsClosable() {         ; 'can be closed' therefore hasn't been yet
				set blnAllLinesClosed = $$$NO
				quit ; for break
			}
			; CORE-95 vvvv
			if %this.Type = 2 {
				if (objReqLine.QtyReceived + objReqLine.QtyRejected) < objReqLine.QtyRequired {
					set blnAllLinesClosed = $$$NO
					quit ; for break
				}
			} else {  ; CORE-95 ^^^^
				if objReqLine.QtyIssued < objReqLine.QtyRequired {
					set blnAllLinesClosed = $$$NO
					quit ; for break
				}
			} 
		}
		if blnAllLinesClosed {
			; Update status
			set %this.Status = 9
			set sc = %this.%Save()
		}
	} else {
		set sc = $$$MakeStatus("INREQ17")                  ; "Requisition can not be closed"
	}
	quit sc
]]></Implementation>
</Method>

<Method name="IsClosable">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 
	; 19-Dec-2007	HQN		SR15598: Created
	;-------------------------------------------------------------------------------
	set blnResult = $$$YES
	if (%this.Status.StatusCode = 8) ||    ; Manual - Close[d]
	   (%this.Status.StatusCode = 9)    {  ; Auto - Close[d]
		set blnResult = $$$NO
	}
	; check Lines for closability
	for loopLines=1:1:%this.ReqLines.Count() {
		if %this.ReqLines.GetAt(loopLines).IsClosable() {
			set blnResult = $$$NO
			quit:(blnResult = $$$NO)
		}
	}
	quit blnResult
]]></Implementation>
</Method>

<Method name="%OnOpen">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Open</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being opened.

<P>If this method returns an error then the object will not be opened.</P>
<P>Load all lines for this record, sets modified to $$$NO</br>
Workaround for pseudo relations, this would be automated for true Relations
</P>]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008 	HQN		SR15625 Changed class signature dREQLine to dUReqLine
	;-------------------------------------------------------------------------------
	if (%this.ReqLines.Count() = 0) {
		set blnModified = %this.ReqLines.%IsModified()
		set reqLinesQuery = ##class(%ResultSet).%New("alREQ.dUReqLine:GetReqLines")
		set sc = reqLinesQuery.Execute(%this.ReqNum)
		
		while (reqLinesQuery.Next(.sc)) {
			if ($SYSTEM.Status.IsOK(sc)) {
				set objReqLine = ##class(alREQ.dUReqLine).%OpenId(reqLinesQuery.Data("ID"))
				if (objReqLine '= $$$NULLOREF) {
					;set objReqLine.Requisition = %this
					do %this.ReqLines.Insert(objReqLine)
				}
			}
		}
		if %this.ReqLines.Count() > 0 {      ; Loading doesn't touch modification bit
			do %this.ReqLines.%SetModified($$$NO)
			do %this.%SetModified(blnModified)
		}
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called before 
any data is written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.
<p>Makes sure edited transient objects have their values saved</p>]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 28-Jul-2010	SCR		SR17471: Added Call to Super:%OnBeforeSave(insert)
	; 27-Feb-2008	HQN		Added Default loading from V2 dUser
	; 16-Dec-2007	HQN		Check for NULLOREFs
	; 06-Dec-2007	HQN		Created to make sure our Transient properties are saved
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	; Grab default location from user if exists
	if (%this.User '= $$$NULLOREF) {
		if (%this.ToLocn = $$$NULLOREF) {
			; V2 -> V1.5 mangling here
			set UserLocation = %this.User.HomeLocation ; V2
			set:(UserLocation '= $$$NULLOREF) %this.ToLocn = UserLocation.Code
		}
		set:(%this.User.UserName '= "") %this.CreatedBy = %this.User.UserName
	}
	
	if (%this.Status '= $$$NULLOREF)   && (%this.Status.%IsModified()) {
		set i%Status = %this.Status.StatusCode
	}
	if (%this.ToLocn '= $$$NULLOREF)   && (%this.ToLocn.%IsModified()) {
		set i%ToLocn = %this.ToLocn.Location
	}
	if (%this.FromLocn '= $$$NULLOREF) && (%this.FromLocn.%IsModified()) {
		set i%FromLocn = %this.FromLocn.Location
	}
	set sc=##Super(insert) ; SR17471
	quit sc
]]></Implementation>
</Method>

<Method name="IsIssued">
<Description><![CDATA[
<P>Returns whether or not this Req has been Issued</P>
]]></Description>
<FormalSpec>*sc</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 30-Jan-2008	HQN		SR15625 Changed class signature dREQIssue to dUReqIssue
	;-------------------------------------------------------------------------------
	set blnIssued = $$$NO
	set objResultSet = ##class(%Library.ResultSet).%New("alREQ.dUReqIssue:ByReqNum")
	set sc = objResultSet.Execute(%this.ReqNum)
	
	if ($$$ISOK(sc)) {
		if objResultSet.Next(.sc) {
			set blnIssued = $$$YES
		}
	}
	quit blnIssued
]]></Implementation>
</Method>

<Method name="IsRejectable">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 29-Jan-2009	HQN		SR16296: Created
	;-------------------------------------------------------------------------------
	set blnStatus = $$$YES
	quit blnStatus
]]></Implementation>
</Method>

<Method name="Reject">
<FormalSpec>strReason:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 29-Jan-2009	HQN		SR16296: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	quit sc
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>