<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsProductionModelPane">
<Description><![CDATA[
Production Model pane; This is the second step in creating
a new production.
This page lets the user add inputs/outputs to the production.]]></Description>
<ClassType/>
<IncludeCode>Ensemble,EnsUI</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Util.Pane</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Method name="Submit">
<Description><![CDATA[
Override submit behavior for this page]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:%CSP.Request,pSubmit:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// get ID values from request
	If ($IsObject($G(pRequest))) {
		Set n = 1
		While ($D(pRequest.Data("$ID"_n,1))) {
			Set tID(n) = pRequest.Data("$ID"_n,1)
			Set n = n + 1
		}
	}
	
	Set ret = ..OnSubmit(.tID,pSubmit)	
	Quit ret
]]></Implementation>
</Method>

<Method name="OnSubmit">
<Description><![CDATA[
This callback is called when this form is submitted.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;pID:%String,pSubmit:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	If (pSubmit = "$AUTOFORM_SAVE") {
		Set tProdId = $G(%request.Data("prodid",1))
		Set tXML = $G(%request.Data("data",1))
		Set tSC = ..UpdateProduction(tProdId,tXML)

		// !!!
		If $$$ISERR(tSC) {
			Do $System.Status.DecomposeStatus(tSC,.err)
			Set %response.Context("$ERROR") = $G(err(1))
		}
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="DrawHEAD">
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// get page ID values
	Merge tID = pInstance.IDValues

	Set tProdId = $G(tID(1))

	Set msg1 = $$$TextJS("This model has been changed. Do you want to save the changes?")
	Set msg2 = $$$TextJS("Are you sure you want to delete this production?")
	Set msg3 = $$$TextJS("You will lose changes, proceed?")
	
	// override table style
	&html<
<style>

/* override */
TABLE.LayoutMain TD.LayoutContentCol {
	background: #CCCCEE;
	padding: 0px;
	margin: 0px;
	vertical-align: top;
	filter: none;
}

.btn {
	width: 100%;
}

a.menuItem {
	width: 100%;
	display: block;
	color: darkblue;
	background: white;
	padding: 2px 3px 2px 3px;
	text-decoration: none;
	white-space: nowrap;
	vertical-align: middle;
	border: 1px darkblue solid;
	font-size: 0.8em;
}
/* mouse over */
a.menuItem:hover {
	background: #FFFFA0;
	border: 1px darkblue dotted;
}
a.menuItem:link, a.menuItem:visited, a.menuItem:active {
	color: darkblue;
}

.TextM {
	line-height: 120%;
	margin-bottom: 5px;
	margin-left: 5px;
	padding: 2px;
}

embed {
	border: 1px darkblue solid;
}

#details {
	width: 250px;
	height: 300px;
	overflow: auto;
	border: 1px darkblue solid;
	background: white;
	font-size: 1.0em;
}

.dtlTitle {
	width: 100%;
	border-bottom: 1px darkblue solid;
	font-weight: bold;
	padding-right: 2px;
	padding-left: 2px;
	background: #404040;
	background-image: url(/csp/broker/images/grad-gray-10x100.png);
	background-repeat: repeat-x;
}

.dtlLabel {
	font-weight: bold;
	font-size: 0.8em;
	padding-right: 2px;
	padding-left: 2px;
}

.dtlValue {
	padding-right: 2px;
	padding-left: 2px;
	border-bottom: 1px darkblue solid;
	font-size: 0.8em;
}

</style>>

	&html<
	
<script language="javascript">
function btnSave()
{
	//alert(saveModel());

	var saveForm = self.document.saveForm;
	saveForm.method = 'post';
	saveForm.data.value = saveModel();
	saveForm.submit();
}

function btnConfigure()
{
	// ask if they want to save
	if (isModelModified()) {
		if (confirm('#(msg1)#')) {
			btnSave();
			return;
		}
	}

	// go to config page
	self.document.location = 'CSPX.EnsConfigFrame.cls?$ID1=#(tProdId)#';
	return true;
}

function btnDelete()
{
	if (confirm('#(msg2)#')) {
		callDeleteProduction('#(tProdId)#');
	}
}

function btnCancel()
{
	if (!isModelModified() || confirm('#(msg3)#')) {
		// go back
		self.document.location = 'UtilEnsProductions.csp';
	}
}

/// Initialize the model
function initModel()
{
	loadModel();
}

// show details for current item
function setDetailsBox(key,name,hostType,clsName)
{
	var details = self.document.getElementById('details');

	if (!key) {
		// disabled
		details.style.background = 'silver';

		self.document.getElementById('dtlName').innerHTML = '&nbsp';
		self.document.getElementById('dtlHostType').innerHTML = '&nbsp';
		self.document.getElementById('dtlHostClass').innerHTML = '&nbsp';
	}
	else {
		details.style.background = 'white';

		self.document.getElementById('dtlName').innerHTML = name;
		self.document.getElementById('dtlHostType').innerHTML = hostType;
		self.document.getElementById('dtlHostClass').innerHTML = clsName;
	}
}

// load contents of initialModel into diagram
function loadModel()
{
	var xml = self.document.getElementById('initialModel');
	if (!xml) {
		alert('Unable to find initialModel');
		return;
	}

	// walk production document
	var item,node,attrs,val;
	var prod = xml.firstChild;
	if (prod && prod.nodeName == 'Production') {
		// production element: process attrs
		attrs = prod.attributes;
		var prodName = '';
		var prodAttrBag = new Object();  // holder for misc attrs
		var prodElementBag = new Object();  // holder for misc elements

		for (var a = 0; a < attrs.length; a++) {
			node = attrs.item(a);
			val = node ? node.nodeValue : '';

			switch (node.nodeName) {
			case 'Name':
				prodName = val;
				break;
			default:
				prodAttrBag[node.nodeName] = val;
				break;
			}
		}

		setProductionName(prodName);
		setProductionAttributes(prodAttrBag);

		if (prod.childNodes) {
			for (var n = 0; n < prod.childNodes.length; n++) {
				item = prod.childNodes[n];
				switch(item.nodeName) {
				case 'Item':
					attrs = item.attributes;
					var itemName = '';
					var hostType = '';
					var hostClass = '';
					var itemAttrBag = new Object();  // holder for misc attrs
					for (var a = 0; a < attrs.length; a++) {
						node = attrs.item(a);
						val = node ? node.nodeValue : '';
		
						switch (node.nodeName) {
						case 'Name':
							itemName = val;
							// look up hostType in item map
							if (val != '') {
								hostType = itemMap[val];
							}
							break;
						case 'ClassName':
							hostClass = val;
							break;
						default:
							itemAttrBag[node.nodeName] = val;
							break;
						}
					}
		
					// add item to model
					var itemKey = null;
					if (itemName != '' && hostType != '' && hostClass != '') {
						itemKey = addHost(itemName,hostType,hostClass,itemAttrBag);
					}

					var setting;
					var settingValue = null;
					var sattrs = null;
		
					if (item.childNodes) {
						for (var n2 = 0; n2 < item.childNodes.length; n2++) {
							setting = item.childNodes[n2];
							switch(setting.nodeName) {
							case 'Setting':
								settingValue = setting.firstChild ? setting.firstChild.nodeValue : ''; //setting.nodeValue;
								// setting: process attrs
								sattrs = setting.attributes;
								var settingBag = new Object();  // holder for misc attrs
						
								for (var a2 = 0; a2 < sattrs.length; a2++) {
									node2 = sattrs.item(a2);
									val2 = node2 ? node2.nodeValue : '';
						
									switch (node2.nodeName) {
									default:
										settingBag[node2.nodeName] = val2;
										break;
									}
								}
								break;
							default:
								alert('Unexpected xml element in Item: ' + setting.nodeName);
							}

							// create setting
							if (itemKey) {
								addSetting(itemKey,settingValue,settingBag);
							}
						}
						
					}

					break;

				default:
					// stuff value into element bag
					val = item ? (item.firstChild ? item.firstChild.nodeValue : '') : '';
					val = val ? val : '';
					prodElementBag[item.nodeName] = val;
					break;
				}
			}
		}
		
		setProductionElements(prodElementBag);
	}
}

function addService()
{
	showAddHostWizard('Service');
}

function addOperation()
{
	showAddHostWizard('Operation');
}

function addProcess()
{
	showAddHostWizard('Process');
}

function showAddHostWizard(hostType)
{
	// show AddHost wizard
	var url = 'UtilEnsHostWizard.csp?MODE=model&$ID1=' + escape('#(tProdId)#') + '&$ID2=' + escape(hostType);
	launchPopupWindow(url);
}

/// Add a host to this model
function addHost(name,hostType,hostClass,bag)
{
	var div = self.document.getElementById("loading");
	if (div && div.api) {
		return div.api.addHost(name,hostType,hostClass,bag);
	}
}

/// Add a setting to this model
function addSetting(key,value,bag)
{
	var div = self.document.getElementById("loading");
	if (div && div.api) {
		div.api.addSetting(key,value,bag);
	}
}

/// Test model mod flag
function isModelModified()
{
	var div = self.document.getElementById("loading");
	if (div && div.api) {
		return div.api.isModified();
	}
	
	return false;
}

/// Remove selected item from model
function removeItem()
{
	var div = self.document.getElementById("loading");
	if (div && div.api) {
		div.api.removeItem();
	}
}

/// Set model title
function setProductionName(name)
{
	var div = self.document.getElementById("loading");
	if (div && div.api) {
		div.api.setProductionName(name);
	}
}

function setProductionAttributes(attrBag)
{
	var div = self.document.getElementById("loading");
	if (div && div.api) {
		div.api.setProductionAttributes(attrBag);
	}
}

function setProductionElements(elBag)
{
	var div = self.document.getElementById("loading");
	if (div && div.api) {
		div.api.setProductionElements(elBag);
	}
}

/// Get serial state of model
function saveModel()
{
	var div = self.document.getElementById("loading");
	if (div && div.api) {
		return div.api.saveModel();
	}
	
	return '';
}

function launchPopupWindow(url, pageName, features)
{
	// We must dig out the CSPCHD value from the current location so that the popup keeps the context
	var cspchd = null;
	var params = self.document.location.href.split("?");

	if (params.length > 1) {
		params = params[1].split("&")
		for (var p in params) {
			plist = params[p].split("=");
			if (plist[0] == 'CSPCHD') {
				cspchd = plist[1];
			}
		}
	}

	if (features == null) {
		// default features
		features = "status,scrollbars,resizable";
	}

	if (pageName == null) {
		// default page name
		pageName = 'PopupWindow';
	}

	// see if we need to provide size and position
	var wid = self.screen.width;
	var hgt = self.screen.height;
	wid = wid * 0.6;
	hgt = hgt * 0.6;
	var top = self.screen.height * 0.2;
	var left = self.screen.width * 0.2;

	if (-1 == features.indexOf('width')) {
		features = features + (''==features?'':',') + 'width=' + wid; 
	}
	if (-1 == features.indexOf('height')) {
		features = features + (''==features?'':',') + 'height=' + hgt; 
	}
	if (-1 == features.indexOf('top')) {
		features = features + (''==features?'':',') + 'top=' + top; 
	}
	if (-1 == features.indexOf('left')) {
		features = features + (''==features?'':',') + 'left=' + left; 
	}

  	var id = '';
  	var questionmark = url.split("?");
  	var page;
  	if (questionmark.length > 1) {
	  	page = escape(questionmark[0]) + "?" + questionmark[1];
	  	page = page + "&" + id;
  	}
  	else {
		page = url + "?" + id;
  	}

  	// Append the CSPCHD (if we found one)
  	if (null != cspchd) {
	  	page = page + "&CSPCHD=" + cspchd;
  	}

	// create popup window
	var popup = window.open(page,pageName,features);
	popup.focus();
	
	// remember popup window in our window
	self.popupWindow = popup;
}

</script>
	>

	// write out methods that perform the hyper-calls
	Write "<script language=""javascript"">",!

	Write "function callDeleteProduction(prodid)",!
	Write "{",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsProductionModelPane.DeleteProduction","prodid",1)
 	Write ";",!
	Write "}",!

	Write "</script>",!

	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawBODY">
<Description><![CDATA[
Draw the BODY of the wizard pane]]></Description>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If (%request.UserAgent '[ "MSIE") {
		Write "<div style=""padding-left:20px;"">",$$$TextHTML("At this time, this page is only visible with Internet Explorer."),"</div>"
		Quit $$$OK
	}
	
	// get page ID values
	Merge tID = pInstance.IDValues
	Set tProdId = $G(tID(1))

	Set tProduction = ""
	Set tIsRunning = 0
	Set:tProdId'="" tProduction = ##class(Ens.Config.Production).%OpenId(tProdId)
	If ($IsObject(tProduction) && ($G($$$EnsRuntime("Name")) = tProduction.Name)) {
		Set tIsRunning = 1
	}

	// form used to submit changes
	// make sure submit comes back to this class as a Save
	&html<	
	<form name="saveForm" style="display:none;">
	<input type="hidden" name="$CLASS" value="#(..%ClassName(1))#">
	<input type="hidden" name="$AUTOFORM_SAVE" value="1">
	<input type="hidden" name="prodid" value="#(tProdId)#">
	<input type="hidden" name="data" value="">
	</form>>
	Set tTitle1 = $$$Text("The Ensemble Production Model page displays a simplified model of a production.")
	Set tTitle2 = $$$Text("You can use this model to easily add new inputs (Business Services) and outputs (Business Operations) to a new production.")
	Set tTitle3 = $$$Text("Afterwards you can use the Production Configuration page to adjust the settings.")
	&html<<div class="TextM">#(tTitle1)#<br>#(tTitle2)#<br>#(tTitle3)#</div>>

	If (tIsRunning) {
		Set tTitle4 = $$$Text("This production is running and cannot be modified using this page.")
		&html<<div class="TextM"><b>#(tTitle4)#</b></div>>
	}

	&html<<table border="0" cellspacing="0" cellpadding="0"><tr>
	<td valign="top">>
	Do ..DrawMenuItem($$$Text("Add Business Service"),"javascript: addService();",$$$Text("Add a new Business Service (input) to this model."),'tIsRunning)
	Do ..DrawMenuItem($$$Text("Add Business Operation"),"javascript: addOperation();",$$$Text("Add a new Business Operation (output) to this model."),'tIsRunning)
	Do ..DrawMenuItem($$$Text("Add Business Process"),"javascript: addProcess();",$$$Text("Add a new Business Process to this model."),'tIsRunning)
	&html<<hr>>
	Do ..DrawMenuItem($$$Text("Remove Item"),"javascript: removeItem();",$$$Text("Remove the current selected item from this model."),'tIsRunning)
	&html<<hr>>
	Do ..DrawMenuItem($$$Text("Save Production"),"javascript: btnSave();",$$$Text("Save changes made to this production."),'tIsRunning)
	Do ..DrawMenuItem($$$Text("Configure Production"),"javascript: btnConfigure();",$$$Text("Go to the Configuration page for this production."))
	Do ..DrawMenuItem($$$Text("Cancel"),"javascript: btnCancel();",$$$Text("Revert all changes made to this production."))
	&html<<hr>>
	Do ..DrawMenuItem($$$Text("Delete Production"),"javascript: btnDelete();",$$$Text("Delete this production."),'tIsRunning)
	&html<<hr><br><br>>

	// details box
	&html<<div id="details">
	<div class="dtlTitle">#($$$Text("Details"))#</div>
	<div class="dtlLabel">#($$$Text("Name:"))#</div>
	<div class="dtlValue" id="dtlName">&nbsp;</div>
	<div class="dtlLabel">#($$$Text("Type:"))#</div>
	<div class="dtlValue" id="dtlHostType">&nbsp;</div>
	<div class="dtlLabel">#($$$Text("Class:"))#</div>
	<div class="dtlValue" id="dtlHostClass">&nbsp;</div>
	</div>>

	&html<</td>
	
	<td width="80%" valign="top">
	<div id="loading">#($$$Text("Loading..."))#</div>
	<embed 
			id="SVGEmbed" 
			name="SVGEmbed" 
			type="image/svg+xml" 
			src="#(##class(%CSP.Page).Link("productionModel.svg"))#" 
			height="2000" 
			width="800">
	</td></tr></table>>

	// create initial state
	&html<
	<xml id="initialModel">>
	If $IsObject($G(tProduction)) {
		Do tProduction.XMLExport()
	}

	&html<</xml>>

	Write "<script>",!
	Write "var itemMap = new Object();",!
	Do ..DrawProductionMap(tProduction)
	Write "</script>",!

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawMenuItem">
<Description><![CDATA[
Draw a menu item]]></Description>
<FormalSpec>pCaption:%String,pHREF:%String,pHelp:%String,pEnabled:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
	Set dis =""
	If ('pEnabled) {
		Set dis = "disabled style=""background: #DDDDDD;"""
	}

	&html<<a class="menuItem" title="#(pHelp)#" #(dis)# href="#(pHREF)#">&nbsp;#($ZCVT(pCaption,"O","HTML"))#&nbsp;</nobr></a>>
]]></Implementation>
</Method>

<Method name="DrawProductionMap">
<Description><![CDATA[
Take a production and create a client map that specifies
the business type of each item]]></Description>
<FormalSpec>pProduction:Ens.Config.Production</FormalSpec>
<Implementation><![CDATA[
	If '$IsObject(pProduction) {
		Quit
	}

	For i = 1:1:pProduction.Items.Count() {
		Set tItem = pProduction.Items.GetAt(i)
		Set tName = tItem.Name
		Set tHostType = $Case(tItem.BusinessType(),$$$eHostTypeProcess:"process",$$$eHostTypeService:"service",$$$eHostTypeOperation:"operation",:"unknown")

		// assume that if 2 items have same name, they are same host type!
		If (tName '= "") {
			Write "itemMap['", $ZCVT(tName,"O","JS"), "'] = '",tHostType,"';",!
		}
	}
]]></Implementation>
</Method>

<Method name="UpdateProduction">
<Description><![CDATA[
Save changes to model; it is passed
the current model (as an XML document) and applies the
model to the production.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProdId,xml</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		// create a new production using incoming xml
		Set tSC = ##Class(Ens.Util.XML.Reader).ObjectFromString(.tProduction,xml,"Ens.Config.Production")
		If $$$ISERR(tSC) {
			Quit
		}

		Do ##class(Ens.Config.Production).%DeleteId(pProdId)

		Set tProduction.Name = pProdId
		Set tSC = tProduction.%Save()

		If $$$ISOK(tSC) {
			#; update production class
			Set tSC = tProduction.SaveToClass()
		}

	} while (0)
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
 	Set tmsg = $$$TextJS("Error saving production")
 	&js<alert('#(tmsg)#: #($ZCVT($ZE,"O","JS"))#');>
	Goto Exit
]]></Implementation>
</Method>

<Method name="DeleteProduction">
<Description><![CDATA[
This method is called from the client; it deletes 
the specified production.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProdId</FormalSpec>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		// delete production
		Do ##class(Ens.Config.Production).%DeleteId(pProdId)

		// delete production class
		Do $System.OBJ.Delete(pProdId,"-d")

		// send browser back to production list
		&js<self.document.location = 'UtilEnsProductions.csp';>

	} while (0)
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
 	 Set tmsg = $$$TextJS("Error deleting production")
 	&js<alert('#(tmsg)#: #($ZCVT($ZE,"O","JS"))#');>
	Goto Exit
]]></Implementation>
</Method>

<Method name="EscapeHTML">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>text</FormalSpec>
<Implementation><![CDATA[$ZCVT(text,"O","HTML")
]]></Implementation>
</Method>
</Class>
</Export>