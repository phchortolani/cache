<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alISS.dUIssueRevLine">
<ClassType>persistent</ClassType>
<IncludeCode>COMSYS,INConst</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>User.INIssueRevLine</Super>
<LegacyInstanceContext>1</LegacyInstanceContext>


<Property name="objStatus">
<Type>alSYS.Status.dUStatus</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00271"/>
</Property>


<Property name="objDemand">
<Type>User.INDRPDEMAND</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00270"/>
</Property>


<Property name="IssueRev">
<Type>alISS.dUIssueRev</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00269"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<UDLText name="T">
<Content>/* 21-Dec-2010	shobby		SR17638:	 Moved from alISS.dUIssueRev			*/
</Content>
</UDLText>

<Query name="GetIssueRevLines">
<Type>%SQLQuery</Type>
<FormalSpec>pidIssueRev:%String</FormalSpec>
<SqlQuery>	SELECT %ID,DocumentNo FROM alISS.dUIssueRevLine WHERE (DocumentNo = :pidIssueRev)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="StatusSet">
<FormalSpec>Arg</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $IsObject(Arg) && Arg.%Extends("alSYS.Status.dUStatus") { 
		set i%objStatus = $$$NULLOREF
		set i%Status = Arg.StatusCode
	} elseif (Arg?.N1"||".A1"||".N) {
		set i%Status = $piece(Arg, "||", 3) ; hack, OID expected in this format "YM||ClassName||YKEY"
	} else {
		set i%Status = Arg
	} 
	quit $$$OK
]]></Implementation>
</Method>

<Method name="StatusGet">
<ReturnType>alSYS.Status.dUStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 25-Feb-2008	GRF		Corrected pairing of parentheses
	;-------------------------------------------------------------------------------
	;quit ##class(alSYS.Status.dUStatus).%OpenId("0||INReqLine||"_i%Status)
	if ((i%Status '= $$$NULLOREF) && (i%objStatus = "")) ||
	   ($IsObject(i%objStatus)   &&  (i%objStatus.StatusCode '= i%Status)) {
		set i%objStatus =  ##class(alSYS.Status.dUStatus).%OpenId("0||INReqLine||"_i%Status)
	}
	quit i%objStatus
]]></Implementation>
</Method>

<Method name="IssueRevSet">
<FormalSpec>objIss:alISS.dUIssueRev</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	; attempt to do auto swizzling as a relation
	set i%IssueRev = objIss
]]></Implementation>
</Method>

<Method name="IssueRevGet">
<ReturnType>alISS.dUIssueRev</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008 	HQN		SR15625 Changed class signature dREQ to dUReq
	;-------------------------------------------------------------------------------
	if (i%IssueRev = $$$NULLOREF) && (%this.DocumentNo '= "") {
		set i%IssueRev = ##class(alISS.dUIssueRev).%OpenId("0||"_%this.DocumentNo)
	}
	quit i%IssueRev
]]></Implementation>
</Method>

<Method name="FirmIssueRev">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Firm the Reversal - Create Movement Issues Reversals
	; 
	; History:
	; 30-Mar-2009	PPP	: Created
	;-------------------------------------------------------------------------------
	;
	set sc = %this.CreateMovement()
	if $$$ISOK(sc) {
		set %this.Status = 2		; Firmed
		set sc = %this.%Save()
	}
	quit sc
]]></Implementation>
</Method>

<Method name="CreateMovement">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 16-Dec-2014	SCR		ALPHAUP-427: Correction
	; 05-Dec-2014	SCR		ALPHAUP-427: Correction to ALPHAUP-328
	; 02-Dec-2014	SCR		ALPHAUP-328: Check for return from patient (No From Loc)
	; 18-Mar-2014	SCR		SESDF-1299: Handle no Issue
	; 18-Sep-2013	SCR		CORE-93: Issue on Line
	; 30-Mar-2009	PPP	: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set intRetType 	= %this.IssueRev.ReturnType
	set idIssue		= %this.Issue
	set bnlNI		= %this.IssueRev.ReturnwithoutIssue
	set idToLoc		= %this.IssueRev.ToLocn
	set idFromLoc	= %this.IssueRev.FromLocn
	if bnlNI {
		set idDeleteStorage	= $$$INVORGDeleteStockLocation($get(^INVORG(0,0,1)))
		if intRetType=2 {  ; Show From Storage if it is not a consumption location
			if idToLoc'="" {
				set objToLoc	= $get(^WWW0121(0,0,idToLoc,1))
				if '$$$WWW0121StorageLocn(objToLoc) {
					set %this.ToStorage	= idDeleteStorage
				}
			}
			set idIssueType=1
		} else {
			set idIssueType=3
		}
		set objFromLoc		= $get(^WWW0121(0,0,idFromLoc,1))
		if '$$$WWW0121StorageLocn(objFromLoc) {
			set %this.FromStorage	= idDeleteStorage
		}
		set %this.Bundle	= ..GetBundle(.sc).%Id()

		if $$$ISOK(sc) {
			set sc=..%Save()
		}

		
	} else {
		
		if idIssue'="" {
			set idIssueType = ##class(alISS.dUIssue).%OpenId("0||"_idIssue).Type ; Use Issue from the Line if it is not null
		} else {
			set idIssueType = %this.IssueRev.Issue.Type
		}
	}
	set objMove     = ##class(alDRP.dMovement).%New()
	
	if idIssueType = 3 {
		set objMove.MovementType = ##class(alDRP.dMovementType.DispenseToPatientReversal).%New()
			
	} else {
		set objMove.MovementType = ##class(alDRP.dMovementType.IssueReversal).%New()
	}

	
	// Covert to full V2 Objects via interfaces 
	set objMove.Item        = ##class(alINV.iUINV).GetItem(%this.ItemNo)
	
	//Reverse Locations for 'From'
	if idIssue'="" {
		set objFromLocn    = ##class(alLOC.iLOC).GetLocation(%this.ToLocation) ; Use To Location from Line if the Line Issue is not null
	} else {
		set objFromLocn    = ##class(alLOC.iLOC).GetLocation(%this.IssueRev.ToLocn)
	}
	if objFromLocn'=$$$NULLOREF {
		set objMove.FromLocn    = ##class(alLOC.iLOC).GetLocation(%this.IssueRev.ToLocn)
	}
	if (idIssueType '= 3) && (objFromLocn'=$$$NULLOREF) {
		set objMovFromStorage = ##class(alLOC.iLOC).GetStorage(objFromLocn.Code,%this.ToStorage)
		if objMovFromStorage'=$$$NULLOREF {
			set objMove.FromStorage	= objMovFromStorage
		}
			
	}
	set objMove.ToLocn      = ##class(alLOC.iLOC).GetLocation(%this.IssueRev.FromLocn)
	set objMove.ToStorage   = ##class(alLOC.iLOC).GetStorage(%this.IssueRev.FromLocn,%this.FromStorage)
 	set objMove.Bundle      = ##class(alSOH.dBundle).%OpenId(%this.Bundle)
 	; FIXME : should create bundle at receiving side
 	
 	//	set objMove.DueDate     = %this.                      ; Not Implemented yet
	set objMove.Reference   = %this.DocumentNo
	set objMove.LineNumber  = %this.ID1
	set objMove.QtyPicked   = 0
	set objMove.QtyReceived = %this.QuantityReturned
	set objMove.QtyRequired = 0
	set objMove.Supply      = ""
	set objMove.Demand      = ""
	set objMove.Completed   = $$$NO

	if $$$ISOK(sc) set sc = objMove.ChangeState(4)	
	
	quit sc
]]></Implementation>
</Method>

<Method name="GetBundle">
<FormalSpec>*sc:%Status</FormalSpec>
<ReturnType>alSOH.dBundle</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get Bundle attributes defined on the line
	; 
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	set idItem 	= %this.ItemNo
	set idLoc	= %this.IssueRev.FromLocn

	do GetAttributes^INItemPolicyUtils(idItem,.blnLotNo,.blnUseByDate,.blnLotUnique,.intBrand,.intOwner,.intProgram,idLoc)

	if blnLotNo  {
		set arrAttributes("Lot Number")  = %this.LotNumber
	}
	if blnUseByDate {
		set arrAttributes("Use By Date") = %this.ExpirationDate
	}

	//		NEW ATTRIBUTES BASED ON THE ITEM (values can be 1-Yes, 2-No, 3-Optional)
	if (intBrand=1) || (intBrand=3) {
		set arrAttributes("Brand")       = %this.Brand
	}
	if (intOwner=1) || (intOwner=3) {
		set arrAttributes("Owner")       = %this.Owner
	}
	if (intProgram=1) || (intProgram=3) {
		set arrAttributes("Program")     = %this.Program1
	}
	
	//Need to open the Item Number in V2 Object class (alINV.dItem), %this.Item is class alINV.dUItem
	//set objItem = ##class(alINV.dItem).%OpenId(%this.Item.ItemNumber,0)
	set objItem      = ##class(alINV.iUINV).GetItem(idItem,.sc)

	//Create a new bundle if required
	set blnDoNotCreate =$$$NO
	
	set sc = ##class(alSOH.iBundle).GetItemBundle(objItem,.arrAttributes,blnDoNotCreate,.objBundle,idLoc)
	if $$$ISOK(sc) {
		set sc=objBundle.%Save()
	}

	quit $get(objBundle)
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>

<Property name="Bundle"/>

<Property name="Company"/>

<Property name="Demand"/>

<Property name="DocumentNo"/>

<Property name="FREE01"/>

<Property name="FREE1"/>

<Property name="FREE2"/>

<Property name="FREE3"/>

<Property name="FREE4"/>

<Property name="FREE5"/>

<Property name="FREE6"/>

<Property name="FREE7"/>

<Property name="FREE8"/>

<Property name="FREE9"/>

<Property name="FromStorage"/>

<Property name="ID1"/>

<Property name="Issue"/>

<Property name="IssuedQuantity"/>

<Property name="ItemNo"/>

<Property name="QtyAlreadyRetrn"/>

<Property name="QtyConsumed"/>

<Property name="QuantityReturned"/>

<Property name="Reason"/>

<Property name="RefLine"/>

<Property name="Status"/>

<Property name="StockUnit"/>

<Property name="ToLocation"/>

<Property name="ToStorage"/>

<Property name="UnitCost"/>

<Property name="UnitQuantityReturned"/>
</Storage>
</Class>
</Export>