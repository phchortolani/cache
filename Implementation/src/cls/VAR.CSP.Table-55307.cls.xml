<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="VAR.CSP.Table">
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Property name="IDTable">
<Type>%String</Type>
<Required>1</Required>
</Property>


<Property name="IDContainer">
<Type>%String</Type>
<Required>1</Required>
</Property>


<Method name="%OnNew">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%New</METHOD> method to 
provide notification that a new instance of an object is being created.

<P>If this method returns an error then the object will not be created.
<p>It is passed the arguments provided in the %New call.
When customizing this method, override the arguments with whatever variables and types you expect to receive from %New().
For example, if you're going to call %New, passing 2 arguments, %OnNew's signature could be:
<p>Method %OnNew(dob as %Date = "", name as %Name = "") as %Status]]></Description>
<FormalSpec>pContainer:%String,pTable:%String</FormalSpec>
<Private>1</Private>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	do ..PrepareScript()

	set ..IDContainer = pContainer
	set ..IDTable = pTable
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="PrepareScript">
<Implementation><![CDATA[
	quit:(..IDTable="")
	
	&html<<script type="text/javascript">
	
    var insertLine = (function (table, pdata) {
        var lineModel = $(table).find("thead tr");
        lineModel = $(lineModel[lineModel.length - 1]).clone();
        lineModel.children().each(function (idx, item) {
	        if (pdata.data[idx]){
	            $(item)
	            	.removeAttr("class")
	            	.text("")
	            	.html(pdata.data[idx])
	            	.addClass(pdata.class)
	        }else {
	            $(item).removeAttr("class").html("").addClass(pdata.class)
		    }
        });
        
        lineModel.addClass(pdata.class)
        
        return $(table + " tbody").append(lineModel);
    });
    
    var insertColumn = (function (table,pData){
	    var headLine = $(table).find("thead tr");
	    var bodyLine = $(table).find("tbody tr");
	    
	    headLine.append("<th class='"+pData.header.class+"'>"+pData.header.data+"</th>");
	    
	    bodyLine.each(function (idx, item){
		    if (typeof(pData.data.data[idx]) == "undefined"){
			    //$(item).append("<td class='"+pData.class+"'>0</td>")  
			}else{
		    	$(item).append("<td class='"+pData.data.class+"'>"+pData.data.data[idx]+"</td>")  
			}
		})
	});
	
	var setCell = (function (table,line,column,data,pClass){
		var line = $(table).find("tbody tr")[line-1]
		$($(line).children()[column-1]).html(data).addClass(pClass)
	});
	
	var exportExcel = (function(){
		
		var fnExcelReport = (function (tableId,fileName) {
		   var tab_text = "<table border='2px'><tr bgcolor='#87AFC6'>";
		   var textRange;
		   var j = 0;
		   tab = document.getElementById(tableId); // id of table

		   for (j = 0; j < tab.rows.length; j++) {
		       tab_text = tab_text + tab.rows[j].innerHTML + "</tr>";
		   }

		   tab_text = tab_text + "</table>";
		   tab_text = tab_text.replace(/<A[^>]*>|<\/A>/g, ""); //remove if u want links in your table
		   tab_text = tab_text.replace(/<img[^>]*>/gi, ""); // remove if u want images in your table
		   tab_text = tab_text.replace(/<input[^>]*>|<\/input>/gi, ""); // reomves input params

		   var ua = window.navigator.userAgent;
		   var msie = ua.indexOf("MSIE ");

		   if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) // If Internet Explorer
		   {
		       txtArea1.document.open("txt/html", "replace");
		       txtArea1.document.write(tab_text);
		       txtArea1.document.close();
		       txtArea1.focus();
		       sa = txtArea1.document.execCommand("SaveAs", true, fileName+".xls");
		   } else //other browser not tested on IE 11
		       sa = window.open('data:application/vnd.ms-excel,' + encodeURIComponent(tab_text));
		   return (sa);
		 })

		
	})

	</script>>
	
	quit
]]></Implementation>
</Method>

<Method name="MakeTable">
<FormalSpec>pTableClass:%String="",pHeaderClass:%String="",pBodyClass:%String=""</FormalSpec>
<Implementation><![CDATA[
	new table, header, count
	
	set header = ""
	
	do ..PrepareScript()
	
	set Container = ..IDContainer
	
	set table = ""	
	set table = table_"<table id='"_..IDTable_"' class='"_pTableClass_"'> "
	set table = table_"    <thead><tr class='"_pHeaderClass_"'></tr></thead> "
	set table = table_"    <tbody "_pBodyClass_"> "
	set table = table_"    </tbody> "
	set table = table_"</table> "
	
	&html<<script type="text/javascript">
		var container = $("#"+"#(..IDContainer)#");
		var htmlTable = $("#(table)#");
		
		container.append(htmlTable);
	</script>>
	
	quit
]]></Implementation>
</Method>

<Method name="InsertColumn">
<FormalSpec>pHeader:%String="",pHeaderClass:%String="",pData="",pClassLine=""</FormalSpec>
<Implementation><![CDATA[
	set pData = ..ArrayToArrayJS(.pData)
		
	set pData = "{header:{data:'"_pHeader_"',class:'"_pHeaderClass_"'},data:{data:"_pData_",class:'"_pClassLine_"'}}"
		
	&html<<script type="text/javascript">
		insertColumn("#"+"#(..IDTable)#",#(pData)#)
	</script>>
]]></Implementation>
</Method>

<Method name="InsertLine">
<FormalSpec>pData,pClass:%String=""</FormalSpec>
<Implementation><![CDATA[
	set pData = ..ArrayToArrayJS(.pData)
		
	set pData = "{data:"_pData_",class:'"_pClass_"'}"
	
	&html<<script type="text/javascript">
		insertLine("#"+"#(..IDTable)#",#(pData)#)
	</script>>
]]></Implementation>
</Method>

<Method name="SetCell">
<FormalSpec>pLine:%String,pColumn:%String,pData:%String,pClass=""</FormalSpec>
<Implementation><![CDATA[
	&html<<script type="text/javascript">
		setCell("#"+"#(..IDTable)#",#(pLine)#,#(pColumn)#,'#(pData)#',"#(pClass)#")
	</script>>
]]></Implementation>
</Method>

<Method name="ArrayToArrayJS">
<FormalSpec>pArr</FormalSpec>
<Implementation><![CDATA[
	new Data
	
	set Data = "["
	
	set Val = ""
	for{set Val = $order(pArr(Val))
		quit:(Val="")
		set Data = Data_"'"_pArr(Val)_"'"
	}
	
	set Data = $replace(Data,"''","','")_"]"
	
	quit Data
]]></Implementation>
</Method>
</Class>
</Export>