<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alWEB.WS.Utils">
<Description><![CDATA[
Web Service Utility Programs]]></Description>
<ClassType/>
<IncludeCode>COMSYS,COMConst,INConst,WWWSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="XMLResult">
<Description><![CDATA[
####### DEPRECATED #######]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String,MsgSequenceNo:%Integer,StatusCode:%Boolean,MessageBody:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit ""  ;####### DEPRECATED #######
	/*
	//------------------------------------------------------------------------------
    // Hdistory:
    // 15-Jan-2008	FIS		put cache error into message body
    // 01-Nov-2007	FIS		Created
	//------------------------------------------------------------------------------
	if ($length(StatusCode) > 1) {
		set StatusCode = 0
		set MessageBody = $translate(##class(%Library.Status).LogicalToOdbc($get(StatusCode)),$char(9))
	}
	set retval = ..XMLResultStart($get(SessionId),$get(MsgSequenceNo),$get(StatusCode))
	set retval = retval_$get(MessageBody)
	set retval = retval_..XMLResultEnd()
	quit retval
	*/
]]></Implementation>
</Method>

<Method name="XMLResultStart">
<Description><![CDATA[
####### DEPRECATED #######]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String,MsgSequenceNo:%Integer,StatusCode:%Boolean</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit ""  ;####### DEPRECATED #######
	/*
	quit "<alResult Session="""_$get(SessionId)_""" Sequence="""_$get(MsgSequenceNo)_""">"_
			"<alStatus>"_$get(StatusCode)_"</alStatus>"_
			"<alMsgBody>"
	*/
]]></Implementation>
</Method>

<Method name="XMLResultEnd">
<Description><![CDATA[
####### DEPRECATED #######]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit ""  ;####### DEPRECATED #######
	//quit "</alMsgBody></alResult>"
]]></Implementation>
</Method>

<Method name="XMLResultStream">
<Description><![CDATA[
####### DEPRECATED #######]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String,MsgSequenceNo:%Integer,StatusCode:%Boolean,MessageBody:%String</FormalSpec>
<ReturnType>%BinaryStream</ReturnType>
<Implementation><![CDATA[
	quit ""  ;####### DEPRECATED #######
	/*
	set retval = ..XMLResultStart($get(SessionId),$get(MsgSequenceNo),$get(StatusCode))
	set retval = retval_$get(MessageBody)
	set retval = retval_..XMLResultEnd()
	quit retval
	*/
]]></Implementation>
</Method>

<Method name="WSResponse">
<Description><![CDATA[
####### DEPRECATED #######]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Status:%Status,TextCode:%String="&quot;,AppendText:%String="&quot;,Arg1:%String="&quot;,Arg2:%String="&quot;,Arg3:%String="&quot;</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit ""  ;####### DEPRECATED #######
	/*
	//ClassMethod WSResponse(Status As %Status, TextCode As %String = "", AppendText As %String = "", args...) As %String
	
	//------------------------------------------------------------------------------
    // Input:
    // Status     = 0/1
    // TextCode   = language text
    // AppendText = additional text to append
    // args...    = Arguments for Replacement (%1 -> arg)
    // 
    // History:
    // 25-Jan-2008	FIS		BR014564 Created
	//------------------------------------------------------------------------------
	//set strResult = +Status_"~"_TextCode_"# "_##class(%Library.MessageDictionary).FormatText(..LanguageText(TextCode),args...)  //needs Cache 2007
	set strResult = +Status_"~"_TextCode_"# "_$$DecodeError^COMUtilError($listbuild(TextCode,Arg1,Arg2,Arg3))
	if (AppendText '= "") {
		set strResult = strResult_" "_AppendText
	}
	quit strResult
	*/
]]></Implementation>
</Method>

<Method name="DecomposeStatus">
<Description><![CDATA[
####### DEPRECATED #######]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Status:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit ""  ;####### DEPRECATED #######
	/*
	//------------------------------------------------------------------------------
	// Catch Cache Errors and make them WS Response Messages
	//
    // History:
    // 25-Jan-2008	FIS		BR014564 Created
	//------------------------------------------------------------------------------
	
	if 'Status && ('$find(Status,"~")) {
		set Status = +Status_"~"_$translate(##class(%Library.Status).LogicalToOdbc(Status),$char(9))
	}
	quit Status
	*/
]]></Implementation>
</Method>

<Method name="LanguageText">
<Description><![CDATA[
Decompose Status]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TextCode:%String="&quot;,Arg1:%String="&quot;,Arg2:%String="&quot;,Arg3:%String="&quot;</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
    // Central point for text converting to make replacemant easier
    // 
    // History:
    // 25-Jan-2008	FIS		BR014564 Created
	//------------------------------------------------------------------------------
	quit $$DecodeError^COMUtilError($listbuild(TextCode,Arg1,Arg2,Arg3))
	//quit $$^WWWTEXT(TextCode)
]]></Implementation>
</Method>

<Method name="ExecuteCall">
<Description><![CDATA[
Execute Function Call Outside Procedure Block]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrExec:%String,objResponse:alWEB.WSResult.UniversalResult</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//---------------------------------------------------------
    // Leave Object Frame Stack and Execute MAC code
    // 
    // set strStatus = ..ExecuteCall("Label^Routine(args...)")
    // 					-> no Response Reference
    // 					
    // set strStatus = ..ExecuteCall("Label^Routine(.strResponse,args...)",objResponse)
    // 					-> Response as String (alWEB.WSResult.UniversalResult).ReturnValue
    // 					
    // set strStatus = ..ExecuteCall("Label^Routine(.arrResponse,args...)",objResponse)
    // 					-> Response as Array (alWEB.WSResult.UniversalResult).ReturnArray
    // 
    // History:
    // 01-Oct-2008	FIS		SRBR014564: Created
    // --------------------------------------------------------
	
	new (pstrExec,objResponse)  //clear frame stack
	
	//vvvvvvvvvv  set environment parameter for @net Manager
	// TO BE REPLACED BY NEW V1 -> V2 ENVIRONMENT SETTING
	set %("%KEY","YBED") = "WEBSERVICE"
	set %("%KEY","YPWD") = $piece($get(^WWW013(0,"WEBSERVICE",1)),"~",2)
	set %("%KEY","YM")   = 0
	do ^WWWVAR
	//^^^^^^^^^^
	;set $ztrap = "ExecuteError"  //not required using COMTransaction
	
	//call function
	set strStatus = $$Transaction^COMTransaction(pstrExec, $$$NO)
	if $find(pstrExec,".strResponse") && (objResponse '= "") {
		set objResponse.ReturnValue = strResponse
	
	} elseif $find(pstrExec,".arrResponse") && (objResponse '= "") {
		;merge objResponse.ReturnArray = arrResponse
		set strLoop = "arrResponse("""")"
		for {
			set strLoop=$query(@strLoop)
			quit:strLoop=""
			
			do objResponse.ReturnArray.SetAt(@strLoop,$piece($piece(strLoop,"(",2),")",1))
		}
	}
	
	if $extract(strStatus,1,2)="0~" {
		set strStatus = $$$MakeStatus($extract(strStatus,3,$length(strStatus)))
	}
	quit strStatus
	
ExecuteError
	new strStatus
	
	set strStatus = $$$MakeStatus("#IN00825: "_$$$Text("IN00825")_": "_$zerror) ;Internal Error
	set $zerror=""
	quit strStatus
]]></Implementation>
</Method>

<Method name="ExecuteCommand">
<Description><![CDATA[
Execute Comand Outside Procedure Block]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCommand:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//---------------------------------------------------------
    // Leave Object Frame Stack and Execute COS code
    // 
    // Returns:
    // 	strStatus as:	Status or as Command Result (Overwrite)
    // 					i.e. Command: set strStatus=$$...
    // 
    // History:
    // 09-Oct-2008	FIS		SRBR014564: Created
    // --------------------------------------------------------
	
	new (pstrCommand)  //clear frame stack
	
	//vvvvvvvvvv  set environment parameter for @net Manager
	// TO BE REPLACED BY NEW V1 -> V2 ENVIRONMENT SETTING
	set %("%KEY","YBED") = "WEBSERVICE"
	set %("%KEY","YPWD") = $piece($get(^WWW013(0,"WEBSERVICE",1)),"~",2)
	set %("%KEY","YM")   = 0
	do ^WWWVAR
	//^^^^^^^^^^
	;set $ztrap = "CommandError"
	
	set strStatus = ""
	
	//execute command
	if (pstrCommand '="" ) {
		xecute pstrCommand
	}
	
	quit strStatus
	
CommandError
	new strStatus
	set strStatus = ""  ;$$$MakeStatus("#IN00825: "_$$$Text("IN00825")_": "_$zerror) ;Internal Error
	set $zerror=""
	quit strStatus
]]></Implementation>
</Method>

<Method name="ResultError">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrStatus</FormalSpec>
<ReturnType>%SOAP.Fault</ReturnType>
<Implementation><![CDATA[
	//---------------------------------------------------------
    // Handle Error and return SOAP fault
    // 
    // Parameters:
    // 		pstrStatus = Status Code 
    // 						- Alphalinc Error Status ($$$MakeStatus())
    // 						- Or CachÃ© Error ($system.OBJ.Error)
    // 						
    // 		pstrFaultCode =	Error Identifier
    // 						- $$$FAULTClient ? Client made an incorrect/incomplete request
    // 						- $$$FAULTServer ? Server side error
    // 						
    // History:
    // 01-Oct-2008	FIS		SRBR014564: Created
    // 
    // --------------------------------------------------------
    // Example Code How To Handle Fault Error in Soap Client:
    // 
    // ClassMethod GetSOHQty(idItem As %String, ...)
    // {
	// 		set $ZTRAP = "SOAPError"
	//  	set strService = ##class(alWEB.WS.ConsumptionSoap).%New()
	// 		set objResult  = strService.GetLocQtyDtl(...,idItem,...)
	// 		set fltQty     = objResult.TotalQty
	// 		quit fltQty
	// 
	// SOAPError
	// 		set $ZTRAP = ""
	// 		if $ZE["<ZSOAP>" {
	// 			do $System.OBJ.DisplayError(%objlasterror)
	// 			quit 1
	// 		}
	// }	
    // 
	//---------------------------------------------------------

	set objFault = ##class(%SOAP.Fault).%New()
	set objFault.faultcode = "SOAP-ENV:Client"  //$$$FAULTClient
	
	if ($extract(pstrStatus,1,2) = $$$ErrorPrefix) {
		set objFault.faultstring = "Application Error"
		set objFault.detail = $$DecodeError^COMUtilError(pstrStatus)  //Alphalinc Error
		if $$IsList^COMUtils(objFault.detail) {  //CachÃ© Error
			set objFault.faultcode   = "SOAP-ENV:Server"  //$$$FAULTServer
			set objFault.faultstring = "Runtime Error"
			set objFault.detail      = $translate(##class(%Library.Status).LogicalToOdbc(pstrStatus),$char(9))
		}
	
	} else {
		set objFault.faultstring = "Application Info"
		set objFault.detail      = pstrStatus
		if objFault.detail = "0" {
			set objFault.detail = "UNKNOWN ERROR"
		}
	}
	
	if ($extract(objFault.detail,1,7) '= "ERROR #") {
		if $extract(objFault.detail)="#" {
			set objFault.detail = "ERROR "_objFault.detail
		} else {
			set objFault.detail = "ERROR #0000: "_objFault.detail
		}
	}
	
	set strNamespace = "http://tempuri.org"
	if ##class(%Dictionary.ParameterDefinition).%ExistsId("alWEB.WS.Consumption||NAMESPACE") {
		set strNamespace = ##class(%Dictionary.ParameterDefinition).%OpenId("alWEB.WS.Consumption||NAMESPACE").Default
	}
	set objFault.detail = "<error xmlns="""_strNamespace_"""><text>"_$translate(objFault.detail,"<>","{}")_"</text></error>"
	quit ..LogError(objFault)
]]></Implementation>
</Method>

<Method name="LogError">
<ClassMethod>1</ClassMethod>
<FormalSpec>objFault:%SOAP.Fault</FormalSpec>
<ReturnType>%SOAP.Fault</ReturnType>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
	//
	// History:
	// 01-Aug-2010	shobby	SR17504: Improve logging of item number in header.
	// 26-Mar-2009	shobby	SR16451: Add more session info.
	// 03-Mar-2009	DavidR	SR16385: check if password has been passed in and overwrite
	// 							it with "****" this stops people form accessing other
	// 							peoples passwords. modified the log to match basic result.
	// 25-Feb-2009	DavidR	SR16385: store error logging in @NM persistnet class to enable
	// 							the tracking of historical logs. CaheTempWSLog is 
	// 							cleared constantly, losing all log data.this sets the
	// 							error log piece in WWWWSLog to enable the searching
	// 							for error logs only.
	// 							
	// 							Removed ^CacheTempWSLog entries
	//------------------------------------------------------------------------------ 
	if (objFault '= $$$NULLOREF) {
		set fltStarted = $zh
		set idWSLog   = $$^WWWNEXT("WWWWSLog")
		set objWSLog  = $get(^WWWWSLog(0,idWSLog,1))
		
		set strErrInfo = $select(objFault.faultstring'="":objFault.faultstring,1:"Unknown Error")
		set strErrText = $piece($piece(objFault.detail,"<text>",2),"</text>",1)
		
		set $$$WWWWSLogResponse(objWSLog)    =  strErrInfo_": "_strErrText
		set $$$WWWWSLogMsgReceived(objWSLog) = $horolog
		set $$$WWWWSLogErrorLog(objWSLog)    = $$$YES
		
		if ($get(%session) '= "") {
			set $$$WWWWSLogRemoteAddr(objWSLog) = $get(%request.CgiEnvs("REMOTE_ADDR"))
			
			set strParam=""
			/*for {
				set strParam=$order(%request.Data(strParam))
				quit:strParam=""
							
				set objWSParamI = ""
				set $$$WWWWSLogParamOValue1(objWSParamI) =$get(%request.Data(strParam,1))
				set strStatus = $$$Save("WWWWSLogParamI",idWSLog_$$$COMMA_strParam,objWSParamI,1)
				
				if (strParam = "LocationId") {
					set $$$WWWWSLogLocation(objWSLog)  = $get(%request.Data(strParam,1))
				}
				
				if (strParam = "ItemNumber"){
					set $$$WWWWSLogItemNumber(objWSLog)= $get(%request.Data(strParam,1))
				}
			
				if (strParam = "SessionId") {
					set $$$WWWWSLogSessionID(objWSLog) = $get(%request.Data(strParam,1))
					
					set objSession = ##class(alWEB.WS.Session).%OpenId($get(%request.Data(strParam,1)))
					if (objSession '= "") {
						set $$$WWWWSLogClientID(objWSLog) = objSession.ClientIdent 
						set $$$WWWWSLogUserID(objWSLog)   = objSession.UserIdent
						set $$$WWWWSLogMsgSeqNo(objWSLog) = objSession.MsgSequenceNo
						
						
					}
				}
			}*/
		set $$$WWWWSLogSessionID(objWSLog) = $get(%request.Data("SessionId",1))
		do ##class(alWEB.WSResult.BasicResult).AddSessionInfo(.objWSLog,$$$WWWWSLogSessionID(objWSLog)) ;SR16451
		for {
			set strParam=$order(%request.Data(strParam))
			quit:strParam=""
			
			set objWSParamI ="" ; $get(^WWWWSLogParamI(0,idWSLog,strParam,1))

			set $$$WWWWSLogParamIValue1(objWSParamI) = $get(%request.Data(strParam,1))
			
			; overwrite the password with a default hidden characters string
			if (strParam = "Password"){
				set objWSParamI = $get(%request.Data(strParam,1))
				set $piece(objWSParamI,1-99)= "****" 
			}
			;set strStatus = $$$Save("WWWWSLogParamI",idWSLog_$$$COMMA_strParam,objWSParamI,1)
			
			if (strParam = "LocationId") {
					set $$$WWWWSLogLocation(objWSLog)  = $get(%request.Data(strParam,1))
			}
				
			if (strParam = "ItemNumber"){
				if $$$WWWWSLogItemNumber(objWSLog)="" set $$$WWWWSLogItemNumber(objWSLog)= $get(%request.Data(strParam,1)) ;SR17504
			}
				;if there is no Session ID in the header already, check for parameter to populate			
			;if (strParam = "SessionId") && ($$$WWWWSLogSessionID(objWSLog)=$$$NULLOREF) {   ;16451
			;	set $$$WWWWSLogSessionID(objWSLog) = $get(%request.Data(strParam,1))
			;	do ##class(alWEB.WSResult.BasicResult).AddSessionInfo(.objWSLog,$$$WWWWSLogSessionID(objWSLog)) ;SR16451
			;}
				;if there is no method in the header already, check for parameter to populate			
			if (strParam = "soap_method") && ($$$WWWWSLogMethodName(objWSLog)=""){
					set $$$WWWWSLogMethodName(objWSLog) = $get(%request.Data(strParam,1))
			}
			if (strParam = "MethodName") && ($$$WWWWSLogMethodName(objWSLog)=""){			;16451
					set $$$WWWWSLogMethodName(objWSLog) = $get(%request.Data(strParam,1))
			}
				;if there is no Client Id in header, check for parameter to pass in
			if (strParam = "ClientIdent") && ($$$WWWWSLogClientID(objWSLog)=""){
					set $$$WWWWSLogClientID(objWSLog) = $get(%request.Data(strParam,1))
			}
			if (strParam = "UserIdent") && ($$$WWWWSLogUserID(objWSLog)=""){
					set $$$WWWWSLogUserID(objWSLog) = $get(%request.Data(strParam,1))
			}
			if (strParam="DemandId") {
				;SR17504
				do ##class(alWEB.WSResult.BasicResult).AddItemNumber(.objWSLog,$get(%request.Data("LocationId",1)),$get(%request.Data("DemandId",1)))
			}
			set strStatus = $$$Save("WWWWSLogParamI",idWSLog_$$$COMMA_strParam,objWSParamI,1)
		}
		set $$$WWWWSLogDuration(objWSLog) = $zh - fltStarted
		set strStatus = $$$Save("WWWWSLog",idWSLog,objWSLog,1)
		}
	quit objFault
	}
]]></Implementation>
</Method>

<Method name="ConvertOdbcToLogical">
<ClassMethod>1</ClassMethod>
<FormalSpec>pdteDate:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------ 
	// History:
	// 07-Jul-2009	DWR		SR16642: copied here from alWEB.WS.Consumption
	//------------------------------------------------------------------------------ 
	set strStatus = $$$OK
	set dteDate   = ##class(%Library.Date).OdbcToLogical(pdteDate)
	
	if 'dteDate && (dteDate'="") {  //invalid date
		set strStatus = $$$MakeStatus("#alW00001: "_$$$Text($listbuild("alW00001",pdteDate)))
	 ; "Invalid due date or format (use ODBC format 'YYYY-MM-DD')"
	
	} else {
		set pdteDate = dteDate
	}
	quit strStatus
]]></Implementation>
</Method>
</Class>
</Export>