<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSAL.iSAL">
<Abstract>1</Abstract>
<ClassType/>
<IncludeCode>%occInclude</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>

<Method name="GetQtyPlanned">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLocation:alLOC.dLocation="&quot;,pidStorage:alLOC.dStorage="&quot;,pblnExclBlocked=1</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	; Gets dPlannedMovement of type Sale:0
	; 13-Oct-2008	HQN	SR16024: Created Copied and extended upon alSOH.iSOHQty::GetQtyPlanned()
	set fltQtyPlanned = 0
	set lstMovementTypeId = $lb(0)
	if pidLocation = "" {
		if pblnExclBlocked {
			; 13-Oct-2008 vvvv
			&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned 
				FROM alDRP.dPlannedMovement
				WHERE
					Item=:pidItem AND
					State->StateId=3 AND
					(FromStorage->StorageIsBlocked = 0 OR FromStorage->StorageIsBlocked IS NULL) AND
					(FromStorage->Physical->StorageIsBlocked = 0 OR FromStorage->Physical->StorageIsBlocked IS NULL) AND
					(ToStorage->StorageIsBlocked = 0 OR ToStorage->StorageIsBlocked IS NULL) AND
					(ToStorage->Physical->StorageIsBlocked = 0 OR ToStorage->Physical->StorageIsBlocked IS NULL) AND
					MovementType_MovementTypeId=:lstMovementTypeId
				)
			; 13-Oct-2008 ^^^^
		} else {
			&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned
				FROM alDRP.dPlannedMovement 
				WHERE 
					Item=:pidItem AND
					State->StateId=3 AND
					MovementType_MovementTypeId=:lstMovementTypeId
			)
		}
	} else {
		if pblnExclBlocked {
			if pidStorage = "" {
				&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned
					FROM alDRP.dPlannedMovement 
					WHERE 
						Item=:pidItem AND
						(FromStorage->StorageIsBlocked = 0 OR FromStorage->StorageIsBlocked IS NULL) AND 
						(FromStorage->Physical->StorageIsBlocked = 0 OR FromStorage->Physical->StorageIsBlocked IS NULL) AND
						(ToStorage->StorageIsBlocked = 0 OR ToStorage->StorageIsBlocked IS NULL) AND 
						(ToStorage->Physical->StorageIsBlocked = 0 OR ToStorage->Physical->StorageIsBlocked IS NULL) AND 
						FromLocn=:pidLocation AND
						State->StateId=3 AND
						MovementType_MovementTypeId=:lstMovementTypeId
				)
			} else {
				&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned
					FROM alDRP.dPlannedMovement 
					WHERE 
						Item=:pidItem AND
						FromStorage=:pidStorage AND
						(FromStorage->StorageIsBlocked = 0 OR FromStorage->StorageIsBlocked IS NULL) AND 
						(FromStorage->Physical->StorageIsBlocked = 0 OR FromStorage->Physical->StorageIsBlocked IS NULL) AND 
						(ToStorage->StorageIsBlocked = 0 OR ToStorage->StorageIsBlocked IS NULL) AND 
						(ToStorage->Physical->StorageIsBlocked = 0 OR ToStorage->Physical->StorageIsBlocked IS NULL) AND 
						FromLocn=:pidLocation AND
						State->StateId=3 AND
						MovementType_MovementTypeId=:lstMovementTypeId
				)
			}
		} else {
			if pidStorage = "" {
				&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned
					FROM alDRP.dPlannedMovement 
					WHERE 
						Item=:pidItem AND
						FromLocn=:pidLocation AND
						State->StateId=3 AND
						MovementType_MovementTypeId=:lstMovementTypeId
				)
			} else {
				&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned
					FROM alDRP.dPlannedMovement 
					WHERE 
						Item=:pidItem AND
						FromStorage=:pidStorage AND
						FromLocn=:pidLocation AND
						State->StateId=3 AND
						MovementType_MovementTypeId=:lstMovementTypeId
				)
			}
		}
	}
	quit fltQtyPlanned
]]></Implementation>
</Method>
</Class>
</Export>