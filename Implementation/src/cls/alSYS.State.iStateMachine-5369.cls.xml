<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSYS.State.iStateMachine">
<ClassType>persistent</ClassType>
<Super>%Persistent</Super>

<Property name="State">
<Type>alSYS.State.dState</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00278"/>
</Property>


<Property name="States">
<Type>alSYS.State.dState</Type>
<Calculated>1</Calculated>
<Collection>array</Collection>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00279"/>
</Property>


<Method name="ChangeState">
<Final>1</Final>
<FormalSpec>StateId:%Numeric</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 04-Apr-2014	SCR		SESDF-1189: Removed Transaction Proccessing, This should be done at a highter level.
	; 01-Aug-2008	HQN		SR15818: Only worry about concurrency if opened, not newed
	; 30-Jul-2008	HQN 	SR15818: Upgrade concurrency for this state change
	; 31-Mar-2008	HQN		Corrected to use Cache object errors instead of $lb
	; 28-Mar-2008	HQN		Made Final
	;-------------------------------------------------------------------------------

	set sc = $$$OK
	set objState = %this.States.GetAt(StateId)
	quit:(objState = %this.State) $$$OK         ; States same, no action
	
	
	if objState = $$$NULLOREF {
		set sc = $system.Status.Error(5001,"Invalid StateId entered")
	}
	if $$$ISOK(sc) {
		set sc = objState.IsValid()
	}
	
	if $$$ISOK(sc) {
		set:%this.%Id()'="" sc = %this.%UpgradeConcurrency(4) ; SR15818 HQN 01-Aug-2008
	}
	
	if $$$ISOK(sc) {
		if $$$ISOK(%this.State.NextStates.FindObjectId(objState.%Id())) {
			
		;+++++++++++++++++++++++++++++++++++
			;tstart
			set sc = objState.OnStateChange()
			;if $$$ISOK(sc) {
			;	tcommit:($tlevel > 0)
			;} else {
			;	trollback
			;}
			
		;+++++++++++++++++++++++++++++++++++
		} else {
			set sc = $system.Status.Error(5001,"Current State:"_%this.State.StateId_" unable to change to State: "_StateId)
		}
	}
	if $$$ISOK(sc) {
		set %this.State = objState
		set sc = %this.%Save()
		;set defaultConcurrency = @%this.%GetParameter("DEFAULTCONCURRENCY")
		;do %this.%DowngradeConcurrency(defaultConcurrency)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="StatesGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$ERROR($$$MethodNotImplemented,"alSYS.State.iStateMachine::StatesGet")
]]></Implementation>
</Method>

<Method name="InsertPath">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>objState:alSYS.State.dState,objFromState:alSYS.State.dState,objToState:alSYS.State.dState</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 28-Mar-2008	HQN	Made Final
	; 					Added and commented alternative way to do the same
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	;+++++++++++++++++++++++++++++++++++++++
	tstart
	;+++++++++++++++++++++++++++++++++++++++
	
	; do objFromState.SetNext(objState)
	; do objState.SetNext(objToState)
	do objState.NextStates.SetAt(objToState, objToState.StateId)
	do objState.PrevStates.SetAt(objFromState, objFromState.StateId)
	do objFromState.NextStates.RemoveAt(objToState.StateId)
	do objToState.PrevStates.RemoveAt(objFromState.StateId)
	do objFromState.NextStates.SetAt(objState, objState.StateId)
	do objToState.PrevStates.SetAt(objState, objState.StateId)
	set:($$$ISOK(sc)) sc = objFromState.%Save()
	set:($$$ISOK(sc)) sc = objToState.%Save()
	set:($$$ISOK(sc)) sc = objState.%Save()
	
	;+++++++++++++++++++++++++++++++++++++++
	if $$$ISOK(sc) {
		tcommit:($tlevel > 0)
	} else {
		trollback
	}
	;+++++++++++++++++++++++++++++++++++++++
	quit sc
]]></Implementation>
</Method>

<Method name="RemovePath">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>objState:alSYS.State.dState,objFromState:alSYS.State.dState,objToState:alSYS.State.dState</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 28-Mar-2008	HQN	Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	;+++++++++++++++++++++++++++++++++++++++
	tstart
	;+++++++++++++++++++++++++++++++++++++++
	do objFromState.NextStates.RemoveAt(objToState.StateId)
	do objToState.PrevStates.RemoveAt(objFromState.StateId)
	set:$$$ISOK(sc) sc = objFromState.%Save()
	set:$$$ISOK(sc) sc = objToState.%Save()
	
	;+++++++++++++++++++++++++++++++++++++++
	if $$$ISOK(sc) {
		tcommit:($tlevel > 0)
	} else {
		trollback
	}
	;+++++++++++++++++++++++++++++++++++++++
	quit sc
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^alSYS.State.iStateMachineD</DataLocation>
<DefaultData>iStateMachineDefaultData</DefaultData>
<IdLocation>^alSYS.State.iStateMachineD</IdLocation>
<IndexLocation>^alSYS.State.iStateMachineI</IndexLocation>
<StreamLocation>^alSYS.State.iStateMachineS</StreamLocation>
<Data name="iStateMachineDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>State</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>