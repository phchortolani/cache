<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.CSP.VARImportarArquivo">
<ClassType/>
<IncludeCode>MEDConst,VARConst,INConst,WWWConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page</Super>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	$$$VAR
	Set method = $get(%request.Data("method",1))
	Xecute "do .."_method_"()"
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetDescConfiguracao">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodConfiguracao</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"
	Set descConfiguracao = ""
	If (pCodConfiguracao = "") Return descConfiguracao
	Set descConfiguracao = $$$VARImportarConfigDescricao($Get(^VARImportarConfig(YM,pCodConfiguracao,1)))
	Return descConfiguracao]]></Implementation>
</Method>

<Method name="GetDelimitador">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodConfiguracao</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"
	Set codDelimitadorOrigem = ""
	Set delimitadorOrigem = ";"
	If (pCodConfiguracao = "") Return delimitadorOrigem
	Set codDelimitadorOrigem = $$$VARImportarConfigDelimitadorOrigem($Get(^VARImportarConfig(YM,pCodConfiguracao,1)))
	Set delimitadorOrigem = $Piece(##Class(User.Search.PesquisasJson).GetDescricaoVARPARA("DELIMITADORCAMPOS", codDelimitadorOrigem),"- ",2)
	Return delimitadorOrigem]]></Implementation>
</Method>

<Method name="LimparImportacao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"
	
	Set YBED = $Get(%request.Data("YBED",1))

	Kill ^mtemp.ImportacaoControle(YM, YBED)
	
	Return $$$OK]]></Implementation>
</Method>

<Method name="ControleImportacao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"
	;
	Set YBED = $Get(%request.Data("YBED",1))
	;
	Set listRetorno = {}
	;
	If ('$Data(^mtemp.ImportacaoControle(YM, YBED))) {
		Set listRetorno.status = 0
	}Else{
		Set codImportacao = $Piece(^mtemp.ImportacaoControle(YM, YBED, 1),Y,2)
		Set listRetorno.status 				= $Piece(^mtemp.ImportacaoControle(YM, YBED, 1),Y,1)
		Set listRetorno.codImportacao = codImportacao
		Set listRetorno.podeImportar	= 0
		Set listRetorno.mensagem			= ""
		If (listRetorno.status = 2) {
			If ('$Data(^VARImportarArquivoCritica(YM,codImportacao))) {
				Set listRetorno.mensagem = "Dados validados e pronto para importação."
				Set listRetorno.podeImportar	= 1
			}Else{
				Set listRetorno.mensagem = "Dados com problema na validação."
			}	
		}
		If (listRetorno.status = 3) {
			Set listRetorno.mensagem = "Importação concluída."
		}
	}
	;
	Do listRetorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="ProcessarArquivo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 			= 0
	Set Y 			= "~"
	;
	Set YBED 								= $Get(%request.Data("YBED",1))
	Set pNomeArquivo 				= $Get(%request.Data("pNomeArquivo",1))
	Set pImpCodConfiguracao = $Get(%request.Data("pImpCodConfiguracao",1))
	;
	Set modulo 	= $$$VARImportarConfigDiretorioUpload($Get(^VARImportarConfig(YM,pImpCodConfiguracao,1)))
	;
	If ($Data(^mtemp.ImportacaoControle(YM, YBED, 1)) && ($Piece(^mtemp.ImportacaoControle(YM, YBED, 1),Y,1) < 6)) {
		Set codImportacao = $Piece(^mtemp.ImportacaoControle(YM, YBED, 1),Y,2)
	}Else{
		Set codImportacao 	= $$^WWWNEXT("VARImportarArquivo")
	}
	Set xCodImportacao 	= $Replace(codImportacao,"/","_")
	Set objVARImportarArquivo = ""
	;
	Set dnameDe 	= $$GetDiretorioFisico^VARBRDiretorios(YM, modulo)
	Set dnamePara = $$GetDiretorioFisico^VARBRDiretorios(YM, modulo)
	If ($Extract(dnameDe, $length(dnameDe)) '= "\") {
		Set dnameDe 	= dnameDe _ "\"
		Set dnamePara = dnamePara _ "\"
	}
	Set dnameDe 	= dnameDe _ YBED _ "\"
	Set dnamePara = dnamePara _ xCodImportacao _ "\"
	If ($$$isWINDOWS) {
		Set dnameDe = $Replace(dnameDe,"/","\")
		Set dnamePara = $Replace(dnamePara,"/","\")
	}Else{
		Set dnameDe = $Replace(dnameDe,"\","/")
		Set dnamePara = $Replace(dnamePara,"\","/")
	}	
	If ('##class(%File).DirectoryExists(dnamePara)) {
		Do ##class(%File).CreateDirectoryChain(dnamePara)
	}
	If (##class(%File).Exists(dnameDe_pNomeArquivo)){
		Do ##class(%File).CopyFile(dnameDe_pNomeArquivo, dnamePara_pNomeArquivo, 1)
		Do ##class(%File).Delete(dnameDe_pNomeArquivo)
	}	
	;
	Set $$$VARImportarArquivoCodConfiguracao(objVARImportarArquivo) = pImpCodConfiguracao
	Set $$$VARImportarArquivoNomeArquivo(objVARImportarArquivo) 		= pNomeArquivo
	Set $$$VARImportarArquivoCriadoEm(objVARImportarArquivo) 				= $Horolog
	Set $$$VARImportarArquivoCriadoPor(objVARImportarArquivo) 			= YBED
	Set $$$VARImportarArquivoAlteradoEm(objVARImportarArquivo) 			= $Horolog
	Set $$$VARImportarArquivoAlteradoPor(objVARImportarArquivo) 		= YBED
	Set strStatus = $$$Save("VARImportarArquivo", codImportacao, objVARImportarArquivo, $$$YES)
	If ('$$$ISERR(strStatus)) {
		Do CarregarArquivoOrigem^VARImportarArquivo(codImportacao) 
		Set $Piece(^mtemp.ImportacaoControle(YM, YBED, 1),Y,1) = strStatus
		Set $Piece(^mtemp.ImportacaoControle(YM, YBED, 1),Y,2) = codImportacao
		Set $Piece(^mtemp.ImportacaoControle(YM, YBED, 1),Y,3) = $Horolog
	}
	;
	Return $$$OK]]></Implementation>
</Method>

<Method name="ListarArquivo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 			= 0
	Set Y 			= "~"
	;
	Set YBED 								= $Get(%request.Data("YBED",1))
	Set pImpCodConfiguracao = $Get(%request.Data("pImpCodConfiguracao",1))
	Set pCodImportacao			= $Get(%request.Data("pCodImportacao",1))
	
	Set objConfiguracao = $Get(^VARImportarConfig(YM,pImpCodConfiguracao,1))
  	Set primeiraLinha 	= $$$VARImportarConfigPrimeiraLinhaCabecalho(objConfiguracao)
	Set dadosLinha    	= $Get(^VARImportarArquivoOrigem(YM,pCodImportacao,1,1))
	Set qtdeCampos    	= $Length(dadosLinha,Y)

	Set arrayColuna = []
	Set arrayDados	= []

	Set list	= {}
	Set list.dataField 		= "linha"
	Set list.caption 	 		= "Linha do Arquivo"
	Set list.width 	 			= "70"
	Set list.dataType			= "number"
	Set list.allowEditing = 0
	Do arrayColuna.%Push(list)

	;Faz o FOR de acordo com a quantidade de campos da global
	For count = 1 : 1 : qtdeCampos {
		Set list	= {}
		Set list.dataField = "coluna"_count
		Set list.minWidth  = "120"
		;Indica se a 1a Linha Contém o Cabeçalho da Tabela
		If (primeiraLinha = 1) {
			Set list.caption = $Replace($Piece(dadosLinha,Y,count),"""","")
		}Else{
			Set list.caption = "coluna "_count
		}
		Do arrayColuna.%Push(list)
	}

	Set idLinha = ""
	For {
		Set idLinha = $Order(^VARImportarArquivoOrigem(YM,pCodImportacao,idLinha))
		Quit:idLinha=""

		;Indica se a 1a Linha Contém o Cabeçalho da Tabela
		If (primeiraLinha = 1 && (idLinha=1)){
			Continue
		}
		Set dadosLinha = $G(^VARImportarArquivoOrigem(YM,pCodImportacao,idLinha,1))
		Set list = {}
		Do list.%Set("linha", idLinha)
		;Faz o FOR de acordo com a quantidade de campos da global
		For count = 1 : 1 : qtdeCampos {
			Do list.%Set("coluna"_count, $Piece(dadosLinha,Y,count))
		}
		Do arrayDados.%Push(list)
	}
		
  Set listRetorno = {}
  Set listRetorno.Colunas = arrayColuna  
  Set listRetorno.Dados 	= arrayDados  
    
  Do listRetorno.%ToJSON()
    
	Return $$$OK]]></Implementation>
</Method>

<Method name="AtualizarArquivoOrigem">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodImportacao,pLinha,pColuna,pValor,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y 		= "~"
	Set YBED	= pYBED
	
	Set pColuna = $Replace(pColuna,"coluna","")
	
	Set objVARImportarArquivoOrigem = $Get(^VARImportarArquivoOrigem(YM,pCodImportacao,pLinha,1))
	Set $Piece(objVARImportarArquivoOrigem,Y,pColuna) = pValor
	Return $$$Save("VARImportarArquivoOrigem", pCodImportacao_$$$COMMA_pLinha, objVARImportarArquivoOrigem, $$$YES)]]></Implementation>
</Method>

<Method name="RemoverLinhaArquivoOrigem">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodImportacao,pLinha,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y 		= "~"
	Set YBED	= pYBED

	Return $$$Kill("VARImportarArquivoOrigem", pCodImportacao_$$$COMMA_pLinha)]]></Implementation>
</Method>

<Method name="PrepararImportacao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y 		= "~"
	Set YBED 								= $Get(%request.Data("YBED",1))
	Set pImpCodConfiguracao = $Get(%request.Data("pImpCodConfiguracao",1))
	Set pCodImportacao			= $Get(%request.Data("pCodImportacao",1))
	
	Set $Piece(^mtemp.ImportacaoControle(YM, YBED, 1),Y,1) = 2
	Do PrepararImportacao^VARImportarArquivo(pCodImportacao) 

	Return $$$OK]]></Implementation>
</Method>

<Method name="ListarArquivoPreparacao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 			= 0
	Set Y 			= "~"
	;
	Set YBED 								= $Get(%request.Data("YBED",1))
	Set pImpCodConfiguracao = $Get(%request.Data("pImpCodConfiguracao",1))
	Set pCodImportacao			= $Get(%request.Data("pCodImportacao",1))
	
	Set objConfiguracao = $Get(^VARImportarConfig(YM,pImpCodConfiguracao,1))
  Set primeiraLinha 	= $$$VARImportarConfigPrimeiraLinhaCabecalho(objConfiguracao)
	Set dadosLinha    	= $Get(^VARImportarArquivoOrigem(YM,pCodImportacao,1,1))
	Set qtdeCampos    	= $Length(dadosLinha,Y)

	Set arrayColuna = []
	Set arrayDados	= []

	Set list	= {}
	Set list.dataField 		= "linha"
	Set list.caption 	 		= "Linha do Arquivo"
	Set list.width 	 			= "70"
	Set list.allowEditing = 0
	Set list.dataType		= "number"
	Do arrayColuna.%Push(list)

	Set list	= {}
	Set list.dataField 		= "validacao"
	Set list.caption 	 		= "Validação"
	Set list.width 	 			= "200"
	Set list.allowEditing = 0
	Do arrayColuna.%Push(list)


	;Faz o FOR de acordo com a quantidade de campos da global
	For count = 1 : 1 : qtdeCampos {
		Set list	= {}
		Set list.dataField 	= "coluna"_count
		Set list.minWidth  	= "120"
		;Indica se a 1a Linha Contém o Cabeçalho da Tabela
		If (primeiraLinha = 1) {
			Set list.caption = $Replace($Piece(dadosLinha,Y,count),"""","")
		}Else{
			Set list.caption = "coluna "_count
		}
		Do arrayColuna.%Push(list)
	}

	Set idLinha = ""
	For {
		Set idLinha = $Order(^VARImportarArquivoOrigem(YM,pCodImportacao,idLinha))
		Quit:idLinha=""

		;Indica se a 1a Linha Contém o Cabeçalho da Tabela
		If (primeiraLinha = 1 && (idLinha=1)){
			Continue
		}
		Set dadosLinha = $G(^VARImportarArquivoOrigem(YM,pCodImportacao,idLinha,1))
		Set list = {}
		Do list.%Set("linha", idLinha)

		Do list.%Set("validacao", "OK")
		If $D(^VARImportarArquivoCritica(YM,pCodImportacao,idLinha)) {
			Set objCritica = $G(^VARImportarArquivoCritica(YM,pCodImportacao,idLinha,1))
			Set critica    = $Piece($$GetMemoTextWithCRLF^COMUtilStr(objCritica),".",1)
			Do list.%Set("validacao", critica)
		}
		;Faz o FOR de acordo com a quantidade de campos da global
		For count = 1 : 1 : qtdeCampos {
			Do list.%Set("coluna"_count, $Piece(dadosLinha,Y,count))
		}
		Do arrayDados.%Push(list)
	}
		
  Set listRetorno = {}
  Set listRetorno.Colunas = arrayColuna  
  Set listRetorno.Dados 	= arrayDados  
    
  Do listRetorno.%ToJSON()
    
	Return $$$OK]]></Implementation>
</Method>

<Method name="GerarImportacao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y 		= "~"
	Set YBED 								= $Get(%request.Data("YBED",1))
	Set pImpCodConfiguracao = $Get(%request.Data("pImpCodConfiguracao",1))
	Set pCodImportacao			= $Get(%request.Data("pCodImportacao",1))
	
	Set $Piece(^mtemp.ImportacaoControle(YM, YBED, 1),Y,1) = 3
	Set strStatus = $$ImportarDadosWeb^VARImportarArquivo(pCodImportacao) 
	Write strStatus
	Return strStatus]]></Implementation>
</Method>

<Method name="exportaModelo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Set pImpCodConfiguracao = $Get(%request.Data("pImpCodConfiguracao",1))
	do ExportarModeloConfig^VARImportarArquivo(pImpCodConfiguracao)
	quit]]></Implementation>
</Method>

<Method name="ListarModelo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y 		= "~"
	Set YBED 								= $Get(%request.Data("YBED",1))
	Set pImpCodConfiguracao = $Get(%request.Data("pImpCodConfiguracao",1))
	
	Set objConfiguracao = $Get(^VARImportarConfig(YM,pImpCodConfiguracao,1))
	Set codDelimitador			= $$$VARImportarConfigDelimitadorOrigem(objConfiguracao)
  	Set exemploArquivoOrigem 	= $$$VARImportarConfigExemploArquivoOrigem(objConfiguracao)
	set delimitador = ";"
	if codDelimitador '= "" set delimitador = $c(codDelimitador)
	Set arrayColuna = []
	Set arrayDados	= []

	For linha = 1 : 1 : $Length(exemploArquivoOrigem,"|"){
		Set dLinha = $Piece(exemploArquivoOrigem,"|",linha)
		Set listDados = {}
		For coluna = 1 : 1 : $Length(dLinha,delimitador){
			Set dColuna = $Piece(dLinha,delimitador,coluna)
			If (linha = 1) {
				Set list = {}
				Set list.dataField 	= "coluna"_coluna
				Set list.minWidth  	= "120"
				Set list.caption 		= dColuna
				Do arrayColuna.%Push(list)
			}Else{
				Do listDados.%Set("coluna"_coluna, dColuna)
			}
		}
		Do:linha>1 arrayDados.%Push(listDados)
	}
		
  Set listRetorno = {}
  Set listRetorno.Colunas = arrayColuna  
  Set listRetorno.Dados 	= arrayDados  
    
  Do listRetorno.%ToJSON()

	Return $$$OK]]></Implementation>
</Method>
</Class>
</Export>