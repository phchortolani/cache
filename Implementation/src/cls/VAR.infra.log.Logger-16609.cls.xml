<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.log.Logger">
<Description><![CDATA[The Logger is responsible for registering (log) the information as
requested by the system. All information is kept in a temporary
global node.<br>
&nbsp;<br>
History:<br>
2009-Apr-02&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Created by Pablo]]></Description>
<ClassType/>
<Import>VAR.common,VAR.infra.cache,VAR.infra.util</Import>
<IncludeCode>VARUtil,VARLog</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Parameter name="GLOBALNODE">
<Description><![CDATA[Global node where the log is temporarily kept]]></Description>
<Type>%String</Type>
<Default>^CacheTemp("VAR.infra.log.Logger"</Default>
</Parameter>

<Method name="isLogJobIdStarted">
<Description><![CDATA[Returns if the logging is started from a Job Id.<br>
=> Job Id 0 represents ALL.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>intJobId:%Integer</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit (+$get(^VAR.infra.log.Logger("JobId", 0)) ||
		  +$get(^VAR.infra.log.Logger("JobId", intJobId)))]]></Implementation>
</Method>

<Method name="LogJobIdStart">
<Description><![CDATA[Start logging from a Job Id.<br>
=> Job Id 0 represents ALL.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>intJobId:%Integer</FormalSpec>
<Implementation><![CDATA[	set ^VAR.infra.log.Logger("JobId", intJobId) = 1]]></Implementation>
</Method>

<Method name="LogJobIdStop">
<Description><![CDATA[Stop logging from a Job Id.<br>
=> Job Id 0 represents ALL.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>intJobId:%Integer</FormalSpec>
<Implementation><![CDATA[	kill ^VAR.infra.log.Logger("JobId", intJobId)]]></Implementation>
</Method>

<Method name="PrintJobIdsToLog">
<Description><![CDATA[Print Job Ids defined to log.<br>
=> Job Id 0 represents ALL.]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	zw ^VAR.infra.log.Logger("JobId")]]></Implementation>
</Method>

<Method name="LogError">
<Description><![CDATA[Logs an ERROR event.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrUnit: source code unit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrPosition: source code position<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrText: text information<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pblnScreen: show it on the screen?<br>
&nbsp;<br>
Returns: the status]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrUnit:%String,pstrPosition:%String,pstrText:%String,pblnScreen:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..Log(##class(LogEvent).%GetParameter("LOGERROR"), pstrUnit, pstrPosition, pstrText, pblnScreen)]]></Implementation>
</Method>

<Method name="LogWarning">
<Description><![CDATA[Logs a WARNING event.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrUnit: source code unit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrPosition: source code position<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrText: text information<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pblnScreen: show it on the screen?<br>
&nbsp;<br>
Returns: the status]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrUnit:%String,pstrPosition:%String,pstrText:%String,pblnScreen:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..Log(##class(LogEvent).%GetParameter("LOGWARNING"), pstrUnit, pstrPosition, pstrText, pblnScreen)]]></Implementation>
</Method>

<Method name="LogInfo">
<Description><![CDATA[Logs an INFO event.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrUnit: source code unit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrPosition: source code position<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrText: text information<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pblnScreen: show it on the screen?<br>
&nbsp;<br>
Returns: the status]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrUnit:%String,pstrPosition:%String,pstrText:%String,pblnScreen:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..Log(##class(LogEvent).%GetParameter("LOGINFO"), pstrUnit, pstrPosition, pstrText, pblnScreen)]]></Implementation>
</Method>

<Method name="LogDebug">
<Description><![CDATA[Logs a DEBUG event.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrUnit: source code unit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrPosition: source code position<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrText: text information<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pblnScreen: show it on the screen?<br>
&nbsp;<br>
Returns: the status]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrUnit:%String,pstrPosition:%String,pstrText:%String,pblnScreen:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..Log(##class(LogEvent).%GetParameter("LOGDEBUG"), pstrUnit, pstrPosition, pstrText, pblnScreen)]]></Implementation>
</Method>

<Method name="LogStatus">
<Description><![CDATA[Logs a status ERROR event.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrUnit: source code unit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrPosition: source code position<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrText: text information<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pblnScreen: show it on the screen?<br>
&nbsp;<br>
Returns: the status]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrUnit:%String,pstrPosition:%String,strStatus:%Status,pblnScreen:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if ($$$ISERR(strStatus))
	{
		do ..LogError(pstrUnit, pstrPosition, ##class(Util).GetErrors(strStatus, 0), pblnScreen)
	}
	
	quit strStatus]]></Implementation>
</Method>

<Method name="LogTransactionsSavePoint">
<Description><![CDATA[Save point to log transactions.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(JournalReader).SavePoint()]]></Implementation>
</Method>

<Method name="LogTransactionsFromLastPoint">
<Description><![CDATA[Logs all transactions from last point saved.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit:('..isLogJobIdStarted($job))

	if (##class(JournalReader).ReadJournalFile())
	{
		do ##class(JournalReader).LogJournalSaved($job, $job)
	}]]></Implementation>
</Method>

<Method name="Log">
<Description><![CDATA[Logs an event.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pintLevel: the level code<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrUnit: source code unit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrPosition: source code position<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrText: text information<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pblnScreen: show it on the screen?<br>
&nbsp;<br>
Returns: the status
[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pintLevel:%Integer,pstrUnit:%String,pstrPosition:%String,pstrText:%String,pblnScreen:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit:('..isLogJobIdStarted($job)) $$$OK
	
	set pstrText = ##class(Strings).RemoveBinaryCharacters(pstrText)
	
	set objLogEvent = ##class(LogEvent).%New()
	set objLogEvent.Level = pintLevel
	set objLogEvent.Unit = pstrUnit
	set objLogEvent.Position = pstrPosition
	set objLogEvent.Text = pstrText
	if (pblnScreen)
	{
		write !, objLogEvent.GetLogText()
	}

	quit ..LogGlobal(objLogEvent)]]></Implementation>
</Method>

<Method name="LogGlobal">
<Description><![CDATA[Save the log event in the global node.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pobjLogEvent: the log event<br>
&nbsp;<br>
Returns: the status
[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjLogEvent:LogEvent</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	$$$INITCRITICALSECTION("logger")
	quit:$$$TIMEOUTCRITICALSECTION $$$ERRORTIMEOUTCS("logger")

	set nivelTransacao = $tlevel
	set $ztrap = "exception"

	set globalLog = ..#GLOBALNODE_","""_##class(Strings).UpperCase($ZNSPACE)_""")"
	set novoCodigo = $increment(@globalLog)

	//tstart
	set globalBufferLog = ..#GLOBALNODE_","""_##class(Strings).UpperCase($ZNSPACE)_""","_novoCodigo_")"
	set @globalBufferLog = pobjLogEvent.GetXml()
	//tcommit
	
	set status = $$$OK

finally
	$$$ENDCRITICALSECTION("logger")

	quit status
	
exception
	set $ztrap = ""
	set status = $$$CUSTOMERROR($zerror)

 	/*if (nivelTransacao '= $tlevel)
 	{
 		trollback
 	}*/

	goto finally]]></Implementation>
</Method>
</Class>
</Export>