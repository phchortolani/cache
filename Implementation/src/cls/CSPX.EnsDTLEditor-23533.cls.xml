<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsDTLEditor">
<Description><![CDATA[
Renders HTML wrapper for DTL editor as loaded by Studio]]></Description>
<ClassType/>
<IncludeCode>Ensemble</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>CSPX.SVGEditor</Super>
<System>3</System>

<Parameter name="EDITORURL">
<Description><![CDATA[
URL used to render editor]]></Description>
<Default>CSPX.EnsDTLSVG.cls</Default>
</Parameter>


<Method name="OnDrawHTMLHead">
<Description><![CDATA[
Draw any additional JS or other head section items]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#; get class name of transform: strip off .dtl
	Set tClass = ##class(Ens.DTL.UI.DTLDocument).GetClassName($G(%request.Data("$ID1",1)))

	&html<
<style>
body { margin: 0px; padding: 0px; background: #EEEEEE; }
</style>

<script language="javascript">
// --------------
// functions to display HTML dialog windows

/// display the action list window
function document_listActions(tform)
{
	// set up parms
	var parms = new Object();
	document_showWizard('',tform,'list','',parms);
}

/// display the transform test window
function document_testTransform(tform)
{
	// it would be good if we could test if the dtl has to be saved.

	// set up parms
	var parms = new Object();
	parms.transformClass = '#($ZCVT(tClass,"O","JS"))#';

	document_showWizard('',tform,'test','',parms);
}

/// Show the DTL wizard dialog;
/// parms is an associative array of addition arguments to pass
/// to the dialog;
/// Returns the context object that was passed to the dialog.
/// mode is 'new', 'edit', etc.
function document_showWizard(mode,tform,type,data,parms)
{
	parms.inputClass = tform.sourceClass;
	parms.inputDocType = tform.sourceDocType;

	var plist = '';
	for (var p in parms) {
		plist += '&' + p + '=' + escape(parms[p]);
	}
	var url = 'CSPX.EnsDTLWizard.cls?TYPE='+type+'&DATA='+escape(data)+'&LANG='+escape(tform.language)+ '&MODE=' + escape(mode) + plist
	return launchPopupWindow(tform,url,type);
}

function launchPopupWindow(tform,url,type)
{
	// We must dig out the CSPCHD value from the current location so that the popup keeps the context
	var cspchd = null;
	var params = self.document.location.href.split("?");

	if (params.length > 1) {
		params = params[1].split("&")
		for (var p in params) {
			plist = params[p].split("=");
			if (plist[0] == 'CSPCHD') {
				cspchd = plist[1];
			}
		}
	}	

	// default page name
	var pageName = 'ensPopupWindow';

	// see if we need to provide size and position
	var wid = self.screen.width;
	var hgt = self.screen.height;
	wid = wid * 0.8;
	hgt = hgt * 0.8;
	var top = self.screen.height * 0.1;
	var left = self.screen.width * 0.1;
	
	if ('test' != type) {
		wid = 500;
		hgt = 500;
	}

	var features = 'dialogHeight: '+hgt+'px; dialogWidth: '+wid+'px; dialogTop: '+top+'px; dialogLeft: '+left+'px; edge: Raised; center: Yes; help: Yes; resizable: Yes; status: No;';

  	var id = '';
  	var questionmark = url.split("?");
  	var page;
  	if (questionmark.length > 1) {
	  	page = escape(questionmark[0]) + "?" + questionmark[1];
	  	page = page + "&" + id;
  	}
  	else {
		page = escape(url) + "?" + id;
  	}

  	// Append the CSPCHD (if we found one)
  	if (null != cspchd) {
	  	page = page + "&CSPCHD=" + cspchd;
  	}

	// create popup window

	// test for IE modal dialog
	if (window.showModalDialog) {
		// construct and pass context along as dialogArgument
		var context = new Object();
		context.transform = tform;
		context.returnValue = null;
		var ret = window.showModalDialog(page,context,features);
		return context;
	}

	alert('attempt to use DTL Editor in non-IE context');
	var popup = window.open(page,pageName,features);
	popup.focus();

	// remember popup window in our window
	self.popupWindow = popup;
}


// -------------
function document_setTargetSegments(clsname, doctype, reload, proplist) {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.setTargetSegments(clsname,doctype,reload,proplist);
}

function document_setSourceSegments(clsname, doctype, reload, proplist) {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.setSourceSegments(clsname,doctype,reload,proplist);
}

function document_insertTargetSegments(segment, proplist) {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.insertTargetSegments(segment,proplist);
}

function document_insertSourceSegments(segment, proplist) {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.insertSourceSegments(segment,proplist);
}
</script>
	>

	// write out methods that perform the hyper-calls
	Write "<script language=""javascript"">",!
	Write "function loadSegmentsFromServer(mode,cls,doctype,segment,segids)",!
	Write "{",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsDTLEditor.GetSegments","mode,cls,doctype,segment,segids",1)
 	Write ";",!
	Write "}",!

	Write "function loadTopSegmentsFromServer(mode,cls,doctype)",!
	Write "{",!
	Write " var dyn = 1;",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsDTLEditor.GetTopSegments","mode,cls,doctype,dyn",1)
 	Write ";",!
	Write "}",!

	Write "function isVDoc(cls)",!
	Write "{",!
	Write " return (1=="
	Write ##class(%CSP.Page).HyperEventCall("Ens.VDoc.Utils.IsVirtualDocument","cls",0)
 	Write ");",!
	Write "}",!
	Write "</script>",!
]]></Implementation>
</Method>

<Method name="GetDocument">
<Description><![CDATA[
Find DTL transform (Ens.DTL.Transform) object for the given DTL class]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String,*pDocument:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Set pDocument = ""

	Do {
		Set tCls = ##class(Ens.DTL.UI.DTLDocument).GetClassName(pName)
		Set tSC = ##class(Ens.DTL.UI.DTLDocument).GetTransform(.tTransform, tCls)

		If ($$$ISOK(tSC) && $IsObject(tTransform)) {
			Set pDocument = tTransform
		}
	} While(0)
Exit
	Quit tSC
Trap
	Set $ZT=""
	Goto Exit
]]></Implementation>
</Method>

<Method name="DrawInitDocument">
<Description><![CDATA[
Write out initial xml state of document]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDocument:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK

	Do {
		If $IsObject(pDocument) {
			// Get xml state of transform
			Set tStream = ##class(%GlobalCharacterStream).%New()
			Set tSC = pDocument.GenerateXML(tStream)
			If $$$ISOK(tSC) {
				Do tStream.OutputToDevice()
			}
		}
	} While(0)
Exit
	Quit tSC
Trap
	Set $ZT=""
	Goto Exit
]]></Implementation>
</Method>

<Method name="GetTopSegments">
<Description><![CDATA[
Generate JS to populate list of top-level segment]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMode:%String="&quot;,pClass:%String="&quot;,pDocType:%String="&quot;,pDyn:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
	// mode can be csv list	
	For p = 1:1:$L(pMode,",") {
		Set mode = $P(pMode,",",p)
		Set cls = $P(pClass,",",p)
		Set doctype = $P(pDocType,",",p)
		
		Set tType = $S(mode="target":"Target",1:"Source")

		Write $c(9)_"document_set"_tType_"Segments("""_(cls)_""","""_(doctype)_""",",pDyn,",",!
	
		// get DTL info
		Set tHandle = $I(^CacheTemp.Ens.EnumProps)
		Set tSC = ##class(Ens.VDoc.Utils).GetInfoArray($Name(^CacheTemp.Ens.EnumProps(tHandle)),cls,mode,doctype,,,-1)
	
		// walk over contents list
		Set n=0,k="" For { Set k=$O(^CacheTemp.Ens.EnumProps(tHandle,k))  Quit:""=k  Continue:+k'=k  Set n=n+1
			Set tName = $G(^CacheTemp.Ens.EnumProps(tHandle,k,"name"))  Set:$Case($E(tName),".":0, ":":0, :1) tName = "." _ tName
			Set tChildCount = +$G(^CacheTemp.Ens.EnumProps(tHandle,k))
			Write """",$S(n>1:",",1:""),tName,"@",n,"@",tChildCount,""" +",!
		}
		Write """"");",!
		
		// clear list
		Kill ^CacheTemp.Ens.EnumProps(tHandle)
	}
]]></Implementation>
</Method>

<Method name="GetSegments">
<Description><![CDATA[
Called from client to get list of subsegments
pNodeAddr is csv-list of id numbers]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMode:%String,pClass:%String,pDocType:%String="&quot;,pSegment:%String,pNodeAddr:%String="&quot;</FormalSpec>
<Implementation><![CDATA[
	Set start=0, $ZT="Trap"
	Set:""=pNodeAddr pNodeAddr=-1
	Write $c(9)_"document_insert"_$S(pMode="target":"Target",1:"Source")_"Segments("""_(pSegment)_""",",!
	Set start=1

	// get DTL info
	Set tHandle = $I(^CacheTemp.Ens.EnumProps)
	Set tSC = ##class(Ens.VDoc.Utils).GetInfoArray($Name(^CacheTemp.Ens.EnumProps(tHandle)),pClass,pMode,pDocType,,,pNodeAddr)
	
	// assemble glvn for looping over segments
	Set dots = ""
	Set tGLVN = $Name(^CacheTemp.Ens.EnumProps(tHandle))
	Set tNodesLen=$S(+pNodeAddr<=0:0, 1:$L(pNodeAddr,","))
	For p = 1:1:tNodesLen {
		Set tNode = +$P(pNodeAddr,",",p)
		#; scan the current tree level up to the given node position
		Set tID=0, k=""  For { Set k=$O(@tGLVN@(k)) Quit:""=k  Continue:+k'=k  Set tID=tID+1 Quit:tID=tNode } Set:tID'=tNode k="_"
		Set tGLVN = $Name(@tGLVN@(k))
		Set dots = dots _ $S(":"=$E($G(@tGLVN@("name"))):":",1:".")
	}
	Set n=0,k="" For { Set k=$O(@tGLVN@(k))  Quit:""=k  Continue:+k'=k  Set n=n+1
		Set tName = $G(@($Name(@tGLVN@(k)))@("name"))
		Set tName = dots _ $S($E(tName)=":":"", 1:".") _ tName
		Set tChildCount = +$G(@tGLVN@(k))
		Write """",$S(n>1:",",1:""),tName,"@",n,"@",tChildCount,""" +",!
	}
	Write """"");",!

	// clear list
	Kill ^CacheTemp.Ens.EnumProps(tHandle)
Exit
	Quit
Trap
	Set $ZT=""
	Write:start """"");",!
	&js<alert('Error in GetSegments: #($ZCVT($ZE,"O","JS"))#');>
	Goto Exit
]]></Implementation>
</Method>

<Method name="DrawInitEditorFunction">
<Description><![CDATA[
Give subclass opportunity to inject additional JS code 
into the client-side initEditor function]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDocument:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $IsObject(pDocument) {
		Do ..GetTopSegments("target", pDocument.TargetClass, pDocument.TargetDocType)
		Do ..GetTopSegments("source", pDocument.SourceClass, pDocument.SourceDocType)
	}

	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>