<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsConfigSVG">
<IncludeCode>Ensemble,EnsUI</IncludeCode>
<Super>%CSP.Page</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Parameter name="CONTENTTYPE">
<Default>image/svg-xml</Default>
</Parameter>


<Parameter name="BoxWidth">
<Description><![CDATA[
Width of each component box]]></Description>
<Default>220</Default>
</Parameter>


<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// Avoid IE HTTP 1.1 bugs
	Set %response.HTTPVersion = "HTTP/1.0"

	// Workaround for HTTPS
	If (%request.Secure) {
		Do %response.SetHeader("Cache-Control","private")
	}

	// force output to be UTF-8
	Set %response.CharSet="UTF-8"

	// prevent session blocking
	Do %session.Unlock()

 	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStartTime = $ZH
	Set tStartGlo = $zu(67,9,$J)

	Write "<?xml version=""1.0"" ?>",!

	Set prodid = $G(%request.Data("PRODUCTION",1))
	Set showComp = +$G(%request.Data("SHOWCOMP",1)) // show components
	Set production = ##class(Ens.Config.Production).%OpenId(prodid)
	
	// find svg font from localization file
	Set tFont = $$$LocalizeText("Ensemble","FontFamily","courier,verdana")

	&html<<svg id="svg" zoomAndPan="disable" onload="Initialize()"> >

	// style
	Write "<style type=""text/css""><![CDATA[",!
	&html<
.canvas {
	fill: #CCCCEE;
	stroke: gray;
	stroke-width: 1;
}

.adapter {
	fill: white;
	stroke: black;
	stroke-width: 1px;
}

.adapterShadow {
	fill: black;
	stroke: black;
	stroke-width: 1px;
	opacity: 0.5;
}

.adapterSelected {
	fill: #FFF0B0;
	stroke: purple;
	stroke-width: 2px;
}

.adapterDisabled {
	fill: #D0D0D0;
	stroke: black;
	stroke-width: 1px;
}

.adapterDisabledSelected {
	fill: yellow;
	stroke: black;
	stroke-width: 2px;
}

.adapterMissing {
	fill: orange;
	stroke: red;
	stroke-width: 1px;
}

.adapterMissingSelected {
	fill: #FFF0B0;
	stroke: red;
	stroke-width: 2px;
}

.adapterError {
	fill: red;
	stroke: black;
	stroke-width: 1px;
}

.adapterErrorSelected {
	fill: #FFF0B0;
	stroke: red;
	stroke-width: 2px;
}

.adapterHood {
	fill: #808080;
	stroke: black;
	stroke-width: 1px;
	opacity: 0.5;
}

/* --adapter status lights-- */

.adapterStatusOK {
	fill: url(#greenGrad);
	stroke: blue;
	stroke-width: 1;
}

.adapterStatusStarting {
	fill: url(#blueGrad);
	stroke: blue;
	stroke-width: 1;
}

.adapterStatusDisabled {
	fill: url(#grayGrad);
	stroke: blue;
	stroke-width: 1;
}

.adapterStatusInactive {
	fill: url(#yellowGrad);
	stroke: blue;
	stroke-width: 1;
}

.adapterStatusRetry {
	fill: url(#orangeGrad);
	stroke: blue;
	stroke-width: 1;
}

.adapterStatusError {
	fill: url(#redGrad);
	stroke: blue;
	stroke-width: 1;
}

/* --- */

.adapterIO {
	fill: #FFEEFF;
	stroke: blue;
	stroke-width: 2;
}

.adapterIOhilite {
	fill: #FFF0B0;
	stroke: purple;
	stroke-width: 3;
}

.adapterSep {
	stroke: gray;
	stroke-width: 1;
}

.TitleRect {
	fill: white;
	stroke: gray;
	stroke-width: 2;
}

.TitleLine {
	fill: none;
	stroke: gray;
	stroke-width: 2;
}

.missingclass {
	fill: red;
	stroke: none;
}

/* connectors */

.hilite {
	fill: none;
	stroke: purple;
	stroke-width: 3;
	filter: url(#dropShadow);
}

.BusinessServiceToBusinessProcess {
	fill: none;
	stroke: plum;
	stroke-width: 1;
}

.BusinessServiceToBusinessOperation {
	fill: none;
	stroke: green;
	stroke-width: 1;
}

.BusinessProcessToBusinessProcess {
	fill: none;
	stroke: black;
	stroke-width: 1;
}

.BusinessProcessToBusinessOperation {
	fill: none;
	stroke: orange;
	stroke-width: 1;
}

.SepLine {
	fill: none;
	stroke: gray;
	stroke-width: 2;
	stroke-dasharray: 9,9;
}

.SectTitle {
  pointer-events: none;
  font-size: 14pt;
}

.ProdTitle {
  pointer-events: none;
  font-size: 16pt;
  fill: blue;
  stroke: none;
}

.ProdRunning {
  pointer-events: none;
  font-size: 12pt;
  fill: black;
  stroke: none;
}

.ProdNotRunning {
  display: none;	
}

.Category {
  pointer-events: none;
  font-size: 14pt;
  fill: darkblue;
  stroke: none;
}

.Title {
  pointer-events: none;
  font-size: 18pt;
}

text, tspan {
	font-family: #(tFont)#;
	font-size: 10pt;
}

line {
	stroke: gray;
	stroke-width: 0.5px;
}

.icon {
	fill: none;
	stroke: blue;
	opacity: 0.5;
	stroke-width: 1;
}

>	

	Write "]]]]><![CDATA[></style>>"

	Set lblSelect = $$$TextJS("Please select an item.")
	// defs
	Do ..DrawGradient()

	// script
	Write "<script language=""text/javascript""><![CDATA[",!
	&js<

var productionName = '#($ZCVT(production.Name,"O","JS"))#';
var currItem = null;
var connectorIndex = null;

function selectItem(id)
{
	var rect;
	
	if (currItem) {
		// turn off current selection
		rect = document.getElementById(currItem + "_rect");
		
		if (rect.getAttribute("class") == "adapterDisabledSelected") {
			rect.setAttribute("class","adapterDisabled");
		}
		else if (rect.getAttribute("class") == "adapterMissingSelected") {
			rect.setAttribute("class","adapterMissing");
		}
		else if (rect.getAttribute("class") == "adapterErrorSelected") {
			rect.setAttribute("class","adapterError");
		}
		else {
			rect.setAttribute("class","adapter");
		}

		updateConnections(currItem, false);
	}
	
	currItem = id;
	if (currItem) {
		// turn on new selection
		rect = document.getElementById(currItem + "_rect");
		
		// see if this one was disabled
		if (rect.getAttribute("class") == "adapterDisabled") {
			rect.setAttribute("class","adapterDisabledSelected");
		}
		else if (rect.getAttribute("class") == "adapterMissing") {
			rect.setAttribute("class","adapterMissingSelected");
		}
		else if (rect.getAttribute("class") == "adapterError") {
			rect.setAttribute("class","adapterErrorSelected");
		}
		else {
			rect.setAttribute("class","adapterSelected");
		}
		updateConnections(currItem, true);
	}
	
	// notify property sheet
	if (self.parent.selectNewItem) {
		self.parent.selectNewItem(currItem);
	}
}

// private functions
// Set the contents of text element id to str
function setTextNode(id,str)
{
	var text = document.getElementById(id);
	if (!text) {
		return;
	}
	
	// create next text node and replace the current one
	var oldNode = text.firstChild;
	text.removeChild(oldNode);

	var textNode;
	textNode = document.createTextNode(str);
	text.appendChild(textNode);
}

function buildConnectorIndex()
{
	connectorIndex = new Object();  // list of all connector ids that connect to a given item id

	// find the set of connection elements
	var el = document.getElementById("connections").firstChild;
	
	// loop over all the connection elements
	while (el) {
		if (el.nodeName == 'path' && el.id != '') {
			var s = el.id.split(":");
			if (s[0] != '') {
				connectorIndex[s[0]] = (connectorIndex[s[0]] == null) ? el.id : (connectorIndex[s[0]] + ',' + el.id);
			}
			if (s[1] != '') {
				connectorIndex[s[1]] = (connectorIndex[s[1]] == null) ? el.id : (connectorIndex[s[1]] + ',' + el.id);
			}
		}
		el = el.nextSibling;
	}
}

// hilite/unhilite the connection lines for the given item
function updateConnections(item, hilite)
{
	var first = false;
	if (!document.getElementById("connections")) return;
	if (null == connectorIndex) {
		first = true;
		buildConnectorIndex();
	}

	// find the set of connectors that connect to this item
	var id = item.split("_")[1];
	var list = connectorIndex[id];
	if (null != list) {
		var pathids = list.split(',');
		for (var n = 0; n != pathids.length; n++) {
			var el = document.getElementById(pathids[n]);
			var s = pathids[n].split(":");
			var inputIO = document.getElementById('item_' + s[1] + '_input');
			var outputIO = document.getElementById('item_' + s[0] + '_output');

			// move line (if needed)
			var inS = shapeList[shapeIndex['item_'+s[1]]];
			var outS = shapeList[shapeIndex['item_'+s[0]]];

			// figure out if line is visible
			show = false;
			if (inS && outS) {
				if (matchCurrCategory(inS) && matchCurrCategory(outS)) {
					show = true;
				}

				if (show) {
					var d = 'M ' + inS.xIn + ' ' + inS.yIn + ', ' + outS.xOut + ' ' + outS.yOut;			
					el.setAttribute("d",d);
				}
			}

			// update display
			if (show == true) {
				el.setAttribute('display','');
			}
			else if (show == false) {
				el.setAttribute('display','none');
			}
			// if undefined, ignore show flag

			if (hilite) {
				// hilite
				el.setAttribute("oldclass",el.getAttribute("class"));
				el.setAttribute("class","hilite");
				if (inputIO) {
					inputIO.setAttribute("class","adapterIOhilite");
				}
				if (outputIO) {
					outputIO.setAttribute("class","adapterIOhilite");
				}
			}
			else {
				// unhilite
				el.setAttribute("class",el.getAttribute("oldclass"));
				if (inputIO) {
					inputIO.setAttribute("class","adapterIO");
				}
				if (outputIO) {
					outputIO.setAttribute("class","adapterIO");
				}
			}
		}
	}
}

// mouse click (down) on item (operation)
function itemClick(evt)
{
	var el = evt.getTarget();
	var id = el.parentNode.id;
	
	selectItem(id);
}

// mouse click on the canvas
function canvasClick(evt)
{
	selectItem(null);
}

// display the production property sheet
function canvas_ProductionSettings()
{
	selectItem(null);
}

// display the add items sheet
function canvas_AddItem(host)
{
	if (self.parent.showAddItemPage) {
		self.parent.showAddItemPage(host);
	}
}

// Re-sort items
var currSort = 'position';

function canvas_SortBy(order)
{
	setMenuItemOption("checked","menu_sort_" + currSort, "menu_sort", false);
	currSort = order;
 	setMenuItemOption("checked","menu_sort_" + currSort, "menu_sort", true);

	sortShapes(currSort);
	arrangeShapes();
}

// display the instances sheet
function canvas_showInstances()
{
	if (!currItem) {
		alert('#($$$TextJS("Please select an item."))#');
		return;
	}
	if (self.parent.showInstances) {
		var name = shapeList[shapeIndex[currItem]].name;
		self.parent.showInstances(name);
	}
}

// toggle enabled state of current item
function canvas_toggleEnabled()
{
	if (!currItem) {
		alert('#(lblSelect)#');
		return;
	}

	var shape = shapeList[shapeIndex[currItem]];
	var name = shape.name;
	var id = shape.id;

	// figure out current state by looking at shape CSS class
	rect = document.getElementById(id + "_rect");
	if (rect) {
		var cls = rect.getAttribute("class");
		var msg;
		var newCls = null;
		
		if (cls == 'adapterDisabled' || cls == 'adapterDisabledSelected' ) {
			msg = '#($$$TextJS("Do you wish to enable item: "))#' + name + '?';
			newCls = 'adapterSelected';
		}
		else {
			msg = '#($$$TextJS("Do you wish to disable item: "))#' + name + '?';
			if (cls == 'adapter' || cls == 'adapterSelected' ) {
				newCls = 'adapterDisabledSelected';
			}
		}

		if (confirm(msg)) {
			if (self.parent.toggleEnabled) {
				self.parent.toggleEnabled(id);
			}

			// change color now; auto-refresh will also do this
			if (newCls) {
				rect.setAttribute("class",newCls);
			}
		}
	}
}

// display the history sheet
function canvas_showHistory()
{
	if (!currItem) {
		alert('#(lblSelect)#');
		return;
	}
	if (self.parent.showHistory) {
		var name = shapeList[shapeIndex[currItem]].name;
		self.parent.showHistory(name);
	}
}

// display the message queue page
function canvas_showQueue()
{
	if (!currItem) {
		alert('#(lblSelect)#');
		return;
	}
	if (self.parent.showQueue) {
		var name = shapeList[shapeIndex[currItem]].name;
		self.parent.showQueue(name);
	}
}

// display the Business Process components
function canvas_showComponents()
{
	showComponents = !showComponents;
	setMenuItemOption("checked","menu_components", "", showComponents);
	arrangeShapes();
}

// display the event log page
function canvas_showEventLog()
{
	if (!currItem) {
		alert('#(lblSelect)#');
		return;
	}
	if (self.parent.showEventLog) {
		var name = shapeList[shapeIndex[currItem]].name;
		self.parent.showEventLog(name);
	}
}

	>


	Write "]]]]><![CDATA[></script>>"

	Do ..LocalizeContextMenu(.LBL)
		&html<
<!-- defs -->

<defs>
<menu id="CanvasMenu" xmlns="http://mynamepsace.com/">
    <header>Ensemble Configuration Menu</header>
    <categoryMenu/>
   <menu id="menu_sort">
	 <header>#(LBL("Sort"))#</header>
	 <item id="menu_sort_position" onactivate="canvas_SortBy('position');">#(LBL("Position"))#</item>
	 <item id="menu_sort_name" onactivate="canvas_SortBy('name');">#(LBL("Name"))#</item>
	 <item id="menu_sort_status" onactivate="canvas_SortBy('status');">#(LBL("Status"))#</item>
    </menu>
    <separator/>
   <menu>
	 <header>#(LBL("Add"))#</header>
	 <item onactivate="canvas_AddItem('Service');">#(LBL("Service"))#</item>
	 <item onactivate="canvas_AddItem('Process');">#(LBL("Process"))#</item>
	 <item onactivate="canvas_AddItem('Operation');">#(LBL("Operation"))#</item>
    </menu>
    <item onactivate="canvas_ProductionSettings();">#(LBL("Settings"))#</item>
    <separator/>
    <menu id="menu_zoom">
	 <header>#(LBL("Zoom"))#</header>>
	 Do ..DrawZoom()
	 &html<
    </menu>
    <separator/>
	 <item id="menu_components" checked="#($S(showComp:"yes",1:"no"))#" onactivate="canvas_showComponents();">#(LBL("ShowComponents"))#</item>
	<item id="menu_toggleEnabled" onactivate="canvas_toggleEnabled();">#(LBL("ToggleEnabled"))#</item>
    <menu id="menu_monitor">
	 <header>#(LBL("Run-time"))#</header>
	 <item id="menu_instances" onactivate="canvas_showInstances();">#(LBL("ShowInstances"))#</item>
	 <item id="menu_history" onactivate="canvas_showHistory();">#(LBL("ShowHistory"))#</item>
	</menu>
	 <item id="menu_queue" onactivate="canvas_showQueue();">#(LBL("ShowMessageQueue"))#</item>
	 <item id="menu_events" onactivate="canvas_showEventLog();">#(LBL("ShowEventLog"))#</item>
    <separator/>
	<item action="Find" id="Find">#(LBL("Find"))#</item>
	<item action="FindAgain" id="FindAgain">#(LBL("FindAgain"))#</item>
    <separator/>
	<item action="OriginalView" id="OriginalView">#(LBL("OriginalView"))#</item>
    <item action="ViewSource">#(LBL("ViewSource"))#</item>
    <item action="About">#(LBL("About"))#</item>
</menu>
<!-- filters -->
<filter id="dropShadow" x="-2%" y="-2%" height="120%" width="120%">
<feGaussianBlur in="SourceAlpha" stdDeviation="3" />
<feOffset dx="4px" dy="4px" result="offsetBlur" />
<feMerge>
	<feMergeNode in="offsetBlur"/>
	<feMergeNode in="SourceGraphic"/>
</feMerge>
</filter>

</defs>
>
	// canvas
	&html<<rect class="canvas" x="0" y="0" rx="0" width="100%" height="100%" onclick="canvasClick(evt)"/>>

	// background (sections and titles)
	Set tRunningClass = "ProdNotRunning"
	Set tIsRunning = 0

	If ($G($$$EnsRuntime("Name")) = production.Name) {
		Set tRunningClass = "ProdRunning"
		Set tIsRunning = 1
	}

	&html<
		<line class="TitleLine" x1="0" y1="45" x2="100%" y2="45" />
		<line class="SepLine" x1="563" y1="45" x2="563" y2="100%" />
		<line class="SepLine" x1="863" y1="45" x2="863" y2="100%" />

		<text class="ProdTitle" x="10" y="20" text-anchor="start">#(production.Name)#</text>
		<text id="ProdRunningTitle" class="#(tRunningClass)#" x="10" y="40" text-anchor="start">#(LBL("tRunningMsg"))#</text>

		<text id="CurrCategory" class="Category" x="10" y="64" text-anchor="start"> </text>

		<text class="SectTitle" x="450" y="41" text-anchor="end">#(LBL("tBS"))#</text>
		<text class="SectTitle" x="700" y="41" text-anchor="middle">#(LBL("tBP"))#</text>
		<text class="SectTitle" x="900" y="41" text-anchor="start">#(LBL("tBO"))#</text>
	>

	// Maintain positions for each item
	Set xpos($$$eHostTypeService) = 300
	Set ypos($$$eHostTypeService) = 70 + 33

	Set xpos($$$eHostTypeProcess) = 500
	Set ypos($$$eHostTypeProcess) = 70 + 0

	Set xpos($$$eHostTypeOperation) = 900
	Set ypos($$$eHostTypeOperation) = 70 + 34

	// layout graphics in specific order to get correct z-ordering
	Do ..LayoutItems(production,.shapes,.xref,.xpos,.ypos)
	Do ..ShowConnections(production,.shapes,.xref,.xpos,.ypos)
	Do ..ShowShapes(tIsRunning,.shapes)
	
	// calculate max hgt of canvas
	Set canvasWidth = 1500
	Set canvasHeight = 200
	Set k = $O(ypos(""))
	While (k '= "") {
		Set:ypos(k)>canvasHeight canvasHeight = ypos(k)
		Set k = $O(ypos(k))
	}

	// define initialize function here (so we know hgt & wid)	
	Write "<script language=""text/javascript""><![CDATA[",!

	// build client list and index of shapes
	&js<var shapeList = new Array();>
	&js<var shapeIndex = new Object();>

	Set k="" For { Set k=$O(shapes(k),1,name)  Quit:""=k
		Set item = $G(shapes(k,"item"))
		Set type = $G(shapes(k,"type"))
		Set xPos = +$G(shapes(k,"xPos"))
		Set yPos = +$G(shapes(k,"yPos"))
		Set tTypeName=$$$ConfigTypeName(type)
		Set subtype = $G(shapes(k,"subtype"))
		
		&js<
		var n = shapeList.length;
		shapeList[n] = new Shape(n,'#($ZCVT(name,"O","JS"))#','#($ZCVT("item_"_k,"O","JS"))#','#(tTypeName)#','#($ZCVT(item.Category,"O","JS"))#',#(xPos)#,#(yPos)#,'#(subtype)#');
		>
	}

	&js<

function Shape(order,name,id,type,cat,x,y,subtype)
{
	this.moveTo = Shape_moveTo;

	this.order = order; // ordinal position of the item
	this.name = name;
	this.id = id;
	this.type = type;
	this.category = cat;
	this.xPos = x;
	this.yPos = y;
	this.xIn = this.yIn = this.xOut = this.yOut = 0;
	this.component = ('component' == subtype);
}

function Shape_moveTo(x,y,show)
{
	this.xPos = x;
	this.yPos = y;
	var box = document.getElementById(this.id);
	if (box) {
		if (show) {
			box.setAttribute('display','');
			box.setAttribute('transform','translate('+x+','+y+')');
		}
		else {
			box.setAttribute('display','none');
		}
	}

	if (this.type == 'BusinessService' || this.type == 'BusinessProcess') {
		this.xOut = this.xPos + #(..#BoxWidth)# + 5;
		this.yOut = this.yPos + 20;
	}
	if (this.type == 'BusinessOperation' || this.type == 'BusinessProcess') {
		this.xIn = this.xPos - 5;
		this.yIn = this.yPos + 20;
	}
}

var api = new Object();

var currCategory = '';
var showComponents = #($S(showComp:"true",1:"false"))#;

function Initialize()
{
	// replace context menu (if we are embedded in HTML)
	/*
	var embed = self.document.getElementById("SVGEmbed");
	if (embed) {
		var newMenuRoot = parseXML(printNode(document.getElementById('CanvasMenu')), contextMenu);
		contextMenu.replaceChild( newMenuRoot, contextMenu.firstChild );
	}
	*/

	// set up API functions...
	api.setItemCategory = setItemCategory;	

	// find loading div in outer html
	var loadingDiv = self.document.getElementById("loading");
	if (loadingDiv) {
		loadingDiv.api = api;
	}
	else {
		alert("ASSERT: loadingDiv not found");
	}

	// remember last category
	currCategory = getCookie(productionName,'');

	updateContextMenu();
	updateCategoryLabel();

	// find loading div in outer html
	var loadingDiv = self.document.getElementById("loading");
	if (loadingDiv) {
		loadingDiv.style.display = 'none';
	}

	setCanvasSize(#(canvasWidth)#,#(canvasHeight)#);

	var svg = document.getElementById("svg");
	svg.setAttribute("width",#(canvasWidth)#);
	svg.setAttribute("height",#(canvasHeight)#);
	svg.setAttribute("viewBox","0 0 #(canvasWidth)# #(canvasHeight)#");

	setZoom(getCookie('configzoom',100));
	sortShapes(currSort);

	arrangeShapes();
}

function sortShapes(order)
{
	switch (order) {
	case 'name':
		shapeList.sort(compareShapeName);
		break;
	case 'status':
		shapeList.sort(compareShapeStatus);
		break;
	case 'position':
	default:
		shapeList.sort(compareShapeOrder);
		break;
	}

	shapeIndex = new Object();
	for (var i = 0; i != shapeList.length; i++) {
		shapeIndex[shapeList[i].id] = i;
	}
}

// sort function
function compareShapeName(a,b)
{
	return a.name.toUpperCase() #($C(62))# b.name.toUpperCase() ? 1 : -1;
}
function compareShapeOrder(a,b)
{
	return a.order #($C(62))# b.order ? 1 : -1;
}

var statusTable = new Object();
statusTable['adapter'] = 1;
statusTable['adapterSelected'] = 1;
statusTable['adapterMissing'] = 2;
statusTable['adapterMissingSelected'] = 2;
statusTable['adapterError'] = 3;
statusTable['adapterErrorSelected'] = 3;
statusTable['adapterDisabled'] = 0;
statusTable['adapterDisabledSelected'] = 0;

function compareShapeStatus(a,b)
{
	var elA = document.getElementById(a.id + "_rect");
	var elB = document.getElementById(b.id + "_rect");
	if (!elA || !elB) return 0;
	return statusTable[elA.getAttribute("class")] #($C(62))# statusTable[elB.getAttribute("class")] ? -1 : 1;
}


function updateCategoryLabel()
{
	setTextNode('CurrCategory',(''==currCategory) ? '' : '#($$$TextJS("Category"))#: ' + currCategory);
}

function setItemCategory(id,category)
{
	try {
		// find item in set
		var shape = shapeList[shapeIndex[id]];
		if (shape) {
			shape.category = category;
		}

		// refresh
		canvas_setCategory(currCategory);
	}
	catch(ex) {
		alert('Error in setItemCategory:\n' + ex.message);
	}
}

// set the option for the given menu item
function setMenuItemOption(pOption, pItemId, pSubMenuId, value)
{
	var menuItems = contextMenu.childNodes.item(0).childNodes;
	var tItem;
      
	for (i = 0; i != menuItems.length - 1; i++) {
		if (menuItems.item(i).nodeType == 1) {
			tItem = menuItems.item(i);
			if (!pSubMenuId) {
				// top-level menu item
				if (tItem.getAttribute('id') == pItemId) {
					tItem.setAttribute(pOption,value ? 'yes' : 'no');
				}
			}
            else if ((tItem.nodeName == 'menu') && (tItem.getAttribute('id') == pSubMenuId)) {
				// submenu

				// loop over items in submenu
				var submenuItems = tItem.childNodes;
               
				for (j = 0; j != submenuItems.length - 1; j++) {
					tSubItem = submenuItems.item(j)
					if (tSubItem.nodeType == 1) {
						if (tSubItem.getAttribute('id') == pItemId) {
							tSubItem.setAttribute(pOption,value ? 'yes' : 'no');
						}
					}
				}
			}
		}
	}
}

var currZoom = 100;

// Set the zoom level
function setZoom(zoom)
{
	if (zoom == currZoom) return;
	
	var svgWidth = #(canvasWidth)#;
	var svgHeight = #(canvasHeight)#;
	var oldzoom = currZoom;
	currZoom = zoom;
	
	var embed = self.document.getElementById("SVGEmbed");
	if (embed == null) {
		// we are stand-alone
		return;
	}
	embed.height = 0.75 * svgHeight * (zoom / 100);
	embed.width = 0.75 * svgWidth * (zoom / 100);
 
 	// update context menu
	setMenuItemOption("checked","menu_zoom_" + oldzoom, "menu_zoom", false);
 	setMenuItemOption("checked","menu_zoom_" + zoom, "menu_zoom", true);
	self.document.cookie = 'configzoom=' + currZoom;
}

function getCookie(name,def)
 {
	var value = def; // default value
 	var cookies = self.document.cookie;
 	
 	var pos = cookies.indexOf(name + '=');
 	if (pos != -1) {
	 	var start = pos + 1 + name.length;
	 	var end = cookies.indexOf(';',start);
	 	if (end == -1) end = cookies.length;
	 	var value = unescape(cookies.substring(start,end));
 	}
 	
 	return value;
 }

// Set the canvas size
function setCanvasSize(width, height)
{
	var embed = self.document.getElementById("SVGEmbed");
	if (embed) {
		embed.height = 0.75 * height * (currZoom / 100);
		embed.width = 0.75 * width * (currZoom / 100);
	}
}

function canvas_setCategory(cat)
{
	selectItem(null);
	currCategory = cat;
	arrangeShapes();
	updateContextMenu();

	updateCategoryLabel();

	// reset scroll
	if (self.resetScroll) {
		self.resetScroll();
	}
	// remember
	self.document.cookie = productionName + '=' + currCategory;
}

function updateContextMenu()
{
	// make list of distinct categories
	var categories = new Object();
	for (var i in shapeList) {
		var shape = shapeList[i];
		if (shape.category != '') {
			// a category may be a csv list of categories
			var cl = shape.category.split(',');
			for (var n in cl) {
				if (cl[n] != '') {
					categories[cl[n]] = '';
				}
			}
		}
	}

	// we have to copy to an array in order to sort
	var catList = new Array();
	for (var c in categories) {
		catList[catList.length] = c;
	}
	catList.sort();

	// get original menu
	var orig = printNode(document.getElementById('CanvasMenu'));

	// plug in new menu
	var submenu = '<menu id="menu_category"><header>#(LBL("cmdCategory"))#</header>';
	submenu += '<item ' + ((currCategory=='') ? 'checked="yes"' : '') + ' onactivate="canvas_setCategory(\'\')">#(LBL("cmdAll"))#</item>';
	for (var n = 0; n != catList.length; n++) {
		c = catList[n];
		var cat = escapeXML(c);
		var catjs = escapeXML(escapeJS(c));
		submenu += '<item '+ ((currCategory==c) ? 'checked="yes"' : '') +' onactivate="canvas_setCategory(\''+catjs+'\')">'+cat+'</item>';
	}
	submenu += '</menu>';

	newMenu = orig.replace(/\<categoryMenu\/\>/g,submenu);

	var newMenuRoot = parseXML(newMenu, contextMenu);
	contextMenu.replaceChild( newMenuRoot, contextMenu.firstChild);

 	setMenuItemOption("checked","menu_sort_" + currSort, "menu_sort", true);
}

// quote any special xml characters within text
function escapeXML(text)
{
	if (text && (text != '') && (text != text*1)) {
		text = text.replace(/&/g,'&amp;');
		text = text.replace(/#($C(62))#/g,'&gt;');
		text = text.replace(/#($C(60))#/g,'&lt;');
		text = text.replace(/\'/g,'&apos;');
	}
	return text;
}

// quote any special js characters within text
function escapeJS(text)
{
	if (text && (text != '') && (text != text*1)) {
		text = text.replace(/\"/g,'\\\"');
		text = text.replace(/\'/g,'\\\'');
	}
	return text;
}

// test if a shape's category matches the current category
function matchCurrCategory(shape)
{
	var match = false;
	var cat = shape.category;

	if (currCategory == '') {
		match = (showComponents) ? true : !shape.component;
	}
	else {
		// test for subcat
		if (cat != '') {
			var cl = cat.split(',');
			for (var n in cl) {
				if (cl[n] == currCategory) {
					match = (showComponents) ? true : !shape.component;
					break;
				}
			}
		}
	}

	return match;
}

/// rearrange layout of shapes (client-side)
function arrangeShapes()
{
	// Maintain positions for each item
	var xpos = new Object();
	var ypos = new Object();
	var ydelta = 60;

	xpos["BusinessService"] = 300;
	ypos["BusinessService"] = 70 + 33;

	xpos["BusinessProcess"] = 600;
	ypos["BusinessProcess"] = 70 + 0;

	xpos["BusinessOperation"] = 900;
	ypos["BusinessOperation"] = 70 + 34;

	// move shapes
	for (var i = 0; i != shapeList.length; i++) {
		var shape = shapeList[i];
		if (matchCurrCategory(shape)) {

			var x = xpos[shape.type];
			var y = ypos[shape.type];

			// move shape
			shape.moveTo(x,y,true);

			ypos[shape.type] += ydelta;
		}
		else {
			// hide
			shape.moveTo(0,0,false);
		}
	}

	// update connectors
	for (var i = 0; i != shapeList.length; i++) {
		var shape = shapeList[i];
		updateConnections(shape.id, currItem == shape.id);
	}
}

>
	Write "]]]]><![CDATA[></script>>",!

	#; stats

	Set time = $ZH - tStartTime
	Set gref = 	$zu(67,9,$J) - tStartGlo

	&html<<!-- #(time)#s #(gref)#g -->>

	&html<</svg>>
	
	Do %response.Flush()

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="LayoutItems">
<Description><![CDATA[
Displays the current Business Items defined for this production]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production,&amp;shapes:%String,&amp;xref:%String,&amp;xpos:%Integer,&amp;ypos:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set ydelta = 60
	
	// construct initial, filtered list
	For i = 1:1:production.Items.Count() {
		Set item = production.Items.GetAt(i)
		Set name = $S(item.Name="":item.ClassName,1:item.Name)
		
		// check for duplicate
		If ($D(flist(name))) {
			// if old disabled and new is enabled, replace
			If (item.Enabled && 'flist(name).Enabled) {
				Set flist(name) = item
			}
		}
		Else {
			Set flist(name) = item
		}
	}

	// now layout shapes using this list
	Set name="" For { Set name=$O(flist(name),1,item)  Quit:""=name
		Set type = item.BusinessType()
		Set subtype = ""
		If (type = $$$eHostTypeProcess) {
			Set subtype = ..GetBusinessSubtype(item.ClassName)
		}
		
		// set shapes info
		If (type = $$$eHostTypeUnknown) {
			// treat unknowns as services
			Set type = $$$eHostTypeService
		}
		
		Set ids = item.%Id()
		Set xref(name,ids) = ""

		Set shapes(ids) = name
		Set shapes(ids,"item") = item
		Set shapes(ids,"class") = item.ClassName
		Set shapes(ids,"type") = type
		Set shapes(ids,"xPos") = xpos(type)
		Set shapes(ids,"yPos") = ypos(type)
		Set shapes(ids,"subtype") = subtype
		
		If ((type = $$$eHostTypeService) || (type = $$$eHostTypeProcess)) {
			Set shapes(ids,"xOut") = xpos(type) + ..#BoxWidth + 5
			Set shapes(ids,"yOut") = ypos(type) + 20
		}
		If ((type = $$$eHostTypeOperation) || (type = $$$eHostTypeProcess)) {
			Set shapes(ids,"xIn") = xpos(type) - 5
			Set shapes(ids,"yIn") = ypos(type) + 20
		}
		Set ypos(type) = ypos(type) + ydelta
	}
]]></Implementation>
</Method>

<Method name="GetItemNames">
<Description><![CDATA[
Get class/package name for an item]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>item:Ens.Config.Item,*pkg:%String,*cls:%String</FormalSpec>
<Implementation><![CDATA[
	If ((item.Name="") || (item.Name=item.ClassName)) {
		Set name = item.ClassName
		Set pkg = $P(name,".",1,$L(name,".")-1)
		Set cls = $P(name,".",$L(name,"."))
	}
	Else {
		// non-class name
		Set pkg = ""
		Set cls = item.Name
	}
]]></Implementation>
</Method>

<Method name="ShowOperation">
<Description><![CDATA[
Displays a box for a Business Operation]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pIsRunning:%Boolean,&amp;pItemNo:%Integer,item:Ens.Config.Item,itemid:%String,xpos:%Integer,ypos:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set id = "item_" _ itemid
	Do ..GetItemNames(item,.pkg,.cls)
	Do ..GetItemStyles(pIsRunning,item,.statusClass,.rectClass,.hoodStyle,.ioStatusClass)
	Set cfgName = $S(item.Name="":item.ClassName,1:item.Name)

	Set acls = ""
	Set aname = item.AdapterClassName()
	If ((aname '= "") && ('##class(%Dictionary.ClassDefinition).%ExistsId(aname))) {
		Set acls = "missingclass"
	}

	Set tSubtype = ..GetBusinessSubtype(item.ClassName)

	&html<<g id="#(id)#" transform="translate(#(xpos)#,#(ypos)#)" onmousedown="itemClick(evt);" >
		<rect class="adapterShadow" x="2" y="2" width="#(..#BoxWidth)#" height="40" rx="5"/>
	 	<clipPath id="clip_#(id)#">
			<rect x="0" y="0" width="#(..#BoxWidth)#" height="40" rx="5" style="fill:white; stroke:blue;" />
  		</clipPath>

		<rect class="#(rectClass)#" id="#(id)#_rect" x="0" y="0" width="#(..#BoxWidth)#" height="40" rx="5"/>
		<polygon id="#(cfgName)#_iostatus" class="#(ioStatusClass)#" points="#(..#BoxWidth)#,10 #(..#BoxWidth+10)#,20 #(..#BoxWidth)#,30 #(..#BoxWidth)#,10" />
		<polygon id="hood_#(pItemNo)#" #(hoodStyle)# class="adapterHood" points="#(..#BoxWidth)#,10 #(..#BoxWidth+10)#,20 #(..#BoxWidth)#,30 #(..#BoxWidth)#,10" />
		<circle id="#(id)#_input" class="adapterIO" cx="-5" cy="20" r="5" />
		<circle id="#(cfgName)#_status" class="#(statusClass)#" cx="10" cy="10" r="7" />
		<circle id="hood_#(pItemNo+1)#" #(hoodStyle)# class="adapterHood" cx="10" cy="10" r="6" />>

	#; show icon for workflow
	If (tSubtype = "workflow") {
		&html<
		<g transform="translate(#(..#BoxWidth-20)#,20)">
			<circle cx="0" cy="-7" r="5" fill="blue" style="fill-opacity: 0.1; opacity: 0.3; stroke: blue;" stroke-width="1" />
			<line x1="0" y1="-2" x2="0" y2="8" style="opacity: 0.3; stroke: blue;" stroke-width="1" />
			<line x1="-5" y1="3" x2="0" y2="3" style="opacity: 0.3; stroke: blue;" stroke-width="1" />
			<line x1="5" y1="3" x2="0" y2="3" style="opacity: 0.3; stroke: blue;" stroke-width="1" />
			<line x1="-5" y1="12" x2="0" y2="8" style="opacity: 0.3; stroke: blue;" stroke-width="1" />
			<line x1="5" y1="12" x2="0" y2="8" style="opacity: 0.3; stroke: blue;" stroke-width="1" />

		</g>
		>
	}

	&html<
		<line class="adapterSep" x1="20" y1="1" x2="20" y2="39" />
		<line class="adapterSep" x1="1" y1="20" x2="20" y2="20" />
		<text id="#(id)#_pkgname" x="22" y="13" clip-path="url(#clip_#(id)#)">#(pkg)#</text>
		<text id="#(id)#_classname" x="22" y="33" clip-path="url(#clip_#(id)#)">#(cls)#</text>
		<text id="#(id)#_pool" x="5" y="37">#(item.PoolSize)#</text>
		<line x1="#(..#BoxWidth+10)#" y1="20" x2="#(..#BoxWidth+150)#" y2="20" />
		<text x="#(..#BoxWidth+20)#" y="17" class="#(acls)#">#(aname)#</text>
		<text x="#(..#BoxWidth+20)#" y="32" class="#(acls)#">#($ZCVT(item.Comment,"O","HTML"))#</text>
	</g>>

	Set pItemNo = pItemNo+1
]]></Implementation>
</Method>

<Method name="ShowService">
<Description><![CDATA[
Displays a box for a Business service]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pIsRunning:%Boolean,&amp;pItemNo:%Integer,item:Ens.Config.Item,itemid:%String,xpos:%Integer,ypos:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set id = "item_" _ itemid
	Do ..GetItemNames(item,.pkg,.cls)
	Do ..GetItemStyles(pIsRunning,item,.statusClass,.rectClass,.hoodStyle,.ioStatusClass)
	Set cfgName = $S(item.Name="":item.ClassName,1:item.Name)

	Set tSubtype = ..GetBusinessSubtype(item.ClassName)

	Set acls = ""
	Set aname = item.AdapterClassName()
	If ((aname '= "") && ('##class(%Dictionary.ClassDefinition).%ExistsId(aname))) {
		Set acls = "missingclass"
	}

	&html<<g id="#(id)#" transform="translate(#(xpos)#,#(ypos)#)" onmousedown="itemClick(evt);" >
		<rect class="adapterShadow" x="2" y="2" width="#(..#BoxWidth)#" height="40" rx="5"/>
	 	<clipPath id="clip_#(id)#">
			<rect x="0" y="0" width="#(..#BoxWidth)#" height="40" rx="5" style="fill:white; stroke:blue;" />
  		</clipPath>
	
		<rect class="#(rectClass)#" id="#(id)#_rect" x="0" y="0" width="#(..#BoxWidth)#" height="40" rx="5"/>
		<polygon id="#(cfgName)#_iostatus" class="#(ioStatusClass)#" points="-10,10 0,20 -10,30 -10,10" />
		<polygon id="hood_#(pItemNo)#" #(hoodStyle)# class="adapterHood" points="-10,10 0,20 -10,30 -10,10" />
		<circle id="#(id)#_output" class="adapterIO" cx="#(..#BoxWidth+5)#" cy="20" r="5" />
		<circle id="#(cfgName)#_status" class="#(statusClass)#" cx="10" cy="10" r="7" />
		<circle id="hood_#(pItemNo+1)#" #(hoodStyle)# class="adapterHood" cx="10" cy="10" r="6" />>

	// show icon for metrics
	If (tSubtype = "metric") {
		&html<<line class="icon" x1="#(..#BoxWidth-30)#" y1="10" x2="#(..#BoxWidth-30)#" y2="30" />>
		&html<<line class="icon" x1="#(..#BoxWidth-30)#" y1="30" x2="#(..#BoxWidth-10)#" y2="30" />>
		&html<<line class="icon" x1="#(..#BoxWidth-30)#" y1="30" x2="#(..#BoxWidth-20)#" y2="20" />>
		&html<<line class="icon" x1="#(..#BoxWidth-20)#" y1="20" x2="#(..#BoxWidth-15)#" y2="25" />>
		&html<<line class="icon" x1="#(..#BoxWidth-15)#" y1="25" x2="#(..#BoxWidth-10)#" y2="20" />>
	}

	&html<
		<line class="adapterSep" x1="20" y1="1" x2="20" y2="39" />
		<line class="adapterSep" x1="1" y1="20" x2="20" y2="20" />
		<text id="#(id)#_pkgname" x="22" y="13" clip-path="url(#clip_#(id)#)">#(pkg)#</text>
		<text id="#(id)#_classname" x="22" y="33" clip-path="url(#clip_#(id)#)">#(cls)#</text>
		<text id="#(id)#_pool" x="5" y="37">#(item.PoolSize)#</text>
		<line x1="#(-..#BoxWidth)#" y1="20" x2="-10" y2="20" />
		<text x="-15" y="17" text-anchor="end" class="#(acls)#">#(aname)#</text>
		<text x="-15" y="32" text-anchor="end" class="#(acls)#">#($ZCVT(item.Comment,"O","HTML"))#</text>
	</g>>
	
	Set pItemNo = pItemNo+1
]]></Implementation>
</Method>

<Method name="ShowProcess">
<Description><![CDATA[
Displays a box for a Business Process]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pIsRunning:%Boolean,&amp;pItemNo:%Integer,item:Ens.Config.Item,itemid:%String,xpos:%Integer,ypos:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set id = "item_" _ itemid
	Do ..GetItemNames(item,.pkg,.cls)
	Do ..GetItemStyles(pIsRunning,item,.statusClass,.rectClass,.hoodStyle,.ioStatusClass)
	Set cfgName = $S(item.Name="":item.ClassName,1:item.Name)

	Set tSubtype = ..GetBusinessSubtype(item.ClassName)

	&html<<g id="#(id)#" transform="translate(#(xpos)#,#(ypos)#)" onmousedown="itemClick(evt);" >
		<rect class="adapterShadow" x="2" y="2" width="#(..#BoxWidth)#" height="40" rx="5"/>
	 	<clipPath id="clip_#(id)#">
			<rect x="0" y="0" width="#(..#BoxWidth)#" height="40" rx="5" style="fill:white; stroke:blue;" />
  		</clipPath>

		<rect class="#(rectClass)#" id="#(id)#_rect" x="0" y="0" width="#(..#BoxWidth)#" height="40" rx="5" />
		<circle id="#(id)#_input" class="adapterIO" cx="-5" cy="20" r="5" />
		<circle id="#(id)#_output" class="adapterIO" cx="#(..#BoxWidth+5)#" cy="20" r="5" />

		<circle id="#(cfgName)#_status" class="#(statusClass)#" cx="10" cy="10" r="7" />
		<circle id="hood_#(pItemNo)#" #(hoodStyle)# class="adapterHood" cx="10" cy="10" r="6" />>

	// show icon for router processes
	If (tSubtype = "router") {
		&html<<line class="icon" x1="#(..#BoxWidth-30)#" y1="10" x2="#(..#BoxWidth-30)#" y2="30" />>
		&html<<line class="icon" x1="#(..#BoxWidth-10)#" y1="10" x2="#(..#BoxWidth-10)#" y2="30" />>
		&html<<line class="icon" x1="#(..#BoxWidth-30)#" y1="20" x2="#(..#BoxWidth-10)#" y2="20" />>
		&html<<line class="icon" x1="#(..#BoxWidth-15)#" y1="25" x2="#(..#BoxWidth-10)#" y2="20" />>
		&html<<line class="icon" x1="#(..#BoxWidth-15)#" y1="15" x2="#(..#BoxWidth-10)#" y2="20" />>
	}

	// show icon for bpl processes/components
	elseif (tSubtype = "bpl") {
		&html<<rect class="icon" x="#(..#BoxWidth-30)#" y="5" width="20" height="10" rx="2" />>
		&html<<rect class="icon" x="#(..#BoxWidth-30)#" y="25" width="20" height="10" rx="2" />>
		&html<<line class="icon" x1="#(..#BoxWidth-20)#" y1="15" x2="#(..#BoxWidth-20)#" y2="25" />>
	}
	elseif (tSubtype = "component") {
		&html<<rect class="icon" x="#(..#BoxWidth-30)#" y="5" width="20" height="10" rx="2" style="fill: lightblue;" />>
		&html<<rect class="icon" x="#(..#BoxWidth-30)#" y="25" width="20" height="10" rx="2" style="fill: lightblue;" />>
		&html<<line class="icon" x1="#(..#BoxWidth-20)#" y1="15" x2="#(..#BoxWidth-20)#" y2="25" />>
	}

	&html<
		<line class="adapterSep" x1="20" y1="1" x2="20" y2="39" />
		<line class="adapterSep" x1="1" y1="20" x2="20" y2="20" />

		<text id="#(id)#_pool" x="5" y="37">#($Case(+item.PoolSize,0:"",:item.PoolSize))#</text>
		<text id="#(id)#_pkgname" x="22" y="13" clip-path="url(#clip_#(id)#)">#(pkg)#</text>
		<text id="#(id)#_classname" x="22" y="33" clip-path="url(#clip_#(id)#)">#(cls)#</text>
	</g>>
]]></Implementation>
</Method>

<Method name="GetItemStyles">
<Description><![CDATA[
Compute style names for item]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pIsRunning:%Boolean,item:Ens.Config.Item,*statusClass:%String,*rectClass:%String,*hoodStyle:%String,*ioStatusClass:%String</FormalSpec>
<Implementation><![CDATA[
	Set tIsOK = 1

	Set ioStatusClass = "adapterIO"

	If (item.%Id() = "") {
		// missing
		Set statusClass = "adapterStatusDisabled"
		Set rectClass = "adapterMissing"
		Set tIsOK = 0
	}
	ElseIf (item.BusinessType() = $$$eHostTypeUnknown) {
		Set statusClass = "adapterStatusError"
		Set rectClass = "adapterError"
		Set tIsOK = 0
	}
	ElseIf (item.Enabled) {
		Set statusClass = "adapterStatusOK"
		Set rectClass = "adapter"
	}
	Else {
		Set statusClass = "adapterStatusDisabled"
		Set rectClass = "adapterDisabled"
	}

	// get live status if present
	If (pIsRunning && tIsOK) {
		Set tHost = $S(item.Name'="":item.Name,1:item.ClassName)
		Set tStatus = $$$GetHostMonitor(tHost,$$$eMonitorStatus) If tStatus="" Set tStatus="OK"
		Set statusClass = "adapterStatus" _ tStatus

		// !!! find adapter status
		Set tIOStatus = $$$GetHostMonitor(tHost,$$$eMonitorStatus) If tIOStatus="" Set tIOStatus="OK"
		Set ioStatusClass = "adapterStatus" _ tIOStatus
	}

	Set hoodStyle = $S(pIsRunning:"style=""display:none;""",1:"")
]]></Implementation>
</Method>

<Method name="ShowShapes">
<Description><![CDATA[
Display all the shapes in the shapes array]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pIsRunning:%Boolean,&amp;shapes:%String</FormalSpec>
<Implementation><![CDATA[
	Set no=0,k="" For { Set k=$O(shapes(k),1,name), no=no+1  Quit:""=k
		Set type = $G(shapes(k,"type"))
		Set item = $G(shapes(k,"item"))
		If ('$IsObject(item)) {
			// This must be a missing item
			// make a temporary place holder...
			Set item = ##class(Ens.Config.Item).%New()
			Set item.ClassName = name
			Set item.Name = name
			Set item.Enabled = 0
			Set item.PoolSize = 0
		}
		If (type = $$$eHostTypeService) {
			Do ..ShowService(pIsRunning,.no,item,k,shapes(k,"xPos"),shapes(k,"yPos"))
		}
		ElseIf (type = $$$eHostTypeOperation) {
			Do ..ShowOperation(pIsRunning,.no,item,k,shapes(k,"xPos"),shapes(k,"yPos"))
		}
		ElseIf (type = $$$eHostTypeProcess) {
			Do ..ShowProcess(pIsRunning,.no,item,k,shapes(k,"xPos"),shapes(k,"yPos"))
		}
	}
]]></Implementation>
</Method>

<Method name="ShowConnections">
<Description><![CDATA[
Generate the connection lines between the components of this production]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production,&amp;shapes:%String,&amp;xref:%String,&amp;xpos:%Integer,&amp;ypos:%Integer</FormalSpec>
<Implementation><![CDATA[
	&html<<g id="connections">>
	Set ids="" For { Set ids=$O(shapes(ids))  Quit:""=ids ; shape item id
		Set cls = shapes(ids,"class")
		Set source = $$$ConfigTypeName(shapes(ids,"type"))
			
		Kill connect
		Set item=$G(shapes(ids,"item"))
		If ($IsObject(item)&&item.%Id()) {
			#; do not chase connections for "fake" items
			Do ..GetConnections(.connect, cls, item, .tClassCache)
		}
		// loop over items we are connected to
		Set name=""
		For {
			Set name=$O(connect(name))
			Quit:""=name ; name of connected item

			Set xOut = $G(shapes(ids,"xOut"))
			Set yOut = $G(shapes(ids,"yOut"))

			If (xOut '= "") {
				// now look for item in xref array
				Set idx = $O(xref(name,"")) ; id of connected item
				If (idx = "") {
					If (name '= "Ens.Alarm") && (name '= "Ens.ScheduleHandler") {
						// target not configured (and not a "built-in" class)
						// create a "missing" shape for this class

						// find type
						Set type = ..GetBusinessType(name)
						If (type = $$$eHostTypeUnknown) {
							// treat unknowns as "opposite" of starting type
							Set type = $Case(..GetBusinessType(cls),$$$eHostTypeOperation:$$$eHostTypeService,:$$$eHostTypeOperation)
						}
						Set idx = "missing^" _ $$$ConfigTypeName(type) _ "^" _ name
						Set xref(name,idx) = ""
			
						// make a temporary place holder item ...
						Set item = ##class(Ens.Config.Item).%New()
						Set item.ClassName = name
						Set item.Name = name
						Set item.Enabled = 0
						Set item.PoolSize = 0

						Set shapes(idx) = name
						Set shapes(idx,"item") = item
						Set shapes(idx,"class") = name
						Set shapes(idx,"type") = type
						Set shapes(idx,"xPos") = xpos(type)
						Set shapes(idx,"yPos") = ypos(type)

						If ((type = $$$eHostTypeService) || (type = $$$eHostTypeProcess)) {
							Set shapes(idx,"xOut") = xpos(type) + 185
							Set shapes(idx,"yOut") = ypos(type) + 20
						}
						If ((type = $$$eHostTypeOperation) || (type = $$$eHostTypeProcess)) {
							Set shapes(idx,"xIn") = xpos(type) - 5
							Set shapes(idx,"yIn") = ypos(type) + 20
						}
						Set ypos(type) = ypos(type) + 60
					}
				}
				While (idx '= "") {
					Set xIn = $G(shapes(idx,"xIn"))
					Set yIn = $G(shapes(idx,"yIn"))
					If (xIn '= "") {
						// source & target configured
						Set target = $$$ConfigTypeName(shapes(idx,"type"))
						Set targetId = idx
						Set d = ..GetPolyPath(xIn,yIn,xOut,yOut)
						&html<<path id="#(ids)#:#(targetId)#" class="#(source)#To#(target)#" d="#(d)#" />>
					}
					Set idx = $O(xref(name,idx))
				}
			}
		}
	}
	&html<</g>>
]]></Implementation>
</Method>

<Method name="GetPolyPath">
<Description><![CDATA[
Returns a path string that connects in to out...]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>xIn:%Integer,yIn:%Integer,xOut:%Integer,yOut:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set d = ""
	Set d = "M " _ xIn _ " " _ yIn _ ", " _ xOut _ " " _ yOut
	Quit d
]]></Implementation>
</Method>

<Method name="GetConnections">
<Description><![CDATA[
For given business class, return an array of business classes
it talks to (left to right)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;array:%String,class:%String,item:Ens.Config.Item,&amp;pClassCache</FormalSpec>
<Implementation><![CDATA[
	If ('$D(^CacheTemp.EnsConfigClassCache($ZU(5),class))) {
		#; do complete analysis
 		Do ##class(Ens.Config.Production).GetConnections(.array,class,item)
		Set ^CacheTemp.EnsConfigClassCache($ZU(5),class) = ""
		Merge ^CacheTemp.EnsConfigClassCache($ZU(5),class,"data") = array
	}
	Else {
		#; we have seen this before; just invoke the callback
 		Merge array = ^CacheTemp.EnsConfigClassCache($ZU(5),class,"data")
	}

	#; invoke additional callback to pick up instance-specific connections	
 	Set $zt="UserError"
 	If $$$comClassDefined(class) {
		Do $zobjclassmethod(class,"OnGetConnections",.array,item)
 	}
Exit
	Quit
UserError
	Set tSC = $$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="GetBusinessType">
<Description><![CDATA[
Returns the business type of the given class]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap"
	do {
		If $zobjclassmethod(pClass,"%Extends","Ens.BusinessService") {
			Set tValue=$$$eHostTypeService
			Quit
		}
		If $zobjclassmethod(pClass,"%IsA","Ens.BusinessProcess") {
			Set tValue=$$$eHostTypeProcess
			Quit
		}
		If $zobjclassmethod(pClass,"%Extends","Ens.BusinessOperation") {
			Set tValue=$$$eHostTypeOperation 
			Quit
		}
	} while (0)
Exit
	Quit $g(tValue,$$$eHostTypeUnknown)
Trap
	Set $ZT=""
	Goto Exit
]]></Implementation>
</Method>

<Method name="GetBusinessSubtype">
<Description><![CDATA[
Returns the business sub type of the given class
This depends on type.<br>
For process could be: "router","bpl","component"<br>
For service could be: "metric"<br>
For operation could be: "workflow"<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap"
	Set pSubtype = ""
	do {
		If $zobjclassmethod(pClass,"%Extends","EnsLib.Workflow.Operation") {
			Set pSubtype = "workflow"
			Quit
		}
		If $zobjclassmethod(pClass,"%Extends","Ens.BusinessMetric") {
			Set pSubtype = "metric"
			Quit
		}
		If $zobjclassmethod(pClass,"%IsA","Ens.BusinessProcessBPL") {
			If $zobjclassmethod(pClass,"IsComponent") {
				Set pSubtype = "component"
			}
			Else {
				Set pSubtype = "bpl"
			}
			Quit
		}
		If $zobjclassmethod(pClass,"%IsA","EnsLib.MsgRouter.RoutingEngine") {
			Set pSubtype = "router"
			Quit
		}
	} while (0)
Exit
	Quit pSubtype
Trap
	Set $ZT=""
	Goto Exit
]]></Implementation>
</Method>

<Method name="LocalizeContextMenu">
<ClassMethod>1</ClassMethod>
<FormalSpec>LBL</FormalSpec>
<Implementation><![CDATA[
	#; moved localization here so that the pcode can be built within 32K block
	Set LBL("Add")=$$$Text("Add")
	SEt LBL("Service") = $$$Text("Business Service")
	Set LBL("Process") = $$$Text("Business Process")
	Set LBL("Operation") = $$$Text("Business Operation")
	Set LBL("Settings") = $$$Text("Production Settings")
	Set LBL("Zoom") = $$$Text("Zoom")
	Set LBL("ToggleEnabled") = $$$Text("Toggle Enabled")
	Set LBL("Run-time") = $$$Text("Run-time")
	Set LBL("ShowComponents") = $$$Text("Show Components")
	Set LBL("ShowInstances") = $$$Text("Show Instances")
	Set LBL("ShowHistory") = $$$Text("Show History")
	Set LBL("ShowMessageQueue") = $$$Text("Show Message Queue")
	Set LBL("ShowEventLog") = $$$Text("Show Event Log")
	Set LBL("Find") = $$$Text("Find...")
	Set LBL("FindAgain") = $$$Text("Find Again")
	Set LBL("OriginalView") = $$$Text("Original View")
	Set LBL("ViewSource") = $$$Text("View Source")
	Set LBL("About") = $$$Text("About SVG Viewer...")

	Set LBL("tBS") = $$$Text("Business Services")
	Set LBL("tBO") = $$$Text("Business Operations")
	Set LBL("tBP") = $$$Text("Business Processes")
	Set LBL("cmdCategory") = $$$Text("Show Category")
	Set LBL("cmdAll") = $$$Text("All")
	Set LBL("tRunningMsg") = $$$Text("Production Running")

	Set LBL("Sort")=$$$Text("Sort")
	Set LBL("Name")=$$$Text("By Name")
	Set LBL("Position")=$$$Text("By Position")
	Set LBL("Status")=$$$Text("By Status")
]]></Implementation>
</Method>

<Method name="DrawZoom">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
	<item id="menu_zoom_33" onactivate="setZoom(33);">33%</item>
	 <item id="menu_zoom_50" onactivate="setZoom(50);">50%</item>
	 <item id="menu_zoom_75" onactivate="setZoom(75);">75%</item>
	 <item id="menu_zoom_88" onactivate="setZoom(88);">88%</item>
	 <item checked="yes" id="menu_zoom_100" onactivate="setZoom(100);">100%</item>
	 <item id="menu_zoom_110" onactivate="setZoom(110);">110%</item>
	 <item id="menu_zoom_125" onactivate="setZoom(125);">125%</item>
	 <item id="menu_zoom_150" onactivate="setZoom(150);">150%</item>
	 <item id="menu_zoom_200" onactivate="setZoom(200);">200%</item>
	 <item id="menu_zoom_400" onactivate="setZoom(400);">400%</item>
	 >
]]></Implementation>
</Method>

<Method name="DrawGradient">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
<defs id="defs">
<linearGradient id="redGrad" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:darkred" />
<stop offset="35%" style="stop-color:#FF0000" />
<stop offset="65%" style="stop-color:#FF0000" />
<stop offset="100%" style="stop-color:darkred" />
</linearGradient>
<linearGradient id="yellowGrad" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:#808000" />
<stop offset="35%" style="stop-color:#FFFF00" />
<stop offset="65%" style="stop-color:#FFFF00" />
<stop offset="100%" style="stop-color:#808000" />
</linearGradient>
<linearGradient id="greenGrad" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:darkgreen" />
<stop offset="35%" style="stop-color:#00FF00" />
<stop offset="65%" style="stop-color:#00FF00" />
<stop offset="100%" style="stop-color:darkgreen" />
</linearGradient>
<linearGradient id="blueGrad" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:#000080" />
<stop offset="35%" style="stop-color:#0080FF" />
<stop offset="65%" style="stop-color:#0080FF" />
<stop offset="100%" style="stop-color:#000080" />
</linearGradient>
<linearGradient id="orangeGrad" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:#808000" />
<stop offset="30%" style="stop-color:orange" />
<stop offset="70%" style="stop-color:orange" />
<stop offset="100%" style="stop-color:#808000" />
</linearGradient>
<linearGradient id="grayGrad" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:#808080" />
<stop offset="35%" style="stop-color:#E0E0E0" />
<stop offset="65%" style="stop-color:#E0E0E0" />
<stop offset="100%" style="stop-color:#808080" />
</linearGradient>
</defs>
>
]]></Implementation>
</Method>
</Class>
</Export>