<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsDTLWizard">
<Description><![CDATA[
Popup wizard used by DTL Editor.
This is a modal window displayed by the Studio DTL editor.
When launched it is passed a set of URL parameters:<br>
"TYPE"<br>
"DATA"<br>]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set transformClass=$G(%request.Data("transformClass",1))
	Set inputClass=$G(%request.Data("inputClass",1))
	Set inputDocType=$G(%request.Data("inputDocType",1))
	Set inputIsVDoc=##class(Ens.VDoc.Utils).IsVirtualDocument(inputClass)
	Set dialogType=$G(%request.Data("TYPE",1))

	&html<<html>
<head><title>#($$$TextHTML("Ensemble DTL Wizard"))#</title>
<style type="text/css">
body {
	background: #EEEEEE;
	font-family: verdana;
	margin: 0px;
	padding-left: 20px;
}

.title {
	background: darkblue;
	color: white;
	font-weight: bold;
	text-align: left;
	padding-top: 3px;
	padding-bottom: 3px;
	padding-left: 5px;
}

.btnFX {
	color: darkblue;
	font-style: italic;
}

.methodDescription {
	color: darkblue;
	background: white;
	padding: 2px;
	font-size: 0.8em;
	border: 1px solid darkblue;
	width: 100%;
}

div.arguments {
	overflow: auto;
	height: 200px;
	width: 100%;
}

.help {
	color: darkblue;
	border-bottom: 1px solid darkblue;
	padding-left: 5px;
	padding-right: 5px;
}

.body  {
	padding-top: 5px;
	padding-bottom: 5px;
}

.btnBar {
	border-top: 1px solid darkblue;
	text-align: left;
	padding-top: 2px;
	padding-bottom: 2px;
}

.label {
	color: darkblue;
	font-size: 0.8em;
}

div.output {
	border: 1px solid black;
	overflow: auto;
	height: 300px;
	width: 1000px;
	background: white;
}

div.actionList {
	border: 1px solid black;
	overflow: auto;
	height: 300px;
	width: 300px;
	background: white;
}

textarea.input {
	font-size: 0.8em;
}

/* HL7 viewer styles */
TABLE.EDIDocumentTable {
		border: black solid 1px; font-size: 0.8em;
		background: #DDDDFF;
		margin-left: 10px; margin-right: 10px;
		width: 10;
		filter:
			progid:DXImageTransform.Microsoft.dropShadow(color=#404040, OffX=2, OffY=2, Positive=2);
	}

TD.EDIDocumentTableExpandor {
		background: #D0D0FF;
		border-bottom: gray solid 1px;
		padding: 2px;
	}

TD.EDIDocumentTableSegnum {
		background: white;
		font-weight: bold;
		text-align: right;
		border-bottom: gray solid 1px;
		padding: 2px;
	}

TD.EDIDocumentTableSegid {
		background: white;
		border-bottom: gray solid 1px;
		border-right: gray solid 1px;
		padding: 2px;
	}

TD.EDIDocumentTableSegname {
		background: #D0D0FF;
		text-align: center;
		font-weight: bold;
		border-bottom: gray solid 1px;
		padding: 2px;
	}

TABLE.EDISegmentsTable {
		background: white;
		font-size: 0.9em;
		border-bottom: gray solid 1px;
	}

TD.EDISegmentsTableValue {
		background: white;
		padding: 2px;
	}

TD.EDISegmentsTableSeparator {
		background: white;
		padding: 2px;
	}

TD.EDISegmentsTableEmptyfield {
		background: white;
		padding: 2px;
	}

</style>

<script type="text/JavaScript">

var dialogType = '#(dialogType)#';

function initDialog()
{
	// if there is a 'main' control, give it focus
	var ctrl = self.document.getElementById('main');
	if (ctrl) {
		ctrl.focus();
		ctrl.select();
	}
	
	switch (dialogType) {
	case 'list':
		showActionList();
		break;
	}
}

/// Show list of actions within the transform
/// not used!
function showActionList()
{
	var div = self.document.getElementById('actionList');
	var transform = getContext().transform;
	var html = new Array();

	html[html.length] = '<ol>';

	// loop over top-level actions
	for (var n = 0; n < transform.actionList.length; n++) {
		var action = transform.actionList[n];
		if (action.parent == null) {
			html[html.length] = '<li>'+action.type+'</li>';
		}
	}
	html[html.length] = '</ol>';
	div.innerHTML = html.join('');
}

/// f(x) button click: id is control that will be affected
function btnFX(id)
{
	var ctrl = self.document.getElementById(id);
	var selection = self.document.selection.createRange().text;
	if ('' == selection) {
		selection = ctrl.value;
	}

	// launch function window
	var top = self.screen.height * 0.2;
	var left = self.screen.width * 0.2;
	var	wid = 500;
	var hgt = 500;
	
	var features = 'dialogHeight: '+hgt+'px; dialogWidth: '+wid+'px; dialogTop: '+top+'px; dialogLeft: '+left+'px; edge: Raised; center: Yes; help: Yes; resizable: Yes; status: No;';
	var page = '#(..Link("CSPX.EnsDTLWizard.cls",,1))# + &TYPE=FX'
	
	// test for IE modal dialog
	if (window.showModalDialog) {
		// construct and pass context along as dialogArgument
		var context = new Object();
		context.inputValue = selection;
		context.inputClass = '#(inputClass)#';
		context.inputDocType = '#(inputDocType)#';
		context.inputIsVDoc = '#(inputIsVDoc)#';
		var ret = window.showModalDialog(page,context,features);
		if (null != context.returnValue) {
			// if there was a selection, apply change to it
			if ('' != self.document.selection.createRange().text) {
				self.document.selection.createRange().text = context.returnValue;
			}
			else {
				ctrl.value = context.returnValue;
			}
		}
	}
}

/// User selected a new function
function fxSelectFunction(ctrl)
{
	var selection = getContext().inputValue;
	
	// call server for function details
	if ('' != ctrl.value) {
		getFunctionInfo(ctrl.value,selection);
	}
	else {
		var div = CSPPage.document.getElementById('details');
		div.innerHTML = '<i>Select a function.</i>';
	}
}

var valuectrlid;

/// value ... button click: id is control that will be affected
function btnVal(id)
{
	valuectrlid=id;
	var ctrl = self.document.getElementById(id);
	var selection = self.document.selection.createRange().text;
	if ('' == selection) {
		selection = ctrl.value;
	}
	var pstart = selection.indexOf('source.{');
	if (pstart == 0) selection=selection.substring(8,selection.length-1)

	var url = '#(..Link("UtilEnsRoutingRuleList.csp",,1))# &HOST=' + escape('') + 
				'&MODE=' + ((0==getContext().inputIsVDoc) ? "objProp" : "vdocPropPath") +
				'&VALUE=' + escape(selection) +
				'&MSGCLASS=' + escape(getContext().inputClass) +
				'&MSGCATEGORY=' +
				'&DOCTYPE=' + escape(getContext().inputDocType) +
				'&VBASEPROP=source' +
				'&MULTISELECT=0';
	var sFeatures="dialogHeight: 500px; dialogWidth: 600px; dialogTop: " + (screen.height/7) + "px; dialogLeft: " + (screen.width/7) + "px; edge: Sunken; center: Yes; help: No; resizable: Yes; status: No;";
	
	// use IE Modal Dlg.
	// pass current window
	self.showModalDialog(url, window, sFeatures);
	return true;
}

function setAttrFromPopup(mode, value)
{
	// HCR015
	var pstart;
	var ctrl = self.document.getElementById(valuectrlid);
	if ('' != value) {
		pstart = value.indexOf('source.{');
		if (pstart == 0) value=value.substring(8,value.length-1)
		value = 'source.{'+value+'}';
	}

	// if there was a selection, apply change to it
	if ('' != self.document.selection.createRange().text) {
		self.document.selection.createRange().text = value;
	}
	else {
		ctrl.value = value;
	}
}

// get the context object passed in by the parent window
// this is an object with these properties:
// context.transform, context.returnValue
function getContext()
{
	return window.dialogArguments;
}

/// Try to show a help window
function btnHelp()
{
	var key = '';
	switch(dialogType) {
	case 'if':
		key = 'EDTL_if';
		break;
	case 'foreach':
		key = 'EDTL_foreach';
		break;
	case 'assign':
		key = 'EDTL_assign';
		break;
	}
	
	if ('' != key) {
		//var helpWin = window.open('#(..Link("/csp/docbook/DocBook.UI.Page.cls",,1))# +&KEY='+key,'helpWindow');
		var helpWin = window.open('/csp/docbook/DocBook.UI.Page.cls?KEY='+key,'helpWindow');
		helpWin.focus();
	}
}

function btnOK()
{
	var context = getContext();

	// take appropriate OK action
	switch(dialogType) {
	case 'if':
		var ctrl = self.document.getElementById('main');
		context.returnValue = ctrl.value;

		var actrl = self.document.getElementById('annotation');
		context.annotation = actrl.value;
		break;

	case 'foreach':
		var key = self.document.getElementById('key');
		context.key = key.value;
		var ctrl = self.document.getElementById('main');
		context.returnValue = ctrl.value;

		var actrl = self.document.getElementById('annotation');
		context.annotation = actrl.value;
		break;

	case 'assign':
		var property = self.document.getElementById('property');
		context.property = property.value;
		if (context.property == '') {
			alert('Please enter a target property name.');
			return;
		}
		var action = self.document.getElementById('action');
		context.action = action.value;

		var ctrl = self.document.getElementById('main');
		context.returnValue = ctrl.value;

		var actrl = self.document.getElementById('annotation');
		context.annotation = actrl.value;
		break;

	case 'subtransform':
		var targetObj = self.document.getElementById('targetObj');
		context.targetObj = targetObj.value;
		if (context.targetObj == '') {
			alert('Please enter a target segment.');
			return;
		}
		var xfclass = self.document.getElementById('xfclass');
		context.xfclass = xfclass.value;

		if (context.xfclass == '') {
			alert('Please select a transform class name.');
			return;
		}

		// source
		var ctrl = self.document.getElementById('main');
		context.returnValue = ctrl.value;

		var actrl = self.document.getElementById('annotation');
		context.annotation = actrl.value;
		break;

	case 'FX':
		var ctrl = self.document.getElementById('function');
		if ('' == ctrl.value) {
			context.returnValue = null;
		}
		else {
			// assemble return value

			// find last argument
			var input;
			var n = 1;
			var argc = 0;
			while (input = self.document.getElementById('p'+n)) {
				if (''!=input.value) {
					argc = n;
				}
				n++;
			}
			
			// now create expression
			var parts=ctrl.value.split('.');
			var meth=parts[parts.length-1];
			parts.length=parts.length-1;
			var classname=parts.join('.');
			var expr = ((classname == 'Ens.Rule.FunctionSet') ? '..' : '##class('+classname+').') + meth + '(';
			for (n = 1; n <= argc; n++) {
				input = self.document.getElementById('p'+n);
				expr += (n>1?',':'') + (''==input.value ? '\"\"' : input.value);
			}

			expr += ')';
			context.returnValue = expr;
		}
		break;

	default:
		context.returnValue = null;
		break;
	}
	
	// notify parent & close window
	window.close();
}

function btnCancel()
{
	getContext().returnValue = null;
	window.close();
}

/// Invoke the message test
function btnTest()
{
	var context = getContext();

	var input = self.document.getElementById('input');
	dataBuffer = input.value;

	// build message on server
	// when done, this will invoke test code on server
	sendChunk(0); 
}

var chunkSize = 800;
var dataBuffer = '';
var timerid = null;

/// Send next chunk of data to the server;
function sendChunk(seq)
{
	// call server via timer
	if (seq*chunkSize > dataBuffer.length) {
		// run the test
		timerid = window.setTimeout('runTest();',5);
	}
	else { 
		// send more data
		timerid = window.setTimeout('sendChunkToServer('+seq+');',5);
	}
}

</script>>

	// set up hyper-event for this page
	Write ..HyperEventHead(),!

	// write out methods that perform the hyper-calls
	Write "<script language=""javascript"">",!
	Write "function runTest()",!
	Write "{",!
	Write " var inputClass = '",inputClass,"';",!
	Write " var transformClass = '",transformClass,"';",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsDTLWizard.RunTest","inputClass,transformClass",1)
 	Write ";",!
	Write "}",!

	Write "function sendChunkToServer(seq)",!
	Write "{",!
	Write " timerid=null;",!
	Write " var txt = dataBuffer.substr(seq*chunkSize,chunkSize);",!
	Write " var transformClass = '",transformClass,"';",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsDTLWizard.BuildTestMessage","seq,transformClass,txt",1)
 	Write ";",!
	Write "}",!

	Write "function getFunctionInfo(func,sel)",!
	Write "{",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsDTLWizard.GetFunctionInfo","func,sel",1)
 	Write ";",!
	Write "}",!

	Write "</script>",!

	&html<</head>
<body onload="initDialog();">>

	#; set up hyper-event frame for this page
	Write ..HyperEventFrame(),!

	#; url parms
	Set tMode = $G(%request.Data("MODE",1))
	Set tType = $G(%request.Data("TYPE",1))
	Set tData = $G(%request.Data("DATA",1))
	Set tLang = $G(%request.Data("LANG",1))

	Set tMethod = ""
	Set tTitle = $$$TextHTML("UNKNOWN")
	Set tHelp = $$$TextHTML("Unknown type")
	
	#; get parms for page type
	If (tType = "if") {
		Set tMethod = "ActionEditor"
		Set tTitle = $Case(tMode,"new":$$$TextHTML("Add New if Action"),"edit":$$$TextHTML("Edit if Action"))
		Set tHelp = $$$TextHTML("An <if> action evaluates a condition and performs one set of actions if true, another if false.")_"<br>"_$$$TextHTML("You can edit the condition expression using the input box below:")
	}
	ElseIf (tType = "foreach") {
		Set tMethod = "ActionEditor"
		Set tTitle = $Case(tMode,"new":$$$TextHTML("Add New foreach Loop"),"edit":$$$TextHTML("Edit foreach Loop"))
		Set tHelp = $$$TextHTML("A <foreach> action defines a set of actions that are executed for each element within a collection property. Using the control below, enter a property to loop over:")
	}
	ElseIf (tType = "assign") {
		Set tMethod = "ActionEditor"
		Set tTitle = $Case(tMode,"new":$$$TextHTML("Add New assign Action"),"edit":$$$TextHTML("Edit assign Action"))
		Set tHelp = $$$TextHTML("An <assign> action assigns a value to a target property. ")
		Set tHelp = tHelp_$$$TextHTML("Using the control below, enter a value expression for the new assign action. ")
		Set tHelp = tHelp_$$$TextHTML("This is either a literal value (22, ""hello"") or a source property (source.Property):")
	}
	ElseIf (tType = "subtransform") {
		Set tMethod = "ActionEditor"
		Set tTitle = $Case(tMode,"new":$$$TextHTML("Add New subtransform Action"),"edit":$$$TextHTML("Edit subtransform Action"))
		Set tHelp = $$$TextHTML("A <subtransform> action invokes another DTL class in order to transform part of the source object into part of the target object. ")
		Set tHelp = tHelp_$$$TextHTML("Using the controls below, enter the source segment, target segment, and name of the DTL class to call. ")
	}
	ElseIf (tType = "test") {
		Set tMethod = "TestWindow"
		Set tTitle = $$$TextHTML("Transformation Test Window")
		Set tHelp = $$$TextHTML("Use the form below to enter a test message and view its transformation.")
	}
	ElseIf (tType = "list") {
		Set tMethod = "ActionList"
		Set tTitle = $$$TextHTML("Action List Window")
		Set tHelp = $$$TextHTML("The following is a list of all actions within this transformation in sequence order.")
	}
	ElseIf (tType = "FX") {
		Set tMethod = "FunctionWindow"
		Set tTitle = $$$TextHTML("DTL Function Window")
		Set tHelp = $$$TextHTML("Use the form below to choose a function to apply to the current DTL expression.")
	}

	#; draw body
	&html<<table border="0" cellpassing="1" cellspacing="0" width="100%" height="100%">
	<tr><td class="title">#(tTitle)#</td></tr>
	<tr><td class="help">#(tHelp)#</td></tr>>
	
	&html<<tr><td class="btnBar">>
	
	If (tType = "test") {
		&html<
		<input type="button" value='#($$$TextHTML("Test"))#' onclick="btnTest();"/>
		&nbsp;
		<input type="button" value='#($$$TextHTML("Close"))#' onclick="btnCancel();"/>
		&nbsp;&nbsp;&nbsp;>
	}
	Else {
		If (tType '= "FX") {
		&html<
		<input type="button" value='#($$$TextHTML(" Help "))#' onclick="btnHelp();"/>
		&nbsp;&nbsp;&nbsp;
		>
		}
		&html<
		<input type="button" value='#($$$TextHTML(" OK "))#' onclick="btnOK();"/>
		&nbsp;
		<input type="button" value='#($$$TextHTML("Cancel"))#' onclick="btnCancel();"/>
		&nbsp;&nbsp;&nbsp;>
	}
	&html<</td></tr>>
	&html<<tr><td height="80%" valign="top" class="body"><br>>
	
	#; dispatch to method to draw contents
	If (tMethod '= "") {
		Do $zobjclassmethod(..%ClassName(1),tMethod,tType,tData,tLang)
	}
	Else {
		&html<#($ZCVT($$$FormatText($$$Text("Unknown page type: %1"),tType),"O","HTML"))#>
	}

	&html<</td></tr>>

	&html<
	</table>
	</body>
	</html>>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ActionEditor">
<Description><![CDATA[
Display HTML for Action editor]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pType:%String,pData:%String,pLang:%String</FormalSpec>
<Implementation><![CDATA[
	Set tAnnotation = $G(%request.Data("annotation",1))

	If (pType = "if") {
		Set tExp = $ZCVT($$$FormatText($$$Text("%1 expression"),pLang),"O","HTML")
		&html<
		<div class="label">#($$$TextHTML("Condition"))#&nbsp;[<i>#(tExp)#</i>]</div>
		<input type="type" id="main" size="50" value="#($ZCVT(pData,"O","HTML"))#"/>&nbsp;<input type="button" id="main_fx" value="f(x)" class="btnFX" onclick="btnFX('main');"/>
		<br><br>
		<div class="label">#($$$TextHTML("Annotation"))#</div>
		<input type="type" id="annotation" size="50" value="#($ZCVT(tAnnotation,"O","HTML"))#"/>
		>
	}
	ElseIf (pType = "foreach") {
		Set tKey = $G(%request.Data("key",1))

		&html<
		<div class="label">#($$$TextHTML("Loop Property"))#</div>
		<input type="type" id="main" size="50" value="#($ZCVT(pData,"O","HTML"))#"/>>

		&html<
		<div class="label">#($$$TextHTML("Loop Key"))#</div>
		<input type="type" id="key" size="10" value="#($ZCVT(tKey,"O","HTML"))#"/>
		<br><br>
		<div class="label">#($$$TextHTML("Annotation"))#</div>
		<input type="type" id="annotation" size="50" value="#($ZCVT(tAnnotation,"O","HTML"))#"/>
		>
	}
	ElseIf (pType = "assign") {
		Set tProperty = $G(%request.Data("property",1))
		Set tAction = $G(%request.Data("action",1),"set")
		
		&html<
		<div class="label">#($$$TextHTML("Target Property"))#</div>
		<input type="type" id="property" size="50" value="#($ZCVT(tProperty,"O","HTML"))#"/>
		<br><br>
		<div class="label">#($$$TextHTML("Expression"))#&nbsp;[<i>#(pLang)#</i>]</div>
		<input type="type" id="main" size="50" value="#($ZCVT(pData,"O","HTML"))#"/>&nbsp;<input type="button" id="main_fx" value="f(x)" class="btnFX" onclick="btnFX('main');"/>
		<br><br>
		<div class="label">#($$$TextHTML("Action"))#</div>
		<select id="action">
		<option #($S(tAction="set":"selected",1:""))# value="set">#($$$TextHTML("set"))#
		<option #($S(tAction="clear":"selected",1:""))# value="clear">#($$$TextHTML("clear"))#
		<option #($S(tAction="remove":"selected",1:""))# value="remove">#($$$TextHTML("remove"))#
		<option #($S(tAction="append":"selected",1:""))# value="append">#($$$TextHTML("append"))#
		</select>
		<br><br>
		<div class="label">#($$$TextHTML("Annotation"))#</div>
		<input type="type" id="annotation" size="50" value="#($ZCVT(tAnnotation,"O","HTML"))#"/>
		>
	}
	ElseIf (pType = "subtransform") {
		Set tTargetObj = $G(%request.Data("targetObj",1))
		Set tXFClass = $G(%request.Data("xfclass",1))
		If ((pData="")&&($E(tTargetObj,1,7)="target.")) {
			#; default-- set source to matching segment
			Set pData = "source." _ $E(tTargetObj,8,*)
		}
		&html<
		<div class="label">#($$$TextHTML("Target Segment"))#</div>
		<input type="type" id="targetObj" size="50" value="#($ZCVT(tTargetObj,"O","HTML"))#"/>
		<br><br>
		<div class="label">#($$$TextHTML("Source Segment"))#</div>
		<input type="type" id="main" size="50" value="#($ZCVT(pData,"O","HTML"))#"/>
		<br><br>
		<div class="label">#($$$TextHTML("TranformClass"))#</div>
		<select id="xfclass"><option value=""></option>>
		
		Set tRS = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:SubclassOf")
		Do tRS.Execute("Ens.DataTransformDTL")
		While (tRS.Next()) {
			Set tClass = tRS.Data("Name")
			&html<<option #($S(tXFClass=tClass:"selected",1:""))# value="#(tClass)#">#(tClass)#</option>>
		}
		&html<
		</select>
		<br><br>
		<div class="label">#($$$TextHTML("Annotation"))#</div>
		<input type="type" id="annotation" size="50" value="#($ZCVT(tAnnotation,"O","HTML"))#"/>
		>
	}
]]></Implementation>
</Method>

<Method name="ActionList">
<Description><![CDATA[
Display HTML for action list window]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pType:%String,pData:%String,pLang:%String</FormalSpec>
<Implementation><![CDATA[
	&html<<div class="label">#($$$TextHTML("Action List"))#</div>
		<div id="actionList" class="actionList"></div>>
]]></Implementation>
</Method>

<Method name="TestWindow">
<Description><![CDATA[
Display HTML for test window]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pType:%String,pData:%String,pLang:%String</FormalSpec>
<Implementation><![CDATA[
	Set tInputClass = $G(%request.Data("inputClass",1))
	Set tInputDocType = $G(%request.Data("inputDocType",1))
	Set tTransform = $G(%request.Data("transformClass",1))

	If (tInputClass = "") {
		&html<#($$$TextHTML("ERROR: Input class must be provided."))#>
		Quit
	}
	If (tTransform = "") {
		&html<#($$$TextHTML("Unable to perform transform test."))#<br>
		#($$$TextHTML("Make sure you save and compile your transformation before testing it."))#<br>
		#($$$TextHTML("If this is a new transformation, reload the transformation window and try again."))#
		>
		Quit
	}

	#; lookup up saved test data
	Set tTestData = $G(^CacheTemp.EnsTestData(tTransform))

	#; if there is no test data, try to make some!
	#; create an input object
	If (tTestData = "") {
		If ($zobjclassmethod(tInputClass,"%Extends","EnsLib.HL7.Message")) {
			Set tTestData = "MSH:;~\&:ST01C:A:HNS:A:20041209100007::ADT;A08:26070901:P:2.2:26070901::AL:::::::2.2b"
		}
		ElseIf ($zobjclassmethod(tInputClass,"%Extends","%XML.Adaptor")) {
			Set tObject = $zobjclassmethod(tInputClass,"%New")
			If $IsObject(tObject) {
				Set tWriter = ##class(%XML.Writer).%New()
				Set tWriter.Indent=1
				Do tWriter.OutputToString()
				Do tWriter.RootElement("test")
				Do tWriter.Object(tObject,"")
				Do tWriter.EndRootElement()
				Set tTestData = tWriter.GetXMLString()	
				Set tWriter = ""
			}
		}
		Else {
			Set tTestData = "paste test data here..."
		}
	}

	&html<
		<div class="label">#($$$TextHTML("Input Message"))#&nbsp;&nbsp;[<i>#(tInputClass)#</i>]</div>
		<textarea class="input" id="input" rows="12" cols="120">#($ZCVT(tTestData,"O","HTML"))#</textarea>
		<br><br>
		<div class="label">#($$$TextHTML("Output Message"))#&nbsp;[<i><span id="outputClass">...</span></i>]</div>
		<div id="output" class="output"><i>#($$$TextHTML("No results"))#</i></div>
	>
]]></Implementation>
</Method>

<Method name="BuildTestMessage">
<Description><![CDATA[
Called from client to assemble test message (work-around for size limit!)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMsgNo:%Integer,pTransform:%String,pData:%String</FormalSpec>
<Implementation><![CDATA[
	#; cache input data in global
	Kill:pMsgNo=0 ^CacheTemp.EnsTestData(pTransform)
	
	If (($L($G(^CacheTemp.EnsTestData(pTransform))) + $L(pData))<32000) {
		Set ^CacheTemp.EnsTestData(pTransform) = $G(^CacheTemp.EnsTestData(pTransform)) _ pData

		#; fetch next chunk
		&js<CSPPage.sendChunk(#(pMsgNo+1)#);>
	}
	Else {
		&js<alert('#($$$TextJS("Test data must contain less than 32000 characters."))#');>
	}
]]></Implementation>
</Method>

<Method name="RunTest">
<Description><![CDATA[
Called from client to run the DTL test.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pInputClass:%String="&quot;,pTransform:%String="&quot;</FormalSpec>
<Implementation><![CDATA[
	Set $ZT="Trap"
	If (pTransform="") {
		&js<alert('#($$$TextJS("Missing or invalid DTL Transform."))#');>
		Quit
	}

	Set tData = $G(^CacheTemp.EnsTestData(pTransform))

	#; create an input object
	Set tInput = ..CreateInputObject(pInputClass,tData,.tSC)
	If $$$ISERR(tSC) { Do ShowError() Quit }

	#; apply the transform
	Set tSC = $zobjclassmethod(pTransform,"Transform",tInput, .tOutput)
	If $$$ISERR(tSC) { Do ShowError() Quit }

	#; show the results
	Do ..DisplayOutput(tOutput)
	Quit

ShowError()
	Do $System.Status.DecomposeStatus(tSC,.tErr)
	&js<var enc = CSPPage.document.getElementById('output');>
	&js<enc.innerHTML = '<span style="color:red;">#($ZCVT($ZCVT($G(tErr(1)),"O","HTML"),"O","JS"))#</span>';>
	Quit
Trap
	Set $ZT=""
	&js<var enc = CSPPage.document.getElementById('output');>
	&js<enc.innerHTML = '<span style="color:red;">#($ZCVT($ZCVT($ZE,"O","HTML"),"O","JS"))#</span>';>
	Quit
]]></Implementation>
</Method>

<Method name="CreateInputObject">
<Description><![CDATA[
Create an input message for testing.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pInputClass:%String="&quot;,pData:%String="&quot;,*pSC:%Status</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
	Set pSC = $$$OK
	Set $ZT="Trap"
	Set tObject = ""
	
	Do {
		If ($zobjclassmethod(pInputClass,"%Extends","EnsLib.EDI.Document")) {
			Set tObject = $zobjclassmethod(pInputClass,"ImportFromString",pData,.pSC)
		}
		ElseIf ($zobjclassmethod(pInputClass,"%Extends","%XML.Adaptor")) {
			#; parse input as xml
			Set tReader = ##class(%XML.Reader).%New()
		
			Set pSC = tReader.OpenString(pData)
			If $$$ISERR(pSC) Quit
		
			#; find xml name of object
			Set xmlName = $zobjclassmethod(pInputClass,"%GetParameter","XMLNAME")
			If (xmlName="") {
				Set xmlName = $P(pInputClass,".",$L(pInputClass,"."))
			}
		
			Do tReader.Correlate(xmlName,pInputClass)
			Do tReader.Next(.tObject,.pSC)
			If $$$ISERR(pSC) Quit
			Set tReader = ""
		}
		Else {
			Set tObject = $zobjclassmethod(pInputClass,"%New")
		}
	} While(0)

	Quit tObject
Trap
	Set $ZT=""
	Set pSC = $$$ERROR($$$GeneralError,$ZE)
	Quit ""
]]></Implementation>
</Method>

<Method name="DisplayOutput">
<Description><![CDATA[
Send HTML back to client to display output object]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tObject:%RegisteredObject</FormalSpec>
<Implementation><![CDATA[
	Set io="" // track mode for error trap
	Set $ZT="Trap"

	#; show output classname
	&js<CSPPage.document.getElementById('outputClass').innerHTML = '#(tObject.%ClassName(1))#';>

	#; find output div
	&js<var enc = CSPPage.document.getElementById('output');>

	#; execute object OutputHTML method and capture it as JavaScript
	If (tObject.%Extends("EnsLib.EDI.Document")) {
		Write "enc.innerHTML = '"
	}
	Else {
		// make xml appear in IE
		Write "enc.innerText = '"
	}

	#; !!!NOTE: in 5.1 ^%NLS becomes ^%SYS.NLS

	#; use JS output to properly escape HTML for JS
	Set io = $$SetIO^%NLS("JS")
	If (tObject.%Extends("EnsLib.EDI.Document")) {
		Do tObject.OutputHTML()
	}
	ElseIf (tObject.%Extends("%XML.Adaptor")) {
		Set tWriter = ##class(%XML.Writer).%New()
		Set tWriter.Indent=1
		Do tWriter.OutputToString()
		Do tWriter.RootElement("test")
		Do tWriter.Object(tObject,"")
		Do tWriter.EndRootElement()
		Write tWriter.GetXMLString()	
		Set tWriter = ""
	}
	Else {
		Write "Output object does not support XML"
	}
	Set io = $$SetIO^%NLS(io),io=""
	Write "';",!
	Quit

Trap
	Set $ZT=""
	If (io'="") {
		Set io = $$SetIO^%NLS(io),io=""
		Write "';",!
		Set escape=0		
	}
	&js<alert("ERROR in DisplayOutput: #($ZCVT($ZE,"O","JS"))#");>
	Quit
]]></Implementation>
</Method>

<Method name="FunctionWindow">
<Description><![CDATA[
Display HTML for function window]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pType:%String,pData:%String,pLang:%String</FormalSpec>
<Implementation><![CDATA[
	&html<<div class="label">Function</div>
		<select id="function" onchange="fxSelectFunction(this);">>

	&html<<option value="">>

	Set tSC = ##class(Ens.Rule.Utils).GetFunctionSet(.funcset)

	Set i="" For { Set i=$O(funcset(i),1,val)  Quit:""=i
		Set tName = $LG(val,2)_"()"
		Set tFull=$LG(val,1)_"."_$P(tName,"(") //$S(tName=..stripIndices(tFunction):tFunction,1:
		&html<<option value="#(tFull)#">#(tName)#</option>>  // #($S(tFull=tFunction:"selected",1:""))# 
	}
	&html<</select>>
	
	&html<<div id="details"><i>#($$$TextHTML("Select a function"))#</i></div>>
]]></Implementation>
</Method>

<Method name="GetFunctionInfo">
<Description><![CDATA[
Send details on given function to client.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pFunc:%String,pSelection:%String="&quot;</FormalSpec>
<Implementation><![CDATA[
	&js<var div = CSPPage.document.getElementById('details');>

	#; Write HTML and capture it as JavaScript
	Write "div.innerHTML = '"

	#; !!!NOTE: in 5.1 ^%NLS becomes ^%SYS.NLS

	#; use JS output to properly escape HTML for JS
	Set io = $$SetIO^%SYS.NLS("JS")
	Do ..GetFunctionHTML(pFunc,pSelection)
	Set io = $$SetIO^%SYS.NLS(io),io=""
	Write "';",!
]]></Implementation>
</Method>

<Method name="GetFunctionHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFunc:%String,pSelection:%String</FormalSpec>
<Implementation><![CDATA[
	Set tMethod=$P(pFunc,".",$L(pFunc,".")), tClass=$E(pFunc,1,$L(pFunc)-$L(tMethod)-1)
	
	#; description
	Do ..%DrawMethodDescription(tClass,tMethod)

	#; arguments: use formal spec
	Set tMethodObj = ##class(%Dictionary.CompiledMethod).%OpenId(tClass_"||"_tMethod)

	&html<<br><div class="arguments">>

	Set tArgList = tMethodObj.FormalSpecParsed
	For n = 1:1:$LL(tArgList) {
		Set tArgName = $LG($LG(tArgList,n),1)
		Set tArgType = $LG($LG(tArgList,n),2)
		Set tIsOptional = $LG($LG(tArgList,n),4)'=""
		Set tClientType = $$$comClassKeyGet(tArgType,$$$cCLASSclientdatatype)

		&html<<div class="label">#(tArgName)# #($S((tArgName'="value")&&tIsOptional:"[<i>optional</i>]",1:""))#</div>>

		#; test for special cases!
		If (((tMethod="Exists")||(tMethod="Lookup"))&&(tArgName="table")) {
			#; dropdown list of table names???	
			&html<<select id="p#(n)#"><option value="">>
			Set tKey="" For { Set tKey=$O(^Ens.LookupTable(tKey))  Quit:""=tKey
				&html<<option value='"#($ZCVT(tKey,"O","HTML"))#"'>&quot;#($ZCVT(tKey,"O","HTML"))#&quot;>
			}
			&html<</select>>
		} Else {
			#; if argument is called *value*; place selection into it
			Set tValue = $S(tArgName="value":pSelection,1:"")
			Set tSize = $Case(tClientType,"VARCHAR":60,"BOOLEAN":2,:12)
			&html<<input id="p#(n)#" type="text" size="#(tSize)#" value="#($ZCVT(tValue,"O","HTML"))#"/>>
			If tArgName="value" {
				&html<&nbsp;<input id="p#(n)#btn" type="button" value="..." class="btnFX" onclick="btnVal('p#(n)#');"/>>
			}
			&html<<br>>
		}
	}
	&html<</div>>
]]></Implementation>
</Method>

<Method name="%DrawMethodDescription">
<Description><![CDATA[
Write out description of the given method as HTML.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String,pMethod:%String</FormalSpec>
<Implementation><![CDATA[
	Set tDesc = $$$comMemberKeyGet(pClass,$$$cCLASSmethod,pMethod,$$$cMETHdescription)
	Do ##class(%CSP.Documatic).RenderDescription(pClass, tDesc, "<div class=""methodDescription"">", "</div>")
]]></Implementation>
</Method>
</Class>
</Export>