<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alINV.piPopulate">
<Abstract>1</Abstract>
<ClassType/>
<IncludeCode>%occInclude</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>

<Method name="CreateSourceTypes">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Initial take on of V1 data to V2
	; Load Source Types
	; 
	; History
	; 31-Jul-2008	Luke	SR15814: Change Status strStatus to sc
	; 01-May-2008   PPP 	SR15705
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	if '##class(alINV.dItemSourceType).%ExistsId("MakeBuy") {
		set objMakeBuy = ##class(alINV.dItemSourceType).%New()
		set objMakeBuy.Description = "Make or Buy"
		set objMakeBuy.Name        = "MakeBuy"
		set sc = objMakeBuy.%Save()
	} 

	if $$$ISOK(sc) {
		if '##class(alINV.dItemSourceType).%ExistsId("Buy") {
			set objBuy = ##class(alINV.dItemSourceType).%New()
			set objBuy.Description = "Buy"
			set objBuy.Name        = "Buy"
			set sc = objBuy.%Save()
		} 	
	}

	if $$$ISOK(sc) {
		if '##class(alINV.dItemSourceType).%ExistsId("Service") {
			set objService = ##class(alINV.dItemSourceType).%New()
			set objService.Description = "Service"
			set objService.Name        = "Service"
			set sc = objService.%Save()
		} 	
	}	

	if $$$ISOK(sc) {
		if '##class(alINV.dItemSourceType).%ExistsId("Make") {
			set objMake = ##class(alINV.dItemSourceType).%New()
			set objMake.Description = "Make"
			set objMake.Name        = "Make"
			set sc = objMake.%Save()
		} 	
	}		

	if $$$ISOK(sc) {
		if '##class(alINV.dItemSourceType).%ExistsId("Consumable") {
			set objConsumable = ##class(alINV.dItemSourceType).%New()
			set objConsumable.Description = "Consumable Supplies"
			set objConsumable.Name        = "Consumable"
			set sc = objConsumable.%Save()
		} 	
	}
	quit sc
]]></Implementation>
</Method>

<Method name="CreateSourcingAttributes">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Initial take on of V1 data to V2
	; Load Source Types
	; 
	; History
	; 24-Jan-2011 	PPP 	SR17652: Changed as a result of User Defined Policies
	; 10-Oct-2008  	Luke	SR16025  Removed reference to Default Policy
	; 31-Jul-2008	Luke	SR15814: Change Status strStatus to sc
	; 05-May-2008 	Luke	SR15704: Added Source attributes for LIFO and FIFO
	; 01-May-2008   PPP 	SR15705
	;-------------------------------------------------------------------------------
	set sc = $$$OK

	if ##class(alINV.dAttribute).%ExistsId("ReceiveDate") {
		set objReceiveDate = ##class(alINV.dAttribute).%OpenId("ReceiveDate")
	} else {
		set objReceiveDate = ##class(alINV.dAttribute).%New()
		set objReceiveDate.DataType  = "%Date"
		set objReceiveDate.Name      = "ReceiveDate" 
		set objReceiveDate.SortOrder = 2
	}
	
	if ##class(alINV.dAttribute).%ExistsId("ReceiptNo") {
		set objReceiptNo = ##class(alINV.dAttribute).%OpenId("ReceiptNo")
	} else {
		set objReceiptNo = ##class(alINV.dAttribute).%New()
		set objReceiptNo.DataType  = "%String"
		set objReceiptNo.Name      = "ReceiptNo"
		set objReceiptNo.SortOrder = 3
	}

	if ##class(alINV.dAttribute).%ExistsId("Lot Number") {
		set objLotNum = ##class(alINV.dAttribute).%OpenId("Lot Number")
	} else {
		set objLotNum = ##class(alINV.dAttribute).%New()
		set objLotNum.DataType  = "%String"
		set objLotNum.Name      = "Lot Number"
		set objLotNum.SortOrder = 1
	}
	
	if ##class(alINV.dAttribute).%ExistsId("Use By Date") {
		set objUseByDate = ##class(alINV.dAttribute).%OpenId("Use By Date")
	} else {
		set objUseByDate = ##class(alINV.dAttribute).%New()
		set objUseByDate.DataType  = "%Date"
		set objUseByDate.Name      = "Use By Date"
		set objUseByDate.SortOrder = 1
	}	
	
	// SR17652 - PPP SR17652- Changed as a result of User Defined Policies
	/*
    if '##class(alSOH.dSourcingPolicy).CheckExists("Blank Policy","Storage") {
		if $$$ISOK(sc) {
			set objClassPol1 = ##class(alSOH.dSourcingPolicy).%New()
			set objClassPol1.Description = "Blank Policy"
			set objClassPol1.IsDefault   = $$$YES    // SR16025
			set objClassPol1.SourceType  = "Storage"

			set sc = objClassPol1.%Save()
			if $$$ISOK(sc) set status = objClassPol1.%Close()
		}
	}
	
	if '##class(alSOH.dSourcingPolicy).CheckExists("Lot Num Policy","FIFO") {
		if $$$ISOK(sc) {
			set objClassPol2 = ##class(alSOH.dSourcingPolicy).%New()
			set objClassPol2.Description = "Lot Num Policy"
			set objClassPol2.IsDefault   = $$$NO
			set objClassPol2.SourceType  = "FIFO"
			
			set objPOLA1 = ##class(alINV.dPolicyAttribute).%New()	
			set objPOLA1.ItemPolicy = objClassPol2
			set objPOLA1.Attribute  = objLotNum

			set sc = objClassPol2.%Save()
			if $$$ISOK(sc) set status = objClassPol2.%Close()
		}
	}
	
	if '##class(alSOH.dSourcingPolicy).CheckExists("Lot Num Policy","LIFO") {
		if $$$ISOK(sc) {
			set objClassPol2 = ##class(alSOH.dSourcingPolicy).%New()
			set objClassPol2.Description = "Lot Num Policy"
			set objClassPol2.IsDefault   = $$$NO
			set objClassPol2.SourceType  = "LIFO"
			
			set objPOLA1 = ##class(alINV.dPolicyAttribute).%New()	
			set objPOLA1.ItemPolicy = objClassPol2
			set objPOLA1.Attribute  = objLotNum

			set sc = objClassPol2.%Save()
			if $$$ISOK(sc) set status = objClassPol2.%Close()
		}
	}
	
	if '##class(alSOH.dSourcingPolicy).CheckExists("Use By Date Policy","FEFO") {
		if $$$ISOK(sc) {
			set objClassPol3 = ##class(alSOH.dSourcingPolicy).%New()
			set objClassPol3.Description     = "Use By Date Policy"
			set objClassPol3.IsDefault       = $$$NO
			set objClassPol3.SourceType      = "FEFO"
			set objClassPol3.SourceAttribute = objUseByDate
			
			set objPOLA1 = ##class(alINV.dPolicyAttribute).%New()	
			set objPOLA1.ItemPolicy = objClassPol3
			set objPOLA1.Attribute  = objLotNum
			
			set objPOLA2 = ##class(alINV.dPolicyAttribute).%New()	
			set objPOLA2.ItemPolicy = objClassPol3
			set objPOLA2.Attribute  = objUseByDate

			set sc = objClassPol3.%Save()
			if $$$ISOK(sc) set status = objClassPol3.%Close()
		}
	}
	*/
	//PPP SR17652- Changed as a result of User Defined Policies
	if '$data(^INItemPolicy) {
		//Set a Default One
		set ^INItemPolicy(0,1,1)="Blank Policy~~~1~1~~~~~"
	}
	
	set idPolicy=""
	for {
		quit:$$$ISERR(sc)

		set idPolicy = $order(^INItemPolicy(0,idPolicy)) 
		quit:idPolicy=""
	
		set sc = ##class(alSOH.dUSourcingPolicy).ConvertOnSave(idPolicy)
		
	}
		
	quit sc
]]></Implementation>
</Method>

<Method name="DeleteAllData">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Initial take on of V1 data to V2
	; Delete all relevant D2 data
	; 
	; History
	; 09-Nov-2009	GRF		Remove commented calls to %DeleteExtent & %PurgeIndices
	; 22-Dec-2008	HQN		SR16250: Missed alINV.dItemFin as part of the purge
	; 30-Jul-2008	Luke	SR15817: Unit, and Unit Type Deletion 
	; 02-May-2008 	Luke 	Added Status checks, moved SOH deletion to SOH 
	; 						Added %PurgeIndices to each class to fully clean them 
	; 02-May-2008   PPP 	SR15705
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	if $$$ISOK(sc) set sc = ##class(alINV.dAttribute).%KillExtent()
	if $$$ISOK(sc) set sc = ##class(alINV.dItem).%KillExtent()
	if $$$ISOK(sc) set sc = ##class(alINV.dItemGroup).%KillExtent()
	if $$$ISOK(sc) set sc = ##class(alINV.dItemPolicy).%KillExtent()
	if $$$ISOK(sc) set sc = ##class(alINV.dItemSourceType).%KillExtent()
	if $$$ISOK(sc) set sc = ##class(alINV.dPolicyAttribute).%KillExtent()
	if $$$ISOK(sc) set sc = ##class(alINV.dUnitPolicy).%KillExtent()
	if $$$ISOK(sc) set sc = ##class(alSOH.piPopulate).DeleteAllData()
	if $$$ISOK(sc) set sc = ##class(alDRP.dMovement).%KillExtent()
	if $$$ISOK(sc) set sc = ##class(alINV.uiPolicyAttrTrans).%KillExtent()
	if $$$ISOK(sc) set sc = ##class(alINV.dItemFin).%KillExtent()
	
	quit sc
]]></Implementation>
</Method>

<Method name="CreateV2SupportData">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Initial take on of V1 data to V2
	; Load of all the Supporting Classes
	; 1. Source Types
	; 2. Attributes
	; 3. Source Policies
	; 4. Item Groups
	; 5. Units
	; 6. Policy Attributes
	; 
	; History
	; 01-May-2008   PPP 	SR15705
	;-------------------------------------------------------------------------------
	set sc = $$$OK

	// Creation of V2 support objects
	if $$$ISOK(sc) set sc = ..CreateSourceTypes()
	if $$$ISOK(sc) set sc = ..CreateSourcingAttributes()
	if $$$ISOK(sc) set sc = ##class(alINV.dUItemGroup).LoadV2()
	if $$$ISOK(sc) set sc = ##class(alINV.dUUnit).ConvertUnits()
	if $$$ISOK(sc) set sc = ##class(alINV.uiPolicyAttrTrans).Populate()

	quit sc
]]></Implementation>
</Method>

<Method name="CreateAllItems">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Initial take on of V1 data to V2
	; Load Item Groups and Policies first?
	; 
	; History:
	; 07-Oct-2008	GRF		Peer review - variable prefixes; cleanup
	; 15-May-2008 	PPP 	SR15732 added 'WHERE Company = 0' to the SQL
	; 12-May-2008 	Luke    SR15732: removed quit on error and collected errors to
	; 							display to user
	; 26-Feb-2008	GRF		SR15622: Created
	;-------------------------------------------------------------------------------
	set sc     = $$$OK
	set softSC = $$$OK
	set tmeStarted = $piece($horolog,",",2)

	set intTotCount = 0
	set idItem = ""
	for {
		set idItem = $order(^INART(0,idItem))
		quit:idItem=""
		
		set intTotCount = intTotCount + 1
	}
	
	write !,"Processing INART"_" ("_intTotCount_" Records)",!
	
	set intCount = 0
	set idItem = ""
	for {
		set idItem = $order(^INART(0,idItem))
		quit:idItem=""
		
		set sc = ##class(alINV.dUItem).ConvertOnSave(idItem)
		if $$$ISERR(sc) {  
			set strErrMessage = ""
			do DecomposeStatus^%apiOBJ(sc,.errlist,"-d")
			for loop=1:1:errlist {
				set strErrMessage = errlist(loop)
			}
			
			set ^ConvertErr($i(^ConvertErr)) = strErrMessage     ; FIXME : Global Name - Module Prefix COM?
			set softSC = $$$ADDSC(softSC,sc)
			set sc     = $$$OK 
		}
		set intCount = intCount + 1

		write:intCount#100=0 !,intCount
		write "."
	}

	set tmeFinished = $piece($horolog,",",2)
	set tmeOverall  = tmeFinished - tmeStarted
	write !,"Total Item Count            : " _ intTotCount
	write !,"Records Processed           : " _ intCount
	write !,"Time Taken to process Items : " _ $ztime(tmeOverall,1)

	if $$$ISERR(softSC) {
		write !!,"Some errors occured in the Conversion process"
		write !,"These are also saved in the ^ConvertErr global"
		do DecomposeStatus^%apiOBJ(softSC,.errlist,"-d")
		for loop=1:1:errlist {
			write !,errlist(loop)
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="CreateUnitPolicy">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Initial take on of V1 data to V2 - Item Unit Policy
	; 
	; History    
	; 
	; 31-Jul-2008	Luke	SR15814: Change Status strStatus to sc
	; 27-May-2008	GRF		Spelling
	; 01-May-2008   PPP 	SR15705
	;-------------------------------------------------------------------------------
	set sc       = $$$OK
	set blnUnitPolExist = $$$NO
	
	if pidItem '= "" {
		do ##class(alINV.dUnitPolicy).%DeleteId(pidItem)
	} else  {
		do ##class(alINV.dUnitPolicy).%DeleteExtent()
		do ##class(alINV.dUnitPolicy).%PurgeIndices()
	}

	set rs = ##class(%ResultSet).%New()
	set strSQL="select ID from SQLUser.INART where Company = 0"

	set strAddSQL=""
	if pidItem '= "" {
		set strAddSQL=" AND ItemNumber = '"_pidItem_"'"
	}
	
	do rs.Prepare(strSQL_strAddSQL)
	do rs.Execute()
	
	set objItemV1 = ""
	
	while (rs.Next(.sc)) {
		if ($SYSTEM.Status.IsOK(sc)) {  // check if this succeeded without errors
			set idItem=rs.Data("ID")
		
			set objItemV1 =##class(alINV.dUItem).%OpenId(idItem,1)
			set blnUnitPolExist = $$$NO
			
			if ##class(alINV.dUnitPolicy).%ExistsId(objItemV1.ItemNumber) {
				set objUnitPolicy = ##class(alINV.dUnitPolicy).%OpenId(objItemV1.ItemNumber)
				set blnUnitPolExist = $$$YES
			} else {
				set objUnitPolicy = ##class(alINV.dUnitPolicy).%New()
			}
		
	//testing the base unit on INART, if this is Null, we assign each as the base
			if objItemV1.UnitofMeasure = "" {
				set tempBaseUnit = 1
			} else {
				set tempBaseUnit = objItemV1.UnitofMeasure
			}
				
	/// Check the existance of the base unit within the current stored units 
			if blnUnitPolExist {
				set objV1baseType = ##class(alINV.dUUnit).getUnitType(tempBaseUnit)
				set blnBaseFound = $$$NO
				for loopBaseUnit = 1:1:objUnitPolicy.Units.Count() {
					set tempUnit = objUnitPolicy.Units.GetAt(loopBaseUnit)
					if tempUnit.Type = objV1baseType {
						set BaseUnit = tempUnit
						set BaseUnit.Type =  objV1baseType
						set BaseUnit.ConversionFromBase = 1	
						set blnBaseFound = $$$YES
						quit 
					} 
				}
				if 'blnBaseFound {
					set BaseUnit = ##class(alINV.dUnit).%New()
					set BaseUnit.Type =  ##class(alINV.dUUnit).getUnitType(tempBaseUnit)
					set BaseUnit.ConversionFromBase = 1	
					do objUnitPolicy.Units.Insert(BaseUnit)
				}
			} else {
				set BaseUnit = ##class(alINV.dUnit).%New()
				set BaseUnit.Type =  ##class(alINV.dUUnit).getUnitType(tempBaseUnit)
				set BaseUnit.ConversionFromBase = 1	
				do objUnitPolicy.Units.Insert(BaseUnit)
			}
			if BaseUnit = "" {
				write !,"BASE UNIT NULL"
			}
			set objUnitPolicy.BaseUnit = BaseUnit
			
			set objV2Item = ##class(alINV.iUINV).GetItem(objItemV1.ItemNumber,.sc)
			
			set rs2 = ##class(%ResultSet).%New()
			do rs2.Prepare("select ID from SQLUser.INARTPACK where Company = ? AND ItemNo ?")
			do rs2.Execute(0, objItemV1.ItemNumber)
			
			while (rs2.Next(.sc)) {
				if ($SYSTEM.Status.IsOK(sc)) {  // check if this succeeded without errors
					set objV1 =##class(User.INARTPACK).%OpenId(rs2.Data("ID"),1)	
					
					if tempBaseUnit = objV1.Unit {
						//Loop through current Unit to see if it already exists 
						set objV1baseType = ##class(alINV.dUUnit).getUnitType(objV1.PackingUnit)
						set blnFound = $$$NO
						for loopBaseUnit = 1:1:objUnitPolicy.Units.Count() {
							set tempUnit = objUnitPolicy.Units.GetAt(loopBaseUnit)
							if tempUnit.Type = objV1baseType {
								set tempPackUnit                    = tempUnit
								set tempPackUnit.Type               = objV1baseType
								set tempPackUnit.ConversionFromBase = objV1.Quantity
								set blnFound                        = $$$YES
								quit 
							} 
						}
						if 'blnFound {
							set tempPackUnit                    = ##class(alINV.dUnit).%New()
							set tempPackUnit.Type               = ##class(alINV.dUUnit).getUnitType(objV1.PackingUnit)
							set tempPackUnit.ConversionFromBase = objV1.Quantity
						}
		
						if BaseUnit.Type.DataType = tempPackUnit.Type.DataType {
							if $$$ISOK(sc) {
								set sc =  objUnitPolicy.Units.Insert(tempPackUnit)			
							}	
						} else {
		/////  TODO: error catch where unit cannot be converted 
		/////        because they are of different types 
						}
					}			
				}
			}
			
			if $$$ISOK(sc) {
				set objUnitPolicy.Item = objV2Item
				set sc =  objUnitPolicy.%Save()
			}
			quit:$$$ISERR(sc)
		}
	}

	if $$$ISERR(sc) {
		set strMessage = ""
		do DecomposeStatus^%apiOBJ(sc,.errlist,"-d")
		for loopK=1:1:errlist {
			set strMessage = strMessage_errlist(loopK)
		}
		write !!,objItemV1.ItemNumber_"    " _strMessage
	}
	quit sc
]]></Implementation>
</Method>

<Method name="ConvertAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; TOTAL Initial take on of V1 data to V2
	; Load of all the Supporting Classes, Items & SOH
	; 
	; History
	; 30-Jul-2008	Luke	SR15817: Removed Unit Policy Creation 
	; 27-May-2008	GRF		error variable was incorrect - standardised
	; 21-May-2008	HQN		SR15764: Return complete only on success
	; 02-May-2008 	Luke	SR15705 - Made calls to private interface for population 
	; 01-May-2008   PPP 	SR15705 - Copied from alINV.iINV::OnBuild
	;-------------------------------------------------------------------------------
	set sc     = $$$OK
	set $ztrap = "ConvertAllError"
	
	write !,"Deleting Existing Data"
	if $$$ISOK(sc) set sc = ##class(alINV.piPopulate).DeleteAllData()

	write !,"Creating Support Data"
	if $$$ISOK(sc) set sc = ##class(alINV.piPopulate).CreateV2SupportData()
	
	write !,"Creating Items"
	if $$$ISOK(sc) set sc = ##class(alINV.piPopulate).CreateAllItems()

	//write !,"Creating Item Unit Policies"
	//if $$$ISOK(sc) set sc = ##class(alINV.piPopulate).CreateUnitPolicy()

	write !,"Creating SOH Support Data"
	if $$$ISOK(sc) set sc = ##class(alSOH.iSOH).ConvertSOH()
	
	quit sc

ConvertAllError
	; clear $ecode, stack dump can occur
	set $ecode = ""
	write !,$zerror	
	quit $$$ERROR(0,$zerror)
]]></Implementation>
</Method>

<Method name="ConvertItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Initial take on of V1 data to V2 - Item Details
	; 
	; History
	; 23-Dec-2008	HQN		SR16250: ItemFin already removed via 
	; 						alINV.dItem::%OnDelete()
	; 						Item::%Id() no longer prepended by 0
	; 30-Jul-2008	Luke	SR15817: Removed Unit Policy Creation 
	; 01-May-2008   PPP 	SR15705
	;-------------------------------------------------------------------------------
	set sc     = $$$OK
	set $ztrap = "ConvertItemError"
	
	if $get(pidItem)="" write !,"Invalid Item" quit $$$ERROR(0,"Invalid Item")
	
	write !,"Converting Item "_pidItem
	
	;do ##class(alINV.dItem).%DeleteId("0||"_pidItem)
	do ##class(alINV.dItem).%DeleteId(pidItem)
	;do ##class(alINV.dItemFin).%DeleteId("0||"_pidItem)

	// ITEM
	if $$$ISOK(sc) set sc = ##class(alINV.dUItem).ConvertOnSave(pidItem) 

	// ITEM POLICY
	//if $$$ISOK(sc) set sc = ##class(alINV.piPopulate).CreateUnitPolicy(pidItem) //SR15817:

	// SOH
	if $$$ISOK(sc) set sc = ##class(alSOH.iSOH).ConvertSOH(pidItem)

	write !,"Conversion Complete for "_pidItem

	quit sc

ConvertItemError
	; clear $ecode, stack dump can occur
	set $ecode = ""
	write !,$zerror	
	quit $$$ERROR(0,$zerror)
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^alINV.piPopulateD</DataLocation>
<DefaultData>piPopulateDefaultData</DefaultData>
<IdLocation>^alINV.piPopulateD</IdLocation>
<IndexLocation>^alINV.piPopulateI</IndexLocation>
<StreamLocation>^alINV.piPopulateS</StreamLocation>
<Data name="piPopulateDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>