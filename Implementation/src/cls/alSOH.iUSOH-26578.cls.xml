<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSOH.iUSOH">
<ClassType/>
<IncludeCode>INConst</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>alSOH.iSOH</Super>

<Method name="GetMovementsViaINWE">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidCompany:%String,pidItem:%String,pidLocn:%String,pidStore:%String,pdteReceived:%String</FormalSpec>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Retrieves Bundle that were affected by this specific INWE record,
	; we should always know which dAttribute a data field in an INWE matches with
	; Rename to GetBundleViaINWE ?
	; 
	; Called By: No longer called - Class INWE is DEPRECATED
	; 
	; History:
	; 07-May-2008	HQN 	Corrected LotNo lookup, INWE may not have LotNo set on it
	; 05-May-2008	HQN		SR15711: Now returns a collection of dMovements applicable
	; 							to this INWE record
	;-------------------------------------------------------------------------------
	set objMovements = ##class(%Library.ListOfObjects).%New()
	set objItem      = ##class(alINV.dItem).%OpenId(pidItem)
	set objResultSet = ##class(%Library.ResultSet).%New("%DynamicQuery:SQL")
	
	set strWhereSql = ""
	set strFromSql  = ""
	set strLookupValues = """"_objItem.%Id()_""","""_pidLocn_"||"_pidStore_""""
	set strINWE = $get(^INWE(pidCompany,pidItem,pidLocn,pidStore,pdteReceived,1))
	
	for loopAttr=1:1:objItem.ItemPolicy.Attributes.Count() {
		set objAttr     = objItem.ItemPolicy.Attributes.GetAt(loopAttr).Attribute
		set strFromSql  = strFromSql_" join alSOH.dBundleAttribute as att"_loopAttr_" on att"_loopAttr_".bundle=dmovement.bundle->id"
	;	set strWhereSql = strWhereSql_" AND att"_loopAttr_".AttributeValue = ? AND att"_loopAttr_".AttributeName="""_objAttr.Name_""""
		
		if objAttr.Name = "Lot Number" {
			set strLotNumber = $$$INWELotNo(strINWE)
			set:($$$INWELotNo(strINWE) '= "") strLookupValues = strLookupValues_","""_$$$INWELotNo(strINWE)_""""
			if ($$$INWELotNo(strINWE) = "") {
				set strLotNumber = $piece(pdteReceived,".",2)
				set:(strLotNumber = "") strLotNumber = 0
				set strLookupValues = strLookupValues_","""_strLotNumber_""""
			}
			set strWhereSql = strWhereSql_" AND att"_loopAttr_".AttributeValue = """_strLotNumber_""" AND att"_loopAttr_".AttributeName="""_objAttr.Name_""""
		
		} elseif objAttr.Name = "Purchase Cost" {
			set fltPrice = $$$INWEUnitPrice(strINWE)
			set strLookupValues = strLookupValues_","""_$get(fltPrice,0)_""""
			set strWhereSql = strWhereSql_" AND att"_loopAttr_".AttributeValue = """_fltPrice_""" AND att"_loopAttr_".AttributeName="""_objAttr.Name_""""
		
		} elseif objAttr.Name = "ReceiptNo" {
			set strReceiptNo = $piece(pdteReceived,".",2)
			set:(strReceiptNo = "") strReceiptNo = 0
			set strLookupValues = strLookupValues_","""_strReceiptNo_""""
			set strWhereSql = strWhereSql_" AND att"_loopAttr_".AttributeValue = """_strReceiptNo_""" AND att"_loopAttr_".AttributeName="""_objAttr.Name_""""
		
		} elseif objAttr.Name = "ReceiveDate" {
			set strLookupValues = strLookupValues_","""_$piece(pdteReceived,".",1)_""""
			set strWhereSql = strWhereSql_" AND att"_loopAttr_".AttributeValue = """_$piece(pdteReceived,".",1)_""" AND att"_loopAttr_".AttributeName="""_objAttr.Name_""""
		
		} elseif objAttr.Name = "Storage" {
			set strLookupValues = strLookupValues_","""_pidStore_""""
			set strWhereSql = strWhereSql_" AND att"_loopAttr_".AttributeValue = """_pidStore_""" AND att"_loopAttr_".AttributeName="""_objAttr.Name_""""
		
		} elseif objAttr.Name = "Use By Date" {
			set strLookupValues = strLookupValues_","""_$$$INWEUseableUntilDate(strINWE)_""""
			set strWhereSql = strWhereSql_" AND att"_loopAttr_".AttributeValue = """_$$$INWEUseableUntilDate(strINWE)_""" AND att"_loopAttr_".AttributeName="""_objAttr.Name_""""
		}
	}
	
	set strSql = "SELECT dMovement.%ID FROM alDRP.dMovement AS dMovement"_strFromSql_" WHERE Item = ? AND ToStorage = ?"_strWhereSql
	if objResultSet.Prepare(strSql) {
		if objResultSet.Execute(pidItem,pidLocn_"||"_pidStore) {
			while objResultSet.Next() {
				set pidMovement = objResultSet.Data("ID")
				set objMovement = ##class(alDRP.dMovement).%OpenId(pidMovement)
				do objMovements.Insert(objMovement)
			}
		}		
	}
	quit objMovements
]]></Implementation>
</Method>

<Method name="GetHistoriesViaINWE">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidCompany:%String,pidItem:%String,pidLocn:%String,pidStore:%String,pdteReceived:%String</FormalSpec>
<ReturnType>%Library.ArrayOfObjects</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Retrieves all affected alSOH.dStockHistory records affected by this INWE
	; record
	; 
	; Called By: No longer called - Class INWE is DEPRECATED
	; 
	; FIXME : <GRF> Should break objItem.ItemPolicy.Attributes.GetAt(loopAttr).Attribute
	;               into smaller segments, checking for NULLOREF.
	;               
	;               Should we be reporting error for null attribute values if 
	;               required by policy?
	; 
	; History:
	; 16-Sep-2008	HQN		SR15919: Corrected BundleAttribute lookup since
	; 							bundleattributes was removed, corrected date format
	; 							comparison
	; 12-May-2008	HQN		SR15711: Created
	;-------------------------------------------------------------------------------
	set objHistories = ##class(%Library.ArrayOfObjects).%New()
	set objItem      = ##class(alINV.iUINV).GetItem(pidItem, .sc)
	do objItem.%DowngradeConcurrency(0)
	set strBundleValues = "%"
	
	if $$$ISOK(sc) {
		set strINWE = $get(^INWE(pidCompany,pidItem,pidLocn,pidStore,pdteReceived,1))
		if strINWE '= "" {
			for loopAttr=1:1:objItem.ItemPolicy.Attributes.Count() {
				set objAttr = objItem.ItemPolicy.Attributes.GetAt(loopAttr).Attribute  ; see FIXME ^^^
				
				if objAttr.Name = "Lot Number" {
					set strLotNumber = $$$INWELotNo(strINWE)
					if ($$$INWELotNo(strINWE) = "") {
						set strLotNumber = $piece(pdteReceived,".",2)
						set:(strLotNumber = "") strLotNumber = 0
					}
					set strBundleValues = strBundleValues_objAttr.Name_"%"_strLotNumber_"%"
				
				} elseif objAttr.Name = "Purchase Cost" {
					set fltPrice = $$$INWEUnitPrice(strINWE)
					set strBundleValues = strBundleValues_objAttr.Name_"%"_$get(fltPrice,0)_"%"
				
				/*} elseif objAttr.Name = "ReceiptNo" {
					set strReceiptNo = $piece(pdteReceived,".",2)
					set:(strReceiptNo = "") strReceiptNo = 0
					set strBundleValues = strBundleValues_objAttr.Name_"%"_strReceiptNo_"%"
				*/
				
				} elseif objAttr.Name = "ReceiveDate" {
					set strBundleValues = strBundleValues_objAttr.Name_"%"_$piece(pdteReceived,".",1)_"%"
				
				} elseif objAttr.Name = "Storage" {
					set strBundleValues = strBundleValues_objAttr.Name_"%"_pidStore_"%"
				
				} elseif objAttr.Name = "Use By Date" {
					set strBundleValues = strBundleValues_objAttr.Name_"%"_$zdate($$$INWEUseableUntilDate(strINWE))_"%" ; SR15919 16-Sep-2008 HQN
				}
			}
		}
		set objResultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	;	if objResultSet.Prepare("SELECT %ID FROM alSOH.dStockHistory WHERE item = ? AND storage = ? and bundleattributes like ?") { ; SR15919
		if objResultSet.Prepare("SELECT %ID FROM alSOH.dStockHistory WHERE item = ? AND storage = ? and bundle->description like ?") {
			if objResultSet.Execute(pidItem,pidLocn_"||"_pidStore,strBundleValues) {
				while objResultSet.Next() {
					set objHistory = ##class(alSOH.dStockHistory).%OpenId(objResultSet.Data("ID"))
					do objHistories.SetAt(objHistory,objHistory.%Id())
				}
			}
		}
	}
	quit objHistories
]]></Implementation>
</Method>

<Method name="IsSynced">
<ClassMethod>1</ClassMethod>
<FormalSpec>blnCorrect=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Check whether the V2 data is in sync with the V1 data
	; Double pass - Check INWE records 
	; 
	; NOTE : Class INWE is DEPRECATED
	; 
	; Input : blnCorrect - if $$$YES then fix the V1 data
	; 
	; History:
	; 10-Feb-2009	HQN		SR16323: Added Bundle Sync Check
	; 24-Oct-2008	GRF		SR15902: Check all items - not just those on INWE;
	; 							Cross-check using IsSyncedStorage
	; 23-Oct-2008	GRF		SR15902: call $$$VAR first; comments
	; 18-Sep-2008	Luke	SR15902: Added Call to sync via Storage
	; 11-Sep-2008   Luke 	SR15902: Added bln for sync process 
	; 05-May-2008	HQN		SR15711: Split Method into IsSyncedViaItem [IsSyncedGoodsIn]
	; 23-Apr-2008	HQN		SR15672: Moved from IsSyncedBundleStock()
	; 15-Apr-2008	HQN		SR15672: Created
	;-------------------------------------------------------------------------------
	$$$VAR
	set sc        = $$$OK
	set idCompany = 0
	
	kill ^CacheTempiUSOH($znspace,$job,"Item")
	set idItem = ""
	for {
		set idItem = $order(^INART(idCompany,idItem))
		quit:idItem=""
		
		set ^CacheTempiUSOH($znspace,$job,"Item",idItem) = ""
	}
	set rs = ##class(%Library.ResultSet).%New()
	set sc = rs.Prepare("SELECT ID FROM alINV.dItem")     ; TODO : objItem.SourceType.Name '= "Consumable"
	if $$$ISOK(sc) set sc = rs.Execute()
	if $$$ISOK(sc) {
		while rs.Next() {
			set objItem = ##class(alINV.dItem).%OpenId(rs.Data("ID"))
			if objItem'=$$$NULLOREF set ^CacheTempiUSOH($znspace,$job,"Item",objItem.%Id()) = ""
		}
	}
	set idItem    = ""
	for {
	;	set idItem = $order(^INWE(idCompany,idItem))
		set idItem = $order(^CacheTempiUSOH($znspace,$job,"Item",idItem))
		quit:idItem=""
		
		if 'blnCorrect {   // Only report the Differences; don't double report 
		;	SOFT ERRORS RECORD SYNC FAULTS TO BE FIXED
			
		;	FIXME : What if many sync situations - can we blow out 32K string MAXSTRING in sc? <GRF>
		/*	perhaps
			kill ^CacheTempiUSOH($znspace,$job,"Tested",idItem)
			set scCheck = ..IsSyncedGoodsIn(idItem)
			if $$$ISERR(scCheck) set ^CacheTempiUSOH($znspace,$job,"Result",idItem,1) = scCheck   ; Pass 1
			
			set scCheck = ..IsSyncedStorage(idItem)
			if $$$ISERR(scCheck) set ^CacheTempiUSOH($znspace,$job,"Result",idItem,2) = scCheck   ; Pass 2
			kill ^CacheTempiUSOH($znspace,$job,"Tested",idItem)
		*/
			kill ^CacheTempiUSOH($znspace,$job,"Tested",idItem)
			set sc = $$$ADDSC(..IsSyncedGoodsIn(idItem),sc)
			set sc = $$$ADDSC(..IsSyncedStorage(idItem),sc)
			set sc = $$$ADDSC(..IsSyncedBundles(idItem),sc) ; SR16323
			kill ^CacheTempiUSOH($znspace,$job,"Tested",idItem)
			
		} else {           // Correct the Differences - clears first set so won't see a second time
		;	HARD ERRORS STOP PROCESSING
			TSTART
			set sc     = ..SyncViaGoodsIn(idItem)
			if $$$ISOK(sc) {
				set sc = ..SyncViaStorage(idItem)
			}
			if $$$ISOK(sc) {
				IF $TLEVEL>0 TCOMMIT
			} else {
				TROLLBACK
				quit
			}
		}
	;	set objItem = ##class(alINV.dItem).%OpenId(idItem,0)
	}
	kill ^CacheTempiUSOH($znspace,$job,"Item")
	quit sc
]]></Implementation>
</Method>

<Method name="IsSyncedGoodsIn">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Sum of INWE records for Storage must equal sum of bundles for that storage
	; 
	; NOTE : Class INWE is DEPRECATED
	;
	; History:
	; 23-Oct-2008	GRF		SR15902: REWORKED - see zzRetain.alSOH.iUSOH
	; 23-Oct-2008	GRF		SR15902: Relocate storage error message since never
	; 							executed; added location error message
	; 25-Sep-2008	Luke	SR15955: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set objItem = ##class(alINV.iUINV).GetItem(pidItem,.sc)
	if objItem=$$$NULLOREF {
		set sc = $$$ADDSC($system.Status.Error(5001,"Item :"_pidItem_"   does not exist under V2"),sc)
	} else {
		do objItem.%DowngradeConcurrency(0)
	}
	
	if $$$ISOK(sc) && (objItem.SourceType.Name '= "Consumable") {
		set idCompany = 0
		
		set idLocn = ""
		for {
			set idLocn = $order(^INWE(idCompany,pidItem,idLocn))
			quit:idLocn=""
			
			set objLocn = ##class(alLOC.iLOC).GetLocation(idLocn,.tempStatus)
			set sc = $$$ADDSC(tempStatus,sc)
			if objLocn = $$$NULLOREF {
				set sc = $$$ADDSC($system.Status.Error(5001,"Location :"_idLocn_"   does not exist"),sc)
				continue
			}
			
			set idStore = ""
			for {
				set idStore = $order(^INWE(idCompany,pidItem,idLocn,idStore))
				quit:(idStore = "")
				
				set objStore = ##class(alLOC.iLOC).GetStorage(idLocn,idStore,.tempStatus)
				if objStore = $$$NULLOREF {
					set sc = $$$ADDSC($system.Status.Error(5001,"Storage :"_idStore_"   at   Location :"_idLocn_"   does not exist"),sc)
					continue
				}
				
				set fltV1Qty = 0
				set dteReceived = ""
				for {
					set dteReceived = $order(^INWE(idCompany,pidItem,idLocn,idStore,dteReceived))
					quit:(dteReceived = "")
					
					set objINWE = $get(^INWE(idCompany,pidItem,idLocn,idStore,dteReceived,1))
					set fltV1Qty = fltV1Qty + $$$INWEQuantity(objINWE) + $$$INWETotalReservedQuantity(objINWE)
				}
				
				set ^CacheTempiUSOH($znspace,$job,"Tested",pidItem,idLocn,idStore) = ""
				
				set objSOH = ##class(alSOH.dSOH).%OpenId(pidItem_"||"_idLocn_"||"_idStore ,0)
				if objSOH = $$$NULLOREF {
					set fltV2Qty = 0	
				} else {
					set fltV2Qty = objSOH.QtyOnHand
				}
				
				if (fltV1Qty - fltV2Qty) '= 0 { 
					set sc = $$$ADDSC($system.Status.Error(5001,"alSOH.dSOH out of sync, Location("_idLocn_"),Item("_pidItem_"),Storage("_idStore_"), INWE Qty:"_fltV1Qty_" SOH Qty:"_fltV2Qty),sc)
				}
			}
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="IsSyncedStorage">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; NOTE : Class INWE is DEPRECATED
	;
	; History:
	; 24-Oct-2008	GRF		SR15902: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set rs = ##class(%Library.ResultSet).%New("alSOH.dSOH:GetStorages")
	;set rs = ##class(%Library.ResultSet).%New()
	;set sc = rs.Prepare("SELECT ID FROM alSOH.dSOH WHERE Item = ?")
	
	if $$$ISOK(sc) set sc = rs.Execute(pidItem)
	if $$$ISOK(sc) {
		while rs.Next() {
			set objSOH = ##class(alSOH.dSOH).%OpenId(rs.Data("ID"))
			
			set objItem  = objSOH.Item
			set idLocn   = objSOH.Storage.Location.Code
			set idStore  = objSOH.Storage.Code
			set fltV2Qty = objSOH.QtyOnHand
			
			; Only cross-check if not previously reported
			if '$data(^CacheTempiUSOH($znspace,$job,"Tested",pidItem,idLocn,idStore)) {
				if (objItem.SourceType.Name '= "Consumable") {
					set idCompany = 0
					set fltV1Qty  = 0
					
					set dteReceived = ""
					for {
						set dteReceived = $order(^INWE(idCompany,pidItem,idLocn,idStore,dteReceived))
						quit:(dteReceived = "")
						
						set objINWE = $get(^INWE(idCompany,pidItem,idLocn,idStore,dteReceived,1))
						set fltV1Qty = fltV1Qty + $$$INWEQuantity(objINWE) + $$$INWETotalReservedQuantity(objINWE)
					}
					
					if (fltV1Qty - fltV2Qty) '= 0 {
						set sc = $$$ADDSC($system.Status.Error(5001,"INWE out of sync,       Location("_idLocn_"),Item("_pidItem_"),Storage("_idStore_"), INWE Qty:"_fltV1Qty_" SOH Qty:"_fltV2Qty),sc)
					}
				}	
			}
		}
	}
	do rs.%Close()
	quit sc
]]></Implementation>
</Method>

<Method name="SyncViaGoodsIn">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Run through INWE records for the item
	; 	If Location mismatch : Update INWE records at an Item/Locn level
	; 	If Storage mismatch  : Update INWE records at an Item/Locn/Storage level
	;   Get INWE total
	;   Get dSOH total
	;   If totals mismatch   : run UpdateINWE
	; 
	; NOTE : Class INWE is DEPRECATED
	;
	; History:
	; 23-Oct-2008	GRF		SR15902: REWORKED - see zzRetain.alSOH.iUSOH
	; 21-Oct-2008	HQN		SR15902: Corrected GetQty* calls
	; 18-Sep-2008	Luke	SR15902: Removed code that interacts with INWE and made sep call
	; 11-Sep-2008	Luke	SR15902: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set objItem = ##class(alINV.iUINV).GetItem(pidItem,.sc)
	if objItem=$$$NULLOREF {
		set sc = $$$ADDSC($system.Status.Error(5001,"Item :"_pidItem_"   does not exist under V2"),sc)
	} else {
		do objItem.%DowngradeConcurrency(0)
	}
	
	if $$$ISOK(sc) && (objItem.SourceType.Name '= "Consumable") {
		set idCompany = 0
		
		set idLocn = ""
		for {
			set idLocn = $order(^INWE(idCompany,pidItem,idLocn))
			quit:idLocn=""
			
			set idStore = ""
			for {
				set idStore = $order(^INWE(idCompany,pidItem,idLocn,idStore))
				quit:(idStore = "")
				
				set fltV1Qty    = 0
				set dteReceived = ""
				for {
					set dteReceived = $order(^INWE(idCompany,pidItem,idLocn,idStore,dteReceived))
					quit:(dteReceived = "")
					
					set objINWE = $get(^INWE(idCompany,pidItem,idLocn,idStore,dteReceived,1))
					set fltV1Qty = fltV1Qty + $$$INWEQuantity(objINWE) + $$$INWETotalReservedQuantity(objINWE)
				}
				
				set objSOH = ##class(alSOH.dSOH).%OpenId(pidItem_"||"_idLocn_"||"_idStore,0)
				if objSOH = $$$NULLOREF {
					set fltV2Qty = 0
				} else {
					set fltV2Qty = objSOH.QtyOnHand
				}
				
				if (fltV1Qty - fltV2Qty) '= 0 { 
					set sc = ..UpdateINWE(objItem,fltV2Qty,fltV1Qty,idLocn,idStore)
				}
				quit:$$$ISERR(sc)
			}
			quit:$$$ISERR(sc)
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="SyncViaStorage">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; NOTE : Class INWE is DEPRECATED
	;
	; History:
	; 23-Oct-2008	GRF		SR15902: set variables rather than repeatedly extracting
	; 							values inside loop; make use of pidItem
	; 21-Oct-2008	HQN		SR15902: corrected dynamic SQL, global key lookup, and
	; 							calls to iSOH::GetQty* methods
	; 18-Sep-2008	Luke	SR15902: Created
	;-------------------------------------------------------------------------------
	set sc        = $$$OK
	set idCompany = 0
	
	set rs = ##class(%Library.ResultSet).%New()
	set sc = rs.Prepare("SELECT ID FROM alSOH.dSOH WHERE Item = ?")
	if $$$ISOK(sc) set sc = rs.Execute(pidItem)
	if $$$ISOK(sc) {
		while rs.Next() {
			set objSOH = ##class(alSOH.dSOH).%OpenId(rs.Data("ID"))
			
			set objItem  = objSOH.Item
			set idLocn   = objSOH.Storage.Location.Code
			set idStore  = objSOH.Storage.Code
			set fltV2Qty = objSOH.QtyOnHand
			
			if (objItem.SourceType.Name '= "Consumable") {
				set fltV1Qty  = 0
				
				set dteReceived = ""
				for {
					set dteReceived = $order(^INWE(idCompany,pidItem,idLocn,idStore,dteReceived))
					quit:(dteReceived = "")
					
					set objINWE = $get(^INWE(idCompany,pidItem,idLocn,idStore,dteReceived,1))
					set fltV1Qty = fltV1Qty + $$$INWEQuantity(objINWE) + $$$INWETotalReservedQuantity(objINWE)
				}
				
				if (fltV1Qty - fltV2Qty) '= 0 {
					set sc = ..UpdateINWE(objItem,fltV2Qty,fltV1Qty,idLocn,idStore)
				}
			}	
			quit:$$$ISERR(sc)
		}
	}
	do rs.%Close()
	quit sc
]]></Implementation>
</Method>

<Method name="UpdateINWE">
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjItem:alINV.dItem,pfltV2Qty:%Float,pfltV1Qty:%Float,pidLocn:%String,pidStore:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define enumAverageCost		9
	;-------------------------------------------------------------------------------
	; 
	; NOTE : Classes INWE, INWER, INARTHIST, INARTHISTL are DEPRECATED
	;
	; Pass 1 : If pfltV1Qty is non-zero, reduce   the V1 stock on hand by that quantity
	; Pass 2 : If pfltV2Qty is non-zero, increase the V1 stock on hand by that quantity
	; 
	; Each step affects the following (order differs with pass):
	;   a)  INARTHIST     - Quantities are always +ve but stored in different fields
	;                       depending on blnDirection (0 : decrease, 1: increase)
	;   b)  INARTHISTL
	;   c)  INWE / INWER    [unaltered sign]
	;   d)  INStockVal      [unaltered sign]
	; 
	; Returns:
	; 	Hard Error ONLY - processed messages need to be handled differently
	; 
	; History:
	; 03-Nov-2010	shobby	SR17599: Removed references to INARTHIST(L)
	; 11-Mar-2010	GRF		SR16871: fix wrong macro for INARTHISTL Value1
	; 02-Nov-2009	GRF		SR16871: INItemCost with location replaces INARTKOST
	; 23-Oct-2008	GRF		SR15902: REWORKED - see zzRetain.alSOH.iUSOH
	; 23-Oct-2008	GRF		SR15902: parameter prefixes; pass pfltV2Qty in rather
	; 							than objSOH; not killing INWER individually.
	; 21-Oct-2008	HQN		SR15902: objSOH corrected to pSOH, arguments changed?
	; 18-Sep-2008	Luke	SR15902: Created
	;-------------------------------------------------------------------------------
	set sc        = $$$OK
	set idCompany = 0
	set idItem    = pobjItem.ItemId
	
	; Common settings
	set idINStockVal = idItem_$$$COMMA_pidLocn_$$$COMMA_pidStore
	set dteNow = $horolog
	set idDate = +dteNow
	set tmeNow = $piece(dteNow,$$$COMMA,2)

	;+++++++++++++++++++++++++++++++++++++++
	;  PASS 1 - Reduce by V1 Qty
	;+++++++++++++++++++++++++++++++++++++++
	
	// Absolute value
	//--------------------------------------
	if pfltV1Qty > 0 {
		set blnDirection = 0
		set strSign      = "-"
	} else {
		set pfltV1Qty    = -pfltV1Qty
		set blnDirection = 1
		set strSign      = "+"
	}
	
	
	//  1c) Kill INWE and INWER
	//--------------------------------------
	if $$$ISOK(strStatus) {
		set dteReceived = ""
		for {
			set dteReceived = $order(^INWE(idCompany,idItem,pidLocn,pidStore,dteReceived))
			quit:dteReceived=""
			quit:$$$ISERR(strStatus)
			
			set idINWE = idItem_$$$COMMA_pidLocn_$$$COMMA_pidStore_$$$COMMA_dteReceived
			set strStatus = $$$Kill("INWE",idINWE)
			set intSeq=""
			for {
				set intSeq = $order(^INWER(idCompany,idItem,pidLocn,pidStore,dteReceived,intSeq))
				quit:intSeq=""
				
				set strStatus = $$$Kill("INWER",idINWE_$$$COMMA_intSeq)
				quit:$$$ISERR(strStatus)
			}			
		}
	}
	
	// 1d) Kill INStockVal
	//--------------------------------------
	if $$$ISOK(strStatus) set strStatus = $$$Kill("INStockVal",idINStockVal)
	
	
	;+++++++++++++++++++++++++++++++++++++++
	;  PASS 2 - Increase by V2 Qty
	;+++++++++++++++++++++++++++++++++++++++
	
	// 2c) New INWE   
	//--------------------------------------
	if $$$ISOK(strStatus) {
		set objSOH = ""
		set $$$INWEInTransitLocn(objSOH)   = ""     ; D27 Required for FIN Interface
		set $$$INWEToLocation(objSOH)      = ""     ; D32
		set $$$INWEToStockLocation(objSOH) = ""     ; D33
		set $$$INWELastChange(objSOH)  	   = idDate        
		set $$$INWEQuantity(objSOH)        =  pfltV2Qty			 
		
		set strINWEDate = $$Increment^INWECounter(idItem,pidLocn,pidStore,"")
		set idINWE      = idItem_$$$COMMA_pidLocn_$$$COMMA_pidStore_$$$COMMA_strINWEDate
		set strStatus   = $$$Save("INWE",idINWE,objSOH,$$$YES)
	}
	
	// 2d) New INStockVal
	//--------------------------------------
	if $$$ISOK(strStatus) {
		set objINStockVal = "" 
		set $$$INStockValQuantity(objINStockVal)   	= pfltV2Qty
	;	set $$$INStockValValue1(objINStockVal)    	= $$GetCostV2^INARTKOST(idItem) * pfltV2Qty  ; SR16871
		set $$$INStockValValue1(objINStockVal)    	= $$GetCost^INItemCost(idItem,pidLocn,$$$enumAverageCost) * pfltV2Qty
		set $$$INStockValLastModified(objINStockVal)= dteNow 
		set strStatus = $$$Save("INStockVal",idINStockVal,objINStockVal,$$$YES)
	}
	
	
	/* FIXME : strMessage lost but don't WANT correction message treated as error situation
	// Report the change 
	set strMessage = "Corrected V1 SOH at location "_pidLocn_"  with Item "_idItem_"      V2 value "_pfltV2Qty_"      INWE value "_pfltV1Qty
	set sc = $$$ADDSC($system.Status.Error(5001,),sc)
	*/
	
	if $$$ISERR(strStatus) {
		set sc = $system.Status.Error(5001,strStatus)
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="Sync">
<ClassMethod>1</ClassMethod>
<FormalSpec>blnBackPopulate:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 22-Apr-2008	HQN		SR15672: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	quit sc
]]></Implementation>
</Method>

<Method name="SyncSOH">
<ClassMethod>1</ClassMethod>
<FormalSpec>lstINWEID:%ListOfDataTypes</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; NOTE : Class INWE is DEPRECATED
	; 
	; History:
	; 22-Apr-2008	HQN		SR15672: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	for loopIds=1:1:lstINWEID.Count() {
		; determine whether this INWE record requires sync
		set objINWE = ##class(alSOH.dUINWE).%OpenId(lstINWEID.GetAt(loopIds),0,.sc)
		quit:$$$ISERR(sc)
		
		if $$$ISERR(objINWE.IsSynced()) {
			; find bundle
			; TODO : Implement logic to correct SOH entries 
			; FIXME : I think this is redundant code, as it doesn't do anything, I think this
			; is where the correction code would go, right??
			set objItem = ##class(alINV.dItem).%OpenId(objINWE.Item)
			; create movement and process
		}		
	}
	quit sc
]]></Implementation>
</Method>

<Method name="RenderBundle">
<ClassMethod>1</ClassMethod>
<FormalSpec>objBundle:alSOH.dBundle,pLanguage:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 18-Oct-2012	SCR		SR18159: Display Description for Brand, Owner & Program
	; 21-Jul-2009	PPP		SR16782:Only display attribute values that are not null
	; 13-May-2009	GRF		SR16522: tag renamed; pLanguage rather than SPRACHE
	; 11-Nov-2008	HQN		SR16130: WORKAROUND, direct usage of callout routine...
	; 01-May-2008	HQN		Corrected ItemPolicy Lookup, look at the ItemPolicy
	;						that created the Bundle isntead of the current 
	;						ItemPolicy for the Bundle's Item
	; 30-Apr-2008 	Luke 	SR15698 Created added pLanguage param
	; 29-Apr-2008	HQN		SR15696 Created
	;-------------------------------------------------------------------------------
	set strBundle = ""
	if objBundle '= $$$NULLOREF {
		for loopAttr=1:1:objBundle.Attributes.Count() {
			set objAttr = objBundle.Attributes.GetAt(loopAttr)
			continue:(objAttr.AttributeName = "ReceiptNo")
			
			set strAttrName = ##class(alINV.uiPolicyAttrTrans).GetText(objAttr.AttributeName,pLanguage)
			//SR16782
			//set strBundle   = strBundle_$select(strBundle'="":":",1:"")_ strAttrName_"="
			
			set objPolicyAttrId = objBundle.ItemPolicy.Attributes.FindObjectId(objBundle.ItemPolicy.%Id()_"||"_objAttr.AttributeName)
			set objPolicyAttr   = objBundle.ItemPolicy.Attributes.GetAt(objPolicyAttrId)
			set strDataType     = objPolicyAttr.Attribute.DataType
			if strDataType = "%Date" {
				//set strBundle = strBundle_$$IntToLit^WWWDATE(objAttr.AttributeValue,$get(pLanguage,"EN")) ; SR16130 SR16522
				set strValue = $$IntToLit^WWWDATE(objAttr.AttributeValue,$get(pLanguage,"EN")) ; SR16130 SR16522
			} else {
				//set strBundle = strBundle_objAttr.AttributeValue
				set strValue = objAttr.AttributeValue
			}
			//SR16782
			if $get(strValue)'="" {
				; SR18159 vvvv
				set strText=""														;HEVA-154
				if objAttr.AttributeName = "Brand" {
					set strText = $piece($get(^INBrand(0,strValue,1)),"~",1) 		;HEVA-154
				} elseif objAttr.AttributeName = "Program" {
					set strText = $piece($get(^INPROJECT(0,strValue,1)),"~",1)		;HEVA-154
				} elseif objAttr.AttributeName = "Owner" {
					set strText = $piece($get(^INOWNER(0,strValue,1)),"~",1)		;HEVA-154
				} 
				if strText'="" set strValue=strText									;HEVA-154
				; SR18159 ^^^^
				set strBundle = strBundle_$select(strBundle'="":":",1:"")_ strAttrName_"="_strValue
			}
		}
	}
	quit strBundle
]]></Implementation>
</Method>

<Method name="IsSyncedBundles">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Checks wether bundles have their hashkey values up to date with current
	; implementation of generating hashes
	; 
	; History:
	; 10-Feb-2009	HQN		SR16323: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if pidItem = "" {
		set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundle:Extent")
		set scQuery = objResultSet.Execute()
	} else {
		set objResultSet = ##class(%Library.ResultSet).%New()
		set scQuery = objResultSet.Prepare("SELECT ID FROM alSOH.dBundle WHERE Item = ?")
		set:$$$ISOK(scQuery) scQuery = objResultSet.Execute(pidItem)
	}
	if $$$ISOK(scQuery) {
		while (objResultSet.Next(.scQuery)) {
			set objBundle = ##class(alSOH.dBundle).%OpenId(objResultSet.Data("ID"),,.scQuery)
			if $$$ISOK(scQuery) {
				if objBundle.HashKey '= objBundle.GetBundleHash() {
					set sc = $$$ADDSC($system.Status.Error(5001,"dBundle out of sync: "_objBundle.%Id()),sc)
				}
			}
		}
	}
	set sc = $$$ADDSC(scQuery,sc)
	quit sc
]]></Implementation>
</Method>
</Class>
</Export>