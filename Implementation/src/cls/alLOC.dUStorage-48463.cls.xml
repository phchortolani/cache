<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alLOC.dUStorage">
<ClassType>persistent</ClassType>
<IncludeCode>INConst,COMSYS</IncludeCode>
<Super>User.INLP</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; 26-Sep-2008	GRF		SR15932: ":Locn" not "StorageLocation" for LocationName in
; 							Query
; 24-Jan-2008	HQN		SR15625 Copied Methods from dStorage; Changed class signature
;							dLocation to dULocation
/---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="Location">
<Type>alLOC.dULocation</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00272"/>
</Property>


<Property name="ParentLocation">
<Type>alLOC.dULocation</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00274"/>
</Property>

<UDLText name="T">
<Content>/* FIXME : &lt;GRF&gt; Should refer to Blocked rather than Locked */
</Content>
</UDLText>


<Property name="Locked">
<Type>%Boolean</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00273"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Query name="GetStoragesForLocation">
<Type>%SQLQuery</Type>
<FormalSpec>Locn:%String</FormalSpec>
<SqlQuery>SELECT %ID,AllocationGraphic,Bonded,CheckDigitsForStockContro,Company,Department,FieldIsInUse,FieldWithMultipleLoads,LocationHeight,LocationName,NotUsedLoadPoints,PhoneticDescription,PickLevel,PickSequence,PostingCharacteristic1,PostingCharacteristic2,ReasonBlocked,Remarks,StockLocation,StockLocationIsLocked
 FROM dUStorage
 WHERE (LocationName = :Locn) ORDER BY PickSequence</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="%OnAfterSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called after 
the object's data has been successfully written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$OK
]]></Implementation>
</Method>

<Method name="ParentLocationGet">
<ReturnType>alLOC.dULocation</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;-------------------------------------------------------------------------------
	if (i%ParentLocation = $$$NULLOREF) {
		set objParentLocation = ##class(alLOC.dULocation).%OpenId(0_"||"_%this.LocationName)
		if (objParentLocation '= $$$NULLOREF) {
			set i%ParentLocation = objParentLocation
		}
	}
	quit i%ParentLocation
]]></Implementation>
</Method>

<Method name="GetStock">
<FormalSpec>objItem</FormalSpec>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set objBundleList  = ##class(%Library.ListOfObjects).%New()
	set intReceiptDate = $$$NULLOREF
	for {
		set intReceiptDate = $order(^INWE(0,objItem,i%LocationName,i%StockLocation,intReceiptDate))
		quit:(intReceiptDate=$$$NULLOREF)
		
	; HQN: Is this meant to be a pseudo read? If so %IsModified will be wrong
		set objStock = ##class(alSOH.dBundleStock).%New()
		set objStock.Item      = objItem
	;	set objStock.Location  = %this.Location
		set objStock.Storage   = %this
		set objStock.Bundle    = intReceiptDate
		set objStock.QtyOnHand = $$$INWEQuantity(^INWE(0,objItem,i%LocationName,i%StockLocation,intReceiptDate,1))
		do objBundleList.Insert(objStock)
	}
	quit objBundleList
]]></Implementation>
</Method>

<Method name="LocationGet">
<ReturnType>alLOC.dULocation</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;-------------------------------------------------------------------------------
	if ((%this.LocationName '= $$$NULLOREF) && (i%Location = $$$NULLOREF)) {
		set objLocn = ##class(alLOC.dULocation).%OpenId(0_"||"_%this.LocationName)
		if (objLocn '= $$$NULLOREF) {
			set i%Location = objLocn
		}
	}
	quit i%Location
]]></Implementation>
</Method>
<UDLText name="T">
<Content>/* FIXME : &lt;GRF&gt; Should refer to Blocked rather than Locked */
</Content>
</UDLText>


<Method name="LockedGet">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit %this.StockLocationIsLocked
]]></Implementation>
</Method>

<Method name="GetItemSOH">
<FormalSpec>idItem:%String,idBundle:%String</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 31-Jul-2008	Luke	SR15814: Correct the inital sc
	; 06-May-2008	HQN		Upgraded to look at V2 SOH
	;-------------------------------------------------------------------------------
	set QOHByStore  = 0 
	set sc = $$$OK                  //SR15814:
	set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(idItem_"||"_%this.LocationName_"||"_%this.StockLocation_"||"_idBundle,,.sc)
	set:$$$ISOK(sc) QOHByStore = objBundleStock.QtyOnHand

	quit +$get(QOHByStore)
]]></Implementation>
</Method>

<Method name="GetItemSOHIncBlocked">
<FormalSpec>idItem:%String</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get QOH including Blocked/Expired stock (necessary for moves)
	; 
	; History:
	; 15-Jan-2010	GRF		Return type added to method tag
	; 07-Dec-2007	PPP		SR15615: Created
	;-------------------------------------------------------------------------------
	set QOHByStore = 0
	set QOHByLocn  = $$MovingStockByLocn^INARTMENGE(idItem,%this.Location.Location)
	do QtyByBin^INARTMENGE(QOHByLocn,.QOHByStore)
	
	quit +$get(QOHByStore(i%StockLocation))
]]></Implementation>
</Method>

<Method name="ConvertOnSave">
<Description><![CDATA[
Checks to see if the object identified by the ID <var>id</var> exists in the extent.

<p>Returns <CLASS>%Boolean</CLASS> TRUE is it exists, FALSE if it does not.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 13-Jun-2013	shobby	CORE-101: Status is not a binary value.
	; 16-Apr-2013	shobby	CORE-82: Preserved the sc variable if a save fails so it can be reported.
	; 09-Nov-2011	PPP		SR17929: New property CurrentStorageIsBlocked
	; 16-Jun-2011	GRF		SR17716: Replace Closed with Status
	; 03-May-2011	PPP		SR17715/1 Need to reload the object for new values
	; 21-Apr-2011	GRF		SR17715: set IsATempSU from TemporaryStorageUnit
	; 24-Jan-2011 	PPP		SR17652: LocationName instead of Location
	; 15-Nov-2001	shobby	SR17589: Included Closed, Height.
	; 30-Sep-2010	shobby	SR17541: Include the physical location.
	; 18-Mar-2009	DavidR	SR16406: Added Listbuild to error			
	; 26-Sep-2008	GRF		SR15932: Disused Storages; '' for boolean conversion;
	; 							Update Posting Characteristics
	; 31-Jul-2008	Luke	SR15814: correct $$$Text usage to include listbuild
	; 26-Jun-2008	GRF		SR15796: Standardise error text
	; 02-May-2008	Luke	SR15699: Language text for errors
	; 04-Apr-2008	GRF		SR15650: sc is third parameter of %OpenId
	; 05-Mar-2008	Luke	Setting up of V2 Loc specific storages 
	; 21-Feb-2008	Luke	SR15634: Correction and editing 
	; 18-Jan-2008	GRF		SR15622: Created
	;-------------------------------------------------------------------------------
	set idLocn    = $$$KEY1(pKey)
	set idStorage = $$$KEY2(pKey)
	set sc        = $$$OK
	
	if ##class(alLOC.dUStorage).%ExistsId("0||"_idLocn_"||"_idStorage) {
		
		set objV1 = ##class(alLOC.dUStorage).%OpenId("0||"_idLocn_"||"_idStorage)
		
		if objV1 '= $$$NULLOREF {
			do objV1.%Reload()         //SR17715/1 Need to reload the object for new values
			
			if ##class(alLOC.dLocation).%ExistsId(objV1.LocationName) { 
			//	set objLocn = ##class(alLOC.dLocation).%OpenId(objV1.Location)      	//SR17652
				set objLocn = ##class(alLOC.dLocation).%OpenId(objV1.LocationName)
			
			} else {
				set sc = ##class(alLOC.dULocation).ConvertOnSave(idLocn)
				if $$$ISOK(sc) {
					set objLocn = ##class(alLOC.dLocation).%OpenId(objV1.LocationName,,.sc) 
				}
			} 
			if objLocn = "" {    ; Pre-load validation
				set strMessage = $$$Text($listbuild("alLOC0004",pKey))  ; "Can not Convert Storage (%1)"
				quit $$$ERROR($$$GeneralError,strMessage)
				/// Quit early Not very elegant, but this is a test for the build issues 
			}
			
			if ##class(alLOC.dStorage).%ExistsId(objV1.LocationName_"||"_objV1.StockLocation) { 
				set objStore = ##class(alLOC.dStorage).%OpenId(objV1.LocationName_"||"_objV1.StockLocation,,.sc) 
			} else {
				set objStore = ##class(alLOC.dStorage).%New()
			}
				
			if $$$ISOK(sc) {
				set objStore.Location                 =   objLocn
				set objStore.Code                     =   objV1.StockLocation
			//	set objStore.NotUsedLoadPoints        =   objV1.NotUsedLoadPoints        ; FIXME : Obsolete? Remove?
				set objStore.StockControlVerification =   objV1.CheckDigitsForStockContro
				set objStore.Remarks                  =   objV1.Remarks
				set objStore.PhoneticDescription      =   objV1.PhoneticDescription
				set objStore.PostingChar1             =   objV1.PostingCharacteristic1
				set objStore.PostingChar2             =   objV1.PostingCharacteristic2
				
				set objStore.MultipleBundlesAllowed   = ''objV1.FieldWithMultipleLoads
			//	set objStore.FieldIsInUse             = ''objV1.FieldIsInUse             ; FIXME : Obsolete? Remove?
				set objStore.StorageIsDisused         = ''objV1.DisusedStorage
				// set objStore.StorageIsBlocked         = ''objV1.StockLocationIsLocked	//SR17929
				//SR17929
  				set objStore.CurrentStorageIsBlocked         = ''objV1.StockLocationIsLocked
				set objStore.IsBonded                 = ''objV1.Bonded
				
			// vvv SR17715
			//	if objV1.Physical="" { //SR17541
			//		set objStore.Physical = objV1.StockLocation
			//	} else {
			//		set objStore.Physical = objV1.Physical
			//	}
				if objV1.Physical'="" { //SR17541
					set objPhysical = ##class(alLOC.dStorage).%OpenId(objV1.LocationName_"||"_objV1.Physical,,.sc)
					
					if $$$ISOK(sc)	{
						do objStore.PhysicalSetObject($listbuild(objV1.LocationName_"||"_objV1.Physical))
					}
					
				} else {
					set objStore.Physical = $$$NULLOREF
				}
			// ^^^ SR17715
				set objStore.IsATempSU = ''objV1.TemporaryStorageUnit   ; SR17715
			//	set objStore.Closed    = ''objV1.Closed  ; SR17589, SR17716
				set objStore.Height    =   objV1.Height  ; SR17589
				set objStore.Status    = +objV1.Status  ; SR17716 ;CORE-101
		
				if ##class(alLOC.dULocation).%ExistsId("0||"_idLocn) {		
					set objV1Loc = ##class(alLOC.dULocation).%OpenId("0||"_idLocn,,.sc)
				} else {
					set sc = ##class(alLOC.dULocation).ConvertOnSave(idLocn)
					if $$$ISOK(sc) {
						set objV1Loc = ##class(alLOC.dULocation).%OpenId("0||"_idLocn,,.sc)
					}
				}
				if $get(objV1Loc) '= $$$NULLOREF {
					if objV1Loc.OnHandStorage = idStorage {
						set objLocn.OnHandStorage = objStore
					}
					if objV1Loc.ReceiptStorage = idStorage {
						set objLocn.ReceiptStorage = objStore
					}
					if objV1Loc.DespatchStorage = idStorage {
						set objLocn.DespatchStorage = objStore
					}
					if objV1Loc.SuppReturnStorage = idStorage {
						set objLocn.SupplierReturnStorage = objStore
					}
					if objV1Loc.CustReturnStorage = idStorage {
						set objLocn.CustomerReturnStorage = objStore
					}
					if objV1Loc.MissingStockStorage = idStorage {
						set objLocn.MissingStockStorage = objStore
					}
					if objV1Loc.DamagedStockStorage = idStorage {
						set objLocn.DamagedStockStorage = objStore
					}	
				}
				if $$$ISOK(sc) set sc = objLocn.%Save()  ;CORE-82
				if $$$ISOK(sc) set sc = objLocn.%Close() ;CORE-82
			}
			; TODO : <GRF> Need to pass Posting Characteristics as well - inherit from locn in most cases.
		
		} else {
			set strMessage = $$$Text($lb("alLOC0004",pKey))     ; "Can not Convert Storage (%1)"
			set sc = $$$ERROR($$$GeneralError,strMessage)
		}
		
	} else {
		set strMessage = $$$Text($lb("alLOC0004",pKey))         ; "Can not Convert Storage (%1)"
		set sc = $$$ERROR($$$GeneralError,strMessage)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="ConvertOnDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 18-Mar-2009	DavidR	SR16406: added listbuild to error
	; 22-Sep-2008	Luke	SR15936: added message to inform user of issues with data
	; 18-Sep-2008	GRF		SR15927: operation should be %DeleteId not %Delete
	; 27-Feb-2008	GRF		SR15622: Created
	;-------------------------------------------------------------------------------
	set sc        = $$$OK
	set idLocn    = $$$KEY1(pKey)
	set idStorage = $$$KEY2(pKey)

	set objV1 = ##class(alLOC.dUStorage).%OpenId("0||"_idLocn_"||"_idStorage)	
	if objV1 '= $$$NULLOREF {
		set objStore = ##class(alLOC.dStorage).%OpenId(objV1.LocationName_"||"_objV1.StockLocation)
		if objStore '= $$$NULLOREF set sc = ##class(alLOC.dStorage).%DeleteId(objStore.%Id())
   } else {
		set strMessage = $$$Text($listbuild("alLOC0006",idStorage,idLocn))
		set sc = $$$ERROR($$$GeneralError,strMessage)   
   } ; Can not delete storage (%1) at location (%2).  Please review the validity of the data.

	quit sc
]]></Implementation>
</Method>

<Method name="%OnOpen">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Open</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being opened.

<P>If this method returns an error then the object will not be opened.]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 18-Nov-2008	HQN		Only do it if there is an error: Cache2008 fixes this
	; 01-Apr-2008	HQN		Resetting %objlasterror on SQL projection warning
	;-------------------------------------------------------------------------------
	if $get(%objlasterror) '= "" { ; 18-Nov-2008
		if (%this.%Oid() '= $$$NULLOREF) && ($$$GETERRORCODE(%objlasterror) = 5809) {
			set %objlasterror = ""
		}
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="IsSynced">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 10-Jun-2008	GRF		Rearrange validation for readability
	; 11-Apr-2008	HQN		SR15672: Created
	;-------------------------------------------------------------------------------
	;#define ADDSC(%sc1,%sc2)       $select(+%sc1:%sc2,1:$$AppendStatus^%occSystem(%sc1,%sc2))
	;#def1arg ERROR(%args)          $$Error^%apiOBJ(%args)
	
	set sc = $$$OK
	set objStorage = ##class(alLOC.dStorage).%OpenId(%this.LocationName_"||"_%this.StockLocation,0,.sc)
	if $$$ISOK(sc) {
		if (objStorage.Code '= %this.StockLocation) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001, "StockLocation Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		if (objStorage.MultipleBundlesAllowed '= %this.FieldWithMultipleLoads) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001, "FieldWithMultipleLoads Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		if (objStorage.StorageIsBlocked '= %this.StockLocationIsLocked) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001, "StockLocationIsLocked Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		if (objStorage.StockControlVerification '= %this.CheckDigitsForStockContro) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001, "CheckDigitsForStockContro Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		if (objStorage.Remarks '= %this.Remarks) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001, "Remarks Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		if (objStorage.IsBonded '= %this.Bonded) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001, "Bonded Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		if (objStorage.PhoneticDescription '= %this.PhoneticDescription) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001, "PhoneticDescription Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
		if (objStorage.Location = $$$NULLOREF) {
			if (%this.ParentLocn '= "") {
				set sc = $system.Status.AppendStatus($system.Status.Error(5001, "ParentLocn property not set "_objStorage.%ClassName(1)_"::%Id("_objStorage.%Id()_")"),sc)
			}
		} elseif (objStorage.Location.%Id() '= %this.LocationName) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001, "ParentLocn Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
	} else {
		set sc = $system.Status.Error(6236, %this.LocationName_"||"_%this.StockLocation, "alLOC.dStorage::%OpenId()")
	}
	quit sc
]]></Implementation>
</Method>

<Method name="Check">
<ClassMethod>1</ClassMethod>
<FormalSpec>pblnClean:%Boolean=0</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 06-Dec-2013	SCR		SESDF-655: Created
	;-------------------------------------------------------------------------------
	$$$VAR
	set idLoc	= ""
	set strStatus	= $$$OK
	for {
		set idLoc	= $order(^INLP(YM,idLoc))
		quit:idLoc=""
		if '$data(^WWW0121(0,YM,idLoc)) {
			write !,"No Location for Storage "_idLoc
			set idStore	= ""
			continue:'pblnClean
			for {
				set idStore	= $order(^INLP(YM,idLoc,idStore))
				quit:idStore=""
				write !," Removing Storaga ",idStore
				set strStatus = $$$Kill("INLP",idLoc_","_idStore)
			}
			quit:$$$ISERR(strStatus)
		}
		quit:$$$ISERR(strStatus)
	}
	quit strStatus
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>

<Property name="AddressType"/>

<Property name="AllocationGraphic"/>

<Property name="Bonded"/>

<Property name="ChangedBy"/>

<Property name="ChangedDate"/>

<Property name="CheckDigitsForStockContro"/>

<Property name="Company"/>

<Property name="CreatedBy"/>

<Property name="CreatedDate"/>

<Property name="Department"/>

<Property name="Description"/>

<Property name="DisusedStorage"/>

<Property name="FieldIsInUse"/>

<Property name="FieldWithMultipleLoads"/>

<Property name="Height"/>

<Property name="LocationHeight"/>

<Property name="LocationName"/>

<Property name="MaxTSUCount"/>

<Property name="NotUsedLoadPoints"/>

<Property name="PhoneticDescription"/>

<Property name="Physical"/>

<Property name="PickLevel"/>

<Property name="PickSequence"/>

<Property name="PostingCharacteristic1"/>

<Property name="PostingCharacteristic2"/>

<Property name="ReasonBlocked"/>

<Property name="Remarks"/>

<Property name="Status"/>

<Property name="StockLocation"/>

<Property name="StockLocationIsLocked"/>

<Property name="Storage1"/>

<Property name="TemporaryStorageUnit"/>
</Storage>
</Class>
</Export>