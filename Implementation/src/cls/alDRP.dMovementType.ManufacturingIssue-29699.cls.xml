<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alDRP.dMovementType.ManufacturingIssue">
<ClassType>serial</ClassType>
<IncludeCode>INConst</IncludeCode>
<Super>alDRP.dMovementType</Super>
<UDLText name="T">
<Content>
// 23-Jul-2009	PPP	SR16753: Created

</Content>
</UDLText>


<Property name="MovementTypeId">
<Description><![CDATA[
Source of transaction]]></Description>
<Type>alSYS.dt.dtInteger</Type>
<InitialExpression>"35&quot;</InitialExpression>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00448"/>
</Property>


<Method name="Validate">
<FormalSpec>pobjMove:alDRP.dMovement</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 23-Jul-2009	PPP		SR16753: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if pobjMove.Completed {
		set strMessage = $$$Text("IN00711")      ; "This movement is already completed."
		set sc =$$$ERROR($$$GeneralError,strMessage)
	}

	quit sc
]]></Implementation>
</Method>

<Method name="Confirm">
<FormalSpec>pobjMove:alDRP.dMovement</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define enumAverageCost		9
	;-------------------------------------------------------------------------------
	;
	; History
	; 11-Aug-2010	GRF		SR16753/SR17387: Add Source Details & ParentItem
	; 10-Aug-2010	GRF		SR16753: (SR16871/SR16880 changes) Relocate un-Lock;
	; 							"ISS" not "ADJ"
	; 19-Nov-2009	GRF		SR16471: Change scope of lock by making it a global
	; 02-Nov-2009	GRF		SR16871: INItemCost with location replaces INARTKOST;
	; 23-Jul-2009	PPP		SR16753: Created
	;-------------------------------------------------------------------------------
	set sc     = $$$OK             ; not needed?
	set idItem = pobjMove.Item.ItemId
	

	;+++++++++++++++++++++++++++++++++++++++
	LOCK +^alSOHProcessing(idItem):2
	if '$test {
		set strMessage = $$$Text($listbuild("IN00853",idItem))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	;	"Can not acquire a lock for Item: (%1) please try again"
	;+++++++++++++++++++++++++++++++++++++++
		
	} else {
		set fltCost = $$GetCost^INItemCost(idItem,pobjMove.FromLocn.Code,$$$enumAverageCost)
	
	; Manufacturing Issue
	;---------------------------------------
		set objTransType   = ##class(alSOH.dTransactionType).%OpenId(5)
		set objFromStkHist = ##class(alSOH.piSOH).Post(pobjMove, 
													   pobjMove.FromLocn,
													   pobjMove.FromStorage,
													   -pobjMove.QtyPicked,
													   fltCost,
													   objTransType,
													   .sc)
	
		if $$$ISOK(sc) set sc = ##class(alSOH.dPeriodBalance).UpdateViaStockHistory(objFromStkHist)
	;+++++++++++++++++++++++++++++++++++++++ ; SR16871
		LOCK -^alSOHProcessing(idItem)
	;+++++++++++++++++++++++++++++++++++++++
	}
	
	; Stock to Finance Interface            ; SR16880
	;---------------------------------------
	if $$$ISOK(sc) {  
		set idDeleteStorage = $$$INVORGDeleteStockLocation($get(^INVORG(0,0,1)))
		
		set objStockFin = ##class(alSFI.dStockFin).%New()
		set objStockFin.TxnType        = pobjMove.MovementType
		set objStockFin.TxnTypeRef     = "ISS"       ;"ADJ"
		set objStockFin.AuditRef       = "alDRP.dMovementType.ManufacturingIssue"
		set objStockFin.TxnInformation = "Make Issue"
		
		set objStockFin.Item           = pobjMove.Item
		set objStockFin.Quantity       = pobjMove.QtyPicked
		set objStockFin.TxnValue       = fltCost * pobjMove.QtyPicked
		
		set objStockFin.FromLocn       = pobjMove.FromLocn
		set objStockFin.FromStorage    = pobjMove.FromStorage
		set objStockFin.ToLocn         = pobjMove.FromLocn
		set objStockFin.ToStorage      = ##class(alLOC.iULOC).GetStorage(pobjMove.FromLocn.Code,idDeleteStorage)
		
		set objStockFin.ParentItem     = pobjMove.ParentItem
		set objStockFin.SourceRec      = pobjMove.Reference
		set objStockFin.SourceForm     = "INMOIssue"
		set objStockFin.SourceDetail   = "IN01242,"_pobjMove.Reference_","_$piece(pobjMove.LineNumber,"||",2)
		                                 ; "Manufacture Issue %1, Line %2"
		
		set sc = objStockFin.StockToFin()
		
		; Set to ensure not processed twice, is checked in FIBU^INARTHIST
		set YUSER = %("%KEY","YUSER") 
		if YUSER="" set YUSER = " "
		if $$$ISOK(sc) set ^CacheTemp(YUSER,"FIBURecord") = $$$YES
	}

	quit sc
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>
</Export>