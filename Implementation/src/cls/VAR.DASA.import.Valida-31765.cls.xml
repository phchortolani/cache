<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="VAR.DASA.import.Valida">
<Description><![CDATA[
Valida os arquivos de carga]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="valida">
<Description><![CDATA[
Valida arquivos conforme o padrão esperado para cada tipo
w ##class(VAR.DASA.import.Valida).valida("c:\tasc\dasa\modelos","modeloproduto.csv","Produto")]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>diretorio,arquivo,tipo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	if ($get(arquivo) = "") || ($get(tipo) = "" ) quit "Parâmetros (arquivo, tipo) não informados"
	
	if $get(diretorio) = "" set diretorio = "M:\csv\"
	if '##class(%Library.File).Exists(diretorio_arquivo) quit "Arquivo "_diretorio_arquivo_" não encontrado"
	
	if tipo '= "CCusto",  tipo '= "LConsumo", tipo '= "Produto", tipo '= "CMedio", tipo '= "Inventário", tipo '= "VTempo", tipo '= "Fornecedor", tipo '= "ParRepRede", tipo '= "ParRepProduto", tipo '= "ParRepLocal"  quit "Tipo inválido"
	
	;kill ^VARCargaDadosRegistro($job)

	;set obj = 
	set ret = ""
	if tipo = "CCusto" set ret = ..valCentroCusto(diretorio_arquivo)
	if tipo = "LConsumo" set ret = ..valLocalConsumo(diretorio_arquivo)
	if tipo = "Produto" set ret = ..valProduto(diretorio_arquivo)
	if tipo = "CMedio" set ret = ..valCustoMedio(diretorio_arquivo)	
	if tipo = "Inventário" set ret = ..valInventario(diretorio_arquivo)
	if tipo = "VTempo" set ret = ..valVariavelTempo(diretorio_arquivo)
	if tipo = "Fornecedor" set ret = ..valFornecedor(diretorio_arquivo)
	if tipo = "ParRepRede" set ret = ..valParRepRede(diretorio_arquivo)
	if tipo = "ParRepProduto" set ret = ..valParRepProduto(diretorio_arquivo)
	if tipo = "ParRepLocal" set ret = ..valParRepLocal(diretorio_arquivo)	
	if tipo = "Parâmetro" set ret = ..valParametros(diretorio_arquivo)
	
		
	quit ret
]]></Implementation>
</Method>

<Method name="valCentroCusto">
<Description><![CDATA[
Valida o formato do arquivo de Centro de Custo]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set $ztrap = "erro"
	set ret = ""
	set sep = $char(13)_$char(10)
	set totColunas = 4
	set contLinha = 0
	
	open arquivo
	use arquivo read registro
	set contLinha = contLinha + 1
	
	if $length(registro, ";") '= totColunas {
		close arquivo
		quit "Esperadas "_totColunas_" colunas no arquivo mas encontradas "_$length(registro, ";")
	}
		
	for {
		if (contLinha = 1){
			set ^VARCargaDadosRegistro($job, 1) = registro
			use arquivo read registro
			set contLinha = contLinha + 1
			continue
		}
		
		if (contLinha = 2){ set ^VARCargaDadosRegistro($job, 2) = registro }
		
		use arquivo read registro
		set contLinha = contLinha + 1
	}
	
	
erro
	set err = ..erro(arquivo)
	if (err = 1) quit 1
	quit ret_sep_err_sep
]]></Implementation>
</Method>

<Method name="valLocalConsumo">
<Description><![CDATA[
Valida o formato do arquivo de locais de consumo]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set $ztrap = "erro"
	set ret = ""
	set sep = $char(13)_$char(10)
	set totColunas = 6
	set contLinha = 0
	
	open arquivo
	use arquivo read registro
	set contLinha = contLinha + 1
	
	if $length(registro, ";") '= totColunas {
		close arquivo
		quit "Esperadas "_totColunas_" colunas no arquivo mas encontradas "_$length(registro, ";")
	}
		
	for {
		if (contLinha = 1){
			set ^VARCargaDadosRegistro($job, 1) = registro
			use arquivo read registro
			set contLinha = contLinha + 1
			continue
		}
		
		if (contLinha = 2){ set ^VARCargaDadosRegistro($job, 2) = registro }
		
		use arquivo read registro
		set contLinha = contLinha + 1
	
	}

			
erro
	set err = ..erro(arquivo)
	if (err = 1) quit 1
	quit ret_sep_err_sep
]]></Implementation>
</Method>

<Method name="valProduto">
<Description><![CDATA[
Valida o formato do arquivo de produtos]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set $ztrap = "erro"
	set ret = ""
	set sep = $char(13)_$char(10)
	set totColunas = 14
	set contLinha = 0
	
	open arquivo
	use arquivo read registro
	set contLinha = contLinha + 1
	
	if $length(registro, ";") '= totColunas {
		close arquivo
		quit "Esperadas "_totColunas_" colunas no arquivo mas encontradas "_$length(registro, ";")
	}
	
	if +$piece(registro, ";", 1) < 0 quit "> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
	
	for {
		if (contLinha = 1) {
			set ^VARCargaDadosRegistro($job, 1) = registro
			use arquivo read registro
			set contLinha = contLinha + 1
			continue
		}
		;Valida se os itens estão com tamanho 7
		if $length($piece(registro, ";", 1)) > 7 set ret = ret_sep_"> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		else  if $length($piece(registro, ";", 2)) > 7 set ret = ret_sep_"> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		
		if (contLinha = 2){ set ^VARCargaDadosRegistro($job, 2) = registro }
		
		use arquivo read registro
		set contLinha = contLinha + 1

	}
	
		
erro
	set err = ..erro(arquivo)
	if (err = 1) quit 1
	quit ret_sep_err_sep
]]></Implementation>
</Method>

<Method name="valCustoMedio">
<Description><![CDATA[
Valida o formato do arquivo de custos médios]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set $ztrap = "erro"
	set ret = ""
	set sep = $char(13)_$char(10)
	set totColunas = 2
	set contLinha = 0
	
	open arquivo
	use arquivo read registro
	set contLinha = contLinha + 1
	
	;Valida o total de colunas
	if $length(registro, ";") '= totColunas {
		close arquivo
		quit "Esperadas "_totColunas_" colunas no arquivo mas encontradas "_$length(registro, ";")
	}

	;Valida se a primeira linha possui títulos das colunas e não os dados
	if +$piece(registro, ";", 1) < 0 quit "> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		
	for {
		if (contLinha = 1){
			set ^VARCargaDadosRegistro($job, 1) = registro
			use arquivo read registro
			set contLinha = contLinha + 1
			continue
		}
		
		;Valida se os itens estão com tamanho 7
		if $length($piece(registro, ";", 1)) > 7 set ret = ret_sep_"> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
	
		if (contLinha = 2){ set ^VARCargaDadosRegistro($job, 2) = registro }
		
		use arquivo read registro
		set contLinha = contLinha + 1

	}
	
		
erro
	set err = ..erro(arquivo)
	if (err = 1) quit 1
	quit ret_sep_err_sep
]]></Implementation>
</Method>

<Method name="valParametros">
<Description><![CDATA[
Valida o formato do arquivo de parâmetros]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

	set $ztrap = "erro"
	set ret = ""
	set sep = $char(13)_$char(10)
	set totColunas = 9
	set contLinha = 0
	
	open arquivo
	use arquivo read registro
	set contLinha = contLinha + 1
	
	
	
	if $length(registro, ";") '= totColunas {
		close arquivo
		quit "Esperadas "_totColunas_" colunas no arquivo mas encontradas "_$length(registro, ";")
	}
	
	if +$piece(registro, ";", 1) < 0 quit "> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		
	for {
		if (contLinha = 1){
			set ^VARCargaDadosRegistro($job, 1) = registro
			use arquivo read registro
			set contLinha = contLinha + 1
			continue
		}
		
		;Valida se os itens estão com tamanho 9
		if $length($piece(registro, ";", 1)) < 9 set ret = ret_sep_"> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		if (contLinha = 1){ set ^VARCargaDadosRegistro($job, 1) = registro }
		if (contLinha = 2){ set ^VARCargaDadosRegistro($job, 2) = registro }
		
		use arquivo read registro
		set contLinha = contLinha + 1

	}
	
		
erro
	set err = ..erro(arquivo)
	if (err = 1) quit 1
	quit ret_sep_err_sep
]]></Implementation>
</Method>

<Method name="valInventario">
<Description><![CDATA[
Valida o formato do arquivo de produtos]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set $ztrap = "erro"
	set ret = ""
	set sep = $char(13)_$char(10)
	set totColunas = 7
	set contLinha = 0
	
	open arquivo
	use arquivo read registro
	set contLinha = contLinha + 1
	if $length(registro, ";") '= totColunas {
		close arquivo
		quit "Esperadas "_totColunas_" colunas no arquivo mas encontradas "_$length(registro, ";")
	}
	
	if +$piece(registro, ";", 1) < 0 quit "> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		
	for {
		if (contLinha = 1){
			set ^VARCargaDadosRegistro($job, 1) = registro
			use arquivo read registro
			set contLinha = contLinha + 1
			continue
		}
		
		;Valida se os itens estão com tamanho igual ou maior que 8
		if $length($piece(registro, ";", 1)) >= 8 set ret = ret_sep_"> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		if (contLinha = 1){ set ^VARCargaDadosRegistro($job, 1) = registro }
		if (contLinha = 2){ set ^VARCargaDadosRegistro($job, 2) = registro }
		
		;Valida se a data está no formato correto
		set validade = $piece(registro, ";", 4)
		set dia = $piece(validade, "/", 1)
		set mes = $piece(validade, "/", 2)
		set ano = $piece(validade, "/", 3)
		set hoje = $zd($h, 4)
		set anohoje = $piece(hoje, "/", 3)
		if (($length(validade) < 10) || (dia > 31) || (mes > 12) || ($length(ano) < 4) || (ano > 2099) || (ano < anohoje) || ($zdh(validade, 4) < $zdh(hoje, 4))) set ret = ret_sep_"> Linha "_contLinha_" validade "_validade_" é inválida, coluna validade pertence ao inventário."
		
		use arquivo read registro
		set contLinha = contLinha + 1

	}
	
		
erro
	set err = ..erro(arquivo)
	if (err = 1) quit 1
	quit ret_sep_err_sep
]]></Implementation>
</Method>

<Method name="valVariavelTempo">
<Description><![CDATA[
Valida o formato do arquivo de Variável de Tempo]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

	set $ztrap = "erro"
	set ret = ""
	set sep = $char(13)_$char(10)
	set totColunas = 6
	set contLinha = 0
	
	open arquivo
	use arquivo read registro
	set contLinha = contLinha + 1
	if $length(registro, ";") '= totColunas {
		close arquivo
		quit "Esperadas "_totColunas_" colunas no arquivo mas encontradas "_$length(registro, ";")
	}
	
	if +$piece(registro, ";", 1) < 0 quit "> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		
	for {
		if (contLinha = 1){
			set ^VARCargaDadosRegistro($job, 1) = registro
			use arquivo read registro
			set contLinha = contLinha + 1
			continue
		}
		
		;Valida se os itens estão com tamanho 6
		if $length($piece(registro, ";", 1)) < 6 set ret = ret_sep_"> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		if (contLinha = 1){ set ^VARCargaDadosRegistro($job, 1) = registro }
		if (contLinha = 2){ set ^VARCargaDadosRegistro($job, 2) = registro }
		
		use arquivo read registro
		set contLinha = contLinha + 1

	}
	
		
erro
	set err = ..erro(arquivo)
	if (err = 1) quit 1
	quit ret_sep_err_sep
]]></Implementation>
</Method>

<Method name="valFornecedor">
<Description><![CDATA[
Valida o formato do arquivo de produtos]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set $ztrap = "erro"
	set ret = ""
	set sep = $char(13)_$char(10)
	set totColunas = 9
	set contLinha = 0
	
	open arquivo
	use arquivo read registro
	set contLinha = contLinha + 1
	
	if $length(registro, ";") '= totColunas {
		close arquivo
		quit "Esperadas "_totColunas_" colunas no arquivo mas encontradas "_$length(registro, ";")
	}
	
	if +$piece(registro, ";", 1) < 0 quit "> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
	
	for {
		if (contLinha = 1) {
			set ^VARCargaDadosRegistro($job, 1) = registro
			use arquivo read registro
			set contLinha = contLinha + 1
			continue
		}
		;Valida se os itens estão com tamanho 7
		if $length($piece(registro, ";", 1)) > 7 set ret = ret_sep_"> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		else  if $length($piece(registro, ";", 2)) > 7 set ret = ret_sep_"> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		
		if (contLinha = 2){ set ^VARCargaDadosRegistro($job, 2) = registro }
		
		use arquivo read registro
		set contLinha = contLinha + 1

	}
	
		
erro
	set err = ..erro(arquivo)
	if (err = 1) quit 1
	quit ret_sep_err_sep
]]></Implementation>
</Method>

<Method name="valParRepRede">
<Description><![CDATA[
Valida o formato do arquivo de parâmetros de rede]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

	set $ztrap = "erro"
	set ret = ""
	set sep = $char(13)_$char(10)
	set totColunas = 3
	set contLinha = 0
	
	open arquivo
	use arquivo read registro
	set contLinha = contLinha + 1
	
	
	
	if $length(registro, ";") '= totColunas {
		close arquivo
		quit "Esperadas "_totColunas_" colunas no arquivo mas encontradas "_$length(registro, ";")
	}
	
	if +$piece(registro, ";", 1) < 0 quit "> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		
	for {
		if (contLinha = 1){
			set ^VARCargaDadosRegistro($job, 1) = registro
			use arquivo read registro
			set contLinha = contLinha + 1
			continue
		}
		
		;Valida se os itens estão com tamanho 9
		if $length($piece(registro, ";", 1)) < 9 set ret = ret_sep_"> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		if (contLinha = 1){ set ^VARCargaDadosRegistro($job, 1) = registro }
		if (contLinha = 2){ set ^VARCargaDadosRegistro($job, 2) = registro }
		
		use arquivo read registro
		set contLinha = contLinha + 1

	}
	
		
erro
	set err = ..erro(arquivo)
	if (err = 1) quit 1
	quit ret_sep_err_sep
]]></Implementation>
</Method>

<Method name="valParRepProduto">
<Description><![CDATA[
Valida o formato do arquivo de parâmetros de produto]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

	set $ztrap = "erro"
	set ret = ""
	set sep = $char(13)_$char(10)
	set totColunas = 5
	set contLinha = 0
	
	open arquivo
	use arquivo read registro
	set contLinha = contLinha + 1
	
	
	
	if $length(registro, ";") '= totColunas {
		close arquivo
		quit "Esperadas "_totColunas_" colunas no arquivo mas encontradas "_$length(registro, ";")
	}
	
	if +$piece(registro, ";", 1) < 0 quit "> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		
	for {
		if (contLinha = 1){
			set ^VARCargaDadosRegistro($job, 1) = registro
			use arquivo read registro
			set contLinha = contLinha + 1
			continue
		}
		
		;Valida se os itens estão com tamanho 9
		if $length($piece(registro, ";", 1)) < 9 set ret = ret_sep_"> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		if (contLinha = 1){ set ^VARCargaDadosRegistro($job, 1) = registro }
		if (contLinha = 2){ set ^VARCargaDadosRegistro($job, 2) = registro }
		
		use arquivo read registro
		set contLinha = contLinha + 1

	}
	
		
erro
	set err = ..erro(arquivo)
	if (err = 1) quit 1
	quit ret_sep_err_sep
]]></Implementation>
</Method>

<Method name="valParRepLocal">
<Description><![CDATA[
Valida o formato do arquivo de parâmetros de local]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

	set $ztrap = "erro"
	set ret = ""
	set sep = $char(13)_$char(10)
	set totColunas = 4
	set contLinha = 0
	
	open arquivo
	use arquivo read registro
	set contLinha = contLinha + 1
	
	
	
	if $length(registro, ";") '= totColunas {
		close arquivo
		quit "Esperadas "_totColunas_" colunas no arquivo mas encontradas "_$length(registro, ";")
	}
	
	if +$piece(registro, ";", 1) < 0 quit "> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		
	for {
		if (contLinha = 1){
			set ^VARCargaDadosRegistro($job, 1) = registro
			use arquivo read registro
			set contLinha = contLinha + 1
			continue
		}
		
		;Valida se os itens estão com tamanho 9
		if $length($piece(registro, ";", 1)) < 9 set ret = ret_sep_"> Linha "_contLinha_" item "_$piece(registro, ";", 1)_" inválido."
		if (contLinha = 1){ set ^VARCargaDadosRegistro($job, 1) = registro }
		if (contLinha = 2){ set ^VARCargaDadosRegistro($job, 2) = registro }
		
		use arquivo read registro
		set contLinha = contLinha + 1

	}
	
		
erro
	set err = ..erro(arquivo)
	if (err = 1) quit 1
	quit ret_sep_err_sep
]]></Implementation>
</Method>

<Method name="erro">
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	if $piece($ZE, ">", 1) = "<ENDOFFILE" {
		close arquivo
		quit 1
	}
	
	quit $ZE
]]></Implementation>
</Method>

<Method name="menserro">
<Description><![CDATA[
Retorna uma mensagem de erro com o resumo do que ocorreu na importação
strGlobalErrorName="^CacheTempImportErrors("DASA","VAR.data.import.INWEINVImporter")"
$p(%objlasterror,$c(1),3)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str,err,tipo</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if $get(str) = "" quit ""
	
	set indice = $p(str,"""",4)
	set (x, ret) = ""
	set sep = $c(13)_$c(10)
	set nsp = $zutil(5)
	
	if indice = "" quit $piece(err, $c(1), 3)
	if '$data(^CacheTempImportErrors(nsp, indice)) quit $piece(err, $c(1), 3)
	
	for  set x=$order(^CacheTempImportErrors(nsp, indice, x)) quit:x=""  do
	. if ((tipo = 3) && ($g(^CacheTempImportErrors(nsp,indice,x)) = "")) {quit}
	. set ret = ret_"Linha="_x_", "_$g(^CacheTempImportErrors(nsp, indice, x), 1)_sep
	
	quit ret
]]></Implementation>
</Method>
</Class>
</Export>