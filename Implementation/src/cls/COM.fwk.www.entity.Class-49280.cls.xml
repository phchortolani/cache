<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="COM.fwk.www.entity.Class">
<Description><![CDATA[

Represents a class definition stored in @nM.

<p>

Actually, extends the @nM class <class>User.WWW001</class> 
so queries can be attached to it.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>User.WWW001,COM.fwk.entity.Persistent</Super>

<Parameter name="EXTENTSIZE">
<Default>1771</Default>
</Parameter>


<Method name="findByName">
<Description><![CDATA[
Loads a class (WWW001) based on the class name.

<p>

@author Tharsis Campos - Disclinc Brazil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>COM.fwk.www.entity.Class</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Loads a class (WWW001) based on the class name.
	; 
	; History
	; 30-Jan-2006		hjrb		SR14178:Removed company reference
	;-------------------------------------------------------------------------------
	;
	set resultSet = ##class(%ResultSet).%New()

	do resultSet.Prepare(
	     " SELECT %Id      " _
	     " FROM SQLUser.WWW001  " _
	     ;" WHERE (Company = 0) AND (ClassName = ?)     ")		// SR14178
	     " WHERE (ClassName = ?)     ")							// SR14178
	     
	do resultSet.Execute(className)

	set class = ""
	
	if resultSet.Next() {
		set class = ..%OpenId(resultSet.GetData(1))
	}
	
	do resultSet.Close()

	quit class
]]></Implementation>
</Method>

<Method name="findByLanguagePk">
<Description><![CDATA[

Loads all classes (WWW001) that have a language field
as a part of its primary key.

<p>

@author Tharsis Campos - Disclinc Brazil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Library.ArrayOfObjects</ReturnType>
<Implementation><![CDATA[

	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")

	do resultSet.Prepare(
	     " SELECT Class.Id                                     " _
	     " FROM WWW001 class, WWW002 PK                        " _
	     " WHERE Class.ClassName = PK.class                    " _
	     "   AND UCASE(PK.PropertyName) LIKE ""%LANGUAGE%""    ") 
	     
	do resultSet.Execute()

	set list = ##class(%Library.ArrayOfObjects).%New()
	set count = 1
	
	while (resultSet.Next()) {
		set classId = resultSet.GetData(1)
		
		set class = ..%OpenId(classId)
		
		do list.SetAt(class, classId)
	}
	
	do resultSet.Close()

	quit list
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>

<Property name="AltDelimiterASCII"/>

<Property name="AltSaveProcedure"/>

<Property name="BitMapIndexActive"/>

<Property name="BitmapIndex"/>

<Property name="BitmapXREFClass"/>

<Property name="ClassDescription"/>

<Property name="ClassName"/>

<Property name="ComboToSearch"/>

<Property name="CreatedBy"/>

<Property name="DataAccess"/>

<Property name="DateCreated"/>

<Property name="Datenfelder"/>

<Property name="DeleteFileOnNewInstallati"/>

<Property name="Description"/>

<Property name="ExecuteWhenIndexIsBeingPr"/>

<Property name="FREE1"/>

<Property name="FREE2"/>

<Property name="FREE3"/>

<Property name="InheritsFromSuperClasses"/>

<Property name="LanguageClassForRelations"/>

<Property name="Module1"/>

<Property name="NoCompilemappedclass"/>

<Property name="NoLocking"/>

<Property name="NumberExpectedDataset"/>

<Property name="NumberOfLockSeconds"/>

<Property name="OnlyNewDataRecordsOnUpdat"/>

<Property name="OtherUCI"/>

<Property name="OtherVolume"/>

<Property name="Primaerschluessel"/>

<Property name="RecordLength"/>

<Property name="SaveDataInFile"/>

<Property name="SaveIndexKeyInFile"/>

<Property name="SendModificationTo"/>

<Property name="SharedFile"/>

<Property name="UpdateFile"/>

<Property name="UserAccess"/>
</Storage>
</Class>
</Export>