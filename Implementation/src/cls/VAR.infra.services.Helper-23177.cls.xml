<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.services.Helper">
<ClassType/>
<IncludeCode>VARUtil,VARLog</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Parameter name="SERVICESPERMINUTE">
<Type>%Integer</Type>
<Default>1</Default>
</Parameter>

<Parameter name="SERVICESPERHOUR">
<Type>%Integer</Type>
<Default>2</Default>
</Parameter>

<Parameter name="SERVICESPERDAY">
<Type>%Integer</Type>
<Default>3</Default>
</Parameter>

<Parameter name="SERVICESPERWEEK">
<Type>%Integer</Type>
<Default>4</Default>
</Parameter>

<Parameter name="SERVICESPERMONTH">
<Type>%Integer</Type>
<Default>5</Default>
</Parameter>

<Parameter name="MINUTE">
<Type>%Integer</Type>
<Default>60</Default>
</Parameter>

<Parameter name="HOUR">
<Type>%Integer</Type>
<Default>3600</Default>
</Parameter>

<Property name="ServicesInstance">
<MultiDimensional>1</MultiDimensional>
<Private>1</Private>
</Property>

<Method name="RunServicesByFrequency">
<FormalSpec>pidFrequency:%Integer</FormalSpec>
<Implementation><![CDATA[	set $ztrap = "exceptionRunServicesByFrequency"

	set objResultSet = ##class(%Library.ResultSet).%New()
	set sc = objResultSet.Prepare("SELECT   DISTINCT Frequency, ServiceId "_
	                              "FROM     VARServicesController "_
	                              "WHERE    Frequency = ? "_
	                              "ORDER BY Frequency, Priority ")
	set sc = objResultSet.Execute(pidFrequency)

	if ($$$ISOK(sc)) {
		while (objResultSet.Next(.sc)) {
			set arrServices($increment(arrServices)) = objResultSet.Data("ServiceId")
		}		
		do objResultSet.Close()
		
		set idCount = ""
		for {
			set idCount = $order(arrServices(idCount))
			if (idCount = "") quit

			set idService	= $get(arrServices(idCount))
			set objService  = ##class(User.VARServicesController).%OpenId(idService)

			if ($isObject(objService)) {
				set dtToday 	   = +$horolog
				set dtLastRunDay   = +objService.LastRun
				set dtLastRunWeek  = ##class(Util).GetWeekNumberPerMonth(dtLastRunDay)
				set dtLastRunMonth = +$zdate(dtLastRunDay, 1)

				set curWeek  = ##class(Util).GetWeekNumberPerMonth(dtToday)
				set curMonth = +$zdate(dtToday, 1)

				if (((pidFrequency = ..#SERVICESPERDAY) && (dtLastRunDay = dtToday)) ||
				    ((pidFrequency = ..#SERVICESPERWEEK) && (dtLastRunWeek = curWeek)) ||
					((pidFrequency = ..#SERVICESPERMONTH) && (dtLastRunMonth = curMonth))) {
					continue					
				}
				else {
					set sc = ..ExecuteService(objService)
					if ($$$ISOK(sc)) set sc = ..UpdateLastRunRecord(objService)
				}
			}
		}
	}

finallyRunServicesByFrequency
	quit
	
exceptionRunServicesByFrequency
	set $ztrap = ""

	$$$VARLOGERROR("Error: "_$zerror)

	goto finallyRunServicesByFrequency]]></Implementation>
</Method>

<Method name="ExecuteService">
<FormalSpec>pobjService:User.VARServicesController</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if ($isObject(##class(%ClassDefinition).%OpenId(pobjService.ClassName))) {
		if ($isObject($get(..ServicesInstance(pobjService.%Id())))) {
			set objS = ..ServicesInstance(pobjService.%Id())
		}
		else {
			set objS = $zobjclassmethod(pobjService.ClassName, "%New")

			if ($isObject(objS)) set ..ServicesInstance(pobjService.%Id()) = objS
		}

		set sc = $zobjmethod(objS, "Run")
	}
	else {
		set sc = ##class(VAR.infra.util.Errors).MakeErrorStatus("Class do not exist!")
		$$$VARLOGERROR("Class "_pobjService.ClassName_" do not exist")
	}

	quit sc]]></Implementation>
</Method>

<Method name="StopServicesByFrequency">
<FormalSpec>pidFrequency:%Integer</FormalSpec>
<Implementation><![CDATA[	set $ztrap = "exceptionStopServicesByFrequency"

	set objResultSet = ##class(%Library.ResultSet).%New()
	set sc = objResultSet.Prepare("SELECT   DISTINCT Frequency, ServiceId "_
	                              "FROM     VARServicesController "_
	                              "WHERE    Frequency = ? "_
	                              "ORDER BY Frequency, Priority ")
	set sc = objResultSet.Execute(pidFrequency)

	if ($$$ISOK(sc)) {
		while (objResultSet.Next(.sc)) {
			set arrServices($increment(arrServices)) = objResultSet.Data("ServiceId")
		}		
		do objResultSet.Close()
		
		set idCount = ""
		for {
			set idCount = $order(arrServices(idCount))
			if (idCount = "") quit

			set idService	= $get(arrServices(idCount))
			set objService  = ##class(User.VARServicesController).%OpenId(idService)

			if ($isObject(objService)) {
				do ..StopService(objService)
			}
		}
	}

finallyStopServicesByFrequency
	quit
	
exceptionStopServicesByFrequency
	set $ztrap = ""

	$$$VARLOGERROR("Error: "_$zerror)

	goto finallyStopServicesByFrequency]]></Implementation>
</Method>

<Method name="StopService">
<FormalSpec>pobjService:User.VARServicesController</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if ($isObject(##class(%ClassDefinition).%OpenId(pobjService.ClassName))) {
		if ($isObject($get(..ServicesInstance(pobjService.%Id())))) {
			set objS = ..ServicesInstance(pobjService.%Id())
		}
		else {
			set objS = $zobjclassmethod(pobjService.ClassName, "%New")

			if ($isObject(objS)) set ..ServicesInstance(pobjService.%Id()) = objS
		}

		set sc = $zobjmethod(objS, "Stop")
	}
	else {
		set sc = ##class(VAR.infra.util.Errors).MakeErrorStatus("Class do not exist!")
		$$$VARLOGERROR("Class "_pobjService.ClassName_" do not exist")
	}

	quit sc]]></Implementation>
</Method>

<Method name="UpdateLastRunRecord">
<FormalSpec>pobjService:%ObjectIdentity</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set pobjService.LastRun = $horolog
	set sc = pobjService.%Save()
	if ($$$ISERR(sc)) {
		set msg = ##class(VAR.infra.util.Errors).GetErrorFromErrorStatus(sc)
		$$$VARLOGERROR("Error saving data of "_pobjService.Description_": "_msg)
	}

	quit sc]]></Implementation>
</Method>

<Method name="Insert">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set $ztrap = "exceptionInsert"

	while (1) {
		read !, "Enter the service frequency", !,
		        "1 - Per minute", !,
		        "2 - Per hour", !,
		        "3 - Per day", !,
		        "4 - Per week", !,
		        "5 - Per month ", frequency#1

		if (($length(frequency) = 0) || (frequency < 1) || (frequency > 5)) {
			write !!, "Invalid frequency", !
		}
		else {
			quit
		}
	}

	while (1) {
		read !, "Enter the service priority", !,
		        "1 - High", !,
		        "2 - High-medium", !,
		        "3 - High-low", !,
		        "4 - Medium-high", !,
		        "5 - Medium", !,
		        "6 - Medium-low", !,
		        "7 - Low-high", !,
		        "8 - Low-medium", !,
		        "9 - Low ", priority#1

		if (($length(priority) = 0) || (priority < 1) || (priority > 9)) {
			write !!, "Invalid priority", !
		}
		else {
			quit
		}
	}

	while (1) {
		read !, "Please insert a service ID: ", serviceId

		if ($isValidNum(serviceId)) {
			if ($isObject(##class(User.VARServicesController).%OpenId(serviceId))) {
				read !, "This service already exists. Replace? S/N ", blnReplace#1

				if ($zconvert(blnReplace, "t") = "S") quit
			}
		}
		else {
			write !, "Invalid service ID", !
		}
	}

	while (1) {
		read !, "Type the classname with the package. ", !, 
		        "(Ex: VAR.infra.example.Runner): ", strClassName

		set objDef = ##class(%ClassDefinition).%OpenId(strClassName)
		if ($isObject(objDef)) {
			if (objDef.%IsA(##class(ServiceRunner).%ClassName(1))) quit

			write !, "Invalid SuperClass."
		}
		else {
			write !, "Invalid Class."
		}
	}

	read !, "Type the service description: ", strServiceDesc

	set objHelper = ..%New()
	set sc = objHelper.InsertService(serviceId, frequency, priority, strClassName, strServiceDesc)
	if $$$ISOK(sc) {
		write !, "Service successfully added"
	}
	else {
		write !, "Error adding service"
		$$$VARLOGERROR(sc)
	}

finallyInsert
	quit
	
exceptionInsert
	if ('$find($zerror, "<INTERRUPT>")) {
		$$$VARLOGERROR("Error: "_$zerror)
		write !, "Error."
	}

	set $zerror = ""

	goto finallyInsert]]></Implementation>
</Method>

<Method name="InsertService">
<FormalSpec>pidServiceId:%Integer,pidFrequency:%Integer,pidPriority:%Integer,pstrClassName:%String,pstrDescription:%String=""</FormalSpec>
<Implementation><![CDATA[	if ((pidServiceId = "") || (pidFrequency = "") || (pidPriority = "") ||
		(pstrClassName = "") || (pstrDescription = "")) {
		write !, "Missing data"
		quit $$$NO
	}

	set objService = ##class(User.VARServicesController).%New()
	set objService.ClassName	= pstrClassName
	set objService.ServiceId 	= pidServiceId
	set objService.Frequency	= pidFrequency
	set objService.Priority		= pidPriority
	set objService.Description 	= pstrDescription
	quit objService.%Save()]]></Implementation>
</Method>

<Method name="Remove">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set $ztrap = "exceptionRemove"

	while (1) {
		read !, "Please insert the service ID that you want to remove: ", objServiceId, !
		if ($isValidNum(objServiceId)) {
			if ($isObject(##class(User.VARServicesController).%OpenId(objServiceId))) {
				write !
				do ..Print(objServiceId)		

				read !, "This service will be deleted. Are you sure? S/N ", blnDelete#1
				if ($zconvert(blnDelete, "t") = "S") quit
			}
			else {
				write !, "Service does not exist!", !
			}
		}
		else {
			write !, "Invalid service ID", !
		}
	}

	set objHelper = ..%New()
	set sc = objHelper.RemoveService(objServiceId)
	if $$$ISOK(sc) {
		write !, "Service successfully removed"
	}
	else {
		write !, "Error on removing service"
		$$$VARLOGERROR(sc)
	}

finallyRemove
	quit
	
exceptionRemove
	if ('$find($zerror, "<INTERRUPT>")) {
		$$$VARLOGERROR("Error: "_$zerror)
		write !, "Error."
	}

	set $zerror = ""

	goto finallyRemove]]></Implementation>
</Method>

<Method name="RemoveService">
<FormalSpec>id:%String</FormalSpec>
<Implementation><![CDATA[	quit ##class(User.VARServicesController).%DeleteId(id)]]></Implementation>
</Method>

<Method name="PrintList">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set rset = ##class(%Library.ResultSet).%New()
	do rset.Prepare("SELECT   * "_
	                "FROM     VARServicesController "_
	               	"ORDER BY Frequency, Priority ")
	do rset.Execute(sql)

	while (rset.Next()) {
		do ..Print(rset.Data("ID"))
	}]]></Implementation>
</Method>

<Method name="Print">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<Implementation><![CDATA[	set objService = ##class(User.VARServicesController).%OpenId(id)
	if ($isObject(objService)) {
		write "Service ID: ", objService.ServiceId, !
		write "Frequency: ", objService.Frequency, !
		write "Priority ", objService.Priority, !
		write "Class Name: ", objService.ClassName, !
		write "Description: ", objService.Description, !	
		if ($length(objService.LastRun) > 0) {
			write "Last Run: ", $zdatetime(objService.LastRun), !!
		}
		else {
			write "Last Run: ", !!	
		}
	}
	else {
		write "Invalid ID number."
	}]]></Implementation>
</Method>
</Class>
</Export>