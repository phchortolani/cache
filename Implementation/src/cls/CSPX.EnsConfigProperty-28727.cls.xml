<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsConfigProperty">
<Description><![CDATA[
Property page for SVG-based config page.]]></Description>
<ClassType/>
<IncludeCode>Ensemble,EnsUI</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Parameter name="CONTENTTYPE">
<Default>text/html</Default>
</Parameter>


<Parameter name="MAXLEN4TEXTAREA">
<Default>1024</Default>
</Parameter>

<UDLText name="T">
<Content>
// Tooltip popup dimensions

</Content>
</UDLText>


<Parameter name="ShortTipWidth">
<Default>400</Default>
</Parameter>


<Parameter name="ShortTipHeight">
<Default>130</Default>
</Parameter>


<Parameter name="LongTipWidth">
<Default>600</Default>
</Parameter>


<Parameter name="MaxTipHeight">
<Default>800</Default>
</Parameter>


<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// Avoid IE HTTP 1.1 bugs
	Set %response.HTTPVersion = "HTTP/1.0"
	Set %refresh = 0
	Set %reload = 0
	Set %update = 0

	// list of property sheet errors indexed by property name
	Kill %errors
	Set InvalidValue = $$$Text("Invalid Value")

	// test for submit
	If ($G(%request.Data("SUBMIT_OPERATION",1)) = "ApplyItem") {
		// submit of property sheet
		Set prodid = $G(%request.Data("PRODUCTION",1))
		Set itemid = $G(%request.Data("ITEM",1))
		Set item = ""
		Set:itemid'="" item = ##class(Ens.Config.Item).%OpenId(itemid)
		
		If ($IsObject(item)) {
			Set tNameChanged = (item.Name '= $G(%request.Data("Name",1)))
			Set tEnabledChanged = (item.Enabled '= $D(%request.Data("Enabled",1)))
			Set tCommentChanged = (item.Comment '= $G(%request.Data("Comment",1)))
			Set tScheduleChanged = (item.Schedule '= $G(%request.Data("Schedule",1)))
			Set tCategoryChanged = (item.Category '= $G(%request.Data("Category",1)))

			// general properties
			Set item.Category = $G(%request.Data("Category",1))
			Set item.Comment = $G(%request.Data("Comment",1))
			Set item.Schedule = $G(%request.Data("Schedule",1))
			Set item.Enabled = $D(%request.Data("Enabled",1))
			Set item.Foreground = $D(%request.Data("Foreground",1))
			Set item.LogTraceEvents = $D(%request.Data("LogTraceEvents",1))

			// validate name
			Set item.Name = $G(%request.Data("Name",1))
			Set ok = item.NameIsValid(item.Name) && (item.Name'[item.%GetParameter("NameIllegalChars"))
			If ('ok) {
				Set %errors("item.Name","msg") = InvalidValue
				Set %errors("item.Name","value") = item.Name
			}

			// validate inactive timeout
			Set item.InactivityTimeout = $G(%request.Data("InactivityTimeout",1))
			Set ok = item.InactivityTimeoutIsValid(item.InactivityTimeout)
			If ('ok) {
				Set %errors("item.InactivityTimeout","msg") = InvalidValue
				Set %errors("item.InactivityTimeout","value") = item.InactivityTimeout
			}

			// validate pool size
			Set item.PoolSize = $G(%request.Data("PoolSize",1))
			Set ok = item.PoolSizeIsValid(item.PoolSize)
			If ('ok) {
				Set %errors("item.PoolSize","msg") = InvalidValue
				Set %errors("item.PoolSize","value") = item.PoolSize
			}

			// clear out old settings
			Do item.Settings.Clear()
			Set n = 1

			// Host settings
			// match up array with query
			Set rs = ##class(%ResultSet).%New()
			Set rs.ClassName = item.ClassName
			Set rs.QueryName = "EnumerateSettings"
			If (rs.QueryIsValid()) {
				Set tSC = rs.Execute()
				While (rs.Next()) {
					Set name = $G(rs.Data("Name"))
					Set type = $G(rs.Data("Type"))
					Set value = $G(%request.Data("ConfigSettings",n))
					
					// now validate this value
					If (value '= "") {
						Set ok = $zobjclassmethod(item.ClassName,name _ "IsValid",value)
						If ('ok) {
							Set %errors(name,"msg") = InvalidValue
							Set %errors(name,"value") = value
						}
					}
					
					Set setting = ##class(Ens.Config.Setting).%New()
					Set setting.Target = "Host"
					Set setting.Name = name
					Set setting.Value = value
					
					Do item.Settings.Insert(setting)
					Set n = n + 1
				}
			}

			// Adapter settings
			// match up array with query
			Set rs = ##class(%ResultSet).%New()
			Set rs.ClassName = item.AdapterClassName()
			Set rs.QueryName = "EnumerateSettings"
			If (rs.QueryIsValid()) {
				Set tSC = rs.Execute()
				While (rs.Next()) {
					Set name = $G(rs.Data("Name"))
					Set type = $G(rs.Data("Type"))
					Set value = $G(%request.Data("ConfigSettings",n))
					
					// now validate this value
					If (value '= "") {
						Set ok = $zobjclassmethod(item.AdapterClassName(),name _ "IsValid",value)
						If ('ok) {
							Set %errors(name,"msg") = InvalidValue
							Set %errors(name,"value") = value
						}
					}
					
					Set setting = ##class(Ens.Config.Setting).%New()
					Set setting.Target = "Adapter"
					Set setting.Name = name
					Set setting.Value = value
					
					Do item.Settings.Insert(setting)
					Set n = n + 1
				}
			}
		}

		If ('$D(%errors)) {
			Set tSC = item.%Save()
			Set %refresh = 1
			Set %update = 1

			// if this got enabled, and there are duplicates, toggle the others
			If (tEnabledChanged) {
				If (..GetDuplicateItems(item.Production, item, .dlist)) {
					If (item.Enabled) {
						Set k = $O(dlist(""))
						While (k '= "") {
							If ((item '= dlist(k)) && dlist(k).Enabled) {
								Set dlist(k).Enabled = 0
								Do dlist(k).%Save()
							}
							Set k = $O(dlist(k))
						}
						Kill dlist
					}
				}
				Else {
					// no duplicates: no point in reloading page
					Set tEnabledChanged = 0
				}
			}

			// test if we have to reload the page
			If (tNameChanged || tEnabledChanged || tCommentChanged || tScheduleChanged) { 
				Set %reload = 1
			}
			
			If (tCategoryChanged) {
				Set %refresh = 1
			}

			If ('$$$ISERR(tSC)) {
				// update production class
				Set tSC = item.Production.SaveToClass()
			}
		}
	}
	ElseIf ($G(%request.Data("SUBMIT_OPERATION",1)) = "ApplyProduction") {
		// submit of production properties
		Set prodid = $G(%request.Data("PRODUCTION",1))
		Set production = ""
		Set:prodid'="" production = ##class(Ens.Config.Production).%OpenId(prodid)
		If ($IsObject(production)) {
			Set production.ActorPoolSize = $G(%request.Data("ActorPoolSize",1))
			Set production.Description = $G(%request.Data("Description",1))
			Set production.TestingEnabled = $D(%request.Data("TestingEnabled",1))
			Set production.LogGeneralTraceEvents = $D(%request.Data("LogGeneralTraceEvents",1))
			
			// validate pool size
			Set ok = production.ActorPoolSizeIsValid(production.ActorPoolSize)
			If ('ok) {
				Set %errors("ActorPoolSize","msg") = InvalidValue
				Set %errors("ActorPoolSize","value") = production.ActorPoolSize
			}
			// clear out old settings
			Do production.Settings.Clear()
			Set n = 1

			// Production settings
			// match up array with query
			Set rs = ##class(%ResultSet).%New()
			Set rs.ClassName = production.Name
			Set rs.QueryName = "EnumerateSettings"
			If (rs.QueryIsValid()) {
				Set tSC = rs.Execute()
				While (rs.Next()) {
					Set name = $G(rs.Data("Name"))
					Set type = $G(rs.Data("Type"))
					Set value = $G(%request.Data("ConfigSettings",n))
					
					// now validate this value
					If (value '= "") {
						Set ok = $zobjclassmethod(production.Name,name _ "IsValid",value)
						If ('ok) {
							Set %errors(name,"msg") = InvalidValue
							Set %errors(name,"value") = value
						}
					}
					Set setting = ##class(Ens.Config.Setting).%New()
					Set setting.Target = "Production"
					Set setting.Name = name
					Set setting.Value = value
					
					Do production.Settings.Insert(setting)
					Set n = n + 1
				}
			}
			If ('$D(%errors)) {
				Set tSC = production.%Save()
				Set %update = 1
				If ('$$$ISERR(tSC)) {
					// update production class
					Set tSC = production.SaveToClass()
				}
			}
		}
	}
	ElseIf ($G(%request.Data("SUBMIT_OPERATION",1)) = "AddItem") {
		// Add a new item or change class name of existing item
		Set prodid = $G(%request.Data("PRODUCTION",1))
		Set production = ""
		Set:prodid'="" production = ##class(Ens.Config.Production).%OpenId(prodid)

		Set itemid = $G(%request.Data("ITEM",1))
		Set:itemid'="" item = ##class(Ens.Config.Item).%OpenId(itemid)
		
		If ('$IsObject($G(item))) {
			Set itemid="", item = ##class(Ens.Config.Item).%New()
		}
		If ($IsObject(production) && $IsObject(item)) {
			Set item.Name = $G(%request.Data("Name",1))
			Set item.ClassName = $G(%request.Data("ClassName",1))
			Set item.Category = $G(%request.Data("Category",1))
			Set item.Comment = $G(%request.Data("Comment",1))
			If ""'=itemid {
				Set tSC = item.%Save()
			} Else {
				Do production.Items.Insert(item)
				Set tSC = production.%Save()
			}
			If ('$$$ISERR(tSC)) {
				// update production class
				Set tSC = production.SaveToClass()
			}
			Set %update = 1
			Set %reload = 1
		}
	}
	ElseIf ($G(%request.Data("SUBMIT_OPERATION",1)) = "RemoveItem") {
		// remove selected item
		Set prodid = $G(%request.Data("PRODUCTION",1))
		Set itemid = $G(%request.Data("ITEM",1))

		Set production = ""
		Set:prodid'="" production = ##class(Ens.Config.Production).%OpenId(prodid)

		Set item = ""
		Set:itemid'="" item = ##class(Ens.Config.Item).%OpenId(itemid)
		If ($IsObject(production) && $IsObject(item)) {
			Do ..RemoveItem(production,itemid)
			Set tSC = production.%Save()
			If ('$$$ISERR(tSC)) {
				// update production class
				Set tSC = production.SaveToClass()
			}
			Set %reload = 1
			Set %update = 1
		}
	}
	ElseIf ($G(%request.Data("SUBMIT_OPERATION",1)) = "CopyItem") {
		// add a copy of the current item
		Set prodid = $G(%request.Data("PRODUCTION",1))
		Set itemid = $G(%request.Data("ITEM",1))
		Set tNewName = $G(%request.Data("HOSTNAME",1))

		Set production = ""
		Set:prodid'="" production = ##class(Ens.Config.Production).%OpenId(prodid)
		Set item = ""
		Set:itemid'="" item = ##class(Ens.Config.Item).%OpenId(itemid)
		If ($IsObject(production) && $IsObject(item)) {
			// make a copy of the item
			Set tCopy = item.%ConstructClone(1)

			If ($IsObject(tCopy)) {
				Set tCopy.Name = tNewName
				Set tCopy.Enabled = 0 // by default, new one is off
				Do production.Items.Insert(tCopy)
				Set tSC = production.%Save()
				If ('$$$ISERR(tSC)) {
					// update production class
					Set tSC = production.SaveToClass()
				}
				Set %update = 1
				Set %reload = 1
			}
		}
	}
	ElseIf ($G(%request.Data("SUBMIT_OPERATION",1)) = "RestoreDefaults") {
		// Restore defaults for this production
		Set prodid = $G(%request.Data("PRODUCTION",1))
		Set production = ""
		Set:prodid'="" production = ##class(Ens.Config.Production).%OpenId(prodid)
		If ($IsObject(production) && (production.Name '= "")) {
			
			// Assume name is class name...
			Do production.LoadFromClass(production.Name)

			Set %reload = 1
			Set %update = 1
		}
	}
	ElseIf ($G(%request.Data("SUBMIT_OPERATION",1)) = "ToggleEnabled") {
		// toggle enabled state of item
		Set prodid = $G(%request.Data("PRODUCTION",1))
		Set itemid = $G(%request.Data("ITEM",1))

		Set production = ""
		Set:prodid'="" production = ##class(Ens.Config.Production).%OpenId(prodid)

		Set item = ""
		Set:itemid'="" item = ##class(Ens.Config.Item).%OpenId(itemid)
		
		If ($IsObject(production) && $IsObject(item)) {
			Set item.Enabled = 'item.Enabled

			// deal with duplicate items
			// this does not apply in case of click on diagram
			// but we might want a button to do this so, here it is!
			If (..GetDuplicateItems(item.Production, item, .dlist)) {
				If (item.Enabled) {
					Set k = $O(dlist(""))
					While (k '= "") {
						If ((item '= dlist(k)) && dlist(k).Enabled) {
							Set dlist(k).Enabled = 0
							Do dlist(k).%Save()
							Set %reload = 1
						}
						Set k = $O(dlist(k))
					}
					Kill dlist
				}
			}
			Else {
				// no duplicates: no point in reloading page
			}

			// now save item
			Set tSC = item.%Save()
			If ('$$$ISERR(tSC)) {
				// update production class
				Set tSC = production.SaveToClass()
			}
			Set %update = 1
		}
	}
	ElseIf ($G(%request.Data("SUBMIT_OPERATION",1)) = "SaveAsDefault") {
		// Save this as the default
		Set prodid = $G(%request.Data("PRODUCTION",1))
		Set production = ""
		Set:prodid'="" production = ##class(Ens.Config.Production).%OpenId(prodid)
		If ($IsObject(production)) {
			Do production.SaveToClass()
		}
	}
	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set prodid = $G(%request.Data("PRODUCTION",1))
	Set itemid = $G(%request.Data("ITEM",1))
	Set process = $G(%request.Data("PROCESS",1))
	Set tIsProdRunning = (prodid = $G($$$EnsRuntime("Name")))

	Set tLocked = 0
	Set production = ""
	If (prodid '= "") {
		Set production = ##class(Ens.Config.Production).%OpenId(prodid)

		// try to lock the associated production class
		Set tSC = $$ChkClass^%qccServer(prodid)
		If ($$$ISERR(tSC)) {
			Set tLocked = 1
		}
		Else {
			Set tSC = $$UnlockClass^%qccServer(prodid)
		}
	}
	
	Set item = ""
	If ($P(itemid,"^",1) = "missing") {
		// this is a missing item
		Set missing = 1
		// get type, strip off "Business"
		Set type = $P($P(itemid,"^",2),"Business",2)
		Set cls = $P(itemid,"^",3)
	}
	Else {
		Set item = ""
		Set:itemid'="" item = ##class(Ens.Config.Item).%OpenId(itemid)
		Set missing = 0
	}

	&html<<html><head>

	<title>Property Sheet</title>
<style>
body {
	background: #A0A0F0;
	margin: 0px;
	padding: 0px;
	font-family: verdana;

	xfilter: progid:DXImageTransform.Microsoft.Gradient(GradientType=1, StartColorStr='#DDEEFF', EndColorStr='#4040FF');
}

table.proptitle {
	background: blue;
	color: yellow;
	width: 100%;
	border-bottom: black 1px solid;

	filter:
		progid:DXImageTransform.Microsoft.Gradient(GradientType=2, StartColorStr='#A0A0FF', EndColorStr='#E0E0FF')
		progid:DXImageTransform.Microsoft.dropShadow(color=#404040, OffX=2, OffY=2, Positive=2);
}

table.proptitle td {
	padding-left: 20px;
}


table.formtable {
	padding-left: 20px;
}

td.label {
	font-size: 0.7em;
	cursor: help;
}

select.ok {
}

select.changed {
	color: black;
	background: yellow;
}

select.error {
	color: white;
	background: red;
}

textarea.ok {
}

textarea.changed {
	color: black;
	background: yellow;
}

select,textarea,input {
	font-size: 0.7em;
}

input.ok {
}

input.readonly {
	background: silver;
}

input.changed {
	color: black;
	background: yellow;
}

input.changedCheckBox {
	border: 2px blue solid;
}

.cfgBtn {
	width: 10.0em;
}

input.error {
	color: white;
	background: red;
}

div.error {
	font-size: 0.8em;
	color: yellow;
	background: red;
	padding: 2px;
	border: 1px black solid;
}

span.error {
	font-size: 0.8em;
	color: yellow;
	background: red;
	padding: 2px;
	border: 1px black solid;
}

td.error {
	font-size: 0.8em;
	font-weight: bold;
	color: red;
}

td.classname {
	font-size: 0.8em;
}

td.timestamp {
	font-size: 0.8em;
}

table.formtable td {
	xfont-size: 0.8em;
}

td.subtitle {
	font-weight: bold;
	font-size: 0.8em;
}

a.itemHelp {
	color: green;
}

DIV.text				{	font-size: 0.8em; 
								margin-left: 20px; margin-right: 40px;
								margin-bottom: 20px;
							}

DIV.text1			{	font-size: 0.8em; 
								margin-left: 20px; margin-right: 40px;
								margin-top: 20px;
								margin-bottom: 20px;
							}

DIV.text1:first-letter	{	font-size: 1.4em;  }

</style>>

	if (%refresh) {
		// update diagram
		Do ##class(EnsConfigSVG).GetItemNames(item,.pkg,.tcls)

		&html<<script language="javascript">
			self.parent.updateItem(#(..QuoteJS(itemid))#,#(..QuoteJS(pkg))#,#(..QuoteJS(tcls))#,#(..QuoteJS(item.PoolSize))#,#($S(item.Enabled:"true",1:"false"))#,#(..QuoteJS(item.Category))#);
			</script>
		>
	}

	if (%reload) {
		// reload page
		&html<<script language="javascript">
			self.parent.location.reload();
			</script>
		>
	}

	Set ConfigRemoveComponent = $$$TextJS("Do you wish to remove this component?")
	Set ConfigChangeClass1 = $$$TextJS("Do you wish to change the class associated with this item?")
	Set ConfigChangeClass2 = $$$TextJS("Note that any settings saved for this item will be lost.")
	Set ConfigStartProd = $$$TextJS("Do you wish to start this production?")
	Set ConfigStopProd = $$$TextJS("Do you wish to stop the current production?")
	Set ConfigCopyComponent = $$$TextJS("Please enter a name for the new component:")
 &html<<script language="javascript">

function selectNewItem(prodid, elid)
{
	alert("selectNewItem is deprecated.");
}

// show property page for different item
function selectDifferentItem(itemid)
{
	// reload page with new item
	self.document.location = '#(..Link("CSPX.EnsConfigProperty.cls",,1))#' + 'PRODUCTION=' + escape('#(prodid)#') + '&ITEM=' + escape(itemid);
}

// change color of edited items
function itemChanged(item, ischeckbox)
{
	item.className = (ischeckbox) ? 'changedCheckBox' : 'changed';
	enableApply();

	return true;
}

function enableApply()
{
	// enable apply button
	var btn = self.document.getElementById("BTN_Apply");
	btn.disabled = false;
}

function btnApplyItem()
{
	var form = self.document.theForm;
	var enabled = form.Enabled.checked;
	var poolsize = form.PoolSize.value;
	if (document.getElementById("IsBP").value == 1 && enabled == false && poolsize == 0) {
		var ok = confirm(document.getElementById("WarnDisable").value + "\n\n" + document.getElementById("WarnDisable1").value);
		if (ok == false) return true;
	}	
	form.SUBMIT_OPERATION.value = "ApplyItem";
	form.submit();
	return true;
}

function btnApplyAddItem()
{
	var form = self.document.theForm;

	if (form.ClassName.value == '') {
		alert(document.getElementById("PleaseSelectClass").value);
		return false;
	}
	if (form.Name.value == '') {
		form.Name.value = form.ClassName.value;
	}
	form.SUBMIT_OPERATION.value = "AddItem";
	form.submit();
	return true;
}

function btnApplyProduction()
{
	var form = self.document.theForm;
	form.SUBMIT_OPERATION.value = "ApplyProduction";
	form.submit();
	return true;
}

function btnApplyOperations()
{
	if (confirm(document.getElementById("ApplyChanges").value)) {
		var form = self.document.theForm;
		form.SUBMIT_OPERATION.value = "ApplyOperations";
		form.submit();
	}
	return true;
}

function btnRestoreDefaults()
{
	if (confirm(document.getElementById("RestoreChanges").value)) {
		var form = self.document.theForm;
		form.SUBMIT_OPERATION.value = "RestoreDefaults";
		form.submit();
	}
	return true;
}

function btnSaveAsDefault()
{
	if (confirm(document.getElementById("SaveChanges").value)) {
		var form = self.document.theForm;
		form.SUBMIT_OPERATION.value = "SaveAsDefault";
		form.submit();
	}
	return true;
}

function btnCancel()
{
	var form = self.document.theForm;
	form.SUBMIT_OPERATION.value = "Cancel";
	form.submit();
	return true;
}

function btnAddHost(host,name)
{	
	// show AddHost wizard
	var url = 'UtilEnsHostWizard.csp?$ID1=' + escape('#(prodid)#') + '&$ID2=' + escape(host);
	launchPopupWindow(url);
}

function btnAddMissingHost(host,name)
{	
	// show inline add host page
	var form = self.document.theForm;
	form.SUBMIT_OPERATION.value = "AddHost";
	form.HOSTTYPE.value = host;
	form.HOSTNAME.value = name;
	form.submit();
	return true;
}

function btnRemoveItem()
{
	if (confirm("#(ConfigRemoveComponent)#")) {    //"Do you wish to remove this component?"
		var form = self.document.theForm;
		form.SUBMIT_OPERATION.value = "RemoveItem";
		form.submit();
	}
	
	return true;
}

function btnCopyItem()
{
	var form = self.document.theForm;
	var name = prompt("#(ConfigCopyComponent)#",form.Name.value + '2');
	if (name) {
		form.SUBMIT_OPERATION.value = "CopyItem";
		form.HOSTNAME.value = name;
		form.submit();
	}
	
	return true;
}

function btnChangeClass()
{
	var confirmmsg = "#(ConfigChangeClass1)#" + "\n" + "#(ConfigChangeClass2)#";
	if (confirm(confirmmsg)) {  //Do you wish to change the class associated with this item?\nNote that any settings saved for this item will be lost
		var form = self.document.theForm;
		form.SUBMIT_OPERATION.value = "ChangeClass";
		form.submit();
	}
	
	return true;
}

/// Toggle enabled flag for given item
function btnToggleEnabled(itemid)
{
	// show inline add host page
	var form = self.document.theForm;
	form.SUBMIT_OPERATION.value = "ToggleEnabled";
	form.ITEM.value = itemid;
	form.submit();
	return true;
}

/// Show BPL for process
function btnItemDefinition(cls)
{
	top.self.location = '#(..Link("UtilEnsBPDefinition.csp",,1))#' + '$ID1=' + cls;
	return true;
}

/// Show Rules for message routing process
function btnRoutingRules(host, rname)
{
	var id = host + '||' + rname;
	
	top.self.location = '#(..Link("UtilEnsRoutingRuleEditor.csp",,1))#' + '$ID1=' + id + '&READONLY=1';
	return true;
}

/// Show Model for production
function btnShowModel(prodid)
{
	top.self.location = '#(..Link("UtilEnsProductionModel.csp",,1))#' + '$ID1=' + prodid;
	return true;
}

function btnTestItem(hosttype,hostname)
{
	// launch the testing service
	var parm = '';
	var type = '';
	switch (hosttype) {
	case 'BusinessProcess':
		parm = 'PROCESS';
		type = 'process';
		break;
	case 'BusinessOperation':
		parm = 'OPERATION';
		type = 'operation';
		break;
	}

	if (type != '') {
		top.self.location = '#(..Link("UtilEnsTestingService1.csp",,1))#' + 'TYPE=' + escape(type)
			+ '&' + parm + '=' + escape(hostname);
	}
	return true;
}

function btnNew()
{
	var form = self.document.theForm;
	form.SUBMIT_OPERATION.value = "New";
	form.submit();
	return true;
}

// simple help box for production
function btnProductionHelp()
{
	var msg = ''
	
	msg += document.getElementById("ProdHelpTitle").value + '\n';
	msg += '-------------------------------------------\n';
	msg += document.getElementById("ProdHelpApply").value + '\n';
	msg += document.getElementById("ProdHelpCancel").value + '\n';
	msg += document.getElementById("ProdHelpAdd").value + '\n';
	msg += document.getElementById("ProdHelpStartStop").value + '\n';
	
	alert(msg);
	return true;
}

// simple help box for items
function btnItemHelp()
{
	var msg = ''
	
	msg += document.getElementById("ProdHelpTitle").value + '\n';
	msg += '--------------------------------------------\n';
	msg += document.getElementById("ProdHelpApply").value + '\n';
	msg += document.getElementById("ProdHelpCancel").value + '\n';
	msg += document.getElementById("ProdHelpCopy").value + '\n';
	msg += document.getElementById("ProdHelpRemove").value + '\n';
	msg += document.getElementById("ProdHelpChange").value + '\n\n';
	msg += document.getElementById("ProdHelpNote").value + '\n';

	alert(msg);
	return true;
}

/// Show Monitor Instance pane for an item
function btnShowInstanceMonitor(host)
{
	// go to monitor page
	self.document.location = '#(..Link("UtilEnsMonitor.csp",,1))#' + '$FRAME=Info&$ID1=' + escape(host);
	return true;
}

/// Show Monitor History pane for an item
function btnShowInstanceHistory(host)
{
	// go to history page
	self.document.location = '#(..Link("UtilEnsActivityGraph.csp",,1))#' + '$FRAME=Info&$ID1=' + escape(host);
	return true;
}

/// Show Queue contents pane for an item
function btnShowQueue(host)
{
	// go to queue page
	self.document.location = '#(..Link("UtilEnsQList.csp",,1))#' + '$FRAME=Detail&$ID1=' + escape(host);
	return true;
}

function btnStartStopProduction(start)
{
	if (start) {
		if (!confirm("#(ConfigStartProd)#")) {    //Do you wish to start this production?
			return;
		}
	}
	else {
		if (!confirm("#(ConfigStopProd)#")) {    //Do you wish to stop the current production?
			return;
		}
	}

	var url = '#(..Link("CSPX.EnsConfigProperty.cls",,1))#'+'PRODUCTION=#(prodid)#';
	var mode = start ? 'start' : 'stop';
	self.document.location='#(..Link("CSPX.EnsStartStopPage.cls",,1))#' + 'MODE=' + mode + '&URL=' + escape(url) + '&$ID1=#(prodid)#';
	return true;
}

function launchPopupWindow(url, pageName, features)
{
	// We must dig out the CSPCHD value from the current location so that the popup keeps the context
	var cspchd = null;
	var params = self.document.location.href.split("?");

	if (params.length > 1) {
		params = params[1].split("&")
		for (var p in params) {
			plist = params[p].split("=");
			if (plist[0] == 'CSPCHD') {
				cspchd = plist[1];
			}
		}
	}

	if (features == null) {
		// default features
		features = "status,scrollbars,resizable";
	}

	if (pageName == null) {
		// default page name
		pageName = 'PopupWindow';
	}

	// see if we need to provide size and position
	var wid = self.screen.width;
	var hgt = self.screen.height;
	wid = wid * 0.6;
	hgt = hgt * 0.6;
	var top = self.screen.height * 0.2;
	var left = self.screen.width * 0.2;

	if (-1 == features.indexOf('width')) {
		features = features + (''==features?'':',') + 'width=' + wid; 
	}
	if (-1 == features.indexOf('height')) {
		features = features + (''==features?'':',') + 'height=' + hgt; 
	}
	if (-1 == features.indexOf('top')) {
		features = features + (''==features?'':',') + 'top=' + top; 
	}
	if (-1 == features.indexOf('left')) {
		features = features + (''==features?'':',') + 'left=' + left; 
	}

  	var id = '';
  	var questionmark = url.split("?");
  	var page;
  	if (questionmark.length > 1) {
	  	page = escape(questionmark[0]) + "?" + questionmark[1];
	  	page = page + "&" + id;
  	}
  	else {
		page = url + "?" + id;
  	}

  	// Append the CSPCHD (if we found one)
  	if (null != cspchd) {
	  	page = page + "&CSPCHD=" + cspchd;
  	}

	// create popup window
	var popup = window.open(page,pageName,features);
	popup.focus();
	
	// remember popup window in our window
	self.popupWindow = popup;
}

function calculateHeight(length, width)
{
    // It's about 7 pixels per character (wide); so divide width by 7 to get the 
    // number of characters per line; then divide the length by the answer; and that's
    // the number of lines.  Add 5 extra, and then multiply by 18 to get the
    // pixel height of the necessary box:
    var charsPerLine = width / 7;
    var numLines = length/charsPerLine;
    return (numLines<1) ? 0 : parseInt((numLines-2) * 18);
 }

function popupShortTip(key)
{
    popupTip(key,#(..#ShortTipHeight)#,#(..#ShortTipWidth)#);
}

function popupLongTip(key, numLines, numChars)
{
    // first: calculate height using just the number of characters in the content, and the width:
    var pheight = calculateHeight(numChars, #(..#LongTipWidth)#);
    
    // now, add the number of carriage returns
	if (pheight < numLines*18) { pheight = parseInt((numLines * 18 + pheight) * 0.6); }
    
    // now make sure that it's not above the maximum:
    if (pheight > #(..#MaxTipHeight)#) { pheight = #(..#MaxTipHeight)#; }
    popupTip(key, #(..#ShortTipHeight)# + pheight, #(..#LongTipWidth)#);
}

function popupTip(key, height, width)
{
    var url='UtilEnsTooltipPopup.csp?KEY=' + key + '';
    
    // the title of the page has to be unique; so that it can determine its own features
    // (mainly, height and width)
    // since ie does not tolerate spaces in its title names, take the unique name of 
    // the tooltip (which is title) and remove the spaces and make *that* the title
    
    var whitespace=/(\s+)/g
    var ieSafeTitle = key.replace(whitespace, "");
    
    var features = "scrollbars,resizable,width=" + width + "px,height=" + height + "px";
    launchPopupWindow(url, ieSafeTitle, features);
}

 </script>

	</head>>

	Set msgMissing1 = $$$Text("Missing Item.")
	Set msgMissing2 = $$$Text("This item is referred to by other items but is not part of this production's configuration.")
	Set msgLocked1 = $$$Text("The production class")
	Set msgLocked2 = $$$Text("is being edited by another user. It is opened in read-only mode.")
	Set msgUpdateProduction = $$$Text("Updating the production...")
	Set btnOK = $$$Text("OK")
	Set AddProduction = $$$Text("Add To Production")	
	Set StopProd = $$$Text("Stop Production")
	Set StartProd = $$$Text("Start Production")

	&html<<body>>
	
	// test for locked classes
	If (tLocked) {
		&html<<div class="Text1">
		<div class="error">#(msgLocked1)# <b>#(prodid)#</b> #(msgLocked2)#</div>
		</div>
		>
	}

	// set javascript alert boxes localized text here
	Set ProdHelpTitle = $$$Text("Production Settings Window")
	Set ProdHelpApply = $$$Text("The Apply button saves changes to this production.")
	Set ProdHelpCancel = $$$Text("The Cancel button cancels current changes.")
	Set ProdHelpAdd = $$$Text("The Add... buttons let you add a new item to this production.")
	Set ProdHelpStartStop = $$$Text("The Start Production button starts this production; the Stop Production button stops the current production.")
	Set ProdHelpRemove = $$$Text("The Remove button removes this item from the production.")
	Set ProdHelpChange = $$$Text("The Change Class button lets you change the class associated with this item.")
	Set ProdHelpCopy = $$$Text("The Copy button adds a copy of this item to the production.")
	//!!!
	Set ProdHelpInstances = $$$Text("The Instances button displays .")
	Set ProdHelpHistory = $$$Text("Note: Placing the mouse over a label in the settings table displays a popup description.")
	Set ProdHelpNote = $$$Text("Note: Placing the mouse over a label in the settings table displays a popup description.")
	Set PleaseSelectClass = $$$Text("Please select a class for this item.")
	Set ApplyChanges = $$$Text("Do you wish to apply these changes?")
	Set RestoreChanges = $$$Text("Do you wish to restore the default settings for this production?")
	Set SaveChanges = $$$Text("Do you wish to save the current settings as the default for this production?")
	Set ProdHelpQueue = $$$Text("Display message queue associated with this item.")
	Set WarnDisable = $$$Text("WARNING: 'Enabled' is not checked and 'PoolSize' is 0. If you save these settings, the Ens.Actor shared actor queue will become disabled, effectively disabling all other business processes that also use the shared queue. If this is not what you want, you can still disable this business process, but first set 'PoolSize' > 0 so that this business process uses its own dedicated queue. Then you can safely disable it.")
	Set WarnDisable1 = $$$Text("Are you sure you want to disable all business processes?")
	// YSD898
	// These fields do not need to be submitted so 
	// put them into their own form tag. 
	&html<<form name="msgForm">>
	&html<<input type="hidden" id="ProdHelpTitle" name="ProdHelpTitle" value="#(ProdHelpTitle)#">>
	&html<<input type="hidden" id="ProdHelpApply" name="ProdHelpApply" value="#(ProdHelpApply)#">>
	&html<<input type="hidden" id="ProdHelpCancel" name="ProdHelpCancel" value="#(ProdHelpCancel)#">>
	&html<<input type="hidden" id="ProdHelpAdd" name="ProdHelpAdd" value="#(ProdHelpAdd)#">>
	&html<<input type="hidden" id="ProdHelpStartStop" name="ProdHelpStartStop" value="#(ProdHelpStartStop)#">>
	&html<<input type="hidden" id="ProdHelpRemove" name="ProdHelpRemove" value="#(ProdHelpRemove)#">>
	&html<<input type="hidden" id="ProdHelpCopy" name="ProdHelpCopy" value="#(ProdHelpCopy)#">>
	&html<<input type="hidden" id="ProdHelpChange" name="ProdHelpChange" value="#(ProdHelpChange)#">>
	&html<<input type="hidden" id="ProdHelpNote" name="ProdHelpNote" value="#(ProdHelpNote)#">>
	&html<<input type="hidden" id="PleaseSelectClass" name="PleaseSelectClass" value="#(PleaseSelectClass)#">>
	&html<<input type="hidden" id="ApplyChanges" name="ApplyChanges" value="#(ApplyChanges)#">>
	&html<<input type="hidden" id="RestoreChanges" name="RestoreChanges" value="#(RestoreChanges)#">>
	&html<<input type="hidden" id="SaveChanges" name="SaveChanges" value="#(SaveChanges)#">>
	&html<<input type="hidden" id="WarnDisable" name="WarnDisable" value="#(WarnDisable)#">>
	&html<<input type="hidden" id="WarnDisable1" name="WarnDisable1" value="#(WarnDisable1)#">>
	Set IsBP = 0
	If item '= "" Set IsBP = item.BusinessType() = $$$eHostTypeProcess
	&html<<input type="hidden" id="IsBP" name="IsBP" value="#(IsBP)#">>
	&html<</form>>

	&html<<form name="theForm" method="POST" #($S(tLocked:"disabled",1:""))#>>
	Write ..InsertHiddenFields("CSPX.EnsConfigProperty.cls")
	&html<<input type="hidden" name="PRODUCTION" value="#(..EscapeHTML(prodid))#">>
	Set iid = $S($P(itemid,"^",1)="missing":"",1:itemid)
	&html<<input type="hidden" name="ITEM" value="#(..EscapeHTML(iid))#">>

	// specifies which operation we are submitting
	&html<<input type="hidden" name="SUBMIT_OPERATION" value="">>
	&html<<input type="hidden" name="HOSTTYPE" value="">>
	&html<<input type="hidden" name="HOSTNAME" value="">>
	If (%update && $IsObject(production) && tIsProdRunning) {
		// update the current production (if running)
		&html<<table><tr><td>&nbsp;</td><td>>
		&html<<div>#(msgUpdateProduction)#</div>>
		&html<<pre>>
		Set tSC = $zobjclassmethod(prodid,"Update")
		&html<</pre>
				<hr>
				<input class="cfgBtn" type="button" name="BTN_Cancel" value="#(btnOK)#" onclick="btnCancel();">
				</td></tr></table>>
	}
	ElseIf (($G(%request.Data("SUBMIT_OPERATION",1)) = "AddHost") || 
		($G(%request.Data("ADDITEM",1)) = 1)) {

		Set tHostType = $G(%request.Data("HOSTTYPE",1),"Service")
		Set tHostName = $G(%request.Data("HOSTNAME",1))
		Set item = ##class(Ens.Config.Item).%New()
		Set item.Name = tHostName
		Do ..ShowAddHostForm(production,item,tHostType,tHostName)
	}
	ElseIf (($G(%request.Data("SUBMIT_OPERATION",1)) = "ChangeClass")) {
		Set tHostType = "Class"
		Set tHostName = $G(%request.Data("HOSTNAME",1))
		Do ..ShowAddHostForm(production,item,tHostType,tHostName)
	}
	Else {
		#; YSD1755 Check production state. Make link available to take user to Home for Update. 
		Kill tResult 
		Set pGetCaption = 0
		Do ##class(CSPX.EnsHomeSummary).GetProductionSummary(.tResult, pGetCaption, %response.Language)
		If +$G(tResult("Update")) = 1 {
			&html<<div class="Text1"><a href="UtilEnsHome.csp" target="_top">#($$$TextHTML("Production needs Update! Click 'Update Production' from the Home page."))#</a></div>>
		}
		If ($IsObject(production) && $IsObject(item)) {
			// property sheet
			Do ..ShowItemSheet(production,item)
		}
		ElseIf (missing) {
			&html<<div class="Text1">#(msgMissing1)#</div>>
			&html<<div class="Text">#(msgMissing2)#</div>>
			&html<<div class="Text"><input type="button" name="BTN_Add" value="#(AddProduction)#" onclick="btnAddMissingHost('#(type)#','#(cls)#');"></div>>
		}
		ElseIf ($IsObject(production)) {
			// production properties
			Do ..ShowProductionSheet(production)
		}
	}
	&html<</form>>
	&html<</body></html>>
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ShowItemSheet">
<Description><![CDATA[
Display a form for the given item]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set lPleaseCorrect = $$$Text("please correct")
	Set lNoDescription = $$$Text("No description provided")	
	Set lClassNotExist = $$$Text("Class does not exist")
	Set lCancel = $$$Text("Cancel")
	Set lApply = $$$Text("Apply")

	Set lCopyHelp = $$$Text("There are multiple items with the same name. Use this list to select the item to edit.")
	Set lCopies = $$$Text("Item")

	Set tIsProdRunning = (production.Name = $G($$$EnsRuntime("Name")))

	// help (title) messages for buttons
	Set helpApply = $$$Text("Apply changes to the production")
	Set helpCancel = $$$Text("Cancel changes")
	Set helpRemove = $$$Text("Remove this item from the production")
	Set helpCopy = $$$Text("Add a copy of this item to the production")
	Set helpChange = $$$Text("Change the class associated with this production")
	Set helpInstances = $$$Text("Display a list of instances of this item")
	Set helpHistory = $$$Text("Display a chart showing activity for this item")
	Set helpTest = $$$Text("Invoke the Testing Service for this item")
	Set helpQueue = $$$Text("Display the Message Queue for this item")
	Set helpDefinition = $$$Text("Display the definition of this Business Process")
	Set helpRules = $$$Text("Display the rules defined for this Message Routing Process")
	Set helpHelp = $$$Text("Display a help window")

	#;YSD1352 - 54500 Set tTitleType=$$$ConfigTypeName(item.BusinessType())
	Set tTitleType=$case(item.BusinessType(), $$$eHostTypeUnknown:$$$Text("Unknown"), $$$eHostTypeService:$$$Text("Business Service"), $$$eHostTypeProcess:$$$Text("Business Process"), $$$eHostTypeOperation:$$$Text("Business Operation"), $$$eHostTypeActor:$$$Text("Actor"), :$$$Text("Unknown"))
	
	&html<<table class="proptitle" width="100%"><tr><td class="classname">#(tTitleType)#: <b>#(item.ClassName)#</b>>

	// if there are duplicate items with same name, show pick list
	If (..GetDuplicateItems(production, item, .dlist)) {
		&html<&nbsp;&nbsp;&nbsp;&nbsp;<span title="#(lCopyHelp)#">#(lCopies)#:<select onchange="selectDifferentItem(this.value);">>
		Set k = $O(dlist(""))
		While (k '= "") {
			Set di = dlist(k)
			Set text = $S(item=di:"["_k_"] ",1:" "_k_"  ")_ $S(di.Comment="":di.ClassName,1:di.Comment) _ $S(di.Enabled:"*",1:"")
			&html<<option #($S(item=di:"selected",1:""))# value="#($ZCVT(di.%Id(),"O","HTML"))#">&nbsp;#($ZCVT(text,"O","HTML"))#</option>>
			Set k = $O(dlist(k))
		}
		&html<</select></span>>
		Kill dlist
	}

	&html<</td></tr></table>>

	&html<<table border="0" width="90%">>

	// buttons
	Set cmdCopy = $$$Text("Copy")
	Set cmdRemove = $$$Text("Remove")
	Set cmdChange = $$$Text("Change Class")
	Set cmdInstance = $$$Text("Instances")
	Set cmdHistory = $$$Text("History")
	Set cmdView = $$$Text("View Definition")
	Set cmdViewRule = $$$Text("View Rules")
	Set cmdQueue = $$$Text("Queue")
	Set cmdTest = $$$Text("Test")
	Set cmdHelp = $$$Text("Help")
	
	&html<<tr><td colspan="2" style="padding-left: 20px;">
			<input disabled class="cfgBtn" type="button" name="BTN_Apply" title="#(helpApply)#" value="#(lApply)#" onclick="btnApplyItem();">&nbsp;
			<input class="cfgBtn" type="button" name="BTN_Cancel" title="#(helpCancel)#" value="#(lCancel)#" onclick="btnCancel();">&nbsp;
			<input class="cfgBtn" type="button" name="BTN_Copy" title="#(helpCopy)#" value="#(cmdCopy)#" onclick="btnCopyItem();">&nbsp;
			<input class="cfgBtn" type="button" name="BTN_Remove" title="#(helpRemove)#" value="#(cmdRemove)#" onclick="btnRemoveItem();">&nbsp;
			<input class="cfgBtn" type="button" name="BTN_ChangeClass" title="#(helpChange)#" value="#(cmdChange)#" onclick="btnChangeClass();">&nbsp;>
	If (item.BusinessType() '= $$$eHostTypeProcess) {
		&html<			
			<input class="cfgBtn" type="button" name="BTN_Monitor" title="#(helpInstances)#" #($S(tIsProdRunning:"",1:"disabled"))# value="#(cmdInstance)#" onclick="btnShowInstanceMonitor('#($ZCVT(item.Name,"O","JS"))#');">&nbsp;
		>
	}
	&html<			
			<input class="cfgBtn" type="button" name="BTN_History" title="#(helpHistory)#" #($S(tIsProdRunning:"",1:"disabled"))# value="#(cmdHistory)#" onclick="btnShowInstanceHistory('#($ZCVT(item.Name,"O","JS"))#');">&nbsp;
		>
		
	If (item.BusinessType() = $$$eHostTypeProcess) {
		// find subtype of item
		Set tSubtype = ##class(CSPX.EnsConfigSVG).GetBusinessSubtype(item.ClassName)

		If (tSubtype = "bpl") {
			&html<<input class="cfgBtn" type="button" name="BTN_Definition" title="#(helpDefinition)#" value="#(cmdView)#" onclick="btnItemDefinition('#(item.ClassName)#');">&nbsp;>
		}
		ElseIf (tSubtype = "router") {
			Set tRuleName = item.Name
			// see if item has a BusinessRuleName setting
			For i = 1:1:item.Settings.Count() {
				Set tSetting = item.Settings.GetAt(i)
				If ((tSetting.Name = "BusinessRuleName") && (tSetting.Value '= "")) {
					Set tRuleName = tSetting.Value
				}
			}
			
			// split rulename into host/rule
			Set tRuleHost = $P(tRuleName,".",1,$L(tRuleName,".")-1)
			Set tRuleName = $P(tRuleName,".",$L(tRuleName,"."))

			&html<<input class="cfgBtn" type="button" name="BTN_Rules" title="#(helpRules)#" value="#(cmdViewRule)#" onclick="btnRoutingRules('#(tRuleHost)#','#(tRuleName)#');">&nbsp;>
		}
	}

	If (item.BusinessType() '= $$$eHostTypeService) {
		&html<<input class="cfgBtn" type="button" name="BTN_Queue" title="#(helpQueue)#" #($S(tIsProdRunning:"",1:"disabled"))# value="#(cmdQueue)#" onclick="btnShowQueue('#($ZCVT(item.Name,"O","JS"))#');">&nbsp;>

		Set tTestingType=$$$ConfigTypeName(item.BusinessType())
		&html<<input class="cfgBtn" type="button" name="BTN_Test" title="#(helpTest)#" #($S(production.TestingEnabled&&tIsProdRunning:"",1:"disabled"))# value="#(cmdTest)#" onclick="btnTestItem('#(tTestingType)#','#($ZCVT(item.Name,"O","JS"))#');">&nbsp;>
	}
		
	&html<<input class="cfgBtn" type="button" name="BTN_Help" title="#(helpHelp)#" value="#(cmdHelp)#" onclick="btnItemHelp();">&nbsp;
			</td></tr>>

	// show items in 2 columns
	&html<<tr><td colspan="2"><hr></td></tr>>
	&html<<tr><td valign="top" width="45%">>
	&html<<table class="formtable" border="0" width="100%" cellspacing="5" cellpadding="0">>
	
	Set style = "ok"
	Set err = ""
	If ($D(%errors("item.Name"))) {
		Set style = "error"
		Set err = "<span class=""error"">[" _ %errors("item.Name","msg") _ "&mdash;"_lPleaseCorrect_".]</span>"
		Set value = %errors("item.Name","value")
	}
	
	// test for unknown items
	If (item.BusinessType() = $$$eHostTypeUnknown) {
		// error in this item
		&html<<tr><td>&nbsp;</td><td>
		<div class="error">#($$$Text("This item contains an error in its configuration. Most likely its associated class does not exist or is not compiled."))#</div>
		</td></tr>>
	}

	Set cmdGeneralSetting = $$$Text("General Settings")
	&html<<tr><td>&nbsp;</td><td width="90%" class="subtitle">#(cmdGeneralSetting)#</td></tr>>

	// Name
    Set literal="Name"
    Set txtName = $$$Text("Name")
    Set lTooltip =$$$Text("Name used to identify this item. If empty, then the class name is used.")
	Set clickForPopup = $$$Text("Click For Popup")
	Set %session.Data("tipContent-escaped", literal) = lTooltip
	Set %session.Data("tipTitle-escaped", literal) = txtName
	&html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#')">#(txtName)#:</a></td>
			<td><input class="#(style)#" type="text" name="Name" size="40" value="#(..EscapeHTML(item.Name))#" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);">&nbsp;#(err)#</td></tr>>

    // Comment field
    Set literal = "Comment"
    Set txtName = $$$Text("Comment")
    Set lTooltip =$$$Text("Optional comment associated with this item.")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = txtName
    &html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#')">#(txtName)#:</a></td>
			<td><input class="#(style)#" type="text" name="Comment" size="40" value="#(..EscapeHTML(item.Comment))#" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);"></td></tr>>

	// Schedule field
    Set literal = "Schedule"
    Set txtName = $$$Text("Schedule")
    Set lTooltip =$$$Text("Start/Stop schedule associated with this item.")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = txtName
    &html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#')">#(txtName)#:</a></td>
			<td><input class="#(style)#" type="text" name="Schedule" size="40" value="#(..EscapeHTML(item.Schedule))#" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);"></td></tr>>

    // Category field
    Set literal = "Category"
    Set txtName = $$$Text("Category")
    Set lTooltip =$$$Text("Optional category associated with this item.")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = txtName
    &html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#')">#(txtName)#:</a></td>
			<td><input class="#(style)#" type="text" name="Category" size="40" value="#(..EscapeHTML(item.Category))#" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);"></td></tr>>

	// check for missing or invalid host class
	Set hostClass = item.ClassName
	Set aclass = "readonly"
	Set amsg = ""
	If ('##class(%Dictionary.ClassDefinition).%ExistsId(hostClass)) {
		// class missing
		Set aclass = "error"
		Set amsg =  "["_lClassNotExist_"]"
	}
    Set literal = "Class"
    Set txtName = $$$Text("Class")
    Set lTooltip =$$$Text("Business class associated with this item")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = txtName
    &html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#')">#(txtName)#:</a></td>
		<td><input class="readonly" type="text" name="ClassName" size="40" readonly value="#(hostClass)#">>

	If (amsg '= "") {
		&html<&nbsp;<span class="error">#(amsg)#</span>>
	}

	&html<</td></tr>>
    Set literal = "Description"
    Set txtName = $$$Text("Description")
    Set lTooltip =$$$Text("Description of the business class.")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = txtName
    &html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#')">#(txtName)#:</a></td>
			<td style="font-size: 0.8em;">#(..GetClassDescription(item.ClassName))#</td></tr>>

    Set literal = "Enabled"
    Set txtName = $$$Text("Enabled")
    Set lTooltip =$$$Text("If true, this item is enabled when this production is started.")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = txtName
    &html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#')">#(txtName)#:</a></td>
			<td><input type="checkbox" name="Enabled" #($S(item.Enabled:"CHECKED",1:""))# onclick="itemChanged(this,true);"></td></tr>>

	Set literal = "Foreground"
	Set txtName = $$$Text("Foreground")
	Set lTooltip =$$$Text("Run this item in a foreground process.")
	Set %session.Data("tipContent-escaped", literal) = lTooltip
	Set %session.Data("tipTitle-escaped", literal) = txtName
    &html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#')" >#(txtName)#:</a></td>
			<td><input type="checkbox" name="Foreground" #($S(item.Foreground:"CHECKED",1:""))# onclick="itemChanged(this,true);"></td></tr>>

    Set literal = "Log Trace Events"
    Set txtName = $$$Text("Log Trace Events")
    Set lTooltip =$$$Text("Log trace events for this item")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = txtName
    &html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#')" >#(txtName)#:</a></td>
			<td><input type="checkbox" name="LogTraceEvents" #($S(item.LogTraceEvents:"CHECKED",1:""))# onclick="itemChanged(this,true);"></td></tr>>

	// special code for validating inactive timeout
	Set value = item.InactivityTimeout
	Set style = "ok"
	Set err = ""
	If ($D(%errors("item.InactivityTimeout"))) {
		Set style = "error"
		Set err = "<span class=""error"">[" _ %errors("item.InactivityTimeout","msg") _ "&mdash;"_lPleaseCorrect_".]</span>"
		Set value = %errors("item.InactivityTimeout","value")
	}
	Set literal = "InactivityTimeout"
	Set txtName = $$$LocalizeText("EnsColumns","InactivityTimeout","Inactivity Timeout")
	Set lTooltip =$$$Text("Time (in seconds) that can elapse without an activity before this item is marked as being inactive. Setting this to 0 disables the inactivity timeout.")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = txtName
    Set numChars = $Length(lTooltip)
    &html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupLongTip('#(literal)#',1,#(numChars)#)" >#(txtName)#:</a></td>
			<td><input class="#(style)#" type="text" name="InactivityTimeout" size="5" value="#(..EscapeHTML(value))#" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);">&nbsp;#(err)#</td></tr>>

	// special code for validating pool size
	Set value = item.PoolSize
	Set style = "ok"
	Set err = ""
	If ($D(%errors("item.PoolSize"))) {
		Set style = "error"
		Set err = "<span class=""error"">[" _ %errors("item.PoolSize","msg") _ "&mdash;"_lPleaseCorrect_".]</span>"
		Set value = %errors("item.PoolSize","value")
	}
	Set literal = "PoolSize"
	Set txtName = $$$LocalizeText("EnsColumns","PoolSize","Pool Size")
	Set lTooltip =$$$Text("Number of jobs created to host this item. For Business Processes, setting this to 0 specifies that the Business Process will run in the general Ens.Actor process.")
	Set %session.Data("tipContent-escaped", literal) = lTooltip
	Set %session.Data("tipTitle-escaped", literal) = txtName
	Set numChars = $Length(lTooltip)
	&html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupLongTip('#(literal)#',1,#(numChars)#)" >#(txtName)#:</a></td>
				<td><input class="#(style)#" type="text" name="PoolSize" size="5" value="#(..EscapeHTML(value))#" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);">&nbsp;#(err)#</td></tr>>
		
	// new column
	&html<</table></td><td valign="top">>

	&html<<table class="formtable" width="100%" border="0" cellspacing="5" cellpadding="0" style="border-left: 1px gray solid;">>
	Set literal = "Specific Settings"
	Set txtName = $$$Text("Specific Settings")
	&html<<tr><td>&nbsp;</td><td width="90%" class="subtitle">#(txtName)#</td></tr>>	

	If (item.BusinessType() '= $$$eHostTypeProcess) {

		// Adapter stuff
        
		// check for missing or invalid adapter name		
		Set adapterName = item.AdapterClassName()
		Set aclass = "readonly"
		Set amsg = ""
		If (adapterName = "") {
			Set adapterName = "&lt;none&gt;"
		}
		ElseIf ('##class(%Dictionary.ClassDefinition).%ExistsId(adapterName)) {
			// class missing
			Set aclass = "error"
			Set amsg =  "["_lClassNotExist_"]"
		}
		Set literal = "Adapter Class"
		Set txtName = $$$Text("Adapter Class")
		Set lTooltip =$$$Text("Name of the Adapter class declared in the Business class for this item.")
		Set %session.Data("tipContent-escaped", literal) = lTooltip
		Set %session.Data("tipTitle-escaped", literal) = txtName
		&html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#')" >#(txtName)#:</a></td>
				<td><input class="#(aclass)#" type="text" name="AdapterClassName" size="40" readonly value="#(adapterName)#">>
        
		If (amsg '= "") {
			&html<&nbsp;<span class="error">#(amsg)#</span>>
		}
		&html<</td></tr>>
	}

	// Host settings
	Set rs = ##class(%ResultSet).%New()
	Set rs.ClassName = item.ClassName
	Set rs.QueryName = "EnumerateSettings"
	Set txtTrue = $$$LocalizeText("EnsColumns","True","True")
	Set txtFalse = $$$LocalizeText("EnsColumns","False","False")

	If (rs.QueryIsValid()) {
		Set tSC = rs.Execute()
		While (rs.Next()) {
			Set name = $G(rs.Data("Name"))
			Set type = $G(rs.Data("Type"))
			Set default = $G(rs.Data("Default"))
			Set required = $G(rs.Data("IsRequired")) 
			Set valuelist = $G(rs.Data("VALUELIST"))
			Set displaylist = $G(rs.Data("DISPLAYLIST"))
			Set:displaylist="" displaylist = valuelist
			Set vdelim=$E(valuelist), ddelim=$E(displaylist)
			Set description = $G(rs.Data("Description"))
			Set:description="" description = lNoDescription
			Set ctype = "text"
			If $Case(type, "%Library.Integer":1, "%Library.Numeric":1, :0) {
				Set sz = 8
			}
			ElseIf (type = "%CSP.Util.Passwd") {
				Set ctype = "password"
				Set sz = 12
			}
			Else {
				Set sz = $G(rs.Data("MAXLEN"),30)
				Set:""=sz&&$Case(type, "%Library.String":1, "%Library.Text":1, :0) sz=100000
				Set:sz>50&&(sz<..#MAXLEN4TEXTAREA) sz = 50
			}
			
			// find value in settings array
			Set target = "Host"
			Set value = default

			For i=1:1:item.Settings.Count() {
				If item.Settings.GetAt(i).Name=name {
					Set value = item.Settings.GetAt(i).Value
					Quit
				}
			}
			Set style = "ok"
			Set err = ""
			If ($D(%errors(name))) {
				Set style = "error"
				Set err = "<span class=""error"">[" _ %errors(name,"msg") _ "&mdash;"_lPleaseCorrect_".]</span>"
				Set value = %errors(name,"value")
			}
            Set literal = name
			Set txtName = $$$LocalizeText("EnsColumns",name,name)
            Set %session.Data("tipContent-escaped", literal) = description
            Set %session.Data("tipTitle-escaped", literal) = txtName
            Set numLines = $Length(description,$C(13))+$Length($ZCVT(description,"L"),"<p>")
            Set numChars = $Length(description)
            &html<<tr><td class="label"><a title="#(..makeTooltipString(description))#" nowrap onclick="popupLongTip('#(literal)#', #(numLines)#, #(numChars)#)"/>#(txtName)#:</td>>

			If (type = "%Library.Boolean") {
				&html<<td><select class="#(style)#" name="ConfigSettings" onchange="itemChanged(this,false);" >
					<option value="0" #($S('value:"selected",1:""))#>#(txtFalse)#</option>
					<option value="1" #($S(value:"selected",1:""))#>#(txtTrue)#</option>
					</select>&nbsp;#(err)#
					</td></tr>>
			}
			ElseIf (valuelist '= "") {
				&html<<td><select class="#(style)#" name="ConfigSettings" onchange="itemChanged(this,false);">>
				If 'required {
					&html<<option value="" #($S(value="":"selected",1:""))#></option>>
				}
				For p = 2:1:$L(valuelist,vdelim) {
					Set txtCaption = $P(displaylist,ddelim,p)
					Set txtCaption = $$$LocalizeText("EnsSettings",txtCaption,txtCaption)
					&html<<option value="#(..EscapeHTML($P(valuelist,vdelim,p)))#" #($S(value=$P(valuelist,vdelim,p):"selected",1:""))#>#(..EscapeHTML(txtCaption))#</option>>
				}
				&html<</select>&nbsp;#(err)#
					</td></tr>>
				}
			ElseIf (sz>..#MAXLEN4TEXTAREA) {
				// For long properties, make it a textarea
				&html<<td><textarea class="#(style)#" name="ConfigSettings" cols="65" rows="6" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);">#(..EscapeHTML(value))#</textarea>&nbsp;#(err)#</td></tr>>
			}
			Else {
				&html<<td><input class="#(style)#" type="#(ctype)#" name="ConfigSettings" size="#(sz)#" value="#(..EscapeHTML(value))#" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);">&nbsp;#(err)#</td></tr>>
			}
		}
	}

	// Adapter settings
	Set rs = ##class(%ResultSet).%New()
	Set rs.ClassName = item.AdapterClassName()
	Set rs.QueryName = "EnumerateSettings"
	If (rs.QueryIsValid()) {
		Set tSC = rs.Execute()
		While (rs.Next()) {
			Set name = $G(rs.Data("Name"))
			Set type = $G(rs.Data("Type"))
			Set default = $G(rs.Data("Default"))
			Set required = $G(rs.Data("IsRequired")) 
			Set valuelist = $G(rs.Data("VALUELIST"))
			Set displaylist = $G(rs.Data("DISPLAYLIST"))
			Set:displaylist="" displaylist = valuelist
			Set vdelim=$E(valuelist), ddelim=$E(displaylist)
			Set description = $G(rs.Data("Description"))
			Set:description="" description = lNoDescription
			Set ctype = "text"

			If $Case(type, "%Library.Integer":1, "%Library.Numeric":1, :0) {
				Set sz = 8
			}
			ElseIf (type = "%CSP.Util.Passwd") {
				Set ctype = "password"
				Set sz = 12
			}
			Else {
				Set sz = $G(rs.Data("MAXLEN"),30)
				Set:""=sz&&$Case(type, "%Library.String":1, "%Library.Text":1, :0) sz=100000
				Set:sz>50&&(sz<..#MAXLEN4TEXTAREA) sz = 50
			}
			// find value in settings array
			Set target = "Adapter"
			Set value = default

			For i=1:1:item.Settings.Count() {
				If item.Settings.GetAt(i).Name=name {
					Set value = item.Settings.GetAt(i).Value
					Quit
				}
			}
			Set style = "ok"
			Set err = ""
			If ($D(%errors(name))) {
				Set style = "error"
				Set err = "<span class=""error"">[" _ %errors(name,"msg") _ "&mdash;"_lPleaseCorrect_".]</span>"
				Set value = %errors(name,"value")
			}
            Set literal = name
            Set txtName = $$$LocalizeText("EnsColumns",name,name)
            Set numLines = $Length(description,$C(13))+$Length($ZCVT(description,"L"),"<p>")
            Set numChars = $Length(description)
            Set %session.Data("tipContent-escaped", literal) = description
            Set %session.Data("tipTitle-escaped", literal) = txtName
			&html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(description))#" onclick="popupLongTip('#(literal)#',#(numLines)#,#(numChars)#)" >#(txtName)#:</a></td>>
			If (type = "%Library.Boolean") {
				&html<<td><select class="#(style)#" name="ConfigSettings" onchange="itemChanged(this,false);" >
					<option value="0" #($S('value:"selected",1:""))#>#(txtFalse)#</option>
					<option value="1" #($S(value:"selected",1:""))#>#(txtTrue)#</option>
					</select>&nbsp;#(err)#
					</td></tr>>
			}
			ElseIf (valuelist '= "") {
				&html<<td><select class="#(style)#" name="ConfigSettings" onchange="itemChanged(this,false);">>

				If 'required {
					&html<<option value="" #($S(value="":"selected",1:""))#></option>>
				}
				For p = 2:1:$L(valuelist,vdelim) {
					&html<<option value="#(..EscapeHTML($P(valuelist,vdelim,p)))#" #($S(value=$P(valuelist,vdelim,p):"selected",1:""))#>#(..EscapeHTML($P(displaylist,ddelim,p)))#</option>>
				}

				&html<</select>&nbsp;#(err)#
					</td></tr>>
			}
			ElseIf (sz>..#MAXLEN4TEXTAREA) {
				// For long properties, make it a textarea
				&html<<td><textarea class="#(style)#" name="ConfigSettings" cols="65" rows="6" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);">#(..EscapeHTML(value))#</textarea>&nbsp;#(err)#</td></tr>>
			}
			Else {
				&html<<td><input class="#(style)#" type="#(ctype)#" name="ConfigSettings" size="#(sz)#" value="#(..EscapeHTML(value))#" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);">&nbsp;#(err)#</td></tr>>
			}
		}
	}
	// end of columns
	&html<</table></td></tr>>
	&html<<tr><td colspan="2"><hr></td></tr>>
	&html<</table>>
]]></Implementation>
</Method>

<Method name="ShowProductionSheet">
<Description><![CDATA[
Display a form for the production]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<Implementation><![CDATA[
	Set StopProd = $$$Text("Stop Production")
	Set StartProd = $$$Text("Start Production")
	
	// help (title) messages for buttons
	Set helpApply = $$$Text("Apply changes to the production")
	Set helpCancel = $$$Text("Cancel changes")
	Set helpStart = $$$Text("Start this production")
	Set helpStop = $$$Text("Stop this production")
	Set helpAddService = $$$Text("Add a Business Service to this production")
	Set helpAddProcess = $$$Text("Add a Business Process to this production")
	Set helpAddOperation = $$$Text("Add a Business Operation to this production")
	Set helpViewModel = $$$Text("Show the model page for this production")
	Set helpHelp = $$$Text("Display a help window")

	// state
	Set tIsProdRunning = (production.Name = $G($$$EnsRuntime("Name")))
	Set tCurrProd = $G($$$EnsRuntime("Name"))
	If ((tCurrProd = production.Name) || (tCurrProd '= "")) {
		// this is the current production OR
		// some other production is running
		Set tProdCanStart = 0
		Set tProdCanStop = 1
	}
	Else {
		// no production is running
		Set tProdCanStart = 1
		Set tProdCanStop = 0
	}

	&html<<table class="proptitle" width="100%"><tr><td class="classname">#($$FormatMessage^%occMessages(%response.Language,"Ensemble","Production","Production"))#: <b>#(production.Name)#</b></td><td class="timestamp" align="right">#($$FormatMessage^%occMessages(%response.Language,"Ensemble","LastModified","Last Modified"))#: <b>#("N/A")#</b></td></tr></table>>

	&html<<table border="0" width="90%">>
	
	Set lPleaseCorrect = $$$Text("please correct")
	Set lNoDescription = $$$Text("No description provided")	

	// buttons 1
	Set lApply = $$$Text("Apply")
	Set lCancel = $$$Text("Cancel")
	Set lHelp = $$$Text("Help")
	&html<<tr><td colspan="2">
			<input class="cfgBtn" disabled type="button" name="BTN_Apply" title="#(helpApply)#" value="#(lApply)#" onclick="btnApplyProduction();">&nbsp;
			<input class="cfgBtn" type="button" name="BTN_Cancel" title="#(helpCancel)#" value="#(lCancel)#" onclick="btnCancel();">&nbsp;
			<input class="cfgBtn" type="button" name="BTN_Help" title="#(helpHelp)#" value="#(lHelp)#" onclick="btnProductionHelp();">&nbsp;
			<input class="cfgBtn" type="button" #($S(tProdCanStart:"",1:"disabled"))# title="#(helpStart)#" name="BTN_StartProduction" value="#(StartProd)#" onclick="btnStartStopProduction(true);">&nbsp;
			<input class="cfgBtn" type="button" #($S(tProdCanStop:"",1:"disabled"))# title="#(helpStop)#" name="BTN_StopProduction" value="#(StopProd)#" onclick="btnStartStopProduction(false);">&nbsp;
			>

	// buttons 2
	Set lAddService = $$$Text("Add Service")
	Set lAddProcess = $$$Text("Add Process")
	Set lAddOperation = $$$Text("Add Operation")
	Set lViewModel = $$$Text("View Model")
	&html<<input class="cfgBtn" type="button" name="BTN_NewService" title="#(helpAddService)#" value="#(lAddService)#" onclick="btnAddHost('Service','');">&nbsp;
			<input class="cfgBtn" type="button" name="BTN_NewProcess" title="#(helpAddProcess)#" value="#(lAddProcess)#" onclick="btnAddHost('Process','');">&nbsp;
			<input class="cfgBtn" type="button" name="BTN_NewOperation" title="#(helpAddOperation)#" value="#(lAddOperation)#" onclick="btnAddHost('Operation','');">&nbsp;
			<input class="cfgBtn" type="button" name="BTN_ViewModel" title="#(helpViewModel)#" value="#(lViewModel)#" onclick="btnShowModel('#(production.Name)#');">&nbsp;
			</td></tr>>

	// show items in 2 columns
	&html<<tr><td colspan="2"><hr></td></tr>>
	&html<<tr><td valign="top" width="45%">>
	&html<<table class="formtable" border="0" width="100%" cellspacing="5" cellpadding="0">>

	Set lProductionSettings = $$$Text("Production Settings")
	&html<<tr><td>&nbsp;</td><td width="90%" class="subtitle">#(lProductionSettings)#</td></tr>>
	
    Set literal = "Name"
	Set lName = $$$Text("Name")
    Set lTooltip = $$$Text("The name of this Production")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = lName
	&html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#');">#(lName)#:</a></td>
			<td><input class="readonly" type="text" name="Name" size="40" readonly value="#(..EscapeHTML(production.Name))#" onchange="itemChanged(this,false);"></td></tr>>
	
    Set literal ="Description"
	Set lDescription = $$$Text("Description")
    Set lTooltip = $$$Text("Optional description of this Production")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = lDescription
    &html<<tr><td></td><td style="font-size: 0.8em;">#(..GetClassDescription(production.Name,""))#</td></tr>>
	&html<<tr><td valign="top" class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#');">#(lDescription)#:</td>
			<td><textarea name="Description" rows="3" cols="40" onchange="itemChanged(this,false);" onkeypress="itemChanged(this,false);">#(..EscapeHTML(production.Description))#</textarea></td></tr>>

	// special code for validating pool size
	Set value = production.ActorPoolSize
	Set style = "ok"
	Set err = ""
	If ($D(%errors("ActorPoolSize"))) {
		Set style = "error"
		Set err = "<span class=""error"">[" _ %errors("ActorPoolSize","msg") _ "&mdash;"_lPleaseCorrect_".]</span>"
		Set value = %errors("ActorPoolSize","value")
	}
    Set literal = "Actor Pool Size"
    Set tipTitle=$$$Text("Actor Pool Size")
	Set lTooltip = $$$Text("The number of Actor jobs available to execute Business Process instances. Generally best set equal to the number of CPU's.")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = tipTitle
    Set numChars = $Length(lTooltip)
	&html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupLongTip('#(literal)#',1, #(numChars)# );" >#(tipTitle)#:</td>
			<td><input class="#(style)#" type="text" name="ActorPoolSize" size="5" value="#(..EscapeHTML(value))#" onchange="itemChanged(this);" onkeypress="itemChanged(this);">&nbsp;#(err)#</td></tr>>
	
    Set literal = "Testing Enabled"
    Set tipTitle = $$$Text("Testing Enabled")
	Set lTooltip = $$$Text("Enable use of the Testing Service for this Production.")
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = tipTitle
	&html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupShortTip('#(literal)#')" >#(tipTitle)#:</a></td>
			<td><input type="checkbox" name="TestingEnabled" #($S(production.TestingEnabled:"CHECKED",1:""))# onclick="itemChanged(this,true);"></td></tr>>
			
    Set literal = "Log Unassigned Trace Events"
    Set txtName = $$$Text("Log Unassigned Trace Events")
	Set lTooltip = $$$Text("Log trace events that do not belong to any Config Item. (Configure logging of events that do belong to a Config Item in the Settings for that item).")
    Set numChars = $Length(lTooltip)
    Set %session.Data("tipContent-escaped", literal) = lTooltip
    Set %session.Data("tipTitle-escaped", literal) = txtName
	&html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(lTooltip))#" onclick="popupLongTip('#(literal)#',1,#(numChars)#)" >#($$$Text("Log Unassigned<br>Trace Events"))#:</a></td>
			<td><input type="checkbox" name="LogGeneralTraceEvents" #($S(production.LogGeneralTraceEvents:"CHECKED",1:""))# onclick="itemChanged(this,true);"></td></tr>>

	// new column
	&html<</table></td><td valign="top">>

	// Production settings
	Set rs = ##class(%ResultSet).%New()
	Set rs.ClassName = production.Name
	Set rs.QueryName = "EnumerateSettings"
	If (rs.QueryIsValid()) {
		Set tSC = rs.Execute()
		If rs.Next() {

			&html<<table class="formtable" width="100%" border="0" cellspacing="5" cellpadding="0" style="border-left: 1px gray solid;">>
			Set txtName = $$$Text("Additional Production Settings")
			&html<<tr><td>&nbsp;</td><td width="90%" class="subtitle">#(txtName)#</td></tr>>	

			Do {
				Set name = $G(rs.Data("Name"))
				Set type = $G(rs.Data("Type"))
				Set default = $G(rs.Data("Default"))
				Set required = $G(rs.Data("IsRequired")) 
				Set valuelist = $G(rs.Data("VALUELIST"))
				Set displaylist = $G(rs.Data("DISPLAYLIST"))
				Set:displaylist="" displaylist = valuelist
				Set vdelim=$E(valuelist), ddelim=$E(displaylist)
				Set description = $G(rs.Data("Description"))
				Set:description="" description = lNoDescription
				Set ctype = "text"
	
				If $Case(type, "%Library.Integer":1, "%Library.Numeric":1, :0) {
					Set sz = 8
				}
				ElseIf (type = "%CSP.Util.Passwd") {
					Set ctype = "password"
					Set sz = 12
				}
				Else {
					Set sz = $G(rs.Data("MAXLEN"),30)
					Set:""=sz&&$Case(type, "%Library.String":1, "%Library.Text":1, :0) sz=100000
					Set:sz>50&&(sz<..#MAXLEN4TEXTAREA) sz = 50
				}
				// find value in settings array
				Set target = "Adapter"
				Set value = default
	
				For i=1:1:production.Settings.Count() {
					If production.Settings.GetAt(i).Name=name {
						Set value = production.Settings.GetAt(i).Value
						Quit
					}
				}
				Set style = "ok"
				Set err = ""
				If ($D(%errors(name))) {
					Set style = "error"
					Set err = "<span class=""error"">[" _ %errors(name,"msg") _ "&mdash;"_lPleaseCorrect_".]</span>"
					Set value = %errors(name,"value")
				}
				Set literal = name
				Set txtName = $$$LocalizeText("EnsColumns",name,name)				
	            Set numLines = $Length(description,$C(13))+$Length($ZCVT(description,"L"),"<p>")
                Set numChars = $Length(description)
                Set %session.Data("tipContent-escaped", literal) = description
                Set %session.Data("tipTitle-escaped", literal) = txtName
                &html<<tr><td class="label" nowrap><a title="#(..makeTooltipString(description))#" 
                onclick="popupLongTip('#(literal)#',#(numLines)#,#(numChars)#)">#(txtName)#:</a></td>>
				If (type = "%Library.Boolean") {
					&html<<td><select class="#(style)#" name="ConfigSettings" onchange="itemChanged(this,false);" >
						<option value="0" #($S('value:"selected",1:""))#>#(txtFalse)#</option>
						<option value="1" #($S(value:"selected",1:""))#>#(txtTrue)#</option>
						</select>&nbsp;#(err)#
						</td></tr>>
				}
				ElseIf (valuelist '= "") {
					&html<<td><select class="#(style)#" name="ConfigSettings" onchange="itemChanged(this,false);">>
	
					If 'required {
						&html<<option value="" #($S(value="":"selected",1:""))#></option>>
					}
					For p = 2:1:$L(valuelist,vdelim) {
						&html<<option value="#(..EscapeHTML($P(valuelist,vdelim,p)))#" #($S(value=$P(valuelist,vdelim,p):"selected",1:""))#>#(..EscapeHTML($P(displaylist,ddelim,p)))#</option>>
					}
	
					&html<</select>&nbsp;#(err)#
						</td></tr>>
				}
				ElseIf (sz>..#MAXLEN4TEXTAREA) {
					// For long properties, make it a textarea
					&html<<td><textarea class="#(style)#" name="ConfigSettings" cols="65" rows="6" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);">#(..EscapeHTML(value))#</textarea>&nbsp;#(err)#</td></tr>>
				}
				Else {
					&html<<td><input class="#(style)#" type="#(ctype)#" name="ConfigSettings" size="#(sz)#" value="#(..EscapeHTML(value))#" onchange="itemChanged(this,false);" onkeydown="itemChanged(this,false);">&nbsp;#(err)#</td></tr>>
				}
			} While rs.Next()

			// end of columns
			&html<</table>>
		} Else { &html<&nbsp;> }
	} Else { &html<&nbsp;> }
	&html<</td></tr>>
	&html<<tr><td colspan="2"><hr></td></tr>>
	&html<</table>>
]]></Implementation>
</Method>

<Method name="ShowAddHostForm">
<Description><![CDATA[
Add new host wizard page]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production,item:Ens.Config.Item,pHostType:%String,pHostName:%String</FormalSpec>
<Implementation><![CDATA[
	Set lPleaseCorrect = $$$Text("please correct")
	Set lItem = $$$Text("item")
	Set lEntername = $$$Text("entering a name")
	Set lclass = $$$Text("class")
	Set lClass = $$$Text("Class")
	Set lOptional = $$$Text("optional")
	Set lPressing = $$$Text("and pressing")
	Set lThisitem = $$$Text("this item")
	Set lApply = $$$Text("Apply")
	Set lCancel = $$$Text("Cancel")

	If (pHostType = "Class") {
		Set tMsg1 =  $$$Text("Change Business Class for ") _ $S(item.Name=lItem:item,1:item.Name)
		Set tMsg2= $$$Text("Change the Business Class associated with ")_"<b>" _ 
		$S(item.Name="":lThisitem,1:item.Name) _ "</b> "_$$$Text("by selecting a class and pressing")_" <b>"_lApply_"</b>.<br>"
		Set tMsg3 = lClass
	}
	ElseIf (pHostType = "") {
		// attempt to add a bogus class

		Set tMsg1 =  $$$Text("Change Item")
		Set tMsg2= $$$Text("There is an error with the class associated with this item; either it does not exist or it is not compiled.")_"<br>" _
		$$$Text("You can either correct this using Studio or select a new class for this item.")
		Set tMsg3 = lClass
	}
	Else {
		Set tMsg1 =  $$$Text("Add Business ") _ pHostType
		Set tMsg2= $$$Text("Add a new Business ") _ pHostType _ 
		$$$Text(" to this production by selecting a Business ")_ 
		pHostType _ "&nbsp;"_lclass_",<br> "_lEntername_" (<i>"_lOptional_"</i>), "_lPressing_" <b>"_lApply_"</b>.<br>"
		Set tMsg2 = tMsg2 _ $$$Text("Category is an optional value that allows you to selectively view different sets of items.")
		Set tMsg3 = pHostType _ lClass
	}
	
	
	&html<<table class="proptitle" width="100%">
		<tr><td class="classname">#(tMsg1)#</td></tr></table>>

	&html<<table class="formtable" border="0" cellspacing="5" cellpadding="0">>
	
	Set style = "ok"
	Set err = ""
	If ($D(%errors("item.Name"))) {
		Set style = "error"
		Set err = "<span class=""error"">[" _ %errors("item.Name","msg") _ "&mdash;"_lPleaseCorrect_".]</span>"
		Set value = %errors("item.Name","value")
	}

	&html<<tr><td class="label">&nbsp;</td>
			<td style="font-size: 0.8em;">#(tMsg2)#&nbsp;</td></tr>>

	// class
	// provide drop down list of available classes
	Set tRS = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:SubclassOf")
	
	If ((pHostType = "Class") || (pHostType = "")) {
		// show all hosts
		Set tSuper = "Ens.Host"
	}
	Else {
		Set tSuper = "Ens.Business" _ pHostType
	}
	
	Do tRS.Execute(tSuper)

	&html<<tr><td class="label" nowrap>#(tMsg3)#:</td>
		<td><select name="ClassName" class="ok" onchange="itemChanged(this,false);"><option value="" selected></option>>

	While (tRS.Next()) { Set cls = tRS.Data("Name")  Continue:'##class(%Dictionary.CompiledClass).%ExistsId(cls)
		Set cdef = ##class(%Dictionary.ClassDefinition).%OpenId(cls)
		If ($IsObject(cdef) && (cdef.Abstract '= 1)) {
			&html<<option value="#(cls)#" #($S(cls=pHostName:"selected",1:""))#>#(cls)#</option>>
		}
	}
	Set tRS = ""

	&html<</select></td></tr>>

	// Name
	&html<<tr><td class="label" nowrap>#($$$Text("Name"))#:</td>
			<td><input class="#(style)#" type="text" name="Name" size="50" 
					value="#(..EscapeHTML(item.Name))#" 
					onchange="itemChanged(this,false);" 
					onkeypress="itemChanged(this,false);">&nbsp;#(err)#</td></tr>>

	// Category
	&html<<tr><td class="label" nowrap>#($$$Text("Category"))#:</td>
			<td><input class="#(style)#" type="text" name="Category" size="50" 
					value="#(..EscapeHTML(item.Category))#" 
					onchange="itemChanged(this,false);" 
					onkeypress="itemChanged(this,false);"></td></tr>>

	// Comment
	&html<<tr><td class="label" nowrap>#($$$Text("Comment"))#:</td>
			<td><input class="#(style)#" type="text" name="Comment" size="50" 
					value="#(..EscapeHTML(item.Comment))#" 
					onchange="itemChanged(this,false);" 
					onkeypress="itemChanged(this,false);"></td></tr>>
					
	&html<<tr><td colspan="2"><hr></td></tr>>

	// help (title) messages for buttons
	Set helpApply = $$$Text("Apply changes to the production")
	Set helpCancel = $$$Text("Cancel changes")

	// buttons
	&html<<tr><td>&nbsp;</td>
			<td>
			<input class="cfgBtn" #($S(pHostName="":"disabled",1:""))# type="button" name="BTN_Apply" value="#(lApply)#" title="#(helpApply)#" onclick="btnApplyAddItem();">&nbsp;
			<input class="cfgBtn" type="button" name="BTN_Cancel" title="#(helpCancel)#" value="#(lCancel)#" onclick="btnCancel();">&nbsp;
			</td></tr>>

	&html<</table>>
]]></Implementation>
</Method>

<Method name="makeTooltipString">
<Description><![CDATA[
takes the tooltip string; prefixes the "click for popup" localized string to it;
and (maybe) truncates it; then returns the result]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>description:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#; Quick strip of HTML tags and conversion of entities
	Set pos=1 For { Set pos=$Find(description,"<",pos)  Quit:'pos  Set e=$Find(description,">",pos)  Quit:'e  Set $E(description,pos-1,e-1)="" }
	Set description=$ZCVT(description,"I","HTML")
    Set:($Length(description)>275) description=$Extract(description,1,275)_"..."
    Quit description_$C(13,10)_"["_$$$Text("Click For Popup")_"]"
]]></Implementation>
</Method>

<Method name="RemoveItem">
<Description><![CDATA[
Remove the given business item from the production]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production,itemid:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	For i = 1:1:production.Items.Count() {
		Set item = production.Items.GetAt(i)
		If ($IsObject(item) && (item.%Id() = itemid)) {
			Do production.Items.RemoveAt(i)
			Do ##class(Ens.Config.Item).%DeleteId(item.%Id())
			Set item = ""
			Quit
		}
	}
]]></Implementation>
</Method>

<Method name="GetClassDescription">
<Description><![CDATA[
Find the description for a given class.<BR>
<var>pClass</var> is a complete class name (with package).<BR>
Returns the short form (first line) of class description or
<var>pDefault</var> if there is no description.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String,pDefault:%String="N/A&quot;</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// look up description directly from Dictionary
	Set desc = $$$defClassKeyGet(pClass,$$$cCLASSdescription)	
	If (desc = "") {
		Set desc = pDefault
	}

	Quit desc
]]></Implementation>
</Method>

<Method name="GetDuplicateItems">
<Description><![CDATA[
See if there are multiple copies with the same name as the given item
within the production; return a list if there are.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production,pItem:Ens.Config.Item,*dlist</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Kill dlist

	Set tResult = 0
	Set n = 0
	Set inName = $S(pItem.Name="":pItem.ClassName,1:pItem.Name)

	For i = 1:1:production.Items.Count() {
		Set item = production.Items.GetAt(i)
		Set tName = $S(item.Name="":item.ClassName,1:item.Name)

		If (tName = inName) {
			If (item = pItem) {
				#; add to list; but don't count as duplicate
				Set n=n+1, dlist(n) = item
			}
			Else {
				Set tResult = 1
				Set n=n+1, dlist(n) = item
			}
		}
	}

	If ('tResult) {
		Kill dlist
	}

	Quit tResult
]]></Implementation>
</Method>
</Class>
</Export>