<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alINV.dUItemGroup">
<ClassType>persistent</ClassType>
<IncludeCode>INConst,COMSYS</IncludeCode>
<Super>User.INItemGroup</Super>

<Property name="IsDefault">
<Type>%Boolean</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00682"/>
</Property>


<Method name="ConvertOnSave">
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Called By: %OnAfterSave - %OpenId increments open count on in-memory copy of
	;                           object so transient IsDefault is available.
	; History
	; 28-Oct-2008	GRF		SR16028: always check INVORG rather than depending on
	; 							the V1.5 IsDefault value
	; 22-Oct-2008	HQN		SR16028: Added IsDefault Property 
	; 17-Oct-2008	GRF		SR15802: Posting Chars loaded from dUItemGroupFin
	; 13-Oct-2008	Luke	SR16028: Added Default group check and set 
	; 02-May-2008	HQN		SR15686: Return error on trying to convert nonexistent
	; 							group
	; 08-Apr-2008 	Luke 	SR15659: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set objV1 = ##class(alINV.dUItemGroup).%OpenId("0||"_pKey,0,.sc)	
	
	if objV1 '= $$$NULLOREF {
		set objItemGroup    = ##class(alINV.dItemGroup).%OpenId(objV1.ID1)
		if objItemGroup = $$$NULLOREF{
			set objItemGroup  = ##class(alINV.dItemGroup).%New() 
			set objItemGroup.Name      = objV1.ID1
		}
		
		set objItemGroup.Acronym       = objV1.Acronym
		set objItemGroup.Active        = objV1.Active1
		set objItemGroup.ColourCode    = objV1.ColourCode
		set objItemGroup.Description   = objV1.Description
		set objItemGroup.PriceCategory = objV1.PriceCategory
		set objItemGroup.IsDefault = ($$$INVORGDefaultItemGroup($get(^INVORG(0,0,1))) = objV1.ID1) ; SR16028
		
		set objFinV1 = ##class(alINV.dUItemGroupFin).%OpenId("0||"_pKey,0,.sc)
		if objFinV1 '= $$$NULLOREF {
			set objItemGroup.PostingChar1 = objFinV1.PostingChar1
			set objItemGroup.PostingChar2 = objFinV1.PostingChar2
			set objItemGroup.PostingChar3 = objFinV1.PostingChar3
		
		} else {
			set objItemGroup.PostingChar1 = ""
			set objItemGroup.PostingChar2 = ""
			set objItemGroup.PostingChar3 = ""
		}
		
		if objV1.ParentGroup '= "" {
			set objParItemGroup = ##class(alINV.dItemGroup).%OpenId(objV1.ParentGroup)
			if objParItemGroup=$$$NULLOREF{
				set sc = ##class(alINV.dUItemGroup).ConvertOnSave(objV1.ParentGroup)
				if $$$ISOK(sc) {
					set objParItemGroup = ##class(alINV.dItemGroup).%OpenId(objV1.ParentGroup) 
				}
			}
			do objParItemGroup.ChildGroups.Insert(objItemGroup) 
			set objItemGroup.ParentGroup = objParItemGroup
			
		}
				
		set sc = objItemGroup.%Save()
		
		if $$$ISOK(sc) {
			do objItemGroup.%DowngradeConcurrency(0)
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="ConvertOnDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 22-Oct-2008	HQN		SR16028: Update INVORGDefaultItemGroup if this was 
	; 							default
	; 						Just delete V2 object, irrelevant if V1.5 exists
	; 08-Apr-2008 	Luke 	SR15659 Created
	;-------------------------------------------------------------------------------
	set sc = ##class(alINV.dItemGroup).%DeleteId(pKey)
	if $$$ISOK(sc) {
		; Redundant now since cannot delete the group marked as the default group (InUse^INBItemFroup)
		set objUItemGroup = ##class(alINV.dUItemGroup).%OpenId("0||"_pKey)
		if objUItemGroup.IsDefault {
			set objINVORG = ##class(User.INVORG).%OpenId("0||"_objUItemGroup.Company,4,.sc)
			if $$$ISOK(sc) {
				set objINVORG.DefaultItemGroup = ""
				set sc = objINVORG.%Save()
			}
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="IsDefaultGet">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 22-Oct-2008	HQN		SR16028: Created
	;-------------------------------------------------------------------------------
	set strINVORG = $get(^INVORG(0,%this.Company,1))
	if (i%IsDefault = "") {
		if ($$$INVORGDefaultItemGroup(strINVORG) = %this.ID1) {
			set i%IsDefault = $$$YES
		} else {
			set i%IsDefault = $$$NO
		}
	}
	quit i%IsDefault
]]></Implementation>
</Method>

<Method name="LoadV2">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Initial take on of V1 data to V2
	; Load Item Groups and Policies first?
	; 
	; History
	; 08-Apr-2008 	Luke 	SR15659 Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set idGroup = ""
	for {
		set idGroup = $order(^INItemGroup(0,idGroup))
		quit:idGroup=""
		set sc = ..ConvertOnSave(idGroup)
		quit:$$$ISERR(sc)
	}

	quit sc
]]></Implementation>
</Method>

<Method name="IsSynced">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 17-Oct-2008	GRF		Readability
	; 02-May-2008	HQN		SR15686: Created
	;-------------------------------------------------------------------------------
	set objItemGroup = ##class(alINV.dItemGroup).%OpenId(%this.ID1,0,.sc)
	
	if $$$ISOK(sc) {
		; Check Simple Properties
		if (objItemGroup.Acronym '= %this.Acronym) set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Acronym Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objItemGroup.Active  '= %this.Active1) set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Active1 Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		
		;Property ChildGroups As alINV.dItemGroup [ Collection = list ];
		if (objItemGroup.ColourCode  '= %this.ColourCode)  set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ColourCode Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objItemGroup.Description '= %this.Description) set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Description Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
	;	if (objItemGroup.GroupDepth  '= %this.GrpLevel)    set sc = $system.Status.AppendStatus($system.Status.Error(5001,"GrpLevel Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		
		; Property ParentGroup As alINV.dItemGroup;
		; $$$ADDSC
		if (objItemGroup.PriceCategory '= %this.PriceCategory) set sc = $system.Status.AppendStatus($system.Status.Error(5001,"PriceCategory Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="%OnAfterSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called after 
the object's data has been successfully written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; %this is a V1.5 object - ConvertOnSave creates the V2 object
	;-------------------------------------------------------------------------------
	set sc = %this.ConvertOnSave(%this.ID1)
	quit sc
]]></Implementation>
</Method>

<Method name="%OnDelete">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Delete</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being deleted.

<P>If this method returns an error then the object will not be deleted.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set objUItemGroup = ##class(alINV.dUItemGroup).%Open(oid)
	quit ##class(alINV.dUItemGroup).ConvertOnDelete(objUItemGroup.ID1)
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>