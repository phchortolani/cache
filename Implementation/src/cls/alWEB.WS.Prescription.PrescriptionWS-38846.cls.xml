<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alWEB.WS.Prescription.PrescriptionWS">
<ClassType/>
<IncludeCode>COMSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService,alWEB.WS.Utils</Super>

<Parameter name="SERVICENAME">
<Description><![CDATA[
Name of the WebService.]]></Description>
<Default>PrescriptionWS</Default>
</Parameter>


<Parameter name="NAMESPACE">
<Description><![CDATA[
Namespace of the WebService.]]></Description>
<Default>http://www.disclinc.com</Default>
</Parameter>


<Method name="AddPrescription">
<Description><![CDATA[
Add Prescription
<br /><br />
<b>Input Parameters:</b><br />
SessionId (Required) = WebService Session Id<br />
MsgSequence (Required) = Message Sequence number of this call<br />
PrescriptionNumber (Required)<br />
LocationId (Required) = Location Id (of Pharmacy)<br />
NumberOfLines (Mandatory) Integrity Check<br />
AddPrescriptionHeader (required) Header record for all prescription Lines<br />]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,PrescriptionNumber:%String,LocationId:%String,NumberOfLines:%Integer,AddPrescriptionHeader:alWEB.WS.Prescription.AddPrescriptionHeader</FormalSpec>
<ReturnType>alWEB.WS.Prescription.AddPrescriptionResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
	// Create a prescription Via webservice
	//  
	// History:
	// 27-Oct-2010	GRF		SR16642.1: was setting strStatus to "0 0" rather than
	//							"0 #alW00005: Invalid Session Id" or similar
	// 23-Jun-2009	DavidR	SR16642: Created
	//------------------------------------------------------------------------------
	set objResult = ##class(alWEB.WS.Prescription.AddPrescriptionResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence

	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	
	if '$$$ISOK(strStatus) {
	;	set strStatus = $$$MakeStatus(strStatus)    ; SR16642.1
		set strStatus = $$$MakeStatus(strError)
	}
	
	;if $$$ISOK(strStatus) set strStatus=..ConvertOdbcToLogical(.DueDate)
	//get data
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()
		set strStatus   = ..ExecuteCall("AddPrescription^MEDWSConsumptionInterface(.arrResponse,"""_$get(PrescriptionNumber)_""","""_$get(LocationId)_""","""_$get(NumberOfLines)_""","""_AddPrescriptionHeader_""")",.objResponse)
		
		if $$$ISOK(strStatus) {
			set strProp = ""
			for {
				set strValue = objResponse.ReturnArray.GetNext(.strProp)
				quit:strProp=""
				
				if strProp = """strStatus""" {
					set objResult.ReturnStatus = strValue
					
				} elseif strProp = """PresNumber""" {
					set objResult.PrescriptionNumber = strValue
					
				} else {
					set objResultLine = ##class(alWEB.WS.Prescription.AddPrescriptionResultLine).%New()
					set objResultLine.LineNumber              = $listget(strValue,1)
					set objResultLine.Item                    = $listget(strValue,2)
					set objResultLine.BaseQuantity            = $listget(strValue,3)
					set objResultLine.BaseUOM                 = $listget(strValue,4)
					set objResultLine.BaseUOMDescription      = $listget(strValue,5)
					set objResultLine.DispenseQuantity        = $listget(strValue,6)
					set objResultLine.DispenseUOM             = $listget(strValue,7)
					set objResultLine.DispenseUOMDescription  = $listget(strValue,8)
				
					do objResult.LineDetails.Insert(objResultLine)
				}
			}
		}
	}
	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
	//	quit ..ReturnFault(..ResultError(strStatus))
		quit strStatus   ; FIXME : We are supposed to return 'As alWEB.WS.Prescription.AddPrescriptionResult'  Shouldn't have multiple exit points
	} else {
		do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)	
	}
	quit objResult
]]></Implementation>
</Method>

<Method name="EditPrescription">
<Description><![CDATA[
Edit Prescription
<br /><br />
<b>Input Parameters:</b><br />
SessionId (Required) = WebService Session Id<br />
MsgSequence (Required) = Message Sequence number of this call<br />
PrescriptionNumber (Required)<br />
LocationId (Required) = Location Id (of Pharmacy)<br />
DueDate (Required) = Expected Collection Date (First/Next) (YYY-MM-DD)<br />
DueTime (Optional) default 0<br />
NumberOfLines (Mandatory) Integrity Check<br />
AddPrescriptionHeader (required) Header record for all prescription Lines<br />]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,PrescriptionNumber:%String,LocationId:%String,DueDate:%Date,DueTime:%Time,NumberOfLines:%Integer,AddPrescriptionHeader:alWEB.WS.Prescription.AddPrescriptionHeader</FormalSpec>
<ReturnType>alWEB.WS.Prescription.AddPrescriptionResult</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
	// Edit an existing prescription via web service
	// 
	// History:
	// 27-Oct-2010	GRF		SR16642.1: was setting strStatus to "0 0" rather than
	//							"0 #alW00005: Invalid Session Id" or similar
	// 23-Jun-2009	DavidR	SR16642: Created
	//------------------------------------------------------------------------------
	set objResult = ##class(alWEB.WS.Prescription.AddPrescriptionResult).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence
	
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
	;	set strStatus = $$$MakeStatus(strStatus)  ; SR16642.1
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) {
		//do action here
	}
	//Return Result
	if '$$$ISOK(strStatus) {  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(strStatus))   ; FIXME : Shouldn't have multiple exit points  Is this correct data type?
	} else {
		do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)	
	}
	quit objResult
]]></Implementation>
</Method>

<Method name="RequestDispense">
<Description><![CDATA[
Request Dispense
<br /><br />
<b>Input Parameters:</b><br />
SessionId (Required) = WebService Session Id<br />
MsgSequence (Required) = Message Sequence number of this call<br />
PrescriptionNumber (Required)<br />
LocationId (Required) = Location Id (of Pharmacy)<br />
NumberOfLines (Mandatory) Integrity Check<br />]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,PrescriptionNumber:%String,LocationId:%String,NumberOfLines:%Integer</FormalSpec>
<ReturnType>alWEB.WS.Prescription.Result</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
	// Check a prescription number to see if its active and advise if it should be
	// dispensed. Takes into consideration frequency and repeats. 
	// 
	// History:
	// 27-Oct-2010	GRF		SR16642.1: was setting strStatus to "0 0" rather than
	//							"0 #alW00005: Invalid Session Id" or similar
	// 23-Jun-2009	DavidR	SR16642: Created
	//------------------------------------------------------------------------------
	
	set objResult = ##class(alWEB.WS.Prescription.Result).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence

	//Validate session
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
	;	set strStatus = $$$MakeStatus(strStatus)  ; SR16642.1
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()
		set strStatus = ..ExecuteCall("RequestDispense^MEDWSConsumptionInterface(.arrResponse,"""_$get(PrescriptionNumber)_""","""_$get(LocationId)_""","""_$get(NumberOfLines)_""")",objResponse)  
		if $$$ISOK(strStatus) {
			set strProp = ""
			for {
				set strValue = objResponse.ReturnArray.GetNext(.strProp)
				quit:strProp=""
				
				set objResult.ReturnStatus = strValue
				set objResult.PrescriptionNumber = $get(PrescriptionNumber)
			}
		}	
	}
	
	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(strStatus))   ; FIXME : Shouldn't have multiple exit points  Is this correct data type?
	} else {
		do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)	
	}
	quit objResult
]]></Implementation>
</Method>

<Method name="DispensePrescription">
<Description><![CDATA[
Dispense Prescription
<br /><br />
<b>Input Parameters:</b><br />
SessionId (Required) = WebService Session Id<br />
MsgSequence (Required) = Message Sequence number of this call<br />
PrescriptionNumber (Required)<br />
LocationId (Required) = Location Id (of Pharmacy)<br />
DispenseDate (Required) = Expected Collection Date (First/Next) (YYY-MM-DD)<br />
DispenseTime (Optional) default 0<br />
NumberOfLines (Mandatory) Integrity Check<br />
DispensePrescriptionHeader (required) Header record for all prescription Lines<br />
]]></Description>
<FormalSpec>SessionId:%String,MsgSequence:%Integer,PrescriptionNumber:%String,LocationId:%String,DueDate:%Date,DueTime:%Time,NumberOfLines:%Integer,DispensePrescriptionHeader:alWEB.WS.Prescription.DispensePrescriptionHeader</FormalSpec>
<ReturnType>alWEB.WS.Prescription.Result</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	//------------------------------------------------------------------------------
	// Dispense the stock to the person via webservice "MEDPrescriptionDispense"
	//
	// History:
	// 27-Oct-2010	GRF		SR16642.1: was setting strStatus to "0 0" rather than
	//							"0 #alW00005: Invalid Session Id" or similar
	// 23-Jun-2009 DavidR SR16642: Created
	//------------------------------------------------------------------------------
	set objResult = ##class(alWEB.WS.Prescription.Result).%New()
	set objResult.SessionId   = SessionId
	set objResult.MsgSequence = MsgSequence

	//Validate session
	do objResult.PrepareLog(.%request,..%ClassName(1),$$$MethodName)
	set strStatus = ##class(alWEB.WS.Session).ValidateSession(SessionId,MsgSequence,.strError,,..%ClassName()_"."_$$$MethodName)
	if '$$$ISOK(strStatus) {
	;	set strStatus = $$$MakeStatus(strStatus)  ; SR16642.1
		set strStatus = $$$MakeStatus(strError)
	}
	
	if $$$ISOK(strStatus) {
		set objResponse = ##class(alWEB.WSResult.UniversalResult).%New()
		set strStatus = ..ExecuteCall("IssuePres^MEDWSConsumptionInterface(.arrResponse,"""_$get(PrescriptionNumber)_""","""_$get(LocationId)_""","""_$get(DueDate)_""","""_$get(DueTime)_""","""_$get(NumberOfLines)_""","""_$get(DispensePrescriptionHeader)_""")",objResponse)  
	}
	//Return Result
	if '$$$ISOK(strStatus){  //Invalid Status = Client Error (Invalid Request)
		quit ..ReturnFault(..ResultError(strStatus))
	} else {
		do objResult.LogDetails(..%ClassName()_"."_$$$MethodName)	
	}
	quit objResult
]]></Implementation>
</Method>
</Class>
</Export>