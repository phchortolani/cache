<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="VAR.DASA.ado.Produtos">
<Description><![CDATA[
Busca produtos. ]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<UDLText name="T">
<Content>
// Monta uma lista com o item principal e seus primos

</Content>
</UDLText>

<UDLText name="T">
<Content>
// Submete a lista ao serviço de consulta de saldo

</Content>
</UDLText>

<UDLText name="T">
<Content>
// Retorna o saldo de todos os itens em uma lista

</Content>
</UDLText>


<Method name="saldo">
<ClassMethod>1</ClassMethod>
<FormalSpec>Items:%String,Empresas:%String,Locais:%String,&amp;erro:%String</FormalSpec>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	
	set $ztrap = "erro"

	;s ^CARLOS("I")=Items
	;s ^CARLOS("E")=Empresas
	;s ^CARLOS("L")=Locais
		
	kill %Saldo
	
	set lista = ##class(%Library.ListOfObjects).%New()
	
	set (resultado, lstSaldo, lstRet, erro) = ""
	
	if $get(Items) = "" set erro = "Item não informado" quit lista
	if $get(Empresas) = "" set erro = "Empresa não informada" quit lista
	if $get(Locais) = "" set erro = "Local não informado" quit lista
	
	// Busca primos para cada um dos items informados
	for totItem = 1:1:$length(Items, ";") {
	
		set item = $piece(Items, ";", totItem)
		set empresa = $piece(Empresas, ";", totItem)
		set local = $$GetLocalSaldoEMS^VARSQL($piece(Locais, ";", totItem)) ; DASA-256
		
		// Recupera unidades de medida do item principal informado
		set rs = ##class(%Library.ResultSet).%New("%DynamicQuery:SQL")
		
		// Consulta propriedades do item principal
		set sc = rs.Prepare("SELECT INART.UnitofMeasure as UMAlpha, "_
							"INART.BaseUnit as UMDatasul "_
							"FROM SQLUser.INART INART "_
							"WHERE INART.ItemNumber = ?")
	
		do rs.Execute(item)
		;use 0 write !, totItem_") (;) Item="_item_", Emp="_$get(empresa)_", Loc="_$extract($get(local), 1, 3)

		set id = $increment(%Saldo)
		if rs.Next(.sc) {
			set %Saldo(id, item, local, "codEmpresa") = $get(empresa)
			set %Saldo(id, item, local, "codEstabSolic") = $$GetLocalSaldoEMS^VARSQL(local) ; DASA-256
			set %Saldo(id, item, local, "codItem") = $get(item)
			set %Saldo(id, item, local, "umAlphalinc") = $get(rs.Data("UMAlpha"))
			set %Saldo(id, item, local, "umDatasul") = $get(rs.Data("UMDatasul"))
			set %Saldo(id, item, local, "saldoDatasul") = ""
			set %Saldo(id, item, local, "saldoAlphalinc") = ""
			set %Saldo(id, item, local, "primo") = 0
			;use 0 write ", SQL="_rs.GetDataByName("UMAlpha")
		}
		
		do rs.%Close()
		
		// Monta lista de primos
		set ret = ..listaPrimos(item, empresa, local, .erro)
		
	}

	// Monta lista para o WebService
	set lstItems = ##class(%Library.ListOfObjects).%New()
	set (id, item, local) = ""
	for  set id = $order(%Saldo(id)) quit:id=""  do
	. for  set item = $order(%Saldo(id, item)) quit:item=""   do
	.. for  set local = $order(%Saldo(id, item, local)) quit:local=""   do
	... set prod = ##class(VAR.DASA.Intgr.S2.aphc001inpListaParamRow).%New()
	... set prod.codItem = item
	... set prod.codEmpresa = %Saldo(id, item, local, "codEmpresa")
	... set prod.codEstabSolic = $$GetLocalSaldoEMS^VARSQL($get(%Saldo(id, item, local, "codEstabSolic"))) ; DASA-256
	... ;	
	
	... do lstItems.Insert(prod)
	... ;use 0 write !, lstItems.Count()_") Item="_prod.codItem_", Emp="_prod.codEmpresa_", Loc="_prod.codEstabSolic
	
	// Invoca a classe proxy do WebService e retorna os saldos em lstSaldo
	set proxy = ##class(VAR.DASA.Intgr.asConsultaSaldoEstoqueObj).%New()
	set proxy.SSLConfiguration = "DASAWS"
	do proxy.aphc001(lstItems, .resultado, .lstSaldo)
	
	set erro = resultado
	
	// Converte para unidade de medida de apresentação
	set ret = ..converteUMedida(lstSaldo)
	
	// Formata lista para retorno
	set lstRet = ##class(%Library.ListOfObjects).%New()
	set (id, item, local) = ""
	for  set id = $order(%Saldo(id)) quit:id=""  do
	. for  set item = $order(%Saldo(id, item)) quit:item=""   do
	.. for  set local = $order(%Saldo(id, item, local)) quit:local=""   do
	... ;
	... set prod = ##class(VAR.DASA.db.Produtos).%New()
	... set prod.codEmpresa = %Saldo(id, item, local, "codEmpresa")
	... set prod.codEstabSolic = %Saldo(id, item, local, "codEstabSolic")
	... set prod.codItem = $get(item)
	... set prod.umAlphalinc = %Saldo(id, item, local, "umAlphalinc")
	... set prod.umDatasul = %Saldo(id, item, local, "umDatasul")
	... set prod.primo = %Saldo(id, item, local, "primo")
	... set prod.saldoDatasul = %Saldo(id, item, local, "saldoDatasul")
	... set prod.saldoAlphalinc = %Saldo(id, item, local, "saldoAlphalinc")
	... do lstRet.Insert(prod)
	
	kill %Saldo

	quit lstRet
	
erro
	set $ztrap = ""
	set objErro = $listget( $piece(%objlasterror, $char(1), 3), 1)
	set zeErro = $piece( $piece($ZE, ">", 1), "<", 2)
	
	if (objErro = 6248) || ( zeErro = "SOAP" ) {
		set prod = ##class(VAR.DASA.db.Produtos).%New()
		set prod.codEmpresa = %Saldo(id, item, local, "codEmpresa")
		set prod.codEstabSolic = %Saldo(id, item, local, "codEstabSolic")
		set prod.codItem = $get(item)
		set prod.umAlphalinc = %Saldo(id, item, local, "umAlphalinc")
		set prod.umDatasul = %Saldo(id, item, local, "umDatasul")
		set prod.primo = %Saldo(id, item, local, "primo")
		set prod.saldoDatasul = 0
		set prod.saldoAlphalinc = 0
		do lstRet.Insert(prod)
	}
	
	quit lstRet
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
// Converte para a unidade de medida do Alphalinc e completa as propriedades do produto

</Content>
</UDLText>


<Method name="converteUMedida">
<ClassMethod>1</ClassMethod>
<FormalSpec>lstSaldo:%Library.ListOfObjects</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

	if lstSaldo = $$$NULLOREF quit "Lista de saldos inválida"
	
	for i=1:1:lstSaldo.Count() {
		
		set item = lstSaldo.GetAt(i).codItem
		set local = lstSaldo.GetAt(i).codEstabSolic
		
		for id = 1:1:lstSaldo.Count() quit:($data(%Saldo(id, item, local, "codItem")) && (%Saldo(id, item, local, "saldoAlphalinc")=""))
		
		set unidadeMedida = %Saldo(id, item, local, "umAlphalinc")
		set umDatasul = %Saldo(id, item, local, "umDatasul")
		set (saldoDatasul, %Saldo(id, item, local, "saldoDatasul")) = lstSaldo.GetAt(i).saldoDisponivel
		
		set saldoAlphalinc = $$ConverteQtUnidade^VARInsereTransferenciaCDWS(item, saldoDatasul, umDatasul, .unidadeMedida)
		set %Saldo(id, item, local, "saldoAlphalinc") = saldoAlphalinc
		
	}

	quit 1
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
// Retorna uma lista contendo o item principal e seus primos

</Content>
</UDLText>

<UDLText name="T">
<Content>
// Havendo mais de um item, estes serão informados separados por ";"

</Content>
</UDLText>


<Method name="listaPrimos">
<ClassMethod>1</ClassMethod>
<FormalSpec>item:%String,empresa:%String,local:%String,erro:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set erro = ""
	
	if $get(item) = "" set erro = "Item não informado"
	if $get(empresa) = "" set erro = "Empresa não informada"
	if $get(local) = "" set erro = "Local não informado"
	if $get(erro) '= "" quit 0

	set rs = ##class(%Library.ResultSet).%New("%DynamicQuery:SQL")
				
	// Consulta os itens primos do item informado
	set sc = rs.Prepare("SELECT INARTA.AlternateItemNumber as Primo, "_
						"INART.UnitofMeasure as UMAlpha, "_
						"INART.BaseUnit as UMDatasul "_
						"FROM SQLUser.INART INART, SQLUser.INARTA INARTA "_
						"WHERE INARTA.Company = INART.Company AND "_
						"INARTA.ItemNumber = INART.ItemNumber AND "_
						"INART.ItemNumber= ?")
					
	do rs.Execute(item)
	
	// Insere os itens primos na lista
	while rs.Next(.sc) {
	
		if $$$ISERR(sc) quit 
	
		set itemPrimo = $get(rs.Data("Primo"))
		set id = $increment(%Saldo)

		set %Saldo(id, itemPrimo, local, "codEmpresa") = $get(empresa)
		set %Saldo(id, itemPrimo, local, "codEstabSolic") = $get(local)
		set %Saldo(id, itemPrimo, local, "codItem") = itemPrimo
		set %Saldo(id, itemPrimo, local, "umAlphalinc") = $$SQLGetUnitofMeasure^VARSQL(itemPrimo) ; DASA-301 $get(rs.Data("UMAlpha"))
		set %Saldo(id, itemPrimo, local, "umDatasul") = $$SQLGetBaseUnit^VARSQL(itemPrimo) ; DASA-301 $get(rs.Data("UMDatasul"))
		set %Saldo(id, itemPrimo, local, "saldoDatasul") = ""
		set %Saldo(id, itemPrimo, local, "saldoAlphalinc") = ""
		set %Saldo(id, itemPrimo, local, "primo") = 1
			
	}

	do rs.Close()

	quit 1
]]></Implementation>
</Method>

<Method name="ObtemListaSaldo">
<Description><![CDATA[
2015-01-04	FC	DASA-207 Método para consultar o saldo a partir de uma lista de itens
Método para a consulta de Saldos em lote dos produtos primos
pLstItem - Lista de itens separados por ";"]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLstItem:VAR.DASA.Intgr.S2.aphc001inpListaParamRow,pStrEmpresa:%String,pStrLocal:%String,pBoolPrint:%Boolean=0</FormalSpec>
<ReturnType>VAR.DASA.Intgr.S2.aphc001outListaSaldoRow</ReturnType>
<Implementation><![CDATA[
	set strStatus = ""

	try {
		set lstItem  = ##class(%Library.ListOfObjects).%New()
		set lstSaldo = ##class(%Library.ListOfObjects).%New()
		
		for i=1:1:$length(pLstItem,";") {
			set item 				= ##class(VAR.DASA.Intgr.S2.aphc001inpListaParamRow).%New()
			set item.codItem 		= $piece(pLstItem,";",i)
			set item.codEmpresa 	= pStrEmpresa
			set item.codEstabSolic 	= pStrLocal
			
			do lstItem.Insert(item)
		}
		set proxy = ##class(VAR.DASA.Intgr.asConsultaSaldoEstoqueObj).%New()
		set proxy.SSLConfiguration = "DASAWS"
		do proxy.aphc001(lstItem, .resultado, .lstSaldo)
		set erro = resultado
		set strStatus = lstSaldo
		
		if (pBoolPrint = $$$YES) {
			for i=1:1:lstSaldo.Count() {
				if (lstSaldo.GetAt(i).saldoDisponivel > 0) {
					write !,"Item: " _ lstSaldo.GetAt(i).codItem
					write " Qtde: " _ lstSaldo.GetAt(i).saldoDisponivel
				}
			}
		}
	}
	catch {
		set objErro 	= $listget( $piece($get(%objlasterror), $char(1), 3), 1)
		set zeErro 		= $ZError
		set erro 		= objErro_", "_zeErro
		set strStatus 	= erro
		set ^CacheTempErrSaldoEMS($zn,$i(^CacheTempErrSaldo)) = strStatus
	}
	quit strStatus
]]></Implementation>
</Method>
</Class>
</Export>