<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.SVGEditor">
<Description><![CDATA[
Base class for SVG-editor documents displayed in Studio]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Parameter name="WIDTH">
<Description><![CDATA[
Initial width of editor]]></Description>
<Default>2000</Default>
</Parameter>


<Parameter name="HEIGHT">
<Description><![CDATA[
Initial height of editor]]></Description>
<Default>2000</Default>
</Parameter>


<Parameter name="EDITORURL">
<Description><![CDATA[
URL used to render editor]]></Description>
</Parameter>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// force output to be UTF-8
	Set %response.CharSet="UTF-8"

	// prevent session blocking
	Do %session.Unlock()
 	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tLoadingMsg = "Loading Diagram..."
	Set tName = $G(%request.Data("$ID1",1))
	
	// find "document" object for this page
	// for example, the server-side DTL transform object
	Set tSC = ..GetDocument(tName,.tDocument)

	Do ..DrawHTMLHead()
	
	// draw body
	&html<<body>
	<script language='JavaScript'>checkAndGetSVGViewer();</script>
	>
	
	// set up hyper-event frame for this page
	Write ..HyperEventFrame(),!

	// Define feedback sounds for activities
	If '+$G(^Ens.SilentBPL,1) { &html<<bgsound id="bgsound" src='' loop='1'/>> }

	&html<<!--#(tName)#-->>
	&html<<xml id="initDocument">>

	Do ..DrawInitDocument(tDocument)

	&html<</xml>>

	// loading message
	&html<<div id='loading' align='center' style='color: blue; font-size: 12pt; font-family: courier new'>#(tLoadingMsg)#</div>>
	
	// 'results' div used for data transfer with Studio
	If ($D(%request.Data("DEBUG",1))) {
		&html<<div id='results' debug='1'></div>>
	}
	Else {
		&html<<xml id='results'></xml>>
	}

	// embed SVG editor

	&html<
<embed id='SVGEmbed' name='SVGEmbed' type='image/svg-xml'
	src='#(..Link(..#EDITORURL))#'
	height='#(..#HEIGHT)#' width='#(..#WIDTH)#'
	>>

	// Write out JS initEditor method
	Write "<script language=""javascript"">",!
	Write "function initEditor() {",!
	
	// Get implementation of initEditor
	Do ..DrawInitEditorFunction(tDocument)

	// remove loading message
	&js<
		var loadingDiv = self.document.getElementById("loading");
		if (loadingDiv) {
			loadingDiv.style.display = 'none';
		}
	>

	Write $c(9)_"editorReady = true;",!

	// find initial document; apply it to both panes of editor window
	Write $c(9)_"var xml = self.document.getElementById('initDocument');",!
	Write $c(9)_"if (xml) {",!
	Write $c(9,9)_"document_setDocument(xml.innerHTML);",!

	// notify studio
	//Write $c(9,9)_"document_raiseDocumentEvent('<?xml version=""1.0"" ?>\n' + xml.innerHTML);",!
	Write $c(9,9)_"document_getDocument();",!

	Write $c(9)_"}",!

	Write "}"_$c(9),!
	Write $c(9)_"</script>",!
	Write $c(9),!

	&html<</body>
	</html>>	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawHTMLHead">
<Description><![CDATA[
Draw Head section for editor page]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<<html>
		<head>>

	// set up hyper-event for this page
	Write ..HyperEventHead(),!

	// set up svg test; 
	// editorReady logic
	// common js API for Studio (which dispatched to actual editor)
	&html<		
<style>
body { margin: 0px; padding: 0px; background: #EEEEEE; }
</style>
<script language='JavaScript' src='svgcheck.js'></script>
<script language='VBScript' src='svgcheck.vbs'></script>

<script language='javascript'>
function playSound(mode) {
	var sound = self.document.getElementById('bgsound');
	if (sound) {
		switch(mode) {
		case 'connect':
			sound.src = '/csp/broker/images/bplconnect.wav';
			break;
		case 'drill':
			sound.src = '/csp/broker/images/bpldrill.wav';
			break;
		case 'delete':
		case 'disconnect':
			sound.src = '/csp/broker/images/bpldisconnect.wav';
			break;
		}
	}
}

var editorReady = false;

// API functions

// Set current state of editor
function document_setDocument(state)
{
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.setDocument(state);
	}
}

// Get document with current state of editor
// (raise event with current document in it)
function document_getDocument()
{
	if (!editorReady) return '';
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.getDocument();
}

// Set a specific property value
function document_setProperty(prop,value)
{
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.setProperty(prop,value);
	}
}

// Get a specific property value
function document_getProperty(prop)
{
	if (!editorReady) return '';
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.getProperty(prop);
}

function document_delete() {
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.invokeOperation('deleteItem',null);
	}
}
function document_cut() {
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.invokeOperation('cutItem',null);
	}
}
function document_copy() {
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.invokeOperation('copyItem',null);
	}
}
function document_undo() {
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.invokeOperation('undo');
	}
}
function document_canUndo() {
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.invokeOperation('canUndo');
	}
}
function document_isModified() {
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.invokeOperation('isModified');
	}
}
function document_redo() {
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.invokeOperation('redo');
	}
}
function document_paste() {
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.invokeOperation('pasteItem',null);
	}
}

function document_getZoom() {
	if (!editorReady) return '100';
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('getZoom');
}
function document_setZoom(zoom) {
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.invokeOperation('setZoom',zoom);
	}
}
function document_setReadOnly(ro) {
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.invokeOperation('setReadOnly',ro);
	}
}

// event-raising API
function document_raiseSelectEvent(state)
{
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.raiseSelectEvent(state);
	}
}

function document_raiseDocumentEvent(state)
{
	if (editorReady) {
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.raiseDocumentEvent(state);
	}
}

// callbacks from editor

var extCounter = 0;
function raiseEvent(type) {
	if (editorReady) {
		self.document.title = type + ':' + extCounter++;
	}
}

</script>>

	// write out additional HEAD (js functions) code
	Do ..OnDrawHTMLHead()

	&html<</head>>
]]></Implementation>
</Method>

<Method name="OnDrawHTMLHead">
<Description><![CDATA[
Draw any additional JS or other head section items]]></Description>
<ClassMethod>1</ClassMethod>
</Method>


<Method name="GetDocument">
<Description><![CDATA[
Find corresponding "document" object for this page.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String,*pDocument:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set pDocument = ""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawInitEditorFunction">
<Description><![CDATA[
Give subclass opportunity to inject additional JS code 
into the client-side initEditor function]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDocument:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&js< // init editor
	>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawInitDocument">
<Description><![CDATA[
Find the document for the given document <var>pDocument</var> and
write out its initial state as an xml document.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDocument:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK

	Do {
		// render document object as xml
		
	} While(0)
Exit
	Quit tSC
Trap
	Set $ZT=""
	Goto Exit
]]></Implementation>
</Method>
</Class>
</Export>