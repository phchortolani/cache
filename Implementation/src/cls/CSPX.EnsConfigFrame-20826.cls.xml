<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsConfigFrame">
<Description><![CDATA[
Frameset SVG-based config page.]]></Description>
<ClassType/>
<IncludeCode>Ensemble</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Parameter name="CONTENTTYPE">
<Default>text/html</Default>
</Parameter>


<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ($G(%request.Data("TITLE",1)) = 1) {
		// draw the title frame
		Do ..DrawTitle()
	}
	Else {
		Do ..DrawFrames()
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawFrames">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// called from framework
	Set prodid = $G(%request.Data("$ID1",1))
	Set tErrMsg = ""
	Set tErrWarning = $$$TextHTML("An error has occurred while trying to view Production")
	Set production = ##class(Ens.Config.Production).%OpenId(prodid)
	If ('$IsObject(production)) {
		Set tErrMsg = $$$TextHTML("Unable to open Configuration Object")
	}
	Set ConfigEditor = $$$TextHTML("Ensemble Configuration Editor")

	&html<<html><head>
	<link REL="stylesheet" TYPE="text/css" HREF="/csp/sys/csputils.css">

	<script language="javascript">
	
// load a new property sheet
function selectNewItem(itemid)
{
	// self.propertyFrame.selectNewItem(#(..QuoteJS(prodid))#,itemid);

	var prodid = #(..QuoteJS(prodid))#;
	var elid = itemid;
	
	// reload property sheet for selected item
	if (elid) {
		// elid is "item_#", get type and #
		var type = elid.split('_')[0];
		if (type == 'item') {
			// business class
			var itemid = elid.substring(5,elid.length);
			self.propertyFrame.document.location = '#(..Link("CSPX.EnsConfigProperty.cls",,1))#' + 'PRODUCTION=' + escape(prodid) + '&ITEM=' + escape(itemid);
		}
		else {
			self.propertyFrame.document.location = '#(..Link("CSPX.EnsConfigProperty.cls",,1))#' + 'PRODUCTION=' + escape(prodid);
		}
	}
	else {
		self.propertyFrame.document.location = '#(..Link("CSPX.EnsConfigProperty.cls",,1))#' + 'PRODUCTION=' + escape(prodid);
	}
}

// update an item in the SVG page
function updateItem(id,pkg,cls,pool,enabled,category)
{
	self.canvasFrame.updateItem(id,pkg,cls,pool,enabled,category);
}

// show the add item page
function showAddItemPage(host)
{
	// launch wizard
	self.propertyFrame.btnAddHost(host,'');

	// !!!old self.propertyFrame.document.location = '#(..Link("CSPX.EnsConfigProperty.cls",,1))#' + 'ADDITEM=1&PRODUCTION=' + #(..QuoteJS(prodid))# + '&HOSTTYPE=' + escape(host);
}

// Toggle enabled flag of specified item
function toggleEnabled(itemid)
{
	var elid = itemid;
	
	if (elid) {
		// elid is "item_#", get type and #
		var type = elid.split('_')[0];
		if (type == 'item') {
			// business class
			var itemid = elid.substring(5,elid.length);
			self.propertyFrame.btnToggleEnabled(itemid);
		}
	}
}

// show the instances page
function showInstances(cfgName)
{
	self.propertyFrame.document.location = '#(..Link("UtilEnsMonitor.csp",,1))#' + '$FRAME=Info&$ID1=' + escape(cfgName);
}

// show the history page
function showHistory(cfgName)
{
	self.propertyFrame.document.location = '#(..Link("UtilEnsActivityGraph.csp",,1))#' + '$FRAME=Info&$ID1=' + escape(cfgName);
}

// show the message queue page
function showQueue(cfgName)
{
	// go to queue page
	self.propertyFrame.document.location = '#(..Link("UtilEnsQList.csp",,1))#' + '$FRAME=Detail&$ID1=' + escape(cfgName);
}

// show the event log page
function showEventLog(cfgName)
{
	// go to event log page
	top.document.location = '#(..Link("UtilEnsLog.csp",,1))#' + 'Source=' + escape(cfgName);
}

	</script>

<script language="javascript">
function restoreLayout()
{
	// restore size of frames from cookie
	// cookie is tied to this page name
	var frameset = self.document.getElementById("frameset");
	if (frameset) {
		var cookie = self.document.location.pathname;
		cookie = escape(cookie.split(".")[0]);
		var r = getCookie2(cookie, "");
		if (r != "") {
			// +HCR089 Workaround problem with IE8 that causes Production SVG diagrams to not be displayed after frames were resized
			if ( (navigator.userAgent).indexOf('MSIE 8',0) > 0 ) {
				var title = r.split(",")[0];
				if ( (title >= 1000) && ( title%100==0 ) ) {
					title = title/100;
					r = title + "," + r.split(",")[1] + "," + r.split(",")[2];
				}
			}
			frameset.rows = r;
			// -HCR089
		}
	}
}
function rememberLayout()
{
	// save size of frames to cookie
	var frameset = self.document.getElementById("frameset");
	if (frameset) {
		var cookie = self.document.location.pathname;
		cookie = escape(cookie.split(".")[0]);
	 	self.document.cookie = cookie + '=' + escape(frameset.rows);
	}
}
function getCookie2(name,def)
{
	var value = def; // default value
	var cookies = self.document.cookie;
	var pos = cookies.indexOf(name + '=');
	if (pos != -1) {
		var start = pos + 1 + name.length;
		var end = cookies.indexOf(';',start);
		if (end == -1) end = cookies.length;
		var value = unescape(cookies.substring(start,end));
	}
	return value;
}
	</script>
	
	<title>#(ConfigEditor)#</title>
	</head>>
	
	If (tErrMsg = "") {
	
		// HCR089 (Workaround problem with IE8 that causes Production SVG diagrams to not be displayed) changed the rows initialization
		&html<
		<frameset id="frameset" onload="restoreLayout();" onbeforeunload="rememberLayout();" rows="100,40%,*" frameborder=yes frameborder=1 border=2>
			<frame src="#(..Link("CSPX.EnsConfigFrame.cls?TITLE=1"))#" name="titleFrame" MARGINWIDTH="0" MARGINHEIGHT="0" FRAMESPACING="0" FRAMEBORDER="1" SCROLLING="no" RESIZE="no">
			<frame src="#(..Link("CSPX.EnsConfigPane.cls?PRODUCTION="_prodid))#" name="canvasFrame" MARGINWIDTH="0" MARGINHEIGHT="0" FRAMESPACING="0" FRAMEBORDER="1">
			<frame src="#(..Link("CSPX.EnsConfigProperty.cls?PRODUCTION="_prodid))#" name="propertyFrame">
		</frameset>>
	}
	Else {
		// Error msg
		&html<<body>
		<div class="Text1">#(tErrWarning)# <b>#(prodid)#</b>:</div>
		<div class="Text"><i>#(tErrMsg)#</i></div>
		</body>
		>
	}

	&html<</html>>
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawTitle">
<Description><![CDATA[
Draw Title for this CSP page]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// construct a PageInstance object
	Set tPage = ##class(%CSP.Util.PageInstance).%New()
	Set tPage.Title = $$$TextHTML("Configuration")
	
	// add title pane
	Set tPane = ##class(CSPX.EnsTitlePane).%New()
 	Set tPane.Text =$$$TextHTML("Ensemble Configuration")

	Do tPage.Panes.SetAt(tPane,"Title")
	
	// locator
	Set tLink = ##class(%CSP.Util.Link).%New()
	Set tLink.Caption = $$$TextHTML("Ensemble")
	Set tLink.HREF = "UtilEnsHome.csp"
	//Set tLink.HREF = ..Link("UtilEnsHome.csp")
	Do tPane.Locator.Insert(tLink)
	
	Set tLink = ##class(%CSP.Util.Link).%New()
	Set tLink.Caption = $$$TextHTML("Productions")
	Set tLink.HREF = "UtilEnsProductions.csp"
	//Set tLink.HREF = ..Link("UtilEnsProductions.csp")
	Do tPane.Locator.Insert(tLink)

	// draw the page
	&html<<html><head>>
	Do ##class(%CSP.Util.AutoPage).DrawHEAD(tPage)

	&html<</head>>
	

	&html<<body>>

	// Main layout table
	&html<<table border="0" class="LayoutMain" width="100%" height="100%" cellpadding="0" cellspacing="0">>

	// Title pane
	Do tPane.DrawBODY(tPage)

	&html<</table>>
	&html<</body></html>>
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>