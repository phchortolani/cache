<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="SourceControl.control.Config">
<ClassType/>
<Import>VAR.infra.util</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="GetSourceControlProperty">
<Description><![CDATA[
Gets a property that is set in ^SourceControl]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>propertyName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $get(^SourceControl(propertyName))
]]></Implementation>
</Method>

<Method name="IsProjectDirSet">
<Description><![CDATA[
Checks if ^SourceControl("projectDir") is set
It is normally set just by running ANT.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit ($get(^SourceControl("projectDir")) '= "")
]]></Implementation>
</Method>

<Method name="GetProjectDir">
<Description><![CDATA[
Get the file system directory where all files should be written to]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result = ..GetSourceControlProperty("projectDir")
	if (result = "") {
		write !, "Before using Source Control you must update Cache Variables!"
		write !, "Please run ant on you project directory before using this Source Control Class"
		write !, "(set ^SourceControl(""projectDir"")=""c:\yourproject"")"
		set result = "c:\tmp"
	} 
	
	quit result
]]></Implementation>
</Method>

<Method name="GetCspDir">
<Description><![CDATA[
Get the file system directory where cache reads the csp files]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..GetSourceControlProperty("cspDir")
]]></Implementation>
</Method>

<Method name="IsOnBeforeLoadActive">
<Description><![CDATA[
If the property is set, Studio will always try to load a file
from the file system, whenever the user choses a file in Studio's open dialog.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit ..GetSourceControlProperty("onBeforeLoadActive")
]]></Implementation>
</Method>

<Method name="IsDeleteTmpXMLFilesActive">
<Description><![CDATA[
Tests if the system must delete the temporary file created during
the export of a file. It deafults to YES]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set r = ..GetSourceControlProperty("deleteTmpXMLFilesActive")
	if (r = "") {
		set r = "1"
	}

	quit r
]]></Implementation>
</Method>

<Method name="IsInIgnoredList">
<Description><![CDATA[
Tests to see if this internal artifact is in any ignored lists]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>extension,internalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set result = $$$NO

	// Search for a match in all prefixes in the ignore list
	set idPrefix = ""
	for {
		set idPrefix = $order(^SourceControl("excludeList", extension, idPrefix))
		quit:(idPrefix = "")

		if (('..IsInExcludeExceptions(internalName)) &&
			##class(Strings).StartsWith(internalName, idPrefix)) {
			set result = $$$YES
			quit
		}
	}

	quit result
]]></Implementation>
</Method>

<Method name="IsInExcludeExceptions">
<Description><![CDATA[
The exclude excpetion list lists all artifacts that should *not* be ignored]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>internalName:%String="&quot;</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if (internalName = "") {
		quit $$$NO
	}

	// It is true if it is found in the list
	quit ($data(^SourceControl("excludeExceptions", internalName)))
]]></Implementation>
</Method>

<Method name="GetExternalIncDir">
<Description><![CDATA[
The place where .inc.xml files are saved]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "src/inc/")
]]></Implementation>
</Method>

<Method name="GetExternalMacDir">
<Description><![CDATA[
The place where .mac.xml files are saved]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "src/mac/")
]]></Implementation>
</Method>

<Method name="GetExternalPrjDir">
<Description><![CDATA[
The place where .prj.xml files are saved]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "src/prj/")
]]></Implementation>
</Method>

<Method name="GetExternalClassDir">
<Description><![CDATA[
The place where .CLS.XML files are saved]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "src/cls/")
]]></Implementation>
</Method>

<Method name="GetExternalCSPDir">
<Description><![CDATA[
The place where .CSP, .CSR, JS,CSS and XML files  (which are directly manipulated by Stui) are saved]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "web/csp/")
]]></Implementation>
</Method>

<Method name="GetExternalNMFormDir">
<Description><![CDATA[
Get the external full path to the @NM forms directory
Example: c:\myprojects\alphalincA\Implementation\globals\nm\forms\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/forms/")
]]></Implementation>
</Method>

<Method name="GetExternalNMClassDir">
<Description><![CDATA[
Get the external full path to the @NM class directory
Example: c:\myprojects\alphalincA\Implementation\globals\nm\classes\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/classes/")
]]></Implementation>
</Method>

<Method name="GetExternalNMSysParametersDir">
<Description><![CDATA[
Get the external full path to the @NM system parameters
Example: c:\myprojects\alphalincA\Implementation\globals\nm\sysParameters\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/"_##class(FileType).%GetParameter("TXTSYSPARAMETERS")_"/")
]]></Implementation>
</Method>

<Method name="GetExternalNMAppParametersDir">
<Description><![CDATA[
Get the external full path to the @NM application parameters
Example: c:\myprojects\alphalincA\Implementation\globals\nm\appParameters\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/"_##class(FileType).%GetParameter("TXTAPPPARAMETERS")_"/")
]]></Implementation>
</Method>

<Method name="GetExternalNMUserParametersDir">
<Description><![CDATA[
Get the external full path to the @NM user parameters
Example: c:\myprojects\alphalincA\Implementation\globals\nm\userParameters\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/"_##class(FileType).%GetParameter("TXTUSERPARAMETERS")_"/")
]]></Implementation>
</Method>

<Method name="GetExternalNMMenuDir">
<Description><![CDATA[
Get the external full path to the @NM Menu definitions
Example: c:\myprojects\alphalincA\Implementation\globals\nm\menu\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/menus/")
]]></Implementation>
</Method>

<Method name="GetExternalNMLanguageDir">
<Description><![CDATA[
Get the external full path to the @NM language texts
Example: c:\myprojects\alphalincA\Implementation\globals\nm\language\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/language/")
]]></Implementation>
</Method>

<Method name="GetExternalNMHelpDir">
<Description><![CDATA[
Get the external full path to the @NM help texts.
Example: c:\myprojects\alphalincA\Implementation\globals\nm\help\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/help/")
]]></Implementation>
</Method>

<Method name="GetExternalNMDictionaryDir">
<Description><![CDATA[
Get the external full path to the @NM dictionary texts.
Example: c:\myprojects\alphalincA\Implementation\globals\nm\dictionary\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/"_##class(FileType).%GetParameter("TXTDICTIONARY")_"/")
]]></Implementation>
</Method>

<Method name="GetExternalNMCharParametersDir">
<Description><![CDATA[
Get the external full path to the @NM dictionary texts.
Example: c:\myprojects\alphalincA\Implementation\globals\nm\charParameters\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/"_##class(FileType).%GetParameter("TXTCHARPARAMETERS")_"/")
]]></Implementation>
</Method>

<Method name="GetExternalNMGeneralMetadataDir">
<Description><![CDATA[
Get the external full path to the @NM general metadata
Example: c:\myprojects\alphalincA\Implementation\globals\nm\charParameters\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/general/")
]]></Implementation>
</Method>

<Method name="GetExternalNMFavoritesDir">
<Description><![CDATA[
Get the external full path to the @NM general metadata
Example: c:\myprojects\alphalincA\Implementation\globals\nm\favorites\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "globals/nm/favorites/")
]]></Implementation>
</Method>

<Method name="GetExternalResourcesDir">
<Description><![CDATA[
Get the external full path to the resources
Example: c:\myprojects\alphalincA\Implementation\web\resources\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "web/resources/")
]]></Implementation>
</Method>

<Method name="GetExternalReportDefinitionsDir">
<Description><![CDATA[
Get the external full path to the report definitions
Example: c:\myprojects\alphalincA\Implementation\web\reports\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "web/reports/")
]]></Implementation>
</Method>

<Method name="GetExternalCompiledReportsDir">
<Description><![CDATA[
Get the external full path to the compiled reports
Example: c:\myprojects\alphalincA\Implementation\web\reports\Compiled\]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "web/reports/Compiled/")
]]></Implementation>
</Method>

<Method name="GetExternalCacheLibraryDir">
<Description><![CDATA[
Get the external full path to the Caché library
Example: c:\myprojects\alphalincA\Implementation\libs\cache-libs]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "libs/cache-libs/")
]]></Implementation>
</Method>

<Method name="GetExternalJavaLibraryDir">
<Description><![CDATA[
Get the external full path to the Java library
Example: c:\myprojects\alphalincA\Implementation\libs\java-libs]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).ConcatPath(..GetProjectDir(), "libs/java-libs/")
]]></Implementation>
</Method>

<Method name="IsBuildOnlyNonVAR">
<Description><![CDATA[
Verify configuration setting allowing only non-VAR files to be exported]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit (..GetSourceControlProperty("buildOptionVAR") = 2)
]]></Implementation>
</Method>

<Method name="IsBuildOnlyVAR">
<Description><![CDATA[
Verify configuration setting allowing only non-VAR files to be exported]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit (..GetSourceControlProperty("buildOptionVAR") = 3)
]]></Implementation>
</Method>

<Method name="IsBuildASDE">
<Description><![CDATA[
Verify configuration setting allowing ASDE files to be exported]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit (..GetSourceControlProperty("buildOptionASDE"))
]]></Implementation>
</Method>

<Method name="IsRunSourceLogging">
<Description><![CDATA[
Verify configuration setting to run SourceLogging]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set isRun = (..GetSourceControlProperty("runSourceLogging") = 1)

	if (isRun) set isRun = ##class(%Dictionary.ClassDefinition).%ExistsId("Common.SourceLogging")

	quit isRun
]]></Implementation>
</Method>
</Class>
</Export>