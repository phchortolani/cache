<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsHostWizardPane">
<Description><![CDATA[
Create new Business Host Wizard page.]]></Description>
<ClassType/>
<IncludeCode>Ensemble,EnsUI</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Util.Pane</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Method name="Submit">
<Description><![CDATA[
Override submit behavior for this page]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:%CSP.Request,pSubmit:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// get ID values from request
	If ($IsObject($G(pRequest))) {
		Set n = 1
		While ($D(pRequest.Data("$ID"_n,1))) {
			Set tID(n) = pRequest.Data("$ID"_n,1)
			Set n = n + 1
		}
	}

	Set %response.Context("$OptionId") = $G(pRequest.Data("$OptionId",1))

	Set ret = ..OnSubmit(.tID,pSubmit)	
	Quit ret
]]></Implementation>
</Method>

<Method name="OnSubmit">
<Description><![CDATA[
This callback is called when this form is submitted.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;pID:%String,pSubmit:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tOptionId = $G(%request.Data("$OptionId",1))
	Set tSC = $$$OK

	If (pSubmit = "$AUTOFORM_SAVE") {
		// add new host to production:
		// find production
		Set tProdId = $G(pID(1))
		Set:tProdId'="" tProduction = ##class(Ens.Config.Production).%OpenId(tProdId)
		If $IsObject($G(tProduction)) {

			// dispatch to submit method in this class
			Set tSC = $zobjclassmethod(..%ClassName(1),"Submit"_tOptionId,tProduction)

			If $$$ISOK(tSC) {
				// save production
				Set tSC = tProduction.%Save()

				If ($$$ISOK(tSC)) {
					// update production class
					Set tSC = tProduction.SaveToClass()

					// tell this window to close
					Set %response.Context("$CLOSEWINDOW") = 1
				}
			}

			If $$$ISERR(tSC) {
				Do $System.Status.DecomposeStatus(tSC,.err)
				Set %errorMessage = $G(err(1))
			}
		}
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="DrawHEAD">
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// mode is "model" if we are called from Model page
	// else assume we are called from Config page
	Set tWizardMode = $G(%request.Data("MODE",1))
	Set msg1 = $$$TextJS("Please select a class name.")
	Set msg2 = $$$TextJS("Please enter a name for this item.")
	Set msg3 = $$$TextJS("No hostType specified.")
	Set msg4 = $$$TextJS("No name specified.")
	Set msg5 = $$$TextJS("No host class name specified.")
	Set msg6 = $$$TextJS("Unable to find addHost method in opener!")
	Set msg7 = $$$TextJS("Please enter a Business Rule name.")
	// override table style
	&html<
<style>

/* override */
TABLE.LayoutMain TD.LayoutContentCol {
	background: #CCCCEE;
	padding: 0px;
	margin: 0px;
	vertical-align: top;
	filter: none;
}

h1 {
	margin: 0px;
	margin-top: -20px;
	padding: 3px;
	padding-left: 5px;
	color: yellow;
	white-space: nowrap;
	background: #000040;
	background-image: url(/csp/broker/images/grad-blue-10x30.png);
	background-repeat: repeat-x;
	border-bottom: 1px solid black;
}

.optionDiv {
	border: 1px solid darkblue;
	width: 90%;
	height: 50%;
	background: #DDDDFF;
	margin-left: 20px;
}

.RadioBtns {
	width: 90%;
	border-top: 1px solid darkblue;
	border-left: 1px solid darkblue;
	border-right: 1px solid darkblue;
	padding: 2px;
	margin-left: 20px;
	font-size: 0.8em;
	background: #C0C0C0;
	background-image: url(/csp/broker/images/grad-halfgray-10x30.png);
	background-repeat: repeat-x;
}

.btnDiv {
	width: 90%;
	margin-top: 5px;
	text-align: right;
}

form {
	width: 100%;
	height: 100%;
	overflow: auto;
}

.AdapterType {
	font-size: 0.8em;
}

#default {
	font-size: 0.8em;
	font-style: italic;
	padding-left: 10px;
}

</style>>

	&html<
	
<script language="javascript">

var wizardMode = '#(tWizardMode)#';

// User has selected a host type
function selectOption(id)
{
	if (id == currOptionId) return;
	
	// hide old option tab
	if (currOptionId) {
		var div = self.document.getElementById(currOptionId);
		if (div) {
			div.style.display = 'none';
		}
	}

	currOptionId = id;
	
	// update hidden field
	self.document.getElementById('$OptionId').value = id;

	// show new option tab
	if (currOptionId) {
		var div = self.document.getElementById(currOptionId);
		if (div) {
			div.style.display = '';
		}

		// update radio button
		var btn = self.document.getElementById('Option_' +currOptionId);
		if (btn) {
			btn.checked = true;
		}
	}

	updateButtons();
}

// notification that an item has changed
function itemChanged()
{
	updateButtons();
	return true;
}

// update state of buttons
function updateButtons()
{
	var btn = self.document.getElementById('btnOK');
	
	btn.disabled = (currOptionId == 'default');
}

function getCurrForm()
{
	return self.document.getElementById("form_" + currOptionId);
}

function btnOK()
{
	// find current form
	var form = getCurrForm();
	if (form && formIsValid()) {
		if (wizardMode == 'model') {
			// update model
			if (updateModel()) {
				window.close();
			}
		}
		else {
			// submit and save changes
			form.submit();
		}
	}
	
	return true;
}

function btnCancel()
{
	window.close();
	return true;
}

// test if current form is valid
function formIsValid()
{
	var form = getCurrForm();
	if (!form) return false;
	
	switch(currOptionId) {
	case 'ServiceMETRIC':
	case 'ServiceOTHER':
	case 'ProcessOTHER':
	case 'ProcessCOMPONENT':
	case 'OperationOTHER':
		if (form.ClassName.value == '') {
			alert('#(msg1)#');
			return false;
		}
		return true;
	case 'ServiceHL7':
	case 'OperationHL7':
		if (form.Name.value == '') {
			alert('#(msg2)#');
			return false;
		}
		return true;
	case 'ProcessHL7ROUTER':
		if (form.Name.value == '') {
			alert('#(msg2)#');
			return false;
		}
		if (form.RuleName.value == '') {
			alert('#(msg7)#');
			return false;
		}
		return true;
	}
	
	return false;
}

// update the model that invoked us
function updateModel()
{
	var form = getCurrForm();
	if (!form) return false;

	// data needed to update model
	var hostType = null;
	var name = null;
	var clsName = null;
	var attrBag = new Object();
	var settings = new Array();  // array of setting: name,target,value

	switch(currOptionId) {
	case 'ServiceMETRIC':
		hostType = 'service';
		name = form.Name.value;
		clsName = form.ClassName.value;

		// call interval
		var item = new Object();
		item.Name = 'CallInterval';
		item.Target = 'Adapter'
		item.Value = form.CallInterval.value;
		settings[settings.length] = item;
		break;
	case 'ServiceOTHER':
		hostType = 'service';
		name = form.Name.value;
		clsName = form.ClassName.value;
		break;

	case 'ProcessOTHER':
	case 'ProcessCOMPONENT':
		hostType = 'process';
		name = form.Name.value;
		clsName = form.ClassName.value;
		break;
	case 'OperationOTHER':
		hostType = 'operation';
		name = form.Name.value;
		clsName = form.ClassName.value;
		break;

	case 'ProcessHL7ROUTER':
		hostType = 'process';
		name = form.Name.value;
		clsName = 'EnsLib.HL7.MsgRouter.RoutingEngine';

		// call interval
		var item = new Object();
		item.Name = 'BusinessRuleName';
		item.Target = 'Host'
		item.Value = form.RuleName.value;
		settings[settings.length] = item;
		break;

	case 'ServiceHL7':
		hostType = 'service';
		name = form.Name.value;
		// get radio value
		for (var n = 0; n < form.ClassName.length; n++) {
			if (form.ClassName[n].checked) {
				clsName = form.ClassName[n].value;
				break;
			}
		}
		// target
		var item = new Object();
		item.Name = 'TargetConfigNames';
		item.Target = 'Host'
		item.Value = form.TargetName.value;
		settings[settings.length] = item;
		break;
	case 'OperationHL7':
		hostType = 'operation';
		name = form.Name.value;
		// get radio value
		for (var n = 0; n < form.ClassName.length; n++) {
			if (form.ClassName[n].checked) {
				clsName = form.ClassName[n].value;
				break;
			}
		}
		break;
	}
	
	if (!hostType) {
		alert('#(msg3)#');
		return false;
	}
	if (!name) {
		alert('#(msg4)#');
		return false;
	}
	if (!clsName) {
		alert('#(msg5)#');
		return false;
	}

	// general properties
	if (form.Category && form.Category.value != '') {
		attrBag['Category'] = form.Category.value;
	}
	if (form.Comment && form.Comment.value != '') {
		attrBag['Comment'] = form.Comment.value;
	}

	if (window.opener && window.opener.addHost) {
		var key = window.opener.addHost(name,hostType,clsName,attrBag);
		for (var n = 0; n != settings.length; n++) {
			var bag = new Object();
			bag.Name = settings[n].Name;
			bag.Target = settings[n].Target;
			window.opener.addSetting(key,settings[n].Value,bag);
		}
	}
	else {
		alert('#(msg6)#');
		return false;
	}

	return true;
}

</script>
	>
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawBODY">
<Description><![CDATA[
Draw the BODY of the wizard pane]]></Description>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// test if we should close this window
	If $G(%request.Data("$CLOSEWINDOW",1)) {
	&html<<script language="javascript">
	if (window.opener) {
		// refresh opener
		window.opener.top.document.location.reload();
	}
	window.close();
	</script></body></html>>
		Quit $$$OK
	}

	// get page ID values
	Merge tID = pInstance.IDValues
	
	// $ID1: Name of Production
	// $ID2: Type of Host

	Set tProdId = $G(tID(1))
	Set tHostType = $G(tID(2),"Service")
	
	// make sure host type used initial cap!
	Set $E(tHostType) = $ZCVT($E(tHostType),"U")

	// mode is "model" if we are called from Model page
	// else assume we are called from Config page
	Set tWizardMode = $G(%request.Data("MODE",1))

	Set tOptionId = $G(%request.Data("$OptionId",1),"default")

	Set:tProdId'="" tProduction = ##class(Ens.Config.Production).%OpenId(tProdId)
	If '$IsObject($G(tProduction)) {
		&html<#($ZCVT($$$FormatText($$$Text("Unable to open production object: %1"),tProdId),"O","HTML"))#>
		Quit $$$OK
	}
	&html<<script language="javascript">
var currOptionId = "#(tOptionId)#";
	</script>>

	Set HostTitle("Service") = $$$Text("Business Service Wizard")
	Set HostTitle("Operation") = $$$Text("Business Operation Wizard")
	Set HostTitle("Process") = $$$Text("Business Process Wizard")

	Set HostType("Service") = $$$Text("Business Service")
	Set HostType("Operation") = $$$Text("Business Operation")
	Set HostType("Process") = $$$Text("Business Process")
	Set tUnknown = $$$Text("UNKNOWN")
	//Set tHostTitle = $Case(tHostType,"Service":"Business Service","Operation":"Business Operation","Process":"Business Process",:"UNKNOWN")
	If $G(HostTitle(tHostType)) '= "" Set tTitle = HostTitle(tHostType)
	Else  Set tTitle = tUnknown
	If $G(HostType(tHostType)) '= "" Set tHostTitle = HostType(tHostType)
	Else  Set tHostTitle = tUnknown
	Set tSubTitle = $$$FormatText($$$Text("The %1 lets you create a new %2 and add it to your production."),tTitle,tHostTitle)
	&html<<h1>#(tTitle)#</h1>>
	&html<<div class="Text1" style="margin:20px;">#(tSubTitle)#</div>>

	// build set of possible options
	// the 2 subscripts are joined to find the name of the method
	// that draws the actual page.
	Set tOptions("Service","HL7") = $$$TextHTML("HL7 Input")
	Set tOptions("Service","METRIC") = $$$TextHTML("Business Metric")
	Set tOptions("Service","OTHER") = $$$TextHTML("Other")
	Set tOptions("Operation","HL7") = $$$TextHTML("HL7 Output")
	Set tOptions("Operation","OTHER") = $$$TextHTML("Other")
	Set tOptions("Process","COMPONENT") = $$$TextHTML("Business Process Component")
	Set tOptions("Process","HL7ROUTER") = $$$TextHTML("HL7 Message Router")
	Set tOptions("Process","OTHER") = $$$TextHTML("Other")

	// show choices
	Set tPrompt = $$$FormatText($$$Text("What kind of %1 do you wish to create?"),tHostTitle)
	&html<<div class="Text1" style="margin:20px;">#(tPrompt)#</div>>

	&html<<div class="RadioBtns">>
	Set key = $O(tOptions(tHostType,""))
	While (key '= "") {
		Set id = tHostType_key
		&html<<input type="radio" id="Option_#(id)#" name="$Option" #($S(tOptionId=id:"checked",1:""))# onclick="selectOption('#(id)#');"><span onclick="selectOption('#(id)#');">#(tOptions(tHostType,key))#</span>>
		Set key = $O(tOptions(tHostType,key))
	}
	&html<</div>>

	// show set of hidden divs, each with one option
	Set key = $O(tOptions(tHostType,""))
	While (key '= "") {
		Set id = tHostType_key
		&html<<div class="optionDiv" style="#($S(tOptionId=id:"",1:"display:none;"))#" id="#(id)#">>

		// each div is a form to prevent collision of submitted values
		&html<<form id="form_#(id)#">>
	
		&html<<input type="hidden" name="$OptionId" value="#(id)#">>
		&html<<input type="hidden" name="$ID1" value="#($ZCVT(tProdId,"O","HTML"))#">>
		&html<<input type="hidden" name="$ID2" value="#($ZCVT(tHostType,"O","HTML"))#">>
	
		// make sure submit comes back to this class as a Save
		&html<<input type="hidden" name="$CLASS" value="#(..%ClassName(1))#">>
		&html<<input type="hidden" name="$AUTOFORM_SAVE" value="1">>

		#; JMD413
		If ((tOptionId=id) && $D(%errorMessage)) {
			&html<<div class="ErrorBox">#($ZCVT(%errorMessage,"O","HTML"))#</div>>
		}

		// dispatch to local method to display tab for this option
		Do $zobjmethod(%this,tHostType_key,tProduction)

		&html<</form>>

		&html<</div>>
		Set key = $O(tOptions(tHostType,key))
	}
	
	// default tab to hold space
	Set lblmsg = $$$TextHTML("Select one of the options above...")
	&html<<div class="optionDiv" style="#($S(tOptionId="default":"",1:"display:none;"))#" id="default"><i>#(lblmsg)#</i></div>>

	// buttons
	Set cmdOK = $$$TextHTML(" OK ")
	Set cmdCancel = $$$TextHTML("Cancel")
	&html<<div class="btnDiv">
	<input type="button" id="btnOK" #($S(tOptionId="default":"disabled",1:""))# value='#(cmdOK)#' onclick="btnOK();">
	&nbsp;
	<input type="button" id="btnCancel" value='#(cmdCancel)#' onclick="btnCancel();">
	</div>>

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SubmitServiceHL7">
<Description><![CDATA[
Submit new HL7 service]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// add new item to production
	Set tSC = ..AddNewItem(production, .item)
	If $$$ISOK(tSC) {
		// apply settings
		Set setting = ##class(Ens.Config.Setting).%New()
		Set setting.Target = "Host"
		Set setting.Name = "TargetConfigNames"
		Set setting.Value = $G(%request.Data("TargetName",1))
		Do item.Settings.Insert(setting)

		// remember Target Name
		Set %session.Data("TargetConfigNames") = $G(%request.Data("TargetName",1))
	}

	Quit tSC
]]></Implementation>
</Method>

<Method name="ServiceHL7">
<Description><![CDATA[
Display HL7 service tab]]></Description>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<Implementation><![CDATA[
	Set tHostType = "Service"
	Set tHostName = ""
	Set item = ##class(Ens.Config.Item).%New()
	Set item.Name = tHostName
	Do ..ShowHL7Form(production,item,tHostType,tHostName)
]]></Implementation>
</Method>

<Method name="SubmitServiceMETRIC">
<Description><![CDATA[
Submit new service]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// add new item to production
	Set tSC = ..AddNewItem(production, .item)
	If $$$ISOK(tSC) {
		// apply settings
		Set setting = ##class(Ens.Config.Setting).%New()
		Set setting.Name = "CallInterval"
		Set setting.Target = "Adapter"
		Set setting.Value = +$G(%request.Data("CallInterval",1),5)
		Do item.Settings.Insert(setting)
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ServiceMETRIC">
<Description><![CDATA[
Display METRIC service tab]]></Description>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<Implementation><![CDATA[
	Set tHostType = "Metric"
	Set tHostName = ""
	Set item = ##class(Ens.Config.Item).%New()
	Set item.Name = tHostName
	Do ..ShowAddHostForm(production,item,tHostType,tHostName)
]]></Implementation>
</Method>

<Method name="SubmitServiceOTHER">
<Description><![CDATA[
Submit new service]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// add new item to production
	Set tSC = ..AddNewItem(production, .item)
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="ServiceOTHER">
<Description><![CDATA[
Display Other service tab]]></Description>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<Implementation><![CDATA[
	Set tHostType = "Service"
	Set tHostName = ""
	Set item = ##class(Ens.Config.Item).%New()
	Set item.Name = tHostName
	Do ..ShowAddHostForm(production,item,tHostType,tHostName)
]]></Implementation>
</Method>

<Method name="SubmitProcessOTHER">
<Description><![CDATA[
Submit new process]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// add new item to production
	Quit ..AddNewItem(production, .item)
]]></Implementation>
</Method>

<Method name="SubmitProcessCOMPONENT">
<Description><![CDATA[
Submit new Component process]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// add new item to production
	Quit ..AddNewItem(production, .item)
]]></Implementation>
</Method>

<Method name="ProcessOTHER">
<Description><![CDATA[
Display Other process tab]]></Description>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<Implementation><![CDATA[
	Set tHostType = "Process"
	Set tHostName = ""
	Set item = ##class(Ens.Config.Item).%New()
	Set item.Name = tHostName
	Do ..ShowAddHostForm(production,item,tHostType,tHostName)
]]></Implementation>
</Method>

<Method name="ProcessCOMPONENT">
<Description><![CDATA[
Display COMPONENT process tab]]></Description>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<Implementation><![CDATA[
	Set tHostType = "Process"
	Set tHostName = ""
	Set item = ##class(Ens.Config.Item).%New()
	Set item.Name = tHostName
	Do ..ShowAddHostForm(production,item,tHostType,tHostName,"component")
]]></Implementation>
</Method>

<Method name="SubmitProcessHL7ROUTER">
<Description><![CDATA[
Submit new HL7 Msg routing process]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// find the package name
	Set tPackage = production.Name
	Set tPackage = $p(tPackage,".",1,$l(tPackage,".")-1)
	// add new item to production
	Set tSC = ..AddNewItem(production, .item)
	If $$$ISOK(tSC) {
		// apply settings
		Set setting = ##class(Ens.Config.Setting).%New()
		Set setting.Name = "BusinessRuleName"
		Set setting.Target = "Host"
		Set setting.Value = tPackage_"."_$G(%request.Data("RuleName",1))
		Do item.Settings.Insert(setting)
		// add rule
		Set tRoutingRule = ##class(Ens.Rule.Router.RoutingRule).%New()
		Set tRoutingRule.HostClass = tPackage
		Set tRoutingRule.Name = $G(%request.Data("RuleName",1))
		Set tRoutingRule.ContextClass = "EnsLib.HL7.MsgRouter.RoutingEngine"
		Set tRoutingRule.Source = "HL7FileService"
		Set tRoutingRule.MsgClass = "EnsLib.HL7.Message"
		Set tSC = tRoutingRule.%Save()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ProcessHL7ROUTER">
<Description><![CDATA[
Display Message Router process tab]]></Description>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<Implementation><![CDATA[
	Set tHostType = "Process"
	Set tHostName = ""
	Set item = ##class(Ens.Config.Item).%New()
	Set item.Name = tHostName
	Do ..ShowHL7Form(production,item,tHostType,tHostName)
]]></Implementation>
</Method>

<Method name="SubmitOperationHL7">
<Description><![CDATA[
Submit new HL7 operation]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// add new item to production
	Set tSC = ..AddNewItem(production, .item)
	If $$$ISOK(tSC) {
		// apply settings
	}

	Quit tSC
]]></Implementation>
</Method>

<Method name="OperationHL7">
<Description><![CDATA[
Display HL7 operation tab]]></Description>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<Implementation><![CDATA[
	Set tHostType = "Operation"
	Set tHostName = ""
	Set item = ##class(Ens.Config.Item).%New()
	Set item.Name = tHostName
	Do ..ShowHL7Form(production,item,tHostType,tHostName)
]]></Implementation>
</Method>

<Method name="SubmitOperationOTHER">
<Description><![CDATA[
Submit new operation]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// add new item to production
	Quit ..AddNewItem(production, .item)
]]></Implementation>
</Method>

<Method name="OperationOTHER">
<Description><![CDATA[
Display Other operation tab]]></Description>
<FormalSpec>production:Ens.Config.Production</FormalSpec>
<Implementation><![CDATA[
	Set tHostType = "Operation"
	Set tHostName = ""
	Set item = ##class(Ens.Config.Item).%New()
	Set item.Name = tHostName
	Do ..ShowAddHostForm(production,item,tHostType,tHostName)
]]></Implementation>
</Method>

<Method name="AddNewItem">
<Description><![CDATA[
Generic method for adding a new host]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production,*item:Ens.Config.Item</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// add new item to production
	Set item = ##class(Ens.Config.Item).%New()
	Set item.Name = $G(%request.Data("Name",1))
	Set item.ClassName = $G(%request.Data("ClassName",1))
	Set item.Category = $G(%request.Data("Category",1))
	Set item.Comment = $G(%request.Data("Comment",1))
	Set:""=item.Name item.Name=item.ClassName
	Do production.Items.Insert(item)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ShowAddHostForm">
<Description><![CDATA[
This is used to show the OTHER tab for various host types.
This was copied from EnsConfigProperty.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production,item:Ens.Config.Item,pHostType:%String,pHostName:%String,pSubtype:%String="&quot;</FormalSpec>
<Implementation><![CDATA[
	Set lPleaseCorrect = $$$Text("please correct")
	Set lItem = $$$Text("item")
	Set lClass = $$$Text("Class")
	Set lThisitem = $$$Text("this item")

	If (pHostType = "Class") {
		Set tMsg1 = $$$FormatText($$$Text("Change Business Class for %1"), $S(item.Name=lItem:item,1:item.Name))
		Set tMsg2 = "<b>"_$$$FormatText($$$Text("Change the Business Class associated with %1 by selecting a class and pressing OK."),$S(item.Name="":lThisitem,1:item.Name))_"</b><br>"	
		Set tMsg3 = lClass
	}
	ElseIf (pHostType = "") {
		// attempt to add a bogus class
		Set tMsg1 = $$$Text("Change Item")
		Set tMsg2 = $$$Text("There is an error with the class associated with this item; either it does not exist or it is not compiled.")_"<br>" _
		$$$Text("You can either correct this using Studio or select a new class for this item.")
		Set tMsg3 = lClass
	}
	Else {
		If (pSubtype = "component") {
			Set tMsg1 = $$$Text("Add Business Process Component")
			Set tMsg2 = $$$Text("Add a new Business Process Component to this production.")
			Set tMsg3 = $$$Text("Component")
		}
		Else {
			Set tMsg1 = $$$FormatText($$$Text("Add Business %1"), pHostType)
			Set tMsg2 = $$$FormatText($$$Text("Add a new Business %1 to this production by selecting a Business %2 class,"), pHostType,pHostType)
			Set tMsg2 = tMsg2 _ "<br>" _ $$$Text("entering 'optional', and pressing OK.")
			Set tMsg3 = pHostType _ lClass
		}
		Set tMsg2 = tMsg2 _ "<br>"_$$$Text("Category is an optional value that allows you to selectively view different sets of items.")
	}

	Set helpName = $$$Text("Logical name used for this item within the production.")
	Set helpCategory = $$$Text("Optional Category name used to group related items within a diagram.")
	Set helpComment = $$$Text("Optional comment.")
	Set helpCallInterval = $$$Text("Specifies how frequently (in seconds) this Business Metric should recalculate its values.")

	&html<<table class="formtable" border="0" cellspacing="5" cellpadding="0">>
	
	Set style = "ok"
	Set err = ""
	If ($D(%errors("item.Name"))) {
		Set style = "error"
		Set err = "<span class=""error"">[" _ %errors("item.Name","msg") _ "&mdash;"_lPleaseCorrect_".]</span>"
		Set value = %errors("item.Name","value")
	}

	&html<<tr><td class="label">&nbsp;</td>
			<td style="font-size: 0.8em;">#(tMsg2)#&nbsp;</td></tr>>

	// class
	// provide drop down list of available classes
	Set tRS = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:SubclassOf")
	
	If ((pHostType = "Class") || (pHostType = "")) {
		// show all hosts
		Set tSuper = "Ens.Host"
	}
	Else {
		Set tSuper = "Ens.Business" _ pHostType
	}
	
	Do tRS.Execute(tSuper)

	&html<<tr><td class="label" nowrap>#(tMsg3)#:</td>
		<td><select name="ClassName" class="ok" onchange="itemChanged(this,false);"><option value="" selected></option>>

	While (tRS.Next()) { Set cls = tRS.Data("Name")  Continue:'##class(%Dictionary.CompiledClass).%ExistsId(cls)
		Set cdef = ##class(%Dictionary.ClassDefinition).%OpenId(cls)
		If ($IsObject(cdef) && (cdef.Abstract '= 1)) {
			If (pSubtype = "component") {
				#; filter out non-components
				If ('..IsComponent(cls)) {
					Continue
				}
			}
			&html<<option value="#(cls)#" #($S(cls=pHostName:"selected",1:""))#>#(cls)#</option>>
		}
	}
	Set tRS = ""

	&html<</select></td></tr>>

	// Name
	&html<<tr><td class="label" title="#(helpName)#" nowrap>#($$$Text("Name"))#:</td>
			<td><input class="#(style)#" type="text" name="Name" size="50" 
					value="#(..EscapeHTML(item.Name))#" 
					onchange="itemChanged(this,false);" 
					onkeypress="itemChanged(this,false);">&nbsp;#(err)#</td></tr>>

	// Category
	&html<<tr><td class="label" title="#(helpCategory)#" nowrap>#($$$Text("Category"))#:</td>
			<td><input class="#(style)#" type="text" name="Category" size="50" 
					value="#(..EscapeHTML(item.Category))#" 
					onchange="itemChanged(this,false);" 
					onkeypress="itemChanged(this,false);"></td></tr>>

	// Comment
	&html<<tr><td class="label" title="#(helpComment)#" nowrap>#($$$Text("Comment"))#:</td>
			<td><input class="#(style)#" type="text" name="Comment" size="50" 
					value="#(..EscapeHTML(item.Comment))#" 
					onchange="itemChanged(this,false);" 
					onkeypress="itemChanged(this,false);"></td></tr>>
					
	If (pHostType = "Metric") {
		// Call Interval
		&html<<tr><td class="label" title="#(helpCallInterval)#" nowrap>#($$$Text("Call Interval"))#:</td>
				<td><input class="#(style)#" type="text" name="CallInterval" size="5" 
						value="5" 
						onchange="itemChanged(this,false);" 
						onkeypress="itemChanged(this,false);"></td></tr>>
	}

	&html<<tr><td colspan="2"><hr></td></tr>>
	&html<</table>>
]]></Implementation>
</Method>

<Method name="ShowHL7Form">
<Description><![CDATA[
Form for adding new HL7 service or operation]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>production:Ens.Config.Production,item:Ens.Config.Item,pHostType:%String,pHostName:%String</FormalSpec>
<Implementation><![CDATA[
	Set tHostType = pHostType
	Set tHostName = ""
	Set item = ##class(Ens.Config.Item).%New()
	Set item.Name = tHostName
	Set item.ClassName = ""

	If (pHostType = "Process") {
		Set tMsg = $$$Text("Enter settings for this HL7 Message Router.")
	}
	Else {
		Set tMsg = $$$FormatText($$$Text("Enter settings for this HL7 %1."), tHostType)
	}
	Set tMsg3 = ""

	Set tInputType = $$$Text("Input type:")
	Set tOutputType = $$$Text("Output type:")
	Set tRouterType = $$$Text("Router Class:")

	Set helpName = $$$Text("Logical name used for this item within the production.")
	Set helpRuleName = $$$Text("Name of the Message Routing Rule that determines how message are routed.")

	Set helpInput = $$$Text("Specifies how incoming messages are received.")
	Set helpOutput = $$$Text("Specifies how outgoing messages are sent.")
	Set helpProcessClass = $$$Text("(Readonly) Name of the Message Routing class.")
	Set helpCategory = $$$Text("Optional Category name used to group related items within a diagram.")

	Set helpTarget = $$$Text("Name of the item (process or operation) to which incoming messages should be sent.")

	&html<<table class="formtable" border="0" cellspacing="5" cellpadding="0">>
	
	Set style = "ok"
	Set err = ""
	If ($D(%errors("item.Name"))) {
		Set style = "error"
		Set err = "<span class=""error"">[" _ %errors("item.Name","msg") _ "&mdash;"_lPleaseCorrect_".]</span>"
		Set value = %errors("item.Name","value")
	}
	Set tOpt(1) = $$$Text("TCP")
	Set tOpt(2) = $$$Text("File")
	Set tOpt(3) = $$$Text("FTP")
	Set tOpt(4) = $$$Text("HTTP")
	&html<<tr><td class="label">&nbsp;</td>
			<td style="font-size: 0.8em;">#(tMsg)#&nbsp;</td></tr>>

	// pick host class based in/out type
	If (tHostType = "Service") {
		&html<<tr><td class="label" title="#(helpInput)#" nowrap>#(tInputType)#</td>
			<td class="AdapterType">
			<input type="radio" name="ClassName" checked value="EnsLib.HL7.Service.TCPService">#(tOpt(1))#
			<input type="radio" name="ClassName" value="EnsLib.HL7.Service.FileService">#(tOpt(2))#
			<input type="radio" name="ClassName" value="EnsLib.HL7.Service.FTPService">#(tOpt(3))#
			<input type="radio" name="ClassName" value="EnsLib.HL7.Service.HTTPService">#(tOpt(4))#
			</td></tr>>
	}
	ElseIf (tHostType = "Operation") {
		&html<<tr><td class="label" title="#(helpOutput)#" nowrap>#(tOutputType)#</td>
			<td class="AdapterType">
			<input type="radio" name="ClassName" checked value="EnsLib.HL7.Operation.TCPOperation">#(tOpt(1))#
			<input type="radio" name="ClassName" value="EnsLib.HL7.Operation.FileOperation">#(tOpt(2))#
			<input type="radio" name="ClassName" value="EnsLib.HL7.Operation.FTPOperation">#(tOpt(3))#
			<input type="radio" name="ClassName" value="EnsLib.HL7.Operation.HTTPOperation">#(tOpt(4))#
			</td></tr>>
	}
	ElseIf (tHostType = "Process") {
		&html<<tr><td class="label" title="#(helpProcessClass)#" nowrap>#(tRouterType)#</td>
			<td>
			<input type="text" name="ClassName" readonly value="EnsLib.HL7.MsgRouter.RoutingEngine" size="40">
			</td></tr>>
	}

	// Host Name
	&html<<tr><td class="label" title="#(helpName)#" nowrap>#($$$Text("Name"))#:</td>
			<td><input class="#(style)#" type="text" name="Name" size="50" 
					value="#(..EscapeHTML(item.Name))#" 
					onchange="itemChanged(this,false);" 
					onkeypress="itemChanged(this,false);">&nbsp;#(err)#</td></tr>>


	If (tHostType = "Service") {
		// TargetConfig
		Set err = ""
		&html<<tr><td class="label" title="#(helpTarget)#" nowrap>#($$$Text("Target Name"))#:</td>
				<td><input class="#(style)#" type="text" name="TargetName" size="50" 
						value="#($G(%session.Data("TargetConfigNames")))#" 
						onchange="itemChanged(this,false);" 
						onkeypress="itemChanged(this,false);">&nbsp;#(err)#</td></tr>>
	}
	If (tHostType = "Process") {
		// Rule Name
		Set err = ""
		&html<<tr><td class="label" title="#(helpRuleName)#" nowrap>#($$$Text("Routing Rule Name"))#:</td>
				<td><input class="#(style)#" type="text" name="RuleName" size="50" 
						value="" 
						onchange="itemChanged(this,false);" 
						onkeypress="itemChanged(this,false);">&nbsp;#(err)#</td></tr>>
	}

	// Category
	&html<<tr><td class="label" title="#(helpCategory)#" nowrap>#($$$Text("Category"))#:</td>
			<td><input class="#(style)#" type="text" name="Category" size="50" 
					value="#(..EscapeHTML(item.Category))#" 
					onchange="itemChanged(this,false);" 
					onkeypress="itemChanged(this,false);"></td></tr>>

	&html<<tr><td colspan="2"><hr></td></tr>>
	&html<</table>>
]]></Implementation>
</Method>

<Method name="EscapeHTML">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>text</FormalSpec>
<Implementation><![CDATA[$ZCVT(text,"O","HTML")
]]></Implementation>
</Method>

<Method name="IsComponent">
<Description><![CDATA[
Given a business process class name, return if it is a component]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set tRet = 0
	Set $ZT = "Trap"
	Do {
		Set tRet = $zobjclassmethod(pClass,"IsComponent")
	} While(0)

Exit
	Quit tRet
Trap
	#; the error is most likely that this host does not
	#; support the IsComponent API.
 	Set $ZT=""
	Set tRet = 0
	Goto Exit
]]></Implementation>
</Method>
</Class>
</Export>