<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.CSP.FATRegraComercial">
<ClassType/>
<IncludeCode>VARConst,INConst,FATConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page</Super>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	$$$VAR
	#dim %request as %CSP.Request
	#dim %response as %CSP.Response
	quit:$$$ISERR(..validaSessao(1)) %response
	set job = %session.SessionId
	set method = $get(%request.Data("method",1))
	Xecute "do .."_method_"()"
	Quit $$$OK]]></Implementation>
</Method>

<Method name="recRegraTipo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	; Opções pendentes:
	; - getCobrarNumeroComponentesComposto
	; - getConfigDocumentacao
	; - getConfigGuia
	;
	set codRegra 	= $get(%request.Data("codRegra",1))
	set tipo 		= $get(%request.Data("tipo",1))
	set form = []
	set item = {}
	set item.itemType = "group"
	set item.caption = "Regra"
	set item.name = "regra"
	set item.cssClass = "second-group"

	set item.colCount = 12
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		if $$$FATRegraComercialTipodaRegra(objRegra) '= tipo set codRegra=""
	}
	;
	if tipo="AJUSTEPRECO" set retorno = ..getAjustePreco(codRegra) 
	if tipo="ALTERARRECEBEDOR" set retorno = ..getAlterarRecebedor(codRegra) 
	if tipo="AUTORIZACAO" set retorno = ..getAutorizacao(codRegra) 
	if tipo="CALCULOPRECO" set retorno = ..getCalculoPreco(codRegra) 
	if tipo="CALCULOQTDE" set retorno = ..getCalculoQuantidade(codRegra) 
	if tipo="CLASSIFICACAOITEM" set retorno = ..getClassificacaoItem(codRegra) 
	if tipo="COBRANCAPARCIAL" set retorno = ..getCobrancaParcial(codRegra) 
	if tipo="COBRARITEMCOMPOSTO" set retorno = ..getCobrarItemComposto(codRegra) 
	if tipo="COBRARITEMMESMAEXEC" set retorno = ..getCobrarItemMesmaExecucao(codRegra) 
	if tipo="COBRARNUMCOMPCOMPOSTO" set retorno = ..getCobrarNumeroComponentesComposto(codRegra) 
	if tipo="CONFIGDOCUMENTACAO" set retorno = ..getConfigDocumentacao(codRegra) 
	if tipo="CONFIGGUIA" set retorno = ..getConfigGuia(codRegra) 
	if tipo="COTAQTDE" set retorno = ..getCotaQuantidade(codRegra) 
	if tipo="COTAVALOR" set retorno = ..getCotaValor(codRegra) 
	if tipo="DESCPROGRESSIVO" set retorno = ..getDescontoProgressivo(codRegra) 
	if tipo="DESDOBRE" set retorno = ..getDesdobre(codRegra) 
	if tipo="ELEGIBILIDADE" set retorno = ..getElegibilidade(codRegra,"É Elegível?") 
	if tipo="FRANQUIA" set retorno = ..getFranquia(codRegra) 
	if tipo="IDENTIFICADORRECEBEDOR" set retorno = ..getIdentificadorRecebedor(codRegra) 
	if tipo="IGNORAASSOCIACAO" set retorno = ..getIgnoraAssociacao(codRegra) 
	if tipo="LIMITEDESCONTO" set retorno = ..getLimiteDesconto(codRegra) 
	if tipo="LIMITETEMPO" set retorno = ..getLimiteTempo(codRegra) 
	if tipo="OBRIGNUMCREDENCIADO" set retorno = ..getObrigNumeroCredenciado(codRegra) 
	if tipo="OBRIGNUMGUIA" set retorno = ..getObrigatorioNumeroGuia(codRegra) 
	if tipo="PGTOPARCIAL" set retorno = ..getPagamentoParcial(codRegra) 
	if tipo="PRAZOAUT" set retorno = ..getPrazoAutorizacao(codRegra) 
	if tipo="PRECOBASE" set retorno = ..getPrecoBase(codRegra) 
	if tipo="REDEFINIRCODIGO" set retorno = ..getRedefinirCodigo(codRegra) 
	if tipo="STATUSCOBRANCA" set retorno = ..getStatusCobranca(codRegra) 
	if tipo="TIPOATENDIMENTO" set retorno = ..getTipoAtendimento(codRegra)
	if tipo="TROCAITEMLIMTEMPO" set retorno = ..getTrocaItemLimiteTempo(codRegra) 
	if tipo="VALIDADETIPOSOLICITANTE" set retorno = ..getValidadeTipoSolicitante(codRegra) 
	set formData 	= retorno.formData
	set help	 	= retorno.help
	set item.items = retorno.items
	do form.%Push(item)
	;
	set retorno = {}
	set retorno.items = form
	set retorno.formData = formData
	set retorno.helpText = help
	;
	; Recupera regras aplicadas diretamente em acordos
	set pontoAplicacao = []
	set select = "Select CodigodoAcordoComercial,CodigodoConvenio from FATAcordoComercialRegraAcordo where company=0 and CodigodaRegraComercial = '"_codRegra_"'"
	set rs = ##class(%SQL.Statement).%ExecDirect("",.select)
	while(rs.%Next()){
		set linha={}
		set linha.acordoComercial 	= rs.%Get("CodigodoAcordoComercial")
		set objAcordoComercial		= $get(^FATAcordoComercial(YM,linha.acordoComercial,1))
		set linha.acordoComercial	= "("_linha.acordoComercial_") "_$$$FATAcordoComercialNome(objAcordoComercial)
		
		set convenio			 	= rs.%Get("CodigodoConvenio")
		if convenio="T" set convenio = "Todos os convênios"
		else  set convenio = "convênio - "_$$GetOrganizacaoNome^VARSQL(convenio)
		set linha.ponto   			= "Aplicado no acordo comercial ("_convenio_")"
		do pontoAplicacao.%Push(linha)
	}

	set select = "Select CodigodoAcordoComercial,CodigodoConvenio,CodigodaTabelaComercial from FATAcordoComercialRegraTabela where company=0 and CodigodaRegraComercial = '"_codRegra_"'"
	set rs = ##class(%SQL.Statement).%ExecDirect("",.select)
	while(rs.%Next()){
		set linha={}
		set linha.acordoComercial 	= rs.%Get("CodigodoAcordoComercial")
		set objAcordoComercial		= $get(^FATAcordoComercial(YM,linha.acordoComercial,1))
		set linha.acordoComercial	= "("_linha.acordoComercial_") "_$$$FATAcordoComercialNome(objAcordoComercial)
		
		set tabela					= rs.%Get("CodigodaTabelaComercial")
		set convenio			 	= rs.%Get("CodigodoConvenio")
		
		if convenio="T" set convenio = "Todos os convênios"
		else  set convenio = "convênio - "_$$GetOrganizacaoNome^VARSQL(convenio)
		;
		set obj 		= $get(^FATTabelaComercial(0,tabela,1))
		set tabela	 	= $$$FATTabelaComercialNome(obj)
		;		
		set linha.ponto   			= "Aplicado na tabela comercial "_tabela_" ("_convenio_")"
		do pontoAplicacao.%Push(linha)
	}

	set select = "Select CodigodoAcordoComercial,CodigodoConvenio,CodigodaTabelaComercial,CodigodaCategoriadoItem from FATAcordoComercialRegraCat where company=0 and CodigodaRegraComercial = '"_codRegra_"'"
	set rs = ##class(%SQL.Statement).%ExecDirect("",.select)
	while(rs.%Next()){
		set linha={}
		set linha.acordoComercial 	= rs.%Get("CodigodoAcordoComercial")
		set objAcordoComercial		= $get(^FATAcordoComercial(YM,linha.acordoComercial,1))
		set linha.acordoComercial	= "("_linha.acordoComercial_") "_$$$FATAcordoComercialNome(objAcordoComercial)
		
		set categoria				= rs.%Get("CodigodaCategoriadoItem")
		set tabela					= rs.%Get("CodigodaTabelaComercial")
		set convenio			 	= rs.%Get("CodigodoConvenio")
		
		if convenio="T" set convenio = "Todos os convênios"
		else  set convenio = "convênio - "_$$GetOrganizacaoNome^VARSQL(convenio)
		;
		set objItem = $get(^FATTabelaComercialCategoria(0,tabela,categoria,1))
		set categoria = $$$FATTabelaComercialCategoriaDescricao(objItem)
		;		
		set obj 		= $get(^FATTabelaComercial(0,tabela,1))
		set tabela	 	= $$$FATTabelaComercialNome(obj)
		;
		set linha.ponto   			= "Aplicado na categoria "_categoria_" da tabela comercial "_tabela_" ("_convenio_")"
		do pontoAplicacao.%Push(linha)
	}

	set select = "Select CodigodoAcordoComercial,CodigodoConvenio,CodigodaTabelaComercial,CodigodoItem from FATAcordoComercialRegraItem where company=0 and CodigodaRegraComercial = '"_codRegra_"'"
	set rs = ##class(%SQL.Statement).%ExecDirect("",.select)
	while(rs.%Next()){
		set linha={}
		set linha.acordoComercial 	= rs.%Get("CodigodoAcordoComercial")
		set objAcordoComercial		= $get(^FATAcordoComercial(YM,linha.acordoComercial,1))
		set linha.acordoComercial	= "("_linha.acordoComercial_") "_$$$FATAcordoComercialNome(objAcordoComercial)
		
		set item					= rs.%Get("CodigodoItem")
		set tabela					= rs.%Get("CodigodaTabelaComercial")
		set convenio			 	= rs.%Get("CodigodoConvenio")
		
		if convenio="T" set convenio = "Todos os convênios"
		else  set convenio = "convênio - "_$$GetOrganizacaoNome^VARSQL(convenio)
		;
		set obj 		= $get(^FATTabelaComercial(0,tabela,1))
		set tabela	= $$$FATTabelaComercialNome(obj)
		Set versao	= $$$FATTabelaComercialVersaoAtualdaTabeladeIten(obj)
		;
		set objItem = $get(^FATTabelaComercialItem(0,tabela,versao,item,1))
		set xItem = "("_item_") "_$$$FATTabelaComercialItemDescricaodoItem(objItem)
		;
		set linha.ponto   			= "Aplicado no item "_xItem_" da tabela comercial "_tabela_" ("_convenio_")"
		do pontoAplicacao.%Push(linha)
	}
	set retorno.pontoAplicacao = pontoAplicacao
	;
	write $replace($replace(retorno.%ToJSON(),"""'",""),"'""","")
	quit]]></Implementation>
</Method>

<Method name="getAjustePreco">
<Description><![CDATA[Ajuste Preço - Acréscimo ou desconto sobre o valor.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra="",nomeAjuste1="Tipo de Ajuste",nomeAjuste2="Percentual (%)"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	;
	set linha = {}
	set linha.colSpan	= 12
	set linha.dataField = "tipoAjuste"
	set label = {}
	set linha.colSpan	= 12
	set label.text = nomeAjuste1
	set linha.label = label
	set linha.editorType= "dxRadioGroup"
	; FATREGRATIPOAJUSTE
	set linha.editorOptions = ..getEditorOptionsRadioGroup("Desconto,Acréscimo","vertical")

	do objeto.%Push(linha)
	;
	set retorno = ..getPercentual(codRegra,nomeAjuste2)
	do objeto.%Push(retorno.items)
	set iterator = retorno.formData.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		do formData.%Set(indice,valor)
	}
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.tipoAjuste = $$$FATRegraComercialTipodeAjuste(objRegra)
	}
	if formData.tipoAjuste="" set formData.tipoAjuste="1"
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Ajuste Preço - Acréscimo ou desconto sobre o valor."
	quit retorno]]></Implementation>
</Method>

<Method name="getAlterarRecebedor">
<Description><![CDATA[Troca o recebedor de um item, de forma que ele é cobrado em uma fatura diferente. 
Poderá ser aplicado nos níveis Acordo, Tabela, Categoria, Item]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData = {}
	set linha = {}
	set linha.colSpan	= 12
	set linha.dataField = "recebedor"
	set label = {}
	set label.text = "Recebedor"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("Recebedor")
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.recebedor = $$$FATRegraComercialRecebedor(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Troca o recebedor de um item, de forma que ele é cobrado em uma fatura diferente."
	quit retorno]]></Implementation>
</Method>

<Method name="getAutorizacao">
<Description><![CDATA[; Definir se é ou não necessário obter autorização do convênio para realizar 
	; um determinado exame. Essa regra permite definir a obrigatoriedade de informar uma 
	; senha para um procedimento, impedindo a abertura se a senha não for preenchida. 
	; Também define qual o formato desta senha para evitar a digitação incorreta. 
	; Permitir criar script de condição de validação (obrigatório iniciar com determinadas 
	; letras ou algo do tipo)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.colSpan	= 12
	set linha.dataField = "senhaObrigatoria"
	set label = {}
	set label.text = "Senha Obrigatória?"
	set label.showColon = 0
	set linha.label = label
	set linha.editorType= "dxSwitch"
	set linha.editorOptions = ..getEditorOptionsSwitch()
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "mascara"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Máscara"
	set linha.label = label
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "minimoCaracteres"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Mínimo de caracteres"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(0,1000)
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "maximoCaracteres"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Máximo de caracteres"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(0,1000)
	do objeto.%Push(linha)
	;
	set linha = {}
	set linha.dataField = "aPartirDe"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Obrigatório a partir de"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("AreasAplicacao")
	do objeto.%Push(linha)
	;
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.senhaObrigatoria 	= $$$FATRegraComercialCampoObrigatorio(objRegra)
		set formData.mascara			= $$$FATRegraComercialMascaradeValidacaodoCampo(objRegra)
		set formData.minimoCaracteres	= +$$$FATRegraComercialMinimodeCaracteres(objRegra)
		set formData.maximoCaracteres	= +$$$FATRegraComercialMaximodeCaracteres(objRegra)
		set formData.aPartirDe			= $$$FATRegraComercialAplicavelaPartirdoModulo(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Definir se é ou não necessário obter autorização do convênio para realizar um determinado exame. Essa regra permite definir a obrigatoriedade de informar uma senha para um procedimento, impedindo a abertura se a senha não for preenchida. Também define qual o formato desta senha para evitar a digitação incorreta."
	quit retorno]]></Implementation>
</Method>

<Method name="getCalculoPreco">
<Description><![CDATA[; Altera o preço de um item através da aplicação de descontos ou acréscimos ou do cálculo 
	; através de fórmulas. 
	; Aplicado nos seguintes níveis: Acordo, Tabela, Coluna, Categoria, Item, Célula]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.tipoCalculo 		= $$$FATRegraComercialTipodeCalculopreco(objRegra)
	}
	if formData.tipoCalculo = "" set formData.tipoCalculo = "1"
	;
	set linha = {}
	set linha.colSpan = 12
	set linha.dataField = "tipoCalculo"
	set label = {}
	set label.text = "Tipo de Cálculo"
	set linha.label = label
	set linha.editorType= "dxRadioGroup"
	; FATREGRATIPOCALCPRECO
	set linha.editorOptions = ..getEditorOptionsRadioGroup("Preço Base,Percentual,Fórmula")
	set elementAttr = {}
	set elementAttr.ocultaExibe = "preco^percentual^formula"
	set linha.elementAttr = elementAttr
	do objeto.%Push(linha)
	;
	set formPreco = {}
	set formPreco.colSpan		= 12
	set formPreco.colCount		= 12
	set formPreco.visible		= $select(formData.tipoCalculo=1:1,1:0)
	set formPreco.itemType 		= "group"
	set formPreco.name			="preco"
	set formPreco.items			=..getPrecoBase(codRegra).items
	;
	set iterator = ..getPrecoBase(codRegra).formData.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		do formData.%Set(indice,valor)
	}
	
	do objeto.%Push(formPreco)
	;
	set formPercentual = {}
	set formPercentual.colSpan	= 12
	set formPercentual.colCount	= 12
	set formPercentual.visible	= $select(formData.tipoCalculo=2:1,1:0)
	set formPercentual.itemType = "group"
	set formPercentual.name		= "percentual"
	set formPercentual.items	= ..getAjustePreco(codRegra,"Tipo de Cálculo","Percentual (%)").items
	;
	set iterator = ..getAjustePreco(codRegra).formData.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		do formData.%Set(indice,valor)
	}
	do objeto.%Push(formPercentual)
	;
	set formFormula = {}
	set formFormula.colSpan		= 12
	set formFormula.colCount	= 12
	set formFormula.visible		= $select(formData.tipoCalculo=3:1,1:0)
	set formFormula.itemType 	= "group"
	set formFormula.name		= "formula"
	set formFormula.items		= ..getFormula(codRegra).items
	;
	set iterator = ..getFormula(codRegra).formData.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		do formData.%Set(indice,valor)
	}
	do objeto.%Push(formFormula)
	;
	;
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Altera o preço de um item através da aplicação de descontos ou acréscimos ou do cálculo através de fórmulas<br>Para uso de formulas, utilizar a palavra 'valor' para referenciar o valor do campo para o cálculo (<b>Ex: 0,54 / 1 * valor</b>)"
	quit retorno]]></Implementation>
</Method>

<Method name="getCalculoQuantidade">
<Description><![CDATA[Alterar a quantidade de um item com base em uma fórmula ou fixo]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData = {}
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.tipoCalculo 	= $$$FATRegraComercialTipodeCalculoquantidade(objRegra)
	}
	if formData.tipoCalculo="" set formData.tipoCalculo = 1
	;
	set linha = {}
	set linha.colSpan	= 12
	set linha.dataField = "tipoCalculo"
	set label = {}
	set label.text = "Tipo"
	set linha.label = label
	set linha.editorType= "dxRadioGroup"
	; FATREGRATIPOCALCQTDE
	set linha.editorOptions = ..getEditorOptionsRadioGroup("Quantidade Base,Fórmula")
	set elementAttr = {}
	set elementAttr.ocultaExibe = "quantidade^formula"
	set linha.elementAttr = elementAttr
	do objeto.%Push(linha)
	;
	set formPreco = {}
	set formPreco.colSpan		= 12
	set formPreco.colCount		= 12
	set formPreco.visible		= $select(formData.tipoCalculo=1:1,1:0)
	set formPreco.itemType 		= "group"
	set formPreco.name			="quantidade"
	set formPreco.items			=..getQuantidadeBase(codRegra).items
	;
	set iterator = ..getQuantidadeBase(codRegra).formData.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		do formData.%Set(indice,valor)
	}
	;
	do objeto.%Push(formPreco)
	;
	set formFormula = {}
	set formFormula.colSpan		= 12
	set formFormula.colCount	= 12
	set formFormula.visible		= $select(formData.tipoCalculo=2:1,1:0)
	set formFormula.itemType 	= "group"
	set formFormula.name		= "formula"
	set formFormula.items		= ..getFormula(codRegra).items
	;
	set iterator = ..getFormula(codRegra).formData.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		do formData.%Set(indice,valor)
	}
	;
	do objeto.%Push(formFormula)

	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Alterar a quantidade de um item com base em uma fórmula ou fixo<br>Para uso de formulas, utilizar a palavra 'valor' para referenciar o valor do campo para o cálculo (<b>Ex: 0,54 / 1 * valor</b>)"
	quit retorno]]></Implementation>
</Method>

<Method name="getClassificacaoItem">
<Description><![CDATA[Criar uma classificação arbitrária a ser utilizada na obtenção de um relatório.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "classificacao"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Classificação"
	set linha.label = label
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.classificacao 	= $$$FATRegraComercialClassificacaodoItem(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Criar uma classificação arbitrária a ser utilizada na obtenção de um relatório."
	quit retorno]]></Implementation>
</Method>

<Method name="getCobrancaParcial">
<Description><![CDATA[Definir se a requisição pode ou não ser cobrada parcialmente]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "cobrancaParcial"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Permitir cobrança parcial?"
	set label.showColon = 0
	set linha.label = label
	set linha.editorType= "dxSwitch"
	set linha.editorOptions = ..getEditorOptionsSwitch()
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.cobrancaParcial 	= +$$$FATRegraComercialPermitirCobrancaParcial(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Definir se a requisição pode ou não ser cobrada parcialmente."
	quit retorno]]></Implementation>
</Method>

<Method name="getCobrarItemComposto">
<Description><![CDATA[; Cobrar algum item - que pode ser um material ou um teste - que compõe um exame e cuja 
; execução ou utilização nem sempre ocorre (pois depende de algum outro resultado, como 
; por exemplo: contraste do exame RX de Abdome, Western Blot do Perfil de HIV).]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "itemINART"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Item Composto"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("INARTProcedimento")
	set elementAttr = {}
	set elementAttr.atualizaDataSource = "itemINARTComposto^procedimento^INARTProcedimentoComposto"
	set linha.elementAttr = elementAttr
	do objeto.%Push(linha)
	;
	set linha = {}
	set linha.dataField = "itemINARTComposto"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Cobrar itens do composto"
	set linha.label = label
	set linha.editorType= "dxTagBox"
	set linha.editorOptions = ..getEditorOptionsSelect("INARTProcedimentoComposto")
	set linha.editorOptions.disabled = 1
	do objeto.%Push(linha)

	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.itemINART 		= $$$FATRegraComercialCodigodoProduto(objRegra)
		set itensNaoInclusos	= $$$FATRegraComercialItensNaoInclusos(objRegra)
		set objItens = []
		for i=1:1:$length(itensNaoInclusos,";"){
			set item = $piece(itensNaoInclusos,";",i)
			if item="" continue
			do objItens.%Push(item)
		}
		set formData.itemINARTComposto	= objItens
		if formData.itemINARTComposto'="" set linha.editorOptions.disabled = 0
	}
	;
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Cobrar algum item - que pode ser um material ou um teste - que compõe um exame e cuja execução ou utilização nem sempre ocorre (pois depende de algum outro resultado, como por exemplo: contraste do exame RX de Abdome, Western Blot do Perfil de HIV)."
	quit retorno]]></Implementation>
</Method>

<Method name="getCobrarItemMesmaExecucao">
<Description><![CDATA[; Definir uma estratégia para cobrança de itens que são pedidos separadamente, mas 
; serão executados apenas uma vez. As opções possíveis são: Cobrar Todos, Cobrar o de Maior Valor,
	;  Cobrar o de Menor Valor. 
	; Exemplo: Em uma requisição foram solicitados os mesmos testes, sendo que um está dentro 
	; de um composto ou perfil e o outro está pedido separadamente.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "cobrarItens"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Cobrar quais itens múltiplos de mesma execução?"
	set label.showColon = 0
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	; FATREGRAESTRATCOBR
	set linha.editorOptions = ..getEditorOptionsSelect("","Cobrar todos os itens,Cobrar o item de maior valor,Cobrar o item de menor valor")
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.cobrarItens 	= +$$$FATRegraComercialEstrategiadeCobranca(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Definir uma estratégia para cobrança de itens que são pedidos separadamente, mas serão executados apenas uma vez."
	quit retorno]]></Implementation>
</Method>

<Method name="getCobrarNumeroComponentesComposto">
<Description><![CDATA[; Definir, para cada quantidade de componentes, quais itens de tabela deverão ser cobrados pelo 
	; exame. 
	; Exemplo: Definir como cobrar uma curva glicêmica de acordo com a quantidade de pontos presentes 
	; na curva.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = []
	quit objeto]]></Implementation>
</Method>

<Method name="getConfigDocumentacao">
<Description><![CDATA[; Definir se um documento deve ou não ser impresso em um determinado ponto do processo. 
; Exemplo: Guia TISS a ser impressa quando houver abertura de ficha de determinado convênio. 
; ***Para este tipo devemos ter por padrão os documentos que devem ser impressos independente
;  do convênio e esta opção deverá ser utilizada somente se diferente do padrão]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = []
	quit objeto]]></Implementation>
</Method>

<Method name="getConfigGuia">
<Description><![CDATA[; Definir em qual tipo de guia eletrônica a execução de um exame ou a utilização de 
; um MAT/MED deverá ser reportado.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = []
	quit objeto]]></Implementation>
</Method>

<Method name="getCotaQuantidade">
<Description><![CDATA[Definir o número máximo de procedimentos por mês, a cada três meses ou anualmente.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.numeroProcedimentos 	= +$$$FATRegraComercialNumerodeProcedimentos(objRegra)
		set formData.periodicidade		 	= $$$FATRegraComercialPeriodicidade(objRegra)
	}
	if formData.periodicidade="" set formData.periodicidade="1"
	set linha = {}
	set linha.dataField = "numeroProcedimentos"
	set linha.colSpan	= 3
	set label = {}
	set label.text = "Quantidade Total"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(1,99999,0)
	do objeto.%Push(linha)
	set linha = {}
	set linha.itemType = "empty"
	set linha.colSpan	= 9
	do objeto.%Push(linha)
	;
	set linha = {}
	set linha.dataField = "periodicidade"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Periodicidade"
	set linha.label = label
	set linha.editorType= "dxRadioGroup"
	;FATREGRAPERIODICIDADE
	set linha.editorOptions = ..getEditorOptionsRadioGroup("Mensal,Trimestral,Anual")
	set elementAttr = {}
	set elementAttr.ocultaExibe = "mensal^trimestral^trimestral"
	set linha.elementAttr = elementAttr
	do objeto.%Push(linha)
	;
	set formMensal = {}
	set formMensal.colSpan		= 12
	set formMensal.colCount		= 12
	set formMensal.visible		= $select(formData.periodicidade=1:1,1:0)
	set formMensal.itemType 	= "group"
	set formMensal.name			= "mensal"
	set formMensal.items		=..getMensal(codRegra).items
	;
	if formMensal.visible=1{
		set iterator = ..getMensal(codRegra).formData.%GetIterator()
		while iterator.%GetNext(.indice,.valor){
			do formData.%Set(indice,valor)
		}
	}
	;
	do objeto.%Push(formMensal)
	;
	set formTrimestral = {}
	set formTrimestral.colSpan		= 12
	set formTrimestral.colCount		= 12
	set formTrimestral.visible		= $select(formData.periodicidade>1:1,1:0)
	set formTrimestral.itemType 	= "group"
	set formTrimestral.name			= "trimestral"
	set formTrimestral.items		=..getTrimestral(codRegra).items
	;
	if formTrimestral.visible=1{
		set iterator = ..getTrimestral(codRegra).formData.%GetIterator()
		while iterator.%GetNext(.indice,.valor){
			do formData.%Set(indice,valor)
		}
	}
	;	
	do objeto.%Push(formTrimestral)

	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Definir o número máximo de procedimentos por mês, a cada três meses ou anualmente."
	quit retorno]]></Implementation>
</Method>

<Method name="getCotaValor">
<Description><![CDATA[; Limita o valor total de um item que pode ser cobrado em um período.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.periodicidade		 	= $$$FATRegraComercialPeriodicidade(objRegra)
	}
	if formData.periodicidade="" set formData.periodicidade="1"
	;
	set iterator = ..getPrecoBase(codRegra).items.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		do objeto.%Push(valor)
	}
	;
	set iterator = ..getPrecoBase(codRegra).formData.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		do formData.%Set(indice,valor)
	}
	;
	set linha = {}
	set linha.dataField = "periodicidade"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Periodicidade"
	set linha.label = label
	set linha.editorType= "dxRadioGroup"
	set linha.editorOptions = ..getEditorOptionsRadioGroup("Mensal,Trimestral,Anual")
	set elementAttr = {}
	set elementAttr.ocultaExibe = "mensal^trimestral^trimestral"
	set linha.elementAttr = elementAttr
	do objeto.%Push(linha)
	;
	set formMensal = {}
	set formMensal.colSpan		= 12
	set formMensal.colCount		= 12
	set formMensal.visible		= $select(formData.periodicidade=1:1,1:0)
	set formMensal.itemType 	= "group"
	set formMensal.name			= "mensal"
	set formMensal.items		=..getMensal(codRegra).items
	;
	if formMensal.visible=1{
		set iterator = ..getMensal(codRegra).formData.%GetIterator()
		while iterator.%GetNext(.indice,.valor){
			do formData.%Set(indice,valor)
		}
	}
	;
	do objeto.%Push(formMensal)
	;
	set formTrimestral = {}
	set formTrimestral.colSpan		= 12
	set formTrimestral.colCount		= 12
	set formTrimestral.visible		= $select(formData.periodicidade>1:1,1:0)
	set formTrimestral.itemType 	= "group"
	set formTrimestral.name			= "trimestral"
	set formTrimestral.items		=..getTrimestral(codRegra).items
	do objeto.%Push(formTrimestral)
	;
	if formTrimestral.visible=1{
		set iterator = ..getTrimestral(codRegra).formData.%GetIterator()
		while iterator.%GetNext(.indice,.valor){
			do formData.%Set(indice,valor)
		}
	}
	;
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Limita o valor total de um item que pode ser cobrado em um período."
	quit retorno]]></Implementation>
</Method>

<Method name="getDescontoProgressivo">
<Description><![CDATA[Faz com que itens num mesmo pedido que compartilhem a mesma regra de desconto 
ganhem um desconto progressivo determinado pela lista cadastrada de desconto.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData = {}
	set linha  = ..getPercentual(codRegra,"Desconto do item com maior valor (%)",4).items
	set iterator = ..getPercentual(codRegra).formData.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		do formData.%Set(indice,valor)
	}
	do objeto.%Push(linha)
	set linha = {}
	set linha.itemType = "empty"
	set linha.colSpan	= 6
	do objeto.%Push(linha)
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Faz com que itens num mesmo pedido que compartilhem a mesma regra de desconto ganhem um desconto progressivo determinado pela lista cadastrada de desconto."
	quit retorno]]></Implementation>
</Method>

<Method name="getDesdobre">
<Description><![CDATA[; Aplicado normalmente na coluna de uma tabela (como CH ou m2 filme ) para que o sistema 
; use o valor de outra tabela e multiplique ao que está nessa coluna para calcular o valor final. 
; Exemplo: O valor do m2 do filme para raio x é R$ 10,00 e para o procedimento US mamas a 
; quantidade de filme utilizado é 0,19. Portanto para obter o valor total do filme utilizado 
; na US de mamas, multiplica-se 0,19 por 10 e assim temos o valor 1,90. Nesse caso o laboratório 
; quer cobrar R$ 25,00 pelo m2 do filme então 25 x 0,19 é igual a 4,75.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "tabelaComercial"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Tabela"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("TabelaComercial")
	set elementAttr = {}
	set elementAttr.atualizaDataSource = "itemTabelaComercial^tabela^ItemTabelaComercial"
	set linha.elementAttr = elementAttr
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "itemTabelaComercial"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Item da tabela"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("ItemTabelaComercial")
	set linha.editorOptions.disabled = 1
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.tabelaComercial 		= $$$FATRegraComercialTabelaComercial(objRegra)
		set formData.itemTabelaComercial	= $$$FATRegraComercialItemdaTabelaComercial(objRegra)
		if formData.tabelaComercial'="" set linha.editorOptions.disabled = 0
	}
	;
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Aplicado normalmente na coluna de uma tabela (como CH ou m2 filme ) para que o sistema use o valor de outra tabela e multiplique ao que está nessa coluna para calcular o valor final."
	quit retorno]]></Implementation>
</Method>

<Method name="getElegibilidade">
<Description><![CDATA[Determinar quais procedimentos estão ou não cobertos em um determinado acordo.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra="",nomeAjuste1="É Elegível?"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "elegivel"
	set linha.colSpan	= 12
	set label = {}
	set label.text = nomeAjuste1
	set label.showColon = 0
	set linha.label = label
	set linha.editorType	= "dxSwitch"
	set linha.editorOptions = ..getEditorOptionsSwitch()
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "mensagem"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Mensagem"
	set linha.label = label
	set linha.editorType= "dxTextBox"
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.elegivel 	= +$$$FATRegraComercialItemElegivel(objRegra)
		set formData.mensagem 	= $$$FATRegraComercialMensagem(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Determinar quais procedimentos estão ou não cobertos em um determinado acordo."
	quit retorno]]></Implementation>
</Method>

<Method name="getFranquia">
<Description><![CDATA[Define uma franquia para o valor de um item. O valor até a franquia fica pendente para pagamento
pelo credenciado e o excedente é cobrado da fonte pagadora]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = ..getPrecoBase(codRegra)
	quit objeto]]></Implementation>
</Method>

<Method name="getIdentificadorRecebedor">
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "identificacao"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Identificação do Recebedor"
	set linha.label = label
	set linha.editorType	= "dxTextBox"
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.identificacao 	= $$$FATRegraComercialIdentificadordoRecebedor(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Permite especificar para cada item um identificador do recebedor na fonte pagadora."
	quit retorno]]></Implementation>
</Method>

<Method name="getIgnoraAssociacao">
<Description><![CDATA[; Faz com que a associação de um item cobrável a um item de tabela seja ignorada]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "elegivel"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Ignora Associação?"
	set label.showColon = 0
	set linha.label = label
	set linha.editorType	= "dxSwitch"
	set linha.editorOptions = ..getEditorOptionsSwitch()
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.elegivel 	= '+$$$FATRegraComercialItemElegivel(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Faz com que a associação de um item cobrável a um item de tabela seja ignorada."
	quit retorno]]></Implementation>
</Method>

<Method name="getLimiteDesconto">
<Description><![CDATA[; Definir o percentual Máximo de desconto que pode ser concedido a pacientes particulares por 
; usuários que estejam num grupo de usuário do sistema]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "grupoPermissao"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Grupo"
	set linha.label = label
	set linha.editorType= "dxTagBox"
	set linha.editorOptions = ..getEditorOptionsSelect("GrupoPermissao")
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set perfil 	 = $$$FATRegraComercialCodigodoPerfil(objRegra)
		set perfilArray = []
		for i=1:1:$length(perfil,";"){
			set ret = $piece(perfil,";",i)
			if ret="" continue
			do perfilArray.%Push(ret)
		}
		set formData.grupoPermissao = perfilArray
	}
	;
	
	set linha = ..getPercentual(codRegra,"Limite de Desconto (%)",4).items
	;
	set iterator = ..getPercentual(codRegra).formData.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		do formData.%Set(indice,valor)
	}
	;
	do objeto.%Push(linha)
	set linha = {}
	set linha.itemType = "empty"
	set linha.colSpan = 8
	do objeto.%Push(linha)
	;
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Definir o percentual Máximo de desconto que pode ser concedido a pacientes particulares por usuários que estejam num grupo de usuário do sistema"
	quit retorno]]></Implementation>
</Method>

<Method name="getLimiteTempo">
<Description><![CDATA[; Definir o tempo mínimo para que um procedimento possa ser pedido novamente, contado o tempo 
; a partir da última vez que foi realizado. Exemplo: Apenas 1 ultrassom por mês.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "numeroProcedimentos"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Quantidade"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(1,99999,0)
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "tempoLimite"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Tempo Limite (dias)"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(1,99999,0)
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.numeroProcedimentos 	= +$$$FATRegraComercialNumerodeProcedimentos(objRegra)
		set formData.tempoLimite 			= +$$$FATRegraComercialLimitedeTempodias(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Definir o tempo mínimo para que um procedimento possa ser pedido novamente, contado o tempo a partir da última vez que foi realizado."
	quit retorno]]></Implementation>
</Method>

<Method name="getObrigNumeroCredenciado">
<Description><![CDATA[Definir se é ou não obrigatório informar o número da guia no momento da abertura da requisição.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "senhaObrigatoria"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Número Obrigatório?"
	set label.showColon = 0
	set linha.label = label
	set linha.editorType	= "dxSwitch"
	set linha.editorOptions = ..getEditorOptionsSwitch()
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "mascara"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Máscara"
	set linha.label = label
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "mascaraLegenda"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Máscara (legenda na tela)"
	set linha.label = label
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "minimoCaracteres"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Mínimo de caracteres"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(0,1000)
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "maximoCaracteres"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Máximo de caracteres"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(0,1000)
	do objeto.%Push(linha)
	;
	set linha = {}
	set linha.dataField = "aPartirDe"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Obrigatório a partir de"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("AreasAplicacao")
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.senhaObrigatoria	= +$$$FATRegraComercialCampoObrigatorio(objRegra) 			
		set formData.mascara			= $$$FATRegraComercialMascaradeValidacaodoCampo(objRegra) 	
		set formData.mascaraLegenda		= $$$FATRegraComercialLegendaparaaMascara(objRegra) 	
		set formData.minimoCaracteres	= +$$$FATRegraComercialMinimodeCaracteres(objRegra) 			
		set formData.maximoCaracteres	= +$$$FATRegraComercialMaximodeCaracteres(objRegra) 
		set formData.aPartirDe			= $$$FATRegraComercialAplicavelaPartirdoModulo(objRegra) 
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Definir se é ou não obrigatório informar o número da guia no momento da abertura da requisição."
	quit retorno]]></Implementation>
</Method>

<Method name="getObrigatorioNumeroGuia">
<Description><![CDATA[; Definir se é ou não obrigatório informar o número da carteirinha do convênio no momento da 
; abertura da requisição.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData = {}
	set linha = {}
	set linha.dataField = "senhaObrigatoria"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Número Obrigatório?"
	set label.showColon = 0
	set linha.label = label
	set linha.editorType	= "dxSwitch"
	set linha.editorOptions = ..getEditorOptionsSwitch()
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "minimoCaracteres"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Mínimo de caracteres"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(0,1000)
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "maximoCaracteres"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Máximo de caracteres"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(0,1000)
	do objeto.%Push(linha)
	;
	set linha = {}
	set linha.dataField = "aPartirDe"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Obrigatório a partir de"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("AreasAplicacao")
	do objeto.%Push(linha)
	;
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.senhaObrigatoria	= +$$$FATRegraComercialCampoObrigatorio(objRegra) 			
		set formData.minimoCaracteres	= +$$$FATRegraComercialMinimodeCaracteres(objRegra) 			
		set formData.maximoCaracteres	= +$$$FATRegraComercialMaximodeCaracteres(objRegra) 
		set formData.aPartirDe			= $$$FATRegraComercialAplicavelaPartirdoModulo(objRegra) 
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Definir se é ou não obrigatório informar o número da carteirinha do convênio no momento da abertura da requisição."
	quit retorno]]></Implementation>
</Method>

<Method name="getPagamentoParcial">
<Description><![CDATA[; Faz a divisão do pagamento do pedido entre diversos pagadores]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "tipoPagamento"
	set label = {}
	set label.text = "Tipo de Pagamento"
	set linha.label = label
	set linha.colSpan = 8
	set linha.editorType = "dxSelectBox"
	; FATTIPOPAGTO
	set linha.editorOptions = ..getEditorOptionsSelect(,"Exatamente,Até")
	do objeto.%Push(linha)
	set linha = {}
	set linha = ..getPercentual(codRegra,"Fração (%)",4).items
	set iterator = ..getPercentual(codRegra).formData.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		do formData.%Set(indice,valor)
	}
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.tipoPagamento 	= $$$FATRegraComercialTipodePagamento(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Faz a divisão do pagamento do pedido entre diversos pagadores."
	quit retorno]]></Implementation>
</Method>

<Method name="getPrazoAutorizacao">
<Description><![CDATA[; Configura o prazo necessário para a autorização de pedidos, que afeta a espera necessária 
; para o agendamento.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData = {}
	set linha = {}
	set linha.dataField = "prazo"
	set label = {}
	set label.text = "Dias Corridos"
	set linha.label = label
	set linha.colSpan = 4
	set linha.editorType = "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(0,1000,0)
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.prazo 	= +$$$FATRegraComercialLimitedeTempodias(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Configura o prazo necessário para a autorização de pedidos, que afeta a espera necessária para o agendamento."
	quit retorno]]></Implementation>
</Method>

<Method name="getPrecoBase">
<Description><![CDATA[; Sobrescrever um valor monetário.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "moeda"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Moeda"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("Moeda")
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "valor"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Valor"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(0,99999,2)
	do objeto.%Push(linha)
	;
	;
	if codRegra'=""{
		set objRegra 		= $get(^FATRegraComercial(0,codRegra,1))
		set formData.moeda 	= $$$FATRegraComercialMoeda(objRegra)
		set formData.valor 	= +$$$FATRegraComercialPrecoBase(objRegra)
	}
	;
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData	
	set retorno.help = "Sobrescrever um valor monetário."
	quit retorno]]></Implementation>
</Method>

<Method name="getRedefinirCodigo">
<Description><![CDATA[;
; Alterar a tabela comercial a ser usada para definir o código e a descrição dos exames: Valor
; do item cobrado é da tabela AMB porém o convênio solicita que os códigos utilizados sejam da 
; tabela TUSS.(É parametrizável se desejo que seja possível redefinir somente o Código ou a 
; Descrição também)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "trocaDescricao"
	set linha.colSpan	= 4
	set label = {}
	set label.text = "Trocar Também a Descrição?"
	set label.showColon = 0
	set linha.label = label
	set linha.editorType= "dxSwitch"
	set linha.editorOptions = ..getEditorOptionsSwitch()
	do objeto.%Push(linha)
	set linha = {}
	set linha.itemType	= "empty"
	set linha.colSpan	= 8
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "tabelaComercial"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Tabela"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("TabelaComercial")
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.trocaDescricao		= +$$$FATRegraComercialTrocaaDescricao(objRegra)
		set formData.tabelaComercial	= $$$FATRegraComercialTabelaComercial(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Alterar a tabela comercial a ser usada para definir o código e a descrição dos exames: Valor do item cobrado é da tabela AMB porém o convênio solicita que os códigos utilizados sejam da tabela TUSS."
	quit retorno]]></Implementation>
</Method>

<Method name="getStatusCobranca">
<Description><![CDATA[; Definir o status mínimo que o procedimento deve atingir para que possa ser cobrado. 
; Ex: Cobrar somente itens cujo status é admitido ou mais avançado]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData = {}
	set linha = {}
	set linha.dataField = "statusCobranca"
	set linha.colSpan	= 4
	set label = {}
	set label.text = "Status para a Cobrança"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("StatusCobranca")
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.statusCobranca		= $$$FATRegraComercialStatusdaCobranca(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Definir o status mínimo que o procedimento deve atingir para que possa ser cobrado."
	quit retorno]]></Implementation>
</Method>

<Method name="getTipoAtendimento">
<Description><![CDATA[; Definir o status mínimo que o procedimento deve atingir para que possa ser cobrado. 
; Ex: Cobrar somente itens cujo status é admitido ou mais avançado]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	;
	set linha = {}
	set linha.dataField = "tipoGuia"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Tipo de Guia"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("TipoGuia")
	set elementAttr = {}
	set elementAttr.atualizaDataSource = "tipoAtendimento^tabela^TipoAtendimento"
	set linha.elementAttr = elementAttr
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "tipoAtendimento"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Tipo de Atendimento"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("TipoAtendimento")
	set linha.editorOptions.disabled = 1
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.tipoGuia		= $$$FATRegraComercialCodigodoTipodaGuia(objRegra)			
		set formData.tipoAtendimento	= $$$FATRegraComercialCodigodoTipodoAtendimento(objRegra)
		if formData.tipoGuia'="" set linha.editorOptions.disabled = 0
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Configura a qual tipo de atendimento da guia TISS um item de fatura pertence."
	quit retorno]]></Implementation>
</Method>

<Method name="getTrocaItemLimiteTempo">
<Description><![CDATA[; Faz com que ocorra a substituição de um item de tabela quando, para o credenciado, já foi 
; admitido um item de pedido igual no período configurado. Utilizado para troca de consulta 
; para retorno de acordo com o tempo.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "limiteTempo"
	set linha.colSpan	= 6
	set label = {}
	set label.text = "Tempo Limite (dias)"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(1,99999,0)
	do objeto.%Push(linha)
	set linha = {}
	set linha.itemType = "empty"
	set linha.colSpan	= 6
	do objeto.%Push(linha)
	;
	set linha = {}
	set linha.dataField = "tabelaComercial"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Tabela"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("TabelaComercial")
	set elementAttr = {}
	set elementAttr.atualizaDataSource = "itemTabelaComercial^tabela^ItemTabelaComercial"
	set linha.elementAttr = elementAttr
	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "itemTabelaComercial"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Item da tabela"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("ItemTabelaComercial")
	set linha.editorOptions.disabled = 1
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.limiteTempo			= +$$$FATRegraComercialLimitedeTempodias(objRegra)
		set formData.tabelaComercial		= $$$FATRegraComercialTabelaComercial(objRegra)			
		set formData.itemTabelaComercial	= $$$FATRegraComercialItemdaTabelaComercial(objRegra)
		if formData.tabelaComercial'="" set linha.editorOptions.disabled = 0
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Faz com que ocorra a substituição de um item de tabela quando, para o credenciado, já foi admitido um item de pedido igual no período configurado. Utilizado para troca de consulta para retorno de acordo com o tempo."
	quit retorno]]></Implementation>
</Method>

<Method name="getValidadeTipoSolicitante">
<Description><![CDATA[; Definir quais documentos de registro profissional são aceitos como solicitante para uma 
; requisição. Exemplo: Apenas CRM.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData = {}
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set documento	= $$$FATRegraComercialDocumento(objRegra)
		set arrayDocumentos = []
		for i=1:1:$length(documento,";"){
			set docAtu = $piece(documento,";",i)
			if docAtu="" continue
			do arrayDocumentos.%Push(docAtu)
		}
		set formData.documento	= arrayDocumentos
		set formData.aPartirDe	= $$$FATRegraComercialAplicavelaPartirdoModulo(objRegra)
	}
	;	
	set linha = {}
	set linha.dataField = "documento"
	set linha.colSpan	= 4
	set label = {}
	set label.text = "Documento"
	set linha.label = label
	set linha.editorType= "dxList"
	set linha.editorOptions = ..getEditorOptionsList("Documentos")
	set linha.editorOptions.onSelectionChanged = "'function(e){$('#divSubRegra').dxForm('instance').updateData('documento',e.component._options.selectedItemKeys);}'"
	set linha.editorOptions.selectedItemKeys = formData.documento

	do objeto.%Push(linha)
	set linha = {}
	set linha.dataField = "aPartirDe"
	set linha.colSpan	= 8
	set label = {}
	set label.text = "Obrigatório a partir de"
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("AreasAplicacao")
	
	do objeto.%Push(linha)
	;
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Definir quais documentos de registro profissional são aceitos como solicitante para uma requisição."
	quit retorno]]></Implementation>
</Method>

<Method name="getQuantidadeBase">
<Description><![CDATA[; Sobrescrever quantidade base]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	set linha = {}
	set linha.dataField = "quantidade"
	set linha.colSpan	= 12
	set label = {}
	set label.text = "Quantidade"
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(0,10000,2)
	do objeto.%Push(linha)
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.quantidade 	= +$$$FATRegraComercialQuantidadeBase(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	set retorno.help = "Sobrescrever quantidade base"
	quit retorno]]></Implementation>
</Method>
<UDLText name="T">
<Content>// Monta Campo 'Mensal'</Content>
</UDLText>

<Method name="getMensal">
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra="",nomeAjuste1="Dia para o Início"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	;
	set linha = {}
	set linha.colSpan	= 12
	set linha.dataField = "inicioDiaMensal"
	set label = {}
	set linha.colSpan	= 12
	set label.text = nomeAjuste1
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(1,31,0)
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.inicioDiaMensal 	= +$$$FATRegraComercialDiaInicial(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	quit retorno]]></Implementation>
</Method>
<UDLText name="T">
<Content>// Monta Campo 'Trimestral'</Content>
</UDLText>

<Method name="getTrimestral">
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra="",nomeAjuste1="Dia para o Início",nomeAjuste2="Mês para o Início"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData={}
	;
	set linha = {}
	set linha.colSpan	= 6
	set linha.dataField = "inicioDiaTrimestral"
	set label = {}
	set label.text = nomeAjuste1
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(1,31,0)
	do objeto.%Push(linha)
	set linha = {}
	set linha.colSpan	= 6
	set linha.dataField = "inicioMesTrimestral"
	set label = {}
	set label.text = nomeAjuste2
	set linha.label = label
	set linha.editorType= "dxSelectBox"
	set linha.editorOptions = ..getEditorOptionsSelect("","Janeiro,Fevereiro,Março,Abril,Maio,Junho,Julho,Agosto,Setembro,Outubro,Novembro,Dezembro")
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.inicioDiaTrimestral 	= +$$$FATRegraComercialDiaInicial(objRegra)
		set formData.inicioMesTrimestral 	= $$$FATRegraComercialMesInicial(objRegra) 

	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	quit retorno]]></Implementation>
</Method>
<UDLText name="T">
<Content>// Monta Campo "Percentual"</Content>
</UDLText>

<Method name="getPercentual">
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra="",nome="Percentual",colSpan=12</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set formData = {}
	set linha = {}
	set linha.colSpan	= colSpan
	set linha.dataField = "percentual"
	set label = {}
	set label.text = nome
	set linha.label = label
	set linha.editorType= "dxNumberBox"
	set linha.editorOptions = ..getEditorOptionsNumber(0,1000,2)
	set retorno = {}
	set retorno.items = linha
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.percentual = +$$$FATRegraComercialPercentual(objRegra)
	}
	set retorno.formData = formData
	quit retorno]]></Implementation>
</Method>
<UDLText name="T">
<Content>// Monta Campo 'Formúla'</Content>
</UDLText>

<Method name="getFormula">
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra="",nomeAjuste1="Fórmula"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objeto = [],formData = {}
	;
	set linha = {}
	set linha.colSpan	= 12
	set linha.dataField = "formula"
	set label = {}
	set linha.colSpan	= 12
	set label.text = nomeAjuste1
	set linha.label = label
	set linha.editorType= "dxTextArea"
	do objeto.%Push(linha)
	;
	if codRegra'=""{
		set objRegra = $get(^FATRegraComercial(0,codRegra,1))
		set formData.formula = $$$FATRegraComercialFormula(objRegra)
	}
	set retorno = {}
	set retorno.items = objeto
	set retorno.formData = formData
	quit retorno]]></Implementation>
</Method>

<Method name="getEditorOptionsRadioGroup">
<ClassMethod>1</ClassMethod>
<FormalSpec>valores,layout="horizontal"</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set editorOptions = {}
	set opcoesSimNao = []
	for i=1:1:$length(valores,","){
		set opcaoSimNao = {}
		do opcaoSimNao.%Set("ID",i,"String")
		set opcaoSimNao.Name = $piece(valores,",",i)
		do opcoesSimNao.%Push(opcaoSimNao)
	}
	set editorOptions.dataSource = opcoesSimNao
	set editorOptions.valueExpr = "ID"
	set editorOptions.displayExpr = "Name"
	set editorOptions.layout = layout
	quit editorOptions]]></Implementation>
</Method>

<Method name="getEditorOptionsSwitch">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set editorOptions = {}
	set editorOptions.switchedOnText = "Sim"
	set editorOptions.switchedOffText = "Não"
	quit editorOptions]]></Implementation>
</Method>

<Method name="getEditorOptionsNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>valorMinimo="",valorMaximo="",casasDecimais=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set editorOptions = {}
	set:valorMinimo'="" editorOptions.min = valorMinimo
	set:valorMaximo'="" editorOptions.max = valorMaximo
	if casasDecimais'=""{
		set format = "#,##0"
		if casasDecimais>0 set format = format_"."_$extract("#########",1,casasDecimais)
		set editorOptions.format = format
	}
	quit editorOptions]]></Implementation>
</Method>

<Method name="getEditorOptionsSelect">
<ClassMethod>1</ClassMethod>
<FormalSpec>dataSource="",dataSourceFixed=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set editorOptions = {}
	if dataSource'=""{
		set editorOptions.dataSource = "'dataSource"_dataSource_"'"
		set editorOptions.searchEnabled = 1
		set editorOptions.onInitialized = "'function(e){var dataSource = e.component.getDataSource();dataSource.pageIndex(0);dataSource.reload();}'"
	}else{
		set opcoesV = []
		for i=1:1:$length(dataSourceFixed,","){
			set opcoes = {}
			do opcoes.%Set("codigo",i,"string")
			set opcoes.descricao = $piece(dataSourceFixed,",",i)
			do opcoesV.%Push(opcoes)
		}
		set editorOptions.dataSource = opcoesV
	}
	set editorOptions.valueExpr = "codigo"
	set editorOptions.displayExpr = "descricao"
	quit editorOptions]]></Implementation>
</Method>

<Method name="getEditorOptionsList">
<ClassMethod>1</ClassMethod>
<FormalSpec>dataSource="",dataSourceFixed=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set editorOptions = {}
	if dataSource'=""{
		set editorOptions.dataSource = "'dataSource"_dataSource_"'"
		set editorOptions.searchEnabled = 1
		set editorOptions.onInitialized = "'function(e){var dataSource = e.component.getDataSource();dataSource.pageIndex(0);dataSource.reload();}'"
	}else{
		set opcoesV = []
		for i=1:1:$length(dataSourceFixed,","){
			set opcoes = {}
			set opcoes.codigo = i
			set opcoes.descricao = $piece(dataSourceFixed,",",i)
			do opcoesV.%Push(opcoes)
		}
		set editorOptions.dataSource = opcoesV
	}
	set editorOptions.valueExpr = "codigo"
	set editorOptions.displayExpr = "descricao"
	set editorOptions.keyExpr 	= "codigo"
	set editorOptions.searchEnabled	 = 1
	set editorOptions.showSelectionControls = 1
	set editorOptions.selectionMode	 = "all"
	set editorOptions.height	 	= "200px"
	quit editorOptions]]></Implementation>
</Method>

<Method name="getINPARA">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set chave = $get(%request.Data("chave",1))
	set showKey = $get(%request.Data("showKey",1))
	set retorno = []
	set codigo=""
	for{
		set codigo 	= $order(^INPARA(0,chave,"PT",codigo)) quit:codigo=""
		set obj 	= $get(^INPARA(0,chave,"PT",codigo,1)) 
		set linha = {}
		set linha.codigo = codigo
		set linha.descricao = $select(showKey:"("_codigo_") ",1:"")_$$$INPARAText(obj)
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="pesquisaRegras">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	set filter = $get(%request.Data("filter",1))
	set codigo = $get(%request.Data("codigo",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	Set sort 	= $Get(%request.Data("sort",1))
	Set searchValue = $Get(%request.Data("searchValue",1))
	;
	set sort = $tr(sort,"""{[]}","")
	set campoSort = $REPLACE($piece($piece(sort,",",1),":",2),"""","")
	set campoSortDesc = $select($piece($piece(sort,",",2),":",2)="false":"DESC",1:"ASC")
	set orderBy = ""
	
	if campoSort'="" set orderBy = "order by "_campoSort_" "_campoSortDesc
	
	set filter = $tr(filter,"""{[]}","")
	set campo = "",operacao = "",wherefilter="",proximacomb="",andant="",abrep=0
	for i=1:1:$length(filter,","){
		set ret = $piece(filter,",",i)
		if ret="" continue
		if proximacomb=1{
			if andant=1,ret="and" set wherefilter = wherefilter_" ) ",abrep=0
			if wherefilter'="" set wherefilter = wherefilter_" "_ret_" "
			set andant = ""
			if ret="and" set wherefilter = wherefilter_" ( ",andant = 1,abrep=1
			set proximacomb = ""
			continue
		}
		if campo="" {
			if ret = "and" continue
			set campo = ret continue
		}
		if operacao="" {
			if ret = "contains" set operacao = " like ",inicio="%",fim="%"
			if ret = "notcontains" set operacao = " not like ",inicio="%",fim="%"
			if ret = "startswith" set operacao = " like ",inicio="",fim="%"
			if ret = "endswith" set operacao = " like ",inicio="%",fim=""
			if ret = "=" set operacao = " = ",inicio="",fim=""
			if ret = "<>" set operacao = " <> ",inicio="",fim=""
			continue
		}
		;set ret = $replace(ret," ","")
		set wherefilter = wherefilter_"%upper("_campo_")"_operacao_"%upper('"_inicio_ret_fim_"')"
		set campo="",operacao="",proximacomb=1
	}
	if wherefilter'="" {
		if abrep=1 set wherefilter = wherefilter_")"
	}
	;
	set contador = 0
	set select1 = "select CodigodaRegra,Nome,Descricao,"
	set select1 = select1_" $$SQLGetUserParamDesc^VARSQL('TIPOSREGRASCOMERCIAIS~'||TipodaRegra) TipodaRegra, "
	set select1 = select1_" Case when Ativo=1 then 'Ativo' else 'Inativo' end Ativo"
	set select1 = select1_" from  FATRegraComercial"
	set select1 = select1_" where Company=0 "
	if codigo '= "" set select1 = select1_" and CodigodaRegra = '"_codigo_"' "
	;
	if wherefilter'="" set wherefilter = "where "_wherefilter
	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200
	set meuSelect="select * from ("
	set meuSelect=meuSelect_"select top "_top_" *,count(*) totalCount "
	set meuSelect=meuSelect_" from ("_select1_") "_wherefilter_" "_orderBy
	set meuSelect=meuSelect_")"
	if take>0 set meuSelect=meuSelect_" where %VID between "_skip_" and "_take
	set rs = ##class(%SQL.Statement).%ExecDirect("",meuSelect)
	set array = []
	set totalCount = 0
	while(rs.%Next()){
		set CodigodaRegra		= rs.%Get("CodigodaRegra")
		set Nome				= rs.%Get("Nome")
		set Descricao			= rs.%Get("Descricao")
		set Ativo				= rs.%Get("Ativo")
		set TipodaRegra			= rs.%Get("TipodaRegra")
		set totalCount			= rs.%Get("totalCount")
		set linha = {}
		set linha.CodigodaRegra			= CodigodaRegra
		set linha.Nome 					= Nome
		set linha.Descricao				= Descricao
		set linha.Ativo 				= Ativo
		set linha.TipodaRegra 			= TipodaRegra
		do array.%Push(linha)
	}
	set retorno = {}
	set retorno.data = array
	set retorno.totalCount = totalCount
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="recRegra">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codigo = $get(%request.Data("codigo",1))
	set formGeral = {}
	set formControle = {}
	set formGeral.situacao		= 1
	set msgRetorno = "Sempre",alert=0
	do ..aplicaRegrasVigencia()
	kill ^mtemp.Validade(job)
	if codigo'=""{
		set objFATRegraComercial	= $get(^FATRegraComercial(YM,codigo,1))
		set formGeral.nome			= $$$FATRegraComercialNome(objFATRegraComercial)
		set formGeral.descricao 	= $$$FATRegraComercialDescricao(objFATRegraComercial)
		set formGeral.tipo			= $$$FATRegraComercialTipodaRegra(objFATRegraComercial)		
		set formGeral.situacao		= +$$$FATRegraComercialAtivo(objFATRegraComercial)
		;
		set formControle.criadoEm				= $$$FATRegraComercialCriadoEm(objFATRegraComercial)
		set formControle.criadoPor				= $$$FATRegraComercialCriadoPor(objFATRegraComercial)
		set formControle.alteradoEm				= $$$FATRegraComercialAlteradoEm(objFATRegraComercial)
		set formControle.alteradoPor			= $$$FATRegraComercialAlteradoPor(objFATRegraComercial)
		;
		if formControle.criadoEm'="" set formControle.criadoEm = $zdatetime(formControle.criadoEm,4)
		if formControle.alteradoEm'="" set formControle.alteradoEm = $zdatetime(formControle.alteradoEm,4)
		;
		set VigenciaAplicada = 0
		set tipo=""
		for {
			set tipo = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codigo,tipo)) quit:tipo=""
			set datai = ""
			for {
				set datai = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codigo,tipo,datai)) quit:datai=""
				set horai = ""
				for {
					set horai = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codigo,tipo,datai,horai)) quit:horai=""
					set dataf = ""
					for {
						set dataf = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codigo,tipo,datai,horai,dataf)) quit:dataf=""
						set horaf = ""
						for {
							set horaf = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codigo,tipo,datai,horai,dataf,horaf)) quit:horaf=""
							set ^mtemp.Validade(job,tipo,datai,horai,dataf,horaf,1) = ^FATRegraComercialValidade(0,codigo,tipo,datai,horai,dataf,horaf,1)
						}
					}
				}
			}
		}
		set dataInicial = $order(^mtemp.Validade(job,"Ativo",""))
		if dataInicial'="" {
			set horaInicial = $order(^mtemp.Validade(job,"Ativo",dataInicial,""))
			set dataFinal = $order(^mtemp.Validade(job,"Ativo",dataInicial,horaInicial,""))
			set horaFinal = $order(^mtemp.Validade(job,"Ativo",dataInicial,horaInicial,dataFinal,""))
			;
			set $piece(inicial,",",1) = dataInicial
			if horaInicial'=0 set $piece(inicial,",",2) = horaInicial
			;
			set $piece(final,",",1) = dataFinal
			if horaFinal'=0 set $piece(final,",",2) = horaFinal
			;
			if inicial'=0,$replace(inicial,",",".")>$replace($horolog,",","."){
				set data = $piece(inicial,",",1)
				set hora = $piece(inicial,",",2)
				set hora = hora - 1
				if hora<0 set hora = 86399,data=data-1
				set final = data_","_hora
				set inicial = 0
			}
			set msgRetorno=""
			if inicial'="0" set msgRetorno = "De "_$zdatetime(inicial,4)_" "
			if final'="0" set msgRetorno = msgRetorno_"até "_$zdatetime(final,4),alert=1
			else  set msgRetorno = msgRetorno_"até sempre"
			if inicial=0,final=0 set msgRetorno = "Sempre"
		}		
	}
	set retorno = {}
	set retorno.formGeral 		= formGeral
	set retorno.formControle 	= formControle
	set retorno.msgRetorno 		= msgRetorno
	set retorno.comValidade		= alert
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="aplicaRegrasVigencia">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	$$$VAR
	set strStatus = $$$OK
	lock ^aplicaRegras:0
	if '$test quit "erro"
	tstart
	set hoje = $replace($horolog,",",".")
	try{
		set query = "select * from (select FATRegraComercialValidade.ID,FATRegraComercial.Ativo,"
		set query = query_" FATRegraComercialValidade.CriadoPor, "
		set query = query_" FATRegraComercialValidade.ValordoCampoDuranteaVigen,"
		set query = query_" +(DataIniciodaVigencia||'.'||HoraIniciodaVigencia) DataHoraInicial,"
		set query = query_" +(DataFinaldaVigencia||'.'||HoraFinaldaVigencia) DataHoraFInal "
		set query = query_" from FATRegraComercialValidade,FATRegraComercial"
		set query = query_" where FATRegraComercialValidade.company=0 and FATRegraComercial.company=0 and "
		set query = query_" FATRegraComercialValidade.codigodaregra=FATRegraComercial.codigodaregra and "
		set query = query_" ( VigenciaAplicada <> 1 or VigenciaAplicada is null))"
		set query = query_" where ("
		set query = query_"     (ValordoCampoDuranteaVigen<>Ativo) and "
		set query = query_"     (DataHoraInicial=0 or (DataHoraInicial<>0 and "_hoje_">DataHoraInicial)) and "
		set query = query_"     ((DataHoraFinal=0 and "_hoje_">DataHoraInicial) or (DataHoraFInal<>0 and "_hoje_"<DataHoraFInal and "_hoje_">DataHoraInicial and DataHoraInicial<>0))"
		set query = query_") or ("
		set query = query_" "_hoje_">DataHoraFInal and DataHoraFinal<>0"
		set query = query_")"
		S ^zzJULIO.T($now(),0) = query
		set rs = ##class(%SQL.Statement).%ExecDirect("",.query)
		while(rs.%Next()){
			set ID 				= rs.%Get("ID")
			set CriadoPor 		= rs.%Get("CriadoPor")
			set valor 			= rs.%Get("ValordoCampoDuranteaVigen")
			set DataHoraFInal	= rs.%Get("DataHoraFInal")
			set codRegra = $piece(ID,"||",2)	
			set campo	 = $piece(ID,"||",3)
			set datai	 = $piece(ID,"||",4)
			set horai	 = $piece(ID,"||",5)
			set dataf	 = $piece(ID,"||",6)
			set horaf	 = $piece(ID,"||",7)
			set YBED 	 = CriadoPor
			;
			set regraContinuaAtiva=1
			if DataHoraFInal'=0,DataHoraFInal<hoje set regraContinuaAtiva=0,valor = 'valor
			if DataHoraFInal=0 set regraContinuaAtiva=0
			;
			;
			set objRegra = $get(^FATRegraComercial(0,codRegra,1))
			if campo="Ativo" set $$$FATRegraComercialAtivo(objRegra) = valor
			set strStatus = $$$Save("FATRegraComercial",codRegra,objRegra,$$$OK)
			quit:$$$ISERR(strStatus)
			;
			if 'regraContinuaAtiva{
				set obj = $get(^FATRegraComercialValidade(0,codRegra,campo,datai,horai,dataf,horaf,1))
				set $$$FATRegraComercialValidadeVigenciaAplicada(obj) = 1
				set strStatus = $$$Save("FATRegraComercialValidade",codRegra_","_campo_","_datai_","_horai_","_dataf_","_horaf,obj,$$$OK)
				quit:$$$ISERR(strStatus)
			}
		}
		;
		set query = "select * from (select ID,"
		set query = query_" CriadoPor, "
		set query = query_" ValordoCampoDuranteaVigen,"
		set query = query_" +(DataIniciodaVigencia||'.'||HoraIniciodaVigencia) DataHoraInicial,"
		set query = query_" +(DataFinaldaVigencia||'.'||HoraFinaldaVigencia) DataHoraFInal "
		set query = query_" from FATRegraComercialAcVal"
		set query = query_" where company=0 and "
		set query = query_" ( VigenciaAplicada <> 1 or VigenciaAplicada is null))"
		S ^zzJULIO.T($now(),1) = query
		set rs = ##class(%SQL.Statement).%ExecDirect("",.query)
		while(rs.%Next()){
			set ID 				= rs.%Get("ID")
			set CriadoPor 		= rs.%Get("CriadoPor")
			set valor 			= rs.%Get("ValordoCampoDuranteaVigen")
			set DataHoraInicial	= +rs.%Get("DataHoraInicial")
			set DataHoraFinal	= +rs.%Get("DataHoraFInal")
			;
			set considera=0
			if (DataHoraInicial=0)||((DataHoraInicial'=0)&&(hoje>DataHoraInicial)) set considera=1
			if ((DataHoraFinal=0)&&(hoje>DataHoraInicial))||((DataHoraFinal'=0)&&(hoje<DataHoraFinal)&&(hoje>DataHoraInicial)&&(DataHoraInicial'=0)) set considera=1
			if ((DataHoraFinal'=0)&&(hoje>DataHoraFinal)) set considera=1
			if 'considera continue
			;
			set codAcordo 	= $piece(ID,"||",2)	
			set nivelAcordo = $piece(ID,"||",3)	
			set regra	 	= $piece(ID,"||",4)	
			set campo	 	= $piece(ID,"||",5)
			set datai	 	= $piece(ID,"||",6)
			set horai	 	= $piece(ID,"||",7)
			set dataf	 	= $piece(ID,"||",8)
			set horaf	 	= $piece(ID,"||",9)
			set YBED 	 = CriadoPor
			;
			set regraContinuaAtiva=1
			if DataHoraFinal'=0,DataHoraFinal<hoje set regraContinuaAtiva=0,valor = 'valor
			;if DataHoraFinal=0 set regraContinuaAtiva=0
			;
			set convenio 	= $piece(nivelAcordo,"^",1)
			set tabela		= $piece(nivelAcordo,"^",2)
			set categoria	= $piece(nivelAcordo,"^",3)
			set item		= $piece(nivelAcordo,"^",4)
			set nivelRegra = 40
			if tabela'="" set nivelRegra = 30
			if categoria'="" set nivelRegra = 20
			if item'="" set nivelRegra = 10
			if nivelRegra=10 {
				set objRegra = $get(^FATAcordoComercialRegraItem(0,codAcordo,convenio,tabela,item,regra,1))
				if campo="Inativa" set $$$FATAcordoComercialRegraItemInativa(objRegra) = valor
				set strStatus = $$$Save("FATAcordoComercialRegraItem",codAcordo_","_convenio_","_tabela_","_item_","_regra,objRegra,$$$OK)
				quit:$$$ISERR(strStatus)
			}
			if nivelRegra=20 {
				set objRegra = $get(^FATAcordoComercialRegraCat(0,codAcordo,convenio,tabela,categoria,regra,1))
				if campo="Inativa" set $$$FATAcordoComercialRegraCatInativa(objRegra) = valor
				set strStatus = $$$Save("FATAcordoComercialRegraCat",codAcordo_","_convenio_","_tabela_","_categoria_","_regra,objRegra,$$$OK)
				quit:$$$ISERR(strStatus)
			}
			if nivelRegra=30 {
				set objRegra = $get(^FATAcordoComercialRegraTabela(0,codAcordo,convenio,tabela,regra,1))
				if campo="Inativa" set $$$FATAcordoComercialRegraTabelaInativa(objRegra) = valor
				set strStatus = $$$Save("FATAcordoComercialRegraTabela",codAcordo_","_convenio_","_tabela_","_regra,objRegra,$$$OK)
				quit:$$$ISERR(strStatus)
			}
			if nivelRegra=40 {
				set objRegra = $get(^FATAcordoComercialRegraAcordo(0,codAcordo,convenio,regra,1))
				if campo="Inativa" set $$$FATAcordoComercialRegraAcordoInativa(objRegra) = valor
				set strStatus = $$$Save("FATAcordoComercialRegraAcordo",codAcordo_","_convenio_","_regra,objRegra,$$$OK)
				quit:$$$ISERR(strStatus)
			}
			
			;
			if 'regraContinuaAtiva{
				set obj = $get(^FATRegraComercialAcVal(0,codAcordo,nivelAcordo,regra,campo,datai,horai,dataf,horaf,1))
				set $$$FATRegraComercialAcValVigenciaAplicada(obj) = 1
				set strStatus = $$$Save("FATRegraComercialAcVal",codAcordo_","_nivelAcordo_","_regra_","_campo_","_datai_","_horai_","_dataf_","_horaf,obj,$$$OK)
				quit:$$$ISERR(strStatus)
			}
		}
		
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	if strStatus=$$$OK{
		tcommit
	}else{
		trollback
	}
	lock -^aplicaRegras
	quit strStatus]]></Implementation>
</Method>

<Method name="getRegras">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codTabela = $get(%request.Data("codTabela",1))
	set select = "select CodigodaRegra,Nome from  FATRegraComercial where Company=0 "
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodigodaRegra")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("Nome")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="recuperaValidacoes">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set retorno = []
	set primeiro = 1
	set dataInicialComp = $horolog
	set dataIni = ""
	for {
		set dataIni = $order(^mtemp.Validade(job,"Ativo",dataIni)) quit:dataIni=""
		set horaIni = ""
		for {
			set horaIni = $order(^mtemp.Validade(job,"Ativo",dataIni,horaIni)) quit:horaIni=""
			set dataFim = ""
			for {
				set dataFim = $order(^mtemp.Validade(job,"Ativo",dataIni,horaIni,dataFim)) quit:dataFim=""
				set horaFim = ""
				for {
					set horaFim = $order(^mtemp.Validade(job,"Ativo",dataIni,horaIni,dataFim,horaFim)) quit:horaFim=""
					set obj = $get(^mtemp.Validade(job,"Ativo",dataIni,horaIni,dataFim,horaFim,1))
					set situacao = +$$$FATRegraComercialValidadeValordoCampoDuranteaVigen(obj)
					;
					set inicial = "",final=""
					set $piece(inicial,",",1) = dataIni
					if horaIni'=0 set $piece(inicial,",",2) = horaIni
					set $piece(final,",",1) = dataFim
					if horaFim'=0 set $piece(final,",",2) = horaFim
					if inicial'=0{
						if $replace(inicial,",",".")>$replace(dataInicialComp,",","."){
							set dataFinal = $piece(inicial,",",1)
							set horaFinal = $piece(inicial,",",2)
							set horaFinal = horaFinal - 1
							if horaFinal<0 set horaFinal = 86399,dataFinal = dataFinal - 1
							set dataFinal = dataFinal_","_horaFinal
							set flPrimeiroDt = 0,situ = situacao
							if 'primeiro set flPrimeiroDt = dataInicialComp,situ = situacaoAnt
							set msgPeriodo = ..montaMensagemPeriodo(flPrimeiroDt,dataFinal)
							set linha = {}
							set linha.periodo = $select('situ=1:"Ativo",1:"Inativo")_" "_msgPeriodo
							set linha.auditoria = "SISTEMA"
							do retorno.%Push(linha)
						}
					}
					set primeiro=0
					;
					set criadoEm = $$$FATRegraComercialValidadeCriadoEm(obj)
					set criadoPor = $$$FATRegraComercialValidadeCriadoPor(obj)
					set alteradoEm = $$$FATRegraComercialValidadeAlteradoEm(obj)
					set alteradoPor = $$$FATRegraComercialValidadeAlteradoPor(obj)
					set auditoria = "Gravado por "_criadoPor_" em "_$zdatetime(criadoEm)
					if alteradoEm'="" set auditoria = "Gravado por "_alteradoPor_" em "_$zdatetime(alteradoEm)
					set msgPeriodo = ..montaMensagemPeriodo(inicial,final)
					set dataInicialComp = final,situacaoAnt=situacao
					set linha = {}
					set linha.periodo = $select(situacao=1:"Ativo",1:"Inativo")_" "_msgPeriodo
					set linha.auditoria = auditoria
					do retorno.%Push(linha)
					;
				}
			}
		}
	}
	if 'primeiro,final'=0{
		set dataInicial = $piece(final,",",1)
		set horaInicial = $piece(final,",",2)
		set horaInicial = horaInicial + 1
		if horaInicial>86399 set horaInicial = 0,dataInicial = dataInicial + 1
		set dataInicial = dataInicial_","_horaInicial
		set msgPeriodo = ..montaMensagemPeriodo(dataInicial,0)
		set linha = {}
		set linha.periodo = $select('situacao=1:"Ativo",1:"Inativo")_" "_msgPeriodo
		set linha.auditoria = "SISTEMA"
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="montaMensagemPeriodo">
<ClassMethod>1</ClassMethod>
<FormalSpec>inicial,final</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set msgRetorno = ""
	if inicial'=0 set msgRetorno = "de "_$zdatetime(inicial,4)_" "
	if final'=0 set msgRetorno = msgRetorno_"até "_$zdatetime(final,4)
	else  set msgRetorno = msgRetorno_"até sempre"
	if inicial=0,final=0 set msgRetorno = "para sempre"
	quit msgRetorno]]></Implementation>
</Method>

<Method name="recIntervaloAtual">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set obj = $get(^mtemp.Validade(job))
	set dataDe = $piece(obj,"~",1)
	set dataAte = $piece(obj,"~",2)
	set validoDe = 0
	set validoAte = 0
	if dataDe'="" set validoDe = 1,dataDe = $zdatetime(dataDe,3,7)
	if dataAte'="" set validoAte = 1,dataAte = $zdatetime(dataAte,3,7)
	set retorno = {}
	set formData = {}
	set:dataDe'="" formData.dataDe = dataDe
	set:dataAte'="" formData.dataAte = dataAte
	set formData.validoDe = +validoDe
	set formData.validoAte = +validoAte
	set retorno.formData = formData
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="confirmaIntervalo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set campos		= $get(%request.Data("campos",1))
	
	set strStatus = $$$OK
	tstart
	try{
		set campos 		= [].%FromJSON(campos)
		set validoDe 	= campos.validoDe
		set validoAte 	= campos.validoAte
		set dataDe 		= campos.dataDe
		set dataAte 	= campos.dataAte
		if validoDe = 1 {
			set dataDe = $zdatetimeh($piece(dataDe,"Z",1),3,7)
			set validoDe = dataDe
		}else{
			set validoDe = ""
		}
		if validoAte = 1 {
			set dataAte = $zdatetimeh($piece(dataAte,"Z",1),3,7)
			set validoAte = dataAte
		}else{
			set validoAte = ""
		}
		;
		set ^mtemp.Validade(job) = validoDe_"~"_validoAte
		set msgRetorno = "",alert=0
		set inicial = $piece(^mtemp.Validade(job),"~",1)
		set final = $piece(^mtemp.Validade(job),"~",2)
		;
		if inicial'="",$replace(inicial,",",".")>$replace($horolog,",","."){
			set data = $piece(inicial,",",1)
			set hora = $piece(inicial,",",2)
			set hora = hora - 1
			if hora<0 set hora = 86399,data=data-1
			set final = data_","_hora
			set inicial = ""
		}
		;
		if inicial'="" set msgRetorno = "De "_$zdatetime(inicial,4)_" "
		if final'="" set msgRetorno = msgRetorno_"até "_$zdatetime(final,4),alert=1
		else  set msgRetorno = msgRetorno_"até sempre"
		if inicial=0,final=0 set msgRetorno = "Sempre"
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set retorno.status 	= 1
		set retorno.type 	= "info"
		set retorno.mensagem="Dados confirmados com sucesso!"
		set retorno.msgRetorno = "Validade: "_msgRetorno
		set retorno.comValidade = alert
	}else{
		trollback
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()]]></Implementation>
</Method>

<Method name="salvar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codRegra		= $get(%request.Data("codRegra",1))
	set camposGeral		= $get(%request.Data("camposGeral",1))
	set camposRegra		= $get(%request.Data("camposRegra",1))
	set strStatus 		= $$$OK
	tstart
	try{
		set camposGeral		= [].%FromJSON(camposGeral)
		set camposRegra		= [].%FromJSON(camposRegra)
		;
		if '$data(^WWW128(0,"FATRegraComercial")){
			set obj = "RC000000000"
			set strStatus = $$$Save("WWW128","FATRegraComercial",obj,$$$YES)
			quit:$$$ISERR(strStatus)
		}		
		if codRegra="" set codRegra = $$GetNextNumber^COMUtils("FATRegraComercial","")
		;
		set nome = $zconvert(camposGeral.nome,"U")
		set nome = $zstrip(nome,"<>w")
		;
		if camposGeral.situacao{
			set rs = ##class(%SQL.Statement).%ExecDirect("","Select CodigodaRegra from FATRegraComercial where company=0 and Ativo=1 and %upper(Nome) = %upper('"_nome_"') and CodigodaRegra <> '"_codRegra_"'")
			while(rs.%Next()){
				set strStatus = "A regra de código '"_rs.%Get("CodigodaRegra")_"' possuí o mesmo nome!"
			}
		}
		quit:$$$ISERR(strStatus)
		;
		set objFATRegraComercial = ""
		set objFATRegraComercialOld = $get(^FATRegraComercial(YM,codRegra,1))
		set $$$FATRegraComercialCriadoEm(objFATRegraComercial) 		= $$$FATRegraComercialCriadoEm(objFATRegraComercialOld)
		set $$$FATRegraComercialCriadoPor(objFATRegraComercial) 	= $$$FATRegraComercialCriadoPor(objFATRegraComercialOld)
		set $$$FATRegraComercialAlteradoEm(objFATRegraComercial) 	= $$$FATRegraComercialAlteradoEm(objFATRegraComercialOld)
		set $$$FATRegraComercialAlteradoPor(objFATRegraComercial)	= $$$FATRegraComercialAlteradoPor(objFATRegraComercialOld)
		
		set $$$FATRegraComercialNome(objFATRegraComercial)				= nome
		set $$$FATRegraComercialDescricao(objFATRegraComercial)			= camposGeral.descricao
		set $$$FATRegraComercialTipodaRegra(objFATRegraComercial)		= camposGeral.tipo
		set situacao = camposGeral.situacao

		set dataIni = $piece($get(^mtemp.Validade(job)),"~",1)
		set dataFin = $piece($get(^mtemp.Validade(job)),"~",2)
		;
		if (dataIni'="")||(dataFin'=""){
			set strStatus = ..criaVigencia(codRegra,dataIni,dataFin,"Ativo",camposGeral.situacao)
		}else{
			set strStatus = ..removeVigencia(codRegra,"Ativo")
		}
		quit:$$$ISERR(strStatus)
		;
		set dataIni = $order(^FATRegraComercialValidades(0,1,0,codRegra,"Ativo",""))
		if dataIni'=""{
			set horaFin = $order(^FATRegraComercialValidades(0,1,0,codRegra,"Ativo",dataIni,""))
			set data = ""
			if dataIni'=0 set data = dataIni_"."_horaFin
			if data '= ""{
				set agora = $replace($horolog,",",".")
				if (data>agora){
					set situacao = 'situacao
				}
			}
		}
		set $$$FATRegraComercialAtivo(objFATRegraComercial)				= +situacao
		;
		set tipo = camposGeral.tipo
		if tipo="AJUSTEPRECO" set retorno = ..saveAjustePreco(camposRegra,.objFATRegraComercial) 
		if tipo="ALTERARRECEBEDOR" set retorno = ..saveAlterarRecebedor(camposRegra,.objFATRegraComercial) 
		if tipo="AUTORIZACAO" set retorno = ..saveAutorizacao(camposRegra,.objFATRegraComercial) 
		if tipo="CALCULOPRECO" set retorno = ..saveCalculoPreco(camposRegra,.objFATRegraComercial) 
		if tipo="CALCULOQTDE" set retorno = ..saveCalculoQuantidade(camposRegra,.objFATRegraComercial) 
		if tipo="CLASSIFICACAOITEM" set retorno = ..saveClassificacaoItem(camposRegra,.objFATRegraComercial) 
		if tipo="COBRANCAPARCIAL" set retorno = ..saveCobrancaParcial(camposRegra,.objFATRegraComercial) 
		if tipo="COBRARITEMCOMPOSTO" set retorno = ..saveCobrarItemComposto(camposRegra,.objFATRegraComercial) 
		if tipo="COBRARITEMMESMAEXEC" set retorno = ..saveCobrarItemMesmaExecucao(camposRegra,.objFATRegraComercial) 
		;if tipo="COBRARNUMCOMPCOMPOSTO" set retorno = ..saveCobrarNumeroComponentesComposto(camposRegra,.objFATRegraComercial) 
		;if tipo="CONFIGDOCUMENTACAO" set retorno = ..saveConfigDocumentacao(camposRegra,.objFATRegraComercial) 
		;if tipo="CONFIGGUIA" set retorno = ..saveConfigGuia(camposRegra,.objFATRegraComercial) 
		if tipo="COTAQTDE" set retorno = ..saveCotaQuantidade(camposRegra,.objFATRegraComercial) 
		if tipo="COTAVALOR" set retorno = ..saveCotaValor(camposRegra,.objFATRegraComercial) 
		if tipo="DESCPROGRESSIVO" set retorno = ..saveDescontoProgressivo(camposRegra,.objFATRegraComercial) 
		if tipo="DESDOBRE" set retorno = ..saveDesdobre(camposRegra,.objFATRegraComercial) 
		if tipo="ELEGIBILIDADE" set retorno = ..saveElegibilidade(camposRegra,.objFATRegraComercial) 
		if tipo="FRANQUIA" set retorno = ..saveFranquia(camposRegra,.objFATRegraComercial) 
		if tipo="IDENTIFICADORRECEBEDOR" set retorno = ..saveIdentificadorRecebedor(camposRegra,.objFATRegraComercial) 
		if tipo="IGNORAASSOCIACAO" set retorno = ..saveIgnoraAssociacao(camposRegra,.objFATRegraComercial) 
		if tipo="LIMITEDESCONTO" set retorno = ..saveLimiteDesconto(camposRegra,.objFATRegraComercial) 
		if tipo="LIMITETEMPO" set retorno = ..saveLimiteTempo(camposRegra,.objFATRegraComercial) 
		if tipo="OBRIGNUMCREDENCIADO" set retorno = ..saveObrigNumeroCredenciado(camposRegra,.objFATRegraComercial) 
		if tipo="OBRIGNUMGUIA" set retorno = ..saveObrigatorioNumeroGuia(camposRegra,.objFATRegraComercial) 
		if tipo="PGTOPARCIAL" set retorno = ..savePagamentoParcial(camposRegra,.objFATRegraComercial) 
		if tipo="PRAZOAUT" set retorno = ..savePrazoAutorizacao(camposRegra,.objFATRegraComercial) 
		if tipo="PRECOBASE" set retorno = ..savePrecoBase(camposRegra,.objFATRegraComercial) 
		if tipo="REDEFINIRCODIGO" set retorno = ..saveRedefinirCodigo(camposRegra,.objFATRegraComercial) 
		if tipo="STATUSCOBRANCA" set retorno = ..saveStatusCobranca(camposRegra,.objFATRegraComercial) 
		if tipo="TIPOATENDIMENTO" set retorno = ..saveTipoAtendimento(camposRegra,.objFATRegraComercial)
		if tipo="TROCAITEMLIMTEMPO" set retorno = ..saveTrocaItemLimiteTempo(camposRegra,.objFATRegraComercial) 
		if tipo="VALIDADETIPOSOLICITANTE" set retorno = ..saveValidadeTipoSolicitante(camposRegra,.objFATRegraComercial)
		
		;
		set strStatus = $$$Save("FATRegraComercial",codRegra,objFATRegraComercial,$$$YES)
		quit:$$$ISERR(strStatus)
		;
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set strStatus="Dados salvos com sucesso!"
		set retorno.status = 1
		do retorno.%Set("codRegra",codRegra,"String")
		set retorno.type = "success"
		set retorno.mensagem = strStatus
	}else{
		trollback
		set retorno.status = 0
		set retorno.type = "error"
		set retorno.mensagem = $$$Text(strStatus)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="criaVigencia">
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra,dataHoraInicial,dataHoraFinal,campo,valor</FormalSpec>
<Implementation><![CDATA[	/*set dataHoraInicialConv = $replace(dataHoraInicial,",",".")
	set dataHoraFinalConv = $replace(dataHoraFinal,",",".")
	set data=""
	for {
		set data = $order(^FATRegraComercialValidade(0,codRegra,campo,data)) quit:data=""
		set hora = ""
		for {
			set hora = $order(^FATRegraComercialValidade(0,codRegra,campo,data,hora)) quit:hora=""
			set obj  = $get(^FATRegraComercialValidade(0,codRegra,campo,data,hora,1))
			set inicio = ""
			set final = ""
			set $piece(inicio,".",1) = data
			if hora'=0{
				set $piece(inicio,".",2) = hora
			}
			set $piece(final,".",1) = $$$FATRegraComercialValidadeDataFinaldaVigencia(obj)
			if $$$FATRegraComercialValidadeHoraFinaldaVigencia(obj)'=""{
				set $piece(final,".",2) = $$$FATRegraComercialValidadeHoraFinaldaVigencia(obj)
			}
			if inicio=0{
				if (dataHoraFinalConv<final){
					set dataN = $piece(dataHoraFinalConv,",",1)
					set horaN = $piece(dataHoraFinalConv,",",2)
					set horaN = horaN + 1
					if horaN>86399 set horaN = 0,dataN = dataN + 1
					set strStatus = $$$Kill("FATRegraComercialValidade",codRegra_","_campo_","_data_","_hora)
					quit:$$$ISERR(strStatus)
					set strStatus = $$$Save("FATRegraComercialValidade",codRegra_","_campo_","_dataN_","_horaN,obj,$$$OK)
					quit:$$$ISERR(strStatus)
				}
			}
			if final=""{
				if (dataHoraInicial>inicio){
					set dataN = $piece(dataHoraInicial,",",1)
					set horaN = $piece(dataHoraInicial,",",2)
					set horaN = horaN - 1
					if horaN<0 set horaN = 86399,dataN = dataN - 1
					set $$$FATRegraComercialValidadeDataFinaldaVigencia(obj) = dataN
					set $$$FATRegraComercialValidadeHoraFinaldaVigencia(obj) = horaN
					set strStatus = $$$Save("FATRegraComercialValidade",codRegra_","_campo_","_data_","_hora,obj,$$$OK)
					quit:$$$ISERR(strStatus)
				}
			}
		}
	}*/
	set VigenciaAplicada=0
	set datai=""
	for {
		set datai = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codRegra,campo,datai)) quit:datai=""
		set horai = ""
		for {
			set horai = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codRegra,campo,datai,horai)) quit:horai=""
			set dataf=""
			for {
				set dataf = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codRegra,campo,datai,horai,dataf)) quit:dataf=""
				set horaf = ""
				for {
					set horaf = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codRegra,campo,datai,horai,dataf,horaf)) quit:horaf=""
					set strStatus = $$$Kill("FATRegraComercialValidade",codRegra_","_campo_","_datai_","_horai_","_dataf_","_horaf)
					quit:$$$ISERR(strStatus)
				}
			}
		}
		quit:$$$ISERR(strStatus)
	}

	;
	if $$$ISOK(strStatus){
		;
		
		;
		set obj = ""
		set $$$FATRegraComercialValidadeValordoCampoDuranteaVigen(obj) = valor
		set $$$FATRegraComercialValidadeVigenciaAplicada(obj) = 0
		set dataIChave = 0,horaIChave = 0
		set dataFChave = 0,horaFChave = 0
		if $piece(dataHoraInicial,",",1)'="" set dataIChave = $piece(dataHoraInicial,",",1)
		if $piece(dataHoraInicial,",",2)'="" set horaIChave = $piece(dataHoraInicial,",",2)
		if $piece(dataHoraFinal,",",1)'="" set dataFChave = $piece(dataHoraFinal,",",1)
		if $piece(dataHoraFinal,",",2)'="" set horaFChave = $piece(dataHoraFinal,",",2)
		set strStatus = $$$Save("FATRegraComercialValidade",codRegra_","_campo_","_dataIChave_","_horaIChave_","_dataFChave_","_horaFChave,obj,$$$YES)
	}
	quit strStatus]]></Implementation>
</Method>

<Method name="removeVigencia">
<ClassMethod>1</ClassMethod>
<FormalSpec>codRegra,campo</FormalSpec>
<Implementation><![CDATA[	set VigenciaAplicada = 0
	set datai = ""
	for {
		set datai = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codRegra,campo,datai)) quit:datai=""
		set horai = ""
		for {
			set horai = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codRegra,campo,datai,horai)) quit:horai=""
			set dataf = ""
			for {
				set dataf = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codRegra,campo,datai,horai,dataf)) quit:dataf=""
				set horaf = ""
				for {
					set horaf = $order(^FATRegraComercialValidades(0,1,VigenciaAplicada,codRegra,campo,datai,horai,dataf,horaf)) quit:horaf=""
					set strStatus = $$$Kill("FATRegraComercialValidade",codRegra_","_campo_","_datai_","_horai_","_dataf_","_horaf)
					quit:$$$ISERR(strStatus)
				}
			}
		}
		quit:$$$ISERR(strStatus)
	}
	quit strStatus]]></Implementation>
</Method>

<Method name="saveAjustePreco">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialTipodeAjuste(objetoSave) 	= objRegra.tipoAjuste
	set $$$FATRegraComercialPercentual(objetoSave) 		= objRegra.percentual
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveAlterarRecebedor">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialRecebedor(objetoSave) 	= objRegra.recebedor
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveAutorizacao">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialCampoObrigatorio(objetoSave) 			= objRegra.senhaObrigatoria
	set $$$FATRegraComercialMascaradeValidacaodoCampo(objetoSave) 	= objRegra.mascara
	set $$$FATRegraComercialMinimodeCaracteres(objetoSave) 			= objRegra.minimoCaracteres
	set $$$FATRegraComercialMaximodeCaracteres(objetoSave) 			= objRegra.maximoCaracteres
	set $$$FATRegraComercialAplicavelaPartirdoModulo(objetoSave) 	= objRegra.aPartirDe
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveCalculoPreco">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialTipodeCalculopreco(objetoSave) 			= objRegra.tipoCalculo
	if objRegra.tipoCalculo=1{
		do ..savePrecoBase(objRegra,.objetoSave)
	}
	if objRegra.tipoCalculo=2{
		do ..saveAjustePreco(objRegra,.objetoSave)
	}
	if objRegra.tipoCalculo=3{
		set $$$FATRegraComercialFormula(objetoSave) 			= objRegra.formula
	}
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveCalculoQuantidade">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialTipodeCalculoquantidade(objetoSave) 	= objRegra.tipoCalculo
	if objRegra.tipoCalculo=1{
		set $$$FATRegraComercialQuantidadeBase(objetoSave) 			= objRegra.quantidade
	}
	if objRegra.tipoCalculo=2{
		set $$$FATRegraComercialFormula(objetoSave) 				= objRegra.formula
	}
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveClassificacaoItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialClassificacaodoItem(objetoSave) 	= objRegra.classificacao
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveCobrancaParcial">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialPermitirCobrancaParcial(objetoSave) 	= objRegra.cobrancaParcial
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveCobrarItemComposto">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialCodigodoProduto(objetoSave) 	= objRegra.itemINART
	;
	set itensNaoInclusos = ""
	set iterator = objRegra.itemINARTComposto.%GetIterator()
	while iterator.%GetNext(.indice,.valor){
		set:itensNaoInclusos'="" itensNaoInclusos = itensNaoInclusos_";"
		set itensNaoInclusos = itensNaoInclusos_valor
	}
	;
	set $$$FATRegraComercialItensNaoInclusos(objetoSave) 	= itensNaoInclusos
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveCobrarItemMesmaExecucao">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialEstrategiadeCobranca(objetoSave) 	= objRegra.cobrarItens
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveCotaQuantidade">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialNumerodeProcedimentos(objetoSave) 	= objRegra.numeroProcedimentos
	set $$$FATRegraComercialPeriodicidade(objetoSave) 	= objRegra.periodicidade
	if objRegra.periodicidade=1{
		set $$$FATRegraComercialDiaInicial(objetoSave) 	= objRegra.inicioDiaMensal
	}
	if objRegra.periodicidade=2{
		set $$$FATRegraComercialDiaInicial(objetoSave) 	= objRegra.inicioDiaTrimestral
		set $$$FATRegraComercialMesInicial(objetoSave) 	= objRegra.inicioMesTrimestral
	}
	if objRegra.periodicidade=3{
		set $$$FATRegraComercialDiaInicial(objetoSave) 	= objRegra.inicioDiaTrimestral
		set $$$FATRegraComercialMesInicial(objetoSave) 	= objRegra.inicioMesTrimestral
	}
	
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveCotaValor">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	do ..savePrecoBase(objRegra,.objetoSave)
	set $$$FATRegraComercialPeriodicidade(objetoSave) 	= objRegra.periodicidade
	if objRegra.periodicidade=1{
		set $$$FATRegraComercialDiaInicial(objetoSave) 	= objRegra.inicioDiaMensal
	}
	if objRegra.periodicidade=2{
		set $$$FATRegraComercialDiaInicial(objetoSave) 	= objRegra.inicioDiaTrimestral
		set $$$FATRegraComercialMesInicial(objetoSave) 	= objRegra.inicioMesTrimestral
	}
	if objRegra.periodicidade=3{
		set $$$FATRegraComercialDiaInicial(objetoSave) 	= objRegra.inicioDiaTrimestral
		set $$$FATRegraComercialMesInicial(objetoSave) 	= objRegra.inicioMesTrimestral
	}
	
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveDescontoProgressivo">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialPercentual(objetoSave) 			= objRegra.percentual
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveDesdobre">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialTabelaComercial(objetoSave) 			= objRegra.tabelaComercial
	set $$$FATRegraComercialItemdaTabelaComercial(objetoSave) 		= objRegra.itemTabelaComercial
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveElegibilidade">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialItemElegivel(objetoSave) 		= objRegra.elegivel
	set $$$FATRegraComercialMensagem(objetoSave) 			= objRegra.mensagem
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveFranquia">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	do ..savePrecoBase(objRegra,.objetoSave)
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveIdentificadorRecebedor">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialIdentificadordoRecebedor(objetoSave) 		= objRegra.identificacao
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveIgnoraAssociacao">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialItemElegivel(objetoSave) 		= 'objRegra.elegivel
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveLimiteDesconto">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set perfil = ""
	if objRegra.grupoPermissao'=""{
		set iterator = objRegra.grupoPermissao.%GetIterator()
		while iterator.%GetNext(.indice,.valor){
			if perfil'="" set perfil = perfil_";"
			set perfil = perfil_valor
		}
	}
	set $$$FATRegraComercialCodigodoPerfil(objetoSave) 		= perfil
	set $$$FATRegraComercialPercentual(objetoSave) 			= objRegra.percentual
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveLimiteTempo">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialNumerodeProcedimentos(objetoSave)		= objRegra.numeroProcedimentos
	set $$$FATRegraComercialLimitedeTempodias(objetoSave) 			= objRegra.tempoLimite
	
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveObrigNumeroCredenciado">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialCampoObrigatorio(objetoSave) 			= objRegra.senhaObrigatoria
	set $$$FATRegraComercialMascaradeValidacaodoCampo(objetoSave) 	= objRegra.mascara
	set $$$FATRegraComercialLegendaparaaMascara(objetoSave) 		= objRegra.mascaraLegenda
	set $$$FATRegraComercialMinimodeCaracteres(objetoSave) 			= objRegra.minimoCaracteres
	set $$$FATRegraComercialMaximodeCaracteres(objetoSave) 			= objRegra.maximoCaracteres
	set $$$FATRegraComercialAplicavelaPartirdoModulo(objetoSave) 	= objRegra.aPartirDe
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveObrigatorioNumeroGuia">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialCampoObrigatorio(objetoSave) 			= objRegra.senhaObrigatoria
	set $$$FATRegraComercialMinimodeCaracteres(objetoSave) 			= objRegra.minimoCaracteres
	set $$$FATRegraComercialMaximodeCaracteres(objetoSave) 			= objRegra.maximoCaracteres
	set $$$FATRegraComercialAplicavelaPartirdoModulo(objetoSave) 	= objRegra.aPartirDe
	quit $$$OK]]></Implementation>
</Method>

<Method name="savePagamentoParcial">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialTipodePagamento(objetoSave)		= objRegra.tipoPagamento
	set $$$FATRegraComercialPercentual(objetoSave) 			= objRegra.percentual
	quit $$$OK]]></Implementation>
</Method>

<Method name="savePrazoAutorizacao">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialLimitedeTempodias(objetoSave)		= objRegra.prazo
	quit $$$OK]]></Implementation>
</Method>

<Method name="savePrecoBase">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialMoeda(objetoSave) 			= objRegra.moeda
	set $$$FATRegraComercialPrecoBase(objetoSave)		= objRegra.valor
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveRedefinirCodigo">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialTrocaaDescricao(objetoSave)		= objRegra.trocaDescricao
	set $$$FATRegraComercialTabelaComercial(objetoSave)		= objRegra.tabelaComercial
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveStatusCobranca">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialStatusdaCobranca(objetoSave)	= objRegra.statusCobranca
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveTipoAtendimento">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialCodigodoTipodaGuia(objetoSave)			= objRegra.tipoGuia
	set $$$FATRegraComercialCodigodoTipodoAtendimento(objetoSave)	= objRegra.tipoAtendimento
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveTrocaItemLimiteTempo">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set $$$FATRegraComercialLimitedeTempodias(objetoSave)		= objRegra.limiteTempo
	set $$$FATRegraComercialTabelaComercial(objetoSave)			= objRegra.tabelaComercial
	set $$$FATRegraComercialItemdaTabelaComercial(objetoSave)	= objRegra.itemTabelaComercial
	quit $$$OK]]></Implementation>
</Method>

<Method name="saveValidadeTipoSolicitante">
<ClassMethod>1</ClassMethod>
<FormalSpec>objRegra,&amp;objetoSave</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set documentos=""
	if objRegra.documento'=""{
		set iterator = objRegra.documento.%GetIterator()
		while iterator.%GetNext(.indice,.valor){
			if documentos'="" set documentos = documentos_";"
			set documentos = documentos_valor
		}
	}
	set $$$FATRegraComercialDocumento(objetoSave)					= documentos
	set $$$FATRegraComercialAplicavelaPartirdoModulo(objetoSave)	= objRegra.aPartirDe
	quit $$$OK]]></Implementation>
</Method>

<Method name="getINARTProcedimento">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set filter = $get(%request.Data("filter",1))
	set codigo = $get(%request.Data("codigo",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	Set sort 	= $Get(%request.Data("sort",1))
	Set searchValue = $Get(%request.Data("searchValue",1))
	if take="" set take=20
	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200

	set select = "select top "_top_" CodigoProcedimento,$$SQLGetDescricaoProduto^VARSQL(CodigoProcedimento,1) Nome from  VARProcedItensUtilizados where Company=0"
	if codigo'="" set select = select_" and CodigoProcedimento = '"_codigo_"'"
	else  if searchValue'="" set select = select_" and (%upper($$SQLGetTextoSemAcento^VARSQL(CodigoProcedimento)) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')) or %upper($$SQLGetTextoSemAcento^VARSQL($$SQLGetDescricaoProduto^VARSQL(CodigoProcedimento))) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')) or %upper($$SQLGetTextoSemAcento^VARSQL($$SQLGetDescricaoProduto^VARSQL(CodigoProcedimento,1))) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')))"
	set select = "select * from ("_select_" group by CodigoProcedimento) where %VID between "_skip_" and "_take
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodigoProcedimento")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("Nome")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="getINARTProcedimentoComposto">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set procedimento = $get(%request.Data("procedimento",1))
	set select = "select CodigoItem,$$SQLGetDescricaoProduto^VARSQL(CodigoItem,1) Nome from  VARProcedItensUtilizados where Company=0"
	set select = select_" and CodigoProcedimento = '"_procedimento_"'"
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodigoItem")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("Nome")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="getGrupoPermissao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set select = "select CodModelo,NomedoModelo from  VARPerfilModelo where Company=0"
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodModelo")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("NomedoModelo")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="getFontePagadora">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set filter = $get(%request.Data("filter",1))
	set codigo = $get(%request.Data("codigo",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	Set sort 	= $Get(%request.Data("sort",1))
	Set searchValue = $Get(%request.Data("searchValue",1))
	Set campo	 = $Get(%request.Data("campo",1))
	set select = "select CodigodaOrganizacao,Nome from FATOrganizacao where Company=0 and ativo=1"
	if campo'="" set select = select_" and "_campo_" = 1"
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodigodaOrganizacao")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("Nome")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="getTabelaComercial">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set searchValue = $get(%request.Data("searchValue",1))
	Set codigo	 	= $Get(%request.Data("codigo",1))
	Set take 		= $Get(%request.Data("take",1))
	Set skip 		= $Get(%request.Data("skip",1))
	;
	if take="" set take=20
	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200

	set select = "select top "_top_" CodigodaTabela,Nome from  FATTabelaComercial where Company=0 and ativo=1"
	if codigo'="" set select = select_" and CodigodaTabela = '"_codigo_"'"
	else  if searchValue'="" set select = select_" and (%upper($$SQLGetTextoSemAcento^VARSQL(CodigodaTabela)) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')) or %upper($$SQLGetTextoSemAcento^VARSQL(Nome)) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')))"
	set select = "select * from ("_select_") where %VID between "_skip_" and "_take
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodigodaTabela")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("Nome")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="getTabelaComercialItens">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set tabela = $get(%request.Data("tabela",1))
	set searchValue = $get(%request.Data("searchValue",1))
	Set codigo 	= $Get(%request.Data("codigo",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	;
	if take="" set take=20
	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200
	;
	set select = "select top "_top_" CodigodoItem,DescricaodoItem from  FATTabelaComercialItem where Company=0 and CodigodaTabela='"_tabela_"'"
	if codigo'="" set select = select_" and CodigodoItem = '"_codigo_"'"
	else  if searchValue'="" set select = select_" and (%upper($$SQLGetTextoSemAcento^VARSQL(CodigodoItem)) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')) or %upper($$SQLGetTextoSemAcento^VARSQL(DescricaodoItem)) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')))"
	set select = "select * from ("_select_") where %VID between "_skip_" and "_take
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodigodoItem")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("DescricaodoItem")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="getTipoAtendimentoDataSource">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set tabela = $get(%request.Data("tabela",1))
	set searchValue = $get(%request.Data("searchValue",1))
	Set codigo 	= $Get(%request.Data("codigo",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	;
	if take="" set take=20
	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200
	;
	set select = "select top "_top_" SearchWord,Text from INPARA where Company=0 and Language1='PT' and ParameterName='"_tabela_"'"
	if codigo'="" set select = select_" and SearchWord = '"_codigo_"'"
	else  if searchValue'="" set select = select_" and (%upper($$SQLGetTextoSemAcento^VARSQL(SearchWord)) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')) or %upper($$SQLGetTextoSemAcento^VARSQL(Text)) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')))"
	set select = "select * from ("_select_" order by +SearchWord) where %VID between "_skip_" and "_take
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("SearchWord")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("Text")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="validaSessao">
<ClassMethod>1</ClassMethod>
<FormalSpec>callMode=""</FormalSpec>
<Implementation><![CDATA[	set status = $$VerifySession^VARCSPUtils(YBED, YUSER)
	if status=0||(YBED="UNKNOWN"){
		set status=0
		set %response.Status="401 Unauthorized"
		set resp={}
		set resp.status=0
		set resp.mensagem="Usuário não está logado ou a sessão expirou."
		write resp.%ToJSON()
	}elseif callMode=""{
		set resp={}
		set resp.status=1
		write resp.%ToJSON()
	}
	quit status]]></Implementation>
</Method>
</Class>
</Export>