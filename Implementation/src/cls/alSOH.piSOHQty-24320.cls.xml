<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSOH.piSOHQty">
<Abstract>1</Abstract>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>

<Method name="GetQtyOnHand">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="&quot;,pidStorage:alLOC.dStorage="&quot;,pblnExclBlocked:%Boolean=1</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Return:
	; 	QtyOnHand for location and optionally specific storage
	; 	
	; History:
	; 22-Sep-2008	HQN		Moving due to compiled code exceeding 32k
	; 19-Sep-2008	HQN		SR15861: pidStorage now taken into account
	; 17-Sep-2008	HQN		SR15861: Created
	;-------------------------------------------------------------------------------
	set fltQtyOnHand = 0
	if pidLocn = "" {
		if pblnExclBlocked {
			&sql(SELECT SUM(QtyOnHand) into :fltQtyOnHand
				FROM alSOH.dSOH 
				WHERE
					Item = :pidItem AND 
					(Storage->StorageIsBlocked IS NULL OR Storage->StorageIsBlocked = 0)
				)
		} else {
			&sql(SELECT SUM(QtyOnHand) into :fltQtyOnHand 
				FROM alSOH.dStockBalance 
				WHERE
					Item = :pidItem
				)
		}
	} else {
		if pblnExclBlocked {
			if pidStorage = "" {
				&sql(SELECT SUM(QtyOnHand) into :fltQtyOnHand 
					FROM alSOH.dSOH 
					WHERE 
						Item = :pidItem            AND 
						Storage->Location=:pidLocn AND 
						(Storage->StorageIsBlocked IS NULL OR Storage->StorageIsBlocked = 0)
					)
			} else {
				&sql(SELECT SUM(QtyOnHand) into :fltQtyOnHand 
					FROM alSOH.dSOH 
					WHERE 
						Item = :pidItem            AND 
						Storage=:pidStorage        AND
						Storage->Location=:pidLocn AND 
						(Storage->StorageIsBlocked IS NULL OR Storage->StorageIsBlocked = 0)
					)
			}
		} else {
			if pidStorage = "" {
				&sql(SELECT SUM(QtyOnHand) into :fltQtyOnHand 
					FROM alSOH.dStockBalance 
					WHERE 
						Item = :pidItem    AND 
						Location=:pidLocn
					)
			} else {
				&sql(SELECT SUM(QtyOnHand) into :fltQtyOnHand 
					FROM alSOH.dSOH 
					WHERE 
						Item=:pidItem       AND 
						Storage=:pidStorage AND
						Storage->Location=:pidLocn
					)
			}
		}
	}
	quit fltQtyOnHand
]]></Implementation>
</Method>

<Method name="GetQtyAvailable">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="&quot;,pidStorage:alLOC.dStorage="&quot;,pblnExclBlocked:%Boolean=1,pidProgram:%String="&quot;,pidExclExpired:%Boolean=1</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Returns sourcable quantity
	; 
	; NOTE: blnBlocked also blocks expired goods
	; History:
	; 06-Jul-2012	shobby	SR18055: New parameter pidExclExpired on GetQtyAvailable, redirected to new routine.
	; 04-Dec-2009	shobby	SR17034: pidProgram
	; 23-Jan-2009	HQN		SR16127: Alternative refactored SQL without -> in 
	; 							JOIN ON clauses
	; 09-Oct-2008	HQN		SR16000: Incorrect usage of WHERE clause for State comparisons
	; 08-Oct-2008	HQN		SR16000: State Check incorrect, Cache outer join ON
	; 							clause may need additional where clauses
	; 07-Oct-2008	HQN		SR16000: Corrected SQL, Group By added, sum of results.
	; 							Had Count(dPlannedMovements) * QtyAvailable records
	; 							duplicated
	; 							State->StateId = 3 check now for InProgress
	; 							dPlannedMovements only
	; 19-Sep-2008	HQN		SR15861: pidStorage now taken into account
	; 18-Sep-2008	HQN		SR15861: Take into account Use By Date
	; 17-Sep-2008	HQN		SR15861: Created
	;-------------------------------------------------------------------------------
	
	quit $$GetQtyAvailable^INSOHQTY(pidItem,pidLocn,pidStorage,pblnExclBlocked,pidProgram,pidExclExpired) ;SR18055
]]></Implementation>
</Method>

<Method name="GetQtyBlocked">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="&quot;,pidStorage:alLOC.dStorage="&quot;,pblnExclBlocked:%Boolean=1</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Returns Blocked and Expired Qty for optional Location/Storage
	; 
	; FIXME : pblnExclBlocked is irrelevant as this method is intended to get the
	;         blocked quantity - remove
	; 
	; History:
	; 15-Oct-2008	HQN	Only show blocked, ignore planned
	; 07-Oct-2008	HQN	SR16000: Check for InProgress dPlannedMovements only
	; 19-Sep-2008	HQN	SR15861: pidStorage now taken into account
	; 18-Sep-2008	HQN	SR15861: Created
	;-------------------------------------------------------------------------------
	set fltQtyBlocked = 0
	set dteToday = +$horolog
	if pidLocn = "" {
		&sql(SELECT SUM(QtyOnHand) INTO :fltQtyBlocked
				FROM alSOH.dBundleStock
				LEFT JOIN alSOH.dBundleAttribute ON 
					dBundleAttribute.Bundle = dBundleStock.Bundle AND 
					dBundleAttribute.AttributeName = "Use By Date"
				WHERE
					dBundleStock.Item=:pidItem AND
					(Storage->StorageIsBlocked = 1 OR
					  (dBundleAttribute.ID IS NOT NULL AND
					    (dBundleAttribute.AttributeValue IS NULL OR
					      (dBundleAttribute.AttributeValue IS NOT NULL AND
					       dBundleAttribute.AttributeValue <= :dteToday)
						)
				      )
					)
		)
		
	} else {
		if pidStorage = "" {
			&sql(SELECT SUM(QtyOnHand) INTO :fltQtyBlocked
					FROM alSOH.dBundleStock
					LEFT JOIN alSOH.dBundleAttribute ON 
						dBundleAttribute.Bundle = dBundleStock.Bundle AND 
						dBundleAttribute.AttributeName = "Use By Date"
					WHERE
						dBundleStock.Item=:pidItem     AND
						Storage->Location=:pidLocn     AND
						(Storage->StorageIsBlocked = 1 OR
						  (dBundleAttribute.ID IS NOT NULL AND
						    (dBundleAttribute.AttributeValue IS NULL OR
						      (dBundleAttribute.AttributeValue IS NOT NULL AND
						       dBundleAttribute.AttributeValue <= :dteToday)
						    )
						  )
					    )
			)
			
		} else {
			&sql(SELECT SUM(QtyOnHand) INTO :fltQtyBlocked
					FROM alSOH.dBundleStock
					LEFT JOIN alSOH.dBundleAttribute ON 
						dBundleAttribute.Bundle = dBundleStock.Bundle AND 
						dBundleAttribute.AttributeName = "Use By Date"
					WHERE
						dBundleStock.Item=:pidItem     AND
						Storage=:pidStorage            AND
						Storage->Location=:pidLocn     AND
						(Storage->StorageIsBlocked = 1 OR
						  (dBundleAttribute.ID IS NOT NULL AND
						    (dBundleAttribute.AttributeValue IS NULL OR 
						      (dBundleAttribute.AttributeValue IS NOT NULL AND
						       dBundleAttribute.AttributeValue <= :dteToday)
						    )
						  )
						)
			)
		}
	}
	quit fltQtyBlocked
]]></Implementation>
</Method>

<Method name="GetQtyPlanned">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="&quot;,pidStorage:alLOC.dStorage="&quot;,pblnExclBlocked:%Boolean=1</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 13-Oct-2008	HQN	Missed a block, implementing
	; 22-Sep-2008	HQN	32k INT size hit
	; 19-Sep-2008	HQN	SR15861: pidStorage now taken into account
	; 18-Sep-2008	HQN	SR15861: Created
	;-------------------------------------------------------------------------------
	set fltQtyPlanned = 0
	if pidLocn = "" {
		if pblnExclBlocked {
			; 13-Oct-2008 vvvv
			&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned 
					FROM alDRP.dPlannedMovement
					WHERE
						Item=:pidItem    AND
						(FromStorage->StorageIsBlocked = 0 OR FromStorage->StorageIsBlocked IS NULL) AND
						(ToStorage->StorageIsBlocked = 0   OR ToStorage->StorageIsBlocked IS NULL)   AND
						State->StateId=3
			)
			; 13-Oct-2008 ^^^^
			
		} else {
			&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned
					FROM alDRP.dPlannedMovement 
					WHERE 
						Item=:pidItem    AND
						State->StateId=3
			)
		}
		
	} else {
		if pblnExclBlocked {
			if pidStorage = "" {
				&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned
						FROM alDRP.dPlannedMovement 
						WHERE 
							Item=:pidItem     AND
							(FromStorage->StorageIsBlocked = 0 OR FromStorage->StorageIsBlocked IS NULL) AND 
							(ToStorage->StorageIsBlocked = 0   OR ToStorage->StorageIsBlocked IS NULL)   AND 
							FromLocn=:pidLocn AND
							State->StateId=3
				)
				
			} else {
				&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned
						FROM alDRP.dPlannedMovement 
						WHERE 
							Item=:pidItem           AND
							FromStorage=:pidStorage AND
							(FromStorage->StorageIsBlocked = 0 OR FromStorage->StorageIsBlocked IS NULL) AND 
							(ToStorage->StorageIsBlocked = 0   OR ToStorage->StorageIsBlocked IS NULL)   AND 
							FromLocn=:pidLocn       AND
							State->StateId=3
				)
			}
			
		} else {
			if pidStorage = "" {
				&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned
						FROM alDRP.dPlannedMovement 
						WHERE 
							Item=:pidItem     AND
							FromLocn=:pidLocn AND
							State->StateId=3
				)
				
			} else {
				&sql(SELECT IFNULL(SUM(QtyRequired),0,SUM(QtyRequired)) INTO :fltQtyPlanned
						FROM alDRP.dPlannedMovement 
						WHERE 
							Item=:pidItem           AND
							FromStorage=:pidStorage AND
							FromLocn=:pidLocn       AND
							State->StateId=3
				)
			}
		}
	}
	quit fltQtyPlanned
]]></Implementation>
</Method>
</Class>
</Export>