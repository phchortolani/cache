<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.Dashboard.IndicatorLamp">
<Description><![CDATA[
SVG-based Traffic Light meter for Ensemble Dashboard.]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Meter</Super>
<System>3</System>

<Parameter name="MINHEIGHT">
<Default>25</Default>
</Parameter>


<Parameter name="MINWIDTH">
<Default>50</Default>
</Parameter>


<Parameter name="WIDTH">
<Default>75</Default>
</Parameter>


<Parameter name="HEIGHT">
<Default>25</Default>
</Parameter>


<Parameter name="SHOWLABEL">
<Default>0</Default>
</Parameter>


<Method name="OnSVGStyle">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<

	.IndicatorLamp-body {
		fill: black;
		stroke: black;
		stroke-width: 1px;
	}

	.IndicatorLamp-lampHigh {
		fill: url(#IndicatorLamp-highGrad);
		stroke: black;
		stroke-width: 1px;
	}

	.IndicatorLamp-lampLow {
		fill: url(#IndicatorLamp-lowGrad);
		stroke: black;
		stroke-width: 1px;
	}

	.IndicatorLamp-lampOFF {
		fill: gray;
		stroke: black;
		opacity: 0.5;
		stroke-width: 1px;
	}

	.IndicatorLamp-textOFF {
		pointer-events: none;
		font-size: 8;
		fill: black;
		stroke: none;
		font-weight: bold;
	}

	>
]]></Implementation>
</Method>

<Method name="OnSVGScript">
<Description><![CDATA[
Draw the script section of this SVG meter]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&js<
	
function IndicatorLamp_setProperty(property,value)
{
	switch (property) {
	default:
		return false;
	case 'level':
		if (value == this.level) {
			return;
		}
	
		// update level of gauge
		this.level = value;
		
		var id = this.meterId;
	
		// thresholds depend on direction of range...
		var tlower, tupper;
		if (greaterThanEq(this.rangeUpper,this.rangeLower)) {
			tlower = this.thresholdLower;
			tupper = this.thresholdUpper;
		}
		else {
			tlower = this.thresholdUpper;
			tupper = this.thresholdLower;
		}

		// calculate if lamp should be on
		var lampState = 'OFF';

		if (lessThanEq(this.level,tlower)) {
			// below low thresh:
			lampState = 'Low';
		}
		else if (greaterThanEq(this.level,tupper)) {
			// above high thresh:
			lampState = 'High';
		}
		
		// update lamp
		var lamp = document.getElementById(id + "_lamp");
		lamp.setAttribute("class", "IndicatorLamp-lamp" + lampState);
		break;
	}

	return true;
}
	>
]]></Implementation>
</Method>

<Method name="OnSVGDefs">
<Description><![CDATA[
Draw the defs section of this SVG meter]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<

<linearGradient id="IndicatorLamp-highGrad" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:darkgreen" />
<stop offset="30%" style="stop-color:#00FF00" />
<stop offset="70%" style="stop-color:#00FF00" />
<stop offset="100%" style="stop-color:darkgreen" />
</linearGradient>

<linearGradient id="IndicatorLamp-lowGrad" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:darkred" />
<stop offset="30%" style="stop-color:red" />
<stop offset="70%" style="stop-color:red" />
<stop offset="100%" style="stop-color:darkred" />
</linearGradient>

>
]]></Implementation>
</Method>

<Method name="OnSVGBody">
<Description><![CDATA[
Draw the body of this SVG meter]]></Description>
<Implementation><![CDATA[
	Set off = (..Width / 2) - 5
	Set id = ..MeterId
	
	&html<
		<rect class="IndicatorLamp-body" x="#((..Width/2)-off)#" y="5" width="#(..Width-10)#" height="16" rx="2" />
		<rect id="#(id)#_lamp" class="IndicatorLamp-lampOFF" x="#((..Width/2)-off)#" y="5" width="#(..Width-10)#" height="16" rx="5" />
		<text id="#(id)#_lampText" class="IndicatorLamp-textOFF" x="#(..Width/2)#" y="16" text-anchor="middle">#(..Label)#</text>
	>
]]></Implementation>
</Method>
</Class>
</Export>