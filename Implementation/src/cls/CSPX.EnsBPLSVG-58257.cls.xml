<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsBPLSVG">
<Description><![CDATA[
Renders SVG canvas for BPL editor]]></Description>
<IncludeCode>Ensemble,EnsUI</IncludeCode>
<Super>%CSP.Page</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>EnsBPL</Default>
</Parameter>


<Parameter name="CONTENTTYPE">
<Default>image/svg+xml</Default>
</Parameter>


<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// Avoid IE HTTP 1.1 bugs
	Set %response.HTTPVersion = "HTTP/1.0"

	// Workaround for HTTPS
	If (%request.Secure) {
		Do %response.SetHeader("Cache-Control","private")
	}

	// force output to be UTF-8
	Set %response.CharSet="UTF-8"

	// prevent session blocking
	Do %session.Unlock()

	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Write "<?xml version=""1.0"" ?>",!
	//Write "<!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 20010904//EN"" ""http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"">",!

	&html<<svg 
			xmlns="http://www.w3.org/2000/svg"
			xmlns:xlink="http://www.w3.org/1999/xlink"
			id="main" 
			width="2000" height="2000" 
			viewBox="0 0 2000 2000" 
			onload="Initialize()" 
			zoomAndPan="disable" 
			onmousedown="svgMouseDown(evt)">>

	Do ..DrawStyleSheet()
	Do ..DrawDefs()
	Do ..DrawScript()
	Do ..DrawCanvas()

	&html<</svg>>
	
	Do %response.Flush()

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawStyleSheet">
<Description><![CDATA[
Draw style sheet]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// find svg font from localization file
	Set tFont = $ZCVT($$$LocalizeText("Ensemble","FontFamily","tahoma,verdana"),"O","XML")

	Write "<style type=""text/css""><![CDATA[",!
	&html<
text, tspan {
  pointer-events : none;
  font-size : 12pt;
  font-family : #(tFont)#;
}
.canvas {
  fill: #FFFFFF;
  stroke: gray;
  stroke-width: 1;
}
  
.DiagramLabel {
  fill : #EEEEEE;
  stroke : black;
  stroke-width : 2;
  filter: url(#dropShadow);
}

.LevelLabel {
  fill : #EEEEEE;
  stroke : black;
  stroke-width : 2;
  filter: url(#dropShadow);
}

.LevelLabelSelected {
  fill : yellow;
  stroke : black;
  stroke-width : 2;
  filter: url(#dropShadow);
}

.BPLShape {
  fill : white;
  stroke : blue;
  stroke-width : 2;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

.BPLShapeSelected {
  fill : yellow;
  stroke : green;
  stroke-width : 3;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

.BPLShapeDisabled {
  fill : silver;
  stroke : gray;
  stroke-width : 2;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

.BPLShapeDisabledSelected {
  fill : yellow;
  stroke : gray;
  stroke-width : 3;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  stroke-dasharray: 4,4;
  filter: url(#dropShadow);
}

.BPLShapeMoving {
  fill : none;
  stroke : green;
  stroke-width : 1;
  fill-opacity : 1.0;
}

.BPLShapeInvalid {
  fill : white;
  stroke : red;
  stroke-width : 3;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

.BPLShapeInvalidSelected {
  fill : yellow;
  stroke : red;
  stroke-width : 3;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

.BPLShapeDeleted {
  fill : red;
  stroke : yellow;
  stroke-width : 2;
  fill-opacity : 0.9;
}

.BPLShapeMatching {
  fill : #CCFFCC;
  stroke : purple;
  stroke-width : 3;
  fill-opacity : 1.0;
  stroke-linejoin : round;
  filter: url(#dropShadow);
}

/* outer shape for End event */
.BPLEventEnd {
  fill : white;
  stroke : blue;
  stroke-width : 4;
  fill-opacity : 1.0;
  filter: url(#dropShadow);
}

/* outer shape for start event */
.BPLEventStart {
  fill : white;
  stroke : blue;
  stroke-width : 2;
  fill-opacity : 1.0;
  filter: url(#dropShadow);
}

/* for intermediate events */
.BPLEvent {
  fill : white;
  stroke : blue;
  stroke-width : 2;
  fill-opacity : 1.0;
  filter: url(#dropShadow);
}

.BPLEventInner {
  fill : none;
  stroke : blue;
  stroke-width : 1;
}

.BPLEventIcon {
  fill : none;
  stroke : blue;
  stroke-width : 1;
  opacity : 0.5;
}

.BPLActivityIcon {
  fill : none;
  stroke : blue;
  stroke-width : 1;
  opacity : 0.6;
  stroke-linejoin: round;
  stroke-linecap: round;
}

.BPLActivityIconText {
  pointer-events: none;
  font-size: 12pt;
  fill: blue;
  font-style: italic;
  opacity: 0.6;
  }

.BPLConnector {
  stroke : blue;
  stroke-width : 3;
  stroke-linejoin : round;
  opacity: 0.5;
  fill: none;
  }

.BPLConnectorGoto {
  stroke : darkblue;
  stroke-width : 3;
  stroke-linejoin : round;
  stroke-dasharray: 2,2;
  opacity: 0.5;
  fill: none;
  }

.BPLConnectorDisabled {
  stroke : gray;
  stroke-width : 3;
  stroke-linejoin : round;
  stroke-dasharray: 4,4;
  opacity: 0.5;
  fill: none;
  }

.BPLConnectorSelected {
  stroke : green;
  stroke-width : 6;
  stroke-linejoin : round;
  fill: none;
  }

.BPLConnectorSelectedDisabled {
  stroke : green;
  stroke-width : 6;
  stroke-linejoin : round;
  stroke-dasharray: 4,4;
  fill: none;
  }

.OutputHandleOff {
  stroke : gray;
  stroke-width : 1;
  fill: white;
  }

.OutputHandleOn {
  stroke : blue;
  stroke-width : 1;
  fill: yellow;
  }
  
.OutputHandleAccept {
  stroke : blue;
  stroke-width : 2;
  fill: green;
  }

.HandleOver {
  stroke : gray;
  stroke-width : 1;
  fill: green;
  }
  
.HandleOut {
  stroke : gray;
  stroke-width : 1;
  fill: white;
  }
  
.HandleClick {
  stroke : yellow;
  stroke-width : 1;
  fill: blue;
  }

.InputHandleOff {
  stroke : gray;
  stroke-width : 1;
  fill: white;
  }

.InputHandleOn {
  stroke : blue;
  stroke-width : 1;
  fill: yellow;
  }

.InputHandleAccept {
  stroke : blue;
  stroke-width : 2;
  fill: green;
  }

.AnnotationLine {
  stroke : green;
  stroke-width : 1;
  stroke-linejoin: round;
  stroke-linecap: round;
  fill: none;
  }

.box {
  fill : yellow;
  stroke : black;
  stroke-width : 2;
  }

.border {
  fill : lightgreen;
  visibility : hidden;
  }

.data {
  visibility : hidden; }
  
.ShapeName {
  pointer-events : none;
  font-size : 14pt;
 }

.LabelLine {
	stroke: #000000;
	stroke-width: 1;
}

.LabelTitle {
  pointer-events : none;
  font-size : 20pt;
}

.LabelName {
  pointer-events : none;
  font-size : 16pt;
}

.LabelAnnotation {
  pointer-events : none;
  font-size : 12pt;
}

.LabelTime {
  pointer-events : none;
  font-size : 12pt;
}

.LevelActivityType {
  pointer-events : none;
  font-size : 12pt;
}

.LevelActivityName {
  pointer-events : none;
  font-size : 20pt;
}

.ConnectorText {
  pointer-events : none;
  font-size : 12pt;
  fill: blue;
  baseline-shift: 3;
  font-weight: bold;
  opacity: 0.5;
}

.ConnectorTextSelected {
  pointer-events : none;
  font-size : 12pt;
  fill: green;
  baseline-shift: 4;
  font-weight: bold;
}

.ModelTextPath {
	visibility: hidden;
}

.AnnotationText {
  pointer-events : none;
  font-size : 12pt;
}

.ActivityType {
  pointer-events : none;
  fill: blue;
  font-size : 10pt;
}

.RubberBand {
  stroke : black;
  fill: none;
  stroke-width : 3;
  stroke-opacity : 0.5;
  stroke-linejoin : round;
}

.tooltipBalloon {
  stroke : gray;
  fill: url(#balloon);
  stroke-width : 1;
  stroke-opacity : 0.5;
  filter: url(#dropShadow);
}

.tooltipText {
  pointer-events : none;
  fill: blue;
  font-size : 10pt;
  clip-path: url(#clipPath_balloon);
  }
  
 .boundingBox {
 	fill: #AAAAFF;
 	opacity: 0.5;
 	stroke: black;
 	stroke-width: 2px;
 	stroke-dasharray: 3,2;
 } 
  
 .boundingBoxLine {
 	fill: none;
 	opacity: 0.5;
 	stroke: black;
 	stroke-width: 1px;
 	stroke-dasharray: 6,6;
 } 
	>
	Write "]]]]><![CDATA[></style>>"
]]></Implementation>
</Method>

<Method name="DrawDefs">
<Description><![CDATA[
Draw defs section]]></Description>
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	// localized menu items
	Set menuAdd		= $ZCVT($$$LocalizeText("EnsBPL","menuAdd","Add Activity"),"O","XML")
	Set menuZoom	= $ZCVT($$$LocalizeText("EnsBPL","menuZoom","Zoom"),"O","XML")
	Set menuCut		= $ZCVT($$$LocalizeText("EnsBPL","menuCut","Cut"),"O","XML")
	Set menuCopy	= $ZCVT($$$LocalizeText("EnsBPL","menuCopy","Copy"),"O","XML")
	Set menuPaste	= $ZCVT($$$LocalizeText("EnsBPL","menuPaste","Paste"),"O","XML")
	Set menuDelete	= $ZCVT($$$LocalizeText("EnsBPL","menuDelete","Delete"),"O","XML")
	Set menuUndo	= $ZCVT($$$LocalizeText("EnsBPL","menuUndo","Undo"),"O","XML")
	Set menuAll 	= $ZCVT($$$LocalizeText("EnsBPL","menuAll","Select All"),"O","XML")
	Set menuAnnotation	= $ZCVT($$$LocalizeText("EnsBPL","menuAnnotation","Show Annotation"),"O","XML")
	Set menuSmart	= $ZCVT($$$LocalizeText("EnsBPL","menuSmart","Smart Connections"),"O","XML")
	Set menuArrange = $ZCVT($$$LocalizeText("EnsBPL","menuArrange","Arrange Layout"),"O","XML")
	Set menuAuto	= $ZCVT($$$LocalizeText("EnsBPL","menuAuto","Auto Arrange"),"O","XML")
	Set menuArrange = $ZCVT($$$LocalizeText("EnsBPL","menuArrange","Arrange Layout"),"O","XML")
	Set menuAuto	 = $ZCVT($$$LocalizeText("EnsBPL","menuAuto","Auto Arrange"),"O","XML")
	Set menuValidate = $ZCVT($$$LocalizeText("EnsBPL","menuValidate","Validate Activity"),"O","XML")
	Set menuGroup	= $ZCVT($$$LocalizeText("EnsBPL","menuGroup","Group Elements"),"O","XML")
	Set menuUp		= $ZCVT($$$LocalizeText("EnsBPL","menuUp","Drill Up"),"O","XML")
	Set menuDown	= $ZCVT($$$LocalizeText("EnsBPL","menuDown","Drill Down"),"O","XML")
	Set menuFind	= $ZCVT($$$LocalizeText("EnsBPL","menuFind","Find..."),"O","XML")
	Set menuAgain	= $ZCVT($$$LocalizeText("EnsBPL","menuAgain","Find Again"),"O","XML")
	Set menuAbout	= $ZCVT($$$LocalizeText("EnsBPL","menuAbout","About SVG Viewer..."),"O","XML")
	Set menuViewSource	= $ZCVT($$$LocalizeText("EnsBPL","menuViewSource","View Source"),"O","XML")
	Set menuRules	= $ZCVT($$$LocalizeText("EnsBPL","menuRules","Rules Editor"),"O","XML")
	Set menuCallWizard	= $ZCVT($$$LocalizeText("EnsBPL","menuCallWizard","Call Wizard..."),"O","XML")
	Set menuViewTarget	= $ZCVT($$$LocalizeText("EnsBPL","menuViewTarget","View Target Definition"),"O","XML")
	Set menuConnect		= $ZCVT($$$LocalizeText("EnsBPL","menuConnect","Connect Elements"),"O","XML")

	&html<
<!-- defs -->
<defs>

<!-- context menu -->

<menu id="CanvasMenu" xmlns="http://mynamespace.com/" >
    <header>BPL Editor Menu</header>
    <menu>
      <header>#(menuAdd)#</header>
      <item onactivate="canvas_createShape('alert');">Alert</item>
      <item onactivate="canvas_createShape('assign');">Assign</item>
      <item onactivate="canvas_createShape('break');">Break</item>
      <item onactivate="canvas_createShape('call');">Call</item>
      <item onactivate="canvas_createShape('code');">Code</item>
      <item onactivate="canvas_createShape('continue');">Continue</item>
      <item onactivate="canvas_createShape('delay');">Delay</item>
      <item onactivate="canvas_createShape('empty');">Empty</item>
      <item onactivate="canvas_createShape('reply');">Reply</item>
      <item onactivate="canvas_createShape('rule');">Rule</item>
      <item onactivate="canvas_createShape('sql');">SQL</item>
      <item onactivate="canvas_createShape('sync');">Sync</item>
      <item onactivate="canvas_createShape('trace');">Trace</item>
      <item onactivate="canvas_createShape('transform');">Transform</item>
      <item onactivate="canvas_createShape('xpath');">XPATH</item>
      <item onactivate="canvas_createShape('xslt');">XSLT</item>
	  <separator/>
      <item onactivate="canvas_createShape('milestone');">Milestone</item>
	  <separator/>
      <item onactivate="canvas_createShape('foreach');">ForEach</item>
      <item onactivate="canvas_createShape('while');">While</item>
      <item onactivate="canvas_createShape('until');">Until</item>
	  <separator/>
      <item onactivate="canvas_createShape('scope');">Scope</item>
      <item onactivate="canvas_createShape('flow');">Flow</item>
      <item onactivate="canvas_createShape('join');">Join</item>
      <item onactivate="canvas_createShape('sequence');">Sequence</item>
	  <separator/>
      <item onactivate="canvas_createShape('if');">If</item>
      <item onactivate="canvas_createShape('switch');">Switch</item>
      <item onactivate="canvas_createShape('branch');">Branch</item>
      <item onactivate="canvas_createShape('label');">Label</item>
	  <separator/>
      <item onactivate="canvas_createShape('catch');">Catch</item>
      <item onactivate="canvas_createShape('catchall');">CatchAll</item>
      <item onactivate="canvas_createShape('throw');">Throw</item>
      <item onactivate="canvas_createShape('compensate');">Compensate</item>
      <item onactivate="canvas_createShape('compensationhandler');">CompensationHandler</item>
    </menu>>
 
 	&html<
    <item id="menu_connect" onactivate="canvas_connectItems()">#(menuConnect)#</item>
    <separator/>
    <item id="menu_wizard" onactivate="canvas_showActivityWizard('call')">#(menuCallWizard)#</item>
	>

	Do ..DrawPluginMenus()

    &html<<menu id="menu_zoom">
	 <header>#(menuZoom)#</header>
	 <item id="menu_zoom_33" onactivate="setZoom(33);">33%</item>
	 <item id="menu_zoom_50" onactivate="setZoom(50);">50%</item>
	 <item id="menu_zoom_75" onactivate="setZoom(75);">75%</item>
	 <item id="menu_zoom_88" onactivate="setZoom(88);">88%</item>
	 <item checked="yes" id="menu_zoom_100" onactivate="setZoom(100);">100%</item>
	 <item id="menu_zoom_110" onactivate="setZoom(110);">110%</item>
	 <item id="menu_zoom_125" onactivate="setZoom(125);">125%</item>
	 <item id="menu_zoom_150" onactivate="setZoom(150);">150%</item>
	 <item id="menu_zoom_200" onactivate="setZoom(200);">200%</item>
	 <item id="menu_zoom_500" onactivate="setZoom(500);">500%</item>
    </menu>
    <separator/>
    <item id="menu_undo" onactivate="canvas_undo()">#(menuUndo)#</item>
    <item id="menu_selectAll" onactivate="canvas_selectAll()">#(menuAll)#</item>
    <separator/>
    <item id="menu_cut" onactivate="canvas_cutItem()">#(menuCut)#</item>
    <item id="menu_copy" onactivate="canvas_copyItem()">#(menuCopy)#</item>
    <item enabled="no" id="menu_paste" onactivate="canvas_pasteItem()">#(menuPaste)#</item>
    <item id="menu_delete" onactivate="canvas_deleteItem()">#(menuDelete)#</item>
    <separator/>
    <item checked="yes"  id="menu_annotation" onactivate="showAnnotation()">#(menuAnnotation)#</item>
    <item checked="yes"  id="menu_smartconnect" onactivate="toggleSmartConnect()">#(menuSmart)#</item>
    <separator/>
    <item onactivate="canvas_arrangeShapes()">#(menuArrange)#</item>
    <item checked="no"  id="menu_autoarrange" onactivate="toggleAutoArrange()">#(menuAuto)#</item>
    <item id="menu_validate" onactivate="canvas_validateItem()">#(menuValidate)#</item>
    <separator/>

    <menu id="menu_group">
	 <header>#(menuGroup)#</header>
	 <item id="menu_makeGroupSequence" onactivate="canvas_makeGroup('sequence')">As Sequence</item>
	 <item id="menu_makeGroupForEach" onactivate="canvas_makeGroup('foreach')">As ForEach loop</item>
	 <item id="menu_makeGroupUntil" onactivate="canvas_makeGroup('until')">As Until loop</item>
	 <item id="menu_makeGroupWhile" onactivate="canvas_makeGroup('while')">As While loop</item>
	 <separator/>
	 <item id="menu_makeGroupScope" onactivate="canvas_makeGroup('scope')">As Scope</item>
	 <item id="menu_makeGroupScope" onactivate="canvas_makeGroup('flow')">As Flow</item>
    </menu>

    <item enabled="no" id="menu_drillDown" onactivate="canvas_drillDown()">#(menuDown)#</item>
    <item enabled="no" id="menu_drillUp" onactivate="canvas_drillUp()">#(menuUp)#</item>
    <separator/>
	<item id="menu_viewTarget" onactivate="canvas_viewTarget()">#(menuViewTarget)#</item>
    <separator/>
	<item action="Find" id="Find">#(menuFind)#</item>
	<item action="FindAgain" id="FindAgain">#(menuAgain)#</item>
    <separator/>
    <item action="ViewSource">#(menuViewSource)#</item>
    <item action="About">#(menuAbout)#</item>
    </menu>>
	
	&html<
<!-- menu for read-only mode -->
<menu id="StaticMenu" xmlns="http://mynamepsace.com/">
    <header>BPL Editor Menu</header>
    <menu id="menu_zoom">
	 <header>#(menuZoom)#</header>
	 <item id="menu_zoom_33" onactivate="setZoom(33);">33%</item>
	 <item id="menu_zoom_50" onactivate="setZoom(50);">50%</item>
	 <item id="menu_zoom_75" onactivate="setZoom(75);">75%</item>
	 <item id="menu_zoom_88" onactivate="setZoom(88);">88%</item>
	 <item checked="yes" id="menu_zoom_100" onactivate="setZoom(100);">100%</item>
	 <item id="menu_zoom_110" onactivate="setZoom(110);">110%</item>
	 <item id="menu_zoom_125" onactivate="setZoom(125);">125%</item>
	 <item id="menu_zoom_150" onactivate="setZoom(150);">150%</item>
	 <item id="menu_zoom_200" onactivate="setZoom(200);">200%</item>
	 <item id="menu_zoom_500" onactivate="setZoom(500);">500%</item>
    </menu>
    <item checked="yes" id="menu_annotation" onactivate="showAnnotation()">#(menuAnnotation)#</item>
    <separator/>
    <item onactivate="canvas_arrangeShapes()">#(menuArrange)#</item>
    <item id="menu_validate" onactivate="canvas_validateItem()">#(menuValidate)#</item>
    <separator/>
    <item enabled="no" id="menu_rulesEditor" onactivate="canvas_rulesEditor()">#(menuRules)#</item>
    <separator/>
    <item enabled="no" id="menu_drillDown" onactivate="canvas_drillDown()">#(menuDown)#</item>
    <item enabled="no" id="menu_drillUp" onactivate="canvas_drillUp()">#(menuUp)#</item>
    <separator/>
	<item action="Find" id="Find">#(menuFind)#</item>
	<item action="FindAgain" id="FindAgain">#(menuAgain)#</item>
    <separator/>
    <item action="ViewSource">#(menuViewSource)#</item>
    <item action="About">#(menuAbout)#</item>
</menu>

<path id="ModelPath" d="M300 300, L 320 300" style="stroke:green; stroke-width:4; fill:none;" />

<!-- clip paths for various shapes -->

<clipPath id="clipPath_label">
<rect x="0" y="0" width="440" height="200" class="DiagramLabel" />
</clipPath>

<clipPath id="clipPath_level">
<rect x="0" y="0" width="275" height="40" class="DiagramLabel" />
</clipPath>

<clipPath id="clipPath_event">
<circle cx="0" cy="0" r="27" class="BPLShape" />
</clipPath>

<clipPath id="clipPath_decision">
<polygon points="-100,0 0,-30 100,0 0,30 -100,0" class="BPLShape" />
</clipPath>

<clipPath id="clipPath_activity">
<rect x="-120" y="-25" width="238" height="50" rx="15" class="BPLShape" />
</clipPath>

<clipPath id="clipPath_balloon">
<rect x="0" y="0" width="250" height="50" />
</clipPath>

<!-- filters -->
<filter id="dropShadow" x="-2%" y="-2%" height="120%" width="120%">
<feGaussianBlur in="SourceAlpha" stdDeviation="3" />
<feOffset dx="4px" dy="4px" result="offsetBlur" />
<feMerge>
	<feMergeNode in="offsetBlur"/>
	<feMergeNode in="SourceGraphic"/>
</feMerge>
</filter>

<!-- gradients -->
<linearGradient id="balloon" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:yellow" />
<stop offset="50%" style="stop-color:yellow" />
<stop offset="100%" style="stop-color:red" />
</linearGradient>

</defs>
	>
]]></Implementation>
</Method>

<Method name="DrawScript">
<Description><![CDATA[
Draw java script]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// create array of localized text messages

	// validation
	Set msgText("BadCall")			= $ZCVT($$$LocalizeText("EnsBPL","BadCall","Referenced call, %1, is not defined or is not asynchronous."),"O","JS")
	Set msgText("BranchBadJoin")	= $ZCVT($$$LocalizeText("EnsBPL","BranchBadJoin","All branches for %1 must terminate at same join."),"O","JS")
	Set msgText("BranchCaseReq")	= $ZCVT($$$LocalizeText("EnsBPL","BranchCaseReq","There must be at least one non-default case (i.e., case with a condition) for a %1."),"O","JS")
	Set msgText("BranchDefExcess")	= $ZCVT($$$LocalizeText("EnsBPL","BranchDefExcess","There is more than one case with no condition for a %1."),"O","JS")
	Set msgText("BranchFalseExcess")= $ZCVT($$$LocalizeText("EnsBPL","BranchFalseExcess","There is more than one false branch for %1."),"O","JS")
	Set msgText("BranchNoJoin")		= $ZCVT($$$LocalizeText("EnsBPL","BranchNoJoin","All branches for %1 must terminate at a join."),"O","JS")
	Set msgText("BranchTORF")		= $ZCVT($$$LocalizeText("EnsBPL","BranchTORF","Branch for %1 must be either true or false."),"O","JS")
	Set msgText("BranchTrueExcess")	= $ZCVT($$$LocalizeText("EnsBPL","BranchTrueExcess","There is more than one true branch for %1."),"O","JS")
	Set msgText("BranchTrueReq")	= $ZCVT($$$LocalizeText("EnsBPL","BranchTrueReq","There must be a true branch for %1."),"O","JS")
	Set msgText("LoopReq")			= $ZCVT($$$LocalizeText("EnsBPL","LoopReq","The %1 activity can only be used within a loop."),"O","JS")
	Set msgText("NoAttr")			= $ZCVT($$$LocalizeText("EnsBPL","NoAttr","%1 not specified for this %2 activity."),"O","JS")
	Set msgText("NoDuration")		= $ZCVT($$$LocalizeText("EnsBPL","NoDuration","You must provide a value for either the Duration or Until attributes."),"O","JS")
	Set msgText("NoDuration2")		= $ZCVT($$$LocalizeText("EnsBPL","NoDuration2","You must provide a value for only one of the Duration or Until attributes."),"O","JS")
	Set msgText("NoInput")			= $ZCVT($$$LocalizeText("EnsBPL","NoInput","No input."),"O","JS")
	Set msgText("NoOutput")			= $ZCVT($$$LocalizeText("EnsBPL","NoOutput","No output."),"O","JS")
	Set msgText("ChildErrors")		= $ZCVT($$$LocalizeText("EnsBPL","ChildErrors","There are errors in child activities within this Group."),"O","JS")
	Set msgText("AsyncTimeout")		= $ZCVT($$$LocalizeText("EnsBPL","AsyncTimeout","No timeout should be specified for an asynchronous call."),"O","JS")
	
	// tool tips
	Set msgText("TipAlert")		= $ZCVT($$$LocalizeText("EnsBPL","TipAlert","Raises an Ensemble Alert."),"O","JS")
	Set msgText("TipAssign")	= $ZCVT($$$LocalizeText("EnsBPL","TipAssign","Assigns a value to a property:"),"O","JS")
	Set msgText("TipBranch")	= $ZCVT($$$LocalizeText("EnsBPL","TipBranch","Conditionally go to a label within this business process."),"O","JS")
	Set msgText("TipBreak")		= $ZCVT($$$LocalizeText("EnsBPL","TipBreak","Breaks out of the current loop."),"O","JS")
	Set msgText("TipCallAsync")	= $ZCVT($$$LocalizeText("EnsBPL","TipCallAsync","Makes an asynchronous request to:"),"O","JS")
	Set msgText("TipCallSync")	= $ZCVT($$$LocalizeText("EnsBPL","TipCallSync","Makes an synchronous request to:"),"O","JS")
	Set msgText("TipCode")		= $ZCVT($$$LocalizeText("EnsBPL","TipCode","Executes user-defined code."),"O","JS")
	Set msgText("TipContinue")	= $ZCVT($$$LocalizeText("EnsBPL","TipContinue","Continues execution at the\nstart of the current loop."),"O","JS")
	Set msgText("TipDelay")		= $ZCVT($$$LocalizeText("EnsBPL","TipDelay","Waits for a specified amount of time:"),"O","JS")
	Set msgText("TipEmpty")		= $ZCVT($$$LocalizeText("EnsBPL","TipEmpty","This element does nothing."),"O","JS")
	Set msgText("TipLabel")		= $ZCVT($$$LocalizeText("EnsBPL","TipLabel","Provide a target for a branch activity within this business process."),"O","JS")
	Set msgText("TipEndProc")	= $ZCVT($$$LocalizeText("EnsBPL","TipEndProc","This is the end of this business process."),"O","JS")
	Set msgText("TipEndSeq")	= $ZCVT($$$LocalizeText("EnsBPL","TipEndSeq","This is the end of this sequence."),"O","JS")
	Set msgText("TipFlow")		= $ZCVT($$$LocalizeText("EnsBPL","TipFlow","Marks the start of a flow:\nOne or more sets of activities\nexecuted in parallel."),"O","JS")
	Set msgText("TipIf")		= $ZCVT($$$LocalizeText("EnsBPL","TipIf","Execute one of two actions:"),"O","JS")
	Set msgText("TipJoin")		= $ZCVT($$$LocalizeText("EnsBPL","TipJoin","Marks the end of a\nswitch or flow block."),"O","JS")
	Set msgText("TipLoop")		= $ZCVT($$$LocalizeText("EnsBPL","TipLoop","Executes a loop"),"O","JS")
	Set msgText("TipMilestone")	= $ZCVT($$$LocalizeText("EnsBPL","TipMilestone","Updates the milestone\nassociated with this process:"),"O","JS")
	Set msgText("TipReceive")	= $ZCVT($$$LocalizeText("EnsBPL","TipReceive","Waits to receive a new incoming request."),"O","JS")
	Set msgText("TipReply")		= $ZCVT($$$LocalizeText("EnsBPL","TipReply","Returns a reply for this business process."),"O","JS")
	Set msgText("TipRule")		= $ZCVT($$$LocalizeText("EnsBPL","TipRule","Invokes a Business Rule:"),"O","JS")
	Set msgText("TipSQL")		= $ZCVT($$$LocalizeText("EnsBPL","TipSQL","Executes user-defined SQL statement."),"O","JS")
	Set msgText("TipSequence")	= $ZCVT($$$LocalizeText("EnsBPL","TipSequence","Executes a sequence of activities.\nDrill down to see details."),"O","JS")
	Set msgText("TipStartProc")	= $ZCVT($$$LocalizeText("EnsBPL","TipStartProc","This is the start of this business process."),"O","JS")
	Set msgText("TipStartSeq")	= $ZCVT($$$LocalizeText("EnsBPL","TipStartSeq","This is the start of this sequence."),"O","JS")
	Set msgText("TipSwitch")	= $ZCVT($$$LocalizeText("EnsBPL","TipSwitch","Execute one of multiple actions."),"O","JS")
	Set msgText("TipSync")		= $ZCVT($$$LocalizeText("EnsBPL","TipSync","Waits for responses from asynchronous calls:"),"O","JS")
	Set msgText("TipTrace")		= $ZCVT($$$LocalizeText("EnsBPL","TipTrace","Generates a trace message:"),"O","JS")
	Set msgText("TipTransform")	= $ZCVT($$$LocalizeText("EnsBPL","TipTransform","Executes a data transformation:"),"O","JS")
	Set msgText("TipScope")		= $ZCVT($$$LocalizeText("EnsBPL","TipScope","Defines the start of a scope."),"O","JS")
	Set msgText("TipXSLT")		= $ZCVT($$$LocalizeText("EnsBPL","TipXSLT","Executes an XSLT transformation."),"O","JS")
	Set msgText("TipXPATH")		= $ZCVT($$$LocalizeText("EnsBPL","TipXPATH","Executes an XPATH expression against an XML document."),"O","JS")
	
	// Editor messages
	Set msgText("EDBusinessProcess")= $ZCVT($$$LocalizeText("EnsBPL","EDBusinessProcess","Business Process"),"O","JS")
	Set msgText("EDCannotDelete")	= $ZCVT($$$LocalizeText("EnsBPL","EDCannotDelete","You cannot delete the %1 item."),"O","JS")
	Set msgText("EDCannotGroup")	= $ZCVT($$$LocalizeText("EnsBPL","EDCannotGroup","The current selected items cannot be made into a group."),"O","JS")
	Set msgText("EDContentsOf")		= $ZCVT($$$LocalizeText("EnsBPL","EDContentsOf","Contents of %1."),"O","JS")
	Set msgText("EDItemInvalid")	= $ZCVT($$$LocalizeText("EnsBPL","EDItemInvalid","The current item is invalid for the following reason(s):"),"O","JS")
	Set msgText("EDItemValid") 		= $ZCVT($$$LocalizeText("EnsBPL","EDItemValid","The current item is valid."),"O","JS")
	Set msgText("EDMultiSelection")	= $ZCVT($$$LocalizeText("EnsBPL","EDMultiSelection","Multiple items are selected."),"O","JS")
	Set msgText("EDNoDrill") 		= $ZCVT($$$LocalizeText("EnsBPL","EDNoDrill","You cannot drill down into current item."),"O","JS")
	Set msgText("EDNoMoreIn")		= $ZCVT($$$LocalizeText("EnsBPL","EDNoMoreIn","This component cannot accept an additional input."),"O","JS")
	Set msgText("EDNoMoreOut")		= $ZCVT($$$LocalizeText("EnsBPL","EDNoMoreOut","This component cannot accept an additional output."),"O","JS")
	Set msgText("EDNoRule") 		= $ZCVT($$$LocalizeText("EnsBPL","EDNoRule","The rules editor is only available for rule activities."),"O","JS")
	Set msgText("EDNoSelection")	= $ZCVT($$$LocalizeText("EnsBPL","EDNoSelection","No item selected."),"O","JS")
	Set msgText("EDCannotConnect")	= $ZCVT($$$LocalizeText("EnsBPL","EDCannotConnect","You must select at least two items in order to create a connection."),"O","JS")

	// include files
	Write "<script type=""text/ecmascript"" xlink:href=""ensxml.js""/>",!
	Write "<script type=""text/ecmascript"" xlink:href=""ensbpl.js""/>",!
	Write "<script type=""text/ecmascript"" xlink:href=""ensbplshapes.js""/>",!

	// script
	Write "<script language=""text/javascript""><![CDATA[",!

	&js<
// array of localized messages
var msgText = new Object();
	>

	// write out JavaScript version of text messages
	Set tKey = $O(msgText(""))
	While (tKey '= "") {
		Write "msgText['",tKey,"'] = '",msgText(tKey),"';",!
		Set tKey = $O(msgText(tKey))
	}

	&js<
// localized text utility function
// p1 and p2 are substituted for %1 and %2 in string resource.
function getLocalText(id,p1,p2)
{
	var text;

	if (msgText[id]) {
		text = msgText[id];

		// substitutions
		text = text.replace(/%S1/g,p1?p1:'');
		text = text.replace(/%S2/g,p2?p2:'');
	}
	else {
		text = "Missing string resource: " + id;
	}

	return text;
}

// -----------------------------------------------
var readOnlyFlag = false;

function canvas_setReadOnly(flag) 
{
	try {
		if (flag) {
			// read only menu
			// replace context menu
			var newMenuRoot = parseXML(printNode(document.getElementById('StaticMenu')), contextMenu);
			contextMenu.replaceChild( newMenuRoot, contextMenu.firstChild );
		}
		else {
			// normal menu
			// replace context menu
			var newMenuRoot = parseXML(printNode(document.getElementById('CanvasMenu')), contextMenu);
			contextMenu.replaceChild( newMenuRoot, contextMenu.firstChild );
		}
	}
	catch(ex) {
		// menu functions not supported in FireFox
	}
	
	readOnlyFlag = flag;
}

// inspector delimiters
var insDelim1 = '\x01';
var insDelim1a = '\x02';  // used for some message types!
var insDelim2 = '\x03';

function Initialize()
{
	try {
		var ro = false;
		
		// find results div/ test for readonly
		var results = self.document.getElementById("results");
	
		if (results && results.innerHTML == 'readonly') {
			ro = true;
		}
		
		// set up menu
		canvas_setReadOnly(ro);
	
		// now create diagram
		createBPLDiagram();
		
		// set up canvas API functions...
		var canvas = document.getElementById("canvas");
		
		// interface to allow HTML to call SVG...
		// note SVG does not seem to allow setting of more than 3 properties!
		canvas.invokeOperation = canvas_invokeOperation;
	
		if (!canvas.invokeOperation) {
			alert("Canvas not initialized");
		}
		
		// select the diagram for the inspector
		selectItem(null,false);
	
		// find loading div in outer html
		var loadingDiv = self.document.getElementById("loading");
		if (loadingDiv) {
			loadingDiv.style.display = 'none';
		}
		
		setZoom(getCookie('bplzoom',100));
	}
	catch(ex) {
		alert('ERROR in BPL Initialize:\n' + ex.message);
	}
}

// called from context menu
function renameItem()
{
	var prop = "Name";
	var val = canvas_getProperty(prop);
	
	val = prompt("Name: ",val);

	if (val != null) {
		canvas_setProperty(prop, val);
	}
}

// called from context menu
function editAnnotation()
{
	var prop = "Annotation";
	var val = canvas_getProperty(prop);
	
	val = prompt("Annotation: ",val);
	
	if (val != null) {
		canvas_setProperty(prop, val);
	}
}

// toggle annotation
function showAnnotation()
{
	var state = canvas_showAnnotation();
	
	setMenuItemOption("checked","menu_annotation", null, state);
}

// toggle smartConnection
function toggleSmartConnect()
{
	smartConnect = !smartConnect;
	setMenuItemOption("checked","menu_smartconnect", null, smartConnect);
}

// toggle autoArrange
function toggleAutoArrange()
{
	autoArrange = !autoArrange;
	setMenuItemOption("checked","menu_autoarrange", null, autoArrange);
	
	if (autoArrange) {
		canvas_arrangeShapes();
	}
}

// set the option for the given menu item
function setMenuItemOption(pOption, pItemId, pSubMenuId, value)
{
	try {
		var menuItems = contextMenu.childNodes.item(0).childNodes;
		var tItem;
	      
		for (i = 0; i != menuItems.length - 1; i++) {
			if (menuItems.item(i).nodeType == 1) {
				tItem = menuItems.item(i);
				if (!pSubMenuId) {
					// top-level menu item
					if (tItem.getAttribute('id') == pItemId) {
						tItem.setAttribute(pOption,value ? 'yes' : 'no');
					}
				}
	            else if ((tItem.nodeName == 'menu') && (tItem.getAttribute('id') == pSubMenuId)) {
					// submenu
	
					// loop over items in submenu
					var submenuItems = tItem.childNodes;
	               
					for (j = 0; j != submenuItems.length - 1; j++) {
						tSubItem = submenuItems.item(j)
						if (tSubItem.nodeType == 1) {
							if (tSubItem.getAttribute('id') == pItemId) {
								tSubItem.setAttribute(pOption,value ? 'yes' : 'no');
							}
						}
					}
				}
			}
		}
	}
	catch(ex) {
		// alert('ERROR in setMenuItemOption:\n' + ex.message);
	}
}

var currZoom = 0;

// Set the zoom level
function setZoom(zoom)
{	
	if (zoom == currZoom) return;
	
	var oldzoom = currZoom;
	currZoom = zoom;

	var main = document.getElementById("main");
	var width = main.getAttribute("width");
	var height = main.getAttribute("height");
	
	var embed = self.document.getElementById("SVGEmbed");
	if (embed) {
		embed.height = 0.75 * height * (zoom / 100);
		embed.width = 0.75 * width * (zoom / 100);
	}
 
 	// update context menu
 	if (oldzoom == 0) {
	 	oldzoom = 100;
 	}
	setMenuItemOption("checked","menu_zoom_" + oldzoom, "menu_zoom", false);
 	setMenuItemOption("checked","menu_zoom_" + zoom, "menu_zoom", true);

 	self.document.cookie = 'bplzoom=' + currZoom;
 	
 	// notify studio
 	canvas_setResultsDiv("ZOOM",currZoom);
}

function getCookie(name,def)
{
	var value = def; // default value
	try {
		var cookies = self.document.cookie;
		if (cookies) {
			// !!!FF
			var pos = cookies.indexOf(name + '=');
			if (pos != -1) {
				var start = pos + 1 + name.length;
				var end = cookies.indexOf(';',start);
				if (end == -1) end = cookies.length;
				var value = unescape(cookies.substring(start,end));
			}
		}
	}
	catch(ex) {
		alert('ERROR in getCookie:\n' + ex.message);
	}
	return value;
}

function svgMouseDown(evt)
{
	// trap right click to prevent context
	// menu during operations
	if (evt.button != 0) {
		if (currOperation) {
			evt.preventDefault();
		}
	}
}

/// Attempt to view the source document for a call target
function canvas_viewTarget()
{
	var msg = 'Please select a single call activity.';
	var count = selectedItems.length;
	if (count != 1) {
		alert(msg);
		return;
	}
	
	var item = selectedItems[0];
	if ('call' != item.Type) {
		alert(msg);
		return;
	}
	
	// try to find document name for item
	var target = item.propertyBag['Target'];
	if ('@' == target.charAt(0)) {
		alert('This call uses an indirect target.');
		return;
	}

	var docname = self.getTargetClass(target);
}

	>

	#; insert scripts for plugins
	Do ..DrawPluginScripts()

	Write "]]]]><![CDATA[></script>>"
]]></Implementation>
</Method>

<Method name="DrawCanvas">
<Description><![CDATA[
Draw main svg canvas]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
<!-- canvas -->
<svg id="canvasSVG" x="0" y="0" width="100%" height="100%">
<g	id="canvas"
	onmousemove="canvasMouseMove(evt);"
	onmouseup="canvasMouseUp(evt);"
	onmousedown="canvasMouseDown(evt);"
	onmouseover="canvasMouseOver(evt);"
	onmouseout="canvasMouseOut(evt);"
	onkeypress="canvasKeyPress(evt);"
>
<rect id="canvasRect" class="canvas" width="100%" height="100%"/>
<g id="bbGroup"/>

<text id="ModelTextPath" class="ModelTextPath" ><textPath xlink:href="#ModelPath">Model</textPath></text>

</g>

<!-- tooltip -->
<g id="tooltip" visibility="hidden" >
<path class="tooltipBalloon" d="M 0 0, L 250 0, 250 40, 310 60, 240 50, 0 50 z" />	
<text class="tooltipText" id="tooltipText" x="5" y="10" />
</g>

</svg>
>
]]></Implementation>
</Method>

<Method name="DrawPluginMenus">
<Description><![CDATA[
If there are any plugins; draw out their xml menus here]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set $ZT="Trap"

	// loop over all subclasses of "CSPX.EnsBPLPlugin"
	Set tRS = ##class(%ResultSet).%New("%Dictionary.ClassDefinition.SubclassOf")
	Set tSC = tRS.Execute("CSPX.EnsBPLPlugin")
	Set tCount = 0

	While (tRS.Next()) {
		// only return compiled, non-abstract classes
		Set tClass = $G(tRS.Data("Name"))
		If ($$$comClassDefined(tClass)) {
			Set tAbstract = +$$$comClassKeyGet(tClass,$$$cCLASSabstract)
			If ('tAbstract) {
				If (tCount=0) {
					&html<<separator/>>
				}
				Set tCount = tCount + 1

				Set pluginName = $zobjclassmethod(tClass,"%GetPluginName")
				
				&html<<menu id="plugin#(tCount)#">
				 	<header>#(pluginName)#</header>>
			
				Do $zobjclassmethod(tClass,"%DrawMenu")
			
			    &html<</menu>>
			}
		}
	}

	If (tCount>0) {
		&html<<separator/>>
	}
	Quit
Trap
	Set $ZT=""
	Write "<!-- ERROR in DrawPluginMenus: ",$ZCVT($ZE,"O","HTML"),"-->",!
	Quit
]]></Implementation>
</Method>

<Method name="DrawPluginScripts">
<Description><![CDATA[
If there are any plugins; draw out their script here]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set $ZT="Trap"

	// loop over all subclasses of "CSPX.EnsBPLPlugin"
	Set tRS = ##class(%ResultSet).%New("%Dictionary.ClassDefinition.SubclassOf")
	Set tSC = tRS.Execute("CSPX.EnsBPLPlugin")

	While (tRS.Next()) {
		// only return compiled, non-abstract classes
		Set tClass = $G(tRS.Data("Name"))
		If ($$$comClassDefined(tClass)) {
			Set tAbstract = +$$$comClassKeyGet(tClass,$$$cCLASSabstract)
			If ('tAbstract) {
				Do $zobjclassmethod(tClass,"%DrawJSFunctions")
			}
		}
	}

	Quit
Trap
	Set $ZT=""
	Write "/* ERROR in DrawPluginScripts: ",$ZCVT($ZE,"O","HTML"),"*/",!
	Quit
]]></Implementation>
</Method>
</Class>
</Export>