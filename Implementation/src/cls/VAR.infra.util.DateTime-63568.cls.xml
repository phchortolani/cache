<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.util.DateTime">
<Description><![CDATA[Date and Time methods.<br>
&nbsp;<br>
History:<br>
2009-Apr-02&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Created by Pablo]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="NowWithMS">
<Description><![CDATA[Returns the current date / time (in horolog format) including milliseconds.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the current date / time including milliseconds]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $horolog_"."_$piece($zutil(188), ".", 2)]]></Implementation>
</Method>

<Method name="GetYesterday">
<Description><![CDATA[Returns the yesterday date in horolog format.<br>
&nbsp;<br>
Params:<br>
&nbsp;<br>
Returns: the yesterday date]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[	quit ($piece($horolog, ",", 1) - 1)]]></Implementation>
</Method>

<Method name="GetOdbcDateTimeWithMS">
<Description><![CDATA[Returns the date / time informed (in horolog format), including milliseconds,
in ODBC format (YYYY-MM-DD HH:MI:SS.MS).<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrDateTime: the date / time informed
(in horolog format), including milliseconds<br>
&nbsp;<br>
Returns: the date / time in ODBC format]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrDateTime:%String</FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[	quit $zdatetime(..CorrectDateWithNoTime(pstrDateTime), 3, 1, 3)]]></Implementation>
</Method>

<Method name="CorrectDateWithNoTime">
<Description><![CDATA[Corrects a date (in horolog format) that has no time so it has a mandatory
separator between them preventing bugs in other functions that strictly
require a date / time value.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrDateTime: the date / time informed
(in horolog format), optionally having no time<br>
&nbsp;<br>
Returns: the date / time corrected]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrDateTime:%String</FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[	quit pstrDateTime_$case($length(pstrDateTime, ","), 1:",", :"")]]></Implementation>
</Method>

<Method name="getTimeStampDiff">
<Description><![CDATA[getTimeStampDiff is a general date/time function that returns the interval between two dates
<dl>
<dt><i>datepart</i>
<dd>The date part in which the interval is to be measured.<br>
The following date parts are supported for DATEDIFF<br>
    year		yy<br>
    month       mm<br>
    week        wk<br>
    day         dd<br>
    hour        hh<br>
    minute      mi<br>
    second      ss<br>
    millisecond ms<br>
<dt><i>startTimestamp</i>
<dd>The starting date for the interval.<br>
<dt><i>endTimeStamp</i>
<dd>The ending date for the interval.
<dt><i>diff</i>
<dd>Return Status and valude of diff by reference.
</dl>
startTimestamp is endTimeStamp from subtracted to determine how many datepart intervals are between the two dates.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>datepart:%String,startTimestamp:%TimeStamp,endTimeStamp:%TimeStamp,&amp;diff:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set status = $$$OK
	if ('$listfind($listbuild("yy","mm","wk","dd","hh","mi","ss","ms"),datepart)) {
		quit $$$ERR("Error: datepart '"_datepart_"' invÃ¡lido.")
	}
	try {
		set startTimestamp =  $zdatetime($zdatetimeh(startTimestamp, 3, 1), 3, 1)
		set endTimeStamp =  $zdatetime($zdatetimeh(endTimeStamp, 3, 1), 3, 1)
	}
	catch (erro){
		set status = $$$ERR("Error: "_erro)
	}
	set diff = $SYSTEM.SQL.DATEDIFF(datepart,startTimestamp,endTimeStamp)
	quit status]]></Implementation>
</Method>

<Method name="getHorologDiff">
<Description><![CDATA[getHorologDiff does the same thing as getTimeStampDiff but using horolog parameters]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>datepart:%String,startHorolog:%String,endHorolog:%String,&amp;diff:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set status = $$$OK
	try {
		set startHorolog =  $zdatetime(startHorolog, 3, 1)
		set endHorolog =  $zdatetime(endHorolog, 3, 1)
	}
	catch (erro) {
		set status = $$$ERR("Error: "_erro)
	}
	if ($$$ISOK(status)) set status = ..getTimeStampDiff(datepart,startHorolog,endHorolog,.diff)

	quit status]]></Implementation>
</Method>

<Method name="DateTimeCmp">
<Description><![CDATA[Compares two Horolog, returning a Integer result.<br>
&nbsp;<br>
Params:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrDateTime1: the date / time informed
(in horolog format), optionally having no time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstrDateTime1: the date / time informed
(in horolog format), optionally having no time<br>
&nbsp;<br>
Returns: -1 , if pstrDateTime1 < pstrDateTime2 / time corrected
          0 , if pstrDateTime1 = pstrDateTime2 / time corrected
          1 , if pstrDateTime1 > pstrDateTime2 / time corrected]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrDateTime1:%String,pstrDateTime2:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	if ($$$ISOK(..getHorologDiff("ss",pstrDateTime2,pstrDateTime1,.diff))) {
		set output = 0
		if (diff > 0) {
			set output = 1
		} elseif (diff < 0) {
			set output = -1
		}
	}

	quit output]]></Implementation>
</Method>
</Class>
</Export>