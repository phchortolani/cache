<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.StringTree">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<UDLText name="T">
<Content>// Not used in the rest of Alphalinc</Content>
</UDLText>

<Property name="tree">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="current">
<Type>%Integer</Type>
</Property>

<Property name="depth">
<Type>%Integer</Type>
</Property>

<Property name="iterator">
<Type>%Integer</Type>
</Property>

<Property name="itVal">
<Type>%String</Type>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="qLength">
<Type>%String</Type>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="oldQLength">
<Type>%String</Type>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="Start">
<Implementation><![CDATA[	kill ..tree
	set ..current=-1
	set ..depth=0]]></Implementation>
</Method>

<Method name="Add">
<FormalSpec>str</FormalSpec>
<Implementation><![CDATA[	set ..current=..current+1
	set ..tree(..current) = str]]></Implementation>
</Method>

<Method name="Merge">
<FormalSpec>other:VAR.StringTree</FormalSpec>
<Implementation><![CDATA[	kill x
	do other.Extract(.x)
	merge ..tree(..current) = x]]></Implementation>
</Method>

<Method name="Extract">
<FormalSpec>x</FormalSpec>
<Implementation><![CDATA[	merge x = ..tree]]></Implementation>
</Method>

<Method name="StartIterator">
<Implementation><![CDATA[	set ..iterator = "..tree"
	set ..qLength = 0
	set ..oldQLength = -1]]></Implementation>
</Method>

<Method name="Next">
<Implementation><![CDATA[	set ..oldQLength=..qLength
	set ..iterator = $query(@..iterator)
	if (..iterator="") { quit 0 }
	set ..qLength = $QLENGTH(..iterator)
	set ..itVal = @..iterator
	quit 1]]></Implementation>
</Method>

<Method name="GetOldQLength">
<Implementation><![CDATA[	quit ..oldQLength]]></Implementation>
</Method>

<Method name="GetQLength">
<Implementation><![CDATA[	quit ..qLength]]></Implementation>
</Method>

<Method name="isIndent">
<Implementation><![CDATA[	quit ..qLength > ..oldQLength]]></Implementation>
</Method>

<Method name="indent">
<Implementation><![CDATA[	quit ..qLength - ..oldQLength]]></Implementation>
</Method>

<Method name="isOutdent">
<Implementation><![CDATA[	quit ..qLength < ..oldQLength]]></Implementation>
</Method>

<Method name="outdent">
<Implementation><![CDATA[	quit ..oldQLength - ..qLength]]></Implementation>
</Method>

<Method name="zw">
<Implementation><![CDATA[	do ..StartIterator()
	while ..Next() {
		write !,..iterator_"__"_..itVal
	}]]></Implementation>
</Method>

<Method name="indented">
<FormalSpec>depth,s</FormalSpec>
<Implementation><![CDATA[	set s2 = ""
	for i=0:1:depth { set s2 = s2_" " }
	quit s2_s]]></Implementation>
</Method>

<Method name="ul">
<Implementation><![CDATA[	write "<ul>"
	set depth=0
	do ..StartIterator()
	while ..Next() {
		if ..isIndent() {
			write !,..indented(depth,"<li>")
			write !,..indented(depth,"<ul>")
			set depth=depth+..indent()
		}
		if ..isOutdent() {
			set depth=depth-..outdent()
			for i=1:1:..outdent() {
				write !,..indented(depth,"</ul>")
				write !,..indented(depth,"</li>")
			}
		}
		write !,..indented(depth,"<li>"_"  "_..itVal_"</li>")

	}
	write !
	write "</ul>"]]></Implementation>
</Method>
</Class>
</Export>