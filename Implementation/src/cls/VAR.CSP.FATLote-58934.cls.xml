<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.CSP.FATLote">
<ClassType/>
<IncludeCode>VARConst,INConst,FATConst,MEDConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page</Super>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	$$$VAR
	#dim %request as %CSP.Request
	#dim %response as %CSP.Response
	quit:$$$ISERR(..validaSessao(1)) %response
	set job = %session.SessionId
	set method = $get(%request.Data("method",1))
	Xecute "do .."_method_"()"
	Quit $$$OK]]></Implementation>
</Method>

<Method name="getINPARA">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set chave = $get(%request.Data("chave",1))
	set retorno = []
	set codigo=""
	for{
		set codigo 	= $order(^INPARA(0,chave,"PT",codigo)) quit:codigo=""
		set obj 	= $get(^INPARA(0,chave,"PT",codigo,1)) 
		set linha = {}
		set linha.codigo = codigo
		set linha.descricao = $$$INPARAText(obj)
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="listModeloNotaFiscal">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set select = "select Codigodomodelo,Nome from FATModeloNotaFiscal where Company=0 and Ativo = 1 order by Nome"
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("Codigodomodelo")
		set linha.descricao = rs.%Get("Nome")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="uploadArquivoResposta">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	#dim arquivo as %Stream.FileBinary
	set arquivo = %request.MimeData("resposta",1)
	set fname 	= arquivo.FileName
	;
	set arquivoAnt = $get(^mtemp.FATLoteArquivoRetorno(job))
	if arquivoAnt'=""{
		do ..removeArquivoTemp(arquivoAnt)
	}
	kill ^mtemp.FATLoteArquivoRetorno(job)
	set linha=0
	While 'arquivo.AtEnd {
		Set line	= arquivo.ReadLine()
		set linha 	= linha + 1
		set coluna1	= $piece(line,";",1)
		set coluna2	= $piece(line,";",2)
		set coluna3	= $piece(line,";",3)
		set coluna4	= $piece(line,";",4)
		set coluna5	= $piece(line,";",5)
		set coluna6	= $piece(line,";",6)
		set coluna7	= $piece(line,";",7)
		set ^zzsilmar(linha) = coluna1
		if linha=1{
			if coluna1'="Tipo de Registro" set erro=1 quit
			if coluna2'="Nº NFS-e" set erro=1 quit
			if coluna3'="Data Hora NFE" set erro=1 quit
			if coluna4'="Código de Verificação da NFS-e" set erro=1 quit
			if coluna5'="Tipo de RPS" set erro=1 quit
			if coluna6'="Série do RPS" set erro=1 quit
			if coluna7'="Número do RPS" set erro=1 quit
			continue
		}
		if coluna1="Total" quit
		set ^mtemp.FATLoteArquivoRetorno(job,linha-1) = line
	}
	if $data(^mtemp.FATLoteArquivoRetorno(job)){
		set obj = $get(^WWW012(YM,YM,1))
		set caminho = $$$WWW012PhysicalFTPDirectory(obj)
		if ($extract(caminho, $length(caminho)) '= "\") {
			set caminho = caminho _ "\"
		}
		
		set caminho = caminho _ "temp\"
		;
		if $$$isWINDOWS{
			set caminho = $replace(caminho,"/","\")
		}else{
			set caminho = $replace(caminho,"\","/")
		}
		
		//checa e cria se não houver, o diretorio
		if ('##class(%File).DirectoryExists(caminho)) {
			do ##class(%File).CreateDirectoryChain(caminho)
		}
		set ext = $piece(fname,".",$length(fname,"."))
		set nfname = job_"."_ext
		Set stream=##class(%FileBinaryStream).%New()
		Set stream.Filename= caminho_nfname
		do stream.CopyFrom(arquivo)
		do stream.Flush()
		set rs = stream.SaveStream()
		set ^mtemp.FATLoteArquivoRetorno(job) = nfname_"~"_fname
	}
	quit $$$OK]]></Implementation>
</Method>

<Method name="verificarArquivo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set retorno = {}
	if '$data(^mtemp.FATLoteArquivoRetorno(job)){
		set retorno.mensagem = "Arquivo de resposta inválido"
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="importaRespostaNF">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set lote = $get(%request.Data("lote",1))
	set notas = $get(%request.Data("notas",1))
	set strStatus = $$$OK
	tstart
	try{
		set notas	= [].%FromJSON(notas)
		kill notasFiscais
		set iterator = notas.%GetIterator()
		while iterator.%GetNext(.indice,.valor){
			set notasFiscais(valor)=""
		}
		if '$data(^mtemp.FATLoteArquivoRetorno(job)){
			set strStatus = "Arquivo de resposta inválido"
		}
		kill ^zzsilmar
		merge ^zzsilmar = notasFiscais
		set linha = ""
		for {
			set linha 	= $order(^mtemp.FATLoteArquivoRetorno(job,linha)) quit:linha=""
			set obj		= $get(^mtemp.FATLoteArquivoRetorno(job,linha))
			set nfes	= $zstrip($piece(obj,";",2),"<>w")
			set dtEmis	= $zstrip($piece(obj,";",3),"<>w")
			set verific	= $zstrip($piece(obj,";",4),"<>w")
			set serie	= $zstrip($piece(obj,";",6),"<>w")
			set rps		= $zstrip($piece(obj,";",7),"<>w")
			if rps="" continue
			if serie="" set serie = " "
			set codigoNota = $order(^FATNotaFiscals(0,3,rps,serie,""))
			if codigoNota="" continue
			if '$data(notasFiscais(codigoNota)) continue
			set objNotaFiscal	= $get(^FATNotaFiscal(0,codigoNota,1))
			set $$$FATNotaFiscalNumerodaNotaFiscal(objNotaFiscal)		= nfes
			set $$$FATNotaFiscalDatadeEmissao(objNotaFiscal)			= $zdatetimeh(dtEmis,4)
			set $$$FATNotaFiscalCodigodeVerificacaodaNFe(objNotaFiscal)	= verific
			set $$$FATNotaFiscalStatusdaNotaFiscal(objNotaFiscal)		= 3
			set strStatus = $$$Save("FATNotaFiscal",codigoNota,objNotaFiscal,$$$YES)
			quit:$$$ISERR(strStatus)
		}
		if $$$ISOK(strStatus){
			set arquivoAnt 	= $piece(^mtemp.FATLoteArquivoRetorno(job),"~",1)
			set nome		= $piece(^mtemp.FATLoteArquivoRetorno(job),"~",2)
			do ..copiaArquivoParaDestino(arquivoAnt,lote_"\"_nome)
			do ..removeArquivoTemp(arquivoAnt)
			kill ^mtemp.FATLoteArquivoRetorno(job)
		}
		
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set retorno.status 	= 1
		set retorno.type 	= "success"
		set retorno.mensagem="Dados salvos com sucesso!"
	}else{
		trollback
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="copiaArquivoParaDestino">
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo,destino</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	if $$$isWINDOWS{
		set arquivo = $replace(arquivo,"/","\")
		set destino = $replace(destino,"/","\")
		set sinal = "\"
	}else{
		set arquivo = $replace(arquivo,"\","/")
		set destino = $replace(destino,"\","/")
		set sinal = "/"
	}
	
	; Recupera o caminho de origem (diretorio temporario)
	set obj = $get(^WWW012(0,0,1))
	set caminhoO = $$$WWW012PhysicalFTPDirectory(obj)
	if ($extract(caminhoO, $length(caminhoO)) '= sinal) {
		set caminhoO = caminhoO _ sinal
	}
	set caminhoO = caminhoO _ "temp"_sinal
	if $$$isWINDOWS{
		set caminhoO = $replace(caminhoO,"/","\")
	}else{
		set caminhoO = $replace(caminhoO,"\","/")
	}

	;
	; Recupera o caminho de destino da imagem
	set caminhoD = $$GetDiretorioFisico^VARBRDiretorios(0,18)
	if ($extract(caminhoD, $length(caminhoD)) '= sinal) {
		set caminhoD = caminhoD _ sinal
	}
	;
	//checa e cria se não houver, o diretorio
	if ('##class(%File).DirectoryExists(caminhoD_$piece(destino,sinal,1,$length(destino,sinal)-1))) {
		do ##class(%File).CreateDirectoryChain(caminhoD_$piece(destino,sinal,1,$length(destino,sinal)-1))
	}
	do ##class(%File).CopyFile(caminhoO_arquivo,caminhoD_destino,1)
	quit $$$OK]]></Implementation>
</Method>

<Method name="removeArquivoTemp">
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivoTemp</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	if $$$isWINDOWS{
		set arquivoTemp = $replace(arquivoTemp,"/","\")
		set sinal = "\"
	}else{
		set arquivoTemp = $replace(arquivoTemp,"\","/")
		set sinal = "/"
	}
	set obj = $get(^WWW012(0,0,1))
	set caminho = $$$WWW012PhysicalFTPDirectory(obj)
	if ($extract(caminho, $length(caminho)) '= sinal) {
		set caminho = caminho _ sinal
	}
	set caminho = caminho _ "temp"_sinal
	if arquivoTemp=""{
		set fileset=##class(%ResultSet).%New("%Library.File:FileSet")
		set sc=fileset.Execute(##class(%File).NormalizeDirectory(caminho),%session.SessionId_"*",,1)
		set array = []
		while fileset.Next(.sc) { 
			set arquivo = $piece(fileset.Get("Name"),sinal,$l(fileset.Get("Name"),sinal))
			do ##class(%File).Delete(caminho_arquivo)
		}
	}else{
		; Recupera o caminho de destino (diretorio temporario)
		do ##class(%File).Delete(caminho_arquivoTemp)
	}
	quit $$$OK]]></Implementation>
</Method>

<Method name="getFontePagadora">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set filter = $get(%request.Data("filter",1))
	set codigo = $get(%request.Data("codigo",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	Set sort 	= $Get(%request.Data("sort",1))
	Set searchValue = $Get(%request.Data("searchValue",1))
	Set campo	 = $Get(%request.Data("campo",1))
	set select = "select CodigodaOrganizacao,Nome,Ativo from FATOrganizacao where Company=0 and %upper(FontePagadoraAtivo) = 1"
	if codigo'="" set select = select_" and CodigodaOrganizacao = '"_codigo_"'"
	else  set select = select_" and Ativo = 1"
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodigodaOrganizacao")
		set ativo = rs.%Get("Ativo")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("Nome")
		if 'ativo set linha.descricao = linha.descricao_" (INATIVO)"
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="recPadraoNotaFiscal">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	kill ^mtemp.FATLoteNFTributos(job)
	set lote 	= $get(%request.Data("lote",1))
	set codigo 	= $get(%request.Data("codigo",1))
	set strStatus = $$$OK
	set retorno = {}
	try{
		set formData = {}
		if codigo'=""{
			set objLote 		= $get(^FATLote(0,lote,1))
			set modeloLote 		= $$$FATLoteModelodeLote(objLote)
			set objModelo 		= $get(^FATModeloLote(0,modeloLote,1))
			set tipoFontePagadora = $$$FATModeloLoteTipoFontePagadora(objModelo)		
			;
			set objNotaFiscal 	= $get(^FATNotaFiscal(0,codigo,1))
			set tipoNotaFiscal	= $$$FATNotaFiscalTipodeNotaFiscal(objNotaFiscal)
			set modeloNotaFiscal= $$$FATNotaFiscalModelodaNotaFiscal(objNotaFiscal)
			set fontePagadora 	= $$$FATNotaFiscalFontePagadora(objNotaFiscal)
			set dataEmissao 	= $zdate($$$FATNotaFiscalDatadeEmissaoProvisoria(objNotaFiscal),3)
			set dataVencimento 	= $zdate($$$FATNotaFiscalDatadeVencimento(objNotaFiscal),3)
			set valorDeducoes	= $$$FATNotaFiscalValorTotaldasDeducoes(objNotaFiscal)
			set valorTotal		= $$$FATNotaFiscalValorTotaldaNF(objNotaFiscal)
			set discriminacao	= $$$FATNotaFiscalDiscriminacaodosServicos(objNotaFiscal)
			merge ^mtemp.FATLoteNFTributos(job) = ^FATNotaFiscalTributo(0,codigo)
		}else{
			set objLote 		= $get(^FATLote(0,lote,1))
			set tipoNotaFiscal	= ""
			set modeloNotaFiscal= ""
			set modeloLote 		= $$$FATLoteModelodeLote(objLote)
			set objModelo 		= $get(^FATModeloLote(0,modeloLote,1))
			set tipoFontePagadora = $$$FATModeloLoteTipoFontePagadora(objModelo)		
			set fontePagadora	= $$$FATModeloLoteFontePagadora(objModelo)
			set prazoVencimento	= $$$FATModeloLoteEmissaoNotaPrazoVencimento(objModelo)
			set dataEmissao		= $zdate($horolog,3)
			set valorDeducoes	= ""
			set valorTotal		= ""
			set discriminacao 	= ""
			set dataVencimento = ""
			if prazoVencimento'=""{
				Set dataVencimento = ..calculaPrazoVencimento(prazoVencimento)
			}
		}
		set formData.codigoNota		= codigo
		set formData.modelo			= modeloNotaFiscal
		set formData.tipo			= tipoNotaFiscal
		set formData.fontePagadora 	= fontePagadora
		set formData.dataEmissao	= dataEmissao
		set formData.dataVencimento = dataVencimento
		set formData.valorDeducoes 	= $select(valorDeducoes="":valorDeducoes,1:+valorDeducoes)
		set formData.valorTotal 	= $select(valorTotal="":valorTotal,1:+valorTotal)
		set formData.discriminacao 	= discriminacao
		set formData.eParticular	= $select(tipoFontePagadora=1:1,1:0)
		set retorno.formData 		= formData
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	if strStatus=$$$OK{
		set retorno.status 	= 1
		set retorno.type 	= "success"
	}else{
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="calculaTributos">
<ClassMethod>1</ClassMethod>
<FormalSpec>modelo="",valor=""</FormalSpec>
<Implementation><![CDATA[	set interno = 1
	if modelo=""{
		set modelo = $get(%request.Data("modelo",1))
		set valor = $get(%request.Data("valor",1))
		set interno = 0
	}
	if modelo'="",valor'=""{
		kill ^mtemp.FATLoteNFTributos(job)
		set objModelo	= $get(^FATModeloNotaFiscal(0,modelo,1))
		set tributos	= $$$FATModeloNotaFiscalTributos(objModelo)
		for i=1:1:$length(tributos,";"){
			set tributo 		= $piece(tributos,";",i)
			if tributo="" continue
			set objTributo 		= $get(^FATTributo(0,tributo,1))
			if objTributo="" continue
			set tipoImposto	 	= $$$FATTributoTipodeImposto(objTributo)
			set baseCalculoP 	= $$$FATTributoBasedeCalculo(objTributo)
			set aliquota	 	= $$$FATTributoAliquota(objTributo)
			set retencao	 	= +$$$FATTributoRetencaonaFonte(objTributo)
			set baseCalculo 	= $fnumber(valor*baseCalculoP/100,"",2)
			set valorTributo	= $fnumber(baseCalculo * aliquota / 100,"",2)
			set obj = ""
			set $$$FATNotaFiscalTributoAliquota(obj) 			= aliquota
			set $$$FATNotaFiscalTributoBasedeCalculo(obj) 		= baseCalculo
			set $$$FATNotaFiscalTributoValordoTributo(obj) 		= valorTributo
			set $$$FATNotaFiscalTributoTributoRetidonaFonte(obj)= retencao
			set $$$FATNotaFiscalTributoTipodeImposto(obj)		= tipoImposto
			set ^mtemp.FATLoteNFTributos(job,tributo,1) = obj
		}
	}
	if interno quit
	write 1
	quit]]></Implementation>
</Method>

<Method name="recRPS">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codigo = $get(%request.Data("codigoNota",1))
	set retorno = ..emiteNotaFiscal(codigo)
	set formData = {}
	set formData = retorno
	set formData.codigoNota	= codigo
	set retorno = {}
	set retorno.formData = formData
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="recModeloNotaFiscal">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codigo = $get(%request.Data("codigo",1))
	set strStatus = $$$OK
	set retorno = {}
	try{
		if codigo'=""{
			set objModelo 	= $get(^FATModeloNotaFiscal(0,codigo,1))
			set formData = {}
			set formData.discriminacao 	= $$$FATModeloNotaFiscalDiscriminacaodosServicos(objModelo)
			set retorno.formData = formData
		}
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	if strStatus=$$$OK{
		set retorno.status 	= 1
		set retorno.type 	= "success"
	}else{
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="getDiscriminacaoExterno">
<ClassMethod>1</ClassMethod>
<FormalSpec>lote="",texto="",vencimento=""</FormalSpec>
<Implementation><![CDATA[	set chamadaInterna=1
	if lote=""{
		set lote	= $get(%request.Data("lote",1))
		set texto 	= $get(%request.Data("texto",1))
		set vencimento 	= $get(%request.Data("vencimento",1))
		set chamadaInterna=0
	}
	set retorno = {}
	set retorno.valor = texto
	try{
		set vencimento 	= $replace($replace(vencimento,"""",""),"/","-")
		if vencimento'="" set vencimento = $zdateh(vencimento,3)
		set objLote 	= $get(^FATLote(0,lote,1))
		set dataInicial	= $$$FATLoteDataInicial(objLote)
		set dataFinal	= $$$FATLoteDataFinal(objLote)
		if dataInicial'="" set texto = $replace(texto,"[data inicial]",$zdate(dataInicial,4))
		if dataFinal'="" set texto = $replace(texto,"[data final]",$zdate(dataFinal,4))
		if vencimento'="" set texto = $replace(texto,"[vencimento]",$zdate(vencimento,4))
		
		set retorno.valor = texto
	}
	catch e {
		set retorno.valor = texto

	}
	if chamadaInterna quit retorno
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="listTributos">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set select = "select Codigodotributo,Nome from FATTributo where Company=0 and Ativo = 1"
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("Codigodotributo")
		set linha.descricao = rs.%Get("Nome")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="salvaImpostoNota">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set dados = $get(%request.Data("dados",1))
	set dados = [].%FromJSON(dados)
	if dados.tributo'=""{
		set tributo 			= dados.tributo
		set aliquota 			= dados.aliquota
		set baseCalculo 		= dados.baseCalculo
		set valor 				= dados.valor
		set retidoFonte 		= dados.retidoFonte
		;
		set objTributo 			= $get(^FATTributo(0,tributo,1))
		set tipoImposto	 		= $$$FATTributoTipodeImposto(objTributo)
		set obj					= $get(^mtemp.FATLoteNFTributos(job,tributo,1))
		set $$$FATNotaFiscalTributoAliquota(obj) 			= aliquota
		set $$$FATNotaFiscalTributoBasedeCalculo(obj) 		= baseCalculo
		set $$$FATNotaFiscalTributoValordoTributo(obj) 		= valor
		set $$$FATNotaFiscalTributoTributoRetidonaFonte(obj)= retidoFonte
		set $$$FATNotaFiscalTributoTipodeImposto(obj)		= tipoImposto
		set ^mtemp.FATLoteNFTributos(job,tributo,1) = obj
		if dados.tributoOld'=""{
			kill ^mtemp.FATLoteNFTributos(job,dados.tributoOld,1)
		}
	}
	quit $$$OK]]></Implementation>
</Method>

<Method name="recImpostoNota">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set dados = []
	set tributo = ""
	for {
		set tributo = $order(^mtemp.FATLoteNFTributos(job,tributo)) quit:tributo=""
		set obj					= $get(^mtemp.FATLoteNFTributos(job,tributo,1))
		set linha 				= {}
		set linha.tributo		= tributo
		set linha.aliquota		= $$$FATNotaFiscalTributoAliquota(obj)
		set linha.baseCalculo	= $$$FATNotaFiscalTributoBasedeCalculo(obj)
		set linha.valor 		= $$$FATNotaFiscalTributoValordoTributo(obj)
		set linha.retidoFonte	= +$$$FATNotaFiscalTributoTributoRetidonaFonte(obj)
		;
		set objTributo 			= $get(^FATTributo(0,tributo,1))
		set linha.tributoNome 	= $$$FATTributoNome(objTributo)
		;
		do dados.%Push(linha)
	}
	write dados.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="removeImpostoNota">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set tributo = $get(%request.Data("codigo",1))
	kill ^mtemp.FATLoteNFTributos(job,tributo)
	write 1
	quit $$$OK]]></Implementation>
</Method>

<Method name="salvaNotaFiscal">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set lote 	= $get(%request.Data("lote",1))
	set dados 	= $get(%request.Data("dados",1))
	set strStatus = $$$OK
	tstart
	try{
		if '$data(^WWW128(0,"FATNotaFiscal")){
			set obj = "NF000000000"
			set strStatus = $$$Save("WWW128","FATNotaFiscal",obj,$$$YES)
			quit:$$$ISERR(strStatus)
		}
		set dados = [].%FromJSON(dados)
		set codigo 	= dados.codigoNota
		set eParticular = dados.eParticular
		if eParticular{
			if codigo=""{
				set query = "select NumerodaFatura,CodigodoPaciente from FATLoteFaturas where company=0 and %upper(CodigodoLote) = '"_lote_"' group by NumerodaFatura"
				set rs = ##class(%SQL.Statement).%ExecDirect("",.query)
				while(rs.%Next()){
					set NumerodaFatura 		= rs.%Get("NumerodaFatura")
					set CodigodoPaciente 	= rs.%Get("CodigodoPaciente")
					set valor 				= ..totalizadorFaturas(lote,"",NumerodaFatura).valor
					set vlNotas				= ..totalizadorEmitidos(lote,NumerodaFatura).valor
					set valor = valor - vlNotas
					if valor<=0 continue
					Set codigo = $$GetNextNumber^COMUtils("FATNotaFiscal","")
					set objNotaFiscal	= $get(^FATNotaFiscal(0,codigo,1))
					set $$$FATNotaFiscalNumerodoLote(objNotaFiscal)					= lote
					set $$$FATNotaFiscalTipodeNotaFiscal(objNotaFiscal)				= 1
					set $$$FATNotaFiscalModelodaNotaFiscal(objNotaFiscal)			= dados.modelo
					set $$$FATNotaFiscalDatadeVencimento(objNotaFiscal)				= +$horolog
					set objAgendAdmissao = $get(^VARAgendamentoAdmissao(0,NumerodaFatura,1))
					set $$$FATNotaFiscalDatadeEmissaoProvisoria(objNotaFiscal)		= $$$VARAgendamentoAdmissaoCriadoData(objAgendAdmissao)
					set $$$FATNotaFiscalRPS(objNotaFiscal)							= $$$VARAgendamentoAdmissaoNumeroRPS(objAgendAdmissao)
					set $$$FATNotaFiscalSeriedoRPS(objNotaFiscal)					= 1
					set $$$FATNotaFiscalDataHoradeEmissaodoRPS(objNotaFiscal)		= $$$VARAgendamentoAdmissaoCriadoData(objAgendAdmissao)_","_$$$VARAgendamentoAdmissaoCriadoHora(objAgendAdmissao)
					set $$$FATNotaFiscalENotaparaParticular(objNotaFiscal)			= 1
					set $$$FATNotaFiscalCodigodoPaciente(objNotaFiscal)				= CodigodoPaciente
					;
					set objLote			= $get(^FATLote(0,lote,1))
					set modeloLote		= $$$FATLoteModelodeLote(objLote)
					set objModelo		= $get(^FATModeloLote(0,modeloLote,1))
					set $$$FATNotaFiscalRecebedor(objNotaFiscal)					= $$$FATModeloLoteRecebedor(objModelo)
					set dados.valorTotal = valor
					do ..calculaTributos(dados.modelo,dados.valorTotal)
					set $$$FATNotaFiscalValorTotaldaNF(objNotaFiscal)				= dados.valorTotal
					set $$$FATNotaFiscalDiscriminacaodosServicos(objNotaFiscal)		= dados.discriminacao
					;;;Solicitação Patricia
					Set novaDiscriminacao  = $$$FATNotaFiscalDiscriminacaodosServicos(objNotaFiscal)
					Set queryProc = "Select * From SQLUser.VARAgendamentoProcedimentos Where Company = 0 And ControleAdmissao = '"_NumerodaFatura_"'"
					Set rsProc = ##class(%SQL.Statement).%ExecDirect("",.queryProc)
					While(rsProc.%Next()){
						Set novaDiscriminacao = novaDiscriminacao _"|"_$$SQLGetDescricaoProduto^VARSQL(rsProc.%Get("Procedimento"),1)_"  R$ "_$FNumber(rsProc.%Get("Valor"),".",2)
					}
					Set $$$FATNotaFiscalDiscriminacaodosServicos(objNotaFiscal) = $Extract(novaDiscriminacao,1,1000)
					;
					set $$$FATNotaFiscalStatusdaNotaFiscal(objNotaFiscal)			= 1
					;
					set strStatus = $$$Save("FATNotaFiscal",codigo,objNotaFiscal,$$$YES)
					quit:$$$ISERR(strStatus)
					;
					set strStatus = ..salvaTributosNota(codigo,%request,%session)
					quit:$$$ISERR(strStatus)
				}
			}else{
				set objNotaFiscal	= $get(^FATNotaFiscal(0,codigo,1))
				set $$$FATNotaFiscalModelodaNotaFiscal(objNotaFiscal)			= dados.modelo
				set $$$FATNotaFiscalDiscriminacaodosServicos(objNotaFiscal)		= dados.discriminacao
				set strStatus = $$$Save("FATNotaFiscal",codigo,objNotaFiscal,$$$YES)
				quit:$$$ISERR(strStatus)
				;
				set strStatus = ..salvaTributosNota(codigo,%request,%session)
				quit:$$$ISERR(strStatus)
			}
			quit:$$$ISERR(strStatus)
		}else{
			set novo = 0
			if codigo="" {
				Set codigo = $$GetNextNumber^COMUtils("FATNotaFiscal","")
				set novo = 1
			}
			set objNotaFiscal	= $get(^FATNotaFiscal(0,codigo,1))
			set $$$FATNotaFiscalNumerodoLote(objNotaFiscal)					= lote
			set $$$FATNotaFiscalDatadeEmissaoProvisoria(objNotaFiscal)		= $zdateh($replace(dados.dataEmissao,"/","-"),3)
			set $$$FATNotaFiscalTipodeNotaFiscal(objNotaFiscal)				= dados.tipo
			set $$$FATNotaFiscalFontePagadora(objNotaFiscal)				= dados.fontePagadora
			set $$$FATNotaFiscalModelodaNotaFiscal(objNotaFiscal)			= dados.modelo
			set $$$FATNotaFiscalDatadeVencimento(objNotaFiscal)				= $zdateh($replace(dados.dataVencimento,"/","-"),3)
			;
			set objLote			= $get(^FATLote(0,lote,1))
			set modeloLote		= $$$FATLoteModelodeLote(objLote)
			set objModelo		= $get(^FATModeloLote(0,modeloLote,1))
			set $$$FATNotaFiscalRecebedor(objNotaFiscal)					= $$$FATModeloLoteRecebedor(objModelo)
			;
			if dados.tipo=1{
				set valor 	= ..totalizadorFaturas(lote).valor
				set vlNotas	= ..totalizadorEmitidos(lote).valor
				set valor = valor - vlNotas
				if valor<0 set valor = 0
				set dados.valorTotal = valor
				do ..calculaTributos(dados.modelo,dados.valorTotal)
			}
			if '((dados.tipo=1)&&('novo)){
				set $$$FATNotaFiscalValorTotaldaNF(objNotaFiscal)				= dados.valorTotal
			}
			set $$$FATNotaFiscalValorTotaldasDeducoes(objNotaFiscal)		= dados.valorDeducoes
			set $$$FATNotaFiscalDiscriminacaodosServicos(objNotaFiscal)		= dados.discriminacao
			set $$$FATNotaFiscalStatusdaNotaFiscal(objNotaFiscal)			= 1
			;
			set strStatus = $$$Save("FATNotaFiscal",codigo,objNotaFiscal,$$$YES)
			quit:$$$ISERR(strStatus)
			;
			set strStatus = ..salvaTributosNota(codigo,%request,%session)
			quit:$$$ISERR(strStatus)
		}		
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set retorno.status 	= 1
		set retorno.type 	= "success"
		set retorno.mensagem="Nota Fiscal gerada com sucesso!"
	}else{
		trollback
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="salvaEmissaoManual">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set dados 	= $get(%request.Data("dados",1))
	set strStatus = $$$OK
	tstart
	try{
		set dados 	= [].%FromJSON(dados)
		set codigo 	= dados.codigoNota
		if codigo="" {
			set strStatus = "Obrigatório selecionar uma nota fiscal!"
			quit
		}
		set objNotaFiscal	= $get(^FATNotaFiscal(0,codigo,1))
		set $$$FATNotaFiscalNumerodaNotaFiscal(objNotaFiscal)		= dados.NFe
		set $$$FATNotaFiscalDatadeEmissao(objNotaFiscal)			= $horolog
		set $$$FATNotaFiscalCodigodeVerificacaodaNFe(objNotaFiscal)	= dados.codigo
		set $$$FATNotaFiscalStatusdaNotaFiscal(objNotaFiscal)		= 3
		set strStatus = $$$Save("FATNotaFiscal",codigo,objNotaFiscal,$$$YES)
		quit:$$$ISERR(strStatus)
		;
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set retorno.status 	= 1
		set retorno.type 	= "success"
		set retorno.mensagem= "Nota Fiscal emitida com sucesso!"
	}else{
		trollback
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="salvaTributosNota">
<ClassMethod>1</ClassMethod>
<FormalSpec>codigo,%request,%session</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	$$$VAR
	set job = %session.SessionId
	set strStatus = $$$OK
	kill tributos
	set flISS = 0
	set tributo = ""
	for {
		set tributo = $order(^mtemp.FATLoteNFTributos(job,tributo)) quit:tributo=""
		set obj		= $get(^mtemp.FATLoteNFTributos(job,tributo,1))
		set tipoImposto	 	= $$$FATNotaFiscalTributoTipodeImposto(obj)
		if tipoImposto="ISS" set flISS = flISS+1
		set strStatus	= $$$Save("FATNotaFiscalTributo",codigo_","_tributo,obj,$$$YES)
		quit:$$$ISERR(strStatus)
		set tributos(tributo)=""
	}
	quit:$$$ISERR(strStatus) strStatus
	if flISS=0 set strStatus = "Nota fiscal deve conter um imposto do tipo ISS cadastrado"
	quit:$$$ISERR(strStatus) strStatus
	if flISS>1 set strStatus = "Nota fiscal deve conter somente um imposto do tipo ISS cadastrado"
	quit:$$$ISERR(strStatus) strStatus
	set tributo = ""
	for {
		set tributo = $order(^FATNotaFiscalTributo(0,codigo,tributo)) quit:tributo=""
		if $data(tributos(tributo)) continue
		set strStatus	= $$$Kill("FATNotaFiscalTributo",codigo_","_tributo)
		quit:$$$ISERR(strStatus)
	}
	quit strStatus]]></Implementation>
</Method>

<Method name="pesquisaLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set filter = $get(%request.Data("filter",1))
	set codigo = $get(%request.Data("codigo",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	Set sort 	= $Get(%request.Data("sort",1))
	Set searchValue = $Get(%request.Data("searchValue",1))
	;
	set sort = $tr(sort,"""{[]}","")
	set campoSort = $REPLACE($piece($piece(sort,",",1),":",2),"""","")
	set campoSortDesc = $select($piece($piece(sort,",",2),":",2)="false":"DESC",1:"ASC")
	set orderBy = ""
	
	if campoSort'="" set orderBy = "order by "_campoSort_" "_campoSortDesc
	
	set filter = $tr(filter,"""{[]}","")
	set campo = "",operacao = "",wherefilter="",proximacomb="",andant="",abrep=0
	for i=1:1:$length(filter,","){
		set ret = $piece(filter,",",i)
		if ret="" continue
		if proximacomb=1{
			if andant=1,ret="and" set wherefilter = wherefilter_" ) ",abrep=0
			if wherefilter'="" set wherefilter = wherefilter_" "_ret_" "
			set andant = ""
			if ret="and" set wherefilter = wherefilter_" ( ",andant = 1,abrep=1
			set proximacomb = ""
			continue
		}
		if campo="" {
			if ret = "and" continue
			set campo = ret continue
		}
		if operacao="" {
			if ret = "contains" set operacao = " like ",inicio="%",fim="%"
			if ret = "notcontains" set operacao = " not like ",inicio="%",fim="%"
			if ret = "startswith" set operacao = " like ",inicio="",fim="%"
			if ret = "endswith" set operacao = " like ",inicio="%",fim=""
			if ret = "=" set operacao = " = ",inicio="",fim=""
			if ret = ">=" set operacao = " >= ",inicio="",fim=""
			if ret = "<" set operacao = " < ",inicio="",fim=""
			if ret = "<>" set operacao = " <> ",inicio="",fim=""
			continue
		}
		set wherefilter = wherefilter_"%upper("_campo_")"_operacao_"%upper('"_inicio_ret_fim_"')"
		set campo="",operacao="",proximacomb=1
	}
	if wherefilter'="" {
		if abrep=1 set wherefilter = wherefilter_")"
	}
	;
	set contador = 0
	set select1 = "select CodigodoLote, 'Todos' As Atendente,$$SQLGetFormatDateTimeDX^VARSQL(DataInicial) DataHoradeInicio,$$SQLGetFormatDateTimeDX^VARSQL(DataFinal) DataHoraFinal, $$SQLGetUserParamDesc^VARSQL('FATLOTESTATUS~'||Status) Status, $$GetDescModeloLote^VARSQL(ModelodeLote) ModelodeLote "
	set select1 = select1_" from  FATLote"
	set select1 = select1_" where Company=0 "
	if codigo '= "" set select1 = select1_" and CodigodoLote = '"_codigo_"' "
	;
	if wherefilter'="" set wherefilter = "where "_wherefilter
	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200
	set meuSelect="select * from ("
	set meuSelect=meuSelect_"select top "_top_" *,count(*) totalCount "
	set meuSelect=meuSelect_" from ("_select1_") "_wherefilter_" "_orderBy
	set meuSelect=meuSelect_")"
	if take>0 set meuSelect=meuSelect_" where %VID between "_skip_" and "_take
	set ^zzsilmar($now()) = meuSelect
	set rs = ##class(%SQL.Statement).%ExecDirect("",meuSelect)
	set array = []
	set totalCount = 0
	while(rs.%Next()){
		set CodigodoLote		= rs.%Get("CodigodoLote")
		set Atendente			= rs.%Get("Atendente")
		set DataHoradeInicio	= rs.%Get("DataHoradeInicio")
		set DataHoraFinal		= rs.%Get("DataHoraFinal")
		set Status				= rs.%Get("Status")
		set totalCount			= rs.%Get("totalCount")
		Set ModelodeLote 		= rs.%Get("ModelodeLote")
		set linha = {}
		set linha.CodigodoLote		= CodigodoLote
		set linha.Atendente 		= Atendente
		set linha.DataInicial 		= DataHoradeInicio
		set linha.DataFinal			= DataHoraFinal
		set linha.Status			= Status
		set linha.ModelodeLote		= ModelodeLote
		set linha.Valor				= ..getValorLote(CodigodoLote)
		do array.%Push(linha)
	}
	set retorno = {}
	set retorno.data = array
	set retorno.totalCount = totalCount
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="pesquisaFaturaLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	set lote 	= $get(%request.Data("lote",1))
	set filter  = $get(%request.Data("filter",1))
	set codigo  = $get(%request.Data("codigo",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	Set sort 	= $Get(%request.Data("sort",1))
	Set searchValue = $Get(%request.Data("searchValue",1))
	;
	set sort = $tr(sort,"""{[]}","")
	set campoSort = $REPLACE($piece($piece(sort,",",1),":",2),"""","")
	set campoSortDesc = $select($piece($piece(sort,",",2),":",2)="false":"DESC",1:"ASC")
	set orderBy = ""
	
	if campoSort'="" set orderBy = "order by "_campoSort_" "_campoSortDesc
	
	set filter = $tr(filter,"""{[]}","")
	set campo = "",operacao = "",wherefilter="",proximacomb="",andant="",abrep=0
	for i=1:1:$length(filter,","){
		set ret = $piece(filter,",",i)
		if ret="" continue
		if proximacomb=1{
			if andant=1,ret="and" set wherefilter = wherefilter_" ) ",abrep=0
			if wherefilter'="" set wherefilter = wherefilter_" "_ret_" "
			set andant = ""
			if ret="and" set wherefilter = wherefilter_" ( ",andant = 1,abrep=1
			set proximacomb = ""
			continue
		}
		if campo="" {
			if ret = "and" continue
			set campo = ret continue
		}
		if operacao="" {
			if ret = "contains" set operacao = " like ",inicio="%",fim="%"
			if ret = "notcontains" set operacao = " not like ",inicio="%",fim="%"
			if ret = "startswith" set operacao = " like ",inicio="",fim="%"
			if ret = "endswith" set operacao = " like ",inicio="%",fim=""
			if ret = "=" set operacao = " = ",inicio="",fim=""
			if ret = "<>" set operacao = " <> ",inicio="",fim=""
			continue
		}
		set ret = $replace(ret," ","")
		set wherefilter = wherefilter_"%upper("_campo_")"_operacao_"%upper('"_inicio_ret_fim_"')"
		set campo="",operacao="",proximacomb=1
	}
	if wherefilter'="" {
		if abrep=1 set wherefilter = wherefilter_")"
	}
	;
	set objLote 	= $get(^FATLote(0,lote,1))
	set inicio 		= $$$FATLoteDataInicial(objLote)
	set fim			= $$$FATLoteDataFinal(objLote)
	set modelo		= $$$FATLoteModelodeLote(objLote)
	set referencia	= $$$FATLoteDatadeReferenciadoPedido(objLote)
	;
	set strStatus 	= $$$OK
	set objModelo	= $get(^FATModeloLote(0,modelo,1))
	set dataReferenciaRetroativa	= $$$FATModeloLoteDataReferenciaRetroativa(objModelo)
	set prazoInclusaoRetroativa 	= $$$FATModeloLotePrazopInclusaoRetroativa(objModelo)

	if $$$FATModeloLoteOrganizacoesCliComeTodos(objModelo)=1{
		set tipoFontePagadora = $$$FATModeloLoteTipoFontePagadora(objModelo)		
		if tipoFontePagadora=1{
			set select = "select CodigodaOrganizacao from FATOrganizacao where company=0 and Eparticular=1 "
			set rs = ##class(%SQL.Statement).%ExecDirect("",select)
			set listClientes = ""
			while(rs.%Next()){
				if listClientes'="" set listClientes = listClientes_","
				set listClientes = listClientes_rs.%Get("CodigodaOrganizacao")
			}
		}else{
			set fontePagadora = $$$FATModeloLoteFontePagadora(objModelo)
			set listClientes = ..buscaFilhos(fontePagadora)
		}
	}else{
		set listClientes = "" 
		set cliente 	 = ""
		for {
			set cliente = $order(^FATModeloLoteClientesComerciais(0,modelo,cliente)) quit:cliente=""
			if listClientes'="" set listClientes = listClientes_","
			set listClientes = listClientes_cliente
		}
	}
	;
	set contador = 0
	Set select1 = "Select Proc.ControleAdmissao,Agend.Numero, Proc.Sequencia, Agend.CodigodoPaciente||' - '||$$SQLGetPatientName^VARSQL(Agend.CodigodoPaciente) CodigodoPaciente, Proc.DataAtendimento, "
	Set select1 = select1 _ "Proc.HoraAtendimento, Proc.GrupoAgendamento,  $$getDescExame^VARSQL(Proc.Procedimento) Procedimento, Proc.Profissional, "
	Set select1 = select1 _ "Proc.DataHoraAdmissao, Agend.Situacao, Agend.CriadoEm, Agend.AlteradoEm, "
	Set select1 = select1 _ "Proc.CodigodaSala, Proc.CodigodoLeito, Proc.Admissao "
	Set select1 = select1 _ "From SQLUser.VARAgendamento As Agend "
	Set select1 = select1 _ "Left Join SQLUser.VARAgendamentoProcedimentos As Proc "
	Set select1 = select1 _ "On Proc.Company = 0 And Agend.Numero = Proc.CodigodoAgendamento "
	Set select1 = select1 _ "left join VARAgendamentoAdmissao as Admissao "
	Set select1 = select1 _ "On Admissao.Codigodaadmissao = Proc.ControleAdmissao "
	Set select1 = select1 _ "Where Agend.Company = 0 And Agend.Situacao IN (4,5) and Proc.ControleAdmissao is not null "
	Set select1 = select1 _ "And Proc.Cancelado = 0 and $$recLote^VARSQL(Proc.ControleAdmissao,'"_job_"')<>-1 "
	Set select1 = select1 _ "And Proc.PlanodeSaude in ('"_$replace(listClientes,",","','")_"') "
	Set select1 = select1 _ "And (Select Count(Fat.ID) From SQLUser.FATLoteFaturas As Fat Where Fat.Company = 0 And Fat.CodigodoAtendimento In (Proc.CodigodoAgendamento,$TRANSLATE(Proc.CodigodoAgendamento,'/',' ')) And Fat.PlanodeSaude in ('"_$replace(listClientes,",","','")_"')) = 0 "
	;
	set meuSQLData="",meuSQLRetr = ""
	if (referencia = 1){
		
	}
	if referencia = 2{
	}
	if referencia = 3{
	}
	if (referencia = 4)||(dataReferenciaRetroativa=4){
		if referencia=4{
			;set meuSQLData = " (Admissao.CriadoData >= '"_inicio_"' and Admissao.CriadoData <= '"_fim_"')"
			set meuSQLData = 							" ("
			set meuSQLData = meuSQLData _ " 	(NVL(%Internal(Agend.DatadeAdmissaoRetroativa),0) = 0 And Admissao.CriadoData Between '"_inicio_"' And '"_fim_"') "
			set meuSQLData = meuSQLData _ " Or "
			set meuSQLData = meuSQLData _ " 	(NVL(%Internal(Agend.DatadeAdmissaoRetroativa),0) > 0 And Agend.DatadeAdmissaoRetroativa Between '"_inicio_"' And '"_fim_"') "
			set meuSQLData = meuSQLData _ ") "
		}
		if dataReferenciaRetroativa=4{
			if prazoInclusaoRetroativa'="" set meuSQLRetr = " (Admissao.CriadoData >= '"_($horolog-prazoInclusaoRetroativa)_"')"
		}
	}
	if (referencia = 5)||(dataReferenciaRetroativa=5){
		if referencia=5{
			;set meuSQLData = " (Admissao.CriadoData >= '"_inicio_"' and Admissao.CriadoData <= '"_fim_"')"
			set meuSQLData = 							" ("
			set meuSQLData = meuSQLData _ " 	(NVL(%Internal(Agend.DatadeAdmissaoRetroativa),0) = 0 And Admissao.CriadoData Between '"_inicio_"' And '"_fim_"') "
			set meuSQLData = meuSQLData _ " Or "
			set meuSQLData = meuSQLData _ " 	(NVL(%Internal(Agend.DatadeAdmissaoRetroativa),0) > 0 And Agend.DatadeAdmissaoRetroativa Between '"_inicio_"' And '"_fim_"') "
			set meuSQLData = meuSQLData _ ") "
			
		}
		if dataReferenciaRetroativa=5{
			if prazoInclusaoRetroativa'="" set meuSQLRetr = " (Admissao.CriadoData >= '"_($horolog-prazoInclusaoRetroativa)_"')"
		}
	}
	if referencia = 6{
	}
	if referencia = 7{
	}
	if meuSQLData'="",meuSQLRetr'="" {
		set select1 = select1_" and ("_meuSQLData_" or "_meuSQLRetr_")"
	}elseif meuSQLData'=""{
		set select1 = select1_" and "_meuSQLData
	}else{
		set select1 = select1_" and "_meuSQLRetr
	}
	;	
	if wherefilter'="" set wherefilter = "where "_wherefilter
	
	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200
	set meuSelect="select * from ("
	set meuSelect=meuSelect_"select top "_top_" *,count(*) totalCount "
	set meuSelect=meuSelect_" from ("_select1_" group by Proc.ControleAdmissao) "_wherefilter_" "_orderBy
	set meuSelect=meuSelect_")"
	if take>0 set meuSelect=meuSelect_" where %VID between "_skip_" and "_take
	set rs = ##class(%SQL.Statement).%ExecDirect("",meuSelect)
	set array = []
	set totalCount = 0
	while(rs.%Next()){
		set ControleAdmissao	= rs.%Get("ControleAdmissao")
		set CodigodoPaciente	= rs.%Get("CodigodoPaciente")
		set DataAtendimento		= rs.%Get("DataAtendimento")
		set HoraAtendimento		= rs.%Get("HoraAtendimento")
		set DataHoraAdmissao	= rs.%Get("DataHoraAdmissao")
		set GrupoAgendamento	= rs.%Get("GrupoAgendamento")
		set totalCount			= rs.%Get("totalCount")
		set linha = {}
		set linha.Fatura			= ControleAdmissao
		set linha.CodigodoPaciente 	= CodigodoPaciente
		set linha.DataAtendimento	= DataAtendimento
		set linha.HoraAtendimento	= HoraAtendimento
		set linha.DataHoraAdmissao	= $zdatetime(DataHoraAdmissao,3)
		set linha.GrupoAgendamento	= GrupoAgendamento
		do array.%Push(linha)
	}
	set retorno = {}
	set retorno.data = array
	set retorno.totalCount = totalCount
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="insereFaturaLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set numeroFatura = $get(%request.Data("numeroFatura",1))
	;
	Set select1 = "Select Agend.Numero, Proc.Sequencia "
	Set select1 = select1 _ "From SQLUser.VARAgendamento As Agend "
	Set select1 = select1 _ "Left Join SQLUser.VARAgendamentoProcedimentos As Proc "
	Set select1 = select1 _ "On Proc.Company = 0 And Agend.Numero = Proc.CodigodoAgendamento "
	Set select1 = select1 _ "Where Agend.Company = 0 And Agend.Situacao IN (4,5) and %upper(Proc.ControleAdmissao)='"_$replace(numeroFatura,"/"," ")_"'  "
	Set select1 = select1 _ "And Proc.Cancelado = 0 "
	;
	set rs = ##class(%SQL.Statement).%ExecDirect("",.select1)
	while(rs.%Next()){
		set Numero = rs.%Get("Numero")
		set Sequencia = rs.%Get("Sequencia")
		set ^mtemp.FATLote(job,Numero,Sequencia,1)=""
	}
	write 1
	quit]]></Implementation>
</Method>

<Method name="recLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	kill ^mtemp.FATLote(job),^mtemp.FATLoteComp(job)
	set codigo = $get(%request.Data("codigo",1))
	set formGeral = {}
	set formControle = {}
	if codigo'=""{
		set objLote					= $get(^FATLote(YM,codigo,1))
		set formGeral.codSituacao	= $$$FATLoteStatus(objLote)
		;
		set formGeral.situacao = formGeral.codSituacao
		if formGeral.situacao'=""{
			set obj = $get(^INPARA(0,"FATLOTESTATUS","PT",formGeral.situacao,1))
			set formGeral.situacao = $$$INPARAText(obj)
		}
		set formGeral.modeloLote	= $$$FATLoteModelodeLote(objLote)
		set dataReferencia			= $$$FATLoteDatadeReferenciadoPedido(objLote)
		if dataReferencia'=""{
			set dataReferencia = $$$INPARAText($get(^INPARA(0,"DATAREFERENCIAPEDIDO","PT",dataReferencia,1)))
		}
		set formGeral.dataReferencia = dataReferencia
		;

		set formGeral.dataInicial	= $select($$$FATLoteDataInicial(objLote)="":"",1:$zdate($$$FATLoteDataInicial(objLote),3))
		set formGeral.dataFinal		= $select($$$FATLoteDataFinal(objLote)="":"",1:$zdate($$$FATLoteDataFinal(objLote),3))
		;
		set formControle.criadoEm				= $$$FATLoteCriadoEm(objLote)
		if formControle.criadoEm'="" set formControle.criadoEm = $zdatetime(formControle.criadoEm,4)
		set formControle.criadoPor				= $$$FATLoteCriadoPor(objLote)
		set formControle.alteradoEm				= $$$FATLoteAlteradoEm(objLote)
		if formControle.alteradoEm'="" set formControle.alteradoEm = $zdatetime(formControle.alteradoEm,4)
		set formControle.alteradoPor			= $$$FATLoteAlteradoPor(objLote)
		;
		set formControle.fechamentoIniciadoEm				= $$$FATLoteFechamentoIniciadoEm(objLote)
		if formControle.fechamentoIniciadoEm'="" set formControle.fechamentoIniciadoEm = $zdatetime(formControle.fechamentoIniciadoEm,4)
		set formControle.fechamentoIniciadoPor			= $$$FATLoteFechamentoIniciadoPor(objLote)
		;
		set formControle.fechadoEm				= $$$FATLoteFechadoEm(objLote)
		if formControle.fechadoEm'="" set formControle.fechadoEm = $zdatetime(formControle.fechadoEm,4)
		set formControle.fechadoPor			= $$$FATLoteFechadoPor(objLote)
		;
		merge ^mtemp.FATLote(job) = ^FATLoteFaturas(YM,codigo)
		merge ^mtemp.FATLoteComp(job) = ^FATLoteFaturasComp(YM,codigo)
	}
	set retorno = {}
	set retorno.formGeral 		= formGeral
	set retorno.formControle 	= formControle
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="getLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set lote	= $get(%request.Data("lote",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	Set searchValue = $Get(%request.Data("searchValue",1))
	set select = "select CodigodoLote,CriadoEm from FATLote where Company=0 "
	if lote'="" set select = select_" and CodigodoLote = '"_lote_"'"

	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200
	set meuSelect="select * from (select top "_take_" * from ("_select_") order by CriadoEm desc)"
	if take>0 set meuSelect=meuSelect_" where %VID between "_skip_" and "_take
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",meuSelect)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodigodoLote")
		set linha.descricao = rs.%Get("CodigodoLote")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="listModeloLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Set codigo 	= $Get(%request.Data("codigo",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	Set searchValue = $Get(%request.Data("searchValue",1))
	set select = "select CodigodoModelodeLote,Descricao from FATModeloLote where Company=0 "
	if codigo '= "" set select = select_" and CodigodoModelodeLote = '"_codigo_"' "
	else  set select = select_" and Ativo=1"
	else  if searchValue'="" set select = select_" and (%upper($$SQLGetTextoSemAcento^VARSQL(Descricao)) like %upper('%"_$$SQLGetTextoSemAcento^VARSQL(Descricao)_"%'))"
	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200
	set meuSelect="select * from ("
	set meuSelect=meuSelect_"select top "_top_" *,count(*) totalCount "
	set meuSelect=meuSelect_" from ("_select_") ORDER BY Descricao"
	set meuSelect=meuSelect_")"
	if take>0 set meuSelect=meuSelect_" where %VID between "_skip_" and "_take
	set rs = ##class(%SQL.Statement).%ExecDirect("",meuSelect)
	set retorno = []
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodigodoModelodeLote")
		set linha.descricao = rs.%Get("Descricao")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="getModeloLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Set codigo 	= $Get(%request.Data("codigo",1))
	set retorno = {}
	if codigo'=""{
		set dataFinalAnt = ""
		set select = "select top 1 DataFinal from FATLote where company=0 and %upper(ModelodeLote)='"_codigo_"' order by CriadoEm desc"		
		set rs = ##class(%SQL.Statement).%ExecDirect("",.select)
		while(rs.%Next()){
			set dataFinalAnt = rs.%Get("DataFinal")
		}
		set obj = $get(^FATModeloLote(0,codigo,1))
		set dataReferencia = $$$FATModeloLoteDataReferenciaPedido(obj)
		if dataReferencia'=""{
			set dataReferencia = $$$INPARAText($get(^INPARA(0,"DATAREFERENCIAPEDIDO","PT",dataReferencia,1)))
		}
		set retorno.dataReferencia  = dataReferencia
		if dataFinalAnt'=""{
			set dataFinalAnt = dataFinalAnt + 1
			if dataFinalAnt>+$horolog set dataFinalAnt = +$horolog
			set retorno.dataInicial 	= $zdate(dataFinalAnt,3)
			set retorno.dataFinal		= $zdate(+$horolog,3)
		}else{
			set retorno.dataInicial		= $zdate($horolog-30,3)
			set retorno.dataFinal		= $zdate(+$horolog,3)
		}
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="recNotasFiscais">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Set lote 	= $Get(%request.Data("lote",1))
	set query	= "Select CodigodaNotaFiscal,"
	set query	= query_" NumerodaNotaFiscal,"
	set query	= query_" DatadeEmissao,"
	set query	= query_" DatadeEmissaoProvisoria,"
	set query	= query_" DatadeVencimento,"
	set query	= query_" RPS,"
	set query	= query_" SeriedoRPS,"
	set query	= query_" $$SQLGetUserParamDesc^VARSQL('FATTIPONOTAFISCAL~'||TipodeNotaFiscal) TipodeNotaFiscal,"
	set query	= query_" $$SQLGetFATModeloNotaFiscal^VARSQL(ModelodaNotaFiscal) ModelodaNotaFiscal,"
	set query	= query_" Case when ENotaparaParticular = 1 then CodigodoPaciente||' - '||$$SQLGetPatientName^VARSQL(CodigodoPaciente) else $$GetOrganizacaoNome^VARSQL(FontePagadora) End FontePagadora,"
	set query	= query_" ValorTotaldasDeducoes,"
	set query	= query_" ValorTotaldaNF,"
	set query	= query_" $$SQLGetUserParamDesc^VARSQL('FATSTATUSNOTAFISCAL~'||StatusdaNotaFiscal) StatusdaNotaFiscal,"
	set query	= query_" StatusdaNotaFiscal CodStatusdaNotaFiscal"
	set query	= query_" from FATNotaFiscal where Company=0 and %upper(NumerodoLote) = '"_lote_"'"
	set rs = ##class(%SQL.Statement).%ExecDirect("",.query)
	set retorno = []
	while(rs.%Next()){
		set linha={}
		set linha.codigoNota			= rs.%Get("CodigodaNotaFiscal")
		set linha.NumerodaNotaFiscal 	= $select(rs.%Get("NumerodaNotaFiscal")="":"-",1:rs.%Get("NumerodaNotaFiscal"))
		set linha.DatadeEmissao 		= $select(rs.%Get("DatadeEmissao")="":"-",1:$zdatetime(rs.%Get("DatadeEmissao"),3))
		set linha.DatadeEmissaoProvisoria = $select(rs.%Get("DatadeEmissaoProvisoria")="":"-",1:$zdate(rs.%Get("DatadeEmissaoProvisoria"),3))
		set linha.DatadeVencimento 		= $zdate(rs.%Get("DatadeVencimento"),3)
		set linha.TipodeNotaFiscal		= rs.%Get("TipodeNotaFiscal")
		set linha.RPS					= rs.%Get("RPS")
		set linha.SeriedoRPS			= rs.%Get("SeriedoRPS")
		set linha.ModelodaNotaFiscal	= rs.%Get("ModelodaNotaFiscal")
		set linha.ValorTotaldasDeducoes	= +rs.%Get("ValorTotaldasDeducoes")
		set linha.ValorTotaldaNF		= +rs.%Get("ValorTotaldaNF")
		set linha.FontePagadora			= rs.%Get("FontePagadora")
		
		set linha.StatusdaNotaFiscal	= rs.%Get("StatusdaNotaFiscal")
		set linha.CodStatusdaNotaFiscal	= rs.%Get("CodStatusdaNotaFiscal")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="recGuias">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Set lote 	= $Get(%request.Data("lote",1))
	set query	= "Select FamiliadaTISS CodFamiliadaTISS,$$SQLGetUserParamDesc^VARSQL('FATVERSAOTISS~'||FamiliadaTISS) FamiliadaTISS"
	set query	= query_" from FATLoteGuias where Company=0 and %upper(NumerodoLote) = '"_lote_"'"
	set rs = ##class(%SQL.Statement).%ExecDirect("",.query)
	set retorno = []
	while(rs.%Next()){
		set linha={}
		set codTISS					= rs.%Get("CodFamiliadaTISS")
		set linha.FamiliadaTISS		= rs.%Get("FamiliadaTISS")
		;
		set total	= ..totalizadorFaturas(lote,codTISS)
		set linha.quantidade	= total.quantidade
		set linha.valor			= total.valor
		set linha.erros			= total.erros
		set linha.situacao		= total.situacao
		set linha.errosTXT		= total.errosTXT
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="totalizadorFaturas">
<ClassMethod>1</ClassMethod>
<FormalSpec>lote,codTISS="",codFatura=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set query = "select CodigodoAtendimento,"
	set query = query_" SequenciadeAtendimento,"
	set query = query_" ValordoProcedimento,"
	set query = query_" Procedimento,"
	set query = query_" PlanodeSaude,"
	set query = query_" InvalidadoPorRegras,"
	set query = query_" RegrasInvalidas,"
	set query = query_" NumerodaFatura,"
	set query = query_" QtdedeProcedimento"
	set query = query_" from FATLoteFaturas where company=0 and %upper(CodigodoLote) = '"_lote_"'"
	if codTISS'="" set query = query_" and %upper(VersaodaTISS) = '"_codTISS_"'"
	if codFatura'="" set query = query_" and %upper(NumerodaFatura) = '"_codFatura_"'"
	set rs = ##class(%SQL.Statement).%ExecDirect("",.query)
	set retorno = {}
	set retorno.quantidade = 0
	set retorno.valor = 0
	set retorno.erros = 0
	set retorno.errosTXT = ""
	kill grupos
	while(rs.%Next()){
		set codigoAtendimento 		= rs.%Get("CodigodoAtendimento")
		set SequenciadeAtendimento 	= rs.%Get("SequenciadeAtendimento")
		set numeroFatura 			= rs.%Get("NumerodaFatura")
		if numeroFatura="" continue
		if '$data(grupos(numeroFatura)){
			set $piece(grupos(numeroFatura),"~",1)=$piece($get(grupos(numeroFatura)),"~",1)+1
		}
		set $piece(grupos(numeroFatura),"~",2)=$piece($get(grupos(numeroFatura)),"~",2)+(rs.%Get("ValordoProcedimento")*rs.%Get("QtdedeProcedimento"))
		if rs.%Get("InvalidadoPorRegras"){
			set $piece(grupos(numeroFatura),"~",3)=$piece($get(grupos(numeroFatura)),"~",3)_"|"_rs.%Get("RegrasInvalidas")
		}
		set componente = ""
		for {
			set componente = $order(^FATLoteFaturasComp(0,lote,codigoAtendimento,SequenciadeAtendimento,componente)) quit:componente=""
			set obj			= $get(^FATLoteFaturasComp(0,lote,codigoAtendimento,SequenciadeAtendimento,componente,1))
			set valorComp	= $$$FATLoteFaturasCompValordoProcedimento(obj)
			set qtdeComp	= $$$FATLoteFaturasCompQtdedoProcedimento(obj)
			set invalidadoComp	= $$$FATLoteFaturasCompInvalidadoPorRegras(obj)
			set regrasComp	= $$$FATLoteFaturasCompRegrasInvalidas(obj)
			set $piece(grupos(numeroFatura),"~",2)	= $piece(grupos(numeroFatura),"~",2) + (valorComp*qtdeComp*rs.%Get("QtdedeProcedimento"))
			if invalidadoComp=1 {
				set $piece(grupos(numeroFatura),"~",3)=$piece($get(grupos(numeroFatura)),"~",3)_"|"_regrasComp
			}
			
		}
	}
	set fatura = ""
	for {
		set fatura = $order(grupos(fatura)) quit:fatura=""
		set retorno.quantidade	= retorno.quantidade+1
		set retorno.valor		= retorno.valor+$piece(grupos(fatura),"~",2)
		set erros = $piece(grupos(fatura),"~",3)
		kill arrayErros
		for erro = 1:1:$length(erros,"|"){
			set erroAtual = $piece(erros,"|",erro)
			if erroAtual="" continue
			set arrayErros(erroAtual)=""
		}
		set retErro = "",contErro=0
		set erroAtual = ""
		for{
			set erroAtual = $order(arrayErros(erroAtual)) quit:erroAtual=""
			set:retErro'="" retErro = retErro_"<br>"
			set retErro = retErro_erroAtual
			set contErro = contErro + 1
		}
		if retErro'=""{
			set retorno.errosTXT	= retorno.errosTXT_"<tr><td>"_fatura_"</td><td>"_retErro_"</td></tr>"
			set retorno.erros 		= retorno.erros+contErro
		}
	}
	if retorno.errosTXT'=""{
		set retorno.errosTXT = "<table><tr><th>Número da Fatura</th><th>Erro</th></tr>"_retorno.errosTXT_"</table>"
	}
	set retorno.situacao = "Gerado com sucesso"
	if retorno.erros>0 set retorno.situacao = "Gerado com erros"
	quit retorno]]></Implementation>
</Method>

<Method name="totalizadorEmitidos">
<ClassMethod>1</ClassMethod>
<FormalSpec>lote,fatura=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set query = "select CodigodaNotaFiscal,"
	set query = query_" ValorTotaldaNF"
	set query = query_" from FATNotaFiscal where company=0 and %upper(NumerodoLote) = '"_lote_"'"
	if fatura'="" set query = query_" and NumerodaFatura = '"_fatura_"'"
	set rs = ##class(%SQL.Statement).%ExecDirect("",.query)
	set retorno = {}
	set retorno.quantidade = 0
	set retorno.valor = 0
	while(rs.%Next()){
		set retorno.quantidade	= retorno.quantidade+1
		set retorno.valor		= retorno.valor+rs.%Get("ValorTotaldaNF")
	}
	quit retorno]]></Implementation>
</Method>

<Method name="gerarGuia">
<ClassMethod>1</ClassMethod>
<FormalSpec>lote</FormalSpec>
<Implementation><![CDATA[	set strStatus = $$$OK
	try{
		set fatura	= ""
		for {
			set fatura = $order(^FATLoteFaturas(0,lote,fatura)) quit:fatura=""
			set sequencia = ""
			for {
				set sequencia = $order(^FATLoteFaturas(0,lote,fatura,sequencia)) quit:sequencia=""
				set obj				= $get(^FATLoteFaturas(0,lote,fatura,sequencia,1))
				set versao			= $$$FATLoteFaturasVersaodaTISS(obj)
				if versao="" continue
				set versoes(versao)=""
			}
		}
		set versao = ""
		for {
			set versao = $order(versoes(versao)) quit:versao=""
			set sequ 	= $order(^FATLoteGuias(0,lote,""),-1)+1
			set obj = ""
			set $$$FATLoteGuiasFamiliadaTISS(obj)	= versao
			set strStatus = $$$Save("FATLoteGuias",lote_","_sequ,obj,$$$YES)
			quit:$$$ISERR(strStatus)
		}
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	quit strStatus]]></Implementation>
</Method>

<Method name="emiteNotaFiscal">
<ClassMethod>1</ClassMethod>
<FormalSpec>codigoNota=""</FormalSpec>
<Implementation><![CDATA[	set retornoJSON = 0
	if codigoNota=""{
		set notas	= $get(%request.Data("notas",1))
		set notas	= [].%FromJSON(notas)
		set iterator = notas.%GetIterator()
		while iterator.%GetNext(.indice,.valor){
			if codigoNota'="" set codigoNota = codigoNota_";"
			set codigoNota = codigoNota_valor
		}

		set retornoJSON = 1
	}
	set strStatus = $$$OK
	tstart
	try{
		for indice=1:1:$length(codigoNota,";"){
			set notafiscal 		= $piece(codigoNota,";",indice)
			if notafiscal="" continue
			set serie			= 1
			set objNotaFiscal 	= $get(^FATNotaFiscal(0,notafiscal,1))
			if $$$FATNotaFiscalRPS(objNotaFiscal)=""{
				lock ^FATRPSControle(0,serie)
				set rps = $order(^FATRPSControle(0,serie,""),-1)+1
				set obj = ""
				set $$$FATRPSControleTipodeDocumentoquereservo(obj) = "NF"
				set $$$FATRPSControleNumerodoDocumento(obj) 		= notafiscal
				set $$$FATRPSControleCriadoEm(obj) 					= $horolog
				set $$$FATRPSControleCriadoPor(obj) 				= YBED
				set strStatus = $$$Save("FATRPSControle",serie_","_rps,obj,$$$YES)
				quit:$$$ISERR(strStatus)
				lock -^FATRPSControle(0,serie)
				;
				set $$$FATNotaFiscalRPS(objNotaFiscal) 		 				= rps
				set $$$FATNotaFiscalSeriedoRPS(objNotaFiscal) 				= serie
				set $$$FATNotaFiscalDataHoradeEmissaodoRPS(objNotaFiscal) 	= $horolog
			}
			set $$$FATNotaFiscalStatusdaNotaFiscal(objNotaFiscal) 		 = 2
			set strStatus = $$$Save("FATNotaFiscal",notafiscal,objNotaFiscal,$$$YES)
			quit:$$$ISERR(strStatus)
			;
			set rps	 	= $$$FATNotaFiscalRPS(objNotaFiscal)
			set serie 	= $$$FATNotaFiscalSeriedoRPS(objNotaFiscal)
		}
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set retorno.status 	= 1
		set retorno.rps		= rps
		set retorno.serie	= serie
		set retorno.type 	= "success"
	}else{
		trollback
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	if 'retornoJSON quit retorno
	write retorno.%ToJSON()
	quit ""]]></Implementation>
</Method>

<Method name="geraArquivo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set lote	= $get(%request.Data("lote",1))
	set notas	= $get(%request.Data("notas",1))
	set arquivo = ""
	tstart
	try{
		set notas	= [].%FromJSON(notas)
		set iterator = notas.%GetIterator()
		set codigoNota = ""
		while iterator.%GetNext(.indice,.codigoNota){
			set objNotaFiscal	= $get(^FATNotaFiscal(0,codigoNota,1))
			set modeloNotaFiscal= $$$FATNotaFiscalModelodaNotaFiscal(objNotaFiscal)
			set objModelo		= $get(^FATModeloNotaFiscal(0,modeloNotaFiscal,1))
			set formatoEmissao	= $$$FATModeloNotaFiscalFormatodaEmissao(objModelo)
			if formatoEmissao="" continue
			set formatos(formatoEmissao,codigoNota)=""
		}
		set formato = ""
		for {
			set formato = $order(formatos(formato)) quit:formato=""
			set notas = ""
			set nota = ""
			for {
				set nota = $order(formatos(formato,nota)) quit:nota=""
				if notas'="" set notas=notas_";"
				set notas = notas_nota
			}
			if formatoEmissao	= "TXTSP" set arquivo = ..formatoPrefeituraSaoPaulo001(lote,notas,YBED)
		}
		
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set retorno.status 	= 1
		set retorno.type 	= "success"
		set retorno.arquivo = YGIF_arquivo
	}else{
		trollback
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()]]></Implementation>
</Method>

<Method name="formatoPrefeituraSaoPaulo001">
<ClassMethod>1</ClassMethod>
<FormalSpec>lote,notas,YBED</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set obj = $get(^WWW012(0,0,1))
	set ftpPath = $$$WWW012PhysicalFTPDirectory(obj)
	set arquivo	= lote_"_"_$length(notas,";")_"RPS_"_$replace($piece($zdatetime($horolog,8,5),"-"),":","")_".txt"
	set pathTemp = "/temp/"_YBED_"/"
	set pathArquivo = ftpPath_pathTemp
	if $$$isWINDOWS{
		set pathArquivo = $replace(pathArquivo,"/","\")
	}else{
		set pathArquivo = $replace(pathArquivo,"\","/")
	}
	if ('##class(%File).DirectoryExists(pathArquivo)) {
		do ##class(%File).CreateDirectoryChain(pathArquivo)
	}
	Set file=##class(%File).%New(pathArquivo_arquivo)
	Do file.Open("WSN")
	;
	for piece=1:1:$length(notas,";"){
		set codigoNota = $piece(notas,";",piece)
		if codigoNota="" continue
		set objNotaFiscal 	= $get(^FATNotaFiscal(0,codigoNota,1))
		set dataEmissaoRPS  = $$$FATNotaFiscalDataHoradeEmissaodoRPS(objNotaFiscal)
		set recebedor	 	= $$$FATNotaFiscalRecebedor(objNotaFiscal)
		set datas(dataEmissaoRPS)=""
	}	
	;
	set objRecebedor = $get(^FATOrganizacao(0,recebedor,1))
	set inscrMunicipal	= $$$FATOrganizacaoInscricaoMunicipal(objRecebedor)
	; Informações do registro 1 - Cabecalho
	set inscrMunicipal 	= ..formataCampo(inscrMunicipal,8,1) ; Campo Inscricao municipal (8 posições, numérico)
	set periodoInicial	= $zdate($order(datas("")),8)		; Campo Periodo inicial (8 posições, YYYYMMDD)
	set periodoFinal	= $zdate($order(datas(""),-1),8)	; Campo Periodo final (8 posições, YYYYMMDD)
	set linha = "1001"_inscrMunicipal_periodoInicial_periodoFinal
	Do file.WriteLine(linha)
	;
	set linhas = 0,totalValor = 0,totalDeducoes = 0
	for piece=1:1:$length(notas,";"){
		set codigoNota = $piece(notas,";",piece)
		if codigoNota="" continue
		;
		set objNotaFiscal 	= $get(^FATNotaFiscal(0,codigoNota,1))
		set rps 	= $$$FATNotaFiscalRPS(objNotaFiscal)
		; Informações do registro 2 - Detalhe
		set serie 	= $$$FATNotaFiscalSeriedoRPS(objNotaFiscal)
		set serie 	= ..formataCampo(serie,5)		; Campo Série do RPS (5 posições, texto)
		set rps 	= $$$FATNotaFiscalRPS(objNotaFiscal)
		set rps 	= ..formataCampo(rps,12,1)							; Campo RPS (12 posições, numérico)
		set dataEmissaoRPS = $$$FATNotaFiscalDataHoradeEmissaodoRPS(objNotaFiscal)
		set dataEmissaoRPS 	= $zdate(dataEmissaoRPS,8)					; Data de Emissão do RPS (8 posições, YYYYMMDD)
		set situacaoRPS	= "T"											; Situação do RPS (T – Tributado em São Paulo)
		set valor 	= $$$FATNotaFiscalValorTotaldaNF(objNotaFiscal)	
		set totalValor = totalValor + valor	
		set valor	= $replace($justify(valor,0,2),".","")
		set valor 	= ..formataCampo(valor,15,1)									 ; Valor do serviço	(15 posições, numérico com 2 casas decimais, sem pontuação)
		set valorDed= $$$FATNotaFiscalValorTotaldasDeducoes(objNotaFiscal)		
		set totalDeducoes = totalDeducoes + valorDed
		set valorDed= $justify(valorDed,0,2)
		set valorDed= ..formataCampo(valorDed,15,1)								 	; Valor das deduções	(15 posições, numérico com 2 casas decimais, sem pontuação)
		;
		set aliquota = 0
		; Busca Imposto
		set imposto = ""
		for {
			set imposto = $order(^FATNotaFiscalTributo(0,codigoNota,imposto)) quit:imposto=""
			set objImposto = $get(^FATNotaFiscalTributo(0,codigoNota,imposto,1))
			set tipoImposto	 	= $$$FATNotaFiscalTributoTipodeImposto(objImposto)
			if tipoImposto'="ISS" continue
			set aliquota	= $$$FATNotaFiscalTributoAliquota(objImposto)
		}
		set aliquota	= $justify(aliquota,0,2)
		set codServico 	= ..formataCampo(4170,5,1)									; Código do serviço prestado (4170)
		set aliquota	= ..formataCampo(aliquota,4,1)								; Aliquota (ignorado caso tributação seja T - dentro do estado) (4 posições, numérico com 2 casas decimais, sem pontuação)
		
		set issRetido	= 2															; 1 para ISS Retido pelo Tomador / 2 para Nota Fiscal sem ISS Retido / 3 para ISS Retido pelo Intermediário. (1 posição, numérico)
		
		set notaParticular = $$$FATNotaFiscalENotaparaParticular(objNotaFiscal)
		if notaParticular{
			set codigoPaciente = $$$FATNotaFiscalCodigodoPaciente(objNotaFiscal)
			set objPaciente = $get(^MEDPatient(0,codigoPaciente,1))
			set cnpj		= $$$MEDPatientSSN(objPaciente)
			set indicadorCPF = 1														; Tipo de identificação (1 CPF, 2 CPNJ ou 3 CPF não informado) (1 posição, numérico)
			if $length(cnpj)=14 set indicadorCPF = 2
			if $length(cnpj)=0 set indicadorCPF = 3
			set cnpj = ..formataCampo(cnpj,14,1)										; CPF/CNPJ do tomador (14 posições, numérico)
			set inscrMunicToma 	=	..formataCampo(0,8,1)								; Inscrição municipal do tomador (8 posições, numérico)
			set inscrEstadToma 	=	..formataCampo(0,12,1)								; Inscrição estadual do tomador (12 posições, numérico)
			set razaoSocial		= 	$$$MEDPatientName(objPaciente)
			set razaoSocial		= 	..formataCampo(razaoSocial,75)						; Campo razão social (75 posições, texto)
			set tipoLogradouro = "Rua"
			set tipoLogradouro 	= ..formataCampo(tipoLogradouro,3)								; Campo Tipo de Logradouro (3 posições, texto)
			set logradouro = $$$MEDPatientStreet(objPaciente)
			set logradouro = ..formataCampo(logradouro,50)										; Campo Endereço (50 posições, texto)
			set numero = $$$MEDPatientFREE4(objPaciente)
			set numero = ..formataCampo(numero,10,0)											; Campo Número (10 posições, texto)
			set complemento = $$$MEDPatientFREE3(objPaciente)
			set complemento = ..formataCampo(complemento,30)									; Campo Complemento (30 posições, texto)
			set bairro = $$$MEDPatientFREE6(objPaciente)
			set bairro = ..formataCampo(bairro,30)												; Campo Bairro (30 posições, texto)
			set cidade = $$$MEDPatientCity(objPaciente)
			set cidade = ..formataCampo(cidade,50)												; Campo Cidade (50 posições, texto)
			set estado = $$$MEDPatientState(objPaciente)
			set estado = ..formataCampo(estado,2)												; Campo Estado (2 posições, texto)
			set cep = $replace($$$MEDPatientZipCode(objPaciente),"-","")
			set cep = ..formataCampo(cep,8,1)													; Campo CEP (8 posições, numerico)
			set email = $$$MEDPatientEmail(objPaciente)
			set email = ..formataCampo(email,75)													; Campo E-mail (75 posições, texto)
		}else{
			set fontePagadora = $$$FATNotaFiscalFontePagadora(objNotaFiscal)
			set objFontePagadora = $get(^FATOrganizacao(0,fontePagadora,1))
			set cnpj			= $$$FATOrganizacaoCNPJ(objFontePagadora)
			set indicadorCPF = 1														; Tipo de identificação (1 CPF, 2 CPNJ ou 3 CPF não informado) (1 posição, numérico)
			if $length(cnpj)=14 set indicadorCPF = 2
			if $length(cnpj)=0 set indicadorCPF = 3
			set cnpj = ..formataCampo(cnpj,14,1)										; CPF/CNPJ do tomador (14 posições, numérico)
			set inscrMunicipal = $$$FATOrganizacaoInscricaoMunicipal(objFontePagadora)
			set inscrEstadual = $$$FATOrganizacaoInscricaoEstadual(objFontePagadora)
			set inscrMunicToma 	=	..formataCampo(inscrMunicipal,8,1)								; Inscrição municipal do tomador (8 posições, numérico)
			set inscrEstadToma 	=	..formataCampo(inscrEstadual,12,1)								; Inscrição estadual do tomador (12 posições, numérico)
			set razaoSocial		= 	$$$FATOrganizacaoRazaoSocial(objFontePagadora)
			set razaoSocial		= 	..formataCampo(razaoSocial,75)						; Campo razão social (75 posições, texto)
			set codEndereco = ""
			for tipo=21,1,11,99{
				if codEndereco '= "" quit
				if $data(^FATOrganizacaoEnderecos(0,1,fontePagadora,tipo)) {
					set codEndereco = $order(^FATOrganizacaoEnderecos(0,1,fontePagadora,tipo,fontePagadora,""))
				}
			}	
			set objEndereco = ""
			if codEndereco'="" set objEndereco = $get(^FATOrganizacaoEndereco(0,fontePagadora,codEndereco,1))
			set tipoLogradouro = $$$FATOrganizacaoEnderecoTipodeLogradouro(objEndereco)
			set tipoLogradouro 	= ..formataCampo(tipoLogradouro,3)								; Campo Tipo de Logradouro (3 posições, texto)
			set logradouro = $$$FATOrganizacaoEnderecoLogradouro(objEndereco)
			set logradouro = ..formataCampo(logradouro,50)										; Campo Endereço (50 posições, texto)
			set numero = $$$FATOrganizacaoEnderecoNumero(objEndereco)
			set numero = ..formataCampo(numero,10,0)											; Campo Número (10 posições, texto)
			set complemento = $$$FATOrganizacaoEnderecoComplemento(objEndereco)
			set complemento = ..formataCampo(complemento,30)									; Campo Complemento (30 posições, texto)
			set bairro = $$$FATOrganizacaoEnderecoBairro(objEndereco)
			set bairro = ..formataCampo(bairro,30)												; Campo Bairro (30 posições, texto)
			set cidade = $$$FATOrganizacaoEnderecoCidade(objEndereco)
			set cidade = ..formataCampo(cidade,50)												; Campo Cidade (50 posições, texto)
			set estado = $$$FATOrganizacaoEnderecoEstado(objEndereco)
			set estado = ..formataCampo(estado,2)												; Campo Estado (2 posições, texto)
			set cep = $replace($$$FATOrganizacaoEnderecoCEP(objEndereco),"-","")
			set cep = ..formataCampo(cep,8,1)													; Campo CEP (8 posições, numerico)
			set email = ..formataCampo("",75)													; Campo E-mail (75 posições, texto)
		}
		set discriminacao = ..getDiscriminacaoIntToExt(codigoNota)							; Campo discriminacao (até 1000 posições, sem caracteres de quebra de linha. Sobstitui-los por |)
		set discriminacao = $replace(discriminacao,$c(10),"|")
		
		set linha = "2RPS  "_serie_rps_dataEmissaoRPS_situacaoRPS_valor_valorDed_codServico_aliquota
		set linha = linha_issRetido_indicadorCPF_cnpj_inscrMunicToma_inscrEstadToma_razaoSocial
		set linha = linha_tipoLogradouro_logradouro_numero_complemento_bairro_cidade_estado_cep_email
		set linha = linha_discriminacao
		Do file.WriteLine(linha)
		set linhas = linhas + 1
	}
	;
	; Informações do registro 9 - Rodapé
	set linhas = ..formataCampo(linhas,7,1)
	set totalValor = ..formataCampo(totalValor,15,1)
	set totalDeducoes = ..formataCampo(totalDeducoes,15,1)
	set linha = "9"_linhas_totalValor_totalDeducoes
	Do file.WriteLine(linha)
	Do file.%Save()
	Do file.Close()
	job ..apagaTemporaria(pathArquivo_arquivo)
	quit pathTemp_arquivo]]></Implementation>
</Method>

<Method name="apagaTemporaria">
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	hang 120
	do ##class(%File).Delete(arquivo)
	quit]]></Implementation>
</Method>

<Method name="getDiscriminacaoIntToExt">
<ClassMethod>1</ClassMethod>
<FormalSpec>codigoNota</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set objNota		= $get(^FATNotaFiscal(0,codigoNota,1))
	set lote		= $$$FATNotaFiscalNumerodoLote(objNota)
	set texto		= $$$FATNotaFiscalDiscriminacaodosServicos(objNota)
	set vencimento	= $zdate($$$FATNotaFiscalDatadeVencimento(objNota),3)
	set retorno		= ..getDiscriminacaoExterno(lote,texto,vencimento)
	quit retorno.valor]]></Implementation>
</Method>

<Method name="formataCampo">
<ClassMethod>1</ClassMethod>
<FormalSpec>campo,tamanho,flagNumerico=0</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	if flagNumerico set campo = $replace(campo,".","")
	set campo = $extract(campo,1,tamanho)
	for i=1:1:tamanho-$length(campo){
		if 'flagNumerico set campo = campo_" "
		if flagNumerico set campo = "0"_campo
	}
	quit campo]]></Implementation>
</Method>

<Method name="removeNotaFiscal">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codigoNota	= $get(%request.Data("codigoNota",1))
	set strStatus = $$$OK
	tstart
	try{
		set strStatus = $$$Kill("FATNotaFiscal",codigoNota)
		quit:$$$ISERR(strStatus)
		set tributo = ""
		for {
			set tributo = $order(^FATNotaFiscalTributo(0,codigoNota,tributo)) quit:tributo=""
			set strStatus	= $$$Kill("FATNotaFiscalTributo",codigoNota_","_tributo)
			quit:$$$ISERR(strStatus)
		}
		
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set retorno.status 	= 1
		set retorno.type 	= "success"
	}else{
		trollback
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()]]></Implementation>
</Method>

<Method name="cancelaNotaFiscal">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codigoNota	= $get(%request.Data("codigoNota",1))
	set strStatus = $$$OK
	tstart
	try{
		set objNotaFiscal 	= $get(^FATNotaFiscal(0,codigoNota,1))
		set $$$FATNotaFiscalNumerodaNotaFiscal(objNotaFiscal)		= ""
		set $$$FATNotaFiscalDatadeEmissao(objNotaFiscal)			= ""
		set $$$FATNotaFiscalCodigodeVerificacaodaNFe(objNotaFiscal)	= ""
		set $$$FATNotaFiscalStatusdaNotaFiscal(objNotaFiscal)		= 1
		set strStatus = $$$Save("FATNotaFiscal",codigoNota,objNotaFiscal,$$$YES)
		quit:$$$ISERR(strStatus)
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set retorno.status 	= 1
		set retorno.type 	= "success"
	}else{
		trollback
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()]]></Implementation>
</Method>

<Method name="recFaturasLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set retorno = []
	set codAgendamento = ""
	;Set job = "Yaj167RBN2"
	for {
		set codAgendamento = $order(^mtemp.FATLote(job,codAgendamento)) quit:codAgendamento=""
		;
		Set objVARAgendamento	= $Get(^VARAgendamento(YM, codAgendamento, 1))
		Set codPaciente			= $$$VARAgendamentoCodigodoPaciente(objVARAgendamento)
		Set codPlanoSaude		= $$$VARAgendamentoPlanodeSaude(objVARAgendamento)
		Set codConvenio			= $$$VARAgendamentoConvenio(objVARAgendamento)
		Set codCarteirinha		= $$$VARAgendamentoCarteirinha(objVARAgendamento)
		set objPlanoSaude 	= $get(^FATOrganizacao(0,codPlanoSaude,1))
		set particular 		= $$$FATOrganizacaoEparticular(objPlanoSaude) 
		set sequencia = ""
		for {
			set sequencia = $order(^mtemp.FATLote(job,codAgendamento,sequencia)) quit:sequencia=""
			;
			set obj = $get(^mtemp.FATLote(job,codAgendamento,sequencia,1))
			if $$$FATLoteFaturasCodigodoPaciente(obj)'=""{
				set codPaciente 		= $$$FATLoteFaturasCodigodoPaciente(obj)
				set codPlanoSaude 		= $$$FATLoteFaturasPlanodeSaude(obj)
				set codConvenio			= $$$FATLoteFaturasConvenio(obj)
				set codCarteirinha		= $$$FATLoteFaturasNumerodaCarteirinha(obj)
				set procedimento		= $$$FATLoteFaturasProcedimento(obj)
				set dataHoraAdmissao	= $$$FATLoteFaturasDataHoraAdmissao(obj)
				set valor				= $$$FATLoteFaturasValordoProcedimento(obj)
				set invalidado			= $$$FATLoteFaturasInvalidadoPorRegras(obj)
				set regras				= $$$FATLoteFaturasRegrasInvalidas(obj)
				set numeroFatura		= $$$FATLoteFaturasNumerodaFatura(obj)
				set quantidade			= $$$FATLoteFaturasQtdedeProcedimento(obj)
				;set valor 				= valor*quantidade
				set componente = ""
				for {
					set componente	= $order(^mtemp.FATLoteComp(job,codAgendamento,sequencia,componente)) quit:componente=""
					set obj			= $get(^mtemp.FATLoteComp(job,codAgendamento,sequencia,componente,1))
					set valorComp	= $$$FATLoteFaturasCompValordoProcedimento(obj)
					set qtdeComp	= $$$FATLoteFaturasCompQtdedoProcedimento(obj)
					set invalidadoComp	= $$$FATLoteFaturasCompInvalidadoPorRegras(obj)
					set regrasComp	= $$$FATLoteFaturasCompRegrasInvalidas(obj)
					set valor	   = valor + (valorComp*qtdeComp*quantidade)
					if invalidadoComp=1 set invalidado = 1
					if regras'="" set regras = regras_"|"
					set regras = regras_regrasComp
				}
			}else{
				Set objVARAgendamentoProcedimentos = $Get(^VARAgendamentoProcedimentos(YM, codAgendamento, sequencia, 1))
				Set dataHoraAdmissao		= $$$VARAgendamentoProcedimentosDataHoraAdmissao(objVARAgendamentoProcedimentos)
				set procedimento			= $$$VARAgendamentoProcedimentosProcedimento(objVARAgendamentoProcedimentos)
				set numeroFatura			= $$$VARAgendamentoProcedimentosControleAdmissao(objVARAgendamentoProcedimentos)
				set qtdeProcedimento	 	= $$$VARAgendamentoProcedimentosQtdeProcedimento(objVARAgendamentoProcedimentos)
				set qtdeProcedimento	 	= $$$VARAgendamentoProcedimentosQtdeProcedimento(objVARAgendamentoProcedimentos)
				;
				Set codPlanoSaude		= $$$VARAgendamentoProcedimentosPlanodeSaude(objVARAgendamentoProcedimentos)
				Set codConvenio			= $$$VARAgendamentoProcedimentosConvenio(objVARAgendamentoProcedimentos)
				Set codCarteirinha		= $$$VARAgendamentoProcedimentosNumdaCarteirinha(objVARAgendamentoProcedimentos)
				set objPlanoSaude 	= $get(^FATOrganizacao(0,codPlanoSaude,1))
				set particular 		= $$$FATOrganizacaoEparticular(objPlanoSaude) 
				;
				if particular{
					set valor				 	= $$$VARAgendamentoProcedimentosValor(objVARAgendamentoProcedimentos)
					set valor	= valor * qtdeProcedimento
					set regras = ""
				}else{
					set objRegrasComerciais		= ##class(VAR.util.FATRegrasComerciais).%New(procedimento,codPlanoSaude,codAgendamento,sequencia)
					if objRegrasComerciais="" continue
					set qtdeProcedimento = qtdeProcedimento * objRegrasComerciais.Quantidade
					set valor = objRegrasComerciais.Valor*qtdeProcedimento
					set codCarteirinha 			= objRegrasComerciais.aplicaMascaraCarteirinha(codCarteirinha)
					set invalidado				= objRegrasComerciais.validaRegras(codAgendamento,sequencia)
					set regras 					= objRegrasComerciais.RegrasInvalidasToString()
					set regrasInvalidas 		= objRegrasComerciais.RegrasInvalidas
					if objRegrasComerciais.isInelegivel{
						if regras'="" set regras = regras_"|"
						set regras = regras_"Procedimento "_objRegrasComerciais.Procedimento_" inelegível para o plano de saúde"
					}else{
						set regras = ""
						for {
							set linha = regrasInvalidas.GetNext(.chave)
							quit:chave=""
							if regras'="" set regras = regras_"|"
							set regras = regras_linha
						}
					}
					set valorComponente = 0
					if objRegrasComerciais.possuiComponentes>0{
						for i=1:1:objRegrasComerciais.Componentes.Count(){
							set componente = objRegrasComerciais.Componentes.GetAt(i)
							set valorComponente = valorComponente + componente.Valor
							;w codAgendamento_"|"_componente.Quantidade_"|"_componente.Valor_"|"_componente.ValorUnitario_"|"_valorComponente_"<br>"
							;
							if componente.isInelegivel{
								if regras'="" set regras = regras_"|"
								set regras = regras_"Componente "_componente.Procedimento_" inelegível para o plano de saúde"
							}else{
								set regrasInvalidas 		= componente.RegrasInvalidas
								for {
									set linha = regrasInvalidas.GetNext(.chave)
									quit:chave=""
									if regras'="" set regras = regras_"|"
									set regras = regras_linha
								}
							}						
						}
					}
					set valor = valor + (valorComponente*qtdeProcedimento)
				}
			}
			if numeroFatura="" continue
			set convenio="",planoSaude=""
			if codConvenio'=""{
				set objConvenio = $get(^FATOrganizacao(0,codConvenio,1))
				set convenio = $$$FATOrganizacaoNome(objConvenio)
			}
			if codPlanoSaude'=""{
				set objPlanoSaude = $get(^FATOrganizacao(0,codPlanoSaude,1))
				set planoSaude = $$$FATOrganizacaoNome(objPlanoSaude)
			}
			set convenioPlano = convenio_"/"_planoSaude
			if convenioPlano="/" set convenioPlano = "-"
			set $piece(grupo(numeroFatura),"~",1) = dataHoraAdmissao
			set $piece(grupo(numeroFatura),"~",2) = codPaciente
			set $piece(grupo(numeroFatura),"~",3) = codCarteirinha
			set $piece(grupo(numeroFatura),"~",4) = convenioPlano
			set $piece(grupo(numeroFatura),"~",5) = $piece($get(grupo(numeroFatura)),"~",5)+valor
			if regras'="" set $piece(grupo(numeroFatura),"~",6) = $piece(grupo(numeroFatura),"~",6)_"|"_regras
			set $piece(grupo(numeroFatura),"~",7) = codAgendamento
			;
		}
	}
	kill ^zzsilmar
	merge ^zzsilmar = grupo
	set fatura=""
	for {
		set fatura = $order(grupo(fatura)) quit:fatura=""
		set dataHoraAdmissao	= $piece(grupo(fatura),"~",1) 
		set codPaciente			= $piece(grupo(fatura),"~",2)
		set codCarteirinha		= $piece(grupo(fatura),"~",3)
		set convenioPlano		= $piece(grupo(fatura),"~",4)
		set valor				= $piece(grupo(fatura),"~",5)
		set regras				= $piece(grupo(fatura),"~",6)
		Set codAgendamento = $piece(grupo(fatura),"~",7)
		;
		if ($$$VARAgendamentoDatadeAdmissaoRetroativa($Get(^VARAgendamento(0,codAgendamento,1)))'="") {
			Set dataHoraAdmissao		= $$$VARAgendamentoDatadeAdmissaoRetroativa(objVARAgendamento)
		}
		;
		If (+valor <= 0) {
			kill ^mtemp.FATLote(job,codAgendamento)
			Continue
		}	
		;
		set linha = {}
		set linha.numeroFatura 	= fatura
		set linha.dataAbertura 	= $zdate(dataHoraAdmissao,3)
		set linha.paciente		= codPaciente_" - "_$$$MEDPatientName($get(^MEDPatient(0,codPaciente,1)))
		set linha.carteirinha	= codCarteirinha
		set linha.convenioPlano = convenioPlano
		;
		set linha.valorTotal 	= valor
		kill regrasVt
		for i=1:1:$length(regras,"|"){
			set regra = $piece(regras,"|",i)
			if regra="" continue
			set regrasVt(regra)=""
		}
		set regraInvalida = ""
		set ocorrencia = ""
		for {
			set ocorrencia = $order(regrasVt(ocorrencia)) quit:ocorrencia=""
			set:regraInvalida'="" regraInvalida = regraInvalida_"<br>"
			set regraInvalida = regraInvalida_ocorrencia
		}
		
		if regraInvalida'="" set linha.invalido 		= 1
		set linha.regras		= regraInvalida
		;
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="removeFaturasLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set numeroFatura	= $get(%request.Data("numeroFatura",1))
	set codAgendamento=""
	for {
		set codAgendamento = $order(^mtemp.FATLote(job,codAgendamento)) quit:codAgendamento=""
		set sequencia=""
		for {
			set sequencia = $order(^mtemp.FATLote(job,codAgendamento,sequencia)) quit:sequencia=""
			set obj = $get(^mtemp.FATLote(job,codAgendamento,sequencia,1))
			if $$$FATLoteFaturasCodigodoPaciente(obj)'=""{
				set numFatura		= $$$FATLoteFaturasNumerodaFatura(obj)
			}else{
				Set objVARAgendamentoProcedimentos = $Get(^VARAgendamentoProcedimentos(0, codAgendamento, sequencia, 1))
				set numFatura			= $$$VARAgendamentoProcedimentosControleAdmissao(objVARAgendamentoProcedimentos)
			}
			if numeroFatura=numFatura{
				kill ^mtemp.FATLote(job,codAgendamento,sequencia)
			}
		}
	}
	write 1
	quit]]></Implementation>
</Method>

<Method name="salvar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set lote			= $get(%request.Data("lote",1))
	set camposGeral		= $get(%request.Data("camposGeral",1))
	set strStatus = $$$OK
	tstart
	try{
		set camposGeral		= [].%FromJSON(camposGeral)
		;
		if lote="" {
			if '$data(^WWW128(0,"FATLote")){
				set obj = "L000000000"
				set strStatus = $$$Save("WWW128","FATLote",obj,$$$YES)
				quit:$$$ISERR(strStatus)
			}		
			Set lote = $$GetNextNumber^COMUtils("FATLote","")
			set objLote = $get(^FATLote(YM,lote,1))
			set dataInicial = camposGeral.dataInicial
			if dataInicial'="" set dataInicial = $zdateh(dataInicial,3)
			set dataFinal = camposGeral.dataFinal
			if dataFinal'="" set dataFinal = $zdateh(dataFinal,3)

			set $$$FATLoteModelodeLote(objLote)				= camposGeral.modeloLote
			set $$$FATLoteDataInicial(objLote)				= dataInicial
			set $$$FATLoteDataFinal(objLote)				= dataFinal
			set $$$FATLoteStatus(objLote)					= 1
			;
			set obj = $get(^FATModeloLote(0,camposGeral.modeloLote,1))
			set dataReferencia = $$$FATModeloLoteDataReferenciaPedido(obj)
			;
			set $$$FATLoteDatadeReferenciadoPedido(objLote)	= dataReferencia
			set strStatus = ..salvaFaturas(lote,objLote)
			quit:$$$ISERR(strStatus)
			set strStatus = $$$Save("FATLote",lote,objLote,$$$YES)
			lock -^FATLote
		}else{
			set strStatus = ..atualizaFaturas(lote)
			quit:$$$ISERR(strStatus)
			set objLote = $get(^FATLote(YM,lote,1))
			set $$$FATLoteAlteradoPor(objLote) = YBED
			set $$$FATLoteAlteradoEm(objLote) = $horolog
			set strStatus = $$$Save("FATLote",lote,objLote,$$$YES)
		}
		;
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set strStatus="Dados salvos com sucesso!"
		set retorno.status = 1
		do retorno.%Set("lote",lote,"String")
		set retorno.type = "success"
		set retorno.mensagem = strStatus
	}else{
		trollback
		set retorno.status = 0
		set retorno.type = "error"
		set retorno.mensagem = $$$Text(strStatus)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="removerLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set lote			= $get(%request.Data("lote",1))
	set strStatus = $$$OK
	tstart
	try{
		if lote'="" {
			set strStatus = $$$Kill("FATLote",lote)
			set numero = ""
			for {
				set numero = $order(^FATLoteFaturas(0,lote,numero)) quit:numero=""
				set sequencia = ""
				for {
					set sequencia = $order(^FATLoteFaturas(0,lote,numero,sequencia)) quit:sequencia=""
					set strStatus = $$$Kill("FATLoteFaturas",lote_","_numero_","_sequencia)
					quit:$$$ISERR(strStatus)
				}
				quit:$$$ISERR(strStatus)
			}
		}
		;
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set strStatus="Pré Lote Excluído com Sucesso!"
		set retorno.status = 1
		set retorno.type = "success"
		set retorno.mensagem = strStatus
	}else{
		trollback
		set retorno.status = 0
		set retorno.type = "error"
		set retorno.mensagem = $$$Text(strStatus)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="fecharLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set lote		= $get(%request.Data("lote",1))
	set strStatus	= $$$OK
	tstart
	try{
		if lote'="" {
			set fatura = ""
			for {
				set fatura = $order(^FATLoteFaturas(0,lote,fatura)) quit:fatura=""
				Set objVARAgendamento	= $Get(^VARAgendamento(YM, fatura, 1))
				Set codPaciente			= $$$VARAgendamentoCodigodoPaciente(objVARAgendamento)
				Set codPlanoSaude		= $$$VARAgendamentoPlanodeSaude(objVARAgendamento)
				Set codConvenio			= $$$VARAgendamentoConvenio(objVARAgendamento)
				Set codCarteirinha		= $$$VARAgendamentoCarteirinha(objVARAgendamento)
				set objPlanoSaude 	= $get(^FATOrganizacao(0,codPlanoSaude,1))
				set particular 		= $$$FATOrganizacaoEparticular(objPlanoSaude) 
				set sequencia = ""
				for {
					set sequencia = $order(^FATLoteFaturas(0,lote,fatura,sequencia)) quit:sequencia=""
					;
					Set objVARAgendamentoProcedimentos = $Get(^VARAgendamentoProcedimentos(YM, fatura, sequencia, 1))
					Set dataHoraAdmissao		= $$$VARAgendamentoProcedimentosDataHoraAdmissao(objVARAgendamentoProcedimentos)
					set procedimento			= $$$VARAgendamentoProcedimentosProcedimento(objVARAgendamentoProcedimentos)
					set numeroFatura			= $$$VARAgendamentoProcedimentosControleAdmissao(objVARAgendamentoProcedimentos)
					set qtdeProcedimento	 	= $$$VARAgendamentoProcedimentosQtdeProcedimento(objVARAgendamentoProcedimentos)
					;
					Set codPlanoSaude		= $$$VARAgendamentoProcedimentosPlanodeSaude(objVARAgendamentoProcedimentos)
					Set codConvenio			= $$$VARAgendamentoProcedimentosConvenio(objVARAgendamentoProcedimentos)
					Set codCarteirinha		= $$$VARAgendamentoProcedimentosNumdaCarteirinha(objVARAgendamentoProcedimentos)
					set objPlanoSaude 	= $get(^FATOrganizacao(0,codPlanoSaude,1))
					set particular 		= $$$FATOrganizacaoEparticular(objPlanoSaude) 
					;
					set objRegrasComerciais		= ##class(VAR.util.FATRegrasComerciais).%New(procedimento,codPlanoSaude,fatura,sequencia)
					if objRegrasComerciais="" continue
					set codCarteirinha 			= objRegrasComerciais.aplicaMascaraCarteirinha(codCarteirinha)
					;
					set obj = $get(^FATLoteFaturas(0,lote,fatura,sequencia,1))
					set $$$FATLoteFaturasCodigodoPaciente(obj)		= codPaciente
					set $$$FATLoteFaturasPlanodeSaude(obj)			= codPlanoSaude
					set $$$FATLoteFaturasConvenio(obj)				= codConvenio
					set $$$FATLoteFaturasNumerodaCarteirinha(obj)	= codCarteirinha
					set $$$FATLoteFaturasProcedimento(obj)			= procedimento
					Set $$$FATLoteFaturasDataHoraAdmissao(obj) 		= dataHoraAdmissao
					Set $$$FATLoteFaturasNumerodaFatura(obj)		= numeroFatura
					;
					if particular{
						set valor 				= $$$VARAgendamentoProcedimentosValor(objVARAgendamentoProcedimentos)
						set qtdeProcedimento 	= $$$VARAgendamentoProcedimentosQtdeProcedimento(objVARAgendamentoProcedimentos)
						set valor				= valor * qtdeProcedimento
						set $$$FATLoteFaturasQtdedeProcedimento(obj) 	= qtdeProcedimento
						set $$$FATLoteFaturasValordoProcedimento(obj) 	= valor
						set strStatus = $$$Save("FATLoteFaturas",lote_","_fatura_","_sequencia,obj,$$$YES)
						quit:$$$ISERR(strStatus)
						;
						if objRegrasComerciais.possuiComponentes>0{
							for i=1:1:objRegrasComerciais.Componentes.Count(){
								set componente = objRegrasComerciais.Componentes.GetAt(i)
								;
								set procComponente = componente.Procedimento
								if procComponente="" continue
								;
								set regras = ""
								#dim componente as VAR.util.FATRegrasComerciais

								set valor 				= $$$VARAgendamentoProcedimentosValor(objVARAgendamentoProcedimentos)
								set qtdeProcedimento 	= $$$VARAgendamentoProcedimentosQtdeProcedimento(objVARAgendamentoProcedimentos)
								set valor				= valor * qtdeProcedimento

								set $$$FATLoteFaturasCompValordoProcedimento(obj) 	= valor
								set $$$FATLoteFaturasCompQtdedoProcedimento(obj) 	= qtdeProcedimento
								set strStatus = $$$Save("FATLoteFaturasComp",lote_","_fatura_","_sequencia_","_procComponente,obj,$$$YES)
								quit:$$$ISERR(strStatus)
							;
							}
						}
						
					}else{
						;
						set qtdeProcedimento = qtdeProcedimento * objRegrasComerciais.Quantidade
						set valor = objRegrasComerciais.Valor*qtdeProcedimento
						;						
						set $$$FATLoteFaturasValordoProcedimento(obj)	= valor
						set $$$FATLoteFaturasVersaodaTISS(obj)			= objRegrasComerciais.VersaoDaTISS
						set $$$FATLoteFaturasCategoriaTISS(obj)			= objRegrasComerciais.CategoriaTISS
						set objRegras = ##class(VAR.util.FATRegrasComerciais).%New("","",fatura,sequencia)
						set $$$FATLoteFaturasInvalidadoPorRegras(obj)	= objRegrasComerciais.InvalidoPorRegras
						;
						set regrasInvalidas 		= objRegrasComerciais.RegrasInvalidas
						if objRegrasComerciais.isInelegivel{
							if regras'="" set regras = regras_"|"
							set regras = regras_"Procedimento "_objRegrasComerciais.Procedimento_" inelegível para o plano de saúde"
						}else{
							set regras = ""
							for {
								set linha = regrasInvalidas.GetNext(.chave)
								quit:chave=""
								if regras'="" set regras = regras_"|"
								set regras = regras_linha
							}
						}
						;
						set objVARAgendamentoGuia = $get(^VARAgendamentoGuia(0,fatura,sequencia,1))
						;
						set $$$FATLoteFaturasRegrasInvalidas(obj)		= regras
						set $$$FATLoteFaturasNumerodaFatura(obj)		= numeroFatura
						;set $$$FATLoteFaturasCategoriaTISS(obj)			= objRegras.CategoriaTISS
						set $$$FATLoteFaturasGuiaConvenio(obj)			= $$$VARAgendamentoGuiaNumerodaGuiaAtribuidapela(objVARAgendamentoGuia)
						set $$$FATLoteFaturasQtdedeProcedimento(obj)	= qtdeProcedimento*objRegrasComerciais.Quantidade
						set strStatus = $$$Save("FATLoteFaturas",lote_","_fatura_","_sequencia,obj,$$$YES)
						quit:$$$ISERR(strStatus)
						;
						if objRegrasComerciais.possuiComponentes>0{
							for i=1:1:objRegrasComerciais.Componentes.Count(){
								set componente = objRegrasComerciais.Componentes.GetAt(i)
								;
								set procComponente = componente.Procedimento
								if procComponente="" continue
								;
								set regras = ""
								if componente.isInelegivel{
									if regras'="" set regras = regras_"|"
									set regras = regras_"Componente "_componente.Procedimento_" inelegível para o plano de saúde"
								}else{
									set regrasInvalidas 		= componente.RegrasInvalidas
									for {
										set linha = regrasInvalidas.GetNext(.chave)
										quit:chave=""
										if regras'="" set regras = regras_"|"
										set regras = regras_linha
									}
								}						
								set obj = $get(^FATLoteFaturasComp(0,lote,fatura,sequencia,procComponente,1))	
								set $$$FATLoteFaturasCompValordoProcedimento(obj) 	= componente.Valor
								set $$$FATLoteFaturasCompQtdedoProcedimento(obj) 	= componente.Quantidade
								set $$$FATLoteFaturasCompVersaodaTISS(obj) 			= componente.VersaoDaTISS
								set $$$FATLoteFaturasCompInvalidadoPorRegras(obj) 	= componente.InvalidoPorRegras
								set $$$FATLoteFaturasCompRegrasInvalidas(obj) 		= regras
								set $$$FATLoteFaturasCompCategoriaTISS(obj) 		= componente.CategoriaTISS
								set $$$FATLoteFaturasCompGuiaConvenio(obj) 			= "" ; Inserir Guia de convenio da VARAgendamentoGuia
								set strStatus = $$$Save("FATLoteFaturasComp",lote_","_fatura_","_sequencia_","_procComponente,obj,$$$YES)
								quit:$$$ISERR(strStatus)
							;
							}
						}
					}
				}
				quit:$$$ISERR(strStatus)
			}
			quit:$$$ISERR(strStatus)
			;
			set strStatus = ..gerarGuia(lote)
			quit:$$$ISERR(strStatus)
			;
			set objLote = $get(^FATLote(YM,lote,1))
			set $$$FATLoteStatus(objLote)		= 2
			set $$$FATLoteFechamentoIniciadoPor(objLote) 	= YBED
			set $$$FATLoteFechamentoIniciadoEm(objLote)  	= $horolog
			set strStatus = $$$Save("FATLote",lote,objLote,$$$YES)
		}
		;
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set strStatus="Fechamento iniciado com sucesso!"
		set retorno.status = 1
		set retorno.type = "success"
		set retorno.mensagem = strStatus
	}else{
		trollback
		set retorno.status = 0
		set retorno.type = "error"
		set retorno.mensagem = $$$Text(strStatus)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="concluirLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set lote		= $get(%request.Data("lote",1))
	set strStatus	= $$$OK
	tstart
	try{
		if lote'="" {
			set objLote = $get(^FATLote(YM,lote,1))
			set $$$FATLoteStatus(objLote)		= 3
			set $$$FATLoteFechadoPor(objLote) 	= YBED
			set $$$FATLoteFechadoEm(objLote)  	= $horolog
			set strStatus = $$$Save("FATLote",lote,objLote,$$$YES)
		}
		;
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set strStatus="Lote finalizado com sucesso!"
		set retorno.status = 1
		set retorno.type = "success"
		set retorno.mensagem = strStatus
	}else{
		trollback
		set retorno.status = 0
		set retorno.type = "error"
		set retorno.mensagem = $$$Text(strStatus)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="cancelarFechamento">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set lote		= $get(%request.Data("lote",1))
	set strStatus	= $$$OK
	tstart
	try{
		if lote'="" {
			If ($Data(^FATGlosas(YM, 10, lote))) {
				set strStatus = "Não é possível cancelar pois há glosa cadastrada."
				quit:$$$ISERR(strStatus)
			}
			set objLote = $get(^FATLote(YM,lote,1))
			if $$$FATLoteStatus(objLote)		= 3{
				set objLote = $get(^FATLote(YM,lote,1))
				set $$$FATLoteStatus(objLote)		= 2
				set $$$FATLoteFechadoPor(objLote) 	= ""
				set $$$FATLoteFechadoEm(objLote)  	= ""
				set strStatus = $$$Save("FATLote",lote,objLote,$$$YES)
			}else{
				if $data(^FATNotaFiscals(0,1,lote)) set strStatus = "Não é possível cancelar pois há notas fiscais não removidas"
				quit:$$$ISERR(strStatus)
				set fatura = ""
				for {
					set fatura = $order(^FATLoteFaturas(0,lote,fatura)) quit:fatura=""
					set sequencia = ""
					for {
						set sequencia = $order(^FATLoteFaturas(0,lote,fatura,sequencia)) quit:sequencia=""
						set strStatus = $$$Save("FATLoteFaturas",lote_","_fatura_","_sequencia,"",$$$YES)
						quit:$$$ISERR(strStatus)
						set componente = ""
						for {
							set componente = $order(^FATLoteFaturasComp(0,lote,fatura,sequencia,componente)) quit:componente=""
							set strStatus = $$$Kill("FATLoteFaturasComp",lote_","_fatura_","_sequencia_","_componente)
							quit:$$$ISERR(strStatus)
						}							
					}
					quit:$$$ISERR(strStatus)
				}
				quit:$$$ISERR(strStatus)
				;
				set guia=""
				for {
					set guia = $order(^FATLoteGuias(0,lote,guia)) quit:guia=""
					set strStatus = $$$Kill("FATLoteGuias",lote_","_guia)
					quit:$$$ISERR(strStatus)
				}
				quit:$$$ISERR(strStatus)
				;
				set objLote = $get(^FATLote(YM,lote,1))
				set $$$FATLoteStatus(objLote)		= 1
				set $$$FATLoteFechamentoIniciadoPor(objLote) 	= ""
				set $$$FATLoteFechamentoIniciadoEm(objLote)  	= ""
				set $$$FATLoteFechadoPor(objLote) 	= ""
				set $$$FATLoteFechadoEm(objLote)  	= ""
				set strStatus = $$$Save("FATLote",lote,objLote,$$$YES)
			}
		}
		;
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set strStatus="Cancelamento do fechamento realizado com sucesso!"
		set retorno.status = 1
		set retorno.type = "success"
		set retorno.mensagem = strStatus
	}else{
		trollback
		set retorno.status = 0
		set retorno.type = "error"
		set retorno.mensagem = $$$Text(strStatus)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="salvaFaturas">
<ClassMethod>1</ClassMethod>
<FormalSpec>lote,objLote</FormalSpec>
<Implementation><![CDATA[	new atendente,inicio,fim,modelo,referencia,strStatus,meuSQL,rs,numero
	set inicio 		= $$$FATLoteDataInicial(objLote)
	set fim			= $$$FATLoteDataFinal(objLote)
	set modelo		= $$$FATLoteModelodeLote(objLote)
	set referencia	= $$$FATLoteDatadeReferenciadoPedido(objLote)
	;
	set strStatus 	= $$$OK
	set objModelo	= $get(^FATModeloLote(0,modelo,1))
	set dataReferenciaRetroativa	= $$$FATModeloLoteDataReferenciaRetroativa(objModelo)
	set prazoInclusaoRetroativa 	= $$$FATModeloLotePrazopInclusaoRetroativa(objModelo)
	if $$$FATModeloLoteOrganizacoesCliComeTodos(objModelo)=1{
		set tipoFontePagadora = $$$FATModeloLoteTipoFontePagadora(objModelo)		
		if tipoFontePagadora=1{
			set select = "select CodigodaOrganizacao from FATOrganizacao where company=0 and Eparticular=1 "
			set rs = ##class(%SQL.Statement).%ExecDirect("",select)
			set listClientes = ""
			while(rs.%Next()){
				if listClientes'="" set listClientes = listClientes_","
				set listClientes = listClientes_rs.%Get("CodigodaOrganizacao")
			}
		}else{
			set fontePagadora = $$$FATModeloLoteFontePagadora(objModelo)
			set listClientes = ..buscaFilhos(fontePagadora)
		}
	}else{
		set listClientes = "" 
		set cliente 	 = ""
		for {
			set cliente = $order(^FATModeloLoteClientesComerciais(0,modelo,cliente)) quit:cliente=""
			if listClientes'="" set listClientes = listClientes_","
			set listClientes = listClientes_cliente
		}
	}
	;
	Set meuSQL = "Select Agend.Numero, Proc.Sequencia,$$recLote^VARSQL(Agend.Numero,Proc.Sequencia) Lote "
	Set meuSQL = meuSQL _ "From SQLUser.VARAgendamento As Agend "
	Set meuSQL = meuSQL _ "Left Join SQLUser.VARAgendamentoProcedimentos As Proc "
	Set meuSQL = meuSQL _ "On Proc.Company = 0 And Agend.Numero = Proc.CodigodoAgendamento "
	Set meuSQL = meuSQL _ "left join VARAgendamentoAdmissao as Admissao "
	Set meuSQL = meuSQL _ "On Admissao.Codigodaadmissao = Proc.ControleAdmissao "
	Set meuSQL = meuSQL _ "Where Agend.Company = 0 And Agend.Situacao IN (4,5) "
	Set meuSQL = meuSQL _ "And Proc.Cancelado = 0 "
	Set meuSQL = meuSQL _ "And Proc.PlanodeSaude in ('"_$replace(listClientes,",","','")_"') "
	;;;-
	Set meuSQL = meuSQL _ "And (Select Count(Fat.ID) From SQLUser.FATLoteFaturas As Fat Where Fat.Company = 0 "
	Set meuSQL = meuSQL _ "And Fat.CodigodoAtendimento In (Proc.CodigodoAgendamento,$TRANSLATE(Proc.CodigodoAgendamento,'/',' ')) "
	Set meuSQL = meuSQL _ "And Fat.PlanodeSaude in ('"_$replace(listClientes,",","','")_"')) = 0 "
	;;;-
	;
	set meuSQLData="",meuSQLRetr = ""
	if (referencia = 1){
		
	}
	if referencia = 2{
	}
	if referencia = 3{
	}
	if (referencia = 4)||(dataReferenciaRetroativa=4){
		if referencia=4{
			;set meuSQLData = " (+Proc.DataHoraAdmissao >= '"_inicio_"' and +Proc.DataHoraAdmissao <= '"_fim_"')"
			;set meuSQLData = " (Admissao.CriadoData >= '"_inicio_"' and Admissao.CriadoData <= '"_fim_"')"
	
			set meuSQLData = 							" ("
			set meuSQLData = meuSQLData _ " 	(NVL(%Internal(Agend.DatadeAdmissaoRetroativa),0) = 0 And Admissao.CriadoData Between '"_inicio_"' And '"_fim_"') "
			set meuSQLData = meuSQLData _ " Or "
			set meuSQLData = meuSQLData _ " 	(NVL(%Internal(Agend.DatadeAdmissaoRetroativa),0) > 0 And Agend.DatadeAdmissaoRetroativa Between '"_inicio_"' And '"_fim_"') "
			set meuSQLData = meuSQLData _ ") "
	
		}else{
			;if prazoInclusaoRetroativa'="" set meuSQLRetr = " (+Proc.DataHoraAdmissao >= '"_($horolog-prazoInclusaoRetroativa)_"')"
			if prazoInclusaoRetroativa'="" set meuSQLRetr = " (Admissao.CriadoData >= '"_($horolog-prazoInclusaoRetroativa)_"')"
		}
	}
	if (referencia = 5)||(dataReferenciaRetroativa=5){
		if referencia=5{
			;set meuSQLData = " (+Proc.DataAtendimento >= '"_inicio_"' and +Proc.DataAtendimento <= '"_fim_"')"
			;set meuSQLData = " (Admissao.CriadoData >= '"_inicio_"' and Admissao.CriadoData <= '"_fim_"')"
	
			set meuSQLData = 							" ("
			set meuSQLData = meuSQLData _ " 	(NVL(%Internal(Agend.DatadeAdmissaoRetroativa),0) = 0 And Admissao.CriadoData Between '"_inicio_"' And '"_fim_"') "
			set meuSQLData = meuSQLData _ " Or "
			set meuSQLData = meuSQLData _ " 	(NVL(%Internal(Agend.DatadeAdmissaoRetroativa),0) > 0 And Agend.DatadeAdmissaoRetroativa Between '"_inicio_"' And '"_fim_"') "
			set meuSQLData = meuSQLData _ ") "

		}else{
			;if prazoInclusaoRetroativa'="" set meuSQLRetr = " (+Proc.DataAtendimento >= '"_($horolog-prazoInclusaoRetroativa)_"')"
			if prazoInclusaoRetroativa'="" set meuSQLRetr = " (Admissao.CriadoData >= '"_($horolog-prazoInclusaoRetroativa)_"')"
		}
	}
	if referencia = 6{
	}
	if referencia = 7{
	}
	if meuSQLData'="",meuSQLRetr'="" {
		set meuSQL = meuSQL_" and ("_meuSQLData_" or "_meuSQLRetr_")"
	}elseif meuSQLData'=""{
		set meuSQL = meuSQL_" and "_meuSQLData
	}else{
		set meuSQL = meuSQL_" and "_meuSQLRetr
	}
	set ^mtemp.zzsilmar = meuSQL
	Set rs = ##class(%SQL.Statement).%ExecDirect("",.meuSQL)
	
	while(rs.%Next()){
		set numero = rs.%Get("Numero")
		set sequencia = rs.%Get("Sequencia")
		set loteFA = rs.%Get("Lote")
		if loteFA'="" continue
		set strStatus = $$$Save("FATLoteFaturas",lote_","_numero_","_sequencia,"",$$$YES)
		quit:$$$ISERR(strStatus)
	}
	if $$$ISOK(strStatus){
		if '$data(^FATLoteFaturas(0,lote)){
			set strStatus = "Não há faturas em aberto para a geração do Lote"
		}
	}
	quit strStatus]]></Implementation>
</Method>

<Method name="buscaFilhos">
<ClassMethod>1</ClassMethod>
<FormalSpec>codigoPai</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set retorno = ""
	set select = "select CodigodaOrganizacao,Nome from  FATOrganizacao where Company=0 and OrganizacaoPai = '"_codigoPai_"' "
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		if retorno'="" set retorno = retorno_","
		set retorno = retorno_rs.%Get("CodigodaOrganizacao")
		set retFilho = ..buscaFilhos(rs.%Get("CodigodaOrganizacao"))
		if retFilho'=""{
			if retorno'="" set retorno = retorno_","
			set retorno = retorno_retFilho
		}
	}
	quit retorno]]></Implementation>
</Method>

<Method name="atualizaFaturas">
<ClassMethod>1</ClassMethod>
<FormalSpec>lote</FormalSpec>
<Implementation><![CDATA[	new strStatus,numero,sequencia,faturas
	set strStatus = $$$OK
	;
	kill faturas
	set numero = ""
	for {
		set numero = $order(^mtemp.FATLote(job,numero)) quit:numero=""
		set sequencia = ""
		for {
			set sequencia = $order(^mtemp.FATLote(job,numero,sequencia)) quit:sequencia=""
			set strStatus = $$$Save("FATLoteFaturas",lote_","_numero_","_sequencia,"",$$$YES)
			quit:$$$ISERR(strStatus)
			set faturas(numero,sequencia)=""
		}
		quit:$$$ISERR(strStatus)
	}
	
	set numero = ""
	for {
		set numero = $order(^FATLoteFaturas(0,lote,numero)) quit:numero=""
		set sequencia = ""
		for {
			set sequencia = $order(^FATLoteFaturas(0,lote,numero,sequencia)) quit:sequencia=""
			if $data(faturas(numero,sequencia)) continue
			set strStatus = $$$Kill("FATLoteFaturas",lote_","_numero_","_sequencia)
			quit:$$$ISERR(strStatus)
		}
		quit:$$$ISERR(strStatus)
	}
	quit strStatus]]></Implementation>
</Method>

<Method name="geraXMLGuia">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set lote = $get(%request.Data("lote",1))
	do ##class(VAR.CSP.PreparacaoTISS).GerarXML(lote,YBED,1)
	;
	set modulo 		= 99
	set empresa 	= 0
	set dname = $$GetDiretorioFisico^VARBRDiretorios(empresa,modulo)
	if ($extract(dname, $length(dname)) '= "\") {
		set dname = dname _ "\"
	}
	set dname = dname_lote
	if $$$isWINDOWS{
		set barrade = "/"
		set barrapara = "\"
	}else{
		set barrade = "\"
		set barrapara = "/"
	}	
	set dname = $replace(dname,barrade,barrapara)
	set arquivo = ""
	set objResultSet = ##class(%ResultSet).%New("%Library.File:FileSet")
	if $$$ISOK(objResultSet.Execute(dname,"*.zip","DateModified")) {
		for {
			quit:'objResultSet.Next()
			set arquivo = objResultSet.Data("Name")
			quit
		}
	}
	set retorno = {}
	set retorno.status = 0
	if arquivo'=""{
		set retorno.status = 1
		set nomeArquivo = $piece(arquivo,barrapara,$length(arquivo,barrapara))
		set obj = $get(^WWW012(0,0,1))		
		set ftpPath = $$$WWW012PhysicalFTPDirectory(obj)
		set pathTemp = "/temp/"_YBED_"/"
		set pathArquivo = ftpPath_pathTemp
		set pathArquivo = $replace(pathArquivo,barrade,barrapara)
		if ('##class(%File).DirectoryExists(pathArquivo)) {
			do ##class(%File).CreateDirectoryChain(pathArquivo)
		}
		if ('##class(%File).CopyFile(arquivo,pathArquivo_nomeArquivo)) 
		job ..apagaTemporaria(pathArquivo_nomeArquivo)
		set retorno.arquivo = YGIF_pathTemp_nomeArquivo
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="validaSessao">
<ClassMethod>1</ClassMethod>
<FormalSpec>callMode=""</FormalSpec>
<Implementation><![CDATA[	set status = $$VerifySession^VARCSPUtils(YBED, YUSER)
	if status=0||(YBED="UNKNOWN"){
		set status=0
		set %response.Status="401 Unauthorized"
		set resp={}
		set resp.status=0
		set resp.mensagem="Usuário não está logado ou a sessão expirou."
		write resp.%ToJSON()
	}elseif callMode=""{
		set resp={}
		set resp.status=1
		write resp.%ToJSON()
	}
	quit status]]></Implementation>
</Method>

<Method name="getRelatorios">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y 		= "~"
	Set YBED 	= YBED
	;
	Set lote 	= $Get(%request.Data("lote",1))
	;	
	Set array = []
	;
	IF (lote = "") {
		Do array.%ToJSON()	
		Return $$$OK
	} 
	;
	Set objFATLote 	= $Get(^FATLote(YM, lote, 1))
	Set codModelo 	= $$$FATLoteModelodeLote(objFATLote)
	Set dataInicial = $$$FATLoteDataInicial(objFATLote) 
	Set dataFinal 	= $$$FATLoteDataFinal(objFATLote)
	;
	Set objModeloLote = ""
	Set:codModelo'="" objModeloLote = $Get(^FATModeloLote(YM, codModelo, 1))
	Set relatorios = $$$FATModeloLoteModelodeRelatorios(objModeloLote)
	For count = 1 : 1 : $Length(relatorios,";") {
		If ($Piece(relatorios,";",count) = "") Continue
		Set list = {}
		Set list.modelo = $Piece(relatorios,";",count)
		Set list.dataInicial = $ZDate(dataInicial,3)
		Set list.dataFinal = $ZDate(dataFinal,3)
		Set list.lote	= lote
		Do array.%Push(list)
	}
	;
	Do array.%ToJSON()	
	Return $$$OK]]></Implementation>
</Method>

<Method name="calculaPrazoVencimento">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPrazoVencimento</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	Set tPrazoVencimento = $Extract(pPrazoVencimento,1) 
	Set nPrazoVencimento = $Extract(pPrazoVencimento,2,$Length(pPrazoVencimento)) 
	If (tPrazoVencimento '= "D" && (tPrazoVencimento '= "U") && (tPrazoVencimento '= "C")) {
		Return $ZDate($Horolog,3)
	}
	If ('$ISVALIDNUM(nPrazoVencimento))	Return $ZDate($Horolog,3)
	;
	If (tPrazoVencimento = "D") {
		Set dia = +$Piece($ZDate($Horolog,4),"/",1)
		Set mes = +$Piece($ZDate($Horolog,4),"/",2)
		Set ano = +$Piece($ZDate($Horolog,4),"/",3)
		If (nPrazoVencimento<dia) {
			Set mes = mes+1
			If mes>12 Set ano=ano+1,mes=1
		}
		Set dataVencimento = ano_"/"_mes_"/"_nPrazoVencimento
	}
	;
	If (tPrazoVencimento = "C") {
		Set data = $Horolog + nPrazoVencimento
		Set dataVencimento = $ZDate(data,3)
	}
	;
	If (tPrazoVencimento = "U") {
		Set data = $Horolog
		For i = 1 : 1 {
			Set data = data + 1
			If ($ZDate(data,10) = 0) Continue ;Domingo 
			If ($ZDate(data,10) = 6) Continue ;Sábado 
			If ($Data(^VARDiasUnidadeNaoFunciona(0,1,data))) Continue ;Cadastro de Feriados
			Set nPrazoVencimento = nPrazoVencimento - 1
			Quit:nPrazoVencimento=0
		}
		Set dataVencimento = $ZDate(data,3)
	}
	;
	Return dataVencimento]]></Implementation>
</Method>

<Method name="getValorLote">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLote</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	$$$VAR
	Set YM = 0
	Set Y = "~"
	Set valorTotal = 0
	Set meuSQL = "select * from FATLoteFAturas where Company=0 And CodigodoLote = '"_pLote_"' "
	Set rSet = ##class(%SQL.Statement).%ExecDirect("",.meuSQL)
	while(rSet.%Next()){

		Set objVARAgendamentoProcedimentos = $Get(^VARAgendamentoProcedimentos(YM, rSet.%Get("CodigodoAtendimento"), rSet.%Get("SequenciadeAtendimento"), 1))
		Set codPlanoSaude = $$$VARAgendamentoProcedimentosPlanodeSaude(objVARAgendamentoProcedimentos)
		Set objPlanoSaude = $get(^FATOrganizacao(0,codPlanoSaude,1))
		set particular 	  = $$$FATOrganizacaoEparticular(objPlanoSaude) 
		;
		Set valor = 0
		if particular{
			set valor	= $$$VARAgendamentoProcedimentosValor(objVARAgendamentoProcedimentos)
			set valor	= valor * rSet.%Get("QtdedeProcedimento")
		}else{
			set objRegrasComerciais		= ##class(VAR.util.FATRegrasComerciais).%New(rSet.%Get("Procedimento"),codPlanoSaude,rSet.%Get("CodigodoAtendimento"),rSet.%Get("SequenciadeAtendimento"))
			if objRegrasComerciais="" continue
			set qtdeProcedimento = rSet.%Get("QtdedeProcedimento") * objRegrasComerciais.Quantidade
			set valor = objRegrasComerciais.Valor*qtdeProcedimento
			set valorComponente = 0
			if objRegrasComerciais.possuiComponentes>0{
				for i=1:1:objRegrasComerciais.Componentes.Count(){
					set componente = objRegrasComerciais.Componentes.GetAt(i)
					set valorComponente = valorComponente + componente.Valor
					;w codAgendamento_"|"_componente.Quantidade_"|"_componente.Valor_"|"_componente.ValorUnitario_"|"_valorComponente_"<br>"
					;
					if componente.isInelegivel{
						if regras'="" set regras = regras_"|"
						set regras = regras_"Componente "_componente.Procedimento_" inelegível para o plano de saúde"
					}else{
						set regrasInvalidas 		= componente.RegrasInvalidas
						for {
							set linha = regrasInvalidas.GetNext(.chave)
							quit:chave=""
							if regras'="" set regras = regras_"|"
							set regras = regras_linha
						}
					}						
				}
			}
			set valor = valor + (valorComponente*qtdeProcedimento)
		}
		Set valorTotal = valorTotal + valor
	}
	Return valorTotal]]></Implementation>
</Method>
</Class>
</Export>