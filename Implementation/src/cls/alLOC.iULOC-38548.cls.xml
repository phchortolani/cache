<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alLOC.iULOC">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>alLOC.iLOC</Super>

<Method name="IsSynced">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Validates all V1 Locations against V2 instances, show inconsistencies as errors
	; Validates all V1 Storages against V2 instances,  show inconsistencies as errors
	;
	; History:
	; 15-Apr-2008	HQN		SR15672: Moved Location Specific details to IsSyncedLocations
	; 14-Apr-2008	HQN		SR15672: Implemented loop through all V1 Locations
	; 							Moved from IsSynced
	; 11-Apr-2008	HQN		SR15672: Created
	;-------------------------------------------------------------------------------
	set sc = ##class(alLOC.iULOC).IsSyncedLocations()
	; FIXME : Where is storage check?
	quit sc
]]></Implementation>
</Method>

<Method name="IsSyncedLocations">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Validates all V1 Locations against V2 instances,
	; show inconsistencies as errors
	;
	; History:
	; 15-Apr-2008	HQN		SR15672: Moved from IsSynced
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set idxLocn = ""
	set idxCompany = 0
	for {
		set idxLocn = $order(^WWW0121(0,idxCompany,idxLocn)) 
		quit:idxLocn=""
		
		set objULocation = ##class(alLOC.dULocation).%OpenId(idxCompany_"||"_idxLocn,0) ; FIXME .sc?
		set scLocn = objULocation.IsSynced()
		if $$$ISERR(scLocn) set sc = $system.Status.AppendStatus(scLocn,sc)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="IsSyncedStorages">
<ClassMethod>1</ClassMethod>
<FormalSpec>idxLocn:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Validates all V1 Storages against V2 instances,
	; show inconsistencies as errors
	;
	; History:
	; 15-Apr-2008	HQN		SR15672: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set idxStorage = ""
	set idxCompany = 0
	if idxLocn = "" {
		for {
			set idxLocn = $order(^WWW0121(0,idxCompany,idxLocn)) 
			quit:(idxLocn = "")
			
			set lstLocations = $get(lstLocations)_$lb(idxLocn)
		}
	} else {
		set lstLocations = $lb(idxLocn)
	}
	for loopLocations=1:1:$listlength(lstLocations) {
		set idxLocn = $listget(lstLocations,loopLocations)
		for {
			set idxStorage = $order(^INLP(idxCompany,idxLocn,idxStorage))
			quit:(idxStorage = "")
			
			set objStorage = ##class(alLOC.dUStorage).%OpenId(idxCompany_"||"_idxLocn_"||"_idxStorage,0,.sc)
			set scStorage = objStorage.IsSynced()
			if $$$ISERR(scStorage) set sc = $system.Status.AppendStatus(scStorage,sc)
		}
	}
	quit sc
]]></Implementation>
</Method>
</Class>
</Export>