<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.cache.alphalinc.SourceMigrator">
<ClassType/>
<Import>VAR.infra.cache,VAR.infra.util</Import>
<IncludeCode>VARLog</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="ExportaTudo">
<ClassMethod>1</ClassMethod>
<FormalSpec>prefixo:%String</FormalSpec>
<Implementation><![CDATA[	do ..InicializaCommonDir()

	write !, "Exportando rotinas INC ..."
	kill itens
	do ..GetRotinas("inc", "", .itens)
	do ..ExportaXml(prefixo, "RotinasINC", .itens)

	write !, "Exportando rotinas INT ..."
	kill itens
	do ..GetRotinas("int", "", .itens)
	do ..ExportaXml(prefixo, "RotinasINT", .itens)

	write !, "Exportando rotinas MAC ..."
	kill itens
	do ..GetRotinas("mac", "", .itens)
	do ..ExportaXml(prefixo, "RotinasMAC", .itens)

	write !!, "Exportando classes 'User' ..."
	kill itens
	do ..GetClasses(.itens, 1)
	do ..ExportaXml(prefixo, "ClassesUser", .itens)

	write !!, "Exportando as outras classes ..."
	kill itens
	do ..GetClasses(.itens, 0)
	do ..ExportaXml(prefixo, "ClassesOutras", .itens)]]></Implementation>
</Method>

<Method name="ExportaRotinasCore">
<ClassMethod>1</ClassMethod>
<FormalSpec>prefixo:%String</FormalSpec>
<Implementation><![CDATA[	do ..InicializaCommonDir()
	
	write !, "Exportando rotinas INC (WWW, COM e IN) ..."
	kill itens
	do ..GetRotinas("inc", "WWW", .itens)
	do ..ExportaXml(prefixo, "RotinasINC_WWW", .itens)
	kill itens
	do ..GetRotinas("inc", "COM", .itens)
	do ..ExportaXml(prefixo, "RotinasINC_COM", .itens)
	kill itens
	do ..GetRotinas("inc", "IN", .itens)
	do ..ExportaXml(prefixo, "RotinasINC_IN", .itens)

	write !, "Exportando rotinas INT (WWW, COM e IN) ..."
	kill itens
	do ..GetRotinas("int", "WWW", .itens)
	do ..ExportaXml(prefixo, "RotinasINT_WWW", .itens)
	kill itens
	do ..GetRotinas("int", "COM", .itens)
	do ..ExportaXml(prefixo, "RotinasINT_COM", .itens)
	kill itens
	do ..GetRotinas("int", "IN", .itens)
	do ..ExportaXml(prefixo, "RotinasINT_IN", .itens)

	write !, "Exportando rotinas MAC (WWW, COM e IN) ..."
	kill itens
	do ..GetRotinas("mac", "WWW", .itens)
	do ..ExportaXml(prefixo, "RotinasMAC_WWW", .itens)
	kill itens
	do ..GetRotinas("mac", "COM", .itens)
	do ..ExportaXml(prefixo, "RotinasMAC_COM", .itens)
	kill itens
	do ..GetRotinas("mac", "IN", .itens)
	do ..ExportaXml(prefixo, "RotinasMAC_IN", .itens)]]></Implementation>
</Method>

<Method name="ImportaTudo">
<ClassMethod>1</ClassMethod>
<FormalSpec>prefixo:%String</FormalSpec>
<Implementation><![CDATA[	write !, "Importando rotinas INC ..."
	do ..ImportaXml(prefixo, "RotinasINC")

	write !, "Importando rotinas INT ..."
	do ..ImportaXml(prefixo, "RotinasINT")

	write !, "Importando rotinas MAC ..."
	do ..ImportaXml(prefixo, "RotinasMAC")

	write !!, "Importando classes 'User' ..."
	do ..ImportaXml(prefixo, "ClassesUser")

	write !!, "Importando as outras classes ..."
	do ..ImportaXml(prefixo, "ClassesOutras")]]></Implementation>
</Method>

<Method name="ImportaRotinasCore">
<ClassMethod>1</ClassMethod>
<FormalSpec>prefixo:%String</FormalSpec>
<Implementation><![CDATA[	write !, "Importando rotinas INC (WWW, COM e IN) ..."
	do ..ImportaXml(prefixo, "RotinasINC_WWW")
	do ..ImportaXml(prefixo, "RotinasINC_COM")
	do ..ImportaXml(prefixo, "RotinasINC_IN")

	write !, "Importando rotinas INT (WWW, COM e IN) ..."
	do ..ImportaXml(prefixo, "RotinasINT_WWW")
	do ..ImportaXml(prefixo, "RotinasINT_COM")
	do ..ImportaXml(prefixo, "RotinasINT_IN")

	write !, "Importando rotinas MAC (WWW, COM e IN) ..."
	do ..ImportaXml(prefixo, "RotinasMAC_WWW")
	do ..ImportaXml(prefixo, "RotinasMAC_COM")
	do ..ImportaXml(prefixo, "RotinasMAC_IN")]]></Implementation>
</Method>

<Method name="CompilaTudo">
<ClassMethod>1</ClassMethod>
<FormalSpec>prefixo:%String,forcarCompilacao:%Boolean=0</FormalSpec>
<Implementation><![CDATA[	write !, "Compilando as classes do pacote User individualmente ..."
	do ..CompilaClassesUserIndivid(forcarCompilacao)

	write !!, "Gerando e compilando projeto '", prefixo, "' com todas as Rotinas (INC, INT e MAC) ..."
	kill itens
	do ..GetRotinas("inc", "", .itens)
	do ..GetRotinas("int", "", .itens)
	do ..GetRotinas("mac", "", .itens)
	do ##class(Project).Create(prefixo_"Rotinas", .itens)
	do ##class(Project).Compile(prefixo_"Rotinas", forcarCompilacao)

	write !!, "Gerando e compilando projeto '", prefixo, "' com todas as Classes ..."
	kill itens
	do ..GetClasses(.itens, 0)
	do ##class(Project).Create(prefixo_"Classes", .itens)
	do ##class(Project).Compile(prefixo_"Classes", forcarCompilacao)

	//do ..CompilaClassesPorPacote()]]></Implementation>
</Method>

<Method name="CompilaRotinasCore">
<ClassMethod>1</ClassMethod>
<FormalSpec>prefixo:%String,forcarCompilacao:%Boolean=0</FormalSpec>
<Implementation><![CDATA[	write !!, "Gerando e compilando projeto '", prefixo, "' com todas as Rotinas (INC, INT e MAC) ..."
	kill itens
	do ..GetRotinas("inc", "WWW", .itens)
	do ..GetRotinas("inc", "COM", .itens)
	do ..GetRotinas("inc", "IN", .itens)
	do ..GetRotinas("int", "WWW", .itens)
	do ..GetRotinas("int", "COM", .itens)
	do ..GetRotinas("int", "IN", .itens)
	do ..GetRotinas("mac", "WWW", .itens)
	do ..GetRotinas("mac", "COM", .itens)
	do ..GetRotinas("mac", "IN", .itens)
	do ##class(Project).Create(prefixo_"Rotinas", .itens)
	do ##class(Project).Compile(prefixo_"Rotinas", forcarCompilacao)]]></Implementation>
</Method>

<Method name="InicializaCommonDir">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	if ('##class(DirectoryFile).Exists(..GetCommonDir()))
	{
		if ('##class(DirectoryFile).CreateDir(..GetCommonDir()))
		{
			write !, "Erro ao criar diretório '", ..GetCommonDir(), "'"
		}
	}]]></Implementation>
</Method>

<Method name="ExportaXml">
<ClassMethod>1</ClassMethod>
<FormalSpec>prefixo:%String,tipo:%String,&amp;itens</FormalSpec>
<Implementation><![CDATA[	set sc = $System.OBJ.Export(.itens, ..GetCommonDir()_prefixo_tipo_".xml", "d-p")
	write !, "Arquivo '", prefixo_tipo, ".xml' exportado"

	if ('$$$ISOK(sc))
	{
		do DecomposeStatus^%apiOBJ(sc, .errors, "d")
	}]]></Implementation>
</Method>

<Method name="ImportaXml">
<ClassMethod>1</ClassMethod>
<FormalSpec>prefixo:%String,tipo:%String</FormalSpec>
<Implementation><![CDATA[	quit:('##class(DirectoryFile).Exists(..GetCommonDir()_prefixo_tipo_".xml"))
	
	set sc = $System.OBJ.Load(..GetCommonDir()_prefixo_tipo_".xml", "d-p")
	write !, "Arquivo '", prefixo_tipo, ".xml' importado"

	if ('$$$ISOK(sc))
	{
		do DecomposeStatus^%apiOBJ(sc, .errors, "d")
	}]]></Implementation>
</Method>

<Method name="GetRotinas">
<ClassMethod>1</ClassMethod>
<FormalSpec>subtipo:%String,prefixo:%String,&amp;itens</FormalSpec>
<Implementation><![CDATA[	set subtipo = $zconvert(subtipo, "u")
	if (subtipo = "INC")
	{
		set global = "rINC"
	}
	elseif (subtipo = "INT")
	{
		set global = "ROUTINE"
	}
	elseif (subtipo = "MAC")
	{
		set global = "rMAC"
	}
	else
	{
		quit
	}

	set nome = "&"
	set posicaoGlobal = "^"_global_"("""_nome_""")"
	while ($length($order(@posicaoGlobal)) '= 0)
	{
		set nome = $order(@posicaoGlobal)
		set posicaoGlobal = "^"_global_"("""_nome_""")"
		continue:($extract(nome, 1, 1) = "%")

		// Rotinas com problema no export		
		continue:(($zconvert(subtipo, "l") = "int") &&
		          (($piece(nome, ".", 1) = "disclinc") ||
		           (nome = "User.WWW120.1") ||
		           (nome = "User.INART.1") ||
		           (nome = "User.www.1")))
		continue:(($zconvert(subtipo, "l") = "mac") &&
		          ((nome = "INVOICECOMBINE") ||
		           (nome = "WWWFORMBIT")))

		// Validação de prefixo
		continue:($extract(nome, 1, $length(prefixo)) '= prefixo)
		
		set itens(nome_"."_$zconvert(subtipo, "l")) = ""
	}]]></Implementation>
</Method>

<Method name="GetClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;itens,classesUser:%Boolean</FormalSpec>
<Implementation><![CDATA[	do ##class(%Dictionary.ClassDefinition).SummaryExecute(.qhandle)
	set atEnd = 0
	while ('atEnd)
	{
		do ##class(%Dictionary.ClassDefinition).SummaryFetch(.qhandle, .row, .atEnd)
		continue:(atEnd)

		set nome = $listget(row, 1)
		set pacote = $piece(nome, ".", 1, $length(nome, ".") - 1)
		continue:(nome = $$$CURRENTCLASS)
		continue:($extract(pacote, 1, 1) = "%")
		continue:(((classesUser)  && ($piece(pacote, ".", 1) '= "User")) ||
		          (('classesUser) && ($piece(pacote, ".", 1)  = "User")))
		continue:($piece(pacote, ".", 1) = "disclinc")
		continue:($piece(pacote, ".", 1) = "csp")
		continue:(nome = "alSYS.Status.dStatus")

		set definicao = ##class(%Dictionary.ClassDefinition).%OpenId(nome)
		continue:(('$isObject(definicao)) || definicao.Deployed)
 
		set itens(nome_".cls") = ""
	}
	do ##class(%Dictionary.ClassDefinition).SummaryClose(qhandle)]]></Implementation>
</Method>

<Method name="GetSubpacotes">
<ClassMethod>1</ClassMethod>
<FormalSpec>pacoteRef:%String,&amp;itens</FormalSpec>
<Implementation><![CDATA[	do ##class(%Dictionary.PackageDefinitionQuery).SubPackageExecute(.qhandle, "")
	set atEnd = 0
	while ('atEnd)
	{
		do ##class(%Dictionary.PackageDefinitionQuery).SubPackageFetch(.qhandle, .row, .atEnd)
		continue:(atEnd)
		set nome = $listget(row, 1)
		continue:($extract(nome, 1, 1) = "%")
 
		set itens(nome) = ""
	}
	do ##class(%Dictionary.PackageDefinitionQuery).SubPackageClose(qhandle)]]></Implementation>
</Method>

<Method name="CompilaClassesUserIndivid">
<ClassMethod>1</ClassMethod>
<FormalSpec>forcarCompilacao:%Boolean</FormalSpec>
<Implementation><![CDATA[	// Estas classes são pré-requisito
	//do ..CompilaClasse("WWW.DiscDate", forcarCompilacao)
	//do ..CompilaClasse("WWW.DiscTimestamp", forcarCompilacao)

	do ##class(%Dictionary.ClassDefinition).SummaryExecute(.qhandle)
	set atEnd = 0
	while ('atEnd)
	{
		do ##class(%Dictionary.ClassDefinition).SummaryFetch(.qhandle, .row, .atEnd)
		continue:(atEnd)

		set nome = $listget(row, 1)
		set pacote = $piece(nome, ".", 1, $length(nome, ".") - 1)
		continue:($piece(pacote, ".", 1) '= "User")
		
		do ..CompilaClasse(nome, forcarCompilacao)
	}
	do ##class(%Dictionary.ClassDefinition).SummaryClose(qhandle)

	write !, "Classes do pacote User compiladas"]]></Implementation>
</Method>

<Method name="CompilaClasse">
<ClassMethod>1</ClassMethod>
<FormalSpec>nome:%String,forcarCompilacao:%Boolean</FormalSpec>
<Implementation><![CDATA[	if (forcarCompilacao)
	{
		set sc = $System.OBJ.Compile(nome, "cdfk-p-so3")
	}
	else
	{
		set sc = $System.OBJ.Compile(nome, "cdk-pu-so3")
	}

	if ('$$$ISOK(sc))
	{
		do DecomposeStatus^%apiOBJ(sc, .errors, "d")
	}]]></Implementation>
</Method>

<Method name="TesteExp">
<ClassMethod>1</ClassMethod>
<FormalSpec>prefixo:%String</FormalSpec>
<Implementation><![CDATA[	set itens("User.INANGPT.5.S1.int") = ""
	//set itens("User.INART.1.int") = ""
	set itens("User.INAUFCHECK.4.S1.int") = ""
	do ..ExportaXml(prefixo, "Teste", .itens)]]></Implementation>
</Method>

<Method name="TesteImp">
<ClassMethod>1</ClassMethod>
<FormalSpec>prefixo:%String</FormalSpec>
<Implementation><![CDATA[	do ..ImportaXml(prefixo, "Teste")]]></Implementation>
</Method>

<Method name="GetCommonDir">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(DirectoryFile).GetManagerSubdir("Common")]]></Implementation>
</Method>

<Method name="ComparaGlobais">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<Implementation><![CDATA[	write !!, "Primeira parte:"
	set gbl = $order(^$GLOBAL(""))
	while ($length(gbl) > 0) {
		write !, "Global '"_gbl_"'"
		if ('$data(^$|namespace|GLOBAL(gbl))) {
			if ('$data(@gbl)) {
				write !, "Global '"_gbl_"' vazia e inexistente no outro namespace"
			}
			else {
				write !, "Global '"_gbl_"' inexistente no outro namespace"
			}
		}

		set gbl = $order(^$GLOBAL(gbl))
	}

	write !!, "Segunda parte:"
	set gbl = $order(^$|namespace|GLOBAL(""))
	while ($length(gbl) > 0) {
		write !, "Global '"_gbl_"'"
		if ('$data(^$GLOBAL(gbl))) {
			set gblExt = "^|"""_namespace_"""|"_$extract(gbl, 2, $length(gbl))
			if ('$data(@gblExt)) {
				write !, "Global '"_gblExt_"' vazia e inexistente neste namespace"
			}
			else {
				write !, "Global '"_gblExt_"' inexistente neste namespace"
			}
		}

		set gbl = $order(^$|namespace|GLOBAL(gbl))
	}

	write !!, "Terceira parte:"
	set gbl = $order(^$GLOBAL(""))
	while ($length(gbl) > 0) {
		write !, "Global '"_gbl_"'"
		if ($data(^$|namespace|GLOBAL(gbl))) {
			set gblExt = "^|"""_namespace_"""|"_$extract(gbl, 2, $length(gbl))

			set key1 = $query(@(gbl_"("""")"), 1)
			set key2 = $query(@(gblExt_"("""")"), 1)
			if (($length(key1) > 0) && ($length(key2) > 0) &&
				($get(@key1) '= $get(@key2))) {
				write !, "'"_key1_"' = '"_$get(@key1)_"' e "_
					"'"_key2_"' = '"_$get(@key2)_"'"
			}

			set key1 = $query(@(gbl_"("""")"), -1)
			set key2 = $query(@(gblExt_"("""")"), -1)
			if (($length(key1) > 0) && ($length(key2) > 0) &&
				($get(@key1) '= $get(@key2))) {
				write !, "'"_key1_"' = '"_$get(@key1)_"' e "_
					"'"_key2_"' = '"_$get(@key2)_"'"
			}
		}

		set gbl = $order(^$GLOBAL(gbl))
	}]]></Implementation>
</Method>
</Class>
</Export>