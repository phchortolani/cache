<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.license.LicenseMonitorService">
<Description><![CDATA[This service was created because the necessity of monitoring license usage. 
Every minute a serie of data, as Alphalinc and Caché license usage, 
is recorded for analysis.

History:
2010-10-22	Sósthenes	Created]]></Description>
<ClassType/>
<Import>VAR.infra.cache,VAR.infra.license</Import>
<IncludeCode>VARLog</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Parameter name="INTERVAL">
<Description><![CDATA[Time interval]]></Description>
<Type>%Integer</Type>
<Default>60</Default>
</Parameter>

<Method name="InstallService">
<Description><![CDATA[Install the service

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	if ($isObject(##class(%SYSTEM.Task).OpenId("VARLicenseLog")) = 1) {
		do ##class(Task).Delete("VARLicenseLog")
	}
	if ($isObject(##class(%SYSTEM.Task).OpenId("VARLicenseLog ME")) = 1) {
		do ##class(Task).Delete("VARLicenseLog ME")
	}
	if ($isObject(##class(%SYSTEM.Task).OpenId("VARLicenseLog FDE")) = 1) {
		do ##class(Task).Delete("VARLicenseLog FDE")
	}
	if ($isObject(##class(%SYSTEM.Task).OpenId("VARLicenseLog ANTILHAS")) = 1) {
		do ##class(Task).Delete("VARLicenseLog ANTILHAS")
	}
	if ($isObject(##class(%SYSTEM.Task).OpenId("License Usage Log")) = 1) {
		do ##class(Task).Delete("License Usage Log")
	}
	
	if ($isObject(##class(%SYSTEM.Task).OpenId($znspace_" License Usage Log")) = 1) {
		set LicenseLogUsage = ..%New()
		if LicenseLogUsage.IsRunning() { 
			do ..RestartService()
		}
		else {
			write !, "INFO: Iniciando o serviço." 
			do ..VerifyAndStartService()
		}			
	} 
	
	else {

		do ##class(LicenseMonitorLibrary).InstallParameters()
	
		set intHr = 8 //0-23
 		set intMin = 0 //0-59
 		set intStartTime = ((intHr * 60 * 60)+ (intMin * 60))
		do ##class(Task).Insert($znspace, $znspace_" License Usage Log",
		"do ##class("_..%ClassName(1)_").VerifyAndStartService()",
		0, 0, 1, "", 0, intStartTime, +$horolog, "VARLicenseUsage.log",
		.task)
		
		do ..VerifyAndStartService()
	}]]></Implementation>
</Method>

<Method name="UninstallService">
<Description><![CDATA[Uninstall the service

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(Task).Delete($znspace_" License Usage Log")
	
	do ##class(LicenseMonitorLibrary).UninstallParameters()
	
	do ..StopService()]]></Implementation>
</Method>

<Method name="VerifyAndStartService">
<Description><![CDATA[Verifies if the service is still running, 
if not it calls the Start() method.

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set LicenseLogUsage = ..%New()
	
	if ('LicenseLogUsage.IsRunning()) { 
		do LicenseLogUsage.Start() 
	}]]></Implementation>
</Method>

<Method name="StopService">
<Description><![CDATA[Stop the service

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set LicenseLogUsage = ..%New()
	
	if (LicenseLogUsage.IsRunning()) { 
		do LicenseLogUsage.Stop() 
	}]]></Implementation>
</Method>

<Method name="RestartService">
<Description><![CDATA[Restart the service and wait until 

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	write !, "INFO: Reiniciando o serviço de controle de licenças..."
	
	do ..StopService()
	
	hang ..#INTERVAL+15	
	
	do ..VerifyAndStartService()]]></Implementation>
</Method>

<Method name="Start">
<Description><![CDATA[Start the service

Params:

Returns: status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit:(..IsRunning()) $$$OK
	
	set $ecode = ""
	set $ztrap = ""
	
	$$$VARLOGINFO("Starting License Log Service")
	
	set ^VAR.infra.license.LicenseMonitorService = 0
	
	job StartThread^VARRemote(..%ClassName(1))::20
	
	quit $$$OK]]></Implementation>
</Method>

<Method name="IsRunning">
<Description><![CDATA[Verify if the service is running.

Params:

Returns: yes / no]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set intJobId = +$get(^VAR.infra.license.LicenseMonitorService)
	if (intJobId '= 0) {
		if ($SYSTEM.Version.GetNumber() > 2008.1) {
			set objProcess = ##class(%SYS.ProcessQuery).%OpenId(intJobId)
		} 
			else {
				set objProcess = ##class(%SYSTEM.Process).%OpenId(intJobId)
			}
		if ($isObject(objProcess)) quit 1
	}
	quit 0]]></Implementation>
</Method>

<Method name="Stop">
<Description><![CDATA[Stop the service

Params:

Returns: status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	$$$VARLOGINFO("Stopping License Log Service")
	
	set ^VAR.infra.license.LicenseMonitorService = 0
	
	quit $$$OK]]></Implementation>
</Method>

<Method name="StartThread">
<Description><![CDATA[Executes the code for license logging.

Params:

Returns:]]></Description>
<Implementation><![CDATA[	set ^VAR.infra.license.LicenseMonitorService = $job
	do ##class(LicenseMonitorLibrary).LogJobIdStart()
	
	while (^VAR.infra.license.LicenseMonitorService) 
	{
		do ^WWWVAR
		do RecordEntry^VARLicenseUsageLog()
 
		hang ..#INTERVAL
	}]]></Implementation>
</Method>
</Class>
</Export>