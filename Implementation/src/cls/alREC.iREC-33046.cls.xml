<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alREC.iREC">
<Abstract>1</Abstract>
<ClassType/>
<IncludeCode>%occInclude</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>

<Method name="Populate">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 16-Jul-2008	HQN		SR15799: Restructured to be able to be rerun
	; 27-May-2008	GRF		Spelling correction
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	//headers
	if ##class(alREC.dReceipt.OpenState).%ExistsId("alREC.dReceipt||1") {
		set objMoveOutstanding = ##class(alREC.dReceipt.OpenState).%OpenId("alREC.dReceipt||1")
	} else {
		set objMoveOutstanding = ##class(alREC.dReceipt.OpenState).%New()
		set objMoveOutstanding.SMClassName = "alREC.dReceipt"
		//set objMoveOutstanding.StateId = 1
		set sc = objMoveOutstanding.%Save()
	}
	if $$$ISOK(sc) {
		if ##class(alREC.dReceipt.ReceivedState).%ExistsId("alREC.dReceipt||2") {
			set objMoveCompleted = ##class(alREC.dReceipt.ReceivedState).%OpenId("alREC.dReceipt||2")
		} else {
			set objMoveCompleted = ##class(alREC.dReceipt.ReceivedState).%New()
			set objMoveCompleted.SMClassName = "alREC.dReceipt"
			set sc = objMoveCompleted.%Save()
		}
	}
	if $$$ISOK(sc) {
		do objMoveOutstanding.SetNext(objMoveOutstanding)
		do objMoveOutstanding.SetNext(objMoveCompleted)
		set sc = objMoveOutstanding.%Save()
		if $$$ISOK(sc) set sc = objMoveCompleted.%Save()
	}

	if $$$ISOK(sc) {    // Lines
		if ##class(alREC.dReceiptLine.OpenState).%ExistsId("alREC.dReceiptLine||1") {
			set objLineOpen = ##class(alREC.dReceiptLine.OpenState).%OpenId("alREC.dReceiptLine||1")
		} else {
			set objLineOpen = ##class(alREC.dReceiptLine.OpenState).%New()
			set objLineOpen.SMClassName = "alREC.dReceiptLine"
			//set objLineOpen.StateId = 1
			set sc =  objLineOpen.%Save()
		}
		if $$$ISOK(sc) {
			if ##class(alREC.dReceiptLine.ReceivedState).%ExistsId("alREC.dReceiptLine||2") {
				set objLineClosed = ##class(alREC.dReceiptLine.ReceivedState).%OpenId("alREC.dReceiptLine||2")
			
			} else {
				set objLineClosed = ##class(alREC.dReceiptLine.ReceivedState).%New()
				set objLineClosed.SMClassName = "alREC.dReceiptLine"
				//set objLineClosed.StateId = 2
				set sc = objLineClosed.%Save()
			}
		}
		if $$$ISOK(sc) {
			do objLineOpen.SetNext(objLineOpen)
			do objLineOpen.SetNext(objLineClosed)
			set sc =  objLineOpen.%Save()
			if $$$ISOK(sc) set sc = objLineClosed.%Save()
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetReceiptedLines">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidReceipt:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	/*------------------------------------------------------------------------------
	; History: 
	; TODO
	;-----------------------------------------------------------------------------*/
	set objReceiptLines = ##class(%Library.ListOfObjects).%New()

	set objResultSet = ##class(%Library.ResultSet).%New()
	if objResultSet.Prepare("SELECT %ID FROM alREC.dReceiptLine WHERE State->StateId = 2 AND Receipt = ?") {
		if objResultSet.Execute(pidReceipt) {
			while objResultSet.Next() {
				set objReceiptLine = ##class(alREC.dReceiptLine).%OpenId(objResultSet.Data("ID"))
				do:(objReceiptLine '= $$$NULLOREF) objReceiptLines.Insert(objReceiptLine)
			}
		}
	}
	quit objReceiptLines
]]></Implementation>
</Method>

<Method name="ItemPurchaseHistory">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alSYS.dt.dtString,pintMaxCnt:alSYS.dt.dtInteger=5,&amp;parrList:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; PurchaseHistory for an Item
	;
	; Inputs: Item ID
	;		  Get the Max no of Rows (default 5)
	;
	; Returns ByRef: parrList                                          (ProcessedDate)
	;  set parrList($increment(intCnt))=idSupplier_Y_idOrder_Y_idRec_Y_ProcessedDate_Y_idUnit_Y_UnitCost_Y_(Cost/Unit After Discounts)
	;
	; Returns: Status
	;
	; History:
	; 09-Dec-2009	PPP		SR17077: Created
	;-------------------------------------------------------------------------------
	kill parrList
	set Y="~"
	
	set objResult = ##class(%Library.ResultSet).%New("%DynamicQuery:SQL")

	set strSQL = "SELECT TOP "_pintMaxCnt_" Hd.Supplier, Ln.PurchaseOrder, Ln.ReceiptNumber, Hd.ProcessedDate as ReceivedDate, Ln.ReceivedUnit, Ln.UnitQtyReceived, Ln.UnitCost, Ln.CostAfterDiscount as DiscountCost"
	set strSQL = strSQL_" FROM INRECSummary as Ln, INREC as Hd"
	set strSQL = strSQL_" WHERE Ln.Item = ?"
	set strSQL = strSQL_" AND Hd.ReceiptNumber = Ln.ReceiptNumber"
	set strSQL = strSQL_" AND NOT(Hd.ProcessedDate IS NULL)"
	set strSQL = strSQL_" ORDER BY Ln.ID DESC"
	
	set sc = objResult.Prepare(strSQL)
	
	if $$$ISOK(sc) {
		set sc = objResult.Execute(pidItem)

		if $$$ISOK(sc) {
			while objResult.Next() {
				set idSupplier  = objResult.Data("Supplier")
				set idOrder     = objResult.Data("PurchaseOrder")
				set idRec       = objResult.Data("ReceiptNumber")
				set dteDate     = objResult.Data("ReceivedDate")
				set idUnit      = objResult.Data("ReceivedUnit")
				set fltQty      = objResult.Data("UnitQtyReceived")
				set fltCst      = objResult.Data("UnitCost")
				set fltTotCost  = objResult.Data("DiscountCost")
				set fltDiscCost = 0
				if fltQty set fltDiscCost = fltTotCost/fltQty
				
				set parrList($increment(intCnt)) = idSupplier_Y_idOrder_Y_idRec_Y_dteDate_Y_idUnit_Y_fltQty_Y_fltCst_Y_fltDiscCost
			}
		}
		do objResult.%Close()
	}
	quit sc
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
//End of Class

</Content>
</UDLText>
</Class>
</Export>