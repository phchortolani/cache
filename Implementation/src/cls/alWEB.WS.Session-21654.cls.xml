<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alWEB.WS.Session">
<Description><![CDATA[
Web Service Session Management]]></Description>
<ClassType>persistent</ClassType>
<IncludeCode>WWWConst</IncludeCode>
<Super>%Persistent</Super>

<Property name="ClientIdent">
<Description><![CDATA[
Identification Key Of Web Service Client]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00021"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="UserIdent">
<Description><![CDATA[
Identification Key Of Client User]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00028"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="ConnectDate">
<Description><![CDATA[
Start dateof connection]]></Description>
<Type>%Date</Type>
<InitialExpression>+$horolog</InitialExpression>

<Parameter name="CAPTION" value="AL00022"/>
</Property>


<Property name="ConnectTime">
<Description><![CDATA[
Start time of connection]]></Description>
<Type>%Time</Type>
<InitialExpression>$piece($horolog,",&quot;,2)</InitialExpression>

<Parameter name="CAPTION" value="AL00023"/>
</Property>


<Property name="AutoLogoutSecs">
<Description><![CDATA[
Number of seconds for auto logout]]></Description>
<Type>%Integer</Type>
<InitialExpression>86400</InitialExpression>

<Parameter name="CAPTION" value="AL00020"/>
</Property>


<Property name="GrantAccess">
<Description><![CDATA[
Access granted after verification]]></Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>

<Parameter name="CAPTION" value="AL00025"/>
</Property>


<Property name="MsgInSequence">
<Description><![CDATA[
proceed messages in sequence only (requires MsgSequence number)]]></Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>

<Parameter name="CAPTION" value="AL00026"/>
</Property>


<Property name="MsgSequenceNo">
<Description><![CDATA[
last MasSequence Number]]></Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>

<Parameter name="CAPTION" value="AL00027"/>
</Property>


<Property name="FailedRequest">
<Description><![CDATA[
Number of Failed Requests in Sequence]]></Description>
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>

<Parameter name="CAPTION" value="AL00024"/>
</Property>


<Property name="ANMSession">
<Description><![CDATA[
@NM Session ; SR17809]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00776"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<UDLText name="T">
<Content>
//---------------------------------------------

</Content>
</UDLText>


<Method name="StartSession">
<Description><![CDATA[
Start new web service session]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClientIdent:%String="&quot;,UserIdent:%String="&quot;,AutoLogoutSecs:%Integer=86400,MsgInSequence:%Boolean=1</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	$$$VAR
	if ((+$$$WWWClientParamCoreChangesSESPE($get(^WWWClientParam(YM,YM,1)))) ||
		(+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))) ||
		(+$$$WWWClientParamCoreChangesHEVA($get(^WWWClientParam(YM,YM,1))))) {
		if ('##class(VAR.infra.shadow.ShadowRunner).IsFunctional() && (UserIdent '= "SHADOW")) {
			quit 0
		}
	}
	
	set objSession = ..%New()
	set objSession.ClientIdent    = ClientIdent
	set objSession.UserIdent      = UserIdent
	set objSession.AutoLogoutSecs = AutoLogoutSecs
	set objSession.MsgInSequence  = MsgInSequence
	
	set sc = objSession.%Save()
	if 'sc quit 0
	
	set idSession = objSession.%Id()
	kill session
	
	quit idSession
]]></Implementation>
</Method>

<Method name="EndSession">
<Description><![CDATA[
End web service session]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if +$get(SessionId) = 0 quit 0
	if ..%ExistsId(SessionId) {
		set sc = ..%DeleteId(SessionId)
		quit sc
	}
	quit 1
]]></Implementation>
</Method>

<Method name="Login">
<Description><![CDATA[
Log into existing session to grant access]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%Integer,Password:%String,&amp;ErrorCode:%String,&amp;ANMSession</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Description of Function :
	; 
	;
	; Inputs : 
	; pstrRecipient = Data Recipient (to validate kill)
	; pstrMessageNo = Messege Queue No.
	;
	; History :
	; 23-Jun-2011	SCR		SR17809: Validat Users from WWW013 based on ^SysSetup("WSUsers")="@NM"
	; 31-Mar-2009	shobby	SR16446: Validate that the webservice call came from
	; 							an allowed IP address
	; 22-Jan-2009	SCR		SR16320: Use Common Base64 & UTF8 Conversion for Unicode
	; 30-Oct-2008	shobby	BR014985: After discussion with Andreas, reviewed the
	; 							section about decoding passwords.
	; 							Note MD5Encode directly can crash the XML parser.
	; 27-Oct-2008   shobby  BR014985: Removed hardcoding of WEBSERVICE user
	;-------------------------------------------------------------------------------
	
	; FIXME : 1) Returning boolean rather than %Status - should be %Boolean if ErrorCode used for error handling.
	;         2) Multiple exit points - in breach of coding standards
	;         3) 0/1 rather than boolean macros          <GRF>    Check elswhere
	
	set ANMSession = "" ; SR17809 
	if +$get(SessionId) = 0 {
		set ErrorCode="#alW00005: "_##class(alWEB.WS.Utils).LanguageText("alW00005")  //Invalid Session Id"  ;BR014564;25-Jan-2008
		quit 0
	}
	if ..%ExistsId(SessionId) {
		set objSession = ..%OpenId(SessionId)
		if objSession ="" {
			set ErrorCode="#alW00005: "_##class(alWEB.WS.Utils).LanguageText("alW00005")  //Invalid Session Id"  ;BR014564;25-Jan-2008
			quit 0
		}
		
		//vvvvv NEW VERSION (separate clients) to replace OLD VERSION (Employee WEBSERVICE) vvvvv
		set Client = objSession.ClientIdent
		set User   = objSession.UserIdent  ;BR014985
		// SR17809 vvvvv Option to use @NM Users based on ^SysSetup("WSUsers")="@NM"
		if $get(^SysSetup("WSUsers"))'="@NM" {
			if (Client '= "") && (User '= "") && ($data(^WWWWSClient(0,Client,User))) {
				if '..ValidateIP(Client,User,$get(%request.CgiEnvs("REMOTE_ADDR")),.ErrorCode) {  ;16446
					quit 0
				} else {
					set objWWWWSClient=$get(^WWWWSClient(0,Client,User,1))
					set UserPwd = $$$WWWWSClientPassword1(objWWWWSClient)
				
				}
			} else {
				set UserPwd = "***"
			}
		} else {
			set UserPwd = $piece($get(^WWW013(0,User,1)),"~",2)  ;
			set UserPwd = $$^WWWPWDCHECK(UserPwd)  ;@net Manager Password crypting
			set objSession.ANMSession = $$WSSession^WWWVAR(User)
			set ANMSession = objSession.ANMSession ; Used for passback
			do objSession.%Save()

		}
		;if (Client '= "") && (User '= "") && ($data(^WWWWSClient(0,Client,User))) {
		;	if '..ValidateIP(Client,User,$get(%request.CgiEnvs("REMOTE_ADDR")),.ErrorCode) {  ;16446
		;		quit 0
		;	} else {
		;		set objWWWWSClient=$get(^WWWWSClient(0,Client,User,1))
		;		set UserPwd = $$$WWWWSClientPassword1(objWWWWSClient)  ;SR16266
		;		
		;	}
		;} else {
		;	set UserPwd = "***"
		;}
		; SR17809 ^^^^^
		;set UserPwd = $piece($get(^WWW013(0,User,1)),"~",2)  ;SR16266
		;set UserPwd = $$^WWWPWDCHECK(UserPwd)  ;@net Manager Password crypting
		//^^^^^^^^^^
		
		if (UserPwd="***") {					;SR16266
			set objSession.GrantAccess=0
		
		} elseif (UserPwd=Password) {			;BR014985 30-Oct-2008 vvvv
			set objSession.GrantAccess=1
			
	;	} elseif $system.Encryption.Base64Encode($system.Encryption.MD5Encode(UserPwd))=Password {
		} elseif $$GetBase64Encode^COMUtilStr($system.Encryption.MD5Encode(UserPwd))=Password { //SR16320
			set objSession.GrantAccess=1
		}										;BR014985 30-Oct-2008 ^^^^
		
		if objSession.GrantAccess = 1 {
			set objSession.FailedRequest=0  //reset failure
			set sc = objSession.%Save()
			kill objSession
			quit 1
		
		} else {
			set objSession.FailedRequest=objSession.FailedRequest+1
			set sc = objSession.%Save()
			if objSession.FailedRequest>3 {
				set sc = ..EndSession(SessionId)
				set ErrorCode="#alW00006: "_##class(alWEB.WS.Utils).LanguageText("alW00006")  //Session Terminated  ;BR014564;25-Jan-2008
				quit 0
			}
		}
		
		kill objSession
		set ErrorCode="#alW00007: "_##class(alWEB.WS.Utils).LanguageText("alW00007")  //Invalid Password  ;BR014564;25-Jan-2008
		quit 0
	}
	set ErrorCode="#alW00005: "_##class(alWEB.WS.Utils).LanguageText("alW00005")  //Invalid Session Id"  ;BR014564;25-Jan-2008
	quit 0
]]></Implementation>
</Method>

<Method name="ValidateSession">
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%Integer,MsgSequenceNo:%Integer,&amp;ErrorCode:%String,SetNextSeqNo:%Boolean=0,ServiceName:%String="&quot;</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Validate web service session and count last MsgSequenceNo plus 1
	; 
	; History:
	; 31-Mar-2009	shobby	SR16446:	Validate that the webservice call came from an allowed IP address
	; 04-Feb-2008	shobby	SR16325:	Changed the sign of the 'overlay'
	;-------------------------------------------------------------------------------
	if +$get(SessionId) = 666 {
		quit 1
	}

	if +$get(SessionId) = 0 {
		set ErrorCode="#alW00005: "_##class(alWEB.WS.Utils).LanguageText("alW00005")  //Invalid Session Id  ;BR014564;25-Jan-2008
		quit 0
	}
	if ..%ExistsId(SessionId) {
		set objSession = ..%OpenId(SessionId)
		if objSession ="" {
			set ErrorCode="#alW00005: "_##class(alWEB.WS.Utils).LanguageText("alW00005")  //Invalid Session Id  ;BR014564;25-Jan-2008
			quit 0
		}
		if '..ValidateIP(objSession.ClientIdent,objSession.UserIdent,$get(%request.CgiEnvs("REMOTE_ADDR")),.ErrorCode) {  ;16446
			quit 0
		}
		
		//check for logout time

		set LogoutTime = ((objSession.ConnectDate*86400) +
		                   objSession.ConnectTime        +
		                   objSession.AutoLogoutSecs       )  //Date + Time + Seconds Alive
							 
		set CurrentTime = (($horolog*86400) + $piece($horolog,",",2))
	;	if (LogoutTime < (CurrentTime+100)) {  //session expired (100 secs overlay if validation is made to check for next call)
		if (LogoutTime < (CurrentTime-100)) {  //session expired (100 secs overlay if validation is made to check for next call) ;SR16325
			set sc = ..EndSession(SessionId)
			set ErrorCode="#alW00008: "_##class(alWEB.WS.Utils).LanguageText("alW00008")  //Session Expired  ;BR014564;25-Jan-2008
			quit 0
		}
		
		//check for general access
		if (objSession.GrantAccess '= 1) {
			set ErrorCode="Login Failed"
			set objSession.FailedRequest=objSession.FailedRequest+1
			set sc = objSession.%Save()
			if objSession.FailedRequest>3 {
				set sc = ..EndSession(SessionId)
				set ErrorCode="#alW00006: "_##class(alWEB.WS.Utils).LanguageText("alW00006")  //Session Terminated  ;BR014564;25-Jan-2008
			}
			quit 0
		}
		
		//check for sevice access  ;SR16266
		// SR17809 only check for WWWWSClients
		;if (ServiceName '= "") {
		if (ServiceName '= "") && ($get(^SysSetup("WSUsers"))'="@NM") {
			set Granted = $$$WWWWSClientGrantedServices($get(^WWWWSClient(0,objSession.ClientIdent,objSession.UserIdent,1)))
			if ('$find(Granted,ServiceName)) {
				set ErrorCode="#alW00011: "_##class(alWEB.WS.Utils).LanguageText("alW00011")  //  ;No Permission For This Service ;SR16266
				quit 0
			}
		}
		
		//check for message sequence
		if (objSession.MsgInSequence = 1) && ($get(MsgSequenceNo) '= 0) {
			if ($get(SetNextSeqNo) = 1) {  //set new sequence
				set objSession.MsgSequenceNo=MsgSequenceNo-1
				set objSession.FailedRequest=0  //reset failure
				set sc = objSession.%Save()
				if 'sc {
					set ErrorCode="#alW00009: "_##class(alWEB.WS.Utils).LanguageText("alW00009")  //Internal Error  ;BR014564;25-Jan-2008
					quit 0
				}
			
			} elseif (+$get(MsgSequenceNo) '= (objSession.MsgSequenceNo + 1)) {  //wrong sequence
				set objSession.FailedRequest=objSession.FailedRequest+1
				set ErrorCode="Message Not In Sequence"
				set sc = objSession.%Save()
				if objSession.FailedRequest>3 {
					set sc = ..EndSession(SessionId)
					set ErrorCode="#alW00006: "_##class(alWEB.WS.Utils).LanguageText("alW00006")  //Session Terminated  ;BR014564;25-Jan-2008
				}
				quit 0
			
			} else {  //save next seq number
				set objSession.MsgSequenceNo=MsgSequenceNo
				set objSession.FailedRequest=0  //reset failure
				set sc = objSession.%Save()
				if 'sc {
					set ErrorCode="#alW00009: "_##class(alWEB.WS.Utils).LanguageText("alW00009")  //Internal Error  ;BR014564;25-Jan-2008
					quit 0
				}
			}
		}
		kill objSession
		quit 1
	}
	set ErrorCode="#alW00005: "_##class(alWEB.WS.Utils).LanguageText("alW00005")  //Invalid Session Id"  ;BR014564;25-Jan-2008
	quit 0
]]></Implementation>
</Method>

<Method name="ValidateIP">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrClientIdent,pstrUserIdent,pstrIPAddress,pstrErrorCode</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Validate that the webservice call came from an allowed IP address
	; 
	; History:
	; 09-May-2011	shobby	SR17759:	Allow multiple IP addresses.
	; 31-Mar-2009	shobby	SR16446:	Created
	;-------------------------------------------------------------------------------
	set strStatus=$$$OK
	// SR17809 only check for WWWWSClients
	if ($get(^SysSetup("WSUsers"))'="@NM") {
	
		set objWWWWSClient=$get(^WWWWSClient(0,pstrClientIdent,pstrUserIdent,1))
		;SR17759 if ($$$WWWWSClientIPAddress(objWWWWSClient)'="")&&($$$WWWWSClientIPAddress(objWWWWSClient)'=pstrIPAddress) {

		if ($$$WWWWSClientIPAddress(objWWWWSClient)'="")&&(("|"_$$$WWWWSClientIPAddress(objWWWWSClient)_"|")'[("|"_pstrIPAddress_"|")) {	;SR17759
			set pstrErrorCode="#alW00012: "_##class(alWEB.WS.Utils).LanguageText("alW00012")  //Disallowed IP address of Remote System. ;16446
			set strStatus='$$$OK
		}
	}
	quit strStatus
]]></Implementation>
</Method>

<Method name="ClearSessions">
<Description><![CDATA[
clear old sessions without logout]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//quit ..%DeleteExtent()
	
	set rs = ##class(%ResultSet).%New("alWEB.WS.Session:OldSessions")
	set sc = rs.Execute(($horolog-2))  //get older than 2 days
	
	//delete sessions
	while rs.Next() {
		do ..EndSession(rs.Data("ID"))
	}
	do rs.Close()
	quit 1
]]></Implementation>
</Method>
<Query name="OldSessions">
<Type>%SQLQuery</Type>
<FormalSpec>Date:%Date</FormalSpec>
<SqlQuery>	SELECT %ID FROM Session
		WHERE (ConnectDate &lt; :Date)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^alWEB.WS.SessionD</DataLocation>
<DefaultData>SessionDefaultData</DefaultData>
<IdLocation>^alWEB.WS.SessionD</IdLocation>
<IndexLocation>^alWEB.WS.SessionI</IndexLocation>
<StreamLocation>^alWEB.WS.SessionS</StreamLocation>
<Data name="SessionDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>AutoLogoutSecs</Value>
</Value>
<Value name="3">
<Value>Connected</Value>
</Value>
<Value name="4">
<Value>MsgInSequence</Value>
</Value>
<Value name="5">
<Value>GrantAccess</Value>
</Value>
<Value name="6">
<Value>MsgSequenceNo</Value>
</Value>
<Value name="7">
<Value>ConnectDate</Value>
</Value>
<Value name="8">
<Value>ConnectTime</Value>
</Value>
<Value name="9">
<Value>ClientIdent</Value>
</Value>
<Value name="10">
<Value>UserIdent</Value>
</Value>
<Value name="11">
<Value>FailedRequest</Value>
</Value>
<Value name="12">
<Value>ClientIdent1</Value>
</Value>
<Value name="13">
<Value>ANMSession</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>