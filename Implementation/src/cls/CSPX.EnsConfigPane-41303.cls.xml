<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsConfigPane">
<Description><![CDATA[
Container page for SVG-based config page.]]></Description>
<ClassType/>
<IncludeCode>Ensemble</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Parameter name="RefreshRate">
<Default>5000</Default>
</Parameter>


<Parameter name="CONTENTTYPE">
<Default>text/html</Default>
</Parameter>


<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// Avoid IE HTTP 1.1 bugs
	Set %response.HTTPVersion = "HTTP/1.0"

	// prevent session blocking
	Do %session.Unlock()
	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set prodid = $G(%request.Data("PRODUCTION",1))
	Set Config = $$FormatMessage^%occMessages(%response.Language,"Ensemble","Config","Configuration Pane")
	&html<<html><head>

	<title>#(Config)#</title>
<style>
body {
	background: #DDDDEE;
	margin: 0px;
	padding: 0px;
}

</style>
<!-- detect svg -->
<script language="JavaScript" src="svgcheck.js"></script>
<script language="VBScript" src="svgcheck.vbs"></script>
>

	// set up hyper-event for this page
	Write ..HyperEventHead(),!

	&html<
<script language="javascript">

/// Called from SVG to reset scrolling of window
function resetScroll()
{
	self.scrollTo(0,0);
}

// called from property sheet to update an item
function updateItem(id,pkgname,clsname,pool,enabled,category)
{
	var elid = "item_" + id;
	var svgdoc = self.document.getElementById("SVGEmbed").getSVGDocument();
	var text;

	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.setItemCategory(elid,category);

	// pkgname
	text = svgdoc.getElementById(elid + "_pkgname");
	if (text) {
		// create next text node and replace the current one
		var oldNode = text.firstChild;
		if (oldNode) {
			text.removeChild(oldNode);
		}
		
		var textNode;
				
		textNode = svgdoc.createTextNode(pkgname);
		text.appendChild(textNode);
	}

	// classname
	text = svgdoc.getElementById(elid + "_classname");
	if (text) {
		// create next text node and replace the current one
		var oldNode = text.firstChild;
		if (oldNode) {
			text.removeChild(oldNode);
		}
		
		var textNode;
				
		textNode = svgdoc.createTextNode(clsname);
		text.appendChild(textNode);
	}

	// pool
	text = svgdoc.getElementById(elid + "_pool");
	if (text) {
		// create next text node and replace the current one
		var oldNode = text.firstChild;
		if (oldNode) {
			text.removeChild(oldNode);
		}
		
		var textNode;
				
		textNode = svgdoc.createTextNode((0==pool) ? '' : pool);
		text.appendChild(textNode);
	}
	
	// status
	var stat = svgdoc.getElementById(elid + "_status");
	if (stat) {	
		if (enabled) {
			stat.setAttribute("class","adapterStatusOK");
		}
		else {
			stat.setAttribute("class","adapterStatusDisabled");
		}
	}

	// enabled
	var rect = svgdoc.getElementById(elid + "_rect");
	if (rect) {	
		if (enabled) {
			rect.setAttribute("class","adapterSelected");
		}
		else {
			rect.setAttribute("class","adapterDisabledSelected");
		}
	}
}

// Update the production running status
function updateRunningStatus(running)
{
	var svgdoc = self.document.getElementById("SVGEmbed").getSVGDocument();
	
	// toggle title
	var title = svgdoc.getElementById("ProdRunningTitle");
	if (title) {
		if (running) {
			title.setAttribute("class","ProdRunning");
		}
		else {
			title.setAttribute("class","ProdNotRunning");
		}
	}
	
	// now dim or brighten status lights
	var n = 1;
	while (svgdoc.getElementById("hood_" + n)) {
		var hood = svgdoc.getElementById("hood_" + n);
		if (running) {
			hood.setAttribute("style","display: none;");
		}
		else {
			hood.setAttribute("style","");
		}

		n++;
	}
}

// called from server to update part of item
function updateMonitorStatus(name,id,status,iostatus,enabled)
{
	var elid = name;
	var svgdoc = self.document.getElementById("SVGEmbed").getSVGDocument();
	
	// status
	var stat = svgdoc.getElementById(elid + "_status");
	if (stat) {	
		stat.setAttribute("class","adapterStatus" + status);
	}

	// iostatus
	var iostat = svgdoc.getElementById(elid + "_iostatus");
	if (iostat) {	
		iostat.setAttribute("class","adapterStatus" + iostatus);
	}
	
	// disabled state
	rect = svgdoc.getElementById("item_" + id + "_rect");
	if (rect) {
		var cls = rect.getAttribute("class");
		if (cls == "adapter" || cls == "adapterDisabled") {
			rect.setAttribute("class", (enabled) ? "adapter" : "adapterDisabled");
		}
	}
}

var timerID = null;

function refreshDiagram()
{
	callServerRefresh('#(prodid)#');
}

</script>>

	// write out methods that perform the hyper-calls
	Write "<script>",!
	Write "function callServerRefresh(production)",!
	Write "{",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsConfigPane.RefreshDiagram","production",1)
 	Write ";",!
	Write "}",!

	Write "</script>",!

	&html<</head>>
	&html<<body>>
	
	// set up hyper-event frame for this page
	Write ..HyperEventFrame(),!

	If (%request.UserAgent '[ "MSIE") {
		Write "<div style=""padding-left:20px;"">",$$$TextHTML("At this time, this page is only visible with Internet Explorer."),"</div>"
		&html<</body></html>>
		Quit $$$OK
	}

	&html<	
		<!-- detect svg -->
		<script language="JavaScript">
		checkAndGetSVGViewer();
		</script>
	>

	Set production = ##class(Ens.Config.Production).%OpenId(prodid)
	If ('$IsObject(production)) {
		Set lError = $$FormatMessage^%occMessages(%response.Language,"Ensemble","UnableToOpenConfigFor","Unable to open configuration for the production:")_" "_..EscapeHTML(prodid)
		&html<<div class="errormsg">#(lError)#</div>>
	}
	Else {
		// loading message
		&html<<div id='loading' style='background: white; color: blue; font-size: 14pt; font-family: courier new'>Generating Configuration Diagram...</div>>
		
		// size is reset after loading the image
		&html<<embed 
				id="SVGEmbed" 
				name="SVGEmbed" 
				type="image/svg+xml" 
				src="#(##class(%CSP.Page).Link("CSPX.EnsConfigSVG.cls?PRODUCTION="_$zcvt($zcvt(prodid,"O","UTF8"),"O","URL")))#"
				height="10" 
				width="10">>
	}

	// start timer
	&html<<script language="javascript">
	timerID = setTimeout("refreshDiagram();",#(..#RefreshRate)#);
	</script>>

	&html<</body>
			</html>>
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="RefreshDiagram">
<Description><![CDATA[
Called from client to refresh the diagram]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProdId</FormalSpec>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set $ZT = "Trap"
	
	Do {
		Set tIsRunning = ($G($$$EnsRuntime("Name")) = pProdId)
		Set tRunFlag = $S(tIsRunning:"true",1:"false")

		&js<CSPPage.updateRunningStatus(#(tRunFlag)#);>

		Set tIOStatus = "Disabled"
		Set tHost="" For { Set tHost=$$$OrderHostMonitor(tHost)  Quit:""=tHost
			Set tConfigId = $G($$$EnsRuntime("DispatchName",tHost))
			If (tConfigId '= "") {
				If (tIsRunning) {
					// test for disabled items
					// !!!old Set tEnabled = $D($$$EnsRuntime("ConfigItem",tConfigId))
					Set tEnabled = +$G($$$ConfigIsEnabled(tConfigId))
					Set tItemId = +$G($$$ConfigId(tConfigId))
					Set tStatus = $$$GetHostMonitor(tHost,$$$eMonitorStatus) If tStatus="" Set tStatus="Error"

					// loop over Job status for this item to find out the adapter status
					Set tIOStatus = "Disabled"
					Set tStayConnected=$G($$$ConfigSetting(tHost,"Adapter","StayConnected"))
					If tStayConnected'="" {
						Set j="" For { Set j=$$$OrderHostMonitor(tHost,$$$eMonitorJob,j) Quit:""=j
							Set c = $$$GetJobMonitor(tHost,j,$$$eMonitorConnected)
							If (c '= "") {
								If (+c) {
									Set tIOStatus="OK"
								}
								ElseIf $e(c)="." { ; "." means "listening for a connection"
									If tIOStatus="Disabled" {
										// if listening in JobPerConnection mode w/ no connections, or not trying to always Stay Connected, show inactive
										Set tJobPer=$G($$$ConfigSetting(tHost,"Adapter","JobPerConnection"))
										If tStayConnected>=0||tJobPer { Set tIOStatus="Inactive" }
										Else { Set tIOStatus="Error" }
									} ; else ignore it and let the other jobs determine the status
								}
								Else { ; not connected
									If tStayConnected<0 {
										Set tIOStatus="Error"
										Quit
									}
									#; Disconnected items with Queued stuff are in Error state
									Set tQName=$G($$$ConfigQueueName(tHost)," ")
									Set tQLen=$G($$$EnsQueue(tQName,0,"count"))
									If tQLen {
										Set tIOStatus="Error"
										Quit
									}
									If tIOStatus="Disabled" {
										Set tIOStatus="Inactive"
										Quit
									} ; else ignore it and let the other jobs determine the status
								}
							}
						}
					}
					// set disabled?
					If ('tEnabled && (tStatus="OK")) {
						Set tStatus = "Disabled"
						//Set tIOStatus = "Disabled"
					}
				}
				Else {
					// not running
					Set tStatus = "OK"
				}

				// update diagram
				&js<CSPPage.updateMonitorStatus('#(tConfigId)#','#($G(tItemId))#','#($G(tStatus))#','#($G(tIOStatus))#',#($S($G(tEnabled):"true",1:"false"))#);>
			}
			Else {
				// no host info (such as Ens.Actor)
			}
		}

		// turn timer back on
		&js<timerID = setTimeout("(typeof(CSPPage) == 'undefined' ? self : CSPPage).refreshDiagram();",#(..#RefreshRate)#);>

	} While (0)

Done
	Quit

Trap
	Set $ZT = ""
	&js<alert("RefreshDiagram Error: #($ZE)#");>
	Goto Done
]]></Implementation>
</Method>
</Class>
</Export>