<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alISS.dUIssueLine">
<ClassType>persistent</ClassType>
<IncludeCode>COMSYS,INConst</IncludeCode>
<Super>User.INIssueLine</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; 28-Jan-2009	DavidR	SR16303: Dispense to Patient - make Demand Optional
; 30-Jan-2008	LB		SR15626 Changed the signature of dStatus to dUStatus
; 24-Jan-2008	HQN		SR15625 Copied from alISS.INIssueLine; 
; 							 Changed class signature dINIssueLine to dUIssueLine &amp;
; 							 dStorage to dUStorage
/---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="Issue">
<Type>alISS.dUIssue</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00197"/>
</Property>


<Property name="objFromStorage">
<Description><![CDATA[
store swizzled object so we don't keep reopening it]]></Description>
<Type>alLOC.dUStorage</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00200"/>
</Property>


<Property name="objToStorage">
<Description><![CDATA[
store swizzled object so we don't keep reopening it]]></Description>
<Type>alLOC.dUStorage</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00203"/>
</Property>


<Property name="objDespatchStorage">
<Description><![CDATA[
store swizzled object so we don't keep reopening it]]></Description>
<Type>alLOC.dUStorage</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00275"/>
</Property>


<Property name="Supply">
<Type>%String</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00198"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="objSupply">
<Description><![CDATA[
store swizzled object so we don't keep reopening it]]></Description>
<Type>alDRP.dUSupply</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00202"/>
</Property>


<Property name="objDemand">
<Description><![CDATA[
store swizzled object so we don't keep reopening it]]></Description>
<Type>alDRP.dUDemand</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00199"/>
</Property>


<Property name="objStatus">
<Description><![CDATA[
store swizzled object so we don't keep reopening it]]></Description>
<Type>alSYS.Status.dUStatus</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00201"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<UDLText name="T">
<Content>
// Index IDXBundle On (Bundle, Item);

</Content>
</UDLText>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Query name="GetIssueLinesForIssue">
<Type>%SQLQuery</Type>
<FormalSpec>Issue:alISS.dUIssue</FormalSpec>
<SqlQuery>SELECT %ID,Company,FromStorage,IssueNumber,Item,LineNumber,QtyIssued,QtyRequired,Reference,Status,Demand,ToStorage,Unit,Bundle FROM dUIssueLine
 WHERE (IssueNumber = :Issue.IssueNumber)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="StatusGet">
<Description><![CDATA[
<p>Retrieves the Status Property as <class>alSYS.Status.dUStatus</class> //SR15626
<class>%ObjectHandle</class></p>]]></Description>
<ReturnType>alSYS.Status.dUStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 06-Nov-2007	HQN		Replicated from INIssue
	;-------------------------------------------------------------------------------
	if (i%Status '= $$$NULLOREF) && (i%objStatus = $$$NULLOREF) {
		set objStatus   = ##class(alSYS.Status.dUStatus).%OpenId(%this.Company_"||INIssueLine||"_i%Status)
		set i%objStatus = objStatus.%ConstructClone()
	}
	quit i%objStatus
]]></Implementation>
</Method>

<Method name="StatusSet">
<Description><![CDATA[
<p>Sets the Status Property</p>
<p>Params: <var>Status</var> as :
<ul>
	<li><class>%ObjectHandle</class> of <class>alSYS.Status.dUStatus</class></li>
	<li>Const referring to the primary key of a <class>alSYS.Status.dUStatus</class></li>
</ul>
</p>]]></Description>
<FormalSpec>Arg</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $IsObject(Arg) {
		set i%Status = Arg.StatusCode
	} elseif (Arg?.E1"||".A1"||".N) {
		set i%Status = +$piece(Arg,"||",3) ; OID expected in the format "YM||ClassName||intStatusKey"
	} else {
		set i%Status = Arg
	}
	set i%objStatus = $$$NULLOREF 
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ANMSave">
<Description><![CDATA[
<p>Saves the record utilising <code>$$Save^COMUtils</code>
Relies on INConst.inc macros to set the pieces of the record</br>
<b>NOTE: Should be code generated</b>
</p>
<p>Utilises <code>$$^WWWNEXT()</code> to allocate the primary index</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 23-Jan-2009	GRF		prefixes
	; 31-Jul-2008	Luke	SR15814: sc to blnResult
	;-------------------------------------------------------------------------------
	if (%this.LineNumber = "") {
		set %this.LineNumber = ($order(^INIssueLine(0,%this.IssueNumber,""),-1)+1)\1 ; whole number only
	}
	set idANMKey = %this.IssueNumber _","_ %this.LineNumber
	set objANMIssueLine = ""
	if ((%this.Company     '= "")  &&
	    (%this.IssueNumber '= "")  &&
	    (%this.LineNumber  '= ""))   {
		set objANMIssueLine = $get(^INIssueLine(%this.Company,%this.IssueNumber,%this.LineNumber,1))
	}
	set $$$INIssueLineReference(objANMIssueLine)   = i%Reference
	set $$$INIssueLineItem(objANMIssueLine)        = i%Item
	set $$$INIssueLineUnit(objANMIssueLine)        = i%Unit
	set $$$INIssueLineStatus(objANMIssueLine)      = i%Status
	set $$$INIssueLineFromStorage(objANMIssueLine) = i%FromStorage
	set $$$INIssueLineDespatchStorage(objANMIssueLine) = i%DespatchStorage
	set $$$INIssueLineToStorage(objANMIssueLine)   = i%ToStorage
	set $$$INIssueLineQtyRequired(objANMIssueLine) = i%QtyRequired
	set $$$INIssueLineQtyIssued(objANMIssueLine)   = i%QtyIssued
	set $$$INIssueLineBundle(objANMIssueLine)      = i%Bundle
	set $$$INIssueLineDemand(objANMIssueLine)      = i%Demand
	
	set blnResult = $$Save^COMUtils("INIssueLine",idANMKey,objANMIssueLine,$$$NO)
	quit blnResult
]]></Implementation>
</Method>

<Method name="CreateMovement">
<Description><![CDATA[
<p>Create <class>alMOV.dMovement</class> records based on this record</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	; Needs to be overridden by subclass
	quit $$$ERROR($$$MethodNotImplemented,"alISS.dUIssueLine::CreateMovement")
]]></Implementation>
</Method>

<Method name="FirmIssue">
<Description><![CDATA[
<p>Updates the Status Field on the IssueLine<br/>
Creates Movement records</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Create movement issues
	; 
	; History:
	; 
	; 12-May-2009	PPP		SR16199: POS Issue does not have a Requisition Link
	; 28-Jan-2009	DavidR	SR16303: Dispense to Patient doesn't have ToLocn
	; 02-Oct-2008	Luke	SR15980 Added additional Checks on the Default Storage 
	; 06-May-2008	HQN		SR15714: Corrected call to CreateMovement,
	; 							..CreateMovement is different to %this.CreateMovement
	; 19-Dec-2007	HQN		Altered logic to only %Save when demand is correctly saved
	; 18-Dec-2007	HQN		Removed Manual - Close status from firming process,
	; 						Manual - Close now reserved for ManuallyClose()
	; 18-Dec-2007	HQN		Added logic for flagging consumable Locations to stop
	; 							them going to an Act/Pnd state
	; 14-Dec-2007	HQN		Added logic for Act/Pnd
	; 27-Nov-2007	HQN		Created
	; 03-Dec-2007	HQN		Sets Header to Manual Close when Line is Manual Close
	; 06-Dec-2007	HQN		Fixed logic for Checking Auto - Close[d]
	;-------------------------------------------------------------------------------
	set sc = %this.CreateMovement()

	if $$$ISOK(sc) {
		set %this.Status = 9		; Auto - Close
		
		; FIXME : <GRF> Should we add .sc as second parameter to each Get...Storage
		;               and test that we actually have values rather than checking
		;               $$$NULLOREF against a valid storage or another $$$NULLOREF?
		;               May then need another $$$ISOK before UpdateDemand
		; e.g.
		; set idReceiptStore = %this.Issue.ToLocn.GetDefaultReceiptStorage(%this.Item,.sc)
		; if $$$ISOK(sc) set idOnHandStore = %this.Issue.ToLocn.GetDefaultOnHandStorage(%this.Item)    
		; if $$$ISOK(sc) && (idReceiptStore'=idOnHandStore) && '$$IsConsumable^INARTLOCPAR(%this.Item,%this.Issue.ToLocn.Location) {
		; 	set %this.Status = 7 	; Act/Pending
		; }
		; if $$$ISOK(sc) set sc = %this.UpdateDemand()
		
		// VVV SR15980
		set tempSC = $$$OK 
		if '(+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(0,0,1)))) { ;HEVA-1042
			if %this.Issue.ToLocn '= $$$NULLOREF {    ; SR16303

				set objDefaultStore = %this.Issue.ToLocn.GetDefaultReceiptStorage(%this.Item,.tempSC) 

				if $$$ISOK(tempSC) && (objDefaultStore'=$$$NULLOREF) {

					if (objDefaultStore '= %this.Issue.ToLocn.GetDefaultOnHandStorage(%this.Item)) && 
						'$$IsConsumable^INARTLOCPAR(%this.Item,%this.Issue.ToLocn.Location) {
						set %this.Status = 7 	; Act/Pending
					}
				} 
			}
		}
			
		if $$$ISOK(sc) {
			set sc = %this.%Save()
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="PrepareIssue">
<Description><![CDATA[
<p>Updates the Status Field on the IssueLine<br/>
Creates Movement records</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Create movement issues for the Prepare Option
	; 
	; History:
	; 
	; 20-Nov-2009	PPP		SR17049 : Changed the Movement Type for Prepare to Stock Move alMOV
	; 04-Jun-2009	PPP		SR16544 : Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK

	if $$$ISOK(sc) {
		set %this.Status = 4		; Prepare
	
		//set objMove   = ##class(alISS.dMovement).%New()
		set objMove      = ##class(alMOV.dMovement).%New()	//SR17049
		
		// Covert to full V2 Objects via interfaces 
		set objMove.Item        = ##class(alINV.iUINV).GetItem(%this.Item)   ; FIXME ,.sc // SR15673
		set objMove.FromLocn    = ##class(alLOC.iLOC).GetLocation(%this.Issue.FromLocn.Location)
		set objMove.ToLocn      = ##class(alLOC.iLOC).GetLocation(%this.Issue.FromLocn.Location)
		set objMove.FromStorage = ##class(alLOC.iLOC).GetStorage(%this.Issue.FromLocn.Location,%this.FromStorage.StockLocation)
		set objMove.ToStorage   = ##class(alLOC.iLOC).GetStorage(%this.Issue.FromLocn.Location,%this.DespatchStorage.StockLocation)
	 	set objMove.Bundle      = ##class(alSOH.dBundle).%OpenId(%this.Bundle)
	 	
	 	//	set objMove.DueDate     = %this.                      ; Not Implemented yet
		set objMove.Reference   = %this.Issue.IssueNumber
		set objMove.LineNumber  = %this.LineNumber
		set objMove.QtyPicked   = %this.QtyIssued
		set objMove.QtyReceived = 0
		set objMove.QtyRequired = %this.QtyRequired
		set objMove.Supply      = ""
		set objMove.Demand      = ""
		set objMove.Completed   = $$$NO

		
		if $$$ISOK(sc) {
			set sc = objMove.ChangeState(4)
		}
	}

	if $$$ISOK(sc) {
		set sc = %this.%Save()
	}
	quit sc
]]></Implementation>
</Method>

<Method name="ManuallyClose">
<Description><![CDATA[
<p>Sets this record's status to <class>WWWStatus</class>::INIssueLine::8 if able to</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 31-Jul-2008	Luke	SR15814: changed formation of status
	; 17-Dec-2007	GRF		Error code; $$$MakeStatus
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if %this.IsClosable() {
		set %this.Status = 8
	} else {
		set strMessage = $$$Text("IN00731")        ; "Not in a closable state"
		set sc =$$$ERROR($$$GeneralError,strMessage)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="AutoClose">
<Description><![CDATA[
<p>Attempts to set this record's Status Property to Auto - Close(9)</p>
<p>On success, attempt to Auto - Close the header</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 31-Jul-2008	Luke	SR15814: changed formation of status
	; 26-Feb-2008	GRF		Error code; $$$MakeStatus
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	; Only able to autoclose Active/Pending Lines
	if %this.IsClosable() && (%this.Status.StatusCode = 7) {
		set %this.Status = 9 ; Auto - Close
		set sc = %this.%Save()
		if $$$ISOK(sc) {
			do %this.Issue.AutoClose()
		}
	} else {
		set strMessage = $$$Text("IN00731")        ; "Not in a closable state"
		set sc =$$$ERROR($$$GeneralError,strMessage)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="IssueSet">
<Description><![CDATA[
Overide base setter, i%Variable is actually referring to a %Id in Cache classes, don't know how to override atm]]></Description>
<FormalSpec>objIssue:alISS.dUIssue</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 31-Jul-2008	Luke	SR15814: changed formation of status
	; 24-Jan-2008	HQN		SR15625 Changed class signature dINIssue to dUIssue
	; 17-Dec-2007	GRF		Error code; $$$MakeStatus
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if (objIssue '= $$$NULLOREF) && $IsObject(objIssue) && objIssue.%Extends("alISS.dUIssue") {
		set i%Issue = objIssue
	} else {
		set strMessage = $$$Text("IN00732")        ; "Invalid object process : Issue Set"
		set sc =$$$ERROR($$$GeneralError,strMessage)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="IssueGet">
<Description><![CDATA[
<p>Gets the <class>alISS.dUIssue</class> that is related to this record</p>
<p>Pseudo relation, ANM Specific and real Relations wouldn't require this Getter</p>]]></Description>
<ReturnType>alISS.dUIssue</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dINIssueLine to dUIssueLine
	;-------------------------------------------------------------------------------
	if (i%Issue = $$$NULLOREF) && (%this.IssueNumber '= "") {
		set i%Issue = ##class(alISS.dUIssue).%OpenId("0||"_%this.IssueNumber)
	}
	quit i%Issue
]]></Implementation>
</Method>

<Method name="FromStorageSet">
<FormalSpec>objStorage</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 31-Jul-2008	Luke	SR15814: the setting of sc, commented out use of sc
	; 17-Apr-2008	GRF		Single exit point - adjust sc where necessary
	; 24-Jan-2008 	HQN		SR15625 Changed class signature dStorage to dUStorage
	; 04-Dec-2007	HQN		Invalidate object for value set so it reloads on next Get
	;-------------------------------------------------------------------------------
	//set sc = $$$OK
	if $IsObject(objStorage) && objStorage.%Extends("alLOC.dUStorage") {
		if (objStorage.ParentLocation = %this.Issue.FromLocn) {
			set i%objFromStorage = objStorage
			set i%FromStorage    = objStorage.StockLocation
	//	} else {
	//		set sc = $$$NO
		}
	} else {
		set i%FromStorage    = objStorage
		set i%objFromStorage = $$$NULLOREF
	}
	quit $$$OK //SR15814:
]]></Implementation>
</Method>

<Method name="FromStorageGet">
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dStorage to dUStorage
	;-------------------------------------------------------------------------------
	if (i%FromStorage '= $$$NULLOREF) {
		if (i%objFromStorage = $$$NULLOREF) {
			if (%this.Issue '= $$$NULLOREF) {
				set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Issue.FromLocn.Location_"||"_i%FromStorage)
				if (objStorage '= $$$NULLOREF) {
					set i%objFromStorage = objStorage
				}
			}
		}
	}
	quit i%objFromStorage
]]></Implementation>
</Method>

<Method name="DespatchStorageSet">
<FormalSpec>objStorage</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 04-Jun-2009	PPP		SR16544 : Created
	;-------------------------------------------------------------------------------
	if $IsObject(objStorage) && objStorage.%Extends("alLOC.dUStorage") {
		if (objStorage.ParentLocation = %this.Issue.FromLocn) {
			set i%objDespatchStorage = objStorage
			set i%DespatchStorage    = objStorage.StockLocation
		}
	} else {
		set i%DespatchStorage    = objStorage
		set i%objDespatchStorage = $$$NULLOREF
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DespatchStorageGet">
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 04-Jun-2009	PPP		SR16544 : Created
	;-------------------------------------------------------------------------------
	if (i%DespatchStorage '= $$$NULLOREF) {
		if (i%objDespatchStorage = $$$NULLOREF) {
			if (%this.Issue '= $$$NULLOREF) {
				set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Issue.FromLocn.Location_"||"_i%DespatchStorage)
				if (objStorage '= $$$NULLOREF) {
					set i%objDespatchStorage = objStorage
				}
			}
		}
	}
	quit i%objDespatchStorage
]]></Implementation>
</Method>

<Method name="ToStorageSet">
<FormalSpec>objStorage</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 31-Jul-2008	Luke	SR15814: changed formation of status
	; 24-Jan-2008	HQN		SR15625 Changed class signature dStorage to dUStorage
	; 06-Dec-2007	GRF		Recognise additional exception cases
	;-------------------------------------------------------------------------------
	set sc = $$$YES
	if $IsObject(objStorage) {
		if objStorage.%Extends("alLOC.dUStorage") {
			if (objStorage.ParentLocation = %this.Issue.ToLocn) {
				set i%objToStorage = objStorage
				set i%ToStorage    = objStorage.StockLocation
			} else {
				set strMessage = $$$Text("alLOC0002")   ; "This storage doesn't belong to this Location - it can not be set"
				set sc =$$$ERROR($$$GeneralError,strMessage)
			}
		} else {
			set strMessage = $$$Text("alLOC0003")       ; "Invalid storage specified"
			set sc = $$$ERROR($$$GeneralError,strMessage)
		}
	} else {
		set i%objToStorage = $$$NULLOREF
		set i%ToStorage    = objStorage
	}
	quit sc
]]></Implementation>
</Method>

<Method name="ToStorageGet">
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dStorage to dUStorage
	;-------------------------------------------------------------------------------
	if (i%ToStorage '= $$$NULLOREF) {
		if (i%objToStorage = $$$NULLOREF) {
			if (%this.Issue '= $$$NULLOREF) {
				set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Issue.ToLocn.Location_"||"_i%ToStorage)
				if (objStorage '= $$$NULLOREF) {
					set i%objToStorage = objStorage
				}
			}
		}
	}
	quit i%objToStorage
]]></Implementation>
</Method>

<Method name="GetInstance">
<ClassMethod>1</ClassMethod>
<FormalSpec>oidIssueLine:%Library.ObjectIdentity</FormalSpec>
<ReturnType>alISS.dUIssueLine</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 22-Dec-2010	shobby	SR17638: Routine needs to quit with a value.
	; 30-Jun-2010	PPP		SR17297 Added Return-To-Supplier Issue
	; 23-Jul-2009	PPP		SR16753 Added Manufacturing Issue and revamped GetInstance
	; 02-May-2008	Luke	SR15702 Removed checks demand type, Only use 7 (Req)
	; 							This is only for REQ Issues. When we move to other
	; 							types of Issues these will be V2, thus is not a
	; 							problem 
	; 08-HQN-2008	HQN		SR15625 Changed lookup of WWW101 to direct global
	; 							Class seems to be uncompiled
	; 30-Jan-2008	HQN		SR15625 Changed class signature dREQIssue to dUReqIssue
	; 07-Dec-2007	HQN		Changed DemandType value comparison to reflect new
	; 							status code (5 -> 7)
	;-------------------------------------------------------------------------------

 	//SR16753
	set objIssueLine = ##class(alISS.dUIssueLine).%OpenId(oidIssueLine)
	set objExtendedIssueLine = $$$NULLOREF
	
	if $isObject(objIssueLine) {
		set idType = objIssueLine.Issue.Type
		set idDemandType = objIssueLine.Issue.DemandType
		
		if (idDemandType = 7) || (idType = 1) || (idType = 4) {      // Inter-Departmetal, Kits
			set objExtendedIssue = ##class(alREQ.dUReqIssueLine).%OpenId(objIssueLine.%Id(),,.sc)
			
		} elseif (idType = 3) || (idType = 5) {                      // Dispense, Prescriptions
			set objExtendedIssue = ##class(alISS.dUDispenseToPatientLine).%OpenId(objIssueLine.%Id(),,.sc)
			
		} elseif (idType = 6) {                                      // Manufacturing
			set objExtendedIssue = ##class(alMAN.dUManIssueLine).%OpenId(objIssueLine.%Id(),,.sc)

		} elseif (idType = 7) {                                      // Return To Supplier
			set objExtendedIssue = ##class(alREC.dUReturnToSupplierLine).%OpenId(objIssueLine.%Id(),,.sc)
		}
		quit:$isObject(objExtendedIssue) objExtendedIssue
	}
	quit:$isObject(objIssueLine) objIssueLine
	quit ""  ;SR17638
]]></Implementation>
</Method>

<Method name="SupplySet">
<FormalSpec>objSupply</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 31-Jul-2008	Luke	SR15814: Corrected the setting of sc
	;-------------------------------------------------------------------------------	
	set sc = $$$OK
	if $IsObject(objSupply) && objSupply.%Extends("User.INDRPSUPPLY") {
		set i%Supply    = objSupply.SupplyNo
		set i%objSupply = $$$NULLOREF
	} else {
		set i%Supply    = objSupply
	}
	quit sc
]]></Implementation>
</Method>

<Method name="SupplyGet">
<ReturnType>alDRP.dUSupply</ReturnType>
<Implementation><![CDATA[
 	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008 	HQN		SR15625 Changed class signature for dSupply to dUSupply
	; 07-Dec-2007	HQN		Changed DemandType value comparison to reflect new
	; 							status code (5 -> 7)
	;-------------------------------------------------------------------------------	
	if (%this.Demand '= $$$NULLOREF) && (i%objSupply = $$$NULLOREF) { 
		set objResultSet = ##class(%Library.ResultSet).%New()
		do objResultSet.Prepare("SELECT ID FROM SQLUser.INDRPSUPPLY WHERE SupplyType = 7 AND SupplyNo = ?")
		set sc = objResultSet.Execute(%this.Demand.OrderNo) ; 
		
		if (objResultSet.Next(.sc)) {
			set objSupply = ##class(alDRP.dUSupply).%OpenId(objResultSet.Get("ID"))
			if ('$$$ISERR(objSupply)) {
				set i%Supply    = objSupply.SupplyNo
				set i%objSupply = objSupply
			}
		}
	}
	quit i%objSupply
]]></Implementation>
</Method>

<Method name="DemandSet">
<FormalSpec>objDemand</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	if $IsObject(objDemand) && objDemand.%Extends("User.INDRPDEMAND") {
		set i%Demand    = objDemand.DemandNo
		set i%objDemand = $$$NULLOREF
	} else {
		set i%Demand    = objDemand
	}
	quit sc
]]></Implementation>
</Method>

<Method name="DemandGet">
<ReturnType>alDRP.dUDemand</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 
	;-------------------------------------------------------------------------------
	if (i%Demand '= "") && (i%objDemand = $$$NULLOREF) {
		set objDemand = ##class(alDRP.dUDemand).%OpenId("0||"_%this.FromStorage.Location.Location_"||"_i%Demand)
		if ('$$$ISERR(objDemand)) {
			set i%objDemand = objDemand
		}
	}
	quit i%objDemand
]]></Implementation>
</Method>

<Method name="IsFirmable">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 08-Jul-2014	SCR		SESDF-1296: Check for no Stock
	; 05-Apr-2013	SCR		HEVA-811:Disable Zero check
	; 01-Oct-2008	Luke	SR15887: Correct previous change for this SR and added
	; 							language text
	; 19-Sep-2008	Luke	SR15887: corrected the SOH qty check for V2
	; 31-Jul-2008	Luke	SR15814:Changed setting of sc and formation of sc
	; 06-May-2008	HQN		Use V2 Lookup for SOH
	; 17-Dec-2007	GRF		Error code; $$$MakeStatus; sc
	; 12-Dec-2007	HQN		Only check storage for positive quantities
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if %this.QtyIssued < 0 {
			set strMessage = $$$Text("IN00730")  ; "Quantity Issued cannot be less than zero"
			set sc =$$$ERROR($$$GeneralError,strMessage)
			
	; HEVA-811 vvvv
	;} elseif %this.QtyIssued = 0 {
	;	set objStock= ##class(alSOH.dStockBalance).%OpenId(%this.Item_"||"_%this.Issue.FromLocn.Location,,.sc)
	;	;set objStock= ##class(alSOH.dStockBalance).%OpenId(%this.Item_"||"_%this.Issue.FromLocn.%Id(),,.sc)
	;	if objStock = $$$NULLOREF {
	;		set strMessage = $$$Text($lb("IN01049",%this.LineNumber))  ; "Cannot fulfill Issue Quantity for Line %1"
	;		set sc =$$$ERROR($$$GeneralError,strMessage)
	;	}
	;
	; HEVA-811 ^^^^
	} elseif (%this.QtyIssued > 0) {
		if (%this.FromStorage = $$$NULLOREF) {   ; storage check only if we're specifying a quantity
			set strMessage = $$$Text($lb("IN00725",%this.LineNumber)) ; "From Storage has not been set in line %1"
			set sc =$$$ERROR($$$GeneralError,strMessage)
		}
		
		if $$$ISOK(sc){
			set stocktakeBlock = $$SOHPostCheck^INLocking(%this.Item,%this.Issue.FromLocn.Location,"","","","",%this.LineNumber,$$$YES)
			
			if (stocktakeBlock '= $$$OK){
				set strMessage = stocktakeBlock ; "Item %1 on Line %2 is Locked on Stocktake %3"
				set sc =$$$ERROR($$$GeneralError,strMessage)
			}	
		}
		
		if $$$ISOK(sc) {	; SR15887
			set objStkLoc = ##class(alLOC.iLOC).GetStorage(%this.FromStorage.LocationName,%this.FromStorage.StockLocation,sc)
			if objStkLoc '= "" {
				set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(%this.Item_"||"_objStkLoc.%Id()_"||"_%this.Bundle,,.sc)
				; sc will show an error if no object loaded, this will be picked up in the following code
				if ((objBundleStock'= $$$NULLOREF) && (%this.QtyIssued > objBundleStock.QtyOnHand) || (objBundleStock= $$$NULLOREF)){
					set strMessage = $$$Text("IN00727")   ; "Cannot issue more stock than have on hand"
					set sc = $$$ERROR($$$GeneralError,strMessage)
				}
			}
		}
	}
	quit sc
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
// ----------------------------------------------------------------------------------

</Content>
</UDLText>

<UDLText name="T">
<Content>
// NOTE : Expression - do not include comments

</Content>
</UDLText>

<UDLText name="T">
<Content>
// 15-Aug-2008	HQN		Created, Autoclosed shouldn't bother with closed lines

</Content>
</UDLText>

<UDLText name="T">
<Content>
// ----------------------------------------------------------------------------------

</Content>
</UDLText>


<Method name="IsClosed">
<CodeMode>expression</CodeMode>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[((%this.Status.StatusCode = 8) || (%this.Status.StatusCode = 9))
]]></Implementation>
</Method>

<Method name="IsClosable">
<Description><![CDATA[
Returns whether or not it is in a closable state]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set blnResult = $$$YES
	if %this.IsClosed() {
		set blnResult = $$$NO
	}
	quit blnResult
]]></Implementation>
</Method>

<Method name="UpdateDemand">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Called By : ##class(alREQ.dUReqIssueLine).FirmIssue
	; 
	; 11-Jun-2014	SCR		SESDF-1326: Allow no Demand
	; 16-Jul-2010	SCR		SR17441
	; 23-Feb-2009	GRF		SR16737/SR16303: Check for unidentified demand.
	; 21-Oct-2008	HQN		SR15999: Corrected Key setup for use with $$$Save
	; 15-Sep-2008	Luke	SR15895: removed the 1.5 object processing as a SQL
	;							error stoped the updating of the INDRPDEMAND.  Not
	;							sure why, but this will allow the Issue to process
	; 31-Jul-2008	Luke	SR15814: Corrected the setting of sc
	;-------------------------------------------------------------------------------
	set sc = $$$OK //SR15814:
	quit:(%this.Demand = $$$NULLOREF) sc
	; "Unable to find Demand for Dispatch Number %1."   ; SR16373/SR16303
 	;quit:(%this.Demand = $$$NULLOREF) $$$ERROR($$$GeneralError,$$$Text($listbuild("IN00352",%this.IssueNumber)))
 	
 ;++++++++++++++++++++++++++++++++++++++++++	
	tstart
 ;++++++++++++++++++++++++++++++++++++++++++
 	
	set %this.Demand.Quantity = %this.Demand.Quantity - %this.QtyIssued
	
	;/// VVV SR15895:
	;if (%this.QtyIssued >= %this.QtyRequired) {
	;	set idDemand  = i%Issue.FromLocn.Location_$$$COMMA_i%Demand
	;	set objDemand = $get(^INDRPDEMAND(0,i%Issue.FromLocn.Location,i%Demand,1))
	;	set $$$INDRPDEMANDDemandClosed(objDemand) = $$$YES
	;	set strStatus = $$$Save("INDRPDEMAND",idDemand,objDemand,$$$YES)
	;	; FIXME : strStatus CONVERSION to sc - simple setting is inappropriate
	;	set sc        = strStatus
	;}
	;/// ^^^ SR15895:

	/// VVV SR17441
	set idDemand  = i%Issue.FromLocn.Location_$$$COMMA_i%Demand
	set objDemand = $get(^INDRPDEMAND(0,i%Issue.FromLocn.Location,i%Demand,1))
	set $$$INDRPDEMANDQuantity(objDemand) = $$$INDRPDEMANDQuantity(objDemand) - %this.QtyIssued
	if (%this.QtyIssued >= %this.QtyRequired) {
		set $$$INDRPDEMANDDemandClosed(objDemand) = $$$YES
	}
	set strStatus = $$$Save("INDRPDEMAND",idDemand,objDemand,$$$YES)
	; FIXME : strStatus CONVERSION to sc - simple setting is inappropriate
	set sc        = strStatus
	///^^^ SR17441
	if ($$$ISOK(sc)) {
		set sc = %this.UpdateSupply()
	}
 ;++++++++++++++++++++++++++++++++++++++++++	
	if $$$ISERR(sc) {
		trollback
	} else {
		tcommit:($tlevel>0)
	}
 ;++++++++++++++++++++++++++++++++++++++++++	
	quit sc
]]></Implementation>
</Method>

<Method name="UpdateSupply">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 11-Jun-2014	SCR		SESDF-1326: Allow no Supply
	; 21-Oct-2008	HQN		SR15999: Corrected Key setup for use with $$$Save
	; 						Reverted Logic, was correct initially
	; 15-Sep-2008	Luke	SR15895: removed the 1.5 object processing as a SQL error 
	; 							 stopped the updating of the INDRPSUPPLY. Not sure
	; 							 why, but this will allow the Issue to process
	; 31-Jul-2008	Luke	SR15814: Corrected the setting of sc
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set idSupply    = i%Issue.ToLocn.Location_$$$COMMA_i%Supply ; 21-Oct-2008
	quit:($piece(idSupply,$$$COMMA,1)="")||($piece(idSupply,$$$COMMA,2)="") sc
	set objSupply   = $get(^INDRPSUPPLY(0,i%Issue.ToLocn.Location,i%Supply,1))
	set suppliedQTY = $$$INDRPSUPPLYQuantity(objSupply) - %this.QtyIssued
	
	set $$$INDRPSUPPLYQuantity(objSupply) = suppliedQTY
	
	;if suppliedQTY >= %this.QtyRequired { ; SR15999
	if (%this.QtyIssued >= %this.QtyRequired) {
		set $$$INDRPSUPPLYClosed(objSupply) = $$$YES
	}
	
	set strStatus = $$$Save("INDRPSUPPLY",idSupply,objSupply,$$$YES) 
	; FIXME : strStatus => sc?
	quit sc
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called before 
any data is written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 17-Sep-2010	SCR		SR17571: Call to supper
	; 31-Jul-2008	Luke	SR15814: Corrected the return status
	; 13-Dec-2007	HQN		Check for NULLOREFs
	;-------------------------------------------------------------------------------
	if (%this.Status '= $$$NULLOREF) && (%this.Status.%IsModified()) {
		set i%Status = %this.Status.StatusCode
	}
	if (%this.FromStorage '= $$$NULLOREF) && (%this.FromStorage.%IsModified()) {
		set i%FromStorage = %this.FromStorage.StockLocation
	}
	if (%this.ToStorage '= $$$NULLOREF) && (%this.ToStorage.%IsModified()) {
		set i%ToStorage = %this.ToStorage.StockLocation
	}
	if (%this.Demand '= $$$NULLOREF) && (%this.Demand.%IsModified()) {
		set i%Demand = %this.Demand.DemandNo
	}
	set sc=##Super(insert) ; SR17471
	quit sc
]]></Implementation>
</Method>

<Method name="%OnOpen">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Open</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being opened.

<P>If this method returns an error then the object will not be opened.]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 01-Apr-2008	HQN		Resetting %objlasterror on SQL projection warning
	;-------------------------------------------------------------------------------
	if $get(%objlasterror) '= "" {
		; dU classes may object error because it relies on SQL projection to find objects
		if (%this.%Oid() '= $$$NULLOREF) && ($$$GETERRORCODE(%objlasterror) = 5809) {
			set %objlasterror = ""
		}
	}
	quit $$$OK
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>

<Property name="AverageCost"/>

<Property name="Bundle"/>

<Property name="Company"/>

<Property name="Demand"/>

<Property name="DespatchStorage"/>

<Property name="FREE1"/>

<Property name="FREE10"/>

<Property name="FREE2"/>

<Property name="FREE3"/>

<Property name="FREE4"/>

<Property name="FREE5"/>

<Property name="FREE6"/>

<Property name="FREE7"/>

<Property name="FREE8"/>

<Property name="FREE9"/>

<Property name="FromStorage"/>

<Property name="IssueNumber"/>

<Property name="Item"/>

<Property name="LineNumber"/>

<Property name="LocationInventory"/>

<Property name="NetworkInventory"/>

<Property name="QtyIssued"/>

<Property name="QtyPicked"/>

<Property name="QtyRequired"/>

<Property name="ReasonCode"/>

<Property name="Reference"/>

<Property name="Status"/>

<Property name="ToStorage"/>

<Property name="Unit"/>

<Property name="UnitCost"/>
</Storage>
</Class>
</Export>