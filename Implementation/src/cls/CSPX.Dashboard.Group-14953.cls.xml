<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.Dashboard.Group">
<Description><![CDATA[
Base class for Groups within an Ensemble Dashboard.]]></Description>
<ClassType/>
<CompileAfter>CSPX.Dashboard.BarChart</CompileAfter>
<ProcedureBlock>1</ProcedureBlock>
<Super>Meter</Super>
<System>3</System>

<Parameter name="SHOWLABEL">
<Default>0</Default>
</Parameter>


<Parameter name="MINWIDTH">
<Default>0</Default>
</Parameter>


<Parameter name="MINHEIGHT">
<Default>0</Default>
</Parameter>


<Parameter name="WIDTH">
<Default>0</Default>
</Parameter>


<Parameter name="HEIGHT">
<Default>0</Default>
</Parameter>


<Property name="Meters">
<Description><![CDATA[
Meters belonging to this group]]></Description>
<Type>Meter</Type>
<Collection>list</Collection>

<Parameter name="XMLNAME" value="Meters"/>

<Parameter name="XMLPROJECTION" value="ELEMENT"/>

<Parameter name="XMLTYPECONSTRAINT" value="CHOICE"/>
</Property>


<Property name="Orientation">
<Description><![CDATA[
Direction in which to layout meters within this group.]]></Description>
<Type>%String</Type>
<InitialExpression>"horizontal"</InitialExpression>

<Parameter name="MAXLEN" value="10"/>

<Parameter name="VALUELIST" value=",horizontal,vertical"/>

<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>


<Method name="InsertMeter">
<Description><![CDATA[
Insert a meter into this group]]></Description>
<FormalSpec>pMeter:Meter</FormalSpec>
<Implementation><![CDATA[	Do ..Meters.Insert(pMeter)
]]></Implementation>
</Method>

<Method name="OnSVGStyle">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
.Group-OuterBorder { 
	fill: none;
	stroke: none;
	stroke-width: 1px;
}

.Group-Title { 
	pointer-events: none;
	font-size: 6;
	fill: yellow;
	stroke: none;
}
	>
]]></Implementation>
</Method>

<Method name="OnSVGScript">
<Description><![CDATA[
Draw the script section of this SVG meter]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&js<
function Group_setProperty(property,value)
{
	return false;
}
	>
]]></Implementation>
</Method>

<Method name="OnSVGInitJS">
<Implementation><![CDATA[
	// group methods
	&js<
meter.children = new Array();
meter.arrangeMeters = Group_arrangeMeters;
meter.alignMeters = Group_alignMeters;
meter.addMeter = Group_addMeter;
>
]]></Implementation>
</Method>

<Method name="OnSVGBody">
<Description><![CDATA[
Draw the body of this SVG meter]]></Description>
</Method>

<Method name="GenerateCode">
<FormalSpec>pCode:%CharacterStream,pLevel:%Integer=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tVar = "tGroup" _ pLevel
	Do %code.WriteLine(" Set "_tVar_" = tMeter")
	Do:(..Label'="") pCode.WriteLine(" Set "_tVar_".Label=""" _ ..Label _ """")
	Do:(..Metric'="") pCode.WriteLine(" Set "_tVar_".Metric=""" _ ..Metric _ """")
	Do:(..Property'="") pCode.WriteLine(" Set "_tVar_".Property=""" _ ..Property _ """")
	Do:(..Orientation'="") pCode.WriteLine(" Set "_tVar_".Orientation=""" _ ..Orientation _ """")
	Do:(..Width'="") pCode.WriteLine(" Set "_tVar_".Width=" _ ..Width)
	Do:(..Height'="") pCode.WriteLine(" Set "_tVar_".Height=" _ ..Height)

	#; Generate code for each Meter within this group
	For i=1:1:..Meters.Count() {
		Set tMeter = ..Meters.GetAt(i)
		Do %code.WriteLine(" // " _ tMeter.%ClassName(1))
		Do %code.WriteLine(" Set tMeter = ##class(" _ tMeter.%ClassName(1) _ ").%New()")
		Do %code.WriteLine(" Do "_tVar_".InsertMeter(tMeter)")
		
		// apply default metric for members of this group
		If (tMeter.Metric = "") {
			Set tMeter.Metric = ..Metric
		}

		// default value of label		
		If (tMeter.Label = "") {
			Set tMeter.Label = tMeter.Property
		}

		Set tSC = tMeter.GenerateCode(%code, pLevel + 1)
		If $$$ISERR(tSC) Quit
	}

	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>