<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.cache.io.StdoutStream">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="GetInstance">
<ClassMethod>1</ClassMethod>
<ReturnType>StdoutStream</ReturnType>
<Implementation><![CDATA[	if ('$isObject($get(%StdoutStream))) set %StdoutStream = ..%New()

	quit %StdoutStream]]></Implementation>
</Method>

<Method name="Free">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set %StdoutStream = $$$NULLOREF
	kill %StdoutStream]]></Implementation>
</Method>

<Property name="IsOpen">
<Type>%Boolean</Type>
</Property>

<Property name="IO"/>

<Property name="Stream">
<Type>%FileCharacterStream</Type>
</Property>

<Property name="File">
<Type>%String</Type>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="%OnNew">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set ..IsOpen = 0
	set ..IO = ""
	set ..Stream = $$$NULLOREF
	set ..File = ""

	quit $$$OK]]></Implementation>
</Method>

<Method name="startCapture">
<Implementation><![CDATA[	if (..IsOpen) quit

	set ..IO = $io

	set $ztrap = "exceptionStartCapture"

	set ..Stream = ##class(%FileCharacterStream).%New()
	do ..Stream.Write("") ; force stream's file to open

	set ..File = ..Stream.Filename
	use ..File

	set ..IsOpen = 1

finallyStartCapture
	quit

exceptionStartCapture
	set $ztrap = ""

	goto finallyStartCapture]]></Implementation>
</Method>

<Method name="stopCapture">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	if ('..IsOpen) quit

	set buffer = ""

	set $ztrap = "exceptionStopCapture"

	use ..IO
	close ..File

	set ..IsOpen = 0

	do ..Stream.Rewind()
	set len = 16000
	while ('..Stream.AtEnd) {
		set buffer = buffer_..Stream.Read(.len)
	}

finallyStopCapture
	quit buffer

exceptionStopCapture
	set $ztrap = ""

	goto finallyStopCapture]]></Implementation>
</Method>
</Class>
</Export>