<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.test.unitario.infra.webservice.alphalinc.ControlClientTest">
<ClassType/>
<Import>VAR.infra.webservice.alphalinc,VAR.infra.util,%UnitTest,VAR.test.infra.unittest</Import>
<IncludeCode>VARErros</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>TestCase</Super>

<Method name="Run">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(SuiteManager).RunTestCase(..%ClassName(1))]]></Implementation>
</Method>

<Property name="ControlClient">
<Type>%String</Type>
</Property>

<Property name="SessionId">
<Type>%String</Type>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="TestSessao">
<Implementation><![CDATA[	set $ztrap = "exception"
	set $ecode = ""

	do ..ConectarSessao()
	do ..DesconectarSessao()

finally
	quit

exception
	set $ztrap = ""

	if ($$$ISERROESPECIAL) {
		write !, "Error: ", ##class(Errors).GetErrorFromErrorStatus($$$VARERRO)
	}
	else {
		write !, "Error: ", $zerror
	}
	do $$$AssertEquals($ecode, "") // Provocar um erro

	goto finally]]></Implementation>
</Method>

<Method name="TestLogin">
<Implementation><![CDATA[	set $ztrap = "exception"
	set $ecode = ""

	do ..ConectarSessao()
	do ..Logar()
	write !, "Logou."
	set ok = ..VerificarSessao()
	if (ok = $$$OK) {
		write !, "Sessão ainda está ativa."
	}
	else {
		write !, "Sessão não está mais disponível."
	}
	do ..DesconectarSessao()

finally
	quit

exception
	set $ztrap = ""

	if ($$$ISERROESPECIAL) {
		write !, "Error: ", ##class(Errors).GetErrorFromErrorStatus($$$VARERRO)
	}
	else {
		write !, "Error: ", $zerror
	}
	do $$$AssertEquals($ecode, "") // Provocar um erro

	goto finally]]></Implementation>
</Method>

<Method name="TestSequence">
<Implementation><![CDATA[	set $ztrap = "exception"
	set $ecode = ""

	do ..ConectarSessao()
	do ..Logar()
	do ..SetSequenciaMensagem(1)
	do ..DesconectarSessao()

finally
	quit

exception
	set $ztrap = ""

	if ($$$ISERROESPECIAL) {
		write !, "Error: ", ##class(Errors).GetErrorFromErrorStatus($$$VARERRO)
	}
	else {
		write !, "Error: ", $zerror
	}
	do $$$AssertEquals($ecode, "") // Provocar um erro

	goto finally]]></Implementation>
</Method>

<Method name="ConectarSessao">
<Implementation><![CDATA[	set ..ControlClient = ##class(ControlClient).%New()
	set result = ..ControlClient.Connect("Local", "Local", "", 20*60, 1)
	do $$$AssertNotEquals(result, $$$NULLOREF)
	do $$$AssertNotEquals(+result.ReturnValue, 0)

	set ..SessionId = result.SessionId
	write !, "Session ID: ", ..SessionId]]></Implementation>
</Method>

<Method name="Logar">
<Implementation><![CDATA[	set result = ..ControlClient.Login(..SessionId, "123")
	do $$$AssertNotEquals(result, $$$NULLOREF)
	do $$$AssertEquals(result.ReturnValue, "OK")]]></Implementation>
</Method>

<Method name="SetSequenciaMensagem">
<FormalSpec>Sequence:%Integer</FormalSpec>
<Implementation><![CDATA[	set result = ..ControlClient.SetMsgSequence(..SessionId, Sequence)
	do $$$AssertNotEquals(result, $$$NULLOREF)
	do $$$AssertEquals(result.ReturnValue, "OK")]]></Implementation>
</Method>

<Method name="VerificarSessao">
<Description><![CDATA[Obs.: a verificação só funciona depois que estiver
      logado. antes disso inclusive dá erro ao tentar
      retornar uma mensagem de erro.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	set result = ..ControlClient.VerifySession(..SessionId)
	do $$$AssertNotEquals(result, $$$NULLOREF)
	do $$$AssertEquals(result.ReturnValue, "OK")
	quit $$$OK]]></Implementation>
</Method>

<Method name="DesconectarSessao">
<Implementation><![CDATA[	set result = ..ControlClient.Logout(..SessionId)
	do $$$AssertNotEquals(result, $$$NULLOREF)
	do $$$AssertEquals(result.ReturnValue, "OK")]]></Implementation>
</Method>
</Class>
</Export>