<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSOH.dPeriodType">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent</Super>
<UDLText name="T">
<Content>
/*------------------------------------------------------------------------------
; History: 
; 14-Apr-2009	PPP		SR16468:Captions for Properties
;-----------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="Description">
<Type>alSYS.dt.dtString</Type>

<Parameter name="CAPTION" value="AL00114"/>
</Property>


<Property name="StartDate">
<Type>alSYS.dt.dtDate</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00118"/>
</Property>


<Property name="PeriodCycle">
<Type>alSOH.dPeriodCycle</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00115"/>
</Property>


<Property name="DateClosed">
<Type>alSYS.dt.dtDate</Type>

<Parameter name="CAPTION" value="AL00113"/>
</Property>


<Property name="PeriodTypeId">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00116"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>

<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Property name="Periods">
<Type>alSOH.dSOHPeriod</Type>
<Cardinality>children</Cardinality>
<Inverse>PeriodType</Inverse>
<Relationship>1</Relationship>

<Parameter name="CAPTION" value="AL00117"/>
</Property>

<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Index name="PeriodTypeIdIndex">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>PeriodTypeId</Properties>
<Unique>1</Unique>
</Index>

<Index name="PeriodCycleIDX">
<Properties>PeriodCycle</Properties>
</Index>

<UDLText name="T">
<Content>
//++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="GetPeriodSequence">
<FormalSpec>baseDate:%Date</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History: 
	; 14-Aug-2008	HQN		SR15801: Created
	;-------------------------------------------------------------------------------
	quit 1
]]></Implementation>
</Method>

<Method name="GetStartDate">
<CodeMode>expression</CodeMode>
<FormalSpec>baseDate:%Date</FormalSpec>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[%this.PeriodCycle.GetStartDate(%this.StartDate, baseDate)
]]></Implementation>
</Method>

<Method name="GetEndDate">
<CodeMode>expression</CodeMode>
<FormalSpec>baseDate:%Date</FormalSpec>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[%this.PeriodCycle.GetEndDate(%this.StartDate, baseDate)
]]></Implementation>
</Method>

<Method name="GetPeriodViaSequence">
<FormalSpec>pSequenceNumber:%Integer</FormalSpec>
<ReturnType>alSOH.dSOHPeriod</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History: 
	; 14-Aug-2008	HQN		SR15801: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	;+++++++++++++++++++++++++++++++++++++++
	tstart
	;+++++++++++++++++++++++++++++++++++++++
	while %this.Periods.Count() < pSequenceNumber {
		set objPeriod = ##class(alSOH.dSOHPeriod).%New(%this)
		;do %this.Periods.Insert(objPeriod)
		do objPeriod.%Save(.sc)
		quit:$$$ISERR(sc)
	}
	;+++++++++++++++++++++++++++++++++++++++
	if $$$ISERR(sc) {
		trollback
	} else {
		tcommit:$tlevel>0
	}
	;+++++++++++++++++++++++++++++++++++++++
	quit %this.Periods.GetAt(pSequenceNumber)
]]></Implementation>
</Method>

<Method name="GetPeriodViaDate">
<FormalSpec>pDate:%Date</FormalSpec>
<ReturnType>alSOH.dSOHPeriod</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History: 
	; 14-Aug-2008	HQN		SR15801: Created
	;-------------------------------------------------------------------------------
	set objSOHPeriod = $$$NULLOREF
	set objResultSet = ##class(%Library.ResultSet).%New()
	if objResultSet.Prepare("SELECT * FROM alSOH.dSOHPeriod WHERE periodtype = ? AND startdate <= ? AND enddate >= ?") {
		if objResultSet.Execute(%this.%Id(),+pDate,+pDate) {
			if objResultSet.Next() {
				set objSOHPeriod = ##class(alSOH.dSOHPeriod).%OpenId(objResultSet.Data("ID"))
			}
			if objResultSet.Next() {
				; More than 1 period? ERROR!
			}
		}
	}
	
	if objSOHPeriod = $$$NULLOREF {
		set intPeriodSequence = 1
		set blnCurrentPeriod  = $$$NO
		while blnCurrentPeriod=$$$NO {
			set objSOHPeriod = %this.GetPeriodViaSequence(intPeriodSequence)   ; extends defined periods if necessary
			if ((objSOHPeriod.StartDate <= pDate) && (objSOHPeriod.EndDate >= pDate)) ||
			    (objSOHPeriod.StartDate > pDate) {
				set blnCurrentPeriod = $$$YES
			}
			quit:blnCurrentPeriod=$$$YES
			
			set intPeriodSequence = intPeriodSequence + 1
		}
	}
	quit objSOHPeriod
]]></Implementation>
</Method>

<Method name="Populate">
<FormalSpec>pblnTransaction=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Populates this with all records for valid periods
	; 
	; 05-Apr-2011	shobby	SR17698: Make transaction optional.  Too many records with
	;							Chickasaw data to process.
	; 06-Jan-2010	shobby	SR17097: Call CreatePeriodBalance
	; 13-Nov-2009	PPP		SR17023: Added COMMsg Logging for the Populate process
	; 16-Oct-2008	HQN		SR16030: Refactored to do unique entries instead of basing 
	; 							off of dStockHistory, dPeriodBalance already does that.
	; 15-Oct-2008	HQN		Created
	;-------------------------------------------------------------------------------
	#include COMSYS
	
	set sc = $$$OK
	
	;+++++++++++++++++++++++++++++++++++++++
	if pblnTransaction tstart						;SR17698
	;+++++++++++++++++++++++++++++++++++++++

	set dteClosed = %this.DateClosed
	if dteClosed="" set dteClosed = +$horolog
	
	set objSOHPeriod = %this.GetPeriodViaDate(dteClosed)
	set objResultSet = ##class(%Library.ResultSet).%New()
	set sc = objResultSet.Prepare("SELECT DISTINCT Item,Location FROM alSOH.dStockHistory")
	if $$$ISOK(sc) {
		set sc = objResultSet.Execute() 
		if $$$ISOK(sc) {
			while objResultSet.Next(.sc) {
				set sc = ..CreatePeriodBalance(objResultSet.Data("Item"),objResultSet.Data("Location")) ;SR17097
						
				set idLog = $get(%("VAR","pidLog"))   ; //SR17023
				if idLog'="" {
					do AddMessage^COMLog(idLog,$$$Text($listbuild("IN01151",objResultSet.Data("Item"),objResultSet.Data("Location"))),.idLogEntry)
				}  ; "Updating Period Balance Record %1 to %2"
			}
		}
	}
	if pblnTransaction {							;SR17698
		;+++++++++++++++++++++++++++++++++++++++
		if $$$ISERR(sc) {
			trollback
		} else {
			tcommit:$tlevel>0
		}
		;+++++++++++++++++++++++++++++++++++++++
	}												;SR17698
	quit sc
]]></Implementation>
</Method>

<Method name="CreatePeriodBalance">
<FormalSpec>pidItem:%String,pidLocation:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Subroutined a section out of 'Populate'
	;  
	; Note:  This routine assumes that the alSOH.dPeriodBalance does not currently exist.
	; 
	; ByRef :
	; 
	; Returns: Status
	;
	; History:
	; 11-Apr-2011	shobby	SR17698.3 Reestablished the logic that assumed that all PeriodBalances
	;							have already been removed.  blnAnyData flag removes the need to 
	;							have to maintain this routine when new properties are added.
	;							Included a transaction wrapper.
	; 07-Apr-2011	shobby	SR17698.2 Exit if an error is found.
	; 05-Apr-2011	shobby	SR17698: Force existing transactions to be overwritten on
	;							removed.  Don't crash if item or location have already
	;							been deleted.
	; 30-Jul-2010	PPP		SR17472: Need Brackets around the && statements
	; 06-Jan-2010	shobby	SR17097: Created
	;-------------------------------------------------------------------------------
	set objItem = ##class(alINV.dItem).%OpenId(pidItem)
	set objLocn = ##class(alLOC.dLocation).%OpenId(pidLocation)
	set sc=$$$OK ;SR17698
	set blnAnyData=$$$NO	;SR17698.3

	tstart					;SR17698.3

	if (objItem'=$$$NULLOREF)&&(objLocn'=$$$NULLOREF) {		//SR17698
		for loopPeriods=1:1:%this.Periods.Count() {
			quit:'sc										;SR17698.2
			set objSOHPeriod     = %this.Periods.GetAt(loopPeriods)
			set objPeriodBalance = ##class(alSOH.dPeriodBalance).%New() ; SR17698 ;SR17698.3 
		
			set objPeriodBalance.Item      = objItem
			set objPeriodBalance.Location  = objLocn
			set objPeriodBalance.SOHPeriod = objSOHPeriod
		
			set sc = objPeriodBalance.Populate(.blnAnyData)		;SR17698.3
			//SR17472
			if $$$ISOK(sc)&&blnAnyData {						;SR17698.3
				;				&&'((objPeriodBalance.OpenQtyOnHand   =0) &&
				;               	(objPeriodBalance.QtySupplierReceipt 	=0) &&
				;               	(objPeriodBalance.QtySupplierReturn 	=0) &&
				;                	(objPeriodBalance.QtyCustomerReturn 	=0) &&
				;                	(objPeriodBalance.QtySale 				=0) &&
				;                	(objPeriodBalance.QtyManufacturingReceipt=0) &&
				;                	(objPeriodBalance.QtyManufacturingIssue =0) &&
				;                	(objPeriodBalance.QtyTransferReceipt 	=0) &&
				;                	(objPeriodBalance.QtyTransferIssue 		=0) &&
				;                	(objPeriodBalance.QtyAdjustmentIn 		=0) &&
				;                	(objPeriodBalance.QtyAdjustmentOut 		=0) &&
				;                	(objPeriodBalance.QtyNonStockIn 		=0) &&
				;                	(objPeriodBalance.QtyNonStockOut		=0) &&
				;                	(objPeriodBalance.CloseQtyOnHand		=0)) {
				set sc = objPeriodBalance.%Save()  		;SR17698.3
			}
		}
	}
	if $$$ISERR(sc) {			;SR17958.3
		trollback				;SR17958.3
	} else {					;SR17958.3
		if $tlevel>0 tcommit	;SR17958.3
	}							;SR17958.3
	quit sc
]]></Implementation>
</Method>

<Method name="Close">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set %this.DateClosed = +$horolog
	set sc = %this.%Save()	
	quit sc
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^alSOH.dPeriodTypeD</DataLocation>
<DefaultData>dPeriodTypeDefaultData</DefaultData>
<IdLocation>^alSOH.dPeriodTypeD</IdLocation>
<IndexLocation>^alSOH.dPeriodTypeI</IndexLocation>
<StreamLocation>^alSOH.dPeriodTypeS</StreamLocation>
<Data name="dPeriodTypeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DateClosed</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
<Value name="4">
<Value>PeriodCycle</Value>
</Value>
<Value name="5">
<Value>PeriodTypeId</Value>
</Value>
<Value name="6">
<Value>StartDate</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>