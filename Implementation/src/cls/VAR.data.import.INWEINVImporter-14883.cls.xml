<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="VAR.data.import.INWEINVImporter">
<ClassType/>
<IncludeCode>INConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>AbstractImporter</Super>

<Parameter name="DEBUG">
<Description><![CDATA[

Command:
> do ##class(VAR.data.import.INWEINVImporter).importFile()

Fields
	DateOfStocktaking;StocktakingCountingNumber;ItemNumber;Location;StockLocation;ActualQuantity;
	GoodsReceiptDate;LotNo;ExpiryDate;TargetQuantity;Posted;CalculatedDifferenceQty;PostedDifferenceQty;
	LastCount;Notes;Difference;Brand;Owner;Program1
]]></Description>
<Type>%Integer</Type>
<Default>0</Default>
</Parameter>


<Property name="FASE">
<Type>%Integer</Type>
</Property>


<Property name="IDINWEINV">
<Type>%String</Type>
</Property>


<Property name="WAIT">
<Type>%Integer</Type>
</Property>


<Property name="arrItemDigitado">
<Type>%String</Type>
</Property>


<Method name="importFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo:%String,Diretorio:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;kill (arquivo) ; Limpa as variáveis de execuções anteriores

	if (($get(arquivo) = "") || ($get(Diretorio) = "")) quit "Parãmetro obrigatório (arquivo) não informado"
	
	;set strStatus = ..import(##class(DirectoryFile).GetNamespaceSubdir("files")_arquivo)
	quit ..import(Diretorio_arquivo)
		
	quit strStatus
]]></Implementation>
</Method>

<Method name="%OnNew">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$VAR
	;set YBED = "CARGADEDADOS"
	set ..ignoreHeaderLine = 1
	set ..WAIT = 0
	if (..#DEBUG) set ..printProgress = 0
	quit ##super()
]]></Implementation>
</Method>

<Method name="process">
<FormalSpec>pintRegistros:%Integer,pstrLinha:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new status
	
	set status = $$$OK
	
	set ^CacheTempFelipe($zn,$i(^CacheTempFelipe),"0") = pintRegistros_"^"_pstrLinha
	
	if (..FASE = 1) {
		if (..IDINWEINV = "") {
			set status = ..createINWEINVP(pintRegistros, pstrLinha)
		}
	}
	elseif (..FASE = 2) {
		set status = ..importINWEINVPLine(pintRegistros, pstrLinha)
	}
	elseif (..FASE = 3) {
		set status = ..importINWEINV(pintRegistros, pstrLinha)
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="importTxn">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrFilePath:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set obj = ..%New()
	
	// Realiza a criação do documento de inventário
	set sequence = ""
	set obj.FASE = 1
	set strStatus = obj.importAndProcess(pstrFilePath)
	
	// Realiza a digitação dos itens
	set sequence = ""
	set obj.FASE = 2
	set strStatus = obj.importAndProcess(pstrFilePath)
	
	// Processa o documento
	set strStatus = obj.processINWEINVP()
	
	// Realiza a digitação da quantidade dos itens
	set sequence = ""
	set obj.WAIT = 1
	set obj.FASE = 3
	set strStatus = obj.importAndProcess(pstrFilePath)
	
	kill obj

	quit strStatus
]]></Implementation>
</Method>

<Method name="createINWEINVP">
<FormalSpec>pintRegistros:%Integer,pstrLinha:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$VAR
	
	new strStatus, obj
	
	set YFORM 	= "INWEINVP"
	;set YBED	= "CARGADEDADOS"
	set YKEY	= $$^WWWNEXT(YFORM)
	
	set ..IDINWEINV = YKEY
	
	set strStatus = $$$OK
	
	set obj = ""
	
	set $$$INWEINVPStocktakeDate(obj)		= +$horolog
	set $$$INWEINVPStatus(obj)			= 0
	set $$$INWEINVPSorting(obj)			= 4
	set $$$INWEINVPCountingList(obj)	= 1
	set $$$INWEINVPSiteLocation(obj)	= ..getField(pstrLinha, 7)
	;set $$$INWEINVPEmployee(obj)		= "CARGADEDADOS"
	set $$$INWEINVPEmployee(obj)		= YBED
	
	set strStatus = $$$Save(YFORM, YKEY, obj, $$$YES)
	
	quit strStatus
]]></Implementation>
</Method>

<Method name="processINWEINVP">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new strStatus
	
	set strStatus = $$$OK
	
	set $ztrap = "erroProcessINWEINVP"
	
	do CreateList^INWEINVP1(..IDINWEINV)

finally
	quit strStatus
	
erroProcessINWEINVP
	set $ztrap = ""
	set strStatus = $$$CUSTOMERROR($zerror)
	
	goto finally
]]></Implementation>
</Method>

<Method name="importINWEINVPLine">
<FormalSpec>pintRegistros:%Integer,pstrLinha:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new strStatus, obj, key, idProduto
	
	set ^CacheTempFelipe($zn,$i(^CacheTempFelipe),"1") = pintRegistros_"^"_pstrLinha
	
	set $ztrap = "exceptionProcINWEINVPLine"
	set strStatus = $$$OK
	
	set idProduto = ..getField(pstrLinha, 1)
	
	// Não permite a inclusão de itens duplicados nesta lista
	if ($data(arrItemDigitado(idProduto))) {
		quit $$$OK
	}
	
	if ($get(sequence) = "") { 
		set sequence = 1
	}
	else {
		set sequence = sequence + 1
	}
	
	set stocktackNumber				= ..IDINWEINV
	set obj 						= ""
	set key							= stocktackNumber _ $$$COMMA _ sequence ;Código do inventário e código do produto
	set $piece(obj,"~",1)			= idProduto // Código do produto
	
	// Valida se o produto existe
	if ('$data(^INART(0,idProduto,1))) {
		set strStatus = idProduto _ " não existe."
		goto exceptionProcINWEINVPLine
	}
	
	if (..#DEBUG) {
		do ..print(..lineBreak_"key="_key_", obj="_obj)
	}
	else {
		set strStatus = $$$Save("INWEINVPLine", key, obj, $$$YES)
		set ^CacheTempFelipe($zn,$i(^CacheTempFelipe),"1.2") = pintRegistros_"^"_strStatus
	}
	
	// Feito via set pois não tem indice
	if ($$$ISOK(strStatus)) {
		set arrItemDigitado(idProduto) = ""
		;set ^INWEINVCount(YM,stocktackNumber,sequence,1,1) = $$$INWEINVActualQuantity(obj)_Y_$horolog
	}


finallyProcINWEINVPLine
	quit strStatus

exceptionProcINWEINVPLine
 	set $ztrap = ""
	set strStatus = $$$CUSTOMERROR($zerror)

	goto finallyProcINWEINVPLine
]]></Implementation>
</Method>

<Method name="importINWEINV">
<FormalSpec>pintRegistros:%Integer,pstrLinha:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (..WAIT = 1) {
		set ..WAIT = 0
		hang 35
		set idDateOfStocktaking = ..IDINWEINV
		&SQL(DELETE FROM SQLUser.INWEINV WHERE DateOfStocktaking = :idDateOfStocktaking)
		set ^CacheTempFelipe($zn,$i(^CacheTempFelipe),"01") = SQLCODE_"^"_%ROWCOUNT_"^"_idDateOfStocktaking
	}
	
	
	
	set ^CacheTempFelipe($zn,$i(^CacheTempFelipe),"3") = pintRegistros_"^"_pstrLinha
	
	new strStatus, obj, key
	
	if ($get(sequence) = "") { 
		set sequence = 1
	}
	else {
		set sequence = sequence + 1
	}
	
	set LineNumber = sequence
	
	set $ztrap = "exceptionProcINWEINV"
	set strStatus = $$$OK
	set stocktackNumber						= ..IDINWEINV
	
	set obj 								= ""
	set key									= stocktackNumber _ $$$COMMA _ sequence ;Código do inventário e código do produto
	
	set GoodsReceiptDate 					= ..getField(pstrLinha, 4)
	if (GoodsReceiptDate '= "") {
		set GoodsReceiptDate					= $zdateh(GoodsReceiptDate, 4) // Data no padrão PT-Br
	}
	
	set ^CacheTempFelipe($zn,$i(^CacheTempFelipe),"4") = key_"^"_pintRegistros_"^"_pstrLinha
	
	set objResultSet = ##class(%Library.ResultSet).%New("VAR.data.import.INWEINVImporter:ObtemIDINWEINV")
	
	set sc = objResultSet.Execute(..getField(pstrLinha, 1), ..IDINWEINV, ..getField(pstrLinha, 7), ..getField(pstrLinha, 6), ..getField(pstrLinha, 3), GoodsReceiptDate)
	set ^CacheTempFelipe($zn,$i(^CacheTempFelipe),"5") = sc_"^"_pintRegistros_"^"_pstrLinha
	/*if (sc) {
		if (objResultSet.Next(.sc)) {
			set LineNumber = objResultSet.Data("StocktakingCountingNumber")
			set obj = $get(^INWEINV(0,stocktackNumber,LineNumber,1))
			set key = stocktackNumber  _ $$$COMMA _ LineNumber
		}
	}*/
	set ^CacheTempFelipe($zn,$i(^CacheTempFelipe),"6") = key_"^^"_pintRegistros_"^"_pstrLinha
	set $$$INWEINVItemNumber(obj)			= ..getField(pstrLinha, 1) // Código do produto
	
	set $$$INWEINVDifference(obj)			= ..getField(pstrLinha, 2) // Quantidade de produtos
	set $$$INWEINVDifferenceAdjustment(obj)	= ..getField(pstrLinha, 2) // Quantidade de produtos
	set $$$INWEINVActualQuantity(obj)		= ..getField(pstrLinha, 2) // Quantidade de produtos
	set $$$INWEINVLotNo(obj)				= ..getField(pstrLinha, 3) // Número do lote / série
	set $$$INWEINVExpiryDate(obj)			= GoodsReceiptDate // Validade do produto
	set $$$INWEINVBrand(obj)				= ..getField(pstrLinha, 5) // Marca do produto
	set $$$INWEINVStockLocation(obj)		= ..getField(pstrLinha, 6) // Endereço de armazenagem
	set $$$INWEINVLocation(obj)				= ..getField(pstrLinha, 7) // Local
	set $$$INWEINVCountTimestamp(obj)		= $horolog
		
	set $$$INWEINVFREE1(obj)				= $HOROLOG //Data e hora do inventário
	set $$$INWEINVFREE2(obj)				= YBED // Usuário
	set $$$INWEINVFREE3(obj)				= YBED // Usuário
	
	/// Valida a consistência do registro que foi passado
	Set strStatus = ..ValidateRegister(obj, pintRegistros)
	if ('strStatus) {
		set $zerror = strStatus
		Goto exceptionProcINWEINV
	} else {
		do ..IncluirProdLocal($$$INWEINVItemNumber(obj),$$$INWEINVLocation(obj))
		//do ^VARIncluirProdLocal($$$INWEINVItemNumber(obj),$$$INWEINVLocation(obj))
	}
	
	if (..#DEBUG) {
		do ..print(..lineBreak_"key="_key_", obj="_obj)
	}
	else {
		set strStatus = $$$Save("INWEINV", key, obj, $$$YES)
		set ^CacheTempINWEINV($zn,$i(^CacheTempINWEINV)) = strStatus_"^"_key_"^"_obj
		set ^CacheTempFelipe($zn,key,$i(^CacheTempFelipe),"7") = strStatus_"^"_key_"^"_obj
	}
	
	// Feito via set pois não tem indice
	if ($$$ISOK(strStatus)) {
		set ^CacheTempFelipe($zn,$i(^CacheTempFelipe),"8") = stocktackNumber_"^"_LineNumber
		set ^INWEINVCount(YM,stocktackNumber,LineNumber,1,1) = $$$INWEINVActualQuantity(obj)_Y_$horolog
		set ^CacheTempINWEINV($zn,$i(^CacheTempINWEINV),"COUNT") = strStatus_"^"_stocktackNumber_"^"_LineNumber
	}

finallyProcINWEINV
	quit strStatus

exceptionProcINWEINV
 	set $ztrap = ""
	set strStatus = $$$CUSTOMERROR($zerror)

	goto finallyProcINWEINV
]]></Implementation>
</Method>

<Method name="ValidateRegister">
<Description><![CDATA[
Valida a consistência do registro INWEINV]]></Description>
<FormalSpec>obj:%String,pIntReg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	New status, codProd, strErro, count, avgCost, itemGroup, groupStatus, locCode, stockLocCode
	
	Set status 			= 1
	Set codProd 		= $$$INWEINVItemNumber(obj)
	Set locCode 		= $$$INWEINVLocation(obj)
	Set stockLocCode	= $$$INWEINVStockLocation(obj)
	Set codLote			= $$$INWEINVLotNo(obj)
	Set brandCode		= $$$INWEINVBrand(obj)
	Set strErro			= "Linha: "_ pIntReg _", Produto: " _ codProd _ ", Lote: " _ codLote
	
	// Valida se o produto existe
	Set count = 0
	&SQL(SELECT COUNT(*) INTO :count FROM SQLUser.INART WHERE ItemNumber LIKE :codProd)
	If (count = 0) {
		Set status = 0
		Set strErro = strErro _ "~Não existe na tabela INART."
	}
	
	// Valida se o produto tem custo médio
	Set avgCost = 0
	/*&SQL(SELECT AverageCost INTO :avgCost FROM SQLUser.INART WHERE ItemNumber = :codProd)
	If (avgCost = "") {
		Set status = 0
		Set strErro = strErro _ "~Produto sem custo médio."
	}*/
	
	// Valida se o grupo do produto está ativo
	/*Set groupStatus = 0
	&SQL(
		SELECT DISTINCT InItemGroup.Active1, InItemGroup.Code INTO :groupStatus, :itemGroup
		FROM SQLUser.INART INART
		INNER JOIN SQLUser.InItemGroup InItemGroup
		ON INART.Company = InItemGroup.Company 
		AND INART.ItemGroup = InItemGroup.ID1
		AND INART.ItemNumber = :codProd)
	If (groupStatus '= 1) {
		Set status = 0
		Set strErro = strErro _ "~Grupo " _ itemGroup _ " está inativo ou não existe"
	}*/
	
	// Valida se o endereço de armazenagem existe
	Set count = 0
	&SQL(SELECT COUNT(*) INTO :count FROM SQLUser.INLP WHERE LocationName = :locCode AND StockLocation LIKE :stockLocCode)
	If (count = 0) {
		Set status = 0
		Set strErro = strErro _ "~O endereço de armazenagem " _ stockLocCode _ " no local " _ locCode _ " não existe"
	}
	
	// Valida se a marca do produto existe
	If (brandCode '= "") {
		&SQL(SELECT COUNT(*) INTO :count FROM SQLUser.INBrand WHERE ID1 = :brandCode)
		If (count = 0) {
			Set status = 0
			Set strErro = strErro _ "~A marca " _ brandCode _ " não existe."
		}
	}
	
	If ('status) {
		Set ^CacheTempImportErrors("MARKANTI","VAR.data.import.INWEINVImporter","ErroValidacao",pIntReg) = strErro
	}
	
	Quit status
]]></Implementation>
</Method>

<Method name="finalize">
<Implementation><![CDATA[
	
	$$$VAR
	do ReIndex^COMIndex("INWEINVP")
	do ReIndex^COMIndex("INWEINVPLine")
	do ReIndex^COMIndex("INWEINV")
]]></Implementation>
</Method>
<Query name="ObtemIDINWEINV">
<Type>%SQLQuery</Type>
<FormalSpec>pItem:%String,pINWEINV:%String,pLocation:%String,pStorage:%String,pLot:%String="",pValidade:%String=""</FormalSpec>
<SqlQuery>	SELECT TOP 1 DateOfStocktaking, StocktakingCountingNumber
	FROM SQLUser.INWEINV
	WHERE DateOfStocktaking = :pINWEINV
	AND ItemNumber = :pItem
	AND Location = :pLocation
	AND (NVL(LotNo,'') = '' OR LotNo = :pLot)
	AND (NVL(ExpiryDate,'') = '' OR ExpiryDate = :pValidade)</SqlQuery>
</Query>


<Method name="IncluirProdLocal">
<FormalSpec>pCodProduto,pCodLocal</FormalSpec>
<Implementation><![CDATA[
	New YKEY,YFELD,YFORM,listStatus
	// Exemplo de uso, para autorizar o produto 200822 no local 100601:
	//  do ^VARIncluirProdLocal(200822,100601)
 
	$$$VAR
	// Chaves:
	set YKEY=pCodLocal_","_pCodProduto
 
	// Campos de dados:
	set $p(YFELD,"~",117)=""
	set $p(YFELD,"~",2)=1 // Status = 1 - Active
	set $p(YFELD,"~",1)=1 // DRP Run ID = 1 - SES	
	
	// Dados que simulam o uso da tela INDRPITEM:
	set YFORM = "INDRPITEM"
	set $PIECE(^WWWDATEN(YM,+$HOROLOG,YUSER,YFORM,"D",2),"~",88) = $PIECE(YFELD,"~",88) // (88) Estoque Conferido Em 
	set $PIECE(^WWWDATEN(YM,+$HOROLOG,YUSER,YFORM,"M",1),"~",90) = 1 // 90 Copiar Dados do Cadastro de Itens  
 
	// Salvando:
	set listStatus = $$$Save("INDRPITEM",YKEY,YFELD,1)
	do ^INDRPITEM
]]></Implementation>
</Method>
</Class>
</Export>