<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.CSP.FATTabelaComercial">
<ClassType/>
<IncludeCode>VARConst,INConst,FATConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page</Super>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	$$$VAR
	#dim %request as %CSP.Request
	#dim %response as %CSP.Response
	quit:$$$ISERR(..validaSessao(1)) %response
	do ..ajustaTabelaComercial()
	set job = %session.SessionId
	set method = $get(%request.Data("method",1))
	Xecute "do .."_method_"()"
	Quit $$$OK]]></Implementation>
</Method>

<Method name="ajustaTabelaComercial">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	;
	set ajustado=0
	set codTabela = ""
	for {
		set codTabela = $order(^FATTabelaComercial(0,codTabela)) quit:codTabela=""
		if $piece(^FATTabelaComercial(0,codTabela,1),"~",8)'="" set ajustado=1 quit
	}
	if ajustado quit 0
	tstart
	kill temporaria
	set codAcordo=""
	for {
		set codAcordo = $order(^FATRegrasFatItem(0,codAcordo)) quit:codAcordo=""
		set codConvenio=""
		for {
			set codConvenio = $order(^FATRegrasFatItem(0,codAcordo,codConvenio)) quit:codConvenio=""
			set codTabela=""
			for {
				set codTabela = $order(^FATRegrasFatItem(0,codAcordo,codConvenio,codTabela)) quit:codTabela=""
				set codItem=""
				for {
					set codItem = $order(^FATRegrasFatItem(0,codAcordo,codConvenio,codTabela,codItem)) quit:codItem=""
					set objItem = $get(^FATTabelaComercialItem(0,codTabela,codItem,1))
					set novoCodigo = $piece(objItem,"~",1)
					merge temporaria(0,codAcordo,codConvenio,codTabela,novoCodigo) = ^FATRegrasFatItem(0,codAcordo,codConvenio,codTabela,codItem)
					kill ^FATRegrasFatItem(0,codAcordo,codConvenio,codTabela,codItem)
				}
			}
		}
	}
	merge ^FATRegrasFatItem = temporaria
	kill temporaria
	;	
	set codAcordo=""
	for {
		set codAcordo = $order(^FATAcordoComercialRegraItem(0,codAcordo)) quit:codAcordo=""
		set codConvenio=""
		for {
			set codConvenio = $order(^FATAcordoComercialRegraItem(0,codAcordo,codConvenio)) quit:codConvenio=""
			set codTabela=""
			for {
				set codTabela = $order(^FATAcordoComercialRegraItem(0,codAcordo,codConvenio,codTabela)) quit:codTabela=""
				set codItem=""
				for {
					set codItem = $order(^FATAcordoComercialRegraItem(0,codAcordo,codConvenio,codTabela,codItem)) quit:codItem=""
					set objItem = $get(^FATTabelaComercialItem(0,codTabela,codItem,1))
					set novoCodigo = $piece(objItem,"~",1)
					merge temporaria(0,codAcordo,codConvenio,codTabela,novoCodigo) = ^FATAcordoComercialRegraItem(0,codAcordo,codConvenio,codTabela,codItem)
					kill ^FATAcordoComercialRegraItem(0,codAcordo,codConvenio,codTabela,codItem)
				}
			}
		}
	}
	merge ^FATAcordoComercialRegraItem = temporaria
	kill temporaria
	set codTabela = ""
	for {
		set codTabela = $order(^FATTabelaComercialItem(0,codTabela)) quit:codTabela=""
		set $piece(^FATTabelaComercial(0,codTabela,1),"~",8)=1
		set sequencia = ""
		for {
			set sequencia = $order(^FATTabelaComercialItem(0,codTabela,sequencia)) quit:sequencia=""
			set objItem = $get(^FATTabelaComercialItem(0,codTabela,sequencia,1))
			set novoCodigo = $ZCVT($piece(objItem,"~",1),"U")
			set temporaria(0,codTabela,1,novoCodigo,1) = ^FATTabelaComercialItem(0,codTabela,sequencia,1)
			kill ^FATTabelaComercialItem(0,codTabela,sequencia,1)
			
		}
	}
	kill ^FATTabelaComercialItem
	merge ^FATTabelaComercialItem = temporaria
	TCOMMIT
	quit 1]]></Implementation>
</Method>

<Method name="getOrganizacao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codOrganizacao = $get(%request.Data("codOrganizacao",1))
	set select = "select CodigodaOrganizacao,Nome from  FATOrganizacao where Company=0 and OrganizacaoPai is null "
	if codOrganizacao'="" set select = select_" and CodigodaOrganizacao <> '"_codOrganizacao_"' "
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodigodaOrganizacao")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("Nome")
		set linha.nivel		= 0
		do retorno.%Push(linha)
		do ..buscaFilhos(linha.codigo,codOrganizacao,1,.retorno)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="getVersaoTabela">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set vetor = []
	set versao = ""
	for {
		set versao = $order(^mtemp.FATTabelaComercialPorImportacao(0,job,"item",versao)) quit:versao=""
		set linha = {}
		set linha.codigo = +versao
		set linha.descricao = "VersÃ£o "_versao
		do vetor.%Push(linha)
	}
	write vetor.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="recUltimaVersao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	quit $order(^mtemp.FATTabelaComercialPorImportacao(0,%session.SessionId,"item",""),-1)]]></Implementation>
</Method>

<Method name="buscaFilhos">
<ClassMethod>1</ClassMethod>
<FormalSpec>codigoPai,codOrganizacaoAtual,nivel,&amp;retorno</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set nivel = nivel + 1
	set select = "select CodigodaOrganizacao,Nome from  FATOrganizacao where Company=0 and OrganizacaoPai = '"_codigoPai_"' "
	if codOrganizacaoAtual'="" set select = select_" and CodigodaOrganizacao <> '"_codOrganizacaoAtual_"' "
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo 	= rs.%Get("CodigodaOrganizacao")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("Nome")
		set linha.nivel		= nivel
		do retorno.%Push(linha)
		do ..buscaFilhos(linha.codigo,codOrganizacaoAtual,nivel,.retorno)
	}
	quit $$$OK]]></Implementation>
</Method>

<Method name="getINART">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set filter = $get(%request.Data("filter",1))
	set take = $get(%request.Data("take",1))
	set skip = $get(%request.Data("skip",1))
	set searchValue = $get(%request.Data("searchValue",1))
	;
	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200
	set select = "Select ItemNumber codigo,SearchName descricao, DescItemPedido, HoldReason from INART where company = 0"
	if searchValue'="" set select = select_" and (%upper($$SQLGetTextoSemAcento^VARSQL(ItemNumber)) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')) or %upper($$SQLGetTextoSemAcento^VARSQL(SearchName)) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')) or %upper($$SQLGetTextoSemAcento^VARSQL(DescItemPedido)) like %upper($$SQLGetTextoSemAcento^VARSQL('%"_searchValue_"%')))"
	if (filter '= "") {
		If ($Length(filter,"[")>2) {
			Set filter = [].%FromJSON(filter)
			If (filter '= "" && (filter.%Size() > 0)) {
				set select = select_" And ItemNumber In ("
				For i = 0 : 1 : (filter.%Size()-1) {
					Set xx = filter.%Get(i)
					If ($ZConvert(xx,"U") '= "OR") {
						set select = select_$Select(i = 0: "",1:", ")_"'"_xx.%Get(2)_"' "
					}
				}
				set select = select_")"
			}
		}Else{
				Set filter = [].%FromJSON(filter)
				set select = select _ " And ItemNumber In ('"_filter.%Get(2)_"')"
		}
	}
	set meuSelect="select * from ("
	set meuSelect=meuSelect_"select top "_top_" *,count(*) totalCount "
	set meuSelect=meuSelect_" from ("_select_") order by descricao"
	set meuSelect=meuSelect_")"
	if take>0 set meuSelect=meuSelect_" where %VID between "_skip_" and "_take
	set ^zzsilmar = meuSelect	
	set rs = ##class(%SQL.Statement).%ExecDirect("",meuSelect)
	set retorno = []
	set totalCount = 0
	while(rs.%Next()){
		set codigo		= rs.%Get("codigo")
		set descricao	= $Select(rs.%Get("DescItemPedido")="":rs.%Get("descricao"),1:rs.%Get("DescItemPedido"))
		set linha = {}
		set linha.codigo = codigo
		set linha.descricao = "("_codigo_") "_descricao_$Select(rs.%Get("HoldReason")=1:" (Inativo)",1:"")
		set linha.status = rs.%Get("HoldReason")
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="getCategoria">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	;set codigo = $get(%request.Data("codigo",1))
	set retorno = []
	set codigo = ""
	for {
		set codigo = $order(^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria",codigo)) quit:codigo=""
		set objCategoria = $get(^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria",codigo,1))
		set descricao = $$$FATTabelaComercialCategoriaDescricao(objCategoria)
		set linha = {}
		set linha.codigo = codigo
		set linha.descricao = "("_codigo_") "_descricao
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="getINPARA">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set chave = $get(%request.Data("chave",1))
	set showKey = $get(%request.Data("showKey",1))
	set retorno = []
	set codigo=""
	for{
		set codigo 	= $order(^INPARA(0,chave,"PT",codigo)) quit:codigo=""
		set obj 	= $get(^INPARA(0,chave,"PT",codigo,1)) 
		set linha = {}
		set linha.codigo = codigo
		set linha.descricao = $select(showKey:"("_codigo_") ",1:"")_$$$INPARAText(obj)
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="pesquisaTabelas">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	set filter = $get(%request.Data("filter",1))
	set codigo = $get(%request.Data("codigo",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	Set sort 	= $Get(%request.Data("sort",1))
	Set searchValue = $Get(%request.Data("searchValue",1))
	;
	set sort = $tr(sort,"""{[]}","")
	set campoSort = $REPLACE($piece($piece(sort,",",1),":",2),"""","")
	set campoSortDesc = $select($piece($piece(sort,",",2),":",2)="false":"DESC",1:"ASC")
	set orderBy = ""
	
	if campoSort'="" set orderBy = "order by "_campoSort_" "_campoSortDesc
	
	set filter = $tr(filter,"""{[]}","")
	set campo = "",operacao = "",wherefilter="",proximacomb="",andant="",abrep=0
	for i=1:1:$length(filter,","){
		set ret = $piece(filter,",",i)
		if ret="" continue
		if proximacomb=1{
			if andant=1,ret="and" set wherefilter = wherefilter_" ) ",abrep=0
			if wherefilter'="" set wherefilter = wherefilter_" "_ret_" "
			set andant = ""
			if ret="and" set wherefilter = wherefilter_" ( ",andant = 1,abrep=1
			set proximacomb = ""
			continue
		}
		if campo="" {
			if ret = "and" continue
			set campo = ret continue
		}
		if operacao="" {
			if ret = "contains" set operacao = " like ",inicio="%",fim="%"
			if ret = "notcontains" set operacao = " not like ",inicio="%",fim="%"
			if ret = "startswith" set operacao = " like ",inicio="",fim="%"
			if ret = "endswith" set operacao = " like ",inicio="%",fim=""
			if ret = "=" set operacao = " = ",inicio="",fim=""
			if ret = "<>" set operacao = " <> ",inicio="",fim=""
			continue
		}
		set ret = $replace(ret," ","")
		set wherefilter = wherefilter_"%upper("_campo_")"_operacao_"%upper('"_inicio_ret_fim_"')"
		set campo="",operacao="",proximacomb=1
	}
	if wherefilter'="" {
		if abrep=1 set wherefilter = wherefilter_")"
	}
	;
	set contador = 0
	set select1 = "select CodigodaTabela,Nome,Descricao,"
	set select1 = select1_" $$SQLGetUserParamDesc^VARSQL('TIPOSTABELACOMERCIAL~'||tipodetabela) tipoTabela, "
	set select1 = select1_" '('||unidademonetaria||') '||$$SQLGetUserParamDesc^VARSQL('UNIDMONETARIATABELACOMERCIAL~'||unidademonetaria) unidadeMonetaria, "
	set select1 = select1_" CasasDecimais, "
	set select1 = select1_" Case when Ativo=1 then 'Ativo' else 'Inativo' end Ativo"
	set select1 = select1_" from  FATTabelaComercial"
	set select1 = select1_" where Company=0 "
	if codigo '= "" set select1 = select1_" and CodigodaTabela = '"_codigo_"' "
	;
	if wherefilter'="" set wherefilter = "where "_wherefilter
	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200
	set meuSelect="select * from ("
	set meuSelect=meuSelect_"select top "_top_" *,count(*) totalCount "
	set meuSelect=meuSelect_" from ("_select1_") "_wherefilter_" "_orderBy
	set meuSelect=meuSelect_")"
	if take>0 set meuSelect=meuSelect_" where %VID between "_skip_" and "_take
	set rs = ##class(%SQL.Statement).%ExecDirect("",meuSelect)
	set array = []
	set totalCount = 0
	while(rs.%Next()){
		set CodigodaTabela		= rs.%Get("CodigodaTabela")
		set Nome				= rs.%Get("Nome")
		set Descricao			= rs.%Get("Descricao")
		set Ativo				= rs.%Get("Ativo")
		set tipoTabela			= rs.%Get("tipoTabela")
		set unidadeMonetaria	= rs.%Get("unidadeMonetaria")
		set CasasDecimais		= rs.%Get("CasasDecimais")
		set totalCount			= rs.%Get("totalCount")
		set linha = {}
		set linha.CodigodaTabela		= CodigodaTabela
		set linha.Nome 					= Nome
		set linha.Descricao				= Descricao
		set linha.Ativo 				= Ativo
		set linha.tipoTabela 			= tipoTabela
		set linha.unidadeMonetaria 		= unidadeMonetaria
		set linha.casasDecimais 		= CasasDecimais
		do array.%Push(linha)
	}
	set retorno = {}
	set retorno.data = array
	set retorno.totalCount = totalCount
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="pesquisaCadastros">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	set tabela = $get(%request.Data("tabela",1))
	set filter = $get(%request.Data("filter",1))
	set codigo = $get(%request.Data("codigo",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	Set sort 	= $Get(%request.Data("sort",1))
	Set searchValue = $Get(%request.Data("searchValue",1))
	;
	set sort = $tr(sort,"""{[]}","")
	set campoSort = $REPLACE($piece($piece(sort,",",1),":",2),"""","")
	set campoSortDesc = $select($piece($piece(sort,",",2),":",2)="false":"DESC",1:"ASC")
	set orderBy = ""
	
	if campoSort'="" set orderBy = "order by "_campoSort_" "_campoSortDesc
	
	set filter = $tr(filter,"""{[]}","")
	set campo = "",operacao = "",wherefilter="",proximacomb="",andant="",abrep=0
	for i=1:1:$length(filter,","){
		set ret = $piece(filter,",",i)
		if ret="" continue
		if proximacomb=1{
			if andant=1,ret="and" set wherefilter = wherefilter_" ) ",abrep=0
			if wherefilter'="" set wherefilter = wherefilter_" "_ret_" "
			set andant = ""
			if ret="and" set wherefilter = wherefilter_" ( ",andant = 1,abrep=1
			set proximacomb = ""
			continue
		}
		if campo="" {
			if ret = "and" continue
			set campo = ret continue
		}
		if operacao="" {
			if ret = "contains" set operacao = " like ",inicio="%",fim="%"
			if ret = "notcontains" set operacao = " not like ",inicio="%",fim="%"
			if ret = "startswith" set operacao = " like ",inicio="",fim="%"
			if ret = "endswith" set operacao = " like ",inicio="%",fim=""
			if ret = "=" set operacao = " = ",inicio="",fim=""
			if ret = "<>" set operacao = " <> ",inicio="",fim=""
			continue
		}
		set ret = $replace(ret," ","")
		set wherefilter = wherefilter_"%upper("_campo_")"_operacao_"%upper('"_inicio_ret_fim_"')"
		set campo="",operacao="",proximacomb=1
	}
	if wherefilter'="" {
		if abrep=1 set wherefilter = wherefilter_")"
	}
	;
	set contador = 0
	set select1 = "select CodigodaTabela,Nome,Descricao,"
	set select1 = select1_" $$SQLGetUserParamDesc^VARSQL('TIPOSTABELACOMERCIAL~'||tipodetabela) tipoTabela, "
	set select1 = select1_" '('||unidademonetaria||') '||$$SQLGetUserParamDesc^VARSQL('UNIDMONETARIATABELACOMERCIAL~'||unidademonetaria) unidadeMonetaria, "
	set select1 = select1_" CasasDecimais, "
	set select1 = select1_" Case when Ativo=1 then 'Ativo' else 'Inativo' end Ativo"
	set select1 = select1_" from  FATTabelaComercial"
	set select1 = select1_" where Company=0 "
	if codigo '= "" set select1 = select1_" and CodigodaTabela = '"_codigo_"' "
	;
	if wherefilter'="" set wherefilter = "where "_wherefilter
	set take = skip + take
	set skip = skip + 1
	set top = take
	if top<=0 set top = 200
	set meuSelect="select * from ("
	set meuSelect=meuSelect_"select top "_top_" *,count(*) totalCount "
	set meuSelect=meuSelect_" from ("_select1_") "_wherefilter_" "_orderBy
	set meuSelect=meuSelect_")"
	if take>0 set meuSelect=meuSelect_" where %VID between "_skip_" and "_take
	set rs = ##class(%SQL.Statement).%ExecDirect("",meuSelect)
	set array = []
	set totalCount = 0
	while(rs.%Next()){
		set CodigodaTabela		= rs.%Get("CodigodaTabela")
		set Nome				= rs.%Get("Nome")
		set Descricao			= rs.%Get("Descricao")
		set Ativo				= rs.%Get("Ativo")
		set tipoTabela			= rs.%Get("tipoTabela")
		set unidadeMonetaria	= rs.%Get("unidadeMonetaria")
		set CasasDecimais		= rs.%Get("CasasDecimais")
		set totalCount			= rs.%Get("totalCount")
		set linha = {}
		set linha.CodigodaTabela		= CodigodaTabela
		set linha.Nome 					= Nome
		set linha.Descricao				= Descricao
		set linha.Ativo 				= Ativo
		set linha.tipoTabela 			= tipoTabela
		set linha.unidadeMonetaria 		= unidadeMonetaria
		set linha.casasDecimais 		= CasasDecimais
		do array.%Push(linha)
	}
	set retorno = {}
	set retorno.data = array
	set retorno.totalCount = totalCount
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="recTabela">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(VAR.CSP.FATRegraComercial).aplicaRegrasVigencia()
	set codigo = $get(%request.Data("codigo",1))
	kill ^mtemp.FATTabelaComercialPorImportacao(0,job)
	kill ^mtemp.Validade(job)
	set formGeral = {}
	set formTabela = {}
	set formControle = {}
	set formGeral.situacao		= 1
	set formGeral.xClienteTabela = ""
	set formTabela.unidadeMonetaria = "R$"
	if codigo'=""{
		set objTabelaComercial		= $get(^FATTabelaComercial(YM,codigo,1))
		set formGeral.nome			= $$$FATTabelaComercialNome(objTabelaComercial)
		set formGeral.descricao 	= $$$FATTabelaComercialDescricao(objTabelaComercial)
		set formGeral.situacao		= +$$$FATTabelaComercialAtivo(objTabelaComercial)
		set formGeral.xClienteTabela = $$$FATTabelaComercialClientedaTabela(objTabelaComercial)
		;
		set formTabela.tipoTabela	= $$$FATTabelaComercialTipodeTabela(objTabelaComercial)
		set formTabela.unidadeMonetaria = $$$FATTabelaComercialUnidadeMonetaria(objTabelaComercial)
		set formTabela.casasDecimais	= $$$FATTabelaComercialCasasDecimais(objTabelaComercial)
		set formTabela.versaoTabela		= +$$$FATTabelaComercialVersaoAtualdaTabeladeIten(objTabelaComercial)
		set ^mtemp.Validade(job) = formTabela.versaoTabela
		;
		set formControle.criadoEm				= $$$FATTabelaComercialCriadoEm(objTabelaComercial)
		set formControle.criadoPor				= $$$FATTabelaComercialCriadoPor(objTabelaComercial)
		set formControle.alteradoEm				= $$$FATTabelaComercialAlteradoEm(objTabelaComercial)
		set formControle.alteradoPor			= $$$FATTabelaComercialAlteradoPor(objTabelaComercial)
		;
		if formControle.criadoEm'="" set formControle.criadoEm = $zdatetime(formControle.criadoEm,4)
		if formControle.alteradoEm'="" set formControle.alteradoEm = $zdatetime(formControle.alteradoEm,4)
		;
		; Recupera itens da tabela comercial
		merge ^mtemp.FATTabelaComercialPorImportacao(0,job,"item") = ^FATTabelaComercialItem(0,codigo)
		merge ^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria") = ^FATTabelaComercialCategoria(0,codigo)
		;
		set VigenciaAplicada = 0
		set versao=""
		for {
			set versao = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codigo,versao)) quit:versao=""
			set datai = ""
			for {
				set datai = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codigo,versao,datai)) quit:datai=""
				set horai = ""
				for {
					set horai = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codigo,versao,datai,horai)) quit:horai=""
					set dataf = ""
					for {
						set dataf = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codigo,versao,datai,horai,dataf)) quit:dataf=""
						set horaf = ""
						for {
							set horaf = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codigo,versao,datai,horai,dataf,horaf)) quit:horaf=""
							set ^mtemp.Validade(job,versao) = $select(datai=0:"",1:datai_","_horai)_"~"_$select(dataf=0:"",1:dataf_","_horaf)
						}
					}
				}
			}
		}
	}
	set retorno = {}
	set retorno.formGeral 		= formGeral
	set retorno.formTabela 		= formTabela
	set retorno.formControle 	= formControle
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="limpaTemporaria">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	kill ^mtemp.FATTabelaComercialPorImportacao(0,job,"item")
	write 1
	quit]]></Implementation>
</Method>

<Method name="getTabelas">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codTabela = $get(%request.Data("codTabela",1))
	set select = "select CodigodaTabela,Nome,VersaoAtualdaTabeladeIten from  FATTabelaComercial where Company=0 "
	set retorno = []
	set rs = ##class(%SQL.Statement).%ExecDirect("",select)
	while(rs.%Next()){
		set linha={}
		set linha.codigo = rs.%Get("CodigodaTabela")
		set linha.descricao = "("_linha.codigo_") "_rs.%Get("Nome")_" (versÃ£o "_rs.%Get("VersaoAtualdaTabeladeIten")_")"
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="salvar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codTabela		= $get(%request.Data("codTabela",1))
	set camposGeral		= $get(%request.Data("camposGeral",1))
	set camposTabela	= $get(%request.Data("camposTabela",1))
	set strStatus 		= $$$OK
	tstart
	try{
		set camposGeral		= [].%FromJSON(camposGeral)
		set camposTabela	= [].%FromJSON(camposTabela)
		;
		set nome 			= $zconvert(camposGeral.nome,"U")
		set nome 			= $zstrip(nome,"<>w")
		if '$data(^WWW128(0,"FATTabelaComercial")){
			set obj = "TC000000000"
			set strStatus = $$$Save("WWW128","FATTabelaComercial",obj,$$$YES)
			quit:$$$ISERR(strStatus)
		}		
		if codTabela="" set codTabela = $$GetNextNumber^COMUtils("FATTabelaComercial","")
		;
		if camposGeral.situacao{
			set rs = ##class(%SQL.Statement).%ExecDirect("","Select CodigodaTabela from FATTabelaComercial where company=0 and Ativo=1 and %upper(Nome) = %upper('"_nome_"') and CodigodaTabela <> '"_codTabela_"'")
			while(rs.%Next()){
				set strStatus = "A tabela comercial de cÃ³digo '"_rs.%Get("CodigodaTabela")_"' possuÃ­ o mesmo nome!"
			}
		}
		quit:$$$ISERR(strStatus)
		;
		if camposGeral.tipoTabela=1{
			set camposGeral.unidadeMonetaria = ""
			set camposGeral.casasDecimais = ""
		}
		;
		set objTabelaComercial = $get(^FATTabelaComercial(YM,codTabela,1))
		set $$$FATTabelaComercialNome(objTabelaComercial)				= nome
		set $$$FATTabelaComercialDescricao(objTabelaComercial)			= camposGeral.descricao
		set $$$FATTabelaComercialAtivo(objTabelaComercial)				= camposGeral.situacao
		Set xClienteTabela = ""
		if (camposGeral.clienteTabela '= "") {
			For i = 1 : 1 : camposGeral.clienteTabela.%Size() {
				Set xClienteTabela = xClienteTabela_$Select(xClienteTabela="":"",1:";")_camposGeral.clienteTabela.%Get(i-1)
			}
		}
		set $$$FATTabelaComercialClientedaTabela(objTabelaComercial)	= xClienteTabela
		;
		set $$$FATTabelaComercialTipodeTabela(objTabelaComercial)		= camposTabela.tipoTabela
		set $$$FATTabelaComercialUnidadeMonetaria(objTabelaComercial)	= camposTabela.unidadeMonetaria
		set $$$FATTabelaComercialCasasDecimais(objTabelaComercial)		= camposTabela.casasDecimais
		;
		set $$$FATTabelaComercialVersaoAtualdaTabeladeIten(objTabelaComercial) = $order(^mtemp.FATTabelaComercialPorImportacao(0,job,"item",""),-1)
		;
		set strStatus = $$$Save("FATTabelaComercial",codTabela,objTabelaComercial,$$$YES)
		quit:$$$ISERR(strStatus)
		;
		; Importa arquivos da planilha
		kill vetor
		set versao = ""
		for {
			set versao = $order(^mtemp.FATTabelaComercialPorImportacao(0,job,"item",versao)) quit:versao=""
			set codigo = ""
			for {
				set codigo = $order(^mtemp.FATTabelaComercialPorImportacao(0,job,"item",versao,codigo)) quit:codigo=""
				set obj = ^mtemp.FATTabelaComercialPorImportacao(0,job,"item",versao,codigo,1)
				set strStatus = $$$Save("FATTabelaComercialItem",codTabela_","_versao_","_codigo,obj,$$$YES)
				quit:$$$ISERR(strStatus)
				set vetor(versao,codigo)=""
			}
		}
		; Remove linhas removidas da planilha
		set versao = ""
		for {
			set versao = $order(^FATTabelaComercialItem(0,codTabela,versao)) quit:versao=""
			set codigo = ""
			for {
				set codigo = $order(^FATTabelaComercialItem(0,codTabela,versao,codigo)) quit:codigo=""
				if $data(vetor(versao,codigo)) continue
				set strStatus = $$$Kill("FATTabelaComercialItem",codTabela_","_versao_","_codigo)
				quit:$$$ISERR(strStatus)
			}
		}
		;
		; Importa arquivos da planilha
		kill vetor
		set codigo = ""
		for {
			set codigo = $order(^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria",codigo)) quit:codigo=""
			set obj = ^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria",codigo,1)
			set strStatus = $$$Save("FATTabelaComercialCategoria",codTabela_","_codigo,obj,$$$YES)
			quit:$$$ISERR(strStatus)
			set vetor(codigo)=""
		}
		; Remove linhas removidas da planilha
		set codigo = ""
		for {
			set codigo = $order(^FATTabelaComercialCategoria(0,codTabela,codigo)) quit:codigo=""
			if $data(vetor(codigo)) continue
			set strStatus = $$$Kill("FATTabelaComercialCategoria",codTabela_","_codigo)
			quit:$$$ISERR(strStatus)
		}
		set strStatus = ..validaTabelaComercial(codTabela)
		;
		set (objTabelaComercial,objTabelaComercialOld) = $get(^FATTabelaComercial(YM,codTabela,1))
		if $$$ISOK(strStatus){
			set versao = ""
			for {
				set versao = $order(^mtemp.Validade(job,versao)) quit:versao=""
				set dataIni = $piece($get(^mtemp.Validade(job,versao)),"~",1)
				set dataFin = $piece($get(^mtemp.Validade(job,versao)),"~",2)
				;
				if (dataIni'="")||(dataFin'=""){
					set strStatus = ..criaVigencia(codTabela,dataIni,dataFin,versao,1)
				}else{
					set strStatus = ..removeVigencia(codTabela,versao)
				}
				quit:$$$ISERR(strStatus)
				;
				set situacao=1
				if dataIni'="",$replace(dataIni,",",".")>$replace($horolog,",",".") set situacao=0
				if dataFin'="",$replace(dataFin,",",".")<$replace($horolog,",",".") set situacao=0
				if situacao set $$$FATTabelaComercialVersaoAtualdaTabeladeIten(objTabelaComercial) = versao
				set versoes(situacao,versao)=situacao
			}
		}
		if $$$ISOK(strStatus){
			if '$data(versoes(1)){
				set ultVersao = ""
				for {
					set ultVersao = $order(^mtemp.FATTabelaComercialPorImportacao(0,job,"item",ultVersao),-1) quit:ultVersao=""
					if $data(versoes(0,ultVersao)) continue
					quit
				}
				if ultVersao="" set ultVersao = $order(^mtemp.FATTabelaComercialPorImportacao(0,job,"item",""),-1)
				set $$$FATTabelaComercialVersaoAtualdaTabeladeIten(objTabelaComercial) = ultVersao
			}
			if $$$FATTabelaComercialVersaoAtualdaTabeladeIten(objTabelaComercial)'=$$$FATTabelaComercialVersaoAtualdaTabeladeIten(objTabelaComercialOld){
				set ^FATTabelaComercialHist(0,codTabela,+$horolog,$piece($horolog,",",2),"Versao",1) = $$$FATTabelaComercialVersaoAtualdaTabeladeIten(objTabelaComercialOld)_"~"_$$$FATTabelaComercialVersaoAtualdaTabeladeIten(objTabelaComercial)
			}
			;
			set strStatus = $$$Save("FATTabelaComercial",codTabela,objTabelaComercial,$$$YES)
		}
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		If $tl tcommit
		set strStatus="Dados salvos com sucesso!"
		set retorno.status = 1
		do retorno.%Set("codTabela",codTabela,"String")
		set retorno.type = "success"
		set retorno.mensagem = strStatus
	}else{
		If $tl trollback
		set retorno.status = 0
		set retorno.type = "error"
		set retorno.mensagem = $$$Text(strStatus)
	}
	write retorno.%ToJSON()
	quit $$$OK]]></Implementation>
</Method>

<Method name="validaTabelaComercial">
<ClassMethod>1</ClassMethod>
<FormalSpec>codTabela</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set strStatus = $$$OK
	set codigo = ""
	for {
		set codigo = $order(^FATTabelaComercialCategoria(0,codTabela,codigo)) quit:codigo=""
		set obj = $get(^FATTabelaComercialCategoria(0,codTabela,codigo,1))
		set categoriaPai = $$$FATTabelaComercialCategoriaCategoriaPai(obj)
		if categoriaPai'="",'$data(^FATTabelaComercialCategoria(0,codTabela,categoriaPai)){
			set strStatus = "Categoria Pai "_categoriaPai_" nÃ£o cadastrado na aba 'Categoria da Tabela Comercial'"
		}
		quit:$$$ISERR(strStatus)
	}
	quit:$$$ISERR(strStatus) strStatus
	
	set versao = $order(^FATTabelaComercialItem(0,codTabela,""),-1)+1
	set codigoItem = ""
	for {
		set codigoItem = $order(^FATTabelaComercialItem(0,codTabela,versao,codigoItem)) quit:codigoItem=""
		set obj = $get(^FATTabelaComercialItem(0,codTabela,codigoItem,1))
		set categoria = $$$FATTabelaComercialItemCategoriadoItem(obj)
		if categoria=""{
			set strStatus = "Item "_codigo_" sem categoria cadastrada"
		}
		quit:$$$ISERR(strStatus)
		if categoria'="",'$data(^FATTabelaComercialCategoria(0,codTabela,categoria)){
			set strStatus = "Categoria do item "_codigoItem_" ("_categoria_") nÃ£o cadastrado na aba 'Categoria da Tabela Comercial'"
		}
		quit:$$$ISERR(strStatus)
	}
	quit strStatus]]></Implementation>
</Method>

<Method name="listTabelaComercial">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set versao	= +$get(%request.Data("versao",1))
	set retorno = []
	set codigoItem=""
	for {
		set codigoItem = $order(^mtemp.FATTabelaComercialPorImportacao(0,job,"item",versao,codigoItem)) quit:codigoItem=""
		set obj 	= $get(^mtemp.FATTabelaComercialPorImportacao(0,job,"item",versao,codigoItem,1))
		set linha = {}
		set linha.sequencia	= codigoItem
		set linha.codigo	= codigoItem
		set linha.descricao	= $piece(obj,"~",2)
		set linha.categoria	= $piece(obj,"~",3)
		set linha.categoriaExterno	= ..recDescricaoCategoria($piece(obj,"~",3))
		set linha.itensCobr	= $piece(obj,"~",4)
		set linha.itensCobrExterno	= ..recDescricaoINART($piece(obj,"~",4),1)
		set linha.valor		= $piece(obj,"~",5)
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="listTabelaCategorias">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set retorno = []
	set codigo=""
	for {
		set codigo = $order(^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria",codigo)) quit:codigo=""
		set obj 	= $get(^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria",codigo,1))
		set linha = {}
		set linha.codigo		= codigo
		set linha.descricao		= $piece(obj,"~",1)
		set linha.categoriaPai	= $piece(obj,"~",2)
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="recDescricaoINART">
<ClassMethod>1</ClassMethod>
<FormalSpec>codigo,p1=0</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set retorno = ""
	for i=1:1:$length(codigo,";"){
		set codigoInart = $piece(codigo,";",i)
		if codigoInart="" continue
		set objINART = $get(^INART(0,codigoInart,1))
		set status = $$$INARTHoldReason(objINART)
		set descricao = $Select($$$INARTDescItemPedido(objINART)="":$$$INARTSearchName(objINART),1:$$$INARTDescItemPedido(objINART))_$Select(status=1:" (Inativo)",1:"")
		if retorno'="" set retorno = retorno_", "
		if (p1 = 1) {
			set retorno = retorno_"<span style='"_$Select(status=1:"color:red;",1:"")_"'>("_codigoInart_") "_descricao_"</span>"
		}else{
			set retorno = retorno_"("_codigoInart_") "_descricao
		}
	}
	quit retorno]]></Implementation>
</Method>

<Method name="recDescricaoCategoria">
<ClassMethod>1</ClassMethod>
<FormalSpec>codigo</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set job = %session.SessionId
	set retorno = ""
	for i=1:1:$length(codigo,";"){
		set codigoCat = $piece(codigo,";",i)
		if codigoCat="" continue
		set objCategoria = $get(^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria",codigoCat,1))
		set descricao = $$$FATTabelaComercialCategoriaDescricao(objCategoria)
		if retorno'="" set retorno = retorno_", "
		set retorno = retorno_"("_codigoCat_") "_descricao
	}
	quit retorno]]></Implementation>
</Method>

<Method name="salvaTabelaComercial">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set dados	= $get(%request.Data("dados",1))
	set versao	= +$get(%request.Data("versao",1))
	set strStatus = $$$OK
	try{
		set dados = [].%FromJSON(dados)
		set obj = $get(^mtemp.FATTabelaComercialPorImportacao(0,job,"item",versao,dados.codigo,1))
		set $$$FATTabelaComercialItemDescricaodoItem(obj) = dados.descricao
		set $$$FATTabelaComercialItemCategoriadoItem(obj) = dados.categoria
		set $$$FATTabelaComercialItemItensCobraveis(obj) = dados.itensCobr
		set $$$FATTabelaComercialItemValordoItem(obj) = dados.valor
		set ^mtemp.FATTabelaComercialPorImportacao(0,job,"item",versao,dados.codigo,1) = obj
		S ^zzJULIO(0,job,"item",versao,dados.codigo,1) = obj
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		set retorno.status 	= 1
		set retorno.type 	= "success"
		set retorno.mensagem="Dados salvos com sucesso!"
	}else{
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()]]></Implementation>
</Method>

<Method name="removeTabelaComercial">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codigo	= $get(%request.Data("codigo",1))
	set versao	= +$get(%request.Data("versao",1))
	set strStatus = $$$OK
	try{
		kill ^mtemp.FATTabelaComercialPorImportacao(0,job,"item",versao,codigo,1)
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		set retorno.status 	= 1
		set retorno.type 	= "success"
		set retorno.mensagem="Dados salvos com sucesso!"
	}else{
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()]]></Implementation>
</Method>

<Method name="salvaTabelaCategorias">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codigoOld	= $get(%request.Data("codigoOld",1))
	set dados		= $get(%request.Data("dados",1))
	set strStatus = $$$OK
	try{
		set dados = [].%FromJSON(dados)
		set codigo = dados.codigo
		if codigoOld'="",codigoOld'=codigo kill ^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria",codigoOld)
		set obj = $get(^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria",codigo,1))
		set $$$FATTabelaComercialCategoriaDescricao(obj) 	= dados.descricao
		set $$$FATTabelaComercialCategoriaCategoriaPai(obj) = dados.categoriaPai
		set ^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria",codigo,1) = obj
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		set retorno.status 	= 1
		set retorno.type 	= "success"
		set retorno.mensagem="Dados salvos com sucesso!"
	}else{
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()]]></Implementation>
</Method>

<Method name="removeTabelaCategorias">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set codigo	= $get(%request.Data("codigo",1))
	set strStatus = $$$OK
	try{
		kill ^mtemp.FATTabelaComercialPorImportacao(0,job,"categoria",codigo,1)
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		set retorno.status 	= 1
		set retorno.type 	= "success"
		set retorno.mensagem="Dados salvos com sucesso!"
	}else{
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()]]></Implementation>
</Method>

<Method name="recIntervaloAtual">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set versao	= $get(%request.Data("versao",1))
	set obj = $get(^mtemp.Validade(job,versao))
	set dataDe = $piece(obj,"~",1)
	set dataAte = $piece(obj,"~",2)
	set validoDe = 0
	set validoAte = 0
	if dataDe'="" set validoDe = 1,dataDe = $zdatetime(dataDe,3,7)
	if dataAte'="" set validoAte = 1,dataAte = $zdatetime(dataAte,3,7)
	set retorno = {}
	set formData = {}
	set:dataDe'="" formData.dataDe = dataDe
	set:dataAte'="" formData.dataAte = dataAte
	set formData.validoDe = +validoDe
	set formData.validoAte = +validoAte
	set retorno.formData = formData
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="confirmaIntervalo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set campos		= $get(%request.Data("campos",1))
	set versao	= $get(%request.Data("versao",1))
	set strStatus = $$$OK
	tstart
	try{
		set campos 		= [].%FromJSON(campos)
		set validoDe 	= campos.validoDe
		set validoAte 	= campos.validoAte
		set dataDe 		= campos.dataDe
		set dataAte 	= campos.dataAte
		if validoDe = 1 {
			set dataDe = $zdatetimeh($piece(dataDe,"Z",1),3,7)
			set validoDe = dataDe
		}else{
			set validoDe = ""
		}
		if validoAte = 1 {
			set dataAte = $zdatetimeh($piece(dataAte,"Z",1),3,7)
			set validoAte = dataAte
		}else{
			set validoAte = ""
		}
		;
		set ^mtemp.Validade(job,versao) = validoDe_"~"_validoAte
		set msgRetorno = "",alert=0
		set inicial = $piece(^mtemp.Validade(job,versao),"~",1)
		set final = $piece(^mtemp.Validade(job,versao),"~",2)
		;
		if inicial'="" set msgRetorno = "A partir de "_$zdatetime(inicial,4)_" "
		if final'="" set msgRetorno = msgRetorno_"atÃ© "_$zdatetime(final,4),alert=1
		else  set msgRetorno = msgRetorno_"atÃ© sempre"
		if inicial=0,final=0 set msgRetorno = "Sempre"
		set ativo=0
		if inicial="" set ativo = 1
	}
	catch e {
		#dim e as %Exception.SystemException
		set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	set retorno = {}
	if strStatus=$$$OK{
		tcommit
		set retorno.status 	= 1
		set retorno.type 	= "info"
		set retorno.mensagem="Dados confirmados com sucesso!"
		set retorno.msgRetorno = "Ativo: "_msgRetorno
		set retorno.comValidade = alert
		set retorno.situacao = ativo
	}else{
		trollback
		set retorno.status = 0
		set retorno.type 	= "error"
		set retorno.mensagem = $$$Text(strStatus,1)
	}
	write retorno.%ToJSON()]]></Implementation>
</Method>

<Method name="criaVigencia">
<ClassMethod>1</ClassMethod>
<FormalSpec>codTabela,dataHoraInicial,dataHoraFinal,campo,valor</FormalSpec>
<Implementation><![CDATA[	set VigenciaAplicada=0
	set datai=""
	for {
		set datai = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codTabela,campo,datai)) quit:datai=""
		set horai = ""
		for {
			set horai = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codTabela,campo,datai,horai)) quit:horai=""
			set dataf=""
			for {
				set dataf = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codTabela,campo,datai,horai,dataf)) quit:dataf=""
				set horaf = ""
				for {
					set horaf = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codTabela,campo,datai,horai,dataf,horaf)) quit:horaf=""
					set strStatus = $$$Kill("FATTabelaComercialValidade",codTabela_","_campo_","_datai_","_horai_","_dataf_","_horaf)
					quit:$$$ISERR(strStatus)
				}
			}
		}
		quit:$$$ISERR(strStatus)
	}

	;
	if $$$ISOK(strStatus){
		;
		
		;
		set obj = ""
		set $$$FATTabelaComercialValidadeValordoCampoDuranteaVigen(obj) = valor
		set $$$FATTabelaComercialValidadeVigenciaAplicada(obj) = 0
		set dataIChave = 0,horaIChave = 0
		set dataFChave = 0,horaFChave = 0
		if $piece(dataHoraInicial,",",1)'="" set dataIChave = $piece(dataHoraInicial,",",1)
		if $piece(dataHoraInicial,",",2)'="" set horaIChave = $piece(dataHoraInicial,",",2)
		if $piece(dataHoraFinal,",",1)'="" set dataFChave = $piece(dataHoraFinal,",",1)
		if $piece(dataHoraFinal,",",2)'="" set horaFChave = $piece(dataHoraFinal,",",2)
		set strStatus = $$$Save("FATTabelaComercialValidade",codTabela_","_campo_","_dataIChave_","_horaIChave_","_dataFChave_","_horaFChave,obj,$$$YES)
	}
	quit strStatus]]></Implementation>
</Method>

<Method name="removeVigencia">
<ClassMethod>1</ClassMethod>
<FormalSpec>codTabela,versao</FormalSpec>
<Implementation><![CDATA[	set VigenciaAplicada = 0
	set datai = ""
	for {
		set datai = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codTabela,versao,datai)) quit:datai=""
		set horai = ""
		for {
			set horai = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codTabela,versao,datai,horai)) quit:horai=""
			set dataf = ""
			for {
				set dataf = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codTabela,versao,datai,horai,dataf)) quit:dataf=""
				set horaf = ""
				for {
					set horaf = $order(^FATTabelaComercialValidades(0,1,VigenciaAplicada,codTabela,versao,datai,horai,dataf,horaf)) quit:horaf=""
					set strStatus = $$$Kill("FATTabelaComercialValidade",codTabela_","_versao_","_datai_","_horai_","_dataf_","_horaf)
					quit:$$$ISERR(strStatus)
				}
			}
		}
		quit:$$$ISERR(strStatus)
	}
	quit strStatus]]></Implementation>
</Method>

<Method name="recTipIntervalo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set versao	= $get(%request.Data("versao",1))
	set retorno = {}
	set retorno.status = 1
	if $get(^mtemp.Validade(job)) = versao set retorno.situacao=1
	if $data(^mtemp.Validade(job,versao)){
		set msgRetorno = "",alert=0
		set inicial = $piece(^mtemp.Validade(job,versao),"~",1)
		set final = $piece(^mtemp.Validade(job,versao),"~",2)
		;
		if inicial'="" set msgRetorno = "A partir de "_$zdatetime(inicial,4)_" "
		if final'="" set msgRetorno = msgRetorno_"atÃ© "_$zdatetime(final,4),alert=1
		else  set msgRetorno = msgRetorno_"atÃ© sempre"
		if inicial=0,final=0 set msgRetorno = "Sempre"
		set ativo=0
		if inicial=""||($replace(inicial,",",".")<$replace($horolog,",",".")) set ativo = 1
		set retorno.msgRetorno = "Ativo: "_msgRetorno
		set retorno.comValidade = alert
		set retorno.situacao = ativo

	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="recuperaValidacoes">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set versao	= $get(%request.Data("versao",1))
	set retorno = []
	set primeiro = 1
	set dataInicialComp = $horolog
	set dataIni = ""
	for {
		set dataIni = $order(^mtemp.Validade(job,versao,dataIni)) quit:dataIni=""
		set horaIni = ""
		for {
			set horaIni = $order(^mtemp.Validade(job,versao,dataIni,horaIni)) quit:horaIni=""
			set dataFim = ""
			for {
				set dataFim = $order(^mtemp.Validade(job,versao,dataIni,horaIni,dataFim)) quit:dataFim=""
				set horaFim = ""
				for {
					set horaFim = $order(^mtemp.Validade(job,versao,dataIni,horaIni,dataFim,horaFim)) quit:horaFim=""
					set obj = $get(^mtemp.Validade(job,versao,dataIni,horaIni,dataFim,horaFim,1))
					set situacao = +$$$FATTabelaComercialValidadeValordoCampoDuranteaVigen(obj)
					;
					set inicial = "",final=""
					set $piece(inicial,",",1) = dataIni
					if horaIni'=0 set $piece(inicial,",",2) = horaIni
					set $piece(final,",",1) = dataFim
					if horaFim'=0 set $piece(final,",",2) = horaFim
					if inicial'=0{
						if $replace(inicial,",",".")>$replace(dataInicialComp,",","."){
							set dataFinal = $piece(inicial,",",1)
							set horaFinal = $piece(inicial,",",2)
							set horaFinal = horaFinal - 1
							if horaFinal<0 set horaFinal = 86399,dataFinal = dataFinal - 1
							set dataFinal = dataFinal_","_horaFinal
							set flPrimeiroDt = 0,situ = situacao
							if 'primeiro set flPrimeiroDt = dataInicialComp,situ = situacaoAnt
							set msgPeriodo = ..montaMensagemPeriodo(flPrimeiroDt,dataFinal)
							set linha = {}
							set linha.periodo = $select('situ=1:"Ativo",1:"Inativo")_" "_msgPeriodo
							set linha.auditoria = "SISTEMA"
							do retorno.%Push(linha)
						}
					}
					set primeiro=0
					;
					set criadoEm = $$$FATTabelaComercialValidadeCriadoEm(obj)
					set criadoPor = $$$FATTabelaComercialValidadeCriadoPor(obj)
					set alteradoEm = $$$FATTabelaComercialValidadeAlteradoEm(obj)
					set alteradoPor = $$$FATTabelaComercialValidadeAlteradoPor(obj)
					set auditoria = "Gravado por "_criadoPor_" em "_$zdatetime(criadoEm)
					if alteradoEm'="" set auditoria = "Gravado por "_alteradoPor_" em "_$zdatetime(alteradoEm)
					set msgPeriodo = ..montaMensagemPeriodo(inicial,final)
					set dataInicialComp = final,situacaoAnt=situacao
					set linha = {}
					set linha.periodo = $select(situacao=1:"Ativo",1:"Inativo")_" "_msgPeriodo
					set linha.auditoria = auditoria
					do retorno.%Push(linha)
					;
				}
			}
		}
	}
	if 'primeiro,final'=0{
		set dataInicial = $piece(final,",",1)
		set horaInicial = $piece(final,",",2)
		set horaInicial = horaInicial + 1
		if horaInicial>86399 set horaInicial = 0,dataInicial = dataInicial + 1
		set dataInicial = dataInicial_","_horaInicial
		set msgPeriodo = ..montaMensagemPeriodo(dataInicial,0)
		set linha = {}
		set linha.periodo = $select('situacao=1:"Ativo",1:"Inativo")_" "_msgPeriodo
		set linha.auditoria = "SISTEMA"
		do retorno.%Push(linha)
	}
	write retorno.%ToJSON()
	quit]]></Implementation>
</Method>

<Method name="montaMensagemPeriodo">
<ClassMethod>1</ClassMethod>
<FormalSpec>inicial,final</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	set msgRetorno = ""
	if inicial'=0 set msgRetorno = "de "_$zdatetime(inicial,4)_" "
	if final'=0 set msgRetorno = msgRetorno_"atÃ© "_$zdatetime(final,4)
	else  set msgRetorno = msgRetorno_"atÃ© sempre"
	if inicial=0,final=0 set msgRetorno = "para sempre"
	quit msgRetorno]]></Implementation>
</Method>

<Method name="validaSessao">
<ClassMethod>1</ClassMethod>
<FormalSpec>callMode=""</FormalSpec>
<Implementation><![CDATA[	set status = $$VerifySession^VARCSPUtils(YBED, YUSER)
	if status=0||(YBED="UNKNOWN"){
		set status=0
		set %response.Status="401 Unauthorized"
		set resp={}
		set resp.status=0
		set resp.mensagem="UsuÃ¡rio nÃ£o estÃ¡ logado ou a sessÃ£o expirou."
		write resp.%ToJSON()
	}elseif callMode=""{
		set resp={}
		set resp.status=1
		write resp.%ToJSON()
	}
	quit status]]></Implementation>
</Method>
</Class>
</Export>