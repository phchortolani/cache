<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.CSP.FATGlosa">
<ClassType/>
<IncludeCode>VARConst,INConst,FATConst,MEDConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page</Super>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	$$$VAR
	;
	Set:'$Data(^WWW128(0,"FATGlosa")) ^WWW128(0,"FATGlosa",1)="G0000000000~1~~"
	;
	#dim %request as %CSP.Request
	#dim %response as %CSP.Response
	Quit:$$$ISERR(..ValidaSessao(1)) %response
	Set job = %session.SessionId
	Set method = $Get(%request.Data("method",1))
	Xecute "do .."_method_"()"
	Quit $$$OK]]></Implementation>
</Method>

<Method name="ValidaSessao">
<ClassMethod>1</ClassMethod>
<FormalSpec>callMode=""</FormalSpec>
<Implementation><![CDATA[	Set status = $$VerifySession^VARCSPUtils(YBED, YUSER)
	If status=0||(YBED="UNKNOWN"){
		Set status=0
		Set %response.Status="401 Unauthorized"
		Set resp={}
		Set resp.status=0
		Set resp.mensagem="Usuário não está logado ou a sessão expirou."
		Write resp.%ToJSON()
	}ElseIf callMode=""{
		Set resp={}
		Set resp.status=1
		Write resp.%ToJSON()
	}
	Return status]]></Implementation>
</Method>

<Method name="GetLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0
	
	Set pTake 				= $Get(%request.Data("pTake",1))
	Set pSkip 				= $Get(%request.Data("pSkip",1))
	Set pCodLote			= $Get(%request.Data("pCodLote",1))
	Set pSearchValue 	= $Replace($Get(%request.Data("pSearchValue",1))," ","")
	Set pCodFontePag	= $Get(%request.Data("pCodFontePag",1))
	
	If (pTake = "") Set pTake = 20
	
	Set pTake = pTake + pSkip
	Set pSkip = pSkip + 1
		
	Set meuSQL = "Select Lote.CodigodoLote, Lote.DataInicial, Lote.DataFinal, Lote.Status "
	Set meuSQL = meuSQL _ "From SQLUser.FATLote As Lote, SQLUser.FATModeloLote As Modelo "
	Set meuSQL = meuSQL _ "Where  Lote.Company = 0 And Modelo.Company = 0 "
	Set meuSQL = meuSQL _ "And Lote.ModelodeLote = Modelo.CodigodoModelodeLote "
	Set meuSQL = meuSQL _ "And Lote.Status = 3 "
	If (pCodLote '= "") {
		Set meuSQL = meuSQL _ "And Lote.CodigodoLote = '"_pCodLote_"' "
	}Else{
		Set meuSQL = meuSQL _ "And Modelo.FontePagadora = '"_pCodFontePag_"' "
		If (pSearchValue '= "") {
			Set meuSQL = meuSQL _ "And (Lote.CodigodoLote Like '%"_pSearchValue_"%' "			
			Set meuSQL = meuSQL _ "Or %External(Lote.DataInicial) Like '%"_pSearchValue_"%' "			
			Set meuSQL = meuSQL _ "Or %External(Lote.DataFinal) Like '%"_pSearchValue_"%') "			
		}
	}
	;
	Set xMeuSQL = "Select * From (" _ meuSQL
	Set xMeuSQL = xMeuSQL_") Where %VID Between "_pSkip_" and "_pTake_" "
	;
	Set rSet	= ##class(%SQL.Statement).%ExecDirect("",xMeuSQL)
	;
	Set arrayDados = []
	;
 	While (rSet.%Next()) {
	 	;
	 	Set codGlosa = ""
	 	If ($Data(^FATGlosas(YM, 10, rSet.%Get("CodigodoLote")))) {
		 	Set codGlosa = $Order(^FATGlosas(YM, 10, rSet.%Get("CodigodoLote"), ""))
	 	}
	 	;
		Set listDados = {}
		Set listDados.numero 			= rSet.%Get("CodigodoLote")
		Set listDados.numeroForm 	= rSet.%Get("CodigodoLote")_" | Período: "_
																$ZDate(rSet.%Get("DataInicial"),4)_" - "_$ZDate(rSet.%Get("DataFinal"),4)
		Set listDados.glosa 			= codGlosa
		Do arrayDados.%Push(listDados)
 	}
 	;
 	Do arrayDados.%ToJSON()
 	Return $$$OK]]></Implementation>
</Method>

<Method name="SetGlosa">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0

	Tstart
	Set strStatus = ""
	Set erro = 0
	Try{
		Set pCodGlosa 	= $Get(%request.Data("pCodGlosa",1))
		Set pObjGeral 	= $Get(%request.Data("pObjGeral",1))
		Set YBED 				= $Get(%request.Data("YBED",1))
		If (pCodGlosa = "+") Set pCodGlosa = ""
		Set dadosGeral = [].%FromJSON(pObjGeral)
		;
		Set objFATGlosa = ""
		If (pCodGlosa '= "") Set objFATGlosa = $Get(^FATGlosa(YM, pCodGlosa, 1))
		;
		Set $$$FATGlosaCodigoLote(objFATGlosa) = dadosGeral.lote
		If (pCodGlosa="") {
			Set $$$FATGlosaStatus(objFATGlosa) = 1
			Set pCodGlosa = $$GetNextNumber^COMUtils("FATGlosa","")
		}
		Set strStatus = $$$Save("FATGlosa", pCodGlosa, objFATGlosa, $$$YES)
	}
	Catch(err){
		#Dim err As %Exception.SystemException
		Set strStatus = err.DisplayString()
		Set erro = err
	}
	Set retorno = {}
	If ('erro) {
		TCommit
		Set retorno.codGlosa 	= pCodGlosa
		Set retorno.status 		= strStatus
	}else{
		TRollback
		Set retorno.status = strStatus
	}
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetGlosa">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0
	
	Set pCodGlosa = $Get(%request.Data("pCodGlosa",1))
	
	Set objFATGlosa = $Get(^FATGlosa(YM, pCodGlosa, 1))
	Set codLote 		= $$$FATGlosaCodigoLote(objFATGlosa)
	Set status 			= $$$FATGlosaStatus(objFATGlosa)
	Set reapPor			= $$$FATGlosaReapresentadoPor(objFATGlosa)
	Set reapEm			= $$$FATGlosaReapresentadoEm(objFATGlosa)
	Set reReapPor 	= $$$FATGlosaReReapresentadoPor(objFATGlosa)
	Set reReapEm 		= $$$FATGlosaReReapresentadoEm(objFATGlosa)
	Set criadoEm 		= $$$FATGlosaCriadoEm(objFATGlosa)
	Set criadoPor 	= $$$FATGlosaCriadoPor(objFATGlosa)
	Set alteradoEm 	= $$$FATGlosaAlteradoEm(objFATGlosa)
	Set alteradoPor	= $$$FATGlosaAlteradoPor(objFATGlosa)
	
	Set objLote = $Get(^FATLote(YM, codLote, 1))
	Set codModelo = $$$FATLoteModelodeLote(objLote)

	Set objModeloLote = $Get(^FATModeloLote(YM, codModelo, 1))
	Set codFontPagad	= $$$FATModeloLoteFontePagadora(objModeloLote) 	
		
	Set listAbaGeral = {}
	Set listAbaGeral.fontePagadora = codFontPagad
	Set listAbaGeral.lote = codLote
	Set listAbaGeral.criadoPor = $$SQLGetUserName^VARSQL(criadoPor)
	Set listAbaGeral.criadoEm = $Select(criadoEm'="":$ZDateTime(criadoEm,4,2),1:"")
	Set listAbaGeral.alteradoEm = $Select( status = 1 : $Select(alteradoEm'="":$ZDateTime(alteradoEm,4,2),1:""),
																				 status = 2 : $Select(reapEm'="":$ZDateTime(reapEm,4,2),1:""),
																				 1 : $Select(reReapEm'="":$ZDateTime(reReapEm,4,2),1:"")
																				)
	Set listAbaGeral.alteradoPor = $Select( status = 1 : $$SQLGetUserName^VARSQL(alteradoPor),
																					status = 2 : $$SQLGetUserName^VARSQL(reapPor),
																					1 : $$SQLGetUserName^VARSQL(reReapPor))
	Set listRetorno = {}
	Set listRetorno.codStatus = status
	Set listRetorno.status = $Select(status=1:"Aguardando Reapresentação",status=2:"Reapresentado",status=3:"Apresentado Recurso",1:"Encerrado")
	Set listRetorno.geral	 = listAbaGeral
		
	Do listRetorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetGlosaPendentes">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0
	
	Set YBED 		= $Get(%request.Data("YBED",1))
	Set retorno = []

	Set meuSQL = "Select * From SQLUser.FATGlosa Where Company = 0 And Status Not In (4)"
	Set rSet	= ##class(%SQL.Statement).%ExecDirect("",meuSQL)
 	While (rSet.%Next()) {
	 	
	 	Set objFATLote = $Get(^FATLote(YM, rSet.%Get("CodigoLote"), 1))
	 	Set objFATModeloLote = $Get(^FATModeloLote(YM, $$$FATLoteModelodeLote(objFATLote), 1))
	 	
	 	Set list = {}
	 	Set list.glosa 		= rSet.%Get("CodigoGlosa")
	 	Set list.fontPag	= "("_$$$FATModeloLoteFontePagadora(objFATModeloLote)_") "_$$GetOrganizacaoNome^VARSQL($$$FATModeloLoteFontePagadora(objFATModeloLote))
	 	Set list.lote			= rSet.%Get("CodigoLote")
	 	Set list.loteIni	= $ZDate($$$FATLoteDataInicial(objFATLote),4)
	 	Set list.loteFin	= $ZDate($$$FATLoteDataFinal(objFATLote),4)
	 	Set list.situac			= $Select(rSet.%Get("Status")=1:"Aguardando Reapresentação",rSet.%Get("Status")=2:"Reapresentado",rSet.%Get("Status")=3:"Apresentado Recurso",1:"Encerrado")
	 	Set list.criadoEm		= $ZDateTime(rSet.%Get("CriadoEm"),4)
	 	Set list.criadoPor	= $$SQLGetUserName^VARSQL(rSet.%Get("CriadoPor"))
	 	Set list.reaprEm		= $Select(rSet.%Get("ReapresentadoEm")="":"",1:$ZDateTime(rSet.%Get("ReapresentadoEm"),4))
	 	Set list.reaprPor		= $$SQLGetUserName^VARSQL(rSet.%Get("ReapresentadoPor"))
	 	Set list.reReaprEm	= $Select(rSet.%Get("ReReapresentadoEm")="":"",1:$ZDateTime(rSet.%Get("ReReapresentadoEm"),4))
	 	Set list.reReaprPor	= $$SQLGetUserName^VARSQL(rSet.%Get("ReReapresentadoPor"))
	 	Do retorno.%Push(list)
 	}
 	Do retorno.%ToJSON()
 	Return $$$OK]]></Implementation>
</Method>

<Method name="RemoveGlosa">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0
	
	Set YBED 		= $Get(%request.Data("YBED",1))
	Set pGlosa 	= $Get(%request.Data("pGlosa",1))
	Set numLote = $$$FATGlosaCodigoLote($Get(^FATGlosa(YM, pGlosa, 1)))

	Set numFatura = ""
	For {
		Set numFatura = $Order(^FATGlosaAdmissao(YM, pGlosa, numFatura))
		Quit:numFatura=""
		Set xStrStatus = ..RemoveFatura(pGlosa, numLote, numFatura, "", YBED)
	}
	Set strStatus = $$$Kill("FATGlosa", pGlosa)
	Write strStatus
	Return $$$OK]]></Implementation>
</Method>

<Method name="Reapresentar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0
	
	Set YBED 		= $Get(%request.Data("YBED",1))
	Set pGlosa 	= $Get(%request.Data("pGlosa",1))

	Set objFATGlosa = $Get(^FATGlosa(YM, pGlosa, 1))

	If ($$$FATGlosaStatus(objFATGlosa) = 1) {
		Set $$$FATGlosaStatus(objFATGlosa) 						= 2
		Set $$$FATGlosaReapresentadoPor(objFATGlosa) 	= YBED
		Set $$$FATGlosaReapresentadoEm(objFATGlosa) 	= $Horolog
		Set strStatus = $$$Save("FATGlosa", pGlosa, objFATGlosa, $$$YES)
	}Else{
		Set $$$FATGlosaStatus(objFATGlosa) 							= 3
		Set $$$FATGlosaReReapresentadoPor(objFATGlosa) 	= YBED
		Set $$$FATGlosaReReapresentadoEm(objFATGlosa) 	= $Horolog
		Set strStatus = $$$Save("FATGlosa", pGlosa, objFATGlosa, $$$YES)
		Set pCodAdm = ""
		For {
			Set pCodAdm = $Order(^FATGlosaAdmissao(YM, pGlosa, pCodAdm))	
			Quit:pCodAdm="" 
			Set pSequencia = ""
			For {
				Set pSequencia = $Order(^FATGlosaAdmissao(YM, pGlosa, pCodAdm, pSequencia))	
				Quit:pSequencia="" 

				Set conteudo = ^FATGlosaAdmissao(YM, pGlosa, pCodAdm, pSequencia, 1) 
				If ($$$FATGlosaAdmissaoStatus(conteudo)=3) {
					Set strStatus1 = ..SetGlosaFaturas(pGlosa, pCodAdm, pSequencia, 4, YBED)
				}
			}
		}
	}
	Write strStatus
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetGlosaFaturas">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0
	Set retorno = []
	
	Set pCodGlosa = $Get(%request.Data("pCodGlosa",1))
	If (pCodGlosa = "") {
	 	Do retorno.%ToJSON()
	 	Return $$$OK
	}
	
	Set numLote 	= $$$FATGlosaCodigoLote($Get(^FATGlosa(YM, pCodGlosa, 1)))
	Set strStatus = $$$FATGlosaStatus($Get(^FATGlosa(YM, pCodGlosa, 1)))
	Set todosStatus = ""
	
	Set meuSQL = "Select GlosaAdm.CodigodaAdmissao, GlosaAdm.DataHoraAdmissao, Agen.CodigodoPaciente, "
	Set meuSQL = meuSQL _ "Sum(GlosaAdm.ValorTotal) As ValorTotal, "
	Set meuSQL = meuSQL _ "GlosaAdm.SequenciaProcedimento, GlosaAdm.Procedimento, GlosaAdm.Guia, "
	Set meuSQL = meuSQL _ "GlosaAdm.QtdeProcedimento, GlosaAdm.Valor, GlosaAdm.Status "
	Set meuSQL = meuSQL _ "From SQLUser.FATGlosaAdmissao GlosaAdm, SQLUser.VARAgendamento As Agen "
	Set meuSQL = meuSQL _ "Where GlosaAdm.Company = 0 And Agen.Company = 0 "
	Set meuSQL = meuSQL _ "And GlosaAdm.CodigodoAgendamento = Agen.Numero "
	Set meuSQL = meuSQL _ "And GlosaAdm.CodigodaGlosa = '"_pCodGlosa_"' "
	Set meuSQL = meuSQL _ "Order By GlosaAdm.CodigodaAdmissao "

	Set rSet	= ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	;
	;
 	While (rSet.%Next()) {
		Set codAgend 	= $$$VARAgendamentoAdmissaoNumerodoAgendamento($Get(^VARAgendamentoAdmissao(YM, rSet.%Get("CodigodaAdmissao"), 1)))
	 	Set planoSaude 	= $$$FATLoteFaturasPlanodeSaude($Get(^FATLoteFaturas(YM, numLote, codAgend, rSet.%Get("SequenciaProcedimento"), 1)))
		Set codTISS = ""
		Set objRegraComercial = ##Class(VAR.util.FATRegrasComerciais).%New(rSet.%Get("Procedimento"), planoSaude)
		If ($IsObject(objRegraComercial)) {
			Set codTISS = objRegraComercial.CodigodoItem
		}
		Set numGuia	= rSet.%Get("Guia")
		Set guiaOperadora = ""
		If (numGuia '= "") {
			Set objGuia = $Get(^VARAgendamentoGuia(YM, codAgend, numGuia, 1))
			Set guiaOperadora = $$$VARAgendamentoGuiaNumerodaGuiaAtribuidapela(objGuia)
		}

	 	Set listDados = {}
	 	Set listDados.codLote			 	= numLote
		Set listDados.numeroFatura 	= rSet.%Get("CodigodaAdmissao")
		Set listDados.numeroFaturaE = rSet.%Get("CodigodaAdmissao")_
																	" | Data de Abertura: "_$ZDate(rSet.%Get("DataHoraAdmissao"),4)_
																	" | Paciente: "_"("_rSet.%Get("CodigodoPaciente")_") "_$$SQLGetPatientName^VARSQL(rSet.%Get("CodigodoPaciente"))
		Set listDados.dataAbertura 	= $ZDate(rSet.%Get("DataHoraAdmissao"),3)
		Set listDados.paciente 			= "("_rSet.%Get("CodigodoPaciente")_") "_$$SQLGetPatientName^VARSQL(rSet.%Get("CodigodoPaciente"))

		Set listDados.sequencia					= rSet.%Get("SequenciaProcedimento")
		Set listDados.codProcedimento 	= rSet.%Get("Procedimento")
		Set listDados.procedimento 	 		= $$SQLGetDescricaoProduto^VARSQL(rSet.%Get("Procedimento"),1)
		Set listDados.codTISS 					= codTISS
		Set listDados.qtdeProcedimento 	= rSet.%Get("QtdeProcedimento")
		Set listDados.numGuia 					= guiaOperadora
		Set listDados.valor 						= rSet.%Get("Valor")
		Set listDados.codStatus 				= rSet.%Get("Status")
		Set listDados.descStatus 				= $Select(rSet.%Get("Status")=1:"Reapresentado",rSet.%Get("Status")=2:"Aceito/Pago após reapresentação",rSet.%Get("Status")=3:"Não aceito/Recursar",rSet.%Get("Status")=4:"Recurso enviado",rSet.%Get("Status")=5:"Aceito/ Pago após recurso",1:"Glosado")
		Set listDados.strStatusGlosa		= strStatus
		Set todosStatus = todosStatus _";"_ rSet.%Get("Status")
		Do retorno.%Push(listDados)
 	}
 	
 	Set statusBotRep = 1
	If (strStatus = 1 && (retorno.%Size() > 0)) {
		Set statusBotRep = 0	
	}ElseIf (strStatus = 2 && ($find(todosStatus_";",";1;") = 0)) {
		Set statusBotRep = 0	
	}
 	Set listRetorno = {}
 	Set listRetorno.status = strStatus
 	Set listRetorno.dados = retorno
 	Set listRetorno.statusBotRep = statusBotRep
 	
 	Do listRetorno.%ToJSON()
 	Return $$$OK]]></Implementation>
</Method>

<Method name="GetStatusGlosaFaturas">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodGlosa,pCodAdm,pSequencia</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0
	
	Set objFATGlosa 		= $Get(^FATGlosa(YM, pCodGlosa, 1))
	Set objFATGlosaFat 	= $Get(^FATGlosaAdmissao(YM, pCodGlosa, pCodAdm, pSequencia, 1))
	
	Return $$$FATGlosaStatus(objFATGlosa)_Y_$$$FATGlosaAdmissaoStatus(objFATGlosaFat)]]></Implementation>
</Method>

<Method name="SetGlosaFaturas">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodGlosa,pCodAdm,pSequencia,pStatus,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0

	Set YBED = pYBED
		
	Set objFATGlosaAdmissao = $Get(^FATGlosaAdmissao(YM, pCodGlosa, pCodAdm, pSequencia, 1))
	Set $$$FATGlosaAdmissaoStatus(objFATGlosaAdmissao) = pStatus
	Set strStatus = $$$Save("FATGlosaAdmissao", pCodGlosa_$$$COMMA_pCodAdm_$$$COMMA_pSequencia, objFATGlosaAdmissao, $$$YES)
	
	Set objFATGlosa = $Get(^FATGlosa(YM, pCodGlosa, 1))
	If ($$$FATGlosaStatus(objFATGlosa) = 3) {
		Set xStatus = 4
		Set xCodAdm = ""
		For {
			Set xCodAdm = $Order(^FATGlosaAdmissao(YM, pCodGlosa, xCodAdm))
			Quit:xCodAdm=""||(xStatus'=4)
			Set xSequencia = ""
			For {
				Set xSequencia = $Order(^FATGlosaAdmissao(YM, pCodGlosa, xCodAdm, xSequencia))
				Quit:xSequencia=""||(xStatus'=4)

				Set xObjFATGlosaAdmissao = $Get(^FATGlosaAdmissao(YM, pCodGlosa, xCodAdm, xSequencia, 1))
				If ($$$FATGlosaAdmissaoStatus(xObjFATGlosaAdmissao)=4) {
					Set xStatus = 3
					Quit
				}
			}
			If (xStatus = 4) {
				Set $$$FATGlosaStatus(objFATGlosa) = xStatus
				Set strStatus = $$$Save("FATGlosa", pCodGlosa, objFATGlosa, $$$YES)
			}
		}
	}	
	If ($$$FATGlosaStatus(objFATGlosa) = 4) {
		Set xStatus = 4
		Set xCodAdm = ""
		For {
			Set xCodAdm = $Order(^FATGlosaAdmissao(YM, pCodGlosa, xCodAdm))
			Quit:xCodAdm=""||(xStatus'=4)
			Set xSequencia = ""
			For {
				Set xSequencia = $Order(^FATGlosaAdmissao(YM, pCodGlosa, xCodAdm, xSequencia))
				Quit:xSequencia=""||(xStatus'=4)

				Set xObjFATGlosaAdmissao = $Get(^FATGlosaAdmissao(YM, pCodGlosa, xCodAdm, xSequencia, 1))
				If ($$$FATGlosaAdmissaoStatus(xObjFATGlosaAdmissao)=4) {
					Set xStatus = 3
					Quit
				}
			}
			If (xStatus = 3) {
				Set $$$FATGlosaStatus(objFATGlosa) = xStatus
				Set strStatus = $$$Save("FATGlosa", pCodGlosa, objFATGlosa, $$$YES)
			}
		}
	}	
 	Return strStatus_"~"_$$$FATGlosaStatus(objFATGlosa)]]></Implementation>
</Method>

<Method name="FindGlosa">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0
	
	Set pTake 				= $Get(%request.Data("pTake",1))
	Set pSkip 				= $Get(%request.Data("pSkip",1))
	Set pCodGlosa			= $Get(%request.Data("pCodGlosa",1))
	Set pSearchValue 	= $Replace($Get(%request.Data("pSearchValue",1))," ","")
	
	If (pTake = "") Set pTake = 20
	
	Set pTake = pTake + pSkip
	Set pSkip = pSkip + 1
		
	Set meuSQL = "Select Glosa.CodigoGlosa, Glosa.CodigoLote, Modelo.FontePagadora, Orga.Nome, "
	Set meuSQL = meuSQL _ "Lote.DataInicial, Lote.DataFinal "
	Set meuSQL = meuSQL _ "From SQLUser.FATGlosa As Glosa, SQLUser.FATLote As Lote, "
	Set meuSQL = meuSQL _ "SQLUser.FATModeloLote As Modelo, SQLUser.FATOrganizacao As Orga "
	Set meuSQL = meuSQL _ "Where Glosa.Company = 0 And Lote.Company = 0 And Modelo.Company = 0 "
	Set meuSQL = meuSQL _ "And Orga.Company = 0 And Glosa.CodigoLote = Lote.CodigodoLote "
	Set meuSQL = meuSQL _ "And Lote.ModelodeLote = Modelo.CodigodoModelodeLote "
	Set meuSQL = meuSQL _ "And Orga.CodigodaOrganizacao = Modelo.FontePagadora "
	If (pCodGlosa '= "") {
		Set meuSQL = meuSQL _ "And Glosa.CodigoGlosa = '"_pCodGlosa_"' "
	}Else{
		If (pSearchValue '= "") {
			Set meuSQL = meuSQL _ "And (%Upper(Glosa.CodigoGlosa) Like %Upper('%"_pSearchValue_"%') "			
			Set meuSQL = meuSQL _ "Or %Upper(Modelo.FontePagadora) Like %Upper('%"_pSearchValue_"%') "			
			Set meuSQL = meuSQL _ "Or %Upper(Orga.Nome) Like %Upper('%"_pSearchValue_"%') "			
			Set meuSQL = meuSQL _ "Or %Upper(Glosa.CodigoLote) Like %Upper('%"_pSearchValue_"%') "			
			Set meuSQL = meuSQL _ "Or %External(Lote.DataInicial) Like '%"_pSearchValue_"%' "			
			Set meuSQL = meuSQL _ "Or %External(Lote.DataFinal) Like '%"_pSearchValue_"%') "			
		}
	}
	;
	Set xMeuSQL = "Select * From (" _ meuSQL
	Set xMeuSQL = xMeuSQL_") Where %VID Between "_pSkip_" and "_pTake_" "
	;
	Set rSet	= ##class(%SQL.Statement).%ExecDirect("",xMeuSQL)
	;
	Set arrayDados = []
	;
 	While (rSet.%Next()) {
	 	;
		Set listDados = {}
		Set listDados.codGlosa 			= rSet.%Get("CodigoGlosa")
		Set listDados.fontPagadora	= "("_rSet.%Get("FontePagadora")_") "_rSet.%Get("Nome")
		Set listDados.lote					=	rSet.%Get("CodigoLote")
		Set listDados.dtIniLote			=	$ZDate(rSet.%Get("DataInicial"),4)
		Set listDados.dtFinalLote		=	$ZDate(rSet.%Get("DataFinal"),4)
		
		Do arrayDados.%Push(listDados)
 	}
 	;
 	Do arrayDados.%ToJSON()
 	Return $$$OK]]></Implementation>
</Method>

<Method name="ValidaLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0

	Set pCodLote = $Get(%request.Data("pCodLote",1))

 	Set codGlosa = ""
 	If ($Data(^FATGlosas(YM, 10, pCodLote))) {
	 	Set codGlosa = $Order(^FATGlosas(YM, 10, pCodLote, ""))
 	}

	Set retorno = {}
	Set retorno.codGlosa = codGlosa
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="FindFaturaLote">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set lote 	= $Get(%request.Data("lote",1))
	Set array = []
	;
	Set meuSQL = "Select Lote.NumerodaFatura Fatura, Lote.DataHoraAdmissao, " 
	Set meuSQL = meuSQL _ "Lote.CodigodoPaciente||' - '||$$SQLGetPatientName^VARSQL(Lote.CodigodoPaciente) CodigodoPaciente "
	Set meuSQL = meuSQL _ "From SQLUser.FATLoteFaturas As Lote "
	Set meuSQL = meuSQL _ "Where Lote.Company = 0 And Lote.CodigodoLote = '"_lote_"' "
	Set meuSQL = meuSQL _ "And ( "
	;
	Set meuSQL = meuSQL _ "(Select Count(GlosaProc.ID) From SQLUser.FATGlosaAdmissao As GlosaProc "
	Set meuSQL = meuSQL _ "Where GlosaProc.Company = 0 And GlosaProc.CodigodaAdmissao = Lote.NumerodaFatura) "
	;
	Set meuSQL = meuSQL _ "<> " 
	;
	Set meuSQL = meuSQL _ "(Select Count(ProcAgend.ID) From SQLUser.VARAgendamentoProcedimentos As ProcAgend "
	Set meuSQL = meuSQL _ "Where ProcAgend.Company = 0 And ProcAgend.ControleAdmissao = Lote.NumerodaFatura) "
	;
	Set meuSQL = meuSQL _ ") Group By NumerodaFatura"
	;
	Set rSet 	 = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	While(rSet.%Next()){
		Set linha = {}
		Set linha.Fatura						= rSet.%Get("Fatura")
		Set linha.CodigodoPaciente 	= rSet.%Get("CodigodoPaciente")
		Set linha.DataHoraAdmissao	= $ZDateTime(rSet.%Get("DataHoraAdmissao"),3)
		Do array.%Push(linha) 
	}
	Do array.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="FindProcedimentos">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"
	
	Set lote 			= $Get(%request.Data("lote",1))
	Set fatura  	= $Get(%request.Data("fatura",1))
	Set pNumGlosa = $Get(%request.Data("pNumGlosa",1))
	
	Set retorno = []

	Set meuSQL = "Select * "
	Set meuSQL = meuSQL _ "From SQLUser.FATLoteFaturas As Lote "
	Set meuSQL = meuSQL _ "Where Lote.Company = 0 And Lote.CodigodoLote = '"_lote_"' " 
	Set meuSQL = meuSQL _ "And NumerodaFatura = '"_fatura_"' " 
	Set rSet 	 = ##class(%SQL.Statement).%ExecDirect("",meuSQL)
	While(rSet.%Next()){

		If ($Data(^FATGlosaAdmissao(0,pNumGlosa,fatura,rSet.%Get("SequenciadeAtendimento")))) Continue

		Set codTISS = ""
		Set objRegraComercial = ##Class(VAR.util.FATRegrasComerciais).%New(rSet.%Get("Procedimento"), rSet.%Get("PlanodeSaude"))
		If ($IsObject(objRegraComercial)) {
			Set codTISS = objRegraComercial.CodigodoItem
		}
		Set nunGuia = rSet.%Get("GuiaConvenio")
		If (nunGuia = "") {
			Set objVARAgendamentoProcedimentos = $Get(^VARAgendamentoProcedimentos(YM, rSet.%Get("CodigodoAtendimento"), 
																					 rSet.%Get("SequenciadeAtendimento"), 1))
			Set codGuia = $$$VARAgendamentoProcedimentosGuia(objVARAgendamentoProcedimentos)
			;
			Set objVARAgendamentoGuia = $Get(^VARAgendamentoGuia(YM, rSet.%Get("CodigodoAtendimento"), codGuia, 1))
			Set nunGuia = $$$VARAgendamentoGuiaNumerodaGuiaAtribuidapela(objVARAgendamentoGuia)
		}
		Set qtdeProc = rSet.%Get("QtdedeProcedimento")		
		If (qtdeProc = 0) Set qtdeProc = 1

		Set list = {}
		Set list.sequencia				= rSet.%Get("SequenciadeAtendimento")
		Set list.lote							= lote
		Set list.fatura						= fatura
		Set list.codProcedimento 	= rSet.%Get("Procedimento")
		Set list.procedimento 	 	= $$SQLGetDescricaoProduto^VARSQL(rSet.%Get("Procedimento"),1)
		Set list.codTISS 					= codTISS
		Set list.qtdeProcedimento = qtdeProc
		Set list.numGuia 					= nunGuia
		Do retorno.%Push(list)
	}	
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="InsertFatura">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0

	Tstart
	Set strStatus = ""
	Set erro = 0
	Try{
		Set pNumGlosa 	= $Get(%request.Data("pNumGlosa",1))
		Set pNumLote 		= $Get(%request.Data("pNumLote",1))
		Set pNumFatura 	= $Get(%request.Data("pNumFatura",1))
		Set pSeqProc 		= $Get(%request.Data("pSeqProc",1))
		Set YBED 				= $Get(%request.Data("YBED",1))
		;
		Set codAgendamento = $$$VARAgendamentoAdmissaoNumerodoAgendamento($Get(^VARAgendamentoAdmissao(YM, pNumFatura, 1)))
		;
		Set seqProc = ""
		For {
			Set seqProc = $Order(^FATLoteFaturas(0,pNumLote,codAgendamento,seqProc))
			Quit:seqProc=""
			
			If (pSeqProc'=""&&(seqProc'=pSeqProc)) Continue

			Set objFATLoteFaturas = $Get(^FATLoteFaturas(YM, pNumLote, codAgendamento, seqProc, 1))
			Set objVARAgendamentoProcedimentos = $Get(^VARAgendamentoProcedimentos(YM, codAgendamento, seqProc, 1))

			Set objFATGlosaAdmissao  = $Get(^FATGlosaAdmissao(YM, pNumGlosa, pNumFatura, seqProc, 1))
			Set $$$FATGlosaAdmissaoCodigodoAgendamento(objFATGlosaAdmissao) 		= codAgendamento
			Set $$$FATGlosaAdmissaoProcedimento(objFATGlosaAdmissao) 						= $$$FATLoteFaturasProcedimento(objFATLoteFaturas)
			Set $$$FATGlosaAdmissaoDataAtendimento(objFATGlosaAdmissao) 				= $$$VARAgendamentoProcedimentosDataAtendimento(objVARAgendamentoProcedimentos)
			Set $$$FATGlosaAdmissaoHoraAtendimento(objFATGlosaAdmissao) 				= $$$VARAgendamentoProcedimentosHoraAtendimento(objVARAgendamentoProcedimentos)
			Set $$$FATGlosaAdmissaoDataHoraAdmissao(objFATGlosaAdmissao) 				= $$$VARAgendamentoProcedimentosDataHoraAdmissao(objVARAgendamentoProcedimentos)
			Set $$$FATGlosaAdmissaoSolicitante(objFATGlosaAdmissao) 						= $$$VARAgendamentoProcedimentosSolicitante(objVARAgendamentoProcedimentos)
			Set $$$FATGlosaAdmissaoNodaCarteirinha(objFATGlosaAdmissao) 				= $$$FATLoteFaturasNumerodaCarteirinha(objFATLoteFaturas)
			Set $$$FATGlosaAdmissaoVencimentodaCarteirinha(objFATGlosaAdmissao) = $$$FATLoteFaturasValidadeCarteirinha(objFATLoteFaturas)
			Set $$$FATGlosaAdmissaoGuia(objFATGlosaAdmissao) 										= $$$VARAgendamentoProcedimentosGuia(objVARAgendamentoProcedimentos)
			Set $$$FATGlosaAdmissaoQtdeProcedimento(objFATGlosaAdmissao) 				= $$$FATLoteFaturasQtdedeProcedimento(objFATLoteFaturas)
			Set $$$FATGlosaAdmissaoValor(objFATGlosaAdmissao) 									= $$$FATLoteFaturasValordoProcedimento(objFATLoteFaturas)
			Set $$$FATGlosaAdmissaoValorTotal(objFATGlosaAdmissao) 							= ($$$FATLoteFaturasValordoProcedimento(objFATLoteFaturas)*$$$FATLoteFaturasQtdedeProcedimento(objFATLoteFaturas))
			Set $$$FATGlosaAdmissaoStatus(objFATGlosaAdmissao) 									= 1

			Set strStatus = $$$Save("FATGlosaAdmissao", pNumGlosa_$$$COMMA_pNumFatura_$$$COMMA_seqProc, objFATGlosaAdmissao, $$$YES)
			If (strStatus '= 1) Quit

			Set procComp = ""
			For {
				Set procComp = $Order(^FATLoteFaturasComp(YM,pNumLote,codAgendamento,seqProc,procComp))
				Quit:procComp=""
				
				Set objFATLoteFaturasComp = $Get(^FATLoteFaturasComp(YM,pNumLote,codAgendamento,seqProc,procComp,1))
				
				Set objFATGlosaAdmissaoComp = ""
				Set $$$FATGlosaAdmissaoCompValordoProcedimento(objFATGlosaAdmissaoComp) = $$$FATLoteFaturasCompValordoProcedimento(objFATLoteFaturasComp)  	
				Set $$$FATGlosaAdmissaoCompQtdedoProcedimento(objFATGlosaAdmissaoComp) 	= $$$FATLoteFaturasCompQtdedoProcedimento(objFATLoteFaturasComp)  	
				Set $$$FATGlosaAdmissaoCompVersaodaTISS(objFATGlosaAdmissaoComp) 				= $$$FATLoteFaturasCompVersaodaTISS(objFATLoteFaturasComp)  	
				Set $$$FATGlosaAdmissaoCompInvalidadoPorRegras(objFATGlosaAdmissaoComp) = $$$FATLoteFaturasCompInvalidadoPorRegras(objFATLoteFaturasComp)  	
				Set $$$FATGlosaAdmissaoCompRegrasInvalidas(objFATGlosaAdmissaoComp) 		= $$$FATLoteFaturasCompRegrasInvalidas(objFATLoteFaturasComp)  	
				Set $$$FATGlosaAdmissaoCompCategoriaTISS(objFATGlosaAdmissaoComp) 			= $$$FATLoteFaturasCompCategoriaTISS(objFATLoteFaturasComp)  	
				Set $$$FATGlosaAdmissaoCompGuiaConvenio(objFATGlosaAdmissaoComp) 				= $$$FATLoteFaturasCompGuiaConvenio(objFATLoteFaturasComp)  	
				Set $$$FATGlosaAdmissaoCompDesconsiderar(objFATGlosaAdmissaoComp) 			= 0
				
				Set strStatus = $$$Save("FATGlosaAdmissaoComp", pNumGlosa_$$$COMMA_pNumFatura_$$$COMMA_seqProc_$$$COMMA_procComp, objFATGlosaAdmissaoComp, $$$YES)
				If (strStatus '= 1) Quit
			}
			If (strStatus '= 1) Quit
		}
	}
	Catch(err){
		#Dim err As %Exception.SystemException
		Set strStatus = err.DisplayString()
		Set erro = err
	}
	Set retorno = {}
	If ('erro) {
		TCommit
		Set retorno.codGlosa 	= pNumGlosa
		Set retorno.status 		= strStatus
	}else{
		TRollback
		Set retorno.status = strStatus
	}
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="RemoveFatura">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNumGlosa="",pNumLote="",pNumFatura="",pSeqProc="",pYBED=""</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0

	Tstart
	Set strStatus = ""
	Set erro = 0
	Try{
		If (pNumGlosa '= "") {
			Set YBED = pYBED
		}Else{
			Set pNumGlosa 	= $Get(%request.Data("pNumGlosa",1))
			Set pNumLote 		= $Get(%request.Data("pNumLote",1))
			Set pNumFatura 	= $Get(%request.Data("pNumFatura",1))
			Set pSeqProc 		= $Get(%request.Data("pSeqProc",1))
			Set YBED 				= $Get(%request.Data("YBED",1))
		}
		;
		Set codAgendamento = $$$VARAgendamentoAdmissaoNumerodoAgendamento($Get(^VARAgendamentoAdmissao(YM, pNumFatura, 1)))
		;
		Set seqProc = ""
		For {
			Set seqProc = $Order(^FATGlosaAdmissao(YM,pNumGlosa,pNumFatura,seqProc))
			Quit:seqProc=""
			
			If (pSeqProc'=""&&(seqProc'=pSeqProc)) Continue

			Set strStatus = $$$Kill("FATGlosaAdmissao", pNumGlosa_$$$COMMA_pNumFatura_$$$COMMA_seqProc)
			If (strStatus '= 1) Quit
			Kill ^FATGlosaAdmissaoComp(YM,pNumGlosa,pNumFatura,seqProc)
		}
	}
	Catch(err){
		#Dim err As %Exception.SystemException
		Set strStatus = err.DisplayString()
		Set erro = err
	}
	Set retorno = {}
	If ('erro) {
		TCommit
		Set retorno.codGlosa 	= pNumGlosa
		Set retorno.status 		= strStatus
	}else{
		TRollback
		Set retorno.status = strStatus
	}
	Do:pYBED="" retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetComponentes">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set Y 	= "~"
	Set YM 	= 0

	Set pCodGlosa  	= $Get(%request.Data("pCodGlosa",1))
	Set pCodAdm			= $Get(%request.Data("pCodAdm",1))
	Set pSeqProc		= $Get(%request.Data("pSeqProc",1))

	Set retorno = []

	Set codComp = ""
	For {
		Set codComp = $Order(^FATGlosaAdmissaoComp(YM, pCodGlosa, pCodAdm, pSeqProc, codComp))
		Quit:codComp=""
				
		Set objFATGlosaAdmissaoComp = $Get(^FATGlosaAdmissaoComp(YM, pCodGlosa, pCodAdm, pSeqProc, codComp, 1))
		
		Set list = {}
		Set list.procedimento				= codComp
		Set list.procedimentoDesc 	= $$SQLGetDescricaoProduto^VARSQL(codComp, 1)
		Set list.quantidade					= $$$FATGlosaAdmissaoCompQtdedoProcedimento(objFATGlosaAdmissaoComp)
		Set list.valor							= $$$FATGlosaAdmissaoCompValordoProcedimento(objFATGlosaAdmissaoComp)
		Do list.%Set("desconsiderar",	+$$$FATGlosaAdmissaoCompDesconsiderar(objFATGlosaAdmissaoComp), "Number")

		Do retorno.%Push(list)		
			
	}
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="SetComponentes">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodGlosa,pCodAdm,pSeqProc,pCodComp,pObjDados,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0 
	Set Y  		= "~"
	Set YBED 	= pYBED
	
	Set campo = $Piece(pObjDados,Y,1)
	Set valor = $Piece(pObjDados,Y,2)
	
	Set objFATGlosaAdmissaoComp = $Get(^FATGlosaAdmissaoComp(YM, pCodGlosa, pCodAdm, pSeqProc, pCodComp, 1))
	If (campo = "quantidade") {
		Set $$$FATGlosaAdmissaoCompQtdedoProcedimento(objFATGlosaAdmissaoComp) = +valor
	}ElseIf (campo = "valor") {
		Set $$$FATGlosaAdmissaoCompValordoProcedimento(objFATGlosaAdmissaoComp) = +valor
	}Else{
		Set $$$FATGlosaAdmissaoCompDesconsiderar(objFATGlosaAdmissaoComp) = +valor
	}
	Set strStatus = $$$Save("FATGlosaAdmissaoComp", pCodGlosa_$$$COMMA_pCodAdm_$$$COMMA_pSeqProc_$$$COMMA_pCodComp, objFATGlosaAdmissaoComp, $$$YES)
	Return strStatus]]></Implementation>
</Method>

<Method name="GetConvenioAlteracao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM = 0 
	Set Y  = "~"
	
	Set pCodGlosa 	= $Get(%request.Data("pCodGlosa",1))
	Set pFatura 		= $Get(%request.Data("pFatura",1))
	Set pSequencia 	= $Get(%request.Data("pSequencia",1))
	Set YBED 				= $Get(%request.Data("YBED",1))

	Set codAgendamento = $$$VARAgendamentoAdmissaoNumerodoAgendamento($Get(^VARAgendamentoAdmissao(YM, pFatura, 1)))
	Set objVARAgendamentoProcedimentos = $Get(^VARAgendamentoProcedimentos(YM, codAgendamento, pSequencia, 1))

	Set objeto = $Get(^FATGlosaAdmissao(YM, pCodGlosa, pFatura, pSequencia, 1))

	Set procedimento	= $$$FATGlosaAdmissaoProcedimento(objeto)
	Set planoSaude 		= $$$VARAgendamentoProcedimentosPlanodeSaude(objeto)

	Set listDados = {}
	Set listDados.codAgendamento 	= codAgendamento
	Set listDados.procedimento 		= procedimento
	Set listDados.solicitante 		= $$$FATGlosaAdmissaoSolicitante(objeto)
	Set listDados.convenio 				= $$$VARAgendamentoProcedimentosConvenio(objVARAgendamentoProcedimentos)
	Set listDados.planoSaude 			= $$$VARAgendamentoProcedimentosPlanodeSaude(objVARAgendamentoProcedimentos)
	Set listDados.carteirinha 		= $$$FATGlosaAdmissaoNodaCarteirinha(objeto)
	Set listDados.dtVencimento 		= $Select($$$FATGlosaAdmissaoVencimentodaCarteirinha(objeto)="":"",1:$ZDate($$$FATGlosaAdmissaoVencimentodaCarteirinha(objeto),3))
	Set listDados.valor 					= $FNumber($$$FATGlosaAdmissaoValor(objeto),"",2)
	Set listDados.codGuia 				= $$$FATGlosaAdmissaoGuia(objeto)
	Do listDados.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="ArmConvenioAlteracao">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM = 0 
	Set Y  = "~"

	Set pCodGlosa 				= $Get(%request.Data("pCodGlosa",1))
	Set pCodFatura 				= $Get(%request.Data("pCodFatura",1))
	
	Set pCodAgendamento 	= $Get(%request.Data("pCodAgendamento",1))
	Set pSequencia				= $Get(%request.Data("pSequencia",1))
	Set pProcedimento			= $Get(%request.Data("pProcedimento",1))

	Set pNumCarteirinha		= $Get(%request.Data("pNumCarteirinha",1))
	Set pDtCarteirinha		= $Get(%request.Data("pDtCarteirinha",1))
	Set pValor						= $Get(%request.Data("pValor",1))
	Set xValor						= ""
	
	Set pCodGuia					= $Get(%request.Data("pCodGuia",1))
	Set pDtAutorizacao		= $Get(%request.Data("pDtAutorizacao",1))
	Set pSenha						= $Get(%request.Data("pSenha",1))
	Set pDtValidade				= $Get(%request.Data("pDtValidade",1))
	Set pNumGuiaOperadora	= $Get(%request.Data("pNumGuiaOperadora",1))

	Set pSolicitante		= $Get(%request.Data("pSolicitante",1))
	Set YBED 						= $Get(%request.Data("YBED",1))

	Set objVARAgendamentoProcedimentos = $Get(^VARAgendamentoProcedimentos(YM, pCodAgendamento, pSequencia, 1))
	Set planoSaude = $$$VARAgendamentoProcedimentosPlanodeSaude(objVARAgendamentoProcedimentos)

	Set objeto = $Get(^FATGlosaAdmissao(YM, pCodGlosa, pCodFatura, pSequencia, 1))

	Set objRegraComercial = ##Class(VAR.util.FATRegrasComerciais).%New(pProcedimento, planoSaude)
	If (objRegraComercial.isInelegivel = 1) {
		Write "Procedimento não atendido pelo Plano de Saúde informado."
		Return $$$OK
	}

	If ((objRegraComercial.isCarteirinhaObrigatoria = 1) && (pNumCarteirinha = "")) {
		Write "Favor informar numero da carterinha."
		Return $$$OK
	}

	If (objRegraComercial.isCarteirinhaObrigatoria = 1 && (objRegraComercial.CarteirinhaMin > 0) && ($Length(pNumCarteirinha) > objRegraComercial.CarteirinhaMax || ($Length(pNumCarteirinha) < objRegraComercial.CarteirinhaMin))) {
		Write "Numero de caracteres invalidos para a carteirinha."
		Return $$$OK
	}
	
	Set objetoGuia = ""
	If (pCodGuia = "" && (pDtAutorizacao '= "" || (pSenha '= "") || (pDtValidade '= "") || (pNumGuiaOperadora '= ""))) {
		If (pDtAutorizacao '= "") Set pDtAutorizacao = $ZDateH(pDtAutorizacao,3,,,,,,,+$Horolog)
		If (pDtValidade '= "") Set pDtValidade = $ZDateH(pDtValidade,3,,,,,,,+$Horolog)
		;
		If (pDtAutorizacao = "") {
			Write "Informe a data de autorização."
			Return $$$OK
		}	
		;	
		Set pCodGuia = $Order(^VARAgendamentoGuia(YM, pCodAgendamento, ""),-1) + 1
		;
		Set objetoGuia = $Get(^VARAgendamentoGuia(YM, pCodAgendamento, pCodGuia, 1))
		Set $$$VARAgendamentoGuiaDataAutorizacao(objetoGuia)	= pDtAutorizacao
		Set $$$VARAgendamentoGuiaSenha(objetoGuia) = pSenha
		Set $$$VARAgendamentoGuiaDatadeValidadeSenha(objetoGuia) = pDtValidade
		Set $$$VARAgendamentoGuiaNumerodaGuiaAtribuidapela(objetoGuia) = pNumGuiaOperadora
		Set $$$VARAgendamentoGuiaCriadoPor(objetoGuia) = YBED
		Set $$$VARAgendamentoGuiaCriadoEm(objetoGuia) = $Horolog
	}
	If (objRegraComercial.isObrigatorioGuiaAutorizacao = 1 && (pCodGuia = "")) {
		Write "Favor informar a Guia de Autorização."
		Return $$$OK
	}
	If (objetoGuia '= "") {
		Set strStatus = $$$Save("VARAgendamentoGuia", pCodAgendamento_$$$COMMA_pCodGuia, objetoGuia, $$$YES)
	}	

	Set $$$FATGlosaAdmissaoProcedimento(objeto) 						= pProcedimento
	Set $$$FATGlosaAdmissaoNodaCarteirinha(objeto)					= pNumCarteirinha
	Set $$$FATGlosaAdmissaoVencimentodaCarteirinha(objeto)	= $Select(pDtCarteirinha="":"",1:$ZDateH(pDtCarteirinha,3))
	Set $$$FATGlosaAdmissaoGuia(objeto)											= pCodGuia
	Set $$$FATGlosaAdmissaoSolicitante(objeto)							= pSolicitante
	Set $$$FATGlosaAdmissaoValor(objeto)										= pValor
	Set strStatus = $$$Save("FATGlosaAdmissao", pCodGlosa_$$$COMMA_pCodFatura_$$$COMMA_pSequencia, objeto, $$$YES)

	Write strStatus
	Return $$$OK]]></Implementation>
</Method>

<Method name="GetGuias">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM = 0 
	Set Y  = "~"

	Set pCodGlosa = $Get(%request.Data("pGlosa",1))
	Set retorno 	= []

	If (pCodGlosa = "") {
		Do retorno.%ToJSON()
		Return $$$OK
	}
	
	Set objFATGlosa = $Get(^FATGlosa(YM, pCodGlosa, 1))
	Set lote 		= $$$FATGlosaCodigoLote(objFATGlosa)
	Set status	= $$$FATGlosaStatus(objFATGlosa)
	
	Set numAdm = ""
	For {
		Set numAdm = $Order(^FATGlosaAdmissao(YM, pCodGlosa, numAdm))
		Quit:numAdm=""
	
		Set numSeq = ""
		For {
			Set numSeq = $Order(^FATGlosaAdmissao(YM, pCodGlosa, numAdm, numSeq))
			Quit:numSeq=""

			Set objFATGlosaAdmissao = $Get(^FATGlosaAdmissao(YM, pCodGlosa, numAdm, numSeq, 1))
			Set numAgend 	= $$$FATGlosaAdmissaoCodigodoAgendamento(objFATGlosaAdmissao)	
			Set statusSeq = $$$FATGlosaAdmissaoStatus(objFATGlosaAdmissao)	
			Set valor			= $$$FATGlosaAdmissaoValor(objFATGlosaAdmissao)	
			Set qtdeProc	= $$$FATGlosaAdmissaoQtdeProcedimento(objFATGlosaAdmissao)	
			Set valorTot	= qtdeProc*valor

			Set objFATLoteFaturas		= $Get(^FATLoteFaturas(YM, lote, numAgend, numSeq, 1))
			Set versao							= $$$FATLoteFaturasVersaodaTISS(objFATLoteFaturas)

			If (versao'="") {
				If ('$data(versoes(1, versao, numAgend))) {
					Set $Piece(versoes(1, versao),Y,1) = $Piece($Get(versoes(1, versao)),Y,1) + 1
				}
				Set $Piece(versoes(1, versao),Y,2) = $Piece(versoes(1, versao),Y,2) + valorTot
				Set $Piece(versoes(1, versao, numAgend, numSeq),Y,1) = $Piece($Get(versoes(1, versao, numAgend, numSeq)),Y,1) + 1
				Set $Piece(versoes(1, versao, numAgend, numSeq),Y,2) = $Piece(versoes(1, versao, numAgend, numSeq),Y,2) + valorTot
				If (statusSeq > 3) {
					If ('$data(versoes(2, versao, numAgend))) {
						Set $Piece(versoes(2, versao),Y,1) = $Piece($Get(versoes(2, versao)),Y,1) + 1
					}
					Set $Piece(versoes(2, versao),Y,2) = $Piece(versoes(2, versao),Y,2) + valorTot
					Set $Piece(versoes(2, versao, numAgend, numSeq),Y,1) = $Piece($Get(versoes(2, versao, numAgend, numSeq)),Y,2) + 1
					Set $Piece(versoes(2, versao, numAgend, numSeq),Y,2) = $Piece(versoes(2, versao, numAgend, numSeq),Y,2) + valorTot
				}
			}
			
			Set codComp = ""
			For {
				Set codComp = $Order(^FATGlosaAdmissaoComp(YM, pCodGlosa, numAdm, numSeq, codComp))
				Quit:codComp=""
				
				Set objFATGlosaAdmissaoComp = ^FATGlosaAdmissaoComp(YM, pCodGlosa, numAdm, numSeq, codComp, 1)
				
				Set valor			= $$$FATGlosaAdmissaoCompValordoProcedimento(objFATGlosaAdmissaoComp)	
				Set qtdeProc	= $$$FATGlosaAdmissaoCompQtdedoProcedimento(objFATGlosaAdmissaoComp)	
				Set versao 		= $$$FATGlosaAdmissaoCompVersaodaTISS(objFATGlosaAdmissaoComp)
				Set descons 	= $$$FATGlosaAdmissaoCompDesconsiderar(objFATGlosaAdmissaoComp)
				Continue:descons=1
				Set valorTot	= qtdeProc*valor
				If (versao'="") {
					Set $Piece(versoes(1, versao),Y,2) = $Piece(versoes(1, versao),Y,2) + valorTot
					If (statusSeq > 3) {
						Set $Piece(versoes(2, versao),Y,2) = $Piece(versoes(2, versao),Y,2) + valorTot
					}
				}
			}			
		}
	}
	Set sitGlosa = ""
	For {
		Set sitGlosa = $Order(versoes(sitGlosa))
		Quit:sitGlosa=""
		Set versao = ""
		For {
			Set versao = $Order(versoes(sitGlosa, versao))
			Quit:versao=""
			
			Set list = {}
			Set list.sitGlosa				= sitGlosa
			Set list.situacaoGlosa 	= $Select(sitGlosa=1:"Representação",1:"Apresentado Recurso")
			Set list.versao					= versao
			Set list.familiadaTISS	= $$SQLGetUserParamDesc^VARSQL("FATVERSAOTISS~"_versao)	
			Set list.quantidade			= $Piece(versoes(sitGlosa, versao),Y,1)
			Set list.valor					= $Piece(versoes(sitGlosa, versao),Y,2)
			Do retorno.%Push(list)
		}
	}
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="geraXMLGuia">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Set pGlosa = $Get(%request.Data("pGlosa",1))
	Set pTipo	 = $Get(%request.Data("pTipo",1))
	Do ##class(VAR.CSP.PreparacaoTISS).GerarXML("PorGlosa",YBED,1,pGlosa,pTipo)
	;
	Set modulo 		= 99
	Set empresa 	= 0
	Set dname = $$GetDiretorioFisico^VARBRDiretorios(empresa,modulo)
	If ($Extract(dname, $Length(dname)) '= "\") {
		Set dname = dname _ "\"
	}
	Set dname = dname_pGlosa
	If $$$isWINDOWS{
		Set barrade = "/"
		Set barrapara = "\"
	}Else{
		Set barrade = "\"
		Set barrapara = "/"
	}	
	Set dname = $Replace(dname,barrade,barrapara)
	Set arquivo = ""
	Set objResultSet = ##class(%ResultSet).%New("%Library.File:FileSet")
	If $$$ISOK(objResultSet.Execute(dname,"*.zip","DateModified")) {
		For {
			Quit:'objResultSet.Next()
			Set arquivo = objResultSet.Data("Name")
			Quit
		}
	}
	Set retorno = {}
	Set retorno.status = 0
	If arquivo'=""{
		Set retorno.status = 1
		Set nomeArquivo = $Piece(arquivo,barrapara,$Length(arquivo,barrapara))
		Set obj = $Get(^WWW012(0,0,1))		
		Set ftpPath = $$$WWW012PhysicalFTPDirectory(obj)
		Set pathTemp = "/temp/"_YBED_"/"
		Set pathArquivo = ftpPath_pathTemp
		Set pathArquivo = $Replace(pathArquivo,barrade,barrapara)
		If ('##class(%File).DirectoryExists(pathArquivo)) {
			Do ##class(%File).CreateDirectoryChain(pathArquivo)
		}
		If ('##class(%File).CopyFile(arquivo,pathArquivo_nomeArquivo)) 
		Job ..ApagaTemporaria(pathArquivo_nomeArquivo)
		Set retorno.arquivo = YGIF_pathTemp_nomeArquivo
	}
	Write retorno.%ToJSON()
	Quit]]></Implementation>
</Method>

<Method name="ApagaTemporaria">
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	Hang 120
	Do ##class(%File).Delete(arquivo)
	Quit]]></Implementation>
</Method>

<Method name="GetRelatorios">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM = 0 
	Set Y  = "~"

	Set pCodGlosa = $Get(%request.Data("pGlosa",1))
	Set objFATGlosa = $Get(^FATGlosa(YM, pCodGlosa, 1))
	Set codLote 		= $$$FATGlosaCodigoLote(objFATGlosa)
	;	
	Set array = []
	;
	IF (codLote = "") {
		Do array.%ToJSON()	
		Return $$$OK
	} 
	;
	Set objFATLote 	= $Get(^FATLote(YM, codLote, 1))
	Set codModelo 	= $$$FATLoteModelodeLote(objFATLote)
	Set dataInicial = $$$FATLoteDataInicial(objFATLote) 
	Set dataFinal 	= $$$FATLoteDataFinal(objFATLote)
	;
	Set objModeloLote = ""
	Set:codModelo'="" objModeloLote = $Get(^FATModeloLote(YM, codModelo, 1))
	Set relatorios = $$$FATModeloLoteModelodeRelatorios(objModeloLote)
	For count = 1 : 1 : $Length(relatorios,";") {
		If ($Piece(relatorios,";",count) = "") Continue
		Set list = {}
		Set list.modelo = $Piece(relatorios,";",count)
		Set list.dataInicial = $ZDate(dataInicial,3)
		Set list.dataFinal = $ZDate(dataFinal,3)
		Set list.lote		= codLote
		Set list.glosa	= pCodGlosa
		Do array.%Push(list)
	}
	;
	Do array.%ToJSON()	
	Return $$$OK]]></Implementation>
</Method>

<Method name="recPadraoNotaFiscal">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM = 0 
	Set Y  = "~"

	Set pCodGlosa = $Get(%request.Data("pCodGlosa",1))
	set pCodigo 	= $Get(%request.Data("codigo",1))

	Set objFATGlosa = $Get(^FATGlosa(YM, pCodGlosa, 1))
	Set codLote 		= $$$FATGlosaCodigoLote(objFATGlosa)


	Kill ^mtemp.FATLoteNFTributos(job)
	Set strStatus = $$$OK
	Set retorno = {}
	Try{
		Set formData = {}
		If (pCodigo'="") {
			Set objLote 					= $Get(^FATLote(0,codLote,1))
			Set modeloLote 				= $$$FATLoteModelodeLote(objLote)
			Set objModelo 				= $Get(^FATModeloLote(0,modeloLote,1))
			Set tipoFontePagadora = $$$FATModeloLoteTipoFontePagadora(objModelo)		
			;
			Set objNotaFiscal 		= $Get(^FATNotaFiscal(0,pCodigo,1))
			Set tipoNotaFiscal		= $$$FATNotaFiscalTipodeNotaFiscal(objNotaFiscal)
			Set modeloNotaFiscal	= $$$FATNotaFiscalModelodaNotaFiscal(objNotaFiscal)
			Set fontePagadora 		= $$$FATNotaFiscalFontePagadora(objNotaFiscal)
			Set dataEmissao 			= $ZDate($$$FATNotaFiscalDatadeEmissaoProvisoria(objNotaFiscal),3)
			Set dataVencimento 		= $ZDate($$$FATNotaFiscalDatadeVencimento(objNotaFiscal),3)
			Set valorDeducoes			= $$$FATNotaFiscalValorTotaldasDeducoes(objNotaFiscal)
			Set valorTotal				= $$$FATNotaFiscalValorTotaldaNF(objNotaFiscal)
			Set discriminacao			= $$$FATNotaFiscalDiscriminacaodosServicos(objNotaFiscal)
			Merge ^mtemp.FATLoteNFTributos(job) = ^FATNotaFiscalTributo(0,pCodigo)
		}Else{
			Set objLote 					= $Get(^FATLote(0,codLote,1))
			Set tipoNotaFiscal		= ""
			Set modeloNotaFiscal	= ""
			Set modeloLote 				= $$$FATLoteModelodeLote(objLote)
			Set objModelo 				= $Get(^FATModeloLote(0,modeloLote,1))
			Set tipoFontePagadora = $$$FATModeloLoteTipoFontePagadora(objModelo)		
			Set fontePagadora			= $$$FATModeloLoteFontePagadora(objModelo)
			Set prazoVencimento		= $$$FATModeloLoteEmissaoNotaPrazoVencimento(objModelo)
			Set dataEmissao				= $ZDate($Horolog,3)
			Set valorDeducoes			= ""
			Set valorTotal				= ""
			Set discriminacao 		= ""
			Set dataVencimento 		= ""
			If prazoVencimento'=""{
				Set dataVencimento = ##Class(VAR.CSP.FATLote).calculaPrazoVencimento(prazoVencimento)
			}
		}
		Set formData.codigoNota			= pCodigo
		Set formData.modelo					= modeloNotaFiscal
		Set formData.tipo						= tipoNotaFiscal
		Set formData.fontePagadora 	= fontePagadora
		Set formData.dataEmissao		= dataEmissao
		Set formData.dataVencimento = dataVencimento
		Set formData.valorDeducoes 	= $Select(valorDeducoes="":valorDeducoes,1:+valorDeducoes)
		Set formData.valorTotal 		= $Select(valorTotal="":valorTotal,1:+valorTotal)
		Set formData.discriminacao 	= discriminacao
		Set formData.eParticular		= $Select(tipoFontePagadora=1:1,1:0)
		Set retorno.formData 				= formData
	}
	Catch e {
		#dim e as %Exception.SystemException
		Set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	If strStatus=$$$OK{
		Set retorno.status 	= 1
		Set retorno.type 	= "success"
	}Else{
		Set retorno.status = 0
		Set retorno.type 	= "error"
		Set retorno.mensagem = $$$Text(strStatus,1)
	}
	Do retorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="salvaNotaFiscal">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM = 0 
	Set Y  = "~"

	Set pGlosa 			= $Get(%request.Data("pGlosa",1))
	Set objFATGlosa = $Get(^FATGlosa(YM, pGlosa, 1))
	Set codLote 		= $$$FATGlosaCodigoLote(objFATGlosa)
	Set dados 			= $Get(%request.Data("dados",1))
	Set strStatus 	= $$$OK
	TStart
	Try{
		If '$Data(^WWW128(0,"FATNotaFiscal")){
			Set obj = "NF000000000"
			Set strStatus = $$$Save("WWW128","FATNotaFiscal",obj,$$$YES)
			Quit:$$$ISERR(strStatus)
		}
		Set dados = [].%FromJSON(dados)
		Set codigo 			= dados.codigoNota
		Set eParticular = 0
		Set novo = 0
		If codigo="" {
			Set codigo = $$GetNextNumber^COMUtils("FATNotaFiscal","")
			Set novo = 1
		}
		Set objNotaFiscal	= $Get(^FATNotaFiscal(0,codigo,1))
		Set $$$FATNotaFiscalNumerodoLote(objNotaFiscal)							= pGlosa
		Set $$$FATNotaFiscalDatadeEmissaoProvisoria(objNotaFiscal)	= $ZDateH($Replace(dados.dataEmissao,"/","-"),3)
		Set $$$FATNotaFiscalTipodeNotaFiscal(objNotaFiscal)					= dados.tipo
		Set $$$FATNotaFiscalFontePagadora(objNotaFiscal)						= dados.fontePagadora
		Set $$$FATNotaFiscalModelodaNotaFiscal(objNotaFiscal)				= dados.modelo
		Set $$$FATNotaFiscalDatadeVencimento(objNotaFiscal)					= $ZDateH($Replace(dados.dataVencimento,"/","-"),3)
		;
		Set objLote			= $Get(^FATLote(0,codLote,1))
		Set modeloLote	= $$$FATLoteModelodeLote(objLote)
		Set objModelo		= $Get(^FATModeloLote(0,modeloLote,1))
		Set $$$FATNotaFiscalRecebedor(objNotaFiscal)								= $$$FATModeloLoteRecebedor(objModelo)
		;
		If dados.tipo=1{
			k ^zzJULIO
			Set valorTot = 0
			Set numAdm = ""
			For {
				Set numAdm = $Order(^FATGlosaAdmissao(YM, pGlosa, numAdm))
				Quit:numAdm=""
				Set numSeq = ""
				For {
					Set numSeq = $Order(^FATGlosaAdmissao(YM, pGlosa, numAdm, numSeq))
					Quit:numSeq=""
					Set objFATGlosaAdmissao = ^FATGlosaAdmissao(YM, pGlosa, numAdm, numSeq,1)
					
					Set valor			= $$$FATGlosaAdmissaoValor(objFATGlosaAdmissao)	
					Set qtdeProc	= $$$FATGlosaAdmissaoQtdeProcedimento(objFATGlosaAdmissao)	
					Set valorTot	= valorTot + (qtdeProc*valor)
					Set codComp = ""
					For {
						Set codComp = $Order(^FATGlosaAdmissaoComp(YM, pGlosa, numAdm, numSeq, codComp))
						Quit:codComp=""
						
						Set objFATGlosaAdmissaoComp = ^FATGlosaAdmissaoComp(YM, pGlosa, numAdm, numSeq, codComp, 1)
						Set valor			= $$$FATGlosaAdmissaoCompValordoProcedimento(objFATGlosaAdmissaoComp)	
						Set qtdeProc	= $$$FATGlosaAdmissaoCompQtdedoProcedimento(objFATGlosaAdmissaoComp)	
						Set descons 	= $$$FATGlosaAdmissaoCompDesconsiderar(objFATGlosaAdmissaoComp)
						Continue:descons=1
						Set valorTot	= valorTot + (qtdeProc*valor)
					}			
				}
			}
			Set valor = valorTot
			Set vlNotas	= ..totalizadorEmitidos(pGlosa).valor
			Set valor = valor - vlNotas
			If valor<0 Set valor = 0
			Set dados.valorTotal = valor
			Do ##Class(VAR.CSP.FATLote).calculaTributos(dados.modelo,dados.valorTotal)
		}
		If '((dados.tipo=1)&&('novo)){
			Set $$$FATNotaFiscalValorTotaldaNF(objNotaFiscal)				= dados.valorTotal
		}
		Set $$$FATNotaFiscalValorTotaldasDeducoes(objNotaFiscal)		= dados.valorDeducoes
		Set $$$FATNotaFiscalDiscriminacaodosServicos(objNotaFiscal)		= dados.discriminacao
		Set $$$FATNotaFiscalStatusdaNotaFiscal(objNotaFiscal)			= 1
		;
		Set strStatus = $$$Save("FATNotaFiscal",codigo,objNotaFiscal,$$$YES)
		Quit:$$$ISERR(strStatus)
		;
		Set strStatus = ##class(VAR.CSP.FATLote).salvaTributosNota(codigo,%request,%session)
		Quit:$$$ISERR(strStatus)
	}
	Catch e {
		#dim e as %Exception.SystemException
		Set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	Set retorno = {}
	If strStatus=$$$OK{
		TCommit
		Set retorno.status 	= 1
		Set retorno.type 	= "success"
		Set retorno.mensagem="Nota Fiscal gerada com sucesso!"
	}Else{
		TRollback
		Set retorno.status = 0
		Set retorno.type 	= "error"
		Set retorno.mensagem = $$$Text(strStatus,1)
	}
	Write retorno.%ToJSON()
	Quit $$$OK]]></Implementation>
</Method>

<Method name="totalizadorEmitidos">
<ClassMethod>1</ClassMethod>
<FormalSpec>lote,fatura=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	Set query = "select CodigodaNotaFiscal,"
	Set query = query_" ValorTotaldaNF"
	Set query = query_" from FATNotaFiscal where company=0 and %upper(NumerodoLote) = '"_lote_"'"
	If fatura'="" Set query = query_" and NumerodaFatura = '"_fatura_"'"
	Set rs = ##class(%SQL.Statement).%ExecDirect("",.query)
	Set retorno = {}
	Set retorno.quantidade = 0
	Set retorno.valor = 0
	While(rs.%Next()){
		Set retorno.quantidade	= retorno.quantidade+1
		Set retorno.valor		= retorno.valor+rs.%Get("ValorTotaldaNF")
	}
	Quit retorno]]></Implementation>
</Method>

<Method name="importaRespostaNF">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM = 0 
	Set Y  = "~"

	Set pGlosa 			= $Get(%request.Data("pGlosa",1))
	Set objFATGlosa = $Get(^FATGlosa(YM, pGlosa, 1))
	Set codLote 		= $$$FATGlosaCodigoLote(objFATGlosa)

	Set notas = $Get(%request.Data("notas",1))
	Set strStatus = $$$OK
	TStart
	Try{
		Set notas	= [].%FromJSON(notas)
		Kill notasFiscais
		Set iterator = notas.%GetIterator()
		While iterator.%GetNext(.indice,.valor){
			Set notasFiscais(valor)=""
		}
		If '$Data(^mtemp.FATLoteArquivoRetorno(job)){
			Set strStatus = "Arquivo de resposta inválido"
		}
		Kill ^zzsilmar
		Merge ^zzsilmar = notasFiscais
		Set linha = ""
		For {
			Set linha 	= $Order(^mtemp.FATLoteArquivoRetorno(job,linha)) Quit:linha=""
			Set obj		= $Get(^mtemp.FATLoteArquivoRetorno(job,linha))
			Set nfes	= $ZStrip($Piece(obj,";",2),"<>w")
			Set dtEmis	= $ZStrip($Piece(obj,";",3),"<>w")
			Set verific	= $ZStrip($Piece(obj,";",4),"<>w")
			Set serie	= $ZStrip($Piece(obj,";",6),"<>w")
			Set rps		= $ZStrip($Piece(obj,";",7),"<>w")
			If rps="" Continue
			If serie="" Set serie = " "
			Set codigoNota = $Order(^FATNotaFiscals(0,3,rps,serie,""))
			If codigoNota="" Continue
			If '$Data(notasFiscais(codigoNota)) Continue
			Set objNotaFiscal	= $Get(^FATNotaFiscal(0,codigoNota,1))
			Set $$$FATNotaFiscalNumerodaNotaFiscal(objNotaFiscal)		= nfes
			Set $$$FATNotaFiscalDatadeEmissao(objNotaFiscal)			= $ZDateTimeH(dtEmis,4)
			Set $$$FATNotaFiscalCodigodeVerificacaodaNFe(objNotaFiscal)	= verific
			Set $$$FATNotaFiscalStatusdaNotaFiscal(objNotaFiscal)		= 3
			Set strStatus = $$$Save("FATNotaFiscal",codigoNota,objNotaFiscal,$$$YES)
			Quit:$$$ISERR(strStatus)
		}
		If $$$ISOK(strStatus){
			Set arquivoAnt 	= $Piece(^mtemp.FATLoteArquivoRetorno(job),"~",1)
			Set nome		= $Piece(^mtemp.FATLoteArquivoRetorno(job),"~",2)
			Do ##Class(VAR.CSP.FATLote).copiaArquivoParaDestino(arquivoAnt,pGlosa_"\"_nome)
			Do ##Class(VAR.CSP.FATLote).removeArquivoTemp(arquivoAnt)
			Kill ^mtemp.FATLoteArquivoRetorno(job)
		}
		
	}
	Catch e {
		#dim e as %Exception.SystemException
		Set strStatus = $system.Status.GetErrorText(e.AsStatus())
	}
	Set retorno = {}
	If strStatus=$$$OK{
		TCommit
		Set retorno.status 	= 1
		Set retorno.type 	= "success"
		Set retorno.mensagem="Dados salvos com sucesso!"
	}Else{
		TRollback
		Set retorno.status = 0
		Set retorno.type 	= "error"
		Set retorno.mensagem = $$$Text(strStatus,1)
	}
	Write retorno.%ToJSON()
	Quit]]></Implementation>
</Method>
</Class>
</Export>