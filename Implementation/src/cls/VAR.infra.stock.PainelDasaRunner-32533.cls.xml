<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.stock.PainelDasaRunner">
<ClassType/>
<IncludeCode>VARLog,WWWConst,VARService</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>VAR.infra.services.ServiceRunner</Super>

<Method name="Register">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..RegisterRunner($$$ServicePainelDasa, $$$ServiceFrequencyDaily, $$$ServicePriorityHighLow, ..%ClassName(1), "Painel Dasa Service")
]]></Implementation>
</Method>

<Method name="Unregister">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..UnregisterRunner($$$ServicePainelDasa, "Painel Dasa Service")
]]></Implementation>
</Method>

<Method name="Execute">
<Description><![CDATA[
set cl = ##class(VAR.infra.stock.PainelDasaRunner).%New()]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..GeraEstoqueDia(+$h)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GeraEstoqueDia">
<Description><![CDATA[
do ##class(VAR.infra.stock.PainelDasaRunner).GeraEstoqueDia($$SQLGetUltimoDiaMes^VARSQL("06",2016))]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dia</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set YM = 0
	set status = $$$OK
	set loc = ""
	
	;kill ^VARSESPainelDASARun(YM,YM,1)
	
	set competencia  = $extract($zdate(Dia,8),1,6)
	if ((competencia > $extract($zdate($horolog,8),1,6) ) || (competencia < 201509)) {
		quit 1
	}
	&SQL(delete from sqluser.VARPainelDasa where competencia =:competencia )
	for {
		set loc = $order(^WWW0121s(0,3,1,0,loc))
		quit:loc=""
		set objLoc = $Get(^WWW0121(0,0,loc,1))
		set item = ""
		set i = 0
		w !,"local: "_loc
		for {
			set item = $order(^INART(0,item))
			quit:item=""
			set (estoque,valorEstoque,custoMedio) = 0
			;set estoque = util.GetEstoqueLocalData(item,loc,Dia)
			do ##class(Tasc.stock.Util).GetDadosEstoque(item,loc,Dia,.estoque,.valorEstoque,.custoMedio)
			if ( estoque > 0) {
				;w !,"item: "_item
				;w !,"Estoque: "_util.GetEstoqueLocalData(item,loc,Dia)
				set id = item_"||"_loc_"||"_$extract($zdate(Dia,8),1,6)
				if (##class(User.VARPainelDasa).%ExistsId(id)) {
					set linha = ##class(User.VARPainelDasa).%OpenId(id)
				}
				else {
					set linha = ##class(User.VARPainelDasa).%New()
				}
				set linha.Competencia = $extract($zdate(Dia,8),1,6)
				set linha.CustoMedio = +custoMedio
				set linha.Item = item
				set linha.Location = loc
				set linha.Quantidade = estoque
				;set linha.QtdeEmTransito = util.GetTransitoLocalData(item,loc,Dia)
				set linha.Regional = ##class(Tasc.stock.Util).GetCDPorLocal(loc)
				set linha.EstoqueTotalLocal = valorEstoque
				if ($$SQLIsCD^VARSQL(loc)) {
					set linha.Tipo = 0
				}
				else {
					set linha.Tipo = $$$WWW0121FREE21(objLoc)
				}
				set linha.GrupoItem = $$SQLGetGrupoItem^VARSQL(item)
				set linha.GrupoPai = $$SQLGetGrupoPai^VARSQL(linha.GrupoItem)
				set linha.Unidade =  ##class(Tasc.stock.Util).GetUnidade(loc)
				set strStatus = linha.%Save(1)
				if ('$$$ISOK(strStatus)) {
					set ^CacheTempPainelError("ERROPAINELLINHA",$i(^CacheTempPainelError)) = "Erro ao salvar~"_strStatus
				}
				set i = i +1
			}
		} 
	}
	
	set ^CacheTempPainelError("DEBUGGERAPAINEL","FIMATUALIZALINHA",$i(^CacheTempPainelError)) = i
	
	; Atualiza a nova estrutura
	do Load^VARDasaLoadDataPainel($extract($zdate(Dia,8),1,6))
	
	set ^VARSESPainelDASARun(YM,YM,1) = $piece($horolog,",",1)_Y_$piece($horolog,",",2)_Y_YBED
	do AtualizaResumoPaineis^VARPaineisEstoque(competencia)
	set ^CacheTempPainelError("DEBUGGERAPAINEL","ATUALIZAPAINEIS",$i(^CacheTempPainelError)) = $horolog
	
	; Atualiza a lista com a data de cadastro dos locais
	do AtualizaDataCadastroLocal^VARPainelUtil
	set ^CacheTempPainelError("DEBUGGERAPAINEL","ATUALIZACADLOCAL",$i(^CacheTempPainelError)) = $horolog
	
	quit status
]]></Implementation>
</Method>

<Method name="GeraEstoqueDiaDebug">
<ClassMethod>1</ClassMethod>
<FormalSpec>Dia,pLocal=""</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill ^CacheTempFelipe($zn,"DEBUGPAINEL")
	set YM = 0
	set status = $$$OK
	set loc = ""
	
	;kill ^VARSESPainelDASARun(YM,YM,1)
	
	set competencia  = $extract($zdate(Dia,8),1,6)
	if ((competencia > $extract($zdate($horolog,8),1,6) ) || (competencia < 201509)) {
		quit 1
	}
	
	for {
		set loc = $order(^WWW0121s(0,3,1,0,loc))
		quit:loc=""
		
		if (loc '= pLocal) continue
		
		set objLoc = $Get(^WWW0121(0,0,loc,1))
		set item = ""
		set i = 0
		w !,"local: "_loc
		for {
			set item = $order(^INART(0,item))
			quit:item=""
			set (estoque,valorEstoque,custoMedio) = 0
			
			do ##class(Tasc.stock.Util).GetDadosEstoque(item,loc,Dia,.estoque,.valorEstoque,.custoMedio)
			
			if ( estoque > 0) {
				set ^CacheTempFelipe = $i(^CacheTempFelipe)
				set ^CacheTempFelipe($zn,"DEBUGPAINEL",^CacheTempFelipe,$extract($zdate(Dia,8),1,6),loc,item) = +custoMedio_"~"_estoque_"~"_valorEstoque
				set id = item_"||"_loc_"||"_$extract($zdate(Dia,8),1,6)
				if (##class(User.VARPainelDasa).%ExistsId(id)) {
					set ^CacheTempFelipe($zn,"DEBUGPAINEL",^CacheTempFelipe,$extract($zdate(Dia,8),1,6),loc,item,"NOVO") = 0
					set linha = ##class(User.VARPainelDasa).%OpenId(id)
				}
				else {
					set ^CacheTempFelipe($zn,"DEBUGPAINEL",^CacheTempFelipe,$extract($zdate(Dia,8),1,6),loc,item,"NOVO") = 1
					set linha = ##class(User.VARPainelDasa).%New()
				}
				set linha.Competencia = $extract($zdate(Dia,8),1,6)
				set linha.CustoMedio = +custoMedio
				set linha.Item = item
				set linha.Location = loc
				set linha.Quantidade = estoque
				set linha.Regional = ##class(Tasc.stock.Util).GetCDPorLocal(loc)
				set linha.EstoqueTotalLocal = valorEstoque
				if ($$SQLIsCD^VARSQL(loc)) {
					set linha.Tipo = 0
				}
				else {
					set linha.Tipo = $$$WWW0121FREE21(objLoc)
				}
				set linha.GrupoItem = $$SQLGetGrupoItem^VARSQL(item)
				set linha.GrupoPai = $$SQLGetGrupoPai^VARSQL(linha.GrupoItem)
				set linha.Unidade =  ##class(Tasc.stock.Util).GetUnidade(loc)
				set strStatus = linha.%Save(1)
				set ^CacheTempFelipe($zn,"DEBUGPAINEL",^CacheTempFelipe,$extract($zdate(Dia,8),1,6),loc,item,"STATUS") = strStatus
				set i = i +1
			}	
		} 
	}
	
	quit status
]]></Implementation>
</Method>
</Class>
</Export>