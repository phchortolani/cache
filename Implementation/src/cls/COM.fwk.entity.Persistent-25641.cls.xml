<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="COM.fwk.entity.Persistent">
<Description><![CDATA[
Represents a persistent @nM entity.

<p>

In the architecture, this class must be the base class
for all the objects in the persistent layer.

<p>

Deals with all knowledge a persistent class must own: 
convenience methods for executing specific queries, methods
for generic queries, default callback methods for dealing 
with integration issues with @nM, and exception handling methods.

<p>

Author: Pablo Gandulfo - Disclinc Brasil
Author: Tharsis Campos - Disclinc Brasil
Author: Francisco Lima - Disclinc Brasil
]]></Description>
<Abstract>1</Abstract>
<ClassType/>
<Import>COM.fwk.exception,COM.fwk.www.bo</Import>
<IncludeCode>COMSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Library.Persistent</Super>
<LegacyInstanceContext>1</LegacyInstanceContext>


<Method name="listEntities">
<Description><![CDATA[

This method takes the specified query and executes it. With 
the result set in hands, for each line returned, it uses the
first field in the field list to load the persistent entity
that derives from this class. So, returns a list of these
entities.

<p>

If the query has parameters, they can be passed as parameters, to
the maximum of 5 parameters.

<p>

Note that the first column of the query must be the Id of the
persistent entity, otherwise the entities won't be loaded.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>query:%String,queryParam1:%String,queryParam2:%String,queryParam3:%String,queryParam4:%String,queryParam5:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set paramsList = ##class(%ListOfDataTypes).%New()
	
	do:$data(queryParam1) paramsList.Insert(queryParam1)
	do:$data(queryParam2) paramsList.Insert(queryParam2)
	do:$data(queryParam3) paramsList.Insert(queryParam3)
	do:$data(queryParam4) paramsList.Insert(queryParam4)
	do:$data(queryParam5) paramsList.Insert(queryParam5)
	
	quit ..listEntitiesList(query, paramsList)
]]></Implementation>
</Method>

<Method name="listEntitiesList">
<Description><![CDATA[
Loads a list of objects from the database.

<p>

Parameter: query - the SQL query for the entity. Note that the first column 
of the query must be the Id of the persistent entity.<BR>
Parameter: paramsList - a list of parameters that will be used on the query

<p>

Returns: a list of the database objects.

<p>

Author: Francisco Fiuza Lima - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>query:%String,paramsList:%ListOfDataTypes</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set rs = ..executeQueryList(query, paramsList)
	set entities = ##class(%ListOfObjects).%New()
	
	while (rs.Next()) {
		do entities.Insert(..%OpenId(rs.GetData(1)))
	} 
	quit entities
]]></Implementation>
</Method>

<Method name="executeQuery">
<Description><![CDATA[
Executes a query.

<p>

Parameter: query - the query to be executed.<br>
Parameter: queryParams - the parameters to be used on the query.

<p>

returns: a Result Set for the executed query.

<p>

Author: Francisco Fiuza Lima - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>query:%String,queryParam1:%String,queryParam2:%String,queryParam3:%String,queryParam4:%String,queryParam5:%String</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	set paramsList = ##class(%ListOfDataTypes).%New()
	
	do:$data(queryParam1) paramsList.Insert(queryParam1)
	do:$data(queryParam2) paramsList.Insert(queryParam2)
	do:$data(queryParam3) paramsList.Insert(queryParam3)
	do:$data(queryParam4) paramsList.Insert(queryParam4)
	do:$data(queryParam5) paramsList.Insert(queryParam5)
	
	quit ..executeQueryList(query, paramsList)
]]></Implementation>
</Method>

<Method name="executeQueryList">
<Description><![CDATA[
Executes a query.

<p>

Parameter: query - the query to be executed.<br>
Parameter: paramsList - a list of parameters to be used on the query.

<p>

returns: a Result Set for the executed query.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>query:%String,paramsList:%ListOfDataTypes</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	
	;write "query: "_query_"<BR>"
	;write "count: "_paramsList.Count()_"<BR>"
	set rs = ..prepareQuery(query)
	
	if paramsList.Count() = 0
	{
		do rs.Execute()
	}
	elseif paramsList.Count() = 1
	{
		do rs.Execute(paramsList.GetAt(1))
	}
	elseif paramsList.Count() = 2
	{
		do rs.Execute(paramsList.GetAt(1), paramsList.GetAt(2))
	}
	elseif paramsList.Count() = 3
	{
		do rs.Execute(paramsList.GetAt(1), paramsList.GetAt(2), paramsList.GetAt(3))
	}
	elseif paramsList.Count() = 4
	{
		do rs.Execute(paramsList.GetAt(1), paramsList.GetAt(2), paramsList.GetAt(3), paramsList.GetAt(4))
	}
	elseif paramsList.Count() = 5
	{
		do rs.Execute(paramsList.GetAt(1), paramsList.GetAt(2), paramsList.GetAt(3), paramsList.GetAt(4), paramsList.GetAt(5))
	}
	
	quit rs
]]></Implementation>
</Method>

<Method name="prepareQuery">
<Description><![CDATA[
Prepares a query for the given sql code.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sql:%String</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	set rs = ##class(%ResultSet).%New()
	
	do rs.Prepare(sql)
	
	quit rs
]]></Implementation>
</Method>

<Method name="closeQuery">
<Description><![CDATA[
Closes a resultSet.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rs:%ResultSet</FormalSpec>
<Implementation><![CDATA[	do rs.Close()
]]></Implementation>
</Method>

<Method name="getObjectProperty">
<ClassMethod>1</ClassMethod>
<FormalSpec>objectORef:%ObjectHandle,propertyName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    ;-------------------------------------------------------------------------------
    ; 
    ;
    ; Returns:
    ;
    ; History:
    ; 26-Jul-2006	shobby		SRBR014039: Check if objectORef exists first.
    ;-------------------------------------------------------------------------------
    ;
    if objectORef'=$$$NULLOREF { ;BR014039
	  quit $ZOBJMETHOD(objectORef, propertyName _ "Get")
    }
	//if objectORef'=$$$NULLOREF { ;BR014039
	//	do $ZOBJMETHOD(objectORef, propertyName_"Set", value)
	//}
]]></Implementation>
</Method>

<Method name="setObjectProperty">
<Description><![CDATA[
This is a generic method to returns the property of any object, given the property name.

<p>

parameter: objectORef - the object reference.<br>
parameter: propertyName - the name of the property.

<p>

returns the value os the property

<p>

Author: Tharsis Campos - Disclinc Brasil

This is a generic method to set the property of any object, given the property name.

<p>

parameter: objectORef - the object reference.<br>
parameter: propertyName - the name of the property.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>objectORef:%ObjectHandle,propertyName:%String,value:%String</FormalSpec>
<Implementation><![CDATA[	do $ZOBJMETHOD(objectORef, propertyName _ "Set", value)
]]></Implementation>
</Method>

<Method name="loadPersistentEntity">
<Description><![CDATA[
This is a generic method to load an Entity from the database.

<p>

parameter: persistentEntityName - the name of the entity.<br>
parameter: persistentEntityId - the id of the entity. This is the %Id
property of an object that is the ID column of the table.

<p>

returns the entity.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>persistentEntityName:%String,persistentEntityId:%String</FormalSpec>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[	quit $System.OBJ.OpenId(persistentEntityName, persistentEntityId)
]]></Implementation>
</Method>

<Method name="persistentIdToNManagerId">
<Description><![CDATA[

Converts a persistent id to respective net manager id.

<p>

Conversion: companyCode||pk1||pk2||...||pkn turns to
pk1,pk2,...,pkn.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>persistentId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set companyRemoved = $extract(persistentId, $find(persistentId, "||"), $length(persistentId))
	quit ##class(COM.fwk.util.StringUtil).substituteString(companyRemoved, "||", ",")
]]></Implementation>
</Method>

<Method name="nManagerIdToPersistentId">
<Description><![CDATA[

Converts a persistent id to respective net manager id.

<p>

Conversion: companyCode||pk1||pk2||...||pkn turns to
pk1,pk2,...,pkn.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>nManagerId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set id = ##class(COM.fwk.util.StringUtil).substituteString(nManagerId, ",", "||")

	set companyCode = ..getSession().getCurrentCompanyCode()
	
	quit companyCode _ "||" _ id
]]></Implementation>
</Method>

<Method name="IdGet">
<Description><![CDATA[
Returns the %Id of an Object. This method exists so the developer can access the Id
property doing object.Id instead of doing object.%Id().<br> 
This is just a convenience method to give the option to the developer to use an 
accessor method for the %Id property.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..%Id()
]]></Implementation>
</Method>

<Method name="nManagerIdGet">
<Description><![CDATA[

Converts a persistent id to respective net manager id.

<p>

Conversion: companyCode||pk1||pk2||...||pkn turns to
pk1,pk2,...,pkn.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..persistentIdToNManagerId(..%Id())
]]></Implementation>
</Method>

<Method name="getSession">
<Description><![CDATA[
returns a session object.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>COM.fwk.Session</ReturnType>
<Implementation><![CDATA[
	// TODO: must be a singleton or one instance 
	// per object. One instance per call is bad-bad.
	quit ##class(COM.fwk.Session).%New()
]]></Implementation>
</Method>

<Method name="getFormDefinition">
<Description><![CDATA[
returns a @net Manager form register. This method is obsolete and will be replaced
by one that returns a Form object.

<p>

Author: Pablo Gandulfo - Disclinc Brasil

[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tableName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit:(tableName = "") ("")
	quit:('$data(^WWW120(0, tableName, 1))) ("")
	
	quit ^WWW120(0, tableName, 1)
]]></Implementation>
</Method>

<Method name="getClassFieldDefinition">
<Description><![CDATA[
returns a @net Manager class field register. This method is obsolete and will be replaced
by one that returns a Class Field object.

<p>

Author: Pablo Gandulfo - Disclinc Brasil

[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tableName:%String,indexField:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit:(tableName = "") ("")
	quit:(indexField = "") ("")
	quit:('$data(^WWW003(0, tableName, indexField, 1))) ("")
	
	quit ^WWW003(0, tableName, indexField, 1)
]]></Implementation>
</Method>

<Method name="initialize">
<Description><![CDATA[
This method initialize the %className, %tableName, %schemaName and %primaryKeyNames
atributes.

<p>

Author: Tharsis Campos - Disclinc Brasil

[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	;quit:+$get(%initialized)=1
	
	set %className = ..%ClassName(1)
	set %tableName = ..%ClassName(0)
	set %schemaName = ..getSchemaName(%className)

	set class = ##class(%Dictionary.ClassDefinition).%OpenId(%className)
	;set class = ##class(%ClassDefinition).%OpenId(%className)

	if class '= "" {
		for i = 1:1:class.Indices.Count() {
			if class.Indices.GetAt(i).PrimaryKey {
				set %primaryKeyNames = class.Indices.GetAt(i).Properties
			}
		}
	}

	;set %initialized=1
	quit
]]></Implementation>
</Method>

<Method name="getSchemaName">
<Description><![CDATA[
Returns the schemaName for a given className.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<Implementation><![CDATA[
	//[ Private ] {
	
	if (className = "") {
		quit ""
	}
	
	set counter = 0
	
	do {
		set counter = counter + 1
		
	} while ($piece(className, ".", counter) '= "")
	
	set piecesCount = counter - 1
	set schemaName = ""
	
	for i = 1 : 1 {
		
		set schemaName = schemaName _ $piece(className, ".", i)
		
		if (i < (piecesCount - 1)) {
			set schemaName = schemaName _ "_"
			
		} else {
			quit
		}
	}
	
	quit schemaName
]]></Implementation>
</Method>

<Method name="getObjectById">
<Description><![CDATA[
Returns an object given its Id.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%ObjectHandle</ReturnType>
<Implementation><![CDATA[
	do ..initialize()
	
	set resultObj = $System.OBJ.OpenId(%className, id)
	if '$isObject(resultObj) {
	  set resultObj = $$$NULLOREF
	}
	
	set %object = resultObj
	
	quit resultObj
]]></Implementation>
</Method>

<Method name="findByPrimaryKey">
<Description><![CDATA[
Returns a entity given its primary keys.<br>
You may omit the company number on the key List.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>primaryKeyValue1:%String,primaryKeyValue2:%String,primaryKeyValue3:%String,primaryKeyValue4:%String,primaryKeyValue5:%String</FormalSpec>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[
	set keyList = ##class(%ListOfDataTypes).%New()
	
	if $data(primaryKeyValue1)
	{
		do keyList.Insert(primaryKeyValue1)
	}
	if $data(primaryKeyValue2)
	{
		do keyList.Insert(primaryKeyValue2)
	}
	if $data(primaryKeyValue3)
	{
		do keyList.Insert(primaryKeyValue3)
	}
	if $data(primaryKeyValue4)
	{
		do keyList.Insert(primaryKeyValue4)
	}
	if $data(primaryKeyValue5)
	{
		do keyList.Insert(primaryKeyValue5)
	}
	
	quit ..findByPrimaryKeyList(keyList)
]]></Implementation>
</Method>

<Method name="findByPrimaryKeyList">
<Description><![CDATA[
Returns a entity given its primary keys in a list of objects.<br>
You may omit the company number on the key List.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>keyList:%ListOfDataTypes</FormalSpec>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[
	;set totalKeys = $piece($SYSTEM.SYS.TimeStamp(), ",", 2)

	set globalSeparator = ..getSession().getGlobalSeparator()
	do ..initialize()

	// If the lenght of the keyList is less then the primary keys number, the user might have
	// omitted the company number.
	if keyList.Count() < $length(%primaryKeyNames, ",")
	{
		do keyList.InsertAt(..getClassCompanyKey(..%ClassName(1)), 1)
	}
	
	// If the lenght of the keyList is different then the primary keys number, then
	// the user provided a wrong number of key values.
	if keyList.Count() '= $length(%primaryKeyNames, ",")
	{
		do ..raiseRuntimeException("Wrong number of primary keys provided.")
	}

	// On the first key, we dont concatenate the ||.
	set persistentEntityId = keyList.GetAt(1)

	for i = 2:1:keyList.Count()
	{
		set persistentEntityId = persistentEntityId _ "||" _keyList.GetAt(i)
	}

	;write "<BR>findByPrimaryKeyList (""): "_($piece($SYSTEM.SYS.TimeStamp(), ",", 2) - totalKeys)

	quit ..loadPersistentEntity(%className, persistentEntityId)
]]></Implementation>
</Method>

<Method name="getFirst">
<Description><![CDATA[
Returns the first object from the database ordered by its %Id.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%ObjectHandle</ReturnType>
<Implementation><![CDATA[
	do ..initialize()
	
	set resultSet = ""
	
	do ..prepareQuery(.resultSet,
	     " SELECT Min(%Id) AS Id "_
	     " FROM   " _ %schemaName _ "." _%tableName_" ")
	do resultSet.Execute()
	
	set resultId = ""
	
	if resultSet.Next() {
		set resultId = resultSet.Data("Id")
	} else {
		set resultId = ""
	}

	do ..closeQuery(.resultSet)

    quit ..getObjectById(resultId)
]]></Implementation>
</Method>

<Method name="getPrevious">
<Description><![CDATA[
Returns the previous object from the database given an object based on their %Id.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>obj:%ObjectHandle=""</FormalSpec>
<ReturnType>%ObjectHandle</ReturnType>
<Implementation><![CDATA[
	do ..initialize()
	
	set resultSet = ""
	
	if obj = "" {
		set obj = %object
	}
	
	set id = obj.%Id()
	
	do ..prepareQuery(.resultSet,
	     " SELECT Max(%Id) AS Id "_
	     " FROM   " _ %schemaName _ "." _%tableName_" "_
	     " WHERE  %Id < ?        ")
	do resultSet.Execute(id)
	
	set resultId = ""
	
	if resultSet.Next() {
		set resultId = resultSet.Data("Id")
	} else {
		set resultId = ""
	}

	do ..closeQuery(.resultSet)

    quit ..getObjectById(resultId)
]]></Implementation>
</Method>

<Method name="getNext">
<Description><![CDATA[
Returns the next object from the database given an object based on their %Id.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>obj:%ObjectHandle=""</FormalSpec>
<ReturnType>%ObjectHandle</ReturnType>
<Implementation><![CDATA[
	do ..initialize()
	
	if obj = "" {
		set obj = %object
	}
	
	set id = obj.%Id()
	set resultSet = ""

	do ..prepareQuery(.resultSet,
	     " SELECT Min(%Id) AS Id "_
	     " FROM   " _ %schemaName _ "." _%tableName_" "_
	     " WHERE  %Id > ?        ")
	
	do resultSet.Execute(id)

	set resultId = ""
	
	if resultSet.Next() {
		set resultId = resultSet.Data("Id")
	} else {
		set resultId = ""
	}

	do ..closeQuery(.resultSet)

    quit ..getObjectById(resultId)
]]></Implementation>
</Method>

<Method name="getLast">
<Description><![CDATA[
Returns the last object from the database ordered by its %Id.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%ObjectHandle</ReturnType>
<Implementation><![CDATA[
	do ..initialize()
	
	set resultSet = ""

	do ..prepareQuery(.resultSet,
	     " SELECT Max(%Id) AS Id "_
	     " FROM   " _ %schemaName _ "." _%tableName_" ")

	do resultSet.Execute()

	set resultId = ""

	if resultSet.Next() {
		set resultId = resultSet.Data("Id")
	} else {
		set resultId = ""
	}

	do ..closeQuery(.resultSet)

    quit ..getObjectById(resultId)
]]></Implementation>
</Method>

<Method name="getPrimaryKeyValues">
<Description><![CDATA[
Returns the primary key values of the object.<br>
The key will be returned using comman as delimeter, i.e.: "key1,key2,key3"
If the global format is set to true the ",1" will be added to the keys.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<FormalSpec>globalFormat:%Boolean</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set offset = ""

	if (globalFormat) {
		set offset = 1

	} else {
		set offset = 0
	}

	set primaryKeyValues = ""

	for i = 1:1:$length(%primaryKeyNames, ",") {
		set $piece(primaryKeyValues, ",", i) = $ZObjProperty(##this, $piece(%primaryKeyNames, ",", i + offset))
	}
	if globalFormat {
		set $piece(primaryKeyValues, ",", $length(%primaryKeyNames, ",") + 1) = "1"
	}
	quit primaryKeyValues
]]></Implementation>
</Method>

<Method name="getGlobalData">
<Description><![CDATA[
returns the data as is stored in the globals.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	do ..initialize()
	
	set data = ""

	set execString = "set data = ^"_%tableName_"("_..getPrimaryKeyValues(1)_")"

	xecute execString

	quit data
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<Description><![CDATA[
Before saving any entity, this method checks if the keys has been defined. If not, it
will get the next one based on its Numerator. It also fills in the object protocols date
fields

<p>

Author: Pablo Gandulfo - Disclinc Brasil
Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..initialize()
	
	set globalSeparator = ..getSession().getGlobalSeparator()
	set currentUserName = ..getSession().getCurrentUserName()
	
	
	set formDefinition = ..getFormDefinition(%tableName)
	
	if insert {
		quit:($length(%primaryKeyNames, ",") = 1) (0)
		
		if $ZObjProperty(##this, $piece(%primaryKeyNames, ",", 1)) = "" {
			set $ZObjProperty(##this, $piece(%primaryKeyNames, ",", 1)) = ..getClassCompanyKey(%tableName)
		}
		
		; Pendente: Tem que mudar de company

		if ($ZObjProperty(##this, $piece(%primaryKeyNames, ",", $length(%primaryKeyNames, ","))) = "+") ||
	       (+$ZObjProperty(##this, $piece(%primaryKeyNames, ",", $length(%primaryKeyNames, ","))) = -1) {
			set newPrimaryKeyValue = ""
			if $length(%primaryKeyNames, ",") = 2 {
				set newPrimaryKeyValue = $$^WWWNEXT(%tableName)
			} elseif $length(%primaryKeyNames, ",") > 2 {
				set primaryKeyValues = ""
				set primaryKeyValues = ..getPrimaryKeyValues(0)
				set primaryKeyValues = $piece(primaryKeyValues, ",", 2, $length(primaryKeyValues, ",") - 1)
				set newPrimaryKeyValue = $$^WWWNEXT1(%tableName, primaryKeyValues, $length(%primaryKeyNames, ",") - 1)
			}
			set $ZObjProperty(##this, $piece(%primaryKeyNames, ",", $length(%primaryKeyNames, ","))) = newPrimaryKeyValue
		}

		if formDefinition '= "" {
			set entryDateField = ""
			set enteredByField = ""
			set entryDateField = $piece(..getClassFieldDefinition(%tableName,
			                                                      $piece(formDefinition, globalSeparator, 25)),
			                            globalSeparator,
			                            25)
			if entryDateField '= "" {
				set $ZObjProperty(##this, entryDateField) = +$horolog
			}
		
			set enteredByField = $piece(..getClassFieldDefinition(%tableName,
			                                                      $piece(formDefinition, globalSeparator, 26)),
			                            globalSeparator,
			                            25)
			if enteredByField '= "" {
				set $ZObjProperty(##this, enteredByField) = currentUserName
			}
		}
	}

	if formDefinition '= "" {	
		set dateModifiedField = ""
		set modifiedByField = ""
		set dateModifiedField = $piece(..getClassFieldDefinition(%tableName,
		                                                         $piece(formDefinition, globalSeparator, 27)),
		                               globalSeparator,
		                               25)
		if dateModifiedField '= "" {
			set $ZObjProperty(##this, dateModifiedField) = +$horolog
		} 
	
		set modifiedByField = $piece(..getClassFieldDefinition(%tableName,
		                                                       $piece(formDefinition, globalSeparator, 28)),
		                             globalSeparator,
		                             25)
		if modifiedByField '= "" {
			set $ZObjProperty(##this, modifiedByField) = currentUserName
		}
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnAfterSave">
<FormalSpec>useractualtype:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 	// TODO deveria chamar o WWWSPEI, ver com Frank o que fazer.
	quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; 
	; History
	; 17-Feb-2006 	hjrb	SR14178: Error caused by UNDEFINED YFELD when WWWFORM5 called
	;-------------------------------------------------------------------------------
	;

	do ..initialize()
	
	set globalSeparator = ..getSession().getGlobalSeparator()
	
	quit:(%tableName = "") (0)
	
	set YVOR = $get(^WWW120(0, %tableName, 1))
	
	set YFLN = ""
	set YXXFORM = ""
	set YXXDATEI = ""
	set YFELD = ""

	do ##class(COM.fwk.Request).%New().setCurrentRecord("")	// SR14178
	
	// execute some routines linked with the saving process
	do ^WWWFORM5
	
	if $piece(YVOR, globalSeparator,  17) '= "" {
		xecute $piece(YVOR, globalSeparator, 17)
		quit:($piece(YVOR, globalSeparator, 129) '= 1) (0)
	}
	
	if $piece(YVOR, globalSeparator, 73) = 1 {
		do SUBKILL^WWWKILL
	}
	
	if $piece(YVOR, globalSeparator, 127) '= "" {
		do SUBKILL1^WWWKILL
	}

	quit $$$OK
]]></Implementation>
</Method>

<Method name="Clone">
<FormalSpec>fixPrimaryKeyValue1:%String="",fixPrimaryKeyValue2:%String="",fixPrimaryKeyValue3:%String="",fixPrimaryKeyValue4:%String="",fixPrimaryKeyValue5:%String="",fixPrimaryKeyValue6:%String="",fixPrimaryKeyValue7:%String="",fixPrimaryKeyValue8:%String="",fixPrimaryKeyValue9:%String="",fixPrimaryKeyValue10:%String=""</FormalSpec>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[
 	set fixPrimaryKeyValues = ""
 	set i = ""
	set fixPrimaryKeyValues = fixPrimaryKeyValue1
	for i=2:1:10 {
		if @("fixPrimaryKeyValue"_i) '= "" {
			set fixPrimaryKeyValues = fixPrimaryKeyValues_","_
			                          @("fixPrimaryKeyValue"_i)
		}
	}

	do ..initialize()
	
	quit:($length(%primaryKeyNames, ",") = 1) (0)

    TSTART

	set cloneObj = ""
	set cloneObj = $System.OBJ.New(%className)
	if '$isObject(cloneObj) {
	    TROLLBACK
		quit $$$NULLOREF
	}

	set class = ""
	set class = ##class(%Dictionary.ClassDefinition).%OpenId(%className)
	quit:(class = "")
	
	for i = 1:1:class.Properties.Count() {
		if 'class.Properties.GetAt(i).ReadOnly {
			set $ZObjProperty(cloneObj, class.Properties.GetAt(i).Name) = $ZObjProperty(##this, class.Properties.GetAt(i).Name)
			
			if class.Properties.GetAt(i).Type = "%Date" {
				set $ZObjProperty(cloneObj, class.Properties.GetAt(i).Name) = +$ZObjProperty(cloneObj, class.Properties.GetAt(i).Name)
			}
		}
	}

	for i = 1:1:$length(fixPrimaryKeyValues, ",") {
		if $piece(fixPrimaryKeyValues, ",", i) '= "" {
			set $ZObjProperty(cloneObj, $piece(%primaryKeyNames, ",", i)) = $piece(fixPrimaryKeyValues, ",", i)
		}
	}
	
	set $ZObjProperty(cloneObj, $piece(%primaryKeyNames, ",", $length(%primaryKeyNames, ","))) = -1
	
	set sc = ""
	set sc = cloneObj.save()
	
	if ($$$ISERR(sc)) {
		do $System.Status.DisplayError(sc)
	    TROLLBACK
		quit $$$NULLOREF
	} else {
    	TCOMMIT
		quit cloneObj
	}
]]></Implementation>
</Method>

<Method name="getClassCompanyKey">
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	;write "<BR>getClassCompanyKey: "_className
	set bo = ##class(COM.fwk.www.bo.ClassBO).%New()
	
	if (bo.isSharedClass(className)) {
		quit 0
	
	} else {
		quit ..getSession().getCurrentCompanyCode()
	}
]]></Implementation>
</Method>

<Method name="raiseException">
<ClassMethod>1</ClassMethod>
<FormalSpec>exception:BaseException</FormalSpec>
<Implementation><![CDATA[
	set %COMfwkException = exception
	set $ECODE = %COMfwkException
]]></Implementation>
</Method>

<Method name="raiseRuntimeException">
<ClassMethod>1</ClassMethod>
<FormalSpec>exceptionDescription:%String</FormalSpec>
<Implementation><![CDATA[	do ..raiseException(##class(RuntimeException).%New(exceptionDescription, $get(%COMfwkException)))
]]></Implementation>
</Method>

<Method name="getNextKey">
<Description><![CDATA[

Returns the next primary key for the Entity.
If the Entity has 3 primary keys, the first two must be provided and so on.

<p>

Author: Francisco Fiuza Lima - Disclinc Brasil 

<p>

Throws: COM.fwk.exception.BusinessException - If you provide more the 2 keys.
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>keyList:%ListOfDataTypes</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(ClassBO).%New().getNextKey(..%ClassName(1), keyList)
]]></Implementation>
</Method>

<Method name="save">
<Description><![CDATA[

Saves the persistent entity.

<p>

Must be called instead of %Save() Cachè method,
because it deals with exception treatment and
with concurrent edition in the same entity.

<p>

If the param <param>overwriteConcurrentEditions</param> 
is true, goes through all editions being done 
over this entity (WWWDATEN) and overwrite the edition data with
the new data saved. This practice should be avoided, 
because edition data will probably be lost.

<p>

Author: Frank Lima - Disclinc Brasil,
        Tharsis Campos - Disclinc Brasil
        ]]></Description>
<FormalSpec>overwriteConcurrentEditions:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; 
	; History
	; 06-Feb-2006	hjrb	SR14178:Use of save alone did not update indexes, added call WWWSPEI
	; 17-Feb-2006 	hjrb	SR14178:Preserved call to %Save to enable %OnAfterSave()
	; 24-Feb-2006 	hjrb	SR14178:Changed call to %Save to %OnAfterSave()
	;-------------------------------------------------------------------------------
	;
	if (overwriteConcurrentEditions) {
		do ..overwriteConcurrentEditions()
	}

	set oldTrap = $ETRAP
	set $ETRAP = ""
	
	; new code SR14178			
	; 
	if %this.%Id() = "" {
		set pkList = ##class(ClassPKBO).%New().listByClass(..%ClassName(1))
		set count = pkList.Count()
	
		set keys = ""
		for i = 1 : 1 : count {
			set pkDTO = pkList.GetAt(i)
			set key = ##class(COM.fwk.entity.Persistent).getObjectProperty(%this,pkDTO.fieldName)	
			if keys = "" {
				set keys = key
			} else {
				set keys = keys _ "," _ key
			}
		}	

		set id = ..nManagerIdToPersistentId(keys)

		do %this.%IdSet(id)

	} else {
		set keys = ##class(COM.fwk.entity.PersistentUtil).persistentIdToNManagerId(%this.%Id())	
	}
	
	set globalRecord = ##class(PersistentUtil).persistentObjectToGlobalRecord(..%ClassName(1), %this)	
	set status = $$^WWWSPEI(..%ClassName(1),keys,globalRecord,1)										
	
	if status '= 1	{												
		set $ETRAP = oldTrap										
		do ..raiseRuntimeException(##class(COM.fwk.biz.BO).%New().getLanguageText("ERR00221"))	
	}
	;
	;	SR14178 - end of new code
	;
	
	;set status = ..%Save() 		// SR14178
	set status = ..%OnAfterSave(0) 	// SR14178
	 
	set $ETRAP = oldTrap
	
	if $$$ISERR(status)	{
		do ..raiseStatusException(status)
	}
]]></Implementation>
</Method>

<Method name="overwriteConcurrentEditions">
<Description><![CDATA[

Goes through all editions being done over
this entity and overwrite the edition data
with the new data saved. Only overwrites the
changed fields (the difference between the data
base version and the saving version of the
entity).

<p>

This practice should be avoided, because edition 
data will probably be lost.

<p>

Implementation details: as this method is called
on a entity under saving, first creates a copy
of the entity itself (that have the new values to be
saved), then reload this entity's
data from the database, so it is possible to know
exactly what fields have changed. 

<p>

It gets the list of changed fields and, for each
field changed, gets its piece number and its new
value, organizing them into lists.

<p>

Then gets all forms that uses the under saving
entity and, for each form, updates all edition
data that exists for the primary key of this
entity.

<p>

Then, copy the original new values to the current
entity. As this method is called by the save method,
the entity will be normaly saved after this process.

<p> 


Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<Private>1</Private>
<Implementation><![CDATA[
	
	// 1. first creates a copy of the entity itself (that 
	//    have the new values to be saved)
	
	set copyOfEntityToBeSaved = $System.OBJ.New(..%ClassName(1))
	do ##class(PersistentUtil).copyObjectProperties(##this, copyOfEntityToBeSaved) 
	
	//  2. then reload this entity's data from the database, 
	//     so it is possible to know exactly what fields have changed
	
	do ..%Reload()
	
	// 3. It gets the list of changed fields
	
	set changedPropertiesList = ##class(PersistentUtil).listPropertiesChanged(##this, copyOfEntityToBeSaved)
	
	// 4. gets the piece number and new value of the changed fields,
	//    organizing them into lists
	
	set fieldNumberList = ##class(%ListOfDataTypes).%New()
	set newValueList = ##class(%ListOfDataTypes).%New()

	for i = 1 : 1 : changedPropertiesList.Count() {
		set changedPropertyName = changedPropertiesList.GetAt(i)

		do fieldNumberList.Insert(##class(COM.fwk.www.bo.ClassFieldBO).%New().getFieldNumberByPropertyName(..%ClassName(1), changedPropertyName))
		do newValueList.Insert(##class(PersistentUtil).getObjectProperty(copyOfEntityToBeSaved, changedPropertyName))
	}

	// 5. Then gets all forms that uses the under saving entity
	
	set formNamesThatUsesThisEntity = ##class(FormBO).%New().listFormNamesByClass(..%ClassName(1))
	
	// 6. for each form, updates all edition data that exists 
	//    for the primary key of this entity.
	
	for i = 1 : 1 : formNamesThatUsesThisEntity.Count() {
		
		do ##class(COM.fwk.www.bo.FormBO).%New().updateEditionData(
				formNamesThatUsesThisEntity.GetAt(i), 
				..persistentIdToNManagerId(..%Id()), 
				fieldNumberList,
				newValueList)
	}
	
	// 7. Then, copy the original new values to the current
	//    entity. As this method is called by the save method,
	//    the entity will be normaly saved after this process

	do ##class(PersistentUtil).copyObjectProperties(copyOfEntityToBeSaved, ##this)
]]></Implementation>
</Method>

<Method name="raiseStatusException">
<FormalSpec>status:%Status,breakLineSymbol:%String="&lt;BR&gt;"</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	set err = ""
	
	Do DecomposeStatus^%apiOBJ(status, .err, "-d")

	set message = ""
	for i=1:1:err
	{
		set message = message_err(i)_breakLineSymbol
	}
	
	;WRITE "DECOMPOSE STATUS: "_message_"<BR>"
	do ..raiseRuntimeException(message)
	;WRITE "AFTER DECOMPOSE STATUS<BR>"
	
	quit
]]></Implementation>
</Method>
</Class>
</Export>