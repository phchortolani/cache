<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alINV.dUItem">
<ClassType>persistent</ClassType>
<IncludeCode>INConst,COMSYS</IncludeCode>
<Super>User.INART</Super>
<UDLText name="T">
<Content>
/*------------------------------------------------------------------------------
/ 11-Apr-2008	HQN		SR15672 Added calculated SourceType to make V1-&gt;V2 easier
; 24-Jan-2008	HQN		SR15625 Copied Methods from dINV
;-----------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="SourceType">
<Type>alINV.dItemSourceType</Type>
<Calculated>1</Calculated>

<Parameter name="CAPTION" value="AL00320"/>
</Property>

<UDLText name="T">
<Content>
/*
Property ItemId As %String [ Required ];
*/
</Content>
</UDLText>

<UDLText name="T">
<Content>
/*
/// Checks to see if the object identified by the ID &lt;var&gt;id&lt;/var&gt; exists in the extent.
/// 
/// &lt;p&gt;Returns &lt;CLASS&gt;%Boolean&lt;/CLASS&gt; TRUE is it exists, FALSE if it does not.
ClassMethod %ExistsId(id As %String) As %Boolean [ CodeMode = generator, ProcedureBlock = 1 ]
{
	;-------------------------------------------------------------------------------
	; Wrapper to prepend company to key before checking for record
	; 
	; History
	; 27-Nov-2007	GRF		SR15615: Created
	;-------------------------------------------------------------------------------
	set %code=0
	$$$GENERATE(" quit %Super.%ExistsId("&quot;0||"&quot;_id)")
	quit $$$OK
}
*/
</Content>
</UDLText>


<Method name="%OnAfterSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called after 
the object's data has been successfully written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; attempt to populate V2 with data
	;-------------------------------------------------------------------------------
	set sc = ##class(alINV.dUItem).ConvertOnSave(%this.ItemNumber)
	
	/*
	set objItem = ##class(alINV.dItem).%New()
	set objItem.ItemId      = 
	set objItem.SearchName  = %this.SearchName ; FIXME: May be null, no clue what to do with these
	set objItem.UPCCode     = %this.UPCCode
	set objItem.Description = %this.Description
	set objItem.ItemPolicy  = ##class(alSOH.iSOH).GetDefaultItemPolicy() ; Needs to be assigned the default
	
	set sc = objItem.%Save()*/
	quit sc
]]></Implementation>
</Method>

<Method name="ConvertOnSave">
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 11-Feb-2009	HQN		SR16347: Populate INARTPACK [REVERTED]
	; 22-Oct-2008	HQN		SR16028: dUItemGroup %Save triggers convert, no need
	; 							to do explicitly now. %Save success guarantees a V2
	; 							object.
	; 21-Oct-2008	GRF		SR16051: Preserve correct Item Finance ItemId.
	; 23-Sep-2008	GRF		SR15810: Add IsSerialNumber
	; 17-Sep-2008	Luke	SR15833: Add Check for existance of a Unit policy when
	; 							saving this for the cases when the item has been
	; 							created, deleted and created again with the same ID
	; 							number. 
	; 30-Jul-2008	Luke	SR15817: Add Unit of Measure to the conversion 
	; 12-May-2008 	Luke    SR15732: added more meaningful error messages 
	; 02-May-2008	HQN		SR15686: Explicit creation of ItemGroup that failed its
	; 							ConvertOnSave.  Force error when trying to convert
	; 							nonexistent V1 object
	; 11-Apr-2008	HQN		SR15672 Side effect, using V1 Calculated field for
	; 					 		SourceType is more easier
	; 08-Apr-2008 	Luke 	SR15659 Adding Item Group Conversion 
	; 07-Apr-2008 	Luke 	SR15659 Adding Sourcing Conversion 
	; 26-Feb-2008	GRF		Include dItemFin properties
	; 22-Feb-2008	Luke	SR15634: Checks and calls to parents; Tests for objects
	; 							before calling out 
	; 21-Feb-2008	Luke	SR15634: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set objV1 = ##class(alINV.dUItem).%OpenId("0||"_pKey,0,.sc) // SR15686
	
	if objV1 '= $$$NULLOREF {
		set objItem    = ##class(alINV.dItem).%OpenId(objV1.ItemNumber)
		if objItem = $$$NULLOREF{
			set objItem  = ##class(alINV.dItem).%New() 
			set objItem.ItemId 	      = objV1.ItemNumber	
		}
		
		set objItem.SourceType    = objV1.SourceType ; SR15672
		set objItem.SearchName    = objV1.SearchName
		if objV1.SearchName = "" { 
			set objItem.SearchName = objV1.ItemNumber
		}
		set objItem.UPCCode        =   objV1.UPCCode
		set objItem.InternalNotes  =   objV1.InternalNotes
		set objItem.Description    =   objV1.Description
		
		set objItem.IsSerialNumber = ''objV1.SerialNumber
		
		// VVVVV  SR15817:
		if objItem.UnitPolicy = "" {
			/// VVVVV SR15833:
			if ##class(alINV.dUnitPolicy).%ExistsId(objItem.ItemId) {
				set objItem.UnitPolicy = ##class(alINV.dUnitPolicy).%OpenId(objItem.ItemId)
			} else {
				set objItem.UnitPolicy = ##class(alINV.dUnitPolicy).%New()
				set objItem.UnitPolicy.Item = objItem
			}
			/// ^^^^ SR15833:
		}
		
		if objV1.UnitofMeasure = "" {
			set tempBaseUnit = 1
		} else {
			set tempBaseUnit = objV1.UnitofMeasure
		}
		set objItem.UnitPolicy.BaseUnit = tempBaseUnit
		
		if objV1.ItemPolicy = "" {
			set objItem.ItemPolicy = ##class(alSOH.iSOH).GetDefaultItemPolicy()
		} else {
			set objItem.ItemPolicy = objV1.ItemPolicy
		}
		
		if objV1.ItemGroup'="" {
			set objItemGroup = ##class(alINV.dItemGroup).%OpenId(objV1.ItemGroup)
			if objItemGroup=$$$NULLOREF{
				set sc = ##class(alINV.dUItemGroup).ConvertOnSave(objV1.ItemGroup)
				if $$$ISOK(sc) {
					set objItemGroup = ##class(alINV.dItemGroup).%OpenId(objV1.ItemGroup) 
				
				} else {
	; TODO: HQN: ItemGroup may not Convert due to deleted records, SYNC
	; This case, Referential Integrity has been broached under V1...create a new group!
					set objUItemGroup = ##class(alINV.dUItemGroup).%New()
					set objUItemGroup.ID1          = objV1.ItemGroup
					set objUItemGroup.Acronym      = objV1.ItemGroup
					set objUItemGroup.Company      = 0
					set objUItemGroup.Description  = "Created from alINV.dUItem::ConvertOnSave()"
					set objUItemGroup.CreatedBy    = "SYSTEM"
					set objUItemGroup.CreatedDate  = $horolog
					set objUItemGroup.ModifiedBy   = "SYSTEM"
					set objUItemGroup.ModifiedDate = $horolog
					if $$$ISOK(objUItemGroup.%Save()) {
						/* ; SR16028 REMOVED vvvv
						if ##class(alINV.dUItemGroup).ConvertOnSave(objV1.ItemGroup) {
							set objItemGroup= ##class(alINV.dItemGroup).%OpenId(objV1.ItemGroup) 
						}
						*/ ; SR16028 REMOVED ^^^^
						set objItemGroup = ##class(alINV.dItemGroup).%OpenId(objUItemGroup.ID1)
					}
				}
			}
			set objItem.ItemGroup = objItemGroup
		} 
		
	; FIXME : <GRF> else case : if it *IS* null - should get group from $$$INVORGDefaultItemGroup 	^INVORG D13
		
		set objItem.Picture    =  objV1.Picture
		set objItem.Volume     =  objV1.Volume
		set objItem.Weight     = +objV1.Weight
		
	;	set objItemFin.CostCenter   = objV1.CostCenter
	;	set objItemFin.PostingChar1 = objV1.PostingCharacteristic1
	;	set objItemFin.PostingChar2 = objV1.PostingCharacteristic2
	;	set objItemFin.PostingChar3 = objV1.PostingCharacteristic3
		
		
		set sc = objItem.%Save()

		if $$$ISOK(sc) {
			do objItem.%DowngradeConcurrency(0)
			
			set objItemFin = ##class(alINV.dItemFin).%OpenId(objItem.%Id())
			if objItemFin = $$$NULLOREF{
				set objItemFin = ##class(alINV.dItemFin).%New() 
				set objItemFin.ItemId   = objItem  	
			}
			 
			set objItemFin.CostCenter   = objV1.CostCenter
			set objItemFin.PostingChar1 = objV1.PostingCharacteristic1
			set objItemFin.PostingChar2 = objV1.PostingCharacteristic2
			set objItemFin.PostingChar3 = objV1.PostingCharacteristic3
			
			set sc = objItemFin.%Save()
			if $$$ISERR(sc) {
				set sc = $$$ERROR($$$GeneralError,"error saving Financial Information for Item :"_pKey_":") //SR15732:
			}
		}
	} else {
		set sc = $$$ERROR($$$GeneralError,"Can not Convert Item :"_pKey_":") //SR15732:
	}

	quit sc
]]></Implementation>
</Method>

<Method name="ConvertOnDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 21-Oct-2008	GRF		SR16051: dItemFin deletion now linked through
	; 							dItem.%OnDelete()
	; 22-Sep-2008	Luke	SR15936: added message to inform user of issues with data
	; 09-Apr-2008	Luke	Corrected the %Delete to %DeleteId; (could have changed
	; 					    	the objItem.%Id() to objItem.%Oid()
	; 					    	Would have worked as well)
	; 26-Feb-2008	GRF		SR15622: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set objV1 = ##class(alINV.dUItem).%OpenId("0||"_pKey)	
	if objV1 '= $$$NULLOREF {
		set objItem = ##class(alINV.dItem).%OpenId(objV1.ItemNumber)
		if objItem '= $$$NULLOREF {
			set sc =##class(alINV.dItem).%DeleteId(objItem.%Id())
		}
   } else {
		set strMessage = $$$Text($listbuild("alINV0005",pKey))
		set sc = $$$ERROR($$$GeneralError,strMessage)   
   }  ; "Can not Delete Item(%1) please review the validity of the data."

	quit sc
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/****************************** DEPRECATED ***************************************

Method ItemPolicyGetOld() As %Status
{
	;-------------------------------------------------------------------------------
	; History
	; 15-Apr-2008	Luke	SR15674 Correct the getter to correspond to V1 values
	; 							Removed not needed code 
	;-------------------------------------------------------------------------------
	set returnVal = "&quot;
	
	if i%ItemPolicy = "1&quot; {   //Blank
		set returnVal = ##class(alSOH.dSourcingPolicy).GetPolicy("Blank Policy",&quot;Storage")
	} elseif i%ItemPolicy = "2&quot; {   //Lot Number Policy (FIFO)
		set returnVal = ##class(alSOH.dSourcingPolicy).GetPolicy("Lot Num Policy",&quot;FIFO")
	} elseif i%ItemPolicy = "3&quot; {   //Lot Number Policy (LIFO)
		set returnVal = ##class(alSOH.dSourcingPolicy).GetPolicy("Lot Num Policy",&quot;LIFO")
	} elseif i%ItemPolicy = "4&quot; {   //Use By Date Policy 
		set returnVal = ##class(alSOH.dSourcingPolicy).GetPolicy("Use By Date Policy",&quot;FEFO")
	} else {
		set returnVal    = ##class(alSOH.iSOH).GetDefaultItemPolicy()
	} 
	quit returnVal
}
	**********************************************************************************/
</Content>
</UDLText>


<Method name="ItemPolicyGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get the Policy based on the Sourcing Policy Keyname
	;
	;
	; History
	; 15-Jun-2009 	PPP 	SR16510: Updated from the old get to get it from the
	;							Policy Keyname Part of the changes required to make
	;							Policies User definable
	;-------------------------------------------------------------------------------
	set returnVal = ""
	/*
	if i%ItemPolicy = "1" {   //Blank
		set returnVal = ##class(alSOH.dSourcingPolicy).GetPolicy("Blank Policy","Storage")
	} elseif i%ItemPolicy = "2" {   //Lot Number Policy (FIFO)
		set returnVal = ##class(alSOH.dSourcingPolicy).GetPolicy("Lot Num Policy","FIFO")
	} elseif i%ItemPolicy = "3" {   //Lot Number Policy (LIFO)
		set returnVal = ##class(alSOH.dSourcingPolicy).GetPolicy("Lot Num Policy","LIFO")
	} elseif i%ItemPolicy = "4" {   //Use By Date Policy 
		set returnVal = ##class(alSOH.dSourcingPolicy).GetPolicy("Use By Date Policy","FEFO")
	} else {
		set returnVal    = ##class(alSOH.iSOH).GetDefaultItemPolicy()
	} 
	*/
	set returnVal = ##class(alSOH.dSourcingPolicy).GetPolicyByKey(i%ItemPolicy)

	quit returnVal
]]></Implementation>
</Method>

<Method name="LoadV2">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Initial take on of V1 data to V2
	; Load Item Groups and Policies first?
	; 
	; History:
	; 26-Feb-2008	GRF		SR15622: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set idItem = ""
	for {
		set idItem = $order(^INART(0,idItem))
		quit:idItem=""
		
		set sc = ..ConvertOnSave(idItem)
		quit:$$$ISERR(sc)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="IsSynced">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Check, for every V1 Item, make sure a V2 item exists and is completely valid
	; Simple check first, Count records
	; 
	; History:
	; 22-Apr-2008	HQN		SR15672: Fuzzy compare on SearchName
	; 						numeric compare of weights
	; 15-Apr-2008	HQN		SR15672: Modified to be instance method and operates
	; 							on single instance, moved collection to 
	; 							alINV.iUINV::IsSynced()
	; 11-Apr-2008	HQN		SR15672: Created
	;-------------------------------------------------------------------------------
	set objItem = ##class(alINV.dItem).%OpenId(%this.ItemNumber,0,.sc)

	if $$$ISOK(sc) {
		; do property value validation on it from v1 perspective
		if %this.SearchName = "" {
			if (objItem.SearchName '= %this.ItemNumber)   set sc = $system.Status.AppendStatus($system.Status.Error(5001,"SearchName Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		} else {
			if (objItem.SearchName '= %this.SearchName)   set sc = $system.Status.AppendStatus($system.Status.Error(5001,"SearchName Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		if (objItem.UPCCode '= %this.UPCCode)             set sc = $system.Status.AppendStatus($system.Status.Error(5001,"UPCCode Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objItem.InternalNotes '= %this.InternalNotes) set sc = $system.Status.AppendStatus($system.Status.Error(5001,"InternalNotes Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objItem.Description '= %this.Description)     set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Description Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objItem.Picture '= %this.Picture)             set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Picture Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objItem.Volume '= %this.Volume)               set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Volume Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objItem.Weight '= (+%this.Weight))            set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Weight Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_") dUItem.Weight="_%this.Weight_" dItem.Weight="_objItem.Weight),sc)

		if (objItem.ItemGroup = $$$NULLOREF) {
			if (%this.ItemGroup '= "") {
				set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ItemGroup property not set "_objItem.%ClassName(1)_"::%Id("_objItem.%Id()_")"),sc)
			}
		} elseif (objItem.ItemGroup.%Id() '= %this.ItemGroup) {
			if %this.ItemGroup '= "" {
				set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ItemGroup Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
			}
		}
		
		if (objItem.ItemPolicy = $$$NULLOREF) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ItemPolicy property not set "_objItem.%ClassName(1)_"::%Id("_objItem.%Id()_")"),sc)
		} elseif (%this.ItemPolicy = $$$NULLOREF) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ItemPolicy property not set "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		} elseif(objItem.ItemPolicy.%Id() '= %this.ItemPolicy.%Id()) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ItemPolicy Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
		if (objItem.SourceType = $$$NULLOREF) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"SourceType property not set "_objItem.%ClassName(1)_"::%Id("_objItem.%Id()_")"),sc)
		} elseif (%this.SourceType = $$$NULLOREF) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"SourceType property not set "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		} elseif (objItem.SourceType.%Id() '= %this.SourceType.%Id()) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"SourceType Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
	} else {
		set sc = $system.Status.Error(6236,%this.ItemNumber,%this.%ClassName(1)_"::%OpenId()")
	}
	quit sc
]]></Implementation>
</Method>

<Method name="SourceTypeGet">
<ReturnType>alINV.dItemSourceType</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 15-Apr-2008	Luke	change else for all V1 that aren't listed into a "buy" 
	; 11-Apr-2008	HQN		SR15672: Created
	;-------------------------------------------------------------------------------
	set objSourceType = ""
	if %this.ItemType = 0 {
		set objSourceType = ##class(alINV.dItemSourceType).%OpenId("MakeBuy")
	
	} elseif %this.ItemType = 1 {
		set objSourceType = ##class(alINV.dItemSourceType).%OpenId("Buy")
	
	} elseif %this.ItemType = 2 {
		set objSourceType = ##class(alINV.dItemSourceType).%OpenId("Service")
	
	} elseif %this.ItemType = 3 {
		set objSourceType = ##class(alINV.dItemSourceType).%OpenId("Make")
	
	} elseif %this.ItemType = 4 {
		set objSourceType = ##class(alINV.dItemSourceType).%OpenId("Consumable")
	
	} else {  //All other types that are listed in V1 are converted to buy
		set objSourceType = ##class(alINV.dItemSourceType).%OpenId("Buy")
	}
	quit objSourceType
]]></Implementation>
</Method>

<Method name="Sync">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 29-Apr-2008	HQN		SR15686: Created
	;-------------------------------------------------------------------------------
	set sc = %this.IsSynced()
	if $$$ISERR(sc) {
		set sc = ##class(alINV.dUItem).ConvertOnSave(%this.ItemNumber)
	}
	quit sc
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>