<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="SourceControl.data.global.NetManagerDictionary">
<ClassType/>
<Import>SourceControl.control,SourceControl.data</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>GlobalBase</Super>

<Method name="ExportAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set strStatus = $$$OK

	set nErrors = 0
	set nExported = 0

	set hasLoseDictionaries = $$$NO

	// Since ^WWWDIC is organized as ...FROM,TO,... We need to get all
	// unique combinations of FROM-TO.
	set keys = ##class(Hashtable).%New()
	set strQuery = "^WWWDIC"
	
	// All values for that global node - 
	for {
		set strQuery = $query(@strQuery)

		// Quit when we reach the end
		if (strQuery = "") {
			quit
		}

		// We assume it is always ^WWWDIC(0,from,to,...)
		set from = $qsubscript(strQuery, 2)
		set to = $qsubscript(strQuery, 3)
		//write !, "from=["_from_"], to=["_to_"], strQuery=["_strQuery_"]"

		if ((from '= "") && (to '= "")) {
			// Skip it for later treatment if it is not a regular
			// dictionary entry
			if (..IsLose(from, to)) {
				set hasLoseDictionaries = $$$YES
			}
			else {
				// Just a general kind of unique hash
				set key = from_"[][][][][][]"_to
				set value = $listbuild(from, to)
				if ('keys.Exists(key)) {
					do keys.Put(key, value)
					//w ">> PUT"
				}
			}
		}
	}

	// Loop through everything we've found so far and export it
	do keys.StartIterator()
	while (keys.Next()) {
		// Fetch both keys
		set value = keys.GetCurrentValue()
		set from = $list(value, 1)
		set to = $list(value, 2)

		set sc = ..Export(from_"|"_to, 0)
		if (##class(Errors).IsError(sc,1)) {
			set nErrors = nErrors + 1
		}
		else {
			set nExported = nExported + 1
		}
	}

	// Export lose dictionaries, if any
	if (hasLoseDictionaries) {
		set sc = ..ExportAllLose()
		if (##class(Errors).IsError(sc, 1)) {
			set nErrors = nErrors + 1
		}
		else {
			write !, "There were lose dictionary entries, but they were "_
				"succesfully exported."
		}
	}

	write !, "Number of exported files: "_nExported
	write !, "Number of errors during export: "_nErrors

	quit nErrors
]]></Implementation>
</Method>

<Method name="IsLose">
<Description><![CDATA[
Check if this a lose dictionary entry (without language codes)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>languageFrom:%String,languageTo:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// Test for a weird name. In general, language codes are "XX","YY".
	// But can be variations, like "PT-BR" or "PT-PT"
	if (($length(languageFrom) '= 2) && ($length(languageTo) < 2)) {
		quit $$$YES
	}

	quit $$$NO
]]></Implementation>
</Method>

<Method name="ExportAllLose">
<Description><![CDATA[
Exports all lose dictionaries entries (without language codes)
This routine puts all disctionaries that don't have TO-FROM languages
in the file OTHER.languagetext. You should NOT call this routine directly,
since it already called by exportDictionary.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>printMessage:%String=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$YES

	// Since ^WWWDIC is organized as ...FROM,TO,... We need to get all
	// unique combinations of FROM-TO.
	set keys = ##class(Hashtable).%New()
	set strQuery = "^WWWDIC"
	
	// All values for that global node
	for {
		set strQuery = $query(@strQuery)

		// Quit when we reach the end
		if (strQuery = "") {
			quit
		}

		// We assume it is always ^WWWDIC(0,from,to,...)
		set from = $qsubscript(strQuery, 2)
		set to = $qsubscript(strQuery, 3)
		//write !, "from=["_from_"], to=["_to_"], strQuery=["_strQuery_"]"

		if ((from '= "") && (to '= "")) {
			// Store it only if it is a lose dictionary
			if (..IsLose(from, to)) {
				// Just a general kind of unique hash
				set key = from_"[][][][][][]"_to

				// Prepare a subscript (YM,from,to)
				set subscript = ##class(Strings).QuoteString(
					$qsubscript(strQuery, 1))_","_
					##class(Strings).QuoteString(from)_","_
					##class(Strings).QuoteString(to)
				if ('keys.Exists(key)) {
					do keys.Put(key, subscript)
				}
			}
		}
	}

	// Loop through everything unique that we've found so far and put
	// ir on a listbuild structure
	set lstSubscripts = ""
	do keys.StartIterator()
	while (keys.Next()) {
		// Fetch the subscript
		set subscript = keys.GetCurrentValue()

		// Build the subscript list
		if (lstSubscripts = "") {
			set lstSubscripts = $listbuild(subscript)
		}
		else {
			set lstSubscripts = lstSubscripts_$listbuild(subscript)
		}
	}

	set fileName = ##class(DirectoryFile).ConcatPath(
		##class(Config).GetExternalNMDictionaryDir(),
		"OTHERS."_##class(FileType).%GetParameter("TXTPARAMETERS"))

	// Empty ignored list
	set ignoredList = ""

	// Are we exporting it or removing it? 
	if (lstSubscripts '= "") {
		// Exporting
		set globalList = $listbuild("^WWWDIC")
		set sc = ..ExportGlobalNode(fileName, "OTHERS", globalList,
			lstSubscripts, ignoredList, printMessage, .ignored, 0)

		if (('##class(Errors).IsError(sc, printMessage)) && ('ignored)) {
			if (printMessage) {
				write !, "@NM Lose Dictionary entries successfully "_
					"exported as '"_fileName_"'"
			}

			// Update the timstamp, so that the source control can use it
			// to prevent the same file from being loaded again.
			do ##class(FileControl).UpdateTimeStamp(fileName)
		}
	}
	else {
		// Removing it (exporting the deletion)
		set sc = ##class(DirectoryFile).Delete(fileName, printMessage)
	}

	quit sc
]]></Implementation>
</Method>

<Method name="Export">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,printMessage:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$YES

	set languageFrom = $piece(id, "|", 1)
	set languageTo = $piece(id, "|", 2)

	// Verify if we will do anything...
	if ($get(^SourceControl("ignoreExport"))) {
		quit sc
	}

	if ($get(languageFrom) = "") {
		quit ##class(Errors).MakeAndPrintErrorStatus("Empty ^WWWDIC(0,X,Y) "_
			"languageFrom (X) parameter! Skipping it.", printMessage)
	}

	if ($get(languageTo) = ""){
		quit ##class(Errors).MakeAndPrintErrorStatus("Empty ^WWWDIC(0,X,Y) "_
			"languageTo (Y) parameter! Skipping it.", printMessage)
	}

	set name = ..GetName(languageFrom, languageTo)
	set fileName = ##class(DirectoryFile).ConcatPath(
		##class(Config).GetExternalNMDictionaryDir(),
		name_"."_##class(FileType).%GetParameter("TXTPARAMETERS"))

	// Empty ignored list
	set ignoredList = ""

	// Are we exporting it or removing it? 
	if ($data(^WWWDIC(0,languageFrom, languageTo))) {
		// Exporting
		set subscritps = $listbuild("0,"_
			##class(Strings).QuoteString(languageFrom)_","_
			##class(Strings).QuoteString(languageTo))
		set globalList = ..GetGlobals()
		set sc = ..ExportGlobalNode(fileName, languageFrom_"-"_languageTo,
			globalList, subscritps, ignoredList, printMessage=2, .ignored, 0)

		if (('##class(Errors).IsError(sc, printMessage)) && ('ignored)) {
			if (printMessage) {
				write !, "@NM Dictionary '"_languageFrom_"-"_languageTo_"' "_
					"successfully exported as '"_fileName_"'"
			}

			// Update the timstamp, so that the source control can use it
			// to prevent the same file from being loaded again.
			do ##class(FileControl).UpdateTimeStamp(fileName)
		}
	}
	else {
		// Removing it (exporting the deletion)
		set sc = ##class(DirectoryFile).Delete(fileName, printMessage)
	}

	quit sc
]]></Implementation>
</Method>

<Method name="GetName">
<Description><![CDATA[
Returns a good name for a dictionay based on the language codes.
Since there are some cases where the language codes are not being used, 
the system will put all those cases in a file named OTHERS.
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>languageFrom:%String,languageTo:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Test for a weird name
	if (($length(languageFrom) '= 2) || ($length(languageTo) '= 2)) {
		quit "OTHERS"
	}

	quit ##class(FileControl).GetSafeFilename(languageFrom_"-"_languageTo)
]]></Implementation>
</Method>

<Method name="GetGlobals">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $listbuild("^WWWDIC")
]]></Implementation>
</Method>
</Class>
</Export>