<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.CSP.VARPerfilProtocoloExamesNew">
<ClassType/>
<IncludeCode>MEDConst,VARConst,INConst</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	#dim %request As %CSP.Request
	#dim %response As %CSP.Response
	
	Set Method 	= $Get(%request.Data("method",1))
	Set Text 	= $Get(%request.Data("text",1))	

	Xecute "do .."_Method_"()"
	
	Quit $$$OK]]></Implementation>
</Method>

<Method name="GetMEDProvider">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"

	Set meuSQL = "Select * From SQLUser.MEDProvider Where Company = 0 And User1 Is Not Null "
	Set objStatement	= ##class(%SQL.Statement).%New() 
	Set qStatus 			= objStatement.%Prepare(meuSQL)
	Set rSet 					= objStatement.%Execute()
	;
	Set arrayDados = []
	;
 	While (rSet.%Next()) {
		Set listDados = {}
		Do listDados.%Set("CodProfissional", $ZConvert(rSet.%Get("User1"),"U"))
		Do listDados.%Set("Nome", "("_rSet.%Get("ID1")_") "_rSet.%Get("Name"))
		Do arrayDados.%Push(listDados)
 	}
 	;
 	Do arrayDados.%ToJSON()
	Quit $$$OK]]></Implementation>
</Method>

<Method name="findProtocolo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"
	Set YBED 			= $Get(%request.Data("YBED",1))
	Set tipoExame = $Get(%request.Data("tipoExame",1))
	Set arrayRetorno = []
	
	Set xCodProf = $Order(^MEDProviders(YM, 1, YBED, ""))
	
	If (tipoExame="") {
		Write arrayRetorno.%ToJSON()
		Quit $$$OK
	}
	
	Set tSQL="Select * From SQLUser.VARExamesPerfil Where Company=0 And TipodosExames='"_tipoExame_"' "
	Set tSQL=tSQL_"Order By UsuariocomAcessoaoPerfil"
	Set tRS = ##class(%SQL.Statement).%ExecDirect("",tSQL)
	Set index = 0, antProfissional = ""
	While tRS.%Next() {
		If (tRS.%Get("UsuariocomAcessoaoPerfil") = "") {
			Set profissional 			= "Publico"
			Set profissionalDesc 	= "Publico"
		}Else{
			Set profissional = tRS.%Get("UsuariocomAcessoaoPerfil")
			Set codProvider = $Order(^MEDProviders(0,1,profissional,""))
			Set profissionalDesc 	= $$SQLGetProviderName^VARSQL(codProvider)
			If (codProvider = "") {
				Set profissionalDesc 	= $$SQLGetUserName^VARSQL(profissional)
			}
		}
		If (profissional '= antProfissional) {
			Set antProfissional	= profissional
			Set index = index + 1
		}
		Set profissional = $Extract("00",1,2-$Length(index))_index_" - "_profissionalDesc
		Set list={}
		Set list.codigoPerfil 					= tRS.%Get("CodigodoPerfil")
		Set list.descricaoComposta 			= "("_tRS.%Get("CodigodoPerfil")_") "_tRS.%Get("Descricao")
		Set list.perfilParticular 			= tRS.%Get("PerfilParticular")
		Set list.usuarioPerfil 					= profissional
		Do arrayRetorno.%Push(list)
	}
	
	Write arrayRetorno.%ToJSON()
	Quit $$$OK]]></Implementation>
</Method>

<Method name="getProtocolo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"
	Set pCodProtocolo = $Get(%request.Data("pCodProtocolo",1))
	
	Set objVARExamesPerfil = $Get(^VARExamesPerfil(YM, pCodProtocolo, 1))
	
	Set listRetorno = {}
	Set listRetorno.descricao 	= $$$VARExamesPerfilDescricao(objVARExamesPerfil)
	Set listRetorno.medico 		= $$$VARExamesPerfilUsuariocomAcessoaoPerfil(objVARExamesPerfil)

	Do listRetorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="listaExames">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Set tipo = $Get(%request.Data("tipo",1))
	Set codigo = $Get(%request.Data("codigo",1))
	Set searchValue = $Get(%request.Data("searchValue",1))
	Set take 	= $Get(%request.Data("take",1))
	Set skip 	= $Get(%request.Data("skip",1))
	;
	If take="" Set take=2000
	;
	Set SQL  = "Select top "_(skip+take)_" ItemNumber, SearchName From SQLUser.INART Where Company = 0 "
	If tipo=1{	;Exames LaboratÃ³rio:
		Set SQL  = SQL _ "And %Upper(ItemType) in (6, 4, 5) "
	}
	If tipo=2{  ;Outros Exames
		Set SQL  = SQL _ "And %Upper(ItemType) = 7 "
	}
	Set SQL  = SQL _ "And %UPPER(HoldReason) in (0, 2) "
	If codigo'="" {
		Set SQL = SQL_" And ItemNumber = '"_codigo_"'"
	}
	If searchValue'="" {
		Set SQL = SQL_" and (%upper(ItemNumber) like %upper('%"_searchValue_"%') or %upper(SearchName) like %upper('%"_searchValue_"%')) "
	}
	Set SQL = SQL_" order by SearchName "
	;
	Set meuSelect = "select * from ("_SQL_")"
	If skip'="" Set meuSelect=meuSelect_" where %VID between "_(skip+1)_" and "_(skip+take)
	;
	Set rsLinha = ##class(%SQL.Statement).%ExecDirect("",meuSelect)
	Set retorno = []
	While(rsLinha.%Next()){
		Set exame = rsLinha.%Get("ItemNumber")
		Set descr = rsLinha.%Get("SearchName")
		Set linha = {}
		Set linha.CodExame = exame
		Set linha.DescExame = descr
		Do retorno.%Push(linha)
	}
	Write retorno.%ToJSON()
	Quit]]></Implementation>
</Method>

<Method name="armazenarProtocolo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 			= 0
	Set Y	 			= "~"
	
	Set pTipoExame		= $Get(%request.Data("pTipoExame",1))
	Set pCodProtocolo	= $Get(%request.Data("pCodProtocolo",1))
	Set pDescricao		= $Get(%request.Data("pDescricao",1))
	Set pMedico				= $Get(%request.Data("pMedico",1))
	Set pCopiar				= $Get(%request.Data("pCopiar",1))
	Set YBED 					= $Get(%request.Data("YBED",1))
	
	Set pPerfPartic = 0
	If (pMedico '= "") Set pPerfPartic = 1

	If (pCopiar = 1) {
		Set objVARExamesPerfil = $Get(^VARExamesPerfil(0, pCodProtocolo, 1))
		Set xCodProtocolo = $$GetNextNumber^COMUtils("VARExamesPerfil","")
		Set $$$VARExamesPerfilUsuariocomAcessoaoPerfil(objVARExamesPerfil) 	= $ZConvert(pMedico,"U")
		Set $$$VARExamesPerfilPerfilParticular(objVARExamesPerfil) 					= pPerfPartic
		Set status = $$$Save("VARExamesPerfil",xCodProtocolo,objVARExamesPerfil,1)
		Set codExame = ""
		For {
			Set codExame = $Order(^VARExamesPerfilLinha(YM, pCodProtocolo, codExame))
			Quit:codExame=""
			Set objVARExamesPerfilLinha = $Get(^VARExamesPerfilLinha(YM, pCodProtocolo, codExame, 1))
			Set status = $$$Save("VARExamesPerfilLinha", xCodProtocolo_$$$COMMA_codExame, objVARExamesPerfilLinha, 1)
		}
		Set listRetorno = {}
		Set listRetorno.status 			 = status
		Set listRetorno.codProtocolo = xCodProtocolo
		Do listRetorno.%ToJSON()
		Return $$$OK
	}
	
	
	Set status 	= $$$OK
	
	Set objVARExamesPerfil = ""
	If (pCodProtocolo'="") Set objVARExamesPerfil = $Get(^VARExamesPerfil(0, pCodProtocolo, 1))
	Else  Set pCodProtocolo = $$GetNextNumber^COMUtils("VARExamesPerfil","")
	
	Set $$$VARExamesPerfilDescricao(objVARExamesPerfil) 								= pDescricao
	Set $$$VARExamesPerfilTipodosExames(objVARExamesPerfil) 						= pTipoExame
	Set $$$VARExamesPerfilUsuariocomAcessoaoPerfil(objVARExamesPerfil) 	= $ZConvert(pMedico,"U")
	Set $$$VARExamesPerfilPerfilParticular(objVARExamesPerfil) 					= pPerfPartic
	Set status = $$$Save("VARExamesPerfil",pCodProtocolo,objVARExamesPerfil,1)
	
	Set listRetorno = {}
	Set listRetorno.status 			 = status
	Set listRetorno.codProtocolo = pCodProtocolo
	Do listRetorno.%ToJSON()
	Return $$$OK]]></Implementation>
</Method>

<Method name="excluirProtocolo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"
	
	Set YBED 					= $Get(%request.Data("YBED",1))
	Set pCodProtocolo = $Get(%request.Data("pCodProtocolo",1))

	Try{
		Set status = $$$Kill("VARExamesPerfil",pCodProtocolo)
		If '$$$ISERR(status){
			Set exame=""
			For {
				Set exame = $Order(^VARExamesPerfilLinha(0,pCodProtocolo,exame)) Quit:exame=""
				Set status = $$$Kill("VARExamesPerfilLinha",pCodProtocolo_","_exame)
				If $$$ISERR(status) Quit
			}
		}
	}
	Catch(exception){
		Set status = exception.AsStatus()
	}
	Set retorno = {}
	If $$$ISERR(status){
		Set retorno.status = 0
		Set retorno.mensagem 	= status
		Set retorno.tipo 			= "error"
	}Else{
		Set retorno.status 		= 1
		Set retorno.mensagem 	= "Protocolo removido com sucesso!"
		Set retorno.tipo 			= "success"
	}
	Write retorno.%ToJSON()
	Quit]]></Implementation>
</Method>

<Method name="GetExamesProtocolo">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VAR
	Set YM 	= 0
	Set Y 	= "~"
	Set pCodProtocolo = $Get(%request.Data("pCodProtocolo",1))
	;
	Set query = "Select * From SQLUser.VARExamesPerfilLinha "
	Set query = query _ "Where Company = 0 And CodigodoPerfil = '"_pCodProtocolo_"' "
	Set rs = ##class(%SQL.Statement).%ExecDirect("",query)
	Set retorno = []
	While(rs.%Next()){
		Set exame 			= rs.%Get("CodigodoExame")
		Set observacao 	= rs.%Get("Observacao")
		Set descExame 	= $$SQLGetDescricaoProduto^VARSQL(exame)
		;
		Set linha = {}
		Set linha.CodigodoExameId 	= exame
		Set linha.CodigodoExame 		= exame
		Set linha.DescricaodoExame 	= "("_exame_") "_descExame
		Set linha.Observacao 				= observacao
		Do retorno.%Push(linha)
	}
	Do retorno.%ToJSON()
	Return]]></Implementation>
</Method>

<Method name="ArmExamesProtocolo">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodProtocolo,pId,objDados,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y	 		= "~"
	Set YBED 	= pYBED
	
	Set (codExame, observacao) = ""
	Set index = "" 
	For {
		Set index = $Order(objDados(index)) 
		Quit:index=""
		
		If ($Piece(objDados(index),"~",1) = "CodigodoExame") Set codExame = 	$Piece(objDados(index),"~",2)
		If ($Piece(objDados(index),"~",1) = "Observacao") Set observacao = 	$Piece(objDados(index),"~",2)
	}
	
	If (codExame = "") Set codExame = pId
	If (pId '= "" && (codExame '= pId)) {
		If (observacao = "") Set observacao = $$$VARExamesPerfilLinhaObservacao(^VARExamesPerfilLinha(YM, pCodProtocolo, pId, 1))
		Set strStatus = $$$Kill("VARExamesPerfilLinha", pCodProtocolo_$$$COMMA_pId)
	}
	
	Set objVARExamesPerfilLinha = $Get(^VARExamesPerfilLinha(YM, pCodProtocolo, codExame, 1))
	Set $$$VARExamesPerfilLinhaObservacao(objVARExamesPerfilLinha) = observacao
	Set strStatus = $$$Save("VARExamesPerfilLinha",pCodProtocolo_$$$COMMA_codExame,objVARExamesPerfilLinha,1)
	Quit strStatus]]></Implementation>
</Method>

<Method name="ExcluirExamesProtocolo">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCodProtocolo,pId,pYBED</FormalSpec>
<Implementation><![CDATA[	$$$VAR
	Set YM 		= 0
	Set Y	 		= "~"
	Set YBED 	= pYBED
	Quit $$$Kill("VARExamesPerfilLinha",pCodProtocolo_","_pId)]]></Implementation>
</Method>
</Class>
</Export>