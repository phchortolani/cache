<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.mobile.StockLogicImpl">
<ClassType/>
<IncludeCode>COMSYS,INConst</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>VAR.mobile.JavaAbstract</Super>

<Method name="convertQtyFromInventoryUnit">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,productNumber:%String,toUnitOfMeasureKey:%String,quantity:%Float</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set productNumber = ##class(Util).cleanBinaryZero(productNumber)
	set toUnitOfMeasureKey = ##class(Util).cleanBinaryZero(toUnitOfMeasureKey)

	if ('##class(SessionLogicImpl).isOpen()) quit -1

	do ##class(NetManagetHelper).changeCompany(company)
	set result = +$$CalculateQuantity^INUOMConversion(productNumber, toUnitOfMeasureKey,
		quantity)
	do ##class(NetManagetHelper).restoreCompany()

	quit result]]></Implementation>
</Method>

<Method name="convertQtyToInventoryUnit">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,productNumber:%String,fromUnitOfMeasureKey:%String,quantity:%Float</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set productNumber = ##class(Util).cleanBinaryZero(productNumber)
	set fromUnitOfMeasureKey = ##class(Util).cleanBinaryZero(fromUnitOfMeasureKey)

	if ('##class(SessionLogicImpl).isOpen()) quit -1

	do ##class(NetManagetHelper).changeCompany(company)
	set result = +$$CalcInventoryQty^INUOMConversion(productNumber, fromUnitOfMeasureKey,
		quantity)
	do ##class(NetManagetHelper).restoreCompany()

	quit result]]></Implementation>
</Method>

<Method name="convertQty">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,productNumber:%String,fromQuantity:%Float,fromUnitOfMeasureKey:%String,toUnitOfMeasureKey:%String,roundUp:%Boolean</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set productNumber = ##class(Util).cleanBinaryZero(productNumber)
	set fromUnitOfMeasureKey = ##class(Util).cleanBinaryZero(fromUnitOfMeasureKey)
	set toUnitOfMeasureKey = ##class(Util).cleanBinaryZero(toUnitOfMeasureKey)

	if ('##class(SessionLogicImpl).isOpen()) quit -1

	do ##class(NetManagetHelper).changeCompany(company)
	set result = +$$Convert^INUOMConversion(productNumber, fromQuantity,
		fromUnitOfMeasureKey, toUnitOfMeasureKey, +roundUp)
	do ##class(NetManagetHelper).restoreCompany()

	quit result]]></Implementation>
</Method>

<Method name="getPickUnit">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,productNumber:%String,issueTypeKey:%String,defaultToInventory:%Boolean</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set productNumber = ##class(Util).cleanBinaryZero(productNumber)
	set issueTypeKey = ##class(Util).cleanBinaryZero(issueTypeKey)

	if ('##class(SessionLogicImpl).isOpen()) quit -1

	do ##class(NetManagetHelper).changeCompany(company)
	set strStatus = $$$OK
	set result = $$GetPickUOM^INUOMConversion(productNumber, issueTypeKey, .strStatus, +defaultToInventory)
	do ##class(NetManagetHelper).restoreCompany()

    if ($$$ISERR(strStatus)) quit ""

	quit result]]></Implementation>
</Method>

<Method name="getStockQuantity">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,productNumber:%String,siteLocation:%String,program:%String,calculationType:%Integer,excludeBlockedOrExpired:%Boolean</FormalSpec>
<ReturnType>%Float</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set productNumber = ##class(Util).cleanBinaryZero(productNumber)
	set siteLocation = ##class(Util).cleanBinaryZero(siteLocation)
	set program = ##class(Util).cleanBinaryZero(program)

	#define enumSingleTotal	0

	do ##class(NetManagetHelper).changeCompany(company)
	set result = +$$GetQty^INARTMENGE(productNumber, $$$enumSingleTotal, siteLocation,
		$$$NO, calculationType, $$$NO, excludeBlockedOrExpired, program)
	do ##class(NetManagetHelper).restoreCompany()

	quit result]]></Implementation>
</Method>

<Method name="move">
<ClassMethod>1</ClassMethod>
<FormalSpec>location:%String,sourceAddress:%String,destinationAddress:%String,pallets:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>StatusBean</ReturnType>
<Implementation><![CDATA[	set location = ##class(Util).cleanBinaryZero(location)
	set sourceAddress = ##class(Util).cleanBinaryZero(sourceAddress)
	set destinationAddress = ##class(Util).cleanBinaryZero(destinationAddress)
	set pallets = ##class(Util).cleanBinaryZero(pallets)

	set result = ##class(StatusBean).%New()

	if ('##class(SessionLogicImpl).isOpen()) {
		set result.Code = result.%GetParameter("ERRORSESSIONNOTOPENED")
        do result.Messages.Insert("Session not opened")
        quit result
	}

	set strStatus = ..moveTxn(location, sourceAddress, destinationAddress, pallets)

    if ($$$ISOK(strStatus)) {
		set result.Code = result.%GetParameter("SUCCESS")
    }
	else {
		set result.Code = result.%GetParameter("ERRORGENERIC")
        do result.Messages.Insert($$DecodeError^COMUtilError(strStatus))
	}

	quit result]]></Implementation>
</Method>

<Method name="moveTxn">
<Description><![CDATA[[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>location:%String,sourceAddress:%String,destinationAddress:%String,pallets:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[	set $ztrap = "exception"

	set palletList = $listFromString(pallets, "~")

	// Cria o cabeçalho da movimentação
	set idMOV = $$^WWWNEXT("INMOV")		
	set strObserv = "Movimentação de palete criada pelo PDA."
	set strStatus = $$$OK

	set objMOV = ""	
	set $piece(objMOV,Y,1) = $piece($horolog,",",1) ;Data
	set $piece(objMOV,Y,2) = location  ;Local	
	set $piece(objMOV,Y,3) = 1		   ;Movement Type (0 - Estoque, 1 - Palete)
	set $piece(objMOV,Y,5) = 1 		   ;Status (1 - Em andamento)
	set $piece(objMOV,Y,6) = strObserv ;Observações
	set $piece(objMov,Y,7) = $horolog  ;Criado Em
	set $piece(objMOV,Y,25) = YBED	   ;Criado Por

	set strStatus = $$$Save("INMOV",idMOV,objMOV,1)

	if $$$ISOK(strStatus) {
  		set idMOVPallet = ""
   		set ptr = 0
   		set lineNumber = 1

		// Cria as linhas da movimentação		
		while $listnext(palletList, ptr, idMOVPallet) {
		   	set objMOVPallet = ""
		   	set $piece(objMOVPallet,Y,1) = idMOVPallet
		   	set $piece(objMOVPallet,Y,2) = destinationAddress
		   	set $piece(objMOVPallet,Y,3) = sourceAddress

		   	set idKeyLinha = idMOV_$$$COMMA_lineNumber
			set strStatus = $$$Save("INMOVPallet",idKeyLinha,objMOVPallet,1)

			// Any error on saving the pallet item, return error.
			if ('$$$ISOK(strStatus)) {
				break
			}

			set lineNumber = lineNumber + 1
		}

		set strStatus = $$CanPost^INMOVByPallet(idMOV)
	
      	set %request = ##class(%CSP.Request).%New()
     	set %request.CgiEnvs("YBED") = YBED
 		if $$$ISOK(strStatus) {
			set strStatus = $$Post^INMOVByPallet(idMOV)
		}
	}

finally
	quit strStatus

exception
	set $ztrap = ""

	set strStatus = $$$MakeStatus("Erro: "_$zerror)

	goto finally]]></Implementation>
</Method>

<Method name="moveProducts">
<ClassMethod>1</ClassMethod>
<FormalSpec>location:%String,sourceAddress:%String,destinationAddress:%String,products:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>StatusBean</ReturnType>
<Implementation><![CDATA[	set location = ##class(Util).cleanBinaryZero(location)
	set sourceAddress = ##class(Util).cleanBinaryZero(sourceAddress)
	set destinationAddress = ##class(Util).cleanBinaryZero(destinationAddress)
	set products = ##class(Util).cleanBinaryZero(products)

	set result = ##class(StatusBean).%New()

	if ('##class(SessionLogicImpl).isOpen()) {
		set result.Code = result.%GetParameter("ERRORSESSIONNOTOPENED")
        do result.Messages.Insert("Session not opened")
        quit result
	}

	set strStatus = ..moveProductsTxn(location, sourceAddress, destinationAddress, products)

    if ($$$ISOK(strStatus)) {
		set result.Code = result.%GetParameter("SUCCESS")
    }
	else {
		set result.Code = result.%GetParameter("ERRORGENERIC")
        do result.Messages.Insert($$DecodeError^COMUtilError(strStatus))
	}

	quit result]]></Implementation>
</Method>

<Method name="moveProductsTxn">
<Description><![CDATA[[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>location:%String,sourceAddress:%String,destinationAddress:%String,products:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[	set $ztrap = "exceptionProd"

	set productList = $listFromString(products, "~")

	// Cria o cabeçalho da movimentação
	set idMOV = $$^WWWNEXT("INMOV")		
	set strObserv = "Movimentação de produto criada pelo PDA."
	set strStatus = $$$OK
	
	set objMOV = ""	
	set $$$INMOVStockMovementDate(objMOV) = $piece($horolog,",",1) ;Data
	set $$$INMOVLocation(objMOV) 	= location ;Local	
	set $$$INMOVMoveType(objMOV) 	= 0		   ;Movement Type (0 - Estoque, 1 - Palete)
	set $$$INMOVStatus(objMOV) 		= 1 	   ;Status (1 - Em andamento)
	set $$$INMOVNotes(objMOV) 		= strObserv ;Observações
	set $$$INMOVDateEntered(objMov) = $horolog  ;Criado Em
	set $$$INMOVCreatedBy(objMOV)   = YBED	   ;Criado Por
	set debug = objMOV
	set strStatus = $$$Save("INMOV",idMOV,objMOV,1)

	if $$$ISOK(strStatus) {
  		set INMOVLine = ""
   		set ptr = 0
   		set lineNumber = 1

		// Cria as linhas da movimentação		
		while $listnext(productList, ptr, INMOVLine) {
			//decompoe produtoToMove
			set productId = $piece(INMOVLine,"##",1)
			set bundleId  = $piece(INMOVLine,"##",2)
			set quantity  = $piece(INMOVLine,"##",3)
			set debug ="item "_ productId_ "bundle"_bundleId_" qt "_quantity
		   	set objMOVLine = ""
		   	set $$$INMOVLineItem(objMOVLine) = productId
		   	set $$$INMOVLineFromStorage(objMOVLine) = sourceAddress
		   	set $$$INMOVLineToStorage(objMOVLine) = destinationAddress 
		   	set $$$INMOVLineBundle(objMOVLine) = bundleId
		   	set $$$INMOVLineUnit(objMOVLine) = $$SQLGetUnitMeasure^VARSQL(productId)
		   	set $$$INMOVLineIssueLine(objMOVLine)   = ""
		   	//todo confirmar
		   	set $$$INMOVLineQtyRequired(objMOVLine) = +quantity
   			set $$$INMOVLineUnitQty(objMOVLine) = +quantity   			
		   	set idKeyLinha = idMOV_$$$COMMA_lineNumber
			//set strStatus = $$OnBeforeSave^INMOVLine(idKeyLinha,objMOVLine,$$$NO)
			set strStatus = $$$Save("INMOVLine",idKeyLinha,objMOVLine,1)

			// Any error on saving the item, return error.
			if ('$$$ISOK(strStatus)) {
				break
			}
			set lineNumber = lineNumber + 1
		}
		

		set strStatus = $$CanPost^INMOV(idMOV)

      	set %request = ##class(%CSP.Request).%New()
     	set %request.CgiEnvs("YBED") = YBED
 		if $$$ISOK(strStatus) {
			set strStatus = $$Post^INMOV(idMOV)
		}
		
	}
exceptionProd
	set $ztrap = ""
	if ('$$$ISOK(strStatus)) {
		set strStatus = $$$MakeStatus("Erro: "_%objlasterror_" : "_$zerror)
	}
	goto finally]]></Implementation>
</Method>
</Class>
</Export>