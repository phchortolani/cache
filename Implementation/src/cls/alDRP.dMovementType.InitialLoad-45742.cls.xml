<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alDRP.dMovementType.InitialLoad">
<ClassType>serial</ClassType>
<Super>alDRP.dMovementType</Super>

<Property name="MovementTypeId">
<Description><![CDATA[
Source of transaction
Based On : ^WWW101(0,"UMSATZART1",SPRACHE,Class,1)                  ; TODO
FIXME : "0" is Sale - probably should be "42" [GRF]]]></Description>
<Type>alSYS.dt.dtInteger</Type>
<Final>1</Final>
<InitialExpression>"0&quot;</InitialExpression>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00487"/>

<Parameter name="DISPLAYLIST" value="On Build"/>
</Property>


<Method name="Validate">
<FormalSpec>pobjMove:alDRP.dMovement</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 07-Mar-2008   Luke	Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if pobjMove.Completed {
		set strMessage = $$$Text("IN00711")      ; "This movement is already completed."
		set sc = $$$ERROR($$$GeneralError,strMessage)
	}

	quit sc
]]></Implementation>
</Method>

<Method name="Confirm">
<FormalSpec>pobjMove:alDRP.dMovement</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define enumAverageCost		9
	;-------------------------------------------------------------------------------
	; History
	; 19-Nov-2009	GRF		SR16471: Change scope of lock by making it a global
	; 11-Nov-2009	GRF		SR16871: relocate unlock to cover data being updated
	; 02-Nov-2009	GRF		SR16871: INItemCost with location replaces INARTKOST
	; 18-Mar-2009	DavidR	SR16406: added $listbuild
	; 29-Sep-2008	Luke	SR15818: Added Lock Checks 
	; 27-Aug-2008	Luke	SR15691: Corrected the calculation of fltCost
	; 12-Aug-2008	Luke    SR15691: Added external calls for costings 
	; 12-Aug-2008	Luke	SR15813: added transaction types to processing
	; 07-Mar-2008   Luke	Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set idItem = pobjMove.Item.ItemId
	
	;+++++++++++++++++++++++++++++++++++++++
	LOCK +^alSOHProcessing(idItem):2
	if '$test {
		set strMessage = $$$Text($listbuild("IN00853",idItem))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	;	"Can not acquire a lock for Item: (%1) please try again"
	;+++++++++++++++++++++++++++++++++++++++
	
	} else {
	; SR16871 vvv
	;	lock -^alSOHProcessing(idItem)
	;;	set fltCost = $$GetCostV2^INARTKOST(idItem) ; SR16871
	;	set fltCost = $$GetCost^INItemCost(idItem,pobjMove.FromLocn.Code,$$$enumAverageCost)
	;}
	
	;if $$$ISOK(sc) {
		set fltCost = $$GetCost^INItemCost(idItem,pobjMove.FromLocn.Code,$$$enumAverageCost)
	; SR16871 ^^^
	
	; Initial Load : Stock History & Period Balance
	;---------------------------------------
		set objTransType   = ##class(alSOH.dTransactionType).%OpenId(9)
		set objFromStkHist = ##class(alSOH.piSOH).Post(pobjMove,
													   pobjMove.FromLocn,
													   pobjMove.FromStorage,
													   pobjMove.QtyPicked,
													   fltCost,
													   objTransType,
													   .sc)
													
		if $$$ISERR(sc) {
		//	set strMessage = $$$Text("IN00711")
		;	TODO : Text message
			set sc = $system.Status.AppendStatus(($$$ERROR($$$GeneralError,"Error Processing Movement in alDRP.dMovementType.InitialLoad")),sc)
		}
	;+++++++++++++++++++++++++++++++++++++++ ; SR16871
		LOCK -^alSOHProcessing(idItem)
	;+++++++++++++++++++++++++++++++++++++++
	}
	quit sc
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
</Storage>
</Class>
</Export>