<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.VisitList">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>
<UDLText name="T">
<Content>// Not used in the rest of Alphalinc</Content>
</UDLText>

<Property name="visited">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="history">
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="count">
<Type>%Integer</Type>
</Property>

<Property name="length">
<Type>%Integer</Type>
</Property>

<Method name="Start">
<Implementation><![CDATA[	kill ..visited
	kill ..history
	set ..count=0
	set ..length=0]]></Implementation>
</Method>

<Method name="Has">
<FormalSpec>fName,rName</FormalSpec>
<Implementation><![CDATA[	if rName="" { quit 0 }
	if fName '= "" {
		if ($get(..visited(rName,fName))'="") {
			quit 1
		}
		quit 0
	} 
	if ($data(..visited(rName))=1) || ($data(..visited(rName))=11) {
		quit 1
	}
	quit 0]]></Implementation>
</Method>

<Method name="Add">
<FormalSpec>fName,rName</FormalSpec>
<Implementation><![CDATA[	if rName="" { quit }
	if ..Has(fName,rName) { quit }
	if fName '= "" {
		set ..visited(rName,fName)=1
		set ..count=..count+1
		set ..history(..count)=..ToList()

	} else {
		set ..visited(rName)=1
		set ..count=..count+1
		set ..history(..count)=..ToList()
	}]]></Implementation>
</Method>

<Method name="Extract">
<FormalSpec>x</FormalSpec>
<Implementation><![CDATA[	merge x = ..visited]]></Implementation>
</Method>

<Method name="ToList">
<Implementation><![CDATA[	set build=""
	set r=""
	set ..length=0
	for {
		set r=$order(..visited(r))
		quit:r=""
		if ($data(..visited(r))=1) || ($data(..visited(r))=11) {
			set build=build_";^"_r
			set ..length=..length+1
		}
		set f=""
		for {
			set f=$order(..visited(r,f))
			quit:f=""
			set build=build_";"_f_"^"_r
			set ..length=..length+1

		}
	}	
	quit build]]></Implementation>
</Method>

<Method name="zw">
<Implementation><![CDATA[	set build=""
	set r=""
	set ..length=0
	for {
		set r=$order(..visited(r))
		quit:r=""
		
		if ($data(..visited(r))=1) || ($data(..visited(r))=11) {			
			set build=build_";^"_r
			set ..length=..length+1
			write !,r
		}
		set f=""
		for {
			set f=$order(..visited(r,f))
			quit:f=""
			set build=build_";"_f_"^"_r
			set ..length=..length+1
			write !,f_"^"_r
		}
	}	
	quit build]]></Implementation>
</Method>
</Class>
</Export>