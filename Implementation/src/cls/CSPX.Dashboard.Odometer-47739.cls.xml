<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.Dashboard.Odometer">
<Description><![CDATA[
SVG-based Odometer for Ensemble Dashboard.]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Meter</Super>
<System>3</System>

<Parameter name="MINHEIGHT">
<Default>25</Default>
</Parameter>


<Parameter name="MINWIDTH">
<Default>50</Default>
</Parameter>


<Parameter name="HEIGHT">
<Default>25</Default>
</Parameter>


<Parameter name="WIDTH">
<Default>75</Default>
</Parameter>


<Method name="OnSVGStyle">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
	.Odometer-body {
		fill: url(#Odometer-bodyGrad);
		stroke: black;
		stroke-width: 1px;
	}

	.Odometer-levelTextBox {
		fill: url(#Odometer-bodyGrad2);
		stroke: black;
		stroke-width: 0.8;
	}

	.Odometer-levelText {
		pointer-events: none;
		font-size: 8;
		fill: black;
		font-weight: bold;
		stroke: none;
		font-family: courier-new;
	}
	.Odometer-levelTextNeg {
		pointer-events: none;
		font-size: 8;
		fill: red;
		font-weight: bold;
		stroke: none;
		font-family: courier-new;
	}
	>
]]></Implementation>
</Method>

<Method name="OnSVGDefs">
<Description><![CDATA[
Draw the defs section of this SVG meter]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
<linearGradient id="Odometer-bodyGrad" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:#EEEEEE" />
<stop offset="50%" style="stop-color:darkgray" />
<stop offset="90%" style="stop-color:gray" />
</linearGradient>

<linearGradient id="Odometer-bodyGrad2" x1="0%" y1="0%" x2="0%" y2="100%">
<stop offset="0%" style="stop-color:gray" />
<stop offset="20%" style="stop-color:darkgray" />
<stop offset="90%" style="stop-color:#EEEEEE" />
</linearGradient>
>
]]></Implementation>
</Method>

<Method name="OnSVGScript">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&js<
	
function Odometer_setProperty(property,value)
{
	switch (property) {
	default:
		return false;
	case 'level':
		if (value == this.level) {
			return;
		}
		
		// update level
		this.level = value;
		var id = this.meterId;
		
		// update odometer text
		var lvl = this.level * this.scaleFactor;
		var text = document.getElementById(id + "_levelText");
		text.setAttribute("class",greaterThanEq(lvl,0) ? "Odometer-levelText" : "Odometer-levelTextNeg");

		if (greaterThanEq(lvl,10000000) || lessThanEq(lvl,-1000000)) {
			lvl = "\043\043\043\043\043\043";
		}
		else {
			lvl = Math.round(lvl);
		}
		setTextNode(id + "_levelText",lvl);

		break;
	}
	return true;
}
>
]]></Implementation>
</Method>

<Method name="OnSVGBody">
<Description><![CDATA[
Draw the body of this SVG meter]]></Description>
<Implementation><![CDATA[
	// figure out number of digits
	Set tUp = $ZABS(..RangeUpper)
	Set tLow = $ZABS(..RangeLower)
	Set tMax = $S((tUp > tLow):tUp,1:tLow)

	If (tMax > 0) {
		Set digits = $ZLOG(tMax)+1
	}
	Else {
		Set digits = 2
	}

	Set off = (..Width / 2) - 5
	&html<<rect class="Odometer-body" x="#((..Width/2)-off)#" y="1" width="#(..Width-10)#" height="10" rx="2" />>
	
	Do ..DrawOdometer(..MeterId, "Odometer", ..Width/2, 2, digits)
]]></Implementation>
</Method>

<Method name="DrawOdometer">
<Description><![CDATA[
Utility method for drawing odometer box.
This is called by other meters as well.
<var>pClass</var> is name of meter using the odometer
<var>pCenterX</var> is x (center) placement of odometer
<var>pTop</var> is y (top) placement of odometer
<var>pDigits</var> is number of digits within the odometer]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer,pClass:%String,pCenterX:%Integer,pTop:%Integer,pDigits:%Integer=6</FormalSpec>
<Implementation><![CDATA[
	Set width = (pDigits + 1) * 5
	
	&html<
		<rect class="#(pClass)#-levelTextBox" x="#(pCenterX-(width/2))#" y="#(pTop)#" width="#(width)#" height="8" rx="1" />
		<text id="#(id)#_levelText" class="#(pClass)#-levelText" x="#(pCenterX+(width/2))#" y="#(pTop+7)#" text-anchor="end">0</text>
	>
	// odometer lines
	Set x = pCenterX + (width/2)
	For n = 1:1:pDigits {
		Set x = x - 4.85
		&html<<line style="stroke:gray; stroke-width:0.1;" x1="#(x)#" y1="#(pTop+.5)#" x2="#(x)#" y2="#(pTop+7.5)#" />>
	}
]]></Implementation>
</Method>
</Class>
</Export>