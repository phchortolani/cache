<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsBPLWizard">
<Description><![CDATA[
Popup wizard used by BPL Editor.
This is a modal window displayed by the Studio BPL editor.
When launched it is passed a set of URL parameters:<br>
"TYPE"<br>
"DATA"<br>]]></Description>
<IncludeCode>Ensemble</IncludeCode>
<Super>%CSP.Page</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<html>
<head><title>Ensemble BPL Wizard</title>
<style type="text/css">
body {
	background: #c5d6d6;
	font-family: verdana;
	margin: 0px;
	padding-left: 20px;
}

.title {
	background: darkblue;
	color: white;
	font-weight: bold;
	text-align: left;
	padding-top: 5px;
	padding-bottom: 5px;
	padding-left: 5px;
}

.help {
	font-size: 0.8em;
	color: darkblue;
	border-bottom: 1px solid darkblue;
	padding-left: 5px;
	padding-right: 5px;
	line-height: 125%;
}

.body  {
	padding-top: 5px;
	padding-bottom: 5px;
}

.btnBar {
	border-top: 1px solid darkblue;
	text-align: right;
	padding-top: 2px;
	padding-bottom: 2px;
}

.label {
	color: darkblue;
	font-size: 0.8em;
}

textarea.input {
	font-size: 0.8em;
}

</style>

<script type="text/JavaScript">

var dialogType = '#($G(%request.Data("TYPE",1)))#';

// inspector delimiters (must match CSPX.EnsBPLSVG)
var insDelim1 = '\x01';
var insDelim1a = '\x02';
var insDelim2 = '\x03';

function initDialog()
{
	// if there is a 'main' control, give it focus
	var ctrl = self.document.getElementById('main');
	if (ctrl) {
		ctrl.focus();
		ctrl.select();
	}
	
	switch (dialogType) {
	case 'call':
		productionChange();
		break;
	}
}

/// User selected a new production
function productionChange()
{
	var prod = self.document.getElementById('production');
	var host = self.document.getElementById('host');
	var reqList = self.document.getElementById('reqList');
	var respList = self.document.getElementById('respList');
	var radioProcess = self.document.getElementById('radioProcess');
	var radioComponent = self.document.getElementById('radioComponent');
	var radioOperation = self.document.getElementById('radioOperation');
	
	var type = '';
	if (radioComponent.checked) {
		type = 'component';
	}
	else if (radioProcess.checked) {
		type = 'process';
	}
	else {
		type = 'operation';
	}

	self.document.getElementById('hostInputType').value = '';
	self.document.getElementById('hostOutputType').value = '';
	self.document.getElementById('hostInputProps').value = '';
	self.document.getElementById('hostOutputProps').value = '';
	if (reqList) {
		reqList.options.length = 0;
	}
	if (respList) {
		respList.options.length = 0;
	}

	if (prod.value == '') {
		host.options.length = 0;
		host.disabled = true;
	}
	else {
		host.options.length = 0;
		host.disabled = false;
		host.value = '';
		
		// call to server to get list of host items
		getHostList(prod.value,type);
	}
}

/// User request to select a new host type
function setHostType(type)
{
	switch(type) {
	case 'process':
		self.document.getElementById('radioProcess').checked = true;
		break;
	case 'operation':
		self.document.getElementById('radioOperation').checked = true;
		break;
	case 'component':
		self.document.getElementById('radioComponent').checked = true;
		break;
	}

	productionChange();
}

/// User click on label associated with a checkbox.
function checkItem(id)
{
	var cb = self.document.getElementById(id);
	if (cb) {
		cb.checked = !cb.checked;
	}
}


/// User selected a new request type
function requestChange()
{
	var prod = self.document.getElementById('production');
	var host = self.document.getElementById('host');
	var request = self.document.getElementById('reqList');
	var response = self.document.getElementById('respList');
	if (prod.value != '') {
		getHostAPI(prod.value,host.value,request.value,response.value);
	}
}

/// User selected a new response type
function responseChange()
{
	// same behavior
	requestChange();
}

/// User selected a new host
function hostChange()
{
	var prod = self.document.getElementById('production');
	var host = self.document.getElementById('host');
	if (prod.value != '') {
		getHostAPI(prod.value,host.value,'');
	}
}

// get the context objject passed in by the parent window
// this is an object with these properties:
// context.transform, context.returnValue
function getContext()
{
	return window.dialogArguments;
}

/// Try to show a help window
function btnHelp()
{
	var key = '';
	switch(dialogType) {
	case 'call':
		key = 'EBPL_call';
		break;
	}
	
	if ('' != key) {
		var helpWin = window.open('/csp/docbook/DocBook.UI.Page.cls?KEY='+key,'helpWindow');
		helpWin.focus();
	}
}

function btnOK()
{
	var context = getContext();

	// take appropriate OK action
	switch(dialogType) {
	case 'call':
		var activityName = self.document.getElementById('activityName');
		var prod = self.document.getElementById('production');
		var host = self.document.getElementById('host');

		if (prod.value == '') {
			alert('Please select a production.');
			return false;
		}
		if (host.value == '') {
			alert('Please select a target to call.');
			return false;
		}
		
		var create = self.document.getElementById('createRR').checked;
		var addMissing = self.document.getElementById('addMissing').checked;
		var async = self.document.getElementById('async').checked;

		// build serialized request/response structures
		var inputType = self.document.getElementById('hostInputType').value;
		var outputType = self.document.getElementById('hostOutputType').value;

		// get current req/resp from drop downs
		var reqClass = self.document.getElementById('reqList').value;
		var respClass = self.document.getElementById('respList').value;

		/*  serialized structure:
			(general) [request|response]:class\x02
			(assigns)  assign:property:action:key:value\x02
		*/
		var reqState = null;
		var respState = null;
		var missing = '';

		if (reqClass != '') {
			reqState = 'request' + insDelim2 + reqClass + insDelim1a;
		}
		if (respClass != '') {
			respState = 'response' + insDelim2 + respClass + insDelim1a;
		}

		// make best guess at matching inputs and outputs to context
		var bpContext = self.document.getElementById('bpContext').value;
		var inputList = self.document.getElementById('hostInputProps').value;
		var outputList = self.document.getElementById('hostOutputProps').value;

		// normalize sets
		var bpSet = new Object();
		var inSet = new Object();
		var outSet = new Object();
		var s = bpContext.split(';');
		for (var n = 0; n < s.length; n++) {
			if (s[n] != '') { bpSet[s[n]] = ''; }
		}
		var s = inputList.split(';');
		for (var n = 0; n < s.length; n++) {
			if (s[n] != '') { inSet[s[n]] = ''; }
		}
		var s = outputList.split(';');
		for (var n = 0; n < s.length; n++) {
			if (s[n] != '') { outSet[s[n]] = ''; }
		}

		// input list
		for (var n in inSet) {
			var t = n.split(':');
			var prop = t[0];
			// special case for FlowSheet
			if (prop == '%StepResponse') {
				reqState += 'assign' + insDelim2 + ('callrequest.'+prop) + insDelim2 + 'set' + insDelim2 + '' + insDelim2 + ('"'+respClass+'"') + insDelim1a;
			}
			else if (prop.charAt(0) != '%') {
				if (bpSet[n]!=null || addMissing) {
					// context property matches request
					reqState += 'assign' + insDelim2 + ('callrequest.'+prop) + insDelim2 + 'set' + insDelim2 + '' + insDelim2 + ('context.'+prop) + insDelim1a;
				}
				else {
					// assign property to ""
					reqState += 'assign' + insDelim2 + ('callrequest.'+prop) + insDelim2 + 'set' + insDelim2 + '' + insDelim2 + ('""') + insDelim1a;
				}
				// add missing props to list
				if (bpSet[n]==null) {
					bpSet[n] = '';
					missing += n + ';';
				}
			}
		}
		// output list
		for (var n in outSet) {
			var t = n.split(':');
			var prop = t[0];
			if (prop.charAt(0)!='%') {
				if (bpSet[n]!=null || addMissing) {
					// context property matches response
					respState += 'assign' + insDelim2 + ('context.'+prop) + insDelim2 + 'set' + insDelim2 + '' + insDelim2 + ('callresponse.'+prop) + insDelim1a;
				}
	
				// add missing props to list
				if (bpSet[n]==null) {
					bpSet[n] = '';
					missing += n + ';';
				}
			}
		}

		// return values
		context.returnValue = true;

		if ('' != activityName.value) {
			context.Name = activityName.value;
		}
		else {
			// construct name by shortening host name
			var aname = host.value.split('.');
			aname = aname.length > 0 ? aname[aname.length-1] : host.value;
			context.Name = aname;
		}

		context.Target = host.value;
		context.Async = async;
		context.Annotation = host.value;

		if (reqState!=null && create) {
			context.Request = reqState;
		}
		if (respState!=null && create) {
			context.Response = respState;
		}
		if (addMissing) {
			context.Missing = missing;
		}
		break;

	default:
		context.returnValue = null;
		break;
	}

	// notify parent & close window
	window.close();
}

function btnCancel()
{
	getContext().returnValue = null;
	window.close();
}

</script>>

	// set up hyper-event for this page
	Write ..HyperEventHead(),!

	// write out methods that perform the hyper-calls
	Write "<script language=""javascript"">",!

	Write "function getHostList(prod,type)",!
	Write "{",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsBPLWizard.GetHostList","prod,type",1)
 	Write ";",!
	Write "}",!

	Write "function getHostAPI(prod,host,req,resp)",!
	Write "{",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsBPLWizard.GetHostAPI","prod,host,req,resp",1)
 	Write ";",!
	Write "}",!

	Write "</script>",!

	&html<</head>
<body onload="initDialog();">>

	#; set up hyper-event frame for this page
	Write ..HyperEventFrame(),!

	#; url parms
	Set tBPContext = $G(%request.Data("BPCONTEXT",1))
	Set tType = $G(%request.Data("TYPE",1))
	Set tData = $G(%request.Data("DATA",1))
	Set tLang = $G(%request.Data("LANG",1))

	Set tMethod = ""
	Set tTitle = "UNKNOWN"
	Set tHelp = "Unknown type"
	
	#; get parms for page type
	If (tType = "call") {
		Set tMethod = "HTMLcall"
		Set tTitle = "Create a call activity."
		Set tHelp = "This wizard constructs a call to a Business Process, Business Operation, or pre-defined Business Process Component."
	}

	#; some hidden fields to hold values
	&html<<div style="display: none;">
		<input type="hidden" id="bpContext" value="#($ZCVT(tBPContext,"O","HTML"))#">
		<input type="hidden" id="hostInputType" value="">
		<input type="hidden" id="hostOutputType" value="">
		<input type="hidden" id="hostInputProps" value="">
		<input type="hidden" id="hostOutputProps" value="">
		</div>
	>

	#; draw body
	&html<<table border="0" cellpassing="1" cellspacing="0" width="100%" height="100%">
	<tr><td class="title">#(tTitle)#</td></tr>
	<tr><td class="help">#(tHelp)#</td></tr>
	<tr><td height="80%" valign="top" class="body">>
	
	#; dispatch to method to draw contents
	If (tMethod '= "") {
		Do $zobjclassmethod(..%ClassName(1),tMethod,tType,tData,tLang)
	}
	Else {
		&html<Unknown page type: #(tType)#>
	}

	&html<</td></tr>
	<tr><td class="btnBar">>
	
	&html<
	<input type="button" value=" Help " onclick="btnHelp();"/>
	&nbsp;&nbsp;&nbsp;
	<input type="button" value=" OK " onclick="btnOK();"/>
	&nbsp;
	<input type="button" value="Cancel" onclick="btnCancel();"/>
	&nbsp;&nbsp;&nbsp;>

	&html<
	</td></tr></table>
	</body>
	</html>>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="HTMLcall">
<Description><![CDATA[
Contents of <call> wizard]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pType:%String,pData:%String,pLang:%String</FormalSpec>
<Implementation><![CDATA[
	&html<<div class="label">Name for this activity:</div>
		<div><input id="activityName" type="text"/></div>>

	&html<<div class="label">Production:</div>
		<div><select id="production" style="width: 400px;" onchange="productionChange();">
		<option value="">>
	
	Set tLast = $G(^CacheTemp.BPLWizard("production"))
	
	Do ..GetProductionList(.tProdList)
	Set tProd = $O(tProdList(""))
	While (tProd '= "") {
		&html<<option value="#($ZCVT(tProd,"O","HTML"))#" #($S(tLast=tProd:"selected",1:""))#>#($ZCVT(tProd,"O","HTML"))#>
		Set tProd = $O(tProdList(tProd))
	}

	&html<</select></div>>
	
	Set msgBO = "Business Operation"
	Set msgBP = "Business Process"
	Set msgBPC = "Business Process Component"

	Set helpBO = "Create a call to a Business Operation"
	Set helpBP = "Create a call to a Business Process"
	Set helpBPC = "Create a call to a pre-defined Business Process Component"
	
	&html<<div style="padding-top: 5px;" class="label">Target:<br>
	<input type="radio" id="radioOperation" name="hostType" value="operation" onclick="productionChange();"><span title="#(helpBO)#" onclick="setHostType('operation');">#(msgBO)#</span><br>
	<input type="radio" checked id="radioProcess" name="hostType" value="process" onclick="productionChange();"><span title="#(helpBP)#" onclick="setHostType('process');">#(msgBP)#</span><br>
	<input type="radio" id="radioComponent" name="hostType" value="component" onclick="productionChange();"><span title="#(helpBPC)#" onclick="setHostType('component');">#(msgBPC)#</span></div>>

	&html<<div><select id="host" size="6" disabled="true" style="width: 400px;" onchange="hostChange();">>
	&html<</select></div>>
	
	&html<<div class="label">Request Type:</div>
		<div><select id="reqList" disabled="true" style="width: 400px;" onchange="requestChange();">
		</select></div>
	>

	&html<<div class="label">Response Type:</div>
		<div><select id="respList" disabled="true" style="width: 400px;" onchange="responseChange();">
		</select></div>
	>

	&html<<br>
	<div class="label"><input id="createRR" type="checkbox" checked><span onclick="checkItem('createRR');">Create default Request and Response blocks</span></div>
	<div class="label"><input id="addMissing" type="checkbox"><span onclick="checkItem('addMissing');">Add missing properties to Business Process context</span></div>
	<br>
	<div class="label"><input id="async" type="checkbox"><span onclick="checkItem('async');">Use an asynchronous call</span></div>
	>
]]></Implementation>
</Method>

<Method name="GetProductionList">
<Description><![CDATA[
Get a list of current productions]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pProdList:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set $ZT = "Trap"
	Do {
		Set tRS = ##class(%ResultSet).%New("Ens.Config.Production:ProductionStatus")
		Set tSC = tRS.Execute()
		If $$$ISERR(tSC) Quit

		While (tRS.Next()) {
			Set tName = tRS.Data("Production")
			Set pProdList(tName) = ""
		}
	} While(0)

Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="GetItemsForProduction">
<Description><![CDATA[
Get a list of BPL "components" within a given production;]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProdName:%String,pType:%String,*pHostList:%String</FormalSpec>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set $ZT = "Trap"
	Do {
		#; Cache production name for next time
		Set ^CacheTemp.BPLWizard("production") = pProdName
		
		Set tProd = ##class(Ens.Config.Production).%OpenId(pProdName)
		If '$IsObject(tProd) {
			Set tSC = $$$ERROR($$$GeneralError,"Unable to open production: " _ tProdName)
			Quit
		}

		Set tCount = tProd.Items.Count()
		For i = 1:1:tCount {
			Set tItem = tProd.Items.GetAt(i)
			Set tItemType = tItem.BusinessType()
			Set tName = $S(tItem.Name="":tItem.ClassName,1:tItem.Name)
			
			If ((pType = "process") && (tItemType = $$$eHostTypeProcess)) {
				If ('..IsComponent(tItem.ClassName)) {
					Set pHostList(tName) = ""
				}
			}
			ElseIf ((pType = "component") && (tItemType = $$$eHostTypeProcess)) {
				If (..IsComponent(tItem.ClassName)) {
					Set pHostList(tName) = ""
				}
			}
			ElseIf ((pType = "operation") && (tItemType = $$$eHostTypeOperation)) {
				Set pHostList(tName) = ""
			}
		}

	} While(0)

Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="GetHostInterface">
<Description><![CDATA[
Given a production and host name return its *interface*; that
is the set of properties defined by its request and response classes.
Inputs and outputs are returned as a serialized list in the form:
name:type:collection;
If <var>pRequestClass</var> is non-"", then use it to find the desired
response, else return the first response.<br>
If type is %String, it is omitted to save space.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProdName:%String,pHost:%String,pRequestType:%String,pResponseType:%String,*pInputType:%String,*pReqList:%List,*pRespList:%List,*pOutputType:%String,*pInputList:%String,*pOutputList:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set $ZT = "Trap"

	Set pInputType = ""
	Set pOutputType = ""
	Set pReqList = ""		// set of possible requests
	Set pRespList = ""		// set of possible responses (for current request)
	Set pInputList = ""
	Set pOutputList = ""

	Do {
		Set tProd = ##class(Ens.Config.Production).%OpenId(pProdName)
		If '$IsObject(tProd) {
			Set tSC = $$$ERROR($$$GeneralError,"Unable to open production: " _ tProdName)
			Quit
		}

		#; find the host within the production
		Set tCount = tProd.Items.Count()
		For i = 1:1:tCount {
			Set tItem = tProd.Items.GetAt(i)
			Set tName = $S(tItem.Name="":tItem.ClassName,1:tItem.Name)
			If (tName = pHost) {
				#; assume this is the host class
				Set tClass = tItem.ClassName

				Set tRequestList = ..GetHostRequestClass(tClass)

				#; pull out class, add sub classes, to build list of possible requests
				Set pReqList = ""
				For n = 1:1:$LL(tRequestList) {
					Set tRCls = $LG(tRequestList,n)
					Set pReqList = pReqList _ $LB(tRCls)

					#; get list of subclasses
					Set tRS = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:SubclassOf")
					Set tSC = tRS.Execute(tRCls)  Quit:$$$ISERR(tSC)
					While (tRS.Next()) {
						Set tSubCls = tRS.Data("Name")  Continue:'##class(%Dictionary.CompiledClass).%ExistsId(tSubCls)
						Set pReqList = pReqList _ $LB(tSubCls)
					}
				}

				#; validate pRequestType
				#; i.e., which request should we use to get the list of properties
				If $LF(pReqList,pRequestType)>0 {
					Set pInputType = pRequestType
				} Else {
					#; find first request
					Set pInputType = $LG(pReqList)
				}
				If (pInputType'="") {
					#; get properties of request
					Set tRequest = ##class(%Dictionary.CompiledClass).%OpenId(pInputType)
					If $IsObject(tRequest) {
						For n = 1:1:tRequest.Properties.Count() {
							Set tProp = tRequest.Properties.GetAt(n)
							If ('tProp.Private&&'tProp.Internal) {
								Set tType = $S(tProp.Type="%Library.String":"",1:tProp.Type)
								Set pInputList = pInputList _ tProp.Name _ ":" _ tType _ ":" _ tProp.Collection _ ";"
							}
						}
					}
				}

				#; responses
				Set tResponseList = ..GetHostResponseClass(tClass,$S(pRequestType'="":pRequestType,1:pInputType))

				#; pull out class, add sub classes, to build list of possible responses
				Set pRespList = ""
				For n = 1:1:$LL(tResponseList) {
					Set tRCls = $LG(tResponseList,n)
					Set pRespList = pRespList _ $LB(tRCls)

					#; get list of subclasses
					Set tRS = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:SubclassOf")
					Set tSC = tRS.Execute(tRCls)  Quit:$$$ISERR(tSC)
					While (tRS.Next()) {
						Set tSubCls = tRS.Data("Name")  Continue:'##class(%Dictionary.CompiledClass).%ExistsId(tSubCls)
						Set pRespList = pRespList _ $LB(tSubCls)
					}
				}

				#; validate pRequestType
				#; i.e., which request should we use to get the list of properties
				If $LF(pRespList,pResponseType)>0 {
					Set pOutputType = pResponseType
				} Else {
					#; find first response
					Set pOutputType = $LG(pRespList)
				}

				If (pOutputType'="") {
					#; get properties of response
					Set tResponse = ##class(%Dictionary.CompiledClass).%OpenId(pOutputType)
					If $IsObject(tResponse) {
						For n = 1:1:tResponse.Properties.Count() {
							Set tProp = tResponse.Properties.GetAt(n)
							If ('tProp.Private&&'tProp.Internal) {
								Set tType = $S(tProp.Type="%Library.String":"",1:tProp.Type)
								Set pOutputList = pOutputList _ tProp.Name _ ":" _ tType _ ":" _ tProp.Collection _ ";"
							}
						}
					}
				}
			}
		}

	} While(0)

Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="GetHostRequestClass">
<Description><![CDATA[
Given a host class name, return the name(s) of its 
request class, if any.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	Set tRet = ""
	Set $ZT = "Trap"
	Do {
		Set tRet = $zobjclassmethod(pClass,"GetMessageList")
	} While(0)

Exit
	Quit tRet
Trap
	#; the error is most likely that this host does not
	#; support the getMessage API.
 	Set $ZT=""
	Set tRet = ""
	Goto Exit
]]></Implementation>
</Method>

<Method name="GetHostResponseClass">
<Description><![CDATA[
Given a host and request class name, return the name(s) of its 
response class, if any.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String,pRequest:%String</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	Set tRet = ""
	Set $ZT = "Trap"
	Do {
		Set tRet = $zobjclassmethod(pClass,"GetResponseClassList",pRequest)
	} While(0)

Exit
	Quit tRet
Trap
	#; the error is most likely that this host does not
	#; support the getMessage API.
 	Set $ZT=""
	Set tRet = ""
	Goto Exit
]]></Implementation>
</Method>

<Method name="IsComponent">
<Description><![CDATA[
Given a business process class name, return if it is a component]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set tRet = 0
	Set $ZT = "Trap"
	Do {
		Set tRet = $zobjclassmethod(pClass,"IsComponent")
	} While(0)

Exit
	Quit tRet
Trap
	#; the error is most likely that this host does not
	#; support the IsComponent API.
 	Set $ZT=""
	Set tRet = 0
	Goto Exit
]]></Implementation>
</Method>

<Method name="GetHostList">
<Description><![CDATA[
Called from client to get new set of host items]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProdName:%String,pType:%String</FormalSpec>
<Implementation><![CDATA[
	Do ..GetItemsForProduction(pProdName,pType,.tHostList)
	
	&js<var host = CSPPage.document.getElementById('host');>
	Set tHost = $O(tHostList(""))
	While (tHost '= "") {
		&js<host.options[host.options.length] = new Option('#($ZCVT(tHost,"O","JS"))#','#($ZCVT(tHost,"O","JS"))#');>
		Set tHost = $O(tHostList(tHost))
	}
]]></Implementation>
</Method>

<Method name="GetHostAPI">
<Description><![CDATA[
Called from client to get the interface for the given host item.
This picks up the possible request & response classes as well as the
the set of properties in the default request and response.
<var>pRequest</var> and <var>pResponse</var> are the current selected types.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProdName:%String,pHost:%String,pRequest:%String="&quot;,pResponse:%String="&quot;</FormalSpec>
<Implementation><![CDATA[
	Do ..GetHostInterface(pProdName, pHost, pRequest,pResponse, .tInputType, .tReqList, .tRespList, .tOutputType, .tInputList, .tOutputList)

	&js<
	var ctrl = CSPPage.document.getElementById('hostInputType');
	ctrl.value = '#(tInputType)#';
	var ctrl = CSPPage.document.getElementById('hostOutputType');
	ctrl.value = '#(tOutputType)#';
	var ctrl = CSPPage.document.getElementById('hostInputProps');
	ctrl.value = '#(tInputList)#';
	var ctrl = CSPPage.document.getElementById('hostOutputProps');
	ctrl.value = '#(tOutputList)#';
	>

	If (pRequest = "") {
		&js<
		var ctrl = CSPPage.document.getElementById('reqList');
		ctrl.disabled = false;
		ctrl.options.length = 0;
		>
		For n=1:1:$LL(tReqList) {
			Set tReq = $LG(tReqList,n)
			&js<ctrl.options[ctrl.options.length] = new Option('#($ZCVT(tReq,"O","JS"))#','#($ZCVT(tReq,"O","JS"))#');>
		}

		&js<
		var ctrl = CSPPage.document.getElementById('respList');
		ctrl.disabled = false;
		ctrl.options.length = 0;
		>
		For n=1:1:$LL(tRespList) {
			Set tResp = $LG(tRespList,n)
			&js<ctrl.options[ctrl.options.length] = new Option('#($ZCVT(tResp,"O","JS"))#','#($ZCVT(tResp,"O","JS"))#');>
		}
	}
]]></Implementation>
</Method>
</Class>
</Export>