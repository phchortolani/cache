<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="COM.AlphaWeb">
<ClassType/>
<CompileAfter>COM.fwk.util.WSUtil</CompileAfter>
<IncludeCode>COMAlphaWeb</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService</Super>
<UDLText name="T">
<Content>
//Parameter LOCATION = "http://ORION/csp/DEV"; // SR14900

</Content>
</UDLText>


<Parameter name="NAMESPACE">
<Description><![CDATA[
TODO: change this to actual network address.
URL for invoking the WebService. 
TODO: change this to actual SOAP namespace.
SOAP Namespace for the WebService]]></Description>
<Default>http://10.0.1.51/csp/DEV</Default>
</Parameter>


<Parameter name="SERVICENAME">
<Description><![CDATA[
Name of the WebService.]]></Description>
<Default>AlphaWeb</Default>
</Parameter>

<UDLText name="T">
<Content>
//-------------------- automatically update web services parameters -------------//

</Content>
</UDLText>

<UDLText name="T">
<Content>
/* // SR14900
ClassMethod %OnCompile() [ CodeMode = generator, ServerOnly ]
{
	;-------------------------------------------------------------------------------
	; OnCompile the LOCATION parameter is redefined.
	; 
	; History
	; 19-Apr-2005	shobby		SR13761:Renamed from OnCompile (to allow subclasses to recompile) and used standard interface wrapper
	; ??-???-????	??????		//this code causes the sub-classes to not be compiled resulting in errors
	;-------------------------------------------------------------------------------
 	;
	do ##class(COM.fwk.util.WSUtil).setWSLocationToCurrentNamespace(%class)
	quit $$$OK
}
*/
</Content>
</UDLText>

<UDLText name="T">
<Content>
//----------------------------- web services methods ------------------------------//

</Content>
</UDLText>


<Method name="AvailableLocQOH">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompanyId:%String,pstrUserId:%String,pstrPassword:%String,pstrItemId:%String,pstrLocationId:%String,pintType:%Integer</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Numeric</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; For the provided company, item and location it returns the Quantity on Hand
	; 
	; Questions:
	; 	Company data type shouldn't be string?
	;
	; Params:
	; 	pstrCompanyId	Target company number
	;	pstrUserId		A valid AlphaLinc user
	;	pstrPassword	A valid user password
	;	pstrItemId		A valid AlphaLinc item
	;	pstrLocationId	A valid Alphalinc site location
	;	pintType		Default is 0, (Qty returned type)
	;					(0) FREE (ATP)
	;					(1) FREE + SOURCED
	;					(2) FREE + SOURCED + RESERVED
	;					(3) SOURCED + RESERVED
	;					(4) RESERVED
	;
	; ByRefs:
	;
	; Returns: 
	; 	numeric QOH	
	; 	SOAP fault error message
	;
	; History:
	; 24-Oct-2006	HeberB		SRBR014297: created
	;-------------------------------------------------------------------------------
	new strPreviousCompanyYM, strPreviousCompanyYQUERY, strMethodName
	set strMethodName = "AvailableLocQOH"
 
 	DO ^WWWVAR 

	if (pstrCompanyId = "") {
		do ..ApplicationError($$$ErrorOnParameter, $$$Text("Com00264")_" "_strMethodName)
	}

	if (pintType = "") set pintType = 0
	
	if (pintType < 0) || (pintType > 4) {
		do ..ApplicationError($$$ErrorInvalidType, $$$Text("Com00265")_" "_strMethodName)
	}

	set strPreviousCompanyYM = YM
	set strPreviousCompanyYQUERY = $get(%($get(YQUERY),"YM"))
	
	set YM = pstrCompanyId
	set %(YQUERY,"YM") = pstrCompanyId
	
	
	do ..CheckParameters(strMethodName, pstrUserId, pstrPassword, pstrItemId, pstrLocationId)

	set fltQOH = $$^INARTMENGE(pstrItemId,,pstrLocationId,,pintType)

	if fltQOH < 0 set fltQOH = 0

	set YM = strPreviousCompanyYM
	set %(YQUERY,"YM") = strPreviousCompanyYQUERY

	quit fltQOH
]]></Implementation>
</Method>

<Method name="ReserveLocQty">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompanyId:%String,pstrUserId:%String,pstrPassword:%String,pstrItemId:%String,pstrLocationId:%String,pfltQuantity:%Numeric,pstrReservationNo:%String,pstrHoldUntilDate:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>COM.ReserveLocQtyResultList</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; This webservice provides the user with the ability to reserve stock at a location.
	; If a reception is not found of exactly the same qty as requested, multiple  
	; receptions will be picked to match the requested qty. If the requested
	; qty is greater than the total available, the total available is reserved.
	; 
	;
	; Params:
	; 	pstrCompanyId		Target company number
	;	pstrUserId			A valid AlphaLinc user
	;	pstrPassword		A valid user password
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pfltQuantity 		Qty to be reserved
	;	pstrReservationNo 	Provided reservation number to use for reserve
	;	pstrHoldUntilDate	Date limit to keep the reserve 
	;
	;
	; ByRefs:
	;
	; Returns: 
	; 	A list of elements composed of
	; 	.Qty reserved: 	Quantity Reserved
	; 	.Lot number: 	Return the Lot No 
	; 					
	; 	or Null if no reserve done
	; 	or SOAP fault error message
	;
	; History:
	; 20-Apr-2007	HeberB		SRBR014304: Added var to hold if reservationNo was provided
	; 										Comment code which adds value to reserved qty
	; 18-Apr-2007	HeberB		SRBR014304:	Date var name collision
	; 14-Mar-2007	HeberB		SRBR014304:	Date complete instead of day only
	; 02-Feb-2007	HeberB		SRBR014388: Replace batch name and references by Lot
	; 24-Oct-2006	HeberB		SRBR014298: created
	;-------------------------------------------------------------------------------
	;
	new strPreviousCompanyYM, strPreviousCompanyYQUERY, strMethodName,
		; SRBR014351
		; strStockLocation, strDate, strBatchNumber,
		strStockLocation, strDate, strLotNumber,
		objINWE, objINWER, objResult,lstObjResult,
		fltQtyAvailable, fltQtyToReserve,fltSumQtyAvailable,
		intCounter,arrINWE,loopArray,
		ART, BET, LAP, WED, RENR, INWE1, INWER1,
		strHoldDate,	; BR014304
		blnHasReservationNo		; BR014304
	
	set strMethodName = "ReserveLocQty"
	; SRBR014388
	;set strBatchNumber = ""
	set strLotNumber = ""
	set fltQtyReserved = 0
	
	DO ^WWWVAR 
	// parameters checking

	if (pstrCompanyId = "") || (+pfltQuantity <= 0) {
		do ..ApplicationError($$$ErrorOnParameter, $$$Text("Com00264")_" "_strMethodName)
	}

	set strPreviousCompanyYM = YM
	set strPreviousCompanyYQUERY = $get(%($get(YQUERY),"YM"))
	
	set YM = pstrCompanyId
	set %(YQUERY,"YM") = pstrCompanyId
	
	do ..CheckParameters(strMethodName, pstrUserId, pstrPassword, pstrItemId, pstrLocationId)
	
	set lstObjResult = ##class(COM.ReserveLocQtyResultList).%New()
	
	// find available quantities and does reservation

	set fltQtyToReserve = 0
	set fltQtyAvailable = 0
	set strStockLocation = ""
	set fltSumQtyAvailable = 0
	set intCounter = 0
	set arrINWE = 0

	; BR014304	
	set blnHasReservationNo = (pstrReservationNo '= "")

	; loop through INWE receptions - stock locations
	for {  
		quit:(fltSumQtyAvailable >= pfltQuantity)
		
		set strStockLocation = $order(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation))
		quit:strStockLocation=""

		; if stock location name has asterisk - rule form inartmenge
		continue:$find(strStockLocation,"*") 

		; if stock location blocked
		continue:$PIECE($GET(^INLP(pstrCompanyId,pstrLocationId,strStockLocation,1)),Y,8)=1 
			
		; loop through receptions - date
		set strDate = ""
		for {
			quit:(fltSumQtyAvailable >= pfltQuantity)
			
			set strDate = $order(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate))
			quit:(strDate = "")

			; get reception data
			set objINWE = $get(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate,1))

			continue:'(..IsINWEUsable(pstrItemId,pstrLocationId,strStockLocation,strDate,objINWE))
			
			; one receive is enough
			if ($$$INWEQuantity(objINWE) >= pfltQuantity) {	; do the reserve
				kill arrINWE
				set intCounter = 0
				set fltSumQtyAvailable = 0
				set fltQtyAvailable = pfltQuantity
			} else { 
				if (fltSumQtyAvailable+$$$INWEQuantity(objINWE)) > pfltQuantity {
					set fltQtyAvailable = pfltQuantity	- fltSumQtyAvailable
				} else {
					set fltQtyAvailable = $$$INWEQuantity(objINWE)
				}
			}
			set intCounter = intCounter + 1
			
			set arrINWE(intCounter,0) = fltQtyAvailable
			set arrINWE(intCounter,1) = pstrItemId_","_pstrLocationId_","_strStockLocation_","_strDate
			set arrINWE(intCounter,2) = objINWE
			
			set fltSumQtyAvailable = fltSumQtyAvailable + fltQtyAvailable
		}
	}

	

	for loopArray=1:1:intCounter {
		
		set fltQtyToReserve = arrINWE(loopArray,0)
		set pstrItemId = $piece(arrINWE(loopArray,1),",",1)
		set pstrLocationId = $piece(arrINWE(loopArray,1),",",2)
		set strStockLocation = $piece(arrINWE(loopArray,1),",",3)
		set strDate = $piece(arrINWE(loopArray,1),",",4)
		set objINWE = arrINWE(loopArray,2)
		
		// do reserve
		set objINWER = ""
		;SRBR014304
		;if (pstrReservationNo = "") {
		if '(blnHasReservationNo) {
			set pstrReservationNo = $$^WWWNEXT1("INWER",pstrItemId_","_pstrLocationId_","_strStockLocation_","_strDate,5)
			set objINWER = $get(^INWER(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate,pstrReservationNo,1))
		} else {
			// check whether provided reservno is not already used	
			if $data(^INWER(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate,pstrReservationNo,1)) {
				set YM = strPreviousCompanyYM
				set %(YQUERY,"YM") = strPreviousCompanyYQUERY
				do ..ApplicationError($$$ErrorAlreadyUsedReservationNo,"Already Used Reservation Number at  "_strMethodName)
			}
		}
		; SRBR014388
		;set strBatchNumber = $$$INWEBatchNumber(objINWE)
		set strLotNumber = $$$INWELotNo(objINWE)
		set $$$INWERLaybyQuantity(objINWER) = fltQtyToReserve 
		; hold until date must be set otherwise it is automatically cancelled
		; default is Day +1
		if (pstrHoldUntilDate '= "") { 
			set $$$INWERHoldUntilDate(objINWER) = $zdateh(pstrHoldUntilDate,4) 
		} else {
			;BR014304
			;set $$$INWERHoldUntilDate(objINWER) = +$H + 1
			;set strDate = $H
			;set $piece(strDate,",",1) = +$H + 1
			set strHoldDate = $H
			set $piece(strHoldDate,",",1) = +$H + 1
			set $$$INWERHoldUntilDate(objINWER) = strHoldDate
		}
		set $$$INWERLotNo(objINWER)			= $$$INWELotNo(objINWE)
		set $$$INWERBatchNo(objINWER)		= $$$INWEBatchNumber(objINWE)
		set $$$INWERExpiryDate(objINWER)	= $$$INWEUseableUntilDate(objINWE)
		
		do ^WWWSPEI("INWER",pstrItemId_","_pstrLocationId_","_strStockLocation_","_strDate_","_pstrReservationNo,objINWER,1)
		;SRBR014304
		; no need to add here since it´s being done at RESER^INWER
		;set $$$INWETotalReservedQuantity(objINWE) = $$$INWETotalReservedQuantity(objINWE) + fltQtyToReserve
		
		// the call below will save current objINWE contents,
		// also it decreases INWE quantity by reserved.qty value

		set ART = pstrItemId
		set BET = pstrLocationId
		set LAP = strStockLocation
		set WED = strDate
		set RENR = pstrReservationNo
		
		set INWE1 = objINWE
		set INWER1 = objINWER
		
		do RESER^INWER	; this calls Information^INARTHIST

		// create response	
		set objResult = ##class(COM.ReserveLocQtyResult).%New()
		;SRBR014388
		;set objResult.strBatchNumber = strBatchNumber
		set objResult.strLotNumber = strLotNumber
		set objResult.fltQtyReserved = fltQtyToReserve

		do lstObjResult.Insert(objResult)
	}
	
	set YM = strPreviousCompanyYM
	set %(YQUERY,"YM") = strPreviousCompanyYQUERY
	
	quit lstObjResult
]]></Implementation>
</Method>

<Method name="UnReserveLocQty">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompanyId:%String,pstrUserId:%String,pstrPassword:%String,pstrItemId:%String,pstrLocationId:%String,pfltQuantity:%Numeric,pstrReservationNo:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Numeric</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; This webservice provides the user with the ability to un-reserve stock at a location.
	; If no reservation number then it progressively unreserves until the requested qty or
	; no more reservation is found. 
	; The reservation is cancelled if no reserved qty is left.
	; If no reservation is found, then no action is done. 
	; If a reservation number is provided, the only ones that are unreserved are the ones
	; with the provided reservation number
	; 
	; Params:
	; 	pstrCompanyId		Target company number
	;	pstrUserId			A valid AlphaLinc user
	;	pstrPassword		A valid user password
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pfltQuantity 		Qty to be UN-reserved?????????
	;	pstrReservationNo 	Provided reservation number
	;
	;
	; Returns: 
	; 	.Qty UN-reserved: 	Quantity un-reserved or 0 if none un-reserved
	;
	; History:
	; 24-Oct-2006	HeberB		SRBR014299: created
	;-------------------------------------------------------------------------------
	;
	new strPreviousCompanyYM, strPreviousCompanyYQUERY, strMethodName,
		strStockLocation, strDate, strReservationNo,
		objINWER, objINWE, fltQtyUnReserved, fltQtyToUnReserve, strText

	set strMethodName = "UnReserveLocQty"

	DO ^WWWVAR 

	// parameters checking
	if (pstrCompanyId = "") || (+pfltQuantity <= 0) {
		do ..ApplicationError($$$ErrorOnParameter, $$$Text("Com00264")_" "_strMethodName)
	}

	set strPreviousCompanyYM = YM
	set strPreviousCompanyYQUERY = $get(%($get(YQUERY),"YM"))
	
	set YM = pstrCompanyId
	set %(YQUERY,"YM") = pstrCompanyId
	
	do ..CheckParameters(strMethodName, pstrUserId, pstrPassword, pstrItemId, pstrLocationId)

	set fltQtyUnReserved = 0
	
	if (pstrReservationNo '= "") {
		; get INWER keys by index
		; there may be multiple entries for the same reserv 
		set idxReservationNo = $$$Index(pstrReservationNo)

		set strStockLocation = ""
		for {
			quit:(fltQtyUnReserved = pfltQuantity)
			set strStockLocation = $order(^INWERs(pstrCompanyId,6,idxReservationNo,pstrItemId,pstrLocationId,strStockLocation))
			quit:(strStockLocation = "") 
			set strDate = ""
			for {
				quit:(fltQtyUnReserved = pfltQuantity)
				set strDate = $order(^INWERs(pstrCompanyId,6,idxReservationNo,pstrItemId,pstrLocationId,strStockLocation,strDate))	
				quit:(strDate = "") 
				set objINWER = $get(^INWER(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate,pstrReservationNo,1))

				; check conditions for un-reserve
				if '(..IsAlreadyCancelled(objINWER)) { 
					; if requested qty is greater than ....

					if ($$$INWERLaybyQuantity(objINWER) > (pfltQuantity-fltQtyUnReserved) ) {
						set fltQtyToUnReserve = pfltQuantity - fltQtyUnReserved
					} else {
						set fltQtyToUnReserve = $$$INWERLaybyQuantity(objINWER)
					}
	
					do ..UnReserveINWE(	pstrUserId, pstrCompanyId, pstrItemId, pstrLocationId, strStockLocation,
										strDate, pstrReservationNo, fltQtyToUnReserve, objINWER)
						
					set fltQtyUnReserved = fltQtyUnReserved + fltQtyToUnReserve
				}
			}	
		}
	} else {
		set strStockLocation = ""
		for {
			quit:(fltQtyUnReserved = pfltQuantity)  
			set strStockLocation = $order(^INWER(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation))
			quit:strStockLocation=""
			; if stock location name has asterisk ????
			continue:$find(strStockLocation,"*") 

			; if stock location blocked
			continue:$PIECE($GET(^INLP(pstrCompanyId,pstrLocationId,strStockLocation,1)),Y,8)=1 
	
			; loop through receptions - date
			set strDate = ""
			for {
				quit:(fltQtyUnReserved = pfltQuantity)
				set strDate = $order(^INWER(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate))
				quit:(strDate = "")
				set strReservationNo = ""
				for {
					quit:(fltQtyUnReserved = pfltQuantity)
					set strReservationNo = $order(^INWER(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate,strReservationNo))
					quit:(strReservationNo = "")
					set objINWER = $get(^INWER(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate,strReservationNo,1))
					; if reserve already cancelled
					continue:($$$INWERLaybyQuantity(objINWER)'>0)
					if '(..IsAlreadyCancelled(objINWER)) {
						
						if ($$$INWERLaybyQuantity(objINWER) > (pfltQuantity-fltQtyUnReserved) ) {
							set fltQtyToUnReserve = pfltQuantity - fltQtyUnReserved
						} else {
							set fltQtyToUnReserve = $$$INWERLaybyQuantity(objINWER)
						}
	
						do ..UnReserveINWE(	pstrUserId, pstrCompanyId, pstrItemId, pstrLocationId, strStockLocation,
											strDate, strReservationNo, fltQtyToUnReserve, objINWER)
						
						set fltQtyUnReserved = fltQtyUnReserved + fltQtyToUnReserve
					}
				}
			}
		}
	}
	set YM = strPreviousCompanyYM
	set %(YQUERY,"YM") = strPreviousCompanyYQUERY

	quit fltQtyUnReserved
	; end of UnReserveLocQty
]]></Implementation>
</Method>

<Method name="UpdateLocQty">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompanyId:%String,pstrUserId:%String,pstrPassword:%String,pstrItemId:%String,pstrLocationId:%String,pfltQuantity:%Numeric,pstrReference:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>COM.UpdateLocQtyResultList</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; This webservice provides the user with the ability to update stock at a location.
	; 
	; If pfltQuantity > 0  	It is added to the first INWE entry or to a new one 
	; 						if none is found
	; If pfltQuantity < 0,  It is subtracted from INWE entries until pfltQuantity
	; 						or until no more qty available(not reserved) is found
	; 
	; Params:
	; 	pstrCompanyId		Target company number
	;	pstrUserId			A valid AlphaLinc user
	;	pstrPassword		A valid user password
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pfltQuantity 		Qty to be UN-reserved
	;	pstrReference 		To include on history
	;
	;
	;
	; Returns: 
	; 	A list of objects composed of:
	; 	.Qty updated: 	Quantity updated
	; 	.Lot number: 	Return the Lot No  
	; 					
	; 	or Null if no unreserve 
	;
	; History:
	; 02-Feb-2007	HeberB		SRBR014388:  Replace batch name and references by Lot
	; 24-Oct-2006	HeberB		SRBR014304: created
	;-------------------------------------------------------------------------------
	;
	new strPreviousCompanyYM, strPreviousCompanyYQUERY, strMethodName,
		strStockLocation,strDate,lstObjResult, objResult,fltQtyToUpdate,objINWE

	set strMethodName = "UpdateLocQty"
	
	DO ^WWWVAR 

	// parameters checking
	if (pstrCompanyId = "") || (+pfltQuantity = 0) {
		do ..ApplicationError($$$ErrorOnParameter, $$$Text("Com00264")_" "_strMethodName)
	}

	set strPreviousCompanyYM = YM
	set strPreviousCompanyYQUERY = $get(%($get(YQUERY),"YM"))
	
	set YM = pstrCompanyId
	set %(YQUERY,"YM") = pstrCompanyId
	
	do ..CheckParameters(strMethodName, pstrUserId, pstrPassword, pstrItemId, pstrLocationId)

	set lstObjResult = ##class(COM.UpdateLocQtyResultList).%New()

	set fltQtyToUpdate = $zabs(pfltQuantity)
	set strStockLocation=""
	set strDate = ""
	; loop through INWE receptions - stock locations
	for {  
		quit:(fltQtyToUpdate = 0)
		
		set strStockLocation = $order(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation))
		quit:strStockLocation=""
		
		; if stock location name has asterisk 
		continue:$find(strStockLocation,"*") 

		; if stock location blocked
		continue:$PIECE($GET(^INLP(pstrCompanyId,pstrLocationId,strStockLocation,1)),Y,8)=1 

		; loop through receptions - date
		set strDate = ""
		for {
			quit:(fltQtyToUpdate = 0)
			
			set strDate = $order(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate))
			quit:(strDate = "")

			; get reception data
			set objINWE = $get(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate,1))

			continue:'(..IsINWEUsable(pstrItemId,pstrLocationId,strStockLocation,strDate,objINWE))

			set fltQtyUpdated = ..UpdateStock(pstrUserId,pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,
												strDate,objINWE,pfltQuantity,fltQtyToUpdate,pstrReference)
			
			set fltQtyToUpdate = fltQtyToUpdate - fltQtyUpdated

			set objResult = ##class(UpdateLocQtyResult).%New()
			;SRBR014388
			;set objResult.strBatchNumber = $$$INWEBatchNumber(objINWE)
			set objResult.strLotNumber = $$$INWELotNo(objINWE)
			set objResult.fltQtyUpdated = $case((pfltQuantity <0),$$$YES:-1,:1)*fltQtyUpdated
			do lstObjResult.Insert(objResult)
		}
	}
	; if no INWE entry was found on previous loop, create new  INWE entry
	if (pfltQuantity > 0) && (fltQtyToUpdate > 0) {
		do ..CreateINWEEntry(pstrCompanyId,pstrItemId,pstrLocationId,strMethodName,fltQtyToUpdate)
		set objResult = ##class(UpdateLocQtyResult).%New()
		set objResult.fltQtyUpdated = fltQtyToUpdate
		do lstObjResult.Insert(objResult)
	}

	set YM = strPreviousCompanyYM
	set %(YQUERY,"YM") = strPreviousCompanyYQUERY

	quit lstObjResult
	; end of UpdateLocQty
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
// SRBR014388

</Content>
</UDLText>

<UDLText name="T">
<Content>
//ClassMethod UpdateLocBatch(pstrCompanyId As %String, pstrUserId As %String, pstrPassword As %String, pstrItemId As %String, pstrLocationId As %String, pstrBatchNumber As %String, pfltQuantity As %Numeric, pstrReference As %String, pstrExpiryDate As %String) As COM.UpdateLocBatchResultList [ ProcedureBlock = 0, WebMethod ]

</Content>
</UDLText>


<Method name="UpdateLocLot">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompanyId:%String,pstrUserId:%String,pstrPassword:%String,pstrItemId:%String,pstrLocationId:%String,pstrLotNumber:%String,pfltQuantity:%Numeric,pstrReference:%String,pstrExpiryDate:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>COM.UpdateLocLotResultList</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	;	This webservice provides the user with the ability to update a selected 
	;	LOT with the quantity for an item at a location.
	; 
	; Params:
	; 	pstrCompanyId		Target company number
	;	pstrUserId			A valid AlphaLinc user
	;	pstrPassword		A valid user password
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pstrLotNumber	  	The lot to be updated
	;	pfltQuantity 		The qty to update batch
	;	pstrReference		Info to put on history log
	;	
	;
	; ByRefs:
	;
	; Returns: 
	; 	List of
	; 	.Lot number: 	Lot No  
	; 	.Qty updated: Quantity 
	;
	; History:
	; 02-Feb-2007	HeberB		SRBR014388: Replace batch name and references by Lot
	; 21-Dec-2006	HeberB		SRBR014351: UpdateLocBatch with expiry date control
	; 24-Oct-2006	HeberB		SRBR014306: created
	;-------------------------------------------------------------------------------
	;
	new strPreviousCompanyYM, strPreviousCompanyYQUERY, strMethodName,
		lstObjResult

	;	SRBR014388
	;set strMethodName = "UpdateLocBatch"
	set strMethodName = "UpdateLocLot"
	
	DO ^WWWVAR

	// parameters checking
	; pstrExpiryDate
	; if (pstrCompanyId = "") || (pstrBatchNumber = "") || (+pfltQuantity = 0) {
	if (pstrCompanyId = "") || (+pfltQuantity = 0) {
		do ..ApplicationError($$$ErrorOnParameter, $$$Text("Com00264")_" "_strMethodName)
	}

	; BR014388
	;if (pstrExpiryDate = "") && (pstrBatchNumber = "") {
	if (pstrExpiryDate = "") && (pstrLotNumber = "") {
		do ..ApplicationError($$$ErrorOnParameter, $$$Text("Com00264")_" "_strMethodName)
	}

	set strPreviousCompanyYM = YM
	set strPreviousCompanyYQUERY = $get(%($get(YQUERY),"YM"))
	
	set YM = pstrCompanyId
	set %(YQUERY,"YM") = pstrCompanyId
	
	do ..CheckParameters(strMethodName, pstrUserId, pstrPassword, pstrItemId, pstrLocationId)
	
	;SRBR014388
	;if (pstrBatchNumber '= "") {
	if (pstrLotNumber '= "") {
		;SRBR014388
		;set lstObjResult = ..UpdateBatch(pstrCompanyId, pstrItemId, pstrLocationId, pstrBatchNumber, pfltQuantity, pstrReference, pstrExpiryDate)
		set lstObjResult = ..UpdateLot(pstrCompanyId, pstrItemId, pstrLocationId, pstrLotNumber, pfltQuantity, pstrReference, pstrExpiryDate)
	} else {
		;SRBR014351
		;set lstObjResult = ..UpdateBatchByDate(pstrCompanyId, pstrItemId, pstrLocationId, pfltQuantity, pstrReference, pstrExpiryDate)
		;SRBR014388
		;set lstObjResult = ..UpdateBatchByDate(pstrCompanyId, pstrItemId, pstrLocationId, pfltQuantity, pstrReference, pstrExpiryDate, $$$NO)
		set lstObjResult = ..UpdateLotByDate(pstrCompanyId, pstrItemId, pstrLocationId, pfltQuantity, pstrReference, pstrExpiryDate, $$$NO)
		;SRBR014388
		;do ..CompleteUpdateBatch(pstrCompanyId, pstrItemId, pstrLocationId, pfltQuantity, pstrReference, pstrExpiryDate, lstObjResult)
		do ..CompleteUpdateLot(pstrCompanyId, pstrItemId, pstrLocationId, pfltQuantity, pstrReference, pstrExpiryDate, lstObjResult)
	}

	set YM = strPreviousCompanyYM
	set %(YQUERY,"YM") = strPreviousCompanyYQUERY

	quit lstObjResult
	; end UpdateLocLot
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
//SRBR014388

</Content>
</UDLText>

<UDLText name="T">
<Content>
//ClassMethod ListLocBatches(pstrCompanyId As %String, pstrUserId As %String, pstrPassword As %String, pstrItemId As %String, pstrLocationId As %String, pstrDateLimit As %String) As COM.ListLocBatchesResultList [ ProcedureBlock = 0, WebMethod ]

</Content>
</UDLText>


<Method name="ListLocLots">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompanyId:%String,pstrUserId:%String,pstrPassword:%String,pstrItemId:%String,pstrLocationId:%String,pstrDateLimit:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>COM.ListLocLotsResultList</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; This webservice provides the user with the list of available (not expired) 
	; lots for an item at a location.
	; 
	; Questions:
	; 	Company data type shouldn't be string?
	;
	; Params:
	; 	pstrCompanyId		Target company number
	;	pstrUserId			A valid AlphaLinc user
	;	pstrPassword		A valid user password
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pstrDateLimit		A valid Cache date to limit search
	;
	; ByRefs:
	;
	; Returns: 
	; 	List of
	; 	.Lot number: 	Lot No  
	; 	.Qty available: Quantity 
	; 	.Expire date
	;
	; History:
	; 02-Feb-2007	HeberB		SRBR014388:  Replace batch name and references by Lot
	; 24-Oct-2006	HeberB		BR014305: created
	;-------------------------------------------------------------------------------
	;
	new strPreviousCompanyYM, strPreviousCompanyYQUERY, strMethodName, lstObjResult

	;SRBR014388
	;set strMethodName = "ListLocBatches"
	set strMethodName = "ListLocLots"
	
	DO ^WWWVAR

	// parameters checking
	if (pstrCompanyId = "") {
		do ..ApplicationError($$$ErrorOnParameter, $$$Text("Com00264")_" "_strMethodName)
	}
	
	set strPreviousCompanyYM = YM
	set strPreviousCompanyYQUERY = $get(%($get(YQUERY),"YM"))
	
	set YM = pstrCompanyId
	set %(YQUERY,"YM") = pstrCompanyId
	
	do ..CheckParameters(strMethodName, pstrUserId, pstrPassword, pstrItemId, pstrLocationId)

	;SRBR014388
	;set lstObjResult = ..MyListLocBatches(pstrCompanyId, pstrItemId, pstrLocationId, pstrDateLimit)
	set lstObjResult = ..MyListLocLots(pstrCompanyId, pstrItemId, pstrLocationId, pstrDateLimit)
	
	set YM = strPreviousCompanyYM
	set %(YQUERY,"YM") = strPreviousCompanyYQUERY

	quit lstObjResult
	; end of ListLocBatches
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
//-------------------- auxiliary methods ---------------------------------//

</Content>
</UDLText>

<UDLText name="T">
<Content>
//SRBR014388

</Content>
</UDLText>

<UDLText name="T">
<Content>
//ClassMethod CompleteUpdateBatch(pstrCompanyId As %String, pstrItemId As %String, pstrLocationId As %String, pfltQuantity As %Numeric, pstrReference As %String, pstrDateLimit As %String, pobjUpdateResultList As COM.UpdateLocBatchResultList) [ ProcedureBlock = 0 ]

</Content>
</UDLText>


<Method name="CompleteUpdateLot">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompanyId:%String,pstrItemId:%String,pstrLocationId:%String,pfltQuantity:%Numeric,pstrReference:%String,pstrDateLimit:%String,pobjUpdateResultList:COM.UpdateLocLotResultList</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	;	Checks whether missing qty and update using lots with no expiry
	; 
	; Params:
	; 	pstrCompanyId		Target company number
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pfltQuantity 		The qty to update batch
	;	pstrReference		Info to put on history log
	;	pstrDateLimit 
	;	pobjUpdateResultList		
	;
	; ByRefs:
	;
	; Returns: 
	; 	List of
	; 	.Lot number: 	Lot No  
	; 	.Qty updated: Quantity 
	;
	; History:
	; 02-Feb-2007	HeberB		SRBR014388:  Replace batch name and references by Lot
	; 18-Jan-2007	HeberB		SRBR014351: created
	;-------------------------------------------------------------------------------
	;
	new strKey,objResult, lstObjResult, fltQtyUpdated, fltQtyToComplete

	set fltQtyUpdated = 0
	set strKey = ""
	for {
		set objResult = pobjUpdateResultList.GetNext(.strKey)
		quit:strKey=""
		set fltQtyUpdated = fltQtyUpdated + objResult.fltQtyUpdated
	}
	set fltQtyToComplete = ($zabs(pfltQuantity) - $zabs(fltQtyUpdated)) * (pfltQuantity/pfltQuantity)
	
	; if updated qty not completed
	if (fltQtyToComplete '= 0) {
		;SRBR014388
		;set lstObjResult = ..UpdateBatchByDate(pstrCompanyId, pstrItemId, pstrLocationId, fltQtyToComplete, pstrReference, pstrExpiryDate,$$$YES)		
		set lstObjResult = ..UpdateLotByDate(pstrCompanyId, pstrItemId, pstrLocationId, fltQtyToComplete, pstrReference, pstrExpiryDate,$$$YES)		
		set strKey = ""
		for {
			set objResult = lstObjResult.GetNext(.strKey)
			quit:strKey=""
			do pobjUpdateResultList.Insert(objResult)
		}
	}
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
//SRBR014388

</Content>
</UDLText>

<UDLText name="T">
<Content>
//ClassMethod UpdateBatch(pstrCompanyId As %String, pstrItemId As %String, pstrLocationId As %String, pstrBatchNumber As %String, pfltQuantity As %Numeric, pstrReference As %String, pstrExpiryDate As %String) As COM.UpdateLocBatchResultList [ ProcedureBlock = 0 ]

</Content>
</UDLText>


<Method name="UpdateLot">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompanyId:%String,pstrItemId:%String,pstrLocationId:%String,pstrLotNumber:%String,pfltQuantity:%Numeric,pstrReference:%String,pstrExpiryDate:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>COM.UpdateLocLotResultList</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	;	This webservice provides the user with the ability to update a selected 
	;	batch with the quantity for an item at a location.
	; 
	; Params:
	; 	pstrCompanyId		Target company number
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pstrLotNumber	  	The lot to be updated
	;	pfltQuantity 		The qty to update lot
	;	pstrReference		Info to put on history log
	;	pstrExpiryDate 		
	;
	; ByRefs:
	;
	; Returns: 
	; 	List of
	; 	.Lot number: 	Lot No  
	; 	.Qty updated: Quantity 
	;
	; History:
	; 02-Feb-2007	HeberB		SRBR014388:  Replace batch name and references by Lot
	; 18-Jan-2007	HeberB		SRBR014351: UpdateLocBatch with batches with no expiry
	; 21-Dec-2006	HeberB		SRBR014351: UpdateLocBatch with expiry date control
	; 24-Oct-2006	HeberB		SRBR014306: created
	;-------------------------------------------------------------------------------
	;
	new objResult, lstObjResult,
		strStockLocation, strDate,
		objINWE,
		fltQtyToUpdate,fltQtyUpdated,
		idxLotNumber
		;SRBR014388
		;idxBatchNumber
	
	;SRBR014388
	;set lstObjResult = ##class(COM.UpdateLocBatchResultList).%New()
	set lstObjResult = ##class(COM.UpdateLocLotResultList).%New()

	set fltQtyToUpdate = $zabs(pfltQuantity)
	;SRBR014388
	;set idxBatchNumber = $$$Index(pstrBatchNumber)
	set idxLotNumber = $$$Index(pstrLotNumber)

	; D25 INWEUseableUntilDate
	; D26 INWEUseableFromDate
	set fltQtyUpdated = 0
	set strStockLocation = ""
	for {
		quit:(fltQtyToUpdate = 0)
		;SRBR014388
		;set strStockLocation = 	$order(^INWEs(pstrCompanyId,15,idxBatchNumber,
		set strStockLocation = 	$order(^INWEs(pstrCompanyId,5,idxLotNumber,
												  pstrItemId,pstrLocationId,strStockLocation))
		quit:(strStockLocation = "")
		set strDate = ""
		for {
			quit:(fltQtyToUpdate = 0)
			;SRBR014388
			;set strDate = 	$order(^INWEs(pstrCompanyId,15,idxBatchNumber,
			set strDate = 	$order(^INWEs(pstrCompanyId,15,idxLotNumber,
													  pstrItemId,pstrLocationId,strStockLocation,strDate))
			quit:(strDate = "")
			set objINWE = $get(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate,1))
			; check if this INWE is usable
			continue:'(..IsINWEUsable(pstrItemId,pstrLocationId,strStockLocation,strDate,objINWE,pstrExpiryDate))

			set fltQtyUpdated = ..UpdateStock(pstrUserId,pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,
											strDate,objINWE,pfltQuantity,fltQtyToUpdate,pstrReference)
			
			set fltQtyToUpdate = fltQtyToUpdate - fltQtyUpdated
								
			;SRBR014388
			;set objResult = ##class(UpdateLocBatchResult).%New()
			;set objResult.strBatchNumber = $$$INWEBatchNumber(objINWE)
			set objResult = ##class(UpdateLocLotResult).%New()
			set objResult.strLotNumber = $$$INWELotNo(objINWE)
			set objResult.fltQtyUpdated = $case((pfltQuantity <0),$$$YES:-1,:1)*fltQtyUpdated
			do lstObjResult.Insert(objResult)
		}
	}		
	
	; no INWE entry was found on the previous loop with Lot Number, so, response s NULL

	quit lstObjResult
	; end UpdateLocBatch
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
//SRBR014388

</Content>
</UDLText>

<UDLText name="T">
<Content>
//ClassMethod UpdateBatchByDate(pstrCompanyId As %String, pstrItemId As %String, pstrLocationId As %String, pfltQuantity As %Numeric, pstrReference As %String, pstrDateLimit As %String, pblnBatchesNoExpiry As %String) As COM.UpdateLocBatchResultList [ ProcedureBlock = 0 ]

</Content>
</UDLText>


<Method name="UpdateLotByDate">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompanyId:%String,pstrItemId:%String,pstrLocationId:%String,pfltQuantity:%Numeric,pstrReference:%String,pstrDateLimit:%String,pblnLotsNoExpiry:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>COM.UpdateLocLotResultList</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	;	This webservice provides the user with the ability to update a 
	;	batch with the quantity for an item at a location before a expiry date.
	; 
	; Params:
	; 	pstrCompanyId		Target company number
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pfltQuantity 		The qty to update batch
	;	pstrReference		Info to put on history log
	;	pstrDateLimit
	;
	; ByRefs:
	;
	; Returns: 
	; 	List of
	; 	.Lot number: 	Lot No  
	; 	.Qty updated: Quantity 
	;
	; History:
	; 02-Feb-2007	HeberB		SRBR014388:  Replace batch name and references by Lot
	; 18-Jan-2007	HeberB		SRBR014351: UpdateLocBatch with batches with no expiry
	; 21-Dec-2006	HeberB		SRBR014351: UpdateLocBatch with expiry date control
	;-------------------------------------------------------------------------------
	new objResult, lstObjResult,
		strStockLocation, strDate,
		objINWE,fltQtyToUpdate,fltQtyUpdated,
		idxUseableUntilDate
	
	; SRBR014388
	; set lstObjResult = ##class(COM.UpdateLocBatchResultList).%New()
	set lstObjResult = ##class(COM.UpdateLocLotResultList).%New()
	
	set fltQtyToUpdate = $zabs(pfltQuantity)
	set fltQtyUpdated = 0
	; index 13
	set idxUseableUntilDate = ""
	for {  
		; quit soon as qty obtained
		quit:(fltQtyToUpdate = 0)
		set idxUseableUntilDate = $order(^INWEs(pstrCompanyId,13,idxUseableUntilDate))
		quit:(idxUseableUntilDate = "")

		;SRBR014351
		;continue:(idxUseableUntilDate = " ")
		;continue:(idxUseableUntilDate < pstrDateLimit)
		;SRBR014388
		;if (pblnBatchesNoExpiry = $$$NO) {
		if (pblnLotsNoExpiry = $$$NO) {
			continue:(idxUseableUntilDate = " ")
			; validity lower than required date, accept on the same date
			continue:(idxUseableUntilDate < pstrDateLimit)
		} else {
			continue:(idxUseableUntilDate '= " ")
		}

		
		set strStockLocation=""
		for {
			; quit soon as qty obtained
			quit:(fltQtyToUpdate = 0)
			set strStockLocation = $order(^INWEs(pstrCompanyId,13,idxUseableUntilDate,pstrItemId,pstrLocationId,strStockLocation))
			quit:strStockLocation=""

			; if stock location name has asterisk ????
			continue:$find(strStockLocation,"*") 

			; if stock location blocked
			continue:$PIECE($GET(^INLP(pstrCompanyId,pstrLocationId,strStockLocation,1)),Y,8)=1 

			set strDate = ""
			for {
				; quit soon as qty obtained
				quit:(fltQtyToUpdate = 0)

				set strDate = $order(^INWEs(pstrCompanyId,13,idxUseableUntilDate,pstrItemId,pstrLocationId,strStockLocation,strDate))
				quit:(strDate = "")
				; get reception data
				set objINWE = $get(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate,1))
				;SRBR014388
				;continue:($$$INWEBatchNumber(objINWE)="")
				continue:($$$INWELotNo(objINWE)="")
				continue:(..IsINWEUsable(pstrItemId,pstrLocationId,strStockLocation,strDate,objINWE,pstrDateLimit) = $$$NO)
				set fltQtyUpdated = ..UpdateStock(pstrUserId,pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,
												strDate,objINWE,pfltQuantity,fltQtyToUpdate,pstrReference)
			
				set fltQtyToUpdate = fltQtyToUpdate - fltQtyUpdated

				;SRBR014388
				;set objResult = ##class(UpdateLocBatchResult).%New()
				;set objResult.strBatchNumber = $$$INWEBatchNumber(objINWE)
				set objResult = ##class(UpdateLocLotResult).%New()
				set objResult.strLotNumber = $$$INWELotNo(objINWE)
				
				set objResult.fltQtyUpdated = $case((pfltQuantity <0),$$$YES:-1,:1)*fltQtyUpdated
				do lstObjResult.Insert(objResult)
			}
		}		
	}
	quit lstObjResult
]]></Implementation>
</Method>

<Method name="CreateINWEEntry">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompanyId:%String,pstrItemId:%String,pstrLocationId:%String,pstrMethodName:%String,pfltQtyToUpdate:%Numeric,pstrReference:%String=""</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	;	Creates a new INWE entry due to updateLocQty but no INWE entry found
	;
	; Params:
	; 	pstrCompanyId		Target company number
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pstrMethodName 
	;	pfltQtyToUpdate		Value to be added to stock
	;
	; ByRefs:
	;
	; Returns: 
	; 	qty updated
	;
	; History:
	; 24-Oct-2006	HeberB		SRBR014306: created
	;-------------------------------------------------------------------------------
	new strDate, strStockLocation,objINART, objINWE

	set SPRACHE="EN"		
	set strDate = +$horolog
		
	; get first available stock location
	set strStockLocation = ""
	for {
		set strStockLocation = $order(^INLP(pstrCompanyId,pstrLocationId,strStockLocation))
		quit:(strStockLocation = "")
		; if stock location name has asterisk ????
		continue:$find(strStockLocation,"*") 
		; if stock location blocked
		continue:$PIECE($GET(^INLP(pstrCompanyId,pstrLocationId,strStockLocation,1)),Y,8)=1 
		
		quit
	}
	
	if (strStockLocation = "") {
		do ..ApplicationError($$$ErrorNoStockLocation,$$$Text("Com00269")_pstrMethodName)			
	}
		
	set objINART = $get(^INART(pstrCompanyId,pstrItemId,1))
	set objINWE = ""
	set $$$INWEQuantity(objINWE) = 0
	set $$$INWEUnitPrice(objINWE) = $$$INARTProductionCosts(objINART)
	set $$$INWEIncomingQCStatus(objINWE) = 0
	//set $$$INWEUseableFromDate(objINWE) = +$HOROLOG
	//set $$$INWEUseableUntilDate(objINWE) = +$HOROLOG + 30
	set $$$INWETotalReservedQuantity(objINWE) = 0
	
	do ..UpdateINWE(objINWE,pstrUserId,pstrCompanyId,pstrItemId,pstrLocationId,
						strStockLocation,strDate,pfltQtyToUpdate,pstrReference)

	quit pfltQtyToUpdate
]]></Implementation>
</Method>

<Method name="UnReserveINWE">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrUserId:%String,pstrCompanyId:%String,pstrItemId:%String,pstrLocationId:%String,pstrStockLocation:%String,pstrDate:%String,pstrReservationNo:%String,pfltQtyUnReserved:%Numeric,pobjINWER:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Updates values on INWE & INWER due to unreserve
	;
	; Params:
	; 	pstrCompanyId		Target company number
	;	pstrUserId			A valid AlphaLinc user
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pstrReservationNo 	Provided reservation number
	;	pstrDate 
	;	pfltQtyUnReserved 	Qty to be UN-reserved
	;	pobjINWER 
	;	
	; ByRefs:
	;
	; Returns: 
	;
	; History:
	; 24-Oct-2006	HeberB		SRBR014xxx: created
	;-------------------------------------------------------------------------------
	;
	new strText, objINWE, fltDiff
	
	if (pfltQtyUnReserved >= $$$INWERLaybyQuantity(pobjINWER)) {
		set $$$INWERReservationcancledAt(pobjINWER) = +$H
		set $$$INWERReservationCancledBy(pobjINWER) = $zconvert(pstrUserId,"U")
		set pfltQtyUnReserved = $$$INWERLaybyQuantity(pobjINWER)
	} else {
		set $$$INWERLaybyQuantity(pobjINWER) = $$$INWERLaybyQuantity(pobjINWER) - pfltQtyUnReserved
	}

	do ^WWWSPEI("INWER",pstrItemId_","_pstrLocationId_","_pstrStockLocation_","_pstrDate_","_pstrReservationNo,pobjINWER,1)
		
	set objINWE = $get(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,pstrStockLocation,pstrDate,1))
	set $$$INWEQuantity(objINWE) = $$$INWEQuantity(objINWE) + pfltQtyUnReserved
	set $$$INWETotalReservedQuantity(objINWE) = $$$INWETotalReservedQuantity(objINWE) - pfltQtyUnReserved
	do ^WWWSPEI("INWE",pstrItemId_","_pstrLocationId_","_pstrStockLocation_","_pstrDate,objINWE,1)
		
	
	//(Undo Lay By)
	set strText = $$^WWWTEXT(33066)_" / "_pstrItemId_" / "_pstrLocationId_" / "_pstrStockLocation_" / "_$$^WWWDATE(pstrDate)_" ("_$GET(pstrUserId)_") / "_pstrReservationNo 
	do Information^INARTHIST(pstrItemId,strText,pstrLocationId,pfltQtyUnReserved,,,pstrStockLocation)
]]></Implementation>
</Method>

<Method name="UpdateStock">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrUserId:%String,pstrCompanyId:%String,pstrItemId:%String,pstrLocationId:%String,pstrStockLocation:%String,pstrDate:%String,pobjINWE:%String,pfltQuantity:%Numeric,pfltQtyToUpdate:%Numeric,pstrReference:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Add or subtract qty from INWE entry 
	;UpdateStock(pstrUserId,pstrCompanyId,pstrItemId,pstrLocationId,pstrStockLocation,
	;			pstrDate,pobjINWE,pfltQuantity,fltQtyToUpdate)
	; Params:
	; 	pobjINWE
	; 	pstrCompanyId		Target company number
	;	pstrUserId			A valid AlphaLinc user
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pstrStockLocation
	;	pstrDate 
	;	pfltQuantity		Total provided qty
	;	pfltQtyToUpdate		Qty to update on this call
	;	
	; Returns: 
	;	qty updated
	;
	; History:
	; 26-Feb-2007	RPW		SRBR014351: Fixed coding convention. pobj not pstrobj
	; 24-Oct-2006	HeberB		SRBR014304: created
	;-------------------------------------------------------------------------------
	;
	new fltQtyUpdated
	
	if (pfltQuantity <0) {
	; decrease qty available and kill entry if 0 with no reserve
		if (pfltQtyToUpdate >= $$$INWEQuantity(pobjINWE)) { 
			; chaeck if is enough to compare with totalReservedQty
			; no reserve is associated with this INWE, so kill
			if ($$$INWETotalReservedQuantity(pobjINWE)=0) {
				do ..DeleteINWE(pstrUserId,pstrCompanyId,pstrItemId,pstrLocationId,
						 		strStockLocation,strDate,(-1)*$$$INWEQuantity(pobjINWE),pstrReference)
			} else {
				; aleady a reserve, so subtract
				do ..UpdateINWE(pobjINWE,pstrUserId,pstrCompanyId,pstrItemId,pstrLocationId,
						 		strStockLocation,strDate,(-1)*$$$INWEQuantity(pobjINWE),pstrReference)
			} 
			set fltQtyUpdated = $$$INWEQuantity(pobjINWE)
		} else {
			do ..UpdateINWE(pobjINWE,pstrUserId,pstrCompanyId,pstrItemId,pstrLocationId,
					 		strStockLocation,strDate,(-1)*pfltQtyToUpdate,pstrReference)
			set fltQtyUpdated = pfltQtyToUpdate
		}
	} else {
		; pfltQuantity > 0
		do ..UpdateINWE(pobjINWE,pstrUserId,pstrCompanyId,pstrItemId,pstrLocationId,
					strStockLocation,strDate,pfltQuantity,pstrReference)
		set fltQtyUpdated = pfltQtyToUpdate
	}
	quit fltQtyUpdated
]]></Implementation>
</Method>

<Method name="UpdateINWE">
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjINWE:%String,pstrUserId:%String,pstrCompanyId:%String,pstrItemId:%String,pstrLocationId:%String,pstrStockLocation:%String,pstrDate:%String,pfltQtyToUpdate:%Numeric,pstrReference:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Updates values on INWE 
	;
	; Params:
	; 	pobjINWE
	; 	pstrCompanyId		Target company number
	;	pstrUserId			A valid AlphaLinc user
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pstrStockLocation
	;	pstrDate 
	;	pfltQtyToUpdate 	Qty to be updated
	;	pstrReference		Info to be logged on history
	;	
	; ByRefs:
	;
	; Returns: 
	;
	; History:
	; 29-May-2007	HeberB	SRBR014304(1): changed TEXT format
	; 26-Feb-2007	RPW		SRBR014351: Fixed coding convention. pobj not pstrobj
	; 22-Feb-2007	HeberB	SRBR014351: add update cost to INARTHIST
	; 24-Oct-2006	HeberB	SRBR014304: created
	;-------------------------------------------------------------------------------
	new strText, BETRALT, BETRIEB, AUF, POS, INVENTUR

	set $$$INWEQuantity(pobjINWE) = $$$INWEQuantity(pobjINWE) + pfltQtyToUpdate
	do ^WWWSPEI("INWE",pstrItemId_","_pstrLocationId_","_pstrStockLocation_","_pstrDate,pobjINWE,1)

	; BR014304
	;set strText = $$^WWWTEXT("Com00270")_" / "_pstrItemId_" / "_pstrLocationId_" / "_pstrStockLocation_" / "_$$^WWWDATE(pstrDate)_" ("_$GET(pstrUserId)_") "_" / "_$get(pstrReference)
	set strText = "("_$GET(pstrUserId)_") "_ $$GetWebServiceText^INARTHIST() _$get(pstrReference)

	;do Information^INARTHIST(pstrItemId,strText,pstrLocationId,pfltQtyToUpdate,,,pstrStockLocation)
	set BETRALT = pstrLocationId
	set BETRIEB = pstrLocationId
	set AUF = ""
	set POS = ""
	set INVENTUR = ""
	
	do ..UpdateINARTHIST(	pstrItemId,pstrLocationId,pstrStockLocation,pfltQtyToUpdate,
							$$$NO,									; pblnMOVE
							$case(pfltQtyToUpdate>0,$$$YES:1,:0),	; direction (0-out 1-in)
							strText,
							"ADJ",									; transaction type (adjust)
							"",										; dispatch
							//BR014351
							//"")										; value $$
							$ZABS(pfltQtyToUpdate) * $$$INWEUnitPrice(pobjINWE))	; value $$
]]></Implementation>
</Method>

<Method name="UpdateINARTHIST">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrARTIKEL,pstrLOCATION,pstrLAGER,pfltQTY,pblnMOVE,pstrDIR,pstrTEXT,pstrTRANTYPE,pstrDISPATCH,pstrBETRAG</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; A wrapper for INARTHIST
	;
	; Params:
	;   1 ARTIKEL  = ITEM
	;   2 TEXT     = INFORMATION TEXT  (May contain quantity)
	;   3 BETRIEB  = LOCATION                         TO Site Location		<<<<  3
	;   4 PLUS     = INCREASE                         Quantity
	;   5 MINUS    = DECREASE                         Quantity
	;   6 MOVE     = RELOCATION                       Quantity
	;   7 LIEFKUN  = LIEFERANT/KUNDE (WE/VERSAND)     Supplier/Customer
	;   8 BETRAG   = GESAMTBETRAG                     Amount
	;   9 LAGER    = LAGERPLATZ                       TO Stock Location		<<<<  9
	;  10 INVENTUR = MERKER FÜR INVENTUR              "Edited By Inventory"         to stocktaking 
	;  11 LAGERALT = ALTER LAGERPLATZ                 FROM Stock Location	<<<< 11
	;  12 AUF      = AUFTRAG                          Order Number
	;  13 POS      = POS                              Order Line
	;  14 BETRALT  =                                  FROM Site Location	<<<< 14
	;  15 NOPOST   = KEINE BUCHUNG BEI HISTORY   	;next to 
	;  16 TRANTYPE = TRANSACTION TYPE (ISS,REC,...)
	;  17 OBERTEIL =                                  Parent Item
	;  18 FIBUREF  = Finance Transaction Reference
	;  19 Reason   = Reason Code for Adjustment
	;  20 DISPATCH =                                  Populated by INWEAUF    		added to arg list SR12333
	;  21 pAudit   = Audit string                	; added SR14203
	;	
	; ByRefs:
	;
	; Returns: 
	;
	; History:
	; 29-Dec-2006 	HeberB		SRBR014304 
	; 							SRBR014306: Added prefixes (coding standards)
	; 24-Oct-2006	HeberB		SRBR014304: created as wrapper to ^INARTHIST (replacing call
	; 										to Update^INARTHIST)
	;-------------------------------------------------------------------------------
	new fltPLUS,fltMINUS,fltMOVE,strLIEFKUN,strINVENTUR,strLAGERALT,
		strAUF,strPOS,strBETRALT,
		blnNOPOST,strOBERTEIL,strFIBUREF,strReason,strAudit

	set fltMOVE=""
	set strLIEFKUN = ""	
	set strINVENTUR = ""
	set strLAGERALT=""
	set strAUF = ""
	set strPOS = ""
	set strBETRALT = ""
	set blnNOPOST=0
	set strOBERTEIL = ""	
	set strFIBUREF = ""	
	set strReason = ""
	set strAudit = ""
	set YLOCATION = pstrLOCATION
	

	if pfltQTY < 0 {
		set fltMINUS = pfltQTY * -1
		set fltPLUS = ""
	} else {
		set fltMINUS = ""
		set fltPLUS = pfltQTY
	}	
	  
	do ^INARTHIST(pstrARTIKEL,pstrTEXT,pstrLOCATION,fltPLUS,fltMINUS,fltMOVE,strLIEFKUN,
				  pstrBETRAG,pstrLAGER,strINVENTUR,strLAGERALT,strAUF,strPOS,strBETRALT,blnNOPOST,
				  pstrTRANTYPE,strOBERTEIL,strFIBUREF,strReason,pstrDISPATCH,strAudit)
]]></Implementation>
</Method>

<Method name="DeleteINWE">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrUserId:%String,pstrCompanyId:%String,pstrItemId:%String,pstrLocationId:%String,pstrStockLocation:%String,pstrDate:%String,pfltQtyToUpdate:%Numeric,pstrReference:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Updates values on INWE 
	;
	; Params:
	; 	pstrCompanyId		Target company number
	;	pstrUserId			A valid AlphaLinc user
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pstrStockLocation
	;	pstrReservationNo 	Provided reservation number
	;	pstrDate 
	;	pstrReference		Info to be logged on history
	;	
	; ByRefs:
	;
	; Returns: 
	;
	; History:
	; 29-May-2007	HeberB		SRBR014304(1): changed TEXT format
	; 24-Oct-2006	HeberB		SRBR014304: created
	;-------------------------------------------------------------------------------
	;
	new strText
	
	do ^WWWSKILL("INWE",pstrItemId_","_pstrLocationId_","_pstrStockLocation_","_pstrDate)
	do ^WWWSKILL("INWES",pstrItemId_","_pstrLocationId_","_pstrStockLocation_","_pstrDate)

	; SRBR014304(1)
	; set strText = $$^WWWTEXT("Com00270")_" / "_pstrItemId_" / "_pstrLocationId_" / "_pstrStockLocation_" / "_$$^WWWDATE(pstrDate)_" ("_$GET(pstrUserId)_") / "_$get(pstrReference)
	set strText = "("_$GET(pstrUserId)_") "_ $$GetWebServiceText^INARTHIST() _ $get(pstrReference)
	
	;do Information^INARTHIST(pstrItemId,strText,pstrLocationId,pfltQtyToUpdate,,,pstrStockLocation)
	set BETRALT = pstrLocationId
	set BETRIEB = pstrLocationId
	set AUF = ""
	set POS = ""
	set INVENTUR = ""

	do ..UpdateINARTHIST(	pstrItemId,pstrLocationId,pstrStockLocation,pfltQtyToUpdate,
							$$$NO,									; pblnMOVE
							0,										; direction (0-out 1-in)
							strText,
							"ADJ",									; transaction type (adjust)
							"",										; dispatch
							"")										; value $$
]]></Implementation>
</Method>

<Method name="IsAlreadyCancelled">
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjINWER:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Check if INWER object has been cancelled
	;
	; Params:	
	; 	pobjINWER	INWER object string
	;
	; ByRefs:
	;
	; Returns:
	;	$$$YES	if already cancelled
	;	$$$NO	otherwise
	;	
	; History:
	; 25-Jan-2007 	HeberB		SRBR014351: coding standards
	; 26-Oct-2006	HeberB		SRBR014297: Created
	;-------------------------------------------------------------------------------
	;quit:(($$$INWERReservationcancledAt(pobjINWER) '= "") ||
	;	  ($$$INWERReservationCancledBy(pobjINWER) '= "")) $$$YES
	new blnResult
	
	set blnResult = $$$NO
	
	if (($$$INWERReservationcancledAt(pobjINWER) '= "") ||
	    ($$$INWERReservationCancledBy(pobjINWER) '= "")) { 
	    set blnResult = $$$YES
	}   
	
	quit blnResult
]]></Implementation>
</Method>

<Method name="CheckParameters">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrMethodName:%String,pstrUserId:%String,pstrPassword:%String,pstrItemId:%String,pstrLocationId:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Check if parameters are valid
	;
	; Params:
	;	pstrMethodName
	;	pstrUserId			A valid AlphaLinc user
	;	pstrPassword
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 25-Jan-2007	HeberB		SRBR014345: INART with 0 company
	; 26-Oct-2006	HeberB		SRBR014297: Created
	;-------------------------------------------------------------------------------
	new strError

	set strError = ""
	
	if (pstrUserId = "") || (pstrItemId = "") || (pstrLocationId = "") {
		set strError =  $$$ErrorOnParameter _ Y _ 
						$$$Text("Com00264")_" "_strMethodName
	} elseif '(..CheckUserLogin(pstrUserId, pstrPassword)) {
		set strError =  $$$ErrorInvalidUser _ Y _ 
						$$$Text("Com00266")_" "_strMethodName
	;SRBR014345
	;} elseif $data(^INART(0,pstrItemId,1)) = 0 {
	} elseif $data(^INART(YM,pstrItemId,1)) = 0 {
		set strError = $$$ErrorInvalidItem _ Y _
						$$$Text("Com00267")_" "_strMethodName
	} elseif $data(^WWW0121(0,YM,pstrLocationId,1)) = 0 {
		set strError = $$$ErrorInvalidLocation _ Y _ 
						$$$Text("Com00268")_" "_strMethodName
	}

	if (strError'="") {
		set YM = strPreviousCompanyYM
		set %(YQUERY,"YM") = strPreviousCompanyYQUERY

		do ..ApplicationError($piece(strError,Y,1),$piece(strError,Y,2))
	}
]]></Implementation>
</Method>

<Method name="CheckUserLogin">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrUserId:%String,pstrPassword:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Check if user and password are valid
	;
	; Params:
	; 	pstrUserId
	; 	pstrPassword
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 01-Feb-2006	HeberB		SRBR014351: use YBED as global to be recorded on INARTHIST
	; 26-Oct-2006	HeberB		SRBR014297: Created
	;-------------------------------------------------------------------------------
	;SRBR014351
	;new YBED, YPWD
	new YPWD
	
	set YBED = $zconvert(pstrUserId,"u")
	set YPWD = pstrPassword
	
	
	quit ##class(User.COMUserPreferences).isLoginRight()
]]></Implementation>
</Method>

<Method name="ApplicationError">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrErrorCode:%String,pstrDetail:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Builds Fault object to return a SOAP Fault object to SOAP client
	;
	; Params:
	; 	pstrErrorCode
	; 	pstrDetail
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 26-Oct-2006	HeberB		SRBR014297: Created
	;-------------------------------------------------------------------------------
 	set fault=##class(%SOAP.Fault).%New()
 	set fault.faultcode = pstrErrorCode
 	set fault.detail	 = pstrDetail
 	set fault.faultstring="application error"
 	// ReturnFault must be called to send the fault to the client.
 	// ReturnFault will not return here.
 	do ..ReturnFault(fault)
]]></Implementation>
</Method>

<Method name="test">
<ClassMethod>1</ClassMethod>
<FormalSpec>txt:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
 	set fault=##class(%SOAP.Fault).%New()
 	set fault.faultcode = txt
 	set fault.detail	 = txt
 	set fault.faultstring= txt
 	// ReturnFault must be called to send the fault to the client.
 	// ReturnFault will not return here.
 	do ..ReturnFault(fault)
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
//SRBR014388

</Content>
</UDLText>

<UDLText name="T">
<Content>
//ClassMethod MyListLocBatches(pstrCompanyId As %String, pstrItemId As %String, pstrLocationId As %String, pstrDateLimit As %String) As COM.ListLocBatchesResultList [ ProcedureBlock = 0 ]

</Content>
</UDLText>


<Method name="MyListLocLots">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrCompanyId:%String,pstrItemId:%String,pstrLocationId:%String,pstrDateLimit:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>COM.ListLocLotsResultList</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; This webservice provides the user with the list of available (not expired) 
	; lots for an item at a location.
	; 
	; Questions:
	; 	Company data type shouldn't be string?
	;
	; Params:
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pstrDateLimit		A valid Cache date to limit search
	;
	; ByRefs:
	;
	; Returns: 
	; 	List of
	; 	.Lot number: 	Lot No  
	; 	.Qty available: Quantity 
	; 	.Expire date
	;
	; History:
	; 02-Feb-2007	HeberB		SRBR014388: Replace batch name and references by Lot
	; 24-Oct-2006	HeberB		BR014305: created
	;-------------------------------------------------------------------------------
	;
	new objResult, lstObjResult,strStockLocation, strDate,objINWE,fltAlreadyReserved,
		;SRBR014388
		;arrBatch,arrBatchOrdered
		arrLot,arrLotOrdered

	;SRBR014388
	;set lstObjResult = ##class(COM.ListLocBatchesResultList).%New()
	set lstObjResult = ##class(COM.ListLocLotsResultList).%New()
	set strStockLocation=""
	set strDate = ""
	; loop through INWE receptions - stock locations
	for {  
		set strStockLocation = $order(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation))
		quit:strStockLocation=""

		; if stock location name has asterisk ????
		continue:$find(strStockLocation,"*") 
		
		; if stock location blocked
		continue:$PIECE($GET(^INLP(pstrCompanyId,pstrLocationId,strStockLocation,1)),Y,8)=1 

		; loop through receptions - date
		set strDate = ""
		for {
			set strDate = $order(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate))
			quit:(strDate = "")

			; get reception data
			set objINWE = $get(^INWE(pstrCompanyId,pstrItemId,pstrLocationId,strStockLocation,strDate,1))
			
			;SRBR014388
			;set strBatchNumber=$$$INWEBatchNumber(objINWE)
			;continue:(strBatchNumber="")
			
			set strLotNumber=$$$INWELotNo(objINWE)
			continue:(strLotNumber="")
			
			continue:(..IsINWEUsable(pstrItemId,pstrLocationId,strStockLocation,strDate,objINWE,pstrDateLimit) = $$$NO)

			set strUseableUntilDate = $$$INWEUseableUntilDate(objINWE)
			if (strUseableUntilDate = "") {
				set strUseableUntilDate = 0
			}
			//set strBatchNumber = $$$INWEBatchNumber(objINWE)

			//SRBR014388
			;if '$data(arrBatch(strBatchNumber,strUseableUntilDate)) {
			;	set arrBatch(strBatchNumber,strUseableUntilDate) = $$$INWEQuantity(objINWE)
			;	set arrBatchOrdered(strUseableUntilDate,strBatchNumber) = 1
			;} else {
			;	set arrBatch(strBatchNumber,strUseableUntilDate) = 
			;	arrBatch(strBatchNumber,strUseableUntilDate) + $$$INWEQuantity(objINWE)
			;}
			if '$data(arrLot(strLotNumber,strUseableUntilDate)) {
				set arrLot(strLotNumber,strUseableUntilDate) = $$$INWEQuantity(objINWE)
				set arrLotOrdered(strUseableUntilDate,strLotNumber) = 1
			} else {
				set arrLot(strLotNumber,strUseableUntilDate) = 
				arrLot(strLotNumber,strUseableUntilDate) + $$$INWEQuantity(objINWE)
			}

		}
	}
	
	set strUseableUntilDate = ""
	for {
		;SRBR014388
		;set strUseableUntilDate = $order(arrBatchOrdered(strUseableUntilDate))
		set strUseableUntilDate = $order(arrLotOrdered(strUseableUntilDate))
		quit:(strUseableUntilDate = "")
		;SRBR014388
		;set strBatchNumber = ""
		set strLotNumber = ""
		for {
			;SRBR014388
			;set strBatchNumber = $order(arrBatchOrdered(strUseableUntilDate,strBatchNumber))
			;quit:(strBatchNumber = "")
			set strLotNumber = $order(arrLotOrdered(strUseableUntilDate,strLotNumber))
			quit:(strLotNumber = "")
			// result	
			;SRBR014388
			;set objResult = ##class(COM.ListLocBatchesResult).%New()
			set objResult = ##class(COM.ListLocLotsResult).%New()

			;SRBR014388
			;set objResult.strBatchNumber = strBatchNumber
			;set objResult.fltQtyAvailable = arrBatch(strBatchNumber,strUseableUntilDate)
	
			set objResult.strLotNumber = strLotNumber
			set objResult.fltQtyAvailable = arrLot(strLotNumber,strUseableUntilDate)

			if (strUseableUntilDate = 0) {
				set objResult.strExpireDate = ""
			} else {
				;set objResult.strExpireDate = $zdate(strUseableUntilDate)	
				set objResult.strExpireDate = strUseableUntilDate	
			}
			do lstObjResult.Insert(objResult)
		}
	}
	quit lstObjResult
	; end of ListLocBatches
]]></Implementation>
</Method>

<Method name="IsINWEUsable">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrItemId:%String,pstrLocationId:%String,pstrStockLocation:%String,pstrDate:%String,pobjINWE:%String,pstrLimitDate:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Check if INWE entry is ok for update 
	;
	; Params:
	;	pstrItemId			A valid AlphaLinc item
	;	pstrLocationId		A valid Alphalinc site location
	;	pstrStockLocation	A valid Alphalinc site stock location
	;	pstrDate 			A valid date
	;	pobjINWE			A INWE object string
	;	pstrLimitDate 		A valid date data limits if INWE is usable
	;	
	; ByRefs:
	;
	; Returns:
	; 	$$$YES 	if the INWE  satisfies conditions for being used
	; 	$$$NO	otherwise
	;
	; History:
	; 26-Feb-2007	RPW		SRBR014351: Fixed coding convention. pobj not pstrobj
	; 25-Jan-2007 	HeberB		SRBR014351: coding standards
	; 26-Dec-2006	HeberB		SRBR014351: added call to  CheckDateConstraints
	; 24-Oct-2006	HeberB		SRBR014304: created
	;-------------------------------------------------------------------------------
	;

	new fltAlreadyReserved, blnResult
	
	; get already reserved quantity for a specific reception art/bet/lap/wed
	set fltAlreadyReserved = $$^INWERMENGE(pstrItemId,pstrLocationId,pstrStockLocation,pstrDate,,1)  

	; if qty at reception is 0 or reserved negative 
	; SRBR014351
	;quit:(+$$$INWEQuantity(pobjINWE)'>0) $$$NO
	;quit:(+fltAlreadyReserved < 0) $$$NO
	;
	if (+$$$INWEQuantity(pobjINWE)'>0) || (+fltAlreadyReserved < 0) {
		set blnResult = $$$NO
	} else {
		set blnResult = ..CheckDateConstraints(pobjINWE,$get(pstrLimitDate))
	}
	;SRBR014351
	;quit (..CheckDateConstraints(pobjINWE,$get(pstrLimitDate)) = $$$NO)
	quit blnResult
]]></Implementation>
</Method>

<Method name="CheckDateConstraints">
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjINWE:%String,pstrLimitDate:%String=""</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Check whether compliant with date constraints 
	;
	; Params:
	; 	pobjINWE
	; 	pstrLimitDate		Limit Date
	;	
	; ByRefs:
	;
	; Returns: 
	;	Boolean indicating that complies or not
	;
	; History:
	; 26-Feb-2007	RPW		SRBR014351: Fixed coding convention. pobj not pstrobj
	; 25-Jan-2007 	HeberB	SRBR014351: coding standards
	; 18-Jan-2007	HeberB	SRBR014351: List batches with no expiry 
	; 22-Dec-2006	HeberB	BR014235: created
	;-------------------------------------------------------------------------------
	new blnResult

	set blnResult = $$$YES
	; has initial validity date and it's  usable only after today
	if ($$$INWEUseableFromDate(pobjINWE) > $HOROLOG) {
		set blnResult = $$$NO
	}
	; if INWE has expiry date
	if ($$$INWEUseableUntilDate(pobjINWE) '= "") { 
		; and it's usable only before today
		if ($$$INWEUseableUntilDate(pobjINWE) < $HOROLOG) ||
		   ($$$INWEUseableUntilDate(pobjINWE) < $get(pstrLimitDate)) {
			set blnResult = $$$NO	
		} 
	}	
	quit blnResult
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
	; has initial validity date
	if ($$$INWEUseableFromDate(pobjINWE) '= "") {
		; and it's  usable only after today
		quit:($$$INWEUseableFromDate(pobjINWE) &gt; (+$HOROLOG)) $$$NO
	}
	; if INWE has no expiry date
	if ($$$INWEUseableUntilDate(pobjINWE) = "") {
		; and a limit was defined
		;SRBR014351
		;if (pstrLimitDate '= "") {
		;	quit $$$NO
		;} 
		; no upper conditions..so let it go
		quit $$$YES
	}	
	; if INWE has expiry date
	 
	; and it's usable only before today
	if ($$$INWEUseableUntilDate(pobjINWE) &lt; (+$HOROLOG)) {
		quit $$$NO
	}	
	; a limit was defined
	if (pstrLimitDate '= "") {
		; and expiry date before it...
		quit:($$$INWEUseableUntilDate(pobjINWE) &lt; pstrLimitDate) $$$NO
	}	
	quit $$$YES
	*/
</Content>
</UDLText>
</Class>
</Export>