<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alDRP.iDRP">
<Abstract>1</Abstract>
<ClassType/>
<CompileAfter>alDRP.dMovement</CompileAfter>
<IncludeCode>INConst,COMSYS,%occInclude</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>

<Method name="ProcessMovementFromParam">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:%String,pMoveType:%String,pStatusID:%String,pBundle:%String,pidFromLocn:%String,pidFromStore:%String,pidToLocn:%String,pidToStore:%String,pstrRef:%String,pLineNum:%String,pfltQtyPkd:%String,pfltQtyRec:%String,pfltQtyReq:%String,pblnCompleted:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Feb-2010	GRF		SR17034: Variable prefixes (partial)
	; 30-Jan-2008	LB		SR15626: Changed the signature of dStatus to dUStatus
	; 30-Jan-2008	GRF		SR15625: Variable names
	; 29-Jan-2008	LB		SR15625: Changed class signature dINIssueLine to dUIssueLine
	;-------------------------------------------------------------------------------
	set objMove              = ##class(alDRP.dMovement).%New()
	set objMove.Item         = ##class(alINV.dItem).%OpenId(pidItem) 
	set objMove.MovementType = ##class(alDRP.dMovementType).%OpenId(pMoveType)        
    set objMove.Status       = ##class(alSYS.Status.dUStatus).%OpenId(pStatusID)
 	set objMove.Bundle       = %this.Bundle
 //	set objMove.DueDate      = %this.                      ; Not Implemented yet
 	set objMove.FromLocn     = ##class(alLOC.dLocation).%OpenId(pidFromLocn)
 	set objMove.FromStorage  = ##class(alLOC.dStorage).%OpenId(pidFromLocn_"||"_pidFromStore)
 	set objMove.ToLocn       = ##class(alLOC.dLocation).%OpenId(pidToLocn)
 	set objMove.ToStorage    = ##class(alLOC.dStorage).%OpenId(pidToLocn_"||"_pidToStore)
	set objMove.Reference    = pstrRef
	set objMove.LineNumber   = pLineNum
	set objMove.QtyPicked    = pfltQtyPkd
	set objMove.QtyReceived  = pfltQtyRec
	set objMove.QtyRequired  = pfltQtyReq
 //	set objMove.Supply       = %this.
 //	set objMove.Demand       = %this.
	set objMove.Completed    = pblnCompleted
	
	quit ##class(alDRP.piMovement).MovementIssue(pobjIss)
]]></Implementation>
</Method>

<Method name="MovementIssue">
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjIss:alISS.dUIssueLine</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dINIssueLine to dUIssueLine
	; 14-Nov-2007	LB		SR15598: Created 
	;-------------------------------------------------------------------------------
	quit ##class(alDRP.piMovement).MovementIssue(pobjIss)
]]></Implementation>
</Method>

<Method name="OnBuild">
<Description><![CDATA[
Builds and Populates the relative data stores within the Script module <br><br>

Returns: <br>
The string value of the error<br>]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 16-Jul-2008	HQN		SR15799: Restructured to be able to be rerun
	; 27-May-2008	GRF		Spelling correction
	; 16-May-2008	Luke	SR15751 corrected the population 
	; 25-Mar-2007	LB		Added exist call to reduce seek times
	; 30-Nov-2007	LB		Added call to alDRP.dMovementType populate
	; 15-Nov-2007	LB		Created 
	;-------------------------------------------------------------------------------	
	set sc = $$$OK
	//State Population 	
	if ##class(alDRP.dMovementStatus.Outstanding).%ExistsId("alDRP.dMovementStatus||2") {
		set objMoveOutstanding = ##class(alDRP.dMovementStatus.Outstanding).%OpenId("alDRP.dMovementStatus||2")
	} else {
		set objMoveOutstanding = ##class(alDRP.dMovementStatus.Outstanding).%New()
		set objMoveOutstanding.SMClassName = "alDRP.dMovementStatus"
		set objMoveOutstanding.StateId     = 2
		set sc = objMoveOutstanding.%Save()
	}
	if $$$ISOK(sc) {
		if ##class(alDRP.dMovementStatus.Completed).%ExistsId("alDRP.dMovementStatus||4") {
			set objMoveCompleted= ##class(alDRP.dMovementStatus.Completed).%OpenId("alDRP.dMovementStatus||4")
		} else {
			set objMoveCompleted = ##class(alDRP.dMovementStatus.Completed).%New()
			set objMoveCompleted.SMClassName = "alDRP.dMovementStatus"
			set objMoveCompleted.StateId     = 4
			set sc = objMoveCompleted.%Save()
		}		
	}
	if $$$ISOK(sc){
		do objMoveOutstanding.SetNext(objMoveOutstanding)
		do objMoveOutstanding.SetNext(objMoveCompleted)
		set sc = objMoveOutstanding.%Save()                  ; FIXME: <GRF> do we need to check failure to save before next save?
		set sc = objMoveCompleted.%Save()
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SourceStock">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidFromLocn:alLOC.dLocation,pidProgram:%String="&quot;,pidType=0,pstrReserveKey="&quot;</FormalSpec>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Source Stock for Item/Location
	; Optional
	;	pidProgram = Only select Program Stock
	;	pidType & pstrReserveKey = Exclude reservered stock for Type and Key, This is used for Issueing so it includes the current reserved stock
	; History:
	; 26-Dec-2013	shobby	CORE-300: Put some tests in to prevent crashing if encountering bad data..
	; 10-Sep-2013	SCR		CORE-266: Pass in Location to GetAttributes
	; 17-jul-2013	SCR		CORE-83: Exclude Locked Storages 
	; 26-Jun-2013	SCR		CORE-134: Include Current Record Stock
	; 23-Dec-2009	shobby	SR17034.2: Improved logic used when program is optional
	; 							and may not exist.
	; 09-Dec-2009	shobby	SR17034: If Program is specified only return those items
	; 							for a program.
	; 23-Oct-2009	PPP		SR16978:Check for UsebyDate (not a user defined not hardcoded)
	; 01-Oct-2008	HQN		dPlannedMovements at State:Completed need to be discarded
	; 17-Sep-2008	HQN		SR15808: Removing Reserved/Planned stock from result
	; 02-Sep-2008	HQN		SR15811: Correcting query logic
	; 18-Aug-2008	HQN		Correcting SQL query, tables changed names?
	; 19-May-2008	HQN		SR15756: GetPrevious ByRef returns 0 instead of "" for
	; 							End of List when empty list
	; 15-May-2008	Luke	SR15747: Split from SourceIssue
	;-------------------------------------------------------------------------------
	set objItem      = pidItem
	set objFromLocn  = pidFromLocn 
	set objStockList = ##class(%Library.ListOfObjects).%New()
	
	set objSourceStockList = ##class(alSOH.iSOH).SourceStock(pidItem.ItemId,pidFromLocn.Code)
	
	if (objSourceStockList.Count() = 0) quit objStockList            ; *** EARLY EXIT ***
	
	// Check bundle policy for Use by date information
	do GetAttributes^INItemPolicyUtils(pidItem.ItemId,.pblnLotNo,.pblnUseByDate,.pblnLotUnique,.pintBrand,.pintOwner,.pintProgram,pidFromLocn.Code)
	
	if pintProgram {
		set idStock = $$$NULLOREF
		for {
			set objStock = objSourceStockList.GetPrevious(.idStock)
			quit:(idStock = $$$NULLOREF)
			if objStock.Bundle="" do objSourceStockList.RemoveAt(idStock) continue  ;CORE-300
			
			if (pidProgram'="") {
				set idxAttribute = objStock.Bundle.Attributes.FindObjectId(objStock.Bundle.%Id()_"||Program")
				if idxAttribute'="" {
					set idProgram = objStock.Bundle.Attributes.GetAt(idxAttribute).AttributeValue
					if (idProgram'=pidProgram) {
						do objSourceStockList.RemoveAt(idStock)
					}
				}
			}
		}
	}
	
	if pblnUseByDate {
		set idStock = $$$NULLOREF
		for {
			set objStock = objSourceStockList.GetPrevious(.idStock)
			quit:((idStock = $$$NULLOREF) || (idStock = 0))
			
			if objStock.Bundle="" do objSourceStockList.RemoveAt(idStock) continue  ;CORE-300

			set idxAttribute = objStock.Bundle.Attributes.FindObjectId(objStock.Bundle.%Id()_"||Use By Date")
			if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(0,0,1)))) {
				continue:idxAttribute=""
			}
			set dateVal      = objStock.Bundle.Attributes.GetAt(idxAttribute).AttributeValue
			if dateVal < $horolog {
				do objSourceStockList.RemoveAt(idStock)
			}
		}
	}

	/** Storage Locked? */
	set idStock = $$$NULLOREF
	for {
		set objStock = objSourceStockList.GetPrevious(.idStock)
		quit:((idStock=$$$NULLOREF) || (idStock=0))
		
		if (objStock.Storage.StorageIsBlocked = $$$YES) {
			do objSourceStockList.RemoveAt(idStock)
		}
	}
	
	/** Check movements related to this alSOH.iSOH item */
	set idStock = $$$NULLOREF
	for {
		set objStock = objSourceStockList.GetPrevious(.idStock)
		quit:((idStock=$$$NULLOREF) || (idStock=0)) 
		
		set idItem    = objStock.Item.%Id()
		set idLocn    = objStock.Storage.Location.%Id()
		set idStorage = objStock.Storage.%Id()
		if objStock.Bundle="" do objSourceStockList.RemoveAt(idStock) continue  ;CORE-300
		set idBundle  = objStock.Bundle.%Id()
		; CORE-134 vvvv
		if (pidType) && (pstrReserveKey'="") {
			;set pidType=$lb(pidType)
			&sql(SELECT SUM(QtyRequired) INTO :fltQtyPlanned FROM alDRP.dPlannedMovement WHERE Item=:idItem AND 
				FromStorage=:idStorage AND FromLocn=:idLocn AND Bundle=:idBundle AND State->StateId = 3 AND
				((Reference != :pstrReserveKey) OR (MovementType_MovementTypeId = :pidType))
				)
		} else {
			&sql(SELECT SUM(QtyRequired) INTO :fltQtyPlanned FROM alDRP.dPlannedMovement WHERE Item=:idItem AND 
				FromStorage=:idStorage AND FromLocn=:idLocn AND Bundle=:idBundle AND State->StateId = 3) 
		}
		;&sql(SELECT SUM(QtyRequired) INTO :fltQtyPlanned FROM alDRP.dPlannedMovement WHERE Item=:idItem AND FromStorage=:idStorage AND FromLocn=:idLocn AND Bundle=:idBundle AND State->StateId = 3) ; 01-Oct-2008 HQN
		; CORE-134 ^^^^
		if SQLCODE = 0 {
			set objStock.QtyOnHand = objStock.QtyOnHand - fltQtyPlanned
			if (objStock.QtyOnHand <= 0) {
				do objSourceStockList.RemoveAt(idStock)
			}
		}		
	}
	; CORE-83 vvvv
	set idStock = $$$NULLOREF
	for {
		set objStock = objSourceStockList.GetPrevious(.idStock)
		quit:((idStock=$$$NULLOREF) || (idStock=0)) 
		
		set idItem    = objStock.Item.%Id()
		set idLocn    = objStock.Storage.Location.%Id()
		set idStorage = objStock.Storage.Code
		if $$SOHPostCheck^INLocking(idItem,idLocn,idStorage,"","","","","")'=$$$OK {
			do objSourceStockList.RemoveAt(idStock)
		}
		
	}
	; CORE-83 ^^^^
	
	quit objSourceStockList
]]></Implementation>
</Method>

<Method name="SourceIssue">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dUItem,pidFromLocn:%String,pfltQtyReqd:%Float,pidProgram:%String="&quot;</FormalSpec>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 09-Dec-2009	shobby	pidProgram
	; 02-Oct-2008	GRF		dStockIssue rather than StockIssue
	; 15-May-2008	Luke	SR15747: Split sourcing code out and made call to it 
	; 15-May-2008	HQN		SR15746: Moved Expiry Sourcing from Requisitions into here
	; 31-Mar-2008 	Luke	SR15652 check INWE, then check stock bundles for their
	; 							existance; create if they don't exist 
	; 24-Jan-2008	HQN		SR15625 Changed class signatures dLocation to dULocation
	;							and dINV to dUItem
	;-------------------------------------------------------------------------------
	set V2Item = ##class(alINV.iUINV).GetItem(pidItem)
	set V2Locn = ##class(alLOC.iLOC).GetLocation(pidFromLocn)
	
	set objSourceStockList = ##class(alDRP.iDRP).SourceStock(V2Item,V2Locn,pidProgram)
	set objStockList       = ##class(%Library.ListOfObjects).%New()
	set fltQtyRequired = pfltQtyReqd     ; [Inventory Units]
	
	set idStock = $$$NULLOREF
	for {
		set objStock = objSourceStockList.GetNext(.idStock)
		quit:(idStock = $$$NULLOREF)
		
		set objStockIssue = ##class(alDRP.dStockIssue).%New()
		set objStockIssue.Item 		   = objStock.Item
		set objStockIssue.PickSequence = objStock.PickSequence
		set objStockIssue.Storage      = objStock.Storage
		set objStockIssue.Bundle       = objStock.Bundle
		
		set min(fltQtyRequired)     = ""
		set min(objStock.QtyOnHand) = ""
		set fltQtyIssued = $order(min(""))
		kill min
	;	set objQtyIssued = ##class(%Library.Float).%New()
	;	set objQtyIssued = fltQtyIssued
		set objStockIssue.QtyToIssue = fltQtyIssued
		set fltQtyRequired = fltQtyRequired - fltQtyIssued
		do objStockList.Insert(objStockIssue)
		do objStock.%Close()
		quit:(fltQtyRequired <= 0)
	}
	do objSourceStockList.%Close()
	quit objStockList
]]></Implementation>
</Method>
</Class>
</Export>