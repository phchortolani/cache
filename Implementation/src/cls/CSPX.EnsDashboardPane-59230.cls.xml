<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsDashboardPane">
<Description><![CDATA[
An AutoPage pane that displays an SVG dashboard]]></Description>
<ClassType/>
<IncludeCode>Ensemble</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Util.Pane</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Property name="Dashboard">
<Description><![CDATA[
Default dashboard to display]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="255"/>
</Property>


<Property name="DefaultInstance">
<Description><![CDATA[
Default dashboard instance to display]]></Description>
<Type>%String</Type>

<Parameter name="MAXLEN" value="255"/>
</Property>


<Method name="DrawHEAD">
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Merge tID = pInstance.IDValues
	Set tClass = $G(tID(1))
	Set tDefaultInstance = $G(tID(2))

	Set:tClass="" tClass=..Dashboard
	Set:tDefaultInstance="" tDefaultInstance=..DefaultInstance

	If (##class(%Dictionary.CompiledClass).%ExistsId(tClass)) {
		Set tRefreshRate = ..GetRefreshRate(tClass)
		Set tClassTimeStamp = $$$comClassKeyGet(tClass,$$$cCLASStimechanged)
	}
	Else {
		Set tRefreshRate = 5000
		Set tClassTimeStamp = $$$timeLocal
		Set tDefaultInstance = ""
	}

	&html<
<style>

table.LayoutMain td.LayoutContentCol {
	background: darkblue;
	padding-left: 0px;
	vertical-align: top;
	filter: none;
}

.Error {
	color: red;
	text-weight: bold;
}

div.InstanceMenuCaption {
	border: 1px solid gray; 
	padding: 2px;
	color: yellow;
	font-size: 0.9em; 
	font-family: Verdana, Arial, Helvetica, sans-serif;
}
select.InstanceMenu { 
	font-size: 0.8em; 
	font-family: Verdana, Arial, Helvetica, sans-serif;
	background: #DDDDFF;
}

</style>>

	&html<<!-- detect svg -->
<script language="JavaScript" src="svgcheck.js"></script>
<script language="VBScript" src="svgcheck.vbs"></script>

<script language="javascript">

// time used for refresh

var timerID = null;

var refreshRate = #(tRefreshRate)#;
var dashboardClass = '#(tClass)#';
var classTimeStamp = '#(tClassTimeStamp)#';
var defaultInstance = '#(tDefaultInstance)#';

// call this to dynamically refresh the dashboard
function refreshDashboard()
{
	if (timerID) {
		self.clearTimeout(timerID);
	}

	var list = '';
	var loadingDiv = self.document.getElementById("loading");
	if (loadingDiv) {
		list = loadingDiv.api.getMetricList();
	}
	callServerRefresh(list,'#(tClassTimeStamp)#');
}

// new menu choice
function instMenuChange()
{
	var select = self.document.getElementById("InstanceMenu");
	if (!select) return;
	
	setDefaultInstance(select.value);
}

// update contents of instance menu
// list is csv list of value
function setInstanceMenu(list)
{
	var select = self.document.getElementById("InstanceMenu");
	if (!select) return;
	
	// get current set of values; see if there is a change
	var oldlist = '';
	for (var i = 0; i < select.options.length; i++) {
		oldlist = oldlist + (oldlist=='' ? '' : ',') + select.options[i].value;
	}
	if (list == oldlist) return;

	var old = select.value;
	var items = list.split(",");
	select.options.length = 0
	var oldExists = false;
	var first = '';

	for (var i = 0; i < items.length; i++) {
		var val = items[i];
		if (i == 0) {
			first = val;
		}
		if (val == old) {
			oldExists = true;
		}
		select.options[select.options.length] = new Option(val,val);
	}
	if (items.length > 18) {
		select.size = 18;
	}
	else {
		select.size = items.length;
	}

	if (!oldExists) {
		// old instance no longer exists
		setDefaultInstance(first);
	}
	else {
		select.value = old;
	}
}

// set the default metric instance for the dashboard
// this updates the dashboard
function setDefaultInstance(inst)
{
	if (defaultInstance != inst) {
		defaultInstance = inst;

		// update svg
		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.setDefaultInstance(defaultInstance);

		refreshDashboard();
		var select = self.document.getElementById("InstanceMenu");
		if (select) {
			select.value = defaultInstance;
		}
	}
}

// Set the initial value for the default instance
// called from dashboard
function initDefaultInstance(inst)
{
	if (defaultInstance != inst) {
		defaultInstance = inst;
		var select = self.document.getElementById("InstanceMenu");
		if (select) {
			select.value = inst;
		}
	}
}

// set a property for a specific dashboard meter
function document_setMeterProperty(meterid, property, value, idx)
{
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.setMeterProperty(meterid, property, value, idx);
}

// notification that something has happened in the editor
function raiseEvent(type)
{
	if (!self.top.Info) {
		// if we are not within a frameset, ignore this
		return;
	}

	var results = self.document.getElementById("results");
	var text = results.innerHTML;

	// escape any '+' chars to avoid microsoft bug
	text = escape(text);
	text = text.replace(/\+/g,'%2B');
	
	self.top.Info.document.location = '#(##class(%CSP.Page).Link("UtilEnsDashboard.csp?$FRAME=Info&$ID1="_$ZCVT(tClass,"O","URL")))#&$ID2=' + escape(defaultInstance) + '&$ID3=' + text;
}

// goto a new page
function gotoPage(url)
{
	self.top.document.location = url; // No need to call %CSP.Page.Link() on this url because it was done in CSPX.Dashboard.Meter.GenerateCode() for "Set tMeter.Link=..."
}

function startAutoRefresh()
{
	if ((refreshRate != 0)) {
		timerID = self.setTimeout("refreshDashboard()",refreshRate);
	}
}

// update the property pane (level & metric)
function updatePropertyPane(level, metric)
{
	if (!self.top.Info) {
		// if we are not within a frameset, ignore this
		return;
	}

	var span = self.top.Info.document.getElementById("level");
	if (span) {
		span.innerText = level;
	}

	var span = self.top.Info.document.getElementById("metric");
	if (span && metric) {
		span.innerText = metric;
	}
}

</script>>

	// write out methods that perform the hyper-calls
	Write "<script>",!
	Write "function callServerRefresh(list)",!
	Write "{",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsDashboardPane.RefreshDashboard","list,dashboardClass,classTimeStamp,defaultInstance",0)
 	Write ";",!
	Write "}",!

	Write "</script>",!
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawBODY">
<Description><![CDATA[
Draw the BODY of the detail pane]]></Description>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT = "Trap"

	If (%request.UserAgent '[ "MSIE") {
		Write "<div style=""color: yellow; padding-left:20px;"">",$$$TextHTML("At this time, this page is only visible with Internet Explorer."),"</div>"
		Quit $$$OK
	}

	Merge tID = pInstance.IDValues
	Set tClass = $G(tID(1))
	Set tDefaultInstance = $G(tID(2))

	Set:tClass="" tClass=..Dashboard
	Set:tDefaultInstance="" tDefaultInstance=..DefaultInstance

	If ('##class(%CompiledClass).%ExistsId(tClass)) {
		Goto Trap
	}

	&html<	
		<!-- detect svg -->
		<script language="JavaScript">
		checkAndGetSVGViewer();
		</script>
	>

	// make sure correct hyperevent code is rendered
	Write ##class(%CSP.Page).HyperEventBody(),!

	// results block
	&html<<xml id="results" style="display:none;">aaa:bbb:ccc:ddd</xml>>

	// display Dashboard
	&html<<div id='loading' 
		style='background: darkblue; color: white; font-size: 14pt; font-family: courier new'>&nbsp;Rendering Dashboard...</div>>

	&html<<table border="0" cellpadding="0" cellspacing="0"><tr><td>>
	
	Set tSC = ..GetInstanceMenu(tClass,.tMenu,.tCaption,.tSize)
	If ($$$ISOK(tSC) && $D(tMenu)) {
		&html<<div class="InstanceMenuCaption">#(tCaption)#</div>
				<select class="InstanceMenu" id="InstanceMenu" size="#(tSize)#" onchange="instMenuChange();">>

		Set n = $O(tMenu(""))
		While (n '= "") {
			Set tSel = $S(tMenu(n)'=tDefaultInstance:"",1:"selected")
			&html<<option #(tSel)# value="#(tMenu(n))#">#(tMenu(n))#</option>>
			Set n = $O(tMenu(n))
		}
		&html<</select>>
		&html<</td><td>>
	}

	// set correct dimensions after loading
	&html<<embed 
			id="SVGEmbed" 
			name="SVGEmbed" 
			type="image/svg-xml" 
			src="#(##class(%CSP.Page).Link("CSPX.Dashboard.Page.cls?CLASS="_tClass_"&$ID2="_$ZCVT(tDefaultInstance,"O","URL")))#"
			height="1000" 
			width="1000">>

	&html<</td></tr></table>>
	
	// note: embedded SVG document will initiate autoRefresh

Done
	Quit $$$OK

Trap
	Set $ZT=""
	// display error: start refresh to reload page
	&html<<div class="Error">#(..LocalizeText("@Ensemble:ErrorMisDashboard@Missing or invalid Dashboard class."))#</div>
	<script language="JavaScript">
		startAutoRefresh();
	</script>>
	Goto Done
]]></Implementation>
</Method>

<Method name="RefreshDashboard">
<Description><![CDATA[
Called from client to refresh the dashboard]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>metricList:%String,dashClass:%String,clientTime:%String,defaultInstance:%String</FormalSpec>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set $ZT = "Trap"
	
	Do {
		If (dashClass = "") {
			Quit
		}
		
		// test class time stamp from client
		Set tClassTimeStamp = $$$comClassKeyGet(dashClass,$$$cCLASStimechanged)
		If (((clientTime '= "") && (tClassTimeStamp '= clientTime))) {
			// reload client page
			&js<self.document.location.reload();>
			Quit
		}
		
		If (metricList = "") {
			Quit
		}

		// Get values for instance menu
		// !!! ordering!!!
		Set tSC = ..GetDefaultMetric(dashClass,.tMetricName)
		If ($$$ISOK(tSC) && (tMetricName '= "")) {
			Set tList = ""
			Set tKey = $O(^Ens.Metrics(tMetricName,""))
			While (tKey '= "") {
				Set tList = tList _ $S(tList="":"",1:",") _ tKey
				Set tKey = $O(^Ens.Metrics(tMetricName,tKey))
			}
			
			// tell client to update instance menu
			Write "setInstanceMenu('" _ tList _ "');",!
		}

		// metricList contains list of metrics to apply
		For n = 2:1:$L(metricList,"^") {
			Set temp = $P(metricList,"^",n)
			Set id = $P(temp,":",1)
			Set mcls = $P(temp,":",2)
			Set prop = $P(temp,":",3)
			Set idx = $P(temp,":",4)  // index # or 'labels'
			Set:(idx'="labels") idx = +idx
			Set type = $P(temp,":",5)  // S=series, L=level
			Set method = $P(temp,":",6)
			Set isrunning = +$P(temp,":",7)
			Set deflist = $P(temp,":",8)
			Set inst = $P(temp,":",9) // instance name (for series)
			Set xdim = $P(temp,":",10) // xdimension
			Set (gridCol,gridRow) = ""
			If (xdim = "Grid") {
				// grid: figure out what data to send
				Set gridCol = $P(temp,":",11)
				Set gridRow = $P(temp,":",12)
				
				If ((gridCol = "instances") || (gridRow = "instances")) {
					Set xdim = "instances"
				}
				Else {
					Set xdim = ""
				}
			}
			
			// pull apart cls and instance
			Set cls = $P(mcls,"(",1)
			Set tInstance = $P($P(mcls,"(",2),")",1)
	
			If ((cls '= "") && (prop '= "")) {
				// get metric and send to client
				If (tInstance = "") {
					// use first instance
					Set tInstance = $O(^Ens.Metrics(cls,""))
				}
	
				If (tInstance = "") Quit
	
				Set enabled = $G(^Ens.Metrics(cls,tInstance,"%IsRunning"),0)
				If (idx = 0) {
					// see if we need to enable/disable the meter
					// for chart we only need to do this for series 0
					If (enabled '= isrunning) {
						Set enf = $S(enabled:"true",1:"false")
						Write "document_setMeterProperty(",id,", 'enabled', ",enf,");",!
	
						If (enabled) {
							// we need to resend default values
							
							// create a meter to find default values
							Set tMeter = ##class(CSPX.Dashboard.Meter).%New()
							Set tMeter.Metric = cls
							Set tMeter.Property = prop
							Set deflist = "|" _ deflist _ "|"
							If (deflist [ "|L|") {
								Write "document_setMeterProperty(",id,", 'link', '",tMeter.GetDefault("Link"),"');",!
							}
							If (deflist [ "|RL|") {
								Write "document_setMeterProperty(",id,", 'rangeLower', '",tMeter.GetDefault("RangeLower"),"');",!
							}
							If (deflist [ "|RU|") {
								Write "document_setMeterProperty(",id,", 'rangeUpper', '",tMeter.GetDefault("RangeUpper"),"');",!
							}
							If (deflist [ "|TL|") {
								Write "document_setMeterProperty(",id,", 'thresholdLower',' ",tMeter.GetDefault("ThresholdLower"),"');",!
							}
							If (deflist [ "|TU|") {
								Write "document_setMeterProperty(",id,", 'thresholdUpper', '",tMeter.GetDefault("ThresholdUpper"),"');",!
							}
	
							Set tMeter = ""
						}
					}
				}
	
				// update levels for enabled meters
				If (enabled) {
					If (type = "S") {
						// chart / grid
						Set series = ""
						If (idx = "labels") {
							// request for label values
							// loop over nodes
							Set labels = ""
							Set tSeriesInstance = $S(inst="":tInstance,1:inst)
							Set key = $O(^Ens.Metrics(cls,tSeriesInstance,prop,""))
							While (key '= "") {
								Set labels = labels _ $S(labels="":"",1:":") _ ($G(^Ens.Metrics(cls,tSeriesInstance,prop,key)))
								Set key = $O(^Ens.Metrics(cls,tSeriesInstance,prop,key))
							}
							Write "document_setMeterProperty(",id,", 'xlabels', '",labels,"',",0,");",!
						}
						Else {
							// get multi-dim series and send it
							If (((gridCol = "instances")&&(gridRow = "history"))|| ((gridRow = "instances")&&(gridCol = "history"))) {
								// loop over instances / history
								Set labels = ""
								Set ino = 0
								Set tSeriesInstance = $O(^Ens.Metrics(cls,""))
								While (tSeriesInstance '= "") {
									Set labels = labels _ $S(labels="":"",1:":") _ tSeriesInstance
									// get history for instance
									Set series = ""
									Set key = $O(^Ens.Metrics(cls,tSeriesInstance,prop,""))
									While (key '= "") {
										Set series = series _ $S(series="":"",1:":") _ ($G(^Ens.Metrics(cls,tSeriesInstance,prop,key)))
										Set key = $O(^Ens.Metrics(cls,tSeriesInstance,prop,key))
									}
									Write "document_setMeterProperty(",id,", 'series', '",series,"',",ino,");",!
									Set ino = ino + 1
									Set tSeriesInstance = $O(^Ens.Metrics(cls,tSeriesInstance))
								}
								
								// labels
								Write "document_setMeterProperty(",id,", 'xlabels', '",labels,"',",idx,");",!
							}
							ElseIf (xdim = "instances") {
								// loop over instances
								Set labels = ""
								Set tSeriesInstance = $O(^Ens.Metrics(cls,""))
								While (tSeriesInstance '= "") {
									Set labels = labels _ $S(labels="":"",1:":") _ tSeriesInstance
									Set series = series _ $S(series="":"",1:":") _ ($G(^Ens.Metrics(cls,tSeriesInstance,prop)))
									Set tSeriesInstance = $O(^Ens.Metrics(cls,tSeriesInstance))
								}
								Write "document_setMeterProperty(",id,", 'xlabels', '",labels,"',",idx,");",!
								Write "document_setMeterProperty(",id,", 'series', '",series,"',",idx,");",!
							}
							Else {
								// loop over nodes
								Set series = ""
								Set tSeriesInstance = $S(inst="":tInstance,1:inst)
								Set key = $O(^Ens.Metrics(cls,tSeriesInstance,prop,""))
								While (key '= "") {
									Set series = series _ $S(series="":"",1:":") _ ($G(^Ens.Metrics(cls,tSeriesInstance,prop,key)))
									Set key = $O(^Ens.Metrics(cls,tSeriesInstance,prop,key))
								}
								Write "document_setMeterProperty(",id,", 'series', '",series,"',",idx,");",!
							}
						}
					}
					Else {
						// non-chart
						// level
						// single-valued
						Set value = $G(^Ens.Metrics(cls,tInstance,prop))
						If ((dashClass '="") && (method '= "")) {
							// invoke transform method
							// !!! validate...
							Set value = $zobjclassmethod(dashClass,method,value)
						}
						Write "document_setMeterProperty(",id,", 'level', '",value,"',",idx,");",!
					}
				}
			}
		}
	} While(0)

	Set msgLastUpdate = "Last Update"
	&js<window.status = '#(msgLastUpdate)#: #($ZDT($H,3))#';>

	&js<timerID = self.setTimeout("refreshDashboard()",refreshRate);>

Done
	Quit
	
Trap
	Set $ZT = ""
	&js<alert("RefreshDashboard Error: #($ZE)#");>
	Goto Done
]]></Implementation>
</Method>

<Method name="GetRefreshRate">
<Description><![CDATA[
Find refresh rate for this page]]></Description>
<FormalSpec>pDashClass:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set $ZT = "Trap"
	Set tRate = $zobjclassmethod(pDashClass,"GetRefreshRate")
Done
	Quit tRate
Trap
	Set $ZT=""
	Set tRate = 5000
	Goto Done
]]></Implementation>
</Method>

<Method name="GetInstanceMenu">
<Description><![CDATA[
Returns ordinal subscripted list of instance menu options.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDashClass:%String,*pMenu:%String,*pCaption:%String,*pSize:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT = "Trap"
	Set tSC = $$$OK
	Kill pMenu
	Set pCaption = ""
	Set pSize = 1

	Do {
		If (pDashClass = "") Quit

		Set x = $zobjclassmethod(pDashClass,"GetInstanceMenu",.tMetricName,.tMetricClass,.pCaption)
		If ('x || (tMetricClass = "")) Quit

		// execute GetInstances method for metric class
		Set tSC = $zobjclassmethod(tMetricClass,"GetInstances",.pMenu)
		Set pSize = +$O(pMenu(""),-1)
		Set:pSize=0 pSize = 1

	} While(0)

	If (pSize > 18) {
		Set pSize = 18
	}

Done
	Quit tSC
Trap
	Set $ZT="",tSC=$$$EnsSystemError
	Goto Done
]]></Implementation>
</Method>

<Method name="GetDefaultMetric">
<Description><![CDATA[
Returns name of default metric for the given dashboard.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDashClass:%String,*pMetricName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT = "Trap"
	Set tSC = $$$OK
	Set pMetricName = ""
	
	Do {
		If (pDashClass = "") Quit

		Set x = $zobjclassmethod(pDashClass,"GetInstanceMenu",.pMetricName,.tMetricClass,.pCaption)
	} While(0)

Done
	Quit tSC
Trap
	Set $ZT="",tSC=$$$EnsSystemError
	Goto Done
]]></Implementation>
</Method>

<Method name="OnGenerateCode">
<Description><![CDATA[
Subclasses override this to generate code during CSP processing]]></Description>
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set code = ""
	If (..Dashboard '= "") {
		Set code = code _ " Set tPane.Dashboard = " _ ..QuoteCOS(..Dashboard) _ $$$EOL
	}
	If (..DefaultInstance '= "") {
		Set code = code _ " Set tPane.DefaultInstance = " _ ..QuoteCOS(..DefaultInstance) _ $$$EOL
	}

	Quit code
]]></Implementation>
</Method>
</Class>
</Export>