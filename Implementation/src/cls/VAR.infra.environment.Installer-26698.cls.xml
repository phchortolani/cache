<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.environment.Installer">
<ClassType/>
<Import>VAR.common</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="Install">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	&sql(DELETE
    	 FROM   Environment)
	do ##Class(VAR.common.Environment).%KillExtent()
	
	// Ambiente de Desenvolvimento Local
	do ..DefineEnvironments(2, ##class(Environment).%GetParameter("MACHINEDEFAULT"), "HEVA")
	do ..DefineEnvironments(3, ##class(Environment).%GetParameter("MACHINEDEFAULT"), "HEVA-INTEGRACAO")

	// Ambiente de Homologação Interno
	do ..DefineEnvironments(11, "MORENA", "HEVA")
	do ..DefineEnvironments(12, "MORENA", "HEVA-INTEGRACAO")
	do ..DefineEnvironments(13, "MORENA", "HEVA-PREV")
	do ..DefineEnvironments(14, "MORENA", "HEVA-INTEGRACAO-PREV")

	// Ambiente Principal de Homologação Externo
	do ..DefineEnvironments(21, "AMEDISC1", "TREINA")
	do ..DefineEnvironments(22, "AMEDISC1", "TREINA-INTEGRACAO")

	// Ambiente Principal de Produção
	do ..DefineEnvironments(31, "AMEDISC1", "HEVA")
	do ..DefineEnvironments(32, "AMEDISC1", "AME")
	do ..DefineEnvironments(33, "AMEDISC1", "SEDI")
	do ..DefineEnvironments(35, "AMEDISC1", "HEVA-INTEGRACAO")

	// Ambiente Secundário de Homologação Externo
	do ..DefineEnvironments(41, "AMEDISC2", "TREINA")
	do ..DefineEnvironments(42, "AMEDISC2", "TREINA-INTEGRACAO")

	// Ambiente Secundário de Produção
	do ..DefineEnvironments(51, "AMEDISC2", "HEVA")
	do ..DefineEnvironments(52, "AMEDISC2", "AME")
	do ..DefineEnvironments(53, "AMEDISC2", "SEDI")
	do ..DefineEnvironments(55, "AMEDISC2", "HEVA-INTEGRACAO")

	// Ambiente de Desenvolvimento Específico
	//   do Pablo
	do ..DefineEnvironments(101, "PABLODISC", "HEVA")
	do ..DefineEnvironments(102, "PABLODISC", "HEVA-INTEGRACAO")
	//   do Guilherme
	do ..DefineEnvironments(103, "GUILHERMEDISC", "HEVA")
	do ..DefineEnvironments(104, "GUILHERMEDISC", "HEVA-INTEGRACAO")
	//   do Adrieu
	do ..DefineEnvironments(105, "ADRIEUDISC", "HEVA")
	do ..DefineEnvironments(106, "ADRIEUDISC", "HEVA-INTEGRACAO")
	//   do Lucas
	do ..DefineEnvironments(109, "LUCASDISC", "HEVA")
	do ..DefineEnvironments(110, "LUCASDISC", "HEVA-INTEGRACAO")

	quit $$$OK]]></Implementation>
</Method>

<Method name="DefineEnvironments">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer,machine:%String,namespace:%String</FormalSpec>
<Implementation><![CDATA[	&sql(SELECT COUNT(*)
    	 INTO   :existe
    	 FROM   Environment
    	 WHERE  Id = :id)

    if ('+existe) {
        &sql(INSERT
        	 INTO   Environment
        	        (Id, Machine, Namespace)
        	 VALUES
        	        (:id, UPPER(:machine), UPPER(:namespace)))
    }
    else {
        &sql(UPDATE Environment
        	 SET    Machine = UPPER(:machine),
        	        Namespace = UPPER(:namespace)
        	 WHERE  Id = :id)
    }]]></Implementation>
</Method>
</Class>
</Export>