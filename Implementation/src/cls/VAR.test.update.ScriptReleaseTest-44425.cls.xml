<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.test.update.ScriptReleaseTest">
<ClassType/>
<Import>VAR.update,%UnitTest,VAR.test.infra.unittest</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>TestCase</Super>

<Method name="Run">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ##class(SuiteManager).RunTestCase(..%ClassName(1))]]></Implementation>
</Method>

<Method name="TestBF">
<Description><![CDATA[Basic Flow test]]></Description>
<Implementation><![CDATA[	do ##class(VersionUpdater).Clean()
	do ##class(VersionUpdater).UpdateVersion("VAR.test.update.bf")
	do $$$AssertEquals($piece(##class(VersionUpdater).GetVersionHistory(1),"|",2),"00.00.001")
	do $$$AssertEquals($piece(##class(VersionUpdater).GetVersionHistory(2),"|",2),"00.00.002")
	do $$$AssertEquals($piece(##class(VersionUpdater).GetVersionHistory(3),"|",2),"00.01.000")
	do $$$AssertEquals($piece(##class(VersionUpdater).GetVersionHistory(4),"|",2),"01.00.000")]]></Implementation>
</Method>

<Method name="TestAF1NoClass">
<Description><![CDATA[Alternative Flow 1 test: no class]]></Description>
<Implementation><![CDATA[	do ##class(VersionUpdater).Clean()
	do ##class(VersionUpdater).UpdateVersion("VAR.test.update.af1")
	do $$$AssertNotEquals($piece(##class(VersionUpdater).GetVersionHistory(1),"|",2),"00.00.001")]]></Implementation>
</Method>

<Method name="TestAF2NoMethod">
<Description><![CDATA[Alternative Flow 2 test: no method]]></Description>
<Implementation><![CDATA[	do ##class(VersionUpdater).Clean()
	do ##class(VersionUpdater).UpdateVersion("VAR.test.update.af2")
	do $$$AssertEquals($piece(##class(VersionUpdater).GetVersionHistory(1),"|",2),"00.00.001")
	do $$$AssertNotEquals($piece(##class(VersionUpdater).GetVersionHistory(2),"|",2),"00.00.002")]]></Implementation>
</Method>

<Method name="TestAF3RuntimeError">
<Description><![CDATA[Alternative Flow 3 test: runtime error]]></Description>
<Implementation><![CDATA[	kill ^Teste

	for i = 1:1:4 {
		do ##class(VersionUpdater).Clean()
		do ##class(VersionUpdater).UpdateVersion("VAR.test.update.af3")
		do $$$AssertEquals($piece(##class(VersionUpdater).GetVersionHistory(1),"|",2),"00.00.001")
	}

	do ##class(VersionUpdater).Clean()
	do ##class(VersionUpdater).UpdateVersion("VAR.test.update.af3")
	do $$$AssertNotEquals($piece(##class(VersionUpdater).GetVersionHistory(1),"|",2),"00.00.001")]]></Implementation>
</Method>

<Method name="TestAF4StatusError">
<Description><![CDATA[Alternative Flow 4 test: status error]]></Description>
<Implementation><![CDATA[	do ##class(VersionUpdater).Clean()
	do ##class(VersionUpdater).UpdateVersion("VAR.test.update.af4")
	do $$$AssertNotEquals($piece(##class(VersionUpdater).GetVersionHistory(1),"|",2),"00.00.001")]]></Implementation>
</Method>

<Method name="TestAF5Parameter">
<Description><![CDATA[Alternative Flow 5 test: versioning parameter]]></Description>
<Implementation><![CDATA[	kill ^VAR.update.VersionUpdater("VERSIONPARAMS")
	set instance = ##class(VersionUpdater).%New()
	
	do ##class(VersionUpdater).Clean()
	do ##class(VersionUpdater).UpdateVersion("VAR.test.update.af5")
	do $$$AssertEquals(^VAR.update.VersionUpdater("VERSIONPARAMS",$piece(##class(VersionUpdater).GetVersionHistory(1),"|",2),"PARAMTEST"),1)
	do $$$AssertEquals(^VAR.update.VersionUpdater("VERSIONPARAMS",$piece(##class(VersionUpdater).GetVersionHistory(2),"|",2),"PARAMTEST"),1)]]></Implementation>
</Method>
</Class>
</Export>