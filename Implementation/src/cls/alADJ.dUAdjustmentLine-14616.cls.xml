<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alADJ.dUAdjustmentLine">
<ClassType>persistent</ClassType>
<IncludeCode>COMSYS</IncludeCode>
<Super>User.INADJLine</Super>

<Property name="Adjustment">
<Description><![CDATA[
Pseudo relation to Implement better object relations under a @nM enviroment<br>
The Transient to represent the parent adjustment ]]></Description>
<Type>alADJ.dUAdjustment</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00379"/>
</Property>


<Property name="BaseQuantity">
<Description><![CDATA[
Base Quantity]]></Description>
<Type>%Float</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="Base Quantity"/>
</Property>


<Property name="ExpirationDate">
<Description><![CDATA[
Expiration Date]]></Description>
<Type>WWW.DiscDate</Type>

<Parameter name="CAPTION" value="Expiration Date"/>
</Property>


<Property name="Item">
<Description><![CDATA[
Item]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="Item"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="LotNumber">
<Description><![CDATA[
Lot Number]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="Lot Number"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="NoPartialAdjustment">
<Description><![CDATA[
No Partial Adjustment]]></Description>
<Type>%Boolean</Type>

<Parameter name="CAPTION" value="No Partial Adjustment"/>
</Property>


<Property name="Number">
<Description><![CDATA[
Number]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="Number"/>

<Parameter name="COLLATION" value="EXACT"/>

<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>


<Property name="ReasonCode">
<Description><![CDATA[
Reason Code]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="Reason Code"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="ReceivedDate">
<Description><![CDATA[
Received Date]]></Description>
<Type>WWW.DiscDate</Type>

<Parameter name="CAPTION" value="Received Date"/>
</Property>


<Property name="StockAdjustmentNumber">
<Description><![CDATA[
Stock Adjustment Number]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="Stock Adjustment Number"/>

<Parameter name="COLLATION" value="EXACT"/>

<Parameter name="MAXLEN" value="30"/>

<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>


<Property name="StockLocation">
<Description><![CDATA[
Stock Location]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="Stock Location"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="UnitCost">
<Description><![CDATA[
Unit Cost]]></Description>
<Type>%Currency</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="Unit Cost"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="AdjustmentGet">
<Description><![CDATA[
Pseudo relation. <br>
This creates the relationship between this, the line, and the header <p>
Creates a <class>alADJ.dUAdjustment</class> based on the <code>StockAdjustmentNumber</code> of this object.<p>
It method is automatically called when you access the <code>Adjustment</code><br>
 Params:<br>
 
 Returns: <br>
 	<class>alADJ.dUAdjustment</class>]]></Description>
<ReturnType>alADJ.dUAdjustment</ReturnType>
<Implementation><![CDATA[
	if (i%Adjustment = $$$NULLOREF) && (%this.StockAdjustmentNumber '= $$$NULLOREF) {
		set i%Adjustment = ##class(alADJ.dUAdjustment).%OpenId("0||"_%this.StockAdjustmentNumber)
	}
	quit i%Adjustment
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<UDLText name="T">
<Content>
/*
 	;---------------------------------------  Adjust()
	; pQtyChange  pQtyOnHand  fltAdjQty	new pQtyChange  new SOH
	;-----------------------------------------------------------
	;	 0			any			 0			 0			same
	; 	 5			any			 5			 0		  incr by 5 (if start with large -ve
	; 	 											value can be negative when we finish)
	; blnAllowNegative = $$$YES
	; (by it's nature always allows All)
	; 	-5			any			-5			 0		  decr by 5 - may become negative
	; blnAllowNegative = $$$NO
	; blnOnlyIfAll     = $$$NO
	; 	-5			 8			-5			 0		  decr by 5
	; 	-5			 2			-2			-3			zero
	; 	-5			 0			 0			-5			same
	; 	-5			-any		 0			-5			same
	; blnAllowNegative = $$$NO
	; blnOnlyIfAll     = $$$YES
	; 	-5			 8			-5			 0		  decr by 5
	; 	-5			 2			 0			-5			same
	; 	-5			 0			 0			-5			same
	; 	-5			-any		 0			-5			same
	;---------------------------------------
 	*/
</Content>
</UDLText>


<Method name="PostTxn">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Called By :
	; 	PostTxn^INADJ from the Post button on the INADJ form
	; 	
	; fltQtyLeft	contains the initial quantity adjustment to be applied
	;				 -  a *** NEGATIVE *** value indicates a reduction in the SOH
	;				and a *** POSITIVE *** value indicates the SOH increases.
	; 
	; blnNoPartAdj	If the system has already been interogated and the quantity in
	;               a bundle identified, the transaction may expect the adjustment
	;               to be serviceable without recourse to multiple bundles.
	;               If set to $$$YES, an error will occur if the bundle has less
	;                   stock than required.
	; 
	;-------------------------------------------------------------------------------
	; 
	; If INCREASING the quantity on hand -
	;     Get the matching bundle, making one if necessary
	;     
	; If DECREASING the quantity on hand -
	;     If using other than the Default Policy
	;         Get the matching bundle, making one if necessary
	;     else
	;         Obtain all bundles for the storage
	;         If there are no bundles
	;             Make a new bundle                                  [check blnNoPartAdj]
	;         else
	;             Reduce the contents of the bundle up to the QOH, stopping when
	;             the balance to be subtracted becomes zero.         [check blnNoPartAdj]
	;             
	;             If the bundle is reduced to zero, continue with the next bundle.
	;             
	;             If there are no more bundles,
	;                 Reduce the last bundle used - taking the quantity negative
	;                     
	;     
	; History:
	; 16-May-2008	GRF		SR15748: Rewrite to distinguish between situations that
	; 							simply involve GetBundle and those that need to step
	; 							through list of BundleStock objects.
	; 29-Apr-2008	GRF		SR15694: Source using V2Bundles; move processing to method
	;-------------------------------------------------------------------------------
	set sc           = $$$OK
	set fltQtyLeft   = %this.BaseQuantity
	
 ;	set curCost		 = %this.TotalCost              ; use for History
 ;	set dteReceived  = %this.ReceivedDate           ; provided by Web Service (TODO : convert to bundle)
	set blnNoPartAdj = ''%this.NoPartialAdjustment
	
	set idItem		 = %this.Item
	set objItem      = ##class(alINV.iUINV).GetItem(idItem,.sc)

	if $$$ISOK(sc) {
		set objPolicy = objItem.ItemPolicy
		set strPolicy = objPolicy.Description
		set blnDefaultPolicy = (strPolicy = "Default Policy")
		
		set idLocn   = %this.Adjustment.SiteLocation
		set idStore	 = %this.StockLocation
		set objStore = ##class(alLOC.iLOC).GetStorage(idLocn,idStore)
		set blnStkAdj = (%this.Adjustment.Stocktake '= "")
		
	;---------------------------------------
	; Increasing the stock on hand
	;---------------------------------------
		if fltQtyLeft > 0 {
			set objBundle = ..GetBundle(.sc)
			if $$$ISOK(sc) set sc = ..UpdateBundle(blnStkAdj,objBundle,objItem,objStore,0,.fltQtyLeft,$$$YES,$$$NO)
		
		
	;---------------------------------------
	; Decreasing the stock on hand - for other than Default Policy
	;---------------------------------------
		} elseif fltQtyLeft < 0 {                    ; Decrease the SOH against successive bundles
			if 'blnDefaultPolicy {
				set objBundle = ..GetBundle(.sc)
				if $$$ISOK(sc) {
					if (blnNoPartAdj = $$$YES) {  ; All or Nothing
						set sc = ..UpdateBundle(blnStkAdj,objBundle,objItem,objStore,0,.fltQtyLeft,$$$NO,$$$YES)
					} else {
						set sc = ..UpdateBundle(blnStkAdj,objBundle,objItem,objStore,0,.fltQtyLeft,$$$YES,$$$NO)
					}
				}
				
	;---------------------------------------
	; Decreasing the stock on hand - for Default Policy
	;---------------------------------------
			} else {
				set lstStock = ##class(alSOH.iSOH).SourceStock(idItem,idLocn,idStore)
				
				if lstStock.Count() {
					for loop = 1:1:lstStock.Count() {
						set objBundleStock = lstStock.GetAt(loop)
						quit:fltQtyLeft=0
							
						set objBundle = objBundleStock.Bundle
						set sc = ..UpdateBundle(blnStkAdj,objBundle,objItem,objStore,objBundleStock.QtyOnHand,.fltQtyLeft,$$$NO,blnNoPartAdj)
						quit:$$$ISERR(sc)
					}
					
			; Apply remaining decrease to last bundle	(blnNoPartAdj handled earlier so don't need to recheck)
					if $$$ISOK(sc) && fltQtyLeft {
						set objBundleStock = lstStock.GetAt(lstStock.Count())
						
						set objBundle = objBundleStock.Bundle
						set sc = ..UpdateBundle(blnStkAdj,objBundle,objItem,objStore,objBundleStock.QtyOnHand,.fltQtyLeft,$$$YES,$$$NO)
					}
				
				} else {                                 ; If no bundles found create a bundle
				
				;   Web Service :
				;	Assume that the date provided matches a record with adequate stock
				;	or else the record would have had less quantity.  
				;	"No Partial Adjustment" flag stops adjustment occurring if another
				;	process grabs the stock first after it has been identified as being
				;	available.
					
					set objBundle = ..GetBundle(.sc)
					
					if $$$ISOK(sc) {
						if (blnNoPartAdj = $$$YES) {  //no partial adjustment (all or nothing)
							set sc = ..UpdateBundle(blnStkAdj,objBundle,objItem,objStore,0,.fltQtyLeft,$$$NO,$$$YES)
						
						} else {
							set sc = ..UpdateBundle(blnStkAdj,objBundle,objItem,objStore,0,.fltQtyLeft,$$$YES,$$$NO)
						}
					}
				}
			}
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetBundle">
<FormalSpec>*sc:%Status</FormalSpec>
<ReturnType>alSOH.dBundle</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get Bundle attributes defined on the line
	; 
	; History:
	; 17-Nov-2014	shobby	ALPHAUP-24: Removed INADJBundleFix code
	; 15-Apr-2014	SCR	HEVA-1473: Check for optional Recorded Bundle that it matches line data
	; 10-Sep-2013	SCR	CORE-266: Pass in Location to GetAttributes
	; 09-Jul-2009	PPP	SR16721: Optional policy definitions
	; 22-Jun-2009	PPP	SR16510: Get the Bundle (Created)
	;-------------------------------------------------------------------------------
	set idItem 	= %this.Item
	set idLoc	= %this.Adjustment.SiteLocation

	do GetAttributes^INItemPolicyUtils(idItem,.blnLotNo,.blnUseByDate,.blnLotUnique,.intBrand,.intOwner,.intProgram,idLoc)

	if blnLotNo  {
		set arrAttributes("Lot Number")  = %this.LotNumber
	}
	if blnUseByDate {
		set arrAttributes("Use By Date") = %this.ExpirationDate
	}

	//		NEW ATTRIBUTES BASED ON THE ITEM (values can be 1-Yes, 2-No, 3-Optional)
	if (intBrand=1) || (intBrand=3) {
		set arrAttributes("Brand")       = %this.Brand
	}
	if (intOwner=1) || (intOwner=3) {
		set arrAttributes("Owner")       = %this.Owner
	}
	if (intProgram=1) || (intProgram=3) {
		set arrAttributes("Program")     = %this.Program1
	}
	
	//Need to open the Item Number in V2 Object class (alINV.dItem), %this.Item is class alINV.dUItem
	//set objItem = ##class(alINV.dItem).%OpenId(%this.Item.ItemNumber,0)
	set objItem      = ##class(alINV.iUINV).GetItem(idItem,.sc)

	//Create a new bundle if required
	set blnDoNotCreate = $$$NO
	if %this.Quantity<0 set blnDoNotCreate = $$$YES
	;ALPHAUP-244 set ^CacheTempSCR($i(^CacheTempSCR))="%this.Bundle="_%this.Bundle
	;ALPHAUP-244 set ^CacheTempSCR($i(^CacheTempSCR))="$get(^CacheTempINADJBundleFix)="_$get(^CacheTempINADJBundleFix)
	;ALPHAUP-244 if (%this.Bundle="") || ('$get(^CacheTempINADJBundleFix)) {
	if (%this.Bundle="") { 
		set objBundle	= ""
	} else {
		set objBundle	= ##class(alSOH.dBundle).%OpenId(%this.Bundle)
		if objBundle'="" {
			set sc =objBundle.GetAttributes( .arrBundleAttributes )	
			if $$$ISOK(sc) {
				set blnBundleOK = $$$OK
				if blnLotNo  {
					set:arrBundleAttributes("Lot Number")'=%this.LotNumber blnBundleOK='$$$OK
				}
				if blnUseByDate {
					set:arrBundleAttributes("Use By Date")'=%this.ExpirationDate blnBundleOK='$$$OK
				}
				if (intBrand=1) || (intBrand=3) {
					set:arrBundleAttributes("Brand")'=%this.Brand blnBundleOK='$$$OK
				}
				if (intOwner=1) || (intOwner=3) {
					set:arrBundleAttributes("Owner")'=%this.Owner blnBundleOK='$$$OK
				}
				if (intProgram=1) || (intProgram=3) {
					set:arrBundleAttributes("Program")'=%this.Program1 blnBundleOK='$$$OK
				}
				if $$$ISERR(blnBundleOK) {
					set sc = $$$ERROR($$$GeneralError,$$$Text("IN01818"))  ;Bundle Attribute mismatch
				}
			}
		}
	}
	;ALPHAUP-244set ^CacheTempSCR($i(^CacheTempSCR))="objBundle="_objBundle
	if (objBundle="") && ($$$ISOK(sc)) {
		set sc = ##class(alSOH.iBundle).GetItemBundle(objItem,.arrAttributes,blnDoNotCreate,.objBundle,idLoc)
	}
	quit $get(objBundle)
]]></Implementation>
</Method>

<Method name="GetBundleOld">
<FormalSpec>*sc:%Status</FormalSpec>
<ReturnType>alSOH.dBundle</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get Bundle based on hash prepared from values in the Adjustment record
	; 
	; History:
	; 31-Jul-2008	Luke	SR15814: Change Status Formation to %Status, correctly
	; 							form messages
	; 20-May-2008	GRF		SR15694: Replace result set with direct access to policy
	; 							attributes; Lot Number error message
	; 13-May-2008	HQN		SR15699: Translated errors
	; 12-May-2008	HQN		SR15726: Lookup LotNumber and Expiration Date which
	; 							is now stored on the V1 record
	; 22-Apr-2008	HQN		SR15673: Corrected reference to iUINV
	;-------------------------------------------------------------------------------
	set strReference = %this.StockAdjustmentNumber_","_%this.Number
	set objItem      = ##class(alINV.iUINV).GetItem(%this.Item,.sc)
	
   	if $$$ISOK(sc) {
		set objPolicy = objItem.ItemPolicy
		set hashmap   = ##class(%ArrayOfDataTypes).%New()
		
		for loop=1:1:objPolicy.Attributes.Count() {
			set obj     = objPolicy.Attributes.GetAt(loop) 
			set objAttr = obj.Attribute
			
			if objAttr.Name = "Lot Number" {
				set strAttrValue = %this.LotNumber
				if strAttrValue'="" {
					do hashmap.SetAt(strAttrValue, "Lot Number")
				
				} else {                              ; "Adjustment (%1) Lot Number not set"
					set strMessage = $$$Text($listbuild("alADJ0004",strReference))
					set sc = $$$ERROR($$$GeneralError,strMessage)
				}
					
 			} elseif objAttr.Name = "Purchase Cost" {
	 			set strAttrValue = %this.UnitCost
				if strAttrValue'="" {
					do hashmap.SetAt(+strAttrValue, "Purchase Cost")
				
				} else {                              ; "Adjustment (%1) Purchase Cost not set"
					set strMessage = $$$Text($listbuild("alADJ0001",strReference))
					set sc = $$$ERROR($$$GeneralError,strMessage)
				}
			
			
 			} elseif objAttr.Name = "ReceiptNo"     {
	 			set strAttrValue = ""
				if strAttrValue="" set strAttrValue = "0"
				do hashmap.SetAt(strAttrValue, "ReceiptNo")
			
			
 			} elseif objAttr.Name = "ReceiveDate"   {
	; TODO : Adjustment processing needs to handle processing of a specific Receipt Date
	;        for update of a particular bundle/INWE record (e.g. Goods Relocation or Web
	;        Service) <GRF>
	 			set strAttrValue = %this.ReceivedDate
				if strAttrValue="" {
					set strAttrValue = +$horolog
				}
				do hashmap.SetAt(strAttrValue, "ReceiveDate")
	
			
 			} elseif objAttr.Name = "Use By Date"   {
	 			set strAttrValue = %this.ExpirationDate
				if strAttrValue'="" {
					do hashmap.SetAt(strAttrValue, "Use By Date")
				
				} else {                              ; "Adjustment (%1) Use By Date not set"
					set strMessage = $$$Text($listbuild("alADJ0002",strReference))
					set sc = $$$ERROR($$$GeneralError,strMessage)
				}
			}
		}
   	}
	if $$$ISOK(sc) {
		set objBundle = ##class(alSOH.iSOH).GetBundle(%this.Item,.hashmap)
	} else {
		set objBundle = $$$NULLOREF
	}
		
	quit objBundle
]]></Implementation>
</Method>

<Method name="UpdateBundle">
<FormalSpec>pblnStkAdj:alSYS.dt.dtBoolean,pobjBundle:alSOH.dBundle,pobjItem:alINV.dItem,pobjStore:alLOC.dStorage,pQtyOnHand:alSYS.dt.dtFloat,&amp;pQtyChange:alSYS.dt.dtFloat,pblnAllowNegative:alSYS.dt.dtBoolean=0,pblnOnlyIfAll:alSYS.dt.dtBoolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    ;-------------------------------------------------------------------------------
    ; Where possible, change bundle stock by the specified quantity.
    ; 
    ; Returns any excess quantity that could not be processed (if applicable)
    ; as a ByRef value and the status code.
    ; 
    ; Inputs:
	;	pblnStkAdj = $$$YES if adjustment is a Stocktake based one
    ;	pQtyChange			A positive quantity indicates the pQtyOnHand is to be
    ;						increased and vice versa.
    ;	pblnAllowNegative	If TRUE must be pQtyOnHand>=0 after update.
    ;	pblnOnlyIfAll		If TRUE must be (pQtyOnHand+pQtyChange)>=0 before update.
    ; 
    ; History:
	; 29-Oct-2010	PPP		SR17586: Added new parameter - is adjusment stocktake related
    ; 31-Jul-2008	Luke	SR15814: Change Status Formation to %Status 
    ; 29-Apr-2008	GRF		SR15694: Source using V2Bundles; dteReceived commented
    ;-------------------------------------------------------------------------------
	set sc = $$$OK
	set fltAdjQty = 0
	
	if (pQtyChange>0) || pblnAllowNegative {
		set fltAdjQty = pQtyChange						       ; Adjust in full
	
	} elseif pQtyOnHand>0 {
		if pblnOnlyIfAll && (pQtyOnHand+pQtyChange < 0) {      ; Can't adjust in full
			set fltAdjQty  = 0                                 ; so don't adjust
			set strMessage = $$$Text(33361) 	 
			set sc = $$$ERROR($$$GeneralError,strMessage)      ; and return status as not OK 
		; "Attention! Insufficient Items In Stock!"
			
		} else {
			set fltAdjQty = $$$Max(pQtyChange,-pQtyOnHand)	   ; Partial Adjust to 0
		}
	}
	
	if fltAdjQty {
		set pQtyChange = pQtyChange - fltAdjQty
		set sc = ..ConvertToMovement(pblnStkAdj, pobjBundle,pobjItem,pobjStore,fltAdjQty)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="ConvertToMovement">
<FormalSpec>pblnStkAdj:alSYS.dt.dtBoolean,pobjBundle:alSOH.dBundle,pobjItem:alINV.dItem,pobjStore:alLOC.dStorage,pQtyAdjust:%Float</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; Inputs:
	;	pblnStkAdj = $$$YES if adjustment is a Stocktake based one
	;	pQtyAdjust		The change quantity being applied to THIS bundle - negative
	;					values reduce the QOH and vice versa.
	; 
	; History:
	; 29-Oct-2010	PPP		SR17586: Added new parameter - Is adjustment stocktake-related?
	; 13-Nov-2009	PPP		SR17023: Update new field SubType with the Reason Code.
	; 02-Oct-2008	GRF		SR15810: objAdj not required - uses %this
	; 24-Sep-2008	GRF		Purge old commented code
	; 09-Sep-2008 	Luke	SR15897: Reverted SR15800:
	; 31-Jul-2008	Luke	SR15814: Change Status Formation to %Status 
	; 16-Jul-2008   Luke    SR15800: Add check if the Conversion has been run
	; 30-Apr-2008	GRF		SR15694: Source from Bundle
	; 22-Apr-2008	HQN		SR15673: Corrected reference to iUINV
	; 10-Apr-2008	GRF		SR15660: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	//SR17586
	if $get(pblnStkAdj) = $$$YES {
		set objMove = ##class(alADJ.dMovementStocktake).%New()
	} else {
		set objMove = ##class(alADJ.dMovement).%New()
	}
	
	set objMove.Item        = pobjItem
 	set objMove.Bundle      = pobjBundle
	
 	set objMove.FromLocn    = pobjStore.Location
 	set objMove.FromStorage = pobjStore
	set objMove.ToLocn      = $$$NULLOREF
	set objMove.ToStorage   = $$$NULLOREF
	set objMove.QtyPicked   = pQtyAdjust
	set objMove.ReasonCode  = %this.ReasonCode
	set objMove.Reference   = %this.StockAdjustmentNumber
	set objMove.LineNumber  = %this.StockAdjustmentNumber_"||"_%this.Number
	; FIXME : Other tx only store %this.Number in alSOH.dStockHistory.LineNumber - what is right situation?
	set objMove.QtyReceived = 0
	set objMove.QtyRequired = 0
	set objMove.Supply      = ""
	set objMove.Demand      = ""
	set objMove.Completed   = $$$NO
	set objMove.SubType     = %this.ReasonCode
	 
	if $$$ISOK(sc) {
		set sc = objMove.ChangeState(4)       ; alSYS.State.iStateMachine
	}   ;	Processed through (alDRP.dMovementType.Adjustment).Confirm()
	
	quit sc
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>

<Property name="BaseQuantity"/>

<Property name="Brand"/>

<Property name="Company"/>

<Property name="ExpirationDate"/>

<Property name="FREE1"/>

<Property name="FREE10"/>

<Property name="FREE2"/>

<Property name="FREE3"/>

<Property name="FREE4"/>

<Property name="FREE5"/>

<Property name="FREE6"/>

<Property name="FREE7"/>

<Property name="FREE8"/>

<Property name="FREE9"/>

<Property name="Item"/>

<Property name="LotNumber"/>

<Property name="NoPartialAdjustment"/>

<Property name="Number"/>

<Property name="Owner"/>

<Property name="Program1"/>

<Property name="Quantity"/>

<Property name="ReasonCode"/>

<Property name="ReceivedDate"/>

<Property name="StockAdjustmentNumber"/>

<Property name="StockLocation"/>

<Property name="TotalCost"/>

<Property name="TotalCostBASE"/>

<Property name="Unit"/>

<Property name="UnitCost"/>

<Property name="UnitCostBASE"/>
</Storage>
</Class>
</Export>