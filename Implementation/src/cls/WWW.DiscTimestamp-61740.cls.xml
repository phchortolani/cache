<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="WWW.DiscTimestamp">
<ClassType>datatype</ClassType>
<ClientDataType>TIMESTAMP</ClientDataType>
<IncludeGenerator>%occInclude,%occUtility</IncludeGenerator>
<OdbcType>TIMESTAMP</OdbcType>
<ProcedureBlock>0</ProcedureBlock>
<SqlCategory>TIMESTAMP</SqlCategory>

<Parameter name="DISPLAYLIST">
<Description><![CDATA[
Used for enumerated (multiple-choice) attributes.
Used in conjunction with the <a href="#VALUELIST">VALUELIST</a> parameter for enumerated
(multiple-choice) attributes. <var>DISPLAYLIST</var>, if not null,
represents the display values for the attribute corresponding with
the logical values listed in <var>VALUELIST</var>.
<p>The display values are returned by the <a href="#LogicalToDisplay">LogicalToDisplay</a> method.]]></Description>
</Parameter>

<Parameter name="XSDTYPE">
<Description><![CDATA[
Declares the XSD type used when projecting XML Schemas.]]></Description>
<Default>dateTime</Default>
</Parameter>


<Method name="XSDToLogical">
<Description><![CDATA[
Converts the SOAP encoded input dateTime value into a Cache %TimeStamp value.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[
	If ($$$defClassKeyGet(%class,$$$cCLASSclasstype)=$$$cCLASSCLASSTYPEDATATYPE) || $$$comMemberKeyGet(%class,$$$cCLASSparameter,"XMLENABLED",$$$cPARAMdefault) {
		$$$GENERATE(" New len,dt")
		$$$GENERATE(" Set len=$length(%val)")
		$$$GENERATE(" If $extract(%val,len)=""Z"" {")
		$$$GENERATE(" 	Set %val=$extract(%val,1,len-1)")
		$$$GENERATE(" } ElseIf $case($extract(%val,len-5),""+"":1,""-"":1,:0) {")
		$$$GENERATE(" 	Set %val=$extract(%val,1,len-6)")
		$$$GENERATE(" }")
		$$$GENERATE(" If $get(%val)="""" Quit """"")
		$$$GENERATE(" If $length(%val,""T"")'=2 Quit """"")
		$$$GENERATE(" Set dt=$zdatetimeh($translate(%val,""T"","" ""),3)")
		//$$$GENERATE(" If $zdatetimeh(dt,3,1,,,,,,,"""")="""" Quit """"")
		$$$GENERATE(" Quit dt")
	} Else {
		Set %code=0 
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="LogicalToXSD">
<Description><![CDATA[
Converts the Cache %TimeStamp value to the canonical SOAP encoded value.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%TimeStamp</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If ($$$defClassKeyGet(%class,$$$cCLASSclasstype)=$$$cCLASSCLASSTYPEDATATYPE) || $$$comMemberKeyGet(%class,$$$cCLASSparameter,"XMLENABLED",$$$cPARAMdefault) {
		Set %codemode=$$$cMETHCODEMODEEXPRESSION
		Set %code="$translate($zdt(%val,3),"" "",""T"")"
	} Else {
		Set %code=0 
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OdbcToLogical">
<Description><![CDATA[
Converts <var>%val</var>, which represents either a Timestamp in ODBC format,
or a Date in ODBC format, into a logical Timestamp value.
<p>Returns the logical Timestamp value of the ODBC Timestamp string <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[$s(%val="":"",$zdth(%val,3,,,,,,,,"")'="":$zdt($zdth(%val,3),3,,$l($p(%val,".",2))),$zdth(%val,-1,,,,,,,,"")'="":$zdt($zdth(%val,-1),3,,$l($p(%val,".",2))),1:%val)
]]></Implementation>
</Method>

<Method name="DisplayToLogical">
<Description><![CDATA[
Converts the input value <var>%val</var>, which represents a timestamp value,
to <code>YYYY-MM-DD HH:MM:SS</code> format.
<p>Returns the value of the input string <var>%val</var> as a timestamp
value (<code>YYYY-MM-DD HH:MM:SS</code> format).]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>WWW.DiscTimestamp</ReturnType>
<Implementation><![CDATA[
 n i,len,sep
 s %code=0
 s %codemode=$$$cMETHCODEMODEEXPRESSION
 s %code="$zdth(%val,3)"
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="IsValidDT">
<Description><![CDATA[
Tests if the logical value <var>%val</var>, which represents a timestamp
value in <code>YYYY-MM-DD HH:MM:SS.nnnnnnnn</code> format, is valid.
<p>Returns true (1) if the value <var>%val</var> is valid, otherwise false (0).]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%TimeStamp</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 n sep,retexp
 s %code=0
 $$$GENERATE(" s %tms=$p(%val,"","",2)")
 s retexp="($isvalidnum($p(%val,"","",1)))&&(%val<=2980013)&&(%val>=0)&&(%tms>=0)&&(%tms<86400)"
 $$$GENERATE(" q "_retexp)
 QUIT $$$OK
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
// 09-Feb-2009	HQN	Handle exception cases where @nm inserts an INWE incrementor date

</Content>
</UDLText>

<UDLText name="T">
<Content>
// 					TODO: sets value to epoch if stored val is null, is that desired?

</Content>
</UDLText>


<Method name="LogicalToDisplay">
<Description><![CDATA[
Converts the value of <var>%val</var>, which is in logical format <code>YYYY-MM-DD HH:MM:SS.nnnnnnnnn</code>,
into a display string.
The formatting is based on the value of the FORMAT parameter.
<p>Returns the formatted value of <var>%val</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>%val:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 n i,len,sep
 s %code=0
 s %codemode=$$$cMETHCODEMODEEXPRESSION
 s %code="$zdt($piece(%val,""."",1),3,,,,,,,""error"")"
 QUIT $$$OK
]]></Implementation>
</Method>

<Method name="Normalize">
<Description><![CDATA[
Transorms integer values into timestamp.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>%val:WWW.DiscTimestamp</FormalSpec>
<ReturnType>WWW.DiscTimestamp</ReturnType>
<Implementation><![CDATA[$s(%val="":"",$length(%val,",")=1:%val_",0",1:%val)
]]></Implementation>
</Method>
</Class>
</Export>