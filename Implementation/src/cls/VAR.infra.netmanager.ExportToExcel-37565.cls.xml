<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.netmanager.ExportToExcel">
<ClassType/>
<Import>VAR.infra.util</Import>
<IncludeCode>VARLog</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent</Super>

<Property name="LineCount">
<Description><![CDATA[
Line Counter]]></Description>
<Type>%Integer</Type>
</Property>


<Property name="idSession">
<Description><![CDATA[
Session ID]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="idSession"/>

<Parameter name="MAXLEN" value="20"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="dataToExport">
<Description><![CDATA[
Data to be exported]]></Description>
<Type>ExportToExcelData</Type>
</Property>

<Index name="IDKEY">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>idSession,LineCount</Properties>
<Unique>1</Unique>
</Index>


<Method name="Insert">
<Description><![CDATA[
Insert the provided string into the object with the next automated generated key.
Always beeing the last key + 1 and starting with zero.]]></Description>
<FormalSpec>pobjData:%String,pobjTitle:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set lastCount = ..Last()
	
	if (lastCount '= "") {
		set objChild	= $zobjclassmethod(##this.%ClassName(1),"%New")				
		if ($isObject(objChild)) {
			set objChild.idSession	= ..idSession
			set objChild.LineCount  = lastCount+1
			set sc = objChild.SetData(pobjData)
			if $$$ISOK(sc) {
				set sc = objChild.%Save()
				quit sc
			}
		}
	}
	else {
		//First title
		if ((pobjData'="") && (pobjTitle = "")) {
			set sc = ..SetTitle(pobjData)
			set ..LineCount = 0
		}
	}
	
	if $$$ISOK(sc) set sc = ..%Save()
	
	quit sc
]]></Implementation>
</Method>

<Method name="Next">
<Final>1</Final>
<CodeMode>expression</CodeMode>
<FormalSpec>key:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$order(dataToExport.LineCount(key))
]]></Implementation>
</Method>

<Method name="Last">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set strKey = ""
	set curSession = ..idSession
	
	&sql(select top 1 LineCount 
		 into :strKey  
		 from VAR_infra_netmanager.ExportToExcel
		 where idSession = :curSession
		 order by LineCount desc
	)
	
	quit strKey
]]></Implementation>
</Method>

<Method name="SetTitle">
<FormalSpec>pTitle:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = ..dataToExport.TitleSet(pTitle)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTitle">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..dataToExport.TitleGet()
]]></Implementation>
</Method>

<Method name="SetData">
<FormalSpec>pobjData:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set sc = ..dataToExport.DataSet(pobjData)
	
	quit sc
]]></Implementation>
</Method>

<Method name="GetData">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..dataToExport.DataGet()
]]></Implementation>
</Method>

<Method name="GetLineCount">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..LineCountGet()
]]></Implementation>
</Method>

<Method name="ExportExcel">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidSession:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#define StartScript(%str)		do StartScript^COMUtiljavascript(%str)
	#define EndScript(%str)			do EndScript^COMUtiljavascript()
	#define EnumDisplayTypeExcel	0
	set $ztrap = "ExportExcelException"

	$$$StartScript()
		do WindowPrint^COMViewPrint($$$EnumDisplayTypeExcel,"zOutput^VAR.infra.netmanager.ExportToExcel.1("""_pidSession_""",.objOutput)")
	$$$EndScript()
	
ExportExcelException

	set strError = $zerror
	set $zerror = ""
	
	$$$VARLOGERROR(strError)
	
	goto ExportExcelFinally
	
ExportExcelFinally
	 
	quit $$$OK
]]></Implementation>
</Method>

<Method name="Output">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidSession:%String,&amp;pObjOutput</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set arrData = ""
	set objResultSet = ##class(%Library.ResultSet).%New("VAR.infra.netmanager.ExportToExcel:GetLinesSession")
	Set sc = objResultSet.Execute(pidSession)
	While objResultSet.Next(.sc) {
		set id = objResultSet.Data("ID")
		set objExcel = ##class(VAR.infra.netmanager.ExportToExcel).%OpenId(id)
		if (objExcel.LineCount > 0) {
			set arrData(objExcel.LineCount) = objExcel.dataToExport.Data
		}
		else {
			do pObjOutput.WriteLine("<tr>")
			do pObjOutput.WriteLine(..OutputLine(objExcel.dataToExport.Title," class='header'",.pObjOutput)_"</tr>")
		}
	}
	do ..OutputData(.arrData,.pObjOutput)
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="OutputData">
<ClassMethod>1</ClassMethod>
<FormalSpec>parrData:%String,&amp;pObjOutput</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set idData=""
	for {
		set idData=$order(parrData(idData))
		quit:idData=""
		
		set strLine = ..OutputLine(parrData(idData),"",.pObjOutput)
		do pObjOutput.WriteLine("<tr>"_strLine_"</tr>")
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="OutputLine">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrLine:%String,pstrFormat:%String,&amp;pObjOutput</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set strLine=""
	set Y = "~"
	for intCell=1:1:$length(pstrLine,Y) {
		set strPiece=$piece(pstrLine,Y,intCell)
		if $extract(strPiece,1,3)="<p>" set strPiece=$piece(strPiece,"<p>",2,9999999)
		set strLine=strLine_"<td"_pstrFormat_">"_strPiece_"</td>"
	}
	set strLine=##class(Strings).FullReplace(strLine,"<html dir=´ltr´>","")
	set strLine=##class(Strings).FullReplace(strLine,"<html dir=""ltr"">","")
	set strLine=##class(Strings).FullReplace(strLine,"<html dir='ltr'>","")
	set strLine=##class(Strings).FullReplace(strLine,"<title>","")
	set strLine=##class(Strings).FullReplace(strLine,"</title>","")
	set strLine=##class(Strings).FullReplace(strLine,"<head>","")
	set strLine=##class(Strings).FullReplace(strLine,"</head>","")
	set strLine=##class(Strings).FullReplace(strLine,"</html>","")
	set strLine=##class(Strings).FullReplace(strLine,"</body>","")
	set strLine=##class(Strings).FullReplace(strLine,"</p>","<br>")
	
	quit strLine
]]></Implementation>
</Method>
<Query name="GetLinesSession">
<Type>%SQLQuery</Type>
<FormalSpec>pidSession:%String</FormalSpec>
<SqlQuery>  SELECT DISTINCT ID FROM VAR_infra_netmanager.ExportToExcel
  WHERE idSession = :pidSession
  ORDER BY LineCount</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>


<Method name="Finalize">
<Description><![CDATA[
Kill the record after use it.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pidSession:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set objResultSet = ##class(%Library.ResultSet).%New("VAR.infra.netmanager.ExportToExcel:GetLinesSession")
	Set sc = objResultSet.Execute(pidSession)
	While objResultSet.Next(.sc) {
		set id = objResultSet.Data("ID")
		set sc = ..%DeleteId(id)
		quit:$$$ISERR(sc)
	}
	quit sc
]]></Implementation>
</Method>
<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^VAR.infra.neC236.ExportToExcelD</DataLocation>
<DefaultData>ExportToExcelDefaultData</DefaultData>
<IdLocation>^VAR.infra.neC236.ExportToExcelD</IdLocation>
<IndexLocation>^VAR.infra.neC236.ExportToExcelI</IndexLocation>
<StreamLocation>^VAR.infra.neC236.ExportToExcelS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ExportToExcelDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>dataToExport</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>