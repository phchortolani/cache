<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsDTLPane">
<Description><![CDATA[
An AutoPage pane that displays an SVG DTL Diagram.]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Util.Pane</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Method name="DrawHEAD">
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// override table style
	&html<
<style>
TABLE.LayoutMain TD.LayoutContentCol {
	background: #EEFFFF;
	padding-left: 0px;
	vertical-align: top;
}
</style>>

	&html<
	
<!-- detect svg -->
<script language="JavaScript" src="svgcheck.js"></script>
<script language="VBScript" src="svgcheck.vbs"></script>
	
<script language="javascript">

// external API

function document_setTarget(name, type, proplist) {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.setTarget(name,type, proplist);
}

function document_setSource(name, type, proplist) {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.setSource(name,type, proplist);
}

function document_setTransform(state)
{
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.setTransform(state);
}

function document_getTransform()
{
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.getTransform();
}

function document_delete() {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('deleteItem',null);
}
function document_cut() {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('cutItem',null);
}
function document_copy() {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('copyItem',null);
}
function document_undo() {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('undo');
}
function document_canUndo() {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('canUndo');
}
function document_isModified() {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('isModified');
}
function document_redo() {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('redo');
}
function document_paste() {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('pasteItem',null);
}
function document_getZoom() {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('getZoom');
}
function document_setZoom(zoom) {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('setZoom',zoom);
}
function document_setReadOnly(ro) {
	var loadingDiv = self.document.getElementById("loading");
	loadingDiv.api.invokeOperation('setReadOnly',ro);
}

var extCounter = 0;
function raiseEvent(type,data) {
	self.document.title = type + ":" + extCounter + ":" + data;
	extCounter++;
	
	switch (type) {
	case 'actionSelected':
		break;
	case 'propertySelected':
	case 'nothingSelected':
	case 'actionSelected':
		break;
	case 'transformChanged':
		updateEditor();
		break;
	}
}

// -------------------------------------------------------------------
// internal functions

// load latest document into editor in info pane
function updateEditor()
{
	// update xml editor !!!
	var xml = self.document.getElementById('results');
	if (xml && self.top.Info) {
		self.top.Info.setTransform(xml.innerHTML);
	}
}

// called by editor to update the DTL editor
function updateTransform(state)
{
	var xml = self.document.getElementById('transform');
	if (xml) {
		xml.innerHTML = state;

		var loadingDiv = self.document.getElementById("loading");
		loadingDiv.api.setActions();
	}
}

</script>
	>
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawBODY">
<Description><![CDATA[
Draw the BODY of the detail pane]]></Description>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// get page ID values
	Merge tID = pInstance.IDValues
	Set dtlcls = $G(tID(1))
	Set tTransform = ""
	
	&html<	
		<!-- detect svg -->
		<script language="JavaScript">
		checkAndGetSVGViewer();
		</script>
	>

	If (dtlcls '= "") {
		// try to open the given DTL diagram
		&html<<!--#(dtlcls)#-->>

		Set tSC = ##class(Ens.DTL.UI.DTLDocument).GetTransform(.tTransform, dtlcls)
		If ($$$ISOK(tSC) && $IsObject(tTransform)) {
		}
		Else {
			Set msg = "There is no DTL information available for class:"
			
			&html<&nbsp;#(msg)#: #(dtlcls)#>
			Quit $$$OK
		}
	}

	// Get definition of transform
	Write "<xml id=""initTransform"" style=""display:none;"">"
	If ($IsObject(tTransform)) {
		Set tStream = ##class(%GlobalCharacterStream).%New()
		Set tSC = tTransform.GenerateXML(tStream)
		If $$$ISOK(tSC) {
			Do tStream.OutputToDevice()
		}
	}
	&html<</xml>>

	&html<<xml id="results" style="display:none;"></xml>>

	// loading message
	&html<<div id='loading' style='background: white; color: blue; font-size: 14pt; font-family: courier new'>Generating DTL Diagram...</div>>

	&html<<embed id="SVGEmbed" name="SVGEmbed" type="image/svg-xml" src="CSPX.EnsDTLSVG.cls" height="2000" width="2000">>
	
	// Get contents of source and target properties
	// Get contents of source and target properties
	If ($IsObject(tTransform)) {
		// get list of properties
		&html<<div id="targetList" style="display:none;">>
		Do ##class(EnsDTLEditor).WritePropList(tTransform.TargetClass,"target",tTransform.TargetDocType)
		&html<</div>>
		
		&html<<div id="sourceList" style="display:none;">>
		Do ##class(EnsDTLEditor).WritePropList(tTransform.SourceClass,"source",tTransform.SourceDocType)
		&html<</div>>
	}
	Else {
		&html<<div id="targetList" style="display:none;"></div>>
		&html<<div id="sourceList" style="display:none;"></div>>
	}

	&html<<script language="javascript">
function initDTL()
{
	document_setTarget("#(tTransform.TargetClass)#","#(tTransform.TargetDocType)#",self.document.getElementById('targetList').innerText);
	document_setSource("#(tTransform.SourceClass)#","#(tTransform.SourceDocType)#",self.document.getElementById('sourceList').innerText);

	var xml = self.document.getElementById('initTransform');
	if (xml) {
		document_setTransform(xml.innerHTML);
	}
}	
	</script>
	>
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>