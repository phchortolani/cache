<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="SourceControl.data.global.NetManagerClass">
<ClassType/>
<Import>SourceControl.control,SourceControl.data</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>GlobalBase</Super>

<Method name="ExportAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set strStatus = $$$OK

	set nErrors = 0
	set nExported = 0

	// Get all the forms
	set id = ""
	for {
		set id = $order(^WWW001(0, id))
		quit:(id = "")

		set strStatus = ..Export(id, 2)
		if ($$$ISERR(strStatus)) {
			set nErrors = nErrors + 1
		}
		else {
			set nExported = nExported + 1
		}
	}

	write !, "Number of exported files: "_nExported
	write !, "Number of errors during export: "_nErrors

	quit nErrors
]]></Implementation>
</Method>

<Method name="Export">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,printMessage:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK

	if ($get(id) = "") {
		quit ##class(Errors).MakeAndPrintErrorStatus("Empty class name! "_
			"Skipping it.", printMessage)
	}

	if ('$data(^WWW001(0, id))) {
		quit ##class(Errors).MakeAndPrintErrorStatus("Net Manager class "_
			"definition not found: '"_id_"'. Skipping it.", printMessage)
	}

	set subs = $listbuild("0,"_##class(Strings).QuoteString(id))

	set fileName = ##class(DirectoryFile).ConcatPath(
		##class(Config).GetExternalNMClassDir(),
		##class(FileControl).GetSafeFilename(id)_"."_
		##class(FileType).%GetParameter("TXTNMCLASS"))

	// Empty ignored list
	set ignoredList = ""

	set sc = ..ExportGlobalNode(fileName, id, ..GetGlobals(),
		subs, ignoredList, printMessage=2, .ignored, 0)

	if ($$$ISOK(sc) && ('ignored)) {
		if (printMessage) {
			write !, "Class '"_id_"' successfully exported as "_
				"'"_fileName_"'"
		}	

		// Update the timstamp, so that the source control can use it to
		// prevent the same file from being loaded again.
		do ##class(FileControl).UpdateTimeStamp(fileName)
	}

	if ($$$ISOK(sc)) {
		set fileName = ##class(DirectoryFile).ConcatPath(
			##class(Config).GetExternalNMClassDir(),
			##class(FileControl).GetSafeFilename(id)_"."_
			##class(FileType).%GetParameter("TXTCUSTOMNMCLASS"))

		// Empty ignored list
		set ignoredList = ""

		set sc = ..ExportGlobalNode(fileName, id, ..GetCustomGlobals(),
			subs, ignoredList, printMessage=2, .ignored, 1)

		if ($$$ISOK(sc) && ('ignored)) {
			if (printMessage) {
				write !, "Class '"_id_"' successfully exported as "_
					"'"_fileName_"'"
			}	

			// Update the timstamp, so that the source control can use it to
			// prevent the same file from being loaded again.
			do ##class(FileControl).UpdateTimeStamp(fileName)
		}
	}

	quit sc
]]></Implementation>
</Method>

<Method name="GetGlobals">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit $listbuild("^WWW001", "^WWW001B", "^WWW0011", "^WWW0013",
		"^WWW0021", "^WWW0022", "^WWW002", "^WWW003", "^WWW0031",
		"^WWW0032", "^WWW001Hook", "^WWW003Calc", "^WWW003CalcLang","^COMConst")
]]></Implementation>
</Method>

<Method name="GetCustomGlobals">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $listbuild("^WWW002D", "^WWW003D", "^WWW001VARHooks")
]]></Implementation>
</Method>

<Method name="GenerateArrKeys">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,&amp;indexTree</FormalSpec>
<Implementation><![CDATA[
	set iKey = $order(^WWW002(0, id, ""))
	set iData = $order(^WWW003(0, id, ""))

	for {
		if ($length(iKey) = 0) quit

		set multipleKeys = $piece(^WWW002(0, id, iKey, 1), "~", 6)
		if (multipleKeys '= "") {
			for i = 1:1:$length(multipleKeys, ",") {
				set key = $piece(multipleKeys, ",", i)

				set indexId = $piece(key, ".", 1)
				set indexSeq = $piece(key, ".", 2)
				set indexData = "key,"_iKey
				if ($length(indexSeq) = 0) {
					set indexTree(indexId) = indexData
				}
				else {
					set indexTree(indexId, indexSeq) = indexData
				}
				
			}
		}

		set iKey = $order(^WWW002(0, id, iKey))
	}

	for {
		if ($length(iData) = 0) quit

		set multipleKeys = $piece(^WWW003(0, id, iData, 1), "~", 6)
		if (multipleKeys '= "") {
			for i = 1:1:$length(multipleKeys, ",") {
				set key = $piece(multipleKeys, ",", i)

				set indexId = $piece(key, ".", 1)
				set indexSeq = $piece(key, ".", 2)
				set indexData = "dat,"_iData
				if ($length(indexSeq) = 0) {
					set indexTree(indexId) = indexData
				}
				else {
					set indexTree(indexId, indexSeq) = indexData
				}
			}
		}

		set iData = $order(^WWW003(0, id, iData))
	}
	quit
]]></Implementation>
</Method>

<Method name="GenerateArrPropertyName">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,&amp;indexTree</FormalSpec>
<Implementation><![CDATA[
	set iData = $order(^WWW003(0, id, ""))

	for {
		if ($length(iData) = 0) quit

		set indexTree(id, iData) = $piece(^WWW003(0, id, iData, 1), "~", 25)
		set iData = $order(^WWW003(0, id, iData))
	}

	quit
]]></Implementation>
</Method>

<Method name="GetIdModule">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $$Module^COMConst(id)
]]></Implementation>
</Method>

<Method name="IsIndexDirty">
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#define COMIndexIndexDirty(%obj) $piece(%obj,"~",8)

	set objCOMIndex = $get(^COMIndex(0, className, 1))
	quit (+$$$COMIndexIndexDirty(objCOMIndex))
]]></Implementation>
</Method>

<Method name="CompareArrKeys">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;Tree1,&amp;Tree2</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set saida = 1
	set node1keyId = $order(Tree1(""))
	set node2keyId = $order(Tree2(""))
	if (($data(Tree1) = 0) ||
		($data(Tree2) = 0)) {
		quit (($data(Tree1) = 0) && ($data(Tree2) = 0))
	}
	
	for {
		if (($length(node1keyId) = 0) && ($length(node2keyId) = 0)) quit

		// compare key
		if (node1keyId '= node2keyId) {
			set saida = 0
			quit
		}

		// compare data
		if ($get(Tree1(node1keyId)) '= $get(Tree2(node2keyId))) {
			set saida = 0
			quit
		}

		set node1SeqId = $order(Tree1(node1keyId, ""))
		set node2SeqId = $order(Tree2(node2keyId, ""))
		for {
			if (($length(node1SeqId) = 0) && ($length(node2SeqId) = 0)) quit

			// compare keys
			if (node1SeqId '= node2SeqId) {
				set saida = 0
				quit
			}

			// compare data
			if ($get(Tree1(node1keyId, node1SeqId)) '=
				$get(Tree2(node2keyId, node2SeqId))) {
				set saida = 0
				quit
			}

			if ($length(node1SeqId) '= 0) set node1SeqId = $order(Tree1(node1keyId, node1SeqId))
			if ($length(node2SeqId) '= 0) set node2SeqId = $order(Tree2(node2keyId, node2SeqId))
		}

		if ('saida) quit
		if ($length(node1keyId) '= 0) set node1keyId = $order(Tree1(node1keyId))
		if ($length(node2keyId) '= 0) set node2keyId = $order(Tree1(node2keyId))
	}

	quit saida
]]></Implementation>
</Method>
</Class>
</Export>