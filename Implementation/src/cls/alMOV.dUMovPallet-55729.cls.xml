<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alMOV.dUMovPallet">
<Description><![CDATA[
The Movement By Pallet grid lines]]></Description>
<ClassType>persistent</ClassType>
<IncludeCode>INConst,COMSYS</IncludeCode>
<Super>User.INMOVPallet</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; History:
; 21-Apr-2011	GRF		SR17715: Created from alMOV.dUMovLine
/---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="objPallet">
<Type>alLOC.dUStorage</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00764"/>
</Property>


<Property name="objToStorage">
<Type>alLOC.dUStorage</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00535"/>
</Property>


<Property name="Movement">
<Description><![CDATA[
Pseudo relation to Implement better object relations under a @nM enviroment<br>
The Transient to represent the parent movement  ]]></Description>
<Type>alMOV.dUMov</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00533"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="%OnBeforeSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called before 
any data is written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.
<p>Makes sure edited transient objects have their values saved</p>]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 21-Apr-2011	GRF		SR17715: Created from alMOV.dUMovLine
	;-------------------------------------------------------------------------------
	
	if (%this.objToStorage'=$$$NULLOREF) && (%this.objToStorage.%IsModified()) {
		set i%ToStorage = %this.objToStorage.StockLocation	
	}
	
	if (%this.objPallet'=$$$NULLOREF) && (%this.objPallet.%IsModified()) {
		set i%Pallet = %this.objPallet.StockLocation	
	}
	set sc = ##Super(insert)
	quit sc
]]></Implementation>
</Method>

<Method name="IsFirmable">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 21-Apr-2011	GRF		SR17715: Created from alMOV.dUMovLine
	;-------------------------------------------------------------------------------
	set sc = $$$OK 
	
	if i%Pallet=i%ToStorage {
		set strMessage = $$$Text("IN00855")    ; "Can not move Item to the same storage"
		set sc = $$$ERROR($$$GeneralError,strMessage)
 	}
	quit sc
]]></Implementation>
</Method>

<Method name="%OnOpen">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Open</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being opened.

<P>If this method returns an error then the object will not be opened.</P>
<P>Load all lines for this record, sets modified to $$$NO</br>
Workaround for pseudo relations, this would be automated for true Relations
</P>]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 21-Apr-2011	GRF		SR17715: Created from alMOV.dUMovLine
	;-------------------------------------------------------------------------------
	quit $$$OK
]]></Implementation>
</Method>

<Method name="PalletSet">
<Description><![CDATA[
Pseudo relation. <br>
This is an over-ride of the Setter of the Pallet of type <code>alLOC.dUStorage</code> <p>
Set the Underlying @nM Pallet (which is a string) and creates a Transient property of 
type <code>alLOC.dUStorage</code> <p>

It method is automatically called when you set the <code>Pallet</code> with either a 
string or a <code>alLOC.dUStorage</code> object<br>
 Params:<br>
 
 Returns: <br>
 	<class>%Library.Status</class>]]></Description>
<FormalSpec>objStorage</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 21-Apr-2011	GRF		SR17715: Created from alMOV.dUMovLine
	;-------------------------------------------------------------------------------
	if $IsObject(objStorage) && objStorage.%Extends("alLOC.dUStorage") {
			set i%objPallet = objStorage
			set i%Pallet    = objStorage.StockLocation
			
	} elseif $IsObject(objStorage) && objStorage.%Extends("alLOC.dStorage") {
			set i%objPallet = ##class(alLOC.dUStorage).%OpenId("0||"_objStorage.Location.Code_"||"_objStorage.Code)
			set i%Pallet    = i%objPallet.StockLocation
			
	} else {
		set i%Pallet = objStorage
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="PalletGet">
<Description><![CDATA[
Pseudo relation. <br>
Creates a <class>alLOC.dUStorage</class> based on the <code>alMOV.dUMov</code> Location and
this lines storage. <br>

It method is automatically called when you access the <code>Pallet</code><br>
 Params:<br>
 
 Returns: <br>
 	<class>alLOC.dUStorage</class>]]></Description>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 21-Apr-2011	GRF		SR17715: Created from alMOV.dUMovLine
	;-------------------------------------------------------------------------------
	if (i%Pallet '= $$$NULLOREF) && (i%objPallet = $$$NULLOREF) && (%this.Movement '= $$$NULLOREF) {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Movement.Location.Location_"||"_i%Pallet)
		if (objStorage '= $$$NULLOREF) {
			set i%objPallet = objStorage
		}
	}
	quit i%objPallet
]]></Implementation>
</Method>

<Method name="ToStorageSet">
<Description><![CDATA[
Pseudo relation. <br>
This is an over-ride of the Setter of the ToStorage of type <code>alLOC.dUStorage</code> <p>
Set the Underlying @nM ToStorage (which is a string) and creates a Transient property of 
type <code>alLOC.dUStorage</code> <p>

It method is automatically called when you set the <code>ToStorage</code> with either a 
string or a <code>alLOC.dUStorage</code> object<br>
 Params:<br>
 
 Returns: <br>
 	<class>%Library.Status</class>]]></Description>
<FormalSpec>objStorage</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 21-Apr-2011	GRF		SR17715: Copied
	;-------------------------------------------------------------------------------

	set sc = $$$OK
	if $IsObject(objStorage) && objStorage.%Extends("alLOC.dUStorage") {
		set i%objToStorage = objStorage
		set i%ToStorage    = objStorage.StockLocation
		do i%objToStorage.%SetModified($$$NO)
		
	} else {
		set i%ToStorage = objStorage
	}
	quit sc
]]></Implementation>
</Method>

<Method name="ToStorageGet">
<Description><![CDATA[
Pseudo relation. <br>
Creates a <class>alLOC.dUStorage</class> based on the <code>alMOV.dUMov</code> Location and
this lines storage. <br>

It method is automatically called when you access the <code>ToStorage</code><br>
 Params:<br>
 
 Returns: <br>
 	<class>alLOC.dUStorage</class>]]></Description>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 21-Apr-2011	GRF		SR17715: Copied
	;-------------------------------------------------------------------------------
	
	if (i%ToStorage '= $$$NULLOREF) && (i%objToStorage = $$$NULLOREF) && (%this.Movement '= $$$NULLOREF) {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Movement.Location.Location_"||"_i%ToStorage)
		if (objStorage '= $$$NULLOREF) {
			set i%objToStorage = objStorage
		}
	}
	
	quit i%objToStorage
]]></Implementation>
</Method>

<Method name="CreateMoveLine">
<ClassMethod>1</ClassMethod>
</Method>


<Method name="MovementGet">
<Description><![CDATA[
Pseudo relation. <br>
This creates the relationship between this , the line , and the header <p>
Creates a <class>alMOV.dUMov</class> based on the <code>MovementNo</code> of this object.<p>
It method is automatically called when you access the <code>Movement</code><br>
 Params:<br>
 
 Returns: <br>
 	<class>alLOC.dUStorage</class>]]></Description>
<ReturnType>alMOV.dUMov</ReturnType>
<Implementation><![CDATA[
	if (i%Movement = $$$NULLOREF) && (%this.MovementNo '= $$$NULLOREF) {
		set i%Movement = ##class(alMOV.dUMov).%OpenId("0||"_%this.MovementNo)
	}
	quit i%Movement
]]></Implementation>
</Method>

<Method name="CreateMovement">
<Description><![CDATA[
Creates a <class>alDRP.dMovement</class> based on the items on the Pallet. <br>
this is then passed to <class>alSOH.iSOH</class> ValidateMovement 
and <class>alSOH.iSOH</class> ConfirmMovement which completes the movement process 
<p>
 Params:<br>
 
 Returns: <br>
 	<class>%Status</class>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 10-Apr-2013	SCR		SESPE-460: Added Record Locking	
	; 21-Apr-2011	GRF		SR17715: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK

	set objLocn     = ##class(alLOC.iLOC).GetLocation(%this.Movement.Location.Location)
	set objPalStore = ##class(alLOC.iLOC).GetStorage(%this.Movement.Location.Location,%this.Pallet.StockLocation)
	set objPhysical = ##class(alLOC.iLOC).GetStorage(%this.Movement.Location.Location,%this.ToStorage.StockLocation)

	/* Should this simply be... ?
	set objLocn     = %this.Movement.Location
	set objPalStore = %this.objPallet
	set objPhysical = %this.objToStorage
	*/
	
	set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetStorageBundles")
	if objResultSet.Execute(%this.Movement.Location.Location_"||"_%this.Pallet.StockLocation) {
		set idLine = 0
		while objResultSet.Next() {
			set objStock = ##class(alSOH.dBundleStock).%OpenId(objResultSet.Data("ID"))
		
			; SESPE-460 vvvv
			set idItem = objStock.Item
			lock +^alSOHProcessing(idItem):2
			if '$test {
				set strMessage = $$$Text($listbuild("IN00853",idItem))
				set sc = $$$ERROR($$$GeneralError,strMessage)  
				;	"Can not acquire a lock for Item: (%1) please try again"
				quit
			}
			lock -^alSOHProcessing(idItem)
			; SESPE-460 ^^^^
			
			set objMove             = ##class(alMOV.dMovementByPallet).%New()
			set objMove.Item        = objStock.Item	
			set objMove.FromLocn    = objLocn
			set objMove.ToLocn      = objLocn
			set objMove.FromStorage = objPalStore
			set objMove.ToStorage   = objPhysical   ; New Physical Storage
			set objMove.Bundle      = objStock.Bundle
			set objMove.Reference   = %this.MovementNo   //rather than %this.Movement.StockMovementNumber
			set objMove.LineNumber  = %this.Line
			set objMove.QtyPicked   = 0
			set objMove.QtyReceived = objStock.QtyOnHand
			set objMove.QtyRequired = 0
			set objMove.Completed   = $$$NO
			set sc = objMove.ChangeState(4)
			
			quit:$$$ISERR(sc)
		}
	}
	// Save an audit record of the old Physical Storage in the INMOVPallet record
	// and then update the INLP record to the new Physical Storage.
	if $$$ISOK(sc) {
		set %this.OldPhysicalStorage = objPalStore.Physical.Code
		set sc = %this.%Save()
	}
	
	if $$$ISOK(sc) {
		set strStatus = $$SetPhysicalStorage^INLP(objLocn.Code,objPalStore.Code,objPhysical.Code)
		if $$$ISERR(strStatus) set sc = $$$ERROR($$$GeneralError,strStatus)
		
		set objPalStore.Physical = 	objPhysical
		set sc = objPalStore.%Save()
		
	}
	
	quit sc
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
/// &lt;p&gt;Saves the record utilising &lt;code&gt;$$Save^COMUtils&lt;/code&gt;
/// Relies on INConst.inc macros to set the pieces of the record&lt;/br&gt;
/// &lt;b&gt;NOTE: Should be code generated&lt;/b&gt;
/// &lt;/p&gt;
/// &lt;p&gt;Returns a &lt;class&gt;%Status&lt;/class&gt; value indicating success or failure.&lt;/p&gt;
Method ANMSave() As %Status
{
	;-------------------------------------------------------------------------------
	; V1 Save
	; 
	; History:
	; 21-Apr-2011	GRF		SR17715: Copied
	;-------------------------------------------------------------------------------
 	set sc = $$$OK     //Should %this.Movement.StockMovementNumber simply be %this.MovementNo ?
	set ANMKey    = %this.MovementNo_",&quot;_%this.Line 
	set ANMMovObj = $get(^INMOVPallet(0,%this.MovementNo,%this.Line,1))
	
	set $$$INMOVPalletPallet(ANMMovLine)    = i%Pallet
	set $$$INMOVPalletToStorage(ANMMovLine) = i%ToStorage 
	
	set strStatus = $$Save^COMUtils("INMOVPallet",ANMKey,ANMMovObj,$$$YES)
	if $$$ISERR(strStatus){
		set strMessage = $$DecodeError^COMUtilError(strStatus)
		set sc = $$$ERROR($$$GeneralError,strMessage)
	}
  	quit sc
}
*/
</Content>
</UDLText>

<Query name="GetMovPallets">
<Type>%SQLQuery</Type>
<FormalSpec>MovementNo:%String</FormalSpec>
<SqlQuery>	SELECT %ID FROM dUMovPallet WHERE (MovementNo = :MovementNo)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>