<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.SQLQueryPane">
<Description><![CDATA[
(internal)
This *was* a deprecated class used by early versions of Ensemble;
Now it is a placeholder for a % class that exists in v5.1 of CACHELIB.]]></Description>
<ClassType/>
<IncludeCode>Ensemble</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Util.TablePane</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Parameter name="SHOWSTATISTICS">
<Description><![CDATA[
Should this page display timing stats]]></Description>
<Default>0</Default>
</Parameter>


<Parameter name="SHOWSQLINFO">
<Description><![CDATA[
Should this page display SQL Info]]></Description>
<Default>0</Default>
</Parameter>


<Parameter name="IDCOL">
<Description><![CDATA[
Name of ID Column if "More Data" link is to be offered ($NextID variable must be supported in CreateResultSet() also)]]></Description>
</Parameter>

<Parameter name="TOPCOUNT">
<Description><![CDATA[
Number to use in SELECT TOP, if any. Use this to affect the SQL query optimizer. Set it substantially larger than MAXROWS if FilterRS() might invalidate some of the rows returned from SQL.]]></Description>
<Default>0</Default>
</Parameter>


<Parameter name="XMLTYPE">
<Description><![CDATA[
Used to avoid the following error:
ERROR #6281: XMLNAME of class CSPX.SQLQueryPane must be able to differentiate child classes of %CSP.Util.Pane.]]></Description>
<Default>EnsSQLQueryPane</Default>
</Parameter>


<Method name="OnDrawHEADTablePane">
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<
<style type="text/css">

h2 {
	color: darkblue;
	border-top: 1px solid darkblue;
	font-weight: bold;
	font-size: 1.2em;
}


</style>
<script language="javascript">
</script>
>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawBODY">
<Description><![CDATA[
Draw the BODY of the detail pane]]></Description>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	// Get text line for page; subclass can customize this behavior
	Set tText = ..GetDescriptiveText()

	// get page ID values
	Merge tID = pInstance.IDValues
	Set tRSPage=$G(%request.Data("$RSPage",1),1)
	
	Set pCBState = ""

	Set msgStatistics = $$$Text("Performance")
	Set msgSeconds = $$$Text("seconds")
	Set msgGloRefs = $$$Text("global references")
	Set hlpStatistics = $$$Text("These statistics show the rough cost of executing this query. These values include some cost for displaying the query results.")
	Set ltoggle = $$$Text("Check/Un-check all checkboxes")

	Set msgNoResults = $$$Text("To see results, enter a query then press the Search button.")
	Set cmdSQLCODE = $$$Text("SQLCODE")
	Set cmdRowCount = $$$Text("Row count")

	Set hlpSQLINFO = $$$Text("SQLCODE is the SQL error code value returned by this query. Row count is the number of rows processed by this query. For SELECT statements, these values are only set when all rows are loaded.")

	Do {				
		Do ..DrawCommands(pInstance)

		If (..Text '= "") {
			Set msgUpdate = $$$Text("Last update: ")
			If tRSPage>1 {
				Set msgPage=$$$FormatText($$$Text("(Page %1)"),tRSPage)
				&html<<div></div>>
			} Else { Set msgPage="" }

			&html<<table border="0" cellpadding="3" cellspacing="0" width="90%"><tr>
				<td valign="bottom" class="Text1">#(..LocalizeText(..Text))#&nbsp;<b>#(msgPage)#</b></td>
				<td valign="bottom" align="left" class="Text" nowrap width="30%" style='cursor:pointer;cursor:hand;'>
				<div align="left" width="100%">
				<a class="LastUpdate">#(msgUpdate)#<b>
				<span id="lastUpdate">#($ZDT($ZU(188),3,,3))#</span></b>&nbsp;</a>
				</div>
				</td>
				<td>&nbsp;</td>
				</tr></table>
			>
		}
		If (..#SHOWSTATISTICS || ..#SHOWSQLINFO) {
			&html<<table><tr>>
			If (..#SHOWSQLINFO) {
				&html<<td align="left" valign="center"><span title="#(hlpSQLINFO)#" style="color: darkblue; font-size: 0.8em; line-height: 150%; margin-left: 20px;" nowrap>
				#(cmdSQLCODE)#: <b><a href="javascript:launchPopupWindow('/csp/docbook/DocBook.UI.Page.cls?KEY=RSQL_sqlerrors');"><span id='sqlcode'>N/A</span></a></b>&nbsp;&nbsp;#(cmdRowCount)#: <b><span id='rowcount'>N/A</span></b>
				</td><td>&nbsp;</td>>
			}
			If (..#SHOWSTATISTICS) {
				&html<<td align="left" valign="center"><span title="#(hlpStatistics)#" style="color: darkblue; font-size: 0.8em; line-height: 150%; margin-left: 20px;" id="statistics">&nbsp;</span></td>>
			}
			&html<</tr></table>>
		}
		&html<<br>>

		// build list of actions for the table
		// (move to superclass!)
		Set tActionCols = 0
		Set tKey=""
		Set tAction = ..Actions.GetNext(.tKey)
		While (tKey'="") {
			// check for any $ actions (which are displayed as an additional column)
			If ($E(tKey,1,1) = "$") {
				Set tActionCols = tActionCols + 1
				Set tActionCols(tActionCols) = $LB(tKey,tAction.Caption)
			}
			Set tAction(tKey,"HREF") = tAction.HREF
			Set tAction(tKey,"Confirm") = ..LocalizeText(tAction.Confirm)
			Set tAction(tKey,"Type") = tAction.Type
			Set tAction(tKey,"Target") = $S(tAction.TargetFrame="":"_top",1:tAction.TargetFrame)
	
			Kill ids
			Do tAction.GetIDValues(.ids)
			Merge tAction(tKey,"ID") = ids
			//YSD727
			If $G(ids(1)) = "",$G(pID(1)) '= "" Set tAction(tKey,"ID",1) = pID(1)
			If $G(ids(2)) = "",$G(pID(2)) '= "" Set tAction(tKey,"ID",2) = pID(2)
			Set tAction(tKey,"Popup") = ..LocalizeText(tAction.Popup)
			Set tAction = ..Actions.GetNext(.tKey)
		}
		// build list of conditions for the table
		// organized by column name
		For i=1:1:..Conditions.Count() {
			Set tCondition = ..Conditions.GetAt(i)
			If (tCondition.ColumnName '= "") {
				If (tCondition.CellStyle '= "") {
					Set tTarg = $S(tCondition.TargetColumn'="":tCondition.TargetColumn,1:tCondition.ColumnName)
					Set idx = 1 + $G(tCellCondition(tTarg))
					Set tCellCondition(tTarg) = idx
					Set tCellCondition(tTarg,idx) = tCondition
				}
				If (tCondition.RowStyle '= "") {
					Set idx = 1 + $G(tRowCondition)
					Set tRowCondition = idx
					Set tRowCondition(idx) = tCondition
				}
			}
		}
		// create query
		Set tRS = ""
		Set tSC = ..CreateResultSet(.tID,.tRS)
		If ($$$ISERR(tSC)) {
			Do ..DrawStatusError(tSC)
			Quit
		}
		If '$IsObject(tRS) {
			// no result set; most likely empty query string
			&html<<div style="margin-left: 20px; font-size: 0.8em;"><i>#(msgNoResults)#</i></div>>
			Quit
		}
		// execute query / build temp file
		If (..#SHOWSQLINFO) {
			Set %sqlcontext = ##class(%ProcedureContext).%New()
			Set %sqlcontext.SQLCode = "N/A"
			Set %sqlcontext.RowCount = "N/A"
		}
		Set tGlobals = $zu(67,9,$J)
		Set tStart = $ZH

		Set tRS.RuntimeMode = 2
		Set tSC = ..ExecuteResultSet(tRS,.tID)
		If ($$$ISERR(tSC)) {
			Do ..DrawStatusError(tSC)
			Quit
		}
		// build array of "hidden" columns
		For n = 1:1:$L(..HiddenColumns,",") {
			Set t = $P(..HiddenColumns,",",n)
			If (t '= "") {
				Set tHiddenCols(t) = ""
			}
		}
		Set tColorBy = ..GetColorByColumn()
		Do ..GetColumnWidths(.tWidths)
		Set tAtStart = 1
		Set tCols = tRS.GetColumnCount()

		&html<<table class="SQLQueryTable" border="0" cellspacing="0">>
		&html<<tr>>
		If (..ShowCheckboxes) {
			&html<<th width="1%" align="center"><input title='#(ltoggle)#' type="checkbox" name="ctlCheck" id="ctlCheck" onclick="toggleCheckboxes();"></th>>
		}
		If (..ShowRowNumbers) {
			&html<<th width="1%">#</th>>
		}
		// write out headers and get column types
		For i = 1:1:tCols {
			Set tColName = tRS.GetColumnHeader(i)
			Set lcname = ..LocalizeColumnName(tColName,.tHelpMsg)
			Set lcname = $ZCVT(lcname,"O","HTML")

			// index of col name to # (including hidden cols)
			Set tColIndex(tColName) = i
			Set tColNames(i) = tColName

			If ('$D(tHiddenCols(tColName))) {
				Set tColSet(i) = ""
				&html<<th nowrap>#(lcname)#</th>>
	
				// 2:date 3:float,5:integer,10:string,12:binstream,13:charstream
				Set type = 10 // !!! tRS.GetColumnType(i)
	 			Set tAlign(i) = $Case(type,3:"right",5:"right",:"left")
	 			Set tIsStream(i) = $Case(type,12:1,13:1,:0)
			}
 		}
		// action columns
		For c = 1:1:tActionCols {
			&html<<th>&nbsp;</th>>
		}
		&html<</tr>>

		// figure out max rows to display
		Set tMaxRows = ..MaxResults

		Set (row,rawrow) = 0
		While ((row<tMaxRows) && tRS.Next()) { Set rawrow = rawrow + 1
			Kill tPropVals
			Continue:'..FilterPostRS(tRS,.tPropVals)
			Set row = row + 1

			// get col values (include hidden values)
			For i=1:1:tCols {
				If $D(tPropVals(tColNames(i)),val) { Set tValue(i)=val }
				Else { Set tValue(i) = tRS.GetData(i) }
			}
			Kill tTips Do ..GetToolTips(.tValue,.tTips)
			Kill tLinks Do ..GetLinks(.tValue,.tLinks)
			
			// make distinct color for row
			If (..ShowZebra && (tColorBy = "")) {
				Set bg = $Case(row#2,0:"#DDEEFF",:"white")
			} Else {
				If (tColorBy = "") {
					Set bg = "#FFFFFF"
				} Else {
					Set num = $G(tRS.Data(tColorBy))
					If (num '= +num) {
						// convert string to #; ignore anything after (
						Set num = $ZCRC($P(num,"(",1),6)*4
					}
					If (num = 0) {
						Set bg = "#FFFFEE"
					} Else {
						Set bg = "#"_$J($ZHEX(((num*113)#127)+128),2)_$J($ZHEX(((num*7)#127)+128),2)_$J($ZHEX(((num*17)#127)+128),2)
						Set bg = $TR(bg," ",0)
					}
				}
			}
			// see if there are any row conditions
			Set (ts,idx)="" For { Set idx = $O(tRowCondition(idx),1,tCondition)  Quit:""=idx
				// evaluate condition
				Set tEval = tCondition.Eval2(.tColIndex,.tValue)
				If (tEval) {
					Set ts = tCondition.RowStyle
					Quit
				}
			}
			// special coloring augments condition
			If (tColorBy = "") {
				Set tRowStyle = "style=""background:" _ bg _ ";" _ ts _ """"
			} Else {
				Set tRowStyle = "style=""" _ ts _ "background:" _ bg _ ";"""
			}
			&html<<tr #(tRowStyle)#>>

			If (..ShowCheckboxes) {
				If (..CheckboxId = "") {
					Set cbValue = row-1 // id not available
				} Else {
					Set cbValue = $G(tValue($G(tColIndex(..CheckboxId),-1)))
				}
				Set tChecked = $S(cbValue="":"",pCBState[(","_cbValue_","):"checked",1:"")
				&html<<td align="center"><input value="#(cbValue)#" id="cb_#(row)#" #(tChecked)# title="#(ltoggle)#" type="checkbox"></td>>
			}
			If (..ShowRowNumbers) {
				&html<<td align="right">&nbsp;#(((tRSPage-1)*tMaxRows)+row)#</td>>
			}
			// draw columns (no actions within data columns)
			Set i="" For { Set i=$O(tColSet(i))  Quit:""=i
				Set val = tValue(i)
				If (tIsStream(i) && (val'="")) { Set val = "<stream>" }
				Set:$L(val)>1000 val=$E(val,1,997)_"..."
				Set tAlign=$Case(val=+val,1:"right",:"left")
				Set tWrap=$G(tWidths(i),75)
				Set len=..wrappedWidth(val)
				If len<=tWrap {
					Set tNoWrap="nowrap "
					Set val=$ZCVT(val,"O","HTML")
				} Else {
					Set tNoWrap=""
					Set val=$S($D(tWidths(i,"breakchars")):..wrapHTML(val,tWrap,.tWidths,i), 1:$ZCVT(val,"O","HTML"))
				}
				Set tTooltip = $G(tTips(i))
				Set:""'=tTooltip tTooltip = "title="""_$ZCVT(tTooltip,"O","HTML")_""" "

				Set tLink = $G(tLinks(i))
				Set tLink = $S(""=tLink:"&nbsp;"_val, 1:"<a href="_..MakeLink(,tLink,,.tValue)_" target='_top'>&nbsp;"_val_"&nbsp;</a>")

				&html<<td #(tTooltip)##(tNoWrap)#align="#(tAlign)#">#(tLink)#</td>>
			}
			// additional action columns
			For c = 1:1:tActionCols {
				Set k = $LG(tActionCols(c),1)
				Set tVal = $LG(tActionCols(c),2)
				Set tCellStyle = ""
				Set tADisabled = ""
				Set tNoWrap = "nowrap"
						
				// get id values
				Kill tRowID
				Set n = $O(tAction(k,"ID",""))
				While (n '= "") {
					Set actid = $G(tAction(k,"ID",n))
					If (actid [ "{") {
						// column name (remove {})
						Set actid = $P($P(actid,"{",2),"}",1)
						If (actid = "") {
							Set tRowID(n) = ""
						} Else {
							// find data by col name
							Set tRowID(n) = tValue(tColIndex(actid))
						}
					} ElseIf (($E(actid,1,4) = "$ID(") && (+$E(actid,5,999) > 0) )  {
						// value in pID
						Set tRowID(n) = $G(pID(+$E(actid,5,999)))
					} Else {
						Set tRowID(n) = actid
					}
					Set n = $O(tAction(k,"ID",n))
				}
				If ($G(tAction(k,"Type")) = "popup") {
					Set tURL = pInstance.MakePopupLink($G(tAction(k,"HREF")),.tRowID)
				} ElseIf ($G(tAction(k,"Type")) = "help") {
					Set tURL = ##class(%CSP.Util.Librarian).FindDocBookLink(.tRowID)
				} Else { // link
					Set tURL = ..MakeLink(pInstance,$G(tAction(k,"HREF")),.tRowID,.tValue)
				}
				If ($G(tAction(k,"Confirm")) '= "") {
					Set tConfirm = " onclick=""return confirm(" _ ##class(%CSP.Page).QuoteJS(tAction(k,"Confirm")) _ ");"""
				} Else {
					Set tConfirm = ""
				}
				// see if there are cell conditions for this column
				Set idx="" For { Set idx = $O(tCellCondition(k,idx),1,tCondition)  Quit:""=idx
					// evaluate condition
					Set tEval = tCondition.Eval2(.tColIndex,.tValue)
					If (tEval) {
						Set tCellStyle = tCondition.CellStyle
						If (tCondition.CellStyle [ "disabled") {
							Set tADisabled = "disabled"
						}
						Quit
					}
				}
				Set tTitle = tAction(k,"Popup")
				Set tTarget = $G(tAction(k,"Target"))

				If (tADisabled '= "") {
					Set tHREF = ""
					Set tCellStyle = tCellStyle _ "color: gray;"
				} Else { 
					Set tHREF = "href=""" _ $ZCVT(tURL,"O","HTML") _ """"
				}
				Set:tCellStyle'="" tCellStyle = "style=""" _ tCellStyle _ """"

				If (tADisabled'="disabled"&&(""'=tURL)) {
					&html<<td #(tNoWrap)# #(tCellStyle)#>>
					&html<<a #(tADisabled)# #(tHREF)# #(tConfirm)# target="#(tTarget)#" title="#(tTitle)#">#($ZCVT(..LocalizeText(tVal),"O","HTML"))#</a>>
				} Else {
					&html<<td align="center" #(tCellStyle)#>>
					&html<->
				}
				&html<</td>>
			}
			// end of action columns
			&html<</tr>>
		}
		If ..#IDCOL=""||(""=$G(tRS.Data(..#IDCOL))) {
			Set hasMore = $S(tRS.Next():rawrow+1,1:0), nextID = ""
		} Else {
			Set hasMore = 0, nextID = ""
			While tRS.Next() { Set rawrow=rawrow+1
				Kill tPropVals
				Continue:'..FilterPostRS(tRS,.tPropVals)
				Set hasMore=rawrow  If '$D(tPropVals(..#IDCOL),nextID) Set nextID=$G(tRS.Data(..#IDCOL))
				Quit
			}
		}
		&html<<tr><td style="background:#DDDDDD;" colspan="#(tCols+tActionCols+(+..ShowRowNumbers)+(+..ShowCheckboxes))#">>
		If ..#TOPCOUNT && (rawrow >= ..#TOPCOUNT) {
			Set msgTopOverflow=$ZCVT($$$FormatText($$$Text("Reached TOP limit of %1 without satisfying %2 MaxResults"),..#TOPCOUNT,..MaxResults),"O","HTML")
			&html<<div><i>#(msgTopOverflow)#</i></div>>
		}
		If (hasMore) {
			Set msgMore = $$$TextHTML("There is more data...")
		} Else {
			Set msgMore = $$$TextHTML("Complete")
		}
		If ""=nextID {
			&html<<div id="hasMore" value='#(hasMore)#'><i>#(msgMore)#</i></div>>
		} Else {
			&html<<div id="hasMore" value='#(hasMore)#'><a href="javascript:self.location=self.location.href.split('&$RSPage=')[0]+'&$RSPage=#(tRSPage+1)#&$NextID=#(nextID)#'" target='_top'><i>#(msgMore)#</i></a></div>>
		}
		&html<</td></tr>>
		&html<</table><hr>>

		If (..ShowCheckboxes) {
			// form for submit of checkboxes
			&html<<form name="cbForm" target="autoPopupWindow" method="post">
			<input type="hidden" name="cbState" value="">
			<input type="hidden" name="cbAction" value="">
			<input type="hidden" name="cbSpace" value="">
			<input type="hidden" name="$ID1" value="#($ZCVT($G(tID(1)),"O","HTML"))#">
			<input type="hidden" name="$ID2" value="#($ZCVT($G(tID(2)),"O","HTML"))#">
			<input type="hidden" name="$ID3" value="#($ZCVT($G(tID(3)),"O","HTML"))#">			
			<input type="hidden" name="$NAMESPACE" value="#($ZCVT($G(%request.Data("$NAMESPACE",1)),"O","HTML"))#">
			</form>>
		}
		Set tTime = $ZH - tStart
		Set tGlobals = $zu(67,9,$J) - tGlobals

		Write "<script language='JavaScript'>",!
		Write " var CSPPage = self;",!

		&js<numRows = #(row)#;>
		
		// write statistics
		If (..#SHOWSTATISTICS) {
			Set tStats = msgStatistics _": <b>"_$FN(tTime,"",3) _ "</b> "_msgSeconds_"&nbsp;&nbsp;<b>" _ tGlobals _ "</b> " _ msgGloRefs
			&js<if (self.document.getElementById("statistics")) { self.document.getElementById("statistics").innerHTML = '#(tStats)#';}>
		}
		If (..#SHOWSQLINFO) {
			&js<if (self.document.getElementById("sqlcode")) { self.document.getElementById("sqlcode").innerHTML = '#(%sqlcontext.SQLCode)#';}>
			&js<if (self.document.getElementById("rowcount")) { self.document.getElementById("rowcount").innerHTML = '#(%sqlcontext.RowCount)#';}>
			Kill %sqlcontext
		}
		Write "</script>",!
	} While(0)
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetColorByColumn">
<Description><![CDATA[
Subclass can override this to specify the name of column used 
to distinctly color rows]]></Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ""
]]></Implementation>
</Method>

<Method name="GetColumnWidths">
<Description><![CDATA[
Subclass can override this to specify the widths of columns used 
and the character(s) to wrap on (under pWidthArray(iCol,"breakchars"))]]></Description>
<FormalSpec>&amp;pWidthArray</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ""
]]></Implementation>
</Method>

<Method name="GetToolTips">
<Description><![CDATA[
Subclass can override this to specify tooltips for the columns]]></Description>
<FormalSpec>&amp;pValues,&amp;pTips</FormalSpec>
</Method>


<Method name="GetLinks">
<Description><![CDATA[
Subclass can override this to specify hyperlinks for the columns]]></Description>
<FormalSpec>&amp;pValues,&amp;pLinks</FormalSpec>
</Method>


<Method name="MakeLink">
<Description><![CDATA[
Subclass can override this to modify hyperlinks for the columns]]></Description>
<FormalSpec>pInstance:%CSP.Util.PageInstance,pHREF,&amp;pRowID,&amp;pValue</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $S($$$IsdefObject(pInstance):pInstance.MakeLink(pHREF,.pRowID), 1:##class(%CSP.Page).Link(pHREF))
]]></Implementation>
</Method>

<Method name="wrappedWidth">
<ClassMethod>1</ClassMethod>
<FormalSpec>val</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set len=0,pos=1 For { Set pos1=$F(val,$C(10),pos) Quit:'pos1  Set tLen=pos1-pos-$S($C(13)=$E(val,pos1-2):2,1:1)  Set:tLen>len len=tLen Set pos=pos1 }
	Quit:$L(val)+1-pos>len $L(val)+1-pos
	Quit:'len $L(val)
	Quit len
]]></Implementation>
</Method>

<Method name="wrapHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>val,wrap,widths,i</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#; construct list of places to break the val string
	Set bc="" For { Set bc=$O(widths(i,"breakchars",bc))  Quit:""=bc
		Set bcpos=0 For { Set bcpos=$F(val,bc,bcpos)  Quit:'bcpos  Set bclist(bcpos-$L(bc))=bc }
	}
	Set bcpos=0 For { Set bcpos=$F(val,$C(10),bcpos)  Quit:'bcpos  Set brlist(bcpos-1)=$C(10) }
	Set bcpos=0 For { Set bcpos=$F(val,$C(13,10),bcpos)  Quit:'bcpos  Set brlist(bcpos-2)=$C(13,10) kill brlist(bcpos-1) }

	#; Insert$C(10) as placeholder for line breaks
	Set pos=1,bcpos=1,lastpos=0,extra=0, bc=""
	While pos+extra+wrap-$S($C(10)=$E(bc,$L(bc)):0, 1:$L(bc))<$L(val) {
		Set brpos=$O(brlist(pos+wrap+1),-1,br)  Set:brpos<lastpos brpos=""
		Set bcpos=$O(bclist(pos+wrap+1),-1,bc)  Set:bcpos<lastpos bcpos=""
		If brpos { Set bcpos=brpos, bc=br }
		If bcpos {
			Set bcpos=bcpos+extra
			If bc[$C(13,10) { Set $E(val,bcpos,bcpos+$L(bc)-1)=$TR(bc,$C(13)), c13s=$L(bc)-$L($TR(bc,$C(13))), bcpos=bcpos-c13s, extra=extra-c13s }
			ElseIf bc'[$C(10) { Set $E(val,bcpos,bcpos+$L(bc)-1)=$C(10)_bc, bcpos=bcpos+1, extra=extra+1 }
		} Else {
			Set bcpos=pos+extra+wrap
			Set $E(val,bcpos)=$C(10)_$E(val,bcpos), bcpos=bcpos+1, extra=extra+1 
		}
		Set pos=bcpos-extra, lastpos=pos+$L(bc)
	}
	#; convert to HTML and add <br> tags
	Set val=$ZCVT(val,"O","HTML")
	Set bcpos=0 For { Set bcpos=$F(val,$C(10),bcpos)  Quit:'bcpos  Set $E(val,bcpos-1)="<br>"_$C(13,10), bcpos=bcpos+5 }
	quit val
]]></Implementation>
</Method>

<Method name="ExecuteResultSet">
<Description><![CDATA[
This method performs the actual execution of the ResultSet
This can be overridden by subclasses]]></Description>
<FormalSpec>pRS:%ResultSet,&amp;pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK

	Set tParms = pRS.GetParamCount()
	If (tParms = 0) {
		Set tSC = pRS.Execute()
	} ElseIf (tParms = 1) {
		Set tSC = pRS.Execute($G(pID(1)))
	} ElseIf (tParms = 2) {
		Set tSC = pRS.Execute($G(pID(1)),$G(pID(2)))
	} Else {
		Set tSC = pRS.Execute($G(pID(1)),$G(pID(2)),$G(pID(3)))
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="FilterPostRS">
<Description><![CDATA[
Apply additional filter criteria to determine whether to display the current row returned by the ResultSet
Return value 1 means display the current row]]></Description>
<CodeMode>expression</CodeMode>
<FormalSpec>pRS:%ResultSet,&amp;pPropVals</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[1
]]></Implementation>
</Method>

<Method name="GetDescriptiveText">
<Description><![CDATA[
Return (localized) text message displayed near top of page.
Subclasses may override this.]]></Description>
<Implementation><![CDATA[	Quit ..LocalizeText(..Text)
]]></Implementation>
</Method>

<Method name="DrawStatusError">
<Description><![CDATA[
Generic method to draw error message for object status code.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tSC:%String</FormalSpec>
<Implementation><![CDATA[
	Kill err
	Do $System.Status.DecomposeStatus(tSC,.err)
	&html<<div style="color:red; margin-left: 20px;" align="left" ><br>>
	Set ecnt = ""
	For  Set ecnt = $O(err(ecnt)) Quit:ecnt=""  &html<<b>#($ZCVT(err(ecnt),"O","HTML"))#</b><br>>
	&html<</div>>
]]></Implementation>
</Method>

<Method name="DrawHEAD">
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set tSC = ##super(pInstance)  Quit:$$$ISERR(tSC) tSC
	Quit ..OnDrawHEADTablePane(pInstance)
]]></Implementation>
</Method>
</Class>
</Export>