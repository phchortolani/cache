<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alINV.dUUnit">
<Super>%RegisteredObject</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; History 
; 18-Apr-2008	Luke	SR15666
;---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="Name">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00687"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="Abbreviation">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00685"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Property name="DataType">
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00686"/>

<Parameter name="TRUNCATE" value="1"/>
</Property>


<Method name="%OpenId">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>alINV.dUUnit</ReturnType>
<Implementation><![CDATA[
	/*----------------------------------------------------------------------------------
	; History 
	; 15-Jan-2010	GRF		Volume not Mass for cubic length
	; 18-Apr-2008	Luke	SR15666
	;---------------------------------------------------------------------------------*/
	set objReturn  = ##class(alINV.dUUnit).%New() 
	set strId      = ##class(User.WWW101).%OpenId("EINHEIT||EN||"_pID)
	set objReturn.Name         = strId.Text
	set objReturn.Abbreviation = strId.Text
	// setting the type as "Area,Volume,Liquid Volume,Mass,Length,Prod Dur,Container"
	if (strId.Text = "/100") || (strId.Text = "Each")   ||
	   (strId.Text = "Pair") || (strId.Text = "Box")    ||
	   (strId.Text = "Pack")|| (strId.Text = "Package")    {
		
		set objReturn.DataType = "Container"
	
	} elseif (strId.Text = "Industry-Minute(s)") || (strId.Text = "Minutes") ||
	         (strId.Text = "Hour(s)")            || (strId.Text = "Day(s)")  ||
	         (strId.Text = "Week(s)")            || (strId.Text = "Month")      {
		set objReturn.DataType  = "Prod Dur"
	
	} elseif (strId.Text = "mg") || (strId.Text = "Ounce") {
		set objReturn.DataType = "Mass"
	
	} elseif (strId.Text = "Gallon") || (strId.Text = "Litre") {
		set objReturn.DataType = "Liquid Volume"
	
	} elseif (strId.Text = "m³") || (strId.Text = "Sq.Inch(es)") {
		set objReturn.DataType = "Volume"
	
	} elseif (strId.Text = "Inch(es)") || (strId.Text = "Miles") {
		set objReturn.DataType = "Length"
	}
	quit objReturn
]]></Implementation>
</Method>

<Method name="ConvertUnits">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*----------------------------------------------------------------------------------
	; History 
	; 15-Jan-2010	GRF		Volume not Mass for cubic length
	; 18-Apr-2008	Luke	SR15666
	;---------------------------------------------------------------------------------*/
	do ##class(alINV.dUnitType).%DeleteExtent()
	do ##class(alINV.dUnitType).%PurgeIndices()
	
	set sc = $$$OK
	set idUnit  = ""
	for {
		set idUnit = $order(^WWW101(0,"EINHEIT","EN",idUnit))
		quit:idUnit=""
		
		set strId = ##class(User.WWW101).%OpenId("EINHEIT||EN||"_idUnit)
		if '##class(alINV.dUnitType).%ExistsId(strId.Text) {
			set objUnit = ##class(alINV.dUnitType).%New()
			set objUnit.Name         = strId.Text
			set objUnit.Abbreviation = strId.Text
			// setting the type as "Area,Volume,Liquid Volume,Mass,Length,Prod Dur,Container"
			if (strId.Text = "/100") || (strId.Text = "Each")    ||
			   (strId.Text = "Pair") || (strId.Text = "Box")     ||
			   (strId.Text = "Pack") || (strId.Text = "Package")    {
				
				set objUnit.DataType = "Container"
			
			} elseif (strId.Text = "Industry-Minute(s)") || (strId.Text = "Minutes") ||
			         (strId.Text = "Hour(s)")            || (strId.Text = "Day(s)")  ||
			         (strId.Text = "Week(s)")            || (strId.Text = "Month")      {
				set objUnit.DataType = "Prod Dur"
			
			} elseif (strId.Text = "mg") || (strId.Text = "Ounce") {
				set objUnit.DataType = "Mass"
			
			} elseif (strId.Text = "Gallon") || (strId.Text = "Litre") {
				set objUnit.DataType = "Liquid Volume"
			
			} elseif (strId.Text = "m³") || (strId.Text = "Sq.Inch(es)") {
				set objUnit.DataType = "Volume"
			
			} elseif (strId.Text = "Inch(es)") || (strId.Text = "Miles") {
				set objUnit.DataType = "Length"
			
			} else {
				set objUnit.DataType = "Container"
			}
			set sc = objUnit.%Save()
			
		} else {
			set objUnit = ##class(alINV.dUnitType).%New()
			set objUnit.Name         = strId.Text_idUnit
			set objUnit.Abbreviation = strId.Text_idUnit
			// setting the type as "Area,Volume,Liquid Volume,Mass,Length,Prod Dur,Container"
			if (strId.Text = "/100") || (strId.Text = "Each")    ||
			   (strId.Text = "Pair") || (strId.Text = "Box")     ||
			   (strId.Text = "Pack") || (strId.Text = "Package")    {
				
				set objUnit.DataType  = "Container"
			
			} elseif (strId.Text = "Industry-Minute(s)") || (strId.Text = "Minutes") ||
			         (strId.Text = "Hour(s)")            || (strId.Text = "Day(s)")  ||
			         (strId.Text = "Week(s)")            || (strId.Text = "Month")      {
				
				set objUnit.DataType = "Prod Dur"
			
			} elseif (strId.Text = "mg") || (strId.Text = "Ounce") {
				set objUnit.DataType = "Mass"
			
			} elseif (strId.Text = "Gallon") || (strId.Text = "Litre") {
				set objUnit.DataType = "Liquid Volume"
			
			} elseif (strId.Text = "m³") || (strId.Text = "Sq.Inch(es)") {
				set objUnit.DataType = "Volume"
			
			} elseif (strId.Text = "Inch(es)") || (strId.Text = "Miles") {
				set objUnit.DataType = "Length"
			
			} else {
				set objUnit.DataType = "Container"
			}
			set sc = objUnit.%Save()

		}
		quit:$$$ISERR(sc)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="getUnitType">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidId</FormalSpec>
<ReturnType>alINV.dUnitType</ReturnType>
<Implementation><![CDATA[
	set returnVal = "" 
	if pidId '="" {
		set tempV1Unit = ##class(User.WWW101).%OpenId("EINHEIT||EN||"_pidId)
		if tempV1Unit="" {
			set tempV1Unit = ##class(User.WWW101).%OpenId("EINHEIT||PT||"_pidId)
		}
		if tempV1Unit'="" set returnVal = ##class(alINV.dUnitType).%OpenId(tempV1Unit.Text)
		if returnVal = "" {
			set returnVal = ##class(alINV.dUnitType).%OpenId(tempV1Unit.Text_pidId)
		}
	}
	quit returnVal
]]></Implementation>
</Method>

<Method name="LoadV2">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 31-Jul-2008	Luke	SR15814: Change Status strStatus to sc
	; 27-May-2008	GRF		Spelling correction
	; 22-Apr-2008	Luke	SR15666: Included a test for the existence unit before
	; 							creating new ones 
	; 22-Apr-2008	HQN 	SR15666: Corrected SQL to be cacheable
	; 							Reusing alINV.iUItem::GetItem() instead of code block
	;-------------------------------------------------------------------------------
	set sc = ..ConvertUnits()
	
	set rs1 = ##class(%ResultSet).%New()
	do rs1.Prepare("select ID from SQLUser.INART where Company = ?") 
	do rs1.Execute(0)
	
	set objItemV1 = ""
	while (rs1.Next(.sc)) {
		if ($SYSTEM.Status.IsOK(sc)) {  // check if this succeeded without errors
			set objItemV1 =##class(User.INART).%OpenId(rs1.Data("ID"),1)
			set blnUnitPolExist = $$$NO
			if ##class(alINV.dUnitPolicy).%ExistsId(objItemV1.ItemNumber) {
				set objUnitPolicy = ##class(alINV.dUnitPolicy).%OpenId(objItemV1.ItemNumber)
				set blnUnitPolExist = $$$YES
			} else {
				set objUnitPolicy = ##class(alINV.dUnitPolicy).%New()
			}
			//testing the base unit on INART, if this is Null, we assign each as the 
			//base 
			if objItemV1.UnitofMeasure = "" {
				set tempBaseUnit = 1
			} else {
				set tempBaseUnit = objItemV1.UnitofMeasure
			}	
			/// Check the existance of the base unit within the current stored units 
			if blnUnitPolExist {
				set objV1baseType = ..getUnitType(tempBaseUnit)
				set blnBaseFound = $$$NO
				for loopBaseUnit = 1:1:objUnitPolicy.Units.Count() {
					set tempUnit = objUnitPolicy.Units.GetAt(loopBaseUnit)
					if tempUnit.Type = objV1baseType {
						set BaseUnit = tempUnit
						set BaseUnit.Type               = objV1baseType
						set BaseUnit.ConversionFromBase = 1	
						set blnBaseFound = $$$YES
						quit 
					} 
				}
				if 'blnBaseFound {
					set BaseUnit = ##class(alINV.dUnit).%New()
					set BaseUnit.Type               = ..getUnitType(tempBaseUnit)
					set BaseUnit.ConversionFromBase = 1	
					do objUnitPolicy.Units.Insert(BaseUnit)
				}
			} else {
				set BaseUnit = ##class(alINV.dUnit).%New()
				set BaseUnit.Type               = ..getUnitType(tempBaseUnit)
				set BaseUnit.ConversionFromBase = 1	
				do objUnitPolicy.Units.Insert(BaseUnit)
			}
			if BaseUnit = "" {
				write !,"BASE UNIT NULL"
			}
			set objUnitPolicy.BaseUnit = BaseUnit
			set objV2Item = ##class(alINV.iUINV).GetItem(objItemV1.ItemNumber, .sc)
			set rs2 = ##class(%ResultSet).%New()
			do rs2.Prepare("select ID from SQLUser.INARTPACK where Company = ? AND ItemNo = ?")
			do rs2.Execute(0,objItemV1.ItemNumber)
			
			while (rs2.Next(.sc)) {
				if ($SYSTEM.Status.IsOK(sc)) {  // check if this succeeded without errors
					set objV1 =##class(User.INARTPACK).%OpenId(rs2.Data("ID"),1)	
					
					if tempBaseUnit = objV1.Unit {
						//Loop through current Unit to see if it already exists 
						set objV1baseType = ..getUnitType(objV1.PackingUnit)
						set blnFound = $$$NO
						for loopBaseUnit = 1:1:objUnitPolicy.Units.Count() {
							set tempUnit = objUnitPolicy.Units.GetAt(loopBaseUnit)
							if tempUnit.Type = objV1baseType {
								set tempPackUnit                    = tempUnit
								set tempPackUnit.Type               = objV1baseType
								set tempPackUnit.ConversionFromBase = objV1.Quantity
								set blnFound = $$$YES
								quit 
							} 
						}
						if 'blnFound {
							set tempPackUnit                    = ##class(alINV.dUnit).%New()
							set tempPackUnit.Type               = ..getUnitType(objV1.PackingUnit)
							set tempPackUnit.ConversionFromBase = objV1.Quantity
						}
		
						if BaseUnit.Type.DataType = tempPackUnit.Type.DataType {
							if $$$ISOK(sc) {
								set sc =  objUnitPolicy.Units.Insert(tempPackUnit)			
							}	
						} else {
		/////  TODO: error catch where unit cannot be converted 
		/////        because they are of different types 
						}
					}			
				}
			}
			
			if $$$ISOK(sc) {
				set objUnitPolicy.Item = objV2Item
				set sc =  objUnitPolicy.%Save()
			}
			quit:$$$ISERR(sc)
		}
	}
	if $$$ISERR(sc) {
		set strMessage = ""
		do DecomposeStatus^%apiOBJ(sc,.errlist,"-d")
		for loopK=1:1:errlist {
			set strMessage = strMessage_errlist(loopK)
		}
		write !!,objItemV1.ItemNumber_"    " _strMessage
	}
	quit sc
]]></Implementation>
</Method>
</Class>
</Export>