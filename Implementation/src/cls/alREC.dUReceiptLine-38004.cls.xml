<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alREC.dUReceiptLine">
<ClassType>persistent</ClassType>
<IncludeCode>INConst,COMSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>User.INRECLine</Super>

<Property name="Item">
<Description><![CDATA[
Item]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00182"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="LineNumber">
<Description><![CDATA[
Line Number]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00183"/>

<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>


<Property name="Location">
<Description><![CDATA[
Location]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00184"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="Order1">
<Description><![CDATA[
Order]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00185"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="Quantity">
<Description><![CDATA[
Quantity]]></Description>
<Type>%Float</Type>

<Parameter name="CAPTION" value="AL00186"/>
</Property>


<Property name="Receipt">
<Type>alREC.dUReceipt</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00180"/>
</Property>


<Property name="ReceiptDate">
<Description><![CDATA[
Receipt Date]]></Description>
<Type>WWW.DiscTimestamp</Type>

<Parameter name="CAPTION" value="AL00187"/>
</Property>


<Property name="ReceiptNumber">
<Description><![CDATA[
Receipt Number]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00188"/>

<Parameter name="COLLATION" value="EXACT"/>

<Parameter name="MAXLEN" value="30"/>

<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>


<Property name="StockLocation">
<Description><![CDATA[
Stock Location]]></Description>
<Type>%String</Type>

<Parameter name="CAPTION" value="AL00189"/>

<Parameter name="MAXLEN" value="30"/>
</Property>


<Property name="Storage">
<Type>alLOC.dUStorage</Type>
<Calculated>1</Calculated>

<Parameter name="CAPTION" value="AL00181"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Query name="GetViaReceipt">
<Type>%SQLQuery</Type>
<FormalSpec>ReceiptId:%String</FormalSpec>
<SqlQuery>SELECT %ID FROM dUReceiptLine
 WHERE (ReceiptNumber = :ReceiptId)
 ORDER BY LineNumber</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="ReceiptGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(alREC.dUReceipt).%OpenId(i%Company_"||"_i%ReceiptNumber)
]]></Implementation>
</Method>

<Method name="ConvertOnSave">
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 09-sep-2008 	Luke	SR15897 Reverted SR15800:
	; 01-Aug-2008	Luke	SR15814: Corrected sc formation and use of $$$Text
	; 31-Jul-2008	HQN		SR15815: Using BundleGet to be consistent
	; 17-Jul-2008   Luke    SR15800: Add check if the Conversion has been run
	; 20-May-2008	GRF		SR15699: text parameters need to be inside MakeStatus()
	; 02-May-2008	Luke	SR15699: Language codes for errors 
	; 29-Apr-2008 	Luke	SR15695: Removed the purchase cost from the bundle formation 
	; 28-Apr-2008 	Luke	SR15689: Changed the Bundle formation back
	; 24-Apr-2008 	Luke	SR15625: changed the getting for V2 Item to go through
	; 							the interface 
	; 24-Apr-2008	Luke	SR15688: Removed Storage
	; 22-Apr-2008	Luke	SR15681: Changed the Blank Policy to be blank
	; 21-Apr-2008	Luke	SR15677: Changed the Blank Policy to be blank
	; 17-Apr-2008 	Luke	SR15676: Changed the get Item cost to reference the Line Value 
	; 15-Apr-2008	GRF		SR15717: byref "." in GetBundle; standardise on hashmap
	; 							rather than objBundleSearch
	; 08-Apr-2008	HQN		SR15640: Added check for Include Checkbox on V1
	; 						V2 should only exist for records marked to include
	; 							corrected V2 Lookup due to ReceiptNumber being a
	; 							non-integer
	; 02-Apr-2008	HQN		Corrected Save sequence so we can specify LineNumber
	; 26-Mar-2008	HQN		SR15640: Made errors more specific
	; 							Allowed Bundle to be unset if search fails
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set objUReceiptLine = ##class(alREC.dUReceiptLine).%OpenId("0||"_pKey)
	if (objUReceiptLine '= $$$NULLOREF) && (objUReceiptLine.Include = $$$YES) {
		; Can't Open V2 Lines directly, LineNumber matches with GetAt on relation not its %ID
		set objReceipt = ##class(alREC.dReceipt).%OpenId(objUReceiptLine.ReceiptNumber)
		set idxReceiptLine = objReceipt.ReceiptLines.FindObjectId(objReceipt.%Id()_"||"_objUReceiptLine.LineNumber)
		set objReceiptLine = $$$NULLOREF
		set:(idxReceiptLine '= "") objReceiptLine = objReceipt.ReceiptLines.GetAt(idxReceiptLine)
	;	set objReceiptLine = objReceipt.ReceiptLines.GetAt(objUReceiptLine.LineNumber)
	;	set objReceiptLine = ##class(alREC.dReceiptLine).%OpenId(pKey)
		
		if objReceiptLine = $$$NULLOREF {
			if objUReceiptLine.Supplier '= "" {
				set objReceiptLine = ##class(alREC.dReceiptLine.TypeSupplier).%New()
				set objReceiptLine.Receipt    = objReceipt
				set objReceiptLine.LineNumber = objUReceiptLine.LineNumber
				; TODO: set supplier details
			
			} else {
				set strMessage = $$$Text("alREC0001")      // SR15814:
				set sc = $$$ERROR($$$GeneralError,strMessage)		
				//set sc= $$$MakeStatus("alREC0001") ;"Unsupported Receipt Type" //SR15699
			}
		}
		
		if objReceiptLine '= $$$NULLOREF {
			set objReceiptLine.Item        = ##class(alINV.iUINV).GetItem(objUReceiptLine.Item.ItemNumber,.sc)
			//##class(alINV.dItem).%OpenId(objUReceiptLine.Item.ItemNumber)
			set objReceiptLine.Storage     = ##class(alLOC.dStorage).%OpenId(objUReceiptLine.Storage.LocationName_"||"_objUReceiptLine.Storage.StockLocation)
			set objReceiptLine.OrderNumber = objUReceiptLine.Order1
			set objReceiptLine.QtyReceived = objUReceiptLine.Quantity
			
			set hashmap = ##class(%Library.ArrayOfDataTypes).%New()
			set objReceiptLine.Bundle = objUReceiptLine.Bundle
			set:$$$ISOK(sc) sc = objReceiptLine.%Save()
		}
	}

	quit sc
]]></Implementation>
</Method>

<Method name="ItemGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*------------------------------------------------------------------------------
	; History: 
	; 18-Mar-2008	HQN		SR15640: Created
	;-----------------------------------------------------------------------------*/
	quit ##class(alINV.dUItem).%OpenId(i%Company_"||"_i%Item)
]]></Implementation>
</Method>

<Method name="StorageGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*------------------------------------------------------------------------------
	; History: 
	; 18-Mar-2008	HQN		SR15640: Created
	;-----------------------------------------------------------------------------*/
	quit ##class(alLOC.dUStorage).%OpenId(i%Company_"||"_i%Location_"||"_i%StockLocation)
]]></Implementation>
</Method>

<Method name="%OnOpen">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Open</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being opened.

<P>If this method returns an error then the object will not be opened.]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*------------------------------------------------------------------------------
	; History: 
	; 18-Mar-2008	HQN		SR15640: Created
	;-----------------------------------------------------------------------------*/
	if %this.%Oid() '= $$$NULLOREF {
		kill %objlasterror
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ConvertOnDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 02-Apr-2008	HQN		Delete V2 when this is deleted
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set objReceiptLine = ##class(alREC.dReceiptLine).%OpenId(pidKey)
	if objReceiptLine '= $$$NULLOREF {
		set sc = objReceiptLine.%Delete(objReceiptLine.%Oid())
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetItemCost">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRecLine:alREC.dUReceiptLine</FormalSpec>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; INWEAUF* is now deprecated - base on INRECLine and INRECSummary   FIXME?
	; 
	; History:
	; 11-Nov-2009	GRF		Use $$$Index, $$$KEY and $$$DBLQUOTE macros
	; 22-Apr-2008	Luke	SR15677
	;-------------------------------------------------------------------------------
	set YM=0
	set fltItemCost = 0 
	set idxRec  = $$$Index(pRecLine.ReceiptNumber)
	set idxLine = $$$Index(pRecLine.LineNumber)
	set strKeyINWEAUF =""
	set strGlobal = "^INWEAUFVORs(YM,2,"""_idxRec_""","_idxLine_")"
	if $data(^INWEAUFVORs(0,2,idxRec,idxLine)) {
		set strKeyINWEAUF = $piece($piece($query(^INWEAUFVORs(0,2,idxRec,idxLine)),",",5,9),")",1)
		set key1 = $translate($$$KEY1(strKeyINWEAUF),$$$DBLQUOTE)   // OrderNumber
		set key2 = $translate($$$KEY2(strKeyINWEAUF),$$$DBLQUOTE)   // OrderLineItem
		set key3 = $translate($$$KEY3(strKeyINWEAUF),$$$DBLQUOTE)   // Location
		set key4 = $translate($$$KEY4(strKeyINWEAUF),$$$DBLQUOTE)   // Storage
		set key5 = $translate($$$KEY5(strKeyINWEAUF),$$$DBLQUOTE)   // GoodsReceipt
		set objINWEAUF  = $get(^INWEAUFVOR(0,key1,key2,key3,key4,key5,1))

		set fltItemCost = +$piece(objINWEAUF,"~",8) 
	}
	quit fltItemCost
]]></Implementation>
</Method>

<Method name="OnReceive">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 31-Jul-2008	HQN	SR15815 Created Copied from dReceiptLine.ReceivedState::OnStateChange()
	;-------------------------------------------------------------------------------
	set objMove   = ##class(alREC.dMovement).%New()

	// Covert to full V2 Objects via interfaces 
	set objMove.Item        = ##class(alINV.iUINV).GetItem(%this.Item.ItemNumber)
	set objMove.FromLocn    = ""
	set objMove.ToLocn      = ##class(alLOC.iLOC).GetLocation(%this.Receipt.Location.Location)
	set objMove.FromStorage = ""
	set objMove.ToStorage   = ##class(alLOC.iLOC).GetStorage(%this.Storage.Location.Location,%this.Storage.StockLocation)
	set objMove.Bundle      = %this.Bundle
	
	
	set objMove.Reference   = %this.Receipt.ReceiptNumber
	set objMove.LineNumber  = %this.LineNumber
	set objMove.QtyPicked   = 0
	set objMove.QtyReceived = %this.Quantity
	set objMove.QtyRequired = 0
	set objMove.Supply      = ""
	set objMove.Demand      = ""
	set objMove.Completed   = $$$NO

	if $$$ISOK(sc) set sc = objMove.ChangeState(4)
	
	if %this.Bundle = "" {
		// ???
	}
	
	if $$$ISOK(sc) {
		// Update Status of this record
		set sc = %this.%Save()
	}
	quit sc
]]></Implementation>
</Method>

<Method name="BundleGet">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Returns an existing Bundle based on the Line Attributes defined or a new one
	;
	;
	; History:
	; 10-Sep-2013	SCR		CORE-266: Pass in Location to GetAttributes
	; 09-Jul-2009	PPP		SR16721: Optional policy definitions (can be 1-Yes, 2-No, 3-Optional)
	; 15-Jun-2009 	PPP 	SR16510: Created as a replacement to the previous BundleGet
	;							Want to keep all bundle creation in one place
	;							in the iBundle class
	;-------------------------------------------------------------------------------
	set sc = $$$OK

	kill arrAttributes

	set idItem = %this.Item.ItemNumber

	//SR16721
	do GetAttributes^INItemPolicyUtils(idItem, .blnLotNo, .blnUseByDate, .blnLotUnique, .intBrand, .intOwner, .intProgram,%this.Location)

	if blnLotNo  {
		set arrAttributes("Lot Number")=%this.LotNumber
	}
	if blnUseByDate {
		set arrAttributes("Use By Date")=%this.ExpirationDate
	}

	//		NEW ATTRIBUTES BASED ON THE ITEM
	if (intBrand=1) || (intBrand=3) {
		set arrAttributes("Brand") = %this.Brand
	}
	if (intOwner=1) || (intOwner=3) {
		set arrAttributes("Owner") = %this.Owner
	}
	if (intProgram=1) || (intProgram=3) {
		set arrAttributes("Program") = %this.Program1
	}
	
	//Need to open the Item Number in V2 Object class (alINV.dItem), %this.Item is class alINV.dUItem
	set objItem = ##class(alINV.dItem).%OpenId(idItem,0)

	//Create a new bundle if required
	set sc = ##class(alSOH.iBundle).GetItemBundle(objItem, .arrAttributes, $$$NO, .objBundle,%this.Location)
	if $$$ISOK(sc) {
		set strReturn = objBundle
	} else {
		set strReturn = sc	
	}
	quit strReturn
]]></Implementation>
</Method>

<Method name="CreateFromHistory">
<ClassMethod>1</ClassMethod>
<FormalSpec>objHistory:alSOH.dStockHistory</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 09-Feb-2009	HQN		SR16341: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	quit sc
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>