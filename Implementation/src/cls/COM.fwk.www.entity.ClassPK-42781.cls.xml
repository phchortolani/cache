<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="COM.fwk.www.entity.ClassPK">
<Description><![CDATA[

Represents a class primary key definition stored in @nM.

<p>

Actually, extends the @nM class <class>User.WWW002</class> 
so queries can be attached to it.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>User.WWW002</Super>

<Parameter name="EXTENTSIZE">
<Default>3472</Default>
</Parameter>


<Method name="findByClassName">
<Description><![CDATA[

Loads all pks of a class.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Library.ArrayOfObjects</ReturnType>
<Implementation><![CDATA[

	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")

	do resultSet.Prepare(
	     " SELECT %Id           " _
	     " FROM SQLUser.WWW002  " _
	     " WHERE (Class = ?)    ")
	     
	do resultSet.Execute(className)

	set classPks = ##class(%Library.ArrayOfObjects).%New()
	
	while (resultSet.Next()) {
		set id = resultSet.GetData(1)
		do classPks.SetAt(..%OpenId(id), id)
	}
	
	do resultSet.Close()

	quit classPks
]]></Implementation>
</Method>

<Method name="findByClassAndProperty">
<Description><![CDATA[

Loads a class pk by its class name and 
the its property name.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,propertyName:%String</FormalSpec>
<ReturnType>COM.fwk.www.entity.ClassPK</ReturnType>
<Implementation><![CDATA[

	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")

	do resultSet.Prepare(
	     " SELECT %Id           " _
	     " FROM SQLUser.WWW002  " _
	     " WHERE (Class = ?)    " _
	     " AND (PropertyName = ?)    ")
	     
	do resultSet.Execute(className, propertyName)

	set pk = ""
	
	if (resultSet.Next()) {
		set id = resultSet.GetData(1)
		set pk = ..%OpenId(id)
	}
	
	do resultSet.Close()

	quit pk
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>

<Property name="AlternateBehindKeysIeK"/>

<Property name="AlternateInFrontOfKeysBe"/>

<Property name="AlternateInputType"/>

<Property name="Beziehungstyp"/>

<Property name="Class"/>

<Property name="DeepSaveCach"/>

<Property name="DisplayIfSortKeyEqual"/>

<Property name="FREE1"/>

<Property name="FREE2"/>

<Property name="FREE3"/>

<Property name="ForceNumerator"/>

<Property name="IndexKey"/>

<Property name="InputFormat"/>

<Property name="InputSize"/>

<Property name="InputType"/>

<Property name="NoRelationValidation"/>

<Property name="PrimaryKeyNumber"/>

<Property name="PropertyDescription"/>

<Property name="PropertyName"/>

<Property name="RelationClass"/>

<Property name="RelationDisplayOptions"/>

<Property name="RelationalDisplayItems"/>

<Property name="RelationalPrimaryKeys"/>

<Property name="Remark"/>

<Property name="SortTheRelation"/>

<Property name="TextInForms"/>
</Storage>
</Class>
</Export>