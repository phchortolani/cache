<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alSOH.iBundle">
<Description><![CDATA[
Interface for Bundles]]></Description>
<Abstract>1</Abstract>
<ClassType/>
<IncludeCode>INConst,COMSYS,%occInclude,INSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>

<Method name="GetItemBundle">
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjItem:alINV.dItem,&amp;parrAttributes:alSYS.dt.dtString,pblnDoNotCreate:alSYS.dt.dtBoolean=0,*pobjBundle:alSOH.dBundle,pidLoc:alSYS.dt.dtString="&quot;</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Given an Item Object and Attributes as an array with Value
	; Get the Bundle associated with it.
	;
	; Inputs :
	;	1. pobjItem		ObjRef of the Item - alINV.dItem
	;	2. Attributes 		e.g. 	parrAttributes("Lot Number")="LOT0001"
	;							parrAttributes("Use By Date")=64943
	; Process	
	;	1. Get Properies needs for ItemPolicy
	;	2. Verify if entered Attributes are enough for Item Policy
	;	3. Get the Bundle for entered Attributes
	;	4. If Bundle does not exist create it (based on pblDoNotCreate)
	;
	; Returns
	;	alSYS.dt.dtStatus
	;
	; History:
	; 11-Sep-2013	SCR		CORE-266: Pass in Loc to BundleAttributes^INBundleUtils
	; 05-Aug-2011	shobby	SR17856: GetObjectId a little bit more robust if the
	;								 ItemPolicy is in use somewhere else.
	; 01-Jun-2009	shobby	SR16534: Error if incorrect number of attributes.
	; 15-May-2009	GRF		SR16441: kill output array
	; 01-May-2009	PPP		SR16441: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	kill pobjBundle
	
	//Get Properies needs for ItemPolicy
	;SR17856 set objPolicy = pobjItem.ItemPolicy
	;SR17856 set sc = ..GetAttributesForPolicy(objPolicy.%Id(), .arrReqAttributes)
	set sc = ..GetAttributesForPolicy(pobjItem.ItemPolicyGetObjectId(), .arrReqAttributes,pidLoc) ;SR17856
	
	if $$$ISOK(sc) {  	//if attributes match with required Get the Bundle
		if ..VerifyAttributes(.parrAttributes , .arrReqAttributes)=$$$YES {
			set sc = ..GetBundle(pobjItem, pblnDoNotCreate, .parrAttributes, .pobjBundle)
		} else {
			set sc = $$$ERROR($$$GeneralError,$$$Text("alSOH0004"))
		}
	}

	//if '$$$ISOK(sc) set sc = $$$ERROR($$$GeneralError,$$$Text("alSOH0004"))
	   ; "Incorrect amount of Properties being set for Bundle attributes"
	quit sc
]]></Implementation>
</Method>

<Method name="GetItemAttributes">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,*parrAttributes:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Given an Item ID get the Attributes that need to be validated
	; Get the Bundle associated with it.
	;
	; Inputs :
	;	1. pidItem			ID of the Item - alINV.dItem
	;
	; Returns	alSYS.dt.dtStatus
	;	By Ref		Attributes
	;
	;
	; History:
	; 05-Aug-2011	shobby	SR17856: GetObjectId a little bit more robust if the
	;								 ItemPolicy is in use somewhere else.
	; 15-May-2009	GRF		SR16441: kill output array
	; 01-May-2009	PPP		SR16441: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	kill parrAttributes
	set objItem = ##class(alINV.dItem).%OpenId(pidItem,,.sc)
	
	if $$$ISOK(sc) {
		;SR17856 set objPolicy = objItem.ItemPolicy
 		;SR17856 set sc = ..GetAttributesForPolicy(objPolicy.%Id(), .parrAttributes)
		set sc = ..GetAttributesForPolicy(objItem.ItemPolicyGetObjectId(), .parrAttributes)   ;SR17856 
	}
	quit sc
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
// ****************************************************************

</Content>
</UDLText>

<UDLText name="T">
<Content>
//                    SUPPORTING METHODS

</Content>
</UDLText>

<UDLText name="T">
<Content>
// ****************************************************************

</Content>
</UDLText>


<Method name="GetBundle">
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjItem:alINV.dItem,pblnDoNotCreate:alSYS.dt.dtBoolean,&amp;parrAttributes:alSYS.dt.dtString,*pobjBundle:alSOH.dBundle</FormalSpec>
<Private>1</Private>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 	1. Generate the Hashmap for the Attributes
	; 	2. Get the Bundle based on the HashMap if it exists
	; 	3. Else Create a new bundle with the Hashmap if OK
	; 	
	; Returns
	;  alSYS.dt.dtStatus
	;  ByRef pobjBundle	-> New Bundle Reference
	;  
	; History:
	; 18-Aug-2014	SCR		SESDF-1356: Check for optional Item Policy change
	; 17-Jun-2014	SCR		SESDF-1378: Check for optional program with and without attribute
	; 26-Feb-2014	SCR		HEVA-1343:Check for 'In Transaction'
	; 18-Mar-2010	PPP		SR17237: Replaced the SQL Prepare to a SQL compiled
	;							Method (GetBundleIDforHashKey)
	; 15-May-2009	GRF		SR16441: kill output array
	; 01-May-2009	PPP		SR16441: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	kill pobjBundle
	
	set objItemPolicy = pobjItem.ItemPolicy
			
	/********************************************
			get bundle
	*********************************************/
			
	set strHashCode = ..GenerateBundleHash(pobjItem.%Id(), .parrAttributes)
	
	/* SQL Prepare is not getting the ID sometimes
	// Changed to a persistent Method SQL below (GetBundleIDforHashKey)
	set rs = ##class(%Library.ResultSet).%New()	
	if rs.Prepare("SELECT %ID FROM alSOH.dBundle WHERE HashKey ="""_strHashCode_"""") {
		if rs.Execute() {
			if rs.Next(.sc) {
				; Concurrency Set to no locking, Bundles shouldn't be edited
				set pobjBundle = ##class(alSOH.dBundle).%OpenId(rs.Data("ID"),0,.sc)
			}
		}
	}
	do rs.%Close()
	*/
	
	set idBundle = ..GetBundleIDforHashKey(strHashCode)
	if idBundle'=$$$NULLOID {
		set pobjBundle = ##class(alSOH.dBundle).%OpenId(idBundle,0,.sc)	
	}
	if idBundle=$$$NULLOID {
		if ($data(parrAttributes("Program")))&&($get(parrAttributes("Program"))="") {
			merge arrAttributes2 = parrAttributes
			kill arrAttributes2("Program")
			set strHashCode = ..GenerateBundleHash(pobjItem.%Id(), .arrAttributes2)
			set idBundle = ..GetBundleIDforHashKey(strHashCode)
			if idBundle'=$$$NULLOID {
				set pobjBundle = ##class(alSOH.dBundle).%OpenId(idBundle,0,.sc)	
			}
		}
	}
		
	if idBundle=$$$NULLOID {
		if ('$data(parrAttributes("Program"))) {
			merge arrAttributes3 = parrAttributes
			set arrAttributes3("Program")=""
			set strHashCode = ..GenerateBundleHash(pobjItem.%Id(), .arrAttributes3)
			set idBundle = ..GetBundleIDforHashKey(strHashCode)
			if idBundle'=$$$NULLOID {
				set pobjBundle = ##class(alSOH.dBundle).%OpenId(idBundle,0,.sc)	
			}
		}
	}
	; Special Test for change Item Policy
	if (idBundle'=$$$NULLOID) && ($get(^CacheTempCheckItemPolicy))   {
		if pobjBundle.ItemPolicy.%Id()'=objItemPolicy.%Id() {
			kill pobjBundle
		}
	}
		
	/********************************************
			create new bundle
	*********************************************/			
	// Return a new bundle based on defaults since existing one not found 
	// (Based on input parameter - pblnDoNotCreate, by default = $$$NO)
	if '$data(pobjBundle) {
		if '$get(pblnDoNotCreate) {
			// create new bundle based on policy and attributes passed in
			if '$tlevel {
				set sc = $$$ERROR($$$GeneralError,$$$Text( $listbuild("IN01809",pobjItem.ItemId)))  ;Unable to create new Bundle for Item %1 , Not in a Transaction
			}
			if $$$ISOK(sc) {
				set pobjBundle = ##class(alSOH.dBundle).%New()
				set pobjBundle.ItemPolicy = objItemPolicy
				set pobjBundle.Item       = pobjItem
				
				set strAttr = ""
				for {
					set strAttr = $order(parrAttributes(strAttr))
					quit:strAttr=""
					
					set objBundleAttribute = ##class(alSOH.dBundleAttribute).%New()
					set objBundleAttribute.Bundle         = pobjBundle
		 			set objBundleAttribute.AttributeName  = strAttr
		 			set objBundleAttribute.AttributeValue = parrAttributes(strAttr)
					if $$$SOHLockLevel=0 {  ; SR17611 vvvvvv
						do objBundleAttribute.%DowngradeConcurrency(0)
					}						; SR17611 ^^^^^^
				}
				set sc = pobjBundle.%Save()
			}
		} else {
			set sc = $$$ERROR($$$GeneralError,$$$Text("alSOH0007"))		; "No Stock on Hand"
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetBundleIDforHashKey">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrHash:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtString</ReturnType>
<Implementation><![CDATA[	quit ##class(alSOH.dBundle).GetBundleIDforHashKey(pstrHash) ;CORE-287
]]></Implementation>
</Method>

<Method name="GenerateBundleHash">
<ClassMethod>1</ClassMethod>
<FormalSpec>pstrDefault:alSYS.dt.dtString,&amp;parrAttributes:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtString</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Generate the HashKey based on the given attributes and
	; Attribute values
	; calculated using - GetBase64Encode^COMUtilStr (Bate64 System Encryption)
	; 
	; pstrDefault will be idItem for stock bundles
	; 
	; Returns - HaskKey as alSYS.dt.dtString
	; 
	; History.
	; 01-May-2009	PPP		SR16441: Created
	;-------------------------------------------------------------------------------
	//generated hash is keyed via $order of strKey
	set strHashkey = pstrDefault
	
	set strKey = ""
	for {
		set strKey = $order(parrAttributes(strKey))
		quit:(strKey = "")
		
		set strHashkey = strHashkey_strKey_$get(parrAttributes(strKey))
	}
	
	set strHashkey = $$GetBase64Encode^COMUtilStr(strHashkey)

	quit strHashkey
]]></Implementation>
</Method>

<Method name="GetAttributesForPolicy">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidPolicy:alINV.dItemPolicy,*parrPolicyList:alSYS.dt.dtString,pidLoc:alSYS.dt.dtString="&quot;</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get the valid attributes for a given Item Policy
	; 
	; Returns: 	Status
	;  			ByRef parrPolicyList - List of valid attributes
	; 
	; History:
	; 09-Oct-2013	SCR		CORE-266: Pass back 'Optional Flag'
	; 10-Sep-2013	SCR		CORE-266: Pass in Location to GetAttributes
	; 01-May-2009	PPP		SR16441: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set blnOnlyTrackPrograms = $$$NO
	if pidLoc'="" {
		set objLoc=$get(^WWW0121(0,0,pidLoc,1))
		if $$$WWW0121OnlyTrackPrograms(objLoc) {
			set blnOnlyTrackPrograms = $$$YES
		}
	}
	kill parrPolicyList
	set objResultSet = ##class(%Library.ResultSet).%New()
	
	if objResultSet.Prepare("SELECT Attribute, Optional FROM alINV.dPolicyAttribute WHERE ItemPolicy = ?") {
		if objResultSet.Execute(pidPolicy) {
			while objResultSet.Next() {
				set strAttribute=objResultSet.Data("Attribute")
				if ('blnOnlyTrackPrograms)||(blnOnlyTrackPrograms && (strAttribute="Program")) {
					set parrPolicyList(strAttribute)=objResultSet.Data("Optional")
				}
			}
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="VerifyAttributes">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;parrAttributes:alSYS.dt.dtString,&amp;parrRequiredAttr:alSYS.dt.dtString,&amp;plstMissing:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtBoolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Verifies that the attributes passed in match what is required
	; for a list of Attributes - for an Item Policy
	; 
	; Returns: Boolean (if match is OK)
	; 
	; 
	; History:
	; 09-Oct-2013	SCR		CORE-266: Handle optional fields
	; 26-Sep-2013	SCR		CORE-266: Pass Back Missing Attributes, Comma delimeted List
	; 11-Sep-2013	SCR		CORE-266: Clear out unused Attributes
	; 15-May-2009	GRF		SR16441: Changed parrRequiredAttr name to differentiate
	; 							more clearly
	; 04-May-2009	PPP		SR16441: Created
	;-------------------------------------------------------------------------------
	set blnOK = $$$YES
	set plstMissing=""
	set strAttr = ""
	for {
		set strAttr = $order(parrRequiredAttr(strAttr))
		quit:strAttr=""
		
		continue:parrRequiredAttr(strAttr)=1 ; Optional 
		
		if $get(parrAttributes(strAttr))="" {
			set blnOK = $$$NO
			set:plstMissing'="" plstMissing = plstMissing_","
			set plstMissing	= plstMissing_strAttr
		}
	}
	set strAttr = ""
	for {
		set strAttr = $order(parrAttributes(strAttr))
		quit:strAttr=""
		
		if '$data(parrRequiredAttr(strAttr)) {
			kill parrAttributes(strAttr) ; Clear out unused.  (This use from moving a Bundle from Lot Controlled to Non Lot Controlled
		}
	}
	quit blnOK
]]></Implementation>
</Method>

<Method name="GetReservedLots">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="&quot;,&amp;parrReserved:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	//GetReservedLots^INARTMENGE(pidItem,&parrReserved,pidLocn="")
	;-------------------------------------------------------------------------------
	; Return an array of lots (" " = none) that have a reservations (alDRP.dPlannedMovement)
	; (LotNumber and expiry)
	; 
	; pidItem      = the Item
	; pidLocn      = return details for specific location only
	; parrReserved = array to pass back
	; 
	; Returns:
	; 	error code on failure
	; 	
	; History:
	; 22-May-2009	PPP		SR16565: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	if (pidLocn '= "") {  
		set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement.GetReservedForLocn")
		set sc = objResultSet.Execute(pidItem,pidLocn)
	
	} else {
		set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement.GetAllReserved")
		set sc = objResultSet.Execute(pidItem)
	}
	if $$$ISOK(sc) {
		while (objResultSet.Next(.sc)) {

			set idBundle = objResultSet.Data("Bundle")
			
			continue:idBundle=""
						
			if '$data(arrBundle(idBundle)) {      ; First instance of bundle - get and preserve attribute values
				set strLotNumber = ..GetLotNumber(idBundle)
				if strLotNumber="" set strLotNumber=" "             ; SR16256
				//quit:'$$$ISOK(sc)
				set arrBundle(idBundle,"LotNumber") = strLotNumber
				
			} else {                               ; Bundle has been used before
				set strLotNumber = $get(arrBundle(idBundle,"LotNumber"))
			}
 
			set strStorage = objResultSet.Data("FromLocn")_"||"_objResultSet.Data("Storage")
			set intQty     = objResultSet.Data("QtyRequired")
			
			// This should not happen if there is only one lot number per item!
			set intQty     = intQty+$get(parrReserved(pidItem,strStorage,strLotNumber))
			
			set parrReserved(pidItem,strStorage,strLotNumber) = intQty
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetReservedForNo">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="&quot;,pidReference:alSYS.dt.dtString="&quot;,&amp;parrReserved:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Return an array of lots (" " = none) that have a reservations (alDRP.dPlannedMovement)
	; based on a given Reserved ID
	; 
	; pidItem = the Item
	; pidLocn = return details for specific location only
	; pidReference
	; parrReserver = array to pass back
	; 
	; Returns:
	; 	error code on failure
	; 	
	; History:
	; 17-Nov-2009	PPP		SR16762: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	if (pidLocn '= "") {
		set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement.GetReservedForLocn")
		set sc = objResultSet.Execute(pidItem,pidLocn)
	
	} else {
		set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement.GetAllReserved")
		set sc = objResultSet.Execute(pidItem)
	}
	if $$$ISOK(sc) {
		while (objResultSet.Next(.sc)) {
			set idBundle    = objResultSet.Data("Bundle")
			set idReference = objResultSet.Data("Reference")
			
			continue:idBundle=""
			if pidReference'="" {
				continue:idReference'=pidReference
			}
			 			
			set idStorage = objResultSet.Data("Storage")
			set intQty    = objResultSet.Data("QtyRequired")
			set strKey    = idBundle_"~"_idStorage
		
			// This should not happen if there is only one lot number per item!
			set intQty    = intQty + $get(parrReserved(pidItem,strKey))
			
			set parrReserved(pidItem,strKey) = intQty
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetStockByItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="&quot;,&amp;arrBundleStock:alSYS.dt.dtString,blnUseByDate:%Boolean=1</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	//GetStockByItem^INARTMENGE(pidItem,&arrBundleStock,pidLocn="")
	;-------------------------------------------------------------------------------
	; Obtain a list of stock with 2 attributes
	; (Lot Number, Expiry Date and Bundle ID)
	; 
	; pidLocn = return details for specific location only
	; 
	; Returns:
	; 	Error code on failure
	; 	
	; History:
	; 
	; 22-May-2009	PPP		SR16565: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	kill arrBundleStock
	
	set sc = ..GetReservedLots(pidItem,pidLocn,.arrReserved)

	if $$$ISOK(sc) {
		// Get stock details for specific location only
		if (pidLocn '= "") {  	
			set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetAllLocnBundlesByPick")
			set sc = objResultSet.Execute(pidItem,pidLocn)
		
		} else {
			set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetAllBundlesByPick")
			set sc = objResultSet.Execute(pidItem)
		}

		if $$$ISOK(sc) {
			while (objResultSet.Next(.sc)) {
				set idBundle   = objResultSet.Data("Bundle")
				set strStorage = objResultSet.Data("Storage")
			
				set blnBlocked = $$$NO 				
				&sql(
					select StorageIsBlocked into :blnBlocked
				    from alLOC.dStorage
				    where id = :strStorage
				)				
				continue:(blnBlocked = $$$YES)
	 			
	 			//Lot No
				set strLotNumber = objResultSet.Data("LotNumber")
				if strLotNumber="" set strLotNumber=" "
				
				//UsebyDate
				set strUseByDate = objResultSet.Data("UseByDate")
				if strUseByDate'="" {    //Check if Expired
					if blnUseByDate continue:($horolog>strUseByDate)
					set strUseByDate = $$^WWWDATE(strUseByDate)
				}
				
				//QOH
				set intQty = objResultSet.Data("QtyOnHand")
				
				// This should not happen if there is only one lot number per item!
				set intQty = intQty+$get(arrBundleStock(pidItem,strStorage,strLotNumber)) 
				
				if $data(arrReserved(pidItem,strStorage,strLotNumber)) {
					set intQty = intQty-$get(arrReserved(pidItem,strStorage,strLotNumber)) ; Less reserved
					kill arrReserved(pidItem,strStorage,strLotNumber)                      ; ensure that is only done once!
				}

				set strBundle = intQty
				if strUseByDate'="" {
					set strBundle = intQty_"+"_strUseByDate
				}
				set $piece(strBundle,"+",3)=idBundle
				
				set arrBundleStock(pidItem,strStorage,strLotNumber) = strBundle
			}
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetBundlesForLot">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLoc:alLOC.dLocation,pstrLotNumber:alSYS.dt.dtString="&quot;,&amp;parrLotBundles:alSYS.dt.dtString,&amp;pdteExpiry:alSYS.dt.dtDate,blnUseByDate:%Boolean=1</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get Bundles and Qtys for an Item
	; 	
	; Returns
	;  alSYS.dt.dtStatus
	;  ByRef parrBundles 
	;  
	; History:
	; 20-Nov-2009	SCR		SR16947: Check for Lot number
	; 20-Jul-2009	SCR		SR16773: Return Expiry Date
	; 22-May-2009	PPP		SR16565: Created
	;-------------------------------------------------------------------------------
	kill parrLotBundles

	set Y="~"
	set sc = ..GetItemAttributes(pidItem, .arrAttributes)
	set pdteExpiry = ""

	if $$$ISOK(sc) {
		set sc = ..GetStockByItem(pidItem, pidLoc, .arrBundle, blnUseByDate)

		set idStorage = ""
		for {
			set idStorage = $order(arrBundle(pidItem,idStorage))
			quit:idStorage=""
			
			set strLot = ""
			for {
				set strLot = $order(arrBundle(pidItem,idStorage,strLot))
				quit:strLot=""

				//only quit if it is not a Lot Controlled Product and Lot does not
				//match defined Lot parameter.
				//Non-Lot Number Products will have no check done
				continue:((strLot'=pstrLotNumber) && $data(arrAttributes("Lot Number")))
				
				set strBundle = $get(arrBundle(pidItem,idStorage,strLot))
				set fltQty    = $piece(strBundle,"+",1)
				set strDate   = $piece(strBundle,"+",2)
				set idBundle  = $piece(strBundle,"+",3)
				
				set dteDate = 10000
				if strDate'="" {
					set dteDate    = $zdateh(strDate,4)
					set pdteExpiry = dteDate
				}
				
				// Force -ve stock to the end of the list by adding 27 years to the expiry date!
				if fltQty<0 {
					set dteDate = dteDate+10000 
				}
				
				set strKey = idBundle_Y_$piece(idStorage,"||",2)
				set parrLotBundles(pidItem,strKey) = fltQty
			}
		}
	}
	if $$$ISOK(sc) {  ;; SR16947
		if ($data(arrAttributes("Lot Number")) && ('$data(parrLotBundles)) && (pstrLotNumber'="")) {
			set sc = $$$ERROR($$$GeneralError,$$$Text($listbuild("alS00001",pstrLotNumber)))  ;No Stock for Lot %1
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetLotNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidBundle:alSOH.dBundle,&amp;sc:alSYS.dt.dtStatus</FormalSpec>
<ReturnType>alSYS.dt.dtString</ReturnType>
<Implementation><![CDATA[
	//GetLotNumber^INARTMENGE(pidItem,pstrLot,&pstrStatus)
	;-------------------------------------------------------------------------------
	; Get LotNumber for a Bundle
	; 
	; pidBundle = Bundle ID
	; 
	; Returns:
	; 	LotNumber if there is one
	; 	
	; History:
	; 22-May-2009	PPP		SR16565: Created
	;-------------------------------------------------------------------------------
	set strLot=""
	
	&sql(
		select LotNumber 
		into :strLot
		from alSOH.dBundle
		where (%ID = :pidBundle)
	)
	
	if 'SQLCODE {
		set sc = $$$OK
	} else {
		set sc = $system.Status.Error(5001,"Invalid Bundle ID")
	
	}
	quit strLot
]]></Implementation>
</Method>

<Method name="GetUseByDate">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidBundle:alSOH.dBundle,&amp;sc:alSYS.dt.dtStatus</FormalSpec>
<ReturnType>alSYS.dt.dtInteger</ReturnType>
<Implementation><![CDATA[
	//GetUseByDate(pidItem,pstrLot,&pstrStatus)
	;-------------------------------------------------------------------------------
	; Get Expiry Date for a Bundle (in Horolog format)
	; 
	; pidBundle = Bundle ID
	; 
	; Returns:
	; 	UseByDate if there is one (In $horolog format)
	; 	
	; History:
	; 22-May-2009	PPP		SR16565: Created
	;-------------------------------------------------------------------------------
	set dteUseBy = ""
	
	&sql(
		select UseByDate
		into :dteUseBy
		from alSOH.dBundle
		where (%ID = :pidBundle)
	)
	
	if 'SQLCODE {
		set sc = $$$OK
	} else {
		set sc = $system.Status.Error(5001,"Invalid Bundle ID")
	
	}
	quit dteUseBy
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
// ***************************************************************************************************************

</Content>
</UDLText>

<UDLText name="T">
<Content>
// ******************************************   METHODS WHICH USE ALL ATTRIBUTES *********************************

</Content>
</UDLText>

<UDLText name="T">
<Content>
// ***************************************************************************************************************

</Content>
</UDLText>


<Method name="GetReservedByAtt">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="&quot;,&amp;parrReserved:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	//GetReservedLots^INARTMENGE(pidItem,&parrReserved,pidLocn="")
	;-------------------------------------------------------------------------------
	; Return an array of lots (" " = none) that have a reservations (alDRP.dPlannedMovement)
	; (LotNumber and expiry)
	; 
	; pidItem = the Item
	; parrReserver = arrar to pass back
	; pidLocn = return details for specific location only
	; 
	; Returns:
	; 	error code on failure
	; 	
	; History:
	; 22-May-2009	PPP		SR16565: Created
	;-------------------------------------------------------------------------------
	#define DELIM "~"
	
	kill parrReserved

	set sc = $$$OK
	
	if (pidLocn '= "") {  
		set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement.GetReservedForLocn")
		set sc = objResultSet.Execute(pidItem,pidLocn)
	} else {
		set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement.GetAllReserved")
		set sc = objResultSet.Execute(pidItem)
	}
	if $$$ISOK(sc) {
		while (objResultSet.Next(.sc)) {
			set idBundle = objResultSet.Data("Bundle")
			continue:idBundle=""
						
			if '$data(arrBundle(idBundle)) {      ; First instance of bundle - get and preserve attribute values
				kill arrBundleAtt
				set sc = ..GetAttributesForBundle(idBundle, .arrBundleAtt)
				//quit:'$$$ISOK(sc)
				
				set strAttrib = ""
				for idAttrib = "Lot Number","Brand","Owner","Program" {
					//Ist one no delimiter
					if idAttrib = "Lot Number" {
						set strAttrib = $get(arrBundleAtt(idAttrib))
					} else {
						set strAttrib = $get(strAttrib)_$$$DELIM_$get(arrBundleAtt(idAttrib))
					}
				}
				set arrBundle(idBundle,"Attrib")=strAttrib
				
			} else {                               ; Bundle has been used before
				
				set strAttrib = $get(arrBundle(idBundle,"Attrib"))
			}
 
			set strStorage = objResultSet.Data("FromLocn")_"||"_objResultSet.Data("Storage")
			set intQty     = objResultSet.Data("QtyRequired")
			
			// This should not happen if there is only one lot number per item!
			set intQty     = intQty+$get(parrReserved(pidItem,strStorage_$$$DELIM_strAttrib))
			
			set parrReserved(pidItem,strStorage_$$$DELIM_strAttrib) = intQty
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetStockByItemAttrib">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLocn:alLOC.dLocation="&quot;,pblnIncResv:alSYS.dt.dtBoolean=0,&amp;arrBundleStock:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	//GetStockByItem^INARTMENGE(pidItem,&arrBundleStock,pidLocn="")
	;-------------------------------------------------------------------------------
	; Obtain a list of stock with attributes
	; (Lot Number, Brand, Owner, Program, Expiry Date and Bundle ID)
	; 
	; pidLocn = return details for specific location only
	; 
	; Returns:
	; 	Error code on failure, sc
	; 	
	; History:
	; 
	; 17-Nov-2009	PPP		SR16762: New parameter - Include Reservations
	; 23-Jun-2009	PPP		SR16565: Created
	;-------------------------------------------------------------------------------
	#define DELIM "~"

	set sc = $$$OK
	
	kill arrBundleStock
	
	//SR16762
	if 'pblnIncResv {
		set sc = ..GetReservedByAtt(pidItem,pidLocn,.arrReserved)
	}
	
	if $$$ISOK(sc) {

		// Get stock details for specific location only
		if (pidLocn '= "") {  	
			set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetAllLocnBundleAttByPick")
			set sc = objResultSet.Execute(pidItem,pidLocn)
		} else {
			set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetAllBundlesByPick")
			set sc = objResultSet.Execute(pidItem)
		}

		if $$$ISOK(sc) {
			while (objResultSet.Next(.sc)) {
				set idBundle   = objResultSet.Data("Bundle")
				set strStorage = objResultSet.Data("Storage")
			
				set blnBlocked = $$$NO 				
				&sql(
					select StorageIsBlocked into :blnBlocked
					from alLOC.dStorage
					where id = :strStorage
				)				
				continue:(blnBlocked = $$$YES)
	 			
				set strLotNumber = objResultSet.Data("LotNumber")
			//	if strLotNumber="" set strLotNumber = " "
				
				set strUseByDate = objResultSet.Data("UseByDate")
				if strUseByDate'="" {   //Check if Expired
					continue:($horolog>strUseByDate)
					set strUseByDate = $$^WWWDATE(strUseByDate)
				}
	 			
				set strBrand   = objResultSet.Data("Brand")
				set strOwner   = objResultSet.Data("Owner")
				set strProgram = objResultSet.Data("Program")
				set strAttrib  = strStorage_$$$DELIM_strLotNumber_$$$DELIM_strBrand_$$$DELIM_strOwner_$$$DELIM_strProgram
				set intQty     = objResultSet.Data("QtyOnHand")
				
				// This should not happen if there is only one lot number per item!
				set intQty = intQty+$get(arrBundleStock(pidItem,strAttrib)) 
				
				if $data(arrReserved(pidItem,strAttrib)) {
					set intQty = intQty-$get(arrReserved(pidItem,strAttrib)) ; Less reserved
					kill arrReserved(pidItem,strAttrib)                      ; ensure that is only done once!
					//write !,"Res:",strAttrib,":",intQty
				}

				set strBundle=intQty
				if strUseByDate'="" {
					set strBundle = intQty_"+"_strUseByDate
				}
				set $piece(strBundle,"+",3) = idBundle
			//	write !,strAttrib,":",intQty
				set arrBundleStock(pidItem,strAttrib) = strBundle
			}
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetBundlesForItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidItem:alINV.dItem,pidLoc:alLOC.dLocation,pstrLotNumber:alSYS.dt.dtString="&quot;,pstrBrand:alSYS.dt.dtString="&quot;,pstrOwner:alSYS.dt.dtString="&quot;,pstrProgram:alSYS.dt.dtString="&quot;,pblnIncResv:alSYS.dt.dtBoolean=0,&amp;parrLotBundles:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get Bundles and Qtys for an Item based on all the Attributes for the Item
	; 	
	; Returns
	;  alSYS.dt.dtStatus
	;  ByRef parrBundles 
	;  
	; History:
	; 17-Nov-2009	PPP		SR16762: New parameter - Include Reservations
	; 23-Jun-2009	PPP		SR16565: Created
	;-------------------------------------------------------------------------------
	#define DELIM "~"
	
	kill parrLotBundles
	
	set Y  = "~"
	set sc = ..GetItemAttributes(pidItem,.arrAttributes)
	
	if $$$ISOK(sc) {
		set sc = ..GetStockByItemAttrib(pidItem,pidLoc,pblnIncResv,.arrBundle)  //SR16762
		set strAttrib = ""
		for {
			set strAttrib = $order(arrBundle(pidItem,strAttrib))
			quit:strAttrib=""
			
			set idStorage  = $piece(strAttrib,$$$DELIM,1)
			set strLot     = $piece(strAttrib,$$$DELIM,2)
			set strBrand   = $piece(strAttrib,$$$DELIM,3)
			set strOwner   = $piece(strAttrib,$$$DELIM,4)
			set strProgram = $piece(strAttrib,$$$DELIM,5)

			if (pstrLotNumber '= "") && $data(arrAttributes("Lot Number")) {
				continue:strLot'=pstrLotNumber
			}
			if (pstrBrand '= "") && $data(arrAttributes("Brand")) {
				continue:strBrand'=pstrBrand
			}
			if (pstrOwner '= "") && $data(arrAttributes("Owner")) {
				continue:strOwner'=pstrOwner
			}
			if (pstrProgram '= "") && $data(arrAttributes("Program")) {
				continue:strProgram'=pstrProgram
			}
				
			set strBundle = $get(arrBundle(pidItem,strAttrib))
			set fltQty    = $piece(strBundle,"+",1)
			set strDate   = $piece(strBundle,"+",2)
			set idBundle  = $piece(strBundle,"+",3)
			
			set dteDate = 10000
			if strDate'="" {
			//	set dteDate = $zdateh(strDate,4)
				set dteDate = $$^WWWDATE1(strDate)
			}
			
			// Force -ve stock to the end of the list by adding 27 years to the expiry date!
			if fltQty<0 {
				set dteDate = dteDate + 10000 
			}
			
			set strKey = idBundle_Y_$piece(idStorage,"||",2)
			set parrLotBundles(pidItem,strKey) = fltQty
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetAttributesForBundle">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidBundle:alSOH.dBundle,*parrArributes:alSYS.dt.dtString</FormalSpec>
<ReturnType>alSYS.dt.dtStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Get the valid attributes/values  for a given Item SOH Bundle
	; 
	; Returns: 	Status
	;  			ByRef parrArributes - List of valid attributes/values
	; 
	; History:
	; 22-Jun-2009	PPP	SR16510: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	kill parrArributes
	
	set objResultSet = ##class(%Library.ResultSet).%New()
	
	if objResultSet.Prepare("SELECT AttributeName, AttributeValue FROM alSOH.dBundleAttribute WHERE Bundle = ?") {
		if objResultSet.Execute(pidBundle) {
			while objResultSet.Next() {
				set parrArributes(objResultSet.Data("AttributeName")) = objResultSet.Data("AttributeValue")
			}
		}
	}
	quit sc
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
// ***************************************************************************************************************

</Content>
</UDLText>

<UDLText name="T">
<Content>
// **************************************   END METHODS WHICH USE ALL ATTRIBUTES *********************************

</Content>
</UDLText>

<UDLText name="T">
<Content>
// ***************************************************************************************************************

</Content>
</UDLText>

<UDLText name="T">
<Content>
// End of Class

</Content>
</UDLText>
</Class>
</Export>