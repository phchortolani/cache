<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsLogTablePane">
<Description><![CDATA[
Specialized pane for displaying a list of log items.]]></Description>
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>CSPX.SQLQueryPane</Super>
<System>3</System>

<Parameter name="IDCOL">
<Description><![CDATA[
Name of ID Column if "More Data" link is to be offered ($NextID variable must be supported in CreateResultSet() also)]]></Description>
<Default>ID</Default>
</Parameter>


<Method name="CreateResultSet">
<FormalSpec>&amp;pID:%String,&amp;pRS:%ResultSet</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#define fixTime(%d)		$S(""=$ZStrip(%d,"*WC"):"",%d[" ":%d,%d["-":%d,1:$P($ZDT($H,3)," ")_" "_%d)
	Set tSC = $$$OK
	
	#; if not an explicit execute request (or history), skip it
	If ($G(^Ens.Debug("DelayQueries"))&&'$D(%request.Data("$EXEC",1))) {
		Set pRS = ""
		Quit $$$OK
	}
	Set tNextId=$G(%request.Data("$NextID",1))

	#; get request parms via object
	Set tRequest = ##class(CSPX.EnsLogFilterForm).CreateInstance(.pID)
	Set maxRows = tRequest.MaxRows
	Set:(+maxRows<=0) maxRows = 100
	Set ..MaxResults = maxRows

	Set dateLen = 12
	Set:tRequest.TimeFormat'="" dateLen = tRequest.TimeFormat

	Set select = "SELECT ID, {fn RIGHT(%EXTERNAL(TimeLogged),"_dateLen_" )} As TimeLogged,TraceCat,Type,Job,SessionId As Session,ConfigName As Source,(SourceClass || '.' || SourceMethod || '()') As Method,Text,Stack"

	Set where = ""
	If (tRequest.Assert||tRequest.Error||tRequest.Warning||tRequest.Info||tRequest.Trace||tRequest.Alert) {
		Set dtypes=""
		Set:tRequest.Assert dtypes = dtypes_",'Assert'"
		Set:tRequest.Error dtypes = dtypes_",'Error'"
		Set:tRequest.Warning dtypes = dtypes_",'Warning'"
		Set:tRequest.Info dtypes = dtypes_",'Info'"
		Set:tRequest.Trace dtypes = dtypes_",'Trace'"
		Set:tRequest.Alert dtypes = dtypes_",'Alert'"
		Set where = where_" AND Type IN ("_$E(dtypes,2,*)_")"
	}
	Set tStartId = tRequest.StartId, tEndId = tRequest.EndId
	Set:tStartId>tEndId&&(""'=tEndId) tStartId = tRequest.EndId, tEndId = tRequest.StartId
	If ""'=tNextId { ; support subsequent pages of message results
		If tRequest.SortOrder=2 { ; Descending
			Set:tNextId<tEndId||(""=tEndId) tEndId=tNextId }
		Else { Set:tNextId>tStartId tStartId=tNextId }
	}
	If (tStartId '= "") {
		Set where = where_" AND %ID >= '"_tStartId_"'"
	}
	If (tEndId '= "") {
		Set where = where_" AND %ID <= '"_tEndId_"'"
	}
	If (tRequest.StartTime '= "") {
		Set where = where_" AND TimeLogged >= '"_$$$fixTime(tRequest.StartTime)_"'"
	}
	If (tRequest.EndTime '= "") {
		Set where = where_" AND TimeLogged <= '"_$$$fixTime(tRequest.EndTime)_"'"
	}
	If (tRequest.SessionId '= "") {
		Set where = where_" AND SessionId = '"_tRequest.SessionId_"'"
	}
	If (tRequest.Source '= "") {
		If (tRequest.Source [ "%") {
			Set where = where_" AND ConfigName LIKE '"_tRequest.Source_"'"
		} Else {
			Set where = where_" AND ConfigName = '"_tRequest.Source_"'"
		}
	}
	If (tRequest.Method '= "") {
		If (tRequest.Method [ "%") {
			Set where = where_" AND (SourceClass || '.' || SourceMethod || '()') LIKE '"_tRequest.Method_"'"
		} Else {
			Set where = where_" AND SourceClass = '"_$P(tRequest.Method,".",1,$L(tRequest.Method,".")-1)_"' AND SourceMethod = '"_$P($P(tRequest.Method,".",$L(tRequest.Method,".")),"(")_"'"
		}
	}
	If (tRequest.Job '= "") {
		Set where = where_" AND Job = '"_tRequest.Job_"'"
	}
	If (tRequest.Text '= "") {
		Set where = where_" AND Text [ '"_tRequest.Text_"'"
	}

	Set order = " ORDER BY %ID"
	Set:tRequest.SortOrder=2 order = order_" Desc"
	
	Set:where'="" where = " WHERE "_$E(where,$L("AND ")+1,*)

	Set pRS = ##class(%ResultSet).%New()
 w:$G(^Ens.Debug("UtilEnsLog","sql")) !,select_" FROM Ens_Util.Log "_where_order,!
	Quit pRS.Prepare(select_" FROM Ens_Util.Log "_where_order)
]]></Implementation>
</Method>

<Method name="GetColorByColumn">
<Description><![CDATA[
Subclass can override this to specify the name of column used 
to distinctly color rows]]></Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $G(%session.Data("EnsLogFilterForm","ColorBy",1))
]]></Implementation>
</Method>

<Method name="GetColumnWidths">
<FormalSpec>pWidthArray</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set pWidthArray(2)=13, pWidthArray(2,"breakchars"," ")=""
	Set pWidthArray(8)=32, pWidthArray(8,"breakchars",".")="", pWidthArray(8,"breakchars","(")=""
	Quit ""
]]></Implementation>
</Method>

<Method name="GetToolTips">
<FormalSpec>&amp;pValues,&amp;pTips</FormalSpec>
<Implementation><![CDATA[
	// The SQL query seems to return this as a CR/LF delimited list rather than a $LIST
	If $TR(pValues(10),$C(0)) '= "" {
		Set pTips(8) = $TR(pValues(10),":")
	}
]]></Implementation>
</Method>

<Method name="GetLinks">
<FormalSpec>&amp;pValues,&amp;pLinks</FormalSpec>
<Implementation><![CDATA[
	If $TR(pValues(6),$C(0)) '= "" {
		Set pLinks(6) = "UtilEnsMsgTrace.csp?$ID1="_pValues(6)
	}
]]></Implementation>
</Method>

<Method name="FilterPostRS">
<Description><![CDATA[
Apply additional filter criteria to determine whether to display the current row returned by the ResultSet
Return value 1 means display the current row]]></Description>
<FormalSpec>pRS:%ResultSet,&amp;pPropVals,level=1,tNode="1&quot;,pInOR=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set tType=pRS.Data("Type")
	Set:"Trace"=tType&&$D(pRS.Data("TraceCat"),tCat)&&$Case(tCat,"":0,$C(0):0,:1) pPropVals("Type")=tType_" ("_tCat_")"
	Quit 1
]]></Implementation>
</Method>
</Class>
</Export>