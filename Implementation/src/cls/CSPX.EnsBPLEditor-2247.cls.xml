<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="CSPX.EnsBPLEditor">
<Description><![CDATA[
Renders HTML wrapper for BPL editor as loaded by Studio]]></Description>
<IncludeCode>Ensemble</IncludeCode>
<Super>%CSP.Page</Super>
<System>3</System>

<Parameter name="DOMAIN">
<Description><![CDATA[
Use our own domain for localization]]></Description>
<Default>Ensemble</Default>
</Parameter>


<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	// force output to be UTF-8
	Set %response.CharSet="UTF-8"

	// prevent session blocking
	Do %session.Unlock()
 	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ..DrawHTMLHead()
	
	// draw body

	Set tStart = $ZH
	&html<<body>>
	
	// set up hyper-event frame for this page
	Write ..HyperEventFrame(),!

	// Define feedback sounds for activities
	If '+$G(^Ens.SilentBPL,1) { &html<<bgsound id="bgsound" src='' loop='1'/>> }

	&html<
<script language='JavaScript'>checkAndGetSVGViewer();</script>
<xml id='initialState'>>

	// write out XML version of diagram
	Set tName = $G(%request.Data("$ID1",1))
	Set tTime = $G(%request.Data("LASTMOD",1))
	
	Do ..DrawBPL(tName,tTime)

	&html<
</xml>
<div id='loading' align='center' style='color: blue; font-size: 12pt; font-family: courier new'>Generating BPL Diagram...</div>
<xml id='results'></xml>
<embed id='SVGEmbed' name='SVGEmbed' type='image/svg-xml'
	src='#(..Link("CSPX.EnsBPLSVG.cls"))#'
	height='2000' width='2000'
	>>

	Write "<!-- ",$ZH-tStart," -->",!

	&html<</body></html>
	>	

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawHTMLHead">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
<html><head>>

	// set up hyper-event for this page
	Write ..HyperEventHead(),!

	&html<
<style>
body { margin: 0px; padding: 0px; background: #EEEEEE; }
</style>
<script language='JavaScript' src='svgcheck.js'></script>
<script language='VBScript' src='svgcheck.vbs'></script>
<script language='javascript'>

function playSound(mode) {
	var sound = self.document.getElementById('bgsound');
	if (sound) {
		switch(mode) {
		case 'connect':
			sound.src = '/csp/broker/images/bplconnect.wav';
			break;
		case 'drill':
			sound.src = '/csp/broker/images/bpldrill.wav';
			break;
		case 'delete':
		case 'disconnect':
			sound.src = '/csp/broker/images/bpldisconnect.wav';
			break;
		}
	}
}

function document_save() {
	self.getCanvas().invokeOperation('saveDiagram',null);
}
function document_open(state) {
	self.getCanvas().invokeOperation('openDiagram',state);
}
function document_delete() {
	self.getCanvas().invokeOperation('deleteItem',null);
}
function document_arrange() {
	self.getCanvas().invokeOperation('arrangeShapes',null);
}
function document_listItems(type) {
	self.getCanvas().invokeOperation('listItems',type);
}
function document_cut() {
	self.getCanvas().invokeOperation('cutItem',null);
}
function document_undo() {
	self.getCanvas().invokeOperation('undo');
}
function document_canUndo() {
	self.getCanvas().invokeOperation('canUndo');
}
function document_isModified() {
	self.getCanvas().invokeOperation('isModified');
}
function document_redo() {
}
function document_copy() {
	self.getCanvas().invokeOperation('copyItem',null);
}
function document_paste() {
	self.getCanvas().invokeOperation('pasteItem',null);
}
function document_createShape(shapename) {
	self.getCanvas().invokeOperation('createShape',shapename);
}
function document_getZoom() {
	self.getCanvas().invokeOperation('getZoom');
}
function document_setZoom(zoom) {
	self.getCanvas().invokeOperation('setZoom',zoom);
}
function document_getDiagramInfo() {
	self.getCanvas().invokeOperation('getDiagramInfo');
}
function document_setReadOnly(ro) {
	self.getCanvas().invokeOperation('setReadOnly',ro);
}
function document_getProperty(prop) {
	self.getCanvas().invokeOperation('getProperty',prop);
}
function document_setProperty(prop, val) {
	self.getCanvas().invokeOperation('setProperty',prop,val);
}
function getCanvas() {
	return self.document.getElementById('SVGEmbed').getSVGDocument().getElementById('canvas');
}
var extCounter = 0;
function raiseEvent(type) {
	self.document.title = type + ':' + extCounter++;
}

// Tell studio to open another document
function openDocument(docname)
{
	self.document.getElementById('results').innerHTML = docname;
	raiseEvent("OPENDOC");
}

// functions to display HTML dialog windows

/// display the BPL Activity Wizard dialog
function document_showActivityWizard(diagram,type,bpContext)
{
	// set up parms
	var parms = new Object();
	var context = document_showWizard(diagram,type,bpContext,'',parms);
	return context;

	if (context && context.returnValue) {
		 return context;
	}
	
	return null;
}

/// Show the BPL wizard dialog;
/// parms is an associative array of addition arguments to pass
/// to the dialog;
/// Returns the context object that was passed to the dialog.
/// mode is 'new', 'edit', etc.
function document_showWizard(diagram,type,bpContext,data,parms)
{
	var plist = '';
	if (null != parms) {
		for (var p in parms) {
			plist += '&' + p + '=' + escape(parms[p]);
		}
	}

	return launchPopupWindow(diagram,'CSPX.EnsBPLWizard.cls?TYPE='+type+'&DATA='+escape(data)+'&LANG='+escape(diagram.language)+ '&BPCONTEXT=' + escape(bpContext) + plist,type);
}

function launchPopupWindow(diagram,url,type)
{
	// We must dig out the CSPCHD value from the current location so that the popup keeps the context
	var cspchd = null;
	var params = self.document.location.href.split("?");

	if (params.length > 1) {
		params = params[1].split("&")
		for (var p in params) {
			plist = params[p].split("=");
			if (plist[0] == 'CSPCHD') {
				cspchd = plist[1];
			}
		}
	}
	
	// default page name
	var pageName = 'ensPopupWindow';

	// see if we need to provide size and position
	var wid = self.screen.width;
	var hgt = self.screen.height;
	wid = wid * 0.8;
	hgt = hgt * 0.8;
	var top = self.screen.height * 0.1;
	var left = self.screen.width * 0.1;
	
	if ('test' != type) {
		wid = 500;
		hgt = 500;
	}

	var features = 'dialogHeight: '+hgt+'px; dialogWidth: '+wid+'px; dialogTop: '+top+'px; dialogLeft: '+left+'px; edge: Raised; center: Yes; help: Yes; resizable: Yes; status: No;';

  	var id = '';
  	var questionmark = url.split("?");
  	var page;
  	if (questionmark.length > 1) {
	  	page = escape(questionmark[0]) + "?" + questionmark[1];
	  	page = page + "&" + id;
  	}
  	else {
		page = escape(url) + "?" + id;
  	}
  	
  	// Append the CSPCHD (if we found one)
  	if (null != cspchd) {
	  	page = page + "&CSPCHD=" + cspchd;
  	}

	// create popup window

	// test for IE modal dialog
	if (window.showModalDialog) {
		// construct and pass a context along as dialogArgument
		var context = new Object();
		context.diagram = diagram;
		context.returnValue = null;
		var ret = window.showModalDialog(page,context,features);
		return context;
	}

	alert('attempt to use BPL Editor in non-IE context');
	var popup = window.open(page,pageName,features);
	popup.focus();

	// remember popup window in our window
	self.popupWindow = popup;
}
</script>>

	// write out methods that perform the hyper-calls
	Write "<script language=""javascript"">",!
	Write "function getTargetClass(target)",!
	Write "{",!
	Write ##class(%CSP.Page).HyperEventCall("CSPX.EnsBPLEditor.GetTargetClass","target",1)
 	Write ";",!
	Write "}",!
	Write "</script>",!

	&html<</head>>
]]></Implementation>
</Method>

<Method name="DrawBPL">
<Description><![CDATA[
Load the BPL diagram with the given name
write out XML version to current device]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String,pTime:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK

	Do {
		// see if this document exists
		// if not, we are creating a new document
		If ('##class(Ens.BPL.UI.BPLDocument).Exists(pName)) {
			// get default diagram
			Set tDiagram =  ##class(Ens.BPL.UI.Diagram).CreateNewDiagram(pName)
		}
		Else {
			// open existing diagram
			Set tCls = ##class(Ens.BPL.UI.BPLDocument).GetClassName(pName)

			// open diagram from Xdata block
			// (or from BPLError block as need be)
			Set tSC = ##class(Ens.BPL.UI.Diagram).Open(tCls, .tDiagram)
			If ($$$ISERR(tSC)) {
				Quit
			}
		
			// set our timestamp
			Set tDiagram.LastModified = pTime
		}

		Set tStream = ##class(%GlobalCharacterStream).%New()
		Do tDiagram.Serialize(tStream)
		Do tStream.OutputToDevice()
	} While(0)

Exit
	Quit tSC
Trap
	Set $ZT=""
	Goto Exit
]]></Implementation>
</Method>

<Method name="GetTargetClass">
<Description><![CDATA[
Called from client: find class name for given target, if possible.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTarget</FormalSpec>
<Implementation><![CDATA[
	// Find last known production name
	Set tProd = $G(^CacheTemp.BPLWizard("production"))
	If (tProd = "") {
		&js<alert('There is no default production name; You can set this using the Call Wizard.');>
		Quit
	}

	Set cls = ""
	// Find class name for given target
	&SQL(SELECT ClassName INTO :cls 
			FROM ENS_CONFIG.Item
			WHERE Production = :tProd AND Name = :pTarget)

	If ((SQLCODE'=0)||(cls = "")) {
		&js<alert('Unable to find this item within the default production: #(tProd)#\nYou can change the default production this using the Call Wizard.');>
	}
	Else {
		// See what kind of component this is
		If ($zobjclassmethod(cls,"%IsA","Ens.BusinessProcessBPL")) {
			Set ext = ".bpl"
		}
		Else {
			Set ext = ".cls"
		}
		&js<CSPPage.openDocument('#(cls_ext)#');>
	}
]]></Implementation>
</Method>
</Class>
</Export>