<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="VAR.data.import.VARSaidaImporter">
<ClassType/>
<IncludeCode>VARConst,INConst,WWWConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>AbstractImporter</Super>

<Parameter name="DEBUG">
<Type>%Integer</Type>
<Default>0</Default>
</Parameter>


<Method name="importFile">
<Description><![CDATA[
do ##class(VAR.data.import.VARSaidaImporter).importFile("SaidaParaConsumo.csv",0)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>arquivo:%String,pblnProcessa:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	if ($get(arquivo) = "") quit "Parãmetros obrigatórios (arquivo) não informados"
	
	quit ..import(##class(DirectoryFile).GetNamespaceSubdir("files")_arquivo)
]]></Implementation>
</Method>

<Method name="%OnNew">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..ignoreHeaderLine = 1
	if (..#DEBUG) set ..printProgress = 0
	$$$VAR
	
	set strStatus = $$$OK
	set strReqAnterior = ""
	set numSaida = ""
	set blnTemErro = $$$NO
	set blnTemErroReq = $$$NO
	set YBED = "SUPORTE.DASA172"
	TSTART
	
	quit ##super()
]]></Implementation>
</Method>

<Method name="process">
<FormalSpec>pintRegistros:%Integer,pstrLinha:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set $ztrap = "exceptionProc"
	
	set strAbast	= ..getField(pstrLinha, 1) // Abastecedor
	set strReq		= ..getField(pstrLinha, 2) // Requisitante 
	set strProduto	= ..getField(pstrLinha, 3) // Produto
	set strLote		= ..getField(pstrLinha, 4) // Lote
	set dtValidade	= ..getField(pstrLinha, 5) // Validade
	set fltQtde		= ..getField(pstrLinha, 6) // Quantidade
	
	; Gera uma nova saída caso o local requisitante anterior seja diferente do requisitante atual
	if (strReqAnterior '= strReq) {
		; Processa a requisição anterior
		if ((pblnProcessa) && ($get(numSaida) '= "") && (blnTemErroReq = $$$NO)) {
			set strStatus = $$ProcessaSaida^zzDASA172(numSaida)
		}
		
		set blnTemErroReq = $$$NO
		
		; Cria uma nova requisição
		set numSaida = $$CriaCabSaida^zzDASA172(strAbast,strReq)
		if ($find(numSaida,"EX") <= 0) {
			set strStatus = numSaida
			set blnTemErro = $$$YES
			quit strStatus
		}
		set strReqAnterior = strReq
		set numLinhaSaida = ""
	}
	
	// Registra erro caso o parâmetro não foi encontrado
	if ('$data(^INIssue(YM,numSaida,1))) {
		set strStatus = "Saída não " _ numSaida _ " foi encontrada."
		quit strStatus
	}
	set numLinhaSaida = $increment(numLinhaSaida)
	set strStatus = $$IncluiItemSaida^zzDASA172(numSaida,strProduto,strLote,dtValidade,fltQtde,numLinhaSaida)
	
	if (strStatus '= $$$OK) {
		set blnTemErroReq = $$$YES
		set blnTemErro = $$$YES
	}
	
finallyProc
	quit strStatus

exceptionProc
 	set $ztrap = ""
	set strStatus = $$$CUSTOMERROR($zerror)

	goto finallyProc
]]></Implementation>
</Method>

<Method name="finalize">
<Implementation><![CDATA[
	if (blnTemErro = $$$YES) {
		TROLLBACK
	}
	else {
		if ((pblnProcessa) && ($get(numSaida) '= "")) {
			set strStatus = $$ProcessaSaida^zzDASA172(numSaida) ; Processa o último saída
		}
		if (strStatus) {
			write !,"ok"
			TCOMMIT
		}
		else {
			TROLLBACK
			write !,"Falha ao processar a saída " _ numSaida
		}
	}
]]></Implementation>
</Method>
</Class>
</Export>