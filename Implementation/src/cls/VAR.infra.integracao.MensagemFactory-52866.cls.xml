<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.integracao.MensagemFactory">
<ClassType/>
<Import>VAR.common.soap,VAR.infra.util</Import>
<IncludeCode>INConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Parameter name="TIPORECEBIMENTO">
<Type>%String</Type>
<Default>RECEBIMENTO</Default>
</Parameter>


<Parameter name="TIPOTRANSFERENCIA">
<Type>%String</Type>
<Default>TRANSFERENCIA</Default>
</Parameter>


<Method name="CriaMensagem">
<ClassMethod>1</ClassMethod>
<FormalSpec>tipo:%String,chaveEntidade:%String</FormalSpec>
<ReturnType>Mensagem</ReturnType>
<Implementation><![CDATA[
	if (tipo = ..#TIPORECEBIMENTO) {
		quit ..CriaMensagemRecebimento(chaveEntidade)
	}
	elseif (tipo = ..#TIPOTRANSFERENCIA) {
		quit ..CriaMensagemTransferencia(chaveEntidade)
	}

	quit $$$NULLOREF
]]></Implementation>
</Method>

<Method name="CriaMensagemRecebimento">
<ClassMethod>1</ClassMethod>
<FormalSpec>chaveEntidade:%String</FormalSpec>
<ReturnType>Mensagem</ReturnType>
<Implementation><![CDATA[
	#dim mensagem as Mensagem
	new status

	set mensagem = ##class(Mensagem).%New()
	set mensagem.Cabecalho.mensagemID = chaveEntidade
	set mensagem.Cabecalho.servico = "NOTA_ESTOQUE"
	set status = ..PreencheCabecalho(.mensagem)
	set status = ..PreencheNotaFiscal(.mensagem)
	quit mensagem
]]></Implementation>
</Method>

<Method name="CriaMensagemTransferencia">
<ClassMethod>1</ClassMethod>
<FormalSpec>chaveEntidade:%String</FormalSpec>
<ReturnType>Mensagem</ReturnType>
<Implementation><![CDATA[
	#dim mensagem as Mensagem
	new status

	set mensagem = ##class(Mensagem).%New()
	set mensagem.Cabecalho.mensagemID = chaveEntidade
	set mensagem.Cabecalho.servico = "MOVIMENTO_ESTOQUE"
	set status = ..PreencheCabecalho(.mensagem)
	set status = ..PreencheMovimento(.mensagem)
	quit mensagem
]]></Implementation>
</Method>

<Method name="PreencheCabecalho">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;mensagem:Mensagem</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set mensagem.Cabecalho.versaoXML = "1"
	set mensagem.Cabecalho.dataHora = $zdatetime($horolog, 3, 1)
	set mensagem.Cabecalho.empresaOrigem = "Alphalinc"
	set mensagem.Cabecalho.sistemaOrigem = "ALPHALINC"
	set mensagem.Cabecalho.empresaDestino = "1"
	set mensagem.Cabecalho.sistemaDestino = "MV"
	set mensagem.Cabecalho.identificacaoCliente = " "
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="PreencheNotaFiscal">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;mensagem:Mensagem</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new chaveEntidade, objINREC, idINAUF, objINAUF, idLine, produto

	set chaveEntidade = mensagem.Cabecalho.mensagemID
	set ordemCompra = 1
	set objINREC = $get(^INREC(0, chaveEntidade, 1))
	set idINAUF = $$$INRECFREE10(objINREC)
	if ($length(idINAUF) = 0) {
		set ordemCompra = ""
		//quit "0 O Recebimento deve conter uma ordem de compra "_$$$INRECFREE10(objINREC)
	}
	elseif ('$data(^INAUF(0, idINAUF, 1))) {
		//quit "0 Ordem de compra '"_idINAUF_"' não encontrada"
		set ordemCompra = ""
	}
	if (ordemCompra=1){ 
		set objINAUF = $get(^INAUF(0, idINAUF, 1))
		set ordemCompra = $$$INAUFFREE29(objINAUF)
	}
	
	set mensagem.NotaFiscal.codigoOrdemCompra =ordemCompra
	// Número do documento deve ser numérico
	set mensagem.NotaFiscal.numeroDocumento = $translate(chaveEntidade, "/", "")
	set mensagem.NotaFiscal.numeroSerie = $$$INRECFREE3(objINREC)
	///	- <operacao> Deve ser enviado "I"
	set mensagem.NotaFiscal.operacao = "I"
	/// - <codigoEntradaProduto> Deve vir em branco
	set mensagem.NotaFiscal.codigoEntradaProduto = ""
    /// - <tipoEntrada> - "N" para Nota Fiscal, "D" para doação
	if (($$$INRECTypeofReceiving(objINREC) = 2) ||
		($$$INRECTypeofReceiving(objINREC) = 3) ||
		($$$INRECTypeofReceiving(objINREC) = 8) ||
		($$$INRECTypeofReceiving(objINREC) = 10)) {
		set mensagem.NotaFiscal.tipoEntrada = "D"
	}
	elseif(
		   ($$$INRECTypeofReceiving(objINREC) = 9)){
		set mensagem.NotaFiscal.tipoEntrada = "E"
	}
	else {
		set mensagem.NotaFiscal.tipoEntrada = "N"
	}
    /// - <codigoTipoDocumento> - Deve enviar em branco
	set mensagem.NotaFiscal.codigoTipoDocumento = ""
    /// - <codigoTipoDocumentoDePara> - Deve ser enviado o MvmtType, nesse caso "1"
	set mensagem.NotaFiscal.codigoTipoDocumentoDePara = "1"
	/// - <codigoEntradaProdutoDePara> - Chave do documento no Alphalinc, novamente
	set mensagem.NotaFiscal.codigoEntradaProdutoDePara = chaveEntidade
    /// - <descTipoDocumento>  - Deve enviar em branco
    set mensagem.NotaFiscal.descTipoDocumento = ""
    /// - <codigoCfop> - Deve enviar em branco, pois não existe no Alphalinc
    set mensagem.NotaFiscal.codigoCfop = 1
    set mensagem.NotaFiscal.dataEntrada = $zdate(+$$$INRECProcessedDate(objINREC), 3)
    set mensagem.NotaFiscal.horaEntrada = $piece($ztime($piece($$$INRECProcessedDate(objINREC), ",", 2), 1), ":", 1, 2)
    set mensagem.NotaFiscal.consignado = "N"
    /// - <codigoJustificativa/> - Deve enviar em branco, Recebimentos sem OFs não serão integrados
    set mensagem.NotaFiscal.codigoJustificativa = ""
    /// - <descJustificativa/> - Deve enviar em branco
    set mensagem.NotaFiscal.descJustificativa = ""
    /// - <codigoEstoque>  - Deve enviar em branco
  	set mensagem.NotaFiscal.codigoEstoque = ""
    /// - <codigoEstoqueDePara> - Deve ser passado o código do Local, cuja Ordem de Compra foi criada para
    set mensagem.NotaFiscal.codigoEstoqueDePara = $$$INRECLocation(objINREC)
    /// - <descEstoque>  - Deve enviar em branco
    set mensagem.NotaFiscal.descEstoque = ""
    /// - <codigoFornecedor> - Deve enviar em branco
    set mensagem.NotaFiscal.codigoFornecedor = ""
	/// - <codigoFornecedorDePara> - CNPJ do fornecedor enviado , sem máscara
	set mensagem.NotaFiscal.codigoFornecedorDePara = ""
    /// - <descFornecedor> - Descrição do Fornecedor utilizado no recebimento
    set mensagem.NotaFiscal.descFornecedor = $$SQLGetDescFornecedor^VARSQL($$$INRECSupplier(objINREC))
    /// - <cgcCPF> - CNPJ do fornecedor enviado , sem máscara
    set mensagem.NotaFiscal.cgcCpf = $translate($$getCNPJ^VARINLIEF($$$INRECSupplier(objINREC)), "./-", "")
    /// - <tipoFreteDePara> - Deve enviar em branco, não temos essa informação no Alphalinc
	set mensagem.NotaFiscal.tipoFreteDePara = ""
    set mensagem.NotaFiscal.tipoFrete = "C"
	///- <tipoEntrega> - Deve vir com "T" caso seja a quantidade total da OF, ou "P" caso seja uma quantidade parcial da OF
	if ((..CalcTotalOrdem(idINAUF) = ..CalcTotalRecebimento(chaveEntidade)) || (..CalcTotalOrdem(idINAUF) = 0)) {
		set mensagem.NotaFiscal.tipoEntrega = "T"
	}
	else {
		set mensagem.NotaFiscal.tipoEntrega = "P"
	}
	set mensagem.NotaFiscal.incluirFreteNota = "N"
	set mensagem.NotaFiscal.valorTotalNota = +$$$INRECInvoiceTotal(objINREC)
	if (mensagem.NotaFiscal.valorTotalNota = 0) {
		set mensagem.NotaFiscal.valorTotalNota = +$$$INRECSummaryTotal(objINREC)
	}

	set idLine = ""
	for	{
		set idLine = $order(^INRECSummary(0, chaveEntidade, idLine))
		if ($length(idLine) = 0) quit

		set produto = ##class(Produto).%New()
		do ..PreencheProduto(chaveEntidade, idLine, .produto)
		do mensagem.NotaFiscal.listaProduto.Insert(produto)
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="PreencheProduto">
<ClassMethod>1</ClassMethod>
<FormalSpec>chaveEntidade:%String,idLine:%String,&amp;produto:Produto</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new objINRECSummary, objINART, status

	set objINRECSummary = $get(^INRECSummary(0, chaveEntidade, idLine, 1))
	set objINART = $get(^INART(0, $$$INRECSummaryItem(objINRECSummary), 1))

	//<operacao> -  Deve  ser enviado "I"
	set produto.operacao = "I"
	//- <codigoProduto> -  Deve ser enviado o código do produto
	set produto.codigoProduto = ""
	///- <descProduto> -  Deve ser enviada a descrição do produto
	set produto.descProduto = $$SQLGetDescricaoProduto^VARSQL(produto.codigoProduto)
	///- <codigoProdutoDePara> -  Deve vir em branco
	set produto.codigoProdutoDePara = $$$INRECSummaryItem(objINRECSummary)
	///- <quantidade> -  Quantidade recebida do produto, na unidade de estoque, sem quebrar por lotes
	// todo rotina para calcular quantidade do item independente do lote
	set produto.quantidade = $$$INRECSummaryQuantityReceived(objINRECSummary)
	///- <codigoUnidadeProduto> - Deve ser enviado em branco
	set produto.codigoUnidadeProduto = ""
	///- <codigoUnidadeProdutoDePara> - Deve ser enviado o código da unidade de medida e-fisco (campo no cadastro de produtos) caso esteja preenchido, caso contrário deve ser enviada a sigla da unidade de medida.
	if ('$$$INARTUnitofMeasure(objINART)) {
		set produto.codigoUnidadeProdutoDePara = $$$INRECSummaryReceivedUnit(objINRECSummary)
	}
	else {
		set produto.codigoUnidadeProdutoDePara = $$$INARTUnitofMeasure(objINART)
	}
	set produto.quantidade = 
	##class(VAR.infra.integracao.ConversaoUnidadeMedida).convert(produto.codigoProdutoDePara,produto.codigoUnidadeProdutoDePara,
	$$$INRECSummaryQuantityReceived(objINRECSummary))
	
	set fatorCorrecaoCustoUnitario = $$$INRECSummaryQuantityReceived(objINRECSummary) / produto.quantidade
	///- <valorUnitario> - Custo unitário recebido
	set produto.valorUnitario = $$$INRECSummaryUnitCost(objINRECSummary) * fatorCorrecaoCustoUnitario
	///- <valorCustoReal> - Custo unitário recebido do item após descontos
	set produto.valorCustoReal = $$$INRECSummaryCostAfterDiscount(objINRECSummary) * fatorCorrecaoCustoUnitario
	///- <valorTotalCustoReal> - Quantidade Movimentada X Custo unitário recebido do item após descontos
	set produto.valorTotalCustoReal = produto.quantidade * produto.valorCustoReal
	///- <valorTotal> - Valor total da nota para esse item
	set produto.valorTotal = $$$INRECSummaryExtendedCost(objINRECSummary)

	set status = ..PreencheLotes(chaveEntidade, .produto)

	quit $$$OK
]]></Implementation>
</Method>

<Method name="PreencheLotes">
<ClassMethod>1</ClassMethod>
<FormalSpec>chaveEntidade:%String,&amp;produto:Produto</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new idLine, objINRECLine, lote

	set idLine = ""
	for	{
		set idLine = $order(^INRECLine(0, chaveEntidade, idLine))
		if ($length(idLine) = 0) quit

		set objINRECLine = $get(^INRECLine(0, chaveEntidade, idLine, 1))

		if (produto.codigoProdutoDePara = $$$INRECLineItem(objINRECLine)) {
			///Dados dos Lotes de cada linha:
			set lote = ##class(LoteProduto).%New()
			///- <codigoLote> - Lote recebido dessa linha
			set lote.codigoLote = $$$INRECLineLotNumber(objINRECLine)
			///- <quantidadeEntrada> - Quantidade, na unidade de estoque, recebida nessa linha
			set lote.quantidadeEntrada = +$$$INRECLineQuantity(objINRECLine)
			///- <dataValidade> - Validade recebida nessa linha
			if ($length($$$INRECLineExpirationDate(objINRECLine)) > 0) {
				set lote.dataValidade = $zdate($$$INRECLineExpirationDate(objINRECLine), 3)
			}
			else {
				set lote.dataValidade = ""
			}
			///- <descMarcaFabricante> - Descrição da Marca recebida desse item
			set lote.descMarcaFabricante = $$GetBrandName^VARSQL($$$INRECLineBrand(objINRECLine))
			do produto.listaLoteProduto.Insert(lote)
		}
	}

	quit $$$OK
]]></Implementation>
</Method>

<Method name="CalcTotalOrdem">
<ClassMethod>1</ClassMethod>
<FormalSpec>idINAUF:%String</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	new quantidadeOrdem, idLine, objINAUFP

	set quantidadeOrdem = 0
	if (idINAUF = "") {
		quit quantidadeOrdem
	}
	set idLine = ""
	for	{
		set idLine = $order(^INAUFP(0, idINAUF, idLine))
		if ($length(idLine) = 0) quit

		set objINAUFP = $get(^INAUFP(0, idINAUF, idLine, 1))
		set quantidadeOrdem = quantidadeOrdem + $$$INAUFPQuantity(objINAUFP)
	}

	quit quantidadeOrdem
]]></Implementation>
</Method>

<Method name="CalcTotalRecebimento">
<ClassMethod>1</ClassMethod>
<FormalSpec>idINREC:%String</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	new quantidadeRecebimento, idLine, objINRECLine

	set quantidadeRecebimento = 0

	set idLine = ""
	for	{
		set idLine = $order(^INRECLine(0, idINREC, idLine))
		if ($length(idLine) = 0) quit

		set objINRECLine = $get(^INRECLine(0, idINREC, idLine, 1))
		set quantidadeRecebimento = quantidadeRecebimento + $$$INRECLineQuantity(objINRECLine)
	}

	quit quantidadeRecebimento
]]></Implementation>
</Method>

<Method name="PreencheMovimento">
<ClassMethod>1</ClassMethod>
<FormalSpec>&amp;mensagem:Mensagem</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new chaveEntidade, objINTFR, objINReq, idLine, item

	set chaveEntidade = mensagem.Cabecalho.mensagemID
	set objINTFR = $get(^INTFR(0, chaveEntidade, 1))

	set mensagem.Movimento.operacao = "I"

	if ($$$INTFRRequisitionNumber(objINTFR)) {
		set objINReq = $get(^INReq(0, $$$INTFRRequisitionNumber(objINTFR), 1))
		set mensagem.Movimento.solicitacaoProduto = $$$INReqFREE13(objINReq)
	}

	set mensagem.Movimento.solicitacaoProdutoDePara = ""
	//set mensagem.Movimento.codigoMovimento = ""
	set mensagem.Movimento.codigoMovimentoDePara = "30"
	set mensagem.Movimento.tipoMovimento = mensagem.Movimento.%GetParameter("TIPOMOVIMENTOTRANSFERENCIA")
	set mensagem.Movimento.dataMovimento = $zdate(+$$$INTFRProcessedDate(objINTFR), 3)
	// Decrementando 10 min. da hora atual para não lançar erro de hora futura
	set mensagem.Movimento.horaMovimento = $piece($ztime($piece($$$INTFRProcessedDate(objINTFR), ",", 2) - (10 * 60), 1), ":", 1, 2)
	set mensagem.Movimento.estoqueDePara = $$$INTFRSendingLocation(objINTFR)
	set mensagem.Movimento.estoqueDestinoDePara = $$$INTFRReceivingLocation(objINTFR) 
	set mensagem.Movimento.cfop = 1.557
	set mensagem.Movimento.codigoTipoDocumento = ""
	set mensagem.Movimento.codigoAvisoCirurgia = ""
	set mensagem.Movimento.codigoEntradaProduto = ""
	set mensagem.Movimento.observacao = $$$INTFRFREE2(objINTFR)
	set mensagem.Movimento.codigoUsuario = "DBAMV" // $$$INTFRProcessedBy(objINTFR)
	set mensagem.Movimento.tipoDocumento = "M"

	set idLine = ""
	for	{
		set idLine = $order(^INTFRPickLine(0, chaveEntidade, idLine))
		if ($length(idLine) = 0) quit

		set item = ##class(Item).%New()
		do ..PreencheItem(chaveEntidade, idLine, .item)
		do mensagem.Movimento.listaItem.Insert(item)
	}

	quit $$$OK
]]></Implementation>
</Method>

<Method name="PreencheItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>chaveEntidade:%String,idLine:%String,&amp;item:Item</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim bundle as alSOH.dBundle
	new objINTFRPickLine, objINART

	set objINTFRPickLine = $get(^INTFRPickLine(0, chaveEntidade, idLine, 1))
	set objINART = $get(^INART(0, $$$INTFRPickLineItem(objINTFRPickLine), 1))

	set item.operacao = "I"
	set item.movimentoItem = ""
	set item.movimentoItemDePara = ..GetMovimentoItemSequence()
	set item.codigoProduto = $$$INTFRPickLineItem(objINTFRPickLine)
	set item.codigoBarra = ""
	set item.descProduto = ""
	set item.codigoUnidadeProduto = ""
	set item.codigoUnidadeProdutoIntegra = $$$INARTUnitofMeasure(objINART)
	set item.descUnidade = "" 
	
	set item.quantidade = 
	##class(VAR.infra.integracao.ConversaoUnidadeMedida).convert($$$INTFRPickLineItem(objINTFRPickLine),$$$INARTUnitofMeasure(objINART),
	$$$INTFRPickLineQuantity(objINTFRPickLine))

	/*set item.codigoLote = ""
	set item.dataValidade = ""
	try {
		set bundle = ..GetBundle(chaveEntidade, idLine, "30")
		if ($isObject(bundle)) {
			set item.codigoLote = bundle.LotNumber
			if ($length(bundle.UseByDate) > 2) {
				set item.dataValidade = $zdate(bundle.UseByDate, 3)
			}
		}
	}
	catch {
	}*/
	set bundle = ##class(alSOH.dBundle).%OpenId($$$INTFRPickLineBundle(objINTFRPickLine))
	if ($isObject(bundle)) {
		set item.codigoLote = bundle.LotNumber
		if ($length(bundle.UseByDate) > 2) {
			set item.dataValidade = $zdate(bundle.UseByDate, 3)
		}
	}
	else {
		set item.codigoLote = ""
		set item.dataValidade = ""
	}

	set item.codigoEmbalagemDePara = ""
]]></Implementation>
</Method>

<Method name="GetBundle">
<ClassMethod>1</ClassMethod>
<FormalSpec>ChaveDocumento:%String,Line:%String,TipoMovimento:%String</FormalSpec>
<ReturnType>alSOH.dBundle</ReturnType>
<Implementation><![CDATA[
	new idBundle

	set idBundle = ""

	&SQL(SELECT DISTINCT Bundle
		 INTO   :idBundle
		 FROM	alSOH.dStockHistory
		 WHERE  Reference = :ChaveDocumento
		 AND    MovementType_MovementTypeId = :TipoMovimento
		 AND    LineNumber = :Line)

	if (SQLCODE) quit $$$NULLOREF

	quit ##class(alSOH.dBundle).%OpenId(idBundle)
]]></Implementation>
</Method>

<Method name="GetMovimentoItemSequence">
<Description><![CDATA[
Sequence única solicitada pelo cliente para representar a transação X
relacionada com a integração Y (do lado do MV)]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set ano = $piece($zdate($horolog, 3), "-", 1)
	set seq = $increment(^VAR.infra.integracao.MensagemFactory("Movimento", ano))

	quit ano_##class(Strings).FormatNumber(seq, 8)
]]></Implementation>
</Method>
</Class>
</Export>