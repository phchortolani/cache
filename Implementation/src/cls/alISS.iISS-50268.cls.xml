<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alISS.iISS">
<Description><![CDATA[
The Main Interface to the Issue (alISS) Package. <br>
these methods may be called from anywhere. 
]]></Description>
<ClassType/>
<IncludeCode>INConst,COMSYS,%occInclude</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>

<Method name="GetOpenIssues">
<Description><![CDATA[
Gets all opens issues based on <br>
   -  getting issues from from that are open that are from the passed in location <br>
   -  for each issue that is found <br>
   		- for each issue line thta is open AND QtyRequired > QtyPicked AND has the passed in 
   		item <br>
   		- The FromStorage, Bundle and the QtyPicked are stored in a <code>%Library.ListOfDataTypes</code><br>
   -  The newly created List is then inserted into a <code>%Library.ListOfObjects</code><br>
   -  this is returned 
<b>Params:</b><br>
pobjInv 	- <code>alINV.INV</code> <br>
strFromLoc  - <code>alLOC.dULocation</code> <br>

<b>Returns:</b><br>
A list of  <br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjInv:alINV.dUItem,strFromLoc:alLOC.dULocation</FormalSpec>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	;History:
	;30-Jan-2008	LB		SR15626 Changed the signature of dStatus to dUStatus
	;24-Jan-2008 	HQN		SR15625 Changed class signature dLocation to dULocation
	;13-Dec-2007	LB		change the loop to do the count without the extra variable
	;15-NOV-2007	LB		SR15598: Created 
	;-------------------------------------------------------------------------------
	set lstReturn = ##class(%Library.ListOfObjects).%New()
	set lstIss    =  ##class(alISS.piISS).getAllOpenIssues()
	set objOpenStatus =  ##class(alSYS.Status.dUStatus).%OpenId("0||INIssue||1")  //SR15626

	set issLoopStop = lstIss.Count()
	for issloop = 1:1:issLoopStop {
		set tempISS = lstIss.GetAt(issloop)
		//set isslineLoopStop = tempISS.IssueLines.Count()
		for issLineloop = 1:1:tempISS.IssueLines.Count() {
			set IssLine = tempISS.IssueLines.GetAt(issLineloop)
			if (IssLine.Item = pobjInv)                  && 
			   (IssLine.Status = objOpenStatus.%Id())    &&
			   (IssLine.QtyRequired > IssLine.QtyPicked)   {
				
			//	Not sure this acually does anything as th <lb>
				/**************************/
				set lsttemp = ##class(%Library.ListOfDataTypes).%New()
				do lsttemp.Insert(IssLine.FromStorage)
				do lsttemp.Insert(IssLine.Bundle)
				do lsttemp.Insert(IssLine.QtyPicked)
				/**************************/
				do lstReturn.Insert(IssLine)
		    }
		}
	}
	quit lstReturn
]]></Implementation>
</Method>

<Method name="GetlstReqIssueBasedOnReqID">
<ClassMethod>1</ClassMethod>
<FormalSpec>pidReq:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	;History:
	; 30-Jan-2008	HQN		SR15625 Changed class signature dREQIssue to dUReqIssue
	;-------------------------------------------------------------------------------
	set lstReturn = ##class(%Library.ListOfObjects).%New()
	set sc = $$$OK
	set rs = ##class(%ResultSet).%New()
	do rs.Prepare("select ID from alREQ.dUReqIssue Where Reference= '" _pidReq_"'")
	do rs.Execute()
	
	while (rs.Next(.sc)) {
		if ($$$ISOK(sc)) {      ; check if this succeeded without errors
			set tempIssue = ##class(alREQ.dUReqIssue).%OpenId(rs.Data("ID"))
			if tempIssue '= $$$NULLOREF {
				set sc =  lstReturn.Insert(tempIssue)
			}
		}
	}
	quit lstReturn
]]></Implementation>
</Method>
</Class>
</Export>