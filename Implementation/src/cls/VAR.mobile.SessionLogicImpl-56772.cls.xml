<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.mobile.SessionLogicImpl">
<ClassType/>
<IncludeCode>COMSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>VAR.mobile.JavaAbstract</Super>

<Method name="open">
<ClassMethod>1</ClassMethod>
<FormalSpec>company:%String,username:%String,password:%String</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>StatusBean</ReturnType>
<Implementation><![CDATA[	set company = ##class(Util).cleanBinaryZero(company)
	set username = ##class(Util).cleanBinaryZero(username)
	set password = ##class(Util).cleanBinaryZero(password)

	set %("%KEY", "YM") = company
	set %("%KEY", "YBED") = username
	set %("%KEY", "YPWD") = password
	
	$$$VAR

	set result = ##class(StatusBean).%New()
	set result.Code = 0
	quit result]]></Implementation>
</Method>

<Method name="isOpen">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	quit ($length($get(YUSER)) > 0)]]></Implementation>
</Method>

<Method name="getVariables">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%ListOfDataTypes</ReturnType>
<ReturnTypeParams>ELEMENTTYPE="%String"</ReturnTypeParams>
<Implementation><![CDATA[	kill ^VAR.mobile.AlphalincSessionIntf($job)
	job StartThreadWithParams^VARRemote(..%ClassName(1), $job)::10
	for i = 1:1:10 {
		if ($data(^VAR.mobile.AlphalincSessionIntf($job, "end"))) quit

		hang 1
	}

	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "COUNTRY") = COUNTRY
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "LANGUAGE") = LANGUAGE
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "SPRACHE") = SPRACHE
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "Y") = Y
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YAKTION") = YAKTION
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YAUSWAHL") = YAUSWAHL
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YBACK") = YBACK
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YBED") = YBED
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YFORM") = YFORM
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YGIF") = YGIF
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YKEY") = YKEY
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YKOMMA") = YKOMMA
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YLOCATION") = YLOCATION
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YM") = YM
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YPARA") = YPARA
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YSEITE") = YSEITE
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YUCI") = YUCI
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YURL") = YURL
	set ^VAR.mobile.AlphalincSessionIntf($job, "vars", "YUSER") = YUSER

	set list = ##class(%ListOfDataTypes).%New()
	set varName = $order(^VAR.mobile.AlphalincSessionIntf($job, "vars", ""))
	while ($length(varName) > 0) {
		set value = ^VAR.mobile.AlphalincSessionIntf($job, "vars", varName)
		do list.Insert(varName_"="_value)

		set varName = $order(^VAR.mobile.AlphalincSessionIntf($job, "vars", varName))
	}

	quit list]]></Implementation>
</Method>

<Method name="close">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[	do $System.License.Login($char(0))
	kill %("%KEY")
	kill COUNTRY
	kill LANGUAGE
	kill SPRACHE
	kill Y
	kill YAKTION
	kill YAUSWAHL
	kill YBACK
	kill YBED
	kill YFORM
	kill YGIF
	kill YKEY
	kill YKOMMA
	kill YLOCATION
	kill YM
	kill YPARA
	kill YSEITE
	kill YUCI
	kill YURL
	kill YUSER]]></Implementation>
</Method>

<Method name="allocLicence">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[	do allocMobileLicense^COMSTARTZstart($GET(YBED))]]></Implementation>
</Method>

<Method name="unallocLicence">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[	do $System.License.Login($char(0))]]></Implementation>
</Method>

<Method name="StartThread">
<FormalSpec>params</FormalSpec>
<Implementation><![CDATA[	set pid = params(1)

	set sc = ##class(%SYS.ProcessQuery).VariableByPidExecute(.qhandle, pid, "", 0)
	set row = ""
	set atEnd = 0
	while (1) {
		set sc = ##class(%SYS.ProcessQuery).VariableByPidFetch(.qhandle, .row, .atEnd)
		if (atEnd) quit

		set ^VAR.mobile.AlphalincSessionIntf(pid, "vars", $list(row, 1)) = $list(row, 2)
	}
	do ##class(%SYS.ProcessQuery).VariableByPidClose(qhandle)

	set ^VAR.mobile.AlphalincSessionIntf(pid, "end") = 1]]></Implementation>
</Method>
</Class>
</Export>