<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="VAR.infra.services.SecondaryServicesMonitor">
<ClassType/>
<Import>VAR.infra.cache,VAR.infra.services,VAR.infra.log</Import>
<IncludeCode>VARLog</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Parameter name="MONTHDAY">
<Description><![CDATA[Day of the month]]></Description>
<Type>%Integer</Type>
<Default>1</Default>
</Parameter>

<Parameter name="DAYNUMBER">
<Description><![CDATA[0 - Sun, 1 - Mon, 2 - Tue, 3 - Wed, 4 - Thu, 5 - Fri, 6 - Sat]]></Description>
<Type>%Integer</Type>
<Default>1</Default>
</Parameter>

<Parameter name="HOURLIMIT">
<Description><![CDATA[Time limit to start services commands (format hh:mm:ss)]]></Description>
<Type>%String</Type>
<Default>07:00:00</Default>
</Parameter>

<Parameter name="DELIMIT">
<Description><![CDATA[Delimiter]]></Description>
<Type>%String</Type>
<Default>~</Default>
</Parameter>

<Method name="InstallService">
<Description><![CDATA[Install the service

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	// A cada duas horas durante todo o dia
	set intHr = 0  // 0-23
	set intMin = 1 // 0-59
	set intStartTime = ((intHr * 60 * 60)+ (intMin * 60))
	do ##class(Task).Insert($znspace, $znspace_" Secondary Services Monitor",
		"do ##class("_..%ClassName(1)_").VerifyAndStartService()",0, 
		0, 1, "",1, intStartTime, "", "SecondaryServices.log", .task, "2", 1)

	set blData = ##class(Library).InstallDataSecondaryServices()
	if ($$$ISERR(blData)) {
		$$$VARLOGERROR("Error saving data of Secondary Services on User.VARServicesController")
	}]]></Implementation>
</Method>

<Method name="UninstallService">
<Description><![CDATA[Uninstall the service

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	do ..StopService()
	set ^VAR.infra.services.Controller = ""

	set blData = ##class(Library).UninstallDataSecondaryServices()
	if ($$$ISERR(blData)) {
		$$$VARLOGERROR("Error deleting data of Secondary Services from User.VARServicesController")
	}

	do ##class(Task).Delete($znspace_" Secondary Services Monitor")]]></Implementation>
</Method>

<Method name="VerifyAndStartService">
<Description><![CDATA[Verifies if the service is still running, 
if not it calls the Start() method.

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set secondaryServices = ..%New()

	if ('secondaryServices.IsRunning()) {
		do secondaryServices.Start()
	}
	
	if (secondaryServices.IsSuspended()) {
		do secondaryServices.Resume()
	}]]></Implementation>
</Method>

<Method name="StopService">
<Description><![CDATA[Stop the service

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	set secondaryServices = ..%New()

	if (secondaryServices.IsRunning()) {
		do secondaryServices.Stop()
	}]]></Implementation>
</Method>

<Method name="RestartService">
<Description><![CDATA[Restart the service and wait until 

Params:

Returns:]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	$$$VARLOGINFO("Restarting Secondary Services...")

	do ..StopService()
	do ..VerifyAndStartService()]]></Implementation>
</Method>

<Method name="Start">
<Description><![CDATA[Start the service

Params:

Returns: status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit:(..IsRunning()) $$$OK

	set $ecode = ""
	set $ztrap = ""

    try {
		do ##class(Logger).LogJobIdStart($job)
		$$$VARLOGINFO("Starting Secondary Services Monitor")

		set objControl = $get(^VAR.infra.services.Controller)
		if ($length(objControl) = 0) {
			set StartDay   = (+$horolog)							        
			set StartWeek  = ##class(Util).GetWeekNumberPerMonth(StartDay)
			// Force start on current month [Date format YYYYMMDD]
			set StartMonth = $extract($zdate(StartDay, 8), 1, 6) - 1

			set $piece(objControl, ..#DELIMIT, 1) = StartDay
			set $piece(objControl, ..#DELIMIT, 2) = StartWeek
			set $piece(objControl, ..#DELIMIT, 3) = StartMonth
		}

		set ^VAR.infra.services.Controller = objControl
		set ^VAR.infra.services.SecondaryServicesMonitor = 0

		job StartThread^VARRemote(..%ClassName(1))::20
		
	}
	catch erro {
		do ..Stop()
		$$$VARLOGERROR("Erro: "_erro.Message_" Codigo Erro: "_erro.Code)				
	}

	quit $$$OK]]></Implementation>
</Method>

<Method name="IsRunning">
<Description><![CDATA[Verify if the service is running.

Params:

Returns: yes / no]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set intJobId = +$get(^VAR.infra.services.SecondaryServicesMonitor)
	if (intJobId '= 0) {
		if ($SYSTEM.Version.GetNumber() >= 2008.1) {
			set objProcess = ##class(%SYS.ProcessQuery).%OpenId(intJobId)
		}
		else {
			set objProcess = ##class(%SYSTEM.Process).%OpenId(intJobId)
		}

		if ($isObject(objProcess)) quit 1
	}

	quit 0]]></Implementation>
</Method>

<Method name="Resume">
<Description><![CDATA[Resume the service

Params:

Returns: status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	if ('..IsSuspended()) quit $$$OK
	
	set $ecode = ""
	set $ztrap = ""

	try {
		$$$VARLOGINFO("Secondary Services Monitor had been suspended")
		do ##class(Task).Resume($znspace_" Secondary Services Monitor")
	}
	catch erro {
	}

	quit $$$OK]]></Implementation>
</Method>

<Method name="IsSuspended">
<Description><![CDATA[Verify if the service is suspended.

Params:

Returns: yes / no]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	set task = ##class(%SYSTEM.Task).OpenId($znspace_" Secondary Services Monitor")
	if ('$isObject(task)) quit 0
	
	if (+task.Suspended '= 0) quit 1
	
	quit 0]]></Implementation>
</Method>

<Method name="Stop">
<Description><![CDATA[Stop the service

Params:

Returns: status]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	try {
		$$$VARLOGINFO("Stopping Secondary Services Monitor")
	}
	catch {
	}

	try {
		set ^VAR.infra.services.SecondaryServicesMonitor = 0
	}
	catch {
	}

	try {
		set objExeSec = ##class(Helper).%New()
		do objExeSec.StopServicesByFrequency(objExeSec.%GetParameter("SERVICESPERDAY"))
		do objExeSec.StopServicesByFrequency(objExeSec.%GetParameter("SERVICESPERWEEK"))
		do objExeSec.StopServicesByFrequency(objExeSec.%GetParameter("SERVICESPERMONTH"))
	}
	catch {
	}

	try {
		do ##class(VAR.infra.services.Util).DeletePidFile("SecondaryServices.pid")
	}
	catch {
	}

	quit $$$OK]]></Implementation>
</Method>

<Method name="StartThread">
<Description><![CDATA[Execute service codes.

Params:

Returns:]]></Description>
<Implementation><![CDATA[	// Controle para iniciar somente em um servidor de aplicação no ambiente de produção
	if ((##class(VAR.infra.util.Util).GetComputerName() '= "SVWDASA01") 
		&& (##class(VAR.infra.util.Util).GetComputerName() '= "SVWDASA03")) {
		quit
	}

	set ^VAR.infra.services.SecondaryServicesMonitor = $job
	do ##class(VAR.infra.services.Util).CreatePidFile("SecondaryServices.pid", $job)

	set countHr = ##class(Helper).%GetParameter("HOUR")

	set objExeSec = ##class(Helper).%New()
	while (^VAR.infra.services.SecondaryServicesMonitor) {
		if ($$isExplicitLicenseUserIdentification^COMSTARTZstart()) {
			if ('$$allocServiceLicense^COMSTARTZstart("SERVICES")){
				hang 1
				continue
			}
		}
		
		if (countHr = ##class(Helper).%GetParameter("HOUR")) {
			set HourlimitH    = $ztimeh(..#HOURLIMIT)

			set curDate	      = $horolog
			set curDay	      = +curDate
			set curHour	      = $piece(curDate, ",", 2)
			set curMonth	  = $extract($zdate(curDay, 8), 1, 6) // Format "201105" [YYYYMM]

			set DayWeek       = $zdate(curDay, 10)
			set DayMonth      = +$zdate(curDay, 2)

			set curWeek	      = ##class(Util).GetWeekNumberPerMonth(curDay)

			set objControl    = $get(^VAR.infra.services.Controller)

			set DayControl	  = $piece(objControl, ..#DELIMIT, 1)
			set WeekControl	  = $piece(objControl, ..#DELIMIT, 2)
			set MonthControl  = $piece(objControl, ..#DELIMIT, 3)

			// Every day on the correct time period
			if ((DayControl < curDay) && (curHour <= HourlimitH )) {
				do objExeSec.RunServicesByFrequency(objExeSec.%GetParameter("SERVICESPERDAY"))

				// Every specific day of the week or until the end of it
				if ((WeekControl < curWeek) && (DayWeek >= ..#DAYNUMBER)) {
					do objExeSec.RunServicesByFrequency(objExeSec.%GetParameter("SERVICESPERWEEK"))

					$$$VARLOGDEBUG("Weekly execution completed at "_$zdate(curDay,4)_". "_DayWeek_"º day of the week")
					set WeekControl  = curWeek
				}

				// Every specific day of the month or until the end of it
				if ((MonthControl < curMonth) && (DayMonth >= ..#MONTHDAY)) {
					do objExeSec.RunServicesByFrequency(objExeSec.%GetParameter("SERVICESPERMONTH"))

					$$$VARLOGDEBUG("Monthly execution completed at "_$zdate(curDay,4)_". "_DayMonth_"º day of the month")
					set MonthControl = curMonth
					set WeekControl  = 0 // Reset week count
				}

				$$$VARLOGDEBUG("Daily execution completed at "_$zdate(curDay, 4))
				set DayControl  = curDay
			}

			set countHr = 0
			set ^VAR.infra.services.Controller = DayControl_..#DELIMIT_
				WeekControl_..#DELIMIT_MonthControl
		}

		set countHr = countHr + 1

		hang 1
	}]]></Implementation>
</Method>
</Class>
</Export>