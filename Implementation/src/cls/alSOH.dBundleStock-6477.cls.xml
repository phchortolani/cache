<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="alSOH.dBundleStock">
<Description><![CDATA[Item Stock]]></Description>
<ClassType>persistent</ClassType>
<IncludeCode>COMConst,COMSYS,WWWConst,INConst,INSYS</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent</Super>
<UDLText name="T">
<Content>/*----------------------------------------------------------------------------------
; History 
; 04-Jul-2013	shobby	CORE-385.21 dBundle-&gt;alSOH.dBundle
; 14-Apr-2009	PPP		SR16468:Captions for Properies
; 24-Dec-2008	FIS		Add GetAllLocnBundles Query
; 03-Dec-2008	HQN		SR16207: Created Index entries
; 30-Apr-2008	HQN		Corrected PickSequence Lookup to see negative dates
; 30-Apr-2008	GRF		Add GetAllBundles Query
; 28-Apr-2008	GRF		Revise index - Primary Key
; 22-Apr-2008	Luke	SR15684: Add Query - GetViaLocationOrderByStore
; 25-Feb-2008	Luke	Changes to V2 objects 
; 24-Jan-2008	HQN		SR15625: Changed class signature dStorage to dUStorage
; 							and dLocation to dULocation
/---------------------------------------------------------------------------------*/</Content>
</UDLText>

<Property name="Item">
<Type>alINV.dItem</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00055"/>
</Property>

<Property name="Storage">
<Type>alLOC.dStorage</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00058"/>
</Property>

<Property name="Bundle">
<Type>alSOH.dBundle</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00054"/>
</Property>

<Property name="PickSequence">
<Type>alSYS.dt.dtString</Type>

<Parameter name="CAPTION" value="AL00056"/>
</Property>

<Property name="QtyOnHand">
<Type>alSYS.dt.dtFloat</Type>

<Parameter name="CAPTION" value="AL00057"/>
</Property>
<UDLText name="T">
<Content>// ++++++++++++++++++++++++++++++++++++++++++</Content>
</UDLText>
<Index name="ID">
<IdKey>1</IdKey>
<PrimaryKey>1</PrimaryKey>
<Properties>Item,Storage,Bundle</Properties>
<Unique>1</Unique>
</Index>
<Index name="ItemIDX">
<Properties>Item</Properties>
</Index>
<Index name="StorageIDX">
<Properties>Storage</Properties>
</Index>
<Index name="BundleIDX">
<Properties>Bundle</Properties>
</Index>
<UDLText name="T">
<Content>// ++++++++++++++++++++++++++++++++++++++++++</Content>
</UDLText>
<UDLText name="T">
<Content>// SR17034</Content>
</UDLText>
<Query name="GetLocns">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem</FormalSpec>
<SqlQuery>SELECT Storage-&gt;Location FROM alSOH.dBundleStock
 WHERE Item=:Item group by Storage-&gt;Location</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<Query name="GetBundleItems">
<Type>%SQLQuery</Type>
<SqlQuery>SELECT DISTINCT Item FROM alSOH.dBundleStock
 ORDER BY Item</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<Query name="GetBundles">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem,Storage:alLOC.dStorage</FormalSpec>
<SqlQuery>SELECT %ID FROM alSOH.dBundleStock
 WHERE (Storage = :Storage AND Item = :Item) ORDER BY +PickSequence, $piece(PickSequence,',',2)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<UDLText name="T">
<Content>// 22-Dec-2008	HQN		SR16256: Return * instead of %ID</Content>
</UDLText>
<Query name="GetAllBundles">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem</FormalSpec>
<SqlQuery>SELECT %ID,Storage,Bundle,PickSequence,QtyOnHand FROM alSOH.dBundleStock
 WHERE (Item = :Item) ORDER BY Storage</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<UDLText name="T">
<Content>// 24-Dec-2008	FIS		SR16256: get bundles from a location</Content>
</UDLText>
<Query name="GetAllLocnBundles">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem,Location:alLOC.dLocation</FormalSpec>
<SqlQuery>SELECT %ID,Storage,Bundle,PickSequence,QtyOnHand FROM alSOH.dBundleStock
 WHERE (Storage-&gt;Location = :Location AND Item = :Item)
 ORDER BY Storage</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<UDLText name="T">
<Content>// 28-Apr-2011	GRF		SR17715: Created</Content>
</UDLText>
<Query name="GetStorageBundles">
<Type>%SQLQuery</Type>
<FormalSpec>Storage:alLOC.dStorage</FormalSpec>
<SqlQuery>SELECT %ID FROM alSOH.dBundleStock
 WHERE (Storage = :Storage)
 ORDER BY Item</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<Query name="GetViaLocation">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem,Location:alLOC.dLocation</FormalSpec>
<SqlQuery>SELECT %ID FROM alSOH.dBundleStock
 WHERE (Storage-&gt;Location = :Location AND Item = :Item)
 ORDER BY +PickSequence, $piece(PickSequence,',',2)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<UDLText name="T">
<Content>// SR17541</Content>
</UDLText>
<Query name="GetViaLocationOrderByTSU">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem,Location:alLOC.dLocation</FormalSpec>
<SqlQuery>SELECT %ID FROM alSOH.dBundleStock
 WHERE (Storage-&gt;Location = :Location AND Item = :Item)
 ORDER BY Storage-&gt;CodeWithTSU,+PickSequence, $piece(PickSequence,',',2)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<Query name="GetViaLocationOrderByStore">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem,Location:alLOC.dLocation</FormalSpec>
<SqlQuery>SELECT %ID FROM alSOH.dBundleStock
 WHERE (Storage-&gt;Location = :Location AND Item = :Item)
 ORDER BY Storage</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<UDLText name="T">
<Content>// 22-May-2009	PPP		SR16565: Created (need stock in pick order)</Content>
</UDLText>
<Query name="GetAllLocnBundlesByPick">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem,Location:alLOC.dLocation</FormalSpec>
<SqlQuery>SELECT %ID,Storage,Bundle,Bundle-&gt;LotNumber as LotNumber,Bundle-&gt;UseByDate As UseByDate,QtyOnHand FROM alSOH.dBundleStock
 WHERE (Storage-&gt;Location = :Location AND Item = :Item)
 ORDER BY +PickSequence, $piece(PickSequence,',',2)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<UDLText name="T">
<Content>// 22-May-2009	PPP		SR16565: Created (need stock in pick order)</Content>
</UDLText>
<Query name="GetAllBundlesByPick">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem</FormalSpec>
<SqlQuery>SELECT %ID,Storage,Bundle,Bundle-&gt;LotNumber as LotNumber,Bundle-&gt;UseByDate As UseByDate,QtyOnHand FROM alSOH.dBundleStock
 WHERE (Item = :Item)
 ORDER BY +PickSequence, $piece(PickSequence,',',2)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<UDLText name="T">
<Content>// 22-Jun-2009	PPP		SR16565: Created (need stock with all attributes in pick order)</Content>
</UDLText>
<Query name="GetAllLocnBundleAttByPick">
<Type>%SQLQuery</Type>
<FormalSpec>Item:alINV.dItem,Location:alLOC.dLocation</FormalSpec>
<SqlQuery>SELECT %ID,Storage,Bundle,Bundle-&gt;LotNumber as LotNumber,Bundle-&gt;UseByDate As UseByDate,Bundle-&gt;Brand As Brand, Bundle-&gt;Owner As Owner, Bundle-&gt;Program As Program, QtyOnHand FROM alSOH.dBundleStock
 WHERE (Storage-&gt;Location = :Location AND Item = :Item)
 ORDER BY +PickSequence, $piece(PickSequence,',',2)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>
<UDLText name="T">
<Content>// ++++++++++++++++++++++++++++++++++++++++++</Content>
</UDLText>
<UDLText name="T">
<Content>/*
Method QtyOnHandSet(Quantity As %Float) As %Status
{
	set sc = $$$OK
	set %this.QOHAdjustment = %this.QOHAdjustment + (Quantity - i%QtyOnHand)
	
	set i%QtyOnHand = Quantity
	quit sc
}
*/</Content>
</UDLText>

<Method name="ChangeQuantity">
<ClassMethod>1</ClassMethod>
<FormalSpec>pobjItem:alINV.dItem,pidStorage:alLOC.dStorage,pobjBundle:dBundle,pfltQtyMoved:%Float</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	;-------------------------------------------------------------------------------
	;     This should *** ONLY *** be called as part of the dMovement processing.
	;-------------------------------------------------------------------------------
	;  SQL Queries (above) will evaluate the date and time pieces of the Pick
	;  Sequence individually when ordering
	;  e.g. "ORDER BY +PickSequence, $piece(PickSequence,',',2)"
	;  
	; History:
	; 07-Feb-2014	SCR		HEVA-1343: Turn off Policy Checking Option
	; 09-Sep-2013	SCR		CORE-266: Allow for Null pick sequence
	; 10-Nov-2010	SCR		SR17611: Update SOHLockLevel to 0
	; 21-Jun-2010	PPP		SR17465: Check for the MinusStockAllowed flag before
	;							reducing SOH if Bundle Stock does not exist or if it
	;							exists and QOH+Issue<0
	; 10-Feb-2009	GRF		SR16328: objBundle, objItem => pobjBundle, pobjItem
	; 09-May-2008	PPP		SR.....: Updated the Pick Sequence that is based on
	; 							Creation date to be $zdth(objBundle.CreationDate,3)
	; 05-May-2008 	Luke	SR15704: Added checks for LIFO and FIFO
	; 							 Added Source attributes for LIFO and FIFO
	; 01-May-2008	HQN		SR15667: Corrected LIFO lookup, wrong object
	; 30-Apr-2008	HQN		SR15667: PickSequence is multipart time with both components
	; 							positive or negative, SQL changed to reflect
	; 23-Apr-2008	Luke	SR15667: set of PickSequence for FIFO and LIFO
	; 21-Apr-2008	HQN		SR15651:  Removed redundant sc check
	; 							Changed to exclusive lock
	; 09-Apr-2008	GRF		bln... rather than bol...;
	; 02-Apr-2008	HQN		SR15625: Added PickSequence for LEFO and FIFO(Default)
	; 01-Apr-2008	HQN		SR15625: Flowon error with bundles mismatching the
	; 							defined policy of the item
	; 01-Apr-2008	Luke	SR15653 correct the chained update event for SOH objects 
	; 						Where changing the QTY to 0, the object should be deleted
	; 31-Mar-2008	HQN		Corrected syntax of %Delete
	; 13-mar-2008	HQN		Corrrected variables to be obj instead of pid
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	; 28-Nov-2007	GRF		SR15615: alLoc packages cleanup
	; 14-Nov-2007	SCR		SR15558: Created
	;-------------------------------------------------------------------------------
	set sc        = $$$OK
	set blnNewObj = $$$NO 

	if pfltQtyMoved '=0 {
		//SR17465
	//	set objBundStk = ##class(alSOH.dBundleStock).%OpenId(pobjItem.%Id()_"||"_pidStorage.%Id()_"||"_pobjBundle.%Id(),4,.sc)
		//SR17611
		//set objBundStk=##class(alSOH.dBundleStock).%OpenId(pobjItem.%Id()_"||"_pidStorage.%Id()_"||"_pobjBundle.%Id(),4)
		set objBundStk=##class(alSOH.dBundleStock).%OpenId(pobjItem.%Id()_"||"_pidStorage.%Id()_"||"_pobjBundle.%Id(),$$$SOHLockLevel)
		
		//SR17465 (Checks if Minus Stock is *NOT* allowed)
		if '$$$INVORGMinusStockAllowed($get(^INVORG(0,0,1))) {		
			if (objBundStk = $$$NULLOREF) {
				if (pfltQtyMoved < 0) {		
					set strMessage =$$$Text($lb("IN01233",pobjItem.%Id()))
					set sc =$$$ERROR($$$GeneralError,strMessage)
				} // "Cannot complete process as it will cause Item '%1' SOH to go negative."
			
			} else {
				if (objBundStk.QtyOnHand + pfltQtyMoved) < 0 {
				set strMessage = $$$Text($lb("IN01233",pobjItem.%Id()))
					set sc =$$$ERROR($$$GeneralError,strMessage)
				} // "Cannot complete process as it will cause Item '%1' SOH to go negative."
			}
		}

		//SR17465
		if $$$ISOK(sc) {
			; Step 2 If Not open, create a new entry
			if (objBundStk = $$$NULLOREF) {
				set sc = $$$OK
				set objBundStk = ##class(alSOH.dBundleStock).%New()
				set objBundStk.Item    = pobjItem
				set objBundStk.Storage = pidStorage
				set objBundStk.Bundle  = pobjBundle
				set blnNewObj          = $$$YES
			
				; If it isn't a sourcing policy, the resultset ordered via picksequence will default to the %Id()
				; calculate Sourcing sequence based on ItemPolicy
				if (pobjItem.ItemPolicy.%ClassName() = "dSourcingPolicy") {
					;if pobjItem.ItemPolicy '= pobjBundle.ItemPolicy {
					;		set sc = $system.Status.Error(5001,"Item Policy mismatch between dItem.%Id() = "_pobjItem.%Id()_" and dBundle.%Id() = "_pobjBundle.%Id())
					;}
					if $$$ISOK(sc) {
						if (pobjItem.ItemPolicy.SourceType = "FEFO") {
							;if $io["|TNT|" w "Jon="_$job f i=1:1:100 h 1
							set idxAttribute = pobjBundle.Attributes.FindObjectId(pobjBundle.%Id()_"||"_pobjItem.ItemPolicy.SourceAttribute.Name)
							if idxAttribute { ; CORE-266
								set objBundStk.PickSequence = pobjBundle.Attributes.GetAt(idxAttribute).AttributeValue
							}
						
						} elseif (pobjItem.ItemPolicy.SourceType = "LEFO") {
							set idxAttribute = pobjBundle.Attributes.FindObjectId(pobjBundle.%Id()_"||"_pobjItem.ItemPolicy.SourceAttribute.Name)
							if idxAttribute { ; CORE-266
								set objBundStk.PickSequence = -(pobjBundle.Attributes.GetAt(idxAttribute).AttributeValue)_",-"_$piece(pobjBundle.Attributes.GetAt(idxAttribute).AttributeValue,",",2)
							}
						
						} elseif (pobjItem.ItemPolicy.SourceType = "LIFO") {	   //SR15704  VVVV
							if pobjItem.ItemPolicy.SourceAttribute '= "" {
								set idxAttribute = pobjBundle.Attributes.FindObjectId(pobjBundle.%Id()_"||"_pobjItem.ItemPolicy.SourceAttribute.Name)
								if idxAttribute { ; CORE-266
									set objBundStk.PickSequence = pobjBundle.Attributes.GetAt(idxAttribute).AttributeValue
								}
							} else {
								set objBundStk.PickSequence = -$zdth(pobjBundle.CreationDate,3)_",-"_$piece($zdth(pobjBundle.CreationDate,3),",",2) //SR15667
							}
						
						
						} elseif (pobjItem.ItemPolicy.SourceType = "FIFO") {    // SR15704 VVVV
							if pobjItem.ItemPolicy.SourceAttribute '= "" {
						//	write !,"idxAttribute:"_pobjBundle.%Id()_"||"_pobjItem.ItemPolicy.SourceAttribute.Name
								set idxAttribute = pobjBundle.Attributes.FindObjectId(pobjBundle.%Id()_"||"_pobjItem.ItemPolicy.SourceAttribute.Name)
								if idxAttribute { ; CORE-266
									set objBundStk.PickSequence = (pobjBundle.Attributes.GetAt(idxAttribute).AttributeValue)
								}
							} else {
								set objBundStk.PickSequence = $zdth(pobjBundle.CreationDate,3)   //SR15667
							}
						
						
						}
						if objBundStk.PickSequence="" {  ; CORE-266
							set objBundStk.PickSequence = $horolog
						}
					
						/*
						} elseif (pobjItem.ItemPolicy.SourceType = "LIFO") {
							set objBundStk.PickSequence = (-$horolog)_$piece($horolog,",",2)   ; FIXME : Need to pad time with leading zeros
						} else {
							set objBundStk.PickSequence = $horolog
						}*/
					}
				}
			}
		
		}
		; Step 3 Update the Qty on hand
		; Step 4 if new Qty On Hand = 0 Delete Object
		; Step 5 if new Qty On Hand     Save Object
		
		if $$$ISOK(sc) {
			set objBundStk.QtyOnHand = (objBundStk.QtyOnHand + pfltQtyMoved)
			set sc = ##class(alSOH.dSOH).ChangeQuantity(pobjItem,pidStorage,pfltQtyMoved) //SR15653
			if $$$ISOK(sc) {
				if objBundStk.QtyOnHand=0 {
					if 'blnNewObj {
						set sc=##class(alSOH.dBundleStock).%Delete(objBundStk.%Oid())						
					}
				} else {
					if $$$SOHLockLevel=0 {  ; SR17611 vvvvvv
						do objBundStk.%DowngradeConcurrency(0)
					}						; SR17611 ^^^^^^
					set sc=objBundStk.%Save()
				}
			}
			do objBundStk.%Close()
		}
	}
	if $$$ISERR(sc) {
		set sc = $system.Status.AppendStatus(($$$ERROR($$$GeneralError,"Error changing qty on alSOH.dBundleStock")),sc)
	}
	quit sc]]></Implementation>
</Method>

<Method name="GetBundle">
<ClassMethod>1</ClassMethod>
<FormalSpec>pItem:alINV.dItem,pStorage:alLOC.dStorage,pBundle:dBundle</FormalSpec>
<ReturnType>alSOH.dBundleStock</ReturnType>
<Implementation><![CDATA[	set objStkBund = ##class(alSOH.dBundleStock).%OpenId(pItem.%Id()_"||"_pStorage.%Id()_"||"_pBundle.%Id())
	if objStkBund = $$$NULLOREF {
		set objStkBund = ##class(alSOH.dBundleStock).%New()
		set objStkBund.Item      = pItem
		set objStkBund.Bundle 	 = pBundle
		set objStkBund.Storage   = pStorage
		set objStkBund.QtyOnHand = 0
		
		set sc = objStkBund.%Save()
	}
	quit objStkBund]]></Implementation>
</Method>
<UDLText name="T">
<Content>/*
Method BundleSet(pobjBundle As alSOH.dBundle) As %Status
{
	;-------------------------------------------------------------------------------
	; 19-Aug-2008	HQN		For default policy, merge values into default bundle
	;-------------------------------------------------------------------------------
	set r%Bundle = pobjBundle
	if pobjBundle.Item.ItemPolicy.Description = "Default Policy" {
		set r%Bundle = ##class(alSOH.dBundle).GetDefaultBundle(pobjBundle)
	}
	quit $$$OK
}
*/</Content>
</UDLText>
<UDLText name="T">
<Content>/*
/// This callback method is invoked by the &lt;METHOD&gt;%Save&lt;/METHOD&gt; method to 
/// provide notification that the object is being saved. It is called after 
/// the object's data has been successfully written to disk.
/// 
/// &lt;P&gt;&lt;VAR&gt;insert&lt;/VAR&gt; will be set to 1 if this object is being saved for the first time.
/// 
/// &lt;P&gt;If this method returns an error then the call to &lt;METHOD&gt;%Save&lt;/METHOD&gt; will fail.
Method %OnAfterSave(insert As %Boolean) As %Status [ Private ]
{

	set objSOH = ##class(alSOH.dSOH).%OpenId(%this.Storage.%Id()_"||"_%this.Item.%Id())
	if objSOH = $$$NULLOREF {
		set objSOH = ##class(alSOH.dSOH).%New()
		set objSOH.Storage = %this.Storage
		set objSOH.Item    = %this.Item
	}
	set objSOH.QtyOnHand = objSOH.QtyOnHand + %this.QOHAdjustment
	set %this.QOHAdjustment = 
	quit objSOH.%Save()
	quit $$$OK
}*/</Content>
</UDLText>
<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^alSOH.dBundleStockD</DataLocation>
<DefaultData>dBundleStockDefaultData</DefaultData>
<IdLocation>^alSOH.dBundleStockD</IdLocation>
<IndexLocation>^alSOH.dBundleStockI</IndexLocation>
<StreamLocation>^alSOH.dBundleStockS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="dBundleStockDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PickSequence</Value>
</Value>
<Value name="3">
<Value>QtyOnHand</Value>
</Value>
</Data>

<Property name="Bundle"/>

<Property name="Item"/>

<Property name="PickSequence"/>

<Property name="QtyOnHand"/>

<Property name="Storage"/>
</Storage>
</Class>
</Export>