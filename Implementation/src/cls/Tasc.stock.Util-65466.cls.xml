<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Class name="Tasc.stock.Util">
<ClassType/>
<IncludeCode>WWWConst</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="GetDadosEstoque">
<ClassMethod>1</ClassMethod>
<FormalSpec>pItem,pLocal,pData,&amp;estoque,&amp;valorEstoque,&amp;custoMedio</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<Implementation><![CDATA[	if ($f(pData,"/")'=0){
		set pData = $zdh(pData,4)
	}
	
	&SQL(select TOP 1 (QOHLocn + QtyMoved) as Estoque
		INTO :estoque
		from alsoh.dStockHistory
		where item = :pItem
		and (Storage->Location = :pLocal)
		and (Storage->Code <> 'X')
		and DateConfirmed <= :pData
			
		order by dateconfirmed desc,
		timeconfirmed desc, id desc)
		
		
		set custoMedio = $$GetCostForLocn^INAvgCost(pItem, pLocal, pData)
		
		set valorEstoque = custoMedio * estoque
		quit]]></Implementation>
</Method>

<Method name="GetEstoqueLocalData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pItem,pLocal,pData</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[	if ($f(pData,"/")'=0){
		set pData = $zdh(pData,4)
	}
	set tQuantidade = 0 
	
	&SQL(select TOP 1 QOHLocn + QtyMoved
		INTO :tQuantidade
		from alsoh.dStockHistory
		where item = :pItem
		and (Storage->Location = :pLocal)
		and (Storage->Code <> 'X')
		and DateConfirmed <= :pData
			
		order by dateconfirmed desc,
		timeconfirmed desc, id desc)
		
	
	quit $g(tQuantidade,0)]]></Implementation>
</Method>

<Method name="GetTransitoLocalData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pItem,pLocal,pData</FormalSpec>
<Implementation><![CDATA[	if ($f(pData,"/")'=0){
		set pData = $zdh(pData,4)
	}
	set tQuantidade = 0 
	
	&SQL(select TOP 1 QOHLocn + QtyMoved
		INTO :tQuantidade
		from alsoh.dStockHistory
		where item = :pItem
		and (Storage->Location = :pLocal)
		and (Storage->Code = 'EmTransito')
		and DateConfirmed <= :pData
		order by dateconfirmed desc,
		timeconfirmed desc, id desc)
		
	
	quit $g(tQuantidade,0)]]></Implementation>
</Method>

<Method name="GetEstoqueLocalDataHora">
<ClassMethod>1</ClassMethod>
<FormalSpec>pItem,pLocal,pData,pHora</FormalSpec>
<Implementation><![CDATA[	if ($f(pData,"/")'=0){
		set pData = $zdh(pData,4)
	}
	set tQuantidade = 0 
	&SQL(select TOP 1 QOHLocn + QtyMoved
		INTO :tQuantidade
		from alsoh.dStockHistory
		where item = :pItem
		and (Storage->Location = :pLocal)
		and ((DateConfirmed < :pData)
		OR (DateConfirmed = :pData AND TimeConfirmed < :pHora))
 
		order by dateconfirmed desc,
		timeconfirmed desc, id desc)
		
	quit $g(tQuantidade,0)]]></Implementation>
</Method>

<Method name="GetValorEstoqueLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec>Item,Local,DataRef</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Double</ReturnType>
<Implementation><![CDATA[	if ($f(DataRef,"/")'=0){
		set DataRef = $zdh(DataRef,4)
	}
	set YM = 0
	do ^WWWVAR
	
	set custoMedio = $$GetCostForLocn^INAvgCost(Item, Local, DataRef)
	
	set quantidadeEstoque =..GetEstoqueLocalData(Item, Local, DataRef)
	
	set Valor = custoMedio * quantidadeEstoque
	
	quit Valor]]></Implementation>
</Method>

<Method name="GetQtdeReqAno">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = "" _
	
	" SELECT Mes, Ano, " _

	" QtdeLinhaAtend AS Atendida, " _
	" QtdeLinhaRej AS Rejeitada " _

	" FROM SQLUser.VARPainelReqMensal " _

	" ORDER BY Ano, Mes "
	
	set sc = resultSet.Prepare(strSQL)
	
	quit resultSet]]></Implementation>
</Method>

<Method name="GetMediaReqAno">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = "" _
	
	" SELECT Mes, Ano, " _

	" PorcMediaAtend AS Atendida, " _
	" PorcMediaRej AS Rejeitada " _

	" FROM SQLUser.VARPainelReqMensal " _

	" ORDER BY Ano, Mes "
	
	set sc = resultSet.Prepare(strSQL)
	
	quit resultSet]]></Implementation>
</Method>

<Method name="GetItensRejeitadosDia">
<ClassMethod>1</ClassMethod>
<FormalSpec>pData="",pTipo="",pExibeRejeitadosDia="",pLocal=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = "" _
	
	" SELECT LocalDest, SubGrupo, Grupo, Item "
	if (pExibeRejeitadosDia = 1) {
		set strSQL = strSQL _ " ,SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 0 THEN 1 ELSE 0 END) QtdeRejeitada "
	}
	elseif (pExibeRejeitadosDia = 2) {
		set strSQL = strSQL _ " ,SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 0 THEN 0 ELSE 1 END) QtdeRejeitada "
	}
	set strSQL = strSQL _ 
	" FROM VARPainelReq  " _
	" WHERE 1 = 1 " _
	" AND Ano = TO_CHAR("_pData_",'YYYY')  " _
	" AND Mes = TO_CHAR("_pData_",'MM')  " _
	" AND Dia = TO_CHAR("_pData_",'DD') " _
	" AND Prioridade = 1     "
	
	if (pExibeRejeitadosDia = 1) {
		set strSQL = strSQL _ " AND $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) IN (0) "
	}
	elseif (pExibeRejeitadosDia = 2) {
		set strSQL = strSQL _ " AND $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) IN (1) "
	}
	if ($get(pTipo) '= "") {
		set strSQL = strSQL _ " AND $$SQLGetTipoLocalPainel^VARSQL(LocalDest) = '"_pTipo_"' "
	}
	if ($get(pLocal) '= "") {
		set strSQL = strSQL _ " AND LocalDest = '"_pLocal_"' "
	}
	
	set strSQL = strSQL _ " GROUP BY Ano, Mes, Dia, Item "
	set strSQL = strSQL _ " ORDER BY Item "
	
	do resultSet.Prepare(strSQL)
	
	quit resultSet]]></Implementation>
</Method>

<Method name="GetQtdeReqCompetencia">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMes:%String="",pAno:%String=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = "" _
	" SELECT Dia, Mes, Ano, " _
	" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 1 THEN 1 ELSE 0 END) AS Atendida, " _
	" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 0 THEN 1 ELSE 0 END) AS Rejeitada " _
	"  " _
	" FROM VARPainelReq " _
	" WHERE 1 = 1 "
	if (+$get(pAno) > 0) {
		set strSQL = strSQL _ " AND Ano = '"_pAno_"' "
	}
	if (+$get(pMes) > 0) {
		set strSQL = strSQL _ " AND Mes = '"_pMes_"' " 
	}
	
	set strSQL = strSQL _ " GROUP BY Ano, Mes, Dia "
	
	do resultSet.Prepare(strSQL)
	set ^CacheTempFelipe($i(^CacheTempFelipe),$zn,"GetQtdeReqCompetencia") = strSQL
	quit resultSet]]></Implementation>
</Method>

<Method name="GetQtdeTopRejeitada">
<Description><![CDATA[pTipo - 1=Quantidade Rejeitada; 2=Dias Rejeitados]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMes:%String="",pAno:%String="",pTopQtde:%Integer=10,pTipo:%Integer=1</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = "" _
	" 	SELECT TOP " _ pTopQtde _ " COUNT(DISTINCT Dia) QtdeDias, MAX(+Dia) UltimoDia, "_
	"	{fn DAYOFWEEK(Ano || '-' || Mes || '-' || MAX(+Dia))} DiaSemana, " _
	"	CASE WHEN SUM(QtdeSolic - QtdeAtend) < 0 THEN 0 ELSE SUM(QtdeSolic - QtdeAtend) END QtdeRejeitada, "_
	"   Mes, Ano, Item, " _
	"	SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 1 THEN 1 ELSE 0 END) AS Atendida, " _
	"	SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 0 THEN 1 ELSE 0 END) AS Rejeitada " _
	"	FROM VARPainelReq " _
	"	WHERE Ano = '"_pAno_"' " _
	"	AND Mes = '"_ pMes _"' " _
	"	GROUP BY Ano, Mes, Item "
	
	if (pTipo = 1) {
		set strSQL = strSQL _ "	ORDER BY QtdeRejeitada DESC "
	}
	elseif (pTipo = 2) {
		set strSQL = strSQL _ " ORDER BY QtdeDias DESC "
	}
	set ^CacheTempFelipe($i(^CacheTempFelipe),$zn) = strSQL
	set sc = resultSet.Prepare(strSQL)
	quit resultSet]]></Implementation>
</Method>

<Method name="GetQtdeReqRegiao">
<ClassMethod>1</ClassMethod>
<FormalSpec>pData:%String="",pTipo:%String=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = "" _
	" SELECT " _
	" $$SQLGetTipoLocalPainel^VARSQL(LocalDest) Regional,   " _
	" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 1 THEN 1 ELSE 0 END) AS Atendida,   " _
	" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 0 THEN 1 ELSE 0 END) AS Rejeitada     " _
	"  " _
	" FROM SQLUser.VARPainelReq     " _
	"  " _
	" WHERE 1 = 1   " _
	" AND Prioridade = 1   " _
	" AND $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) IN (0,1)   "
	
	if (+$get(pData) > 0) {
		set strSQL = strSQL _ 
		" AND Ano = TO_CHAR("_pData_",'YYYY') " _
		" AND Mes = TO_CHAR("_pData_",'MM') " _
		" AND Dia = TO_CHAR("_pData_",'DD') " 
	
	}
	if ($get(pTipo) '= "") {
		set strSQL = strSQL _ " AND $$SQLGetTipoLocalPainel^VARSQL(LocalDest) = '"_pTipo_"' "
	}
	set strSQL = strSQL _ " GROUP BY Ano, Mes, Dia "
	
	if ($get(pTipo) '= "") {
		set strSQL = strSQL _ " ,$$SQLGetTipoLocalPainel^VARSQL(LocalDest) "
	}
	
	set strSQL = strSQL _ " ORDER BY Rejeitada DESC "
	set ^CacheTempFelipe($i(^CacheTempFelipe),$zn,"GetQtdeReqRegiao") = strSQL
	do resultSet.Prepare(strSQL)
	
	quit resultSet]]></Implementation>
</Method>

<Method name="GetQtdeReqAtendTipoEst">
<ClassMethod>1</ClassMethod>
<FormalSpec>pData:%String="",pTipoEst:%String="",pAgrupaTipoEst:%Boolean=0,pTipoEstab:%String=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = "" _
	" SELECT " _
	" $$SQLGetTipoLocalPainel^VARSQL(LocalDest) TipoEstab,   " _
	" LocalDest Location, " _
	" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 1 THEN 1 ELSE 0 END) AS Atendida,   " _
	" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 0 THEN 1 ELSE 0 END) AS Rejeitada,     " _
	"  " _
	" +CASE WHEN +SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 0 THEN 1 ELSE 0 END) > 0 THEN " _
	" (SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 1 THEN 1 ELSE 0 END) +   " _
	" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 0 THEN 1 ELSE 0 END)) / " _
	
	;" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 1 THEN 1 ELSE 0 END) " _
	" CASE WHEN SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 1 THEN 1 ELSE 0 END) > 0 "_
	" THEN SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 1 THEN 1 ELSE 0 END)  " _
	" ELSE 1 END " _
	" ELSE 0 END " _
	" AS PorcentRej     " _
	"  " _
	" FROM SQLUser.VARPainelReq     " _
	"  " _
	" WHERE 1 = 1   " _
	" AND Prioridade = 1   " _
	" AND $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) IN (0,1)   "
	
	if (+$get(pData) > 0) {
		set strSQL = strSQL _ 
		" AND Ano = TO_CHAR("_pData_",'YYYY') " _
		" AND Mes = TO_CHAR("_pData_",'MM') " _
		" AND Dia = TO_CHAR("_pData_",'DD') " 
	}
	if ($get(pTipoEst) '= "") {
		set strSQL = strSQL _ " AND $$SQLGetTipoLocalPainel^VARSQL(LocalDest) = '"_pTipoEst_"' "
	}
	if ($get(pTipoEstab) '= "") {
		set strSQL = strSQL _ " AND LocalDest = '"_pTipoEstab_"' "
	}
	
	set strSQL = strSQL _ " GROUP BY Ano, Mes, Dia "
	
	if ($get(pAgrupaTipoEst) '= "") {
		set strSQL = strSQL _ " , $$SQLGetTipoLocalPainel^VARSQL(LocalDest) "
	}
	
	if ($get(pTipoEst) '= "") {
		set strSQL = strSQL _ " , LocalDest "
	}
	
	set strSQL = strSQL _ " ORDER BY PorcentRej DESC "
	set ^CacheTempFelipe($i(^CacheTempFelipe),$zn,"GetQtdeReqAtendTipoEst") = strSQL
	do resultSet.Prepare(strSQL)
	
	quit resultSet]]></Implementation>
</Method>

<Method name="GetQtdeReqAtendLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec>pData:%String="",pRegional:%String=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = "" _
	" SELECT " _
	" $$SQLGetTipoLocalPainel^VARSQL(LocalDest) Regional,   " _
	" LocalDest Location, " _
	" Item Item,  " _
	" SUM(QtdeSolic - QtdeAtend) QtdRej " _
	"  " _
	" FROM SQLUser.VARPainelReq     " _
	"  " _
	" WHERE 1 = 1   " _
	" AND Prioridade = 1   " _
	" AND $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) IN (0)   "
	
	if (+$get(pData) > 0) {
		set strSQL = strSQL _ 
		" AND Ano = TO_CHAR("_pData_",'YYYY') " _
		" AND Mes = TO_CHAR("_pData_",'MM') " _
		" AND Dia = TO_CHAR("_pData_",'DD') " 
	}
	
	if (pRegional '= "") {
		set strSQL = strSQL _ " AND LocalDest = '"_pRegional_"' "
	}
	
	set strSQL = strSQL _ "  " _
	
	" GROUP BY Item " _
	" HAVING SUM(QtdeSolic - QtdeAtend) > 0 " _
	" ORDER BY QtdRej DESC "
	set ^CacheTempFelipe($i(^CacheTempFelipe),$zn,"GetQtdeReqAtendLocal") = strSQL
	do resultSet.Prepare(strSQL)
	
	quit resultSet]]></Implementation>
</Method>

<Method name="GetQtdeProduto">
<ClassMethod>1</ClassMethod>
<FormalSpec>pData:%String="",pProd:%String="",pTipoEst:%String=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = "" _
	" SELECT " _
	" LocalDest,   " _
	" Item Item,  " _
	" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 1 THEN 1 ELSE 0 END) AS Atendida, " _
	" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 0 THEN 1 ELSE 0 END) AS Rejeitada, " _
	" SUM(QtdeSolic - QtdeAtend) QtdRej " _
	
	" FROM SQLUser.VARPainelReq     " _
	
	" WHERE 1 = 1   " _
	" AND Prioridade = 1   " _
	" AND $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) IN (0,1)   "
	
	if (+$get(pData) > 0) {
		set strSQL = strSQL _ 
		" AND Ano = TO_CHAR("_pData_",'YYYY') " _
		" AND Mes = TO_CHAR("_pData_",'MM') " _
		" AND Dia = TO_CHAR("_pData_",'DD') "
	}
	
	if ($get(pProd) '= "") {
		set strSQL = strSQL _ " AND Item = '"_ pProd _"' "
	}
	
	if ($get(pTipoEst) '= "") {
		set strSQL = strSQL _ " AND $$SQLGetTipoLocalPainel^VARSQL(LocalDest) = '"_pTipoEst_"' "
	}
	
	
	set strSQL = strSQL _ "  " _
	
	" GROUP BY Item, LocalDest "
	
	if ($get(pTipoEst) '= "") {
		set strSQL = strSQL _ " ,$$SQLGetTipoLocalPainel^VARSQL(LocalDest) "
	}
	
	set strSQL = strSQL _ " HAVING SUM(QtdeSolic - QtdeAtend) > 0 " _
	
	" ORDER BY QtdRej DESC "
	
	set ^CacheTempFelipe($i(^CacheTempFelipe),$zn,"GetQtdeProduto") = strSQL
	do resultSet.Prepare(strSQL)
	
	quit resultSet]]></Implementation>
</Method>

<Method name="GetDadosReqMail">
<ClassMethod>1</ClassMethod>
<FormalSpec>pData:%String=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = "" _
	" SELECT TOP 10 " _
	" LocalDest,   " _
	" Item Item,  " _
	" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 1 THEN 1 ELSE 0 END) AS Atendida, " _
	" SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 0 THEN 1 ELSE 0 END) AS Rejeitada, " _
	" QtdeSolic QtdeSolic, " _
	" QtdeAtend QtdeAtend, " _
	" SUM(QtdeSolic - QtdeAtend) QtdRej " _
	
	" FROM SQLUser.VARPainelReq     " _
	
	" WHERE 1 = 1   " _
	" AND Prioridade = 1   " _
	" AND $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) IN (0,1)   "
	
	if (+$get(pData) > 0) {
		set strSQL = strSQL _ 
		" AND TO_DATE(Dia||'/'||Mes||'/'||Ano,'DD/MM/YYYY')  BETWEEN ("_pData_" - 60) AND "_pData_" "
	}
	
	
	set strSQL = strSQL _ " GROUP BY Item "
	
	set strSQL = strSQL _ " HAVING " _
	" SUM(QtdeSolic - QtdeAtend) > 0 " _
	" AND SUM(CASE WHEN $$SQLIsReqLinhaAtendidaPainel^VARSQL(ReqNumber, ReqLineNumber) = 0 THEN 1 ELSE 0 END) > 0 " _
	
	" ORDER BY Rejeitada DESC, QtdeSolic DESC, QtdRej DESC "
	set ^CacheTempFelipe($i(^CacheTempFelipe),$zn,"GetDadosReqMail") = strSQL
	do resultSet.Prepare(strSQL)
	
	quit resultSet]]></Implementation>
</Method>

<Method name="GetListaSubLocais">
<ClassMethod>1</ClassMethod>
<FormalSpec>unidade</FormalSpec>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[	do ^WWWVAR
	set lista = ##class(%ListOfDataTypes).%New()
	set loc = ""
	if (unidade '= "") {
		for {
			set loc = $order(^WWW0121s(0,2,0,unidade,0,loc))
			quit:loc=""
			if (($$$WWW0121StorageLocn(^WWW0121(0,0,loc,1))) && (+$$$WWW0121FREE21(^WWW0121(0,0,loc,1)) > 0) ) {
				do lista.Insert(loc)
			}
		}
	}
	quit lista]]></Implementation>
</Method>

<Method name="GetListaLocaisPorTipo">
<ClassMethod>1</ClassMethod>
<FormalSpec>tipo</FormalSpec>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[	do ^WWWVAR
	set lista = ##class(%ListOfDataTypes).%New()
	set loc = ""
	for {
		set loc = $order(^WWW0121(0,0,loc))
		quit:loc=""
		if (($$$WWW0121StorageLocn(^WWW0121(0,0,loc,1))) && (+$$$WWW0121FREE21(^WWW0121(0,0,loc,1)) = tipo) ) {
			do lista.Insert(loc)
		}
	}
	quit lista]]></Implementation>
</Method>

<Method name="GetCDPorLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec>Local</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	do ^WWWVAR
	set objLocal = $get(^WWW0121(0,0,Local,1))
	if ($$$WWW0121FREE15(objLocal)) {
		quit Local
	}
	else {
		set localPai = $$$WWW0121ParentLocn(objLocal)
		if (localPai '= "") {
			set Local = ..GetCDPorLocal(localPai)
		}
	}
	quit Local]]></Implementation>
</Method>

<Method name="GetUnidade">
<ClassMethod>1</ClassMethod>
<FormalSpec>Local</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	do ^WWWVAR
	quit:Local="" ""
	set objLocal = $get(^WWW0121(0,0,Local,1))
	if ($LENGTH(Local) = 3) {
		quit Local
	}
	else {
		set localPai = $$$WWW0121ParentLocn(objLocal)
		set Local = ..GetUnidade(localPai)
	}
	quit Local]]></Implementation>
</Method>

<Method name="GetEstoqueTotalLocal">
<ClassMethod>1</ClassMethod>
<FormalSpec>Item,Local,DataRef</FormalSpec>
<ReturnType>%Double</ReturnType>
<Implementation><![CDATA[	do ^WWWVAR
	set total = 0
	if ('$$SQLIsCD^VARSQL(Local)) {
		set total = ..GetValorEstoqueLocal(Item, Local, DataRef)
	} 
	set locRegional = ""
	for {
		set locRegional = $order(^WWW0121s(0,2,0,Local,0,locRegional))
		quit:locRegional=""
		;;w !,locRegional
		
		set valor =  +..GetValorEstoqueLocal(Item, locRegional, DataRef)
		set total = total + valor
		if valor > 0 { 
			w !,locRegional
			w " Total "_valor
		}
	}
	quit total]]></Implementation>
</Method>

<Method name="GetEstoqueTipoUnid">
<ClassMethod>1</ClassMethod>
<FormalSpec>pItem:%String,pTipoEstab:%String=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = "" _
	
	" SELECT  " _
	" SUM(QtyOnHand) - SUM(NVL(QtyRequired,0)) QtyAvailable " _
	" ,SUM(QtyOnHand) QtyTotal " _
	" ,SUM(NVL(QtyRequired,0)) As QtyReserved " _
	" ,$$SQLGetTipoLocalPainel^VARSQL(Storage->Location) TipoEstab " _

	" FROM alSOH.dBundleStock " _

	" LEFT JOIN (SELECT Bundle AS ABundle, Item AS AItem ,FromStorage AS AFromStorage ,QtyRequired " _
	" FROM alDRP.dPlannedMovement 															 " _
	" WHERE dPlannedMovement.State->StateId = 3 OR dPlannedMovement.State IS NULL)			 " _
	" ON ABundle = dBundleStock.Bundle 															 " _
	" AND  AItem = dBundleStock.Item															 " _
	" AND  AFromStorage=dBundleStock.Storage													 " _

	" 	WHERE  " _
	" 		dBundleStock.Item='"_$get(pItem)_"' " _

	" 	AND (dBundleStock.QtyOnHand > 0) "	
	
	if (pTipoEstab '= "") {
		set strSQL = strSQL _ " WHERE $$SQLGetTipoUnidadeDesc^VARSQL($$SQLGetTipoLocalPainel^VARSQL(Storage->Location) = '"_pTipoEstab_"'"
	}

	set strSQL = strSQL _ " GROUP BY $$SQLGetTipoUnidadeDesc^VARSQL($$SQLGetTipoLocalPainel^VARSQL(Storage->Location)) "
	
	do resultSet.Prepare(strSQL)
	
	quit resultSet]]></Implementation>
</Method>

<Method name="GetConsumoMedio">
<ClassMethod>1</ClassMethod>
<FormalSpec>pItem:%String,pTipoEstab:%String=""</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set strSQL = " " _
	" select TO_CHAR(issue.Posted,'MM/YYYY') MesAno " _
	" ,$$SQLGetTipoLocalPainel^VARSQL(issue.fromlocn) TipoEstab " _
	" ,line.Item  " _
	" ,SUM(line.QtyIssued) QtdeSaida " _
	"  " _
	" from inissue issue " _
	" inner join inissueline line " _
	" on issue.issuenumber = line.issuenumber " _
	"  " _
	" where UPPER(item) = '"_pItem_"' " _
	" and UPPER(issue.Status) = '9' "
	if (pTipoEstab '= "") {
		set strSQL = strSQL = " AND $$SQLGetTipoLocalPainel^VARSQL(upper(issue.fromlocn)) = '"_pTipoEstab_"' "
	}
	set strSQL = strSQL _ " GROUP BY TO_CHAR(issue.Posted,'MM/YYYY'),  " _
	" line.Item, "
	if (pTipoEstab '= "") {
		set strSQL = strSQL = " $$SQLGetTipoLocalPainel^VARSQL(upper(issue.fromlocn))  "
	}
	
	
	do resultSet.Prepare(strSQL)
	
	quit resultSet]]></Implementation>
</Method>
</Class>
</Export>