<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="COM.fwk.entity.PersistentUtil">
<Description><![CDATA[

Contains some utility methods specific to the Persistent classes.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassType/>
<Import>COM.fwk.www.bo,COM.fwk.entity</Import>
<ProcedureBlock>1</ProcedureBlock>
<Super>%RegisteredObject</Super>

<Method name="globalRecordToPersistentObject">
<Description><![CDATA[

Converts a global record into its respective persistent object.

<p>

Only works if the global has a referring persistent class.

<p>
 
Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,persistentId:%String,record:%String</FormalSpec>
<Implementation><![CDATA[
	
	set entity = $System.OBJ.OpenId(className, persistentId)
	
	if (entity = "") {
		set entity = $System.OBJ.New(className)
	}
	
	set pkList = ##class(ClassPKBO).%New().listByClass(className)
	set count = pkList.Count()

	if ((count + 1) '= $length(persistentId, "||")) {
		do ##class(COM.fwk.entity.Persistent).raiseRuntimeException("primary key list and id length counts differ")
	}
	
	do ##class(COM.fwk.entity.Persistent).setObjectProperty(entity, "Company", $piece(persistentId, "||", 1))
	
	for i = 1 : 1 : count {
		set pkDTO = pkList.GetAt(i)
		
		do ##class(COM.fwk.entity.Persistent).setObjectProperty(entity, pkDTO.fieldName, $piece(persistentId, "||", pkDTO.fieldNumber + 1))
	}
	
	set fieldList = ##class(ClassFieldBO).%New().listByClass(className)
	set count = fieldList.Count()

	for i = 1 : 1 : count {
		set classFieldDTO = fieldList.GetAt(i)
		
		do ##class(COM.fwk.entity.Persistent).setObjectProperty(entity, classFieldDTO.fieldName, $piece(record, "~", classFieldDTO.fieldNumber))
	}
	
	quit entity
]]></Implementation>
</Method>

<Method name="persistentObjectToGlobalRecord">
<Description><![CDATA[

Converts a persistent object to its respective global record.

<p>

Only works if the global has a referring persistent class.

<p>
 
Author: Tharsis Campos - Disclinc Brasil

[Previously private]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,entity:%ObjectHandle</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set fieldList = ##class(ClassFieldBO).%New().listByClass(className)
	set globalRecord = ""
	set count = fieldList.Count()
	
	for i = 1 : 1 : count {
		set classFieldDTO = fieldList.GetAt(i)

		set value = ##class(COM.fwk.entity.Persistent).getObjectProperty(entity, classFieldDTO.fieldName)
		
		set $piece(globalRecord, "~", classFieldDTO.fieldNumber) = value
	}
	
	quit globalRecord
]]></Implementation>
</Method>

<Method name="persistentIdToNManagerId">
<Description><![CDATA[

Converts a persistent id to respective net manager id.

<p>

Conversion: companyCode||pk1||pk2||...||pkn turns to
pk1,pk2,...,pkn.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>persistentId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set companyRemoved = $extract(persistentId, $find(persistentId, "||"), $length(persistentId))
	quit ##class(COM.fwk.util.StringUtil).substituteString(companyRemoved, "||", ",")
]]></Implementation>
</Method>

<Method name="nManagerIdToPersistentId">
<Description><![CDATA[

Converts a persistent id to respective net manager id.

<p>

Conversion: companyCode||pk1||pk2||...||pkn turns to
pk1,pk2,...,pkn.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>nManagerId:%String,companyCode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set id = ##class(COM.fwk.util.StringUtil).substituteString(nManagerId, ",", "||")

	quit companyCode _ "||" _ id
]]></Implementation>
</Method>

<Method name="getObjectProperty">
<Description><![CDATA[

Retrieves a property from an object.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>objectORef:%ObjectHandle,propertyName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $ZOBJMETHOD(objectORef, propertyName _ "Get")
]]></Implementation>
</Method>

<Method name="setObjectProperty">
<Description><![CDATA[

Defines a property of an object.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>objectORef:%ObjectHandle,propertyName:%String,value:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $ZOBJMETHOD(objectORef, propertyName _ "Set", value)
]]></Implementation>
</Method>

<Method name="loadPersistentEntity">
<Description><![CDATA[

Loads a persistent object from the disk.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>persistentEntityName:%String,persistentEntityId:%String</FormalSpec>
<ReturnType>%Persistent</ReturnType>
<Implementation><![CDATA[	quit $System.OBJ.OpenId(persistentEntityName, persistentEntityId)
]]></Implementation>
</Method>

<Method name="copyObjectProperties">
<Description><![CDATA[

Copies one object's properties to another.

<p>

Was not tested under objects of different classes.

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sourceObj:%ObjectHandle,targetObj:%ObjectHandle</FormalSpec>
<Implementation><![CDATA[
	set sourceDef = ##class(%ClassDefinition).%New(sourceObj.%ClassName(1))
	set sourcePropertiesList = sourceDef.Properties
	set count = sourcePropertiesList.Count()
	
	for i = 1 : 1 : count {
		set propertyDef = sourcePropertiesList.GetAt(i)
		set sourceValue = ##class(PersistentUtil).getObjectProperty(sourceObj, propertyDef.Name)
		
		do ##class(PersistentUtil).setObjectProperty(targetObj, propertyDef.Name, sourceValue)
	}
]]></Implementation>
</Method>

<Method name="listPropertiesChanged">
<Description><![CDATA[

Between two objects, tells the property names
that are different between the two.

<p>

(Was not tested under objects of different classes.)

<p>

Author: Tharsis Campos - Disclinc Brasil
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sourceObj:%ObjectHandle,targetObj:%ObjectHandle</FormalSpec>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set sourceDef = ##class(%ClassDefinition).%New(sourceObj.%ClassName(1))
	set sourcePropertiesList = sourceDef.Properties
	set count = sourcePropertiesList.Count()
	set changes = ##class(%ListOfDataTypes).%New()
	
	for i = 1 : 1 : count {
		set propertyDef = sourcePropertiesList.GetAt(i)
		
		set sourceValue = ##class(PersistentUtil).getObjectProperty(sourceObj, propertyDef.Name)
		set targetValue = ##class(PersistentUtil).getObjectProperty(targetObj, propertyDef.Name)
		
		if (sourceValue '= targetValue) {
			do changes.Insert(propertyDef.Name)
		}
	}
	
	quit changes
]]></Implementation>
</Method>
</Class>
</Export>