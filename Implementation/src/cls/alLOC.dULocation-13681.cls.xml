<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alLOC.dULocation">
<ClassType>persistent</ClassType>
<IncludeCode>INConst,COMSYS</IncludeCode>
<Super>User.WWW0121</Super>

<Property name="ParentLocation">
<Type>alLOC.dULocation</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00621"/>
</Property>


<Property name="Storages">
<Type>%Library.ListOfObjects</Type>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00622"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="ParentLocationGet">
<ReturnType>alLOC.dULocation</ReturnType>
<Implementation><![CDATA[
	if (i%ParentLocation = $$$NULLOREF) {
		set objParentLocation = ##class(alLOC.dULocation).%OpenId("0||"_%this.ParentLocn)
		if (objParentLocation '= $$$NULLOREF) {
			set i%ParentLocation = objParentLocation
		}
	}
	quit i%ParentLocation
]]></Implementation>
</Method>

<Method name="StoragesGet">
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dStorage to dUStorage
	;-------------------------------------------------------------------------------
	if (i%Storages = $$$NULLOREF) {
		set i%Storages   = ##class(%Library.ListOfObjects).%New()
		set objResultSet = ##class(%Library.ResultSet).%New("alLOC.dUStorage:GetStoragesForLocation")
		do objResultSet.Execute(%this.Location)
		
		while (objResultSet.Next()) {
			; We could do this as an $order(^INREQ(0,%this.Location,strStorageId))
			set objLocn = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Location_"||"_objResultSet.Data("StockLocation"))
			if (objLocn '= $$$NULLOREF) {
				set objLocn.ParentLocation = %this
				do i%Storages.Insert(objLocn)
			}
		}
	}
	quit i%Storages
]]></Implementation>
</Method>

<Method name="GetStock">
<FormalSpec>objItem</FormalSpec>
<ReturnType>%Library.ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set objStockList = ##class(%Library.ListOfObjects).%New()
	
	; FIXME : Complete population or remove <GRF/HQN>
	
	quit objStockList
]]></Implementation>
</Method>

<Method name="GetDefaultStorage">
<FormalSpec>pidItem,*sc:%Status</FormalSpec>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	;     OBSOLETE : Replace with calls to methods below for specific storage types
	; 
	;-------------------------------------------------------------------------------
	; 
	; look at ANM: Item Location Parameters 
	; 1.  Stock Item + Location						(^INARTLOCPAR)
	;     (Alphalinc >> Items >> Item Master Data >> ItemLocationParameter Button)
	;     a)	Receipt
	;     b)	On Hand
	; 2.  Location Master Data						(^WWW0121)
	;     (Alphalinc >> System >> Company Parameters >> Edit Locations >> Storage Tab)
	;     a)	Receipt
	;     b)	On Hand
	; 3.  General Location Parameters for Location	(^INVORGB)
	;     (Alphalinc >> Program Parameters >> Edit General Parameters >> Location Button)
	;     a)	On Hand
	;     
	; History:
	; 09-Nov-2009	GRF		string check is for null not NULLOREF
	; 31-Jul-2008	Luke	SR15814: corrected the sc formation 
	; 24-Jan-2008	HQN		SR15625 Changed class signature dStorage to dUStorage
	; 04-Dec-2007	HQN		Implemented more lookups and fixed loading of storage
	;-------------------------------------------------------------------------------
	;  See also : DefaultStkLoc^INARTUtilities
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	// lookup ^INARTLOCPAR
	set strDefaultStorage = $$$INARTLOCPARDefaultReceiptStorage($get(^INARTLOCPAR(0,pidItem,%this.Location,1)))
	if (strDefaultStorage = "") {
		set strDefaultStorage = $$$INARTLOCPARDefaultOnHandStorage($get(^INARTLOCPAR(0,pidItem,%this.Location,1)))
	}

	// lookup ^WWW0121
	if (strDefaultStorage = "") {
		set strDefaultStorage = %this.ReceiptStorage
	}
	
	if (strDefaultStorage = "") {
		set strDefaultStorage = %this.OnHandStorage
	}
	
	; lookup ^INVORGB
	if (strDefaultStorage = "") {
		set strDefaultStorage = $$$INVORGBOnHandLocation($get(^INVORGB(0,%this.Company,%this.Location,1)))
	}
	
	;-----
	
	set objStorage = $$$NULLOREF
	if (strDefaultStorage '= "") {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Location_"||"_strDefaultStorage)
	}
	if (objStorage = $$$NULLOREF) {
		
		set strMessage = $$$Text($listbuild("alLOC0001",%this.Location))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	} ; "No default storage found for location %1"
	quit objStorage
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
	;-------------------------------------------------------------------------------
	;  Generic note for all GetDefault...Storage methods
	;        (1 &gt;&gt; 2 &gt;&gt; 3)   may not invoke all three in each case.
	;
	; 1.  Stock Item + Location						(^INARTLOCPAR)
	;     	(Alphalinc &gt;&gt; Items &gt;&gt; Item Master Data &gt;&gt; ItemLocationParameter Button)
	;     	
	; 2.  Location Master Data						(^WWW0121)
	;     	(Alphalinc &gt;&gt; System &gt;&gt; Company Parameters &gt;&gt; Edit Locations &gt;&gt; Storage Tab)
	;     	
	; 3.  General Location Parameters for Location	(^INVORGB)
	;     	(Alphalinc &gt;&gt; Program Parameters &gt;&gt; Edit General Parameters &gt;&gt; Location Button)
	;  
	;  See also : DefaultStkLoc^INARTUtilities and some other specific instances for
	;  obsolete code that needs to be mapped here instead.
	;-------------------------------------------------------------------------------
*/
</Content>
</UDLText>


<Method name="GetDefaultOnHandStorage">
<FormalSpec>pidItem,*sc:%Status</FormalSpec>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; On Hand Storage   (1 >> 2 >> 3)
	; 
	; History:
	; 18-Nov-2009	DWR		SR17044: extened the error string message to include the 
	; 							specific type of storage being looked at.
	; 31-Jul-2008	Luke	SR15814: corrected the sc formation 
	; 24-Jan-2008 	HQN		SR15625 Changed class signature dStorage to dUStorage
	; 07-Dec-2007	GRF		Adapted for specific Storage Type
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set strDefaultStorage = $$$INARTLOCPARDefaultOnHandStorage($get(^INARTLOCPAR(0,pidItem,%this.Location,1)))
	if (strDefaultStorage = "") {
		set strDefaultStorage = %this.OnHandStorage
	}
	if (strDefaultStorage = "") {
		set strDefaultStorage = $$$INVORGBOnHandLocation($get(^INVORGB(0,%this.Company,%this.Location,1)))
	}
	set objStorage = $$$NULLOREF
	if (strDefaultStorage '= "") {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Location_"||"_strDefaultStorage)
	}
	
	if (objStorage = $$$NULLOREF) {
 ;		set strMessage = $$$Text($listbuild("alLOC0001",%this.Location))
		set strMessage = $$$Text($listbuild("alLOC0010",$$$StrWWW0121OnHandStorage,%this.Location))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	} ; "No default storage found for location %1"

	quit objStorage
]]></Implementation>
</Method>

<Method name="GetDefaultReceiptStorage">
<FormalSpec>pidItem="&quot;,*sc:%Status</FormalSpec>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Goods Receipt Storage   (1 >> 2)
	; 
	; History:
	; 18-Nov-2009	DWR		SR17044: extened the error string message to include the 
	; 							specific type of storage being looked at.
	; 31-Jul-2008	Luke	SR15814: corrected the sc formation 
	; 24-Jan-2008 	HQN		SR15625 Changed class signature dStorage to dUStorage
	; 07-Dec-2007	PPP		Added Consumable Item Storage definition
	; 07-Dec-2007	GRF		Adapted for specific Storage Type
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set strDefaultStorage = ""
	
	if (pidItem '= "") {
		if $$IsConsumable^INARTLOCPAR(pidItem,%this.Location) {
			set strDefaultStorage = $$$INVORGDeleteStockLocation($get(^INVORG(0,0,1)))
			
		} else {
			set strDefaultStorage = $$$INARTLOCPARDefaultReceiptStorage($get(^INARTLOCPAR(0,pidItem,%this.Location,1)))
		}
	}
	
	if (strDefaultStorage="") set strDefaultStorage = %this.ReceiptStorage
	
	set objStorage = $$$NULLOREF
	if (strDefaultStorage '= "") {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Location_"||"_strDefaultStorage)
	}
	
	if (objStorage = $$$NULLOREF) {
 ;		set strMessage = $$$Text($listbuild("alLOC0001",%this.Location))
		set strMessage = $$$Text($listbuild("alLOC0010",$$$StrWWW0121ReceiptStorage,%this.Location))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	} ; "No default storage found for location %1"
	
	quit objStorage
]]></Implementation>
</Method>

<Method name="GetDefaultDespatchStorage">
<FormalSpec>pidItem,*sc:%Status</FormalSpec>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Despatch Storage   (1 >> 2)
	; 
	; History:
	; 18-Nov-2009	DWR		SR17044: extened the error string message to include the 
	; 							specific type of storage being looked at.
	; 31-Jul-2008	Luke	SR15814: corrected the sc formation 
	; 24-Jan-2008 	HQN		SR15625 Changed class signature dStorage to dUStorage
	; 07-Dec-2007	GRF		Adapted for specific Storage Type
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set strDefaultStorage = $$$INARTLOCPARDefaultDespatchStorage($get(^INARTLOCPAR(0,pidItem,%this.Location,1)))
	
	if (strDefaultStorage = "") {
		set strDefaultStorage = %this.DespatchStorage
	}
	
	set objStorage = $$$NULLOREF
	if (strDefaultStorage '= "") {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Location_"||"_strDefaultStorage)
	}
	
	if (objStorage = $$$NULLOREF) {
 ;		set strMessage = $$$Text($listbuild("alLOC0001",%this.Location))
		set strMessage = $$$Text($listbuild("alLOC0010",$$$StrWWW0121DespatchStorage,%this.Location))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	} ; "No default storage found for location %1"

	quit objStorage
]]></Implementation>
</Method>

<Method name="GetDefaultMissingStorage">
<FormalSpec>pidItem,*sc:%Status</FormalSpec>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Missing Stock Storage   (1 >> 2)
	; 
	; History:
	; 18-Nov-2009	DWR		SR17044: extened the error string message to include the 
	; 							specific type of storage being looked at.
	; 31-Jul-2008	Luke	SR15814: corrected the sc formation 
	; 24-Jan-2008	HQN		SR15625 Changed class signature dStorage to dUStorage
	; 07-Dec-2007	GRF		Adapted for specific Storage Type
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set strDefaultStorage = $$$INARTLOCPARDefaultMissingStorage($get(^INARTLOCPAR(0,pidItem,%this.Location,1)))
	
	if (strDefaultStorage = "") {
		set strDefaultStorage = %this.MissingStockStorage
	}
	
	set objStorage = $$$NULLOREF
	if (strDefaultStorage '= "") {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Location_"||"_strDefaultStorage)
	}
	
	if (objStorage = $$$NULLOREF) {
 ;		set strMessage = $$$Text($listbuild("alLOC0001",%this.Location))
		set strMessage = $$$Text($listbuild("alLOC0010",$$$StrWWW0121MissingStockStorage,%this.Location))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	} ; "No default storage found for location %1"

	quit objStorage
]]></Implementation>
</Method>

<Method name="GetDefaultDamagedStorage">
<FormalSpec>pidItem,*sc:%Status</FormalSpec>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Damaged Stock Storage   (1 >> 2)
	; 
	; History:
	; 18-Nov-2009	DWR		SR17044: extened the error string message to include the 
	; 							specific type of storage being looked at.
	; 31-Jul-2008	Luke	SR15814: corrected the sc formation 
	; 24-Jan-2008 	HQN		SR15625 Changed class signature dStorage to dUStorage
	; 07-Dec-2007	GRF		Adapted for specific Storage Type
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set strDefaultStorage = $$$INARTLOCPARDefaultDamagedStorage($get(^INARTLOCPAR(0,pidItem,%this.Location,1)))
	
	if (strDefaultStorage = "") {
		set strDefaultStorage = %this.DamagedStockStorage
	}
	
	set objStorage = $$$NULLOREF
	if (strDefaultStorage '= "") {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Location_"||"_strDefaultStorage)
	}
	
	if (objStorage = $$$NULLOREF) {
 ;		set strMessage = $$$Text($listbuild("alLOC0001",%this.Location))
		set strMessage = $$$Text($listbuild("alLOC0010",$$$StrWWW0121DamagedStockStorage,%this.Location))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	} ; "No default %1 found for location %2"

	quit objStorage
]]></Implementation>
</Method>

<Method name="GetDefaultSuppReturnStorage">
<FormalSpec>pidItem,*sc:%Status</FormalSpec>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Return To Supplier Storage   (2 >> 3)
	; 
	; History:
	; 18-Nov-2009	DWR		SR17044: extened the error string message to include the 
	; 							specific type of storage being looked at.
	; 31-Jul-2008	Luke	SR15814: corrected the sc formation 
	; 24-Jan-2008 	HQN		SR15625 Changed class signature dStorage to dUStorage
	; 07-Dec-2007	GRF		Adapted for specific Storage Type
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set strDefaultStorage = %this.SuppReturnStorage
	
	if (strDefaultStorage = "") {
		set strDefaultStorage = $$$INVORGBReturnStockLocation($get(^INVORGB(0,%this.Company,%this.Location,1)))
	}

	set objStorage = $$$NULLOREF
	if (strDefaultStorage '= "") {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Location_"||"_strDefaultStorage)
	}
	
	if (objStorage = $$$NULLOREF) {
 ;		set strMessage = $$$Text($listbuild("alLOC0001",%this.Location))
		set strMessage = $$$Text($listbuild("alLOC0010",$$$StrWWW0121SuppReturnStorage,%this.Location))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	} ; "No default storage found for location %1"

	quit objStorage
]]></Implementation>
</Method>

<Method name="GetDefaultCustReturnStorage">
<FormalSpec>pidItem,*sc:%Status</FormalSpec>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Returned from Customer Storage   (2 >> 3)
	; 
	; History:
	; 18-Nov-2009	DWR		SR17044: extened the error string message to include the 
	; 							specific type of storage being looked at.
	; 31-Jul-2008	Luke	SR15814: corrected the sc formation
	; 24-Jan-2008 	HQN		SR15625 Changed class signature dStorage to dUStorage
	; 07-Dec-2007	GRF		Adapted for specific Storage Type
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set strDefaultStorage = %this.CustReturnStorage
	
	if (strDefaultStorage = "") {
		set strDefaultStorage = $$$INVORGBReturnStockLocation($get(^INVORGB(0,%this.Company,%this.Location,1)))
	}

	set objStorage = $$$NULLOREF
	if (strDefaultStorage '= "") {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Location_"||"_strDefaultStorage)
	}
	
	if (objStorage = $$$NULLOREF) {
 ;		set strMessage = $$$Text($listbuild("alLOC0001",%this.Location))
		set strMessage = $$$Text($listbuild("alLOC0010",$$$StrWWW0121CustReturnStorage,%this.Location))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	} ; "No default storage found for location %1"

	quit objStorage
]]></Implementation>
</Method>

<Method name="GetDefaultManuReturnStorage">
<FormalSpec>pidItem,*sc:%Status</FormalSpec>
<ReturnType>alLOC.dUStorage</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Returned from Customer Storage   (2 >> 3)
	; 
	; History:
	; 16-Aug-2010	PPP		SR16573:Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	
	set strDefaultStorage = %this.ManuReturnStorage
	
	if (strDefaultStorage = "") {
		set strDefaultStorage = $$$INVORGBReturnStockLocation($get(^INVORGB(0,%this.Company,%this.Location,1)))
	}

	set objStorage = $$$NULLOREF
	if (strDefaultStorage '= "") {
		set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_%this.Location_"||"_strDefaultStorage)
	}
	
	if (objStorage = $$$NULLOREF) {
		set strMessage = $$$Text($listbuild("alLOC0010",$$$StrWWW0121ManuReturnStorage,%this.Location))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	} ; "No default storage found for location %1"

	quit objStorage
]]></Implementation>
</Method>
<UDLText name="T">
<Content>
/*
/// Checks to see if the object identified by the ID &lt;var&gt;id&lt;/var&gt; exists in the extent.
/// 
/// &lt;p&gt;Returns &lt;CLASS&gt;%Boolean&lt;/CLASS&gt; TRUE is it exists, FALSE if it does not.
ClassMethod %ExistsId(id As %String) As %Boolean [ CodeMode = generator, ProcedureBlock = 1 ]
{
	;-------------------------------------------------------------------------------
	; Wrapper to prepend company to key before checking for record
	; 
	; History
	; 27-Nov-2007	GRF		SR15615: Created
	;-------------------------------------------------------------------------------
	set %code=0
	$$$GENERATE(" quit ##super("&quot;0||"&quot;_id)")
	quit $$$OK
}
*/
</Content>
</UDLText>


<Method name="ConvertOnSave">
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String,pblnExcludeStorage=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2011 	PPP		SR17652 - New parameter and check (pblnExcludeStorage)
	; 21-Jan-2009	HQN		SR16318: Save Storage info
	; 24-Oct-2008	PPP		SR16057:1. If no Name set it to be the Code
	; 26-Sep-2008	GRF		SR15932: '' for boolean conversion; Update Posting
	; 							Characteristics
	; 31-Jul-2008	Luke	SR15814: corrected the sc formation using $$$Text
	; 26-Jun-2008	GRF		SR15796: Standardise error text
	; 20-Jun-2008	GRF		SR15793: split key if necessary
	; 23-May-2008	GRF		Remove duplicated NULLOREF test
	; 04-Apr-2008	GRF		SR15650: sc is third parameter of %OpenId
	; 04-Mar-2008	Luke	added storages V2 through iLoc interface
	; 21-feb-2008	Luke	SR15634: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if pKey[$$$COMMA set pKey = $$$KEY2(pKey)  ; SR15793
	
	set objV1 = ##class(alLOC.dULocation).%OpenId("0||"_pKey,2)

	if objV1 '= $$$NULLOREF {
		if ##class(alLOC.dLocation).%ExistsId(objV1.Location) { 
			set objLocn  = ##class(alLOC.dLocation).%OpenId(objV1.Location) 
		} else {
			set objLocn  = ##class(alLOC.dLocation).%New() 
		}
					
		set objPar = $$$NULLOREF
		if objV1.ParentLocn '= $$$NULLOREF { 
			set sc = ##class(alLOC.dULocation).ConvertOnSave(objV1.ParentLocn,pblnExcludeStorage)	//SR17652
			if $$$ISOK(sc) {
				set objPar = ##class(alLOC.dLocation).%OpenId(objV1.ParentLocn,,.sc) 
			}
		}
		if $$$ISOK(sc) {
			set objLocn.ParentLocn   = objPar

			set strName = objV1.LocationName
			if strName="" {
				set strName = objV1.Location
			}
			
			set objLocn.Code         = objV1.Location
			set objLocn.Name         = strName
			set objLocn.CompanyName  = objV1.CompanyName
			set objLocn.Street       = objV1.Street
			set objLocn.Zipcode      = objV1.Zipcode
			set objLocn.City         = objV1.City
			set objLocn.Telephone    = objV1.Tel
			set objLocn.Telephone2   = objV1.Telephone2
			set objLocn.Telefax      = objV1.Telefax
			set objLocn.Email        = objV1.Email
			set objLocn.Route        = objV1.RoutingDescription
			set objLocn.Picture      = objV1.Picture
			set objLocn.TimeZoneGMT  = objV1.TimedifferenceGMT
			set objLocn.PostingChar1 = objV1.PostingCharacteristic1
			set objLocn.PostingChar2 = objV1.PostingCharacteristic2
			
			set objLocn.IsProductionLocn       = ''objV1.ProductionLocn
			set objLocn.IsTransferLocn         = ''objV1.DistributionLocn
			set objLocn.IsSalesLocn            = ''objV1.SalesLocn
			set objLocn.IsInventoryLocn        = ''objV1.StorageLocn
			set objLocn.IsPurchaseLocn         = ''objV1.PurchaseLocn
			set objLocn.IsAdminLocn            = ''objV1.AdminLocn
			set objLocn.IsPlanningLocn         = ''objV1.PlanningLocn
			set objLocn.AutoReceiptOfTransfers = ''objV1.AutoReceiptTransferOrders
		
			//SR17652 PPP
			if '$get(pblnExcludeStorage) {
				; SR16318 vvvv
				if $$$ISOK(sc) && (objV1.OnHandStorage      '="") set objLocn.OnHandStorage         = ##class(alLOC.iLOC).GetStorage(objV1.Location,objV1.OnHandStorage,.sc)
				if $$$ISOK(sc) && (objV1.ReceiptStorage     '="") set objLocn.ReceiptStorage        = ##class(alLOC.iLOC).GetStorage(objV1.Location,objV1.ReceiptStorage,.sc)
				if $$$ISOK(sc) && (objV1.DespatchStorage    '="") set objLocn.DespatchStorage       = ##class(alLOC.iLOC).GetStorage(objV1.Location,objV1.DespatchStorage,.sc)
				if $$$ISOK(sc) && (objV1.SuppReturnStorage  '="") set objLocn.SupplierReturnStorage = ##class(alLOC.iLOC).GetStorage(objV1.Location,objV1.SuppReturnStorage,.sc)
				if $$$ISOK(sc) && (objV1.CustReturnStorage  '="") set objLocn.CustomerReturnStorage = ##class(alLOC.iLOC).GetStorage(objV1.Location,objV1.CustReturnStorage,.sc)
				if $$$ISOK(sc) && (objV1.MissingStockStorage'="") set objLocn.MissingStockStorage   = ##class(alLOC.iLOC).GetStorage(objV1.Location,objV1.MissingStockStorage,.sc)
				if $$$ISOK(sc) && (objV1.DamagedStockStorage'="") set objLocn.DamagedStockStorage   = ##class(alLOC.iLOC).GetStorage(objV1.Location,objV1.DamagedStockStorage,.sc)
				; SR16318 ^^^^
				//SR16573
				if $$$ISOK(sc) && (objV1.ManuReturnStorage  '="") set objLocn.ManuReturnStorage = ##class(alLOC.iLOC).GetStorage(objV1.Location,objV1.ManuReturnStorage,.sc)
			}
			
			if $$$ISOK(sc) set sc = objLocn.%Save() ; SR16318
		}
		
	; TODO : <GRF> Need to pass Posting Characteristics and Location Type as well
	} else {
		set strMessage = $$$Text($listbuild("alLOC0005",pKey))
		set sc = $$$ERROR($$$GeneralError,strMessage)
	}  ; "Can not Convert Location (%1)"
	
	quit sc
]]></Implementation>
</Method>

<Method name="ConvertOnDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Assumes @nM validation will ensure all storages and child locations are
	; deleted before location is deleted.
	; 
	; History
	; 18-Mar-2009	DavidR	SR16406: added Listbuild to error
	; 29-sep-2008	Luke	SR15936: Check the V2 data reply to the user
	; 22-Sep-2008	Luke	SR15936: added message to inform user of issues with data
	; 18-Sep-2008	GRF		SR15927: variable should be objLocn; operation should be
	; 							%DeleteId not %Delete
	; 20-Jun-2008	GRF		SR15793: split key if necessary
	; 26-Feb-2008	GRF		SR15622: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if pKey[$$$COMMA set pKey = $$$KEY2(pKey)
	
	set objV1 = ##class(alLOC.dULocation).%OpenId("0||"_pKey) 
	if objV1 '= $$$NULLOREF {
		set objLocn = ##class(alLOC.dLocation).%OpenId(objV1.Location)
		if objLocn '= $$$NULLOREF {
			
			if objLocn.Storages.Count() > 0 {
				set strMessage = $$$Text($listbuild("alLOC0008",pKey))
				set sc = $$$ERROR($$$GeneralError,strMessage)
			;	"Can not Delete Location (%1) as storages still exist. Please remove all Storages from this location"
				
			} else {
				set sc = ##class(alLOC.dLocation).%DeleteId(objLocn.%Id())
			}
		}
		
	} else {
	set strMessage = $$$Text($listbuild("alLOC0007",pKey))
		set sc = $$$ERROR($$$GeneralError,strMessage)   
   }  ; "Can not delete location (%1).  Please review the validity of the data."
   
	quit sc
]]></Implementation>
</Method>

<Method name="LoadV2">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; Initial take on of V1 data to V2
	; 
	; History
	; 26-Feb-2008	GRF		SR15622: Created
	;-------------------------------------------------------------------------------
	set sc      = $$$OK
	set strTemp = " Start load V2"
	
	set idLocn = ""
	for {
		set idLocn = $order(^WWW0121(0,0,idLocn))
		quit:idLocn=""

		//Exclude Storages conversion (flag)
		set sc = ##class(alLOC.dULocation).ConvertOnSave(idLocn,$$$YES)

		if $$$ISOK(sc) {
			set idStore = ""
			for {
				set idStore = $order(^INLP(0,idLocn,idStore))
				quit:idStore=""
				

				set sc = ##class(alLOC.dUStorage).ConvertOnSave(idLocn_","_idStore)

				quit:$$$ISERR(sc)
			}
		}
		quit:$$$ISERR(sc)

		//Adhoc PPP
		set sc = ##class(alLOC.dULocation).ConvertOnSave(idLocn)
		quit:$$$ISERR(sc)
		
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="ConvertOnSaveTest">
<ClassMethod>1</ClassMethod>
<FormalSpec>pKey:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History
	; 20-Jun-2008	GRF		SR15793: split key if necessary
	; 04-Mar-2008	Luke	added storages V2 through iLoc interface
	; 21-feb-2008	Luke	SR15634: Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if pKey[$$$COMMA set pKey = $$$KEY2(pKey)
	
	set objV1 = ##class(alLOC.dULocation).%OpenId("0||"_pKey) 
	if objV1 '= $$$NULLOREF {
		set objLocn  = ##class(alLOC.dLocation).%OpenId(objV1.Location)
		if objLocn = $$$NULLOREF {
			set objLocn  = ##class(alLOC.dLocation).%New() 
		}
		set objPar  = $$$NULLOREF
		if objV1.ParentLocn '= $$$NULLOREF { 
			set sc = ##class(alLOC.dULocation).ConvertOnSave(objV1.ParentLocn)
			if $$$ISOK(sc) {
				set objPar = ##class(alLOC.dLocation).%OpenId(objV1.ParentLocn)
			}
		}
		
		if $$$ISOK(sc) {
			set objLocn.ParentLocn     = objPar
			set objLocn.Code           = objV1.Location
			set objLocn.Name           = objV1.LocationName
			
			set objLocn.CompanyName    = objV1.CompanyName
			set objLocn.Street         = objV1.Street
			set objLocn.Zipcode        = objV1.Zipcode
			set objLocn.City           = objV1.City
			set objLocn.Telephone      = objV1.Tel
			set objLocn.Telephone2     = objV1.Telephone2
			set objLocn.Telefax        = objV1.Telefax
			set objLocn.Email          = objV1.Email
			set objLocn.Route          = objV1.RoutingDescription
			set objLocn.Picture        = objV1.Picture
			set objLocn.TimeZoneGMT    = objV1.TimedifferenceGMT
			
			set objLocn.IsProductionLocn       = ''objV1.ProductionLocn
			set objLocn.IsTransferLocn         = ''objV1.DistributionLocn
			set objLocn.IsSalesLocn            = ''objV1.SalesLocn
			set objLocn.IsInventoryLocn        = ''objV1.StorageLocn
			set objLocn.IsPurchaseLocn         = ''objV1.PurchaseLocn
			set objLocn.IsAdminLocn            = ''objV1.AdminLocn
			set objLocn.IsPlanningLocn         = ''objV1.PlanningLocn
			set objLocn.AutoReceiptOfTransfers = ''objV1.AutoReceiptTransferOrders
			set sc = objLocn.%Save()
		}
	}
	; TODO : <GRF> Need to pass Posting Characteristics as well

	quit sc
	/*
	set objLocn.OnHandStorage As alLOC.dStorage;
	set objLocn.ReceiptStorage As alLOC.dStorage;
	set objLocn.DespatchStorage As alLOC.dStorage;
	set objLocn.SupplierReturnStorage As alLOC.dStorage;
	set objLocn.CustomerReturnStorage As alLOC.dStorage;
	set objLocn.MissingStockStorage As alLOC.dStorage;
	set objLocn.DamagedStockStorage As alLOC.dStorage;
	*/
	//set objLocn.Locations As dLocation [ Collection = list ];
]]></Implementation>
</Method>

<Method name="%OnOpen">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Open</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being opened.

<P>If this method returns an error then the object will not be opened.]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 18-Nov-2008	HQN		Only do it if there is an error: Cache2008 fixes this
	; 01-Apr-2008	HQN		Resetting %objlasterror on SQL projection warning
	;-------------------------------------------------------------------------------
	if $get(%objlasterror) '= "" { ; 18-Nov-2008
		if (%this.%Oid() '= $$$NULLOREF) && ($$$GETERRORCODE(%objlasterror) = 5809) {
			set %objlasterror = ""
		}
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="IsSynced">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; TODO : transfer text to WWW009 - If this class is only temporary this may not
	;        be necessary.  Similarly - error processing using $$$ERROR is faster.
	; 
	; 
	; Validates this V1 Location against its V2 intstance,
	; show inconsistencies as errors property errors
	;
	; History:
	; 16-Aug-2010	PPP		SR16573:Added Manufacturing Return Storage check
	; 09-Nov-2009	GRF		objLocation => objLocn to shortand lines and standardise
	; 19-May-2008	Luke	SR15749 Corrected the Compare for storages
	; 15-Apr-2008	HQN		SR15672: Corrected V1 property names
	; 							Added Object lookups on storages and lists
	; 11-Apr-2008	HQN		SR15672: Created
	;-------------------------------------------------------------------------------
	set sc      = $$$OK
	set objLocn = ##class(alLOC.dLocation).%OpenId(%this.Location,0,.sc)
	/*
	if $$$ISERR(sc) {
		; Couldn't load, attempt to ConvertOnSave
		set sc = ##class(alLOC.dULocation).ConvertOnSave(%this.Location)
		if $$$ISOK(sc) {
			set objLocn = ##class(alLOC.dLocation).%OpenId(%this.Location,0,.sc)
		}
	}
	*/
	if $$$ISOK(sc) {
		if (objLocn.Name        '= %this.LocationName) set sc = $system.Status.AppendStatus($system.Status.Error(5001,"LocationName Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.CompanyName '= %this.CompanyName)  set sc = $system.Status.AppendStatus($system.Status.Error(5001,"CompanyName Property mismatch " _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.Street      '= %this.Street)       set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Street Property mismatch "      _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.Zipcode     '= %this.Zipcode)      set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Zipcode Property mismatch "     _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.City        '= %this.City)         set sc = $system.Status.AppendStatus($system.Status.Error(5001,"City Property mismatch "        _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.Telephone   '= %this.Tel)          set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Tel Property mismatch "         _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.Telephone2  '= %this.Telephone2)   set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Telephone2 Property mismatch "  _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.Telefax     '= %this.Telefax)      set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Telefax Property mismatch "     _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.Email       '= %this.Email)        set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Email Property mismatch "       _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.Route '= %this.RoutingDescription) set sc = $system.Status.AppendStatus($system.Status.Error(5001,"Route Property mismatch "       _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)

		if (objLocn.IsProductionLocn '= ''%this.ProductionLocn)   set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ProductionLocn Property mismatch "   _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.IsTransferLocn   '= ''%this.DistributionLocn) set sc = $system.Status.AppendStatus($system.Status.Error(5001,"DistributionLocn Property mismatch " _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.IsSalesLocn      '= ''%this.SalesLocn)        set sc = $system.Status.AppendStatus($system.Status.Error(5001,"SalesLocn Property mismatch "        _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.IsInventoryLocn  '= ''%this.StorageLocn)      set sc = $system.Status.AppendStatus($system.Status.Error(5001,"StorageLocn Property mismatch "      _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.IsPurchaseLocn   '= ''%this.PurchaseLocn)     set sc = $system.Status.AppendStatus($system.Status.Error(5001,"PurchaseLocn Property mismatch "     _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.IsAdminLocn      '= ''%this.AdminLocn)        set sc = $system.Status.AppendStatus($system.Status.Error(5001,"AdminLocn Property mismatch "        _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.IsPlanningLocn   '= ''%this.PlanningLocn)     set sc = $system.Status.AppendStatus($system.Status.Error(5001,"PlanningLocn Property mismatch "     _%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.TimeZoneGMT      '= %this.TimedifferenceGMT)  set sc = $system.Status.AppendStatus($system.Status.Error(5001,"TimedifferenceGMT Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		if (objLocn.AutoReceiptOfTransfers '= ''%this.AutoReceiptTransferOrders) {
			                                                      set sc = $system.Status.AppendStatus($system.Status.Error(5001,"AutoReceiptTransferOrders Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
		if (objLocn.OnHandStorage = $$$NULLOREF) {
			if (%this.OnHandStorage '= "") {
				set sc = $system.Status.AppendStatus($system.Status.Error(5001,"OnHandStorage property not set "_objLocn.%ClassName(1)_"::%Id("_objLocn.%Id()_")"),sc)
			}
		} elseif (objLocn.OnHandStorage.Code '= %this.OnHandStorage) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"OnHandStorage Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
		if (objLocn.ReceiptStorage = $$$NULLOREF) {
			if (%this.ReceiptStorage '= "") {
				write !,%this.ReceiptStorage
				set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ReceiptStorage property not set "_objLocn.%ClassName(1)_"::%Id("_objLocn.%Id()_")"),sc)
			}
		} elseif (objLocn.ReceiptStorage.Code '= %this.ReceiptStorage) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ReceiptStorage Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
		if (objLocn.DespatchStorage = $$$NULLOREF) {
			if (%this.DespatchStorage '= "") {
				set sc = $system.Status.AppendStatus($system.Status.Error(5001,"DespatchStorage property not set "_objLocn.%ClassName(1)_"::%Id("_objLocn.%Id()_")"),sc)
			}
		} elseif (objLocn.DespatchStorage.Code '= %this.DespatchStorage) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"DespatchStorage Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
		if (objLocn.SupplierReturnStorage = $$$NULLOREF) {
			if (%this.SuppReturnStorage '= "") {
				set sc = $system.Status.AppendStatus($system.Status.Error(5001,"SupplierReturnStorage property not set "_objLocn.%ClassName(1)_"::%Id("_objLocn.%Id()_")"),sc)
			}
		} elseif (objLocn.SupplierReturnStorage.Code '= %this.SuppReturnStorage) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"SuppReturnStorage Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
		if (objLocn.CustomerReturnStorage = $$$NULLOREF) {
			if (%this.CustReturnStorage '= "") {
				set sc = $system.Status.AppendStatus($system.Status.Error(5001, "CustomerReturnStorage property not set "_objLocn.%ClassName(1)_"::%Id("_objLocn.%Id()_")"),sc)
			}
		} elseif (objLocn.CustomerReturnStorage.Code '= %this.CustReturnStorage) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"CustReturnStorage Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}

		//SR16573
		if (objLocn.ManuReturnStorage = $$$NULLOREF) {
			if (%this.ManuReturnStorage '= "") {
				set sc = $system.Status.AppendStatus($system.Status.Error(5001, "ManuReturnStorage property not set "_objLocn.%ClassName(1)_"::%Id("_objLocn.%Id()_")"),sc)
			}
		} elseif (objLocn.ManuReturnStorage.Code '= %this.ManuReturnStorage) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ManuReturnStorage Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
		if (objLocn.MissingStockStorage = $$$NULLOREF) {
			if (%this.MissingStockStorage '= "") {
				set sc = $system.Status.AppendStatus($system.Status.Error(5001, "MissingStockStorage property not set "_objLocn.%ClassName(1)_"::%Id("_objLocn.%Id()_")"),sc)
			}
		} elseif (objLocn.MissingStockStorage.Code '= %this.MissingStockStorage) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"MissingStockStorage Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
		if (objLocn.DamagedStockStorage = $$$NULLOREF) {
			if (%this.DamagedStockStorage '= "") {
				set sc = $system.Status.AppendStatus($system.Status.Error(5001,"DamagedStockStorage property not set "_objLocn.%ClassName(1)_"::%Id("_objLocn.%Id()_")"),sc)
			}
		} elseif (objLocn.DamagedStockStorage.Code '= %this.DamagedStockStorage) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"DamagedStockStorage Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
		/*
/// list of Locations Located directly below this level in the 
/// Location tree 
Property Locations As dLocation [ Collection = list ];

/// list of Storages attached to this Location
Relationship Storages As alLOC.dStorage [ Cardinality = children, Inverse = Location ];
		*/
		
		if (objLocn.ParentLocn = $$$NULLOREF) {
			if (%this.ParentLocn '= "") {
				set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ParentLocn property not set "_objLocn.%ClassName(1)_"::%Id("_objLocn.%Id()_")"),sc)
			}
		} elseif (objLocn.ParentLocn.%Id() '= %this.ParentLocn) {
			set sc = $system.Status.AppendStatus($system.Status.Error(5001,"ParentLocn Property mismatch "_%this.%ClassName(1)_"::%Id("_%this.%Id()_")"),sc)
		}
		
	} else {
		set sc = $system.Status.Error(6236,%this.Location,"objLocn.%ClassName(1)::%OpenId()") ; Dont resovle objLocn
	}
	quit sc
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>
</Storage>
</Class>
</Export>