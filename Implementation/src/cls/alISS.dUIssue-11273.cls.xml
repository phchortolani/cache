<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Class name="alISS.dUIssue">
<ClassType>persistent</ClassType>
<IncludeCode>INConst,COMSYS,%occInclude</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>User.INIssue</Super>
<UDLText name="T">
<Content>
/*----------------------------------------------------------------------------------
; 26-Mar-2013	SCR		HEVA-811: Force Compile
; 14-Oct-2009	SCR		SR16940 Added [ Required ] to IssueNumber
; 30-Jan-2008	HQN		SR15625 Changed class signature dStatus to dUStatus
; 24-Jan-2008	HQN		SR15625 also dLocation to dULocation &amp; dINIssueLine to
; 							dUIssueLine
/---------------------------------------------------------------------------------*/
</Content>
</UDLText>


<Property name="objToLocn">
<Description><![CDATA[
store swizzled object so we don't keep reopening it]]></Description>
<Type>alLOC.dULocation</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00208"/>
</Property>


<Property name="objFromLocn">
<Description><![CDATA[
store swizzled object so we don't keep reopening it]]></Description>
<Type>alLOC.dULocation</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00206"/>
</Property>


<Property name="objStatus">
<Description><![CDATA[
store swizzled object so we don't keep reopening it]]></Description>
<Type>alSYS.Status.dUStatus</Type>
<Private>1</Private>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00207"/>
</Property>


<Property name="IssueLines">
<Type>alISS.dUIssueLine</Type>
<Collection>list</Collection>
<Transient>1</Transient>

<Parameter name="CAPTION" value="AL00205"/>
</Property>


<Property name="IssueNumber">
<Description><![CDATA[
IssueNumber]]></Description>
<Type>%String</Type>
<Required>1</Required>

<Parameter name="CAPTION" value="AL00238"/>

<Parameter name="COLLATION" value="EXACT"/>

<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>

<Query name="GetIssueLines">
<Type>%SQLQuery</Type>
<FormalSpec>IssueNumber:%String</FormalSpec>
<SqlQuery>SELECT %ID, Company, FromStorage, IssueNumber, Item, LineNumber, QtyRequired, Reference, Status, Demand, ToStorage, Unit FROM SQLUser.INIssueLine
 WHERE (IssueNumber = :IssueNumber)</SqlQuery>

<Parameter name="CONTAINID" value="1"/>
</Query>

<UDLText name="T">
<Content>
// ++++++++++++++++++++++++++++++++++++++++++

</Content>
</UDLText>


<Method name="ANMSave">
<Description><![CDATA[
<p>Saves the record utilising <code>$$Save^COMUtils</code>
Relies on INConst.inc macros to set the pieces of the record</br>
<b>NOTE: Should be code generated</b>
</p>
<p>Utilises <code>$$^WWWNEXT()</code> to allocate the primary index</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 23-Jan-2009	GRF		prefixes
	; 31-Jul-2008	Luke	SR15814: Change Status sc to blnResult
	;-------------------------------------------------------------------------------
	if (%this.IssueNumber = $$$NULLOREF) {
		set %this.IssueNumber = $$^WWWNEXT("INIssue")
	}
	set idANMKey = %this.IssueNumber
	set objANMIssue = ""
	if (%this.Company '= $$$NULLOREF) && (%this.IssueNumber '= $$$NULLOREF) {
		set objANMIssue = $get(^INIssue(%this.Company,%this.IssueNumber,1))
	}
	
	set $$$INIssueStatus(objANMIssue) 	  = i%Status
	set $$$INIssueToLocn(objANMIssue) 	  = i%ToLocn
	set $$$INIssueFromLocn(objANMIssue)   = i%FromLocn
	set $$$INIssuePriority(objANMIssue)   = i%Priority
	set $$$INIssueDemandType(objANMIssue) = i%DemandType
	set $$$INIssueReference(objANMIssue)  = i%Reference
	
	set blnResult = $$Save^COMUtils("INIssue",idANMKey,objANMIssue,$$$NO) //SR15814:
	quit blnResult
]]></Implementation>
</Method>

<Method name="IsFirmable">
<Description><![CDATA[
<p>Returns wether this record is able to be set it's status to <class>WWWStatus</class>::INIssue::2</P>
<code>TODO: Needs to combine lines to do a composite check of SOH</code>

<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; INIssue
	; 	1		Open
	; 	2		Firmed
	; 	3		Active
	; 	6		Pending
	; 	7		Act/Pnd
	; 	8		M-Close
	; 	9		A-Closed
	; 
	; History:
	; 27-Sep-2013	SCR		CORE-266: Prohibit 'Non Lot Controlled' <> 'Lot Controlled' Issues
	; 20-Sep-2010	shobby	SR17485.a: If line is closed don't test if firmable.
	; 17-May-2010	PPP		SR17298:The checks to stop the total issues to be greater 
	;							than the qty requested has been removed.
	; 13-Jan-2010	GRF		SR17111: Validate TOTAL issues for item/storage/batch
	; 							are available after considering other reservations
	; 13-Feb-2009	GRF		SR16281: Retain results in CacheTempINIssueLine for use
	; 							in INIssueLine
	; 23-Jan-2009	GRF		SR16281: Test whether more issued than requested.
	; 06-Aug-2008	HQN		SR15814: Missed one Luke...
	; 31-Jul-2008	Luke	SR15814: Change Status sc to strStatus, corrected TEXT calls
	; 17-Dec-2007	GRF		Error code; $$$MakeStatus; sc
	; 14-Dec-2007 	HQN		Added Act/Pnd to Status check
	; 12-Dec-2007	HQN		Added check for all empty lines
	; 04-Dec-2007	GRF		SR15615: Language Text
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	set Y  = "~"
	
	kill ^CacheTempINIssueLine(%this.IssueNumber,"Excess")       ; SR16281
	
	if (%this.Status.StatusCode = 2) ||
	   (%this.Status.StatusCode = 3) ||
	   (%this.Status.StatusCode = 7) ||
	   (%this.Status.StatusCode = 8) ||
	   (%this.Status.StatusCode = 9)   {
		   
		set strMessage = $$$Text("IN00723")                     ; "Transaction has already been Firmed"
		set sc =$$$ERROR($$$GeneralError,strMessage)
		
	}
	if $$$ISOK(sc) {
		if (%this.Type'=3) && (%this.Type'=7) {
			if $$OnlyTrackPrograms^INBundleUtils(%this.ToLocn.Location) '= 
				$$OnlyTrackPrograms^INBundleUtils(%this.FromLocn.Location) {
					set strMessage = $$$Text($listbuild("IN01454",%this.FromLocn.Location,%this.ToLocn.Location))  ;Cannot move Stock from Location %1 and Location %2, both have to be 'Lot Controlled' or both have to be 'Non Lot Conrolled'
					set sc =$$$ERROR($$$GeneralError,strMessage)
			}
		}
	}
	if $$$ISOK(sc) {
		if (%this.IssueLines.Count() = 0) {                     ; SR15814
			set strMessage = $$$Text("IN00724")                 ; "Issue contains no lines"
			set sc = $$$ERROR($$$GeneralError,strMessage)
		
		} else {
			set blnContainsValues = $$$NO
			for loopLines=1:1:%this.IssueLines.Count() {
				set objIssueLine = %this.IssueLines.GetAt(loopLines)
				continue:objIssueLine.IsClosed()				;SR17485.a
				set sc = objIssueLine.IsFirmable()
				quit:$$$ISERR(sc)
			
				if (blnContainsValues = $$$NO) && (objIssueLine.QtyIssued > 0) {
					set blnContainsValues = $$$YES
				}
			}
			if $$$ISOK(sc) && (blnContainsValues = $$$NO) {     ; SR15814
				set strMessage = $$$Text("IN00728")             ; "Must have at least 1 valid line"
				set sc =$$$ERROR($$$GeneralError,strMessage)
			}
			
			; SR16321 vvv
			if $$$ISOK(sc) {
				kill ^CacheTempdUIssue($job)
				kill ^CacheTempdUIssueBundle($job)   ; SR17111
				for loopLines=1:1:%this.IssueLines.Count() {
					set objIssueLine = %this.IssueLines.GetAt(loopLines)
					continue:objIssueLine.IsClosed()				;SR17485.a
					
					set idReqLine = objIssueLine.Reference
					if idReqLine="" set idReqLine="Issue Line : "_objIssueLine.LineNumber
					
					set fltRefQty   = objIssueLine.QtyRequired
					set fltIssueQty = $get(^CacheTempdUIssue($job,idReqLine)) + objIssueLine.QtyIssued
					set ^CacheTempdUIssue($job,idReqLine) = fltIssueQty_Y_fltRefQty
				
				; SR17111 vvv	
					set idItem   = objIssueLine.Item
					set idStore  = objIssueLine.FromStorage.StockLocation
					set idBundle = objIssueLine.Bundle
					if idStore'="" {
						set ^CacheTempdUIssueBundle($job,idItem,idStore,idBundle) = $get(^CacheTempdUIssueBundle($job,idItem,idStore,idBundle))
					}
				; SR17111 ^^^
				}
				
				//SR17298 VVV
				/*
				set idReqLine = ""
				for {
					set idReqLine = $order(^CacheTempdUIssue($job,idReqLine))
					quit:idReqLine=""
					
					set objReqLine = $get(^CacheTempdUIssue($job,idReqLine))
					if objReqLine > $piece(objReqLine,Y,2) {
						// "Total Quantity Issued (%1) exceeds the Quantity Requested (%2) for Requisition Line %3"
						set strMessage = $$$Text($listbuild("IN00770",+objReqLine,+$piece(objReqLine,Y,2),idReqLine))
						set sc =$$$ERROR($$$GeneralError,strMessage)
						set ^CacheTempINIssueLine(%this.IssueNumber,"Excess",idReqLine) = $$$YES  ; SR16281
					}
					quit:$$$ISERR(sc)
				}
				*/
				//SR17298 ^^^
				
				; SR17111 vvv
				; Check the TOTAL to be issued for a storage/bundle doesn't exceed unreserved QOH
				
				if $$$ISOK(sc) {
					set idLocn = %this.FromLocn.Location
					set idItem = ""
					for {
						set idItem = $order(^CacheTempdUIssueBundle($job,idItem))
						quit:idItem=""
						
						set idStore = ""
						for {
							set idStore = $order(^CacheTempdUIssueBundle($job,idItem,idStore))
							quit:idStore=""
							
							set idBundle = ""
							for {
								set idBundle = $order(^CacheTempdUIssueBundle($job,idItem,idStore,idBundle))
								quit:idBundle=""
								
								set fltQtyPicked = $get(^CacheTempdUIssueBundle($job,idItem,idStore,idBundle))
								
								set rs = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement:GetReservedForBundleStore")
								set sc = rs.Execute(idItem,idLocn,idStore,idBundle)
								if $$$ISOK(sc) {
									set fltQtyPlanned = 0
									while rs.Next(.sc) {
										set fltQtyPlanned = fltQtyPlanned + rs.Data("QtyRequired")
									}
									set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(idItem_"||"_idLocn_"||"_idStore_"||"_idBundle,,.sc)
									if objBundleStock'=$$$NULLOREF {
										set fltQtyAvail = objBundleStock.QtyOnHand - fltQtyPlanned
										
									} else {
										set fltQtyAvail = 0
									}
									
									if fltQtyPicked > fltQtyAvail {
										set strMessage = $$$Text($listbuild("alSOH0008",fltQtyPicked,idItem,fltQtyAvail))
										set sc = $$$ERROR($$$GeneralError,strMessage)
									} ; "Require total of %1 of item %2 but only have %3 available in selected bundle"
								}
							}
						}
					}
				}
				
				; SR17111 ^^^
				kill ^CacheTempdUIssue($job)
				kill ^CacheTempdUIssueBundle($job)   ; SR17111
			}
			; SR16321 ^^^
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="IsClosable">
<Description><![CDATA[
<p>Returns true(1) if this record is able to be changed to a 
<class>WWWStatus</class>::INIssue::8 or 
<class>WWWStatus</class>::INIssue::9 value</p>]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; FIXME : Closeable?
	; History :
	; 13-Dec-2007	HQN		Copied from INReq
	;-------------------------------------------------------------------------------
	set blnResult = $$$YES
	if (%this.Status.StatusCode = 8) ||    ; Manual - Close[d]
	   (%this.Status.StatusCode = 9)    {  ; Auto - Close[d]
		set blnResult = $$$NO
	}
	quit blnResult
]]></Implementation>
</Method>

<Method name="ManuallyClose">
<Description><![CDATA[
<p>Sets this record's status to <class>WWWStatus</class>::INIssue::8 if able to</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History :
	; 31-Jul-2008	Luke	SR15814: corrected TEXT calls
	; 17-Dec-2007	GRF		Error code; $$$MakeStatus
	; 17-Dec-2007	HQN		Moved line logic into IssueLine; Save only on success
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if %this.IsClosable() {
		for loopIssueLines = 1:1:%this.IssueLines.Count() {
			set objIssLine = %this.IssueLines.GetAt(loopIssueLines)
			if objIssLine.Status.StatusCode=1 do objIssLine.ManuallyClose() 	//Force close regardless of lines ;SR17553
		}
		set %this.Status = 8 // M-Close
		
	} else {
		set strMessage = $$$Text("IN00729")    //"Already closed"
		set sc =$$$ERROR($$$GeneralError,strMessage)
	}
	if $$$ISOK(sc) {
		set sc = %this.%Save()
	}
	quit sc
]]></Implementation>
</Method>

<Method name="AutoClose">
<Description><![CDATA[
<p>Attempts to set this record's Status Property to Auto - Close(9)</p>
<p>Can only Auto - Close if all lines are closed</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 23-Jan-2009	GRF		SR16281: Wrong error message
	; 31-Jul-2008	Luke	SR15814: Change Text use for status,changes status for
	; 							lines check
	; 02-May-2008	Luke	SR15699 Language text for errors
	; 01-May-2008	GRF		Replace $listbuild with $$$MakeStatus
	;-------------------------------------------------------------------------------
	set sc = $$$OK
	if %this.IsClosable() {
		; check if all lines closed
		set blnLinesClosed = $$$YES
		for loopLines=1:1:%this.IssueLines.Count() {
			if %this.IssueLines.GetAt(loopLines).IsClosable() {
				
				set strMessage = $$$Text("alISS0001")           //"All lines not closed"    ; FIXME : Wording
				set scLines =$$$ERROR($$$GeneralError,strMessage)
			}
			quit:$$$ISERR(scLines)
		}
		
		if $$$ISOK(blnLinesClosed) {
			set %this.Status = 9 ; Auto - Close
			set sc = %this.%Save()
		}
		
	} else {
	
		set strMessage = $$$Text("alISS0002")                   //"Already Closed"
		set sc =$$$ERROR($$$GeneralError,strMessage)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="FirmIssue">
<Description><![CDATA[
<p>Changes status to <class>WWWStatus</class>::INIssue::Firmed(2)
and processes all Lines to do the same</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; History :
	; 16-Aug-2011	PPP		SR18081: Added Sent Timestamp & User
	; 23-Sep-2010	shobby	SR17553: Don't continue if an error is found on a line.
	; 12-May-2009	PPP		SR16199: Flag the Issue Posted Date
	; 23-Jan-2009	GRF		SR16281: Wrong error message
	; 31-Jul-2008	Luke	SR15814: Change Status Message formation 
	; 31-Mar-2007	HQN		Corrected logic for updating statuscode, was setting
	; 							to active even if lines had errors.  Revert
	; 							$$$MakeStatus() calls to $system.Status.Error()
	; 18-Dec-2007	HQN		Ignore checking empty line deletions
	; 14-Dec-2007	HQN		Reversed loop & removed line from the listing on delete
	; 							Added logic for Act/Pnd
	; 12-Dec-2007	HQN		Altered logic to ignore and delete Empty Issues
	; 							Validate Storage only if a quantity specified
	; 						
	; TODO: Do we rollback all Line statuses and operations if a single line fails?
	;-------------------------------------------------------------------------------
	set sc = $$$OK
 ;++++++++++++++++++++++++++++++++++++++++++	
	tstart
 ;++++++++++++++++++++++++++++++++++++++++++	
	if (%this.IssueLines.Count() = 0) {
		set strMessage = $$$Text("IN00724")      ; "Issue contains no lines"
		set sc =$$$ERROR($$$GeneralError,strMessage)
	}
	if $$$ISOK(sc) {
		if (%this.Type'=3) && (%this.Type'=7) {
			if $$OnlyTrackPrograms^INBundleUtils(%this.ToLocn.Location) '= 
				$$OnlyTrackPrograms^INBundleUtils(%this.FromLocn.Location) {
					set strMessage = $$$Text($listbuild("IN01454",%this.FromLocn.Location,%this.ToLocn.Location))  ;Cannot move Stock from Location %1 and Location %2, both have to be 'Lot Controlled' or both have to be 'Non Lot Conrolled'
					set sc =$$$ERROR($$$GeneralError,strMessage)
			}
		}
	}
	
	set blnAllClosed = $$$YES
	; reverse loop because ListOfObjects.RemoveAt decrements counter
	for loopIssueLines = %this.IssueLines.Count():-1:1 {
		quit:($$$ISERR(sc))			;SR17553
		set objIssLine = %this.IssueLines.GetAt(loopIssueLines)
		if (objIssLine.QtyIssued > 0) {
			if (objIssLine.FromStorage = $$$NULLOREF) {    ; "From Storage has not been set in line %1"
				set strMessage = $$$Text($listbuild("IN00725",objIssLine.LineNumber))
				set sc =$$$ERROR($$$GeneralError,strMessage)
			;            
			} else {
				if 'objIssLine.IsClosed() set sc = objIssLine.FirmIssue()	;SR17553
				if (objIssLine.Status.StatusCode '= 8) && (objIssLine.Status.StatusCode '= 9) {
					set blnAllClosed = $$$NO
				}
				quit:($$$ISERR(sc))
			}
		} else {
			if ((+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(0,0,1)))) && (objIssLine.QtyIssued = 0) ) {
				// not delete issueLines
			}
			else {
				do objIssLine.%Delete(objIssLine.%Oid())
				do %this.IssueLines.RemoveAt(loopIssueLines)
				do %this.IssueLines.%SetModified($$$NO)
			}
			continue
		}
	}
	
	if '$$$ISERR(sc) {
		if blnAllClosed {
			set %this.Status = 9  // A-Closed
		} else {
			set %this.Status = 7  // Act/Pnd
		}
		
		set %this.Posted = $horolog		//SR16199
		
		//SR18081
		set %this.SentTimestamp = $horolog
		set %this.SentUser = $get(%request.Data("YBED",1))

		//SR17xxxx ; Save the Changed Data
		set %this.ChangedOn = $horolog
		set %this.ChangedBy = $get(%request.Data("YBED",1))
		
		set sc = %this.%Save()
	}
 ;++++++++++++++++++++++++++++++++++++++++++	
	if ($$$ISOK(sc)) {
		tcommit:($tlevel>0)
	} else {
		trollback
	}
 ;++++++++++++++++++++++++++++++++++++++++++	
	quit sc
]]></Implementation>
</Method>

<Method name="PrepareIssue">
<Description><![CDATA[
<p>Changes status to <class>WWWStatus</class>::INIssue::Prepare(4)
and processes all Lines to do the same</p>
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; 
	; History :
	; 04-Jun-2009	PPP		SR16544 : Created
	;-------------------------------------------------------------------------------
	set sc = $$$OK
 	//++++++++++++++++++++++++++++++++++++++++++	
	tstart
 	//++++++++++++++++++++++++++++++++++++++++++	
	if (%this.IssueLines.Count() = 0) {
		set strMessage = $$$Text("IN00724")      ; "Issue contains no lines"
		set sc =$$$ERROR($$$GeneralError,strMessage)
	}
	
	set blnAllClosed = $$$YES
	// reverse loop because ListOfObjects.RemoveAt decrements counter
	for loopIssueLines = %this.IssueLines.Count():-1:1 {
		set objIssLine = %this.IssueLines.GetAt(loopIssueLines)
		if (objIssLine.QtyIssued > 0) {
			if (objIssLine.FromStorage = $$$NULLOREF) {    ; "From Storage has not been set in line %1"
				set strMessage = $$$Text($listbuild("IN00725",objIssLine.LineNumber))
				set sc =$$$ERROR($$$GeneralError,strMessage)
				
			} else {
				set sc = objIssLine.PrepareIssue()
				if (objIssLine.Status.StatusCode '= 4) {
					set blnAllClosed = $$$NO
				}
				quit:($$$ISERR(sc))
			}
			
		} else {
			//do objIssLine.%Delete(objIssLine.%Oid())
			//do %this.IssueLines.RemoveAt(loopIssueLines)
			//do %this.IssueLines.%SetModified($$$NO)
			//continue
			set strMessage = $$$Text($listbuild("IN00725",objIssLine.LineNumber))
			set sc = $$$ERROR($$$GeneralError,strMessage)
			quit         ; "From Storage has not been set in line %1"
		}
	}
	
	if $$$ISOK(sc) {
		if blnAllClosed {
			set %this.Status = 4  // Prepared
		}
		
		set sc = %this.%Save()
	}
 ;++++++++++++++++++++++++++++++++++++++++++	
	if ($$$ISOK(sc)) {
		tcommit:($tlevel>0)
	} else {
		trollback
	}
 ;++++++++++++++++++++++++++++++++++++++++++	
	quit sc
]]></Implementation>
</Method>

<Method name="StatusGet">
<Description><![CDATA[
<p>Retrieves the Status Property as <class>alSYS.Status.dStatus</class>
<class>%ObjectHandle</class></p>]]></Description>
<ReturnType>alSYS.Status.dStatus</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 25-Feb-2008	HQN		SR15625 Changed class signature dStatus to dUStatus
	; 03-Nov-2007	HQN		Replicated from INReq
	;-------------------------------------------------------------------------------
	//set strReturn =  %this.Company_"||INReq||"_i%Status
	if (i%Status '= "") && (i%objStatus = $$$NULLOREF) {
		set i%objStatus =  ##class(alSYS.Status.dUStatus).%OpenId(%this.Company_"||INIssue||"_i%Status)
	}
	quit i%objStatus
]]></Implementation>
</Method>

<Method name="StatusSet">
<Description><![CDATA[
<p>Sets the Status Property</p>
<p>Params: <var>Status</var> as :
<ul>
	<li><class>%ObjectHandle</class> of <class>alSYS.Status.dStatus</class></li>
	<li>Const referring to the primary key of a <class>alSYS.Status.dStatus</class></li>
</ul>
</p>]]></Description>
<FormalSpec>Arg</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $IsObject(Arg) {
		set i%Status = Arg.StatusCode
	} elseif (Arg?.E1"||".A1"||".N) {
		set i%Status = +$piece(Arg,"||",3) ; OID expected in the format "YM||ClassName||intStatusKey"
	} else {
		set i%Status = Arg
	}
	set i%objStatus = $$$NULLOREF 
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="FromLocnGet">
<Description><![CDATA[
<p>Gets the <var>FromLocn</var> as an object</p>
<p>Returns a <class>alLOC.dULocation</class></p>]]></Description>
<ReturnType>alLOC.dULocation</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;-------------------------------------------------------------------------------
	if (i%FromLocn '= $$$NULLOREF) && (i%objFromLocn = $$$NULLOREF) {
		set objFromLocn = ##class(alLOC.dULocation).%OpenId("0||"_i%FromLocn)
		if (objFromLocn '= $$$NULLOREF) {
			set i%objFromLocn = objFromLocn
		}
	}
	quit i%objFromLocn
]]></Implementation>
</Method>

<Method name="FromLocnSet">
<Description><![CDATA[
<p>Sets the FromLocn Property</p>
<p>Params: <var>FromLocn</var> as :
<ul>
	<li><class>%ObjectHandle</class> of <class>alLOC.dULocation</class></li>
	<li>Const referring to the primary key of a <class>alLOC.dULocation</class></li>
</ul>
</p>]]></Description>
<FormalSpec>FromLocn</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;-------------------------------------------------------------------------------
	if $IsObject(FromLocn) && FromLocn.%Extends("alLOC.dULocation") {
		set i%objFromLocn = FromLocn
		set i%FromLocn    = FromLocn.Location
		quit $$$YES
	}
	set i%FromLocn = FromLocn
	quit $$$YES
]]></Implementation>
</Method>

<Method name="ToLocnGet">
<Description><![CDATA[
<p>Gets the <var>ToLocn</var> as an object</p>
<p>Returns a <class>alLOC.dULocation</class></p>]]></Description>
<ReturnType>alLOC.dULocation</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	;-------------------------------------------------------------------------------
	if (i%ToLocn '= $$$NULLOREF) && (i%objToLocn = $$$NULLOREF) {
		set objToLocn = ##class(alLOC.dULocation).%OpenId("0||"_i%ToLocn)
		if (objToLocn '= $$$NULLOREF) {
			set i%objToLocn = objToLocn
		}
	}
	quit i%objToLocn
]]></Implementation>
</Method>

<Method name="ToLocnSet">
<Description><![CDATA[
<p>Sets the ToLocn Property</p>
<p>Params: <var>ToLocn</var> as :
<ul>
	<li><class>%ObjectHandle</class> of <class>alLOC.dULocation</class></li>
	<li>Const referring to the primary key of a <class>alLOC.dULocation</class></li>
</ul>
</p>]]></Description>
<FormalSpec>ToLocn</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	; 04-Dec-2007	GRF		Single exit
	;-------------------------------------------------------------------------------
	if $IsObject(ToLocn) && ToLocn.%Extends("alLOC.dULocation") {
		set i%objToLocn = ToLocn
		set i%ToLocn    = ToLocn.Location
	} else {
		set i%ToLocn = ToLocn
	}
	quit $$$YES
]]></Implementation>
</Method>

<Method name="PartialIssue">
<Description><![CDATA[
<p>Returns True(1) if this Record's QtyIssued is less than QtyRequired</p>]]></Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set blnReturn = $$$NO
	if %this.QtyRequired > ReqLine.QtyIssued {
		set blnReturn = $$$YES
	} 
	quit blnReturn
]]></Implementation>
</Method>

<Method name="ConfirmReceipt">
<Description><![CDATA[
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$OK
]]></Implementation>
</Method>

<Method name="ConfirmPick">
<Description><![CDATA[
<p>Returns a <class>%Status</class> value indicating success or failure.</p>]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnDelete">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Delete</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being deleted.

<P>If this method returns an error then the object will not be deleted.
<P>Delete Issue Lines related to this Issue</P>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	set objIssue = ##class(alISS.dUIssue).%Open(oid)
	set listIssueLines = objIssue.IssueLines
	; Issues need to clean up source
	for loopLines=1:1:listIssueLines.Count() {
		set objIssueLine = listIssueLines.GetAt(loopLines)
		set sc = objIssueLine.%Delete(objIssueLine.%Oid())
		quit:($$$ISERR(sc))
	}
	quit sc
]]></Implementation>
</Method>

<Method name="GetInstance">
<Description><![CDATA[
<p>Gets the specific subclass of alISS.dUIssue based off of the %Id</p>
<p>Params: <var>oidIssue</var> As %String in the format of a INIssue.%Oid() call</br>
Returns: <class>alISS.dUIssue</class> Subclass or $$$NULLOREF on failure
</p>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oidIssue:%String,&amp;sc</FormalSpec>
<ReturnType>alISS.dUIssue</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 30-Jun-2010	PPP		SR17297 Added Return-To-Supplier Issue (Type 7)
	; 03-Dec-2009	DWR		SR17066 dont check again if an object at quit, otherwise 
	; 							it quits without a value which it needs
	; 23-Jul-2009	PPP		SR16753 Added Manufacturing Issue and revamped GetInstance
	; 04-Apr-2008	GRF		SR15650 sc is third parameter of %OpenId
	; 30-Jan-2008	HQN		SR15625 Changed class signature dREQIssue to dUReqIssue
	; 07-Dec-2007	HQN		Changed DemandType value comparison to reflect new
	; 						status code (5 -> 7)
	;-------------------------------------------------------------------------------
	;	1	Inter-Department		Application Parameter "INISSUETYPE"
	;	2	Inter-Site
	;	3	Dispense/Sale
	;	4	Kits
	;	5	Prescription
	;	6	Production
	;	7	Return To Supplier
	;-------------------------------------------------------------------------------
	set objIssue = ##class(alISS.dUIssue).%OpenId(oidIssue,,.sc)
	set objExtendedIssue = $$$NULLOREF

	//if (($isObject(objIssue)) && (objIssue.DemandType = ##class(User.WWW101).%OpenId("AL-DEMANDTYPE||EN||7").SearchItem)) {
	//SR16753
	if $isObject(objIssue) {
		set idType       = objIssue.Type
		set idDemandType = objIssue.DemandType

		if (idDemandType = 7) {    ; Requisition
			set objExtendedIssue = ##class(alREQ.dUReqIssue).%OpenId(objIssue.%Id(),,.sc)
			
		} elseif (idType = 6) {
			set objExtendedIssue = ##class(alMAN.dUManIssue).%OpenId(objIssue.%Id(),,.sc)		

		} elseif (idType = 7) {
			set objExtendedIssue = ##class(alREC.dUReturnToSupplier).%OpenId(objIssue.%Id(),,.sc)		
		}
		quit:$isObject(objExtendedIssue) objExtendedIssue
	}
 ;	quit:$isObject(objIssue) objIssue   ;SR17066
	quit objIssue
]]></Implementation>
</Method>

<Method name="%OnOpen">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Open</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being opened.

<P>If this method returns an error then the object will not be opened.
]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 01-Apr-2008	HQN		Resetting %objlasterror on SQL projection warning
	; 24-Jan-2008	HQN		SR15625 Changed class signature dINIssueLine to dUIssueLine
	; 06-Dec-2007	HQN		Created; Moved logic from IssueLinesGet into here,
	; 							set modified bits to mimic old functionality
	; 							Reason: Lists cannot be transient!
	;-------------------------------------------------------------------------------
	set blnModified  = %this.%IsModified()
	set objResultSet = ##class(%Library.ResultSet).%New("alISS.dUIssueLine:GetIssueLinesForIssue")
	set sc = objResultSet.Execute(%this)
	while (objResultSet.Next(.sc)) {
		if ($SYSTEM.Status.IsOK(sc)) {
			set objIssueLine = ##class(alISS.dUIssueLine).GetInstance(objResultSet.Data("ID"))
			if (objIssueLine '= $$$NULLOREF) {
			;	set objIssueLine.Issue = %this ;let the line increment the reference count
				do objIssueLine.%SetModified($$$NO)
				do %this.IssueLines.Insert(objIssueLine)
			}
		}
	}
	if %this.IssueLines.Count() > 0 {    ; Loading doesn't touch modification bit
		do %this.IssueLines.%SetModified($$$NO)
		do %this.%SetModified(blnModified)
	}
	if $get(%objlasterror) '= "" {
		//dU classes may object error because it relies on SQL projection to find objects
		if (%this.%Oid() '= $$$NULLOREF) && ($$$GETERRORCODE(%objlasterror) = 5809) {
			set %objlasterror = ""
		}
	}
	quit sc
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called before 
any data is written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.
<P>Saves Issue Lines that have been modified</P>
<P>Updates pseudo relations if the swizzled object has been modified</P>
]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	;-------------------------------------------------------------------------------
	; History:
	; 03-Aug-2010	SRC		SR17471: Call Super code
	; 31-Jul-2008	Luke	SR15814: Change sc from $$$YES to $$$OK
	; 13-Dec-2007	HQN		Check for NULLOREF
	;-------------------------------------------------------------------------------
	set sc = $$$OK

	;for loopLines=1:1:%this.IssueLines.Count() {
	;	set objIssueLine = %this.IssueLines.GetAt(loopLines)
	;	if objIssueLine.%IsModified() {
	;		set sc = objIssueLine.%Save()
	;		quit:$$$ISERR(sc)
	;		
	;		do %this.%SetModified($$$YES)
	;	}
	;}
	;if (%this.Status '= $$$NULLOREF) && (%this.Status.%IsModified()) {
	;	set i%Status = %this.Status.StatusCode
	;}
	;if (%this.ToLocn '= $$$NULLOREF) && (%this.ToLocn.%IsModified()) {
	;	set i%ToLocn = %this.ToLocn.Location
	;}
	;if (%this.FromLocn '= $$$NULLOREF) && (%this.FromLocn.%IsModified()) {
	;	set i%FromLocn = %this.FromLocn.Location
	;}
	set sc=##Super(insert)
	quit sc
]]></Implementation>
</Method>
<Storage name="StorageAtNet">
<Type>%Library.CacheSQLStorage</Type>

<Property name="ChangedBy"/>

<Property name="ChangedOn"/>

<Property name="Company"/>

<Property name="CreatedBy"/>

<Property name="CreatedOn"/>

<Property name="CustomerID"/>

<Property name="CustomerName"/>

<Property name="DemandType"/>

<Property name="DocketNo"/>

<Property name="FREE1"/>

<Property name="FREE10"/>

<Property name="FREE11"/>

<Property name="FREE12"/>

<Property name="FREE13"/>

<Property name="FREE14"/>

<Property name="FREE15"/>

<Property name="FREE16"/>

<Property name="FREE17"/>

<Property name="FREE18"/>

<Property name="FREE19"/>

<Property name="FREE2"/>

<Property name="FREE20"/>

<Property name="FREE21"/>

<Property name="FREE22"/>

<Property name="FREE23"/>

<Property name="FREE24"/>

<Property name="FREE25"/>

<Property name="FREE26"/>

<Property name="FREE27"/>

<Property name="FREE28"/>

<Property name="FREE29"/>

<Property name="FREE3"/>

<Property name="FREE30"/>

<Property name="FREE4"/>

<Property name="FREE5"/>

<Property name="FREE6"/>

<Property name="FREE7"/>

<Property name="FREE8"/>

<Property name="FREE9"/>

<Property name="FinishedGoodItemCode"/>

<Property name="FromLocn"/>

<Property name="IssueNumber"/>

<Property name="Notes"/>

<Property name="PatientID"/>

<Property name="PickPrintedTimestamp"/>

<Property name="PickPrintedUser"/>

<Property name="PickTimestamp"/>

<Property name="PickUser"/>

<Property name="Posted"/>

<Property name="Priority"/>

<Property name="ProductionOrder"/>

<Property name="Program1"/>

<Property name="Reference"/>

<Property name="ReferrerID"/>

<Property name="ReferrerName"/>

<Property name="SentTimestamp"/>

<Property name="SentUser"/>

<Property name="Status"/>

<Property name="StockAdjDate"/>

<Property name="SubType1"/>

<Property name="Supplier"/>

<Property name="ToLocn"/>

<Property name="Type"/>
</Storage>
</Class>
</Export>