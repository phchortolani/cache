<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FININTHCBatchLine" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FININTHCBatchLine  ; FINANCE Interface Batch Lines Health Checks.
	;-------------------------------------------------------------------------------
	; History:
	; 17-Nov-2004	GRF		Replace YKOMMA with $$$COMMA; new order
	;-------------------------------------------------------------------------------
	
#include FINHC
	
Check(Start="",End="",Location="",Level="",Result)
	;-------------------------------------------------------------------------------
	; The sum of Ledger Interface Batch Lines must equal 0 (only when posted)
	;
	; Returns:
	;
	; History:
	; 01-Jun-2004	shobby	 Handled Foreign Currency.
	; 13-May-2004   Shobby   Created
	;-------------------------------------------------------------------------------
	new fltAmount,idBatch,idLine,objFININTBatch,objFININTBatchLine,strStatus
	
	kill Result
	set strStatus = $$$OK
	set fltAmount = 0
	set idBatch   = ""
	for {
		set idBatch = $order(^FININTBatchLine(0,idBatch))
		quit:idBatch=""
		
		set objFININTBatch = $get(^FININTBatch(0,idBatch,1))
		if $$$FININTBatchPostedDate(objFININTBatch)'="" {
			set idLine = ""
			for {
				set idLine = $order(^FININTBatchLine(0,idBatch,idLine))
				quit:idLine=""
				
				set objFININTBatchLine = $get(^FININTBatchLine(0,idBatch,idLine,1))
				
				set fltAmount = $$$FCAdd(fltAmount,$$$FININTBatchLineAmount(objFININTBatchLine))
			}
		}
	}
	if +fltAmount'=0 {
		set Result("Hash",$$$ErrorNo(Result("Errors"))) = $$$Text($listbuild("Fin00321",fltAmount))
		set strStatus = $$$NO
	}  ; "Total of Interface Batch Lines do not equal zero (%1)."
	
	if strStatus=$$$OK {
		set strStatus = 2  ; Because this is a Standalone Check return 2 if Ok
	}
	quit strStatus
	
	
Multiple(Start="",End="",Location="",Level="",Result,pblnFix=0)
	;-------------------------------------------------------------------------------
	; Finds any duplicate FININTBatchLines
	;
	; Returns:
	;
	; History:
	; 22-Sep-2005	JW		SR13214: Added "ARP" type
	; 13-Aug-2004	Shobby	Created (SR10249)
	;-------------------------------------------------------------------------------
#define Check "^CacheTemp(YUSER,""MultipleBatchLines"")"
	
	new idBatch,idBatch2,idBatchLine,idBatchLine2,intCount,intDuplicate
	new objFININTBatchLine,objFININTBatchLine2,strData,strKey,strStatus,strType
	
	if $get(Y)="" do ^WWWVAR
	kill Result
	kill @$$$Check
	set strStatus = $$$OK
 
	set idBatch = ""
	for {
		set idBatch = $order(^FININTBatchLine(0,idBatch))
		quit:idBatch=""
		
		set idBatchLine = ""
		for {
			set idBatchLine = $order(^FININTBatchLine(0,idBatch,idBatchLine))
			quit:idBatchLine=""
			
			set objFININTBatchLine = $get(^FININTBatchLine(0,idBatch,idBatchLine,1))
			set strData = $piece(objFININTBatchLine,Y,2,8)
			
			set strType=$$$FININTBatchLineInterfaceType(objFININTBatchLine)
			if (strType="PAYMENT") ||
			   (strType="ACP")     ||
			   (strType="APP")     ||
			   (strType="SDISC")   ||
			   (strType="ACCEX")   ||
			   (strType="TAX")     ||
			   (strType="ARP")        {
				set intCount = +$get(@$$$Check@("Count",strData))
				if intCount=0 {
					set intCount = intCount+1
					set @$$$Check@("Count",strData)            = intCount
					set @$$$Check@("Details",strData,intCount) = idBatch_$$$COMMA_idBatchLine
					set @$$$Check@("Object",strData,intCount)  = objFININTBatchLine
				
				} else {
					; Ignore if Batch and Block are the same (Could be similar lines on the one sale)
					set intDuplicate = ""
					for {
						set intDuplicate = $order(@$$$Check@("Object",strData,intDuplicate))
						quit:intDuplicate=""
						
						set strKey   = $get(@$$$Check@("Details",strData,intDuplicate))
						set idBatch2 = $piece(strKey,$$$COMMA,1)
						set objFININTBatchLine2 = $get(@$$$Check@("Object",strData,intDuplicate))
						if (idBatch2'=idBatch) ||
						   ( ($$$FININTBatchLineBlockNumberMajor(objFININTBatchLine)'=$$$FININTBatchLineBlockNumberMajor(objFININTBatchLine2)) ||
						     ($$$FININTBatchLineBlockNumberMinor(objFININTBatchLine)'=$$$FININTBatchLineBlockNumberMinor(objFININTBatchLine2)) ) {
							set intCount = intCount+1
							set @$$$Check@("Count",strData)            = intCount
							set @$$$Check@("Details",strData,intCount) = idBatch_$$$COMMA_idBatchLine
							set @$$$Check@("Object",strData,intCount)  = objFININTBatchLine
							quit ;exit for loop, only add once.				
						}
					}
				}
			}
		}
	}
	
	set strData = ""
	for {
		set strData = $order(@$$$Check@("Count",strData))
		quit:strData=""
		quit:$get(Result("Errors"))=999
		
		if $get(@$$$Check@("Count",strData))>1 {
			set intDuplicate = ""
			for {
				set intDuplicate = $order(@$$$Check@("Details",strData,intDuplicate))
				quit:intDuplicate=""
				
				if intDuplicate>1 {
					; The first found is OK, don't log it as an error.
					set strKey = $get(@$$$Check@("Details",strData,intDuplicate))
					set Result("Hash",$$$ErrorNo(Result("Errors"))) = strData_"="_strKey  ;Total of Interface Batch Lines do not equal zero (%1).
					do FixIt($piece(strKey,$$$COMMA,1),$piece(strKey,$$$COMMA,2),pblnFix)
				}
			}
			set strStatus = $$$NO	
		}
	}
	kill @$$$Check
		
	if strStatus=$$$OK {
		set strStatus = 2  ; Because this is a Standalone Check return 2 if Ok
	}
	quit strStatus
	
	
FixIt(pidBatch,pidBatchLine,pblnFix)
	;-------------------------------------------------------------------------------
	;
	; Returns:
	;
	; History:
	; 13-Aug-2004	Shobby	Created (SR10249)
	;-------------------------------------------------------------------------------
	new fltAmount,idCustomer,idInvoice,idLine
	new objFINARBalance,objFINARInvoice,objFINARInvoiceTran,objFININTBatchLine
	
	set objFININTBatchLine = $get(^FININTBatchLine(0,pidBatch,pidBatchLine,1))
	if $$$FININTBatchLineInterfaceType(objFININTBatchLine)="ACP" {
		set idCustomer = $order(^FINARInvoiceTrans(0,2,pidBatch,pidBatchLine,""))
		if idCustomer'="" {
			set idInvoice = $order(^FINARInvoiceTrans(0,2,pidBatch,pidBatchLine,idCustomer,""))
			if idInvoice'="" {
				set idLine = $order(^FINARInvoiceTrans(0,2,pidBatch,pidBatchLine,idCustomer,idInvoice,""))
				if idLine'="" {
					set objFINARInvoiceTran = $get(^FINARInvoiceTran(0,idCustomer,idInvoice,idLine,1))
					if objFINARInvoiceTran'="" {
						set fltAmount = $$$FINARInvoiceTranTransactionAmount(objFINARInvoiceTran)
						write !,"Removing ^FINARInvoiceTran(0,"_idCustomer_$$$COMMA_idInvoice_$$$COMMA_idLine_$$$COMMA_",1)"
						if pblnFix do KILL^FINSYS("FINARInvoiceTran",idCustomer_$$$COMMA_idInvoice_$$$COMMA_idLine)
						set objFINARInvoice = $get(^FINARInvoice(0,idCustomer,idInvoice,1))
						if objFINARInvoice'="" {
							set $$$FINARInvoiceBalance(objFINARInvoice)=$$$FINARInvoiceBalance(objFINARInvoice)-fltAmount
							write !,"Adjusting ^FINARInvoice(0,"_idCustomer_$$$COMMA_idInvoice_$$$COMMA_"1)"
							if pblnFix do Save^FINSYS("FINARInvoice",idCustomer_$$$COMMA_idInvoice,objFINARInvoice,$$$YES)
						}
						set objFINARBalance = $get(^FINARBalance(0,idCustomer,1))
						if objFINARBalance'="" {
							set $$$FINARBalanceBalance(objFINARBalance)=$$$FINARBalanceBalance(objFINARBalance)-fltAmount
							write !,"Adjusting ^FINARBalance(0,"_idCustomer_$$$COMMA_"1)"
							if pblnFix do Save^FINSYS("FINARBalance",idCustomer,objFINARBalance,$$$YES)
						}
					}
				}
			}
		}
	}
	if pblnFix do KILL^COMUtils("FININTBatchLine",pidBatch_$$$COMMA_pidBatchLine)
	write !,"Removing ^FININTBatchLine(0,"_pidBatch_$$$COMMA_pidBatchLine_$$$COMMA_"1)"
	quit
	
]]></Routine>
</Export>