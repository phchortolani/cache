<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWW120Scan" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
WWW120Scan
#include COMSYS
#include COMConst
#include WWWConst
#include %occInclude
	
	////////////////////////////////////////////////////////////////////////////////
	///////////////////// NOTES TO SETUP A FORM AS A SCANNING FORM /////////////////
	////////////////////////////////////////////////////////////////////////////////
	/// 
	/// 1. Using the 'S' button of the Form, create the Scan definition
	/// 		i)	Description 
	/// 		ii)	Scanning Execute
	/// 		iii) Only flag the Enable Scan checkbox if the form is always going
	/// 			 to be scan form irrespective of the Company & Location
	/// 
	/// 2. If the pick process exists, Update the FORM to set the picked quantities
	///    to 0 after the pick process is done.
	/// 
	/// 3. Create the routine as defined in the Execute
	/// 		For ex, see INDispenseToPatientLineScan, INReqLineScan
	/// 		
	/// 4. Update the routine created in #3 with only the relevant information for
	///    the screen updates.
	///  
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
 
OnAfterDataFields(pidForm)
    ;-------------------------------------------------------------------------------
    ; Routine to execute after data fields.
    ;
    ; Returns:
    ;
    ; History:
    ; 25-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	/*	
	new YFORM,YKEY,YAUSWAHL,YFELD
	
 	set YFORM="WWW120ScanField"
  	set YFELD=""
  	set YKEY=$get(pidForm)
	
	if pidForm'="" {
		if '$data(^WWW120Scan(YM,pidForm)) quit
	
	  	set $$$COMGridEditParameterSharedForm(YAUSWAHL)    = $$$YES
	  	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL) = 380
	  	set $$$COMGridEditParameterGridName(YAUSWAHL)      = YFORM
	  	set $$$COMGridEditParameterEnabled(YAUSWAHL)       = ($$$WWW120AuthorizationToModifyData(YVOR)'=$$$EnumReadOnly)
	  	set $$$COMGridEditParameterContainer(YAUSWAHL)     = "WWW120Scan"
	  	do ^COMGridEdit31
	}
	*/
	
	quit
	
	
OnBeforeSave(pidForm,pobjYFELD="")
    ;-------------------------------------------------------------------------------
    ; Routine to execute before save.
    ;
    ; Returns:
    ;
    ; History:
    ; 25-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	
	/*
	new strStatus
 
	set strStatus=$$$OK
	
	set strStatus=$$$GRIDSave(pidForm)
	
	if $$$ISERR(strStatus) {
		set Q=$$$QDontSave
		do ReturnError^COMUtilError(strStatus)	
	}
	*/
	
	quit
	
	////////////////////////////////////////////////////////////////////////////////
	//***********************  INTERFACE ROUTINES FOR SCANNING  ******************//
	////////////////////////////////////////////////////////////////////////////////
 
IsScanReq(pidForm="")
    ;-------------------------------------------------------------------------------
    ; Routine to check if the Scanning is Required (defined in @NM)
    ;
    ; Returns:
    ;
    ; History:
    ; 12-Aug-2009	PPP		SR16836: No Scanning for INRECSummary Invoice Tab
    ; 22-Jul-2009	PPP		SR16777: Logic changed to adccomodate data at multi
    ; 							locations setup
    ; 25-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
    new blnScan,objLocn,objData,strSetup
    
	//Get the DEV defintion of Scanning for the form
	set blnScan = ''$data(^WWW120Scans(YM,1,1,pidForm))
    
    //If not defined, check the Location Setup & then System Setup
    if (pidForm'="") && (blnScan=$$$NO) {
    	set strSetup = ""

	    if $get(YLOCATION)'="" {
			set objData = $get(^WWW0121(YM,YM,YLOCATION,1))
			set strSetup = $$$WWW0121EnableScanning(objData)

			if strSetup = "" {
				set objData = $get(^WWWSystemSetup(YM,YM,1))
				set strSetup = $$$WWWSystemSetupEnableScanning(objData)				
			}
			
	    } else {
			set objData = $get(^WWWSystemSetup(YM,YM,1))
			set strSetup = $$$WWWSystemSetupEnableScanning(objData)
		}
		
		if (";"_strSetup_";") [ (";"_pidForm_";") {
			set blnScan = $$$YES
    	}
    }
    
    //Exceptions	//SR16836
	//1. No Scanning for INRECSummary Invoice Tab
    if (pidForm="INRECSummary") && ($get(YSEITE)'=1) {
		set blnScan = $$$NO	    
    }
   
	quit blnScan
	
	
GetScanClass(pidForm="")
    ;-------------------------------------------------------------------------------
    ; Routine to get the scanning class defined on the Form
    ;
    ; Returns:
    ;
    ; History:
    ; 25-May-2009	PPP	SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
    new idClass,objScan
 
    set idClass = ""
    
    if pidForm '= "" {
    	set objScan = $get(^WWW120Scan(YM,pidForm,1))
    	set idClass = $$$WWW120ScanScanClass(objScan)
    }
 
	quit idClass
	
	
GetScanExecute(pidForm="")
    ;-------------------------------------------------------------------------------
    ; Routine to get the scanning execute string defined on the Form
    ;
    ; Returns:
    ;
    ; History:
    ; 25-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
    new strExec,objScan
 
    set strExec = ""
    
    if pidForm '= "" {
    	set objScan = $get(^WWW120Scan(YM,pidForm,1))
    	set strExec = $$$WWW120ScanExecuteOnScan(objScan)
    }
 
	quit strExec
	
 
GetBundleData(pidItem,pidLocn,pidLot,&parrBundle,&pidBundle,&pidStorage,pidTrn="")
    ;-------------------------------------------------------------------------------
    ; Routine to get the Bundle data for a given Item at a Location
    ; this has been Superseeded the below method - GetBundleForAttData  (23-Jun-2009 SR16510)
    ;
    ; Returns: Status
    ; 
    ; By Ref : 	1. List of Bundles
    ; 			2. First Valid Bundle ID
    ; 			3. First Valid Storage ID
    ; 
    ;
    ; History:
    ; 25-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	new idData,sc
	
	kill parrBundle
	
	//Get the list of bundles in the array byref
	//arrBundle(Bundle ID ,Storage ID) = Qty
	if ((+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) && 
												(YFORM = "INIssueRevLine")) {
		set sc = ##class(alSOH.iBundle).GetBundlesForLot(pidItem, pidLocn, pidLot, .parrBundle,,$$$NO)
	}
	else {
		set sc = ##class(alSOH.iBundle).GetBundlesForLot(pidItem, pidLocn, pidLot, .parrBundle)
	}
 
	set pidBundle  = ""		
 	set pidStorage = ""
 	
	if $$$ISOK(sc) {
		//Get the First Valid Bundle and Storage ID
		set idData = ""
		for {			
			set idData = $order(parrBundle(pidItem,idData))
			quit:idData=""
			
			if $get(parrBundle(pidItem,idData))>0 {
				set pidBundle  = $piece(idData,Y,1)
				set pidStorage = $piece(idData,Y,2)
				quit
			}
		}
		if ((+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) && 
												(YFORM = "INTFRPickLine")) {
			if pidTrn'="" {
				kill parrBundle
				set sc = $$GetReservedLotsByNR^VARINTRNPickLineScan(pidItem,pidLocn,pidLot,pidTrn,.parrBundle)
				if $$$ISOK(sc) {
					set idData = ""
					for {			
						set idData = $order(parrBundle(pidItem,idData))
						quit:idData=""
			
						if $get(parrBundle(pidItem,idData))>0 {
							set pidBundle  = $piece(idData,Y,1)
							set pidStorage = $piece(idData,Y,2)
							quit
						}
					}
				}
			}
		}
		
	}
	quit sc


GetBundleForAttData(pidItem, pidLocn, pidScan, &parrBundle, &pidBundle, &pidStorage, pidTrn="")
    ;-------------------------------------------------------------------------------
    ; Routine to get the Bundle data for a given Item at a Location for all ATTRIBUTES
    ; this has Superseeded the above method - GetBundleData
    ;
    ; Returns: Status
    ; 
    ; By Ref : 	1. List of Bundles
    ; 			2. First Valid Bundle ID
    ; 			3. First Valid Storage ID
    ; 
    ;
    ; History:
    ; 17-Nov-2009	PPP		SR16762: 1. If for a Transfer Pick (ie idTrn exists) add
    ;							Reservations for the current transfer as Avail Stock
    ;							2.  New Parameter pidTrn
    ; 20-Jul-2009	PPP		SR16773: ScanDelimiter is a function now
    ; 23-Jun-2009	PPP		SR16565,SR16510: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	new idBrand,idData,idLot,idOwner,idProgram,sc
	new strDelim
	
	set sc = $$$OK
	
	kill parrBundle
	
	set strDelim  = $$$ScanDelim
	
	set idLot     = $piece(pidScan,strDelim,2)		//SR16773
	set idBrand   = $piece(pidScan,strDelim,3)		//SR16773
	set idOwner   = $piece(pidScan,strDelim,4)		//SR16773
	set idProgram = $piece(pidScan,strDelim,5)		//SR16773
	
	//Get the list of bundles in the array byref
	//arrBundle(Bundle ID ,Storage ID) = Qty	
    if ((+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) && 
											(YFORM = "INIssueRevLine") || (YFORM = "INADJLine") ) {
		set sc = $$GetBundlesForItemWithoutUseByDate^VARWWW120Scan(pidItem,pidLocn,.parrBundle)
	} 
	else {
		set sc = ##class(alSOH.iBundle).GetBundlesForItem(pidItem,pidLocn,idLot,idBrand,idOwner,idProgram,$$$NO,.parrBundle)
	}
	
	//SR16762 Include Reservations relating to the Transfer - as it is already reserved.
	if pidTrn'="" {
		set sc = ##class(alSOH.iBundle).GetReservedForNo(pidItem,pidLocn,pidTrn,.parrBundle)
	}
	
	//No Data																						//EARLY EXIT
 	if '$data(parrBundle) {
		set sc = $$$ERROR(5001,$$$Text($listbuild("IN01040",pidItem,pidLocn)))
		quit sc
 	}
	
	set pidBundle  = ""		
 	set pidStorage = ""
 	
	if $$$ISOK(sc) {
		//Get the First Valid Bundle and Storage ID
		set idData = ""
		for {			
			set idData = $order(parrBundle(pidItem,idData))
			quit:idData=""
			
			if $get(parrBundle(pidItem,idData))>0 {
				set pidBundle  = $piece(idData,Y,1)
				set pidStorage = $piece(idData,Y,2)
				quit
			}
		}
	}
	
	quit sc


]]></Routine>
</Export>