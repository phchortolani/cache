<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESCOMPRASConsulta" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARSESCOMPRASConsulta
#include COMSYS

OnAfterSave()
	;-------------------------------------------------------------------------------
    ; Recebe as variáveis do form manual.
    ;
    ; Params: VORG(1) - Produto
    ; 		  VORG(2) - Grupo
    ; 		  VORG(3) - Fornecedor
    ; 		  VORG(4) - Unidade de Saúde
    ; 		  VORG(5) - Modalidade
    ; 		  VORG(6) - Tipo de Estoque
    ; 		  VORG(7) - Data Inicial
    ;		  VORG(8) - Data Final
    ;		  VORG(9) - Ordenar Por
    ;		  VORG(10) - Unidades de Saúde (Múltiplos)
    ;
    ; History:
    ; 26-May-2011	Gustavo Fiuza	Updated - alterado os filtros 4 e 10 de local de compra
    ;								para unidades de saúde
    ; 03-May-2011	Gustavo Fiuza	Updated - criado filtro do campo 10 - Locais de Compra
    ; 31-Mar-2011	Gustavo Fiuza 	Created
    ;------------------------------------------------------------------------------- 

	set pidProduto    = $get(VORG(1))
	set pidGrupo      = $get(VORG(2))
	set pidFornecedor = $get(VORG(3))
	set pidUnidade    = $get(VORG(4))
	set pidModalidade = $get(VORG(5))
	set pTipoEstoque  = $get(VORG(6))
	set pdteInicial   = $get(VORG(7))
	set pdteFinal     = $get(VORG(8))
	set pOrdenarPor   = $get(VORG(9))
	set pstrUnidades    = $get(VORG(10))
	
	if pOrdenarPor = "" set pOrdenarPor = 1 ;Default é ordenar por código

	//Para não criar conflito entre os campos de unidade de saúde	
	if (pidUnidade '= "") && (pstrUnidades '= "") {
		set pstrUnidades = pidUnidade_","_pstrUnidades
		set pidUnidade = ""	
	}
	
	//Save fields in a Temp table, so the form can be load soon as the user get in	
	set ^VARSESCOMPRASTempConsulta(YM,YBED) = pidProduto_Y_pidGrupo_Y_pidFornecedor_Y_pidUnidade_Y_pidModalidade_Y_pTipoEstoque_Y_pdteInicial_Y_pdteFinal_Y_pOrdenarPor_Y_pstrUnidades
	
	do RefreshForm^COMUtilForm()	
	
	quit

OnAfterDataFields()
	;-------------------------------------------------------------------------------
    ; Executa a query e monta a tabela com os resultados.
    ;
    ; History:
    ; 26-May-2011	Gustavo Fiuza	Updated - alterado para substituir a utilização
    ;								do local de compra pela unidade de saúde
    ;								para unidades de saúde
	; 04-Abr-2011	Gustavo Fiuza 	Updated - Inserida coluna "Saldo Disponível"
    ; 31-Mar-2011	Gustavo Fiuza 	Created
    ;------------------------------------------------------------------------------- 
	new objVariaveis, pidProduto, pidGrupo, pidFornecedor, pidUnidade, pidModalidade, pTipoEstoque, pdteInicial,
		pdteFinal, pOrdenarPor, pstrUnidades, formulaData, meuSQL, lstHeader, count, idProduto, descProduto, unidade, grupo,
		fltQtde, fltValor, ordenacao, idUnidade, fltValorTotal, lmtMaximo, fltSaldoDisponivel, cnt, local,
		idUnidadeSaude, descUnidadeSaude

  	set objVariaveis = $get(^VARSESCOMPRASTempConsulta(YM,YBED))
	
	set pidProduto    = $piece(objVariaveis,Y,1)
	set pidGrupo      = $piece(objVariaveis,Y,2)
	set pidFornecedor = $piece(objVariaveis,Y,3)
	set pidUnidade    = $piece(objVariaveis,Y,4)
	set pidModalidade = $piece(objVariaveis,Y,5)
	set pTipoEstoque  = $piece(objVariaveis,Y,6)
	set pdteInicial   = $piece(objVariaveis,Y,7)
	set pdteFinal     = $piece(objVariaveis,Y,8)
	set pOrdenarPor   = $piece(objVariaveis,Y,9)
	set pstrUnidades    = $piece(objVariaveis,Y,10)
	
	set descUnidadeSaude = ""
	
	if pOrdenarPor = 2 { 
		set ordenacao = "Descricaodetalhada"
	} else {
		set ordenacao = "Produto"
	}	
	
	set formulaData = ##class(%ResultSet).%New()  ;Create Result Set Object
 
	set meuSQL = "SELECT Proposta.Produto,"
	set meuSQL = meuSQL_" Proposta.Descricaodetalhada,"
	set meuSQL = meuSQL_" $$SQLGetSiglaUnit^VARSQL(Proposta.Unidade),"
	set meuSQL = meuSQL_" Proposta.Grupo,"
	set meuSQL = meuSQL_" SUM(Proposta.QuantidadeOfertada),"
	set meuSQL = meuSQL_" SUM(Proposta.PrecoTotal),"
	set meuSQL = meuSQL_" $$getUnidadeSaudeLocal^VARSESWWW0121(Compra.LocaldeCompra)"
	set meuSQL = meuSQL_" FROM VARSESCOMPRASPropostaLinha Proposta"
	set meuSQL = meuSQL_" INNER JOIN VARSESCOMPRAS Compra on Compra.NoProcessoCompra = Proposta.NoProcessodeCompra"
	set meuSQL = meuSQL_" WHERE $UPPER(Proposta.Resultado) = 1"
	
	if (pidProduto '= "") {	
		set meuSQL = meuSQL_" AND Proposta.Produto = '"_pidProduto_"'"		
	}
	
	if (pidGrupo '= "") {	
		set meuSQL = meuSQL_" AND Proposta.Grupo like '"_pidGrupo_"%'"		
	}
	
	if (pidFornecedor '= "") {	
		set meuSQL = meuSQL_" AND Proposta.Fornecedor = '"_pidFornecedor_"'"		
	}
	
	if (pidUnidade '= "") {	
		set meuSQL = meuSQL_" AND $$getUnidadeSaudeLocal^VARSESWWW0121(Compra.LocaldeCompra) = '"_pidUnidade_"'"
	}
	
	if (pstrUnidades '= "") {		
		;string com múltiplos locais
		for cnt = 1:1:$length(pstrUnidades,",") {
			set unidade = $piece(pstrUnidades,",",cnt)			
			continue:(unidade = "")
			
			if (cnt = 1) {
				set meuSQL = meuSQL_" AND $$getUnidadeSaudeLocal^VARSESWWW0121(Compra.LocaldeCompra) = '"_unidade_"'"			
			} elseif (cnt > 1) {
				set meuSQL = meuSQL_" OR $$getUnidadeSaudeLocal^VARSESWWW0121(Compra.LocaldeCompra) = '"_unidade_"'"
			}			
		}		
	}
	
	if (pidModalidade '= "") {	
		set meuSQL = meuSQL_" AND Compra.Modalidade = '"_pidModalidade_"'"		
	}
	
	if (pTipoEstoque '= "") {	
		set meuSQL = meuSQL_" AND Compra.EstoquePrincipal = '"_pTipoEstoque_"'"		
	}
	
	if (pdteInicial '= "") {	
		set meuSQL = meuSQL_" AND $piece(Compra.CriadoEm,"","",1) >= '"_pdteInicial_"'"		
	}
	
	if (pdteFinal '= "") {	
		set meuSQL = meuSQL_" AND $piece(Compra.CriadoEm,"","",1) <= '"_pdteFinal_"'"
	}
	
	set meuSQL = meuSQL_" GROUP BY $$getUnidadeSaudeLocal^VARSESWWW0121(Compra.LocaldeCompra), Proposta.Produto"
	set meuSQL = meuSQL_" ORDER BY Compra.LocaldeCompra, Proposta."_ordenacao
	
	do formulaData.Prepare(meuSQL)  ;Prepare Query
	do formulaData.Execute()  		;Execute Query
 
	set lstHeader = ""
  	set lstHeader = lstHeader_$listbuild("Cód. Unidade","Unidade de Saúde","Cód. Produto","Descrição","Grupo","Quant. Comprada","UN","Valor Gasto","Saldo Disponível")
	
	set count = 0
	set fltValorTotal = 0
	
	if $$Start^COMTable(lstHeader) {		
			
		while (formulaData.Next()) {
			
			set count = $i(count)
			
			set idProduto   = formulaData.GetData(1)
			set descProduto = formulaData.GetData(2)
			set unidade     = formulaData.GetData(3)
			set grupo	    = formulaData.GetData(4)
			set fltQtde     = formulaData.GetData(5)
			set fltValor    = formulaData.GetData(6)
			set idUnidade   = formulaData.GetData(7)
			
			if (idUnidade '= "") {
				set descUnidadeSaude = $piece($get(^VARSESUNI(YM,idUnidade,1)),Y,1)
			}
			
			// Calculando saldo disponível por produto (por padrão usando o Enquadramento Legal 1 de cada modalidade)
			if (pidModalidade '= "") {
				set lmtMaximo = $$GetLimiteMaximoModalidade^VARSESCOMPRAS(pidModalidade,1)					
				set fltSaldoDisponivel = lmtMaximo - fltValor
			
			} else {
				set fltSaldoDisponivel = ""
			}			
			
			do NewLine^COMTable()
			do InsertCell^COMTable(idUnidade)
			do InsertCell^COMTable(descUnidadeSaude,,,,,,,,,$$$YES)
			do InsertCell^COMTable(idProduto)
			do InsertCell^COMTable(descProduto,,,,,,,,,$$$YES)
			do InsertCell^COMTable(grupo)
			do InsertCell^COMTable($$^WWWTR(0,12,fltQtde),,,,"RIGHT")
			do InsertCell^COMTable(unidade)			
			do InsertCurrencyCell^COMTable(fltValor)
			do InsertCurrencyCell^COMTable(fltSaldoDisponivel)
			do EndLine^COMTable()
			
			set fltValorTotal = fltValorTotal + fltValor 
		}
		
		if (count = 0) {
			do NewLine^COMTable()
			do InsertCell^COMTable("A consulta não retornou resultados.",,,,,,9)
			do EndLine^COMTable()
		
		} else {
			do NewLine^COMTable("lightsteelblue")
			do InsertCell^COMTable("<strong>Total</strong>",,,,"RIGHT",,7)
			do InsertCell^COMTable("<strong>"_$$FormatCurrency^COMTable(fltValorTotal)_"</strong>",,,,"RIGHT")
			do InsertCell^COMTable("")
			do EndLine^COMTable()			
		}
	
		do Stop^COMTable()
	}
	
	do formulaData.Close()
	
	quit
]]></Routine>
</Export>