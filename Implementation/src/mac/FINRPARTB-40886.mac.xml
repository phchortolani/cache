<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINRPARTB" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINRPARTB
	#include COMSYS
	#include FINConst
	
	;-------------------------------------------------------------------------------
	; Routines related to running the customer trial balance report
	;-------------------------------------------------------------------------------
 
GetCustomerRow(pidCustomer,pdteDate,pstrReportBy=$$$EnumFINSYSINVOICEDATETYPEInvoiceDate,
			   pidCompany,pidLocation,pidLang)
	;-------------------------------------------------------------------------------
	; Return a row-set for the customer trial balance
	;
	; Params:	pidCustomer		: The customer number
	; 			pdteDate		: The trial balance date
	; 			pstrReportBy	: How to report by
	; 			pidCompany		: The company (YM) value
	; 			pidLocation		: The current location (YLOCATION) value
	; 			pidLang			: The current language (SPRACHE) value
	;
	; ByRefs:
	;
	; Returns: lstRow (a row set)
	;
	; History:
	; 11-Sep-2006	JW			SR14771: Translate group ; to ,
	; 15-Feb-2006	Steve S		SR13474: Created
	;-------------------------------------------------------------------------------
	new YM,YLOCATION,SPRACHE,strAmounts,lstRow,lstTrialBalances,fltTotal,idx
	new curTemp,objFINARCustomer,strGroup
 
 	set YM=pidCompany
 	set YLOCATION=pidLocation
 	set SPRACHE=pidLang
 	
 	set strAmounts=""
	set lstRow=""
	
	set lstTrialBalances=$$CalcPeriodTotal^FINARCustomer(pidCustomer,pdteDate,,,,pstrReportBy)
	
	if (lstTrialBalances'="") {
		set fltTotal=0
		
		for idx=1:1:3 {
			set strAmounts=strAmounts_$$$FCBase($listget(lstTrialBalances,idx))_","
			set fltTotal=fltTotal+$listget(lstTrialBalances,idx)
		}
		
		set curTemp = $listget(lstTrialBalances,idx+1)+$listget(lstTrialBalances,idx+2)
		set strAmounts=strAmounts_curTemp_","
		set fltTotal=fltTotal+curTemp
		set strAmounts=strAmounts_fltTotal
	}
	
	set objFINARCustomer=$get(^FINARCustomer(YM,pidCustomer,1))
	
	set strGroup=$translate($$$FINARCustomerCustomerGroup(objFINARCustomer),";",",")	//SR14771
	
	set lstRow=lstRow_$listbuild(pidCustomer)
	set lstRow=lstRow_$listbuild($$$FINARCustomerCustomerName(objFINARCustomer))
	set lstRow=lstRow_$listbuild(strGroup)
	
	for idx=1:1:5 {
		set lstRow=lstRow_$listbuild($piece(strAmounts,",",idx))		
	}
 
	quit lstRow
	
	
GetGLEffectiveDate(pidCompany,pidCustomer,pidInvoice)
	;-------------------------------------------------------------------------------
	; Gets a customer invoice GL Effective Date
	;
	; Params: pidCompany		: The company (YM) number
	; 		  pidCustomer		: The customer number
	; 		  pidInvoice		: The invoice number
	;
	; ByRefs:
	;
	; Returns: dteGLEff
	;
	; History:
	; 16-Feb-2006	Steve S		SR13474: Created
	;-------------------------------------------------------------------------------
	new YM
	set YM=$get(pidCompany)
	
	quit $$GetGLEffDate^FINARInvoice(pidCustomer,pidInvoice)
	
	
CustomerName(pidCompany,pidCustomer)
	;-------------------------------------------------------------------------------
	; Retrieve a customer's name (calc field from FINARInvoice)
	;
	; Params: pidCompany		: The company (YM) number
	; 		  pidCustomer		: The customer number
	;
	; ByRefs:
	;
	; Returns: strName (the customer name)
	;
	; History:
	; 16-Feb-2006	Steve S		SR13474: Created
	;-------------------------------------------------------------------------------
	new strName,objFINARCustomer
 
	set strName=""
	
	if ($get(pidCompany)'="")&&($get(pidCustomer)'="") {
		set objFINARCustomer=$get(^FINARCustomer(pidCompany,pidCustomer,1))
		set strName=$$$FINARCustomerCustomerName(objFINARCustomer)		
	}
 
	quit strName
	
	
CustomerGroup(pidCompany,pidCustomer)
	;-------------------------------------------------------------------------------
	; Retrieve a customer's group (calc field from FINARInvoice)
	;
	; Params: pidCompany		: The company (YM) number
	; 		  pidCustomer		: The customer number
	;
	; ByRefs:
	;
	; Returns: strGroup (the customer group)
	;
	; History:
	; 14-Sep-2006	PO			SR14771: translate ; to ,
	; 16-Feb-2006	Steve S		SR13474: Created
	;-------------------------------------------------------------------------------
	new strGroup,objFINARCustomer
 
	set strGroup=""
	
	if ($get(pidCompany)'="")&&($get(pidCustomer)'="") {
		set objFINARCustomer=$get(^FINARCustomer(pidCompany,pidCustomer,1))
		set strGroup = $translate($$$FINARCustomerCustomerGroup(objFINARCustomer),";",",") // SR14771
	}
 
	quit strGroup
	
	
IncludeInvoice(pidCompany,pidCustomer,pidInvoice,pdteDate,
			   pstrReportBy=$$$EnumFINSYSINVOICEDATETYPEInvoiceDate)
	/*------------------------------------------------------------------------------
	; Determines whether or not an invoice should be displayed on
	; the report
	;
	; Params: pidCompany		: The company number (YM)
	; 		  pidCustomer		: The customer on the invoice
	; 		  pidInvoice		: The invoice number
	; 		  pdteDate			: The trial balance date
	; 		  pstrReportBy		: How this trial balance is reporting by
	;
	; ByRefs:
	;
	; Returns: blnInclude ($$$YES/$$$NO)
	;
	; History:
	; 16-Feb-2006	Steve S		SR13474: Created
	;-----------------------------------------------------------------------------*/
	new blnInclude,YM,objFINARInvoice,dteReportDate,curBalance
			   
	set blnInclude=$$$NO
	set YM=$get(pidCompany)
	
	if ($get(pidCustomer)'="")&&($get(pidInvoice)'="")&&(YM'="") {
		set objFINARInvoice=$get(^FINARInvoice(YM,pidCustomer,pidInvoice,1))
		if pstrReportBy=$$$EnumFINSYSINVOICEDATETYPEInvoiceDate {
			set dteReportDate=$$$FINARInvoiceInvoiceDate(objFINARInvoice)	
		} elseif pstrReportBy=$$$EnumFINSYSINVOICEDATETYPEDueDate {
			set dteReportDate=$$$FINARInvoiceDueDate(objFINARInvoice)
		} elseif pstrReportBy=$$$EnumFINSYSINVOICEDATETYPEGLEffectiveDate {
			set dteReportDate=$$GetGLEffectiveDate(pidCompany,pidCustomer,pidInvoice)
		}
		
		if ($get(dteReportDate)'="")&&(dteReportDate<=pdteDate) {
			set curBalance=$$GetBalanceAtDate^FINARInvoice(pidCustomer,pidInvoice,pdteDate)
			if ($$$FCBase(curBalance)'=0) set blnInclude=$$$YES
		}	
	}		   
			   
	quit blnInclude
	
	
InvoiceBalance(pidCompany,pidCustomer,pidInvoice,pdteDate)
	/*------------------------------------------------------------------------------
	; Return an invoice balance for a date (call back from SQL)
	;
	; Params: pidCompany		: The company number
	; 		  pidCustomer		: The customer number
	; 		  pidInvoice		: The invoice number
	; 		  pdteDate			: The date to return the balance for
	;
	; ByRefs:
	;
	; Returns: curAmount, in base format
	;
	; History:
	; 16-Feb-2006	Steve S		SR13474: Created
	;-----------------------------------------------------------------------------*/
	new YM,curAmount
	
	set YM=pidCompany
	set curAmount=$$GetBalanceAtDate^FINARInvoice(pidCustomer,pidInvoice,pdteDate,YM)
	
	quit $justify($$$FCBase(curAmount),0,2)
	
	
OnBeforeRunning()
	;-------------------------------------------------------------------------------
	; Routine to run before running the report
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 24-Jul-2006	Steve S		Created
	;-------------------------------------------------------------------------------
	if '$data(^CacheTempCustomers(YUSER)) {
		set Q=$$$QDontSave
		do ReturnError^COMUtilError($$$Text("Fin00551"))  ;Must specify a Customer
	}
 
	quit
 
GenerateData(pidCompany,pidLanguage,pdteTrialBalanceDate,pidInvoiceDateType,pidUser,plstPeriodDates)
	;-------------------------------------------------------------------------------
	; Generate the body of the detail for the Detailed AR Trial Balance report
	;
	; Params:
	; pidCompany - Company Id
	; pidLanguage - Language Id
	; pdteTrialBalanceDate - Trial Balance Date
	; pidInvoiceDateType - Invoice Date Type / Report By
	; pidUser - User Id
	; plstPeriodDates - List of start and end dates for periods
	;
	; ByRefs: None
	;
	; Returns: List of totals for the whole Trial Balance
	;
	; History:
	; 29-Aug-2006	PO		SR14920: Created
	;-------------------------------------------------------------------------------
	new idCustomer,idInvoice,objInvoice,objCustomer,strCustomerGroup,strCustomerName
	new curCustomerCurrentTotal,curCustomerMonth1Total,curCustomerMonth2Total,curCustomerMonth3Total,curCustomerTotalBalance
	new curCurrentTotal,curMonth1Total,curMonth2Total,curMonth3Total,curTotalBalance,lstCustomerTotals
 
	set curCurrentTotal = 0
	set curMonth1Total = 0
	set curMonth2Total = 0
	set curMonth3Total = 0
	set curTotalBalance = 0
 
	$$$Order2(^CacheTempCustomers,pidUser,idCustomer)
		set lstCustomerTotals = ""
 
		if $$IncludeInvoices(pidCompany,idCustomer,pdteTrialBalanceDate,pidInvoiceDateType,pidLanguage,pidUser,plstPeriodDates,.lstCustomerTotals) {
			
			set curCustomerCurrentTotal = $listget(lstCustomerTotals,1)
			set curCustomerMonth1Total = $listget(lstCustomerTotals,2)
			set curCustomerMonth2Total = $listget(lstCustomerTotals,3)
			set curCustomerMonth3Total = $listget(lstCustomerTotals,4)
			set curCustomerTotalBalance = $listget(lstCustomerTotals,5)
			
			set ^CacheTempRow(pidUser,idCustomer) = $listbuild(idCustomer,																	; Customer Id 
															   $$FormatCurrency^COMRPUtil(curCustomerCurrentTotal,pidCompany,pidLanguage),	; Customer's current total
															   $$FormatCurrency^COMRPUtil(curCustomerMonth1Total,pidCompany,pidLanguage),	; Customer's month 1 total
															   $$FormatCurrency^COMRPUtil(curCustomerMonth2Total,pidCompany,pidLanguage),	; Customer's month 2 total
															   $$FormatCurrency^COMRPUtil(curCustomerMonth3Total,pidCompany,pidLanguage),	; Customer's month 3 total
															   $$FormatCurrency^COMRPUtil(curCustomerTotalBalance,pidCompany,pidLanguage))	; Customer's balance
													
			set curCurrentTotal = curCurrentTotal + curCustomerCurrentTotal
			set curMonth1Total = curMonth1Total + curCustomerMonth1Total
			set curMonth2Total = curMonth2Total + curCustomerMonth2Total
			set curMonth3Total = curMonth3Total + curCustomerMonth3Total
			set curTotalBalance = curTotalBalance + curCustomerTotalBalance
		}
	$$$End
 
	quit $listbuild(curCurrentTotal,curMonth1Total,curMonth2Total,curMonth3Total,curTotalBalance)
 
IncludeInvoices(pidCompany,pidCustomer,pdteTrialBalanceDate,pidInvoiceDateType,pidLanguage,pidUser,plstPeriodDates,&plstCustomerTotals)
	;-------------------------------------------------------------------------------
	; Include customer's invoices and sum the amounts
	;
	; Params:
	; pidCompany - Company Id
	; pidCustomer - Customer Id
	; pdteTrialBalanceDate - Trial Balance Date
	; pidInvoiceDateType - Invoice Date Type / Report By
	; pidLanguage - Language Id
	; pidUser - User Id
	; plstPeriodDates - List of start and end dates for periods
	;
	; ByRefs: plstCustomerTotals
	;
	; Returns: $$$YES if one or more invoices is included, otherwise $$$NO
	;
	; History:
	; 14-Sep-2006	PO		SR14771: translate ; to ,
	; 30-Aug-2006	PO		SR14920: Created
	;-------------------------------------------------------------------------------
	new objCustomer,strCustomerGroup,strCustomerName,idInvoice,objInvoice,dteInvoice,strInvoiceDate,dteDue,strDueDate,dteGLEff,strGLEffDate
	new dteDate,curCurrentAmount,curMonth1Amount,curMonth2Amount,curMonth3Amount,curBalance,blnIncluded,intCount
	new dteStartOfCurrent,dteEndOfMonth1,dteStartOfMonth1,dteEndOfMonth2,dteStartOfMonth2,dteEndOfMonth3
	new curCustomerCurrentTotal,curCustomerMonth1Total,curCustomerMonth2Total,curCustomerMonth3Total,curCustomerTotalBalance
 
	set curCustomerCurrentTotal = 0
	set curCustomerMonth1Total = 0
	set curCustomerMonth2Total = 0
	set curCustomerMonth3Total = 0
	set curCustomerTotalBalance = 0
 
	set dteStartOfCurrent = $listget(plstPeriodDates,1)
	set dteEndOfMonth1 = $listget(plstPeriodDates,2)
	set dteStartOfMonth1 = $listget(plstPeriodDates,3)
	set dteEndOfMonth2 = $listget(plstPeriodDates,4)
	set dteStartOfMonth2 = $listget(plstPeriodDates,5)
	set dteEndOfMonth3 = $listget(plstPeriodDates,6)
 
	set objCustomer = $get(^FINARCustomer(pidCompany,pidCustomer,1))
	set strCustomerGroup = $translate($$$FINARCustomerCustomerGroup(objCustomer),";",",") // SR14771
	set strCustomerName = $$$FINARCustomerCustomerName(objCustomer)
	set blnIncluded = $$$NO
 
	$$$Order3(^FINARInvoice,pidCompany,pidCustomer,idInvoice)
		continue:$$IncludeInvoice(pidCompany,pidCustomer,idInvoice,pdteTrialBalanceDate,pidInvoiceDateType)'=1
	
		set objInvoice = $get(^FINARInvoice(pidCompany,pidCustomer,idInvoice,1))
 
		set dteInvoice = $$$FINARInvoiceInvoiceDate(objInvoice)
		set strInvoiceDate = $$Date^COMRPUtil(dteInvoice,pidLanguage)
		set dteDue = $$$FINARInvoiceDueDate(objInvoice)
		set strDueDate = $$Date^COMRPUtil(dteDue,pidLanguage)
		set dteGLEff = $$GetGLEffectiveDate(pidCompany,pidCustomer,idInvoice)
		set strGLEffDate = $$Date^COMRPUtil(dteGLEff,pidLanguage)
 
		if pidInvoiceDateType = $$$EnumFINSYSINVOICEDATETYPEInvoiceDate {
			set dteDate = dteInvoice
		} elseif pidInvoiceDateType = $$$EnumFINSYSINVOICEDATETYPEDueDate {
			set dteDate = dteDue
		} elseif pidInvoiceDateType = $$$EnumFINSYSINVOICEDATETYPEGLEffectiveDate {
			set dteDate = dteGLEff
		}
 
		set curCurrentAmount = 0
		set curMonth1Amount = 0
		set curMonth2Amount = 0
		set curMonth3Amount = 0
 
		if $$$DateWithinRange(dteDate,dteStartOfCurrent,pdteTrialBalanceDate) {
			set curCurrentAmount = $$InvoiceBalance(pidCompany,pidCustomer,idInvoice,pdteTrialBalanceDate)
			set curCustomerCurrentTotal = curCustomerCurrentTotal + curCurrentAmount
			set curBalance = curCurrentAmount
		} elseif $$$DateWithinRange(dteDate,dteStartOfMonth1,dteEndOfMonth1) {
			set curMonth1Amount = $$InvoiceBalance(pidCompany,pidCustomer,idInvoice,pdteTrialBalanceDate)
			set curCustomerMonth1Total = curCustomerMonth1Total + curMonth1Amount
			set curBalance = curMonth1Amount
		} elseif $$$DateWithinRange(dteDate,dteStartOfMonth2,dteEndOfMonth2) {
			set curMonth2Amount = $$InvoiceBalance(pidCompany,pidCustomer,idInvoice,pdteTrialBalanceDate)
			set curCustomerMonth2Total = curCustomerMonth2Total + curMonth2Amount
			set curBalance = curMonth2Amount
		} elseif dteDate <= dteEndOfMonth3 {
			set curMonth3Amount = $$InvoiceBalance(pidCompany,pidCustomer,idInvoice,pdteTrialBalanceDate)
			set curCustomerMonth3Total = curCustomerMonth3Total + curMonth3Amount
			set curBalance = curMonth3Amount
		}
		set curCustomerTotalBalance = curCustomerTotalBalance + curBalance
 
		set ^CacheTempARTBInvoice(pidUser,pidCustomer,$increment(intCount)) = $listbuild(strCustomerGroup,	; Customer's group
																						 strCustomerName,	; Customer's name
																						 pidCustomer,		; Customer Id
																						 idInvoice,			; Invoice Id
																						 strInvoiceDate,	; Invoice date (formatted)
																						 dteInvoice,		; Invoice date
																						 strDueDate,		; Due Date (formatted)
																						 dteDue,			; Due Date
																						 strGLEffDate,		; GL effective date (formatted)
																						 dteGLEff,			; GL effective date
																						 $$FormatCurrency^COMRPUtil(curCurrentAmount,pidCompany,pidLanguage),	; Invoice's current amount
																						 $$FormatCurrency^COMRPUtil(curMonth1Amount,pidCompany,pidLanguage),	; Invoice's month 1 amount
																						 $$FormatCurrency^COMRPUtil(curMonth2Amount,pidCompany,pidLanguage),	; Invoice's month 2 amount
																						 $$FormatCurrency^COMRPUtil(curMonth3Amount,pidCompany,pidLanguage),	; Invoice's month 3 amount
																						 $$FormatCurrency^COMRPUtil(curBalance,pidCompany,pidLanguage))			; Invoice's balance
		
		set blnIncluded = $$$YES
	$$$End
 
	set plstCustomerTotals = $listbuild(curCustomerCurrentTotal,
										curCustomerMonth1Total,
										curCustomerMonth2Total,
										curCustomerMonth3Total,
										curCustomerTotalBalance)
 
	quit blnIncluded
]]></Routine>
</Export>