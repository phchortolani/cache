<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLBankReconManualMatch" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLBankReconManualMatch
 
#include COMSYS
#include FINConst 
#include FINSYS
 
LoadGridData(pidBankRecon)
	;-------------------------------------------------------------------------------
	; This loads uncleared GL Trans, Pre Cleared and Bank Lines into a Match Cache grid.
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
	new idLine,objBankRecon,idBankAccount,idBankTran,objBankTran,idMatched,objMatched
	new idxBankAccount,dteDate,idPreCleared,objPreCleared,idMatch,objMatch,arrLines
	new idxForm,idReverse,blnIncludesBankLines,strStatus
		
 	set idxForm=$$$Index($$$MATCHCACHE)
	set objBankRecon=$get(^FINGLBankRecon(YM,pidBankRecon,1))
	set idBankAccount=$$$FINGLBankReconBankAccount(objBankRecon)
	
	quit:idBankAccount=""
	 		
	set idLine=0
 
	// Get the Uncleared Bank Trans
	
	set idBankTran=""
	for {
		set idBankTran=$order(^FINGLBankTrans(YM,2,$$$ANINO,idBankAccount,idBankTran))
		quit:idBankTran=""
		
		set objBankTran=$get(^FINGLBankTran(YM,idBankAccount,idBankTran,1))
		
		if '$$$IsOnMatchCache(pidBankRecon,"FINGLBankTran",idBankAccount_$$$COMMA_idBankTran) {
		
			do SaveMatchCache(pidBankRecon,.idLine,
			                  $$$Text("Fin00987"),	// Bank Line
			                  $$$FINGLBankTranTransactionDate(objBankTran),
			                  $$$FINGLBankTranReference(objBankTran),
			                  $$$FINGLBankTranCreditAmount(objBankTran),
			                  $$$FINGLBankTranDebitAmount(objBankTran),
			                  "FINGLBankTran",
			                  idBankAccount_$$$COMMA_idBankTran)
		}
		                  		                  
	}
	
	// Get the Uncleared FINGLBankReconMatched
	
	set idMatched=""
	for {
		set idMatched=$order(^FINGLBankReconMatcheds(YM,1,$$$ANINO,pidBankRecon,idMatched))
		quit:idMatched=""
		
		set objMatched=$get(^FINGLBankReconMatched(YM,pidBankRecon,idMatched,1))
		
		if '$$$IsOnMatchCache(pidBankRecon,"FINGLBankReconMatched",pidBankRecon_$$$COMMA_idMatched) {
			do SaveMatchCache(pidBankRecon,.idLine,
			                  $$$FINGLBankReconMatchedTransactionType(objMatched),
			                  $$$FINGLBankReconMatchedTransactionDate(objMatched),
			                  $$$FINGLBankReconMatchedReference(objMatched),
			                  $$$FINGLBankReconMatchedDeposit(objMatched),
			                  $$$FINGLBankReconMatchedWithdrawal(objMatched),
			                  "FINGLBankReconMatched",
			                  pidBankRecon_$$$COMMA_idMatched)
		}
	}
	
	// Get the Uncleared old Pre Cleared
	
	set idxBankAccount=$$$Index(idBankAccount)
	set dteDate=""
	for {
		set dteDate=$order(^FINGLBankReconPreCleareds(YM,1,idxBankAccount,$$$ANINO,dteDate))
		quit:dteDate=""
		
		set idPreCleared=""
		for {
			set idPreCleared=$order(^FINGLBankReconPreCleareds(YM,1,idxBankAccount,$$$ANINO,dteDate,pidBankRecon,idPreCleared))
			quit:idPreCleared=""
		
			set objPreCleared=$get(^FINGLBankReconPreCleared(YM,pidBankRecon,idPreCleared,1))
			set idReverse=$$$FINGLBankReconPreClearedReverse(objPreCleared)
			if (idReverse'="")&&($$$KEY1(idReverse)'=pidBankRecon) { // Missed blank reverse!!!!
				if '$$$IsOnMatchCache(pidBankRecon,"FINGLBankReconPreCleared",pidBankRecon_$$$COMMA_idPreCleared) {
					do SaveMatchCache(pidBankRecon,.idLine,
									  $$$Text("Fin00894"),		// Pre Cleared
									  $$$FINGLBankReconPreClearedTransactionDate(objPreCleared),
									  $$$FINGLBankReconPreClearedReference(objPreCleared),
									  $$$FINGLBankReconPreClearedDebit(objPreCleared),
									  $$$FINGLBankReconPreClearedCredit(objPreCleared),
									  "FINGLBankReconPreCleared",
									  pidBankRecon_$$$COMMA_idPreCleared)
				}
								  
			}
		}
	}
	
	quit
	
SaveMatchCache(pidBankRecon,&pidLine,pstrType,pdteDate,pstrRef,pcurDeposit,pcurWithdrawal,pstrClass,pstrId,pblnCleared=$$$ANNO)
	;-------------------------------------------------------------------------------
	; Method Usage
	;
	; Params:
	; pidBankRecon  : The id of the bank reconciliation record
	; pidLine       : The id of the last bank reconciliation record.
	; pstrType      : The cache type (Bank Line, Pre Cleared or the GL Type)
	; pdteDate      : The cache date from the Bank Line, Pre Cleared or GL Transactions
	; pstrRef       : The cache reference from the Bank Line, Pre Cleared or GL Transactions
	; pcurDeposit   : The cache deposit from the Bank Line, Pre Cleared or GL Transactions
	; pcurWithdrawal: The cache withdrawal from the Bank Line, Pre Cleared or GL Transactions
	; pstrClass     : The cache class from the Bank Line (FINGLBankTran), Pre Cleared (FINGLBankReconPreCleared) or GL Transactions (FINGLBankReconMatched)
	; pstrId        : The cache class id from the Bank Line (FINGLBankTran), Pre Cleared (FINGLBankReconPreCleared) or GL Transactions (FINGLBankReconMatched)
	; pblnCleared   : Is this entry cleared
	;
	; ByRefs:
	; pidLine
	;
	; Returns:
	; The status of the save
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new objMatchCache,strStatus,blnFound
	
	set blnFound=$$$NO
	for {
		quit:blnFound
		set pidLine=$increment(pidLine)
		set blnFound='$data(^FINGLBankReconMatchCache(YM,pidBankRecon,pidLine))
	}	
	
	set objMatchCache=""
	set $$$FINGLBankReconMatchCacheType(objMatchCache)=pstrType
	set $$$FINGLBankReconMatchCacheDate1(objMatchCache)=pdteDate
	set $$$FINGLBankReconMatchCacheRef(objMatchCache)=pstrRef
	set $$$FINGLBankReconMatchCacheDeposit(objMatchCache)=pcurDeposit
	set $$$FINGLBankReconMatchCacheWithdrawal(objMatchCache)=pcurWithdrawal
	set $$$FINGLBankReconMatchCacheClassType(objMatchCache)=pstrClass
	set $$$FINGLBankReconMatchCacheClassId(objMatchCache)=pstrId
	set $$$FINGLBankReconMatchCacheCleared(objMatchCache)=$$$ANBOOLEAN(pblnCleared)
	
	set strStatus=$$$Save($$$MATCHCACHE,pidBankRecon_$$$COMMA_pidLine,objMatchCache,1)
 
	quit strStatus
	
SetParent(pstrYINHALT="",pstrYVAR="")
	;-------------------------------------------------------------------------------
	; Set the parent to be the currently selected row.
	;
	; Params:
	; pstrYINHALT : NOT USED
	; pstrYVAR    : NOT USED
	;
	; ByRefs:
	;
	; Returns:
	; ""
	;
	; History:
	; 10-Apr-2010	GRF		SR17177: arrGrid rather than objGrid; GRID Macros
	; 03-Oct-2006	RPW		SR15091: Get the correct grid display row to update, not
	;							just grid id, ie id 21 may be javascript id 20.
	;							Added some comments.
	;							Removed some calculations from Macros
	; 11-Aug-2006	PO		SR14331: Disable button if Bank Recon is not editable
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
	new arrGrid,strYKEY,idBankRecon,strOLDYKEY,idLine,objLine,idOldParent,idxParent
	new objManual,idManual,idParent,blnUnset,strKey,blnCleared,strStatus,objBankRecon
	
	set strYKEY     = $$$GRIDGetCurrentYKEY
	set idBankRecon = $$$KEY1(strYKEY)
	
	set objBankRecon = $get(^FINGLBankRecon(YM,idBankRecon,1))
	
	set strStatus = $$Editable^FINSYSReview("FINGLBankRecon",$$$FINGLBankReconStatus(objBankRecon)) // SR14331
	if $$$ISOK(strStatus) {
		$$$GRIDGetContents(.arrGrid)
		
		set idOldParent = ""
		set blnUnset    = $$$NO
		set idManual    = $$$GetActiveParent(idBankRecon)
		
		// If we have an active parent, we must unset this one in prep for the new one.
		
		if $$$IsValidKey(idBankRecon,idManual) {
	 
			set objManual  = $get(^FINGLBankReconManualMatch(YM,idBankRecon,$$$KEY2(idManual),1))
			set strOLDYKEY = $$$FINGLBankReconManualMatchClassId(objManual)
			
			set idLine = $$$KEY2(strOLDYKEY)
			if idLine'="" {
				set objLine     = $get(arrGrid(idBankRecon,idLine))
				set strKey      = $$ReferenceRow^COMGridEdit31Interface($$$MATCHCACHE,idLine)
				set blnCleared  = $$$FINGLBankReconMatchCacheCleared(objLine)
				set idOldParent = idLine
				set $$$FINGLBankReconMatchCacheParent(objLine)=$$$ANNO
				
				// Update the object for this class type.
				do UpdateObject($$$FINGLBankReconMatchCacheClassType(objLine),
								$$$FINGLBankReconMatchCacheClassId(objLine),
								blnCleared)
				if 'blnCleared {
					$$$RemoveParent(idBankRecon)
				} else {
					do UnsetActive(idManual,$$$NO)
				}
				
				do DetachChildren(idBankRecon,$$$KEY2(idManual))
				
				set arrGrid(idBankRecon,idLine) = objLine
				
				// This should always be the YROW_Field entry that is on the screen
				do OnScreenUpdateStyle("Y"_strKey_"_6",$$$NO) // SR15091
			}
			set blnUnset = (strYKEY=strOLDYKEY)
		}
		if blnUnset {
			do ClearHeader(idBankRecon)
			
		} else {
			set idLine = $$$KEY2(strYKEY)
			if idLine'="" { // SR14687
				set objLine = $get(arrGrid(idBankRecon,idLine))
				set $$$FINGLBankReconMatchCacheParent(objLine) = $$$YES
				
				set idParent  = $$$GetKeyFromMatchCache(idBankRecon,idLine) // Manual Match id
				set idxParent = $$$Index(idParent) // SR15091
			
				// If the parent exists and the data doesn't exist
				if '$$$ParentExists(idBankRecon,idxParent) && '$data(^FINGLBankReconManualMatchs(YM,1,$$$Index($$$MATCHCACHE),$$$Index(idBankRecon_$$$COMMA_idLine))) { //SR15091
					// idLine should be from FINGLBankReconMatchCache
					// Create the manual match and parent
					$$$CreateActiveParent(idBankRecon,$$$MATCHCACHE,idBankRecon_$$$COMMA_idLine)
				
				} else {   // idLine should be from FINGLBankReconMatchCache
					do SetActive(idBankRecon,idLine)
				}
				
				// Update the object for this class type.
				do UpdateObject($$$FINGLBankReconMatchCacheClassType(objLine),
										$$$FINGLBankReconMatchCacheClassId(objLine),
										$$$YES)
				// Update the grid
				set arrGrid(idBankRecon,idLine) = objLine
				do AttachToParent(idBankRecon,$$$DETACHEDCHILD,idLine)
			
				$$$GRIDSetContents(.arrGrid)
			
				// This should always be the YROW_Field entry that is on the screen
				do OnScreenUpdateStyle("Y"_$$ReferenceRow^COMGridEdit31Interface($$$MATCHCACHE,idLine)_"_6",$$$YES) // SR15091
				do UpdateHeader(idBankRecon)
				
			} else {
				$$$Alert("Fin01064")  ;To set a parent there needs to be manual match lines loaded.
			}
		}	
	} else {
		$$$Alert(strStatus)
	}
	quit ""
	
	
ClearHeader(pidBankRecon)
	;-------------------------------------------------------------------------------
	; Remove the current parent information from the header
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 02-Mar-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
	$$$UpdateUnmatched("")
	$$$UpdateLine($$$KEY2(""))
	$$$UpdateAmount("")
	
	quit
	
UpdateHeader(pidBankRecon) 
	;-------------------------------------------------------------------------------
	; Update the current parent information to the header
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 02-Mar-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
	new idManual,objData,idCache,curAmount
 
	set idManual  = $$$GetActiveParent(pidBankRecon)
	set objData   = $$$DATA($$$MANUALMATCH,idManual)
	set idCache   = $$$FINGLBankReconManualMatchClassId(objData)
	set objData   = $$$DATA($$$MATCHCACHE,idCache)
	set curAmount = $$$FINGLBankReconMatchCacheDeposit(objData)+$$$FINGLBankReconMatchCacheWithdrawal(objData)
	$$$UpdateUnmatched(idCache)
	$$$UpdateLine($$$KEY2(idCache))
	$$$UpdateAmount(curAmount)
	quit
	
	
SumCleared(pstrParentKey)
	;-------------------------------------------------------------------------------
	; Sum the cleared amounts for a parent / child group and return the amount
	;
	; Params:
	; pstrParentKey: The full id (idBankRec,idMatchCache) of a Match Cache entry!!!
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 10-Apr-2010	GRF		SR17177: arrGrid rather than objGrid; GRID Macros
	; 03-Oct-2006	JW		SR15091: Use actual id, not grid id.
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
	new arrGrid,idBankRec,idParent,curPlus,curMinus,objParent,blnIsDeposit,idLine,objLine
	new curAmount,strParentType,strChildType
	
	quit:pstrParentKey="" 0
 
	$$$GRIDGetContents(.arrGrid)
	
	set idBankRec = $$$KEY1(pstrParentKey)
	set idParent  = $$ReferenceRow^COMGridEdit31Interface($$$MATCHCACHE,$$$KEY2(pstrParentKey))
	
	quit:idParent="" 0
	
	set curPlus  = 0
	set curMinus = 0
	
	set objParent = arrGrid(idBankRec,$$$KEY2(pstrParentKey))
	
	set curAmount     = $$$GetAmount(objParent)
	set blnIsDeposit  = $$$IsDeposit(objParent)
	set strParentType = $$$FINGLBankReconMatchCacheClassType(objParent)
			
	set idLine = ""
	for {
		set idLine = $order(arrGrid(idBankRec,idLine))
		quit:idLine=""
		
		if $$ReferenceRow^COMGridEdit31Interface($$$MATCHCACHE,idLine)'=idParent {
			set objLine = arrGrid(idBankRec,idLine)
			
			if $$$FINGLBankReconMatchCacheCleared(objLine) && '$$$FINGLBankReconMatchCacheComplete(objLine) {
				
				set strChildType = $$$FINGLBankReconMatchCacheClassType(objLine)
				
				if (strChildType=strParentType) {
					set curPlus  = curPlus  + $$$FINGLBankReconMatchCacheWithdrawal(objLine)
					set curMinus = curMinus + $$$FINGLBankReconMatchCacheDeposit(objLine)
				} else {
					set curPlus  = curPlus  + $$$FINGLBankReconMatchCacheDeposit(objLine)
					set curMinus = curMinus + $$$FINGLBankReconMatchCacheWithdrawal(objLine)
				}
			}
		}
	}
	
	if blnIsDeposit {
		set curAmount = curAmount-curPlus+curMinus
	} else {
		set curAmount = curAmount+curPlus-curMinus
	}
	quit curAmount
	
	
OnBlur(pintCOL,pintROW,&pstrYFELD) 
	;-------------------------------------------------------------------------------
	; Handle the on blur of the grid.
	; 
	; Can only handle the cleared checkbox as everything else if locked.
	;
	; Params:
	; pintCOL  : The column of the selected cell
	; pintROW  : The row of the selected cell
	; pstrYFELD: The data of the selected row
	;
	; ByRefs:
	; pstrYFELD
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
	new idBankRecon,idParent,idParentLine,objParent,blnClear,idLine,idManual
		
	set idBankRecon=$$GetYKEYContainer^COMGridEdit31Interface()
	
	set idManual=$$FindManualMatchId(idBankRecon,$$$MATCHCACHE,$$ReferenceKey^COMGridEdit31Interface($$$MATCHCACHE,pintROW))
 
	set idParent=$$$GetActiveParent(idBankRecon)
	
	quit:idManual=idParent
	
	set idParentLine=$$$KEY2(idParent)
	
	if idParentLine="" {
		set idParentLine=$$$DETACHEDCHILD
		set $$$KEY2(idParent)=$$$DETACHEDCHILD
	}
	
	set objParent=$get(^FINGLBankReconManualMatch(YM,idBankRecon,idParentLine,1))
	
	if idParentLine'=$$$DETACHEDCHILD {
		do UpdateHeader(idBankRecon)
	}
	
	set blnClear=+$$$FINGLBankReconMatchCacheCleared(pstrYFELD)
		
	if idParent'="" {
		if blnClear {
			do CreateManualMatch(idBankRecon,$$$MATCHCACHE,$$ReferenceKey^COMGridEdit31Interface($$$MATCHCACHE,pintROW),idParentLine)
			do UpdateObject($$$FINGLBankReconMatchCacheClassType(pstrYFELD),
					$$$FINGLBankReconMatchCacheClassId(pstrYFELD),
					blnClear)
		} else {
			set idLine=idBankRecon_$$$COMMA_$$$GetKeyFromMatchCache(idBankRecon,$$$KEY2($$ReferenceKey^COMGridEdit31Interface($$$MATCHCACHE,pintROW)))
			do UpdateObject($$$FINGLBankReconMatchCacheClassType(pstrYFELD),
					$$$FINGLBankReconMatchCacheClassId(pstrYFELD),
					blnClear)			
			$$$RemoveManualMatch(idBankRecon,idLine)
		}
	}
	
	quit
	
UpdateObject(pstrClass,pstrId,pblnClear)
	;-------------------------------------------------------------------------------
	; Marshaller for updating the correct object given the class type and id.
	;
	; Params:
	; pstrClass: The class name of the progenitor of the match cache
	; pstrId   : The class id of the progenitor of the match cache
	; pblnClear: Whether this is being cleared or not.
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	do $case(pstrClass,"FINGLBankReconPreCleared":HandlePreCleared(pstrClass,pstrId,pblnClear),
					  	"FINGLBankReconMatched":HandleMatched(pstrClass,pstrId,pblnClear),
					  	"FINGLBankTran":HandleBankTran(pstrClass,pstrId,pblnClear),
					  	"":Error())
	quit
	
HandlePreCleared(pstrClass,pidPreCleared,pblnClear)
	;-------------------------------------------------------------------------------
	; If this is a pre cleared then make sure this is update correctly.
	;
	; Params:
	; pstrClass    : The class, in this case always FINGLBankReconPreCleared
	; pidPreCleared: The id of the entry
	; pblnClear    : If this is cleared or not.
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new objPreCleared,idBankRecon,idRow
	
	new YFORM
	
	set YFORM=pstrClass
	
	set objPreCleared=$$$DATA(pstrClass,pidPreCleared)
	set idBankRecon=$$$KEY1(pidPreCleared)
	set idRow=$$$KEY2(pidPreCleared)
	
	do HandlePreCleared^FINGLBankReconPreCleared($$ReferenceRow^COMGridEdit31Interface(pstrClass,idRow),objPreCleared,pblnClear,$$$NO)
	
	quit
	
HandleMatched(pstrClass,pidMatched,pblnClear)
	;-------------------------------------------------------------------------------
	; If this is a matched then make sure this is update correctly.
	;
	; Params:
	; pstrClass : The class, in this case always FINGLBankReconMatched
	; pidMatched: The id of the entry
	; pblnClear : If this is cleared or not.
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new objMatched,idBankRecon
	
	set objMatched=$$$DATA(pstrClass,pidMatched)
	set idBankRecon=$$$KEY1(pidMatched)
	
	do UpdateMatched^FINGLBankReconMatched(idBankRecon,$$$FINGLBankReconMatchedTransaction1(objMatched),
					 $$$FINGLBankReconMatchedTransactionLine(objMatched),
					 pblnClear,pblnClear)
	
	quit
	
HandleBankTran(pstrClass,pidBankTran,pblnClear)
	;-------------------------------------------------------------------------------
	; If this is a bank tran then make sure this is update correctly.
	;
	; Params:
	; pstrClass  : The class, in this case always FINGLBankTran
	; pidBankTran: The id of the entry
	; pblnClear  : If this is cleared or not.
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new objBankTran,idBankAccount,idLine
	
	set objBankTran=$$$DATA(pstrClass,pidBankTran)
	set idBankAccount=$$$KEY1(pidBankTran)
	set idLine=$$$KEY2(pidBankTran)
	
	do SetManualMatch^FINGLBankTran(idLine,idBankAccount,pblnClear) 
 
	quit
	
Error() private
	;-------------------------------------------------------------------------------
	; Show a dev error!!!!!!!!!
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
	
	if $get(^Development)'="" write "alert('Alphalinc to "_$get(YBED)_": Can you spot what went wrong, something is not quite right!');"
	
	quit
	
CreateManualMatch(pidBankRecon,pstrClass,pidClass,pidParent,pblnActive=$$$ANNO)
	;-------------------------------------------------------------------------------
	; Create a manual match record.
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	; pstrClass   : The cache class from the Bank Line (FINGLBankTran), Pre Cleared (FINGLBankReconPreCleared) or GL Transactions (FINGLBankReconMatched)
	; pstrId      : The cache class id from the Bank Line (FINGLBankTran), Pre Cleared (FINGLBankReconPreCleared) or GL Transactions (FINGLBankReconMatched)
	; pidParent   : The id of the manual match parent (maybe 0 which means I am the parent) or -1 which means no parent set yet.
	; pblnActive  : Is this an active parent defaults to NO.
	;
	; ByRefs:
	;
	; Returns:
	; The id of the Manual Match created.
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new objRoot,strStatus,idRoot
	
	set objRoot=""
	set $$$FINGLBankReconManualMatchClassType(objRoot)=pstrClass
	set $$$FINGLBankReconManualMatchClassId(objRoot)=pidClass
	set $$$FINGLBankReconManualMatchParent(objRoot)=pidParent
	set $$$FINGLBankReconManualMatchActiveParent(objRoot)=$$$ANBOOLEAN(pblnActive)
	
	set idRoot=$order(^FINGLBankReconManualMatch(YM,pidBankRecon,""),-1)+1
	
	set strStatus=$$$Save($$$MANUALMATCH,pidBankRecon_$$$COMMA_idRoot,objRoot,$$$YES)
 
	quit idRoot
	
RemoveManualMatch(pidBankRecon,pidClass) private
	;-------------------------------------------------------------------------------
	; Remove an existing manual match record. If the class id is blank, find the active parent
	; and remove it.
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	; pstrId      : The cache class id from the Bank Line (FINGLBankTran), Pre Cleared (FINGLBankReconPreCleared) or GL Transactions (FINGLBankReconMatched)
	; 
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 18-Oct-2006	JW		SR15134: Look at kill status. Note - not used.
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
	new idToDelete,YFELD,idLine,strStatus
	
	if pidClass="" {
		set idToDelete=$$^WWWKEYBUILD($$$GetActiveParent(pidBankRecon))		
	} else {
		set idToDelete=$$^WWWKEYBUILD(pidClass)
	}
	if idToDelete'="" {
		set strStatus = $$$Kill($$$MANUALMATCH,idToDelete)		//SR15134
	}
	
	quit
	
OnAfterDataFields(pstrYKEY) 
	;-------------------------------------------------------------------------------
	; Sets the header details for the active parent if one exists and hides complete
	; rows.
	;
	; Params:
	; pstrYKEY: The key of the grid.
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new idBankRecon,idParent,idMatched,objParent
 
	set idBankRecon=$$$KEY1(pstrYKEY)
	
	set idParent=$$$KEY2($$$GetActiveParent(idBankRecon))
		
	if idParent'="" {
		set objParent=$get(^FINGLBankReconManualMatch(YM,idBankRecon,idParent,1))
		set idMatched=$$$FINGLBankReconManualMatchClassId(objParent)
		do UpdateHeader(idBankRecon)
	}
	
	$$$GRIDHideShowRows(7,,$$$NO)
	
	quit
 
SetActive(pidBankRecon,pidLine)
	;-------------------------------------------------------------------------------
	; Unset the active parent and set a new one as active.
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	; pidLine     : The id of the FINGLBankReconMatchCache entry
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new idManual,objManual,strStatus
	
	// pidLine should be from FINGLBankReconMatchCache
	
	set idManual=$$$GetActiveParent(pidBankRecon)
	if $$$IsValidKey(pidBankRecon,idManual) {
		set idManual=$$$KEY2(idManual)
		set objManual=$get(^FINGLBankReconManualMatch(YM,pidBankRecon,idManual,1))
		set $$$FINGLBankReconManualMatchActiveParent(objManual)=$$$ANNO
	
		set strStatus=$$$Save($$$MANUALMATCH,pidBankRecon_$$$COMMA_idManual,objManual,1)
	}
	
	set idManual=$$$GetKeyFromMatchCache(pidBankRecon,pidLine)
	
	quit:idManual=""
	
	set objManual=$get(^FINGLBankReconManualMatch(YM,pidBankRecon,idManual,1))
	set $$$FINGLBankReconManualMatchActiveParent(objManual)=$$$YES
	set $$$FINGLBankReconManualMatchParent(objManual)=0
	
	set strStatus=$$$Save($$$MANUALMATCH,pidBankRecon_$$$COMMA_idManual,objManual,1)
	
	quit
	
AttachToParent(pidBankRecon,pidOldParent,pidLine) private
	;-------------------------------------------------------------------------------
	; Attach all the old parents children to this match caches manual match entry
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	; pidOldParent: The id of the old parent
	; pidLine     : The id of the FINGLBankReconMatchCache entry
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new idManual,idLine,objMatch,strStatus
	
	set idManual=$$$GetKeyFromMatchCache(pidBankRecon,pidLine)
	
	set idLine=""
	
	for {
		set idLine=$order(^FINGLBankReconManualMatchs(YM,2,pidOldParent,pidBankRecon,idLine))
		quit:idLine=""
		
		set objMatch=$get(^FINGLBankReconManualMatch(YM,pidBankRecon,idLine,1))
		set $$$FINGLBankReconManualMatchParent(objMatch)=idManual
		set strStatus=$$$Save($$$MANUALMATCH,pidBankRecon_$$$COMMA_idLine,objMatch,$$$YES)
		
	}
	 
	quit
	
DetachChildren(pidBankRecon,pidManual) 
	;-------------------------------------------------------------------------------
	; This detaches the children of a parent and sets them to $$$DETACHEDCHILD.
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	; pidManual   : The id of the manual match parent.
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 09-Mar-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new idLine,objMatch,strStatus
	
	set idLine=""
	
	for {
		set idLine=$order(^FINGLBankReconManualMatchs(YM,2,pidManual,pidBankRecon,idLine))
		quit:idLine=""
		
		set objMatch=$get(^FINGLBankReconManualMatch(YM,pidBankRecon,idLine,1))
		set $$$FINGLBankReconManualMatchParent(objMatch)=$$$DETACHEDCHILD
		set strStatus=$$$Save($$$MANUALMATCH,pidBankRecon_$$$COMMA_idLine,objMatch,$$$YES)
	}
	
	quit
	
FindManualMatchId(pidBankRecon,pstrClass,pidClass,&pidCache)
	;-------------------------------------------------------------------------------
	; Find the manual match id for either a match cache, gl tran, pre cleared or bank tran
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	; pstrClass   : The type of the class to find
	; pidClass    : The id of the class to find
	; pidCache    : The id of the match cache found
	;
	; ByRefs:	
	; pidCache
	;
	; Returns:
	; The id of the manual match
	; 
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new idManual,idxClass,idxId,idCache
	
	set idManual=""
	set idCache=""
	
	if $length(pidClass,$$$COMMA)=1 {
		set pidClass=pidBankRecon_$$$COMMA_pidClass
	}
	
	set idxClass=$$$Index(pstrClass)
	set idxId=$$$Index(pidClass)
		
	if $data(^FINGLBankReconManualMatchs(YM,1,idxClass,idxId,pidBankRecon)) {
		set idManual=pidBankRecon_$$$COMMA_$order(^FINGLBankReconManualMatchs(YM,1,idxClass,idxId,pidBankRecon,""))
	} else {
		if $data(^FINGLBankReconMatchCaches(YM,2,idxClass,idxId,pidBankRecon)) {
			set idCache=$order(^FINGLBankReconMatchCaches(YM,2,idxClass,idxId,pidBankRecon,""))
			if idCache'="" {
				set idxClass=$$$Index($$$MATCHCACHE)
				set idxId=$$$Index(pidBankRecon_$$$COMMA_idCache)
				if $data(^FINGLBankReconManualMatchs(YM,1,idxClass,idxId,pidBankRecon)) {
					set idManual=pidBankRecon_$$$COMMA_$order(^FINGLBankReconManualMatchs(YM,1,idxClass,idxId,pidBankRecon,""))
				}
			}
		}
	}
 	
 	set pidCache = pidBankRecon_$$$COMMA_idCache
 	
	quit idManual
 
RemoveFromManualMatch(pidBankRecon,pstrClass,pidClass) 
	;-------------------------------------------------------------------------------
	; Remove an entry from manual match
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	; pstrClass   : The type of the class to find
	; pidClass    : The id of the class to find
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new idManual,YFELD
 
	set idManual=$$FindManualMatchId(pidBankRecon,pstrClass,pidClass)
	quit:idManual=""
	
	do MatchedUncomplete^FINGLBankReconMatchCache(pidClass)
	
	quit
	
OnScreenUpdateStyle(pstrYLFDAT,pblnParent)
    ;-------------------------------------------------------------------------------
    ; Allow a cell to cause updates to happen including to itself if needed
    ;
    ; Returns:
    ;
    ; History:
    ; 02-Feb-2005		shobby			Code Check.
    ; 01-Feb-2005		RobertW			Created (SR10061)
    ;-------------------------------------------------------------------------------
	do ScreenUpdateStyle^COMGridEdit31S(pstrYLFDAT)
	
	quit ""
	
AddParentAndChild(pidBankRecon,pstrParentClass,pidParent,pstrChildClass,pidChild,pblnManual) 
	;-------------------------------------------------------------------------------
	; Method Usage
	;
	; Params:
	; pidBankRecon   : The id of the bank reconciliation record
	; pstrParentClass: The parent class of the match
	; pidParent      : The parent id of the match
	; pstrChildClass : The parent class of the match
	; pidChild       : The parent id of the match
	; pblnManual     : Is this manual?
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 	new arrMatches,idCacheParent,idCacheChild,objCache
 	
 	do FindManualMatchId(pidBankRecon,pstrParentClass,pidParent,.idCacheParent)
 	do FindManualMatchId(pidBankRecon,pstrChildClass,pidChild,.idCacheChild)
 	
 	set objCache = $$$DATA($$$MATCHCACHE,idCacheParent)
 	set $$$FINGLBankReconMatchCacheParent(objCache)=$$$YES
 	set $$$FINGLBankReconMatchCacheCleared(objCache)=$$$YES
 	do Save^COMUtils($$$MATCHCACHE,idCacheParent,objCache,$$$YES)
 	
 	set objCache = $$$DATA($$$MATCHCACHE,idCacheChild)
 	set $$$FINGLBankReconMatchCacheCleared(objCache)=$$$YES
 	do Save^COMUtils($$$MATCHCACHE,idCacheChild,objCache,$$$YES)
 	
	$$$CreateChild(pidBankRecon,$$$MATCHCACHE,idCacheChild,$$$CreateParent(pidBankRecon,$$$MATCHCACHE,idCacheParent))
	
	do GetManualArray(pidBankRecon,pstrParentClass,pidParent,.arrMatches)
	
	if '$data(pblnManual) {
		do CompleteMeAndMyChildren^FINGLBankReconMatchCache(pidBankRecon,.arrMatches,,$$$YES,$$$NO) 
	} else {
		do CompleteMeAndMyChildren^FINGLBankReconMatchCache(pidBankRecon,.arrMatches,,$$$YES,$$$NO,pblnManual) 
	}
 	
	quit
	
GetMatchArray(pidBankRecon,pstrClass,pidClass,&parrMatches,pblnJustCache=$$$NO)
	;-------------------------------------------------------------------------------
	; Returns the parent and children entries for a match, giving the real class and id 
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	; pstrClass   : The type of the class to find
	; pidClass    : The id of the class to find
	; parrMatches : The array of matches found.
	; pblnJustCache : Force use of Match Cache
	;
	; ByRefs:	
	; parrMatches - array of matches.
	; 					Format:	parrMatches(1) = "Class~Keys"
	; 									...
	;
	; Returns:
	;
	; History:
	; 10-Aug-2006	PO		SR14331: Introduced pblnJustCache, force use of cache
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new idManual,objManual,idParent,intMatches,idLine
	
	set idManual=$$FindManualMatchId(pidBankRecon,pstrClass,pidClass)
	quit:'($$$IsValidKey(pidBankRecon,idManual))
	
	set objManual=$get(^FINGLBankReconManualMatch(YM,pidBankRecon,$$$KEY2(idManual),1))
	set idParent=$$$FINGLBankReconManualMatchParent(objManual)
	if idParent'=0 {
		set objManual=$get(^FINGLBankReconManualMatch(YM,pidBankRecon,idParent,1))
	} else {
		set idParent=$$$KEY2(idManual)
	}
	
	kill parrMatches
	
	set intMatches=1
	
	set parrMatches(intMatches)=$$GetRealClassAndId(pidBankRecon,objManual,pblnJustCache) // SR14331
	
	set idLine=""
	for {
		set idLine=$order(^FINGLBankReconManualMatchs(YM,2,idParent,pidBankRecon,idLine))
		quit:idLine=""
		
		set objManual=$get(^FINGLBankReconManualMatch(YM,pidBankRecon,idLine,1))
		set parrMatches($increment(intMatches))=$$GetRealClassAndId(pidBankRecon,objManual,pblnJustCache) // SR14331
	}
	
	quit
	
GetManualArray(pidBankRecon,pstrClass,pidClass,&parrMatches)
	;-------------------------------------------------------------------------------
	; Gets a list of the manual match id's in a match (the parent is the first entry)
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	; pstrClass   : The type of the class to find
	; pidClass    : The id of the class to find
	; parrMatches : The array of matches found.
	;
	; ByRefs:
	; parrMatches - array of matches.
	; 					Format:	parrMatches(1) = "Key"
	; 									...
	; 
	; Returns:
	;
	; History:
	; 02-Mar-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new idManual,objManual,idParent,]]><![CDATA[intMatches,idLine
	
	set idManual=$$FindManualMatchId(pidBankRecon,pstrClass,pidClass)
	quit:'($$$IsValidKey(pidBankRecon,idManual))
	
	set objManual=$get(^FINGLBankReconManualMatch(YM,pidBankRecon,$$$KEY2(idManual),1))
	set idParent=$$$FINGLBankReconManualMatchParent(objManual)
	if idParent'=0 {
		set objManual=$get(^FINGLBankReconManualMatch(YM,pidBankRecon,idParent,1))
	} else {
		set idParent=$$$KEY2(idManual)
	}
	
	kill parrMatches
	
	set intMatches=1
	
	set parrMatches(intMatches)=$$$FINGLBankReconManualMatchClassId(objManual)
	
	set idLine=""
	for {
		set idLine=$order(^FINGLBankReconManualMatchs(YM,2,idParent,pidBankRecon,idLine))
		quit:idLine=""
		
		set objManual=$get(^FINGLBankReconManualMatch(YM,pidBankRecon,idLine,1))
		set parrMatches($increment(intMatches))=$$$FINGLBankReconManualMatchClassId(objManual)
	}
	
	quit
	
GetRealClassAndId(pidBankRecon,pobjManual,pblnJustCache=$$$NO)
	;-------------------------------------------------------------------------------
	; Given a manual match object, find the progenitor, either directly or from
	; match cache
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	; pobjManual  : The manual match object
	; pblnJustCache : Force use of Match Cache
	;
	; ByRefs:
	;
	; Returns:
	; The class type and id, separated by Y (~)
	;
	; History:
	; 10-Aug-2006	PO		SR14331: Introduced pblnJustCache, force use of cache
	; 28-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 
	new strClass,idClass,objCache,strReturn
	
	set strClass=$$$FINGLBankReconManualMatchClassType(pobjManual)
	set idClass=$$$FINGLBankReconManualMatchClassId(pobjManual)
	if 'pblnJustCache && (strClass = "FINGLBankReconMatchCache") { // SR14331
		set objCache=$get(^FINGLBankReconMatchCache(YM,pidBankRecon,$$$KEY2(idClass),1))
		set strClass=$$$FINGLBankReconMatchCacheClassType(objCache)
		set idClass=$$$FINGLBankReconMatchCacheClassId(objCache)
	}
	
	set strReturn=strClass_Y_idClass
	
	quit strReturn
	
UnsetActive(pidManual,pblnIsParent=$$$YES) 
	;-------------------------------------------------------------------------------
	; Set the parent as in active
	;
	; Params:
	; pidManual   : The id of the manual match item
	; pblnIsParent: If this is not a parent, set the child as detached. (defaults to 1)
	;
	; ByRefs:
	;
	; Returns:
	; The status of the save.
	;
	; History:
	; 02-Mar-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
 	new objManual
	
	set objManual=$$$DATA($$$MANUALMATCH,pidManual)
	set $$$FINGLBankReconManualMatchActiveParent(objManual)=$$$ANNO
	if 'pblnIsParent {
		set $$$FINGLBankReconManualMatchParent(objManual)=$$$DETACHEDCHILD
	}
	quit $$$Save($$$MANUALMATCH,pidManual,objManual,1)
	
	
ChildrenCount(pidBankRecon,pidParent) 
	;-------------------------------------------------------------------------------
	; Returns how many children a manual match parent has.
	;
	; Params:
	; pidBankRecon: The id of the bank reconciliation record
	; pidParent   : The id of the manual match parent record
	;
	; ByRefs:
	;
	; Returns:
	; The number of children
	; 
	; History:
	; 03-Mar-2006	RPW		SR13697: Created
	;-------------------------------------------------------------------------------
 
	new idManual,intCount
 
	set idManual=""
	set intCount=0
	
	for {
		set idManual=$order(^FINGLBankReconManualMatchs(YM,2,pidParent,pidBankRecon,idManual))
		quit:idManual=""
		
		set intCount=intCount+1
	}
 
	quit intCount
 
]]></Routine>
</Export>