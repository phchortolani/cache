<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINRPGLBankReconPrevGLAdj" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINRPGLBankReconPrevGLAdj
	
#include COMSYS
#include FINConst
	
#;define AddToRow(%1)		set lstRow = lstRow_$listbuild(%1)
 
GetPrevGLAdj(pidCompany,pidLanguage,pYUSER,pidBankRec,pblnTotalOnly=$$$NO)
	;-------------------------------------------------------------------------------
	; Retrieve previous GL Adj rows.
	;
	; Params: pidCompany		: The company number (YM)
	; 		  pidLanguage		: The language (SPRACHE)
	; 		  pYUSER			: Session ID (YUSER)
	; 		  pidBankRec		: The bank recon number
	; 		  pblnTotalOnly		: Only compute the total
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 14-Oct-2009	GRF		SR15632: Macro replacement
	; 18-Jan-2007	SteveS	SR15355: Use namespace subscript
	; 10-Oct-2006	SteveS	SR15108: Created
	;-------------------------------------------------------------------------------
	new objFINGLBankRecon,dteReconciling,idBankAccount,idxBankAccount,idBankRec,dteEffective,idLine
	new objFINGLBankReconLine,curWithdrawal,curDeposit,strSort,strNS
	new YM,SPRACHE,YUSER,idAccount,strReference,dteTran,lstRow,strDate
	new curTotal
 
	set YM      = pidCompany
	set SPRACHE = pidLanguage
	set YUSER   = pYUSER
 
	quit:$$$NoKey(pidBankRec)||(YM="")||(SPRACHE="")||(YUSER="") // need setup variables
 
 	set strNS = $zutil(5) //SR15355
	set objFINGLBankRecon = $get(^FINGLBankRecon(YM,pidBankRec,1))
		
	set dteReconciling = $$$FINGLBankReconReconcilingGLDate(objFINGLBankRecon)
	set idBankAccount = $$$FINGLBankReconBankAccount(objFINGLBankRecon)
	
	set curTotal = 0	
	set idxBankAccount = $$$Index(idBankAccount)
	set idBankRec = ""
	
	for {
		set idBankRec = $order(^FINGLBankRecons(YM,40,idxBankAccount,$$$EnumFINSYSSTATUSPosted,idBankRec))
		quit:(idBankRec="")
			
		set dteEffective = $$$FINGLBankReconEntered($get(^FINGLBankRecon(YM,idBankRec,1)))
			
		continue:(dteEffective<=dteReconciling) // out of period
			
		set idLine = ""
		for {
			set idLine = $order(^FINGLBankReconLine(YM,idBankRec,idLine))
			quit:(idLine="")
				
			set objFINGLBankReconLine = $get(^FINGLBankReconLine(YM,idBankRec,idLine,1))
				
			set curDeposit    = $$$FINGLBankReconLineDebit(objFINGLBankReconLine)
			set curWithdrawal = $$$FINGLBankReconLineCredit(objFINGLBankReconLine)
			
			set curTotal = curTotal + curDeposit
			set curTotal = curTotal - curWithdrawal
			
			if 'pblnTotalOnly {
				set curDeposit    = $$$FCBase(curDeposit)
				set curWithdrawal = $$$FCBase(curWithdrawal)
				
				set idAccount     = $$$FINGLBankReconLineAccount(objFINGLBankReconLine)
				set strReference  = $$$FINGLBankReconLineReference(objFINGLBankReconLine)
				set dteTran       = $$$FINGLBankReconLineTransactionDate(objFINGLBankReconLine)
				set strDate       = $$Date^COMRPUtil(dteTran,SPRACHE)
				
				set lstRow = ""
				
				$$$AddToRow(curDeposit)
				$$$AddToRow(curWithdrawal)
				$$$AddToRow(idAccount)
				$$$AddToRow(strReference)
				$$$AddToRow(strDate)
				$$$AddToRow(idBankRec)
				
				set strSort = dteTran		  // order by tran date.
				if strSort="" set strSort=" " // avoid subscript problems
				
				set ^CacheTempData(strNS,YUSER,strSort,$increment(^CacheTempData(strNS,YUSER))) = lstRow
				
			} else {
				; DO NOTHING
			}
		}
	}
 
	do:'pblnTotalOnly PrepareData^COMRPUtil(YUSER)
 
	quit curTotal
	
]]></Routine>
</Export>