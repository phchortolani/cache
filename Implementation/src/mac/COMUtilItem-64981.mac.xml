<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMUtilItem" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMUtilItem
    ;-------------------------------------------------------------------------------
    ; Common Utilities for Stock Items
    ; 
	; 
	; History:
	; 07-Nov-2006	GRF		Created
    ;-------------------------------------------------------------------------------
#include COMConst
#include WWWConst
#include COMSYS
#define COLON ":"
#define ListByStkLocn		1
#define ListByLocnDate		2
#define ListByTranType		3
#define ListByDateTran		4
	
ListAll(pidItem="",pSaveType=$$$ListByStkLocn,pblnInclOpen=$$$NO)
	;-------------------------------------------------------------------------------
	; Review of stock source transactions
	; 
	; 	Goods Received			INREC, INRECLine
	; 	Transfers				INTFR, INTFRLine
	; 	Goods Relocation		INWEUM               Adjustments
	; 	Orders					INAUF, INAUFP
	;   Stocktake				?
	;   
	; History:
	; 14-Nov-2006	GRF		Expand
	;-------------------------------------------------------------------------------
	quit:pidItem=""
	
	do ^WWWVAR
	kill ^CacheTemp("COMUtilItem",pidItem)
	
	do ListRcvd(pidItem,pSaveType,pblnInclOpen)
	do ListMove(pidItem,pSaveType)
	do ListTfrd(pidItem,pSaveType,pblnInclOpen)
	do ListOrds(pidItem,pSaveType,pblnInclOpen)
	
	zw ^CacheTemp("COMUtilItem",pidItem)
	quit
 
Save(pSaveType,pidItem,pidSiteLocn,pidStockLocn,pDate,pTxType,pRef,pobjData)
    ;-------------------------------------------------------------------------------
	;  1   ^CacheTemp("COMUtilItem",Item,SiteLocn,StockLocn,Date    ,TxType   ,Ref)   $$$ListByStkLocn
	;  2   ^CacheTemp("COMUtilItem",Item,SiteLocn,Date     ,TxType  ,StockLocn,Ref)   $$$ListByLocnDate
	;  3   ^CacheTemp("COMUtilItem",Item,TxType  ,Date     ,SiteLocn,StockLocn,Ref)   $$$ListByTranType
	;  4   ^CacheTemp("COMUtilItem",Item,Date    ,TxType   ,SiteLocn,StockLocn,Ref)   $$$ListByDateTran
	;  
	;    = Qty ~ Order ~ OrderLine ~ RecordType ~ SiteLocn2 ~ StockLocn2 ~ ReasonCode ~ TfrMethod
	;       1      2         3           4            5           6            7            8
    ;-------------------------------------------------------------------------------
	
	if pSaveType=$$$ListByLocnDate {
	;	2
		set ^CacheTemp("COMUtilItem",pidItem,pidSiteLocn,pDate,pTxType,pidStockLocn,pRef) = pobjData
		
	} elseif pSaveType=$$$ListByTranType {
	;	3
		set ^CacheTemp("COMUtilItem",pidItem,pTxType,pDate,pidSiteLocn,pidStockLocn,pRef) = pobjData
		
	} elseif pSaveType=$$$ListByDateTran {
	;	4
		set ^CacheTemp("COMUtilItem",pidItem,pDate,pTxType,pidSiteLocn,pidStockLocn,pRef) = pobjData
		
	} else {
	;	1    Default : ListByStkLocn
		set ^CacheTemp("COMUtilItem",pidItem,pidSiteLocn,pidStockLocn,pDate,pTxType,pRef) = pobjData
	}
	
	quit
	
ListRcvd(pidItem="",pSaveType=1,pblnInclOpen=$$$NO)
	;-------------------------------------------------------------------------------
	; List Goods Received for an item based on Orders
	;
	; Inputs : pidItem			Item Number
	; 
	; History:
	; 07-Nov-2006	GRF		Created
	;-------------------------------------------------------------------------------
	new blnNotFound,dteRecv,idOrder,idOrdLine,idReceipt,idRecLine,idSiteLocn,idStockLocn
	new objData,objReceipt,objRecLine,RecType,RecvQty,strRef
	
	; TODO : Check if Received without order get dummy order number/line <GRF>
	
	quit:pidItem=""
	
	set idOrder = ""
	for {
		set idOrder = $order(^INAUFPs(YM,8,pidItem,idOrder))
		quit:idOrder=""
		
		set idOrdLine = ""
		for {
			set idOrdLine = $order(^INAUFPs(YM,8,pidItem,idOrder,idOrdLine))
			quit:idOrdLine=""
			
			set blnNotFound = $$$YES
			
			set idReceipt = ""
			for {
				set idReceipt = $order(^INRECLines(YM,4,idOrder,idOrdLine,idReceipt))
				quit:idReceipt=""
				
				set idRecLine = ""
				for {
					set idRecLine = $order(^INRECLines(YM,4,idOrder,idOrdLine,idReceipt,idRecLine))
					quit:idRecLine=""
					
					set objReceipt  = $get(^INREC(YM,idReceipt,1))
					set objRecLine  = $get(^INRECLine(YM,idReceipt,idRecLine,1))
					
					set RecType     = $piece(objReceipt,Y,1)
					
					set RecvQty     = $piece(objRecLine,Y,4)
					set idSiteLocn  = $piece(objRecLine,Y,10)
					set idStockLocn = $piece(objRecLine,Y,11)
					set dteRecv     = +$piece(objRecLine,Y,13)              ; Receipt Date
					if dteRecv="" set dteRecv = +$piece(objReceipt,Y,13)    ; Delivery Note Date
					if dteRecv="" set dteRecv = +$piece(objReceipt,Y,8)     ; Posted Date
					if dteRecv="" set dteRecv = +$piece(objReceipt,Y,6)     ; Created Date
					if dteRecv="" set dteRecv = "Unknown"                   ; Unknown
					
					set strRef  = idReceipt_$$$COLON_idRecLine
					set objData = RecvQty_Y_idOrder_Y_idOrdLine_Y_RecType
					do Save(pSaveType,pidItem,idSiteLocn,idStockLocn,dteRecv,"Rec",strRef,objData)
					set blnNotFound = $$$NO
				}
			}
			
			if blnNotFound && pblnInclOpen {
				set strRef  = idOrder_$$$COLON_idOrdLine
				set objData = 0_Y_idOrder_Y_idOrdLine_Y_RecType
				do Save(pSaveType,pidItem,"zOpen","zOpen","zOpen","Rec",strRef,objData)
			}
			
		}
	}
	
	quit
	
ListMove(pidItem,pSaveType)
    ;-------------------------------------------------------------------------------
    ;  List Goods Relocation (Movement between stock locations within a warehouse)
    ;-------------------------------------------------------------------------------
	new dteRcvd,dteUpdated,idSiteLocn,idStockLocn,idUser,objData,objRelocn,Qty
	new Reason,strRef,tmeUpdated,ToSiteLocn,ToStkLocn
	
	quit:pidItem=""
	
	set dteUpdated = ""
	for {
		set dteUpdated = $order(^INWEUM(YM,dteUpdated))
		quit:dteUpdated=""
		
		set tmeUpdated = ""
		for {
			set tmeUpdated = $order(^INWEUM(YM,dteUpdated,tmeUpdated))
			quit:tmeUpdated=""
			
			set idUser = ""
			for {
				set idUser = $order(^INWEUM(YM,dteUpdated,tmeUpdated,idUser))
				quit:idUser=""
				
				set idSiteLocn = ""
				for {
					set idSiteLocn = $order(^INWEUM(YM,dteUpdated,tmeUpdated,idUser,pidItem,idSiteLocn))
					quit:idSiteLocn=""
					
					set idStockLocn = ""
					for {
						set idStockLocn = $order(^INWEUM(YM,dteUpdated,tmeUpdated,idUser,pidItem,idSiteLocn,idStockLocn))
						quit:idStockLocn=""
							
						set dteRcvd = ""
						for {
							set dteRcvd = $order(^INWEUM(YM,dteUpdated,tmeUpdated,idUser,pidItem,idSiteLocn,idStockLocn,dteRcvd))
							quit:dteRcvd=""
							
							set objRelocn  = $get(^INWEUM(YM,dteUpdated,tmeUpdated,idUser,pidItem,idSiteLocn,idStockLocn,dteRcvd,1))
							set Qty        = $piece(objRelocn,Y,4)
							set ToSiteLocn = $piece(objRelocn,Y,32)
							set ToStkLocn  = $piece(objRelocn,Y,33)
							set Reason     = $piece(objRelocn,Y,47)
							
							
							set strRef  = dteUpdated_$$$COLON_tmeUpdated_$$$COLON_idUser_$$$COLON_$select(ToStkLocn="X":"ADJ",1:"ISS")
							set objData = -Qty_Y_""_Y_""_Y_"ISS"_Y_ToSiteLocn_Y_ToStkLocn_Y_Reason
							do Save(pSaveType,pidItem,idSiteLocn,idStockLocn,dteUpdated,"Rel",strRef,objData)
							
							; assumes default DELETE location used
							if ToStkLocn'="X" {
								set strRef  = dteUpdated_$$$COLON_tmeUpdated_$$$COLON_idUser_$$$COLON_"REC"
								set objData = Qty_Y_""_Y_""_Y_"REC"_Y_idSiteLocn_Y_idStockLocn_Y_Reason
								do Save(pSaveType,pidItem,ToSiteLocn,ToStkLocn,dteUpdated,"Rel",strRef,objData)
							}
							
						}
					}
				}
			}
		}
	}
	
	quit
	
ListTfrd(pidItem,pSaveType,pblnInclOpen)
    ;-------------------------------------------------------------------------------
    ;  List Transfers (Movement between warehouses)
    ;-------------------------------------------------------------------------------
	new dteRcvd,dteShip,dteTrans,FromLocn,FromQty,idTfrBatch,idTfrLine,Method
	new objData,objTfrLine,objTransfer,Status,strRef,ToLocn,ToQty,ToStkLocn,TranType
	
	set idTfrBatch = ""
	for {
		set idTfrBatch = $order(^INTFR(YM,idTfrBatch))
		quit:idTfrBatch=""
		
		set objTransfer = $get(^INTFR(YM,idTfrBatch,1))
		
		set idTfrLine = ""
		for {
			set idTfrLine = $order(^INTFRLine(YM,idTfrBatch,idTfrLine))
			quit:idTfrLine=""
			
			set objTfrLine = $get(^INTFRLine(YM,idTfrBatch,idTfrLine,1))
			continue:$piece(objTfrLine,Y,1)'=pidItem
			
			set Status   = $piece(objTransfer,Y,7)  ; 0 Created; 1 Firmed; 2 Sent; 3 Recvd
			continue:('pblnInclOpen)&&(Status<2)
			
			set dteTrans = $piece(objTransfer,Y,1)
			set TranType = $piece(objTransfer,Y,2)
			set FromLocn = $piece(objTransfer,Y,3)
			set ToLocn   = $piece(objTransfer,Y,4)
			set Method   = $piece(objTransfer,Y,5)
			set dteShip  = $piece(objTransfer,Y,9)
			set dteRcvd  = $piece(objTransfer,Y,10)
			
			set FromQty   = $piece(objTfrLine,Y,2)
			set ToStkLocn = $piece(objTfrLine,Y,6)   set:ToStkLocn="" ToStkLocn="###"
			set ToQty     = $piece(objTfrLine,Y,9)
			
			
			set strRef  = idTfrBatch_$$$COLON_idTfrLine_$$$COLON_"ISS"
			set objData = -FromQty_Y_""_Y_""_Y_"ISS"_Y_ToLocn_Y_ToStkLocn_Y_""_Y_Method
			do Save(pSaveType,pidItem,FromLocn,"???",+dteShip,"Tfr",strRef,objData)
			
			if dteRcvd'="" {
				set strRef  = idTfrBatch_$$$COLON_idTfrLine_$$$COLON_"REC"
				set objData = ToQty_Y_""_Y_""_Y_"REC"_Y_FromLocn_Y_"???"_Y_""_Y_Method
				do Save(pSaveType,pidItem,ToLocn,ToStkLocn,+dteRcvd,"Tfr",strRef,objData)
			}
		}
	}
	
	quit
	
ListOrds(pidItem,pSaveType,pblnInclOpen)
	
	;+++++++++++++++++++++++++++++++++++++++
	quit
]]></Routine>
</Export>