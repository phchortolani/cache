<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARINTRNPickLineScan" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARINTRNPickLineScan
#include COMSYS
#include COMConst
#include WWWConst
#include %occInclude
	
GetReservedLotsByNR(pidItem, pidLocn,pidLot,pidReference, &parrReserved)

	;-------------------------------------------------------------------------------
	; Return an array of lots (" " = none) that have a reservations (alDRP.dPlannedMovement)
	; (LotNumber and expiry)
	; 
	; pidItem      = the Item
	; pidLocn      = return details for specific location only
	; parrReserved = array to pass back
	; 
	; Returns:
	; 	error code on failure
	; 	
	; History:
	; 03-Jul-2012	RGB		Routine created to get reserved bundles for a certain lot and reference
	;-------------------------------------------------------------------------------
	
	new arrBundle,sc,idReference,idBundle,strStatus
	set strStatus = $$$OK
	if pidLot="" set pidLot=" "
	
	set tSQL="SELECT %ID, FromStorage->Code as Storage, Bundle->LotNumber as ItemLotNumber,QtyRequired, Reference, DateTimeCreated, DueDate, MovementType_MovementTypeId, Bundle, FromLocn "_
 			 "FROM alDRP.dPlannedMovement "_
 			 "WHERE Item              = '"_pidItem_"'   AND "_
       		 "FromLocn          = '"_pidLocn_"'   AND "_
       	 	 "State->StateId    = 3 "
    if pidReference'="" set tSQL=tSQL_" AND Reference          = '"_pidReference_"' "
	
	Set sc = ##class(%Library.ResultSet).%New()
	Set sc.RuntimeMode = "0"	
	Do sc.Prepare(tSQL) 
	Do sc.Execute()
    While sc.Next()  {
			
			set idBundle = sc.Data("Bundle")
			set idReference = sc.Data("Reference")
			set strLotNumber=sc.Data("ItemLotNumber")
			if strLotNumber="" set strLotNumber=" "
			
			if pidReference'="" {
				continue:idReference'=pidReference
			}
			continue:idBundle=""
			
			continue:strLotNumber'=pidLot
 
			set strStorage = sc.Data("FromLocn")_"||"_sc.Data("Storage")
			set intQty     = sc.Data("QtyRequired")
			
			// This should not happen if there is only one lot number per item!
			set strKey = idBundle_Y_$piece(strStorage,"||",2)
			
			set intQty     = intQty+$get(parrReserved(pidItem,strKey))
			
			set parrReserved(pidItem,strKey) = intQty
			//set parrReserved(pidItem,strStorage,strLotNumber) = intQty
		}
	If $IsObject(sc)
	{
		Do sc.Close()
	}
	quit strStatus
]]></Routine>
</Export>