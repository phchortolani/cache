<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INDispenseToPatientLineScan" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INDispenseToPatientLineScan
	
#include INConst
#include COMSYS
	
AddScanLine(pidScan)
    ;-------------------------------------------------------------------------------
    ; Routine to Add a new line to a Grid after a Scan is validated
    ;
    ; Assumptions :
    ;  YFORM	-	 Form Name
    ; 
    ; Returns:
    ; 	Status
    ;
    ; Used by INMOIssueLine also (HEVA-1030)
	;
    ; History:
    ; 20-Jul-2009	PPP		SR16773: ScanDelimiter is a function now
    ; 15-Jul-2009	PPP		SR16755: $$$GRIDAddLine does not need the idClass
    ; 10-Jul-2009	DWR		SR16565: Peer review added null parameter
    ; 23-Jun-2009	PPP		SR16510: Updated for User defined policies
    ; 25-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	new arrBundle,arrFields,blnItemExists
	new idBundle,idClass,idFromLocn,idItem,idLine,idLot,idStorage,idToLocn,idType
	new objData,objHeader,objLine,objOldData,sc,strStatus
 	
	set idItem = ""	
	if $get(YFORM)'="" {
		set idClass    = $$$GetClass(YFORM)
		set objLine    = ""
		set idItem     = $piece(pidScan,$$$ScanDelim,1)            //SR16773
		set objHeader  = $$$GRIDYFELDContainer
	 	set idFromLocn = $$$INIssueFromLocn(objHeader)
	 	set idToLocn   = $$$INIssueToLocn(objHeader)
	 	set idType     = $$$INIssueType(objHeader)
 
 		// For Picking Screens Only
 		// arrBundle(Bundle ID ,Storage ID) = Qty
 	//	set sc = $$GetBundleData^WWW120Scan(idItem,idFromLocn,idLot,.arrBundle,.idBundle,.idStorage)
 		set sc = $$GetBundleForAttData^WWW120Scan(idItem,idFromLocn,pidScan,.arrBundle,.idBundle,.idStorage)	//SR16510
 
 		if $$$ISERR(sc) set strStatus = $$ISStatusToDLStatus^COMUtilError(sc) quit strStatus			//EARLY EXIT
 
		//Process only if Bundle Exist for the Item/Lot combination and has Qty
		if $get(idBundle)'="" {
 
			//Get the data for the Item if it already exists
			//Need to update arrBundle if lines already exist
			//set idLine = $$GetExistingItemRowData(idItem, .idBundle, .idStorage, .arrBundle)
			set idLine = $$GetRowLineWithQtyChecks^COMGridEdit31Scan(idItem, 
			                                                         $$$FldINIssueLineItem, 
			                                                         $$$FldINIssueLineBundle, 
			                                                         $$$FldINIssueLineFromStorage, 
			                                                         $$$FldINIssueLineQtyIssued, 
			                                                         .idBundle, 
			                                                         .idStorage, 
			                                                         .arrBundle, 
			                                                         .blnItemExists)
			if idLine {
				set (objLine,objOldData) = $$$GRIDGetYFELD(idLine)
 
				set $$$INIssueLineQtyRequired(objLine) = $$$INIssueLineQtyRequired(objLine) + 1
				set $$$INIssueLineQtyIssued(objLine)   = $$$INIssueLineQtyIssued(objLine) + 1
				
				kill arrFields
				//set the array for the fields that are updated
				set arrFields($$$FldINIssueLineQtyRequired) = $$$INIssueLineQtyRequired(objLine)   //UPDATE
				set arrFields($$$FldINIssueLineQtyIssued)   = $$$INIssueLineQtyIssued(objLine)     //UPDATE
				
				//Updates the Row and Displayes it (for existing lines)
				//If the row is on another page displays the lines at the top of the grid
				do UpdateRow^COMGridEdit31Scan(YFORM, idLine, .arrFields, objOldData)
	 			
			} else {
				if $get(idBundle)'="" {
					set $$$INIssueLineItem(objLine)        = idItem                              //UPDATE
					set $$$INIssueLineQtyIssued(objLine)   = $$$INIssueLineQtyIssued(objLine)   + 1
					set $$$INIssueLineQtyRequired(objLine) = $$$INIssueLineQtyRequired(objLine) + 1
					set $$$INIssueLineUnit(objLine)        = $$$INARTUnitofMeasure($get(^INART(YM,idItem,1)))
				;	set $$$INIssueLineUnit(objLine)        = $$LoadUnitOfMeasureList^INARTUtilities(idItem)
					set $$$INIssueLineReference(objLine)   = $$$KEY1($$$GRIDYKEYContainer)
					set $$$INIssueLineFromStorage(objLine) = idStorage
					set $$$INIssueLineBundle(objLine)      = idBundle
					set $$$INIssueLineStatus(objLine)      = 1
					
					if idType = 1 {		//Inter-Departmental
						set $$$INIssueLineToStorage(objLine) = $$GetStorage^INIssueAuto(idItem ,idToLocn)
					}
					
				;	$$$GRIDAddLine(objLine,,idClass)		//SR16755
					$$$GRIDAddLine(objLine)
				}
			}	
		}
	}
	
	quit $$$OK
	
]]></Routine>
</Export>