<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLRep" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLRep ; Ledger Reports
	
#include COMSYS
#include FINConst
	
ProfitAndLoss2
	;------------------------------------------------------------------------------
	; Show the Balance Sheet
	; 
	; History
	; 20-Jun-2003	shobby	Creation
	;-----------------------------------------------------------------------------
	new strLastNode
	
	set strLastNode=""
	write "<P><B>Profit & Loss</B></P>"
	do StartTree^COMTree($get(YPARA))
	do ShowBalanceSheet($lb($$$EnumFINGLACCOUNTTYPEIncome,$$$EnumFINGLACCOUNTTYPEExpense),$lb("INCOME","COST OF GOODS SOLD"),$$$YES,1,.strLastNode,$lb("COGSAccountTest",""),"GROSS PROFIT")
	;do ShowBalanceSheet($lb($$$EnumFINGLACCOUNTTYPEExpense),$lb("EXPENSE"),$$$NO,2,.strLastNode,$lb("TaxAccountTest",0))
	do ShowBalanceSheet($lb($$$EnumFINGLACCOUNTTYPEExpense),$lb("TAXATION"),$$$NO,2,.strLastNode,$lb("TaxAccountTest",1))
	do StopTree^COMTree(1)
	quit
 
 
ProfitAndLoss(Param,Result)
	quit
	
	/*
	; Code should no longer be used.  Moved to FINGLProfitAndLoss
	
	new objFINGLAccount
	new idxAccountNumber,intYear,idPeriodx,RepId,fltAmount
	
	set RepId="Rep:ProfitAndLoss"
	kill ^mtemp(RepId,YUSER)
	kill ^mtemp("RepDrill",YUSER)
	
	set idxAccountNumber=""
	set intYear=2003
	set idPeriodx=$$DefaultPeriod^FINGLPeriod()
	set fltAmount(1,"Income")=0
	set fltAmount(2,"Income")=0
	set fltAmount(1,"COGS")=0
	set fltAmount(2,"COGS")=0
	set fltAmount(1,"Gross Amount")=0
	set fltAmount(2,"Gross Amount")=0
	set fltAmount(1,"Expense")=0
	set fltAmount(2,"Expense")=0
	set fltAmount(1,"Tax")=0
	set fltAmount(2,"Tax")=0
	
	for {
		set idxAccountNumber=$order(^FINGLAccount(YM,idxAccountNumber))
		quit:idxAccountNumber=""
		set objFINGLAccount=$get(^FINGLAccount(YM,idxAccountNumber,1))
		; Income
		if $$$FINGLAccountAccountUsage(objFINGLAccount)=$$$EnumFINGLACCOUNTUSAGETransaction {
			if $$$FINGLAccountAccountType(objFINGLAccount)=$$$EnumFINGLACCOUNTTYPEIncome {
				set fltAmount(1,"Income")=fltAmount(1,"Income")+$$GetTotal^FINGLPeriodTotal(idxAccountNumber,idPeriodx,intYear, 1,intYear, 12,"")
				set fltAmount(2,"Income")=fltAmount(2,"Income")+$$GetTotal^FINGLPeriodTotal(idxAccountNumber,idPeriodx,intYear-1, 1,intYear-1, 12,"")			
			}
			; COGS
			if $$$FINGLAccountAccountTypeModifier(objFINGLAccount)=$$$EnumFINGLACCOUNTTYPEMODIFIERCOGSAccount {
				set fltAmount(1,"COGS")=fltAmount(1,"COGS")+$$GetTotal^FINGLPeriodTotal(idxAccountNumber,idPeriodx,intYear, 1,intYear, 12,"")
				set fltAmount(2,"COGS")=fltAmount(2,"COGS")+$$GetTotal^FINGLPeriodTotal(idxAccountNumber,idPeriodx,intYear-1, 1,intYear-1, 12,"")			
			}
			; Expenses
			if ($$$FINGLAccountAccountType(objFINGLAccount)=$$$EnumFINGLACCOUNTTYPEIncome)&($$$FINGLAccountAccountTypeModifier(objFINGLAccount)'=$$$EnumFINGLACCOUNTTYPEMODIFIERTaxAccount) {
				set fltAmount(1,"Expense")=fltAmount(1,"Expense")+$$GetTotal^FINGLPeriodTotal(idxAccountNumber,idPeriodx,intYear, 1,intYear, 12,"")
				set fltAmount(2,"Expense")=fltAmount(2,"Expense")+$$GetTotal^FINGLPeriodTotal(idxAccountNumber,idPeriodx,intYear-1, 1,intYear-1, 12,"")						
			}
			; Tax
			if $$$FINGLAccountAccountTypeModifier(objFINGLAccount)=$$$EnumFINGLACCOUNTTYPEMODIFIERTaxAccount {
				set fltAmount(1,"Tax")=fltAmount(1,"Tax")+$$GetTotal^FINGLPeriodTotal(idxAccountNumber,idPeriodx,intYear, 1,intYear, 12,"")
				set fltAmount(2,"Tax")=fltAmount(2,"Tax")+$$GetTotal^FINGLPeriodTotal(idxAccountNumber,idPeriodx,intYear-1, 1,intYear-1, 12,"")			
			}
		}
	}
	set fltAmount(1,"Gross Amount")=fltAmount(1,"Income")-fltAmount(1,"COGS")
	set fltAmount(2,"Gross Amount")=fltAmount(2,"Income")-fltAmount(2,"COGS")
 
	set ^mtemp(RepId,YUSER,1,"RevenueThisYear")=fltAmount(1,"Income")
	set ^mtemp(RepId,YUSER,1,"RevenueLastYear")=fltAmount(2,"Income")
	set ^mtemp(RepId,YUSER,1,"COGSThisYear")=fltAmount(1,"COGS")
	set ^mtemp(RepId,YUSER,1,"COGSLastYear")=fltAmount(2,"COGS")
	set ^mtemp(RepId,YUSER,1,"GrossProfitThisYear")=fltAmount(1,"Income")-fltAmount(1,"COGS")
	set ^mtemp(RepId,YUSER,1,"GrossProfitLastYear")=fltAmount(2,"Income")-fltAmount(2,"COGS")
	set ^mtemp(RepId,YUSER,1,"ExpenseThisYear")=fltAmount(1,"Expense")
	set ^mtemp(RepId,YUSER,1,"ExpenseLastYear")=fltAmount(2,"Expense")
	set ^mtemp(RepId,YUSER,1,"ProfitBeforeTaxThisYear")=fltAmount(1,"Income")-fltAmount(1,"COGS")-fltAmount(1,"Expense")
	set ^mtemp(RepId,YUSER,1,"ProfitBeforeTaxLastYear")=fltAmount(2,"Income")-fltAmount(2,"COGS")-fltAmount(2,"Expense")
	set ^mtemp(RepId,YUSER,1,"TaxThisYear")=fltAmount(1,"Tax")
	set ^mtemp(RepId,YUSER,1,"TaxLastYear")=fltAmount(2,"Tax")
 
 
	set Result="^mtemp("""_RepId_""","""_YUSER_""",1)"
	set ^mtemp(RepId,YUSER,1,"Result")=Result
	
	quit
	*/
	
ProfitAndLossBody(Param,Result)
	set Result="^mtemp(""Rep:ProfitAndLossBody"","""_YUSER_""",3)"
	quit
 
ProfitAndLoss3
	do StartTree^COMTree($get(YPARA))
	do AddNode^COMTree("","!","","INCOME","NoImage","","",1,"",1,"")
	do AddNodes
	do StopTree^COMTree(1)
	quit
 
AddNodes
	new idxAccountNumber,intAccountType,strParent,objFINGLAccount,objFINGLAccountParent
	
	set idxAccountNumber=""
	set intAccountType=1
	
	for {
		set idxAccountNumber=$order(^FINGLAccounts(YM,4,intAccountType,idxAccountNumber))
		quit:idxAccountNumber=""
		
		set objFINGLAccount=$get(^FINGLAccount(YM,idxAccountNumber,1))
		set strParent=$$$FINGLAccountParent(objFINGLAccount)
		set objFINGLAccountParent=$get(^FINGLAccount(YM,strParent,1))
		;if $$$FINGLAccountType(objFINGLAccountParent)
		;AddNode(pidParent,pidNode,pstrTitle,pstrText,pstrImage,pstrForm="",pstrParam="",pblnHighLight="",pstrExtraData="",pblnLinkStopped="",plngPage="")
		do AddNode^COMTree(strParent,idxAccountNumber,"",idxAccountNumber,"","","","","",1,"")
	}
	
	quit
 
 
COGSAccountTest(pidAccountNumber)
	;------------------------------------------------------------------------------
	; Work out whether this account is a COGS Account
	; 
	; History
	; 21-Jun-2003	shobby	Creation
	;-----------------------------------------------------------------------------
	new objFINGLAccount,blnResult
	
	set blnResult=$$$YES
	set objFINGLAccount=$get(^FINGLAccount(YM,pidAccountNumber,1))
	if $$$FINGLAccountAccountType(objFINGLAccount)=$$$EnumFINGLACCOUNTTYPEExpense {
		set blnResult=$$$FINGLAccountAccountTypeModifier(objFINGLAccount)=$$$EnumFINGLACCOUNTTYPEMODIFIERCOGSAccount
	}
	quit blnResult
 
TaxAccountTest(pidAccountNumber,pstrCheck)
	;------------------------------------------------------------------------------
	; Work out whether this account is a Tax Account
	; 
	; History
	; 21-Jun-2003	shobby	Creation
	;-----------------------------------------------------------------------------
	new objFINGLAccount,blnResult
	
	set blnResult=$$$NO
	set objFINGLAccount=$get(^FINGLAccount(YM,pidAccountNumber,1))
	for {
		set blnResult=($$$FINGLAccountAccountTypeModifier(objFINGLAccount)=$$$EnumFINGLACCOUNTTYPEMODIFIERTaxAccount)
		quit:blnResult
		set objFINGLAccount=$get(^FINGLAccount(YM,$$$FINGLAccountParent(objFINGLAccount),1))
		quit:$$$FINGLAccountParent(objFINGLAccount)=""
	}
	quit blnResult=pstrCheck
	
BalanceSheet(pintYear)
	;------------------------------------------------------------------------------
	; Show the Balance Sheet
	; 
	; History
	; 20-Jun-2003	shobby	Formatting by adding extra nodes.
	; 19-Jun-2003	shobby	Single tree only
	; 18-Jun-2003	shobby	Creation
	;-----------------------------------------------------------------------------
	new strLastNode
	
	set strLastNode=""
	set VORG(1)=pintYear
	write "<P><B>Balance Sheet</B></P>"
	do StartTree^COMTree($get(YPARA))
	do ShowBalanceSheet($lb($$$EnumFINGLACCOUNTTYPEAsset),$lb("ASSETS"),$$$YES,1,.strLastNode)
	;do ShowBalanceSheet($lb($$$EnumFINGLACCOUNTTYPELiability),"LIABILITIES & OWNERS EQUITY",$$$NO)
	;do ShowBalanceSheet($lb($$$EnumFINGLACCOUNTTYPEEquity),"EQUITY",$$$NO)
	do ShowBalanceSheet($lb($$$EnumFINGLACCOUNTTYPELiability,$$$EnumFINGLACCOUNTTYPEEquity),$lb("LIABILITIES","OWNERS EQUITY"),$$$NO,2,.strLastNode)
	do StopTree^COMTree(1)
	quit
 
ShowBalanceSheet(pintAccountType,pstrHeading,pblnIncludeColumnHeadings,pstrOrder,pstrLastNode,pstrAdditionalTest="",strLabel="")
	;------------------------------------------------------------------------------
	; Show the Balance Sheet
	; 
	; History
	; 11-Dec-2006	shobby	SRBR014286:Corrected GIF names.
	; 13-May-2004	GRF		Clarify If Test
	; 21-Jun-2003	shobby	Allow an Account to be excluded based on calling a method.
	; 21-Jun-2003	shobby	Get the order of 'Title' nodes working properly
	; 19-Jun-2003	shobby	Single tree only
	; 19-Jun-2003	shobby	Some formatting changes.
	; 18-Jun-2003	shobby	Creation
	;-----------------------------------------------------------------------------
	new blnAdditionalTest,blnLastCodeSet,fltAmount,fltTotal,i,idDTD,idElement
	new idElementName,idParent,idPeriodx,idxAccountNumber,intAccountType,intYear
	new lstColumnHeadings,lstData,objElement,objFINGLAccountParent,strCommand
	new strFirstNode,strHeading,strLastNode,strParent
	
	set intYear=+$get(VORG(1))
	if intYear=0 set intYear=2003
	set strLastNode=pstrLastNode
	set idPeriodx=$$DefaultPeriod^FINGLPeriod()
	set idxAccountNumber=""
	set lstColumnHeadings=""
	if pblnIncludeColumnHeadings {
		set lstColumnHeadings=$lb($lb(intYear,intYear-1),$lb("($)","($)"))
	}
	
	set strParent=""
	set strHeading=""
	set fltTotal("All",1)=0
	set fltTotal("All",2)=0
	if $$$ALWAYS { ;$ll(pintAccountType)>1 {
		set strParent="Z1"_strHeading
		do AddNode^COMTree("",strParent,"",strHeading,"","","",1,$lg(lstColumnHeadings,2),1,"")
	}
	for i=1:1:$ll(pintAccountType) {
		set blnLastCodeSet=$$$NO
		set fltTotal("Current",1)=0
		set fltTotal("Current",2)=0
		set strFirstNode=""
		set strHeading=strHeading_$lg(pstrHeading,i)_$select(i=$ll(pintAccountType):"",1:" & ")
		set intAccountType=$lg(pintAccountType,i)
		for {
			set idxAccountNumber=$order(^FINGLAccounts(YM,4,intAccountType,idxAccountNumber))
			quit:idxAccountNumber=""
			set blnAdditionalTest=$$$YES
 
			if pstrAdditionalTest'="" {
				set strCommand="set blnAdditionalTest=$$"_$lg(pstrAdditionalTest,1)_"^FINGLRep("""_idxAccountNumber_""""
				if $lg(pstrAdditionalTest,2)'="" {
					set strCommand=strCommand_","""_$lg(pstrAdditionalTest,2)_""""
				}
				set strCommand=strCommand_")"
				xecute strCommand
			}
			if blnAdditionalTest {
				set objElement=$get(^FINGLAccount(YM,idxAccountNumber,1))
				set idParent=$$$FINGLAccountParent(objElement)
				if idParent'="" {
					set objFINGLAccountParent=$get(^FINGLAccount(YM,idParent,1))
					if objFINGLAccountParent'="" {
						if $$$FINGLAccountAccountType(objFINGLAccountParent)'=intAccountType {
							if $$$ALWAYS { ;$ll(pintAccountType)>1 {
								set idParent=strParent ;"Z1"
							}
							else {set idParent=""
							}
						}
					}
				}
					
				;AddNode(pidParent,pidNode,pstrTitle,pstrText,pstrImage,pstrForm="",pstrParam="",pblnHighLight="",pstrExtraData="",pblnLinkStopped="",plngPage="")
				if $get(YPARA)=YFORM {
					if $get(idxAccountNumber)'="" {
					set $$$Storage("Expand",$get(idxAccountNumber))=""
					}
				}
				;GetTotal(pidAccount,pidPeriodType,plngStartYear, plngStartNumber,plngEndYear, plngEndNumber,pidTranType)
		
				set fltAmount(1)=$$GetTotal^FINGLPeriodTotal(idxAccountNumber,idPeriodx,intYear, 1,intYear, 12,"")
				set fltAmount(2)=$$GetTotal^FINGLPeriodTotal(idxAccountNumber,idPeriodx,intYear-1, 1,intYear-1, 12,"")
				if $$$FINGLAccountAccountUsage(objElement)=$$$EnumFINGLACCOUNTUSAGETransaction {
					set fltTotal("Current",1)=$get(fltTotal("Current",1))+fltAmount(1)
					set fltTotal("Current",2)=$get(fltTotal("Current",2))+fltAmount(2)
				}
				set lstData=$lb(fltAmount(1),fltAmount(2))
				if ('blnLastCodeSet)!((idParent="")&(idxAccountNumber>pstrLastNode)) {
					set pstrLastNode=idxAccountNumber
					set blnLastCodeSet=$$$YES
				}
				do AddNode^COMTree(idParent,
									idxAccountNumber,
									idxAccountNumber,
									idxAccountNumber_"("_$$$FINGLAccountDescription(objElement)_")",
									$select($$$FINGLAccountAccountUsage(objElement)=$$$EnumFINGLACCOUNTUSAGETransaction:"html.gif",1:""),
									"FINGLAccount",
									"",
									$select($$$FINGLAccountAccountUsage(objElement)=$$$EnumFINGLACCOUNTUSAGETransaction:0,1:1),
									lstData,
									"",
									"")
			}
		}
		if strFirstNode="" set strFirstNode=idxAccountNumber
		set fltTotal("All",1)=fltTotal("All",1)+fltTotal("Current",1)
		set fltTotal("All",2)=fltTotal("All",2)+fltTotal("Current",2)
		if $ll(pintAccountType)>1 {
			do AddNode^COMTree(strParent,pstrLastNode_"!"_i,"","TOTAL "_$lg(pstrHeading,i),"NoImage","","",1,$lb(fltTotal("Current",1),fltTotal("Current",2)),1,"")
			do AddNode^COMTree(strParent,$extract(pstrLastNode,1,$length(pstrLastNode)-1)_"!"_i,"",$lg(pstrHeading,i),"NoImage","","",1,$lb(fltTotal("Current",1),fltTotal("Current",2)),1,"")
		}
	}
	do AddNode^COMTree(strParent,strLastNode_"!4","","","NoImage","","",1,$lg(lstColumnHeadings,1),1,"")
	do AddNode^COMTree(strParent,strLastNode_"!5","",strHeading,"NoImage","","",1,$lg(lstColumnHeadings,2),1,"")
	if strLabel="" {
		do AddNode^COMTree(strParent,pstrLastNode_"!3","","TOTAL "_strHeading_" ("_pstrLastNode_"!3)","NoImage","","",1,$lb(fltTotal("All",1),fltTotal("All",2)),1,"")
	} else {
		do AddNode^COMTree(strParent,pstrLastNode_"!3","",strLabel,"NoImage","","",1,$lb(fltTotal("All",1),fltTotal("All",2)),1,"")
	}
	quit
	
 
]]></Routine>
</Export>