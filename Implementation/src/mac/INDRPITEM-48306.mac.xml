<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INDRPITEM" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INDRPITEM
#include INConst
#include COMDebug
#include COMSYS   // SR14746
#include COMGridEdit31
	;-------------------------------------------------------------------------------
	; Description of Function :
	;		ITEM NAME FORM INART
	; 
	; Inputs : 
	;
	;
	; ByRef :
	;  YKEY					Locn/Item
	;  YFELD
	;  ^WWWDATEN
	;  
	; Accesses :
	;   ^INART
	;   ^INARTK
	;   ^INARTPACK
	;   ^INDRPNETCHANGE
	;   ^INWEINCYCLE
	; 
	; Updates :
	;   ^INDRPITEM
	;   ^INDRPITEMRUN
	;   ^INWEINCYCLE1
	;   
	; Returns :
	;
	;
	; History :
	; 21-SEP-2006 	FAN 	SR14746 Sales statistics incorrect
	; 29-May-2006	GRF		Doco
	; 29.04.2005	FIS		SR12200
	; 23.12.2003	FIS		24686
	; 21.01.2004	WEM		24945
	; 01.07.2001	DT		Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	QUIT:YKEY=""
	
	;+++++++++++++++++++++++++++++++++++++++
	; D217		$$$INVORGDRPOnlyForNetChange()
	;+++++++++++++++++++++++++++++++++++++++
	
	; Mark as "dirty
	IF $PIECE(YKEY,",",2)'="" IF $PIECE($GET(^INVORG(YM,YM,1)),Y,217)=1 SET ^INDRPNETCHANGE(YM,$PIECE(YKEY,",",2),1)=""  ;FIS;29.04.05;SR12200
	
	;TEXT
	;SET $PIECE(^INDRPITEM(YM,$PIECE(YKEY,",",1),$PIECE(YKEY,",",2),1),Y,40)=$PIECE($GET(^INART(YM,$PIECE(YKEY,",",2),1)),Y,1)  // SR14746
	SET $PIECE(YFELD,Y,40)=$PIECE($GET(^INART(YM,$PIECE(YKEY,",",2),1)),Y,1)  // SR14746
	
	
	;EINHEIT ;unit
	IF $PIECE(YFELD,Y,7)="" SET $PIECE(YFELD,Y,7)=$PIECE($GET(^INART(YM,$PIECE(YKEY,",",2),1)),Y,40)
	IF $PIECE(YFELD,Y,7)'="" DO                                                      ;EINHEIT ERLAUBT??? ;unit
	. IF $PIECE(YFELD,Y,7)'=$PIECE($GET(^INART(YM,$PIECE(YKEY,",",2),1)),Y,40) DO
	. . IF '$DATA(^INARTPACK(YM,$PIECE(YKEY,",",2),$PIECE(YFELD,Y,7))) DO
	. . . SET $PIECE(YFELD,Y,7)=$PIECE($GET(^INART(YM,$PIECE(YKEY,",",2),1)),Y,40)
	. . . SET $PIECE(^INDRPITEM(YM,$PIECE(YKEY,",",1),$PIECE(YKEY,",",2),1),Y,7)=$PIECE(YFELD,Y,7)
	
	;UPDATE CYCLE-COUNTING;23.12.03;FIS;24686
	IF $PIECE(YFELD,Y,88)'="" DO
	. IF $PIECE(YFELD,Y,89)="" SET $PIECE(YFELD,Y,89)=YBED
	. IF $PIECE($GET(^WWWDATEN(YM,+$HOROLOG,YUSER,YFORM,"D",2)),Y,88)'=$PIECE(YFELD,Y,88) DO
	. . NEW HIST,LFN,JAHR,YQ,ART,YOK,YFORM,YVOR,YFELD
	. . SET ART=$PIECE(YKEY,",",2)
	. . SET JAHR=$$^WWWYEAR(+$HOROLOG)
	. . SET YQ=0
	. . SET HIST=""
	. . FOR  SET HIST=$ORDER(^INWEINCYCLE1(YM,JAHR,HIST))  QUIT:HIST=""  DO  QUIT:YQ=1
	. . . SET LFN=""
	. . . FOR  SET LFN=$ORDER(^INWEINCYCLE1(YM,JAHR,HIST,LFN),-1)  QUIT:LFN=""  QUIT:LFN=0  DO  QUIT:YQ=1
	. . . . IF $DATA(^INWEINCYCLE1(YM,JAHR,HIST,LFN,ART)) DO
	. . . . . KILL ^INWEINCYCLE1(YM,JAHR,HIST,LFN,ART,1)
	. . . . . SET ^INWEINCYCLE1(YM,JAHR,HIST+1,LFN-1,ART,1)=""  ;LESS OPEN COUNTING, MORE FINISHED COUNTING
	. . . . . ;
	. . . . . SET YFELD=$GET(^INWEINCYCLE(YM,JAHR,1))
	. . . . . SET $PIECE(YFELD,Y,12)=$PIECE(YFELD,Y,12)+1         ;GEZÄHLTE
	. . . . . SET $PIECE(YFELD,Y,13)=$PIECE(YFELD,Y,13)-1         ;OFFENE
	. . . . . SET YOK=$$^WWWSPEI("INWEINCYCLE",JAHR,YFELD,1)
	. . . . . SET YQ=1
	
	IF +$PIECE($GET(^WWWDATEN(YM,+$HOROLOG,YUSER,YFORM,"M",1)),Y,90)=1 DO   ;WEM;24945;21.01.2004;DATEN AUS ARTIKELSTAMM KOPIEREN
	. NEW LF,SATZ
	. SET LF(1)=""
	. SET LF=""
	. SET $PIECE(YFELD,Y,90)=0
	. SET $PIECE(YFELD,Y,23)=$PIECE($GET(^INART(YM,$PIECE(YKEY,",",2),1)),Y,134)   ; MINDESTBESTAND ;safety level 
	. QUIT:$PIECE(YKEY,",",2)=""
	. SET LF=$ORDER(^INARTK(YM,$PIECE(YKEY,",",2),""))
	. QUIT:LF=""
	. SET LF(1)=$ORDER(^INARTK(YM,$PIECE(YKEY,",",2),LF))
	. QUIT:LF(1)'=""
	. SET SATZ=$GET(^INARTK(YM,$PIECE(YKEY,",",2),LF,1))
	. SET $PIECE(YFELD,Y,19)=LF                  ; LIEFERANT             ;supplier 
	. SET $PIECE(YFELD,Y,27)=$PIECE(SATZ,Y,17)   ; MINDESTBESTELLMENGE
	. SET $PIECE(YFELD,Y,28)=$PIECE(SATZ,Y,70)   ; MAXIMALE BESTELLMENGE ;ordering quantity 
	. SET $PIECE(YFELD,Y,79)=$PIECE(SATZ,Y,23)   ; LIEFERZEIT            ;purchasing lead time 
	. SET $PIECE(YFELD,Y,80)=+($PIECE(YFELD,Y,79)+$PIECE(YFELD,Y,78)+$PIECE(YFELD,Y,75)+$PIECE(YFELD,Y,72)+$PIECE(YFELD,Y,12))   ; GESAMTLAUFZEIT
	
	SET $PIECE(YFELD,Y,11)=$PIECE(YFELD,Y,12)  ;BESTELLZEIT
	;SET YOK=$$^WWWSPEI("INDRPITEM",YKEY,YFELD,1)     // SR14746
	SET strStatus=$$$Save("INDRPITEM",YKEY,YFELD,$$$YES) // SR14746
	
	;DRP PROZESS-SPEICHERUNGSDATEI
	IF '$DATA(^INDRPITEMRUN(YM,$piece(YKEY,",",1),$piece(YKEY,",",2),1)) SET ^(1)="" DO
	. DO ^WWWSSORT("INDRPITEMRUN",$piece(YKEY,",",1)_","_$piece(YKEY,",",2))
	
	quit
	
KILL ;LÖSCHEN PROZESSDATEI ;Delete 
	quit:$piece(YKEY,",",1)=""
	quit:$piece(YKEY,",",2)=""
	do ^WWWSKILL("INDRPITEMRUN",$piece(YKEY,",",1)_","_$piece(YKEY,",",2))
	quit
 
GetSafetyStock(pidItem,pidLocation) 
    ;-------------------------------------------------------------------------------
    ; Determine the safety stock at this location for this item.
    ;
    ; Params:
    ;
    ; Returns:
    ;
    ; History:
    ; 05-Sep-2005	shobby	SR12398: Created
    ;-------------------------------------------------------------------------------
	new fltSafetyStock,objINDRPITEM
	
	set fltSafetyStock=""
	
	if ($get(pidLocation)'="")&&($get(pidItem)'="") {
		set objINDRPITEM=$get(^INDRPITEM(YM,pidLocation,pidItem,1))
		set fltSafetyStock=$$$INDRPITEMSafetyStock(objINDRPITEM)
	}
	
	quit fltSafetyStock
	
OnBlur(pidLoc)
	;-------------------------------------------------------------------------------
	; Populate the planner field with combo elements
	; NOTE: This is called by both INDRPITEM and INDRPITEMS
	; 
	; Params:	pidLoc - WWW012 id selected
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 29-Nov-2006	RPW		SR15249: Call the new PopulateCombo tag on INDRPPLANNER
	; 04-Oct-2006	JW		SR15084: Created
	;-------------------------------------------------------------------------------
	do PopulateCombo^INDRPPLANNER($$$FldINDRPITEMPlanner,pidLoc) // SR15249
		
	quit
	
GetFieldFromDRP(pidLocation,pidItem,pfldField,pfldFieldS="")
	;-------------------------------------------------------------------------------
	; Get's a specific field from DRP (See GetDRPRecord)
	;
	; Params:
	; pidLocation: The id of the location
	; pidItem    : The id of the item
	; pfldField  : The field on INDRPITEM
	; pfldFieldS : The field on INDRPITEMS or blank if it's the same as INDRPITEM
	;
	; ByRefs:
	;
	; Returns:
	; The value of the field
	;
	; History:
	; 15-Jan-2007	RPW		SR15316: Quick fix for items without a category
	; 14-Dec-2006	Steve S	SR15316: Created (Copied from REQUISITIONVAR)
	;-------------------------------------------------------------------------------
	new objItem,idCategory,strField
	
	set strField=""
	if pfldFieldS="" set pfldFieldS=pfldField
	
	set objItem=$get(^INDRPITEM(YM,pidLocation,pidItem,1))
	if objItem'="" {
		set strField=$piece(objItem,Y,pfldField)
	} else {
		set idCategory=$$$INARTItemGroup($get(^INART(YM,pidItem,1)))
		
		if idCategory'="" {
			set objItem=$get(^INDRPITEMS(YM,pidLocation,idCategory,1))
			if objItem'="" {
				set strField=$piece(objItem,Y,pfldFieldS)
			}
		}
	}
 
	quit strField
 
GetDRPRecord(pidLocn,pidItem)
	;-------------------------------------------------------------------------------
	; Return the DRP record for the Locn/Item or, if that doesn't exist, for Locn/Group
	; This is a better alternative to the GetFieldFromDRP when getting multiple fields
	; *** EXCEPT ***
	;    where the field is in a different location in INDRPITEM to INDRPITEMS
	; 
	; History:
	; 31-May-2007	GRF		SR15513: activate with new name
	; 24-Jul-2006	GRF		Naked Reference; build ART2 in subroutine
	;-------------------------------------------------------------------------------
	new idItemGroup,objDRPRecord
	
	set objDRPRecord=""
	if $data(^INDRPITEM(YM,pidLocn,pidItem,1)) {
		set objDRPRecord = $get(^INDRPITEM(YM,pidLocn,pidItem,1))
	} else {
		set idItemGroup = $piece($get(^INART(YM,pidItem,1)),Y,30)
		if (idItemGroup'="") && $data(^INDRPITEMS(YM,pidLocn,idItemGroup,1)) set objDRPRecord = $get(^INDRPITEMS(YM,pidLocn,idItemGroup,1))
	}
	quit objDRPRecord
 
	
AssociatedValidation(pstrYFELD,pstrFieldValue,pidAssociated)
	;-------------------------------------------------------------------------------
	; Check if the field is valid based on another field.
	;	COMUnit uses (idItem,idUnit,numQty,idLocn)
	;
	; Inputs:
	; pstrYFELD     : The data for the form
	; pstrFieldValue: The value of the field we are in
	; pidAssociated : The associated field
	;
	; ByRef:
	;
	; Returns:
	; boolean - $$$YES is valid, $$$NO invalid
	;
	; History:
	; 26-Apr-2007	RPW		SRBR014310: Created
	;-------------------------------------------------------------------------------
 	new blnValid
 	
 	set blnValid=$$$YES
 	if pidAssociated=$$$FldINDRPITEMUnitOfMeasure {
	 	set blnValid=$$IsValidQtyUnit^COMUnit($$$KEY2($$GetFormData^COMUtilForm(YFORM,"P")),$piece(pstrYFELD,Y,pidAssociated),+pstrFieldValue,YLOCATION)
	}
		
	quit blnValid
]]></Routine>
</Export>