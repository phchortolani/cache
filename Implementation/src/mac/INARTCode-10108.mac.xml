<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INARTCode" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INARTCode
	
#include COMSYS
#include INConst
	
GetCode(pstrKey,&pidUnit)
	;----------------------------------------------------------------------------------------------
	; Get Item Code and Unit for an entry of a String
	;
	; Params:	pstrKey : string representing Item - e.g. Our Item No, Supplier's Item No, Barcode, etc
	; 
	; Returns:	idItem & Unit 
	;
	; History:
	; 15-Jun-2010	SCR		SR17371: Return Unit also
	; 28-Sep-2009	shobby	SR16708: Make the test on INART the last.
	; 19-May-2009	PPP		SR16549: Updated the list to include UPC code on Supplier & Item
	; 							(INARTUPC1, INARTUPC)
	; 06-May-2009	PPP		SR16521: Barcode Scanning to identify Item
	; 						1. if Relation class = INART check for matches in the follwing 	order
	;----------------------------------------------------------------------------------------------
	new idItem,idxKey,idSup,idUPC,objItem,objSup,objUPC
	
	set idItem  = pstrKey  ; Initially assume we are given our Item Number
	; FIXME : If that is most likely, why not check that first and bypass the other checks?
	set pidUnit = ""								                    ; SR17371:	
	
	if $get(pstrKey)'="" {	
		set idxKey = $$$Index(pstrKey)
 		
		if $order(^INARTPACKs(0,1,idxKey,""))'="" {            			; UPC Code INARTPACK D3
			set idItem  = $order(^INARTPACKs(0,1,idxKey,""))
			set pidUnit = $order(^INARTPACKs(0,1,idxKey,idItem,"")) 	; SR17371: Use the Outer unit

		} elseif $order(^INARTKs(0,2,idxKey,""))'="" {         			; Suppliers UPC Code INARTK D73
			set idItem = $order(^INARTKs(0,2,idxKey,""))
			set idSup  = $order(^INARTKs(0,2,idxKey,idItem,"")) 		; SR17371: Start
			if idSup'="" {
				set objSup  = $get(^INARTK(0,idItem,idSup,1))
				set pidUnit = $$$INARTKSupplierUPCCode(objSup)			; SR17371: use supplier unit
			} ; FIXME : $$$INARTKSupplierUPCCode is not an "EINHEIT" relation
		
		} elseif $order(^INARTUPCs(0,1,idxKey,""))'="" {      			; UPC Code for Supplier INARTUPC1 P2
			set idItem = $order(^INARTUPCs(0,1,idxKey,""))
			set idSup  = $order(^INARTUPCs(0,1,idxKey,idItem,""))		; SR17371: Start
			if idSup'="" {
				set idUPC = $order(^INARTUPCs(0,1,idxKey,idItem,idSup,""))
				if idUPC'="" {
					set objUPC  = $get(^INARTUPC(0,idItem,idSup,idUPC,1))
					set pidUnit = $$$INARTUPCPackingUnit(objUPC)		; Use suppliers upc unit
				}
				if pidUnit="" {
					set objSup  = $get(^INARTK(0,idItem,idSup,1))
					set pidUnit = $$$INARTKSupplierUPCCode(objSup)		; SR17371: else use suppliers unit 
				} ; FIXME : $$$INARTKSupplierUPCCode is not an "EINHEIT" relation
			}
			
		} elseif $order(^INARTUPC1s(0,1,idxKey,""))'="" {      		 	; UPC Code Item INARTUPC P2
			set idItem = $order(^INARTUPC1s(0,1,idxKey,""))
			set idUPC  = $order(^INARTUPC1s(0,1,idxKey,idItem,""))		; SR17371: Start
			if idUPC'="" {
				set objUPC  = $get(^INARTUPC1(0,idItem,idUPC,1))
				set pidUnit = $$$INARTUPC1PackingUnit(objUPC)			; SR17371: use item upc
			}
		
		} elseif ($order(^INARTs(0,3,idxKey,""))'="") {                 ; UPC Code INART D2
			set idItem = $order(^INARTs(0,3,idxKey,""))
			
		} elseif $data(^INART(0,pstrKey)) {                             ; Item Code INART P1
			set idItem = pstrKey  ; FIXME : This was set in the first lines - redundant
		}
	 		
	}
	if (pidUnit="") && (idItem'="") {							; SR17371: Start
		set objItem = $get(^INART(0,idItem,1))
		set pidUnit = $$$INARTUnitofMeasure(objItem)			; SR17371: Default to item unit 
	}
	quit idItem
	
]]></Routine>
</Export>