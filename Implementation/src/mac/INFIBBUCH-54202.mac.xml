<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INFIBBUCH" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INFIBBUCH(BUCHUNG,BETRIEB,BUCHART,KEY,TYPE)
	
#include COMSYS
#include INConst

#define enumNoGL		0
#define enumAbacusGL	1
#define enumDATEVGL		2
#define enumSAPGL		3
#define enumDiscGL		4
#define enumSIMBAGL		5
#define enumFIBUNetGL	7
	;***************************************
	; DEPRECATED ROUTINES - still called in a few places
	; INFINInterface replaces
	;***************************************


	;-------------------------------------------------------------------------------
	; Description of Function :
	;		AUTOMATISCHE BUCHUNG
	;	OK=$$^INFIBBUCH(BUCHUNG)
	;
	; INPUTS : BUCHUNG, BETRIEB,  BUCHART,    KEY,  TYPE
	;          Record,  Location, Record Type
	;	BUCHART	1	1. Buchung SOLL			debit entries     (is reservation)
	;	        2	2. Buchung SOLL
	;	        3	1. BUCHUNG HABEN		credit entries    (have reservation)
	;	        4	2. BUCHUNG HABEN
	;	        ""	ALLES SOLL UND HABEN	all debits and credits
	;	KEY		VORDATEI                    Before File (boolean based on return from previous INFIBBUCH calls?)
	;	TYPE	1 = EINGANGSRECHNUNG		Purchase Invoice
	;			2 = AUSGANGSRECHNUNG		Sales Invoice
	;			3 = BESTANDSVERÄNDERUNG		Inventory Alteration
	;			4                           Production
	;
	; ByRef :
	;
	;
	; Returns :
	;	YRETURN=0 FEHLER				Error
	;	YRETURN=1 OK
	;
	; Updates :
	;				^INFIBBUCHPROT		(Create)	if INFIBPAR D46 set
	; 				^INFIBBUCH			(Create)
	;
	; History :
	; 04-Dec-2009	GRF		SR16871: use enumAttachedGL in preparation for being
	; 							able to inherit; extend enum*GL macros
	; 05-Jul-2007	GRF		SR15560: Use Macros
	; 27-Jul-2005	GRF		SR13024: Split Manufacturing Order REC amounts
	; 20-Jul-2005	GRF		Doco; Use || instead of !
	; 10-May-2005	GRF		SR12335:  Checkbox is too dangerous - use DCM to block
	; 							transmissions to finance.
	; 14.07.2000	DT  	Created
	;-------------------------------------------------------------------------------
	;
	;  BUCHUNG: (Reservation or Booking record passed to processing routines.
	;         1 = Receiving Cost Centre
	;         2 = datum $H / date
	;         3 = betrag / amount
	;         4 = sollkonto  /  credit account
	;         5 = habenkonto  / debit account
	;         6 = steuerkz  / tax
	;         7 = belegnr.  / ref
	;         8 = TEXT  / text ;Text text 
	;         9 = kennzeichen warenumlagerung
	;             flag for stock moving 0=RECEIVE 1=SHIP 2=STOCK TRANSFER 3=ADJUSTMENT
	;         10 = gebucht / booked ;posted 
	;         11 = n.a.
	;         12 = Issuing Cost Centre     ; Kostenstelle / cost center
	;         13 = skontotage / discount days
	;         14 = skonto% / discount %
	;         15 = netto / net days
	;         16 = betrieb / from location
	;         17 = warengruppe  / item group ;material group 
	;         18 = steuerid / tax flag
	;         19 = n.a.
	;         20 = n.a.
	;         21 = n.a.
	;         22 = text2
	;         23 = rechnungsnummerdeslieferanten / invoiceno. of supplier
	;         24 = zahlungsweg / method of payment
	;         25 = belegart / kind of document
	;         26 = n.a.
	;         27 = auftrag / order
	;         28 = position / line item
	;         29 = Artikelnummer (Artikelteil) / Item (Component Item)
	;         30 = von lagerplatz / from stock location
	;         31 = nach lagerplatz / to stock location ;within 
	;         32 = menge / qty ;quantity 
	;         33 = nach betrieb / to warehouse location ;within 
	;         34 = key zahlungskondition / flag payment condition
	;         35 = Produktkostenkonto / Cost Of Goods Sold account ;Cost Account payment 
	;         40 = Rechnungsbetrieb / Invoice Location ;Invoice Location Location
	;         42 = Artikelnummer Oberteil / Parent Item
	;         45 = Buchungsart / transaction type
	;         47 = vordatei / transaction predefined data
	;         48 = vorgangsnummer / posting no. (same as key)
	;         50 = Buchungscharakteristik / characteristic type
	;         55 = Valuta Datum
	;         56   Materials Amount
	;         57   Labour Amount
	;         58   Material Overhead Amount
	;         59   Service Burden Amount
	;   70 - 103 = Buchungsschlüssel / Characteristic Keys
	;   	 104 = Discount Term ID (From FINSysTerm, INKOND)
	;-------------------------------------------------------------------------------
	NEW BTR1,DAT,enumAttachedGL,LOC,MAN,VOR,YFPARA,YRETURN

	;+++++++++++++++++++++++++++++++++++++++
	;	YFPARA		objINFIBPAR		General Ledger Parameters (Site Locn)
	;+++++++++++++++++++++++++++++++++++++++
	
	SET YRETURN=""
	IF $GET(BUCHUNG)="" QUIT YRETURN
	
	SET BUCHART=$GET(BUCHART)
	SET TYPE   =$GET(TYPE)
	SET KEY    =$GET(KEY)
	
	;>>>>
	; Addition and correction to code ;GRF;2005-03-18;Codesplit
	;set:$piece(BUCHUNG,Y,41)'="" BTR1=$piece(BUCHUNG,Y,41)                   ;PP;2004-09-07; Set Locn to Cost Centre
	;if $get(BTR1)="" set:$piece(BUCHUNG,Y,40)'="" BTR1=$piece(BUCHUNG,Y,40)  ;PP;2004-09-07; Set Locn to Invoice Locn
	;if $get(BTR1)="" SET BTR1=$GET(BETRIEB)
	;SET BTR1=$GET(BETRIEB)
	;------
	set BTR1=$piece(BUCHUNG,Y,41)             ;PP;2004-09-07; Set Locn to Cost Centre
	if BTR1="" set BTR1=$piece(BUCHUNG,Y,40)  ;PP;2004-09-07; Set Locn to Invoice Locn
	if BTR1="" SET BTR1=$GET(BETRIEB)
	;<<<<
	IF BTR1="" SET BTR1=$ORDER(^INFIBPAR(0,YM,""))
	IF BTR1="" SET BTR1=1
	;IF $PIECE(BUCHUNG,Y,12)'="" IF $PIECE(BUCHUNG,Y,40)'="" IF $PIECE($GET(^INFIBPAR(0,YM,$PIECE(BUCHUNG,Y,40),1)),Y,15)=4 SET BTR1=$PIECE(BUCHUNG,Y,40)  ;INVOICE LOCATION IF COST CENTER ;DISCLINC;26405;21.09.04
	
	; ********************************************************
	SET YFPARA = $GET(^INFIBPAR(0,YM,BTR1,1))
	set enumAttachedGL = $$$INFIBPARAttachedGL(YFPARA)   ; SR16871
	; ********************************************************  ; FIXME : May have to inherit AttachedGL
	
	IF $PIECE(YFPARA,Y,3)'="" SET BTR1=$PIECE(YFPARA,Y,3)
	;SET $PIECE(BUCHUNG,Y,16)=BTR1
	if +enumAttachedGL=$$$enumNoGL quit YRETURN   ; no Attached GL so don't need to process       ; ***  EARLY EXIT ***
	
	
	;-------------------------------------------------------------------------------
	
	
	;IF TYPE=1 IF $PIECE(YFPARA,Y,21)'=1 QUIT YRETURN  ;KEINE BUCHUNG VON EINGANGSRECHNUNGEN ;no    ;SR12335 - commented
	;IF TYPE=2 IF +$PIECE(YFPARA,Y,22)=0 QUIT YRETURN  ;KEINE BUCHUNG VON AUSGANGSRECHNUNGEN ;no 
	;IF TYPE=3 IF $PIECE(YFPARA,Y,32)'=1 QUIT YRETURN  ;KEINE BUCHUNG VON BESTANDSVERÄNDERUNGEN ;no 
	
	; Posting Rules
	;---------------------------------------
	
	; Note : Should this be activated? <GRF> Not defined in ^WWW101("BUCHUNGSART") : <NO>
	;IF TYPE=4 IF $PIECE(YFPARA,Y,32)'=1 QUIT YRETURN  ;KEINE BUCHUNG VON PRODUKTIONSKOSTEN ;no 
	IF TYPE'="" IF $DATA(^INFIBBUCHPARA(0,YM,BTR1,TYPE)) DO REGEL QUIT YRETURN  ;BUCHUNGEN AUFTEILEN
	DO BUCH
	QUIT YRETURN
	
BUCH
	;-------------------------------------------------------------------------------
	; BUCHUNG DURCHFÜHREN ;enforce 
	; 
	; Called By : ^INFIBBUCH, REGEL^INFIBBUCH, REPROCESS^INFIBBUCHCODE
	; 
	; ByRef: enumAttachedGL, YFPARA
	; 
	; History:
	; 04-Dec-2009	GRF		SR16871: $$$INFIBPARCostCenters deprecated
	;-------------------------------------------------------------------------------
	;IF +$$$INFIBPARCostCenters(YFPARA)=0 SET $PIECE(BUCHUNG,Y,12)=""  ;KEINE KOSTENSTELLE ;no cost centre 
 
	DO
	. NEW WAGR
	. SET WAGR = ""
	. IF $PIECE(BUCHUNG,Y,29)'="" set WAGR = $$$INARTItemGroup($GET(^INART(YM,$PIECE(BUCHUNG,Y,29),1)))  ;WARENGRUPPE
	. IF WAGR=""                  set WAGR = $$$INVORGDefaultItemGroup($GET(^INVORG(YM,YM,1)))
	. ;
	.;IF $PIECE(BUCHUNG,Y,5)="ERLOESE" SET $PIECE(BUCHUNG,Y,5) = $PIECE(YFPARA,Y,12)   ;SONSTIGE ERLÖSE
	. IF $PIECE(BUCHUNG,Y,5)="ERLOESE" SET $PIECE(BUCHUNG,Y,5) = $PIECE(YFPARA,Y,33)   ;VERKAUFSERLÖSE
	. IF $PIECE(BUCHUNG,Y,4)="AUFWAND" SET $PIECE(BUCHUNG,Y,4) = $PIECE(YFPARA,Y,11)   ;SONSTIGE VERBINDLICHKEITSKONTO
	. IF $PIECE(BUCHUNG,Y,4)="ERLOESE" SET $PIECE(BUCHUNG,Y,4) = $PIECE(YFPARA,Y,33)   ;VERKAUFSERLÖSE;FIS;12.06.03;23719;FOLGEBUCHUNGEN
	. IF $PIECE(BUCHUNG,Y,5)="AUFWAND" SET $PIECE(BUCHUNG,Y,5) = $PIECE(YFPARA,Y,11)   ;SONSTIGE VERBINDLICHKEITSKONTO;FIS;12.06.03;23719;FOLGEBUCHUNGEN
	. IF $PIECE(BUCHUNG,Y,35)=""       SET $PIECE(BUCHUNG,Y,35)= $PIECE(YFPARA,Y,34)   ;PRODUKTKOSTENKONTO;FIS;28.06.04;25830
	. SET $PIECE(BUCHUNG,Y,5)  = $$EXCHANGE($PIECE(BUCHUNG,Y,5),BTR1,WAGR)   ;VERKAUFSERLÖSE
	. SET $PIECE(BUCHUNG,Y,4)  = $$EXCHANGE($PIECE(BUCHUNG,Y,4),BTR1,WAGR)   ;SONSTIGE VERBINDLICHKEITSKONTO
	. SET $PIECE(BUCHUNG,Y,35) = $$EXCHANGE($PIECE(BUCHUNG,Y,35),BTR1,WAGR)  ;COST OF GOODS SOLD ACCOUNT;FIS;28.06.04;25830
	
	;*****************  SETZEN BUCHUNGSSCHLÜSSEL, CHARACTERISTIC MATCHING -> NUR DISCLINC
	; NOTE : If any of the required characteristics are missing HEALTCHCHECK^INFIBBUCHCODE
	;        will preserve BUCHUNG in INFIBBUBCHOLD and clear BUCHUNG.
	;*************************************************************************************
	IF enumAttachedGL=$$$enumDiscGL DO ^INFIBBUCHCODE QUIT:BUCHUNG=""      ; SR15560         ; ***  EARLY EXIT ***
	
	DO
	. SET DAT=$PIECE(BUCHUNG,Y,2)  ;BUCHUNGSDATUM
	. IF DAT="" SET DAT=+$HOROLOG
	. SET VOR=$$^WWWNEXT("INFIBBUCH")  ;BUCHUNGSNUMMER
	. ;	D46		$$$INFIBPARDatenexportprotokollieren()  
	. IF $PIECE(YFPARA,Y,46)=$$$YES DO     ;FIBU PROTOKOLLDATEI ANLEGEN;14.03.05;27471
	. . SET $PIECE(BUCHUNG,Y,48)=VOR
	. . SET ^INFIBBUCHPROT(YM,VOR,1)=BTR1_Y_DAT_Y_$PIECE($HOROLOG,",",2)_Y_YBED
	. . DO ^WWWSSORT("INFIBBUCHPROT",VOR)
	. ;
	. ;-------------------------------------
	. SET ^INFIBBUCH(YM,BTR1,DAT,VOR,1)=BUCHUNG
	. ;-------------------------------------
	. SET YRETURN=""
	. ;
	. ;		D15		$$$INFIBPARAttachedGL()
	. IF (+$PIECE(BUCHUNG,Y,3)'=0)||($PIECE(YFPARA,Y,39)=$$$YES) IF enumAttachedGL=$$$enumAbacusGL DO
	. . SET YRETURN=$$^INFIBBUCH1(BUCHUNG,YFPARA,BUCHART,KEY)  ;ABACUS
	. ;
	. IF (+$PIECE(BUCHUNG,Y,3)'=0)||($PIECE(YFPARA,Y,39)=$$$YES) IF enumAttachedGL=$$$enumDATEVGL DO
	. . SET YRETURN=$$^INFIBBUCH2(BUCHUNG,YFPARA,BUCHART,KEY)
	. ;
	. ;-------------------------------------
	. ;		D39		$$$INFIBPARPostingOfValue0()
	. ;
	. IF (+$PIECE(BUCHUNG,Y,3)'=0)||($PIECE(YFPARA,Y,39)=$$$YES)||(TYPE=3)||(TYPE=4) IF enumAttachedGL=$$$enumDiscGL DO  ; <<<
	. . SET YRETURN=$$^INFIBBUCH4(BUCHUNG,YFPARA,BUCHART,KEY,TYPE)  ;DISC
	. ;-------------------------------------
	. ;
	. ;
	. IF (+$PIECE(BUCHUNG,Y,3)'=0)||($PIECE(YFPARA,Y,39)=$$$YES) IF enumAttachedGL=$$$enumSIMBAGL DO 
	. . SET YRETURN=$$^INFIBBUCH5(BUCHUNG,YFPARA,BUCHART,KEY)  ;SIMBA
	. ;
	. IF (+$PIECE(BUCHUNG,Y,3)'=0)||($PIECE(YFPARA,Y,39)=$$$YES) IF enumAttachedGL=$$$enumFIBUNetGL DO
	. . SET YRETURN=$$^INFIBBUCH7(BUCHUNG,YFPARA,BUCHART,KEY)  ;FIBUNET
	
	QUIT
	
	
REGEL ;FIS;05.06.03;23710;BEARBEITEN BUCHUNGSREGELN
	;-------------------------------------------------------------------------------
	; If special posting rules apply, use the values from that record instead.
	; This can represent account overrides for a particular location or some
	; additional processing code.
	; 
	; FIXME : ? BUCHUNG is not preserved by BUCHUNGX - should it be newed after
	; 		     being set (requires a DO block) or is BUCHUNGX unnecessary? <GRF>
	; History :
	; 31-Mar-2005	GRF		Correction to BUCHUNGX in new command
	;-------------------------------------------------------------------------------
	NEW LFN,REGEL,KONTOS,KONTOH,WAGR,EXEC,BUCHUNGX
	
	SET BUCHUNGX=BUCHUNG
	SET LFN=""
	FOR  SET LFN=$ORDER(^INFIBBUCHPARA(0,YM,BTR1,TYPE,LFN)) QUIT:LFN=""  DO
	. SET REGEL=$GET(^INFIBBUCHPARA(0,YM,BTR1,TYPE,LFN,1))
	. ;
	. ;TAUSCHEN KONTO ;barter acct. 
	. SET BUCHUNG = BUCHUNGX 
	. SET KONTOS  = $PIECE(REGEL,Y,2)           ; Debit Account
	. SET KONTOH  = $PIECE(REGEL,Y,3)           ; Credit Account
	. SET WAGR    = $PIECE(REGEL,Y,17)          ; WARENGRUPPE             FIXME : only 4 fields in INFIBBUCHPARA <GRF>
	. IF WAGR="" SET WAGR=$PIECE(^INVORG(YM,YM,1),Y,13)  ;DFLT.
	. IF WAGR="" SET WAGR="0"
	. IF KONTOS'="" SET $PIECE(BUCHUNG,Y,4)=KONTOS  ;SOLL KONTO ;acct. 
	. IF KONTOH'="" SET $PIECE(BUCHUNG,Y,5)=KONTOH  ;HABEN KONTO ;have got acct. 
	. IF $PIECE(REGEL,Y,1)'="" SET $PIECE(BUCHUNG,Y,8)=$PIECE(REGEL,Y,1)  ;BESCHREIBUNG ;description 
	. ;
	. ;AUSFÜHREN EXECUTE ;implement EXECUTE 
	. IF $PIECE(REGEL,Y,4)'="" XECUTE $PIECE(REGEL,Y,4)  ;MANUELLER EXECUTE             ; *** EXECUTE ***
	. DO BUCH
	
	QUIT
	
	
EXCHANGE(KONTO,LOCATION,ITEMGROUP) ;EINSETZTEN BETRIEB/WARENGRUPPE IN KONTO;FIS;12.06.03;23719#
	;-------------------------------------------------------------------------------
	; 1. Find category for item group - working through group hierarchy if necessary
	;    This is based on WWWSTRUKTUR which defines the delimiter between group
	;    levels (default is ".")
	;    Thus can have "A-BR-1" defaulting to "A-BR" and then to "A" with a dash
	;    as the delimiter.  This check stops when a category value is found.
	; 2. Substitute finance codes for any {LOCATION} or {GROUP} profile references
	;    in the account number.
	;
	; NOTE: The INARTGROUP data structure should no longer be used.
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 29-Nov-2006	JW		BR014285: Item group change
	;-------------------------------------------------------------------------------
	new idGroup,idCat
	
	SET KONTO     = $GET(KONTO)
	SET LOCATION  = $GET(LOCATION)
	SET ITEMGROUP = $GET(ITEMGROUP)
	
	quit:KONTO="" ""
	
	if $$$INFIBPARAttachedGL($GET(YFPARA))=4 {
		
		// Loop through self and hierarchy until find a category match
		
		set idGroup = ITEMGROUP
		while(idGroup'="") {
			set idCat = $$$INARTGROUPCategory($get(^INARTGROUP(YM,idGroup,1)))
			if idCat'="" {
				set ITEMGROUP = idCat		// Found a group with a category. So stop.
				quit
			} else {
				set idGroup = $$$INItemGroupParentGroup($get(^INItemGroup(YM,idGroup,1)))		// Get parent
			}
		}
	}
	
	/*
	IF ITEMGROUP'="" IF $$$INFIBPARAttachedGL($GET(YFPARA))=4 DO  ;GROUP TO CATEGORY FOR DISC
	. NEW TRENN,STRUCT,YQ,ITEMGROUP1,YI
	. IF $DATA(^INARTGROUP(YM,ITEMGROUP,1)) IF $PIECE(^INARTGROUP(YM,ITEMGROUP,1),Y,1)'="" SET ITEMGROUP=$PIECE(^INARTGROUP(YM,ITEMGROUP,1),Y,1) QUIT
	. SET TRENN="."  ;DFLT.  :--> AB HIER NEU: GGF. VOR PROGRAMMSTAND AUSSCHALTEN ;Confirm. here is pre- eliminate 
	. SET STRUCT=""
	. SET NR=""
	. set idxYM=$$$Index(YM)
	. FOR  SET NR=$ORDER(^WWWSTRUKTURs(0,1,idxYM,"INPARA",YM,NR)) QUIT:NR=""  DO  QUIT:STRUCT'=""
	. . IF $TRANSLATE($PIECE($GET(^WWWSTRUKTUR(0,YM,NR,1)),Y,2),"""")="WARENGRUPPE,SPRACHE" SET STRUCT=+$PIECE($GET(^WWWSTRUKTUR(0,YM,NR,1)),Y,3)
	. . IF STRUCT'="" SET TRENN=$EXTRACT($PIECE($GET(^WWW100(0,"STRUKTUR",SPRACHE,STRUCT,1)),Y,1),3)  ;XX.XX.XX
	. ;
	. SET YQ=0
	. FOR YI=$LENGTH(ITEMGROUP,TRENN)-1:-1:1  QUIT:YQ=1  DO
	. . SET ITEMGROUP1=$PIECE(ITEMGROUP,TRENN,1,YI)
	. . IF $DATA(^INARTGROUP(YM,ITEMGROUP1,1))       IF $PIECE(^INARTGROUP(YM,ITEMGROUP1,1),Y,1)'="" SET ITEMGROUP=$PIECE(^INARTGROUP(YM,ITEMGROUP1,1),Y,1) SET YQ=1 QUIT  ;Z.B. '1.1'  ;e.g. 
	. . IF $DATA(^INARTGROUP(YM,ITEMGROUP1_TRENN,1)) IF $PIECE(^INARTGROUP(YM,ITEMGROUP1_TRENN,1),Y,1)'="" SET ITEMGROUP=$PIECE(^INARTGROUP(YM,ITEMGROUP1_TRENN,1),Y,1) SET YQ=1 QUIT  ;Z.B. '1.1.' ;e.g. 
	*/
	
	IF $FIND(KONTO,"GROUP")    SET KONTO=$TRANSLATE($PIECE(KONTO,"GROUP",1)_ITEMGROUP_$PIECE(KONTO,"GROUP",2,9),"{}")
	IF $FIND(KONTO,"GRUPPE")   SET KONTO=$TRANSLATE($PIECE(KONTO,"GRUPPE",1)_ITEMGROUP_$PIECE(KONTO,"GRUPPE",2,9),"{}")
	IF $FIND(KONTO,"LOCATION") SET KONTO=$TRANSLATE($PIECE(KONTO,"LOCATION",1)_LOCATION_$PIECE(KONTO,"LOCATION",2,9),"{}")
	IF $FIND(KONTO,"BETRIEB")  SET KONTO=$TRANSLATE($PIECE(KONTO,"BETRIEB",1)_LOCATION_$PIECE(KONTO,"BETRIEB",2,9),"{}")
	
	QUIT KONTO
	
]]></Routine>
</Export>