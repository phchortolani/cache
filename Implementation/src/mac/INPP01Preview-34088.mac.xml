<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INPP01Preview" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INPP01Preview
	
#include COMConst
#include WWWConst
#include COMSYS
#include COMView
#include INConst
	
IsDisabled(pintButton,YKEY,YFELD)
	;-------------------------------------------------------------------------------
	; Check whether buttons should be disabled.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 03-Sep-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new enmStatus,strStatus
	
	set strStatus = $$$OK
	
	if '$$$NoKey(YKEY) {
		set enmStatus = $$GetStatus(YKEY)
		if pintButton=2 {		; Post
			if '$data(^INPP01PreviewLine(0,YKEY)) {
				set strStatus = $$$MakeStatus("IN01127")   ; "Record has no lines."
			}
		
		} elseif pintButton=1 { ; Generate
			if enmStatus=$$$EnumCOMSYSSTATUSUsed set strStatus = $$$MakeStatus("IN00377")
		}     ; "Record already processed"
	}
	$$$YQHandler(strStatus) 	
	quit strStatus
	
	
GetManualPackCost(pidItem,pidLocn)
	;-------------------------------------------------------------------------------
	; Get ManualPackCost
	; 
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 02-Sep-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new objINARTLOCPAR,objItem,fltCost
	
	set objINARTLOCPAR = $get(^INARTLOCPAR(0,pidItem,pidLocn,1))
	set fltCost = $$$INARTLOCPARManualPackCost(objINARTLOCPAR)
	if fltCost="" {
		set objItem = $get(^INART(0,pidItem,1))
		set fltCost  = $$$INARTManualPackCost(objItem)
	}
	quit fltCost	
	
	
GetSystemPackCost(pidItem,pidUnit,pidLocn)
	;-------------------------------------------------------------------------------
	; Get the System Pack Cost  (Calculated field on INItemPrice - SystemPackCost) 
	;
	; Called By: GetSystemPackCost^INItemPriceUtils
	;
	; Inputs:pidItem,pidUnit
	;
	; Returns: %Float
	;
	; History:
	; 28-Oct-2009	GRF		SR16871: INItemCost based on INAvgCost with cost centre
	; 							replaces INARTKOST based on INARTAVG; new parameter
	; 31-Aug-2009	PPP		SR16842: Created
	;-------------------------------------------------------------------------------
	new fltConv,idPackUnit,objItem
	
	//set idPackUnit = $$GetPackUOM^INART(pidItem)
	set objItem = $get(^INART(0,pidItem,1))
	set fltConv = $$GetUOMConvBetweenUnits^INUOMConversion(pidItem,$$$INARTUnitofMeasure(objItem),pidUnit)
	
	;quit $$GetCost^INARTKOST(pidItem)*fltConv   ; SR16871
	quit $$GetCost^INItemCost(pidItem,pidLocn)*fltConv
	
	
GetLocationType(YKEY,YFELD)
	;-------------------------------------------------------------------------------
	; Location Type
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 02-Sep-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new idLocn,idLocnType
	
	set idLocnType = ""
	set idLocn     = $$$INPP01PreviewLocation(YFELD)
	if idLocn'="" {
		set idLocnType = $$$WWW0121LocationType($get(^WWW0121(0,0,idLocn,1)))
	}
	quit idLocnType
	
	
OnBlur(YLFN,pYKEY,&YFELD)
	;-------------------------------------------------------------------------------
	; 
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 12-Apr-2010	GRF		SR17177: GRID Macros
	; 03-Nov-2009	GRF		SR16871: INAvgCost replaces INARTAVG
	; 02-Sep-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new arrGrid,curUnitCost,idCostCentre,idLine,FELD,objLine,objPreview,YKEY
	
	if YLFN=3 {
		$$$GRIDGetContents(.arrGrid)
		
		set objPreview = $$$GRIDYFELDContainer                            ; SR16871 - 3 lines
		if objPreview="" set objPreview = $get(^INPP01Preview(0,pYKEY,1))
		set idCostCentre = $$GetCostCentre^INCostCentre($$$INPP01PreviewLocation(objPreview))
		
		set idLine = ""
		for {
			set idLine = $order(arrGrid(pYKEY,idLine))
			quit:idLine=""
		
			set objLine = arrGrid(pYKEY,idLine)
			set YKEY    = pYKEY_$$$COMMA_idLine
			
		;	set $$$INPP01PreviewLineSystemPackCost(objLine) = $$GetCostAsAtDateAndTime^INARTAVG($$$INPP01PreviewLineItem(objLine),$$$INPP01PreviewCostCaptureDate(YFELD),$$$INPP01PreviewCostCaptureTime(YFELD))*$$$INPP01PreviewLinePackConversion(objLine)
			set curUnitCost  = $$GetCostAtTimeForCC^INAvgCost($$$INPP01PreviewLineItem(objLine),idCostCentre,$$$INPP01PreviewCostCaptureDate(YFELD),$$$INPP01PreviewCostCaptureTime(YFELD))
			set $$$INPP01PreviewLineSystemPackCost(objLine) = curUnitCost * $$$INPP01PreviewLinePackConversion(objLine)  ; SR16871 ^^^ 3 lines
			do CheckRules^WWWEVENT(YFORM,.objLine,1)
			set arrGrid(pYKEY,idLine) = objLine
		}
		$$$GRIDSetContents(.arrGrid)
	}
	quit
	
	
OnAfterDataFields(YKEY)
	;-------------------------------------------------------------------------------
	; On After Data Fields load edit grid
	;
	; Params:
	; YKEY - Price Plan Generation Rule Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 05-May-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
 	;if YSEITE=1 {
		do LoadGrid(YKEY,"INPP01Preview")
 	;}
	
	quit
	
LoadGrid(YKEY,pstrForm)
	;-------------------------------------------------------------------------------
	; Load Edit Grid
	;
	; Params:
	; YKEY - Price Plan Generation Rule Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 13-Jul-2009	shobby	SR16511: Call to LoadCOMViewGrid requires YKEY
	; 05-May-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new YFORM,YAUSWAHL,YFELD
	
	set YFORM = pstrForm
	set YFELD = ""
	
	$$$ClearExternalFilter(YFORM)
	if '$$$NoKey(YKEY) {
		do AddExternalFilter^COMViewFilter(YFORM,"D1","",$$$EnumCOMVIEWCOMPARATORStartsWith,$$$YES)
		do AddExternalFilter^COMViewFilter(YFORM,"D1.D407","",$$$EnumCOMVIEWCOMPARATORStartsWith,$$$YES)
		do LoadGrid2(YFORM,YKEY)
		do LoadCOMViewGrid^COMViewFilter(YFORM,YFORM_"Line"_",,"_YKEY,1) // SR15435 ;16511
	} 
	quit
	
	
LoadGrid2(pstrForm,pYKEY)
	;-------------------------------------------------------------------------------
	; Prepare the grid and show
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 28-Aug-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new YFORM,YKEY,YAUSWAHL,YFELD
	
	kill ^CacheTempLocked(YUSER)
	do ClearOld^WWWMultiLock(YUSER)
		
	set YFORM = pstrForm_"Line"
	set YFELD = ""
	set YKEY  = pYKEY
	
	if $get(YVOR)="" set YVOR = $get(^WWW120(0,pstrForm,1))
		
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)          = $$$YES
	;set $$$COMGridEditParameterMaximumHeight(YAUSWAHL)      = 400
	set $$$COMGridEditParameterGridName(YAUSWAHL)            = YFORM
	set $$$COMGridEditParameterEnabled(YAUSWAHL)             = ($$$WWW120AuthorizationToModifyData(YVOR)'=$$$EnumReadOnly)
	set $$$COMGridEditParameterContainer(YAUSWAHL)           = pstrForm
	set $$$COMGridEditParameterDontUpdateContainer(YAUSWAHL) = $$$YES
	set $$$COMGridEditParameterCOMViewGrid(YAUSWAHL)         = $$$YES // SRBR014416
	
	do ^COMGridEdit31
	quit
	
	
Generate(YKEY)
	;-------------------------------------------------------------------------------
	;
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 28-Aug-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new loop,strStatus
	
 	set strStatus = $$$OK
	
	;if $$$ISOK(strStatus) set strStatus = $$Validate^INPP01GenRuleLine(pidRuleHeader)
 	if $$$ISOK(strStatus) set strStatus = $$SetStatus(YKEY,$$$EnumCOMSYSSTATUSBuilding)
 	;if $$$ISOK(strStatus) set strStatus = $$CreatePreview(YKEY)
 	if $$$ISOK(strStatus) job CreatePreview^INPP01Preview(YKEY)
	
 	for loop=1:1:100 {
	 	hang .1   ; wait for a while to see if the task is finished.
	 	quit:$$$INPP01PreviewStatus($get(^INPP01Preview(0,YKEY,1)))'=$$$EnumCOMSYSSTATUSBuilding
 	}
 	;if $$$ISOK(strStatus) set strStatus=$$SetStatus(pidRuleHeader,$$$EnumCOMSYSSTATUSGenerated)
	;if $$$ISOK(strStatus) do ViewPreview(pidRuleHeader)
	if $$$ISERR(strStatus) {
		$$$AlertInScript(strStatus)
	}
	do GoToForm^COMUtilForm("INPP01Preview",YKEY)
	quit strStatus
	
	
CreatePreview(pidPreview)
	;-------------------------------------------------------------------------------
	; Creates the lines in the grid
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 28-Aug-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new objPrices,strStatus
	
	$$$VAR
	set strStatus = $$$OK
	set objPrices = ""
	
	if $$$ISOK(strStatus) set strStatus = $$KillChildren^COMUtils("INPP01PreviewLine",pidPreview)
	if $$$ISOK(strStatus) set strStatus = $$CreatePreviewLines(pidPreview,.objPrices)
	if $$$ISOK(strStatus) set strStatus = $$SetStatus(pidPreview,$$$EnumCOMSYSSTATUSAwaitingReview)
	
	quit strStatus
	
	
CreatePreviewLines(pidPreview,&pobjPrices)
	;-------------------------------------------------------------------------------
	; Create the lines
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 31-Aug-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new dteDate,fltCost,idINART,idLine,idRuleHeader,idRuleLine
	new objItem,objPreview,strStatus,tmeTime
	
	set strStatus = $$$OK
	
	set idLine = ""
	set objPreview = $get(^INPP01Preview(0,pidPreview,1))
	
	set idINART = ""
	for {
		set idINART = $order(^INART(0,idINART))
		quit:idINART=""
		
		set objItem = $get(^INART(0,idINART,1))
		set dteDate      = $$$INPP01PreviewCostCaptureDate(objPreview)
		set tmeTime      = $$$INPP01PreviewCostCaptureTime(objPreview)
		set idRuleHeader = $$$INPP01PreviewPricePlanRule(objPreview)
		
		set strStatus = $$CreatePreviewItem(pidPreview,idRuleHeader,.idLine,idINART,dteDate,tmeTime,$$$INPP01PreviewLocation(objPreview),$$$INPP01PreviewPriceCode(objPreview))
		;quit:(idLine=4000)
		quit:$$$ISERR(strStatus)
	}
	quit strStatus
	
	
CreatePreviewItem(pidPreview,pidRuleHeader,pidLine,pidItem,pdteDate,ptmeTime,pidLocn,pidPriceCode)
	;-------------------------------------------------------------------------------
	; Creates a line 
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 03-Nov-2009	GRF		SR16871: INAvgCost replaces INARTAVG
	; 16-Oct-2009	GRF		SR16511: Reuse calculated values; boolean macro
	; 03-Aug-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new curFrozenPrice,curUnitCost,enumInvUnit,enumPackUnit,fltConvFactor,fltCost
	new idCostCentre,objItem,objLine,objPreview,strStatus
	
	set strStatus  = $$$OK
	set objItem   = $get(^INART(0,pidItem,1))
	set objPreview = $get(^INPP01Preview(0,pidPreview,1))      ; SR16871
	
	set enumInvUnit   = $$GetInventoryUOM^INUOMConversion(pidItem)
	set enumPackUnit  = $$GetPackUOM^INART(pidItem)
	set fltConvFactor = $$GetUOMConvBetweenUnits^INUOMConversion(pidItem,enumInvUnit,enumPackUnit)
	
	set idCostCentre  = $$GetCostCentre^INCostCentre($$$INPP01PreviewLocation(objPreview))      ; SR16871
	set curUnitCost   = $$GetCostAtTimeForCC^INAvgCost(pidItem,idCostCentre,pdteDate,ptmeTime)  ; SR16871
	
	set objLine = ""
	set $$$INPP01PreviewLineItem(objLine)           = pidItem
	set $$$INPP01PreviewLineInventoryUnit(objLine)  = $$GetInventoryUOM^INUOMConversion(pidItem)
	set $$$INPP01PreviewLinePackUnit(objLine)       = $$GetPackUOM^INART(pidItem)
	;et $$$INPP01PreviewLinePackConversion(objLine) = $$GetUOMConvBetweenUnits^INUOMConversion(pidItem,$$$INPP01PreviewLineInventoryUnit(objLine),$$$INPP01PreviewLinePackUnit(objLine))
	;et $$$INPP01PreviewLineSystemPackCost(objLine) = $$GetCostAsAtDateAndTime^INARTAVG(pidItem,pdteDate,ptmeTime)*$$$INPP01PreviewLinePackConversion(objLine)
	set $$$INPP01PreviewLinePackConversion(objLine) = fltConvFactor
	;et $$$INPP01PreviewLineSystemPackCost(objLine) = $$GetCostAsAtDateAndTime^INARTAVG(pidItem,pdteDate,ptmeTime)*fltConvFactor ; SR16871
	set $$$INPP01PreviewLineSystemPackCost(objLine) = curUnitCost * fltConvFactor
	set $$$INPP01PreviewLineManualPackCost(objLine) = $$GetManualPackCost(pidItem,pidLocn)
	set $$$INPP01PreviewLineAccept(objLine)         = $$$NO    ;Get this from WWW122
	
	
	if $$CalculatePrice^INPP01PreviewLine(.objLine,pidRuleHeader,pidLocn) {
		; also sets Suggested Price, Variance and Plan No.
		set pidLine = pidLine+1
		set curFrozenPrice = $$GetPrice^INItemPrice(pidItem,enumPackUnit,1,pidLocn,pidPriceCode,$horolog,"","",0)
	;	set $$$INPP01PreviewLineFrozenPrice(objLine) = $$GetPrice^INItemPrice(pidItem,$$$INPP01PreviewLinePackUnit(objLine),1,pidLocn,pidPriceCode,$horolog,"","",0)
	;	set $$$INPP01PreviewLineVariance(objLine)    = $$CalculateVariance^INPP01PreviewLine($$$INPP01PreviewLineFrozenPrice(objLine),$$$INPP01PreviewLineSuggestedPrice(objLine))
		set $$$INPP01PreviewLineFrozenPrice(objLine) = curFrozenPrice
		set $$$INPP01PreviewLineVariance(objLine)    = $$CalculateVariance^INPP01PreviewLine(curFrozenPrice,$$$INPP01PreviewLineSuggestedPrice(objLine))
		
		set strStatus = $$$Save("INPP01PreviewLine",pidPreview_","_pidLine,objLine,$$$YES)
	}
	quit strStatus
	
	
Calculate(&YFELD)
	quit
	
	
GetPrice(pidRuleHeader,pidLine,pfltCost)
	;-------------------------------------------------------------------------------
	;
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 24-Aug-2009	shobby	SR16511: Refer Guy email where markup is a multiplier
	; 							not a percentage.
	; 24-Aug-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new fltPrice,objINPP01GenRuleLine
	
	set fltPrice=""
	
	set objINPP01GenRuleLine = $get(^INPP01GenRuleLine(0,pidRuleHeader,pidLine,1))
	
	if $$$INPP01GenRuleLinePriceTypePolicy(objINPP01GenRuleLine)=$$$EnumINPRICETYPEPOLICYFixed {
		set fltPrice = $$$INPP01GenRuleLinePricingMultiplier(objINPP01GenRuleLine)
	} else {
		set fltPrice = $$$FCMult($$$INPP01GenRuleLinePricingMultiplier(objINPP01GenRuleLine),pfltCost)
		set fltPrice = $$$FCAdd(fltPrice,pfltCost)
	}
	quit fltPrice
	
	
OnBeforeDelete(YKEY)
	;-------------------------------------------------------------------------------
	; Delete Wrapper
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 31-Aug-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$Transaction^COMTransaction("DeleteTxn^INPP01Preview("""_YKEY_""")")
	
	if $$$ISERR(strStatus) {
		do ReturnError^COMUtilError($listbuild("IN00462",YKEY,$$$Text(strStatus)))  ; "Delete of Transfer Order %1 unsuccessful. Reason: %2"
		set Q = $$$QDontDelete
	}
	
	quit strStatus
	
	
DeleteTxn(YKEY)
	;-------------------------------------------------------------------------------
	; Delete the lines
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 31-Aug-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new strStatus,idLine
	
	set strStatus = $$$OK
	set idLine    = ""
	for {
		set idLine = $order(^INPP01PreviewLine(0,YKEY,idLine))
		quit:idLine=""
		
		set strStatus = $$$Kill("INPP01PreviewLine",YKEY_$$$COMMA_idLine)
		quit:$$$ISERR(strStatus)
	}
	;if $$$ISOK(strStatus) set strStatus=$$SetStatus^INPP00GenRule(YKEY,$$$EnumCOMSYSSTATUSBuilding)
	quit strStatus
	
	
OnBeforeSave(YKEY,&YFELD)
	;-------------------------------------------------------------------------------
	; Save the lines on the grid.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 05-May-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$$GRIDSave(YKEY)
	if $$$ISERR(strStatus) {
		$$$Alert(strStatus)
		set Q = $$$QDontSave
	}
	quit strStatus
	
	
Post(YKEY)
	;-------------------------------------------------------------------------------
	; Post Wrapper
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 31-Aug-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$Transaction^COMTransaction("PostTxn^INPP01Preview("""_YKEY_""")")
	
	if $$$ISERR(strStatus) { 
		do ReturnError^COMUtilError(strStatus)
	} else {
		do GoToForm^COMUtilForm("INPP01Preview",YKEY)
	}
	quit strStatus
	
	
PostTxn(YKEY)
	;-------------------------------------------------------------------------------
	; Update the cost/price based of the contents of the screen.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 02-Sep-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new blnUsed,dtePriceEnd,dtePriceStart,idItem,idLocn,idPreviewLine,idSource
	new objINARTLOCPAR,objLine,objPreview,strStatus
	
	set strStatus = $$$OK
	set blnUsed   = $$$NO
	
	set objPreview = $get(^INPP01Preview(0,YKEY,1))
	set idLocn     = $$$INPP01PreviewLocation(objPreview)
	
	set idPreviewLine = ""
	for {
		set idPreviewLine = $order(^INPP01PreviewLine(0,YKEY,idPreviewLine))
		quit:idPreviewLine=""
		
		set objLine = $get(^INPP01PreviewLine(0,YKEY,idPreviewLine,1))
		set idItem = $$$INPP01PreviewLineItem(objLine)
		if $$$INPP01PreviewLineAccept(objLine) {   ; Cost
			set objINARTLOCPAR = $get(^INARTLOCPAR(0,idItem,idLocn,1))
			if $$$INPP01PreviewLineNewPackCost(objLine)'=$$$INARTLOCPARManualPackCost(objINARTLOCPAR) {
				set $$$INARTLOCPARManualPackCost(objINARTLOCPAR) = $$$INPP01PreviewLineNewPackCost(objLine)
				set strStatus = $$$Save("INARTLOCPAR",idItem_","_idLocn,objINARTLOCPAR,$$$YES)
				set blnUsed   = $$$YES
			}
		}
		
		if $$$INPP01PreviewLineAccept1(objLine) {  ; Price
			set dtePriceStart = $$$INPP01PreviewValidFromDate(objPreview)
			if $$$INPP01PreviewValidFromTime(objPreview)>0 set dtePriceEnd = dtePriceStart_" "_$$$INPP01PreviewValidFromTime(objPreview)
			set dtePriceEnd = $$$INPP01PreviewValidToDate(objPreview)
			if $$$INPP01PreviewValidToTime(objPreview)>0   set dtePriceEnd = dtePriceEnd_" "_$$$INPP01PreviewValidToTime(objPreview)
			set idSource  = YKEY_","_idPreviewLine
			set strStatus = $$SetPrice^INItemPrice(idItem,$$$INPP01PreviewLinePackUnit(objLine),idLocn,$$$INPP01PreviewPriceCode(objPreview),dtePriceStart,dtePriceEnd,$$$INPP01PreviewLineNewFrozenPrice(objLine),idSource,"")
			set blnUsed   = $$$YES
		}
		
		quit:$$$ISERR(strStatus)
	}
	if $$$ISOK(strStatus) && blnUsed set strStatus = $$SetStatus(YKEY,$$$EnumCOMSYSSTATUSUsed)
	quit strStatus
	
	
SetStatus(pidRuleHeader,penumStatus)
	;-------------------------------------------------------------------------------
	; Sets the status on this rule
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 12-May-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
 	new YKEY  ; leave this here to allow saving of the record while exiting to another form.
	new objPreview
	
	set objPreview = $get(^INPP01Preview(0,pidRuleHeader,1))
	set $$$INPP01PreviewStatus(objPreview) = penumStatus
	quit $$$Save("INPP01Preview",pidRuleHeader,objPreview,$$$YES)
	
	
GetStatus(YKEY)
	;-------------------------------------------------------------------------------
	; Rule Status
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 12-May-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new objPreview
	
	quit:$$$NoKey(YKEY) $$$EnumCOMSYSSTATUSNew
	
	set objPreview = $get(^INPP01Preview(0,YKEY,1))
	quit $$$INPP01PreviewStatus(objPreview)
	
	
OnAfterPrimaryKey(YKEY,YFELD)
	;-------------------------------------------------------------------------------
	; Building can take a long time... So it is done as a background job, if it isn't 
	; finished yet make the preview form read only.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 02-Sep-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	if $$$INPP01PreviewStatus(YFELD)=$$$EnumCOMSYSSTATUSBuilding {
		set $$$WWW120AuthorizationToModifyData(YVOR) = $$$EnumReadOnly
	}
	quit
	
]]></Routine>
</Export>