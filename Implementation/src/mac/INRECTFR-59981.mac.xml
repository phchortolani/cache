<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INRECTFR" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INRECTFR
	
#include COMSYS
#include INConst
#include FINConst
#include %occInclude

#define FORMFldINRECTFRLineLotNo	    13
#define FORMFldINRECTFRLineExpiryDate	14
#define FORMFldINRECTFRLineBrand		40
#define FORMFldINRECTFRLineOwner		41
#define FORMFldINRECTFRLineProgram		42

	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECTFR("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
Postable(YKEY)
	;-------------------------------------------------------------------------------
	; Called By:
	;	Form : INRECTFR - 'Execute To Check For Disabled' on Button 1
	; 
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 21-May-2008	shobby	SRBR014944: Created
	;-------------------------------------------------------------------------------
	new strStatus
	set strStatus = $$$OK
	if '$$$NoKey(YKEY) {
		set strStatus = $$Postable^INRECTFRLine(YKEY)
		if $$$ISOK(strStatus) set strStatus = $$Postable^INRECPost(YKEY,$$$EnumINRECTransferReceipt)
	}
	if $$$ISOK(strStatus) {
		set YQ = $$$QSave
	} else {
		set YQ = $$$QDontSave_" "_$$$Text(strStatus)
	}
	quit strStatus
	
	
Select()
	;-------------------------------------------------------------------------------
	; Search Transfers
	;
	; Params:
	;
	; Returns: 1
	;
	; History:
	; 20-Apr-2006	JW		SR14421: Created (modified from INREC)
	;-------------------------------------------------------------------------------
	new blnReceived,enumStatus,objREC
	
	set objREC      = $$GetFormData^COMUtilForm()
	set blnReceived = $piece($$GetFormData^COMUtilForm(,"M"),Y,11)
	set enumStatus  = $select(blnReceived:$$$EnumINTFRSTATUSReceived,1:$$$EnumINTFRSTATUSSent)
	
	do Initialise^COMViewCustom("INTFR","Selected^INRECTFR")
	do AddFilter^COMViewCustom("D"_$$$FldINTFRStatus,"=",enumStatus)
	do AddFilter^COMViewCustom("D"_$$$FldINTFRReceivingLocation,"=",$$$INRECLocation(objREC))
	do Start^COMViewCustom()
	
	quit $$$OK
	
	
Selected(pobjResultSet) 
	;-------------------------------------------------------------------------------
	; Add selected receipts to the grid
	; 
	; Called By : Select^INRECTFR (via Initialise^COMViewCustom)
	; 
	; Params:
	;
	; Returns:
	;
	; History:
	; 23-Nov-2007	GM		SRBR014800: Included transfer receipt number in message
	; 09-Feb-2007	PO		SR15217: If selected transfers not able to be added to receipt
	;							display message informing use of the number not included
	; 05-Sep-2006	PO		SR15002: Handle new subscripts in arrObjLines
	; 20-Apr-2006	JW		SR14421: Created (modified from INREC)
	;-------------------------------------------------------------------------------
	new arrObjLines,idDemand,idKey,idReceipt,idReceiptMessage,idReceivingBin
	new intLinesSelected,intNotAbleToBeAdded,loop,objREC,strNewTrans,strTransfers,strStatus
	
	set objREC       = $$GetFormData^COMUtilForm()
	set strTransfers = $$$INRECTransferNumbers(objREC)
	set strNewTrans  = strTransfers
	set intLinesSelected    = 0
	set intNotAbleToBeAdded = 0
	
	$$$GRIDAddBatchStart
	while pobjResultSet.Next() {
		set idKey = $$GetID^COMViewCustom(pobjResultSet)
		set intLinesSelected = intLinesSelected + 1
		
		if '$find(";"_strTransfers_";",";"_idKey_";") {		// Don't add more than once
			set idReceipt = $$TransferAvailableForReceipt(idKey)
			if idReceipt = "" {
				set strStatus = $$CreateLines^INRECTFRLine(objREC,idKey,.arrObjLines)
				if $$$ISOK(strStatus) {
					set strNewTrans = strNewTrans_";"_idKey
					
					set idReceivingBin = ""
					for {
						set idReceivingBin = $order(arrObjLines(idReceivingBin))
						 quit:idReceivingBin=""
						 
						set idDemand = ""
						for {
							set idDemand = $order(arrObjLines(idReceivingBin,idDemand))
							quit:idDemand=""
							
							set loop = ""
							for {
								set loop = $order(arrObjLines(idReceivingBin,idDemand,loop))
								quit:loop=""
								
								$$$GRIDAddLine(arrObjLines(idReceivingBin,idDemand,loop))
							}
						}
					}
				}
			} else {
				set intNotAbleToBeAdded = intNotAbleToBeAdded + 1
				set idReceiptMessage    = idReceipt
			}
		}
	}
	$$$GRIDAddBatchStop
	
	if strNewTrans'=strTransfers {
		if $extract(strNewTrans)=";" set $extract(strNewTrans) = ""
		do PopulateDataField^COMUtils("INRECTFR",$$$FldINRECTransferNumbers,strNewTrans,,,$$$NO)
	}
	
	if intNotAbleToBeAdded > 0 {
		if intLinesSelected = 1 {
			$$$Alert($listbuild("IN00658",idReceiptMessage))
		;    "Transfer selected is already included in an unprocessed transfer receipt number %1."
			
		} else {
			$$$Alert($listbuild("IN00659",intNotAbleToBeAdded,idReceiptMessage))
		}  ; "%1 Transfers selected are already included in unprocessed transfer receipt number %2."
	}
	quit
	
	
TransferAvailableForReceipt(pidTFR)
	;-------------------------------------------------------------------------------
	; Used to determine whether a transfer can be added to a receipt or not.
	; 
	; If the returned value is blank then the transfer is not attached to an unprocessed
	; receipt, hence able to be added to a receipt.
	; 
	; If the returned value is not blank then the value is the id of the unprocessed
	; receipt that the transfer is attached to, hence not able to be added to another receipt.
	; 
	; Called By : EnsureTransfersCanBeReceived^INRECTFR
	;             Selected^INRECTFR
	; 
	; Params:
	; pidTFR - Transfer Id
	;
	; Returns: idREC the id of the receipt
	;
	; History:
	; 09-Feb-2007	PO		SR15217: Created
	;-------------------------------------------------------------------------------
	new idREC,idxTFR,objREC
	
	set idxTFR = $$$Index(pidTFR)
	
	set idREC = ""
	for {
		set idREC = $order(^INRECs(YM,1,idxTFR,idREC))
		quit:idREC=""
		
		set objREC = $get(^INREC(YM,idREC,1))
		continue:$$$INRECStatus(objREC)'=$$$EnumINSTATUSUnprocessed
		continue:$$$INRECTransferNumbers(objREC)'[pidTFR
		quit
	}
	quit idREC
	
	
EnsureTransfersCanBeReceived()
	;-------------------------------------------------------------------------------
	; Prevent two unprocessed receipts including the same transfer
	; 
	; Called By : BeforeSave^INREC
	; 
	; Params: None
	;
	; Returns: strStatus - $$$OK if transfer able to be included on 'this' receipt
	;                      otherwise error message
	;
	; History:
	; 12-Feb-2007	PO		SR15217: Created
	;-------------------------------------------------------------------------------
	new arrGrid,arrTFRs,idLine,idRec,idTFR,intNotAbleToBeAdded,strStatus
	
	set strStatus = $$$OK
	set intNotAbleToBeAdded = 0
	
	$$$GRIDGetContents(.arrGrid)
	
	set idRec = ""
	for {
		set idRec = $order(arrGrid(idRec))
		quit:idRec=""
		
		set idLine = ""
		for {
			set idLine = $order(arrGrid(idRec,idLine))
			quit:idLine=""
			
			set idTFR = $$$KEY1($$$INRECLineCacheLink(arrGrid(idRec,idLine)))
			set arrTFRs(idTFR) = ""
			if '$data(arrTFRs(idTFR)) && ($$TransferAvailableForReceipt(idTFR) '= "") set intNotAbleToBeAdded = intNotAbleToBeAdded + 1
		}
	}
	
	if intNotAbleToBeAdded > 0	set strStatus = $listbuild("IN00659",intNotAbleToBeAdded)
	; "%1 Transfers selected are already included in unprocessed transfer receipts"
	
	quit strStatus
	
	
Post(pidRec)
	;-------------------------------------------------------------------------------
	; Post an INREC record
	; 
	; Called By : Form INRECTFR - Button 1 "Process" (Execute OnClick)
	; 
	; Params:	pidRec - INREC id
	;
	; ByRefs:
	;
	; Returns:	status
	;
	; History:
	; 28-Jan-2008	shobby	SRBR014754: Need to know which form the posting was
	;							initiated from.
	; 20-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$Transaction^COMTransaction("PostTxn^INRECTFR("""_pidRec_""","""_$$GetLineForm^INTFRInterface($get(YFORM),"INRECLine")_""")",$$$YES) ;BR014754
	
	if $$$ISOK(strStatus) {
		do ReloadForm^COMUtilForm()
	}
	quit strStatus
	
	
PostTxn(pidRec,pidForm="")
	;-------------------------------------------------------------------------------
	; Post an INREC record
	;
	; Called By : Post^INRECTFR, ShipTxn^INTRNShip
	; 
	; Params:	pidRec - INREC id
	;
	; ByRefs:
	;
	; Returns:	status
	;
	; History:
	; 06-Jan-2010	GRF		SR17080: Postable checks $$Postable^INRECPost - comment
	; 21-May-2008	shobby	SRBR014944: Check Postable, conditions may have changed
	; 							since loading form.
	; 08-May-2008	GRF		SR15717: V2 Interface - extra parameters
	; 28-Jan-2008	shobby	SRBR014754: Auditing information.
	; 23-Oct-2007	shobby	SR15570: Exit out of loops when an error occurs.
	; 05-Oct-2007	PJones	SR15570	MoveStock is now returning a status string 
	;							so this routine should catch it. 
	;							Also the //Update transfers and receive clause 
	;							moved under control of a test of strStatus
	;-------------------------------------------------------------------------------
	new arrQty,arrThis,fltQty,idTFR,idTFRLine,idLine,objLine,strStatus
	
	$$$LogR("PostTxn",$get(pidRec)_"<"_pidForm)
	
	set strStatus = $$Postable(pidRec) ;BR014944
	;if $$$ISOK(strStatus) set strStatus = $$Postable^INRECPost(pidRec,$$$EnumINRECTransferReceipt) ; SR17080
	
	if $$$ISOK(strStatus) {     // Transfer receipts
		set idLine = ""
		for {
			set idLine = $order(^INRECLine(YM,pidRec,idLine))
			quit:idLine=""
			
			set objLine = $get(^INRECLine(YM,pidRec,idLine,1))
			
			set fltQty = +$$$INRECLineQuantity(objLine)
			if fltQty {
				set idTFR     = $$$KEY1($$$INRECLineCacheLink(objLine))
				set idTFRLine = $$$KEY2($$$INRECLineCacheLink(objLine))
				
				set arrQty(idTFR,idTFRLine) = $get(arrQty(idTFR,idTFRLine))+fltQty
				kill ^CacheTempHistoryTracking(YUCI,YUSER)
				set ^CacheTempHistoryTracking(YUCI,YUSER,"SourceForm") = pidForm
				set ^CacheTempHistoryTracking(YUCI,YUSER,"SourceId")   = pidRec_","_idLine
				set strStatus = $$MoveStock(idTFR,objLine,pidRec_","_idLine)
				kill ^CacheTempHistoryTracking(YUCI,YUSER)
			}
			quit:$$$ISERR(strStatus)
		}
		
		if $$$ISOK(strStatus) {   //Update transfers and receive
			set idTFR = ""
			for {
				set idTFR = $order(arrQty(idTFR))
				quit:idTFR=""
				
				kill arrThis
				merge arrThis = arrQty(idTFR)
				set strStatus = $$ReceiveTransfer(idTFR,.arrThis)
				quit:$$$ISERR(strStatus)
			}
		}
		
		if $$$ISOK(strStatus) {
			set strStatus = $$UpdateHeader^INRECPost(pidRec)
		}
	}
	quit strStatus
	
	
ReceiveTransfer(pidTFR,&parrQty)
	;-------------------------------------------------------------------------------
	; Update transfer line receipt quantites and transfer header with status
	; 
	; Called By : PostTxn^INRECTFR
	; 
	; Params:
	;	pidTFR		transfer id
	;	parrQty		ByRef : array of line quantites
	;						parrQty(idLine) = fltQty
	;
	; ByRefs:
	;
	; Returns:	status
	;
	; History:
	; 17-Aug-2009	PPP		SR16838: Close the Requisiton if completed
	; 27-Jan-2009	HQN		SR16296: Added Req Update
	; 07-Aug-2008	PP		SR15812: 1.	Rewrite of Transfers (Update Demands differently)
	; 								 2.	No need to update ^INDRPUMTOUR
	; 15-May-2006	PO		SR14427: When transfer received set tour to locked (Phase 2)
	; 21-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	new arrReqID,fltQty,idLine,idReq,objReq,objTFR,objTFRLine,objUReqLine,sc,strStatus
	
	$$$LogR("ReceiveTransfer",pidTFR)
	
	set strStatus = $$$OK
	
	// Update transfer lines
	set idLine = ""
	for {
		set idLine = $order(parrQty(idLine))
		quit:idLine=""
		
		set fltQty     = parrQty(idLine)
		set objTFRLine = $get(^INTFRLine(YM,pidTFR,idLine,1))
		set $$$INTFRLineReceivedQuantity(objTFRLine) = $$$INTFRLineReceivedQuantity(objTFRLine) + fltQty
		set strStatus = $$$Save("INTFRLine",pidTFR_","_idLine,objTFRLine,$$$YES)
		
		if $$$ISOK(strStatus) && ($$$INTFRLineReference(objTFRLine) '= "") {
			set idReq = $$$KEY1($$$INTFRLineReference(objTFRLine))
			if idReq'="" set arrReqID(idReq)=""        //SR16819
			
			set objUReqLine = ##class(alREQ.dUReqLine).%OpenId("0||"_$$$KEY1($$$INTFRLineReference(objTFRLine))_"||"_$$$KEY2($$$INTFRLineReference(objTFRLine)),,.sc)
			if objUReqLine '= $$$NULLOREF {
				set objUReqLine.QtyReceived = objUReqLine.QtyReceived + fltQty
				set sc = objUReqLine.AutoClose()
				if $$$ISERR(sc) {
					set strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
				}			
			}
		}
	; FIXME : When processing Transfer Orders, INTFRLineQuantity is in Transfer Order Units
	;         while INTFRLineReceivedQuantity is in Inventory Units
		if $$$ISOK(strStatus) {
	;		$$$LogRx("URS:"_$$$INTFRLineQuantity(objTFRLine)_"<"_$$$INTFRLineReceivedQuantity(objTFRLine)_"<")
			set strStatus = $$UpdateRecSupply^INTRNDemand($$$INTFRLineSupply(objTFRLine),$$$INTFRLineQuantity(objTFRLine),$$$INTFRLineReceivedQuantity(objTFRLine))	//SR15812
		}
		
		quit:$$$ISERR(strStatus)
	}

	; Try to close the Relevant Req's
	set idReq = ""
	for {
		set idReq = $order(arrReqID(idReq))
		quit:idReq=""
		if objUReqLine '= $$$NULLOREF {
			set objReq = ##class(alREQ.dUReq).%OpenId("0||"_idReq)
			do objReq.AutoClose()
		}
	}
	
	// Update header
	if $$$ISOK(strStatus) {
		set objTFR = $get(^INTFR(YM,pidTFR,1))
		if $$$INTFRReceived(objTFR)="" {	// Only update for first receipt
			set $$$INTFRStatus(objTFR)   = $$$EnumINTFRSTATUSReceived
			set $$$INTFRReceived(objTFR) = $horolog
			set strStatus = $$$Save("INTFR",pidTFR,objTFR,$$$YES)
		}
	}
	quit strStatus
	
	
UpdateDemand(pidDemand,pidSupply,pfltQty)
	;-------------------------------------------------------------------------------
	; Update the transfer demand record
	;
	; Params:	pidDemand - keys of the demand
	;			pfltQty - qty to update
	;
	; ByRefs:
	;
	; Returns:	status
	;
	; History:
	; 29-Jun-2006	PO		SR14669: Close the supply at receive time, demand is
	;							created closed if manual, loaded demand closed at
	;							firming.
	; 21-Apr-2006	JW		SR14421: Created (from SaveInDemand^INTRANSFER9)
	;-------------------------------------------------------------------------------
	new objDemand,objSupply,strStatus
	
	set objDemand = $get(^INDRPDEMAND(YM,$$$KEY1(pidDemand),$$$KEY2(pidDemand),1))
	
	if $$$INDRPDEMANDDateReceived(objDemand)="" {
		set $$$INDRPDEMANDDateReceived(objDemand) = +$horolog
		set $$$INDRPDEMANDReceivedBy(objDemand)   = $get(YBED,"UNKNOWN")
	}
	set pfltQty = $$$INDRPDEMANDReceivedQuantity(objDemand)+pfltQty
	set $$$INDRPDEMANDReceivedQuantity(objDemand)=pfltQty
	
	set strStatus = $$$Save("INDRPDEMAND",pidDemand,objDemand,$$$YES)
	do ^INDRPSAVED(pidDemand,objDemand)  ;UPDATE SUPPLY OF DESTINATION LOCATION
	
	if ($$$KEY2(pidSupply) '= "") {
		set objSupply = $get(^INDRPSUPPLY(YM,$$$KEY1(pidSupply),$$$KEY2(pidSupply),1))
		if (pfltQty >= $$$INDRPDEMANDLoadedQuantity(objDemand)) {
			set $$$INDRPSUPPLYClosed(objSupply) = $$$YES  ;Close supply
		}
		set strStatus = $$$Save("INDRPSUPPLY",pidSupply,objSupply,$$$YES)
	}
	quit strStatus
	
	
MoveStock(pidTFR,pobjRECLine,pidRecLine)
	;-------------------------------------------------------------------------------
	; Move stock using INWE1
	;
	; Params:
	;	pidTFR			id of transfer
	;	pobjRECLine		receipt line record
	;	pidRecLine		id of Receipt Line	
	;
	; ByRefs:
	;
	; Returns:	strStatus
	;
	; History:
	; 06-Jan-2010	GRF		message text (consolidate now common entry)
	; 19-Aug-2009	GRF		replace Order macro & missing new
	; 24-Sep-2008	HQN		SR15862: Returns something meaningful now, 
	; 						was plain quit before
	; 07-Aug-2008	PP		SR15812: Rewrite of Transfers (Update SOH using new Routine)
	; 						Do not update INWE for Consumable Items
	; 19-May-2008	GRF		SR15742: Process Lot rather than Batch Number; rename
	;							variable for clarity
	; 08-May-2008	GRF		SR15717: V2 Interface
	; 04-Mar-2008	GRF		SRBR014859: use $$$MakeStatus
	; 04-Oct-2007	PJones  SR15570: This routine wasn't trapping the lack of 
	;						location and stock location in the dispatch
	;						Now it is, and failing, returning an status 
	;						message. We need to adapt all calls to this 
	;						routine to ask for status.
	; 21-Apr-2006	JW		SR14421: Created (from SORT^INTRANSFER9)
	;-------------------------------------------------------------------------------
	new blnConsumable,dteExp,dteTFR,fltQty,idItem,idLot,idRecLoc,idRecStkLoc,idTFRLocn
	new idTFRStore,intInTransitType,objDispType,objTFR,strStatus,strText
	
	set objTFR      = $get(^INTFR(YM,pidTFR,1))
	set strText     = $$^WWWTEXT(32639)_" ("_$$$INTFRSendingLocation(objTFR)_")"   ; "Location Order (Locn)"
	
	set objDispType = $get(^INDRPUMLKW(YM,$$$INTFRDispatch(objTFR),1))
	set idTFRLocn   = $$$INDRPUMLKWLocation(objDispType)
	set idTFRStore  = $$$INDRPUMLKWStockLocation(objDispType)
	
	set fltQty      = +$$$INRECLineQuantity(pobjRECLine)
	set idItem      =  $$$INRECLineItem(pobjRECLine)
	set idLot       =  $$$INRECLineLotNumber(pobjRECLine)
	set dteExp      =  $$$INRECLineExpirationDate(pobjRECLine)
	set idRecLoc    =  $$$INRECLineLocation(pobjRECLine)
	set idRecStkLoc =  $$$INRECLineStockLocation(pobjRECLine)
	set blnConsumable = $$IsConsumable^INARTLOCPAR(idItem,idRecLoc)
	
	if (idTFRLocn="") || (idTFRStore="") {
		quit $$$MakeStatus("IN00706")    ; FIXME : <GRF> Should go to common exit point
	; "Transfer can not be received because the dispatch (internal mode of shipment) information is missing the In Transit details.
	;  Make sure a Location and a Storage are entered for the Dispatch Mode used in the transfer
	;  (AlphaLinc -> DRP/MRP -> DRP/MRP Master Data -> DRP Inter-Warehousing Master Information -> Internal Mode of Shipment)."
	}
	set intInTransitType = 2
	set dteTFR	= +$h
	set strStatus = $$UpdateSOH^INTRNStockUpdate(intInTransitType,idItem,idTFRLocn,idTFRStore,dteTFR,idRecLoc,idRecStkLoc,fltQty,$piece(pidRecLine,$$$COMMA,1),$piece(pidRecLine,$$$COMMA,2))

	quit strStatus
	
	
Update(YDATEI,YKEY,YFELD,pidRecLine)
	;-------------------------------------------------------------------------------
	; Common update point, insulating arguments
	; 
	; History:
	; 16-May-2008	GRF		SR15717: remove ^SysSetup("V1 to V2") switch
	; 06-May-2008	GRF		SR15717: Separate processing once processing V2 Bundles
	;							as well as V1
	;-------------------------------------------------------------------------------
	do Transfer^INWE1V2(YDATEI,YKEY,YFELD,"TfrRec",pidRecLine)
	quit
	
	
CanPrint(pidINREC)
	;-------------------------------------------------------------------------------
	; Determines whether the print button is enabled.
	;
	; Params:		pidINREC		: the receipt number
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 17-Jul-2006	Steve S		SR14851: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$$OK
	
	if $$$NoKey(pidINREC) {
		set strStatus = $listbuild("IN00511")  ; "Please select a data record first."
		
	} elseif '$data(^INRECLine(YM,pidINREC)) {
		set strStatus = $listbuild("IN00403")  ; "No goods have been selected for receipt"
	}
	
	$$$YQHandler(strStatus)
	quit
	
	
ReCalcTransferNumbers(pidRec, pstrTransfers)
	;-------------------------------------------------------------------------------
	; Redetermine the transfer
	;
	; Params:
	; pidRec - Receipt Id
	; pstrTransfers - semicolon delimetered list of transfer ids
	;
	; Returns: Nothing
	;
	; History:
	; 31-Aug-2007	shobby	SRBR014691: Oops. Do want to prevent adding multiple times.
	; 30-Aug-2007	shobby	SRBR014691: Don't want to prevent adding ids of transfers
	;							that are already on the INREC record.  Don't think
	;							pstrTransfers is necessary.
	; 12-Feb-2007	PO		SR15217: Created
	;-------------------------------------------------------------------------------
	new idLine,objLine,idTFR,strTransfers
	
	set strTransfers = ""
	
	set idLine = ""
	for {
		set idLine = $order(^INRECLine(YM,pidRec,idLine))
		quit:idLine=""
		
		set objLine = $get(^INRECLine(YM,pidRec,idLine,1))
		set idTFR = $$$KEY1($$$INRECLineCacheLink(objLine))
		if (";"_strTransfers_";") '[ (";"_idTFR_";") {
			set strTransfers = strTransfers_";"_idTFR
		}
	}
	quit $extract(strTransfers,2,$length(strTransfers))
	
	
LocationRestricted()
	;-------------------------------------------------------------------------------
	; Whether we restrict the receiving location to the user's location.
	; Note: We check the current form, because we can still auto receive from the 
	; transfer order form.
	; 
	; This function is called from the form def for the location field.
	; 
	; Params:
	;
	; Returns:	boolean
	;
	; History:
	; 02-Apr-2007	JW		BR014411: Created
	;-------------------------------------------------------------------------------
	quit (YFORM="INRECTFR") && $$$INVORGRestrictreceivinglocation($get(^INVORG(0,0,1)))

SelectCol(pidForm,pidRec)
	;-------------------------------------------------------------------------------
	; Select Columns to Show
	; Allow for 'Non Lot Controlled' to 'Lot Controlled'
	; 
	; 
	; Params:
	;
	; Returns:	boolean
	;
	; History:
	; 01-Oct-2013	SCR		CORE-273: Created
	;-------------------------------------------------------------------------------
	new arrGrid,blnHideBrand,blnHideExpiry,blnHideLotNo,blnHideOwner,blnHideProgram
	new blnLotNo,blnLotUnique,blnUseByDate,idFromLoc,idItem,idLoc,idToLoc,idTrn
	new intBrand,intOwner,intProgram,objLine,objRec,objTrn,strLineYKEY,strLink
	$$$GRIDGetContents(.arrGrid)    ; FIXME : This appears to be obsolete with comment of next line.
	//do UpdateContainer^INADJLine(,$g(arrGrid))


	; Hide all Policy Columns until needed
	; Initial Load, check on disk line records

	set blnHideLotNo   = $$$YES
	set blnHideExpiry  = $$$YES
	set blnHideBrand   = $$$YES
	set blnHideOwner   = $$$YES
	set blnHideProgram = $$$YES
	
	set objRec		= $get(^INREC(YM,pidRec,1))
	set idLoc		= $$$INRECLocation(objRec)
	set strLineYKEY = ""
	for {
		set strLineYKEY = $order(^WWWDATEN(0,+$horolog,YUSER,idForm,"V","REFERENCEROW",strLineYKEY))
		quit:(strLineYKEY = "")
		set objLine = $$$GRIDGetYFELD(strLineYKEY)
		set idItem =   $$$INRECLineItem(objLine)
		if idItem'="" {
			do GetAttributes^INItemPolicyUtils(idItem,.blnLotNo,.blnUseByDate,.blnLotUnique,.intBrand,.intOwner,.intProgram,idLoc)
			if blnLotNo                       set blnHideLotNo   = $$$NO
			if blnUseByDate                   set blnHideExpiry  = $$$NO
			if (intBrand=1)||(intBrand=3)     set blnHideBrand   = $$$NO
			if (intOwner=1)||(intOwner=3)     set blnHideOwner   = $$$NO
			if (intProgram=1)||(intProgram=3) set blnHideProgram = $$$NO
			set strLink	= $$$INRECLineCacheLink(objLine)
			set idTrn	= $piece(strLink,",",1)
			if idTrn'="" {
				set objTrn		= $get(^INTFR(YM,idTrn,1))
				set idFromLoc	= $$$INTFRSendingLocation(objTrn)
				set idToLoc		= $$$INTFRReceivingLocation(objTrn)
				;if '$$OnlyTrackPrograms^INBundleUtils(idToLoc) {
				;	; Normally the Brand, Owner & Program are not displayed
				;	set blnHideBrand	= $$$YES
				;	set blnHideOwner	= $$$YES
				;	set blnHideProgram	= $$$YES
				;}
			}
		}
	}

	$$$StartScript()
	$$$GRIDHideShowColumns($$$FORMFldINRECTFRLineLotNo,blnHideLotNo,"INRECTFRLine")    		; F13
	$$$GRIDHideShowColumns($$$FORMFldINRECTFRLineExpiryDate,blnHideExpiry,"INRECTFRLine") 		; F14
	//SR16510
	$$$GRIDHideShowColumns($$$FORMFldINRECTFRLineBrand,blnHideBrand,"INRECTFRLine")  			; F40
	$$$GRIDHideShowColumns($$$FORMFldINRECTFRLineOwner,blnHideOwner,"INRECTFRLine")  			; F41
	$$$GRIDHideShowColumns($$$FORMFldINRECTFRLineProgram,blnHideProgram,"INRECTFRLine")  		; F42
	$$$EndScript()

IsUnprocessed() ;SESDF-655
	if $$$INRECStatus($get(YFELD))=$$$EnumINSTATUSUnprocessed set YQ=1
	quit
]]></Routine>
</Export>