<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESPatientConsumptionMCLog" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include WWWConst
#include INConst
#include VARSESConst 
#include VARConst 
#include VARSESTreatmentMC
#include COMSYS
 
 
VARSESPatientConsumptionMCLog
	quit
 
	;
	; Routines for saving data
	;
	
UpdateMCLog(pidINIssue)
    /*-------------------------------------------------------------------------------
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new objINIssue, objINIssueLine, objMCLog, YKEY, YDATEI, YFELD, idTMCLine,objTMCLine, 
		idItem, strStatus, fltQty, idPCMCLogLine
	set objINIssue = $get(^INIssue(YM,pidINIssue,1))
	set idTreatmentMC = $$$INIssueReference(objINIssue)
	
	set idINIssueLine = ""
	for {
		set idINIssueLine = $order(^INIssueLine(YM,pidINIssue,idINIssueLine))
		quit:(idINIssueLine = "")
		set objINIssueLine = $get(^INIssueLine(YM,pidINIssue,idINIssueLine,1))
		set idItem = $$$INIssueLineItem(objINIssueLine)
		
		set objMCLog = ""
		set fltQty = $$$INIssueLineQtyIssued(objINIssueLine)
		if ($$$INIssueFREE16(objINIssue)=$$$VARSESTIPOPACIENTEUSERMediaComplexidade) {
			if ((fltQty < 0)) set fltQty = fltQty * (-1)
		} elseif($$$INIssueFREE16(objINIssue)=$$$VARSESTIPOEstornoMediaComplexidade) {
			if ((fltQty > 0)) set fltQty = fltQty * (-1)
		}
		set $$$VARSESPatientConsumptionMCLogQtyConsumption(objMCLog) = fltQty
		set $$$VARSESPatientConsumptionMCLogDateConsumption(objMCLog) = $horolog ;$piece($horolog,YKOMMA,1)
		
		set objTMCLine = $get(^VARSESTreatmentMCLine(YM,idTreatmentMC,idINIssueLine,1))
		if ($$$VARSESTreatmentMCLineMedicine(objTMCLine) '= idItem) {
			; error treatement?
		}
		
		set idPCMCLogLine = $$^WWWNEXT1("VARSESPatientConsumptionMCLog",idTreatmentMC _ "," _ idINIssueLine,3)
		set YKEY = idTreatmentMC _ "," _ idINIssueLine _ "," _ idPCMCLogLine
		set YDATEI = "VARSESPatientConsumptionMCLog"
		set YFELD = objMCLog
		
		tstart
 		set strStatus=$$^WWWSPEI(YDATEI,YKEY,YFELD,1)
 		if (+strStatus) {
			tcommit
		} else {
			trollback
		}
		
	}
 	quit
 
 
	;
	;
	; Routines for status control
	;
	; 
 
IsLineActive(pidTreatment, pidLine)
    /*-------------------------------------------------------------------------------
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new blnResult, intStatus
 
	set blnResult = $$$OK
	set intStatus = $$StatusTreatmentMCLine^VARSESTreatmentMCLine(pidTreatment,pidLine)
	if (intStatus '= $$$TMCRunning) && (intStatus '= $$$TMCReady) {
		set blnResult = $$$NO
	} 
	quit blnResult
 
 
 
	;
	;
	; Routines for date control
	;
	;
  
GetFirstConsumptionDate(pidTreatment)
    /*-------------------------------------------------------------------------------
    ; Returns month-year of the first consumption of the treatment,
    ; empty if none consumption yet
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
	; 04-Feb-2010   Sosthenes   Modified
    ;-------------------------------------------------------------------------------*/
	new strDateFirstConsumption, idTreatmentLine, idConsumption, objConsumption, strDatePrevious,
		strDateFirst, strMonth, strYear
	
	set strDateFirstConsumption = ""
	set idTreatmentLine = ""
	for {
		set idTreatmentLine = $order(^VARSESPatientConsumptionMCLog(YM,pidTreatment,idTreatmentLine))
		quit:(idTreatmentLine = "")
		
		set strDateFirst = $$GetFirstDateLine(pidTreatment)
		continue:(strDateFirst = "")
 
		set strDatePrevious = strDateFirstConsumption
		set strDateFirstConsumption = strDateFirst
		if (strDatePrevious '="" ) {
			if (strDateFirstConsumption > strDatePrevious) {
				set strDateFirstConsumption = strDatePrevious
			}
		}
	}
	quit strDateFirstConsumption
 
GetEndTreatmentDate(pidTreatment)
    /*-------------------------------------------------------------------------------
    ; Method Usage
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
   	new pidLine, strEndDatePrevious, strEndDateCurrent
	
	$$$VAR
	
	quit:(pidTreatment = "+") ""
	set strEndDateCurrent = ""
	
	set pidLine = ""
	for {
		set pidLine = $order(^VARSESPatientConsumptionMCLog(YM,pidTreatment, pidLine))
		quit:(pidLine = "")
		
		set strEndDatePrevious =  strEndDateCurrent
		set strEndDateCurrent = $$GetEndDateLine(pidTreatment, pidLine)
		// if no consumption then no fixed end date, set strEndDateCurrent to 99999
		// to be the last date
		if (strEndDateCurrent = "") {
			set strEndDateCurrent = 99999
		}
		
		if (strEndDatePrevious '= "") {
			if (strEndDatePrevious > strEndDateCurrent) {
				set strEndDateCurrent = strEndDatePrevious
			}	
		}
	}
	if (strEndDateCurrent = 99999) set strEndDateCurrent = ""
	quit strEndDateCurrent
 
GetMonthYear(pstrDateConsumption)
    /*-------------------------------------------------------------------------------
    ; Method Usage
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new strMonth, strYear
	; get month-year
	set strMonth = $piece($zdate($piece(pstrDateConsumption,",",1),1),"/",1)
	set strYear = $piece($zdate($piece(pstrDateConsumption,",",1),1),"/",3)
	quit strMonth _ Y _ strYear
 
 
DurationResidual(pidTreatment, pidLine)
    /*-------------------------------------------------------------------------------
    ; How many months are still available, taking first consumption as starting date and
    ; counting how many months are available from current date
    ;
    ; First, duration was defined per line
    ; Then, duration was defined at header
    ; Now, user enter qty per month, so, duration is implicit
    ; But duration field at header will be left, implying all lines will have same duration
    ; Duration at line implies all months will have same qty
    ; Those values are used only to generate VARSESTreatmentMCLine2 entries, then, all checking
    ; is done using VARSESTreatmentMCLine2 entries
    ; 
    ; VARSESTreatmentMCLine2 entries with 0 qty must be considered, since its part of prescription
    ; 
    ; So, First consumption date is taken
    ; Then is checked how many months are left from current month, note to see if
    ; all qty from current month has been taken or not
    ; 
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new intSeq, objTMC, objTMCLine, intDuration, strDateConsumption, int1stMonth, 
		int1stYear, int1stSeq, intLastMonth, intLastYear, strEndDate, intCurMonth, intCurYear,
		intEndMonth, intEndYear
 
	;set intSeq = ""
	;set intSeq = $order(^VARSESPatientConsumptionMCLog(YM,pidTreatment,pidLine,intSeq))
	; if any entry on Log, then residual duration may be calculated. It is not calculated
	; by line anymore
 	;for i=1:1:999 hang 1
 
	set intSeq = ""
	set intSeq = $order(^VARSESPatientConsumptionMCLog(YM,pidTreatment,intSeq))
	
	; no consumption yet, returns full duration
	;set objTMCLine = $get(^VARSESTreatmentMCLine(YM,pidTreatment, pidLine,1))
	;set intDuration = $$$VARSESTreatmentMCLineDuration(objTMCLine)
 
	set objTMC = $get(^VARSESTreatmentMC(YM,pidTreatment,1))
	set intDuration = $$$VARSESTreatmentMCDuration(objTMC)
	if (intDuration = "") {
		set intDuration = $$GetLineDuration^VARSESTreatmentMCLine1(pidTreatment,pidLine)
	}
	quit:(intSeq = "") intDuration
 
	; get first month-year
	set strDateConsumption = $$GetFirstDateLine(pidTreatment)
	; no consumption yet, returns full duration
	quit:(strDateConsumption = "") intDuration
	
 	; there has been a first consumption so
 	; get end date and compare to current
 	set strDateConsumption = $$GetEndDateLine(pidTreatment, pidLine)
 	; 0 residual duration if end date earlier than current
 	quit:(strDateConsumption < $piece($horolog,Y,1)) 0
 
	set strDateConsumption = $$GetMonthYear(strDateConsumption)
	set intEndMonth = $piece(strDateConsumption,Y,1)
	set intEndYear = $piece(strDateConsumption,Y,2)
	
	;get last month-year
	set strDateConsumption = $$GetLastConsumptionDateLine(pidTreatment, pidLine)
	set strDateConsumption = $$GetMonthYear(strDateConsumption)
	set intLastMonth = $piece(strDateConsumption,Y,1)
	set intLastYear = $piece(strDateConsumption,Y,2)
 
	set strDateConsumption = $$GetMonthYear($piece($horolog,Y,1))
	set intCurMonth = $piece(strDateConsumption,Y,1)
	set intCurYear = $piece(strDateConsumption,Y,2)
		
	; if no consumption this month, begin calculation from current month, since there may be
	; a consumption current month else 
	; must check if there still can be consumption this month, if positive
	; then, begin also from curr month, if not, begin calculation from next month
 
 	set fltQtyToBe = $$MaxQtyToBeConsumed(pidTreatment, pidLine)
	if ((intLastMonth = intCurMonth) && (intLastYear = intCurYear)) && (fltQtyToBe = 0) {
		; there has been consumption this month and no more consumption available
		if (intCurMonth = 12) {
			set intLastMonth = 1
			set intLastYear = intLastYear +1
		} else {
			set intLastMonth = intLastMonth + 1			
		}
	} else {
		
		if (intCurMonth = 1) {
			set intLastMonth = 12
			set intLastYear = intCurYear -1
		} else {
			set intLastMonth = intCurMonth - 1
			set intLastYear = intCurYear				
		}
	} 
 
	quit (12 * (intEndYear - intLastYear)) + intEndMonth - intLastMonth
 
	 
GetFirstDateLine(pidTreatment)
    /*-------------------------------------------------------------------------------
    ; Returns da Date of the first treatment consumption. Before, it was returned
    ; the date of first line consumption
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new intSeq, strDateConsumption, objConsumption, idLine, strPreviousDateConsumption
	
	set strDateConsumption = ""
	quit:(pidTreatment = "") ""
 
	set idLine = ""
	for {
		set idLine = $order(^VARSESPatientConsumptionMCLog(YM,pidTreatment,idLine))
		quit:(idLine = "")
		set intSeq = ""
		for {
			set intSeq = $order(^VARSESPatientConsumptionMCLog(YM,pidTreatment,idLine,intSeq))
			quit:(intSeq = "")
			set objConsumption = $get(^VARSESPatientConsumptionMCLog(YM,pidTreatment,idLine,intSeq,1))
			set strPreviousDateConsumption = strDateConsumption
			
			set strDateConsumption = +$$$VARSESPatientConsumptionMCLogDateConsumption(objConsumption)
			
			
			if (strPreviousDateConsumption '= "") {
				if (strPreviousDateConsumption < strDateConsumption) {
					set strDateConsumption = strPreviousDateConsumption
				}
			}
		}
	}
	quit strDateConsumption
 
GetLastConsumptionDateLine(pidTreatment, pidLine)
    /*-------------------------------------------------------------------------------
    ; Returns the date of the last registered consumption, with qty not zero
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new intSeq, strDateConsumption, objConsumption
	
	set strDateConsumption = ""
	set intSeq = ""
	for {
		set intSeq = $order(^VARSESPatientConsumptionMCLog(YM,pidTreatment,pidLine,intSeq),-1)
		quit:(intSeq = "")
		set objConsumption = $get(^VARSESPatientConsumptionMCLog(YM,pidTreatment,pidLine,intSeq,1))
		continue:($$$VARSESPatientConsumptionMCLogQtyConsumption(objConsumption) = 0)
		set strDateConsumption = +$$$VARSESPatientConsumptionMCLogDateConsumption(objConsumption)
		quit
	}
	quit strDateConsumption
 
GetEndDateLine(pidTreatment, pidLine)
    /*-------------------------------------------------------------------------------
    ; Get future end date based on first consumption plus duration
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new intDuration, strDateConsumption, strEndDate
 	
	set strDateConsumption = $$GetFirstDateLine(pidTreatment)
 	quit:(strDateConsumption = "") ""
 
 	// Duration is not a header info anymore, it is defined based on
 	// the number of months with defined qties to be picked
 	// pick duration
	;set objTMC = $get(^VARSESTreatmentMC(YM,pidTreatment,1))
	;set intDuration = $$$VARSESTreatmentMCLineDuration(objTMCLine) + $$ToleranceDuration^VARSESTreatmentMCUtil()
	;set intDuration = $$$VARSESTreatmentMCDuration(objTMC) + $$ToleranceDuration^VARSESTreatmentMCUtil()
	set intDuration = $$GetLineDuration^VARSESTreatmentMCLine1(pidTreatment, pidLine) + $$ToleranceDuration^VARSESTreatmentMCUtil()
 
 	// calculate last month-year
	set strEndDate = $$CalculateEndDate(strDateConsumption, intDuration)
	quit (strEndDate - 1)
 
CalculateEndDate(pstrDateConsumption, pintDuration)
    /*-------------------------------------------------------------------------------
    ; Method Usage
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/	
	new int1stMonth, int1stDay, int1stYear, intLastMonth, intLastYear,
		strEndDate, loop
	
	// pick day-month-year MM/DD/YYYY
	set int1stMonth = $piece($zdate(pstrDateConsumption,1),"/",1)
	set int1stDay = $piece($zdate(pstrDateConsumption,1),"/",2)
	set int1stYear = $piece($zdate(pstrDateConsumption,1),"/",3)
 
 	// calculate last month-year
	set intLastMonth = (int1stMonth + pintDuration) # 12
	if (intLastMonth = 0) set intLastMonth = 12
	set intLastYear = (int1stMonth + pintDuration) \ 13 + int1stYear
  	
  	// build end date
	set strEndDate = intLastMonth _ "/" _ int1stDay _ "/" _ intLastYear
	;set strEndDate = $zdateh(strEndDate,1)
	set strEndDate = $zdateh(strEndDate,1,,,,,,,1)
	
	// if result 1 because an invalid day for the given month (ex: Feb-31)
	if (strEndDate = 1) {
		for loop=1:1:3 {
			set int1stDay = int1stDay - 1
			set strEndDate = intLastMonth _ "/" _ int1stDay _ "/" _ intLastYear
			set strEndDate = $zdateh(strEndDate,1,,,,,,,1)
			continue:(strEndDate = 1) 
			quit
		}
	} 
	// last day is the one before
	quit (strEndDate - 1)
	
 
 
 
	;
	;
	; Routines for qty control
	;
	;
 
	
QtyResidual(pidTreatment, pidLine)
    /*-------------------------------------------------------------------------------
    ; Method Usage
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	// QtyTotal - QtyConsumed
	new objTMC, objTMCLine, intDurationResidual, fltQtyTotal
 
 	set objTMC = $get(^VARSESTreatmentMC(YM,pidTreatment, 1))
	
	set objTMCLine = $get(^VARSESTreatmentMCLine(YM,pidTreatment, pidLine,1))
	;set fltQtyTotal = $$$VARSESTreatmentMCLineQuantity(objTMCLine) * $$$VARSESTreatmentMCDuration(objTMC)
	set fltQtyTotal = $$GetTotalLineQty^VARSESTreatmentMCLine1(pidTreatment,pidLine)
	quit (fltQtyTotal - $$QtyConsumed(pidTreatment, pidLine))
	
QtyConsumed(pidTreatment, pidLine)
    /*-------------------------------------------------------------------------------
    ; Method Usage
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	// sum QtyConsumption on Log
	new intSeq,fltQtyConsumed, objMCLog
	
	set fltQtyConsumed = 0
	set intSeq = ""
	for {
		set intSeq = $order(^VARSESPatientConsumptionMCLog(YM,pidTreatment,pidLine,intSeq))
		quit:(intSeq = "")
		set objMCLog = $get(^VARSESPatientConsumptionMCLog(YM,pidTreatment,pidLine,intSeq,1))
		set fltQtyConsumed = fltQtyConsumed + $$$VARSESPatientConsumptionMCLogQtyConsumption(objMCLog)
	}
	quit fltQtyConsumed
	
MaxQtyToBeConsumed(pidTreatment, pidLine)
    /*-------------------------------------------------------------------------------
    ; Return maximum qty which may be consumed current month. It is composed of
    ; defined qty plus additional tolerance minus what have been consumed this month.
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new fltQuantity, objTreatmentLine, fltQtyResidual, fltQtyAdditional, fltConsumed
	;for i=1:1:999 hang 1
	set fltQuantity = 0
	
	;if ($$IsLineActive(pidTreatment, pidLine)) {
 
		set objTreatmentLine = $get(^VARSESTreatmentMCLine(YM,pidTreatment,pidLine,1))
		quit:($$$VARSESTreatmentMCLineCancel(objTreatmentLine)) fltQuantity
		
		;set fltQuantity = $$$VARSESTreatmentMCLineQuantity(objTreatmentLine) 
		
		set fltQuantity = $$GetThisMonthLineQty^VARSESTreatmentMCLine1(pidTreatment, pidLine)
		set fltConsumed = $$GetQtyConsumedCurrMonth(pidTreatment, pidLine)
 
		set fltQtyResidual = $$QtyResidual(pidTreatment,pidLine)
		
		;5.5.   Não limitar a quantidade dispensada à quantidade mensal, 
		;		mas à quantidade total prescrita
		set fltQtyAdditional = fltQuantity * $$ToleranceConsumption^VARSESTreatmentMCUtil()
		
		set fltQuantity = fltQuantity - fltConsumed + fltQtyAdditional
		
		;if (fltQuantity > fltQtyResidual) {
			set fltQuantity = fltQtyResidual
		;} 
	;}
	quit fltQuantity
 
 
 
GetQtyConsumedCurrMonth(pidTreatment, pidLine)
    /*-------------------------------------------------------------------------------
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new intMonth, intYear,intCurMonth,intCurYear,intSeq,fltQtyConsumed,objConsumption,
		strDateConsumption
 
 	;for i=1:1:999 hang 1 
	set intCurMonth = $piece($zdate($piece($horolog,",",1),1),"/",1)
	set intCurYear = $piece($zdate($piece($horolog,",",1),1),"/",3)
 
	
	set fltQtyConsumed = 0
	set intSeq = ""
	for {
		set intSeq = $order(^VARSESPatientConsumptionMCLog(YM,pidTreatment,pidLine,intSeq))
		quit:(intSeq = "")
		set objConsumption = $get(^VARSESPatientConsumptionMCLog(YM,pidTreatment,pidLine,intSeq,1))
		continue:($$$VARSESPatientConsumptionMCLogQtyConsumption(objConsumption) = 0)
		set strDateConsumption = +$$$VARSESPatientConsumptionMCLogDateConsumption(objConsumption)
		set strDateConsumption = $$GetMonthYear(strDateConsumption)
		set intMonth = $piece(strDateConsumption,Y,1)
		set intYear = $piece(strDateConsumption,Y,2)
 
		if (intCurMonth = intMonth) && (intCurYear = intYear) {
			set fltQtyConsumed = fltQtyConsumed + $$$VARSESPatientConsumptionMCLogQtyConsumption(objConsumption)
		}
	}
	quit fltQtyConsumed
 
 
GetTextOnConsumption(pidTreatment, pidLine)
    /*-------------------------------------------------------------------------------
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new strConsumption, idxLine, idLine1, fltQty, objLine1, strMonth, fltExcesso, arrQuantity
	;if YBED="HEBERPT" for i=1:1:999 hang 1
	
	;for i=1:1:100 hang 1
	
	set fltExcesso = 0
	set idLine1 = ""
	set idxLine = $$$Index(pidLine)
	
	for {
		set idLine1 = $order(^VARSESTreatmentMCLine1s(YM,1,idxLine,pidTreatment,idLine1))
		quit:(idLine1 = "")
	
		set objLine 	  		   = $get(^VARSESTreatmentMCLine1(YM, pidTreatment, idLine1, 1))
		set intQuantidadeAConsumir = $$$VARSESTreatmentMCLine1QuantityperMonth(objLine)
		
		set fltQty = $$GetQtyConsumedOnMonth(pidTreatment, pidLine, idLine1)
		set strMonth = $$GetLine1TxtMonth^VARSESTreatmentMCLine1(pidTreatment,idLine1)
		set strMonth = $extract(strMonth,1,3)
		
		// Adicionado a quantidade do mês atual ao excesso do anterior.
		set fltQty = fltQty + fltExcesso
		set fltExcesso = 0
		
		// Se a quantidade consumida for maior que a projetada, criar um excesso.
		if fltQty > intQuantidadeAConsumir {
 
			set fltExcesso = fltQty - intQuantidadeAConsumir
			set arrQuantity(idLine1) = strMonth_Y_intQuantidadeAConsumir
		} else { // senào, salvar a quantidade consumida.
			set arrQuantity(idLine1) = strMonth_Y_fltQty
		}
	}
	
	// Se tiver sobrado um excesso, colocá-lo no último mês.
	if fltExcesso > 0 {
		set idLine1 = $order(arrQuantity(""), -1)
		set fltQty = $piece(arrQuantity(idLine1), Y, 2)
		set fltQty = fltQty + fltExcesso
		set $piece(arrQuantity(idLine1), Y, 2) = fltQty
	}
	
	set strConsumption = ""
	// Criando o texto.
	$$$Order1(arrQuantity,idLine1)
	
		set strMonth = $piece(arrQuantity(idLine1), Y, 1)
		set fltQty   = $piece(arrQuantity(idLine1), Y, 2)
		
		set strConsumption = strConsumption_"("_strMonth_")"_fltQty_" "
	
	$$$End
	
	quit strConsumption
 
GetQtyConsumedOnMonth(pidTreatment, pidLine, pidLine1)
    /*-------------------------------------------------------------------------------
    ;
    ; Params:
    ;			pidLine1: counter of Line1
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new intMonth, intYear,intCurMonth,intCurYear,intSeq,fltQty,objConsumption,
		strDateConsumption, idLine1, intReg, intMonthCounter, idxLine, intTheMonth, intTheYear,
		fltQtyConsumed
 	;for i=1:1:999 hang 1 
 
	set fltQty = 0
	set strDateConsumption = $$GetFirstDateLine(pidTreatment)
 	quit:(strDateConsumption = "") fltQty
 
 	// find month number of pidLine1
 	set intReg = 0
 	set intMonthCounter = 0
 	set idxLine = $$$Index(pidLine)
 	set idLine1 = ""
	for {
		set idLine1 = $order(^VARSESTreatmentMCLine1s(YM,1,idxLine,pidTreatment,idLine1))
		quit:(idLine1 = "")
		set intReg = intReg + 1
		if (idLine1 = pidLine1) {
			set intMonthCounter = intReg
			quit
		}
	}
 	quit:(intMonthCounter = 0) fltQty
 	
 	// find month - year of pidLine1
 	// note -1, since if is first month, then is corrent, if second, then add 1, so on..
 	set strDateConsumption = $$CalculateEndDate(strDateConsumption, intMonthCounter -1)
 	set strDateConsumption = $$GetMonthYear(strDateConsumption)
	set intTheMonth = $piece(strDateConsumption,Y,1)
	set intTheYear = $piece(strDateConsumption,Y,2)
 	
 	set fltQtyConsumed = 0
	set intSeq = ""
	for {
		set intSeq = $order(^VARSESPatientConsumptionMCLog(YM,pidTreatment,pidLine,intSeq))
		quit:(intSeq = "")
		set objConsumption = $get(^VARSESPatientConsumptionMCLog(YM,pidTreatment,pidLine,intSeq,1))
		continue:($$$VARSESPatientConsumptionMCLogQtyConsumption(objConsumption) = 0)
		set strDateConsumption = +$$$VARSESPatientConsumptionMCLogDateConsumption(objConsumption)
		set strDateConsumption = $$GetMonthYear(strDateConsumption)
		set intMonth = $piece(strDateConsumption,Y,1)
		set intYear = $piece(strDateConsumption,Y,2)
 
		if (intTheMonth = intMonth) && (intTheYear = intYear) {
			set fltQtyConsumed = fltQtyConsumed + $$$VARSESPatientConsumptionMCLogQtyConsumption(objConsumption)
		}
	}
	quit fltQtyConsumed 
 
IsTreatmentMonthlyConsumptionAvailable(pidTreatment)
    /*-------------------------------------------------------------------------------
    ; Method Usage
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
    ; 10-Feb-2014	shobby		SESDF-884: Quit as soon as we find an available line.
	; 31-Aug-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	new blnAvailable, idTreatmentMCLine
	
	set blnAvailable = $$$NO
 	set idTreatmentMCLine = ""
 	for {
		set idTreatmentMCLine = $order(^VARSESTreatmentMCLine(YM,pidTreatment,idTreatmentMCLine))
		quit:(idTreatmentMCLine = "")
		continue:($$MaxQtyToBeConsumed(pidTreatment,idTreatmentMCLine) = 0)
		set blnAvailable = $$$OK
		quit ;SESDF-884
 	}
	quit blnAvailable
 
 
GetLastConsumptionsTxt(pidPatient,pblnShort,pblnKomma)
    /*-------------------------------------------------------------------------------
    ; 
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
	; 13-Dec-2008	heber		SRBRxxxxx: created
    ;-------------------------------------------------------------------------------*/
	// ok9
	new lstTMC, intLen, lstTreatment, strTreatment, idTreatment, loop, strTxt, strTxt1,
		intSeq, strDateConsumption, objConsumption, idLine, fltQty, arrConsumption
 
	set lstTMC = $$GetTreatmentsMC^VARSESTreatmentMC(pidPatient)
	quit:(lstTMC = "") ""
 
	set arrConsumption = ""
	
	set strTxt = ""
 	set lstTreatment = ""
	set intLen = $LISTLENGTH(lstTMC)
	quit:(intLen = 0) ""
 	
 	for loop=1:1:intLen {
	 	set strTreatment = $listget(lstTMC,loop)
		set idTreatment = $piece(strTreatment,Y,1)		
		
		if ($data(^VARSESPatientConsumptionMCLog(YM,idTreatment)) > 0) {
			set idLine = ""
			for {
				set idLine = $order(^VARSESPatientConsumptionMCLog(YM,idTreatment,idLine))
				quit:(idLine = "")
				
				set intSeq = ""		
				for {
					set intSeq = $order(^VARSESPatientConsumptionMCLog(YM,idTreatment,idLine,intSeq),-1)
					quit:(intSeq = "")
					
					set objConsumption = $get(^VARSESPatientConsumptionMCLog(YM,idTreatment,idLine,intSeq,1))
					set fltQty = $$$VARSESPatientConsumptionMCLogQtyConsumption(objConsumption)
					set strDateConsumption = $$$VARSESPatientConsumptionMCLogDateConsumption(objConsumption)
					set arrConsumption(+strDateConsumption,$piece(strDateConsumption,YKOMMA,2),idTreatment,idLine) = fltQty
				}
			}
		}
	}	
	
	new intTMC, strDate, strTime 
	
	set intTMC = 0
	set strTxt = ""
	set strDate = ""
	for {
		set strDate = $order(arrConsumption(strDate),-1)
		quit:((strDate = "") || ((pblnShort) && (intTMC = 3)))
		set strTime = ""
		for {
			set strTime = $order(arrConsumption(strDate,strTime),-1)
			quit:((strTime = "") || ((pblnShort) && (intTMC = 3)))
			
			set idTreatment = ""
			for {
				set idTreatment = $order(arrConsumption(strDate,strTime,idTreatment),-1)
				quit:(idTreatment = "")
				set intTMC = intTMC + 1
				quit:((pblnShort) && (intTMC = 3))
				set idLine=""
				for {
					set idLine = $order(arrConsumption(strDate,strTime,idTreatment,idLine),-1)
					quit:(idLine = "")
					set strTxt1 = $$$Text($listbuild(334029,$$^WWWDATE(strDate)_" "_$$^WWWTIME(strTime),idTreatment,idLine,arrConsumption(strDate,strTime,idTreatment,idLine)))
					if (strTxt = "") {
						set strTxt = strTxt1
					} else {
						set strTxt = strTxt _ $select(pblnKomma=$$$OK:",",1:$CHAR(10) _ $CHAR(13)) _ strTxt1
					}
				}
			}
		}
	}
	quit strTxt
]]></Routine>
</Export>