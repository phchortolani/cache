<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMUtilRtn" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMUtilRtn
    ;-------------------------------------------------------------------------------
    ; Common Utilities for Routines
    ; 
    ; See also : 
    ; 	COMUtilDate		Date/Time Utilities
    ; 	COMUtilStr		String Manipulation
    ; 	COMUtilGlo		Global Manipulation
    ; 	COMUtilClass	@netManager Class Utilities
	; 
	; History:
	; 11-Jul-2005	GRF		Created; moved routines from FINUtils; fix () after &&
    ;-------------------------------------------------------------------------------
#include COMConst
#include WWWConst
#include COMSYS
	; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	; 
	;      UTILITY USAGE
	;      =============
	; 
	; 1a.  Generate XREF list of tags used in WWW & other classes (may
	;      include Globals)
	;         do ANMTagCheck^COMUtilRtn
	;     
	;      creates
	;         ^CacheTemp("ANMTagCheck")           Data found - passes $TEXT test
	;         ^CacheTemp("ANMTagCheckError")      Data found - fails  $TEXT test
	;         ^CacheTemp("ANMTagCheckUsed")       Data Locations where entries found
	;
	; 1b.  With session logging on display collected data;
	;         do List^COMUtilRtn
	;      then
	;         do ListError^COMUtilRtn
	; 
	;      Output :
	;         Routine : Tag  /t  Global  /t  Subscripts  /t  D#  /t  objData
	; 
	; 2.   Generate XREF list of tags used in routines
	;         do CheckAll^COMUtilRtn 
	;      creates
	;         ^CacheTemp("COMUtilRtn","Global")   Global used in subroutine
	;         ^CacheTemp("COMUtilRtn","Tags")     Tag    used in subroutine
	;         ^CacheTemp("COMUtilRtn","TagD")     Tag Definition found
	;        
	; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
ANMTagCheck
	;-------------------------------------------------------------------------------
	; @Net Manager Tag Check
	;
	; Returns:
	;
	; History:
	; 14-Jul-2005	GRF		Add SALCSTButton
	; 11-Jul-2005	GRF		Moved from FINUtils; split off Search for managing forms
	; 						that don't start with WWW
	; 07-Jul-2005	GRF		Include ^WWW itself and ^SALINFOCommand; preserve data
	; 02-Jun-2004	SCR		Created
	;-------------------------------------------------------------------------------
	
	;+++++++++++++++++++++++++++++++++++++++++++++++++++
	; Known Locations
	; 	
	; 	?	SALCSTButton	 37
	;	SALINFOCommand		  5		Code On Blur
	;	SALINFOCommand		  6		Function for Data
	;	SALINFOCommand		  8		Data Storage Code
	;	SALINFOCommand		  9		Data List Code
	;	SALINFOCommand		 10		Code On Click
	;	?	SALINFOCommand	 12
	;	STKBarcodeRelation	  4		Callback Routine
	;	?	WWW001			 10
	;	WWW004				  7		Transfer Trigger For Form
	;	WWW009				  1		Text
	;	?	WWW012			 29
	;	?	WWW012			 30
	;	?	WWW012			114
	;	WWW120				 14		Execute After Primary Key
	;	WWW120				 15		Execute After Button Line
	;	WWW120				 16		Execute After Saving Of Data Records
	;	WWW120				 17		Execute After Deletion Of Data Records
	;	WWW120				 18		Execute After Modification Of Data Records
	;	WWW120				 59		Execute After Data Fields
	;	WWW120				 86		Execute Before Deletion Data Record
	;	WWW120				 87		Execute Before Delete Possibility
	;	WWW120				 89		Execute Before Saving Data Record
	;	WWW120				 93		Execute Before Buttonline
	;	WWW120				114		Remarks
	;	WWW120				116			?
	;	WWW120				117			?
	;	WWW120				122		When Term In True
	;	WWW120				126		Execute Inside Buttonline
	;	WWW121				 15		Default Variable Input
	;	WWW121				 25		Execute OnChange
	;	WWW121				 26		Execute OnLoad
	;	WWW121				 92		Execute On Form Start (Before Data Field)
	;	WWW121				 97		Execute At Form-Construction
	;	?	WWW121D			 92
	;	?	WWW121D			 97
	;	?	WWW121D			 99
	;	WWW122				 15		Default Variable Input
	;	WWW122				 16		Fixed Input For Hidden Field
	;	WWW122				 25		Execute OnBlur
	;	?	WWW122			 26
	;	WWW122				 92		Execute At Form-Construction (before)
	;	WWW122				 97		Execute At Form-Construction (after)
	;	WWW122				 99		Execute At Form-Construction (within)
	;	?	WWW122D			 92
	;	?	WWW122D			 97
	;	?	WWW122D			 99
	;	WWW123				 24		Execute Before Table Display
	;	WWW1232				  3		Execute
	;	WWW124				  6		Execute OnClick
	;	WWW124				 14		Function (JavaScript) OnClick
	;	?	WWW124			 15
	;	WWW124				 25		Execute For Manual Link
	;	?	WWW124			 52
	;	WWW124				 62		Execute To Check For Disabled
	;	WWW124				 65		Hyper Event OnClick
	;	WWW124				 89			?
	;	WWW126				  1		Default
	;	WWW1261				  1		Data Record
	;	WWW1261				  2			?
	;	WWW1261				  3			?
	;	WWW1261				 13			?
	;	WWW1291				  1		JavaScript
	;	?	WWW131			 20
	;	?	WWW132			 20
	;	WWW133				 20		Execute Befor Print
	;	WWWDRAGDROP			 10		Execute getting  Data
	;	WWWDRAGDROP			 11		Execute after movingment
	;	WWWDRAGDROP			 13		Execute After Right-Click
	;	WWWDRAGDROP			 19		Execute After Data Change
	;	WWWDRAGDROP			 59		Execute After Strg+Move
	;	WWWDRAGDROP			 63		Execute On ALT+Move
	;	WWWTAG				  1		Execute
	;+++++++++++++++++++++++++++++++++++++++++++++++++++
	
	new Glb,Skiplist
	
	do MakeSkiplist(.Skiplist)
	
	kill ^CacheTemp("ANMTagCheck")
	kill ^CacheTemp("ANMTagCheckError")
	kill ^CacheTemp("ANMTagCheckUsed")
	
	set Glb="^SALCSTButton"
	do Search(Glb,.Skiplist)
	
	set Glb="^SALINFOCommand"
	do Search(Glb,.Skiplist)
	
	set Glb="^STKBarcodeRelation"
	do Search(Glb,.Skiplist)
	
	set Glb=$order(^$Global("^WWW"),-1)
	for {
		set Glb=$order(^$Global(Glb))
		quit:Glb=""
		quit:$extract(Glb,1,4)'="^WWW"
		
		continue:Glb="^WWW0031"
		continue:Glb="^WWW126"           ; & WWW1261, WWW1262?
		continue:Glb="^WWW127"
		continue:Glb="^WWW1271"
		continue:Glb="^WWWDATEN"
		continue:Glb="^WWWDICTIONARY"
		continue:Glb="^WWWDUMMY"
		continue:Glb="^WWWERROR"
		continue:Glb="^WWWLAST"
		continue:Glb="^WWWOUT"
		continue:Glb="^WWWPRO"
		continue:Glb="^WWWSOR"
		continue:Glb="^WWWUSER1"
		continue:Glb="^WWWVERSION"
		continue:Glb="^WWWWV"
		continue:Glb="^WWWZWS"
		
		do Search(Glb,.Skiplist)
	}
	write !,"Done"
	quit
	
	; "WWW1205B","WWW126","WWW1262","WWWBENCH",
	; "WWWDATEN","WWWDICTIONARY","WWWDICTIONARY01"
	; "WWWLAST","WWWLOGIN","WWWOUT",
	; "WWWPAGE","WWWPRO","WWWSOR","WWWUSER"
	
MakeSkiplist(Skiplist)
	;-------------------------------------------------------------------------------
	; Do not report the following entries
	;-------------------------------------------------------------------------------
	set Skiplist("WWW002",1)         = ""
	set Skiplist("WWW002",2)         = ""
	set Skiplist("WWW0021",1)        = ""
	set Skiplist("WWW002Save",1)     = ""
	set Skiplist("WWW002Save",2)     = ""
	set Skiplist("WWW003",1)         = ""
	set Skiplist("WWW003",2)         = ""
	set Skiplist("WWW003",15)        = ""
	set Skiplist("WWW003Calc",2)     = ""
	set Skiplist("WWW003CalcSave",2) = ""
	set Skiplist("WWW003Save",1)     = ""
	set Skiplist("WWW003Save",2)     = ""
	set Skiplist("WWW003Save",15)    = ""
	set Skiplist("WWW120",114)       = ""
	
	quit
	
	
Search(Glo,Skiplist)
	;-------------------------------------------------------------------------------
	; x = "^SALINFOCommands(0,1,5,""SaleNotes"")"
	; $ql(x)	4
	; $qs(x,0)	^SALINFOCommands
	; $qs(x,1)	0
	; $qs(x,2)	1
	; $qs(x,3)	5
	; $qs(x,4)	SaleNotes
	;-------------------------------------------------------------------------------
	new Clean,Count,Data,delim,Field,Global,ok,Routine
	new string1,string2,sub,subNo,Tag,Word,WordCount
	
	;set string1 = ",():'$;.<>[]/+-@&*!|\`"
	set string1 = ",():'$;.<>[]/+-@&*!|\`#"_$$$DBLQUOTE
	set string2 = $justify("",$length(string1))   ; matching spaces
	
	write !,Glo
	for  {												; For each node							
		set Glo=$query(@Glo)
		quit:Glo=""
		
		set Data=$get(@Glo)
		continue:Data'["^"
		
		set Global = $translate($qs(Glo,0),"^","")
		; if the data has a '^' it could be a Tag
		for Count=1:1:$length(Data,"~") {
			continue:$data(Skiplist(Global,Count))
			
			set Field=$piece(Data,"~",Count)		; For each Field
			if Field["^" {
				; If the Field has a '^' then break the Field up into series 
				; of words by translating punctuation to spaces
			;	set Clean=$translate(Field,",():'$;.<>[]/+-@&*!|\`","                               ")
				set Clean=$translate(Field,string1,string2)
				for WordCount=1:1:$length(Clean," ") { 		; For each word
					set Word=$piece(Clean," ",WordCount)
					continue:Word'["^"
					continue:Word="^"
		
				;	if Word?1an.an1"^"1a.an {			; if it fits the patern of a Tag then Test it!
					if Word'["=" {
						; exclude   ^GLOBAL=value
						set sub   = ""
						set delim = ""
						
						for subNo=1:1:$ql(Glo) {
							set sub   = sub_delim_$qs(Glo,subNo)
							set delim = ","
						}
						
						set Tag     = $piece(Word,"^",1) set:Tag="" Tag = " "
						set Routine = $piece(Word,"^",2) set:Routine="" Routine = " "
						if '$data(^CacheTemp("ANMTagCheckUsed",Global,Count)) {
							set ^CacheTemp("ANMTagCheckUsed",Global,Count)=$piece($get(^WWW003(0,Global,Count,1)),"~",1)
						}
						
						if $text(@Word)="" {
							set ^CacheTemp("ANMTagCheckError",Routine,Tag,Global,sub,Count)=Field
						} else {
			;				write Glo," ",Count," ",Field," ",Word,!
							set ^CacheTemp("ANMTagCheck",Routine,Tag,Global,sub,Count)=Field
						}
					}
				}
			}
		}
	}
	quit
	
List
	;-------------------------------------------------------------------------------
	; List ANMTagCheck with Tab delimiters
	; 
	; History:
	; 24-Jul-2006	GRF		Naked Reference
	;-------------------------------------------------------------------------------	
	new Count,data,Global,Routine,sub,Tag
	
	set Routine = ""
	for {
		set Routine=$order(^CacheTemp("ANMTagCheck",Routine))
		quit:Routine=""
		
		set Tag = ""
		for {
			set Tag=$order(^CacheTemp("ANMTagCheck",Routine,Tag))
			quit:Tag=""
			
			set Global = ""
			for {
				set Global=$order(^CacheTemp("ANMTagCheck",Routine,Tag,Global))
				quit:Global=""
				
				set sub = ""
				for {
					set sub=$order(^CacheTemp("ANMTagCheck",Routine,Tag,Global,sub))
					quit:sub=""
					
					set Count = ""
					for {
						set Count=$order(^CacheTemp("ANMTagCheck",Routine,Tag,Global,sub,Count))
						quit:Count=""
						
						set data = ^CacheTemp("ANMTagCheck",Routine,Tag,Global,sub,Count)
						write !,Routine_" : "_Tag_$char(9)_Global_$char(9)_sub_$char(9)_Count_$char(9)_data
					}
				}
			}
		}
	}
	quit
	
ListError
	;-------------------------------------------------------------------------------
	; List ANMTagCheckError with Tab delimiters
	;
	; History:
	; 24-Jul-2006	GRF		Naked Reference
	;-------------------------------------------------------------------------------	
	new Count,data,Global,Routine,sub,Tag
	
	set Routine = ""
	for {
		set Routine=$order(^CacheTemp("ANMTagCheckError",Routine))
		quit:Routine=""
		
		set Tag = ""
		for {
			set Tag=$order(^CacheTemp("ANMTagCheckError",Routine,Tag))
			quit:Tag=""
			
			set Global = ""
			for {
				set Global=$order(^CacheTemp("ANMTagCheckError",Routine,Tag,Global))
				quit:Global=""
				
				set sub = ""
				for {
					set sub=$order(^CacheTemp("ANMTagCheckError",Routine,Tag,Global,sub))
					quit:sub=""
					
					set Count = ""
					for {
						set Count=$order(^CacheTemp("ANMTagCheckError",Routine,Tag,Global,sub,Count))
						quit:Count=""
						
						set data = ^CacheTemp("ANMTagCheckError",Routine,Tag,Global,sub,Count)
						write !,Routine_" : "_Tag_$char(9)_Global_$char(9)_sub_$char(9)_Count_$char(9)_data
					}
				}
			}
		}
	}
	quit
	
	; *********************************************************************************
	
CheckAll
	;-------------------------------------------------------------------------------
	;  Process all wrapper <GRF>
	;-------------------------------------------------------------------------------
	new Count,Glo,Name
	
	set Glo="^CacheTemp(""COMUtilRtn"")"
	kill @Glo
	set Name = $order(^rMAC("A"),-1)
	for Count=1:1 {
		set Name = $order(^rMAC(Name))
		quit:Name=""
		
		continue:(Name[".")
		continue:$extract(Name,1,2)="oo"
		continue:$extract(Name,1,3)="OBS"
		continue:$extract(Name,1,3)="OLD"
		continue:$extract(Name,1,8)="CacheSql"
		continue:$extract(Name,1)="z"
		continue:$extract(Name,1,2)="LW"
		continue:$extract(Name,1,2)="PO"
		continue:$extract(Name,1,2)="PK"
		continue:$zcvt($extract(Name,1,3),"U")="JOE"
		continue:$zcvt($extract(Name,1,3),"U")="PJO"
		continue:$zcvt($extract(Name,1,3),"U")="ROB"
		continue:$zcvt($extract(Name,1,3),"U")="SCH"
		
		
		write Count,?8,Name,!
		do Check(Name,Glo)
	}
	quit
	
Check(Name,Glo)	
	;-------------------------------------------------------------------------------
	;  Process one routine
	; 
	; 15-Jul-2005	RPW		SR12981: Newed a variable
	;-------------------------------------------------------------------------------
	new Code,idx,In,Line,Out,Style,synColor,ThisTag,cnt
	
	set ThisTag = Name
	set Code=$$Routine(Name)
	Set In       = ##class(%GlobalCharacterStream).%New()
	Set Out      = ##class(%GlobalCharacterStream).%New()
	Set Style    = ##class(%GlobalCharacterStream).%New()
	Set synColor = ##class(%Library.SyntaxColor).%New()
	
	do synColor.GetCSS(Style,"COS")
	do In.WriteLine(Code)
	do synColor.Color(In,Out,"COS","S")
 
	for cnt=1:1 {
		set idx=32000
		set Line=Out.ReadLine(.idx)
		quit:idx=-1
		
		do Decode(Name,Line,Glo,.ThisTag)
	}
	quit
	
Routine(Name)
	;-------------------------------------------------------------------------------
	; Get Code for a Routine
	; NOTE : Doesn't cover slash star ... star slash comment blocks
	;        Doesn't pick up disabled dot level blocks without specific comments
	;-------------------------------------------------------------------------------
	new Code,CodeLine,Line
	
	quit:Name=""
	
	set Code=""
	set Line=0
	for {
		set Line=$order(^rMAC(Name,0,Line))
		quit:'Line
		
		set CodeLine = ^rMAC(Name,0,Line)
		set CodeLine = $piece(CodeLine,";",1)              ; exclude comments
		set CodeLine = $piece(CodeLine,"//",1)             ; exclude comments
		continue:$translate(CodeLine,$c(9,32,46),"")=""    ; only spaces, tabs or dots
		
		set Code=Code_CodeLine_$c(13,10)
		if $length(Code)>31900 set Code=Code_" ; Routine Greater than 31900" quit 
	}
 
	quit Code
 
Decode(Name,Line,Glo,ThisTag)
    ;-------------------------------------------------------------------------------
    ; Decode Line
    ; 
    ; Definitions of COS_:
    ;	 00 - Error in code
    ;	 01 - Free Space
    ; >	 03 - Tag					<SPAN CLASS="COS_03">AlertInScript</SPAN>
    ; >	 05 - "##class"
    ;	 06 - String constant
   	;	 07 - Comment
   	;	 08 - dot in dot notation
   	;	 09 - & for transfering to another language
   	;	 0D - ( ) , ^
   	; >	 0F - $$ tag prefix
   	;	 10 - ! ( in write statements)
   	;	 11 - cache functions ($piece,$zcvt,$order etc)
   	; >	 12 - Global reference
   	; >	 13 - @ (indirection)
   	;	 14 - variable usage
   	;	 17 - numeric constant
   	;	 18 - comparison/assignment operator (= < > . ' etc)
   	; >	 19 - routine reference
   	;	 20 - cache commands (new,set,if,for,quit,kill,do,write)
   	;	 							<SPAN CLASS="COS_20">set</SPAN>
   	; >	 24 - method for class
   	;	 2A - { } condition wrappers.
   	; 
   	; 
   	; e.g.
   	;	do GetClassesForModule(pidModule,.arrModules)   is converted to
   	;	
	;	<SPAN CLASS="COS_01">	</SPAN>				<SPAN CLASS="COS_20">do</SPAN>
	;	<SPAN CLASS="COS_01"> </SPAN>				<SPAN CLASS="COS_03">GetClassesForModule</SPAN>
	;	<SPAN CLASS="COS_0D">(</SPAN>				<SPAN CLASS="COS_14">pidModule</SPAN>
	;	<SPAN CLASS="COS_0D">,</SPAN>				<SPAN CLASS="COS_18">.</SPAN>
	;	<SPAN CLASS="COS_14">arrModules</SPAN>		<SPAN CLASS="COS_0D">)</SPAN>
   	;	
   	;	set parrModules($$Module(idClass),idClass)=""
   	;	
   	;	<SPAN CLASS="COS_20">set</SPAN>				<SPAN CLASS="COS_01"> </SPAN>
   	;	<SPAN CLASS="COS_14">parrModules</SPAN>		<SPAN CLASS="COS_0D">(</SPAN>
   	;	<SPAN CLASS="COS_0F">$$</SPAN>				<SPAN CLASS="COS_03">Module</SPAN>
   	;	<SPAN CLASS="COS_0D">(</SPAN>				<SPAN CLASS="COS_14">idClass</SPAN>
   	;	<SPAN CLASS="COS_0D">)</SPAN>				<SPAN CLASS="COS_0D">,</SPAN>
   	;	<SPAN CLASS="COS_14">idClass</SPAN>			<SPAN CLASS="COS_0D">)</SPAN>
   	;	<SPAN CLASS="COS_18">=</SPAN>				<SPAN CLASS="COS_06">&quot;&quot;</SPAN>"
   	;   
   	;	set @Glo@("two")=3
	;	
	;	<SPAN CLASS="COS_01"> </SPAN>				<SPAN CLASS="COS_01"> </SPAN>
	;	<SPAN CLASS="COS_01"> </SPAN>				<SPAN CLASS="COS_01"> </SPAN>
	;	<SPAN CLASS="COS_20">set</SPAN>				<SPAN CLASS="COS_01"> </SPAN>
	;	<SPAN CLASS="COS_13">@</SPAN>				<SPAN CLASS="COS_14">Glo</SPAN>
	;	<SPAN CLASS="COS_13">@</SPAN>				<SPAN CLASS="COS_0D">(</SPAN>
	;	<SPAN CLASS="COS_06">&quot;two&quot;</SPAN>	<SPAN CLASS="COS_0D">)</SPAN>
	;	<SPAN CLASS="COS_18">=</SPAN>				<SPAN CLASS="COS_17">3</SPAN>
	;	
	;	set strName=$get(^WWW003(0,pidClass,pintField,1))
	;	
	;	<SPAN CLASS="COS_20">set</SPAN>				<SPAN CLASS="COS_01"> </SPAN>
	;	<SPAN CLASS="COS_14">strName</SPAN>			<SPAN CLASS="COS_18">=</SPAN>
	;	<SPAN CLASS="COS_11">$get</SPAN>			<SPAN CLASS="COS_0D">(</SPAN>
	;	<SPAN CLASS="COS_12">^WWW0031</SPAN>		<SPAN CLASS="COS_0D">(</SPAN>
	;	<SPAN CLASS="COS_17">0</SPAN>				<SPAN CLASS="COS_0D">,</SPAN>
	;	<SPAN CLASS="COS_14">pidClass</SPAN>		<SPAN CLASS="COS_0D">,</SPAN>
	;	<SPAN CLASS="COS_14">pintField</SPAN>		<SPAN CLASS="COS_0D">,</SPAN>
	;	<SPAN CLASS="COS_17">1</SPAN>				<SPAN CLASS="COS_0D">)</SPAN>
	;	<SPAN CLASS="COS_0D">)</SPAN>
	;	
	;	
	;	Builds :
	;	  @Glo@("TagD",^Routine,Tag)=""			Tag Definition
	;	  @Glo@("Tags",^Routine,Tag,ThisTag)	Tag^Routine is called by ThisTag
	;	  @Glo@("Global","^Global",ThisTag)		Global is used by ThisTag
	;	  					May set an objVariable which is used by other code
	;	  @Glo@("Global","@Variable",ThisTag)	Indirection (Variable or Global)
	;	  
	;	  TODO : check ZTRAP / ZETRAP
	;-------------------------------------------------------------------------------
	new Class,Count,Function,LastClass,LastText,NextClass,Start,strVariable
	new Tag,Text,Token,Unused
	
	set Unused  = " "
	set Start   = "<SPAN"
	set Count   = $length(Line,Start)
	
	for Token = 2:1:Count {					; Piece 1 is always null and is ignored
		set Text=$$Token(Line,Token,.Class)
		continue:Class="COS_01"
		
		; TAG Definition & Internal Reference
		; -----------------------------------
		if (Class="COS_03") {
			if (Token=2) {
			;	Tag in column 1 - defined rather than used
				if Text'=Name {
					set ThisTag = Name_" : "_Text
				}
				set @Glo@("TagD",Name,Text)=""
			} elseif Token=Count {
			;	Last entry in line
				set @Glo@("Tags",Name,Text,ThisTag)=""
			} else {
				set Function=$$Token(Line,Token+1,.Class)
				if (Class="COS_0D") && (Function'="^") {
				; not called with explict Routine name - picked up below
					set @Glo@("Tags",Name,Text,ThisTag)=""
				} elseif Class="COS_01" {
					set @Glo@("Tags",Name,Text,ThisTag)=""
				}
			}
		}
 
		; Routine Reference
		; -----------------
		if Class="COS_19" {
			set Tag=" "
			set LastText=$$Token(Line,Token-2,.LastClass)
			if LastClass="COS_03" set Tag=LastText
			set @Glo@("Tags",Text,Tag,ThisTag)=""
		}
		
		if Class="COS_12" {
			set @Glo@("Global",Text,ThisTag) = ""
		}
		
		; Indirection
		; -----------
		if Class="COS_13" {
			set Function=$$Token(Line,Token-2,.LastClass)
			if LastClass'="COS_13" {
			;	exclude second @ in "@glo@(args)"
				set strVariable=$$Token(Line,Token+1,.NextClass)
				set @Glo@("Global","@"_strVariable,ThisTag)=""
			}
		}
	}
	quit
	
Token(Line,TokenNumber,Class) ; Get Token 
	;-------------------------------------------------------------------------------
	; TokenNumber = 2,3,4,... Number of pieces based on "<SPAN"
	; Piece 1 is always null and is ignored
	; 
	; <SPAN CLASS="COS_14">strName</SPAN><SPAN CLASS="COS_18">=</SPAN>
	;      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;              ^^^^^^  ^^^^^^^
	;              Class     Text
	;             (ByRef) (Returned)
	; 
	; e.g.
	; AlertInScript(str)
	;     set strName=""
	; 	
	; <SPAN CLASS="COS_03">AlertInScript</SPAN>		<SPAN CLASS="COS_0D">(</SPAN>
	; <SPAN CLASS="COS_16">str</SPAN>				<SPAN CLASS="COS_0D">)</SPAN>
	; 
	; <SPAN CLASS="COS_01">	</SPAN>					<SPAN CLASS="COS_20">set</SPAN>
	; <SPAN CLASS="COS_01"> </SPAN>					<SPAN CLASS="COS_14">strName</SPAN>
	; <SPAN CLASS="COS_18">=</SPAN>					<SPAN CLASS="COS_06">&quot;&quot;</SPAN>
	;-------------------------------------------------------------------------------
	new Start,End,Seg,Text
	
	set Start = "<SPAN"
	set End   = "</SPAN"
	
	set Seg   = $p(Line,Start,TokenNumber)
	set Class = $piece(Seg,"""",2)
	set Text  = $piece(Seg,">",2)
	set Text  = $piece(Text,"<",1)
	quit Text
	
	; *********************************************************************************
	
CompileAllMAC(pblnShowErrors=$$$NO)
	;-------------------------------------------------------------------------------
	; d CompileAllMAC^COMUtilRtn()
	; zw ^CacheTemp("COMUtilRtn",$job)
	; 
	; Inputs :
	;	pblnShowErrors		Set to $$$YES only if you want the errors listed
	; 
	; History :
	; 19-Dec-2008	GRF		SR16253: Copied from WWWIN to allow manual recompilation
	; 							of all non-system .MAC routines except itself and
	; 							object-based routines
	;-------------------------------------------------------------------------------
	new arrCode,arrErr,idRoutine,loop,strResult
	
	kill ^CacheTemp("COMUtilRtn",$job)
	
	set idRoutine = "%zzzzzzzz"
	for loop=0:1 {
		set idRoutine = $order(^rMAC(idRoutine))
		quit:idRoutine=""
	}
	write !!,loop," Routines to be considered",!!
	
	set idRoutine = "%zzzzzzzz"
	for loop=1:1 {
		set idRoutine = $order(^rMAC(idRoutine))
		quit:idRoutine=""
		
		write:loop#200=0 !,$justify(loop,10)," ",idRoutine
		
		continue:$piece(idRoutine,".",$length(idRoutine,"."))="T1"
		continue:##class(%Dictionary.ClassDefinition).%ExistsId($piece(idRoutine,".",1,$length(idRoutine,".")-1))
		continue:idRoutine="COMUtilRtn"
		continue:$extract(idRoutine)="%"
		
		set strResult = $$ROUTINE^%R(idRoutine_".MAC",.arrCode,.arrErr,"LCS")
		if +strResult=$$$NO {
			set ^CacheTemp("COMUtilRtn",$job,idRoutine) = strResult
			if pblnShowErrors write !,$$FMTERR^%R(.arrErr,.arrCode)
		}
	}
	write !!,"+++++ Done",!!
	
	quit
	
]]></Routine>
</Export>