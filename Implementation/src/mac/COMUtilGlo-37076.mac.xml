<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMUtilGlo" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMUtilGlo
    ;-------------------------------------------------------------------------------
	; Global Manipulation Utilities
    ; 
    ; See also : 
    ; 	COMUtilDate		Date/Time Utilities
    ; 	COMUtils		Other Common Utilities
    ; 	COMUtilStr		String Manipulation
    ; 
	; History:
	; 10-Feb-2005	GRF		Created
    ;-------------------------------------------------------------------------------
#include COMConst
#include COMSYS
#include WWWConst
 
DeQuote(pGlobal="")
    ;-------------------------------------------------------------------------------
	; If a variable contains a global entry as a string with quotes around numeric
	; arguments it cannot be used as a direct comparison with the results of a
	; $query loop since unnecessary quotes are stripped off when the record is stored.
	; 
	; This routine converts a quickly constructed string into one matching the
	; storage version.
	; 
	; e.g. ^DATA("0","REC","2","ORD","59779","DC1","1")    becomes
	;      ^DATA(0,"REC",2,"ORD",59779,"DC1",1)
	; 
	; NOTE : If the string provided does not represent a valid global (e.g. open
	;        parenthesis but no closing one) returns a FUNCTION error.
	; 
	; History:
	; 10-Feb-2005	GRF		SR10478 : Created
    ;-------------------------------------------------------------------------------
	new arg,delimiter,Global,idx,Length,Namesp,Return
	
	quit:pGlobal="" ""
	
	set Return = ""
	set Length = $qlength(pGlobal)
	
	set Namesp = $qsubscript(pGlobal,-1)
	set Global = $qsubscript(pGlobal,0)
	if Namesp="" {
		set Return = Global
	} else {
		set Return = "^|"_$$$DBLQUOTE_Namesp_$$$DBLQUOTE_"|"
		set Return = Return_$piece(Global,"^",2)
	}
	if Length {
		set delimiter = ""
		set Return = Return_"("
		for idx=1:1:Length {
			set arg = $qsubscript(pGlobal,idx)
			if arg=+arg {
				set Return = Return_delimiter_arg
			} else {
				set Return = Return_delimiter_$$$DBLQUOTE_arg_$$$DBLQUOTE
			}
			set delimiter = $$$COMMA
		}
		set Return = Return_")"
	}
	quit Return
	
	
GetClasses(Primary)
    ;-------------------------------------------------------------------------------
	; 05-Jul-2005	Steve S		SR11267: Copied from SALCSTTemplate
	; 
	; Get Class for a Primary Key & The Primary Class
    ;-------------------------------------------------------------------------------
	new Class,Classes,Key,KeyRec
	
	set Classes=Primary
	set Class=""
	for {
		set Class=$order(^WWW001(0,Class)) 
		quit:Class=""
		
		set Key=+$order(^WWW002(0,Class,1,""))
		set KeyRec=$get(^WWW002(0,Class,1,Key))
		if $$$WWW002RelationClass(KeyRec)=Primary {
			set Classes=Classes_","_Class
		}
	}
	quit Classes
	
	
NodeCount(pstrClass,pstrKeys="")
	;-------------------------------------------------------------------------------
	; Get the number of nodes on a subscript level
	; 
	; NOTE: GetNumNodes^COMUtils is probably preferrable over this function
	; 
	; Returns:
	;
	; History:
	; 21-Oct-2005	Steve S		Created
	;-------------------------------------------------------------------------------
	new intCount,strGlobal,idLine,idKeyPart,idx
 
	set intCount=0
	
	if ($get(pstrClass)'="") {
		if (pstrKeys'="") {
			for idx=1:1:$length(pstrKeys,",") {
				set idKeyPart=$piece(pstrKeys,$$$COMMA,idx)
				if '$$$IsNum(idKeyPart) {
					set $piece(pstrKeys,$$$COMMA,idx)=$$$QUOTE(idKeyPart)	
				}	
			}
			set strGlobal="^"_pstrClass_"("_pstrKeys_","
		} else {
			set strGlobal="^"_pstrClass_"("
		}
		
		set idLine=""""""
		
		for {
			set idLine=$order(@(strGlobal_idLine_")"))
			quit:idLine=""
			
			set intCount=intCount+1
 
			if '$$$IsNum(idLine) set idLine=$$$QUOTE(idLine)
		}	
		
	}
 
	quit intCount
	
ListGlobals()
    ;-------------------------------------------------------------------------------
	; Look at all Globals - see if they match an @netManager Class
    ; 
    ; 
	; History:
	; 10-Sep-2008	GRF		Created
    ;-------------------------------------------------------------------------------
	new arrCount,blnClassMatch,idGlo,intLength,loop
	
	kill ^CacheTempCOMUtilGlo
	
	set idGlo="^%zzzzz"
	for loop=0:1 {
		set idGlo=$order(^$Global(idGlo))
		quit:idGlo=""
		if loop#100=0 write !,loop,?10,idGlo
		continue:idGlo["."                        ; Cache Persistent Class Objects
		continue:$extract(idGlo,1,10)="^CacheTemp"
		continue:$extract(idGlo,1,5)="^rINC"
		continue:$extract(idGlo,1,5)="^rMAC"
		continue:$extract(idGlo,1,5)="^rMAP"
		continue:$extract(idGlo,1,5)="^rOBJ"
		continue:$extract(idGlo,1,7)="^rINDEX"
		continue:$extract(idGlo,1,4)="^odd"
		continue:$extract(idGlo,1,6)="^mtemp"
		continue:idGlo="^ROUTINE"
		continue:idGlo="^UTILITY"
		continue:idGlo="^mcq"
		continue:idGlo="^mdd"
		continue:idGlo="^mpriv"
		continue:idGlo="^mqh"
		continue:idGlo="^rBACKUP"
		continue:idGlo="^ERRORS"
 
		
		; Check to see if the class contains user data
		set blnClassMatch = $data(^WWW001(0,$extract(idGlo,2,999),1))
		if 'blnClassMatch {
			set intLength = $length(idGlo)
			if $extract(idGlo,intLength)="s" {
				set blnClassMatch = $data(^WWW001(0,$extract(idGlo,2,intLength-1),1))
			}
		}
		if 'blnClassMatch {
			set intLength = $length(idGlo)
			if $extract(idGlo,intLength)="b" {
				set blnClassMatch = $data(^WWW001(0,$extract(idGlo,2,intLength-1),1))
			}
		}
		if 'blnClassMatch {
			set intLength = $length(idGlo)
			if $extract(idGlo,intLength-2,intLength)="bi" {
				set blnClassMatch = $data(^WWW001(0,$extract(idGlo,2,intLength-2),1))
			}
		}
		
		set ^CacheTempCOMUtilGlo(blnClassMatch,idGlo) = ""
		set arrCount(blnClassMatch) = $get(arrCount(blnClassMatch)) + 1
	}
	
	write !!,loop
	write !,"Match    : ",$get(arrCount($$$YES))
	write !,"No Match : ",$get(arrCount($$$NO))
	
	quit
	
]]></Routine>
</Export>