<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINRPGLBankReconTransaction" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINRPGLBankReconTransaction
	#include COMSYS
	#include FINConst
 
	#define NullCheck(%1)	$select($get(%1)="":" ",$$$YES:%1)
 
TransactionsExecute(pstrCompany,pstrLanguage,pstrUser,pidBankRecon,pblnCleared,pblnDeposit,pblnCheque) 
    /*-------------------------------------------------------------------------------
    ; Method Usage
    ;
    ; Params:
    ; pstrCompany : The company number for the report
    ; pstrLanguage: The language of the user
    ; pstrUser    : The YUSER of the current user for the report
    ; pidBankRecon: The id of the bank reconciliation record
    ; pblnCleared : Whether to show cleared or uncleared records.
    ;
    ; ByRefs:
    ;
    ; Returns:
    ; The row count from the below query
    ;
    ; History:
    ; 18-Oct-2006	Steve S		SR15108: Don't show charges/interest with other trans
    ; 12-May-2006	Steve S		SR14157: Sort the data
    ; 06-Dec-2005	RobertW		SR13813: Created
    ;-------------------------------------------------------------------------------*/
	new intRowCount
 
	kill ^CacheTempFINGLBankReconQueryTT(pstrUser)
	kill ^CacheTempFINGLBankReconQuery(pstrUser)
 
	if 'pblnCleared { 
 		do GetTransactions(pstrCompany,pstrLanguage,pstrUser,pidBankRecon,$$$NO,pblnDeposit,pblnCheque)
 		do GetTransactions(pstrCompany,pstrLanguage,pstrUser,pidBankRecon," ",pblnDeposit,pblnCheque)
	} else {
		do GetTransactions(pstrCompany,pstrLanguage,pstrUser,pidBankRecon,$$$YES,pblnDeposit,pblnCheque)
	}
	
	if pblnCleared {
		//SR15108
		//do GetChargesInterest(pstrCompany,pstrLanguage,pstrUser,pidBankRecon,pblnCleared)
		set intRowCount=$$NormaliseData(pstrUser)
	} else {
		set intRowCount=$order(^CacheTempFINGLBankReconQuery(pstrUser,""),-1)
	}
	
	kill ^CacheTempFINGLBankReconQueryTT(pstrUser)
	
	do SortData(pstrUser,pstrLanguage) //SR14157
	
	quit intRowCount
	
 
SortData(pstrUser,pstrLanguage)
	;-------------------------------------------------------------------------------
	; Rearrange the transactional data into Date, Type, Account order.
	;
	; Params: pstrUser		: The YUSER number
	; 		  pstrLanguage	: The language we're in
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 19-May-2006	JW&SS		SR14157: Code cleanup - query, counter etc
	; 12-May-2006	Steve S		SR14157: Created
	;-------------------------------------------------------------------------------
	new idRow,lstRow,dteTran,strType,idAccnt,query
 
	kill ^CacheTempSort(pstrUser)
 	
	set idRow=""
	for {
		set idRow=$order(^CacheTempFINGLBankReconQuery(pstrUser,idRow))
		quit:(idRow="")
		
		set lstRow=$get(^CacheTempFINGLBankReconQuery(pstrUser,idRow))
		
		if (lstRow'="") {
			set dteTran		=$listget(lstRow,5)
			set strType		=$listget(lstRow,6)
			set idAccnt		=$listget(lstRow,3)
			
			// Shouldn't be null, but check anyway as a failsafe.
			
			set dteTran		=$$$NullCheck(dteTran)
			set strType		=$$$NullCheck(strType)
			set idAccnt		=$$$NullCheck(idAccnt)
			
			// idRow simply gives an id - to distinguish between two with same subscripts
			set ^CacheTempSort(pstrUser,dteTran,strType,idAccnt,idRow)=lstRow
		}
	}
	
	kill ^CacheTempFINGLBankReconQuery(pstrUser)
	
	set idRow=0
	set dteTran=""
	
	// Loop through sort array and place back in query array
	$$$Query("^CacheTempSort("""_pstrUser_""")",query)
		set lstRow=@query
		set $list(lstRow,5)=$$^WWWDATE($listget(lstRow,5),pstrLanguage)
		set ^CacheTempFINGLBankReconQuery(pstrUser,$increment(idRow))=lstRow	
	$$$End
	
	/*
	for {
		set dteTran=$order(^CacheTempSort(pstrUser,dteTran))
		quit:(dteTran="")
		
		set strType=""
		for {
			set strType=$order(^CacheTempSort(pstrUser,dteTran,strType))
			quit:(strType="")
			
			set idAccnt=""
			for {
				set idAccnt=$order(^CacheTempSort(pstrUser,dteTran,strType,idAccnt))
				quit:(idAccnt="")
				
				set intCounter=""
				for {
					set intCounter=$order(^CacheTempSort(pstrUser,dteTran,strType,idAccnt,intCounter))
					quit:(intCounter="")
					
					set lstRow=$get(^CacheTempSort(pstrUser,dteTran,strType,idAccnt,intCounter))
					set $list(lstRow,5)=$$^WWWDATE(dteTran,pstrLanguage)
					set ^CacheTempFINGLBankReconQuery(pstrUser,$increment(idRow))=lstRow	
				}
			}
		}	
	}
	*/
	kill ^CacheTempSort(pstrUser)
 
	quit
		
		
TransactionsFetch(pstrUser,pintRow) 
    /*-------------------------------------------------------------------------------
    ; Fetches a row for the query
    ;
    ; Params:
    ; pstrUser: The YUSER of the current user for the report
    ; pintRow : The row to retrieve.
    ;
    ; ByRefs:
    ;
    ; Returns:
    ; A listbuild of the row. In this case it's already got a $lb, so just return the
    ; record.
    ;
    ; History:
    ; 06-Dec-2005	RobertW		SR13813: Created
    ;-------------------------------------------------------------------------------*/
 
	quit $get(^CacheTempFINGLBankReconQuery(pstrUser,pintRow))
	
TransactionsClose(pstrUser) 
    /*-------------------------------------------------------------------------------
    ; kill and query data.
    ;
    ; Params:
    ; pstrUser: The YUSER of the current user for the report
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Dec-2005	RobertW		SR13813: Created
    ;-------------------------------------------------------------------------------*/
 
	kill ^CacheTempFINGLBankReconQuery(pstrUser)
	quit
	
GetTransactions(pstrCompany,pstrLanguage,pstrUser,pidBankRecon,pblnCleared,pblnDeposit,pblnCheque) 
    /*-------------------------------------------------------------------------------
    ; Get the transactions for this bank recond which are either cleared or uncleared
    ;
    ; Params:
    ; pstrCompany : The company number for the report
    ; pstrLanguage: The language of the user
    ; pstrUser    : The YUSER of the current user for the report
    ; pidBankRecon: The id of the bank reconciliation record
    ; pblnCleared : Whether to show cleared or uncleared records.
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
    ; 26-Apr-2006	Steve S		SR14157: Mod'd call to GetTranType.  Removed WWWDATE
    ; 23-Feb-2006	Steve S		SR14213: Only add if correct parameter is being used
    ; 16-Feb-2006	RPW			SR13675: Modified to FINGLBankReconMatched instead of FINGLBankReconCleared
    ; 06-Dec-2005	RobertW		SR13813: Created
    ;-------------------------------------------------------------------------------*/
	new idTran,idTranLine,objFINGLTranLine,curDebit,curCredit,idAccount,strReference
	new objBankReconMatched,idLine,dteTranDate,strTranType,intRowCount
	
	set intRowCount=0
 
	set idLine=""
	
	for {
		set idLine=$order(^FINGLBankReconMatcheds(pstrCompany,1,pblnCleared,pidBankRecon,idLine)) // SR13675
		quit:(idLine="")
		
		set objBankReconMatched=$get(^FINGLBankReconMatched(pstrCompany,pidBankRecon,idLine,1)) // SR13675
		
		set idTran=		$$$FINGLBankReconMatchedTransaction1(objBankReconMatched) // SR13675
		set idTranLine=	$$$FINGLBankReconMatchedTransactionLine(objBankReconMatched) // SR13675
		set curDebit=	$$$FINGLBankReconMatchedDeposit(objBankReconMatched) // SR13675
		set curDebit=	$$$FCBase(curDebit)
		set curCredit=	$$$FINGLBankReconMatchedWithdrawal(objBankReconMatched) // SR13675
		set curCredit=	$$$FCBase(curCredit)
		
		continue:(+curDebit'=0)&&('pblnDeposit) ;SR14213
		continue:(+curCredit'=0)&&('pblnCheque) ;SR14213
		
		set idAccount=		$$$FINGLBankReconMatchedAccount(objBankReconMatched) // SR13675
		set strReference=	$$$FINGLBankReconMatchedReference(objBankReconMatched) // SR13675
		set dteTranDate=	$$$FINGLBankReconMatchedTransactionDate(objBankReconMatched) // SR13675 SR14157
		set strTranType=	$$GetTranType($$$FINGLBankReconMatchedTransactionType(objBankReconMatched)) //SR14157
		//set strTranType=	$$GetTranType(pstrCompany,idTran,idTranLine,pstrLanguage)
			
		if pblnCleared {
			set ^CacheTempFINGLBankReconQueryTT(pstrUser,strTranType,$order(^CacheTempFINGLBankReconQueryTT(pstrUser,strTranType,""),-1)+1)=$listbuild(curDebit,curCredit,idAccount,strReference,dteTranDate,strTranType)
		} else {
			set ^CacheTempFINGLBankReconQuery(pstrUser,$increment(intRowCount))=$listbuild(curDebit,curCredit,idAccount,strReference,dteTranDate,strTranType)
		}
				
	}
	
	quit
	
GetChargesInterest(pidCompany,pidLanguage,pYUSER,pidBankRecon) 
    /*-------------------------------------------------------------------------------
    ; Get the charges/interest for this bank reconciliation
    ;
    ; Params:
    ; pidCompany : The company number for the report
    ; pidLanguage The language of the user
    ; pYUSER    : The YUSER of the current user for the report
    ; pidBankRecon: The id of the bank reconciliation record
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
    ; 18-Jan-2007	Steve S		SR15355: Use namespace subscript
    ; 19-Oct-2006	Steve S		SR15108: Made part of FINGLBankReconGLAdj query
    ; 26-Apr-2006	Steve S		SR14157: Show Charge/Interest as "GL Adj". Removed WWWDATE
    ; 06-Dec-2005	RobertW		SR13813: Created
    ;-------------------------------------------------------------------------------*/
	new idLine,objBankReconLine,intRow,curDebit,curCredit,idAccount,strReference
	new dteTranDate,strTranType,strTranDate,strNS
	new YM,SPRACHE,YUSER
 
	// Charges and Interest are only done for cleared transactions
 
	set YM 		 = $get(pidCompany)
	set SPRACHE  = $get(pidLanguage)
	set YUSER	 = $get(pYUSER)
	
	quit:(YM="")||(SPRACHE="")||(YUSER="")
	
	set strNS = $zutil(5) //SR15355
	
	set idLine=""
	for {
		set idLine=$order(^FINGLBankReconLine(YM,pidBankRecon,idLine))
		quit:idLine=""
		
		set objBankReconLine=$get(^FINGLBankReconLine(YM,pidBankRecon,idLine,1))
		continue:objBankReconLine=""
		
		set curDebit=+$$$FINGLBankReconLineDebit(objBankReconLine)
		//set curDebit=$$$FCBase(curDebit)
		
		set curCredit=+$$$FINGLBankReconLineCredit(objBankReconLine)
		//set curCredit=$$$FCBase(curCredit)
		
		set idAccount		= $$$FINGLBankReconLineAccount(objBankReconLine)
		set strReference 	= $$$FINGLBankReconLineReference(objBankReconLine)
		set dteTranDate		= $$$FINGLBankReconLineTransactionDate(objBankReconLine)	//SR14157
		set strTranDate		= $$Date^COMRPUtil(dteTranDate,SPRACHE)
		
		if dteTranDate="" set dteTranDate=" " // avoid subscript problems
		
		//set strTranType=$$^WWWTEXT("Fin00150",,,pstrLanguage)  ;GL Adj. //SR14157
		//set strTranType=$$GetChargeIntType(pstrCompany,pidBankRecon,idLine,pstrLanguage)
		
		
		//SR15355
		set ^CacheTempData(strNS,YUSER,dteTranDate,$increment(^CacheTempData(strNS,YUSER)))=$listbuild(strTranDate,curDebit,curCredit,idAccount,strReference)
	}
 
	do PrepareData^COMRPUtil(YUSER)
 
	quit
	
NormaliseData(pstrUser) 
    /*-------------------------------------------------------------------------------
    ; Move the data into the query format.
    ; Due to the data originally being sorted by the transaction type, we need to get
    ; that in numerical order as well.
    ;
    ; Params:
    ; pstrUser: The YUSER of the current user for the report
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Dec-2005	RobertW		SR13813: Created
    ;-------------------------------------------------------------------------------*/
	new intRowCount,strTranType,intRow
	
	set intRowCount=0
	set strTranType=""
	for {
		set strTranType=$order(^CacheTempFINGLBankReconQueryTT(pstrUser,strTranType))
		quit:strTranType=""
		
		set intRow=""
		for {
			set intRow=$order(^CacheTempFINGLBankReconQueryTT(pstrUser,strTranType,intRow))
			quit:intRow=""
			
			set ^CacheTempFINGLBankReconQuery(pstrUser,$increment(intRowCount))=^CacheTempFINGLBankReconQueryTT(pstrUser,strTranType,intRow)
		}
	}
	
	quit intRowCount
	
	
GetTranType(pstrType="")
    ;-------------------------------------------------------------------------------
    ; Return the tran line type (deposit/payment)
    ;
    ; Returns: String
    ;
    ; History:
    ; 26-Apr-2006	Steve S		SR14157: Pass in the type, then strip the code in brackets
    ; 19-Sep-2005	Steve S		SR13308: Created
    ;-------------------------------------------------------------------------------
	new strType
	
	set strType=pstrType
	
	if (strType [ "(") && (strType [ ")") {
		set strType=$extract(strType,1,$find(strType,"(")-2)
		set strType=$$$TRIMWS(strType)
	}
	
	if strType="" set strType=" "
	
	; SR14157: Commented vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	
	/*
	new strType,objFINGLTranLine
	
	if ($get(pidCompany)'="")&&($get(pidTran)'="")&&($get(pidNumber)'="")&&($get(pidLang)'="") {
		set objFINGLTranLine=$get(^FINGLTranLine(pidCompany,pidTran,pidNumber,1))
		
		if (+$$$FINGLTranLineDebit(objFINGLTranLine)>0) {
			set strType=$$^WWWTEXT("Fin00086",,,pidLang) ;Deposit
		} elseif (+$$$FINGLTranLineCredit(objFINGLTranLine)>0) {
			set strType=$$^WWWTEXT("Fin00213",,,pidLang) ;Payment
		} else {
			set strType=$$^WWWTEXT("Fin00904",,,pidLang) ;Zero	
		}
	}
	*/
 
 	; SR14157: Commented ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 	
	quit strType
 
]]></Routine>
</Export>