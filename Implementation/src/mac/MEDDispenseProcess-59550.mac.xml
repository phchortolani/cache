<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="MEDDispenseProcess" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
MEDDispenseProcess
	quit
	
#include WWWConst
#include COMConst
#include INConst
#include COMGridEdit31
#include MEDConst


CanProcess(pidDispense,pYFELD)
	;-------------------------------------------------------------------------------
	; Description : Determines if Button should be enabled
	;			
	; Called By : MEDDispense FORMSPEC - Button(5) Process
	;
	; Inputs : pidDispense
	;
	; ByRef :
	;
	; Returns : 
	;
	; History :
	; 11-Jan-2013	SCR		HEVA-734: Excluded Suspended items from 'All Lines must be picked'
	; 10-Jan-2013	SCR		HEVA-734: All Lines must be picked
	; 10-Jan-2013	SCR		HEVA-734: All Lines must be picked
	; 31-Dec-2012	SCR		HEVA-734: Pick Qty must equal Validated Qty
	; 13-Dec-2012	shobby	HEVA-705: Corrected language text.
	; 11-Dec-2012	shobby	HEVA-705: Can only dispense from users current location
	; 06-Dec-2012	SCR		HEVA-696: Validate that a partial solution dispense is consistent for all lines
	; 29-Nov-2012	SCR		SR18213: Exclude Diluent Lines from solution checking
	; 14-Nov-2012	SCR		SR18201: Improve Diluent Checking
	; 12-Nov-2012	SCR		SR18196: Exclude solutions that are not picked
	; 01-Aug-2012	PPP		SR18067: Diluents cannot be partially dispensed
	; 13-Jun-2012	PPP		SR18002.5: Check if Suspespended Prescription lines are in Pick 
	; 12-Jun-2012	PPP		SR18002.4: Check if at least one line has an Issue/Dispense Qty
	; 21-May-2012	PPP		SR18002.3: Only enable Post if pick lines exist
	; 17-May-2012	PPP		SR18002.2: Ensure Storage data is entered
	; 14-May-2012	PPP		SR18002.1: Only enable if Issued>Requested for at least 1 item
	; 04-May-2012	PPP		SR18002: Created 
	;-------------------------------------------------------------------------------
	new arrDilItem,arrDiluent,arrItem,arrLine,arrSol,blnMan,blnPost,fltPC,fltReq
	new idItem,idItem1,idLn,idPres,idRx,idRxLine,idSol,idSolLine,idStatus,intPick
	new intReq,objItem,objPick,objPresLine,strDesc1,strDesc2,strDispenseStatus
	new strStatus
	
	// Validation (3)
	// Processed (5)
	
	
 	set strStatus 	= $$$OK
	set idStatus 	= +$$$MEDDispenseStatus(pYFELD)
	set idPres		= $$$MEDDispensePrescription(pYFELD) ; Note , this can be changed with Manual Dispense (UDO)
	set blnMan		= $$$MEDDispenseStatusManual(pYFELD)'=""
	
	if '$$$NoKey(pidDispense) {
		if idStatus > 2 {
		 	set strStatus = $$$MakeStatus("MED01157")   //"Record already processed"
		} elseif idStatus<2 {	//Open
			set strDispenseStatus = $$GetDescription^WWWStatus("MEDDispense",idStatus,$get(SPRACHE))
 		 	set strStatus = $$$MakeStatus("MED00398",strDispenseStatus)   //Invalid Status (%) for current operation
		}
		if $$$ISOK(strStatus) {
			if $$$MEDDispenseSupplyingLocation(pYFELD) '= $$$WWW013HomeLocation($get(^WWW013(0,YBED,1))) {		;HEVA-705
				set strStatus = $$$MakeStatus("MED01317",$$$StrMEDDispenseSupplyingLocation,$$$WWW013HomeLocation($get(^WWW013(0,YBED,1))))  ;Can only dispense if '%1' is the same as the Current Location which is '%2'.	;HEVA-705
			}
		}
		
		//SR18002.6
		if $$$ISOK(strStatus) {
			if $$IsPresSuspended^MEDDispense(pidDispense,$$$MEDDispensePrescription(pYFELD)) {  ;SR18002.6
				set strStatus = $$$MakeStatus("MED00424")  ;Cannot perform current operation as Prescription is suspended
			}
		}
				
		//SR18002.1 Only enable Post if at least one Item Issue qty=> Requested qty
		if $$$ISOK(strStatus) {

			//SR18002.3 Only enable Post if pick lines exist
			if '$data(^MEDDispensePickLine(0,pidDispense)) {
				set strStatus  = $$$MakeStatus("IN00422")  //Pick list needs to be printed.
			}

			if $$$ISOK(strStatus) {

				set idLn = ""		
				for {
					set idLn = $order(^MEDDispensePickLine(0,pidDispense,idLn))
					quit:idLn=""
				
					set objPick = $get(^MEDDispensePickLine(0,pidDispense,idLn,1))

					//SR18002.2 Ensure Storage data is entered
					if $$$MEDDispensePickLineIssueQty(objPick) {
						if $$$MEDDispensePickLineFromStorage(objPick)="" || ($$$MEDDispensePickLineBundle(objPick)="") {
							set strStatus = $$$MakeStatus("IN00447")   //"Invalid Storage"
						}
					}
				
				}
			
			}
		}
				
		if $$$ISOK(strStatus) {
			
			//SR18002.4 Check if at least one line has an Issue/Dispense Qty
			set blnPost = $$$NO

			set idLn = ""		
			for {
				set idLn = $order(^MEDDispensePickLine(0,pidDispense,idLn))
				quit:idLn=""
				
				set:$$$MEDDispensePickLineIssueQty($get(^MEDDispensePickLine(0,pidDispense,idLn,1)))>0 blnPost=$$$YES
			}
			set:'blnPost strStatus = $$$MakeStatus("IN00495")  //At least one line requires a quantity.

			//SR18002.5 Check if Suspespended Prescription lines are in Pick
			if $$$ISOK(strStatus) {
				set idLn = ""		
				for {
					quit:$$$ISERR(strStatus) 
					set idLn = $order(^MEDDispensePickLine(0,pidDispense,idLn))
					quit:idLn=""
				
					set objPick = $get(^MEDDispensePickLine(0,pidDispense,idLn,1))
					do GetRx(pidDispense,idPres,idLn,.idRx,.idRxLine)
					if $$$MEDPrescriptionLineStatus($get(^MEDPrescriptionLine(0,idRx,idRxLine,1)))=6 {		//Suspended
						if $$$MEDDispensePickLineIssueQty(objPick)>0 {
							// Cannot Process a Suspended Prescription Item %1
							set strStatus = $$$MakeStatus("MED00423",$$$MEDDispensePickLineItem(objPick))
						}
					}
				}
			}
			; HEVA-734 vvv
			; Check that all lines are totally picked
			if $$$ISOK(strStatus) {
				kill arrLine
				set idLn = ""		
				for {
					set idLn = $order(^MEDDispensePickLine(0,pidDispense,idLn))
					quit:idLn=""
				
					set objPick = $get(^MEDDispensePickLine(0,pidDispense,idLn,1))
					set arrLine(idLn\1) = $get(arrLine(idLn\1)) + $$$MEDDispensePickLinePickQty(objPick)
					
				}
				set idLn = ""		
				for {
					set idLn = $order(arrLine(idLn))
					quit:idLn=""
					do GetRx(pidDispense,idPres,idLn,.idRx,.idRxLine)
					if $$$MEDPrescriptionLineStatus($get(^MEDPrescriptionLine(0,idRx,idRxLine,1)))=6 {
						continue
					} 
					set fltReq = $$$MEDDispensePickLineRequestedQty($get(^MEDDispensePickLine(0,pidDispense,idLn,1)))
					if arrLine(idLn)'= fltReq {
						set strStatus = $$$MakeStatus("MED01410",idLn,arrLine(idLn),fltReq)  ;Line %1 Pick Qty %2 does not equal Requested Qty %3
						quit
					}
				}

			}
			; HEVA-734 ^^^

		
			//Check that Solutions cannot be partially dispensed
			if $$$ISOK(strStatus) && ('blnMan) {
				
				kill arrSol,arrItem,arrDiluent
				do GetSolutions(idPres, pidDispense,.arrSol)
				do GetItems(pidDispense, .arrItem, .arrDilItem) ; SR18201
				; do GetItems(pidDispense, .arrItem)
				set strStatus = $$GetDiluents(idPres, pidDispense, .arrItem, .arrDilItem, .arrDiluent) ; SR18201
				;do GetDiluents(idPres, .arrDiluent)
				if $$$ISOK(strStatus) {
					set idLn = ""
					for {
						set idLn = $order(^MEDDispensePickLine(0,pidDispense,idLn))
						quit:idLn=""
				
						do GetRx(pidDispense,idPres,idLn,.idRx,.idRxLine)
						set objPresLine = $get(^MEDPrescriptionLine(0,idRx,idRxLine,1))
						set idSol 		= $$$MEDPrescriptionLineSolution(objPresLine)
						set objPick		= $get(^MEDDispensePickLine(0,pidDispense,idLn,1))	; SR18213
						if (idSol '="") && ( '$$$MEDDispensePickLineIsDiluent(objPick)) { 	; SR18213
							continue:'arrSol(idSol) ; SR18196 continue if this solution was not picked
							set idItem=""
							; Get 1st solultion line percentage
							set idSolLine	= $order(arrSol(idSol,""))
							set intReq 		= $get(arrSol(idSol,idSolLine,"req"))
							set intPick		= $get(arrSol(idSol,idSolLine,"pick"))
							set fltPC		= intPick/intReq*100\1
							set idItem1		= $get(arrSol(idSol,idSolLine,"item"))
							; Check all other solution lines
							for {
								set idSolLine = $order(arrSol(idSol, idSolLine))
								quit:idSolLine=""
								set intReq 		= $get(arrSol(idSol,idSolLine,"req"))
								set intPick		= $get(arrSol(idSol,idSolLine,"pick"))
								if (fltPC'=(intPick/intReq*100\1)) {
									set idItem		= $get(arrSol(idSol,idSolLine,"item"))
									set objItem		= $get(^INART(YM,idItem1,1))
									set strDesc1	= $piece(objItem,Y,1)
									set objItem		= $get(^INART(YM,idItem,1))
									set strDesc2	= $piece(objItem,Y,1)
									set strStatus = $$$MakeStatus("MED00420",idSol,strDesc1,fltPC,strDesc2,(intPick/intReq*100\1)) 
									; Solution %1 cannot be processed. All lines must be the same percentage of the required quantity. Item %2 is %3 per cent and Item %4 is %5 per cent.
								}
								quit:strStatus'=$$$OK
							}
						}
					}	
				}
			}
			
		}
	 
	}
	
	$$$YQHandler(strStatus)
	
	quit strStatus

Process(pidDispense)
	;-------------------------------------------------------------------------------	
	; Process the Dispense
	;
	; Params:	pidDispense	- Dispense
	;
	; Returns:	
	;
	; History:
	; 12-Jun-2014	SCR		HEVA-1505: Handle Manual Dispense
	; 27-Mar-2013	SCR		HEVA-909: Return error message
	; 10-Jan-2012	shobby	HEVA-755: Proper management of error messages.
	; 14-May-2012	PPP		SR18002.1:Added $$CanProcess
	; 03-May-2012	PPP		SR18002: Created
	;-------------------------------------------------------------------------------	
	new objDisp,strForm,strStatus
	

	//SR180002.1
	set strStatus = $$CanProcess(pidDispense, $get(^MEDDispense(0,pidDispense,1)))
	
	if $$$ISOK(strStatus) {
		set strStatus = $$Transaction^COMTransaction("ProcessTxn^MEDDispenseProcess("""_pidDispense_""")",$$$YES)
		if $$$ISOK(strStatus) {
			set strForm	= "MEDDispense"
			set objDisp	= $get(^MEDDispense(YM,pidDispense,1))
			set:$$$MEDDispenseStatusManual(objDisp)'="" strForm = "VARMEDDispenseMan"
			do GoToForm^COMUtilForm(strForm,pidDispense,2)
		}
	} else {
	if $$$ISERR(strStatus) ; HEVA-909
		do ReturnError^COMUtilError(strStatus)
	}
	
	quit strStatus

ProcessTxn(pidDispense)
	;-------------------------------------------------------------------------------
	; Process the Dispense Pick Lines
	; - Create an Issue Type (1 or 5) and post it
	;
	; Params:	pidDispense	- Dispense
	;
	; Returns:	
	;
	; History:
	; 17-Oct-2014	SCR		HEVA-1580: Record Actual Used on Dispense Line
	; 19-Aug-2014	SCR		HEVA-1505: If a Manual Dispense , Update Free6 to 4 (Processed)
	; 31-Jul-2014	SCR		HEVA-1505: Take Patient ID from Dispense
	; 12-Jun-2014	SCR		HEVA-1505: Handle Manual Dispenses
	; 19-Jun-2013	SCR		CORE-136: Populate Issue Patient ID & Patient Name with Patient ID from MED Dispense
	; 24-May-2013	SCR		CORE-94: Remove Reservation
	; 10-Jan-2013	shobby	HEVA-755: Don't start a transaction as we are already inside a transaction.
	; 03-Jan-2013	SCR		HEVA-738: Set Rx status to Awaiting Validation
	; 02-Jan-2013	SCR		HEVA-725: Updated Actualy used
	; 20-Dec-2012	SCR		HEVA-700: Updated Prescription with actual used
	; 06-Dec-2012	SCR		HEVA-693: Record Diluent qty for each line
	; 29-Nov-2012	SCR		SR18212: Reverted last change
	; 26-Nov-2012	SCR		SR18212: Change open prescroption lines to , Awaiting Valiadation
	; 18-Jun-2012	SCR		SR18002: Change Line to Auto-Close (9)	
	; 12-Jun-2012	SCR		SR18002: Change Line prescription to status 3		
	; 08-Jun-2012	PPP		SR18002.6: Update the Pick Printed Date/Time on the Prescription (clear)
	; 18-May-2012	PPP		SR18002.5 Check the Pres qty with Total Picked Qty
	; 18-May-2012	PPP		SR18002.4  If Dispense Status is still Partially Processed, 
	;						do not update the Prescription status
	; 18-May-2012	PPP		SR18002.3: Dispense Status
	; 17-May-2012	PPP		SR18002.2: Added code to update Dispensed Qty on Prescription Line
	; 15-May-2012	PPP		SR18002.1: Updated the Prescription Status
	; 14-May-2012	PPP		SR18002.1: Only enable if Issued>Requested for at least 1 item
	; 09-May-2012	PPP		SR18002: Created
	;-------------------------------------------------------------------------------	
	new arrDilItem,arrDiluent,arrDispensed,arrItem,arrLines,blnPartial,fltDispense
	new idDispLine,idIssue,idItem,idLine,idLn,idPres,idRx,idRxLine,idStatus,idToLocn
	new idUDODisp,idUDOLine,idUnit,intIssueType,objDispLine,objDispense,objIssLine
	new objIssue,objLine,objUDODispLine,strStatus

	
 	set strStatus 	= $$$OK 
 	set blnPartial 	= $$$NO
	set objDispense = $get(^MEDDispense(0,pidDispense,1))
	set idPres		= $$$MEDDispensePrescription(objDispense) 

	set objIssue 	= ""
	set $$$INIssueFromLocn(objIssue) 	= $$$MEDDispenseSupplyingLocation(objDispense)
	set intIssueType = 5									//Prescription
	set idToLocn 						= $$$MEDDispenseDestinationLocation(objDispense)
	if idToLocn '= "" {
		set $$$INIssueToLocn(objIssue)	= idToLocn
		set intIssueType = 1								//Inter Departmental
	}

	set $$$INIssueType(objIssue)     	= intIssueType
	set $$$INIssueReference(objIssue)	= pidDispense
	set $$$INIssueCreatedOn(objIssue)   = +$horolog
	set $$$INIssueCreatedBy(objIssue)   = $get(YBED)
	set $$$INIssueDocketNo(objIssue)    = pidDispense

	set $$$INIssuePatientID(objIssue)   = $$$MEDDispensePatient(objDispense)
	set $$$INIssueCustomerName(objIssue) = $$$MEDDispensePatient(objDispense)
	if $$$INIssuePatientID(objIssue)'="" {
		set $$$INIssueFREE7(objIssue)          = $$GetAdmission^MEDAdmission($$$INIssuePatientID(objIssue))
	}

 	set idIssue = $$^WWWNEXT("INIssue")
 	set strStatus = $$$Save("INIssue",idIssue,objIssue,$$$YES)
 	if $$$ISOK(strStatus) {

		set idLine = 0		//Issue Line Counter
		set idDispLine = ""
		for {
			set idDispLine = $order(^MEDDispensePickLine(0,pidDispense,idDispLine))
			quit:idDispLine=""
		
			set objDispLine = $get(^MEDDispensePickLine(0,pidDispense,idDispLine,1))
			
			set objIssLine = ""
			set ($$$INIssueLineItem(objIssLine),idItem) = $$$MEDDispensePickLineItem(objDispLine)
			set $$$INIssueLineStatus(objIssLine)      	= 1
			set $$$INIssueLineQtyRequired(objIssLine) 	= $$$MEDDispensePickLineRequestedQty(objDispLine)
			set $$$INIssueLineQtyIssued(objIssLine)   	= $$$MEDDispensePickLineIssueQty(objDispLine)
			set $$$INIssueLineUnit(objIssLine)        	= $$$MEDDispensePickLineIssueUOM(objDispLine)
			set $$$INIssueLineToStorage(objIssLine) 	= $$$MEDDispensePickLineToStorage(objDispLine)

			if idToLocn '= "" {
				if $$$INIssueLineToStorage(objIssLine) 	= "" {
					set $$$INIssueLineToStorage(objIssLine)   = $$GetStorage^INIssueAuto(idItem,idToLocn)
				}
			}
			set $$$INIssueLineFromStorage(objIssLine) 	= $$$MEDDispensePickLineFromStorage(objDispLine)
			set $$$INIssueLineBundle(objIssLine)      	= $$$MEDDispensePickLineBundle(objDispLine)
		
	 		set $$$INIssueLineReference(objIssLine) 	= idIssue
	 		set idLine = $i(idLine)
	 		
	 		//Saving the total dispense qty in this issue per Line #
			do GetRx(pidDispense,idPres,idDispLine,.idRx,.idRxLine)
	 		set arrDispensed(1,idRx,idRxLine)	= $get(arrDispensed(1,idRx,idRxLine)) + $$$MEDDispensePickLinePickQty(objDispLine)
	 		set arrDispensed(2,idRx,idRxLine)	= idItem_"|"_$$$MEDDispensePickLinePickUOM(objDispLine)_"|"_(idDispLine\1)
	 		set arrDispensed(3,idDispLine\1) 	= ""
	 		
 			set strStatus = $$$Save("INIssueLine",idIssue_","_idLine,objIssLine,$$$YES)
 			
			
 			quit:$$$ISERR(strStatus)

		}
	
 	}
	
 	if $$$ISOK(strStatus) {
	 	;HEVA-755 already inside a transaction, starting another one can lead to
	 	;HEVA-755 multiple error messages.
	 	;HEVA-755 set strStatus = $$Post^INIssueAuto(idIssue)
	 	set strStatus=$$PostTxn^INIssueAuto(idIssue)  ;HEVA-755
 	}
	//Update the Dispense Record
	if $$$ISOK(strStatus) {
		set idStatus = 3 			//Processed
		set $$$MEDDispenseStatus(objDispense) 			= idStatus
		set $$$MEDDispenseDateProcessed(objDispense) 	= $horolog
		set $$$MEDDispenseIssue(objDispense) 			= idIssue
		if $$$MEDDispenseStatusManual(objDispense)'="" {
			set $$$MEDDispenseStatusManual(objDispense)	= 3
		}
		set strStatus = $$$Save("MEDDispense",pidDispense,objDispense,$$$YES)
		
		//SR18002.1			
		if $$$ISOK(strStatus) {
			set idPres = $$$MEDDispensePrescription(objDispense)
		
			if idPres'="" {

				; Update Dispense lines with Diluent Qty Picked
				kill arrItem,arrDiluent
				do GetItems(pidDispense, .arrItem, .arrDilItem)
				set strStatus = $$GetDiluents(idPres, pidDispense, .arrItem, .arrDilItem, .arrDiluent, .arrLines) 

				 ; Update dispense line with diluent qty
				if strStatus=$$$OK {
					set idDispLine = ""
					for {
						set idDispLine = $order(^MEDDispenseLine(YM,pidDispense,idDispLine))
						quit:idDispLine=""
						if $get(arrLines(idDispLine)) {
							set objDispLine = $get(^MEDDispenseLine(YM,pidDispense,idDispLine,1))
							set $$$MEDDispenseLineDiluentQtyPicked(objDispLine)=arrLines(idDispLine)
							set strStatus 	= $$$Save("MEDDispenseLine",pidDispense_","_idDispLine,objDispLine,$$$YES)
						}
					}
				}
			}
			if $$$ISOK(strStatus) {
				set idPres	=""
				for {
					set idPres	= $order(arrDispensed(1,idPres))
					quit:idPres=""
					set idLn = ""
					for {
						quit:$$$ISERR(strStatus)
						
						set idLn = $order(^MEDPrescriptionLine(0,idPres,idLn))
						quit:idLn=""
						
						set fltDispense = $get(arrDispensed(1,idPres,idLn))
						set idItem		= $piece($get(arrDispensed(2,idPres,idLn)),"|",1)
						set idUnit		= $piece($get(arrDispensed(2,idPres,idLn)),"|",2)
						set idDispLine	= $piece($get(arrDispensed(2,idPres,idLn)),"|",3)
						
						if fltDispense {
							set objLine = $get(^MEDPrescriptionLine(0,idPres,idLn,1))
				 			set fltDispense = $$ActualUsed^MEDDispenseCalc(	fltDispense,
				 											idItem,
				 											idUnit,
				 											objLine) ; HEVA-725
							set $$$MEDPrescriptionLineDispensedQty(objLine) = $$$MEDPrescriptionLineDispensedQty(objLine) + fltDispense

							if $$$MEDPrescriptionLineDoseTotalQuantity(objLine)>$$$MEDPrescriptionLineDispensedQty(objLine) {
								set $$$MEDPrescriptionLineStatus(objLine) = 1 ; HEVA-738
							} else {
								set $$$MEDPrescriptionLineStatus(objLine) = 9 ; Set to Fulfilled until the 'administer funtion is in place'
							}
							set strStatus = $$$Save("MEDPrescriptionLine",idPres_","_idLn,objLine,$$$YES)
							
							set objDispLine = $get(^MEDDispenseLine(YM,pidDispense,idDispLine,1))
							set $$$MEDDispenseLineActualUsed(objDispLine)	= fltDispense
							set strStatus 	= $$$Save("MEDDispenseLine",pidDispense_","_idDispLine,objDispLine,$$$YES)
						} else {
							set objLine = $get(^MEDPrescriptionLine(0,idPres,idLn,1))

						}
					}	
				
				}

			}
			
		}
		
	}
	if strStatus=$$$OK {
		for {
			set idPres	= $order(arrDispensed(1,idPres))
			quit:idPres=""
			set strStatus=$$UpdateRxStatus^MEDPrescriptionAutoClose(idPres)
		}
		do ClearReservation^INReservation(pidDispense,61) ; CORE-94
	}
	if $$$ISOK(strStatus) {
		if (+$$$WWWClientParamCoreChangesHEVA($get(^WWWClientParam(YM,YM,1)))) {
			set idDispLine	= ""
			for {
				set idDispLine	= $order(arrDispensed(3,idDispLine))
				quit:idDispLine=""
				set objDispLine = $get(^MEDDispenseLine(YM,pidDispense,idDispLine,1))
				set idUDODisp	= $$$MEDDispenseLineUDODispense(objDispLine)
				set idUDOLine	= $$$MEDDispenseLineUDODispenseLine(objDispLine)
				if (idUDODisp'="")&&(idUDOLine) {
					set objUDODispLine	= $get(^MEDDispenseLine(YM,idUDODisp,idUDOLine,1))
					if objUDODispLine'="" {
						set $$$MEDDispenseLineFREE6(objUDODispLine)	= 4
						set strStatus	= $$$Save("MEDDispenseLine",idUDODisp_","_idUDOLine,objUDODispLine,$$$YES)
					}
				}
			}
		}
	}
	quit strStatus

GetRx(pidDisp,pidPres,pidLn,&pidRx,&pidRxLine)
	;-------------------------------------------------------------------------------
	; get the Prescription & Line
	; Special processing requied for Manual Dispense
	;
	;
	; History:
	; 12-Jun-2014	SCR		HEVA-1505: Created
	;-------------------------------------------------------------------------------
	new idUDODisp,objDisp,objDispLine,objUDODisp
	
	set pidRx		= pidPres
	set pidRxLine	= pidLn\1
	set objDisp		= $get(^MEDDispense(YM,pidDisp,1))
	if $$$MEDDispenseStatusManual(objDisp) {
		set objDispLine	= $get(^MEDDispenseLine(YM,pidDisp,pidLn\1,1))
		set idUDODisp	= $$$MEDDispenseLineUDODispense(objDispLine)
		set pidRxLine	= $$$MEDDispenseLineUDODispenseLine(objDispLine)
		set objUDODisp	= $get(^MEDDispense(YM,idUDODisp,1))
		set pidRx		= $$$MEDDispensePrescription(objUDODisp)
	}
	quit
GetTotalIssued(pidDispense,pidLn,pblnPickUOM=$$$NO)
	;-------------------------------------------------------------------------------
	; Get the Sum of all Issued Pick quantity for a Line
	;
	; ByRef :
	;
	; Returns : 
	;
	; History :
	; 06-Dec-2012	SCR		HEVA-693: Option to pass back qty in pick unit
	; 29-May-2012	PPP		SR18002: Created
	;-------------------------------------------------------------------------------
	new fltQtyIssued,idDataLine,objIssueLine
	
	set fltQtyIssued = 0
	set idDataLine   = ""
	for {
		set idDataLine =  $order(^MEDDispensePickLine(0,pidDispense,idDataLine))
		quit:idDataLine=""
		
		//continue:(idDataLine=pidLn)                       //Skip current line
		continue:(idDataLine\1)'=(pidLn\1)
		
		set objIssueLine = $get(^MEDDispensePickLine(0,pidDispense,idDataLine,1))
		if pblnPickUOM=$$$NO {
			set fltQtyIssued = fltQtyIssued + $$$MEDDispensePickLineIssueQty(objIssueLine)
		} else {
			set fltQtyIssued = fltQtyIssued + $$$MEDDispensePickLinePickQty(objIssueLine)		
		}

	}

	quit fltQtyIssued



GetSolutions(pidPres,pidDispense, &parrSol)
	;-------------------------------------------------------------------------------
	; Check if all other Soultion id lines exist
	;
	; ByRef :
	;
	; Returns : 
	;
	; History :
	; 12-Jun-2014	SCR		HEVA-1505: Exclude Manual Dispense
	; 06-Dec-2012	SCR		HEVA-696: Validate that a partial solution dispense is consistent for all lines
	; 12-Nov-2012	SCR		SR18196: Flag if a Solution has been picked and What items have been picked in this dispense
	; 12-Jun-2012	PPP		SR18002: Created
	;-------------------------------------------------------------------------------
	new idLn,idRxLn,idSol,objDisp
	new objPres,objPick,idItem,objDispLine

	set idLn=""
	
	set objDisp	= $get(^MEDDispense(YM,pidDispense,1))
	if $$$MEDDispenseStatusManual(objDisp)'="" {
		quit $$$OK
	}
	for {
		set idLn = $order(^MEDDispensePickLine(0,pidDispense,idLn))
		quit:idLn=""
		set objPick = $get(^MEDDispensePickLine(0,pidDispense,idLn,1))
		set idRxLn 	= idLn\1
		set objPres = $get(^MEDPrescriptionLine(0,pidPres,+idRxLn,1))
		set idSol	= $$$MEDPrescriptionLineSolution(objPres)
		set idItem	= $$$MEDDispensePickLineItem(objPick)
		if idSol'="" {
			set objDispLine = $get(^MEDDispenseLine(YM,pidDispense,idRxLn,1))
			set parrSol(idSol,idRxLn,"req") = $$$MEDDispenseLineIssueQuantity(objDispLine)
			set parrSol(idSol,idRxLn,"item") = idItem
			set parrSol(idSol,idRxLn,"pick") = $get(parrSol(idSol,idRxLn,"pick")) + $$$MEDDispensePickLinePickQty(objPick)
			set parrSol(idSol) = $get(parrSol(idSol)) +  $$$MEDDispensePickLinePickQty(objPick)
		}
	}
	quit $$$OK

GetItems(pidDispense, &parrItem, &parrDiluent)
	;-------------------------------------------------------------------------------
	; Get the Items on the Pick List
	;
	; ByRef :
	;
	; Returns : 
	;
	; History :
	; 14-Nov-2012	SCR		SR18201: Add UOM & Line logging
	; 12-Nov-2012	SCR		SR18196: Update Qty
	; 12-Jun-2012	PPP		SR18002: Created
	;-------------------------------------------------------------------------------
	new idLn
	new objPick,idItem,idUOM,intQty,blnDil
	
	set idLn   = ""
	for {
		set idLn =  $order(^MEDDispensePickLine(0,pidDispense,idLn))
		quit:idLn=""
		
		set objPick = $get(^MEDDispensePickLine(0,pidDispense,idLn,1))
		set idItem	= $$$MEDDispensePickLineItem(objPick)
		set idUOM	= $$$MEDDispensePickLinePickUOM(objPick)
		set intQty	= $$$MEDDispensePickLinePickQty(objPick)
		set blnDil	= $$$MEDDispensePickLineIsDiluent(objPick)
		if blnDil {
			set parrDiluent(idItem,idUOM,"picked")=$get(parrDiluent(idItem,idUOM,"picked"))+intQty
		} else {
			set parrItem(idItem)=$get(parrItem(idItem))+intQty
			set parrItem(idItem,"u",idUOM)=$get(parrItem(idItem,"u",idUOM))+intQty
			set parrItem(idItem,"l",idLn\1)=$get(parrItem(idItem,"l",idLn\1))+intQty
		}
		;set parrItem($$$MEDDispensePickLineItem(objPick))=$get(parrItem($$$MEDDispensePickLineItem(objPick)))+$$$MEDDispensePickLinePickQty(objPick)
		;set parrItem($$$MEDDispensePickLineItem(objPick))=$$$MEDDispensePickLineIssueQty(objPick)
		
	}

	quit $$$OK

GetDiluents(pidPres,pidDispense, &parrItem, &parrDilItem, &parrDil, &parrLine)
	;-------------------------------------------------------------------------------
	; Get the Diluents and asscoiated items & validate
	;
	; ByRef :
	;
	; Returns : 
	;
	; History :
	; 06-Dec-2012	SCR		HEVA-693: Pass back Diluent qty for each line
	; 14-Nov-2012	SCR		SR18201: Update for Diluent and main drug validation
	; 31-Jul-2012	PPP		SR18067: Created
	;-------------------------------------------------------------------------------
	new idLn
	new objLine,idDil,idDilUOM,idDilQty,intReq,intPick,intDReq,idItem,objItem,objDil
	new strStatus,strUOM
	
	; SR18201 vvvv
	set strStatus = $$$OK
	kill parrLine

	set idLn = "" 
	for {
		set idLn=$order(^MEDDispenseLine(YM,pidDispense,idLn))
		
		quit:idLn=""
		set objLine	= $get(^MEDDispenseLine(YM,pidDispense,idLn,1))
		set idDil 	= $$$MEDDispenseLineDiluent(objLine)
		continue:idDil=""
		set idDilUOM= $$$MEDDispenseLineDiluentUOM(objLine)
		set idDilQty= $$$MEDDispenseLineDiluentQty(objLine)
		set intReq	= $$$MEDDispenseLineIssueQuantity(objLine)
		set idItem 	= $$$MEDDispenseLineItemName(objLine)
		set intPick = $get(parrItem(idItem,"l",idLn))
		set intDReq	= intPick/intReq*idDilQty
		if intDReq\1'=intDReq {
			set objItem = $get(^INART(YM,idItem,1))
			set objDil	= $get(^INART(YM,idDil,1))
			set strStatus = $listbuild("MED01314","("_idItem_") "_$$$INARTSearchName(objItem),"("_idDil_") "_$$$INARTSearchName(objDil))  ;Can not dispense line %1, can not match Diluent %2 Quantity
		}
		quit:strStatus'=$$$OK
		set parrDilItem(idDil,idDilUOM,"req")=$get(parrDilItem(idDil,idDilUOM,"req"))+intDReq
		set:intDReq parrLine(idLn) = intDReq
	}
	if $$$ISOK(strStatus) {
		set idDil = "" 
		for {
			set idDil = $order(parrDilItem(idDil))
			quit:idDil=""
			quit:strStatus'=$$$OK
			set idDilUOM = ""
			for {
				set idDilUOM = $order(parrDilItem(idDil,idDilUOM))
				quit:idDilUOM=""
				quit:strStatus'=$$$OK
				set intPick = +$get(parrDilItem(idDil,idDilUOM,"picked"))
				set intDReq = +$get(parrDilItem(idDil,idDilUOM,"req"))
				set objDil	= $get(^INART(YM,idDil,1))
				set strUOM	= $$$WWW101Text($get(^WWW101(0,"EINHEIT",SPRACHE,idDilUOM,1)))
				if intPick>intDReq {
					set strStatus = $listbuild("MED01315","("_idDil_") "_$$$INARTSearchName(objDil),strUOM,intDReq,intPick)  ;Too much Dilent %1 Unit %2, %3 required, %4 picked
				}
				if intPick<intDReq {
					set strStatus = $listbuild("MED01316","("_idDil_") "_$$$INARTSearchName(objDil),strUOM,intDReq,intPick)  ;More Dilent %1 Unit %2 needed, %3 required, %4 picked
				}
			}
		
		}
	}
	quit strStatus

]]></Routine>
</Export>