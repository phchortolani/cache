<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INTRNPickLine" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INTRNPickLine
#include INConst
#include COMSYS
#include COMGridEdit31
	
#def1arg TempStore(%1) ^CacheTemp(YUCI,YUSER,%1)

#define FORMFldINTFRPickLine	4
	
OnBeforeSave(pYM,pYFORM,pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
	; Called By:
	; 	Form INTFRPickLine
	; 
	; History:
	; 21-Oct-2008	GRF		SR15812: strStatus rather than sc and initialise to
	; 							$$$OK
	; 16-Oct-2008	HQN		SR15874: Removed zero quantity validation
	; 07-Oct-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$$OK
	if $$$INTFRPickLinePickedQuantity(pYFELD) < 0 {
		set YRETVAL   = $$$MakeStatus("IN00490")  ; "Quantity can not be negative."
		set strStatus = $$$NO
	
	/* ; 16-Oct-2008 SR15874 vvvv
	} elseif $$$INTFRPickLinePickedQuantity(pYFELD) = 0 {
		set YRETVAL   = $$$MakeStatus("IN00632")  ; "Quantity must be greater than 0."
		set strStatus = $$$NO
	*/ ; 16-Oct-2008 SR15874 ^^^^
	}
	quit strStatus
	
	
OnBeforeDisplayCombo(pidYKEY,pobjTFRLine,pintCol,pSUCH)
	;-------------------------------------------------------------------------------
	; Generate data for Unit of Measure drop down before displaying drop down in the Edit Grid
	;
	; Params:
	; 	pidYKEY     - Pick Line Id
	; 	pobjTFRLine - Pick Line record
	; 	pintCol     - Edit Grid Column Id
	; 	pSUCH       - Search, Not used
	;
	; ByRefs: None
	;
	; Returns: $$$NO
	;
	; History:
	; 15-Jul-2011	GRF		SR17669: Call common code
	; 04-Nov-2009	DWR		SR16983: rewritten to be the same as all other unit combos
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new blnOverride,enumLineType,enumUnit,idClassField,idItem

	set blnOverride = $$$NO
	
	; Unit
	;---------------------------------------
	if pintCol = $$$FORMFldINTFRPickLine {      ; SR17669 vvv
		set blnOverride = $$LoadCombo^INARTPACK($$$INTFRPickLineItem(pobjTFRLine),blnOverride,.pSUCH)
	}
	quit blnOverride
	/*
	if pintCol = $$$FORMFldINTFRPickLine  {
		kill pSUCH
		set pSUCH  = "SUCH"
		set idItem = $$$INTFRPickLineItem(pobjTFRLine)
		if idItem '= "" {
			set enumUnit = ""
			for {
				set enumUnit = $order(^INARTPACK(YM,idItem,enumUnit))
				quit:enumUnit=""
				
				set pSUCH(enumUnit) = enumUnit
			}
			set blnOverride = $$$YES
		}
	}
	quit blnOverride
	*/                                           ; SR17669 ^^^
	
	
OnBlur(pintCol,pintRow,&pobjTFRPickLine)
	;-------------------------------------------------------------------------------
	; This code is run when blurring out of a field in the Edit Grid for Pick Lines.
	;
	; Params:
	; pintCol         - Edit Grid Column Id
	; pintRow         - Edit Grid Row Id
	; pobjTFRPickLine - Pick Line record
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 14-Apr-2011	GRF		SR17579: ensure YFONTCOLOR is present
	; 16-Oct-2008	HQN		SR15874: Need at least 1 valid line
	; 09-Oct-2008	HQN		SR15874: Don't bother to validate deleted lines
	; 08-Oct-2008	HQN		SR15874: Force OnBeforeFormat to fire validation coloring
	; 16-Nov-2006	PO		SR15217: Clear Shipment, INWEDate & INWEQuantity
	; 21-Jul-2006	PO		SR14875: Pass idTFR to UpdateShipmentDetails
	; 13-Jul-2006	PO		SR14840: Include Transfer Order key in ^CacheTempTFRPickLine
	; 13-Apr-2006	PO		SR14427: Created
	;-------------------------------------------------------------------------------
	new blnConsumable,blnValidLineQty,idField,idItem,idLine,idLocn,idTFR
	new intPlus,intRow,objLine,objTFR,strKey,strPickLine

	;--------------------------------------- Protect reference @Net variables
	new GCOL,GROW,YFELD
	set GCOL  = pintCol
	set GROW  = pintRow
	set YFELD = pobjTFRPickLine
	;---------------------------------------
	
	set idItem = $$$INTFRPickLineItem(pobjTFRPickLine)
	set objTFR = $$$GRIDYFELDContainer
	set idLocn = $$$INTFRSendingLocation(objTFR)
	
	set blnConsumable = $$IsConsumable^INARTLOCPAR(idItem,idLocn)
	
	set idField = $$$GetClassField(YFORM,pintCol)
 
	if (idField = $$$FldINTFRPickLinePickedQuantity) || (idField = $$$FldINTFRPickLineSendingStockLocation) {
		set strKey = $$ReferenceKey^COMGridEdit31Interface("INTFRPickLine",pintRow)
 
		set idTFR = $$$KEY1(strKey)
		set idLine = $$$KEY2(strKey)
 
		if 'blnConsumable {
			set $$$INTFRPickLineShipment(pobjTFRPickLine)     = ""
			set $$$INTFRPickLineINWEDate(pobjTFRPickLine)     = ""
			set $$$INTFRPickLineINWEQuantity(pobjTFRPickLine) = ""
		}
 
		set objLine = $get(^INTFRPickLine(YM,idTFR,idLine,1))
		set ^CacheTempTFRPickLine(YUSER,idTFR,idLine,"PriorPickedQty")      = $$$INTFRPickLinePickedQuantity(objLine)
		set ^CacheTempTFRPickLine(YUSER,idTFR,idLine,"PriorSendingStkLocn") = $$$INTFRPickLineSendingStockLocation(objLine)
		set ^CacheTempTFRPickLine(YUSER,idTFR,idLine,"PriorINWEDate")       = $$$INTFRPickLineINWEDate(objLine)
		
		; Force OnBeforeFormat for all rows
		set intRow = ""
		for {
			set intRow = $order($$$WWWDATEN("REFERENCEKEY",intRow))
			quit:intRow=""
			continue:$get($$$WWWDATEN("KILLEDRECORD",intRow))=1	; WORKAROUND: Validation fires on deleted lines ; 09-Oct-2008
			
			do ScreenUpdateStyle^COMGridEdit31S("pY"_intRow_"_"_pintCol)
		}
 	}
 	
 	if idField = $$$FldINTFRPickLinePickedQuantity {
	 	set blnValidLineQty = $$$NO
	 	set intRow = ""
		for {
			set intRow = $order($$$WWWDATEN("REFERENCEKEY",intRow))
			quit:intRow=""
			continue:$get($$$WWWDATEN("KILLEDRECORD",intRow))=1
			set strPickLine = $$$GRIDGetYFELD(intRow)
			continue:$$$INTFRPickLinePickedQuantity(strPickLine)=0
			set blnValidLineQty = $$$YES
			quit
		}
		if blnValidLineQty = $$$NO {
			for {
				set intRow = $order($$$WWWDATEN("REFERENCEKEY",intRow))
				quit:intRow=""
				continue:$get($$$WWWDATEN("KILLEDRECORD",intRow))=1
				
				set $$$TempStore("TRNLineErrors",intRow,idField) = ""
				; WORKAROUND: MANUALLY UPDATE SCREEN STYLE
				if $get(YFONTCOLOR)="" set YFONTCOLOR = "black"    ; SR17579
				do UpdateStyle^COMGridEdit31Interface("tdY"_intRow_"_"_pintCol,YFONTCOLOR_Y_YRED_Y_$zcvt($$$Text("IN00728"),"o","JS"))
			}				
		}
 	}
	quit
	
	
OnBeforeCopy(pidTFRPickLine,&pobjPickLine)
	;-------------------------------------------------------------------------------
	; Run validation to update current errors.
	;
	; Params:
	; pidTFRPickLine - Pick Line Id
	; pobjPickLine - Pick Line record
	;
	; ByRefs: pobjPickLine
	;
	; Returns: Nothing
	;
	; History:
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	set $$$INTFRPickLinePriorPickedQuantity(pobjPickLine) = ""
	quit
	
	
OnBeforeFormConstruction(pidField,pobjLine)
	;-------------------------------------------------------------------------------
	; Disable Stk Loc field if item is consumable
	;
	; Params:
	; pidField - Form field Id
	; pobjLine - Pick Line record
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 04-Nov-2009	DWR		SR16983: Commented deprecated code handles by OnBeforeDisplayCombo
	; 11-May-2006	PO		SR14427: Build Unit of Measure list (Phase 2)
	; 21-Apr-2006	RPW		SR14427: Created
	;-------------------------------------------------------------------------------
	quit:pobjLine=""
 
	if pidField = $$$FldINTFRPickLineSendingStockLocation {
		if $$IsConsumable^INARTLOCPAR($$$INTFRPickLineItem(pobjLine),$$$INTFRSendingLocation($$$GRIDYFELDContainer)) {
			set YHID = 1
		}
	;} elseif pidField = $$$FldINTFRPickLineUnit {  ;SR16983
	;	do LoadUnitOfMeasureList^INARTUtilities($$$INTFRPickLineItem(pobjLine))
	}
	quit
 	
 	
Ship(pYKEY)
	;-------------------------------------------------------------------------------
	; Processes the planned movements for this pickline
	; 26-Sep-2008	HQN		SR15862: DEPRECATE, should be handled in V2 Business
	; 							Document when implemented
	; 23-Sep-2008	HQN		SR15862: Created
	;-------------------------------------------------------------------------------
	quit $$$NO
	
	
OnDelete(pYKEY)
	;-------------------------------------------------------------------------------
	; Cleanup all related records
	;
	; Params:
	; pYKEY - Transfer Pick ID, Line
	;
	; ByRefs: None
	;
	; Returns: strStatus - $$$OK if successful, otherwise error message
	;
	; History:
	; 
	; Called From:
	; 	DeleteTxn^INTRN()
	; 
	; History:
	; 11-Jul-2014	SCR		SMERECIFE-53: Use Function for ListBuild
	; 21-Oct-2008	GRF		SR15812: return strStatus rather than sc
	; 07-Oct-2008	PPP		SR15862 Planned Movements are associated with the Pick
	; 							Line not the Trn Line 	
	; 04-Oct-2008	PPP		SR15862 Added Error checking 	
	; 24-Sep-2008	HQN		SR15862: FIXME: MovementType lookup needs cleanup
	; 23-Sep-2008	HQN		SR15862: Created
	;-------------------------------------------------------------------------------
	new idTFR,idTFRLine,idTFRPickLine,objPickLine,objResultSet,sc,strStatus
	
	set idTFR         = $$$KEY1(pYKEY)
	set idTFRPickLine = $$$KEY2(pYKEY)
	set objPickLine   = $get(^INTFRPickLine(YM,idTFR,idTFRPickLine,1))
	set idTFRLine     = $$$INTFRPickLineSourceline(objPickLine)
	
	set objResultSet = ##class(%Library.ResultSet).%New()
	set sc = objResultSet.Prepare("SELECT * FROM alDRP.dPlannedMovement WHERE Reference=? AND LineNumber=? AND  MovementType_MovementTypeId=$$MovementType^INTRNStockUpdate(30)")
	
	if $$$ISOK(sc) {
		set sc = objResultSet.Execute(idTFR,idTFRPickLine)
		
		if $$$ISOK(sc) {
			while objResultSet.Next() {
				set sc = ##class(alDRP.dPlannedMovement).%DeleteId(objResultSet.Data("ID"))
				quit:$$$ISERR(sc)
			}
		}
	}
	
	if $$$ISERR(sc) {
		set strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
	} else {
		set strStatus = $$$OK
	}
	quit strStatus
	
	
UpdateReservations(pidTFR)
	;-------------------------------------------------------------------------------
	; Update reservations for pick lines that have been changed since last save
	;
	; Called By: OnAfterSave^TRN  (when Firmed)
	; 
	; Params: pidTFR - Transfer Id
	;
	; ByRefs: None
	;
	; Returns: strStatus - $$$OK if successful, otherwise error message
	;
	; History:
	; 30-Oct-2008	GRF		SR15812: More cleanups during Peer (idLocnFrom instead
	; 							of idSendLoc; don't need to reset the locn when a
	; 							Planned Movement has been found for that locn;
	; 							remove unused variables)
	; 21-Oct-2008	PPP		SR15812: Miscellaneous cleanups from Peer
	; 08-Oct-2008	PPP		If the PickLine is a new Line created, generate
	; 							Reservation Record 
	; 03-Oct-2008	HQN		No longer has Reservations under V1...as per 
	; 							instructions from PPP.
	; 16-Nov-2006	PO		SR15217: Created
	;-------------------------------------------------------------------------------
	new blnUpdated,fltActualQtyPicked,fltQtyPicked
	new idBundle,idItem,idLine,idLocnFrom,idStoreFrom
 	new objPickLine,objPlannedMovement,objResultSet,objToLocn,objTFR
 	new sc,strDispatch,strSQL,strStatus
	
	set strStatus = $$$OK
	
	set objTFR = $get(^INTFR(YM,pidTFR,1))
	set idLocnFrom = $$$INTFRSendingLocation(objTFR)
	// ToLocn is actually the intransit
	set strDispatch = $get(^INDRPUMLKW(YM,$$$INTFRDispatch(objTFR),1))
	set objToLocn   = ##class(alLOC.iULOC).GetLocation($$$INDRPUMLKWLocation(strDispatch))
	
	set idLine="" 
	for { 
		set idLine=$order(^INTFRPickLine(YM,pidTFR,idLine)) 
		quit:idLine=""
		
		set objPickLine = $get(^INTFRPickLine(YM,pidTFR,idLine,1))
		set idItem             = $$$INTFRPickLineItem(objPickLine)
		set idStoreFrom        = $$$INTFRPickLineSendingStockLocation(objPickLine)
		set fltActualQtyPicked = $$$INTFRPickLinePickedQuantity(objPickLine)
		set fltQtyPicked       = $$$INTFRPickLineQuantity(objPickLine)
		set idBundle           = $$$INTFRPickLineBundle(objPickLine)
		
		// Update all reservations for each line
		set objResultSet = ##class(%Library.ResultSet).%New()
		
		set strSQL = "SELECT ID FROM alDRP.dPlannedMovement WHERE Item=? AND FromStorage->Location=? AND REFERENCE=? AND LineNumber=?"
		if objResultSet.Prepare(strSQL) {
			if objResultSet.Execute(idItem,idLocnFrom,pidTFR,idLine) {
				set blnUpdated   = $$$NO
				
				while objResultSet.Next() {
					quit:$$$ISERR(strStatus)
					
					set objPlannedMovement = ##class(alDRP.dPlannedMovement).%OpenId(objResultSet.Data("ID"))
					
				;	set objPlannedMovement.FromLocn    = ##class(alLOC.iULOC).GetLocation(idLocnFrom)    ; 30-Oct-2008
					set objPlannedMovement.FromStorage = ##class(alLOC.iULOC).GetStorage(idLocnFrom,idStoreFrom)
					set objPlannedMovement.Bundle      = ##class(alSOH.dBundle).%OpenId(idBundle)
					set objPlannedMovement.QtyRequired = fltActualQtyPicked	;$case(fltActualQtyPicked>fltQtyPicked,1:fltQtyPicked,:fltActualQtyPicked)
					set fltQtyPicked = fltQtyPicked - objPlannedMovement.QtyRequired
					set sc = objPlannedMovement.%Save()
					// PPP:FIXME: Based on screen input, may be out of date and non-reservable between display and processing!
					set:$$$ISERR(sc) strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
					set blnUpdated = $$$YES
				}
				
				//New PickLine created by User
				if 'blnUpdated {
					set objPlannedMovement = ##class(alDRP.dPlannedMovement).%New()
					set objPlannedMovement.MovementType = ##class(alDRP.dMovementType.TransferIssue).%New()
					
					set objPlannedMovement.FromLocn    = ##class(alLOC.iULOC).GetLocation(idLocnFrom)
					set objPlannedMovement.FromStorage = ##class(alLOC.iULOC).GetStorage(idLocnFrom,idStoreFrom)
					set objPlannedMovement.Bundle      = ##class(alSOH.dBundle).%OpenId(idBundle)
					set objPlannedMovement.QtyRequired = fltActualQtyPicked ;$case(fltActualQtyPicked>fltQtyPicked,1:fltQtyPicked,:fltActualQtyPicked)
					set fltQtyPicked = fltQtyPicked - objPlannedMovement.QtyRequired
					
					set objPlannedMovement.ToLocn     = objToLocn
					set objPlannedMovement.ToStorage  = ##class(alLOC.iULOC).GetStorage($$$INDRPUMLKWLocation(strDispatch),$$$INDRPUMLKWStockLocation(strDispatch)) ; 24-Sep-2008
					set objPlannedMovement.Item       = ##class(alINV.iUINV).GetItem(idItem)
					set objPlannedMovement.Reference  = pidTFR
					set objPlannedMovement.LineNumber = idLine
					set sc = objPlannedMovement.ChangeState(3)
					
			// PPP:FIXME: Based on screen input, may be out of date and non-reservable between display and processing!
					set:$$$ISERR(sc) strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
				}
			}
		}
		quit:$$$ISERR(strStatus)
	}
	quit strStatus
	
	
OnBeforeDelete(pYM,pYFORM,pYKEY,pYFELD="")
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; ByRefs: None
	;
	; Returns: strStatus - $$$OK if successful, otherwise error message
	;
	; History:
	; 09-Oct-2008	HQN	Only allow deletion of line if not last PickLine for TFRLine
	; 					Remove validation flag for this line if deletable
	;-------------------------------------------------------------------------------
	new blnLineExists,idReferenceKey,idReferenceRow,idTFRLine,strPickLine,strStatus
	
	; WORKAROUND: This gets called twice, once from the delete button on the gridline
	; another when the grid is saved, it calls it for each entry in the $$$WWWDATEN("KILLEDRECORD") entries
	; we don't want to validate the ones that are marked as killed already
	;quit:$get($$$WWWDATEN("KILLEDRECORD",$$$WWWDATEN("REFERENCEROW",$$$KEY2(pYKEY),1)))=1
	
	set strStatus     = $$$OK
	set blnLineExists = $$$NO
	;set strStatus = $$$MakeStatus("Unable to delete, must have 1 pickline per TFRLine")
	set idTFRLine = $$$INTFRPickLineSourceline(pYFELD)
	; Find 1 other pickline
	set idReferenceKey = ""
	
	for {
		set idReferenceKey = $order($$$WWWDATEN("REFERENCEKEY",idReferenceKey))
		quit:idReferenceKey=""
		set idReferenceRow = $get($$$WWWDATEN("REFERENCEKEY",idReferenceKey,1))
		continue:$translate(idReferenceRow,$$$DBLQUOTE)=pYKEY
		set strPickLine = $$$GRIDGetYFELD(idReferenceRow)
		continue:$data($$$WWWDATEN("KILLEDRECORD",idReferenceKey))
		continue:$$$INTFRPickLineSourceline(pYFELD)'=$$$INTFRPickLineSourceline(strPickLine)
		
		set blnLineExists = $$$YES
		quit:blnLineExists
	}
	
	if blnLineExists = $$$NO {
		set strStatus = $$$MakeStatus("IN00856")   ; "Unable to remove last Pick Line"
		$$$Alert(strStatus)
	} else {
		kill $$$TempStore("TRNLineErrors",$$$KEY2(pYKEY))
	}
	
	$$$YQHandler(strStatus)
	
	set:$$$ISERR(strStatus) Q = $$$QDontSave
	
	quit strStatus
	
]]></Routine>
</Export>