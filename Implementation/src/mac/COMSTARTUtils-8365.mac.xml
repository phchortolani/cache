<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMSTARTUtils" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMSTARTUtils
    ; this routine packages a set of subroutines used by the %ZSTART and %ZSTOP entrypoints
    ; 
 
	;=========================================================================
	; WARNING - Any modifications to this routine when it is installed in %SYS
	; 			will be OVERRIDEN with the next upgrade of COM.
	; 			All required changes should be made in COM.
	;=========================================================================
 
 
    ; does not do anything if invoked directly
    quit
    
#Define Empty ""
#Define OprLog 1
 
InstallRoutines PUBLIC ;
	; History:
	; 13-Mar-2007	RPW		SR10754: Do not copy this into % routines.
	; Install the system trap routines
	new strCurrentNamespace, code, newroutine
	
	set strCurrentNamespace=$zutil(5)
 
	; setup the START routine	
	do $zutil(5,"%SYS")
	set newroutine="%ZSTART"
	if ($DATA(^ROUTINE("%ZSTART"))) {
		if ($piece($text(IDENT^%ZSTART),";;",2)'="COMSTARTZstart") {
			set newroutine="%COMSTARTZstart"	; dont clobber someone elses routine
		}
	}
	do $zutil(5,strCurrentNamespace)
	set code="zl COMSTARTZstart zn ""%SYS"" zs "_newroutine
	xecute code	
 
	; setup the STOP routine	
	do $zutil(5,"%SYS")
	set newroutine="%ZSTOP"
	if ($DATA(^ROUTINE("%ZSTOP"))) {
		if ($piece($text(IDENT^%ZSTOP),";;",2)'="COMSTARTZstop") {
			set newroutine="%COMSTARTZstop"	; dont clobber someone elses routine
		}
	}
	do $zutil(5,strCurrentNamespace)
	set code="zl COMSTARTZstop zn ""%SYS"" zs "_newroutine
	xecute code	
 	
 	/* SR10754
	; setup the Utilities routine	
	do $zutil(5,strCurrentNamespace)
	set code="zl COMSTARTUtils zn ""%SYS"" zs %COMSTARTUtils"
	xecute code	
	*/
	
	do $zutil(5,strCurrentNamespace)
	
	quit
 
    /* SR10754
WriteConsole(LineText) PUBLIC ;
    ; write the line to the console log
    ; by default the file cconsole.log in the MGR directory
    new SaveIO
    
    ; save the current device and open the operator console
    ; set up error handling to cope with errors
    ; there is little to do if an error happens
    set SaveIO = $IO
    set $ZTRAP = "WriteConsoleExit"
    open $$$OprLog
    use $$$OprLog
    ; we do not need an "!" for line termination
    ; each WRITE becomes its own console record
    write LineText
    ; restore the previous io device
    close $$$OprLog
    ; pick up here in case of an error
WriteConsoleExit ;Internal Tag
    set $ZTRAP = ""
    use SaveIO
    quit
 
    
WriteLog(rtnname, entryname, items) PUBLIC ;
    ; write entries into the log file
    ; the log is presumed to be open as 
    ; the default output device
    ; 
    ; rtnname: distinguishes between ZSTART & ZSTOP
    ; entryname: the name of the entrypoint we came from
    ; items: a $LIST of name-value pairs
    new ThisIO, ThisLog
    new i, DataString
    
    ; preserve the existing $IO device reference
    ; set up error handling to cope with errors
    ; there is little to do if an error happens
    set ThisIO = $IO
    set $ZTRAP = "WriteLogExit"
 
    ; construct the name of the file
    ; use the month and day as part of the name so that 
    ; it will create a separate log file each day
    set ThisLog = "ZSS"
                _ "-"
                _ $EXTRACT($ZDATE($HOROLOG, 3), 6, 10)
                _".log"
    
    ; and change $IO to point to our file
    open ThisLog:"AWS":0
    use ThisLog
    
    ; now loop over the items writing one line per item pair
    for i = 1 : 2 : $LISTLENGTH(items)
    {
        set DataString = $LISTGET(items, i, "*MISSING*")
        if ($LISTGET(items, (i + 1), $$$Empty) '= $$$Empty)
        {
            set DataString = DataString
                           _ ": "
                           _ $LISTGET(items, (i + 1))
        }
        write $ZDATETIME($HOROLOG, 3, 1),
              ?21, rtnname,
              ?28, entryname,
              ?35, DataString, !
    }
    
    ; stop using the log file and switch $IO back
    ; to the value saved on entry
    close $IO
    ; pick up here in case of an error
WriteLogExit ;Internal Tag
    set $ZTRAP = ""
    use ThisIO
    quit
 	*/
]]></Routine>
</Export>