<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INRECSummary" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INRECSummary
	;+++++++++++++++++++++++++++++++++++++++
	; see INRECDoco
	;+++++++++++++++++++++++++++++++++++++++
#include COMSYS
#include INConst
#include %occInclude
#include COMGridEdit31
	
#define FORMFldINRECSummaryLineType			5
#define FORMFldINRECSummaryItem				6
#define FORMFldINRECSummaryOrderedUnit		9
#define FORMFldINRECSummaryQtyRecvd			10
#define	FORMFldINRECSummaryReceivedUnit		11
#define FORMFldINRECSummaryUnitCost			14
#define FORMFldINRECSummaryExtendedCost		15
#define FORMFldINRECSummaryCostAfterDisc	16
#define FORMFldINRECSummaryCostAllocation	20
#define FORMFldINRECSummaryGLAccount		21
#define FORMFldINRECSummaryDiscCode			26
#define	FORMFldINRECSummaryDiscType			27
#define FORMFldINRECSummaryDiscRate			28
#define FORMFldINRECSummaryCostDistrib		30
#define FORMFldINRECSummaryUnitQtyRecvd		33
	
#define DELIM	$char(31)
#define EnumTypeStandard	0
#define EnumTypeDiscount	1
#define EnumTypeBonus		2

#define IsItemLine   ((enumLineType=$$$EnumTypeStandard) || (enumLineType=$$$EnumTypeBonus))
#define IsChargeLine ((enumLineType'="") && (enumLineType'=$$$EnumTypeStandard) && (enumLineType'=$$$EnumTypeBonus))

#;   : GetQtyEntered, ReceiptQuantities, OnBeforeDisplayCombo
#; 1 : CreateViaOrderLine, CanCreateViaOrderLine, LineExistsOnGrid, CreateINRECLine
#; 2 : OnLineAdded, OnBlur, OnBlurQty, OrderLineReceipts, GetDiscountCode
#; 3 : OnBeforeFormat
#; 4 : OnBeforeFormConstruction, OnBeforeButtonLine
#; 5 : OnBeforeCopy, OnBeforeSave, AssociatedValidation, OnAfterSaveHook
#; 6 : RefreshGridLines, SetRefresh, CalculateSummTotal
#; 7 : OnBeforeDeleteHook, OnBeforeDelete, OnLineDeleted
#define LogR(%1,%2) 	;
#define LogR1(%1,%2) 	;
#define LogR2(%1,%2) 	;
#define LogR3(%1,%2) 	;
#define LogR4(%1,%2) 	;
#define LogR5(%1,%2) 	;
#define LogR6(%1,%2) 	;
#define LogR7(%1,%2) 	;
#define LogRx(%1)		;
#define LogR1x(%1)		;
#define LogR2x(%1)		;
#define LogR3x(%1)		;
#define LogR4x(%1)		;
#define LogR5x(%1)		;
#define LogR6x(%1)		;
#define LogR7x(%1)		;
#define LogRm(%1)		;
#define LogR2m(%1)		;
#define LogR6m(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECSummary("_%2_") : "_$zh $$$JournalOn
#;define LogR1(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECSummary("_%2_") : "_$zh $$$JournalOn
#;define LogR2(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECSummary("_%2_") : "_$zh $$$JournalOn
#;define LogR3(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECSummary("_%2_") : "_$zh $$$JournalOn
#;define LogR4(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECSummary("_%2_") : "_$zh $$$JournalOn
#;define LogR5(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECSummary("_%2_") : "_$zh $$$JournalOn
#;define LogR6(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECSummary("_%2_") : "_$zh $$$JournalOn
#;define LogR7(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECSummary("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR1x(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR2x(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR3x(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR4x(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR5x(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR6x(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR7x(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR2m(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR6m(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
OnAfterSaveHook(pstrKeys,pobjSummary)
	;-------------------------------------------------------------------------------
	; Update Insert INRecLine records related to this record
	; 
	; CalledFrom: INRECSummary Class OnAfterSave event
	; 
	; Param:
	;	pstrKeys	INRECSummary Primary Key idReceipt_$$$COMMA_idSummary
	;	pobjSummary	INRECSummary in record
	; 
	; History:
	; 14-Dec-2009	GRF		SR16605: remove commented code
	; 07-Apr-2009	GRF		SR16363: Disable due to FIRM on INReceipt
	; 31-Mar-2009	DWR		SR16363: only create an INRECLine record if the linetype
	;							is a standard type.
	; 27-Mar-2009	GRF		SR16363: INRECSummary and INRECLine Line No Keys must
	;							match (may delete lines during entry of INRECSummary
	;							leaving holes)
	; 05-Mar-2009	HQN		SR16363: Suggest Storage
	; 26-Feb-2009	HQN		SR16363: Created
	;-------------------------------------------------------------------------------
	new idReceipt,idRecptLine,idOrder,idOrderLine,idSummary,objINRECLine,objLocn,strStatus
	
	$$$LogR("OnAfterSaveHook",pstrKeys)
	;quit $$$YES
	
	set strStatus   = $$$OK
	set idReceipt   = $$$KEY1(pstrKeys)
	set idSummary   = $$$KEY2(pstrKeys)
	
	set idOrder     = $$$INRECSummaryPurchaseOrder(pobjSummary)       ; FIXME : Not used - may not exist for GR w/o PO or bonus stock <GRF>
	set idOrderLine = $$$INRECSummaryPurchaseOrderLine(pobjSummary)
	
	quit strStatus
	
	
OnBeforeDelete(pstrKeys,pobjSummary="")
	;-------------------------------------------------------------------------------
	; INRECSummary is presented as two tabs
	;  - Receipts Tab becomes READ-ONLY once the receipt has been FIRMED.
	;  - Invoice Tab needs to be editable until the receipt has been POSTED.
	;    This includes creation, modification and deletion of charge lines and entry
	;    or modification of unit costs for item lines.
	;
	;    If the receipt has not been FIRMED, item lines may only be deleted if there
	;    are no line-based charges applicable and, if it is the last item line on
	;    the receipt, if there are no invoice-based charges applicable.
	;
	; History :
	; 15-Jul-2009	GRF		SR16669: clarify idGridRow use
	; 06-Jul-2009	GRF		SR16658: Q should contain message no or $lb(message no
	;							and values) for Q processing to decode.
	; 19-Jun-2009	GRF		SR16658: Created
	;-------------------------------------------------------------------------------
	new enumLineType,idGridRow,idNextLine,idPrevLine,idReceipt,idSummary,objReceipt
	
	$$$LogR("OnBeforeDelete",pstrKeys_"<"_pobjSummary)
	
	set idReceipt = $$$KEY1(pstrKeys)
	set idSummary = $$$KEY2(pstrKeys)
	
	if idSummary '[ "." {
		if pobjSummary="" set pobjSummary = $$$GRIDGetYFELD(idSummary)
		set enumLineType = $$$INRECSummaryLineType(pobjSummary)
		
		if $$$IsItemLine {        ; Item-Based Line 
			set objReceipt = $get(^INREC(0,idReceipt,1))
			if $$$INRECFirmed(objReceipt) = $$$YES {
				set Q = $$$QDontDelete_$$$Text("IN00723")  ; "Transaction has already been Firmed"
			
			} else { ; check for charges
				set idNextLine = idSummary
				for {
					set idNextLine = $order($$$WWWDATEN("REFERENCEROW",idNextLine))      ; 2.01
					quit:idNextLine=""
					set idGridRow = $get($$$WWWDATEN("REFERENCEROW",idNextLine,1))       ; 2x01
					continue:$data($$$WWWDATEN("KILLEDRECORD",idGridRow))
					quit			
				}
				
				if idNextLine [ "." {
					set Q = $$$QDontDelete_$$$Text("IN01066")  ; "Can not delete - this line has charges."
				
				} elseif idNextLine'="" {
					set enumLineType = $get($$$WWWDATEN("Y"_idGridRow_"_"_$$$FORMFldINRECSummaryLineType,1))  ; for Next Line
					set idPrevLine = idSummary
					for {
						set idPrevLine = $order($$$WWWDATEN("REFERENCEROW",idPrevLine),-1)   ; 2.01
						quit:idPrevLine=""
						set idGridRow = $get($$$WWWDATEN("REFERENCEROW",idPrevLine,1))       ; 2x01
						continue:$data($$$WWWDATEN("KILLEDRECORD",idGridRow))
						quit
					}
					
					if (idPrevLine="") && $$$IsChargeLine {
						set Q = $$$QDontDelete_$$$Text("IN01066")  ; "Can not delete - this line has charges."
					}
	;			} else {          ; Last line - always okay to delete since not Item Line with Charges
				}
			}
	;	} else {                  ; Invoice-based Charge Line - always okay to delete
		}
	
	;} else {                     ; Line-based Charge Line    - always okay to delete
	}
	quit
	
		
OnBeforeDeleteHook(pstrKeys,pobjSummary="")   ;FIXME  Does not appear to be called through the grid <GRF> 
	;-------------------------------------------------------------------------------
	; Deletes INRECLines that are related to this record
	; 
	; CalledFrom: INRECSummary Class OnBeforeDelete event
	; 
	; Inputs:
	;	pstrKeys		INRECSummary keys  idReceipt_","_idSummary
	;	pobjSummary		INRECSummary data
	; 
	; History:
	; 04-Mar-2009	HQN		SR16363: Created
	;-------------------------------------------------------------------------------
	new idReceipt,idRecptLine,idSummary,objSummary,strStatus
	
	$$$LogR("OnBeforeDeleteHook",pstrKeys)
	
	set strStatus = $$$OK
	set idReceipt = $$$KEY1(pstrKeys)
	set idSummary = $$$KEY2(pstrKeys)
	
	if pobjSummary="" set pobjSummary = $get(^INRECSummary(0,idReceipt,idSummary,1))
	
	if ($$$INRECSummaryStatus(pobjSummary) '= 0) && ($$$INRECSummaryStatus(pobjSummary) '= "") {
		set strStatus = $$$MakeStatus("IN00406",idSummary) ; Line %1 already received
	
	} else {
		set idRecptLine = ""
		for {
			set idRecptLine = $order(^INRECLine(0,idReceipt,idRecptLine))
			quit:idRecptLine=""
			continue:(idRecptLine\1)'=idSummary
			
			set strStatus = $$$Kill("INRECLine",idReceipt_$$$COMMA_idRecptLine)
			quit:$$$ISERR(strStatus)
		}
	}
	quit strStatus      ; FIXME : FINAPINVMatchCache? What is set up on Firm?  <GRF>
	
	
OnLineDeleted(pstrKeys,pintRowCount)   ; FIXME : pintRowCount? <GRF>
	;-------------------------------------------------------------------------------
	; update the header field Summary Total when a line is deleted
	; 
	; Called By: COMGridEdit executable
	; 
	; History:
	; 02-Jul-2012	GRF		SR18052: Match OnBlur processing
	; 12-Apr-2010	GRF		SR17177: pass revised objSummary to UpdateRunningTotals
	; 07-Apr-2010	GRF		SR17177: refresh running totals
	; 18-Jun-2009	DWR		SR16654 Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	$$$LogR("OnLineDeleted",pstrKeys_"<"_$get(pintRowCount))
	
	;do CalculateSummTotal($$$KEY1(pstrKeys))                             ; SR18052 vvv
	;do UpdateRunningTotals^INRECSummaryC("","")       ; SR17177
	do UpdateRunningTotals^INRECSummaryC("","")
	do SetRefresh^COMGridEdit31Events(YFORM,$$^WWWKEYBUILD($$$KEY1(pstrKeys)_",1"),"")
	set strStatus = $$RefreshGridLines^COMGridEditRefresh(1,"Recalc")
	do CalculateSummTotal($$$KEY1(pstrKeys))                              ; SR18052 ^^^
	
	quit
	
	
CreateINRECLine(pidReceipt,pidSummary,pobjSummary="")
	;-------------------------------------------------------------------------------
	; Create INRECLine record from INRECSummary record
	; 
	; CalledFrom: OnAfterSaveHook^INRECReceipt
	; 
	; Param:
	;	pidReceipt		INRECSummary Keys
	;	pidSummary
	;	pobjSummary		INRECSummary in record
	; 
	; Returns:
	;	objINRECLine	INRECLine record
	;
	; History:
	; 16-Sep-2009	GRF		SR16361: Align INRECLine/INReceiptLine for later use of
	;							D65 or D66 for unit rather than D5 which will differ
	;							depending on which form was used (will use class
	;							INRECLine instead of INWEAUF)
	; 03-Aug-2009	PPP		SR16815	Changed $$$INRECLineBaseQuantity to $$$INRECLineOrderQuantity
	; 17-Jun-2009	PPP		SR16648:If the Item is a Consumable, 'X' Location
	; 03-Apr-2009	GRF		SR16363: Ensure objINRECLine exists
	; 31-Mar-2009	DWR		SR16363: Check for a "." in the id line before creating
	;							an INRECLine. <Reverted> to use a check for line type			
	; 30-Mar-2009	DWR		SR16363: Incorrect obj** used to populate the Line location
	;							and supplier
	; 26-Feb-2009	HQN		SR16363: Created
	;-------------------------------------------------------------------------------
	new enumLineType,fltConv,objINREC,objINRECLine,objLocn
	
	$$$LogR("CreateINRECLine",pidReceipt_","_pidSummary)
	
	if (pobjSummary = "") {
		set pobjSummary = $get(^INRECSummary(0,pidReceipt,pidSummary,1))
	}
	set objINRECLine = ""
	
	set enumLineType = $$$INRECSummaryLineType(pobjSummary)
	$$$LogR("CreateINRECLine + ",enumLineType)
	
	if $$$IsItemLine {
		set objINREC = $get(^INREC(0,pidReceipt,1))
		set $$$INRECLineSupplier(objINRECLine)      = $$$INRECSupplier(objINREC)
		set $$$INRECLineLocation(objINRECLine)      = $$$INRECLocation(objINREC)
		
		set $$$INRECLineOrder1(objINRECLine)        = $$$INRECSummaryPurchaseOrder(pobjSummary)
		set $$$INRECLineOrderLine(objINRECLine)     = $$$INRECSummaryPurchaseOrderLine(pobjSummary)
		set $$$INRECLineItem(objINRECLine)          = $$$INRECSummaryItem(pobjSummary)
		set $$$INRECLineQuantity(objINRECLine)      = $$$INRECSummaryQuantityReceived(pobjSummary) ; D4 =D10 IQ [IU from Item Master Data]
		set $$$INRECLineUnit(objINRECLine)          = $$$INRECSummaryReceivedUnit(pobjSummary)     ; D5 =D11 RU [duplicated D65 - OU from form INRECLine]
		set $$$INRECLineOrderQuantity(objINRECLine) = $$$INRECSummaryQuantityOrdered(pobjSummary)  ; D6 =D8  OQ
		set $$$INRECLineUnitQuantity(objINRECLine)  = $$$INRECSummaryUnitQtyReceived(pobjSummary)  ; D64=D33 RQ
		set $$$INRECLineReceivedUnit(objINRECLine)  = $$$INRECSummaryReceivedUnit(pobjSummary)     ; D65=D11 RU
		set $$$INRECLineOrderedUnit(objINRECLine)   = $$$INRECSummaryOrderedUnit(pobjSummary)      ; D66=D9  OU
		set $$$INRECLineInclude(objINRECLine)       = $$$YES
        if ((+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1))))
        	&& '(+$$$WWWClientParamCoreChangesTCI($get(^WWWClientParam(YM,YM,1))))){
			set $$$INRECLineFREE1(objINRECLine)         = $$GetTemperaturaItem^VARSQL($$$INRECSummaryItem(pobjSummary))
		}
	
	;	set idInventoryUnit                         = $$$INRECSummaryInventoryUnit(pobjSummary)  ; doco only - not actually used SR17579
		
	//	set fltConv = $$GetUOMConversion^INUOMConversion($$$INRECLineItem(objINRECLine),$$$INRECLineUnit(objINRECLine)) 
	//	set $$$INRECLineEach(objINRECLine)          = $$$INRECSummaryUnitCost(pobjSummary)          ; SR16815
 		set fltConv = $$GetUOMConversion^INUOMConversion($$$INRECLineItem(objINRECLine),$$$INRECLineUnit(objINRECLine))
		if fltConv {
			set $$$INRECLineEach(objINRECLine)      = +$justify($$$INRECSummaryUnitCost(pobjSummary)/fltConv,0,$$DPforInventoryCost^INVORG())
		} 

	//	set objLocn = $get(^WWW0121(0,0,$$$INRECLocation(objINREC),1))    ; SR16648 vvv
	//	set $$$INRECLineStockLocation(objINRECLine) = $$$WWW0121ReceiptStorage(objLocn)
		set $$$INRECLineStockLocation(objINRECLine) = $$GetStorage^INLP($$$INRECLineItem(objINRECLine),$$$INRECLocation(objINREC))
		if (+$$$WWWClientParamCoreChangesHEVA($get(^WWWClientParam(YM,YM,1)))) {
			if ($$CheckItemUnitarizar^VARINRECLine($$$INRECLineItem(objINRECLine) ,$$$INRECLineLocation(objINRECLine))=1) set $$$INRECLineStockLocation(objINRECLine) =$$GetLocUnitarizar^VARINRECLine($$$INRECLineItem(objINRECLine) ,$$$INRECLineLocation(objINRECLine))
		}
	//	set $$$INRECLineFlag(objINRECLine)          = 1 ; Defaults ^INWEMERKER enum "OK"  ; SR16648
		set $$$INRECLineFlag(objINRECLine)          = $order(^INWEMERKER(0,""))   ; Defaults ^INWEMERKER enum "OK"  ;FIXME user definable class?
	}
	quit objINRECLine
	
	/*  FIXME : conflict between assignment above and association in form INRECLine (SR17579)
		INRECSummary	OU D8 => D9		RU D33 => D11		IU D10 => D22
		INRECLine		   D6 => D66	RU D64 => D65		IU D4  => D5  => D7 (Item)
		  as above						          D5		IU D4  => ...
	*/
	
CreateViaOrderLine(pstrOrderKeys,pobjOrderLine="")
	;-------------------------------------------------------------------------------
	; Creates a INRECSummary record string from the orderline record
	; FIXME: Create from new INPOLine record when ready
	; 
	; Param:
	;	pstrOrderKeys	INAUFP key
	;	pobjOrderLine	INAUFP record
	; 
	; Called by:
	;	SelectOrder^INReceipt
	;	OnAfterSaveHook^INRECLine - OBSOLETE and DISABLED
	; 
	; Returns: objINRECSummary record
	; 
	; History:
	; 10-Feb-2010	GRF		SR17138+: Use revised functions in INRECSummaryUtil
	; 02-Feb-2010	shobby	SR17138: Populate from Ordered Unit/Quantity on INAUFP
	; 07-Aug-2009	DWR		SR16822: Created calls to INRECSummaryUtil to return
	;							order values.
	; 12-Jun-2009	GRF		SR16363: Unit Cost not set before test - remove test
	; 25-Mar-2009	DavidR	SR16363: added storage of Max retail Price set from INARTK
	; 05-Mar-2009	HQN		SR16363: Default Cost
	; 28-Feb-2009	HQN		SR16363: Created
	;-------------------------------------------------------------------------------
	new fltMaxRetPrice,idItem,idOrder,idOrderLine,idSupplier,objItemSupp,objSummary
	
	$$$LogR("CreateViaOrderLine",pstrOrderKeys)
	
	set idOrder     = $$$KEY1(pstrOrderKeys)
	set idOrderLine = $$$KEY2(pstrOrderKeys)
	; FIXME : idOrder/idOrderLine may be null if Receive w/out order
	;         Need to get from INWEFREI (may not exist since we are only just building this) <GRF>
	
	if (pobjOrderLine = "") && (idOrder'="") && (idOrderLine'="") {
		set pobjOrderLine = $$GetObjOrderLine^INRECSummaryUtil(idOrder,idOrderLine)
	}
	set idItem     = $$GetOrderLineItem^INRECSummaryUtil(pobjOrderLine)
	set idSupplier = $$GetLineSupplier^INRECSummaryUtil(pobjOrderLine)
	
	set $$$INRECSummaryPurchaseOrder(objSummary)     =  idOrder
	set $$$INRECSummaryPurchaseOrderLine(objSummary) =  idOrderLine 
	set $$$INRECSummaryItem(objSummary)              =  idItem
	if (+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))){
		set $$$INRECSummaryFREE9(objSummary)         =  $$SQLGetGrupoItem^VARSQL(idItem)
	}
	;SR17138 set $$$INRECSummaryQuantityOrdered(objSummary)   =  $$QtyOrdered^INRECSummaryUtil(pobjOrderLine)
	;SR17138 set $$$INRECSummaryOrderedUnit(objSummary)       =  $$QtyUnit^INRECSummaryUtil(pobjOrderLine)
	;et $$$INRECSummaryQuantityOrdered(objSummary)   =  $$$INAUFPOrderedQuantity(pobjOrderLine)         ;SR17138 
	;et $$$INRECSummaryOrderedUnit(objSummary)       =  $$$INAUFPOrderedUnit(pobjOrderLine)             ;SR17138 
	set $$$INRECSummaryQuantityOrdered(objSummary)   =  $$QtyOrdered^INRECSummaryUtil(pobjOrderLine)	;SR17138+
	set $$$INRECSummaryOrderedUnit(objSummary)       =  $$OrderUnit^INRECSummaryUtil(pobjOrderLine)		;SR17138+ 
	
	; SR16363 12-Jun-2009
	;;set $$$INRECSummaryUnitCost(objSummary)        = +$$^INARTKOST($$$INAUFPItemNumber(pobjOrderLine),$$$INAUFPQuantity(pobjOrderLine)) ; 05-Mar-2009
	;if $$$INRECSummaryUnitCost(objSummary)="" {
	;	;set $$$INRECSummaryUnitCost(objSummary)     =  $$GetUnitCost^INAUFP(idOrder,idOrderLine) ;$$$INAUFPUnitCost(pobjOrderLine) ; 05-Mar-2009
	;	set $$$INRECSummaryUnitCost(objSummary)      =  $$GetUnitCost^FINAPInvMatchCache(idOrder,idOrderLine) ;$$$INAUFPUnitCost(pobjOrderLine) ; 05-Mar-2009
	;}
	if ('(+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1))))){
		set $$$INRECSummaryUnitCost(objSummary)          =  $$GetUnitCost^FINAPInvMatchCache(idOrder,idOrderLine) ;$$$INAUFPUnitCost(pobjOrderLine) ; 05-Mar-2009
	}
	
	;----------------------------------
	; Get Max Retail price from INARTK
	; and store in INRECSummary if not null
	;----------------------------------
	set objItemSupp    = $get(^INARTK(0,idItem,idSupplier,1))
	set fltMaxRetPrice = $$$INARTKMaxRetailPrice(objItemSupp)
	if fltMaxRetPrice'="" set $$$INRECSummaryMaximumRetailPrice(objSummary) = fltMaxRetPrice
	
	quit objSummary
	
	
CanCreateViaOrderLine(pstrOrderKeys,pobjOrderLine)
	;-------------------------------------------------------------------------------
	; Check whether a INRECSummary record can be created from this order line
	; 
	; called by:	LoadLines^INReceiptButton, Create^INReceiptLink
	; 
	; Param:
	;	pstrOrderKeys	INAUFP Keys
	;	objOrderLine	INAUFP record
	; 
	; Returns: strStatus
	; 25-Aug-2010	SCR		SR17522: Check Item Status
	; 07-Aug-2009	DWR		SR16822: Created calls to INRECSummaryUtil to get order
	;							values and validation
	; 28-Feb-2009	HQN		SR16363: Created
	;-------------------------------------------------------------------------------
	new strStatus,idItem
	
	$$$LogR("CanCreateViaOrderLine",pstrOrderKeys)
	
	set strStatus = $$$OK
	
	if $$IsCompleted^INRECSummaryUtil(pobjOrderLine) {
		set strStatus = $$$MakeStatus("IN00387",pstrOrderKeys) ; "Order %1 is closed."
	
	} else { ;"Receipt has exceeded ordered quantity in line '%2'. Other existing receipts account for '%1'.~"
		if $$QtyOrderRemaining^INRECSummaryUtil(pobjOrderLine) < 0 { 
			set strStatus = $$$MakeStatus("IN00514",$$$KEY2(pstrOrderKeys),$$$KEY1(pstrOrderKeys))
		}  ; FIXME : %1 should be quantity not key value.  Note : $$QtyOrderRemaining now returns Qty in Inventory Units.
	}
	if $$$ISOK(strStatus) {  	; SR17522
		set idItem    = $$$INAUFPItemNumber(pobjOrderLine)
		set strStatus = $$IsUsable^INARTDataAccess(idItem,"INREC")
	}
	if (+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))){
		if $$$ISOK(strStatus) {
			set strStatus = $$CheckEmpenho^VARINReceipt(pstrOrderKeys)	
		}	
	}
	quit strStatus         
	
	
LineExistsOnGrid(pobjNewSummary)
	;-------------------------------------------------------------------------------
	; Check to stop a particular order line from being added to a receipt more than once.
	; 
	; CalledFrom:
	;	Select^INReceipt()
	;	SelectOrder^INReceipt
	; 
	; Inputs:	pobjNewSummary	The INRECSummary object being constructed to be
	;							added to WWWDATEN if the order/line isn't already
	;							present.
	; History:
	; 06-Jun-2012	GRF		SR18012: get today once & reuse
	; 15-Jul-2009	GRF		SR16669: clarify idGridRow use
	; 23-Jun-2009	GRF		SR16598: Grid variable mismatch corrected
	; 03-Mar-2009	HQN		SR16363: Ignore deleted lines
	; 28-Feb-2009	HQN		SR16363: Created
	;-------------------------------------------------------------------------------
	new blnExists,dteToday,idDataLine,idGridRow,idOrder,idOrderLine,objRECSummary
	
	$$$LogR("LineExistsOnGrid",""_$g(YFORM))
	
	set idOrder     = $$$INRECSummaryPurchaseOrder(pobjNewSummary)
	set idOrderLine = $$$INRECSummaryPurchaseOrderLine(pobjNewSummary)
	
	set dteToday    = +$horolog     ; SR18012
	set blnExists   = $$$NO
	set idDataLine  = ""
	for {
		set idDataLine = $order(^WWWDATEN(0,dteToday,YUSER,"INRECSummary","V","REFERENCEROW",idDataLine))  ; 2.01
		quit:idDataLine=""
		set idGridRow = $get(^WWWDATEN(0,dteToday,YUSER,"INRECSummary","V","REFERENCEROW",idDataLine,1))   ; 2x01
		continue:$data(^WWWDATEN(0,dteToday,YUSER,"INRECSummary","V","KILLEDRECORD",idGridRow)) ; 03-Mar-2009
		
		set objRECSummary = $$$GRIDGetYFELD(idDataLine)
		if ($$$INRECSummaryPurchaseOrder(objRECSummary)     = idOrder)     &&
		   ($$$INRECSummaryPurchaseOrderLine(objRECSummary) = idOrderLine)    {
			
			set blnExists = $$$YES
			quit
		}
	}
	quit blnExists
	
	
OnLineAdded(pintRow,pstrKeys)
	;-------------------------------------------------------------------------------
	; Overide default key handling, cannot have sub-lines
	; 
	; Called By: COMGridEdit executable
	; 
	; Inputs:
	;	pintRow		2.01 format grid row
	;	pstrKeys	idReceipt_","_idSummary " Not used
	; 
	; History:
	; 06-Jun-2012	GRF		SR18012: get today once & reuse; copy onBlur processing
	;							to update CacheTempINRECSummary
	; 07-Apr-2010	GRF		SR17177: comment code deprecated by SR15753
	; 03-Aug-2009	DWR		SR16785: Removed the setting of linetype moved to onBlur
	;							of Item on tab 1.
	; 23-Jul-2009	GRF		SR16669: Setup ^CacheTemp(...,"Grid","ReadOnly") table
	; 15-Jul-2009	GRF		SR16669: clarify idGridRow, idDataLine use
	; 09-Jul-2009	GRF		-: Change default line type to Standard for No orderNo
	; 12-Jun-2009	GRF		SR16598: IsChargeLine macro
	; 30-Mar-2009	GRF		SR16363: Manually adjust the HIDDEN settings depending
	;							on which tab we are under.
	; 30-Mar-2009	GRF		SR16363: disabled - need whole numbers on "New Line"
	;							and incremental sublines for adjustments on finance
	;							tab only whereas previously were only dealing in
	;							whole line numbers.
	; 27-Mar-2009	GRF		SR16363: contains "." rather than ".0"
	; 23-Mar-2009	DavidR	SR16363: Added ShowItems call to populate dynamic grid
	;							on a new line <Commented out 26-Mar-2009 DWR>
	; 03-Mar-2009	HQN		SR16363: Created
	;-------------------------------------------------------------------------------
	new dteToday,enumLineType,idDiscCode,idGridRow,idNextKey,idDataLine,idSummary
	new intCount,loop,objSummary

	$$$LogR("OnLineAdded",pintRow)
	$$$LogRx("YFELD:"_$get(YFELD)_"<")
	
	set dteToday = +$horolog     ; SR18012
	
	set idDataLine = ""                  ; Find Nth REFERENCEROW entry (where N = pintRow)
	for loop = 1:1:pintRow {
		set idDataLine = $order(^WWWDATEN(0,dteToday,YUSER,YFORM,"V","REFERENCEROW",idDataLine))
		quit:idDataLine=""
	}
	if idDataLine'="" {
		set idGridRow    = $get(^WWWDATEN(0,dteToday,YUSER,YFORM,"V","REFERENCEROW",idDataLine,1))
		set enumLineType = $get($$$WWWDATEN("Y"_idGridRow_"_"_$$$FORMFldINRECSummaryLineType,1))   ; used by macros
	}
	
	; Hide Charge Lines on Receipt Tab
	;---------------------------------------
	if ($get(^CacheTemp(YUSER,"Grid","YSEITE")) = 1) {
		if idDataLine'="" {
			set idGridRow    = $get(^WWWDATEN(0,dteToday,YUSER,YFORM,"V","REFERENCEROW",idDataLine,1))
			set enumLineType = $get($$$WWWDATEN("Y"_idGridRow_"_"_$$$FORMFldINRECSummaryLineType,1))
			
			if $$$IsChargeLine {
				set ^WWWDATEN(0,dteToday,YUSER,YFORM,"V","HIDDEN",idGridRow) = $$$YES
			} else {
				kill ^WWWDATEN(0,dteToday,YUSER,YFORM,"V","HIDDEN",idGridRow)
			}
			
			set loop = ""
			for intCount=0:1 {
				set loop = $order(^WWWDATEN(0,dteToday,YUSER,YFORM,"V","HIDDEN",loop))
				quit:loop=""
			}
			if intCount=0 {
				kill ^WWWDATEN(0,dteToday,YUSER,YFORM,"V","HIDDEN")
			} else {
				set ^WWWDATEN(0,dteToday,YUSER,YFORM,"V","HIDDEN") = intCount
			}
		}
	
	; Display Charge Lines on Invoice Tab
	;---------------------------------------
	} elseif ($get(^CacheTemp(YUSER,"Grid","YSEITE")) = 3) {
		kill ^WWWDATEN(0,dteToday,YUSER,YFORM,"V","HIDDEN")
		
		if $get(idGridRow)'="" {   ; SR18012 vvv
			set objSummary = $$GetYFELD^COMGridEdit31G(YFORM,idGridRow)
			do UpdateThisTotal^INRECSummaryC(idGridRow,objSummary)
		}                      ; SR18012 ^^^
	}
	quit
	
	
OnBeforeCopy(pidSummKey,&pobjSummary)
	;-------------------------------------------------------------------------------
	; Zero the Fields as required
	; Unsets Status -> Signifies a copied/new line instead of imported
	; 
	; Called By: COMGridEdit executable
	; 
	; Inputs: pidSummKey  -  idReceipt_","_idSummLine
	; 
	; ByRef:  pobjSummary -  INRECSummary entry (or WWWDATEN contents)
	; 
	; History:
	; 27-Jan-2011	GRF		SR17579: Retain Received Unit and Item when copying line
	;							on invoice tab for line-based charges (not for
	;							invoice-based charges)
	; 28-Mar-2010	GRF		SR17244.1: Copying a line-based charge rather than the
	;							item line itself so get the Extended Cost from the
	;							base-line.
	; 25-Mar-2010	GRF		SR17244: Allow for In-line discount affecting ext total
	; 18-Jun-2009	GRF		SR16598: Initialise CostAfterDiscount as well
	; 15-Jun-2009	GRF		SR16598: Need to know some info for calculation since
	;							based on current line rather than source item line
	; 12-Jun-2009	GRF		SR16598: Clear item line details from new charge line
	; 04-Mar-2009	HQN		SR16363: Created
	;-------------------------------------------------------------------------------
	new idGridRow,idReceipt,idSummBase,idSummLine,objBaseSummary
	
	$$$LogR("OnBeforeCopy",pidSummKey)
	
	set $$$INRECSummaryStatus(pobjSummary)            = 0
	set $$$INRECSummaryLineType(pobjSummary)          = ""
	
	;et $$$INRECSummaryItem(pobjSummary)              = ""   ; SR16598 vvv  ; SR17579
    ;et $$$INRECSummaryReceivedUnit(pobjSummary)      = ""                  ; SR17579
    set $$$INRECSummaryUnitCost(pobjSummary)          = ""
	set $$$INRECSummaryExtendedCost(pobjSummary)      = $$$INRECSummaryCostAfterDiscount(pobjSummary)  ; SR17244
    set $$$INRECSummaryCostAfterDiscount(pobjSummary) = ""
	
	set $$$INRECSummaryDiscountCode(pobjSummary)      = ""   ; SR16669 vvv
	set $$$INRECSummaryDiscountType(pobjSummary)      = ""
	set $$$INRECSummaryDiscountRate(pobjSummary)      = ""
	set $$$INRECSummaryGLAccount(pobjSummary)         = ""
	set $$$INRECSummaryCostDistribution(pobjSummary)  = ""
	set $$$INRECSummaryCostAllocation(pobjSummary)    = ""
	
	; SR17244.1 vvv
	set idReceipt  = $$$KEY1(pidSummKey)
	set idSummLine = $$$KEY2(pidSummKey)
	set idSummBase = idSummLine\1
	if idSummLine-idSummBase'=.01 {
		set idGridRow      = $$ReferenceRow^COMGridEdit31Interface("INRECSummary",idSummBase)
		set objBaseSummary = $$GetYFELD^COMGridEdit31G("INRECSummary",idGridRow,$$$NO,"",$$$NO,"")
		set $$$INRECSummaryExtendedCost(pobjSummary) = $$$INRECSummaryCostAfterDiscount(objBaseSummary)
	}
	; ^^^
	
	; pidSummKey
	;do SetRefresh^INRECSummaryAssoc(pidGridParent,pidGridRowChild)
	quit
	
	
OnBeforeFormConstruction(pidFormField,pobjSummary)
	;-------------------------------------------------------------------------------
	; Disable Item if Order Number Set
	; 
	; Called By : Execute OnBeforeFormConstruction for INRECSummary
	;             fields 6, 10 (Item, Qty Recvd)
	; 
	; History:
	; 03-Nov-2009	DWR		SR16983: comment Received Unit code. Handled under 
	; 							OnBeforeDisplayCombo
	; 18-Jun-2009	GRF/SH	SR16598: use idReceipt instead of YKEY
	; 02-Jun-2009	DWR		SR16594: Disable the Qty received field if the form has
	;							firmed (was Disable Item if status is set) 
	; 27-May-2009	DWR		SR16580: commented out code, now handled in OnBeforeFormat
	; 04-Mar-2009	HQN		SR16363: Created
	;-------------------------------------------------------------------------------
	new idForm,idItem,idReceiptNo,objReceipt
	new strDefaultColor,strDisabledColor,strRequiredColor,strWarningColor

	$$$LogR4("OnBeforeFormConstruction",pidFormField)
	
	set idForm          = "INRECSummary" ; use this instead of YFORM in case coming from grid onblur
	set strDefaultColor = $$CellColours^COMGridEditUtil(.strDisabledColor,.strRequiredColor,.strWarningColor,"","","INRECSummary")
	
	; F10 - Quantity Received
	;---------------------------------------
	if pidFormField = $$$FORMFldINRECSummaryQtyRecvd {
		set idReceiptNo = $$GetYKEY^COMGridEdit31G()      ; SR16598
		set objReceipt = $get(^INREC(0,idReceiptNo,1))
		if $$$INRECFirmed(objReceipt) = $$$YES {
			set YHID = 1
			do UpdateFieldFormat^COMUtils("Y"_idForm_"D"_$$$FORMFldINRECSummaryQtyRecvd,"style.backgroundColor",strDisabledColor)
		}
	}
	quit
	
	
OnBeforeButtonLine(pstrForm)
	;-------------------------------------------------------------------------------
	; INRECSummary edit grid appears on tabs 1 and 3 of form INReceipt
	; Do not show the copy button (Button 15) on tab 1 but include it on tab 3.
	; 
	; Called by: Form INRECSummary
	; 
	; History:
	; 27-Mar-2009	GRF		SR16363: Created
	;-------------------------------------------------------------------------------
	new YVOR
	
	$$$LogR("OnBeforeButtonLine",pstrForm)
	
	if ($get(^CacheTemp(YUSER,"Grid","YSEITE")) = 1) {
		set YVOR = $get(^CacheTemp(YUSER,"Grid",pstrForm,"YVOR"))
		if (";"_YVOR_";") '[ ";15;" {
			set $$$WWW120DoNOTDisplayStandardButto(YVOR) = $$$WWW120DoNOTDisplayStandardButto(YVOR)_";15"
			set ^CacheTemp(YUSER,"Grid",pstrForm,"YVOR") = YVOR
		}
	}
	quit
	
	
OnBlur(pstrKeys,&pobjSummary,pidGridRow,pintCol)
	;-------------------------------------------------------------------------------
	; Actions to be carried out when an OnChange event occurs [not OnLostFocus]
	; 
	; 
	; Called By : Execute On Blur for INRECSummary fields 5, 6, 10, 14, 20, 21, 26, 27, 28, 30
	; (Line Type, Item, Qty Recvd, Unit Cost, GL Acct, Budget Code, Disc Code, Disc Type, Disc Rate, Disc Cost Distrib)
	;	
	; Inputs:
	;	pstrKeys			INRECSummary Key  (YKEY)
	;	pobjSummary			INRECSummary Data (YFELD)
	;	pidGridRow,pintCol	Grid position
	; 
	; History:
	; 03-Sep-2012	SCR		SR18100: Check Item Usable
	; 25-Jun-2012	GRF		SR18012: Base "REFRESH" on idDataLine rather than idGridRow
	; 03-Nov-2010	GRF		SR17492: Clear SR15753 commented code (& others)
	; 09-Sep-2010	PPP		SR17492:Get the Supplier Item Number from the Item Supplier Details
	; 20-Apr-2010	GRF		SR17177.3: Update Refresh when LineType changes
	; 20-Apr-2010	GRF		SR17177.2: Call UpdateThisTotal not UpdateRunningTotals
	; 16-Apr-2010	GRF		SR17177.1: move RefreshGridLines call into "Recalculate
	;							Costs" block
	; 12-Apr-2010	GRF		SR17177: pass pobjSummary to UpdateRunningTotals
	; 07-Apr-2010	GRF		SR17177: Refresh for all rate changes
	; 25-Mar-2010	GRF		SR17244: RefreshGridLines for in-line DiscountCode or
	;							DiscountRate changes
	; 25-Jan-2010	shobby	SR15753: Removed redundant code.
	; 25-Nov-2]]><![CDATA[009	DWR		SR17019: Trigger change of values if change item
	; 21-Aug-2009	DWR		SR16837: check unit price regardless of 'if have order'
	; 07-Aug-2009	GRF		SR16787: Refresh Associated Lines on Unit Price Change
	; 07-Aug-2009	GRF		SR16815: use FORMFldINRECSummaryUnitQtyRecvd
	; 05-Aug-2009	PPP		SR16815: QtyRecvd removed, UnitQtyRecvd added
	; 03-Aug-2009	DWR		SR16785: OnBlur of item, set null linetype to Standard
	; 23-Jul-2009	GRF		SR16669: Don't use WWWDATEN(idCell) to test if changed
	; 16-Jul-2009	GRF		SR16669: CostDistribution macro change; If LineType
	;							changes need to re-enter Charge Column details.
	; 15-Jul-2009	GRF		SR16669: clarify pidGridRow use
	; 15-Jul-2009	GRF		SR16689: Correct INRECSummary property names in macros
	; 11-Jun-2009	GRF		SR16598: CostAfterDiscount test was $$$ALWAYS - used new
	;							IsItemLine macro - 
	; 02-Jun-2009	GRF		SR16595: Refresh charge calculation when Discount Type
	;							is changed.
	; 01-Jun-2009	DWR		SR16587: removed check of value for unit cost, not reqd
	; 29-May-2009	DWR		SR16587: changed the operator to make the calulation of 
	;							extended cost field happen if value is >= 0 
	; 28-May-2009	DWR		SR16583: removed block of code to its own method:
	;							CalculateSummTotal now called by header form
	;							when loading an order.
	; 21-May-2009	DWR		SR16363: removed unwanted paramters from cal to 
	;							CalcCostAdj^INReceiptInvoice
	; 23-Mar-2009	DavidR	SR16363: created
	;-------------------------------------------------------------------------------
	new curUnitCost,enumDiscCode,enumLineType,fltCAD,fltCalcTot,fltExtendedCost
	new idItem,idKey1,idKey2,idLine,idRecNo,idSummary,idSupp
	new objContainerClass,objItemLine,objLine,objReceipt,strStatus

	$$$LogR2("OnBlur",pstrKeys_":"_pidGridRow_","_pintCol_">"_$get(pobjSummary)_"<")
	
	set idRecNo    = $$$KEY1(pstrKeys)
	set idSummary  = $$$KEY2(pstrKeys)        ; idDataLine
	set objReceipt = $$$GRIDYFELDContainer
	
	;======================================= Field Specific
	
	set enumLineType = $$$INRECSummaryLineType(pobjSummary)  ; SR17244 common definition
	
	; Item
	;---------------------------------------
	if pintCol = $$$FORMFldINRECSummaryItem {
		set idItem = $$$INRECSummaryItem(pobjSummary)
		set idSupp = $$$INRECSupplier(objReceipt)      //SR17492
		if idItem '= "" {
			; SR18100 vvvvvv
			set strStatus=$$IsUsable^INARTDataAccess(idItem,"INRECSummary")
			if strStatus'=$$$OK {
				$$$Alert($$$Text(strStatus))
				set $$$INRECSummaryItem(pobjSummary)=""
			}
			; SR18100 ^^^^^^
			set $$$INRECSummaryReceivedUnit(pobjSummary)     = $$GetSupplierUOM^INARTUtilities(idItem,idSupp)
			set $$$INRECSummarySupplierItemCode(pobjSummary) = $$GetSupplierItemNo^INARTUtilities(idItem,idSupp) //SR17492
			
			if $$$INRECSummaryLineType(pobjSummary) ="" {   ;SR16785
				set $$$INRECSummaryLineType(pobjSummary) = $$$EnumTypeStandard
			} ; default - can be manually set to "Bonus" on Invoice Tab
		
		} else {
			set $$$INRECSummaryReceivedUnit(pobjSummary) = ""
		}

		if $$$INRECSummaryUnitQtyReceived(pobjSummary)'="" {    ; FIXME : What if changing from value to zero? <GRF>
			do UpdateRecQty^INRECSummaryUtil(.pobjSummary)			
		}
		
		if $$$INRECSummaryPurchaseOrder(pobjSummary)="" {
			set $$$INRECSummaryUnitCost(pobjSummary) = $$CheckItemPrice(pobjSummary,idRecNo,idSummary)
			set $$$INRECSummaryFlag(pobjSummary)     = $order(^INWEMERKER(0,""))
		}
		; SR17019  vvv
		set fltExtendedCost = $$$INRECSummaryUnitQtyReceived(pobjSummary) * $$$INRECSummaryUnitCost(pobjSummary)  
		set $$$INRECSummaryExtendedCost(pobjSummary) = fltExtendedCost

		
	; Received Unit
	;---------------------------------------
	} elseif (pintCol = $$$FORMFldINRECSummaryReceivedUnit)  {
		if ((+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) 
			&& '(+$$$WWWClientParamCoreChangesTCI($get(^WWWClientParam(YM,YM,1))))){
			set $$$INRECSummaryUnitCost(pobjSummary) = $$GetCost^INItemCost($$$INRECSummaryItem(pobjSummary))	
		}else{
			set $$$INRECSummaryUnitCost(pobjSummary) = $$CheckItemPrice(pobjSummary,idRecNo,idSummary)
		}
		set $$$INRECSummaryUnitCost(pobjSummary) = $$CheckItemPrice(pobjSummary,idRecNo,idSummary)
		do UpdateRecQty^INRECSummaryUtil(.pobjSummary)
		set fltExtendedCost = $$$INRECSummaryUnitQtyReceived(pobjSummary) * $$$INRECSummaryUnitCost(pobjSummary)
		set $$$INRECSummaryExtendedCost(pobjSummary) = fltExtendedCost
	; SR17177.1	set strStatus = $$RefreshGridLines^COMGridEditRefresh(pidGridRow,"Unit")

	; Unit Cost
	;---------------------------------------
	} elseif (pintCol = $$$FORMFldINRECSummaryUnitCost) {
		set fltExtendedCost = $$$INRECSummaryUnitQtyReceived(pobjSummary) * $$$INRECSummaryUnitCost(pobjSummary)
		set $$$INRECSummaryExtendedCost(pobjSummary) = fltExtendedCost
	; SR17177.1	set strStatus = $$RefreshGridLines^COMGridEditRefresh(pidGridRow,"Cost")
	
	; Line Type
	;---------------------------------------
	} elseif pintCol = $$$FORMFldINRECSummaryLineType {
		
		do SetRefresh^COMGridEdit31Events(YFORM,$$^WWWKEYBUILD(pstrKeys),pobjSummary)  ; SR17177.3
		if $$$IsChargeLine {  ; Recalculate Discount Code on change
			set enumDiscCode = $$$INRECSummaryDiscountCode(pobjSummary)
			set $$$INRECSummaryDiscountCode(pobjSummary) = $$GetDiscountCode(enumLineType,pidGridRow)
			if (enumDiscCode="") || (enumDiscCode '= $$$INRECSummaryDiscountCode(pobjSummary)) {
				do OnChangeDiscountCode^INRECSummaryC(pidGridRow,pintCol,.pobjSummary,$$$YES)
			}
		}
	
	; Discount Code
	;---------------------------------------
	} elseif pintCol = $$$FORMFldINRECSummaryDiscCode {
		do OnChangeDiscountCode^INRECSummaryC(pidGridRow,pintCol,.pobjSummary,$$$YES)
	; SR17177.1	set strStatus = $$RefreshGridLines^COMGridEditRefresh(pidGridRow,"DiscCode")     ; SR17244
	
	; Discount Rate - for Rate per Item  Discounts
	;---------------------------------------
	} elseif pintCol = $$$FORMFldINRECSummaryDiscRate {
	;	if $$$IsItemLine {                                                ; SR17244    ; SR17177 vvv
	;		set strStatus = $$RefreshGridLines^COMGridEditRefresh(pidGridRow,"DiscRate")
	;	}
	$$$LogR2x("OB-DR:"_idSummary_"<"_pobjSummary)
	; SR17177.1	set strStatus = $$RefreshGridLines^COMGridEditRefresh(pidGridRow,"DiscRate")   ; SR17177 ^^^
		
	;	if $$$INRECSummaryLineType(pobjSummary)=$$$EnumTypeDiscount {     ; SR17244
		if enumLineType=$$$EnumTypeDiscount {
			if $$$INRECSummaryDiscountRate(pobjSummary)=2 {   ; Rate
				
				if idSummary\1'=idSummary {
					set objItemLine = $get(^INRECSummary(0,idRecNo,idSummary,1))
					set curUnitCost = $$$INRECSummaryUnitCost(objItemLine)
					if $$$INRECSummaryDiscountRate(pobjSummary)>curUnitCost {
						; change colour to warn                         ; FIXME : NOT FUNCTIONAL ???
					}
				}
			}
		}
	}
	
	;======================================= Common calls
	
	; Recalculate Costs
	;---------------------------------------
	if (pintCol = $$$FORMFldINRECSummaryLineType)     || 
	   (pintCol = $$$FORMFldINRECSummaryDiscCode)     ||
	   (pintCol = $$$FORMFldINRECSummaryDiscType)     ||
	   (pintCol = $$$FORMFldINRECSummaryDiscRate)     ||
	   (pintCol = $$$FORMFldINRECSummaryUnitCost)     ||
	   (pintCol = $$$FORMFldINRECSummaryOrderedUnit)  ||
	   (pintCol = $$$FORMFldINRECSummaryReceivedUnit) ||
	   (pintCol = $$$FORMFldINRECSummaryUnitQtyRecvd) ||
	   (pintCol = $$$FORMFldINRECSummaryItem)		     {
		
	$$$LogR2x("OB-RC:"_idSummary_"<"_pobjSummary)
	;---------------------------------------
	; Recalculates value of charge and
	; updates $$$INRECSummaryCostAfterDiscount
	;---------------------------------------
		do CalcCostAdj^INReceiptInvoice(pstrKeys,.pobjSummary)   ; Recalculates discounts
		
	;---------------------------------------
	; ^CacheTempINRECSummary updated by this UpdateThisTotal - doesn't reset
	; Extended Cost on invoice-based charges or recalculate charge amount
	;---------------------------------------
		do UpdateThisTotal^INRECSummaryC(pidGridRow,pobjSummary)                    ; SR17177
		
	;---------------------------------------
	; Create $$$WWWDATEN("REFRESH") array
	;---------------------------------------
		do SetRefresh^COMGridEdit31Events(YFORM,$$^WWWKEYBUILD(pstrKeys),pobjSummary)   ; SR18012
		
	;---------------------------------------
	; Process grid lines based on $$$WWWDATEN("REFRESH") array
	;---------------------------------------
	;	set strStatus = $$RefreshGridLines^COMGridEditRefresh(pidGridRow,"Recalc")  ; SR17177.1 added  ; SR18012
		set strStatus = $$RefreshGridLines^COMGridEditRefresh(idSummary,"Recalc")
		
	;---------------------------------------
	; Recalculate $$$INRECSummaryTotal
	;---------------------------------------
		do CalculateSummTotal(idRecNo,idSummary,pobjSummary)
	}
	quit
	
	
OnBlurQty(pstrKeys,&pobjSummary,pidGridRow,pintCol)
	;-------------------------------------------------------------------------------
	; Called By : Execute On Blur for INRECSummary field 33
	; 
	; Inputs :
	;	pstrKeys	- INRECSummary key    (YKEY)
	;	pobjSummary	- INRECSummary object (YFELD)
	; 
	; ByRef: YFORM
	; 
	; History:
	; 25-Jun-2012	GRF		SR18012: Base "REFRESH" on idDataLine rather than idGridRow
	; 20-Apr-2010	GRF		SR17177.2: Call UpdateThisTotal not UpdateRunningTotals
	; 12-Apr-2010	GRF		SR17177: pass pobjSummary to UpdateRunningTotals
	; 25-Jan-2010	shobby	SR15753: Removed redundant code.
	; 19-Aug-2009	GRF		SR16787: Recalculate Summary Total after refresh
	; 07-Aug-2009	GRF		SR16787: Refresh Associated Lines on Unit Price Change
	; 03-Aug-2009	PPP		SR16815: Updated Qty based on Rec Unit
	;-------------------------------------------------------------------------------
	new fltConv,fltExtendedCost,idItem,idRecNo,idSummary,strStatus

	$$$LogR("OnBlurQty",pstrKeys_":"_pidGridRow_","_pintCol_">"_$get(pobjSummary)_"<")
	
	set idItem = $$$INRECSummaryItem(pobjSummary)
	
	if idItem'="" {
		
		if ((+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) 
			&& '(+$$$WWWClientParamCoreChangesTCI($get(^WWWClientParam(YM,YM,1)))))
		{
			set objINREC = $G(^INREC(YM,$$$KEY1(pstrKeys),1))
			if (($$$INRECTypeofReceiving(objINREC)=4)||($$$INRECTypeofReceiving(objINREC)=2)){
				set $$$INRECSummaryUnitCost(pobjSummary) = $$GetCost^INItemCost(idItem)	
				if +$$$INRECSummaryUnitCost(pobjSummary) = 0 {
					w "javascript:alert('O produto "_idItem_" não possui custo médio. E não pode ser usado nesse Tipo de Recebimento. Favor verificar com a CAF.');"
					set $$$INRECSummaryUnitQtyReceived(pobjSummary) = ""
					quit
				}
					
			}
		}
		do UpdateRecQty^INRECSummaryUtil(.pobjSummary)
		set fltExtendedCost = $$$INRECSummaryUnitQtyReceived(pobjSummary) * $$$INRECSummaryUnitCost(pobjSummary)
		set $$$INRECSummaryExtendedCost(pobjSummary) = fltExtendedCost
	$$$LogRx("OBQ:1:"_pobjSummary)
	
		set idRecNo   = $$$KEY1(pstrKeys)
		set idSummary = $$$KEY2(pstrKeys)             ; idDataLine
		do CalcCostAdj^INReceiptInvoice(pstrKeys,.pobjSummary)
	$$$LogRx("OBQ:2:"_pobjSummary)
	;	set strStatus = $$RefreshGridLines^COMGridEditRefresh(pidGridRow,"Qty")  ; SR18012
		set strStatus = $$RefreshGridLines^COMGridEditRefresh(idSummary,"Qty")
		do CalculateSummTotal(idRecNo,idSummary,pobjSummary)
		do UpdateThisTotal^INRECSummaryC(pidGridRow,pobjSummary)             ; SR17177.2
	}
	quit
	
	
GetDiscountCode(penumLineType,pidGridRow)
	;-------------------------------------------------------------------------------
	; Get initial Discount/Surcharge Code for a charge-type Line Type
	; 
	; Returns:
	;	If only one entry                 : that entry
	;	If no entries or multiple entries : null
	; 
	; History:
	; 18-Feb-2010	shobby	SR15753: Commented redundant code.
	; 16-Jul-2009	GRF		SR16669: created
	;-------------------------------------------------------------------------------
	new enumDiscCode
	
	$$$LogR("GetDiscountCode",penumLineType_":"_pidGridRow)
	
	set enumDiscCode = $order(^INSUPBuyingDiscounts(0,1,$$$Index(penumLineType),""))

	if $order(^INSUPBuyingDiscounts(0,1,$$$Index(penumLineType),""),-1) '= enumDiscCode {
		set enumDiscCode = ""
	}
	quit enumDiscCode
	
	
OnBeforeDisplayCombo(pstrKeys,pobjSummary,pintCol,&pSUCH)
	;-------------------------------------------------------------------------------
	; Populates the Received UOM with the UOM as defined in INARTPACK only, excludes
	; units that the item does not come in.
	; 
	; set pSUCH as the items to be used when you override the list (set via blnOverride)
	;
	; Called By: COMGridEdit executable when actually access combo box.
	; 
	; Inputs:
	;	pstrKeys		YKEY
	;	pobjSummary		YFELD
	; 
	; Returns: $$$YES or $$$NO (override the data) 
	;
	; History:
	; 15-Jul-2011	GRF		SR17669: Call common code
	; 28-Jan-2011	GRF		SR17579: Revised logic so Line-based Charge Lines can
	;							have Item to validate unit and then number of
	;							decimal places in quantity.
	; 09-Jul-2009	GRF		SR16729: Don't change item-based LineType list to charge
	;							based list when accidentally changed to null.
	; 15-Jun-2009	GRF		SR16598: combo for Line Type
	; 31-Mar-2009	DavidR	SR16303: Created
	;-------------------------------------------------------------------------------
	new blnOverride,enumLineType,enumUnit,idItem
	
	$$$LogR("OnBeforeDisplayCombo",pstrKeys_","_$get(pintCol))
	
	set blnOverride = $$$NO
	
	; F11 - Received Unit
	;---------------------------------------
	if pintCol = $$$FORMFldINRECSummaryReceivedUnit {      ; SR17669 vvv
		set blnOverride = $$LoadCombo^INARTPACK($$$INRECSummaryItem(pobjSummary),blnOverride,.pSUCH)
	/*
	if pintCol = $$$FORMFldINRECSummaryReceivedUnit  {
		kill pSUCH
		set pSUCH  = "SUCH"
		set idItem = $$$INRECSummaryItem(pobjSummary)
		if idItem '= "" {
			set enumUnit = ""
			for {
				set enumUnit = $order(^INARTPACK(0,idItem,enumUnit))
				quit:enumUnit=""
				
				set pSUCH(enumUnit) = enumUnit
			}
			set blnOverride = $$$YES
		}
	*/                                                     ; SR17669 ^^^
	
	; F5 - LineType
	;---------------------------------------   ; SR16598   ; SR17579 vvv
	} elseif pintCol = $$$FORMFldINRECSummaryLineType  {
		kill pSUCH
		set pSUCH  = "SUCH"
		set enumLineType = $$$INRECSummaryLineType(pobjSummary)
		if $$$IsItemLine {
			for enumLineType=0,2     set pSUCH(enumLineType) = enumLineType    ; Can't change Item Line to Charge Line
		
		} elseif $find($piece(pstrKeys,$$$COMMA,2),".") {
			for enumLineType=1,3,4,5 set pSUCH(enumLineType) = enumLineType    ; [Copy] creates Line-based Charge Line
			
		} elseif ($$$INRECSummaryItem(pobjSummary)'="") {
			for enumLineType=0,2     set pSUCH(enumLineType) = enumLineType    ; Item Line without Line Type
		
		} else {
			for enumLineType=1,3,4,5 set pSUCH(enumLineType) = enumLineType    ; [New] creates Invoice-based Charge Line
		}
		set blnOverride = $$$YES
	}
	/*
	} elseif pintCol = $$$FORMFldINRECSummaryLineType  {
		kill pSUCH
		set pSUCH  = "SUCH"
		set enumLineType = $$$INRECSummaryLineType(pobjSummary)
		if $$$IsItemLine || ($$$INRECSummaryItem(pobjSummary)'="") {      ; SR16729
			for enumLineType=0,2     set pSUCH(enumLineType) = enumLineType
		} else {
			for enumLineType=1,3,4,5 set pSUCH(enumLineType) = enumLineType
		}
		set blnOverride = $$$YES
	}
	*/                                                     ; SR17579 ^^^
	quit blnOverride
	
	
CheckItemPrice(pobjSummary,pidRecNo,pidSummary)
	;-------------------------------------------------------------------------------
	; Checks other lines for a duplicate item and defaults the unit cost to that 
	; unit cost if available, otherwise it sets the unit cost to the latest INARTAVG
	; unitprice.
	; 
	; History:
	; 10-Apr-2010	GRF		SR17177: arrGrid rather than arrGridContent
	; 19-Mar-2010	PPP		SR17179: Added new parameter - pobjSummary to $$GetSuppCost
	; 12-Aug-2009	GRF		SR16787: separate GetSuppCost from CheckItemPrice for
	;							external call
	; 03-Aug-2009	PPP		SR16815: Updated to get the Cost based on Unit
	; 22-May-2009	DWR		SR16363: Changed default value of items recieved
	;							without an order, to Supplier cost, if 0 then INART
	;							(not average cost)
	; 04-May-2009	DWR		SR16363: Created
	;-------------------------------------------------------------------------------
	new arrGrid,blnItemMatch,fltUnitCost
	new idItem,idLine,idRcvdUnit,idSupplier,idSuppUnit,objGridSummary
	
	set idItem      = $$$INRECSummaryItem(pobjSummary)
	set idRcvdUnit  = $$$INRECSummaryReceivedUnit(pobjSummary)
	set fltUnitCost = ""
	
	if idItem'="" {
		do GetGridContents^COMGridEdit31Interface(.arrGrid,"INRECSummary")
		set blnItemMatch = $$$NO
		set idLine       = ""
		for {
			set idLine = $order(arrGrid(pidRecNo,idLine))
			quit:idLine=""
			quit:blnItemMatch=$$$YES
			continue:idLine=pidSummary
			
			set objGridSummary = $get(arrGrid(pidRecNo,idLine))
			
			// Item and Unit have to be the same to get a previous cost - not just Item
			if ($$$INRECSummaryItem(objGridSummary)'="")         &&
			   ($$$INRECSummaryReceivedUnit(objGridSummary)'="") &&
			   ($$$INRECSummaryUnitCost(objGridSummary)'="")        {
				
				if ($$$INRECSummaryItem(objGridSummary) = idItem) && ($$$INRECSummaryReceivedUnit(objGridSummary) = idRcvdUnit) {
					set fltUnitCost  = $$$INRECSummaryUnitCost(objGridSummary)
					set blnItemMatch = $$$YES
				}
			}
		}
		
		if 'blnItemMatch {
			set idSupplier  = $$$INRECSupplier($get(^INREC(0,pidRecNo,1)))
			set fltUnitCost = $$GetSuppCost(idItem,idSupplier,idRcvdUnit,pobjSummary)	//SR17179
		}
	}
	quit fltUnitCost
			
	
GetSuppCost(pidItem,pidSupp,pidRcvdUnit,pobjSummary="")
	;-------------------------------------------------------------------------------
	; Get the supplier cost for an item and convert it from the supplier unit to
	; the received unit.
	; 
	; Returns : Supplier cost based on received unit
	; 
	; History:
	; 19-Mar-2010	PPP		SR17179: 1. Get the Cost from the Order Line if it
	;							exists else from INARTK
	;						2. Added new parameter - pobjSummary to $$GetSuppCost
	; 12-Aug-2009	GRF		SR16787: separate from CheckItemPrice for external call
	;-------------------------------------------------------------------------------
	new fltRcvdConv,fltSuppConv,fltUnitCost,idOrder,idOrderLine,idSuppUnit,objItem,objItemSupp
	
	set fltUnitCost  = 0
	quit:pidSupp="" fltUnitCost
	
	set fltRcvdConv  = $$GetUOMConversion^INUOMConversion(pidItem,pidRcvdUnit)       ; Conversion to Inventory Unit
	
	set objItem   	= $get(^INART(0,pidItem,1))
	set objItemSupp	= $get(^INARTK(0,pidItem,pidSupp,1))

	set idOrder	= $$$INRECSummaryPurchaseOrder(pobjSummary)
	set idOrderLine	= $$$INRECSummaryPurchaseOrderLine(pobjSummary)
	
	if (idOrder'="") && (idOrderLine'="") {  // Get the Cost from the Order Line
		do GetUnitCostBasedOnOrderCost^INRECSummaryUtil(pidItem,idOrder,idOrderLine,pidRcvdUnit,.fltUnitCost)

	} else {                                 // Get the Cost from INARTK & INART
		if objItemSupp'="" {
			set idSuppUnit  = $$$INARTKDeliveryQuantityUnit(objItemSupp)
			set fltUnitCost = $$$INARTKUnitPrice(objItemSupp)
		
			//	Received Unit '= Suppliers Unit
			if pidRcvdUnit '= idSuppUnit {
				set fltSuppConv = $$GetUOMConversion^INUOMConversion(pidItem,idSuppUnit) ; Conversion to Inventory Unit
				if fltSuppConv {
					set fltUnitCost = (fltUnitCost/fltSuppConv) * fltRcvdConv
				}
			}
	
		} else {
			set fltUnitCost = $$$INARTFixedPurchasePrice(objItem) * fltRcvdConv
		}
	}
	quit fltUnitCost
	
	
OnBeforeSave(pidKeys,pobjSummary)
	;-------------------------------------------------------------------------------
	;
	; History:
	; 14-Aug-2009	DWR		SR16833: set YRETVAL with error strStatus has error.
	;							don't continue if error.
	; 12-Aug-2009	DWR		SR16833: Update the appropriate lines, dont re-create them.
	; 04-Aug-2009	DWR		SR16794: Update the INRECLine on change of the summary line
	;							only if it has already been firmed. No need otherwise.
	; 07-May-2009   DWR		SR16363: Created
	;-------------------------------------------------------------------------------
	new enumLineType,fltConv,idINRECLine,idSummary,objINREC,objRecLine,pidReceipt,strStatus
	
	$$$LogR5("OnBeforeSave",pidKeys_"<"_pobjSummary)
	
	set strStatus = $$$OK
		
	if pobjSummary'="" {
		set enumLineType = $$$INRECSummaryLineType(pobjSummary)

		if $$$INRECSummaryUnitCost(pobjSummary) < 0 {
		;	set YRETVAL = $$$Text("IN01029") ;"Unit Cost cannot be negative."  ; SR16833
			set strStatus = $$$MakeStatus("IN01029") ;"Unit Cost cannot be negative."
		}
		
		if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {	
			if $$$ISOK(strStatus){                                                          ; SR16833
			
				set strStatus =  $$CheckUnitCost^VARReceipt(pobjSummary)
			}
		}
		
		if $$$ISOK(strStatus) {                                                ; SR16833
			set pidReceipt = $$$KEY1(pidKeys)
			set idSummary  = $$$KEY2(pidKeys)
			set objINREC = $get(^INREC(0,pidReceipt,1))
			if $$$INRECFirmed(objINREC) && $$$IsItemLine{
				set idINRECLine=""
				for {
					set idINRECLine = $order(^INRECLine(0,pidReceipt,idINRECLine))
					quit:idINRECLine=""
					continue:idINRECLine\idSummary'=1   ; not sub line of INRECSummary record.
				
					set objRecLine = $get(^INRECLine(0,pidReceipt,idINRECLine,1))
					set fltConv    = $$GetUOMConversion^INUOMConversion($$$INRECLineItem(objRecLine),$$$INRECLineUnit(objRecLine))
					if fltConv {
						set $$$INRECLineEach(objRecLine) = +$justify($$$INRECSummaryUnitCost(pobjSummary)/fltConv,0,$$DPforInventoryCost^INVORG())
					} else {
						set $$$INRECLineEach(objRecLine) = $$$INRECSummaryUnitCost(pobjSummary)
					}
					set strStatus  = $$$Save("INRECLine",pidReceipt_$$$COMMA_idINRECLine,objRecLine,$$$YES)
					quit:$$$ISERR(strStatus)                                   ; SR16833
				}
			}
		}
	}
	set:$$$ISERR(strStatus) YRETVAL = strStatus                                ; SR16833
	quit
	
	
CalculateSummTotal(pidReceipt,pidSummary="",pobjSummary="")
	;-------------------------------------------------------------------------------
	; Read the grid and populate the Summary Total on the header record with the sum
	; of the Cost after Discounts.
	; Called when
	;   - loading an order                     (pidReceipt only),      or
	;   - from onblur of the INRECSummary Grid (all three parameters)
	; 
	; History:
	; 10-Apr-2010	GRF		SR17177: arrGrid rather than GridContent; GRID Macros
	; 12-Jun-2009	GRF		SR16363: only need single line to update fltCalcTot
	; 07-May-2009	DWR		SR16363: Created
	;-------------------------------------------------------------------------------
	new arrGrid,fltCAD,fltCalcTot,idLine,objLine
	
	$$$LogR("CalculateSummTotal",pidReceipt_"<"_pidSummary_"<"_pobjSummary)
	
	$$$GRIDGetContents(.arrGrid)
	$$$LogRm(arrGrid)
	set idLine = ""
	set fltCalcTot = ""
	for {
		set idLine = $order(arrGrid(pidReceipt,idLine))
		quit:idLine=""
		
		set objLine = $get(arrGrid(pidReceipt,idLine))
		
		if pobjSummary="" {
			if ((+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))) && (+$$$INRECSummaryFREE6(objLine) '= 0)){
				set fltCAD = $$$INRECSummaryCostAfterDiscount(objLine) * (100-$$$INRECSummaryFREE6(objLine) / 100)
			} else {
				set fltCAD = $$$INRECSummaryCostAfterDiscount(objLine)
			}
			
		} else {
			if pidSummary = idLine {
				if ((+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))) && (+$$$INRECSummaryFREE6(pobjSummary) '= 0)){
					set fltCAD = $$$INRECSummaryCostAfterDiscount(pobjSummary) * (100-$$$INRECSummaryFREE6(pobjSummary) / 100)
				} else {
					set fltCAD = $$$INRECSummaryCostAfterDiscount(pobjSummary)
				}
			} else {					
				if ((+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))) && (+$$$INRECSummaryFREE6(pobjSummary) '= 0)){
					set fltCAD = $$$INRECSummaryCostAfterDiscount(objLine) * (100-$$$INRECSummaryFREE6(objLine) / 100)
				} else {
					set fltCAD = $$$INRECSummaryCostAfterDiscount(objLine)
				}
			}
		}
		if fltCAD'="" set fltCalcTot = fltCalcTot + fltCAD
	}
	
	if (+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))){
		if ((+$$$INRECFREE41($$$GRIDYFELDContainer) > 0) && (+fltCalcTot '= 0)){
			if ((fltCalcTot - $$$INRECFREE41($$$GRIDYFELDContainer)) '< 0){
				set fltCalcTot = fltCalcTot - $$$INRECFREE41($$$GRIDYFELDContainer) ; Desconto na Nota
			}
		}
	}
	
	$$$LogRx("")
	do UpdateHeaderField^COMGridEdit31G("D75",fltCalcTot)  ; $$$INRECSummaryTotal
	quit
	
	
NewCalculateSummTotal(pidReceipt,pidSummary="",pobjSummary="",&parrGrid,&pfltCalcTot="")
	;-------------------------------------------------------------------------------
	; Read the grid and populate the Summary Total on the header record with the sum
	; of the Cost after Discounts.
	; Called when
	;   - loading an order                     (pidReceipt only),      or
	;   - from onblur of the INRECSummary Grid (all three parameters)
	; 
	; History:
	; 15-Sep-2011	GRF		SR17547: Revision from Guilherme - allows INRECSummary
	;							record to be passed in rather than retrieving
	;							WWWDATEN record.
	; 10-Apr-2010	GRF		SR17177: arrGrid rather than GridContent; GRID Macros
	; 12-Jun-2009	GRF		SR16363: only need single line to update fltCalcTot
	; 07-May-2009	DWR		SR16363: Created
	;-------------------------------------------------------------------------------
	new fltCAD,idLine,objLine
	
	$$$LogR("CalculateSummTotal",pidReceipt_"<"_pidSummary_"<"_pobjSummary)
	
	; OnBeforeSave^INReceipt builds arrGrid from saved INRECSummary records
	; If called elsewhere, builds from Edit Grid (WWWDATEN)
	if '$data(parrGrid) {
		$$$GRIDGetContents(.parrGrid)
	}
	$$$LogRm(parrGrid)
	set idLine = ""
	for {
		set idLine = $order(parrGrid(pidReceipt,idLine))
		quit:idLine=""
		
		set objLine = $get(parrGrid(pidReceipt,idLine))
		
		if pobjSummary="" {
			set fltCAD = $$$INRECSummaryCostAfterDiscount(objLine)
			
		} else {
			if pidSummary = idLine {
				set fltCAD = $$$INRECSummaryCostAfterDiscount(pobjSummary)
			} else {					
				set fltCAD = $$$INRECSummaryCostAfterDiscount(objLine)
			}
		}
		if fltCAD'="" set pfltCalcTot = pfltCalcTot + fltCAD
	}
	$$$LogRx("")
	do UpdateHeaderField^COMGridEdit31G("D75",pfltCalcTot)  ; $$$INRECSummaryTotal
	quit
	
	
OnBeforeFormat(pstrYFIELDNAME,pstrText,pobjSummary)
	;-------------------------------------------------------------------------------
	; Determine whether any special formatting needs to be applied to cells in the grid.
	; 
	; Called By: COMGridEdit executable
	; 
	; Params:
	; pstrYFIELDNAME	- Edit Grid field name
	; pstrText			- Not in use
	; pobjSummary		- Supplier Receipt Line record
	; 
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 04-Jun-2012	GRF		SR18012: clarify pobjSummary
	; 30-Mar-2010	GRF		SR17244: In-line discount rate validation
	; 25-Jan-2010	shobby	SR15753: Removed redundant code.
	; 01-Dec-2009	GRF		SR16605: test rate for "per item" discounts; get keys
	; 							for all fields; get common colours
	; 21-Aug-2009	DWR		SR16837: changed piece to use in conversion to check for 
	;							for error if flag requires.
	; 14-Aug-2009	DWR		SR16821: added check if no order number first and added 
	;							quit. Changed language text for 0 qty. Changed error 
	;							text for receipted qty to be more informative. Changed
	;							fltOrderQty to be converted base Qty
	; 06-Aug-2009	DWR		SR16821: Created 
	;    Jun-2009           Original tag replaced with WWW122C2 Core Rules
	;-------------------------------------------------------------------------------
	new blnSurcharge,curUnitCost,fltConv,fltDiscRate,fltOrderQty,fltOtherQty,fltReceiveQty
	new idClassField,idDiscCode,idFlag,idKey,idLine,idReceipt,intCol,intExceedsFlag,intRow
	new objDiscount,objItemLine

	$$$LogR3("OnBeforeFormat",pstrYFIELDNAME)
	
	$$$GRIDSplitKey(pstrYFIELDNAME,intRow,intCol)
	set idClassField = $$$GetClassField(YFORM,intCol)
	set idKey        = $$ReferenceKey^COMGridEdit31Interface(YFORM,intRow)
	set idReceipt    = $$$KEY1(idKey)
	set idLine       = $$$KEY2(idKey)

	; Purchase Order Specific
	;---------------------------------------
	
	if $$$INRECSummaryPurchaseOrder(pobjSummary)'="" {
		if $$Editable^INREC($$$GRIDYFELDContainer,$$$EnumINRECSupplierReceipt) {
 
			if (idClassField = $$$FldINRECSummaryUnitQtyReceived) {
				set idFlag = $$$INRECSummaryFlag(pobjSummary)
				if idFlag'="" {
					set intExceedsFlag = $$$INWEMERKERReceiptExceedsOrder($get(^INWEMERKER(0,idFlag,1)))
					if (intExceedsFlag = $$$EnumWWWTRISTATE1Warn) || (intExceedsFlag = $$$EnumWWWTRISTATE1Disallow) {
						if $$$INRECSummaryItem(pobjSummary)'="" {
							set fltConv     = $$GetUOMConversion^INUOMConversion($$$INRECSummaryItem(pobjSummary),$$$INRECSummaryOrderedUnit(pobjSummary))
							set fltOrderQty = $$$INRECSummaryQuantityOrdered(pobjSummary) * fltConv
						} else {
							set fltOrderQty = $$$INRECSummaryQuantityOrdered(pobjSummary)   ; Charge Lines
						}
						
						set fltOtherQty   = $$ReceiptQuantities(pobjSummary,$$$KEY1(idKey))
						set fltReceiveQty = $$$INRECSummaryQuantityReceived(pobjSummary)
					
						if fltReceiveQty > (fltOrderQty - fltOtherQty) {
							if intExceedsFlag=$$$EnumWWWTRISTATE1Warn {
								set YBACKGROUNDCOLOR = "yellow"
							} else {
								set YWARNING         = $$$YES
							}
							set YTOOLTIP = $$$Text($listbuild("IN01086",fltOrderQty,fltOtherQty))
						} ; "Receipt has exceeded ordered quantity of %1, other existing receipts account for %2."
					}
				}
				
				if $$$INRECSummaryQuantityReceived(pobjSummary)'>0 {
					set YWARNING = $$$YES
					set YTOOLTIP = $$$Text("IN00442")
				}  ; "Receipt quantity must be greater than zero"
			}
		}
	}
	
	; General
	;---------------------------------------
	
	set idDiscCode = $$$INRECSummaryDiscountCode(pobjSummary)
	if idDiscCode'="" {
		set objDiscount = $get(^INSUPBuyingDiscount(0,idDiscCode,1))
		
		; FIXME : Rate Type only - must also check Discount $ doesn't exceed Ext Cost
		if (idClassField = $$$FldINRECSummaryDiscountRate) && ($$$INRECSummaryDiscountType(pobjSummary)=2) {
			if (idLine\1'=idLine) {
				if idDiscCode'="" {
					set fltDiscRate  = $$$INRECSummaryDiscountRate(pobjSummary)
					set objDiscount  = $get(^INSUPBuyingDiscount(0,idDiscCode,1))
					set blnSurcharge = $$$INSUPBuyingDiscountSurcharge(objDiscount)
					set objItemLine  = $$GetYFELDEX^COMGridEdit31G(YFORM,idReceipt_$$$COMMA_(idLine\1))
					set curUnitCost  = $$$INRECSummaryUnitCost(objItemLine)
				
					if 'blnSurcharge && (fltDiscRate>curUnitCost) {
						set YWARNING = $$$YES
						set YTOOLTIP = $$$Text($listbuild("IN01154",curUnitCost))
					} ; "Discount Rate exceeds Item's Unit Cost (%1)"
				}
			
			} else {    ; SR17244 vvv
				if idDiscCode'="" {
					set fltDiscRate  = $$$INRECSummaryDiscountRate(pobjSummary)
					set objDiscount  = $get(^INSUPBuyingDiscount(0,idDiscCode,1))
					set blnSurcharge = $$$INSUPBuyingDiscountSurcharge(objDiscount)
					set curUnitCost  = $$$INRECSummaryUnitCost(pobjSummary)
				
					if 'blnSurcharge && (fltDiscRate>curUnitCost) {
						set YWARNING = $$$YES
						set YTOOLTIP = $$$Text($listbuild("IN01154",curUnitCost))
					} ; "Discount Rate exceeds Item's Unit Cost (%1)"
				}
			}           ; SR17244 
		}
		if (idClassField=$$$FldINRECSummaryDiscountType)           { set YENABLED = ($$$INSUPBuyingDiscountAmountCalculation(objDiscount)="")
		} elseif (idClassField=$$$FldINRECSummaryDiscountRate)     { set YENABLED = ($$$INSUPBuyingDiscountAmount(objDiscount)="")
		} elseif (idClassField=$$$FldINRECSummaryGLAccount)        { set YENABLED = ($$$INSUPBuyingDiscountGLAccount(objDiscount)="")
		} elseif (idClassField=$$$FldINRECSummaryCostAllocation)   { set YENABLED = ($$$INSUPBuyingDiscountCostAllocation(objDiscount)="")
		} elseif (idClassField=$$$FldINRECSummaryCostDistribution) { set YENABLED = ($$$INSUPBuyingDiscountCostDistribution(objDiscount)="")
		}
	}
	quit
	
	
UpdatePrimaryKeyFormat(pintRow,pobjSummary,&pblnUpdate)	
	;-------------------------------------------------------------------------------
	; Called By Grid to Update the Color of the Primary Key as an Error Indication
	;
	; NOTE : It *IS* possible that an item may be received without cost - usually
	;        specified as a "Bonus" rather than a "Standard" item.
	; 
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 04-Jun-2012	GRF		SR18012: clarify pobjSummary
	; 28-Jan-2011	GRF		SR17579: Line-based Charge Lines will now have Item
	;							so need different test for missing Unit Cost
	; 10-Sep-2009	PPP		SR16886: Created
	;-------------------------------------------------------------------------------
	;if ($$$INRECSummaryItem(pobjSummary)'="") && '$$$INRECSummaryUnitCost(pobjSummary) {
	new enumLineType
	
	set enumLineType = $$$INRECSummaryLineType(pobjSummary)
	if $$$IsItemLine && '$$$INRECSummaryUnitCost(pobjSummary) {
		set (YCOLOFF,YBACKGROUNDCOLOR) = "yellow"
		set YTOOLTIP = $$$Text($listbuild("IN01128",pi]]><![CDATA[ntRow))
	} ; "No Cost defined for Line %1"
	set pblnUpdate = $$$YES

	quit
	
	
ReceiptQuantities(pobjSummary,pidRec,&pfltCurQty)
	;-------------------------------------------------------------------------------
	; Return the quantity currently entered in to Supplier Receipts
	;
	; Params:	pobjSummary - Supplier Receipt Line record
	;			pidRec      - the current Supplier Receipt Id
	; 
	; ByRefs:	pfltCurQty - current receipt's qty for this order/line
	;
	; Returns:	flt - other posted receipt's qty for this order/line
	;
	; History:
	; 04-Jun-2012	GRF		SR18012: clarify pobjSummary
	; 06-Aug-2009	DWR		SR16821: Created modified version from INRECLine
	;-------------------------------------------------------------------------------
	new idOrder,idOrderLine
	
	$$$LogR("ReceiptQuantities",pidRec)
	
	set idOrder     = $$$INRECSummaryPurchaseOrder(pobjSummary)
	set idOrderLine = $$$INRECSummaryPurchaseOrderLine(pobjSummary)
	
	quit $$OrderLineReceipts(idOrder,idOrderLine,pidRec,.pfltCurQty)	
	
	
OrderLineReceipts(pidOrder,pidLine,pidRec,&pfltCurQty)
	;-------------------------------------------------------------------------------
	; Get qty received for an order line
	; (Code moved from ReceiptQuantities^INRECLine)
	;
	; Params:	pidOrder		: The order number
	;			pidLine			: The order line number
	;			pidRec			: The receipt id to check
	;
	; ByRefs:	pfltCurQty		: current receipt's qty for this order/line
	;
	; Returns:  fltOtherQty (in Inventory Unit)
	;
	; History:
	; 16-Aug-2013	RGB		SESPE-523: Fix so it won't check receipts without orders
	; 13-Nov-2012	shobby	SR18175: Included changes from Guilherme	
	; 13-Oct-2009	GRF		SR16932: Include receipt reversals; std units
	; 06-Aug-2009	DWR		SR16821: Created modified version from INRECLine
	;-------------------------------------------------------------------------------
	new arrReceipts,fltOtherQty,objRec,blnReverse,objRecLine,idReceipt
	new idxOrder,idxOrderLine,idReceiptLine
	
	$$$LogR2("OrderLineReceipts",$get(pidRec)_","_pidOrder_","_pidLine)
	
	set idxOrder     = $$$Index(pidOrder)
	set idxOrderLine = $$$Index(pidLine)
 
	set fltOtherQty = 0
	set pfltCurQty  = 0
	
	//SESPE-523
	if pidOrder="" q fltOtherQty
	if pidLine="" q fltOtherQty
	
	set idReceipt=""
	for {
		set idReceipt=$order(^INRECLines(0,4,idxOrder,idxOrderLine,idReceipt))
		quit:idReceipt=""
		
		set objRec     = $get(^INREC(0,idReceipt,1))
		set blnReverse = ($$$INRECType(objRec)=$$$EnumINRECSupplierReversal)
		set arrReceipts(idReceipt) = blnReverse
	}
	
	set idReceipt=""
	for {
		set idReceipt=$order(arrReceipts(idReceipt))
		quit:idReceipt=""
		
		set blnReverse = arrReceipts(idReceipt)
		
		;vvvvvvvvvvv HEVA-637
		;if blnReverse {  ; INRECSummary not built for Receipt Reversals - has to process old and new 
		set objRec     = $get(^INREC(0,idReceipt,1))
		if (blnReverse && $$$INRECStatus(objRec) = $$$EnumINSTATUSProcessed) {
		;^^^^^^^^^^^
			set idReceiptLine=""
			for {
				set idReceiptLine=$order(^INRECLines(0,4,idxOrder,idxOrderLine,idReceipt,idReceiptLine))
				quit:idReceiptLine=""
				
				set objRecLine  = $get(^INRECLine(0,idReceipt,idReceiptLine,1))
				set fltOtherQty = fltOtherQty - $$$INRECLineQuantity(objRecLine)   ; assumes processed
			}
			
		} else {
			set idReceiptLine=""
			for {
				set idReceiptLine=$order(^INRECSummarys(0,1,idxOrder,idxOrderLine,idReceipt,idReceiptLine))
				quit:idReceiptLine=""
			
				set objRecLine = $get(^INRECSummary(0,idReceipt,idReceiptLine,1))
			
				if $$$INRECSummaryLineType(objRecLine) '= 0 continue
				
				if (idReceipt = $get(pidRec)) {
					set pfltCurQty = pfltCurQty + $$$INRECSummaryQuantityReceived(objRecLine)
					
				;vvvvvvvvvvv HEVA-637
				;} elseif $$$INRECStatus(objRec) = $$$EnumINSTATUSProcessed {
				} elseif ($$$INRECStatus(objRec) = $$$EnumINSTATUSProcessed)  || ($$$INRECStatus(objRec) = $$$EnumINSTATUSReversed) {					
				;^^^^^^^^^^^
					set fltOtherQty = fltOtherQty + $$$INRECSummaryQuantityReceived(objRecLine)
				}
			}
		}
	}
	if (+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))) {
		set fltOtherQty = fltOtherQty + $$GetQtdRecebidaAFMLinha^VARRecebimentoAFMV1(pidOrder,pidLine)	// Soma com os recebimentos do V1
	}
	quit fltOtherQty

	
GetQtyEntered(pstrKeys)
	;-------------------------------------------------------------------------------
	; Get the quantity input on the screen for this line and its children
	;
	; Params:	pstrKey - keys of INRECLine
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 12-Apr-2010	GRF		SR17177: arrGrid rather than objGrid
	; 06-Aug-2009	DWR		SR16821: Created modified version from INRECLine
	;-------------------------------------------------------------------------------
	new arrGrid,idRec,idParent,idLine,fltQty
	
	$$$LogR("GetQtyEntered",pstrKeys)
	
	$$$GRIDGetContents(.arrGrid)
	
	set fltQty   = 0
	
	// loop through all the lines for the same receipt.
	set idRec    = $$$KEY1(pstrKeys)
	set idParent = $$$KEY2(pstrKeys)\1
	set idLine   = $order(arrGrid(idRec,idParent),-1)		// Go back one
	
	for {
		set idLine = $order(arrGrid(idRec,idLine))
		quit:idLine\1'=idParent
		
		set fltQty = fltQty + $$$INRECLineQuantity(arrGrid(idRec,idLine))
	}
	quit fltQty
	
	
SetRefresh(pstrKey,pobjSummary)
	;-------------------------------------------------------------------------------
	; Set required refresh links for current line - if a line changes then also need
	; to update the refresh lines for that line.
	; 
	; Type 1: Current line has "."          - set as refresh line for parent
	; Type 2: Current line doesn't have "." - if Charge Line then set as refresh
	;                                         line for all prior lines
	; Called By: COMGridEdit executable
	; 
	; Inputs :	pstrKey			idReceipt,idSummary
	;			pobjSummary		Not used		
	; 
	; History:
	; 25-Jun-2012	GRF		SR18012: Base "REFRESH" on idDataLine rather than idGridRow
	; 25-Jun-2012	GRF		SR18012: re-written to add entries AFTER idGridRow rather
	;							than BEFORE
	; 22-Jun-2012	GRF		SR18012: remove duplicated definition of idGridRow; was
	;							using idGridParent instead of idGridRow in call to
	;							SetRefresh.
	; 06-Apr-2010	GRF		SR17177: rework to restrict "N" to charge lines; no need
	; 							for double processing; tab independent
	; 11-Aug-2009	GRF		SR16787: Created
	;-------------------------------------------------------------------------------
	new enumLineType,idBaseLine,idCell,idChildLine,idDataLine,idGridChild,idGridRow
	
	$$$LogR6("SetRefresh",pstrKey_"<"_pobjSummary)
	
	set idDataLine = $$$KEYMAX(pstrKey)
	set idGridRow  = $get($$$WWWDATEN("REFERENCEROW",idDataLine,1))
	$$$LogR6x("SR:1:"_idDataLine_"<"_idGridRow_"<")
	
	if idGridRow'="" {
		set idChildLine = idDataLine
		for {
			set idChildLine = $order($$$WWWDATEN("REFERENCEROW",idChildLine))
			quit:idChildLine=""
			
	$$$LogR6x("SR:2:"_idChildLine_"<")
				
	;---------------------------------------
	; Further line-based charges for same base line
	;   change to 4.01 - set refresh for 4.02 and 4.03 but not 6.01
	;   set ("REFRESH",4,4.02)="C", etc.
	;---------------------------------------
			if idChildLine["." {
				set idBaseLine = idChildLine\1
				if idBaseLine=(idDataLine\1) {
					do SetRefresh^COMGridEditRefresh(idDataLine,idChildLine,"C")
				}
					
	;---------------------------------------
	; Add any later Invoice-based charge lines
	;---------------------------------------
			} else {
				set idGridChild = $get($$$WWWDATEN("REFERENCEROW",idChildLine,1))
				set idCell = "Y"_idGridChild_"_"_$$$FORMFldINRECSummaryLineType    ; F5
	$$$LogR6x("SR:3:"_idChildLine_"<"_idGridChild_"<")
				set enumLineType = $get($$$WWWDATEN(idCell,1))
				if $$$IsChargeLine {
					do SetRefresh^COMGridEditRefresh(idDataLine,idChildLine,"N")
				}
			}
		}
	}
	$$$LogR6x("SR:4")
	$$$LogR6m($$$WWWDATEN("REFRESH"))
	quit
	
	/*
OldSetRefresh(pstrKey,objSummary)
	;-------------------------------------------------------------------------------
	; Set required refresh links for current line - if a line changes then also need
	; to update the refresh lines for that line.
	; 
	; Type 1: Current line has "."          - set as refresh line for parent
	; Type 2: Current line doesn't have "." - if Charge Line then set as refresh
	;                                         line for all prior lines
	; Called By: COMGridEdit executable
	; 
	; Inputs :	pstrKey			idReceipt,idSummary
	;			objSummary		
	; 
	; History:
	; 06-Apr-2010	GRF		SR17177: rework to restrict "N" to charge lines; no need
	; 							for double processing; tab independent
	; 11-Aug-2009	GRF		SR16787: Created
	;-------------------------------------------------------------------------------
	new enumLineType,idCell,idDataLine,idGridParent,idGridRow,idParentLine
	
	$$$LogR("SetRefresh",pstrKey_"<"_objSummary)
	
	set idDataLine = $$$KEYMAX(pstrKey)
	set idGridRow  = $get($$$WWWDATEN("REFERENCEROW",idDataLine,1))
	
	if idDataLine["." {
		set idParentLine = idDataLine\1
		set idGridParent = $get($$$WWWDATEN("REFERENCEROW",idParentLine,1))
		if idGridParent'="" do SetRefresh^COMGridEditRefresh(idGridParent,idGridRow,"C")
		
	} else {    ; currently links *ALL* earlier lines to invoice-based charge lines
		set idGridRow = $$$WWWDATEN("REFERENCEROW",idDataLine,1)
		set idCell = "Y"_idGridRow_"_"_$$$FORMFldINRECSummaryLineType    ; F5
		set enumLineType = $get($$$WWWDATEN(idCell,1))
		if $$$IsChargeLine {
			set idParentLine = ""
			for {
				set idParentLine = $order($$$WWWDATEN("REFERENCEROW",idParentLine))
				quit:idParentLine=""
				quit:idParentLine>idDataLine
			
				set idGridParent = $$$WWWDATEN("REFERENCEROW",idParentLine,1)
				if idGridParent'="" do SetRefresh^COMGridEditRefresh(idGridParent,idGridRow,"N")
			}
		}
	}
	quit
	*/
	
RefreshGridLines(pidForm,pintTab,penumTrigger,pidParentDataLine,pidChildDataLine,penumType)
	;-------------------------------------------------------------------------------
	; Replaces call to UpdateRunningTotals^INRECSummaryC and COMGridEdit executable
	; 
	; 
	; Change Line => Initial call to RefreshGridLines^COMGridEditRefresh
	;	 - Update Ext Cost and Cost After Discount
	;	 - Update Total for the current line
	;
	; Calls this routine for each REFRESH entry for the GridParent
	;	 - Update Running Total for this and subsequent entries
	;	   [Preferably cycle through grid lines updating all totals and refreshing lines as encountered.]
	; 
	;  e.g.	A change to line 5 will have generated the following "REFRESH" entries;
	;		^WWWDATEN(...,"REFRESH",5,6) = "C"   item-based charge
	; 		^WWWDATEN(...,"REFRESH",5,7) = "N"   invoice-based charge (subtotal)
	; 		                    (Line 8 is another item line)
	; 		^WWWDATEN(...,"REFRESH",5,9) = "N"   invoice-based charge (total)
	;  will call as (...,5,6,"C"),  (...,5,7,"N")  &  (...,5,9,"N")
	;  If there is an (8,9,"N") entry it will already be served by the existing
	;  refresh entries.
	; 
	;  For "N" entries
	;	 - Update Ext Cost from previous line's running total
	;	 - 
	;	 - and Cost After Discount
	;	 - Update Total for the current line
	;
	; History:
	; 25-Jun-2012	GRF		SR18012: Base "REFRESH" on idDataLine rather than idGridRow
	; 20-Apr-2010	GRF		SR17177: Rewritten
	; 19-Aug-2009	GRF		SR16787: add penumTrigger
	; 06-Aug-2009	GRF		SR16787: Created
	;-------------------------------------------------------------------------------
	new dteToday,enumType,idDataLine,idGridParent,idGridRow,objLine,strStatus
	
	$$$LogR6("RefreshGridLines",pidForm_"<"_pintTab_":"_penumTrigger_":"_pidParentDataLine_":"_pidChildDataLine_"<")
	$$$LogR6m($$$WWWDATEN("REFRESH"))
	
	set strStatus = $$$OK
	set dteToday  = +$horolog
	set idGridParent = $get(^WWWDATEN(0,dteToday,YUSER,"INRECSummary","V","REFERENCEROW",pidParentDataLine,1))
	
	; 1. Update totals for any unrelated lines before first refresh
	;---------------------------------------
	if pidChildDataLine=$order($$$WWWDATEN("REFRESH",pidParentDataLine,"")) {
		set idDataLine = pidParentDataLine
	$$$LogR6x("RGL:1")
		for {
			set idDataLine = $order($$$WWWDATEN("REFERENCEROW",idDataLine))
			quit:idDataLine=""
			quit:idDataLine>pidChildDataLine
			
			set idGridRow = $get(^WWWDATEN(0,dteToday,YUSER,"INRECSummary","V","REFERENCEROW",idDataLine,1))
		
	$$$LogR6x("RGL:2:"_idDataLine_"<"_idGridRow_"<")
			set enumType = $get($$$WWWDATEN("REFRESH",pidParentDataLine,idDataLine))
			if enumType="" {  ; update totals for lines that are not refreshed
				set objLine = $$GetYFELD^COMGridEdit31G(pidForm,idGridRow)
	$$$LogR6x("RGL:3:"_objLine)
				do UpdateThisTotal^INRECSummaryC(idGridRow,objLine)
			}
		}
	}
	
	; 2. Recalculate refresh lines and update running totals for others
	;---------------------------------------
	
	set idDataLine = $order($$$WWWDATEN("REFERENCEROW",pidChildDataLine),-1)
	for {
		set idDataLine = $order($$$WWWDATEN("REFERENCEROW",idDataLine))
		quit:idDataLine=""
		
		set idGridRow = $get(^WWWDATEN(0,dteToday,YUSER,"INRECSummary","V","REFERENCEROW",idDataLine,1))
		
	;	REFRESH REQUIRED - needs to update Ext Total with appropriate C/N figure
	;	INRECSummaryAssoc includes UpdateThisTotal and ScreenUpdate^COMGridEdit31S (FIXME : is latter needed for else case? SR18012)
		set enumType = $get($$$WWWDATEN("REFRESH",pidParentDataLine,idDataLine))
		if enumType = "C" {
	$$$LogR6x("RGL:4C:")
		;	set strStatus = $$RefreshLineCharge^INRECSummaryAssoc(pidForm,pintTab,penumTrigger,pidGridParent,idGridRow)
			set strStatus = $$RefreshLineCharge^INRECSummaryAssoc(pidForm,pintTab,penumTrigger,idGridParent,idGridRow)
		
		} elseif enumType = "N" {
	$$$LogR6x("RGL:4N:")
		;	set strStatus = $$RefreshInvoiceCharge^INRECSummaryAssoc(pidForm,pintTab,penumTrigger,pidGridParent,idGridRow)
			set strStatus = $$RefreshInvoiceCharge^INRECSummaryAssoc(pidForm,pintTab,penumTrigger,idGridParent,idGridRow)
		
		} else {  ; update totals for lines that are not refreshed
	$$$LogR6x("RGL:4X:")
			set objLine = $$GetYFELD^COMGridEdit31G(pidForm,idGridRow)
			do UpdateThisTotal^INRECSummaryC(idGridRow,objLine)
			
		}
	}
	quit strStatus
	
	/*
OldRefreshGridLines(pidForm,pintTab,penumTrigger,pidGridParent,pidGridRowChild,penumType)
	;-------------------------------------------------------------------------------
	; Replaces call to UpdateRunningTotals^INRECSummaryC and COMGridEdit executable
	; 
	; 
	; Change Line => Initial call to RefreshGridLines^COMGridEditRefresh
	;	 - Update Ext Cost and Cost After Discount
	;	 - Update Total for the current line
	;
	; Calls this routine for each REFRESH entry for the GridParent
	;	 - Update Running Total for this and subsequent entries           [Preferably cycle through grid lines updating all totals and refreshing lines as encountered.]
	; 
	;  e.g.	^WWWDATEN(...,"REFRESH",5,6) = "C"   item-based charge
	; 		^WWWDATEN(...,"REFRESH",5,7) = "N"   invoice-based charge (subtotal)
	; 		                    (Line 8 is another item line)
	; 		^WWWDATEN(...,"REFRESH",5,9) = "N"   invoice-based charge (total)
	;  will call as (...,5,6,"C"),  (...,5,7,"N")  &  (...,5,9,"N")
	;  If there is an (8,9,"N") entry it will already be served by the existing
	;  refresh entries.
	; 
	;  For "N" entries
	;	 - Update Ext Cost from previous line's running total
	;	 - 
	;	 - and Cost After Discount
	;	 - Update Total for the current line
	;
	; History:
	; 20-Apr-2010	GRF		SR17177: Rewritten
	; 19-Aug-2009	GRF		SR16787: add penumTrigger
	; 06-Aug-2009	GRF		SR16787: Created
	;-------------------------------------------------------------------------------
	new enumType,idGridRow,objLine,strStatus
	
	$$$LogR2("RefreshGridLines",pidForm_"<"_pintTab_":"_penumTrigger_":"_pidGridParent_":"_pidGridRowChild_"<")
	
	set strStatus = $$$OK
	
	; 1. Update totals for any unrelated lines before first refresh
	;---------------------------------------
	if pidGridRowChild=$order($$$WWWDATEN("REFRESH",pidGridParent,"")) {
		set idGridRow = pidGridParent
		for {
			set idGridRow = $order($$$WWWDATEN("REFERENCEKEY",idGridRow))
			quit:idGridRow=""
			quit:idGridRow>pidGridRowChild
		
			set enumType = $get($$$WWWDATEN("REFRESH",pidGridParent,idGridRow))
			if enumType="" {  ; update totals for lines that are not refreshed
				set objLine = $$GetYFELD^COMGridEdit31G(pidForm,idGridRow)
				do UpdateThisTotal^INRECSummaryC(idGridRow,objLine)
			}
		}
	}
	
	; 2. Recalculate refresh lines and update running totals for others
	;---------------------------------------
	
	set idGridRow = $order($$$WWWDATEN("REFERENCEKEY",pidGridRowChild),-1)
	for {
		set idGridRow = $order($$$WWWDATEN("REFERENCEKEY",idGridRow))
		quit:idGridRow=""
		
		
	;	REFRESH REQUIRED - needs to update Ext Total with appropriate C/N figure
		set enumType = $get($$$WWWDATEN("REFRESH",pidGridParent,idGridRow))
		if enumType = "C" {
			set strStatus = $$RefreshLineCharge^INRECSummaryAssoc(pidForm,pintTab,penumTrigger,pidGridParent,idGridRow)
		
		} elseif enumType = "N" {
			set strStatus = $$RefreshInvoiceCharge^INRECSummaryAssoc(pidForm,pintTab,penumTrigger,pidGridParent,idGridRow)
		
		} else {  ; update totals for lines that are not refreshed
			set objLine = $$GetYFELD^COMGridEdit31G(pidForm,idGridRow)
			do UpdateThisTotal^INRECSummaryC(idGridRow,objLine)
			
		}
	}
	quit strStatus
	*/
	
AssociatedValidation(pstrYFELD,pstrFieldValue,pidAssociated)
	;-------------------------------------------------------------------------------
	; Check if the field is valid based on another field.
	;	COMUnit uses (idItem,idUnit,numQty,idLocn)
	;
	; Inputs:
	;	pstrYFELD     : The data for the form
	;	pstrFieldValue: The value of the field we are in
	;	pidAssociated : The associated field
	;
	; Returns:
	; boolean - $$$YES is valid, $$$NO invalid
	;
	; History:
	; 21-Dec-2010	GRF		SR17579: Correction to Fld macros.
	; 02-Nov-2010	GRF		SR17579: Created from INTFRLine
	;-------------------------------------------------------------------------------
	new blnValid
	
	$$$LogR2("AssociatedValidation",pstrYFELD_"<"_pstrFieldValue_"<"_pidAssociated_"<")
	set blnValid = $$$YES
	if (pidAssociated=$$$FldINRECSummaryOrderedUnit)  || 
	   (pidAssociated=$$$FldINRECSummaryReceivedUnit) ||
	   (pidAssociated=$$$FldINRECSummaryInventoryUnit)   {
		set blnValid = $$IsValidQtyUnit^COMUnit($$$INRECSummaryItem(pstrYFELD),$piece(pstrYFELD,Y,pidAssociated),pstrFieldValue,YLOCATION)
	}
	quit blnValid	
	
	/*  SR17177
OldRefreshGridLines(pidForm,pintTab,penumTrigger,pidGridParent,pidGridRowChild,penumType)
	;-------------------------------------------------------------------------------
	; Called By: COMGridEdit executable
	; 
	; Based on:
	; ^WWWDATEN(0,+$h,YUSER,"INRECSummary","V","REFRESH",pidGridParent,pidGridRowChild) = penumType
	;
	; 
	; History:
	; 12-Apr-2010	GRF		SR17177: pass revised objSummary to UpdateRunningTotals
	; 06-Apr-2010	GRF		SR17177: Update totals
	; 19-Aug-2009	GRF		SR16787: add penumTrigger
	; 06-Aug-2009	GRF		SR16787: Created
	;-------------------------------------------------------------------------------
	new objLine,strStatus
	
	$$$LogR2("RefreshGridLines",pidForm_"<"_pintTab_":"_penumTrigger_":"_pidGridParent_":"_pidGridRowChild_"<"_penumType)
	
	set objLine = $$GetYFELD^COMGridEdit31G(pidForm,pidGridParent)   ; SR17177 vvv
	do UpdateRunningTotals^INRECSummaryC(pidGridParent,objLine)
	
	;do UpdateRunningTotals^INRECSummaryC(pidGridParent,"")          ; SR17177 ^^^
	set strStatus = $$$OK
	if penumType="C" {
		set strStatus = $$RefreshLineCharge^INRECSummaryAssoc(pidForm,pintTab,penumTrigger,pidGridParent,pidGridRowChild)
	} else {
		set strStatus = $$RefreshInvoiceCharge^INRECSummaryAssoc(pidForm,pintTab,penumTrigger,pidGridParent,pidGridRowChild)
	}
	quit strStatus
	*/

OnDisplayRightClickMenu(pYKEY="",pYFELD="",pYFORM="")
	;-------------------------------------------------------------------------------
	; Entries to include in the Edit Grid context menu
	;
	; Params:
	; pYKEY - Receipt Line Id
	; pYFELD - Receipt Order Line record
	; pYFORM - Receipt Order Line Form Id
	;
	; ByRefs: None
	;
	; Returns: lstNewMenuItems - list containing custom entries to display in the Edit Grid context menu
	;
	; History:
	; 08-Nov-2011	shobby	SR17924: Link to INARTPACK
    ; 02-Sep-2011	PPP		SR17886: Internatationalize FORM name & 'Master File'
	; 16-Jun-2011	PPP		SR17794: Created
	;-------------------------------------------------------------------------------
	new idItem,idRelation,lstNewMenuItems,strFormName
	
	set lstNewMenuItems = ""
	set pYKEY = $translate($get(pYKEY),"""")
	
	quit:(pYFELD="")||(pYKEY="") lstNewMenuItems
	
	; "Show UPC Form"
	;---------------------------------------
	set idItem     = $$$INRECSummaryItem(pYFELD)
	
	if idItem'="" {
		set idRelation      = "INARTUPC1"
	 	//set strFormName     = $$$WWW120FormHeaderOrImageFile($get(^WWW120(0,idRelation,1)))
 		set strFormName 	= $$^WWWFORMNAME(idRelation)  ;SR17886
		set lstNewMenuItems = lstNewMenuItems_$listbuild($listbuild("barcodes.gif",idItem_" ["_strFormName_"]","CallBack(""GoToForm^COMUtilForm"","""_idRelation_""","""_idItem_""",1,1,1)",,$$$YES))
		
		set idRelation      = "INARTPACK"					;SR17924
		set strFormName 	= $$^WWWFORMNAME(idRelation)    ;SR17924
		set lstNewMenuItems = lstNewMenuItems_$listbuild($listbuild("tracking-b.gif",idItem_" ["_strFormName_"]","CallBack(""GoToForm^COMUtilForm"","""_idRelation_""","""_idItem_""",1,1,1)",,$$$YES)) ;SR17924
	}
	quit lstNewMenuItems
	
]]></Routine>
</Export>