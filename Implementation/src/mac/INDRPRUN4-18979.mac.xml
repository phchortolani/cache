<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INDRPRUN4" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INDRPRUN4
#include COMSYS
#include INConst
	;-------------------------------------------------------------------------------
	; Description of Function :
	;		Display Stock Holdings
	;		ANZEIGEN LAGERBESTAND
	;
	; Inputs : 
	;
	;
	; ByRef :
	;	ANZM
	;	ART			idIten
	;	BETRIEB		idSiteLocn
	;	BGJOB		bln
	;	
	;	BESTAND		Projected Available Balance Qty
	;	CBESTAND    Critical PAB Qty
	;	ATPMENGE    Avail To Promise Qty
	;	RMAMENGE    Expected Return Quantity
	;	
	; Returns :
	;
	;
	; History :
	; 22-Oct-2008	PPP		SR16063: Reserved is Total Reserved Less Sales Reserved
	; 21-Feb-2006	GRF		SR15234: remove + on numeric test; clean up; doco
	; 27-Nov-2006	GRF		SR15234: doco; use strBGCOLOR; quits; YCR; !=>||; </FONT>
	; 						closure
	; 04-Jul-2006	PO		SR14669: List current reservations for item and site location
	; 29.04.2005	FIS		SR12200: Max no of decimal places
	; 26.09.2001	FIS
	;-------------------------------------------------------------------------------
	QUIT:$GET(BGJOB)=1
	
	NEW NK,strBGCOLOR
	
	/*
	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	;            |              Supply               |                 Demand                ; INDRPRUN1
	;----------------------------------------------------------------------------------------;
	;PAB|CPAB|ATP|Qty|DueDt|Type|IDNo|EntryDt|ELP|Sta|Qty|DueDt|Type|IDNo|EntryDt|ELP|Sta|Msg; INDRPRUN1
	;----------------------------------------------------------------------------------------;
	;   |    |   |   |     |    |    |       |   |   |   |     |    |    |       |   |   |   ; INDRPRUN4    Opening Balances
	;---+----+---|---+-----+----+----+-------+---+---|---+-----+----+----+-------+---+---+---;        (Blank INDRPRUN2)
	;   |    |   |   |     |    |    |       |   |   |   |     |    |    |       |   |   |   ; INDRPRUN5
	;---+----+---|---+-----+----+----+-------+---+---|---+-----+----+----+-------+---+---+---;        (Blank INDRPRUN2)
	;   |    |   |   |     |    |    |       |   |   |   |     |    |    |       |   |   |   ;  ...
	;---+----+---|---+-----+----+----+-------+---+---|---+-----+----+----+-------+---+---+---;
	;   |    |   |   |     |    |    |       |   |   |   |     |    |    |       |   |   |   ;  ...
	;========================================================================================;
	;   |    |   |xxx|xxxxx|    |    |       |   |   |   |     |    |    |       |   |   |   ; INDRPRUN9    Totals
	;========================================================================================;
	;   |    |   |   |xxxxx|    |    |       |   |   |   |     |    |    |       |   |   |   ; INDRPRUN9    Totals
	\+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	
	
	;MAX. NUMBER OF DECIMAL PLACES TO SHOW
	SET NK    = $LENGTH($PIECE(BESTAND,".",2))
	SET NK(1) = $PIECE($GET(^INDRPSYS(YM,BETRIEB,1)),Y,47)
	IF NK(1)'="" IF NK>NK(1) SET NK = NK(1)
	
	SET YDDSATZ=1
	set strBGCOLOR = $select(YDDSATZ#2=1:" BGCOLOR="_YWHITE,1:"")           ; SR15234
	
	IF (ANZM=1) || (ANZM=0) DO
	. NEW YI,YII,MENGE,RESMEN
	. ;
	. ;-----------------------------------------------------------------------------
	. ; PAB/CPAB/(Optional)ATP Columns
	. ;-----------------------------------------------------------------------------
	. SET YII=2
	. IF ATP=1 DO
	. . SET YII=3
	. . ; ++++++++++++++++++++++++++++++++++++++++
	. . ; ++++++++++++++++++++++++++++++++++++++++  TODO : CHECK WHETHER THIS ALLOWS US TO IDENTIFY SOURCING <GRF>
	. . ; ++++++++++++++++++++++++++++++++++++++++
	. . //SET RESMEN(1) = +$$GetQty^INARTMENGE(ART,,BETRIEB,,4)  ;RESERVIERTE MENGEN
	. . //All Planned - Planned Sales
	. . //RESMEN(1) is only Reserved Qty, If we include all Reserved (inc Sales) the the ATP qty will
	. . //be reduced twice, once by the demand and once by the planned Qty.
	. . //SR16063
	. . set RESMEN(1) = $$GetQty^INARTMENGE(ART,,BETRIEB,,4) - ##class(alSAL.iSAL).GetQtyPlanned(ART,BETRIEB,,$$$YES)
	. . SET RESMEN(2) = +$$GetQty^INARTMENGE(ART,,BETRIEB,,5)  ;NICHT VERFÜGBARE MENGEN (GESPERRT/VERFALLSDATUM ÜBERSCHRITTEN)
	. . SET RESMEN    = RESMEN(1)+RESMEN(2)
	. . ; ++++++++++++++++++++++++++++++++++++++++
	. . ; ++++++++++++++++++++++++++++++++++++++++
	. ;
	. WRITE "<TR ID=""DRPSTOCKTR1"">",YCR
	. FOR YI=1:1:YII DO
	. . IF YI=1 SET MENGE=BESTAND
	. . IF YI=2 SET MENGE=CBESTAND
	. . IF YI=3 SET MENGE=ATPMENGE
	. . WRITE "<TD ID="_""""_"DRPSTOCKTR1TD"_YII_""""_" NOWRAP VALIGN=TOP ALIGN=RIGHT",strBGCOLOR
	. . IF YI=YII WRITE " style="_""""_"border-right:thin solid black;"_""""
	. . WRITE ">"
	. . WRITE "<FONT"
	. . IF MENGE<0 WRITE " COLOR="_YRED
	. . ;IF $PIECE(ART1,Y,134)'=0 IF +BESTAND<$PIECE(ART1,Y,134) WRITE " COLOR="_YRED   ;MINDESTBESTAND UNTERSCHRITTEN
	. . IF $PIECE(ART2,Y,23)'=0 IF MENGE<$PIECE(ART2,Y,23) WRITE " COLOR="_YRED      ;MINDESTBESTAND UNTERSCHRITTEN ;safety level 
	. . WRITE " SIZE=2>"
	. . WRITE "<B>"
	. . IF NK'="" WRITE $$^WWWZAHL(MENGE,0,NK)
	. . IF NK=""  WRITE $$^WWWZAHL(MENGE,0,$LENGTH($PIECE(MENGE,".",2)))
	. . WRITE "&nbsp;"
	. . WRITE "</B>"
	. . WRITE "</FONT></TD>", YCR
	. ;
	. ;-----------------------------------------------------------------------------
	. ; 7 Supply and   	    Qty|DueDt|Type|IDNo|EntryDt|ELP|Sta|
	. ; 8 Demand Columns    Qty|DueDt|Type|IDNo|EntryDt|ELP|Sta|Msg
	. ;   Most blank
	. ;-----------------------------------------------------------------------------
	. FOR YI=1:1:15 DO
	. . WRITE "<TD ID="_""""_"DRPSTOCKTR1TD"_(YI+YII)_""""_" NOWRAP VALIGN=TOP",strBGCOLOR
	. . IF (YI=1) || (YI=8) WRITE " ALIGN=RIGHT"
	. . IF YI=7 WRITE " style="_""""_"border-right:thin solid black;"_""""
	. . WRITE ">"
	. . WRITE YCR,"<FONT SIZE=2>"
	. . ;
	. . ;----------------------------------- Column 1 (Qty - Supply)
	. . IF YI=1 IF +$GET(RMAMENGE)'=0 DO                                                      ;OFFENE RMA
	. . . IF NK'="" WRITE "("_$$^WWWZAHL(RMAMENGE,0,NK)_")"
	. . . IF NK=""  WRITE "("_$$^WWWZAHL(RMAMENGE,0,$LENGTH($PIECE(RMAMENGE,".",2)))_")"
	. . ;
	. . ;----------------------------------- Column 3 (Type - Supply)
	. . IF YI=3 IF +$GET(RMAMENGE)'=0 DO
	. . . WRITE "<I>"_$$^WWWTEXT(33702)_"</I>"                         ; "Expected Returns"   ;OFFENE RMA
	. . ;
	. . ;----------------------------------- Column 8 (Qty - Demand)
	. . IF YI=8 IF ATP=1 IF +RESMEN'=0 DO
	. . . write "<span title='"_$$ListReservations(ART,BETRIEB)_"'>"                  // SR14669
	. . . IF NK'="" WRITE "("_$$^WWWZAHL(RESMEN,0,NK)_")"
	. . . IF NK=""  WRITE "("_$$^WWWZAHL(RESMEN,0,$LENGTH($PIECE(RESMEN,".",2)))_")"
	. . . write "</span>"
	. . ;
	. . ;----------------------------------- Column 10 (Type - Demand)
	. . IF YI=10 IF ATP=1 IF +RESMEN'=0 DO
	. . . IF +RESMEN(2)=0 WRITE "<I>"_$$^WWWTEXT(33645)_"</I>"  ; "Reservations"    ;RESERVIERUNGEN
	. . . IF +RESMEN(2)'=0 DO
	. . . . WRITE "<a href=# title="_""""_$$^WWWTEXT(33645)_": "_RESMEN(1)_YCR_$$^WWWTEXT(33314)_": "_RESMEN(2)_""""_">"
	. . . . WRITE "<I>"_$$^WWWTEXT(33314)_"</I>"                ; "Unavailable"     ;NICHT VERFÜGBAR
	. . . . WRITE "</a>"
	. . ;-----------------------------------
	. . ;
	. . WRITE "&nbsp;"
	. . WRITE "</FONT></TD>",YCR
	. ;
	. WRITE "</TR>",YCR
	. SET YDDSATZ=YDDSATZ+1
	
	QUIT
 
ListReservations(pidItem,pidLocn,pidStore="",pidBundle="")
	;-------------------------------------------------------------------------------
	; List current reservations for item and site location
	; 
	; Called By :
	; 	INDRPRUN4
	; 	INBESTANZ
	; 
	; Params:
	; pidItem - Item Id
	; pidLocn - Site Location Id
	;
	; ByRefs: None
	;
	; Returns: String containing a list of all the current reservations 
	;
	; History:
	; 17-Jun-2013	SCR		CORE-94: Include 'Issue' in Reservation details
	; 27-May-2013	SCR		CORE-94: Include 'Dispense' in Reservation details
	; 29-Oct-2008	GRF		SR16095: query Execute passes 4 parameters in where
	; 							might only have 3 in strSQL; set queries in class
	; 							for better performance and central location.
	; 22-Oct-2008	GRF		SR15973: new variables; prefixes; unnecessary quit
	; 							removed from while & test for length>0 since
	; 							strReserveList is always initialised
	; 01-Oct-2008   PPP  	SR15973: Update the new SOH Reservation structure
	; 04-Jul-2006	PO		SR14669: Created
	;-------------------------------------------------------------------------------
	new dteDate,dteDueDate,dteToday,idMov,idStockLocn,intListLength
 	new objResultSet,sc,strMovDesc,strReserveList
	
	if ($get(pidItem)="") || ($get(pidLocn)="") quit ""            ; SR16095
	
	set strReserveList = $$$Text($listbuild("IN00496"))_$$$CRLF  ; "Storage, Quantity, Reservation #, Date Reserved"
	set dteToday = +$horolog
 	
	; vvvvv SR16095
	 
	if pidStore = "" {
		if pidBundle = "" {
			set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement:GetReservedForLocn")
			set sc = objResultSet.Execute(pidItem,pidLocn)
		} else {
			set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement:GetReservedForBundle")
			set sc = objResultSet.Execute(pidItem,pidLocn,pidBundle)
		}
	} else {
		if pidBundle = "" {
			set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement:GetReservedForStore")
			set sc = objResultSet.Execute(pidItem,pidLocn,pidStore)
		} else {
			set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement:GetReservedForBundleStore")
			set sc = objResultSet.Execute(pidItem,pidLocn,pidStore,pidBundle)
		}
	}
	
	if $$$ISOK(sc) {
		while objResultSet.Next() {
			set dteDueDate = objResultSet.Data("DueDate")
			if dteDueDate '="" {
				continue:dteDueDate<dteToday
			}
			
			set idMov = $listget(objResultSet.Data("MovementType_MovementTypeId"))
			; "Sale", "Transfer", "Manual"
			set strMovDesc = $case(idMov,
								 	0 :$$$Text(32981),
									30:$$$Text(32764),
									61:$$$Text("IN01422"),  ; CORE-94 Dispense
									11:$$$Text("IN01138"),  ; CORE-94 Issue
									  :$$$Text(139)    )
			set strReserveList = strReserveList_objResultSet.Data("Storage")_", "_objResultSet.Data("QtyRequired")_", "_strMovDesc_" "_objResultSet.Data("Reference")_", "_objResultSet.Data("DateTimeCreated")_$$$CRLF
		}
	}
	; ^^^^^ replaces vvvvv 
	
	/*
 	set sc = $$$OK
 	
	set objResultSet = ##class(%Library.ResultSet).%New()
	set strSQL="SELECT ID, FromStorage->Code as Storage, QtyRequired, Reference, DateTimeCreated, DueDate, MovementType_MovementTypeId"
	set strSQL = strSQL_" FROM alDRP.dPlannedMovement"
	set strSQL = strSQL_" WHERE Item = ?"
	set strSQL = strSQL_" AND FromLocn = ?"
	set strSQL = strSQL_" AND State->StateId = 3"
	if pidStore'="" {
		set strSQL = strSQL_" AND FromStorage->Code = ?"
	}
	if pidBundle'="" {
		set strSQL = strSQL_" AND Bundle = ?"
	}
	
	//set strSQL = strSQL_" AND DueDate >= ?"
	
	if objResultSet.Prepare(strSQL) {
	;	FIXME : This doesn't properly cover the situation where only one of either Store or Bundle is not null.
 		if (pidStore="") || (pidBundle="") {
 			set sc = objResultSet.Execute(pidItem,pidLocn)
 		} else {
 			set sc = objResultSet.Execute(pidItem,pidLocn,pidStore,pidBundle)
 		}
 		
		if sc {
			while objResultSet.Next() {
		;		quit:$$$ISERR(sc)
				
				set dteDueDate = objResultSet.Data("DueDate")
				if dteDueDate '="" {
					continue:dteDueDate<dteToday
				}
				
				set idMov = $listget(objResultSet.Data("MovementType_MovementTypeId"))
				; "Sale", "Transfer", "Manual"
				set strMovDesc = $case(idMov,
									 	0 :$$$Text(32981),
										30:$$$Text(32764),
										  :$$$Text(139)    )
				set strReserveList = strReserveList_objResultSet.Data("Storage")_", "_objResultSet.Data("QtyRequired")_", "_strMovDesc_" "_objResultSet.Data("Reference")_", "_objResultSet.Data("DateTimeCreated")_$$$CRLF
			}
		}
	}
	; ^^^^^ SR16095 */
 	
	set intListLength  = $length(strReserveList)
	set strReserveList = $extract(strReserveList,1,intListLength-2)
 	
 	quit strReserveList
 	
]]></Routine>
</Export>