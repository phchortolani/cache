<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INReqSourceTable" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INReqSourceTable
	
#include COMSYS
#include INConst
	
ShowItems(pidEvent,pidParams,&idLine)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 04-Mar-2011	GRF		SR17653.1: Set curCost after continue block
	; 27-Jan-2011	PPP		SR17653: Check the Agreement Header and Agreement Item 
	;							Open & Close dates in order to display the Agreement
	;							Details
	; 09-Sep-2010	PPP		SR17533:
	;						1. When showing multiple grids, idLine has to be unique
	;						2. New ByRef parameter idLine, as this routine is called
	;							by ShowDates^INReqFirmTable, to display the Dyngrids
	;							in this routine
	;						3. Ignore Agreements if dates are incorrect along with
	;							other Dynagrids.  idLine has to be unique across
	;							all DynaGrids.
	; 15-Dec-2009	PPP		SR17077: Added the Unit
	; 01-Dec-2009	GRF		SR17007: separate tags for multi-lock operations
	; 01-Jun-2009	PPP		SR16599: Add Row highlight & click functionality
	; 22-Nov-2007	shobby	SRBR014807: Don't show inactive suppliers.
	; 28-May-2007	RPW		SR15513: Do not show agreements with <=0 available.
	; 							Do not show the Agreement/Supplier table for a
	; 							Transfer type.  Show the table for Warehouses
	; 09-May-2007	RPW		SRBR014432: Fixed id entry when using Agreements.
	; 24-Apr-2007	HeberB	SRBR014432:	get whether ID should be shown or not
	; 28-Mar-2007	shobby	SRBR014405: Corrected creation of heading for 2nd column
	; 28-Feb-2007	JW		SR15453: Check supplier status
	; 11-Jan-2007	PO		SR15339: Table heading
	; 03-Jan-2007	PO		SR15351: Now using generic Dynamic Table
	;-------------------------------------------------------------------------------
	new arrLocations,blnDontHaveLock,blnHasNoAgreement,blnHide,blnRequiresAgreement
	new blnRequiresHasNone,blnShowPurchases,curCost,dteClose,dteOpen,fltATP,fltBOH
	new idAgreement,idGrid,idItem,idKey,idKeyLine,idLocn,idReqn,idSupplier,idUnit
	new idxItem,lstColTypes,lstHeaders
	new objAgreement,objItemAgreement,objLine,objLocation,objReqn,objSupplier
	new objSuppItemTerms,strExecute,strFunction,strStatus,strUnit
	
	;********************************   IMPORTANT   ********************************
	; SR17533:If Multiple Dynagrids are to be displayed, the idLine has to be unique.  
	; This is the only identity for the Row ie the id of the Row = 'Dynbdy'+Row#  
	; i.e. Row# = idLine
	;********************************   IMPORTANT   ********************************
	
	set blnHide = +$$$WWW012HideRelationClassIDs($get(^WWW012(0,0,1)))
	set idGrid  =  $$$DYNTABLEGridLineFocusGrid(pidParams)
	
	set lstHeaders  = ""
	set lstColTypes = ""
		
	kill ^CacheTempDynamicTable(YUCI,YUSER,1)
	
	set idKey  = $$ReferenceKey^COMGridEdit31Interface(idGrid,$$$DYNTABLEGridLineFocusRow(pidParams))
	set idReqn    = $$$KEY1(idKey)
	set idKeyLine = $$$KEY2(idKey)
	
	set objReqn   = $$GetYMFELDContainer^COMGridEdit31G()    ; FIXME : Not used
	set objLine   = $$$GRIDGetYFELD(idKeyLine)
	set strStatus = $$GetLock^WWWMultiLock("INReqSource",idGrid,idReqn_$$$COMMA_idKeyLine)
	
	set strFunction = "FillLine"
		
	set idItem 	= $$$INRequisitionItem(objLine)
	quit:idItem=""
	
	set idxItem = $$$Index(idItem)
	 	
	;---------------------------------------
	; 1. a) Supplier Agreement
	;---------------------------------------
	if $$$INRequisitionType(objLine)'=$$$EnumINREQUISITIONTYPETfr {
 		if $$$ISERR(strStatus) {
			write "function "_strFunction_"() {"
			write "alert('"_$$$JSText($$$Text(strStatus))_"');"
			write "}"
		
		} else {
			write "function "_strFunction_"() {"
			write "CallBack(""FillLine^INReqSourceTable"", getRowNum(getFocusField()), this.DiscData[0], this.DiscData[1], this.DiscData[2]);"
			write "}"
		}
	 
 		set strExecute = "FillLine^INReqSourceTable"
		
		; Column 3 "AL00179" "Unit" - left link
	 	set lstHeaders = $listbuild($$^WWWFELDNAME("INSupMastAgreeItem","P",$$$FldINSupMastAgreeItemSupplier),
									$$^WWWFELDNAME("INSupMastAgreeItem","P",$$$FldINSupMastAgreeItemAgreementNumber),
									$$$Text("AL00179"),
									$$^WWWFELDNAME("INSupMastAgreeItem","D",$$$FldINSupMastAgreeItemAgreementQty),
									$$^WWWFELDNAME("INSupMastAgreeItem","D",$$$FldINSupMastAgreeItemAppliedQty),
									$$^WWWFELDNAME("INSupMastAgreeItem","D",$$$FldINSupMastAgreeItemAvailableQty),
									$$^WWWFELDNAME("INSupMastAgreeItem","D",$$$FldINSupMastAgreeItemCost),
									$$^WWWFELDNAME("INSupMastAgree"    ,"D",$$$FldINSupMastAgreeOpenDate),
									$$^WWWFELDNAME("INSupMastAgree"    ,"D",$$$FldINSupMastAgreeCloseDate))
	
		set lstColTypes = $listbuild($listbuild("left","link"),
								     $listbuild("left","link"),
								     $listbuild("left","link"),
								     $listbuild("right","link"),
								     $listbuild("right","link"),
								     $listbuild("right","link"),
								     $listbuild("right","link"),
								     $listbuild("center","link"),
								     $listbuild("left","link"))
	 	
	 	set blnRequiresAgreement = $$RequiresMasterAgreement^INReqSourceLine(objLine)
	 	set blnHasNoAgreement    = $$HasNoMasterAgreements^INReqSourceLine(objLine)
	 	
 	; FIXME : Check Logic <GRF>
 	;         Should an Emergency indicate we don't care about an agreement even though normally required?
 	;         see use of $$$INRequisitionEmergency in INReqReleaseTable, INReqSource and INReqSourceLine
 	;   
 	;   Appears should be;
 	;	set blnRequiresHasNone   = (blnRequiresAgreement && blnHasNoAgreement && '$$$INRequisitionEmergency(objLine))
	 	
	 	set blnRequiresHasNone   = (blnRequiresAgreement && blnHasNoAgreement && $$$INRequisitionEmergency(objLine))
	 	
	 	kill ^CacheTempSupplierOmit(YUCI,YUSER)
	 	
		set idSupplier = ""
		for {
			set idSupplier = $order(^INSupMastAgreeItems(0,5,idxItem,idSupplier))
			quit:idSupplier=""
			
			if '$$CanSourceReqs^INLIEF(idSupplier) {
				set ^CacheTempSupplierOmit(YUCI,YUSER,idSupplier) = ""
			
			} else {
				set idAgreement = ""
				for {
					set idAgreement = $order(^INSupMastAgreeItems(0,5,idxItem,idSupplier,idAgreement))
					quit:idAgreement=""
					
					set objItemAgreement = $get(^INSupMastAgreeItem(0,idSupplier,idAgreement,idItem,1))
					continue:objItemAgreement=""
					
					set objAgreement = $get(^INSupMastAgree(0,idSupplier,idAgreement,1))
		 			
		 			// continue if not correct locn ? which is... ?
		 			
			//SR17653 VVVV
					set dteOpen  = $$$INSupMastAgreeItemOpenDate(objItemAgreement)
					set dteClose = $$$INSupMastAgreeItemCloseDate(objItemAgreement)

					//If both line entries are blank then get the header details
					if (dteOpen = "") && (dteClose = "") {
						set dteOpen  = $$$INSupMastAgreeOpenDate(objAgreement)					
						set dteClose = $$$INSupMastAgreeCloseDate(objAgreement)
					}
							
					continue:($$$INSupMastAgreeItemAvailableQty(objItemAgreement)<=0)
					continue:((dteOpen'="")  && (dteOpen>$horolog))
					continue:((dteClose'="") && ($horolog>dteClose))
					
					set curCost  = $$$INSupMastAgreeItemCost(objItemAgreement)   ; SR17653.1
			//SR17653 ^^^^

					set objSupplier = $get(^INLIEF(0,idSupplier,1))
					set idUnit		= $$$INARTUnitofMeasure($get(^INART(0,idItem,1)))
					set strUnit		= $$$AppEnum("EINHEIT",idUnit)
		 			
					set ^CacheTempDynamicTable(YUCI,YUSER,1,$increment(idLine),"data") = idSupplier_Y_idAgreement_Y_curCost
		 			
		 			// Column 3 Unit
					set ^CacheTempDynamicTable(YUCI,YUSER,1,idLine) = $select(blnHide:"",1:"("_idSupplier_") ")_$$$INLIEFShortName(objSupplier)_Y_
																	  idAgreement_Y_
																	  $select(blnHide && (strUnit'=""):$$$JSText(strUnit),
															                  1:"("_$$$JSText(idUnit)_") "_$$$JSText(strUnit) )_Y_
																	  $$$INSupMastAgreeItemAgreementQty(objItemAgreement)_Y_
																	  $$$INSupMastAgreeItemAppliedQty(objItemAgreement)_Y_
																	  $$$INSupMastAgreeItemAvailableQty(objItemAgreement)_Y_
																	  $$^WWWTR(0,8,curCost)_Y_
																	  $$^WWWDATE(dteOpen)_Y_
																	  $$^WWWDATE(dteClose)
				}
				
				if blnRequiresHasNone && ($get(^INARTK(0,idItem,idSupplier,1)) '= "") {
					set objSuppItemTerms = $get(^INARTK(0,idItem,idSupplier,1))
					set curCost = $$$INARTKNetPurchasePrice(objSuppItemTerms)
		 			
					set ^CacheTempSupplierOmit(YUCI,YUSER,idSupplier) = ""
					if $$CanSourceReqs^INLIEF(idSupplier) do SupplierLine(idItem,idSupplier,.idLine,blnHide)
				}
			}
		}
	 	
	;	FIXME : Is it correct that RequiresHasNone being set should
	;	        result in an okay situation?  This appears to be the reverse of the 'RequiresAgreement case
		
		if 'blnRequiresAgreement || blnRequiresHasNone {
			set idSupplier = ""
			for {
				set idSupplier = $order(^INARTK(0,idItem,idSupplier))
				quit:idSupplier=""

				continue:$data(^CacheTempSupplierOmit(YUCI,YUSER,idSupplier))
				do SupplierLine(idItem,idSupplier,.idLine,blnHide)
			}
		}
		
		
		
	;---------------------------------------
	; 1. b) Sourcing Location
	;---------------------------------------
	} else {
 		if $$$ISERR(strStatus) {
			write "function "_strFunction_"() {"
			write "alert('"_$$$JSText($$$Text(strStatus))_"');"
			write "}"
		} else {
			write "function "_strFunction_"() {"
			write "CallBack(""WarehouseLine^INReqSourceTable"", getRowNum(getFocusField()), this.DiscData[0]);"
			write "}"
		}
		set strExecute = "WarehouseLine^INReqSourceTable"
		
		; "Sourcing Location"  |  BOH   (Balance On Hand)  |  ATP   (Available to Promise)
		set lstHeaders  = $listbuild($$^WWWFELDNAME("INReqSourceLine","D",$$$FldINRequisitionSourcingLocation),
									 $$^WWWTEXT("IN00694"),
									 $$^WWWTEXT(32483))
		set lstColTypes = $listbuild($listbuild("left","link"),
									 $listbuild("right","link"),
									 $listbuild("right","link"))
		
		do GetWarehouseLocations^INReqCommon(.arrLocations,idItem)
		set idLocn = ""
		for {
			set idLocn = $order(arrLocations(idLocn))
			quit:idLocn=""
			continue:idLocn=YLOCATION
			
			set fltBOH = $piece(arrLocations(idLocn),Y,1)
			set fltATP = $piece(arrLocations(idLocn),Y,2)
			set ^CacheTempDynamicTable(YUCI,YUSER,1,$increment(idLine),"data") = idLocn
			set objLocation = $get(^WWW0121(0,0,idLocn,1))
			set ^CacheTempDynamicTable(YUCI,YUSER,1,idLine) = $select(blnHide:"",1:"("_idLocn_") ")_$$$WWW0121LocationName(objLocation)_Y_
															  fltBOH_Y_
															  fltATP
		}
	}
	kill ^CacheTempSupplierOmit(YUCI,YUSER)
	
	//--------------------------------------
	//The 7th parameter (after pidEvent) needs to be set for the RowClick event, will be used by RowClick^WWW120DynTable
	//	e.g. "WarehouseLine^INReqTable"
	//	will be called with the following parameters
	//	1. Row ID
	//	2. Each entry in ^CacheTempDynamicTable(...,data) separated by "~" will be a new parameter
	//			in this routines case : do WarehouseLine^INReqTable(pidRow,idLocn) will be executed on Row click
	//--------------------------------------
	
	do DrawTable^WWW120DynTable(lstHeaders,1,lstColTypes,pidParams,strFunction,pidEvent,strExecute)   ; (1. a or b)
	kill ^CacheTempDynamicTable(YUCI,YUSER,1)
	
	
	
	
	;---------------------------------------
	; 2. Purchase History
	;---------------------------------------
	set blnShowPurchases = 1	
	if ($$$INRequisitionType(objLine)=$$$EnumINREQUISITIONTYPEBuy) && (blnShowPurchases=$$$YES) {
		do PurchaseHistory(idItem,2,blnHide,.idLine)

		set strFunction = "FillLine2"
		
 		if $$$ISERR(strStatus) {
			write "function "_strFunction_"() {"
			write "alert('"_$$$JSText($$$Text(strStatus))_"');"
			write "}"
		} else {
			write "function "_strFunction_"() {"
			write "CallBack(""FillLine^INReqSourceTable"", getRowNum(getFocusField()), this.DiscData[0], this.DiscData[1], this.DiscData[2]);"
			write "}"
		}

 		set strExecute = "FillLine^INReqSourceTable"
	
	 	set lstHeaders = $listbuild($$^WWWFELDNAME("INREC","D",$$$FldINRECSupplier),
	 								$$^WWWFELDNAME("INRECSummary","D",$$$FldINRECSummaryPurchaseOrder),
									$$^WWWFELDNAME("INRECSummary","P",$$$FldINRECSummaryReceiptNumber),
									$$^WWWFELDNAME("INREC","D",$$$FldINRECProcessedDate),
									$$^WWWFELDNAME("INRECSummary","D",$$$FldINRECSummaryReceivedUnit),
									$$^WWWFELDNAME("INRECSummary","D",$$$FldINRECSummaryUnitQtyReceived),
									$$^WWWFELDNAME("INRECSummary","D",$$$FldINRECSummaryUnitCost),
									$$^WWWFELDNAME("INRECSummary","D",$$$FldINRECSummaryCostAfterDiscount))
	
		set lstColTypes = $listbuild($listbuild("left","display"),
									 $listbuild("left","display"),
								     $listbuild("left","display"),
								     $listbuild("center","display"),
								     $listbuild("left","display"),
								     $listbuild("right","display"),
								     $listbuild("right","display"),
								     $listbuild("right","display"))

		if $data(^CacheTempDynamicTable(YUCI,YUSER,2)) {
			do DrawTable^WWW120DynTable(lstHeaders,2,lstColTypes,pidParams,strFunction,
			                            pidEvent,strExecute,$$$Text($listbuild("IN01163",idItem)))
		} ; "Purchase History for Item %1"
		kill ^CacheTempDynamicTable(YUCI,YUSER,2)
	}
	quit
	
	
FillLine(pidRow,pidSupplier,pidAgreement,pcurCost)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 24-Mar-2009	GRF		SR16433: ensure the cost is in internal form (add "+")
	; 18-Jan-2007	RPW		SR15340: Pass the quantity as a reference field.
	; 17-Jan-2007	RPW		SR15351: Removed variable sets, pass all in as arguments to procedure
	; 03-Jan-2007	PO		SR15351: Now using generic Dynamic Table
	;-------------------------------------------------------------------------------
	
	do SetRecord^COMGridEdit31S1("INRequisition",pidRow,
	                             $$$FldINRequisitionSupplier_$$$COMMA_pidSupplier_Y_
	                                  $$$FldINRequisitionAgreement_$$$COMMA_pidAgreement_Y_
	                                  $$$FldINRequisitionUnitPrice_$$$COMMA_(+pcurCost),
	                             $$$FldINRequisitionQuantity)
	quit
	
	
WarehouseLine(pidRow,pidLocn)
	do SetRecord^COMGridEdit31S1("INRequisition",pidRow,$$$FldINRequisitionSourcingLocation_$$$COMMA_pidLocn)
	quit
	
	
SupplierLine(pidItem,pidSupplier,&idLine,pblnHide)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 28-Apr-2010	GRF		SR17193: format strShortName & strUnit before using
	; 19-Feb-2010	PPP		SR17193: Get the Unit Cost for the Item when selected.
	; 15-Dec-2009	PPP		SR17077: Added the Unit
	; 01-Jun-2007	GRF		SR15513: use strShortName
	; 09-May-2007	RPW		SRBR014432: Use ShortName not Name1
	; 24-Apr-2007	HeberB	SRBR014432: hide IDs if requested
	; 03-Jan-2007	PO		SR15351: Now using generic Dynamic Table
	;-------------------------------------------------------------------------------
	new curCost,fltUnitCost,idUnit,objSupplier,objSuppItemTerms,strShortName,strUnit
	
	set objSupplier = $get(^INLIEF(0,pidSupplier,1))
	
	set objSuppItemTerms = $get(^INARTK(0,pidItem,pidSupplier,1))
	set curCost     = $$$INARTKNetPurchasePrice(objSuppItemTerms)
	set fltUnitCost = $$$INARTKConversionFactor(objSuppItemTerms)*curCost
	
	set ^CacheTempDynamicTable(YUCI,YUSER,1,$increment(idLine),"data") = pidSupplier_Y_Y_fltUnitCost
	set strShortName = $$$INLIEFShortName(objSupplier)
	set strShortName = $select( pblnHide && (strShortName'=""):$$$JSText(strShortName),
	                            1                             :"("_$$$JSText(pidSupplier)_") "_$$$JSText(strShortName) )
	set idUnit  = $$$INARTKDeliveryQuantityUnit(objSuppItemTerms)
	set strUnit = $$$AppEnum("EINHEIT",idUnit)
	set strUnit = $select( pblnHide && (strUnit'=""):$$$JSText(strUnit),
	                       1                       :"("_$$$JSText(idUnit)_") "_$$$JSText(strUnit) )
	
	set ^CacheTempDynamicTable(YUCI,YUSER,1,idLine) = strShortName_Y_Y_strUnit_Y_Y_Y_Y_$$^WWWTR(0,8,curCost)
	quit
	
	
PurchaseHistory(pidItem,pidTable,pblnHide,&idLine)
	;-------------------------------------------------------------------------------
	; Purchase History
	; 
	; Called By: ShowItems^INReqSourceTable
	; 
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 28-Apr-2010	GRF		SR17193: format strShortName & strUnit before using
	; 09-Dec-2009	PPP		SR17077: Created
	;-------------------------------------------------------------------------------
	new arrList,dteDate,fltCost,fltDiscCost,fltQty,idOrder,idRec,idSupplier,idUnit
	new intCnt,objSupplier,sc,strList,strShortName,strSQL,strUnit
	
	set sc = ##class(alREC.iREC).ItemPurchaseHistory(pidItem,5,.arrList)
	
	if $$$ISOK(sc) {
		set intCnt = ""
		for {
			set intCnt	= $order(arrList(intCnt))
			quit:intCnt=""
			
			set strList = $get(arrList(intCnt))
			
			set idSupplier   = $piece(strList,Y,1)
			set idOrder      = $piece(strList,Y,2)
			set idRec        = $piece(strList,Y,3)
			set dteDate      = $piece(strList,Y,4)
			set idUnit       = $piece(strList,Y,5)
			set fltQty       = $piece(strList,Y,6)
			set fltCost      = $piece(strList,Y,7)
			set fltDiscCost  = $piece(strList,Y,8)
			
			set objSupplier  = $get(^INLIEF(0,idSupplier,1))	
			set strShortName = $$$INLIEFShortName(objSupplier)				
			set strShortName = $select( pblnHide && (strShortName'=""):$$$JSText(strShortName),
	                                    1                             :"("_$$$JSText(idSupplier)_") "_$$$JSText(strShortName) )
			set strUnit      = $$$AppEnum("EINHEIT",idUnit)
			set strUnit      = $select( pblnHide && (strUnit'=""):$$$JSText(strUnit),
	                                    1                       :"("_$$$JSText(idUnit)_") "_$$$JSText(strUnit) )
			
			set ^CacheTempDynamicTable(YUCI,YUSER,pidTable,$increment(idLine),"data") = idSupplier_Y_Y_fltCost
			set ^CacheTempDynamicTable(YUCI,YUSER,pidTable,idLine) = strShortName_Y_idOrder_Y_
			                                                         idRec_Y_$$^WWWDATE(dteDate)_Y_
			                                                         strUnit_Y_fltQty_Y_
			                                                         $$^WWWTR(0,8,fltCost)_Y_$$^WWWTR(0,8,fltDiscCost)
		}
	}
	quit sc   ; FIXME : should return strStatus but not used anyway
	
]]></Routine>
</Export>