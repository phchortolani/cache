<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMDocumentation" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMDocumentation
 
UpdateFiles(pstrSource,pstrDestination,pblnRemote)
	kill ^COMDocumentation
	if 'pblnRemote {
		do CopyFile("COMDocumentation.txt",pstrSource,pstrDestination,"")
		do ReadFromFile(pstrDestination)
	}
	set pstrSource=##class(%Library.File).NormalizeDirectory(pstrSource)
	set pstrDestination=##class(%Library.File).NormalizeDirectory(pstrDestination)
	if '##class(%Library.File).DirectoryExists(pstrDestination) {
		write !,"Creating Directory..."
		write "  Status="_##class(%Library.File).CreateDirectoryChain(pstrDestination)
	}
	if pblnRemote {
		do ListFiles(pstrSource,pstrSource,pstrDestination,$length(pstrSource))
		do WriteToFile(pstrSource)
	} else {
		do ImportFiles(pstrSource,pstrDestination)
	}
	quit	
 
 
ReadFromFile(pstrDestination)
	new hdlFile,intLengthRead,strLine
	
	set hdlFile = ##class(%File).%New(pstrDestination_"COMDocumentation.txt")
 
	if hdlFile '= "" {
		if hdlFile.Open("RS") {
			for {
				set intLengthRead = 32000
				set strLine = $zconvert(hdlFile.Read(.intLengthRead),"i","JS")
				quit:intLengthRead=-1
				xecute "set "_strLine
			}
		}
	}
 
	quit
 
 
WriteToFile(pstrSource)
	new idx,hdlFile
	
	set hdlFile = ##class(%File).%New(pstrSource_"COMDocumentation.txt")
	
	if hdlFile '= "" {
		if hdlFile.Open("WSN") {
			do hdlFile.MoveToEnd()
			set idx=""
			for {
				set idx=$order(^COMDocumentation(idx))
				quit:idx=""
				do hdlFile.WriteLine($zconvert("^COMDocumentation("""_idx_""")="""_$get(^COMDocumentation(idx))_"""","o","JS"))
			}
			do hdlFile.Close()
		}
	}
	quit
 
GetVersion(file)
	new strVersion
	set strVersion=##class(%Library.File).GetFileDateModified(file)
	set strVersion=strVersion_"~"_##class(%Library.File).GetFileSize(file)
	quit strVersion
	
	
CopyFile(file,pstrSource,pstrDestination,pstrVersion)
	if $piece(pstrVersion,"~",2)=-5 {
		if '##class(%Library.File).DirectoryExists(pstrDestination_file) {
			write !,"Creating Directory..."
			write "  Status="_##class(%Library.File).CreateDirectoryChain(pstrDestination_file)
		}
	} else {
		write $c(13),"Checking      "_pstrDestination_file
		if pstrVersion'=$$GetVersion(pstrDestination_file) {
			write $c(13),"Copying       "_pstrSource_file
			if ##class(%Library.File).CopyFile(pstrSource_file,pstrDestination_file) {
				write $c(13),"Copying  OK   "_pstrSource_file,!
			} else {
				write $c(13),"Copying  Fail "_pstrSource_file,!
			}
		}
	}
	quit
	
ImportFiles(pstrSource,pstrDestination)
	new file,strVersion
	
	set file=""
	for {
		set file=$order(^COMDocumentation(file))
		quit:file=""
		set strVersion=$get(^COMDocumentation(file))
		do CopyFile(file,pstrSource,pstrDestination,strVersion)
	}
	quit
	
	
ListFiles(pstrFileName,pstrSource,pstrDestination,pfltLength)
	new file,count,strPath,strName
	new strSubDirectory,blnStart,strVersion
	
	set blnStart=2
	set strSubDirectory=""
	set strPath=pstrFileName_"*.*"
	set file=$zsearch(strPath)
	for count=1:1 {
		quit:file=""
		set strName=##class(%Library.File).GetFilename(file)
		if (strSubDirectory=file)||(blnStart=1) {
			set blnStart=blnStart+1
		}
		if (strName'=".")&&(strName'="..")&&(blnStart=2)&&(strName'="COMDocumentation.txt") {
			set strVersion=$$GetVersion(file)
			set ^COMDocumentation($extract(file,$length(pstrSource)+1,$length(file)))=strVersion
			if ($piece(strVersion,"~",2)<0) {
				do ListFiles(file_"\",pstrSource,pstrDestination,pfltLength)
				set file=$zsearch(strPath)
				set strSubDirectory=pstrFileName_strName
				set blnStart=0
			}
		}
		Set file=$zsearch("")
	}
	quit
]]></Routine>
</Export>