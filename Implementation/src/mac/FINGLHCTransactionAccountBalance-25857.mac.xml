<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLHCTransactionAccountBalance" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLHCTransactionAccountBalance

	#Include FINHC
	#define Check "^CacheTemp(YUSER,""FINGLHCTransactionAccountBalance"")"


Check(Start="",End="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; The balance of a transaction account must equal the sum of its transactions.
    ;
    ; Returns:
    ;
    ; History:
    ; 20-Apr-2004	   Shobby		   Created
    ;-------------------------------------------------------------------------------
	;
	new idFINGLAccount,strStatus,fltTotal,objFINGLAccountTotal,idType

	set strStatus=$$$OK
	if $get(Y)="" d ^WWWVAR
	kill @$$$Check
	kill Result
	
	set idFINGLAccount=""
	for {
		set idFINGLAccount=$order(^FINGLAccounts(YM,3,$$$EnumFINGLACCOUNTUSAGETransaction,idFINGLAccount))
		quit:idFINGLAccount=""
		set idType=""
		for {
			set idType=$order(^FINGLAccountTotal(YM,idFINGLAccount,idType))
			quit:idType=""
			do GetTransactionTotals(idFINGLAccount,idType)
			set objFINGLAccountTotal=$get(^FINGLAccountTotal(YM,idFINGLAccount,idType,1))
			if objFINGLAccountTotal'="" {
				set $piece(@$$$Check@(idFINGLAccount,idType),Y,1)=$$$FINGLAccountTotalAmount(objFINGLAccountTotal)
			}
		}
	}
	set strStatus=$$CompareResults(.Result)
	kill @$$$Check

	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}


	quit strStatus


CompareResults(Result)
    ;-------------------------------------------------------------------------------
    ; Reports and discrepancies found in the TransactionAccountBalance routine
    ;
    ; Returns:
    ;
    ; History:
    ; 23-Apr-2004	shobby		Status flag was not being set.
    ; 20-Apr-2004   Shobby   	Created
    ;-------------------------------------------------------------------------------
	;
	new idxAccount,idxType,fltAccountTotal,fltTransactions,strStatus
	
	set idxAccount=""
	set strStatus=$$$OK
	for {
		set idxAccount=$order(@$$$Check@(idxAccount))
		quit:idxAccount=""
		set idxType=""
		for {
			set idxType=$order(@$$$Check@(idxAccount,idxType))
			quit:idxType=""
			set fltAccountTotal=$piece($get(@$$$Check@(idxAccount,idxType)),Y,1)
			set fltTransactions=$piece($get(@$$$Check@(idxAccount,idxType)),Y,2)
			if +fltAccountTotal'=+fltTransactions {
				set Result("Hash",$$$ErrorNo(Result("Errors")))= $$$Text($lb("Fin00334",idxAccount,idxType,fltTransactions,fltAccountTotal))  ;GL Account:%1 (%2). Transactions (%3) do not balance with Account Total (%4).
				set strStatus='$$$OK
			}			
		}
	}
	quit strStatus


GetTransactionTotals(pidFINGLAccount,pidType)
    ;-------------------------------------------------------------------------------
    ; Determines the total of the transactions of a particular type for an Account.
    ;
    ; Returns:
    ;
    ; History:
    ; 07-Jun-2004	shobby	 Exclude unposted transactions from calculation.
    ; 20-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idFINGLTran,objFINGLTran,idNumber,objFINGLTranLine,fltDebit,fltCredit,fltAmount
	
	if ($get(pidFINGLAccount)'="")&&($get(pidType)'="") {
		set idFINGLTran=""
		for {
			set idFINGLTran=$order(^FINGLTranLines(YM,50,pidFINGLAccount,idFINGLTran))
			quit:idFINGLTran=""
			set objFINGLTran=$get(^FINGLTran(YM,idFINGLTran,1))
			if $$$FINGLTranPostedDate(objFINGLTran)'="" {
				if $$$FINGLTranAmountType(objFINGLTran)=pidType {
					set idNumber=""
					for {
						set idNumber=$order(^FINGLTranLines(YM,50,pidFINGLAccount,idFINGLTran,idNumber))
						quit:idNumber=""
						set objFINGLTranLine=$get(^FINGLTranLine(YM,idFINGLTran,idNumber,1))
						set fltDebit=$$$FINGLTranLineDebit(objFINGLTranLine)
						set fltCredit=$$$FINGLTranLineCredit(objFINGLTranLine)
						set fltAmount=$piece($get(@$$$Check@(pidFINGLAccount,pidType)),Y,2)
						
						set fltAmount=$$$FCSub(fltAmount,fltCredit)
						set fltAmount=$$$FCAdd(fltAmount,fltDebit)
						;set fltAmount=fltAmount-fltCredit+fltDebit
						set $piece(@$$$Check@(pidFINGLAccount,pidType),Y,2)=fltAmount
					}
				}
			}
		}
	}
	quit

]]></Routine>
</Export>