<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINARPeriod" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINARPeriod
	
#include COMSYS
#include FINConst
	
UpdateInvoiceTran(Customer="",Invoice="",Line="") 
	;-------------------------------------------------------------------------------
	; Update Period total for a Customer
	;
	; Returns:
	;
	; History:
	; 08-Aug-2005	shobby	SR12815:Try and update all periods not just default.
	; 23-Feb-2004	SCR		Creation
	;-------------------------------------------------------------------------------
	new Status,Rec,Amount,Batch,BatchLine,Type
	new DefaultPeriod,Date,PeriodNumber,lstPeriods,idx,objFINGLPeriod
	new BatchLineRec,objFININTBatch,objFININTBatchType
	
	set Status=$$$OK
 
	if (Status=$$$OK) && (Customer="") {
		set Status=$$$Text("Fin00255")  ;Customer Required for Period Calculation
	}
	if (Status=$$$OK) && ((Invoice="") || (Line="")) {
		set Status=$$$Text($listbuild("Fin00256",Customer))  ;Customer Period Update Requires an Invoice and Invoice Line for Customer %1
	}	
	
	; Get Transaction details
	if Status=$$$OK {
		set Rec=$get(^FINARInvoiceTran(0,Customer,Invoice,Line,1))
		set Amount=$$$FINARInvoiceTranTransactionAmount(Rec)
		set Batch=$$$FINARInvoiceTranInterfaceBatch(Rec)
		set BatchLine=$$$FINARInvoiceTranInterfaceBatchLine(Rec)
		set Date=$$$FINARInvoiceTranDate1(Rec)
		if Batch="" set Batch=" "
		if BatchLine="" set BatchLine=" "
		set Type="S"  ; Default to Sales
		set BatchLineRec=$get(^FININTBatchLine(0,Batch,BatchLine,1))
		if $$$FININTBatchLineInterfaceType(BatchLineRec)="ACP" {
			set Type="C"
		}
	}
	
	; Get the Default Period type
	if Status=$$$OK {
		set DefaultPeriod=$$DefaultPeriod^FINGLPeriod()
		if DefaultPeriod="" {
			set Status=$$$Text("Fin00258")  ;No Default Period Type
		}
	}
	; Get the Period Number
	if Status=$$$OK {
		set Status=$$GetPeriodForDateType^FINGLPeriod(DefaultPeriod,Date,$$$YES,.PeriodNumber) 
		if PeriodNumber="" {
			set Status=$$$Text($listBuild("Fin00257",Customer,$$^WWWDATE(Date)))  ;No Default Period for Customer
		}
	}
 
	if $$$ISOK(Status) {
		set Status=$$GetPeriodsForDate^FINGLPeriod(Date,.lstPeriods,1)  ;include closed periods.
	}
	set objFININTBatch     = $get(^FININTBatch(0,Batch,1))
	set objFININTBatchType = $get(^FININTBatchType(0,$$$FININTBatchBatchType(objFININTBatch),1))
	
 	for idx=1:1:$listlength(lstPeriods) {
	 	quit:$$$ISERR(Status)
 		set PeriodNumber=$listget(lstPeriods,idx)
 		if PeriodNumber'="" {
	 		set objFINGLPeriod=$get(^FINGLPeriod(0,PeriodNumber,1))
	 		if $$$FINGLPeriodOpentoPosting(objFINGLPeriod) || $$$FININTBatchTypeMoveTransactionDateAround(objFININTBatchType) {
				set Rec=$get(^FINARPeriodTotal(0,Customer,PeriodNumber,1))
				if Type="S" {
					set Amount=$$$FINARPeriodTotalSales(Rec)+Amount
					set $$$FINARPeriodTotalSales(Rec)=Amount
				} else {
					set Amount=$$$FINARPeriodTotalPayments(Rec)-Amount
					set $$$FINARPeriodTotalPayments(Rec)=Amount
				}
				set Status = $$$Save("FINARPeriodTotal",Customer_","_PeriodNumber,Rec,$$$YES)
	 		} else {
		 		;Block posting if period is closed and can't move the transaction date. 
				set Status=$listbuild("Fin00099",$$$FINGLPeriodPeriodType(objFINGLPeriod),$$$FINGLPeriodNumber(objFINGLPeriod),$$$FINGLPeriodYear1(objFINGLPeriod))  ; Unable to post to Period Type %1. Period %2 for year %3 is closed.
	 		}
 		}
 	}
	quit Status
	
	
UpdateInvoiceTranOld(Customer="",Invoice="",Line="") 
	;-------------------------------------------------------------------------------
	; Update Period total for a Customer
	;
	; Returns:
	;
	; History:
	; 23-Feb-2004	SCR		Creation
	;-------------------------------------------------------------------------------
	new Status,Rec,Amount,Batch,BatchLine,Type
	new DefaultPeriod,Date,PeriodNumber
	new BatchLineRec
	
	set Status=$$$OK
 
	if (Status=$$$OK)&&(Customer="") {
		set Status=$$$Text("Fin00255")  ;Customer Required for Period Calculation
	}
	if (Status=$$$OK)&&((Invoice="")!(Line="")) {
		set Status=$$$Text($listbuild("Fin00256",Customer))  ;Customer Period Update Requires an Invoice and Invoice Line for Customer %1
	}	
	
	; Get Transaction details
 
	if Status=$$$OK {
		set Rec = $get(^FINARInvoiceTran(0,Customer,Invoice,Line,1))
		set Amount    = $$$FINARInvoiceTranTransactionAmount(Rec)
		set Batch     = $$$FINARInvoiceTranInterfaceBatch(Rec)      if Batch=""     set Batch     = " "
		set BatchLine = $$$FINARInvoiceTranInterfaceBatchLine(Rec)  if BatchLine="" set BatchLine = " "
		set Date      = $$$FINARInvoiceTranDate1(Rec)
		
		set Type = "S"  ; Default to Sales
		set BatchLineRec = $get(^FININTBatchLine(0,Batch,BatchLine,1))
		if $$$FININTBatchLineInterfaceType(BatchLineRec)="ACP" {
			set Type = "C"
		}
	}
	; Get the Default Period type
	if Status=$$$OK {
		set DefaultPeriod=$$DefaultPeriod^FINGLPeriod()
		if DefaultPeriod="" {
			set Status=$$$Text("Fin00258")  ;No Default Period Type
		}
	}
	; Get the Period Number
	
	if Status=$$$OK {
		set Status=$$GetPeriodForDateType^FINGLPeriod(DefaultPeriod,Date,$$$YES,.PeriodNumber) 
		if PeriodNumber="" {
			set Status=$$$Text($listBuild("Fin00257",Customer,$$^WWWDATE(Date)))  ;No Default Period for Customer
		}
	}
	; Update the Record for the customer/period 
	if Status=$$$OK {
		set Rec=$get(^FINARPeriodTotal(0,Customer,PeriodNumber,1))
		if Type="S" {
			set Amount=$$$FINARPeriodTotalSales(Rec)+Amount
			set $$$FINARPeriodTotalSales(Rec)=Amount
		} else {
			set Amount=$$$FINARPeriodTotalPayments(Rec)-Amount
			set $$$FINARPeriodTotalPayments(Rec)=Amount
		}
		set Status = $$$Save("FINARPeriodTotal",Customer_","_PeriodNumber,Rec,$$$YES)
	}
	quit Status
	
	
StartRecalc(Account="") 
    ;-------------------------------------------------------------------------------
    ; Start Recalculation of Period totals
    ;
    ; Returns:
    ;
    ; History:
    ; 29-Mar-2006	SC		SR13942: Use JobWrapper^COMUtilJob.
    ; 22-Feb-2006	JW		SR13942: Rolled back change
    ; 20-Dec-2005	RPW		SR13942: Pass the current environment through to the job.
    ; 25-Feb-2004	SCR		Created
    ;-------------------------------------------------------------------------------
	new Log
	
	do StartLog^COMLog($$$Text("Fin00259"),.Log) ;Customer Period Totals Recalcuation
	;job RecalcPeriod(Account,YUSER,0,Log) //:(:1::) ; SR13942
	do JobWrapper^COMUtilJob("RecalcPeriod^FINARPeriod("""_Account_""","""_Log_""")",YUSER)
 
	hang 2 ;wait for the process to start up
 
	; Ready to goto the Detail form
	do RedirectForm^COMUtils("COMMsg",Log,",","","")
	quit
 
 
RecalcPeriod(Account="",Log="") 
	;-------------------------------------------------------------------------------
	; Recalculate Period Totals for all Customers for a Control Account
	;
	; Returns:
	;
	; History:
	; 28-Apr-2005	SC		SR12942: Undo changes.
	; 29-Mar-2006 	SC		SR13942: No longer set environment within routine. 
	; 							Maintained by calling function.
	; 22-Feb-2005	PaulK	Reduce incedence of calling WWWVAR
	; 23-Feb-2004	SCR		Creation
	;-------------------------------------------------------------------------------
	new Status,Customer,Count,LogEntry,Max,LastUpdateTime,Percent
	
	set $ZTRAP="RecalcPeriodError"
	set Status=$$$OK
	
	if Log'="" do AddMessage^COMLog(Log,$$$Text("Fin00260"))  ;Recalculation Started
	
	; Get a Customer count
	set Customer=""
	set Max=0	
	for {
		set Customer=$order(^FINARCustomer(0,Customer))
		quit:Customer=""
		set Max=Max+1
	}
	if Log'="" {
		do AddMessage^COMLog(Log,$$$Text($listbuild("Fin00261",Max)),.LogEntry)  ;%1 Customers to Process	
		set LogEntry=LogEntry+1
	}
	
	; For each customer, rebuild its periods
	set LastUpdateTime=""
	set Customer=""	
	for Count=1:1 {
		set Customer=$order(^FINARCustomer(0,Customer))
		quit:Customer=""
		quit:Status'=$$$OK
		
		if $$GetCustomerControlAccount^FINARCustomer(Customer)=Account {
			set Status=$$RecalcCustomerPeriods(Customer)
		}
		if (Log'="")&&($horolog'=LastUpdateTime) {
			set Percent=+$justify(Count/Max*100,0,2)
			do AddMessage^COMLog(Log,$$$Text($listbuild("Fin00262",Percent)),LogEntry)
		}
	}
	if Status'=$$$OK {
		if Log'="" do AddMessage^COMLog(Log,$$$Text($listbuild("Fin00263",Status)))  ;Error in Processing, Details %1
	} else {
		if Log'="" do AddMessage^COMLog(Log,$$$Text($listbuild("Fin00262",100)),LogEntry)
	}
	
	quit Status
	
RecalcPeriodError ; Internal Tag for Error Processing
	if $get(Log)'="" do AddMessage^COMLog(Log,$$$Text($listbuild("Fin00263",$zerror)))  ;Error in Processing, Details %1
	quit Status	
	
	
RecalcCustomerPeriods(Customer="") 
	;-------------------------------------------------------------------------------
	; Recalculate Periods for a Customer
	;
	; Returns:
	;
	; History:
	; 24-Feb-2004	SCR		Creation
	;-------------------------------------------------------------------------------
	new Status
	
	set Status=$$$OK
	
	if (Status=$$$OK)&&(Customer="") {
		set Status=$$$Text("Fin00255")  ;Customer Required for Period Calculation
	}
	; Remove all customer periods
	if Status=$$$OK {
		set Status=$$RemoveCustomerPeriods(Customer)
	}
	; Load the periods for the Customer
	if Status=$$$OK {
		set Status=$$CreateCustomerPeriods(Customer)
	}
	quit Status
	
	
CreateCustomerPeriods(Customer="")
    ;-------------------------------------------------------------------------------
    ; Create Period total from Invoices for a Customer
    ;
    ; Returns:
    ;
    ; History:
    ; 24-Feb-2004	SCR		Created
    ;-------------------------------------------------------------------------------
	new Status,Invoice,Line
	
	set Status=$$$OK
	
	if (Status=$$$OK) && (Customer="") {
		set Status=$$$Text("Fin00255")  ;Customer Required for Period Calculation
	}
	if Status=$$$OK {
		set Invoice=""
		for {
			set Invoice=$order(^FINARInvoiceTran(0,Customer,Invoice))
			quit:Invoice=""
			quit:Status'=$$$OK
			
			set Line=""
			for {
				set Line=$order(^FINARInvoiceTran(0,Customer,Invoice,Line))
				quit:Line=""
				quit:Status'=$$$OK
				
				set Status = $$UpdateInvoiceTran(Customer,Invoice,Line)
			}
		}
	}
	quit Status
	
	
RemoveCustomerPeriods(Customer="") 
    ;-------------------------------------------------------------------------------
    ; Remove all Periods for a Customer
    ;
    ; Returns:
    ;
    ; History:
    ; 24-Feb-2004	SCR		Created
    ;-------------------------------------------------------------------------------
	new Status,Period
	
	set Status = $$$OK
	
	if (Status=$$$OK) && (Customer="") {
		set Status = $$$Text("Fin00255")  ; "Customer Required for Period Calculation"
	}
	; List the Periods & Remove them
	if Status=$$$OK {
		set Period = ""
		for {
			set Period = $order(^FINARPeriodTotal(0,Customer,Period))
			quit:Period=""
			
			set Status = $$$Kill("FINARPeriodTotal",Customer_","_Period)
		}
	}
	quit Status
	
	
ShowPeriods(Customer="") 
    ;-------------------------------------------------------------------------------
    ; Show Periods for a Customer
    ;
    ; Returns:
    ;
    ; History:
    ; 25-Feb-2004	SCR		Created
    ;-------------------------------------------------------------------------------
	new Temp,Total,Period,Rec,Date,Key
	new PeriodRec,Header,Sales,Payments
	
	; Get Customer Total & Sort Periods by Date
	set Temp="^CacheTemp("_$job_")"
	kill @Temp
	if Customer="" set Customer = " "
	
	set Total  = 0
	set Period = ""
	for {
		set Period = $order(^FINARPeriodTotal(0,Customer,Period))
		quit:Period=""
		
		set Rec = $get(^FINARPeriodTotal(0,Customer,Period,1))
		set PeriodRec = $get(^FINGLPeriod(0,Period,1))
		set Date      = $$$FINGLPeriodStartDate(PeriodRec)
		set Key       = Date_Y_Period
		set @Temp@("Per",Key) = Rec
		
		set Total = Total+$$$FINARPeriodTotalSales(Rec)
		set Total = Total-$$$FINARPeriodTotalPayments(Rec)
		
	}
	
	; Show Heading for Date, Sales, Payments, Balance
	set Header = $listbuild($$$StrFINGLPeriodStartDate,$$$StrFINARPeriodTotalSales,$$$StrFINARPeriodTotalPayments,$$$Text("Fin00054",0))
	do Start^COMTable(Header)
	
	; List Periods
	set Key = ""
	for {
		set Key = $order(@Temp@("Per",Key),-1)
		quit:Key=""
		
		set Rec      = $get(@Temp@("Per",Key))
		set Date     = $piece(Key,Y,1)
		set Sales    = $$$FINARPeriodTotalSales(Rec)
		set Payments = $$$FINARPeriodTotalPayments(Rec)
		do NewLine^COMTable()
		do InsertCellDate^COMTable(Date)
		do InsertCurrencyCell^COMTable(Sales)
		do InsertCurrencyCell^COMTable(Payments)
		do InsertCurrencyCell^COMTable(Total)
		do EndLine^COMTable()
		set Total=Total-Sales+Payments
	}
 
	do Stop^COMTable()	
	quit
	
]]></Routine>
</Export>