<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARListaTrabalhoKit" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARListaTrabalhoKit
#include WWWConst
#include INConst
#include VARConst

	quit

OnAfterSave
	;-------------------------------------------------------------------------------
    ; Prepara as variáveis para a consulta do usuário.
	;
    ; History:
    ; 13-Out-2011	RGB	Created
    ;-------------------------------------------------------------------------------	
	new idLocal, idProduto, strEndereco, fltQuantidade, idMarca, strLote, dteValidade, 
		keyUnitarizacao, objUnitarizacao, strStatus, idOrientation
	
	//Filter
	set idLocal	      = $get(VORG(1))
	set strEndereco   = $get(VORG(2))
	set idProduto     = $get(VORG(3))
	set idGroup       = $get(VORG(4))
	set idMarca		  = $get(VORG(5))
	set idOrder		  = $get(VORG(6))
	set idOrientation = $get(VORG(7))
	set YKEY=idLocal_","_strEndereco_","_idProduto_","_idGroup_","_idMarca_","_idOrder_","_idOrientation
	set strStatus = $$$OK
	do GoToForm^COMUtilForm("VARListaTrabalhoKit",YKEY,,,,,)
	quit

OnAfterDataFields
	;-------------------------------------------------------------------------------
	; Rotina que prepara a pesquisa, busca os dados e monta a tabela com os resultados
	;
	; History:
	; 13-Out-2011 RGB Created
	;-------------------------------------------------------------------------------
	new lstHeader, count, idOrdem, idStatus, idProduto, fltQuantidade, idMarca, strLote,
		dteValidade, param, descStatus, criadoEm, criadoPor, arrayResponse,Location,EndUnitPadrao,idGroup,intStock,intPR, idOrientation,strXYZ
	
	kill ^VARListaTrabalhoKitTemp(YBED)
	set lstHeader = ""
	//set lstHeader = lstHeader_$listbuild("","N°. Ordem","Cód.","Produto","Quantidade","Unidade","Cód. Grupo","Desc. Grupo","Criado Por","Criado Em","Status","Cancelar","Processar")
	set lstHeader = lstHeader_$listbuild("","N°. Ordem","Cód.","Produto","Quantidade","Estoque","Ponto<br>&nbspRessuprimento","XYZ","Criado Por","Criado Em","Status","Cancelar","Processar")
	set Location=YLOCATION
	SET objLocation=$get(^WWW0121(YM,YM,Location,1)) //Getting location data
	if objLocation="" q ""
	
	set EndUnitPadrao=$$$WWW0121FREE14(objLocation) //Getting standard stock location for unitarization
	IF EndUnitPadrao="" q
	
	
	set idProduto     = $get(VORG(3))
	set idGroup       = $get(VORG(4))
	set idMarca		  = $get(VORG(5))
	set idOrder		  = $get(VORG(6))
	set idOrientation = $get(VORG(7))
	set count = 0
	new arrayResponse, arrayWorkList
	set arrayResponse = ""
	set arrayWorkList = ""
	
	//set orderParam="D" //P for Priority
	do GetListaTrabalhoKit(Location,EndUnitPadrao,.arrayWorkList,idProduto,idGroup)
	do ReOrderResult(.arrayWorkList,.arrayResponse,idOrder,Location,idOrientation)
	
	set count=""
	set count=$order(arrayResponse(count))
	if $$Start^COMTable(lstHeader,"Ordens de produção pendentes no local (MANUAIS)") {
		while count'="" {

			set idOrdem       = $piece(arrayResponse(count),Y,7)
			set idStatus      = $piece(arrayResponse(count),Y,8)
			set idProduto     = $piece(arrayResponse(count),Y,1)
			set strDescProduto= $piece(arrayResponse(count),Y,2)
			set fltQuantidade = $piece(arrayResponse(count),Y,4)
			set strUOM		  = $piece(arrayResponse(count),Y,3)
			set criadoEm      = $piece(arrayResponse(count),Y,10)
			set criadoPor     = $piece(arrayResponse(count),Y,11)	
			set idGroup		  = $piece(arrayResponse(count),Y,5)
  			set strGroupDesc  = $piece(arrayResponse(count),Y,6)
  			set intStock	  = $piece(arrayResponse(count),Y,12)
  			set intPR		  = $piece(arrayResponse(count),Y,13)
  			set strXYZ		  = $piece(arrayResponse(count),Y,14)
	
			if (idStatus '= "") {
				set descStatus = $piece($GET(^WWW101(YM,"INMOSTATUS",SPRACHE,idStatus,1)),Y,1)
			} else {
				set descStatus = ""
			}
			
			set strCriadoEm=""
			if criadoEm'="" set strCriadoEm=$zdt(criadoEm,4)
			
			do NewLine^COMTable()
			do InsertCell^COMTable(count)
			do InsertCell^COMTable(idOrdem,"INMO",idOrdem,1,"CENTER")
			do InsertCell^COMTable(idProduto)
			do InsertCell^COMTable(strDescProduto,,,,,,,,,$$$YES)
			do InsertCell^COMTable($$^WWWTR(0,12,fltQuantidade),,,,"RIGHT")
			do InsertCell^COMTable($$^WWWTR(0,12,intStock),,,,"RIGHT")
			do InsertCell^COMTable($$^WWWTR(0,12,intPR),,,,"RIGHT")
			//do InsertCell^COMTable(strUOM)
			do InsertCell^COMTable(strXYZ,,,,"CENTER")
			//do InsertCell^COMTable(idGroup)
			//do InsertCell^COMTable(strGroupDesc)
			do InsertCell^COMTable(criadoPor)			
			do InsertCell^COMTable(strCriadoEm)
			do InsertCell^COMTable("<font color='blue'>"_descStatus_"</font>")
			
			set pstrRoutine="CancelOrder^VARListaTrabalhoKit"
			set pstrParams=count
			set pstrText="<img src="_YGIF_"small_x.gif TITLE='Cancelar Ordem/Sugestão de Produção' border=0 align=""CENTER"">"
			do InsertCellCallback^COMTable(pstrText,pstrRoutine,pstrParams)
			
			set pstrRoutine="ProcessOrder^VARListaTrabalhoKit"
			set pstrParams=count
			set pstrText="<img src="_YGIF_"small_check.gif TITLE='Processar Ordem de Produção' border=0 align=""CENTER"">"		
			do InsertCellCallback^COMTable(pstrText,pstrRoutine,pstrParams)
			
			do EndLine^COMTable()
			set ^VARListaTrabalhoKitTemp(YBED,count)=arrayResponse(count)
			set count=$order(arrayResponse(count))
		}
		do Stop^COMTable()		
	}
	
	quit

CancelOrder(pYKEY="",checked="")
	;-------------------------------------------------------------------------------
	; Rotina para cancelar uma ordem não finalizada.
	;
	;
	; History:
	; 13-Out-2011 RGB Created
	;-------------------------------------------------------------------------------
	new KitObj,tempObj
	set tempObj=$get(^VARListaTrabalhoKitTemp(YBED,pYKEY))
	if $piece(tempObj,Y,7)'="" { //Checking for Production Order
		set KitObj=$get(^INMO(YM,$piece(tempObj,Y,7),1))
		if KitObj="" {
			$$$Alert("Não foi possível cancelar a ordem de produção. Ordem Inexistente, atualizando a tela...")
			do GoToForm^COMUtilForm("VARListaTrabalhoKit",YKEY,,,,,)
			quit $$$YES
		}
		
		if (($$$INMOStatus(KitObj)<2) || ($$$INMOStatus(KitObj)="")) {
			set strStatus=$$KILL^COMUtils("INMO",$piece(tempObj,Y,7))
			if $$$ISOK(strStatus) {
				$$$Alert("Ordem de produção cancelada com sucesso.")
				do GoToForm^COMUtilForm("VARListaTrabalhoKit",YKEY,,,,,)
				quit $$$YES
			} else {

				$$$Alert("Não foi possível cancelar a ordem de produção. Favor verificar o erro->"_strStatus)
			}
		}else {
			$$$Alert("Ordem de produção só pode ser cancelada caso seu status esteja Em Aberto.")	
		}
	}

	quit $$$YES

ProcessOrder(pYKEY="",checked="")
	;-------------------------------------------------------------------------------
	; Rotina que, caso exista uma Ordem, leva o usuário para a ordem.
	; Caso seja uma sugestão baseada na reposição, a rotina cria uma ordem de produção.
	;
	; History:
	; 13-Out-2011 RGB Created
	;-------------------------------------------------------------------------------
	set tempObj=$get(^VARListaTrabalhoKitTemp(YBED,pYKEY))
	if $piece(tempObj,Y,7)'="" { //Checking for Production Order
		do GoToForm^COMUtilForm("INMO",$piece(tempObj,Y,7),,1,,,)
	}else {
		
		set kitKey=""
		set strStatus=$$CreateKitOrder(YBED,pYKEY,.kitKey)
		if $$$ISOK(strStatus) {
			$$$Alert("Ordem de produção gerada com sucesso.")
			do GoToForm^COMUtilForm("INMO",kitKey,,1,,,)
			quit $$$YES
		} else {

			$$$Alert("Não foi possível gerar a ordem de produção. Favor verificar o erro->"_strStatus)
		}
	}

	quit $$$YES


ReOrderResult(&oldResultSet,&newResultSet,orderParam,pidLocal,pOrientation)
	;-------------------------------------------------------------------------------
	; Rotina que recebe um conjunto de resultados e ordena estes de acordo com o parâmetro:
	; C - Código do Produto
	; D - Descrição do Produto
	; P - Prioridade (Baseado na relação entre o estoque maximo e a sugestao de compra/abstecimento)
	;
	; pOrientation define se a rotina irá ordenar de forma ascendente ou descendente
	;
	; History:
	; 13-Out-2011 RGB Created
	;------------------------------------------------------------------------------- 
	new tempResultSet, count, pPercentage, pEM, pSugestao, newCount
	//if pOrientation=1 set pOrientation=-1
	if pOrientation=2 set pOrientation=-1
	if pOrientation=""  set pOrientation=1
	
	if (orderParam = "") {
		set orderParam = "P"
	}
	
	if orderParam = "C" {
		//Order by product code
		$$$Order1(oldResultSet,count)
			set tempResultSet($piece(oldResultSet(count),Y,1),count) = 1
		$$$End
	}
	
	if orderParam = "D" {
		//Order by product description
		$$$Order1(oldResultSet,count)
			set tempResultSet($piece(oldResultSet(count),Y,2),count) = 1
		$$$End
	}
	
	if orderParam = "P" {
		//Order by forecasting priority
		$$$Order1(oldResultSet,count)
			set pEM = $$GetEstoqueMaximo^VARReposicao($piece(oldResultSet(count),Y,1))
			set pSugestao = $$GetSugestao^VARReposicao($piece(oldResultSet(count),Y,1))
			set pPercentage = 0
			if ( (pSugestao>0) && (pEM>0) ) {
				set pPercentage = pSugestao/pEM
			}
			set tempResultSet(pPercentage,count)=1
		$$$End
	}
	
	//Create response array
	set newCount=0
	set order=""
	set order=$order(tempResultSet(order),pOrientation)
	while order'=""{
		$$$Order2(tempResultSet,order,count)
			set newCount=newCount+1
			set newResultSet(newCount)=oldResultSet(count)
		$$$End
		set order=$order(tempResultSet(order),pOrientation)
	}
	
	quit
	
CreateKitOrder(pUser="",pKEY="",&unitKey)
	;-------------------------------------------------------------------------------
	; Rotina que cria uma entrada na INMO, baseada na linha escolhida na Lista de Trabalho.
	; A ordem é criada baseada em uma sugestão de reposição.
	;
	; History:
	; 13-Out-2011 RGB Created
	;-------------------------------------------------------------------------------
	if pKEY="" quit 0_"Não há linha para ser processada."
	new tempObj,idLocal,strEndereco,idProduto,fltQuantidade,idMarca,strLote,dteValidade,idRecebimento
	set tempObj=$get(^VARListaTrabalhoKitTemp(YBED,pYKEY))
	
	//Data
	set strStatus = $$$OK
	
	set keyKit = $$^WWWNEXT("INMO")	
	set objINMO = ""
	//"1~10120003~62402~1.1~1.1~1.1~5~40~~62402~RUBENS~~~~~~"
	set $$$INMOStatus(objINMO)=0
	set $$$INMOItemCode(objINMO)=$piece(tempObj,Y,1)
	set $$$INMOSupplyingLocation(objINMO)=$piece(tempObj,Y,9)
	set $$$INMOProductionLocation(objINMO)=$piece(tempObj,Y,9)
	set $$$INMOReceiptLocation(objINMO)=$piece(tempObj,Y,9)
	set $$$INMOMinimumQuantity(objINMO)=$piece(tempObj,Y,4)
	set $$$INMOUnitOfMeasure(objINMO)=$piece(tempObj,Y,3)
	/*
			set $piece(arrayResponse(count),Y,1)=Item
	  		set $piece(arrayResponse(count),Y,2)=ItemDesc
	  		set $piece(arrayResponse(count),Y,3)=UOM
	  		set $piece(arrayResponse(count),Y,4)=Quantity
	  		set $piece(arrayResponse(count),Y,5)=ItemGroup
	  		set $piece(arrayResponse(count),Y,6)=GroupDesc
	  		set $piece(arrayResponse(count),Y,7)=WorkID
	  		set $piece(arrayResponse(count),Y,8)=WorkStatus
	  		set $piece(arrayResponse(count),Y,9)=Location
	  		set $piece(arrayResponse(count),Y,10)=DateCreated
	  		set $piece(arrayResponse(count),Y,11)=UserCreated
	
	set $$$VAROrdemUnitarizacaoLocal1(objUnitarizacao)         = $piece(tempObj,Y,19)
	set $$$VAROrdemUnitarizacaoEndArmazenagem(objUnitarizacao) = $piece(tempObj,Y,20)	
	set $$$VAROrdemUnitarizacaoProduto(objUnitarizacao)    = $piece(tempObj,Y,1)
	set $$$VAROrdemUnitarizacaoQuantidade(objUnitarizacao) = $piece(tempObj,Y,8)
	set $$$VAROrdemUnitarizacaoMarca(objUnitarizacao) 	   = $piece(tempObj,Y,16)
	set $$$VAROrdemUnitarizacaoLote(objUnitarizacao) 	   = $piece(tempObj,Y,12)
	set $$$VAROrdemUnitarizacaoValidade(objUnitarizacao)   = $piece(tempObj,Y,13)
	set $$$VAROrdemUnitarizacaoStatus(objUnitarizacao)     = 0 ;0-Em Aberto
	set $$$VAROrdemUnitarizacaoRecebimento(objUnitarizacao)= $piece(tempObj,Y,4)
	*/
	set strStatus = $$$Save("INMO",keyKit,objINMO,1)	
	set kitKey=keyKit
	quit strStatus
	
GetListaTrabalhoKit(Location,StorageLocation,&arrayResponse,filterItem="",filterGroup="")
	;-------------------------------------------------------------------------------
	; Rotina para pesquisar sugestões de ordens, 
	; baseadas em sugestões de reposições e ordens manuais de produção
	;
	;
	; History:
	; 13-Out-2011 RGB Created
	;-------------------------------------------------------------------------------
	new Item,ItemDesc,Manual,Receipt,UOM,RecUOM,RecQuantity,Quantity,ItemGroup,GroupDesc,ItemDesc,LotNumber,Expiration,Program,DateReceived,Brand,WorkID,WorkStatus
	new itemObj
	
	#Dim tRS As %Library.ResultSet	
	
	set count=0
	//Retrieving sugestion for items produced
	$$$Order4(^INARTs,YM,41,3,Item)
		set Retrieve=1
		set ItemDesc="",UOM="",UserCreated="",Quantity="",ItemGroup=""
    	set GroupDesc="",ItemDesc="",DateCreated="",WorkID="",WorkStatus="",itemObj=""
    	
		set itemObj=$get(^INART(YM,Item,1))

    	set ItemDesc=$$$INARTSearchName(itemObj) 	
    	//set Quantity=tRs.Data("Quantidade")
    	set WorkStatus=0 // Não Processado
    	set WorkID=""
    	set DateCreated=""
    	set UserCreated=""
    	
    	set UOM=$$$INARTBaseUnit(itemObj)
    	set UOM=$$$WWW101Text($get(^WWW101(YM,"EINHEIT",SPRACHE,UOM,1)))

    	set ItemGroup=$$$INARTItemGroup(itemObj)
  		set GroupDesc=$$$INItemGroupDescription($get(^INItemGroup(YM,ItemGroup,1)))
		
		if ((filterItem'="") && (Item'=filterItem)) set Retrieve=0 //Filter by Item
		if ((filterItem'="") && (Item'=filterItem)) set Retrieve=0 //Filter by Group
		set Quantity=$$GetSugestao^VARReposicao(Item)
		if '(Quantity>0) set Retrieve=0 // No suggestion"
		
		//Save response
  		if Retrieve=1 {
	  		set count=count+1
	  		set $piece(arrayResponse(count),Y,1)=Item
	  		set $piece(arrayResponse(count),Y,2)=ItemDesc
	  		set $piece(arrayResponse(count),Y,3)=UOM
	  		set $piece(arrayResponse(count),Y,4)=Quantity
	  		set $piece(arrayResponse(count),Y,5)=ItemGroup
	  		set $piece(arrayResponse(count),Y,6)=GroupDesc
	  		set $piece(arrayResponse(count),Y,7)=WorkID
	  		set $piece(arrayResponse(count),Y,8)=WorkStatus
	  		set $piece(arrayResponse(count),Y,9)=Location
	  		set $piece(arrayResponse(count),Y,10)=DateCreated
	  		set $piece(arrayResponse(count),Y,11)=UserCreated
	  		set $piece(arrayResponse(count),Y,12)=$$GetEstoqueDisponivel^VARReposicao(Item)
	  		set $piece(arrayResponse(count),Y,13)=$$GetPontoRessuprimento^VARReposicao(Item)
	  		set $piece(arrayResponse(count),Y,14)=$$$INARTFREE2(itemObj)
  		}
	$$$End
	
	
	//Retrieving Manual Orders
	set tSQL="select ItemCode as Produto, "_
					"MinimumQuantity as Quantidade, "_
					"Status, "_
					"OrderCreatedDate as CriadoEm, "_
					"OrderCreatedBy AS CriadoPor, "_ 
					"ProductionOrderNumber as Ordem "_
					"from SQLUser.INMO "_
					"where ProductionLocation='"_Location_"' "_
					"AND Status<5 "
	if filterItem'="" set tSQL=tSQL_" And ItemCode='"_filterItem_"'"
	//if filterBrand'="" set tSQL=tSQL_" And Marca='"_filterBrand_"'"
	Set tRs = ##class(%Library.ResultSet).%New()
	Set tRs.RuntimeMode = "0"	
	Do tRs.Prepare(tSQL) 
	Do tRs.Execute()
    While tRs.Next() 
    {	
    
    	set Retrieve=1
    	set Item="",ItemDesc="",UOM="",UserCreated="",Quantity="",ItemGroup=""
    	set GroupDesc="",ItemDesc="",DateCreated="",WorkID="",WorkStatus=""
    	
		set Item=tRs.Data("Produto")
		set itemObj=$get(^INART(YM,Item,1))
    	set ItemDesc=$$$INARTSearchName(itemObj) 	
    	set Quantity=tRs.Data("Quantidade")
    	set WorkStatus=tRs.Data("Status")
    	set WorkID=tRs.Data("Ordem")
    	set DateCreated=tRs.Data("CriadoEm")
    	set UserCreated=tRs.Data("CriadoPor")
    	
    	set UOM=$$$INARTBaseUnit(itemObj)
    	set UOM=$$$WWW101Text($get(^WWW101(YM,"EINHEIT",SPRACHE,UOM,1)))

    	set ItemGroup=$$$INARTItemGroup(itemObj)
  		set GroupDesc=$$$INItemGroupDescription($get(^INItemGroup(YM,ItemGroup,1)))
  		if filterGroup'="" {
	  		if filterGroup'=ItemGroup set Retrieve=0
  		}
  		//Save response
  		if Retrieve=1 {
	  		set count=count+1
	  		set $piece(arrayResponse(count),Y,1)=Item
	  		set $piece(arrayResponse(count),Y,2)=ItemDesc
	  		set $piece(arrayResponse(count),Y,3)=UOM
	  		set $piece(arrayResponse(count),Y,4)=Quantity
	  		set $piece(arrayResponse(count),Y,5)=ItemGroup
	  		set $piece(arrayResponse(count),Y,6)=GroupDesc
	  		set $piece(arrayResponse(count),Y,7)=WorkID
	  		set $piece(arrayResponse(count),Y,8)=WorkStatus
	  		set $piece(arrayResponse(count),Y,9)=Location
	  		set $piece(arrayResponse(count),Y,10)=DateCreated
	  		set $piece(arrayResponse(count),Y,11)=UserCreated
	  		set $piece(arrayResponse(count),Y,12)=$$GetEstoqueDisponivel^VARReposicao(Item)
	  		set $piece(arrayResponse(count),Y,13)=$$GetPontoRessuprimento^VARReposicao(Item)
	  		set $piece(arrayResponse(count),Y,14)=$$$INARTFREE2(itemObj)
  		}
    }		 
	If $IsObject(tRs)
	{
		Do tRs.Close()
	}
	
	quit 
]]></Routine>
</Export>