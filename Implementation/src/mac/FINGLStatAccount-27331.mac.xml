<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLStatAccount" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLStatAccount
    ;-------------------------------------------------------------------------------
	; GL Statistical Account
	; 28-Sep-2004	JW	Created
    ;-------------------------------------------------------------------------------
#include COMSYS
#include FINConst
	
IsStatAccount(Number="")
    ;-------------------------------------------------------------------------------
    ; Tests whether account is a statistical account.
    ; NB: Not used at the moment
    ;
    ; Returns: boolean
    ;
    ; History:
    ; 29-Sep-2004	JW	Created
    ;-------------------------------------------------------------------------------
	new isStatAccount,objFINGLAccount
	set isStatAccount = $$$NO

	if Number="" {
		set Number = YKEY
	}
	if Number'="" {
		set objFINGLAccount=$get(^FINGLAccount(YM,Number,1))
		if objFINGLAccount'="" {
			if $$$FINGLAccountAccountType(objFINGLAccount)=$$$EnumFINGLACCOUNTTYPEStatistical {
				set isStatAccount = $$$YES
			}
		}
	}
	quit isStatAccount
	
	
Links()
    ;-------------------------------------------------------------------------------
    ; Display all the accounts that 'roll up to' and 'roll down from' an account
    ;
    ; Returns:
    ;
    ; History:
    ; 28-Sep-2004	JW	Created
    ;-------------------------------------------------------------------------------
	new count,idAccount,idRollDown,idRollUp,lstExtraData,objFINGLAccount,rollUpAccts

	set idAccount=$get(YKEY)
	if idAccount'="" {
		set objFINGLAccount=$get(^FINGLAccount(YM,idAccount,1))
		if objFINGLAccount'="" {
			w !,"&nbsp;"
	
			do StartTree^COMTree("")
			
			; Heading
			set lstExtraData=$lb($$$StrFINGLAccountDescription,$$$Text("Fin00071",0),$$$StrFINGLAccountAccountType,$$$StrFINGLAccountAccountUsage,$$$Text("Fin00512",0))      ;Total ;Relationship
			do AddNode^COMTree("","!!!","","  "_$$$Text("Fin00318",0),"NOIMAGE",,,1,lstExtraData,1,,,1) ;Number
			
			; Roll Ups
			set rollUpAccts = $$$FINGLAccountRollUpTo(objFINGLAccount)
			if rollUpAccts'="" {
				for count=1:1:$length(rollUpAccts,";") {
					set idRollUp = $piece(rollUpAccts,";",count)
					set lstExtraData=$$GetExtraData^FINGLAccount(idRollUp,"Rolls Up To")
					do AddNode^COMTree("","!!"_idRollUp,idRollUp,idRollUp,"","FINGLAccount",,,lstExtraData,,,idRollUp,1)
				}
			}
	
			; Me
			set lstExtraData=$$GetExtraData^FINGLAccount(idAccount,"")
			do AddNode^COMTree("","!"_idAccount,idAccount,idAccount,"","FINGLAccount",,1,lstExtraData,,,idAccount,1)
			
			; Roll Downs
			set idRollDown = ""
			for {
				set idRollDown = $order(^FINGLAccounts(YM,10,idAccount,idRollDown))
				quit:idRollDown=""
				set lstExtraData=$$GetExtraData^FINGLAccount(idRollDown,"Rolls Down To")
				do AddNode^COMTree("!"_idAccount,idRollDown,idRollDown,idRollDown,"html.gif","FINGLAccount",,,lstExtraData,,,,1)
			}
			
			do StopTree^COMTree(1)
		}
	}
	quit	
	
	
AddAccountsToArray(strAccts,arrAccts)
    ;-------------------------------------------------------------------------------
    ; Translates list of accounts to an array and merges with paramater array
    ; ByRef : arrAccts
    ; 
    ; Returns: $$$YES if there are repeats, otherwise returns $$$NO
    ;
    ; History:
    ; 28-Sep-2004	JW	Created
    ;-------------------------------------------------------------------------------
	new account,count,addStatus
	
	set addStatus = $$$NO
	if strAccts'="" {
		for count=1:1:$length(strAccts,";") {
			set account = $piece(strAccts,";",count)
			if $get(arrAccts(account))'="" {
				set addStatus = $$$YES
			}
			set arrAccts(account) = $$$YES
		}
	}
	quit addStatus
	
	
Circular(Number,Data)
    ;-------------------------------------------------------------------------------
	; Computes whether the accounts that this account rolls up to, actually roll up
	; to this account (ie circular):
	; 	1. Current Account = c
	; 	2. Get list of Accounts for Statistics S(c). If c in S(c) -> circular.
	; 	3. For each s in S, find S(s).
	; 		4a	If union S(s) and S(c) not null -> circular
	; 		4b	Else S(c) =  S(s) + S(c). Rpt step 3 for s' in S(s).
    ;
    ; Returns: $$$OK or error msg.
    ;
    ; History:
    ; 30-Sep-2004	JW	Created
    ;-------------------------------------------------------------------------------
	new Account,addStatus,arrStatAccts,Count,curAccount,curStatAccts,strStatAccts,Status
	
	set Status=$$$OK
	
	set strStatAccts = $$$FINGLAccountRollUpTo(Data)
	if strStatAccts'="" {
		kill arrStatAccts
		do AddAccountsToArray^FINGLStatAccount(strStatAccts,.arrStatAccts)

		for Count=1:1 {
			quit:Count>$length(strStatAccts,";")
			
			set Account = $piece(strStatAccts,";",Count)
			set curAccount = $get(^FINGLAccount(YM,Account,1))
			if Account = Number {
				set Status = $listbuild("Fin00363",strStatAccts)
			} else {
				set curStatAccts = $$$FINGLAccountRollUpTo(curAccount)
				if curStatAccts'="" {
					set addStatus = $$AddAccountsToArray^FINGLStatAccount(curStatAccts,.arrStatAccts)
					set strStatAccts = strStatAccts_";"_curStatAccts	; add new accounts to list
					if addStatus=$$$YES {
						set Status = $listbuild("Fin00363",strStatAccts) ;Accounts cannot contain circular reference: %1
					}
				}
			}
			quit:Status'=$$$OK
		}
	} 
	
	quit Status
	
	
RePostWarning()
    ;-------------------------------------------------------------------------------
    ; If the current account is a statistical account, prints a warning about the total.
    ;
    ; Returns: nil
    ;
    ; History:
    ; 01-Oct-2004	JW	Created
    ;-------------------------------------------------------------------------------
	if $$IsStatAccount() {
		write "<blockquote><FONT color=black size=2>"_
			$$$Text("Fin00372")_ 	;<b>Note:</b> If accounts have been linked or un-linked from this statistical account since the last 
			"</FONT></blockquote>"	;time all transactions were reposted, the totals may be incorrect. Press button to re-evaluate.
	}
	quit
	
	
CheckRollUps(pYKEY)
    ;-------------------------------------------------------------------------------
    ; Checks whether any accounts roll up to this account. Used for deciding whether can 
    ; delete the account - so stops current process.
    ;
    ; Returns: $$$OK or error msg.
    ;
    ; History:
    ; 04-Jul-2005	RobertW	SR12527: Fixed Status usage for ReturnError
    ; 01-Oct-2004	JW		Created
    ;-------------------------------------------------------------------------------
	new rollUp,status
	
	set status = $$$OK
	set rollUp = $order(^FINGLAccounts(YM,10,pYKEY,""))
	if rollUp '="" {
		set status = $listbuild("Fin00373",pYKEY,rollUp)  ;Can't delete account %1, has roll up accounts (for example: %2)
		set Q=1
		do ReturnError^COMUtils((status))
	}
	
	quit status
	
	
	
]]></Routine>
</Export>