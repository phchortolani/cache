<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="EnsUtil" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include %occInclude
#include EnsUtil
 
 ; Ensemble Utility routines
 
HorologCmp(h2,h1) public { ; compare horolog values, return 0 if =, >0 if h1 later, <0 if h2 later
	s dd = +h2 - +h1
	Quit:0'=dd dd
	s td = +$p(h2,",",2)- + $p(h1,",",2)
	Quit td
}
 
HorologDiff(later,earlier) public { ; compute the number of seconds difference between two $Horolog/$ZTimestamp-format times; if 'later' is earlier than 'earlier' then the result is a negative number.
	Quit ($p(later,",")-$p(earlier,","))*(24*3600)+$p(later,",",2) - $p(earlier,",",2)
}
 
HorologAddSecs(time,secs) public { ; add a given number of seconds to a $Horolog/$ZTimestamp-format time value; subtraction may be done by passing in a negative number of seconds.
	s newsecs=+$p(time,",",2)+secs
	s newdays=newsecs\(24*3600), modsecs=newsecs#(24*3600)
	Quit $p(time,",")+newdays-(newsecs<0&modsecs)_","_modsecs
}
 
FileDiff(pFilename1,pFilename2,pIgnoreWhitespace,pInfo) public { ; diff 2 files
	Set tFile1Exists=##Class(%File).Exists(pFilename1)
	Set tFile2Exists=##Class(%File).Exists(pFilename2)
	if 'tFile1Exists {
		if 'tFile2Exists {
			set pInfo($I(pInfo)) = "Neither "_pFilename1_" nor "_pFilename2_" Exists"
			Quit 3
		} else {
			set pInfo($I(pInfo)) = "File "_pFilename1_" does not exist"
			Quit 2
		}
	} else {
		if 'tFile2Exists {
			set pInfo($I(pInfo)) = "File "_pFilename2_" does not exist"
			Quit 1
		}
	}
	Set pInfo0=$Get(pInfo)
	Set tFile1=##Class(%FileCharacterStream).%New()
	Set tFile1.TranslateTable = "UTF8"
	Set tFile1.Filename = pFilename1
	Set iLine1 = 0
 
	Set tFile2=##Class(%FileCharacterStream).%New()
	Set tFile2.TranslateTable = "UTF8"
	Set tFile2.Filename = pFilename2
	Set iLine2 = 0
 
	if 'tFile1.AtEnd {
		Set tLine1 = tFile1.ReadLine() Set:pIgnoreWhitespace tLine1 = $ZStrip(tLine1,"<>W")
		Set iLine1=iLine1+1 
	} else { Set tLine1 = "" }
	if 'tFile1.AtEnd {
		Set tLine2 = tFile2.ReadLine() Set:pIgnoreWhitespace tLine2 = $ZStrip(tLine2,"<>W")
		Set iLine2=iLine2+1 
	} else { Set tLine2 = "" }
 
	do {
		if pIgnoreWhitespace && (""=tLine1) && 'tFile1.AtEnd { Set tLine1 = tFile1.ReadLine(), tLine1 = $ZStrip(tLine1,"<>W"), iLine1=iLine1+1 continue }
		if pIgnoreWhitespace && (""=tLine2) && 'tFile2.AtEnd { Set tLine2 = tFile2.ReadLine(), tLine2 = $ZStrip(tLine2,"<>W"), iLine2=iLine2+1 continue }
		if tLine1 '= tLine2 {
			Set pInfo($I(pInfo)) = "Difference between files at line "_iLine1_" in "_pFilename1_" and line "_iLine2_" in "_pFilename2_" ("""_tLine1_""" / """_tLine2_""")"
			Quit
		}
		Quit:tFile1.AtEnd&&tFile2.AtEnd
		
		if 'pIgnoreWhitespace {
			if tFile1.AtEnd {
				Set pInfo($I(pInfo)) = "File "_pFilename1_" ended at line "_iLine1_" before file "_pFilename2
				Quit
			}
			if tFile2.AtEnd {
				Set pInfo($I(pInfo)) = "File "_pFilename2_" ended at line "_iLine2_" before file "_pFilename1
				Quit
			}
		}
		if 'tFile1.AtEnd {
			Set tLine1 = tFile1.ReadLine() Set:pIgnoreWhitespace tLine1 = $ZStrip(tLine1,"<>W")
			Set iLine1=iLine1+1 
		} else { Set tLine1 = "" }
		if 'tFile1.AtEnd {
			Set tLine2 = tFile2.ReadLine() Set:pIgnoreWhitespace tLine2 = $ZStrip(tLine2,"<>W")
			Set iLine2=iLine2+1 
		} else { Set tLine2 = "" }
	} while 1
 
	Quit:pInfo0=$Get(pInfo) 0
 
	Set tFile1Date = ##Class(%File).GetFileDateModified(pFilename1)
	Set tFile2Date = ##Class(%File).GetFileDateModified(pFilename2)
	Quit $Select($$HorologCmp(tFile1Date,tFile2Date)>0:1,1:2)
}
 
replace(pData, args...) public {
	For i=1:2:args {
		Set f=0 For { Set f=$F(pData,args(i),f)  Quit:f=0
			Set subst(f-$L(args(i)))=$LB(f-1,args(i+1))
		}
	}
	Set beg="" For { Set beg=$O(subst(beg),-1,repl)  Quit:beg=""
		Set $E(pData,beg,$LI(repl,1))=$LI(repl,2)
	}
	Quit pData
}
 
replaceArray(pData, pairs) public {
	Set sub="" For { Set sub=$O(pairs(sub),1,rep)  Quit:sub=""
		Set f=0 For { Set f=$F(pData,sub,f)  Quit:f=0
			Set subst(f-$L(sub))=$LB(f-1,rep)
		}
	}
	Set beg="" For { Set beg=$O(subst(beg),-1,repl)  Quit:beg=""
		Set $E(pData,beg,$LI(repl,1))=$LI(repl,2)
	}
	Quit pData
}
 
getAllErrorTexts(sc,sep,language) public {
	q:sc=$$$OK $$GetOneStatusText^%apiOBJ($$$ERROR("<%ObjectErrors>OK"),1,.language)
	s t=$$$qualifierParse("Compiler","/display=noerror",.qstruct)
	s sc=$$DecomposeStatus^%occSystem(sc,.errorlist,.qstruct,.language)
	s ds=$g(errorlist(1))
	q:""=ds||$$$ISERR(sc) ""
	for i=2:1:errorlist { s ds=ds_$g(sep,$C(13,10,43,13,10))_$g(errorlist(i)) }
	q ds
}
 
ExportPackages(pFilename,pPackages="",pExtras="",pExcludes="*.prj",pProjectIn="") public {
	Set pFilename=$TR(pFilename,"/","\")
	Set tProjName=$P($P(pFilename,"\",$L(pFilename,"\")),".",1)
	
	; Add all the items from the named input Project (if any)
	If ""'=pProjectIn Set tSC=$$Import^%occSAX(pProjectIn,,.tFullList,1)  If $$$ISERR(tSC) Do $system.Status.DisplayError(tSC) Quit
 
	; Add all the classes from each Package named in the input Packages list
	For i=1:1:$L(pPackages,",") { Set tPkg=$ZStrip($P(pPackages,",",i),"<>W") Continue:""=tPkg	
		w !,"adding package "_tPkg
		Do $system.OBJ.GetPackageList(.tList,tPkg,"ars")
		Set class="" For { Set class=$O(tList(class)) Quit:class=""
			Set tFullList(class_".cls")=""
		}
	}
	w !
	; Add all the items named in the input Extras list
	For i=1:1:$L(pExtras,",") { Set tExtra=$ZStrip($P(pExtras,",",i),"<>W")  Continue:""=tExtra
		w !,"adding "_tExtra
		Set tFullList(tExtra)=""
	}
	w !
	; Exclude all items named in the input Excludes list, honoring wildcards and case-insensitive
	For i=1:1:$L(pExcludes,",") { Set tExc=$ZStrip($P(pExcludes,",",i),"<>W")  Continue:""=tExc
		Set tExc=$ZCVT(tExc,"U")
		Set tItem="" For { Set tItem=$O(tFullList(tItem)) Quit:tItem=""
			If $$StarMatch($ZCVT(tItem,"U"),tExc) {
				w !,"excluding "_tItem
				Kill tFullList(tItem)
			}
		}
 	}
	w !,"Deleting "_tProjName_".prj"
	Set tSC=##class(%Studio.Project).%DeleteId(tProjName) Do:$$$ISERR(tSC) $system.Status.DisplayError(tSC)
 
	w !,"Building "_tProjName_".prj"
	Set tProject=##class(%Studio.Project).%New()  Quit:'$IsObject(tProject)
	Set tProject.Name=tProjName
	Set tProject.Description="Export of "_pPackages
 
	w !,"Adding items to "_tProjName_".prj"
	Set item="" For { Set item=$O(tFullList(item)) Quit:item=""
		//w !,"   adding "_item
		Do tProject.AddItem(item,$ZCVT($P(item,".",$L(item,".")),"U"))
	}
	w !,"Saving "_tProjName_".prj"
	Set tSC=tProject.%Save() Do:$$$ISERR(tSC) $system.Status.DisplayError(tSC)
	Set tFullList(tProject.Name_".prj")=""
	w !
	Set tSC=$system.OBJ.Export(.tFullList,pFilename) Do:$$$ISERR(tSC) $system.Status.DisplayError(tSC)
	Write !,"Exported to "_pFilename,!
	Quit
}
 
StarMatch(value = "", pattern = "")
{
	Set patlen=$L(pattern),cospat="",(quotc,inquot)=0  For i=1:1:patlen { Set c=$E(pattern,i)
		Set:'quotc c=$Case(c,"*":".E","?":"1E",:c)
		If 1=$L(c) {
			Set:'inquot c="1"""_c, inquot=1
		} Else {
			Set:inquot c=""""_c, inquot=0 ; close quote
		}
		Set cospat=cospat_c, quotc=0
	}
	Set:inquot cospat=cospat_"""" ; close quote
	Quit value?@cospat
}
 
]]></Routine>
</Export>