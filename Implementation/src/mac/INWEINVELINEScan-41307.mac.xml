<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INWEINVELINEScan" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INWEINVELINEScan
	
#include COMGridEdit31
#include INConst
#include %occInclude
#include COMSYS
	
	//
	//		NOT SURE IF WE CAN USE THIS SCAN METHOD FOR STOCKTAKE ???
	//
	
AddScanLine(pidScan)
    ;-------------------------------------------------------------------------------
    ; Routine to Add a new line to a Grid after a Scan is validated
    ;
    ; Assumptions :
    ;  YFORM	-	 Form Name
    ; 
    ; Returns:
    ; 	Status
    ;
    ; History:
    ; 20-Jul-2009	PPP		SR16773: ScanDelimiter is a function now
    ; 25-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	new arrBundle,arrFields,blnItemExists,idBundle,idClass,idData,idFromLocn
	new idItem,idLine,idLot,idStorage,idToLocn,idType
	new objData,objHeader,objLine,objOldData,sc,strDelim,strStatus

 	quit
	; vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv DISABLED
	
	
	//		NOT SURE IF WE CAN USE THIS SCAN METHOD FOR STOCKTAKE ???
	
	; ************************************** DISABLED CODE
	set strDelim = $$$ScanDelim                                      //SR16773
	set idItem   = ""
	
	if $get(YFORM)'="" {
		set idClass       = $$$GetClass(YFORM)
		set objLine       = ""
		set idItem        = $piece(pidScan,strDelim,1)               //SR16773
		set idLot         = $piece(pidScan,strDelim,2)               //SR16773
		set objHeader     = $$$GRIDYFELDContainer
	 	set idFromLocn    = ""	//$$$INIssueFromLocn(objHeader)
	 //	set idToLocn      = $$$INIssueToLocn(objHeader)
	 //	set idType        = $$$INIssueType(objHeader)
  		set blnItemExists = $$$NO
 
 		// For Picking Screens Only
 		// arrBundle(Bundle ID ,Storage ID) = Qty
 		set sc = $$GetBundleData^WWW120Scan(idItem,idFromLocn,idLot,.arrBundle,.idBundle,.idStorage)
 		
		//Process only if Bundle Exist for the Item/Lot combination and has Qty
		if $get(idBundle)'="" {
 
			//Get the data for the Item if it already exists
			//Need to update arrBundle if lines already exist
		//	set idLine = $$GetExistingItemRowData(idItem,.idBundle,.idStorage,.arrBundle,.blnItemExists)
			set idLine = $$GetRowLineWithQtyChecks^COMGridEdit31Scan(idItem, 
								$$$FldINWEINVItemNumber, 
								$$$FldINWEINVBundleID, 
								$$$FldINWEINVStockLocation, 
								$$$FldINWEINVActualQuantity, 
								.idBundle, 
								.idStorage, 
								.arrBundle, 
								.blnItemExists)
 
			if idLine {
				set (objLine,objOldData) = $$$GRIDGetYFELD(idLine)
 
			//	set $$$INIssueLineQtyRequired(objLine) = $$$INIssueLineQtyRequired(objLine) + 1
				set $$$INWEINVActualQuantity(objLine)  = $$$INWEINVActualQuantity(objLine) + 1
				
				kill arrFields
				//set the array for the fields that are updated
			//	set arrFields($$$FldINIssueLineQtyRequired)	= $$$INIssueLineQtyRequired(objLine)  //UPDATE
				set arrFields($$$FldINWEINVActualQuantity)	= $$$INWEINVActualQuantity(objLine)   //UPDATE
				
				//Updates the Row and Displayes it (for existing lines)
				//If the row is on another page displays the lines at the top of the grid
				do UpdateRow^COMGridEdit31Scan(YFORM, idLine, .arrFields, objOldData)
	 
			} else {
				if $get(idBundle)'="" {
					if (blnItemExists = $$$YES) {
						set $$$INWEINVItemNumber(objLine)     = idItem         //UPDATE
						set $$$INWEINVActualQuantity(objLine) = $$$INWEINVActualQuantity(objLine) + 1						
						set $$$INWEINVStockLocation(objLine)  = idStorage
						set $$$INWEINVBundleID(objLine)       = idBundle
												
						$$$GRIDAddLine(objLine,,idClass)
	
					} else {
						set strStatus = $$$MakeStatus("IN01039")       // "Cannot Add Lines to Current Record"
					}
				}
			}		
			
		} else {
			set strStatus = $$$MakeStatus("IN01040",idItem,idFromLocn) // "Stock Unavailable for Item %1 at Location %2"
		}
	}
	
	quit $$$OK
	
]]></Routine>
</Export>