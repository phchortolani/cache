<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="ExportBasic" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
ExportBasic()
	;
	;
	;
	;
	;do ##class(SourceControl.data.global.NetManagerClass).ExportAll()
	;
	

	new ExportComponent,Length,count
	
	set ExportComponent = "VARPedidoCompra~VARCompra~INReceipt~INRECReverse~VARCompraEntregaPrevisao~VARCompraEntregaPrevisaoCal~VARStock~VAREstoqueConsEndereco~VARStockHistory~"_
	"INMOV~INADJATT~INStockValCCAdj~INWEINVP~INWEINVD~INWEINVK~INReq~INReqIssue~INTFR~INRECTFRSearch~INIssueLoc~INDispenseToPatient~INIssueRev~VARINADJ~VARMonitoramentoEstoquePainel~"_
	"VARConsultaGerencialProduto~VARPreAlertaLocal~INART~VARTCIUnidadeMedida~VARINDRPITEMTabela~INItemGroup~WWW0121C~WWW0121C~INLP~INLIEF~INBrand~VARCompareQrCodes~MEDPatient~WWWPWD~"_
	"VARPreferenciasUsuario~WWW0131B~WWW013~VARMensagemPainel~VARMensagem~VARWWWPRO~VAREnvInfo~VARTCISystemInformation~VARTCILicenseUsageLog~INVORG~WWW012~VARBRModulo~VARBRDiretorios~"_
	"VARBRTipoArqUpload~VARDump~VARParametroCliente~VARParametroAtivarTabela~VARHistoricoCompra~VARHistoricoRecebimento~VARHistoricoEstorno~VARExpiryAlert~VARRelDistribuicao~"_
	"VARHistoricoConsumo~VARHistoricoDevolucoes~VARHistoricoSaidas~VARHistoricoConsumoDetalhe~VARProdutoEtq~VARPacienteEtq"
				
	w !!,"============= Begin Exporting ============="		
	
	do Start^COMALUP3(1,,,,$replace(ExportComponent,"~",";"),0,"HEVA-PREV","BASIC","AL-BASIC")
			
	w !!,"============= End Exporting ============="

	quit
	
ImportNMMetadata()
	
	new rsDir,Nome,Tipo,DataCriacao,DataModificacao,Tamanho
	
	set ObjExporter = ##class(SourceControl.Importer).%New()
	
	//do ObjExporter.ImportNMMetadata("D:\Projects\heva-prev\main\Implementation\globals\nm\forms\AEPAgreement-9207.form",1)
	
	set rsDir = ##class(%Library.ResultSet).%New("%File:FileSet")
	
	set Dir = "C:\projetos\BASIC\main\Implementation\src\cls"
	
	do rsDir.Prepare()
	do rsDir.Execute(Dir)
	
	set count = 0
	
	while(rsDir.Next()) {
		
		set Nome 			= rsDir.GetDataByName("Name")
		set Tipo 			= rsDir.GetDataByName("Type")
		set DataCriacao 	= rsDir.GetDataByName("DateCreated")
		set DataModificacao = rsDir.GetDataByName("DateModified")
		set Tamanho 		= rsDir.GetDataByName("Size")
		
		set rsFile = ##class(%Library.ResultSet).%New("%File:FileSet")
	
		do rsFile.Prepare()
		do rsFile.Execute(Nome)
	
		while(rsFile.Next()) {
		
			set NomeFile 			= rsFile.GetDataByName("Name")
			set TipoFile 			= rsFile.GetDataByName("Type")
			set DataCriacaoFile 	= rsFile.GetDataByName("DateCreated")
			set DataModificacaoFile = rsFile.GetDataByName("DateModified")
			set TamanhoFile 		= rsFile.GetDataByName("Size")
		
			do ObjExporter.ImportNMMetadata(NomeFile,1)
			
			/*
			w !,""
			w !,"Arquivo: "_NomeFile
			w !,"Tipo: "_TipoFile
			w !,"DataCriacao: "_DataCriacaoFile
			w !,"DataModificacao: "_DataModificacaoFile
			w !,"Tamanho: "_TamanhoFile
			*/
						
			set count = $i(count)
		
		}
		
	}

	w !,"Total de Arquivos: "_count
	
	quit

	
TravelDir(pDir,pRef)
	new rsDir,Nome,Tipo,DataCriacao,DataModificacao,Tamanho
	
	set rsDir = ##class(%Library.ResultSet).%New("%File:FileSet")
	
	do rsDir.Prepare()
	do rsDir.Execute(pDir)
	
	while(rsDir.Next()) {
		
		set Nome 			= rsDir.GetDataByName("Name")
		set Tipo 			= rsDir.GetDataByName("Type")
		set DataCriacao 	= rsDir.GetDataByName("DateCreated")
		set DataModificacao = rsDir.GetDataByName("DateModified")
		set Tamanho 		= rsDir.GetDataByName("Size")
		
		w !,""
		w !,"Arquivo: "_Nome
		w !,"Tipo: "_Tipo
		w !,"DataCriacao: "_DataCriacao
		w !,"DataModificacao: "_DataModificacao
		w !,"Tamanho: "_Tamanho
		
		
	}

	quit
	
ExportMACXMLFiles(pRoutine)
	;do ExportMACXMLFiles^ExportBasic()
	new file, routine, type, count
	
	set count = 0
	
	//Export MAC
	set routine = ""
	for{set routine = $order(^rINDEX(routine))
		quit:(routine="")
		
		set type = ""
		for{set type = $order(^rINDEX(routine,type))
			quit:(type="")
			
			continue:((routine["idx.") || (routine[".T") || (routine[".G"))
						
			if ((type="MAC")){
				w !,"Routine: "_routine_"."_type 
				do $System.OBJ.Compile(routine,"cfkvo3by")
				//do ##class(SourceControl.data.SourceBase).ExportAsCleanXML(routine_"."_type)
				set count = $i(count)
			}
			
		}
	}

	w !, "Total routines exported: "_count

	quit

ExportAllNetManager()
	
	
	//Classes
	do ##class(SourceControl.data.global.NetManagerClass).ExportAll()
	
	//Forms
	do ##class(SourceControl.data.global.NetManagerForm).ExportAll()
	
	//ApplicationParameter
	do ##class(SourceControl.data.global.NetManagerApplicationParameter).ExportAll()
	
	//CharParameter
	do ##class(SourceControl.data.global.NetManagerCharParameter).ExportAll()
	
	//UserParameter
	do ##class(SourceControl.data.global.NetManagerCustomUserParameter).ExportAll()
	
	//Dictionary
	do ##class(SourceControl.data.global.NetManagerDictionary).ExportAll()
	
	//Favorite
	do ##class(SourceControl.data.global.NetManagerFavorite).ExportAll()
	
	//LanguageText
	do ##class(SourceControl.data.global.NetManagerLanguageText).ExportAll()
	
	//Menu
	do ##class(SourceControl.data.global.NetManagerMenu).ExportAll()
	
	//SystemParameter
	do ##class(SourceControl.data.global.NetManagerSystemParameter).ExportAll()
	
	//UserParameter
	do ##class(SourceControl.data.global.NetManagerUserParameter).ExportAll()

	//Other
	do ##class(SourceControl.data.global.NetManagerOther).ExportAll()
	
	quit
	

ExportCLSXMLFiles(pClass)
	;do ExportXMLFiles^ExportBasic()
	new file, routine, type, count
	
	set count = 0
	
	//Export MAC
	set routine = ""
	for{set routine = $order(^rINDEX(routine))
		quit:(routine="")
		
		set type = ""
		for{set type = $order(^rINDEX(routine,type))
			quit:(type="")
			
			continue:((routine["idx.") || (routine[".T") || (routine[".G"))
						
			if ((type="MAC")){
				w !,"Routine: "_routine_"."_type 
				do $System.OBJ.Compile(routine,"cfkvo3by")
				do ##class(SourceControl.data.SourceBase).ExportAsCleanXML(routine_"."_type)
				set count = $i(count)
			}
			
		}
	}

	w !, "Total routines exported: "_count

	quit
]]></Routine>
</Export>