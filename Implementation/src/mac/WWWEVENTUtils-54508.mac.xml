<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWWEVENTUtils" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
WWWEVENTUtils
	
#include WWWConst
#include COMSYS
	
ForceToInteger(pYFORM,pYART,pYLFN)
	;-------------------------------------------------------------------------------
	; Determines whether a field should be forced to integer or not
	; (ie, zero decimal places)
	;
	; Called By : NOT CURRENTLY IN USE
	; 
	; Params:	pYFORM		: The form we're on
	; 			pYART		: Field type (must be D)
	; 			pYLFN		: Field number
	;
	; ByRefs:
	;
	; Returns: blnForce
	;
	; History:
	; 28-Mar-2007	JW		SR15384: No longer in use
	; 12-Oct-2006	SteveS	SR BR014112: Created
	;-------------------------------------------------------------------------------
	new blnForce,objWWW120,idClass,objWWW003,intDecPlaces
 
	set blnForce = $$$NO
	
	if ($get(pYFORM)'="") && (pYART="D") {
		set objWWW120 = $get(^WWW120(0,pYFORM,1))
		set idClass = $$$WWW120ClassUsedInForm(objWWW120)
		
		if (idClass'="")&&($get(pYLFN)'="") {
			set objWWW003 = $get(^WWW003(0,idClass,pYLFN,1))
			set intDecPlaces = $$$WWW003NoOfDecimals(objWWW003)
			if (intDecPlaces=0) set blnForce = $$$YES
		}
	}
	quit blnForce
	
	
AllowExecution(pstrRoutine,pstrParams)
	;-------------------------------------------------------------------------------
	; Examine pstrRoutine and try to ensure it is either a TAG^ROUTINE (not starting with $$)
	; or a class method.
	;
	; Params:
	; pstrRoutine - Code to run
	; pstrParams - Parameters to pass to code
	;
	; Returns: blnValid - $$$YES if code good to run, if $$$NO parameters are logged
	;                     and an alert is displayed to the user
	;
	; History:
	; 21-Mar-2007	PO		SR15483: Created
	;-------------------------------------------------------------------------------
	new blnValid,strFirstChr,idLog
 
    set blnValid = $$$YES
    set strFirstChr = $extract(pstrRoutine,1)
 
    if strFirstChr = "$" {                       // Prevent intrinsic commands from being executed
        set blnValid = $$$NO
    
    } elseif strFirstChr = "{" {                 // Prevent do while loops
        set blnValid = $$$NO
    
    } elseif pstrRoutine [ " " {                 // Ensure either performing a TAG^ROUTINE or ##class method
        set blnValid = $$$NO
    
    } else {
        if strFirstChr = "#" {                   // Is ##class
            if $extract($piece($$$LOWER(pstrRoutine),"##class(",2),1) = "%" { // Must not be an intrinsic class
                set blnValid = $$$NO
            
            } elseif pstrRoutine [ ",##class" {  // Must be just one method call
                set blnValid = $$$NO
            }
        
        } elseif pstrRoutine '[ "^" {            // Not a ##class, there must be a caret
            set blnValid = $$$NO
        }
    }
 
	if 'blnValid { // Log rejected callbacks vvv
        $$$JournalOff
        set idLog = $increment(^LogCapturedSecurityBreach)
        set ^LogCapturedSecurityBreach(idLog,"pstrRoutine") = pstrRoutine
        set ^LogCapturedSecurityBreach(idLog,"pstrParams")  = pstrParams
        $$$JournalOn
        $$$Alert($listbuild("WWW00066",pstrRoutine,pstrParams))
	} ; "The CallBack with parameters %1, %2 is rejected as it is considered a security breach."
	quit blnValid
	
	
CheckRelation(pidForm,pidClass,pidFormFld,pidClassFld,pidAssocClassFld,&pblnIsUnit=$$$NO,&pblnIsItem=$$$NO)
	;-------------------------------------------------------------------------------
	; Determine if the field contains a unit of measure enum or a stock item.
	; Used to consider whether to modify the number of decimal places for quantity
	; data.
	; 
	; Called By : FIELD^WWWEVENT, GetDecimalPointNum^COMGridEdit31Body
	; 
	; Procedure : A quantity field on a form is linked to its associated unit or,
	;             if it is solely based on the Inventory Unit for an item and the
	;             class for the form does not specify the Inventory Unit, the
	;             quantity field is linked directly to the item field.
	;             
	;             Code to find the matching unit for the quantity field then uses
	;             the associated unit directly or retrieves the inventory unit from
	;             the INART record.
	; 
	; History:
	; 03-Feb-2011	GRF		SR17579: created
	;-------------------------------------------------------------------------------
	new idAssocFormFld,idRelClass,objClassFld,objFormFld,strRelKeys
	
	set pblnIsUnit  = $$$NO
	set pblnIsItem  = $$$NO
	
	set idAssocFormFld = +$$$GetFormField(pidForm,pidAssocClassFld)
	
	do GetRelationFlds(pidForm,pidClass,idAssocFormFld,pidAssocClassFld,.idRelClass,.strRelKeys)
	if (idRelClass="WWW101") && (strRelKeys["""EINHEIT""") {
		set pblnIsUnit = $$$YES
		
	} elseif idRelClass="INART" {
		; When a Unit field links to an Item field, *** DON'T *** indicate the associated field is an Item.
		; Re-use Relation variables for field containing "Associated with Field" link.
		do GetRelationFlds(pidForm,pidClass,pidFormFld,pidClassFld,.idRelClass,.strRelKeys)
		if (idRelClass'="WWW101") || (strRelKeys'["""EINHEIT""") {
			set pblnIsItem  = $$$YES
		}
	}
	quit
	
	
GetRelationFlds(pidForm,pidClass,pidFormFld,pidClassFld,&pidRelClass="",&pstrRelKeys="")
	;-------------------------------------------------------------------------------
	; 
	; History:
	; 03-Feb-2011	GRF		SR17579: created
	;-------------------------------------------------------------------------------
	new objClassFld,objFormFld
	
	set objFormFld  = $get(^WWW122(0,pidForm,pidFormFld,1))
	set pidRelClass = $$$WWW122RelationClass(objFormFld)
	if pidRelClass'="" {
		set pstrRelKeys = $$$WWW122RelationalPrimaryKey(objFormFld)
	
	} elseif pidClassFld'="" {
		set objClassFld = $get(^WWW003(0,pidClass,pidClassFld,1))
		set pidRelClass = $$$WWW003RelationDatabase(objClassFld)
		set pstrRelKeys = $$$WWW003RelationalPrimaryKeys(objClassFld)
	}
	quit
	
]]></Routine>
</Export>