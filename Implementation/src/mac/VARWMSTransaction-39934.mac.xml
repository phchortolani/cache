<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARWMSTransaction" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARWMSTransaction
#include COMSYS

CreateTransactionTempData(pidUsuario,pidLocal,pidSessao,pidEnderecoRef,pidEnderecoDestino)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Salva na global temporária toda vez que o usuário arrasta um objeto de um
    ;	endereço para outro.
 	;   
    ; Chamado por:
    ;	VARWMSJSInterface.cls
    ; 
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidEnderecoRef = "") || (pidEnderecoDestino = "") )
	
	new userLockedObject
	
	//Verifica se outro usuário "pegou" o endereço
	set userLockedObject = $$whoLockedObject(pidLocal,pidEnderecoRef,pidUsuario)
	
	if (userLockedObject '= "") {		
		do DisplayLockMessageAndReload(pidUsuario,pidLocal,pidSessao,pidEnderecoRef,pidEnderecoDestino)	
  	
  	} else {
	
		if (pidEnderecoRef '= pidEnderecoDestino) {
			set ^VARTempWMSTransaction(0,pidUsuario,pidLocal,pidEnderecoRef) = pidEnderecoDestino_"~"_$horolog
	
		} else {
			//Limpa o registro de movimento caso o usuário tenha devolvido o objeto à sua posição de origem
			kill ^VARTempWMSTransaction(0,pidUsuario,pidLocal,pidEnderecoRef)
		}
  	}
  	
	quit
	
CleanUserTempData(pidUsuario,pidSessao,pidLocal,pidModulo,pidRua)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Limpa os valores temporários da transação (caixas que o usuário arrastou)
 	;   
    ; Chamado por:
    ;	VARWMSJSInterface.cls
    ; 
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidUsuario = "") || (pidSessao = "") || (pidLocal = "") || (pidModulo = "") || (pidRua = "") )
	
	new redirectForm, redirectLink, key
	
	do ^WWWVAR
	set YBED  = pidUsuario
	set YUSER = pidSessao
	set key   = pidLocal_","_pidModulo_","_pidRua

	kill ^VARTempWMSTransaction(YM,pidUsuario)

	set redirectForm = "VARWMSVisualizaRua"
	set redirectLink = $$BuildFormLink^VARWMSUtils(redirectForm,key)

	write "javascript:window.location='"_redirectLink_"'"
	
	quit
	
ConfirmTxn(pidUsuario,pidLocal,pidSessao,pModo)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Transação executada quando o usuário clica no botão Confirmar na tela de
    ;	visualização de endereços. O sistema cria a movimentação e as linhas na INMOV
    ;   ou INMOVByPallet, mas *NÃO* processo o registro. O processamento da movimentação
    ;   deve ser executada pelo usuário clicando no botão Processar do form INMOV ou
    ;	INMOVByPallet.
 	;   
    ; Chamado por:
    ;	VARWMSJSInterface.cls
    ; 
    ; Histórico:
    ;	14-Set-2011  Gustavo	Atualizado para diferenciar modo Produto x modo Palete    
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	new redirectForm, redirectLink
		
	set YBED = pidUsuario
	
	if '$data(^VARTempWMSTransaction(0,YBED))  {	
		write "javascript:alert('Nenhuma movimentação a ser processada.');"
		quit
	}
	
	if ($$isAreaTransfOcupada(pidUsuario,pidLocal) = $$$YES) {		
		write "javascript:alert('Não é possível confirmar pois existem produtos na área de transferência.');"
		quit
	}
		
	do ^WWWVAR
	set YBED  = pidUsuario
	set YUSER = pidSessao
	
	if (pModo = "Produto") {		
		set idMOV = $$CreateMOVTransaction(pidLocal,YBED,YUSER)
		set redirectForm = "INMOV"
	
	} elseif (pModo = "Palete") {
		set idMOV = $$CreateMOVByPalletTransaction(pidLocal,YBED,YUSER)
		set redirectForm = "INMOVByPallet"
	}
	
	if (idMOV '= "") {
		set redirectLink = $$BuildFormLink^VARWMSUtils(redirectForm,idMOV)
  	
 	 	//Informa ao usuário a movimentação criada
 	 	if (pModo = "Produto") {
  			write "javascript:alert('Movimentação de criada: "_idMOV_"');"
 	 	
 	 	} elseif (pModo = "Palete") {
			write "javascript:alert('Movimentação de palete criada: "_idMOV_"');"
 	 	}

  		
  		//Limpa a temporária de transação
  		kill ^VARTempWMSTransaction(YM,YBED)
  	
  		//Redireciona para a tela de movimentação
  		write "javascript:window.location='"_redirectLink_"'"
	
	}
	
	quit
	
	
isAreaTransfOcupada(pidUsuario,pidLocal)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Verifica se a área de transferência está ocupada por algum produto que o usuário
    ;	arrastou nela. Não é possível confirmar a movimentação caso esteja ocupada.
    ; 
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidUsuario = "") || (pidLocal = "") ) $$$YES
	
	new isAreaTransfOcupada, idEnderecoDestino
	set isAreaTransfOcupada = $$$NO
	
	$$$Order4(^VARTempWMSTransaction,0,pidUsuario,pidLocal,idEnderecoRef)
		set idEnderecoDestino = $piece($get(^VARTempWMSTransaction(0,pidUsuario,pidLocal,idEnderecoRef)),"~",1)
		
		if (idEnderecoDestino = "AreaTransferencia") {
			set isAreaTransfOcupada = $$$YES
			quit
		}
	
	$$$End
	
	quit isAreaTransfOcupada
	
	
isObjectSetForTransaction(pidLocal,pidEnderecoRef)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Verifica se o <div> foi arrastado pelo usuário e será utilizado na transação.
    ; 
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidEnderecoRef = "") ) $$$NO
	
	quit:($data(^VARTempWMSTransaction(YM,YBED,pidLocal,pidEnderecoRef))) $$$YES	
	quit $$$NO
	
isStorageSetForTransaction(pidLocal,pidEnderecoDestino)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Verifica se o endereço tem algum item <div> arrastado pelo usuário.
    ; 
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidEnderecoDestino = "") ) $$$NO
	
	new idEnderecoRef, idEnderecoDestino, isSetForTransaction
	
	set isSetForTransaction = $$$NO
	
	$$$Order4(^VARTempWMSTransaction,YM,YBED,pidLocal,idEnderecoRef)
		
		set idEnderecoDestino = $piece($get(^VARTempWMSTransaction(YM,YBED,pidLocal,idEnderecoRef)),Y,1)
		if (idEnderecoDestino = pidEnderecoDestino) {
			set isSetForTransaction = $$$YES
			quit
		}
		
	$$$End
	
	quit isSetForTransaction
	
getStorageSetForTransaction(pidLocal,pidEnderecoDestino)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna o endereço de armazenagem de origem de um produto que foi arrastado
    ;	para outro endereço.
    ; 
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidEnderecoDestino = "") ) $$$NO
	
	new idEnderecoRef, idEnderecoDestino, isSetForTransaction
	
	set storageObject = ""
	
	$$$Order4(^VARTempWMSTransaction,YM,YBED,pidLocal,idEnderecoRef)
		
		set idEnderecoDestino = $piece($get(^VARTempWMSTransaction(YM,YBED,pidLocal,idEnderecoRef)),Y,1)
		if (idEnderecoDestino = pidEnderecoDestino) {
			set storageObject = idEnderecoRef
			quit
		}
		
	$$$End
	
	quit storageObject
	
whoLockedObject(pidLocal,pidEnderecoRef,pUser)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Verifica se o objeto que o usuário está tentando manipular já está sendo
    ;	manipulado por outro usuário (dispositivo de segurança) e retorna o ID deste
    ;	usuário.
    ;
    ;	Caso o produto esteja trancado há mais de um dia, não considera o lock e ainda
    ;	remove-o da VARWMSTempTransaction.
    ; 
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidEnderecoRef = "") || (pUser = "") ) ""
	
	set YM = 0
	
	new idUser, userLockedObject, idEndereco
	
	set userLockedObject = ""
	
	$$$Order2(^VARTempWMSTransaction,YM,idUsuario)
	
		//Somente outros usuários
		continue:(idUsuario = pUser)
		
		$$$Order4(^VARTempWMSTransaction,YM,idUsuario,pidLocal,idEndereco)
			
			if (idEndereco = pidEnderecoRef) {

				set dteLocked = $piece($get(^VARTempWMSTransaction(YM,idUsuario,pidLocal,idEndereco)),"~",2)
			
				//Locks anteriores ao dia corrente são desconsiderados e limpados
				if $piece(dteLocked,",",1) < $piece($horolog,",",1) {
					kill ^VARTempWMSTransaction(YM,idUsuario,pidLocal,idEndereco)
					quit
				}				
							
				set userLockedObject = idUsuario
				quit				
			}
			
		$$$End
		
	$$$End
	
	quit userLockedObject
	
	
DisplayLockMessageAndReload(pidUsuario,pidLocal,pidSessao,pidEnderecoRef,pidEnderecoDestino)	
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Exibe mensagem que o produto está em manuseio por outro usuário e recarrega
    ;	o form para devolver o objeto a sua posição de origem. 
    ;
    ;	Observação: os objetos já ficam desabilitados quando algum usuário já está mexendo 
    ;	nele, mas se dois arrastarem ao mesmo tempo, o que soltar primeiro receberá o lock
    ;	e o outro usuário verá a mensagem deste método e a posição do objeto restaurada.
    ; 
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidEnderecoRef = "") || (pidEnderecoDestino = "" ) )

	new keyMod, keyRua, key, redirectForm, redirectLink
		
	do ^WWWVAR
	set YBED  = pidUsuario
	set YUSER = pidSessao
	set redirectForm = "VARWMSVisualizaRua"
		
	if ( $length(pidEnderecoDestino,"-") = 5 ) {
		set keyMod = $$ExtractModuloFromEnd^VARWMSUtils(pidEnderecoDestino)
		set keyRua = $$ExtractRuaFromEnd^VARWMSUtils(pidEnderecoDestino)		
	
	} else {
		;Exemplo: Endereço "AreaTransferencia"
		set keyMod = $$ExtractModuloFromEnd^VARWMSUtils(pidEnderecoRef)
		set keyRua = $$ExtractRuaFromEnd^VARWMSUtils(pidEnderecoRef)		
	}			
	
	set key = pidLocal_","_keyMod_","_keyRua
	
	set redirectLink = $$BuildFormLink^VARWMSUtils(redirectForm,key)
  	write "javascript:alert('O usuário "_userLockedObject_" já está manipulando este produto/endereço. A página será recarregada para que a posição do produto seja restaurada.');"
  	write "javascript:window.location='"_redirectLink_"'"
  	
  	quit
  	
RefreshScreen(pidUsuario,pidSessao,pidLocal,pidModulo,pidRua)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Somente recarrega a tela para o usuário visualizar possíveis alterações
    ;	feitas por outros usuários.
 	;   
    ; Chamado por:
    ;	VARWMSJSInterface.cls
    ; 
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidUsuario = "") || (pidSessao = "") || (pidLocal = "") || (pidModulo = "") || (pidRua = "") )
	
	new redirectForm, redirectLink, key
	
	do ^WWWVAR
	set YBED  = pidUsuario
	set YUSER = pidSessao
	set key   = pidLocal_","_pidModulo_","_pidRua

	set redirectForm = "VARWMSVisualizaRua"
	set redirectLink = $$BuildFormLink^VARWMSUtils(redirectForm,key)

	write "javascript:window.location='"_redirectLink_"'"
	
	quit

  	
LocalizarProduto(pidUsuario,pidSessao,pidLocal,pidModulo,pidRua,pidProduto="")
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Seta a variável de produto para que este possa ser visualmente localizado
    ;	no armazém.
 	;   
    ; Chamado por:
    ;	VARWMSJSInterface.cls
    ; 
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidUsuario = "") || (pidSessao = "") || (pidLocal = "") || (pidModulo = "") || (pidRua = "") )
	
	new redirectForm, redirectLink, key
	
	do ^WWWVAR
	set YBED  = pidUsuario
	set YUSER = pidSessao
	set key   = pidLocal_","_pidModulo_","_pidRua	
	
	set redirectForm = "VARWMSVisualizaRua"	
	set redirectLink = $$BuildFormLink^VARWMSUtils(redirectForm,key)		
	
	if ( (pidProduto = "") && ('$data(^VARTempWMSSearchItem(YM,pidUsuario))) ) {		
		kill ^VARTempWMSSearchItem(YM,pidUsuario)
  		quit
	}
	
	elseif ( (pidProduto '= "") && ('$data(^INART(YM,pidProduto))) ) {
		write "javascript:alert('O produto "_pidProduto_" não existe. Favor verificar.');"
		kill ^VARTempWMSSearchItem(YM,pidUsuario)
	
	} else {
		set ^VARTempWMSSearchItem(YM,pidUsuario) = pidProduto_"~"_$horolog
  		write "javascript:window.location='"_redirectLink_"'"				
	}

	quit
	
AlternarModo(pidUsuario,pidSessao,pidLocal,pidModulo,pidRua,pidModo="")
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Alterna o modo de visualiazação dos produtos (palete ou produto)
 	;   
    ; Chamado por:
    ;	VARWMSJSInterface.cls
    ; 
    ; Histórico:
    ; 	14-Set-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidUsuario = "") || (pidSessao = "") || (pidLocal = "") || (pidModulo = "") || (pidRua = "") )
	
	new redirectForm, redirectLink, key
	
	do ^WWWVAR
	set YBED  = pidUsuario
	set YUSER = pidSessao
	set key   = pidLocal_","_pidModulo_","_pidRua	
	
	set redirectForm = "VARWMSVisualizaRua"	
	set redirectLink = $$BuildFormLink^VARWMSUtils(redirectForm,key)
	
	if (pidModo '= "") {
		kill ^VARTempWMSTransaction(YM,YBED)
		set ^VARTempWMSModo(YM,pidUsuario) = pidModo_"~"_$horolog
  		write "javascript:window.location='"_redirectLink_"'"		
	}

	quit	
		

CreateMOVTransaction(pidLocal,YBED,YUSER)
	new idMOV, objMOV, strObserv, strStatus, idEnderecoRef, idEnderecoDestino, idMOVLinha, objMOVLinha,
		idKeyLinha
	
	//Cria o cabeçalho da movimentação
	set idMOV = $$^WWWNEXT("INMOV")		
	set strObserv = "Movimentação criada automaticamente a partir da tela de visualização gráfica do armazém."
	set strStatus = $$$OK

	set objMOV = ""	
	set $piece(objMOV,Y,1) = $piece($h,",",1) ;Data
	set $piece(objMOV,Y,2) = pidLocal  ;Local	
	set $piece(objMOV,Y,3) = 0		   ;Movement Type (0 - Estoque, 1 - Palete)
	set $piece(objMOV,Y,5) = 1 		   ;Status (1 - Em andamento)
	set $piece(objMOV,Y,6) = strObserv ;Observações
	set $piece(objMOV,Y,7) = $horolog  ;Criado Em
	set $piece(objMOV,Y,25) = YBED	   ;Criado Por
	
	set strStatus = $$$Save("INMOV",idMOV,objMOV,1)
	
	if $$$ISOK(strStatus) {
						   	
   		set idMOVLinha = 0
			
		//Cria as linhas da movimentação		
		$$$Order4(^VARTempWMSTransaction,0,YBED,pidLocal,idEnderecoRef)
		
			set idEnderecoDestino = $piece($get(^VARTempWMSTransaction(0,YBED,pidLocal,idEnderecoRef)),"~",1)
			
			&sql(DECLARE cursorStorage CURSOR FOR
			 	SELECT alSOH.dBundleStock.Item,
			 			alSOH.dBundleStock.Storage->Location,
		 				alSOH.dBundleStock.Storage->Code,
		 				+alSOH.dBundleStock.QtyOnHand,
		 				alSOH.dBundleStock.Bundle->ID,
		 				alSOH.dBundleStock.Bundle->LotNumber,
		 				alSOH.dBundleStock.Bundle->UseByDate
		 		 INTO :Item,:Local,:Storage,:Quantidade,:idBundle,:Lote,:Validade
		 		 FROM alSOH.dBundleStock
		 		WHERE alSOH.dBundleStock.Storage->Location = :pidLocal 
		 		  AND alSOH.dBundleStock.Storage->Code = :idEnderecoRef
		 		ORDER BY alSOH.dBundleStock.Item 
			)
	
			&sql(open cursorStorage)
   			quit:(SQLCODE)
   		
			for { &sql(fetch cursorStorage)
		   		quit:(SQLCODE)
		   	
		   		set idMOVLinha = $i(idMOVLinha)
		   	
		   		set objMOVLinha = ""
		   		set $piece(objMOVLinha,Y,1)  = Item
		   		set $piece(objMOVLinha,Y,2)  = idEnderecoRef
		   		set $piece(objMOVLinha,Y,7)  = idEnderecoDestino
		   		set $piece(objMOVLinha,Y,21) = Quantidade
		   		set $piece(objMOVLinha,Y,24) = idBundle
		   		set $piece(objMOVLinha,Y,25) = $$SQLGetUnitMeasure^VARSQL(Item)
		   		set $piece(objMOVLinha,Y,27) = Quantidade
			   	
		   		set idKeyLinha = idMOV_$$$COMMA_idMOVLinha		   	
				set strStatus = $$$Save("INMOVLine",idKeyLinha,objMOVLinha,1)
			}
						
			&sql(close cursorStorage)
		$$$End
	
	}  else {
		do ReturnError^COMUtilError(strStatus)
	}

	quit idMOV
	
CreateMOVByPalletTransaction(pidLocal,YBED,YUSER)
	new idMOV, objMOV, strObserv, strStatus, idEnderecoRef, idEnderecoDestino, idMOVPallet, objMOVPallet,
		idKeyLinha
	
	//Cria o cabeçalho da movimentação
	set idMOV = $$^WWWNEXT("INMOV")		
	set strObserv = "Movimentação de palete criada automaticamente a partir da tela de visualização gráfica do armazém."
	set strStatus = $$$OK

	set objMOV = ""	
	set $piece(objMOV,Y,1) = $piece($h,",",1) ;Data
	set $piece(objMOV,Y,2) = pidLocal  ;Local	
	set $piece(objMOV,Y,3) = 1		   ;Movement Type (0 - Estoque, 1 - Palete)
	set $piece(objMOV,Y,5) = 1 		   ;Status (1 - Em andamento)
	set $piece(objMOV,Y,6) = strObserv ;Observações
	set $piece(objMov,Y,7) = $horolog  ;Criado Em
	set $piece(objMOV,Y,25) = YBED	   ;Criado Por
	
	set strStatus = $$$Save("INMOV",idMOV,objMOV,1)

	if $$$ISOK(strStatus) {

  		set idMOVPallet = 0
			
		//Cria as linhas da movimentação		
		$$$Order4(^VARTempWMSTransaction,0,YBED,pidLocal,idEnderecoRef)
		
			set idEnderecoDestino = $piece($get(^VARTempWMSTransaction(0,YBED,pidLocal,idEnderecoRef)),"~",1)
			set idMOVPallet = $i(idMOVPallet)

		   	set objMOVPallet = ""
		   	set $piece(objMOVPallet,Y,1) = $$getPalletInStorage^VARWMSUtils(pidLocal,idEnderecoRef)
		   	set $piece(objMOVPallet,Y,2) = idEnderecoDestino
		   	set $piece(objMOVPallet,Y,3) = idEnderecoRef
		   				
		   	set idKeyLinha = idMOV_$$$COMMA_idMOVPallet
			set strStatus = $$$Save("INMOVPallet",idKeyLinha,objMOVPallet,1)			
		
		$$$End

	}  else {
		do ReturnError^COMUtilError(strStatus)
	}

	quit idMOV
		
]]></Routine>
</Export>