<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMConversion" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMConversion
#include COMSYS
#include COMConst
#include %occInclude
 
	;-------------------------------------------------------------------------------
	; Conversion of @net Manager global-based classes into AlphaLinc V2 object-based
	; classes.
	; 
	; Basic stategy :
	;	open class
	;	assign pieces of objData plus keys to properties
	;	save class
	;
	;
	;  V1 => V2
	; INART   WWW0121   INLP   WWW013   INLIEF   INKUNDE
	;
	;  V2 => V1
	; INWE
	;-------------------------------------------------------------------------------
	
ConvertOnSave(pClass,pKey)
	;-------------------------------------------------------------------------------
	; Called by WWWSPEI
	; 
	; History:
	; 29-May-2008	GRF		YM=>0 for shared class
	; 16-May-2008	GRF		SR15649: Removed ^SysSetup("COMConversion") switch
	; 28-Mar-2008	GRF		SR15649: limit activity at present to development and QA
	; 27-Mar-2008	HQN		SR?????: Return meaningful error when conversion
	;							specified and not implemented
	; 25-Feb-2008	GRF		SR15622: build and use execution string
	; 18-Jan-2008	GRF		SR15622: Created
	;-------------------------------------------------------------------------------
	new strExecute,strPackage,strStatus,sc
	
	set strStatus = $$$OK
	set sc = $$$OK
	set strPackage = $$$COMConversionPackage($get(^COMConversion(0,pClass,1)))
 
	if strPackage'="" {
		set strStatus = ##class(%Dictionary.MethodDefinition).%Exists($listbuild(strPackage_"||ConvertOnSave"))
		if $$$ISOK(strStatus) {
			set strExecute = "set sc=##class("_strPackage_").ConvertOnSave(pKey)"

			//if $g(YBED)="PAULP" for x=1:1:100 h 1
			xecute strExecute                              ; *** EXECUTE Save ? ***			
			
			if $$$ISERR(sc) {
				set strStatus = $$DecodeCacheError^COMUtilError(sc)
			}
		} else {
			set strStatus = $$DecodeCacheError^COMUtilError($system.Status.Error(5395,strPackage,"ConvertOnSave","ConvertOnSave^COMConversion()"))
		}
		
	}
 
	quit strStatus
	
ConvertOnDelete(pClass,pKey)
	;-------------------------------------------------------------------------------
	; Called by WWWKILL
	; 
	; History:
	; 17-Mar-2011	shobby	SR17686: Strip out quotes from primary key.
	; 22-Sep-2008	Luke	SR15936 Corrected the SC conversion and pass back 
	; 29-May-2008	GRF		YM=>0 for shared class
	; 16-May-2008	GRF		SR15649: Removed ^SysSetup("COMConversion") switch
	; 28-Mar-2008	GRF		SR15649: limit activity at present to development and QA
	; 27-Mar-2008	HQN		SR?????: Return meaningful error when conversion
	;							specified and not implemented
	; 25-Feb-2008	GRF		SR15622: build and use execution string
	; 18-Jan-2008	GRF		Created
	;-------------------------------------------------------------------------------
	new strExecute,strPackage,strStatus, sc
	set sc = $$$OK
	set strStatus = $$$OK
	
	set pKey=$translate(pKey,"""")		;SR17686
	set strPackage = $$$COMConversionPackage($get(^COMConversion(0,pClass,1)))
	if strPackage'="" {
		set strStatus = ##class(%Dictionary.MethodDefinition).%Exists($listbuild(strPackage_"||ConvertOnDelete"))
		if $$$ISOK(strStatus) {
			set strExecute = "set sc=##class("_strPackage_").ConvertOnDelete(pKey)"
			
			xecute strExecute                              ; *** EXECUTE Kill 3 ***
			
			if $$$ISERR(sc) { 
				set strStatus = $$DecodeCacheError^COMUtilError(sc)
			}
			
		} else {
			set strStatus = $$DecodeCacheError^COMUtilError($system.Status.Error(5395,strPackage,"ConvertOnDelete","ConvertOnDelete^COMConversion()"))
		}
	}
	quit strStatus
	
	
ConvertAll
	;-------------------------------------------------------------------------------
	; Run at the terminal prompt
	;
	; This routine will be run after the build has been loaded (1.50)
	; Any errors will need to be corrected by the CS personnel when running at a client's site.  
	; It is advisable that this process be run on a copy of the Production N/S before
	; it is run on the Actual Production N/S.
	; 
	; History:
	; 06-Dec-2013	SCR		SESDF-655: Check INLP for missing Locations
	; 24-Jan-2011 	PPP		SR17652 - SOH Transactions no longer converted from INWE (deprecated)
	; 24-Nov-2008	PPP		SR..:Continued with the Sync tests
	; 09-sep-2008 	Luke	SR15897 Reverted SR15800:
	; 16-Jul-2008   Luke    SR15800: Add check if the Conversion has been run
	; 29-May-2008	GRF		Avoid single character variables (i => loop); new variables
	; 21-May-2008	HQN		SR15764: Kill err byref variable before using,
	;						one shot usage and routine appends to it
	; 20-May-2008	Luke	SR15764 Corrected Logic Flow and user feedback for sync tests
	; 16-May-2008	Luke	SR15754: added calls to Status population 
	; 15-May-2008	PPP		SR15749: Created
	;-------------------------------------------------------------------------------
	new chContinue,err,idLog,loop,sc,strClass,tempSC
 
	write !," ***********************************************************************"
	write !," ****   WARNING THIS PROCESS WILL DELETE ALL V2 DATA   *****************"
	write !," ***********************************************************************"
	write !!
	write !,"Enter 'C' or 'c' to continue, any other key to quit"
	read *chContinue
	
	if $zconvert($char(chContinue),"U") '= "C" quit
	//set ^SysSetup("V2Convert")= $$$NO //SR15800: //SR15897
	write !
	
	set sc = $$$OK
	
	do StartLog^COMLog($$$Text("Com00352"),.idLog)  ;Converting V1 to V2
	do AddMessage^COMLog(idLog,$$$Text("Com00353"))  ;Conversion Started
	kill ^ConvertErr
	
	set strClass="Storage"
	write !,"Checking "_strClass
	set sc = ##class(alLOC.dUStorage).Check(1)
	write !,"Status Checking "_strClass_" : "_sc,!
	set ^ConvertErr(strClass)=sc

	set strClass="Scripts"
	write !,"Converting "_strClass
	set sc = ##class(alSYS.Script.iScript).OnBuild()
	write !,"Status Converting "_strClass_" : "_sc,!
	set ^ConvertErr(strClass)=sc
	
	/// VVVV SR15754
	set strClass="Status"
	write !,"Converting "_strClass
	set sc = ##class(alSYS.Status.iStatus).OnBuild()   
	write !,"Status Converting "_strClass_" : "_sc,!
	set ^ConvertErr(strClass)=sc
	
	set strClass="State"
	write !,"Converting "_strClass
	set sc = ##class(alREC.iREC).Populate()
	write !,"Status Converting "_strClass_" : "_sc,!
	set ^ConvertErr(strClass)=sc
	
	set strClass="Movement Status"
	write !,"Converting "_strClass
	set sc = ##class(alDRP.iDRP).OnBuild()
	write !,"Status Converting "_strClass_" : "_sc,!
	set ^ConvertErr(strClass)=sc
	
	set strClass="Location"
	write !,"Converting "_strClass
	set sc = ##class(alLOC.iLOC).ConvertAll()
	write !,"Status Converting "_strClass_" : "_sc,!
	set ^ConvertErr(strClass)=sc
	
	set strClass="Inventory-SOH"
	write !,"Converting "_strClass
	set sc = ##class(alINV.iINV).ConvertAll()
	write !,"Status Converting "_strClass_" : "_sc,!
	set ^ConvertErr(strClass)=sc
	do AddMessage^COMLog(idLog,$$$Text( "Com00354"))  ;Conversion Finished, Sync Test Starting
	
	
Sync ; Internal Tag ; FIXME : Not actually called anywhere - if desired as a manual entry point should have been called specifically from ConvertAll
	if $get(^ConvertErr) {
		write !,"Conversion Errors : "_+$get(^ConvertErr)
		write !,"Please check global ^ConvertErr",!,!
	}
 
	set sc = $$$OK
	
	/// VVVV SR15764
	if $$$ISOK(sc) {
		write !!,"Testing Data Sync"
		set tempSC = $$$OK
		
		write !, "Items Data Sync Test"
		set tempSC = ##class(alINV.iUINV).IsSynced()
		if $$$ISERR(tempSC) {
			write "<Failed Details Below>",!
			kill err
			do DecomposeStatus^%apiOBJ(tempSC,.err,"-d")
			for loop=1:1:err write err(loop),! 
		} else {
			write " <Passed>",!
		}

		set tempSC = $$$OK
		write !,"Location Data Sync Test"
		set tempSC = ##class(alLOC.iULOC).IsSynced()
		if $$$ISERR(tempSC) {
			write "<Failed Details Below>",!
			kill err
			do DecomposeStatus^%apiOBJ(tempSC,.err,"-d")
			for loop=1:1:err write err(loop),! 
		} else {
			write " <Passed>",!
		}

		//SR17652 - SOH Transactions no longer converted from INWE (deprecated)
		/*
		set tempSC = $$$OK
		write !,"SOH Data Sync Test"
		set tempSC = ##class(alSOH.iUSOH).IsSynced()
		if $$$ISERR(tempSC) {
			write !, "Failed Details Below ",!
			kill err
			do DecomposeStatus^%apiOBJ(tempSC,.err,"-d")
			for loop=1:1:err write err(loop),! 
		} else {
			write !, "Passed",!
		}
		*/

	}
	if $$$ISERR(sc) {
		write !, "Error During Conversion ",!
		kill err
		do DecomposeStatus^%apiOBJ(sc,.err,"-d")
		for loop=1:1:err write err(loop),! 
	}
	if $get(idLog)'="" 	do AddMessage^COMLog(idLog,$$$Text( "Com00355"))  ;Sync Finished

	quit	
	
]]></Routine>
</Export>