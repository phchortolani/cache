<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLDistribution" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLDistribution
	; 07-Jul-2003	SCR		Bug Fixes
	#Include FINConst
	#Include FIN
	#Include COMConst
 
OnAfterSave(pYKEY)
    ;-------------------------------------------------------------------------------
    ; If details have been modified in this screen that will affect the Journal Line, then
    ; update those details.
    ; 
    ; Notes: **********  Disabled  **************
    ; 		 Current functionality is correct.
    ;
    ; Returns:
    ;
    ; History:
    ; 20-Oct-2004		shobby			Created (SR10624)
    ;-------------------------------------------------------------------------------
	;
	;new strKey,idJournal,idJournalLine,objFINGLJournalLine
	
	;set strKey=$$$FINGLDistributionJournalLine(YFELD)
	;set idJournal=$piece(strKey,YKOMMA,1)
	;set idJournalLine=$piece(strKey,YKOMMA,2)
	;if (idJournal'="")&&(idJournalLine'="") {
	;	set objFINGLJournalLine=$get(^FINGLJournalLine(YM,idJournal,idJournalLine,1))
	;	set $$$FINGLJournalLineAccount(objFINGLJournalLine)=$$$FINGLDistributionSourceAccount(YFELD)
	;	set $$$FINGLJournalLineReference(objFINGLJournalLine)=$$$FINGLDistributionDescription(YFELD)
	;	if +$$$FINGLDistributionAmount(YFELD)<0 {
	;		set $$$FINGLJournalLineDebit(objFINGLJournalLine)=$zabs($$$FINGLDistributionAmount(YFELD))
	;		set $$$FINGLJournalLineCredit(objFINGLJournalLine)=""
	;	} else {
	;		set $$$FINGLJournalLineCredit(objFINGLJournalLine)=$$$FINGLDistributionAmount(YFELD)
	;		set $$$FINGLJournalLineDebit(objFINGLJournalLine)=""
	;	}
	;	if objFINGLJournalLine'=$get(^FINGLJournalLine(YM,idJournal,idJournalLine,1)) {
	;		do Save^FINSYS("FINGLJournalLine",strKey,objFINGLJournalLine,1)
	;	}
	;}
	;
	quit
 
ShowCheckList(pidDistribution,plngPage)
	new lstHeader,objDistribution,curTotal,lngNumPeriods,idPeriod,objPeriodType,strStatus
	
	set lstHeader=""
	set lstHeader=lstHeader_$lb($listbuild("Fin00132"))  ; Message
	set strStatus=1
 
	do Start^COMTable(lstHeader,$listbuild("Fin00125",pidDistribution))  ; Check List for Distribution Number %1.
	
	if pidDistribution'="" {
		if $data(^FINGLDistribution(YM,pidDistribution,1)) {
			set objDistribution=$get(^FINGLDistribution(YM,pidDistribution,1))
			if $$$FINGLDistributionSourceAccount(objDistribution)="" {
				do InsertLine(plngPage,pidDistribution,$listbuild("Fin00126"),1) set strStatus=0  ; Must Have a Source Account
				}
			else {
				if $$$FINGLDistributionDistributionDate(objDistribution)="" do InsertLine(plngPage,pidDistribution,$listbuild("Fin00130"),1) set strStatus=0  ; Must have a distribution date
				if +$$$FINGLDistributionAmount(objDistribution)=0 do InsertLine(plngPage,pidDistribution,$listbuild("Fin00129"),1) set strStatus=0  ; Must have an amount to distribute
				if ($$$FINGLDistributionPeriodStart(objDistribution)="")!(+$$$FINGLDistributionNumberofPeriods(objDistribution)<1) do InsertLine(plngPage,pidDistribution,$listbuild("Fin00128"),2) set strStatus=0  ; Must have an Accruing Period
				if $$GetNumberOfAccounts^FINGLDistributionAccount(pidDistribution)=0 do InsertLine(plngPage,pidDistribution,$listbuild("Fin00127"),3) set strStatus=0  ; Must have at least one Destination Account
				}
			}
		else {do InsertLine(plngPage,pidDistribution,$listbuild("Fin00133")) set strStatus=0}  ; Save required.
		}
	else {do InsertLine(plngPage,pidDistribution,$listbuild("Fin00133")) set strStatus=0}  ; Save required.
	
	if strStatus=1 {
		if '$$Editable^FINSYSReview("FINGLDistribution",$$$FINGLDistributionStatus(objDistribution)) {
			if $$$FINGLDistributionStatus(objDistribution)=$$$EnumFINSYSSTATUSPending {
				do InsertLine(plngPage,pidDistribution,$listbuild("Fin00375"))  ;Post pending.
			} else {
				do InsertLine(plngPage,pidDistribution,$listbuild("Fin00135",$$^WWWDATE($$$FINGLDistributionPosted(objDistribution))))  ; Posted on %1
			}
		}
		else {
			do InsertLine(plngPage,pidDistribution,$listbuild("Fin00134",$$FormatCurrency^COMTable($$$FINGLDistributionAmount(objDistribution)),$$^WWWDATE($$$FINGLDistributionDistributionDate(objDistribution)),$$$FINGLDistributionNumberofPeriods(objDistribution),$$GetNumberOfAccounts^FINGLDistributionAccount(pidDistribution)))  ; Ready to post %1 on %2, spread over %3 periods and %4 accounts.
			}
		}
	do Stop^COMTable()
	quit strStatus
 
InsertLine(plngCurrentPage,pidDistribution,plstMessage,plngPage="")
    ;-------------------------------------------------------------------------------
    ; Inserts a line into the check list.
    ;
    ;
    ; History:
    ; 14-Oct-2004		Paul K		Dont show link if don't need to change pages.
    ;-------------------------------------------------------------------------------
	do NewLine^COMTable()
	if (plngCurrentPage=plngPage)||(plngPage="") set pidDistribution=""
	do InsertCell^COMTable(plstMessage,"FINGLDistribution",pidDistribution,"","",plngPage)
	do EndLine^COMTable()			
	quit
 
DistributionForJournalLine(pidJournalLine)
	;----------------------------------------------------------------------------
	;
	; History
	; 04-Jul-2005	RobertW		SR12527: Fixed Status usage for ReturnError
	;  6-Dec-2004	JW			SR10541: Function changed.
	;  3-Dec-2004	JW			SR11066: Allow YBACK to work for grid use.
	; 20-Oct-2004	shobby		Put in a default value for the 'Status' field.  (SR10624)
	; 19-Jun-2003	shobby		Display an error in no journal line selected.
	; 
	; ---------------------------------------------------------------------------
	; 
	new idJournalLine,objJournalLine,idPeriodType,objJournal,objDistribution,idDistribution,objDistributionAccount
	;
	if $find(pidJournalLine,",")=0 {
		do ReturnError^COMUtils($lb("Fin00180"))		; Select a Journal Line before attempting distribution.
	}
	else {
		set idJournalLine=$translate(pidJournalLine,","," ")
		set objJournalLine=$get(^FINGLJournalLine(YM,$piece(pidJournalLine,",",1),$piece(pidJournalLine,",",2),1))
		set objJournal=$get(^FINGLJournal(YM,$piece(pidJournalLine,",",1),1))
		set idDistribution=$order(^FINGLDistributions(YM,1,idJournalLine,""))
		if idDistribution="" {
			set idDistribution=$$^WWWNEXT("FINGLDistribution")
			set idPeriodType=$$DefaultPeriod^FINGLPeriod()
			set objDistribution=""
			set $$$FINGLDistributionDescription(objDistribution)=$$$FINGLJournalLineReference(objJournalLine)
			set $$$FINGLDistributionSourceAccount(objDistribution)=$$$FINGLJournalLineAccount(objJournalLine)
			set $$$FINGLDistributionContraAccount(objDistribution)=$$GetAccrualAccount^FINGLDistribution()
			set $$$FINGLDistributionDistributionDate(objDistribution)=$$$FINGLJournalTransactionDate(objJournal)
			set $$$FINGLDistributionAmount(objDistribution)=$$$FINGLJournalLineCredit(objJournalLine)-$$$FINGLJournalLineDebit(objJournalLine)
			set $$$FINGLDistributionAccountSelection(objDistribution)=$$$EnumFINGLDISTRIBUTIONACCSELSourceAccount
			set $$$FINGLDistributionPeriodType(objDistribution)=idPeriodType
			set $$$FINGLDistributionPeriodStart(objDistribution)=$$CurrentPeriod^FINGLPeriod(idPeriodType)
			set $$$FINGLDistributionNumberofPeriods(objDistribution)=1
			set $$$FINGLDistributionCreatedDate(objDistribution)=$$$FINGLJournalCreatedDate(objJournal)
			set $$$FINGLDistributionCreatedBy(objDistribution)=$$$FINGLJournalCreatedBy(objJournal)
			set $$$FINGLDistributionJournalLine(objDistribution)=pidJournalLine
			set $$$FINGLDistributionStatus(objDistribution)=$$$EnumFINSYSSTATUSUnposted
			do Save^FINSYS("FINGLDistribution",idDistribution,objDistribution)
			set objDistributionAccount=""
			set $$$FINGLDistributionAccountWeighting(objDistributionAccount)=1
			do Save^FINSYS("FINGLDistributionAccount",idDistribution_","_$$$FINGLJournalLineAccount(objJournalLine),objDistributionAccount)
			}
		
		;do GoToForm^COMUtils("FINGLDistribution",idDistribution,,,"FINGLJournal") ;SR11066
		do GoToForm^COMGridEdit31G("FINGLDistribution",idDistribution) ;SR10541
	}
	quit
 
OnAfterDelete(pYKEY)
    ;-------------------------------------------------------------------------------
    ; Tidy up code after an Instance has been deleted.
    ; This shouldn't really be needed but the 'Delete Also SubForms' or 'Delete Also The Following SubForms' properties don't seem to work for this class. 
    ;
	; Notes: (Do not remove the following notes, used by 'Structure')
	; 		**Delete Check** FINGLDistributionAccount - Removed in OnAfterDelete.
	; 		**Delete Check** FINGLDistributionHistory - History only after posting.  Then can't delete anyway.
	; 		
    ; Returns:
    ;
    ; History:
    ; 23-Oct-2006	JW			SR15134: Look at kill status.
    ; 03-May-2004   shobby   	Replaced YKOMMA with ","
    ; 10-Mar-2004	shobby		Created
    ;-------------------------------------------------------------------------------
	new idxAccount,strStatus
	set strStatus = $$$OK
	
	if $get(pYKEY)'="" {
		set idxAccount=""
		for {
			set idxAccount=$order(^FINGLDistributionAccount(YM,pYKEY,idxAccount))
			quit:idxAccount=""
			set strStatus = $$$Kill("FINGLDistributionAccount",pYKEY_","_idxAccount)		// SR15134
			quit:$$$ISERR(strStatus)
		}
		if $$$ISERR(strStatus) {
			set Q = $$$QDontDelete		// SR15134
		}
	}
	
	quit $$$OK
 
SearchPeriods(pidPeriodType="")
    ;-------------------------------------------------------------------------------
    ; Use A custom Com View to search for periods instead of a Temp List
    ;
    ; History:
    ; 24-May-2005	Paul K		Created SR:12424
    ;-------------------------------------------------------------------------------
 
	if pidPeriodType'="" {
		do Initialise^COMViewCustom("FINGLPeriod")
		do AddFilter^COMViewCustom("D"_$$$FldFINGLPeriodPeriodType,"=",pidPeriodType)
		do Start^COMViewCustom("WWW2.YFINGLDistributionD12")
	} else {
		$$$AlertVB($$$Text("Fin00772"))  ;Please Select a period type first.
	}
	quit
 
GetAccrualAccount()
	new objAccrualAccount,idAccount
	
	set idAccount=""
	for {
		set idAccount=$order(^FINGLAccrualAccount(YM,idAccount))
		quit:idAccount=""
		set objAccrualAccount=$get(^FINGLAccrualAccount(YM,idAccount,1))
		quit:$$$FINGLAccrualAccountDefault1(objAccrualAccount)
		}
	
	quit idAccount
	
PopulateTransactions(pidDistribution)
	;-----------------------------------------------------------------------------
	;
	; History
	; 13-Jul-2006	JW		SR14836: Index variable. Use it.
	; 17-Oct-2005		SteveS/PO		SR12357: Default Period Start field to first open period.
	; 11-Oct-2005		Steve S			SR12357: Show start date
	; 15-Jul-2005		shobby			SR12754:Replaced LANGUAGE global (not always reliable)
	; 27-Apr-2004		shobby			Populate 'Period Start' dropdown when new record.
	; 08-Jul-2003		shobby			Corrected kill ^FINSYSSTempList (TR005566)
	; 
	;-----------------------------------------------------------------------------
	new idPeriodType,objDistribution,idSourceAccount,dteTransdate,idTran,idTranLine,objTranLine,objSYSList
	new strStatusMessage,idPeriod,idxPeriodType
	new objPeriod,dteStartDate
	kill ^FINSYSTempList(YM,YUSER)			;(TR005566)
 
	if (pidDistribution'="")&&(pidDistribution'="+") {
		if $data(^FINGLDistribution(YM,pidDistribution,1)) {
			set objDistribution=$get(^FINGLDistribution(YM,pidDistribution,1))
			set idSourceAccount=$$$FINGLDistributionSourceAccount(objDistribution)
			
			if idSourceAccount'="" {
				set dteTransdate=""
				for {
					set dteTransdate=$order(^FINGLTranLines(YM,1,idSourceAccount,dteTransdate))
					quit:dteTransdate=""
					set idTran=$order(^FINGLTranLines(YM,1,idSourceAccount,dteTransdate,""))
					set idTranLine=$order(^FINGLTranLines(YM,1,idSourceAccount,dteTransdate,idTran,""))
					set objTranLine=$get(^FINGLTranLine(YM,idTran,idTranLine,1))
					set objSYSList=""
					set $$$FINSYSTempListField1(objSYSList)=$$^WWWDATE($$$FINGLTranLineTransactionDate(objTranLine))
					set $$$FINSYSTempListField2(objSYSList)=$$FormatCurrency^COMTable($$$FINGLTranLineDebit(objTranLine)-$$$FINGLTranLineCredit(objTranLine))
					set $$$FINSYSTempListField3(objSYSList)=$$$FINGLTranLineReference(objTranLine)
					do Save^FINSYS("FINSYSTempList",YUSER_",FINGLDistributionD3,"_idTran_"-"_idTranLine,objSYSList,1)
					}
				}
			set idPeriodType=$$$FINGLDistributionPeriodType(objDistribution)
		}
	} else {
		set idPeriodType=$get(VORG(1))
	}
	if $get(idPeriodType)'="" {
		set dteStartDate=""
		kill ^CacheTempFirstPeriod(YUSER)
		set idxPeriodType = $$$Index(idPeriodType)	//SR14836
		for {
			set dteStartDate=$order(^FINGLPeriods(YM,3,idxPeriodType,dteStartDate))	//SR14836
			quit:dteStartDate=""
			set idPeriod=$order(^FINGLPeriods(YM,3,idxPeriodType,dteStartDate,""))	//SR14836
			set objPeriod=$get(^FINGLPeriod(YM,idPeriod,1))
			
			if ('$data(^CacheTempFirstPeriod(YUSER)))&&($$$FINGLPeriodOpentoPosting(objPeriod)) {
				set ^CacheTempFirstPeriod(YUSER)=idPeriod
			}
			
			set strStatusMessage=$$$Text($listbuild("Fin00114",$get(^WWW100(0,"JA/NEIN",SPRACHE,$select($$$FINGLPeriodOpentoPosting(objPeriod):1,1:0),1))))  ; Period Open?  %1
			set objSYSList=""
			
			set $$$FINSYSTempListField1(objSYSList)=$$$FINGLPeriodYear1(objPeriod)
			set $$$FINSYSTempListField2(objSYSList)=$$$FINGLPeriodNumber(objPeriod)
			set $$$FINSYSTempListField3(objSYSList)=$$$StrFINGLPeriodStartDate_": "_$$^WWWDATE($$$FINGLPeriodStartDate(objPeriod)) ;SR12357
			set $$$FINSYSTempListField4(objSYSList)=strStatusMessage
			
			do Save^FINSYS("FINSYSTempList",YUSER_",FINGLDistributionD12,"_idPeriod,objSYSList,1)
		}
	}
	
	quit
 
GenerateAccount(pidDistribution)
	;-----------------------------------------------------------------------------
	;
	; History
	; 31-Oct-2005	PO			SR12776: Only allow transactions accounts for manual account selection.
	; 28-Jun-2003	shobby		Same with Weighting Profile (TR005093)
	; 28-Jun-2003	shobby		Same with Expense Group (TR005092)
	; 28-Jun-2003	shobby		Replace value of weighting account which button clears (TR005091)
	;-----------------------------------------------------------------------------
	;
	new objDistribution,strKEYKEY,idWeightingAccount,idDestinationAccount,WeightingAccUsage,DestinationAccUsage,strStatus
	
	set strStatus = $$$OK
	
	if pidDistribution'="" {
		if $data(^FINGLDistribution(YM,pidDistribution,1)) {
			set objDistribution=$get(^FINGLDistribution(YM,pidDistribution,1))
			if $$$FINGLDistributionAccountSelection(objDistribution)=$$$EnumFINGLDISTRIBUTIONACCSELSourceAccount {
				do AddSourceAccount^FINGLDistributionAccount(pidDistribution)
			}
			elseif $$$FINGLDistributionAccountSelection(objDistribution)=$$$EnumFINGLDISTRIBUTIONACCSELManualAccountSelection {
				set idWeightingAccount = $$$FINGLDistributionWeightingAccount(objDistribution)
				set idDestinationAccount = $$$FINGLDistributionDestinationAccount(objDistribution)
				if (idWeightingAccount'="")&&(idDestinationAccount'="") {
					set WeightingAccUsage = $$$FINGLAccountAccountUsage($get(^FINGLAccount(YM,idWeightingAccount,1)))
					set DestinationAccUsage = $$$FINGLAccountAccountUsage($get(^FINGLAccount(YM,idDestinationAccount,1)))
					if (WeightingAccUsage=$$$EnumFINGLACCOUNTUSAGETransaction) && (DestinationAccUsage=$$$EnumFINGLACCOUNTUSAGETransaction) {
						set strKEYKEY=$$$FINGLDistributionWeightingAccount(objDistribution)
						do AddManualAccount^FINGLDistributionAccount(pidDistribution)
						set %("%KEY","YKEY")=strKEYKEY
					}
				}
				if '$data(strKEYKEY) set strStatus = $listbuild("Fin00927")  ;Both the Destination and Weighting Accounts must be transaction accounts.
			}
			elseif $$$FINGLDistributionAccountSelection(objDistribution)=$$$EnumFINGLDISTRIBUTIONACCSELAccountExpenseGroup {
				set strKEYKEY=$$$FINGLDistributionExpenseGroup(objDistribution)
				do AddExpenseAccount^FINGLDistributionAccount(pidDistribution)
				set %("%KEY","YKEY")=strKEYKEY
			}
			elseif $$$FINGLDistributionAccountSelection(objDistribution)=$$$EnumFINGLDISTRIBUTIONACCSELProfileAccount {
				set strKEYKEY=$$$FINGLDistributionWeightingProfile(objDistribution)
				do AddProfileAccount^FINGLDistributionAccount(pidDistribution)	
				set %("%KEY","YKEY")=strKEYKEY
			}
		}	
	}
	if $$$ISOK(strStatus) {
		do ^WWWFORM
	} else {
		do ReturnError^COMUtils(strStatus)
	}
	quit
 
GetTransactionDetails(pidDistribution)
	new strTransaction,objDistribution,idTran,idTranLine,objTranLine
	
	set strTransaction=""
	if pidDistribution'="" {
		set objDistribution=$get(^FINGLDistribution(YM,pidDistribution,1))
		if $$$FINGLDistributionTransactionId(objDistribution) {
			set idTran=$piece($$$FINGLDistributionTransactionId(objDistribution),"-",1)
			set idTranLine=$piece($$$FINGLDistributionTransactionId(objDistribution),"-",2)
			set objTranLine=$get(^FINGLTranLine(YM,idTran,idTranLine,1))
			set strTransaction=$$$StrFINGLTranLineReference_" - "_$$$FINGLTranLineReference(objTranLine)
			}
		}
	quit strTransaction
 
OnBeforeSave(pidDistribution,pYFELD)
    ;-------------------------------------------------------------------------------
	; 28-Oct-2009	GRF		-: Missing parentheses around IF clause
    ;-------------------------------------------------------------------------------
	new idTran,idTranLine,objTranLine,objDistribution
	new strStatus,fltPayment
 
	set strStatus=$$$GRIDSave(pidDistribution)
	
	;if (strStatus=$$$OK) && pidDistribution'="" {     28-Oct-2009
	if (strStatus=$$$OK) && (pidDistribution'="") {
		if $data(^FINGLDistribution(YM,pidDistribution,1)) {
			set objDistribution=$get(^FINGLDistribution(YM,pidDistribution,1))
			if $$$FINGLDistributionTransactionId(objDistribution)'=$$$FINGLDistributionTransactionId(pYFELD) {
				set idTran=$piece($$$FINGLDistributionTransactionId(pYFELD),"-",1)
				set idTranLine=$piece($$$FINGLDistributionTransactionId(pYFELD),"-",2)
				set objTranLine=""
				if idTran'="" if idTranLine'="" if $data(^FINGLTranLine(YM,idTran,idTranLine,1)) set objTranLine=$get(^FINGLTranLine(YM,idTran,idTranLine,1))
				set $$$FINGLDistributionDistributionDate(pYFELD)=$$$FINGLTranLineTransactionDate(objTranLine)
				set $$$FINGLDistributionAmount(pYFELD)=$$$FINGLTranLineDebit(objTranLine)-$$$FINGLTranLineCredit(objTranLine)
			}
			if $$$FINGLDistributionAccountSelection(pYFELD)=$$$EnumFINGLDISTRIBUTIONACCSELSourceAccount {
				kill ^FINGLDistributionAccount(YM,pidDistribution)
				do AddSourceAccount^FINGLDistributionAccount(pidDistribution,pYFELD)
			}
		}
	}
	
OnBeforeButtonLine(pidDistrubution)
    ;-------------------------------------------------------------------------------
    ; Called from header of distribution to set as readonly, and to set field
    ; properties.
    ;
    ; History:
    ; 06-Oct-2004		Paul K			Created
    ;-------------------------------------------------------------------------------
    new strStatus,objDistribution
    
    set strStatus=1
    
    if (pidDistrubution'="")&&(pidDistrubution'="+") {
	    do FieldSet(pidDistrubution)
		set objDistribution=$get(^FINGLDistribution(YM,pidDistrubution,1))
		set strStatus=$$Editable^FINSYSReview("FINGLDistribution",$$$FINGLDistributionStatus(objDistribution))
    }
   
    if strStatus'=1 {
    	set $$$WWW120AuthorizationToModifyData(YVOR) = $$$EnumReadOnly
	}
	quit strStatus 
 
FieldSet(pidDistrubution)
	
	new objDistribution,lngField,objFormField,intFieldType
	
	set objDistribution=""
	if pidDistrubution'="" if $data(^FINGLDistribution(YM,pidDistrubution,1)) set objDistribution=$get(^FINGLDistribution(YM,pidDistrubution,1))
 
	set lngField=""
 
	for {
		set lngField=$order(^WWW122(0,"FINGLDistribution",lngField))
		quit:'lngField
		set objFormField=$get(^WWW122(0,"FINGLDistribution",lngField,1))
		
		set intFieldType=15								; hide field by default
		if lngField=3 {if $$$FINGLDistributionSourceAccount(objDistribution)'="" set intFieldType=""}  ;transaction
		elseif lngField=4 {if $$$FINGLDistributionSourceAccount(objDistribution)'="" set intFieldType=""}  ;accrue date
		elseif lngField=5 {if $$$FINGLDistributionSourceAccount(objDistribution)'="" set intFieldType=""}	 ;amount
		elseif lngField=7 {set intFieldType=2}  ;account sel. (radio button)
		elseif lngField=8 {if $$$FINGLDistributionAccountSelection(objDistribution)=$$$EnumFINGLDISTRIBUTIONACCSELManualAccountSelection set intFieldType=""}
		elseif lngField=9 {if $$$FINGLDistributionAccountSelection(objDistribution)=$$$EnumFINGLDISTRIBUTIONACCSELAccountExpenseGroup set intFieldType=""}
		elseif lngField=10 {if $$$FINGLDistributionAccountSelection(objDistribution)=$$$EnumFINGLDISTRIBUTIONACCSELProfileAccount set intFieldType=""}
		elseif lngField=14 {if $$$FINGLDistributionAccountSelection(objDistribution)=$$$EnumFINGLDISTRIBUTIONACCSELProfileAccount set intFieldType=""}
		elseif lngField=15 {if $$$FINGLDistributionAccountSelection(objDistribution)=$$$EnumFINGLDISTRIBUTIONACCSELProfileAccount set intFieldType=""}
		elseif lngField=16 {if $$$FINGLDistributionAccountSelection(objDistribution)=$$$EnumFINGLDISTRIBUTIONACCSELManualAccountSelection set intFieldType=""}
		elseif lngField=22 {set intFieldType=15}  ;journal line - always hidden
		else {set intFieldType=""}
				
		set $piece(objFormField,Y,2)=intFieldType
		set ^WWW122(0,"FINGLDistribution",lngField,1)=objFormField
	}
 
	quit
 
GetDistributionForJournalLine(pidJournalLine)
	new idDistribution
	set idDistribution=""
	if pidJournalLine'="" set idDistribution=$order(^FINGLDistribution(YM,1,pidJournalLine,""))
	quit idDistribution
 
GetDefaultSourceAccount()
	new objJournalLine
	set objJournalLine=""
	if $piece(YBACK,",",$length(YBACK,",")-1)="FINGLJournalLine" {
		if $get(%KEY("YKEY"))'="" set objJournalLine=$get(^FINGLJournalLine(YM,$piece(%KEY("YKEY"),",",1),$piece(%KEY("YKEY"),",",2),1))
		}
	quit $$$FINGLJournalLineAccount(objJournalLine)
 
GetDefaultDistributionDate()
	new objJournal
	set objJournal=""
	if $piece(YBACK,",",$length(YBACK,",")-1)="FINGLJournalLine" {
		if $get(%KEY("YKEY"))'="" set objJournal=$get(^FINGLJournalLine(YM,$piece(%KEY("YKEY"),",",1),$piece(%KEY("YKEY"),",",2),1))
	}
	quit $$$FINGLJournalTransactionDate(objJournal)
 
GetDefaultAmount()
	new objJournalLine
	set objJournalLine=""
	if $piece(YBACK,",",$length(YBACK,",")-1)="FINGLJournalLine" {
		if $get(%KEY("YKEY"))'="" set objJournalLine=$get(^FINGLJournalLine(YM,$piece(%KEY("YKEY"),",",1),$piece(%KEY("YKEY"),",",2),1))
		}
	quit $$$FINGLJournalLineDebit(objJournalLine)-$$$FINGLJournalLineCredit(objJournalLine)
 
GetDefaultJournalLine()
	new idJournalLine
	set idJournalLine=""
	if $piece(YBACK,",",$length(YBACK,",")-1)="FINGLJournalLine" {
		set idJournalLine=$get(%KEY("YKEY"))
		}
	quit idJournalLine
 
ShowAccruals(pidDistribution)
	;-------------------------------------------------------------------------------
	; 26-May-2005	JW		Put check back in, as created undefined error
	; 13-May-2004	GRF		Clarify If Test
	;-------------------------------------------------------------------------------
	new curAmount,curTotal,idPeriod,idPeriodType,lngNumPeriods,lngPeriodLoop
	new lngRoundingPeriods,lstHeader,objDistribution,objPeriod,objPeriodType
	
	set lstHeader=""
	set lstHeader=lstHeader_$lb($listbuild("Fin00123"))  ; Accrual Number
	set lstHeader=lstHeader_$lb($listbuild("Fin00115"))  ; Accured Date
	set lstHeader=lstHeader_$lb($listbuild("Fin00116"))  ; Accrued Amount
	
	if $$Start^COMTable(lstHeader,$listbuild("Fin00117",pidDistribution),1) {  ; Accruals for Distribution %1
		if pidDistribution'="" {
			if $data(^FINGLDistribution(YM,pidDistribution,1)) {
				set objDistribution=$get(^FINGLDistribution(YM,pidDistribution,1))
				set curTotal=$$$FINGLDistributionAmount(objDistribution)
				set lngNumPeriods=$$$FINGLDistributionNumberofPeriods(objDistribution)
				set idPeriod=$$$FINGLDistributionPeriodStart(objDistribution)
				set idPeriodType=$$$FINGLDistributionPeriodType(objDistribution)
				;if $$$Always {
				if idPeriodType'="" {
					set objPeriodType=$get(^FINGLPeriodType(YM,idPeriodType,1))
					set lngRoundingPeriods=lngNumPeriods
					for lngPeriodLoop=1:1:lngNumPeriods {
						quit:idPeriod=""
						
						set objPeriod=$get(^FINGLPeriod(YM,idPeriod,1))
						set curAmount=$$Round^COMUtils(curTotal/lngRoundingPeriods)
						set curTotal=curTotal-curAmount
						set lngRoundingPeriods=lngRoundingPeriods-1
						do NewLine^COMTable()
						
						do InsertCell^COMTable(lngPeriodLoop,"FINGLDistribution",pidDistribution,curAmount,"",3)
						do InsertCellDate^COMTable($$$FINGLPeriodStartDate(objPeriod),"FINGLDistribution",pidDistribution,curAmount,3)
						do InsertCurrencyCell^COMTable(curAmount,1,"FINGLDistribution",pidDistribution,curAmount,3)
						do EndLine^COMTable()
						
						set idPeriod=$$GetNextPeriod^FINGLPeriod(idPeriodType,idPeriod)
						if idPeriod="" do ReturnError^COMUtils($listbuild("Fin00118",$$$FINGLPeriodTypeDescription(objPeriodType)))  ; Unable to continue, ran out of periods for period type %1.
						quit:idPeriod=""
					}
				}
			}
		}
		do Stop^COMTable()
	}
	quit
	
OnAfterDataFields(pidDistribution,plngPage)
	;-----------------------------------------------------------------------------
	;
	; History
	; 
	; 24-Nov-2004	PO		SR11004 Use edit grid for Accruals
	;-----------------------------------------------------------------------------
	;
	do ShowCheckList(pidDistribution,plngPage)
	if plngPage=1 {
		do ShowHistory(pidDistribution)
	} elseif plngPage=2 {
		do ShowAccruals(pidDistribution)
	} elseif plngPage=3 { ;SR11004
		;do ShowAccounts^FINGLDistributionAccount(pidDistribution,"")
		do LoadDistributionAccountGrid(pidDistribution)
	} elseif plngPage=5 {
		do AfterDataField^COMSchedule(1,"FINGLDistribution","PostDistributions^FINGLDistribution()")
	}
	quit
 
 
LoadDistributionAccountGrid(pYKEY)
    ;-------------------------------------------------------------------------------
    ; Method Usage
    ;
    ; Returns:
    ;
    ; History:
	; 10-Apr-2010	GRF		SR17177: arrGrid rather than objGrid
	; 05-Dec-2008	GRF		Clarify Enabled test
    ; 10-Dec-2004	shobby	Removed null YKEY test (SR11175)
    ; ??-Dec-2004	??????	Created
    ;-------------------------------------------------------------------------------
	new YFORM,YKEY,YAUSWAHL,YFELD
	
	set YFORM = "FINGLDistributionAccount"
	set YKEY  = $get(pYKEY)
	set YFELD = ""
 
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)    = $$$YES
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL) = 300
	set $$$COMGridEditParameterGridName(YAUSWAHL)      = YFORM
	set $$$COMGridEditParameterEnabled(YAUSWAHL)       = ($$$WWW120AuthorizationToModifyData(YVOR)'=$$$EnumReadOnly)
	set $$$COMGridEditParameterCallBack(YAUSWAHL)      = "1,CallBack^FINGLDistributionAccount(YKEY,.arrGrid)"
	set $$$COMGridEditParameterContainer(YAUSWAHL)     = "FINGLDistribution"
	do ^COMGridEdit31
	quit
 
ShowHistory(pidDistribution)
	new lstHeader,objDistribution,curTotal,lngNumPeriods,idPeriod,objPeriodType
	new idTran,idAccuredAccount,objTran,idTranLine,objTranLine
 
	set lstHeader=""
	set lstHeader=lstHeader_$lb($$$StrFINGLTranNumber)
	set lstHeader=lstHeader_$lb($$$StrFINGLTranTransactionDate)
	set lstHeader=lstHeader_$lb($$$StrFINGLTranPostedDate)
	set lstHeader=lstHeader_$lb($listbuild("Fin00116"))  ; Accrued Amount
	set lstHeader=lstHeader_$lb($$$StrFINGLTranLineReference)
 
 
	if pidDistribution'="" {
		if $data(^FINGLDistribution(YM,pidDistribution,1)) {
			set objDistribution=$get(^FINGLDistribution(YM,pidDistribution,1))
			if $$$FINGLDistributionPosted(objDistribution)'="" {
				do Start^COMTable(lstHeader,$listbuild("Fin00119",pidDistribution))  ; Transaction History for Distribution %1.
				set idTran=""
				
				set idAccuredAccount=$$$FINGLDistributionContraAccount(objDistribution)
				for {
					set idTran=$order(^FINGLDistributionHistory(YM,pidDistribution,idTran))
					quit:idTran=""
					set objTran=$get(^FINGLTran(YM,idTran,1))
					set idTranLine=""
					for {
						set idTranLine=$order(^FINGLTranLine(YM,idTran,idTranLine))
						quit:idTran=""
						set objTranLine=$get(^FINGLTranLine(YM,idTran,idTranLine,1))
						quit:$$$FINGLTranLineAccount(objTranLine)=idAccuredAccount
						}
					do NewLine^COMTable()
					do InsertCell^COMTable(idTran,"FINGLTran",idTran)
					do InsertCellDate^COMTable($$$FINGLTranTransactionDate(objTran),"FINGLTran",idTran)
					do InsertCellDate^COMTable($$$FINGLTranPostedDate(objTran),"FINGLTran",idTran)
					do InsertCurrencyCell^COMTable($$$FINGLTranLineDebit(objTranLine)-$$$FINGLTranLineCredit(objTranLine),0,"FINGLTran",idTran)
					do InsertCell^COMTable($$$FINGLTranLineReference(objTranLine),"FINGLTran",idTran)
					do EndLine^COMTable()			
					}
				do Stop^COMTable()
				}
			}
		}
 
	quit
 
PostDistributions()
	quit $$PostDistributions^FINGLDistributionPost()
 
Post(pidDistribution,plngTransactions)
	quit $$Post^FINGLDistributionPost(pidDistribution,plngTransactions)
 
FindTransaction(pidDistribution,pdteTransDate,pEnumTransType)  ;look for an accrued transaction that matches this date
	quit $$FindTransaction^FINGLDistributionPost(pidDistribution,pdteTransDate,pEnumTransType)
 
PostAccrued(pidDistribution,pdteTransDate,plngTransactions)
	quit $$PostAccrued^FINGLDistributionPost(pidDistribution,pdteTransDate,plngTransactions)
 
GetRoundedTotal(pidDistribution)
	quit $$GetRoundedTotal^FINGLDistributionPost(pidDistribution) 
 
PostReverse(pidDistribution,plngTransactions)
	quit $$PostReverse^FINGLDistributionPost(pidDistribution,plngTransactions)
 
SetPostedFlag(pidDistribution)
	do SetPostedFlag^FINGLDistributionPost(pidDistribution)
 	quit
 
UnPost(pidDistribution)
	do UnPost^FINGLDistributionPost(pidDistribution)
	quit
 
Postable(pidDistribution)
	quit $$Postable^FINGLDistributionPost(pidDistribution)
]]></Routine>
</Export>