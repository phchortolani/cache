<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INMOIssueTable" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INMOIssueTable
	
#include COMSYS
#include INConst
#include %occInclude
 
ShowItems(pidEvent,pidParameters)
	;-------------------------------------------------------------------------------
	;			
	; Called By :
	;		
	; Inputs : 
	;
	; Params:
	;
	; Returns:
	;
	; History: 
	; 01-Dec-2009	GRF		SR17007: separate tags for multi-lock operations
	; 07-Jul-2009			SR16573: Created
	; -------------------------------------------------------------------------------
	new idIssue,idIssueLine,idKey,lstColTypes,lstHeaders,objItem,objItemPolicy,objLocn
	new strFunction,strGridLineYFORM,strIssue,strIssueLine,strStatus
	
	kill ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle")
	
	set strGridLineYFORM = $$$DYNTABLEGridLineFocusGrid(pidParameters)
	set idKey       = $$ReferenceKey^COMGridEdit31Interface(strGridLineYFORM,$$$DYNTABLEGridLineFocusRow(pidParameters))
	set idIssue     = $$$KEY1(idKey)
	set idIssueLine = $$$KEY2(idKey)
	
	if '$$IsEditable^INIssue(idIssue) quit                       ; *** EARLY EXIT ***
	
	;set strStatus   = $$GetLock^WWWMultiLock("INMOIssue",strGridLineYFORM,idIssue_$$$COMMA_idIssueLine,$$$NO)  ; SR17007
	set strStatus    = $$GetLock^WWWMultiLock("INMOIssue",strGridLineYFORM,idIssue_$$$COMMA_idIssueLine)
	; FIXME : strStatus is not checked <GRF>
	
 	set strIssue	 = $$$GRIDYFELDContainer
 	set strIssueLine = $$$GRIDGetYFELD(idIssueLine)
	
	; Load Lookup objects
	;set objIssueLine = ##class(alISS.dUIssueLine).%OpenId("0||"_idIssue_"||"_idIssueLine,0)
	set idLocn	= $$$INIssueFromLocn(strIssue)
	set objLocn = ##class(alLOC.dLocation).%OpenId(idLocn)
	set objItem = ##class(alINV.dItem).%OpenId($$$INIssueLineItem(strIssueLine),0)
	
	if objItem'=$$$NULLOREF {    ; SR16262 
		set objItemPolicy = objItem.ItemPolicy
		set strFunction = "FillLine"
			set strStatus = $$BuildDynTableHeader(objItemPolicy,.lstHeaders,.lstColTypes,idLocn)
			
			do BuildDynTableRows(objItem.%Id(),objLocn.Code,$$$INIssueLineFromStorage(strIssueLine))
			; setup JS Callback
			if $$$ISERR(strStatus) {
				write "function "_strFunction_"() {"
				write "alert('"_$$$JSText($$$Text(strStatus))_"');"
				write "}"
			} else {
				write "function "_strFunction_"() {"
				write "CallBack(""SelectBundle^INMOIssueTable"", getRowNum(getFocusField()), this.DiscData[0]);"
				write "}"
			}
		do DrawTable^WWW120DynTable(lstHeaders,"dStockBundle",lstColTypes,pidParameters,strFunction,pidEvent,"SelectBundle^INMOIssueTable")
	}
	quit $$$OK
	
	
BuildDynTableHeader(pobjItemPolicy,&plstHeaders,&plstColTypes,pidLoc)
	;-------------------------------------------------------------------------------
	; Setup Table Headers
	;         (1)               (2)                      (3)
	;     "Storage"     Attribute Headings       "Available Quantity"
	;                   (e.g. "Lot Number")       
	; 
	; History:
	;-------------------------------------------------------------------------------
	new idAttrKey,objAttr,strAttrName
	
	;---------------------------------------  1
	
	set plstHeaders  = $listbuild($$$Text("alISS0003"))     ; "Storage"
	set plstColTypes = $listbuild($listbuild("left","link"))
	
	;---------------------------------------  2
	
	do DynaHeadings^INBundleUtils(pobjItemPolicy,pidLoc,.plstHeaders,.plstColTypes)
	
	;---------------------------------------  3
		
	set plstHeaders  = plstHeaders_$listbuild($$$Text(32665))          ; "Available Quantity "
 	set plstColTypes = plstColTypes_$listbuild($listbuild("right","link"))
	quit $$$OK
	
	
BuildDynTableRows(pidItem,pidLocn,pidStorage)
	;-------------------------------------------------------------------------------
	; Build an array "^CacheTempDynamicTable" which contains the lines corresponding
	; to the headings in BuildDynTableHeader
	; 
	; Params:
	;
	; Returns:
	;
	; History:
	;-------------------------------------------------------------------------------
	new idAttrKey,idLine,idPolicyAttr,loopRS,objAttr,objBundleStock,objItem
	new objItemPolicy,objLocn,objPolicyAttr,objResultSet,strAttrValues
	
	set objItem = ##class(alINV.iUINV).GetItem(pidItem)
	set objLocn = ##class(alLOC.iULOC).GetLocation(pidLocn)
	
	if (objItem '= $$$NULLOREF) && (objLocn '= $$$NULLOREF) {
		kill ^CacheTempDynamicTable(YUCI,YUSER,"dBundleStock")
		set objItemPolicy = objItem.ItemPolicy
		
		set objResultSet = ##class(alDRP.iDRP).SourceStock(objItem,objLocn)   //SR15747
		for loopRS=1:1:objResultSet.Count() {
			set objBundleStock = objResultSet.GetAt(loopRS)
			
			set ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle",$increment(idLine),"data") = objBundleStock.%Id()
			
			set strAttrValues = objBundleStock.Storage.Code_Y
			
			set idAttrKey = ""
			for {
				set objAttr = objBundleStock.Bundle.Attributes.GetNext(.idAttrKey)
				quit:(idAttrKey  = "")
				
				set idPolicyAttr = objBundleStock.Bundle.ItemPolicy.Attributes.FindObjectId(objBundleStock.Bundle.ItemPolicy.%Id()_"||"_objAttr.AttributeName)
				set objPolicyAttr = $$$NULLOREF            ; SR16303
				set:(idPolicyAttr '= "") objPolicyAttr = objBundleStock.Bundle.ItemPolicy.Attributes.GetAt(idPolicyAttr)
				continue:(objAttr.AttributeName="ReceiptNo")
				
				if ((objPolicyAttr '= $$$NULLOREF)) && (objPolicyAttr.Attribute.DataType = "%Date") {
					set strAttrValues = strAttrValues_$$^WWWDATE(objAttr.AttributeValue)_Y
				} else {
					set strAttrValues = strAttrValues_objAttr.AttributeValue_Y
				}
			}
			
			;-------------------------------  3
			
			set strAttrValues = strAttrValues_objBundleStock.QtyOnHand
			set ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle",idLine) = strAttrValues
		}
	}
	quit $$$OK
	
	
SelectBundle(pidRow,pidKey)
	;---------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 09-Nov-2010	PPP		SR17600: New variables and set values for both
	;---------------------------------------------------------------------------
	new objBundleStock,sc,strIssue,strIssueLine,YFORM
	new IssuedFrom,IssueTo
	
	set strIssue     = $$$GRIDYFELDContainer
	set strIssueLine = $$GetYFELDEX^COMGridEdit31Interface("INMOIssueLine",$$$GRIDYKEYContainer_","_pidRow)
	set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(pidKey,0,.sc)
	
	//SR17600
	; Explicitly set the stored variables (IssuedFrom,IssueTo) from the INIssue Form, 
	; this is a HyperEvent call and it isn't set ; DisplayData+60^COMGridEdit31F1 error
	; property for INLP relation
	set IssuedFrom 	= $$$INIssueFromLocn(strIssue) 
	set IssueTo 	= $$$INIssueToLocn(strIssue) 
	; WARNING : "IssuedFrom" & "IssueTo" are required for relationship check
	;           for D4 & D3 respectively of Class INMOIssueLine on form INMOIssueLine
	;           ReferenceKey^COMGridEdit31Interface in SetRecord^COMGridEdit31S1
	
	do:$$$ISOK(sc) SetRecord^COMGridEdit31S1("INMOIssueLine",pidRow,$$$FldINIssueLineFromStorage_$$$COMMA_objBundleStock.Storage.Code)
	do:$$$ISOK(sc) SetRecord^COMGridEdit31S1("INMOIssueLine",pidRow,$$$FldINIssueLineBundle_$$$COMMA_objBundleStock.Bundle.%Id(),$$$FldINIssueLineQtyIssued)
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
		do:$$$ISOK(sc) UpdateManualField^COMGridEdit31Interface(pidRow,9,objBundleStock.QtyOnHand)
	}
	
	//HEVA-1073
	if (+$$$WWWClientParamCoreChangesHEVA($get(^WWWClientParam(YM,YM,1)))) {
		do:$$$ISOK(sc) SetRecord^COMGridEdit31S1("INMOIssueLine",pidRow,$$$FldINIssueLineFREE1_$$$COMMA_objBundleStock.QtyOnHand)
	}
		
	quit
	
]]></Routine>
</Export>