<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINSYSCodeCompare" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINSYSCodeCompare
 
 
CompareAll(pstrNameSpace1="DEVELOPMENT",pstrNameSpace2="BUILD",pstrPrefix="FIN",pstrType="rMAC",plstExclude="")
    ;-------------------------------------------------------------------------------
    ; Compares all routine files between two namespaces.
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Apr-2004	shobby		Pass in a list of exclusions.
    ; 05-Apr-2004	shobby		Optionally look in INT files.
    ; 01-Apr-2004	shobby		Check for REP as well.
    ; 01-Apr-2004   Shobby   	Created
    ;-------------------------------------------------------------------------------
	;
	new idx,intErrorCounter,lstExclude,i,strPrefix
	
	for i=1:1:20 write !
	set idx=pstrPrefix
	set lstExclude=plstExclude
	;set lstExclude=",INDCMAUFLoad,INDCMAUFSave,INDCMURL,INAUFEDIT,FINAPDCM"
	set intErrorCounter=0
	for {
		quit:intErrorCounter>20
		xecute "set idx=$order(^"_pstrType_"("""_idx_"""))"
		quit:idx=""
		set strPrefix=$extract(idx,1,$length(pstrPrefix))
		quit:(strPrefix'=pstrPrefix)
		if lstExclude'[idx {
			set intErrorCounter=intErrorCounter+$$Compare(idx,pstrNameSpace1,pstrNameSpace2,pstrType)
		}
	}
	quit
 
 
Compare(pstrRoutine="",pstrNameSpace1="DEVELOPMENT",pstrNameSpace2="BUILD",pstrType="rMAC")
    ;-------------------------------------------------------------------------------
    ; Compares the named routine between two namespaces.
    ;
    ; Returns:
    ;
    ; History:
    ; 05-Apr-2004	shobby		Optionally look in INT files.
    ; 01-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
 
	new idx,intCounter,strStatus,intErrorCounter,strNameSpace
	
	kill ^CacheTemp($Job)
	set intErrorCounter=0
	
	set strNameSpace=$znspace
	do $zutil(5,pstrNameSpace1)
	set idx=""
	set intCounter=0
	for {
		xecute "set idx=$order(^"_pstrType_"(pstrRoutine,0,idx))"
		quit:idx=""
		set intCounter=$i(intCounter)
		xecute "set ^CacheTemp($job,intCounter,pstrNameSpace1)=$get(^"_pstrType_"(pstrRoutine,0,idx))"
	}
	
	do $zutil(5,pstrNameSpace2)
	set idx=""
	set intCounter=0
	for {
		xecute "set idx=$order(^"_pstrType_"(pstrRoutine,0,idx))"
		quit:idx=""
		set intCounter=$i(intCounter)
		xecute "set ^CacheTemp($job,intCounter,pstrNameSpace2)=$get(^"_pstrType_"(pstrRoutine,0,idx))"
	}
	
	set idx=""
	for {
		quit:intErrorCounter>20
		set idx=$order(^CacheTemp($job,idx))
		quit:idx=""
		if $get(^CacheTemp($job,idx,pstrNameSpace1))'=$get(^CacheTemp($job,idx,pstrNameSpace2)) {
			write !,pstrNameSpace1_"("_pstrRoutine_","_idx_")",$get(^CacheTemp($job,idx,pstrNameSpace1))
			write !,pstrNameSpace2_"("_pstrRoutine_","_idx_")",$get(^CacheTemp($job,idx,pstrNameSpace2))
			set intErrorCounter=intErrorCounter+1
		}
	}
	do $zutil(5,strNameSpace)
	quit intErrorCounter
 
 
FindUnusedMethods(pstrPrefix="FIN")
    ;-------------------------------------------------------------------------------
    ; Finds methods that don't appear to be called from anywhere.
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idx
	
	set idx=pstrPrefix
	kill ^CacheTemp($Job,"UnusedMethods")
	for {
		set idx=$order(^rMAC(idx))
		quit:idx=""
		quit:$extract(idx,1,$length(pstrPrefix))'=pstrPrefix
		do FindUnusedMethodsInClass(idx)
	}
	do CalledFromForm()
    do CalledFromButton()
	do CalledFromProperty()
	do RemovePass()
	write !,!
	quit $$Suspects()_" Methods to investigate."
 
 
RemovePass()
    ;-------------------------------------------------------------------------------
    ; Removes lines that are referenced
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	
	new idxClass,idxMethod
	
	set idxClass=""
	for {
		set idxClass=$order(^CacheTemp($job,"UnusedMethods",idxClass))
		quit:idxClass=""
		set idxMethod=""
		for {
			set idxMethod=$order(^CacheTemp($job,"UnusedMethods",idxClass,idxMethod))
			quit:idxMethod=""
			if $get(^CacheTemp($job,"UnusedMethods",idxClass,idxMethod))'="" {
				kill ^CacheTemp($job,"UnusedMethods",idxClass,idxMethod)
			}
		}	
	}
	quit
 
 
FindUnusedMethodsInClass(pstrClass)
    ;-------------------------------------------------------------------------------
    ; Finds unused methods in a particular class
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
    ;
    new intLine,strLine,strFirstChar,intLastLine,strMethod
    
    if $get(Y)="" d ^WWWVAR // TODO: MUST NOT be here, if for dev purposes put in DEV code
    set intLastLine=$order(^rMAC(pstrClass,0,"LANG"),-1)
    for intLine=1:1:intLastLine {
    	set strLine=$get(^rMAC(pstrClass,0,intLine))
    	do FindReference(pstrClass,strLine)
    	if $length(strLine)>0 {
	    	set strFirstChar=$extract(strLine,1,1)
    		if (strFirstChar'="")&&(strFirstChar'=$char(9)) {
	    		if strFirstChar'="#" {
		    		if $piece(strLine," ",1)'=pstrClass {
			    		if strFirstChar'=$char(8) {
				    		if strFirstChar'=$char(32) {
					    		set strMethod=$piece(strLine," ",1)
					    		set strMethod=$piece(strLine,"(",1)
					    		if $extract(strMethod,1,1)'="$" {
					    			write !,"   "_strMethod_"^"_pstrClass
					    			if $get(^CacheTemp($job,"UnusedMethods",pstrClass,strMethod))="" {
						    			set ^CacheTemp($job,"UnusedMethods",pstrClass,strMethod)=""
					    			}
					    		}
				    		}
			    		}
		    		}
	    		}
    		}
    	}
    }
	quit
 
 
Suspects()
    ;-------------------------------------------------------------------------------
    ; The number of methods that may not be called.
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new intCount,idxClass,idxMethod
	set idxClass=""
	set intCount=0
	for {
		set idxClass=$order(^CacheTemp($job,"UnusedMethods",idxClass))
		quit:idxClass=""
		set idxMethod=""
		for {
			set idxMethod=$order(^CacheTemp($job,"UnusedMethods",idxClass,idxMethod))
			quit:idxMethod=""
			set intCount=intCount+1
		}
	}
	quit intCount
 
 
CalledFromForm()
    ;-------------------------------------------------------------------------------
    ; Find methods that are called from forms
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idx,objWWW120,lstFields,i
	
	set idx=""
	set lstFields="14,15,16,17,18,59,86,87,89,93,126"
	for {
		set idx=$order(^WWW120(0,idx))
		quit:idx=""
		set objWWW120=$get(^WWW120(0,idx,1))
		if objWWW120'="" {
			for i=1:1:$length(lstFields,",") {
				do FindReference("",$piece(objWWW120,Y,$piece(lstFields,",",i)))
			}
		}
	}
	quit
 
 
CalledFromProperty()
    ;-------------------------------------------------------------------------------
    ; Find methods that are called from properties on forms.
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idx,objWWW122,lstFields,i,idxNumber
	
	set idx=""
	set lstFields="15"
	for {
		set idx=$order(^WWW122(0,idx))
		quit:idx=""
		set idxNumber=""
		for {
			set idxNumber=$order(^WWW122(0,idx,idxNumber))
			quit:idxNumber=""
			set objWWW122=$get(^WWW122(0,idx,idxNumber,1))
			if objWWW122'="" {
				for i=1:1:$length(lstFields,",") {
					do FindReference("",$piece(objWWW122,Y,$piece(lstFields,",",i)))
				}
			}
		}
	}
	quit
 
 
CalledFromButton()
    ;-------------------------------------------------------------------------------
    ; Find methods that are called from buttons on forms
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idx,objWWW124,lstFields,i,idxLanguage,idxNumber
	
	set idx=""
	set lstFields="6,62"
	for {
		set idx=$order(^WWW124(0,idx))
		quit:idx=""
		set idxLanguage=""
		for {
			set idxLanguage=$order(^WWW124(0,idx,idxLanguage))
			quit:idxLanguage=""
			set idxNumber=""
			for {
				set idxNumber=$order(^WWW124(0,idx,idxLanguage,idxNumber))
				quit:idxNumber=""
				set objWWW124=$get(^WWW124(0,idx,idxLanguage,idxNumber,1))
				if objWWW124'="" {
					for i=1:1:$length(lstFields,",") {
						do FindReference("",$piece(objWWW124,Y,$piece(lstFields,",",i)))
					}
				}
			}
		}
			
	}
	quit
 
 
FindReference(pstrClass,pstrLine)
	new i,strPiece
	
	for i=1:1:$piece(pstrLine,"$$$") {
		set strPiece=$piece(pstrLine,"$$$",i)
		if strPiece'="" {
			do FindReferenceEx(pstrClass,strPiece)
		}
	}
	quit
 
 
FindReferenceEx(pstrClass,pstrLine)
    ;-------------------------------------------------------------------------------
    ; Finds a call to a method in the current line
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
    ;
    new strMethod,strClass
    
    ;break:$find(pstrLine,"GetBatchBlock")
    if $find(pstrLine,"^")'=0 {
	    set strClass=$piece(pstrLine,"^",2)
	    set strClass=$piece(strClass,"(",1)
	    set strClass=$piece(strClass," ",1)
	    set strMethod=$piece(pstrLine,"^",1)		    
	    if $find(strMethod,"$$")>0 {
		    set strMethod=$piece(strMethod,"$$",2)
	    }
	    if $find(strMethod," ")>0 {
		    set strMethod=$piece(strMethod," ",2)
	    }
	    if strClass="" set strClass=pstrClass
	    if strMethod'="" {
		    if strClass'="" {
				set ^CacheTemp($job,"UnusedMethods",strClass,strMethod)=strClass
		    } elseif pstrClass'="" {
				set ^CacheTemp($job,"UnusedMethods",strClass,strMethod)=pstrClass
		    }
	    }
    } elseif $find(pstrLine,"$ztrap") {
    	set strMethod=$piece(pstrLine,"$ztrap=""",2)
    	set strMethod=$piece(strMethod,"""",1)
    	if strMethod'="" {
			if pstrClass'="" {
				set ^CacheTemp($job,"UnusedMethods",pstrClass,strMethod)=pstrClass				
    		}
    	}
    } elseif $find(pstrLine,"do ") {
    	set strMethod=$piece(pstrLine,"do ",2)
    	set strMethod=$piece(strMethod,"(",1)
    	if strMethod'="" {
			if pstrClass'="" {
				set ^CacheTemp($job,"UnusedMethods",pstrClass,strMethod)=pstrClass				
    		}
    	}
    } elseif $find(pstrLine,"d ") {
    	set strMethod=$piece(pstrLine,"d ",2)
    	set strMethod=$piece(strMethod,"(",1)
    	if strMethod'="" {
			if pstrClass'="" {
				set ^CacheTemp($job,"UnusedMethods",pstrClass,strMethod)=pstrClass				
    		}
    	}
    } elseif $find(pstrLine,"$$") {
    	set strMethod=$piece(pstrLine,"$$",2)
    	set strMethod=$piece(strMethod,"(",1)
    	if strMethod'="" {
    		if $extract(strMethod,1,1)'="$" {
    			if pstrClass'="" {
					set ^CacheTemp($job,"UnusedMethods",pstrClass,strMethod)=pstrClass				
    			}
    		}
    	}
    }
	quit
]]></Routine>
</Export>