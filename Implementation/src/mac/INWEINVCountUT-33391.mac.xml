<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INWEINVCountUT" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INWEINVCountUT
 
#include COMSYS
#include INConst
 
	; Unit tests for INWEINVCount
 
    ; ________________________________________________________________________________________	
	; Unit testing 
	; _____________________________________________________________
 
 
#define assertEquals(%x,%y,%e)  if (%x '= %y)  write !,%e   write " - Error "
#define assertNEquals(%x,%y,%e) if (%x = %y)  write !,%e  write " - Error "
 
decode(s) 
	new m
	set m = $$DecodeError^COMUtils(s)
	
	if (m '= "") {
		quit m
	} else {
		quit s
	}
 
assertOK(e,x,m="")
	if $$$ISOK(x) {
		quit $$$OK
	} else {
		write !, e  
		write " Error : "_m
		quit $$$NO
	}
 
assertNOK(e,x,m="")
	if $$$ISOK(x) {
		write !, e  
		write " Error : "_m
		quit $$$NO
	}
	quit $$$YES
 
  
WriteAllCounts(pidStocktake,pidLine) 
	;-------------------------------------------------------------------------------
	; Method Usage
	;
	; Writes all counts for a line, used for testing purposes.
	; 
	; Params:
	; 	pidStocktake, stocktake id
	; 	pidLine, line id
	;		
	; Returns: nothing
	;
	; History:
	; 05-Nov-2007	PJones,  BR014730, created
	;-------------------------------------------------------------------------------
 
	new idCount
	w !, "["_pidLine_","
	w $$$INWEINVActualQuantity($$getStocktakeLine^INStocktaking(pidStocktake,pidLine))
	w "//"
	w $$$INWEINVTargetQuantity($$getStocktakeLine^INStocktaking(pidStocktake,pidLine))
	w "] :: "
	$$$Order4(^INWEINVCount,YM,pidStocktake,pidLine,idCount)
		w "("_idCount_","_$$GetCount^INWEINVCount(pidStocktake,pidLine,idCount)_"),"
	$$$End
	quit
 
CreateTestStocktake(pidStocktake) 
	; example data used by unit tests
	new strKeys
	set strKeys = pidStocktake
	do KILL^COMUtils("INWEINVP",strKeys)
 
	do KillChildren^COMUtils("INWEINV",strKeys)
	do KILL^COMUtils("INWEINV",strKeys)
	
	new objStocktake
	set objStocktake = ""
	set objStocktake = $$SetUnstartedObj^INWEINVPStatus(objStocktake)
	set $$$INWEINVPRemark(objStocktake) = "unitTest"_pidStocktake
	do SaveStocktake^INStocktaking(pidStocktake, objStocktake)
	
	quit objStocktake
 
 
CreateTestLines(pidStocktake)
	; example data used by unit tests
	new objLine, idLine, i
	for i = 1:1:10 {
		set objLine = ""
		set $$$INWEINVTargetQuantity(objLine) = 6 * i
		set $$$INWEINVSupplier(objLine) = "ACME"
		do SaveLine^INStocktaking(pidStocktake,i,objLine)	}
	quit
		
 
FillTestCountData(pidStocktake,pidCount)
	;-------------------------------------------------------------------------------
	; Method Usage
	;
	; Fills pidCount with test data if it exists
	; 
	; Params:
	; 	pidStocktake, stocktake id
	; 	pidCount, a count id
	;		
	; Returns: nothing
	;
	; History:
	; 05-Nov-2007	PJones,  BR014730, created
	;-------------------------------------------------------------------------------
 
	new idLine, objCount 
	
	$$$Order3(^INWEINV,YM,pidStocktake,idLine)
		if $$Exists^INWEINVCount(pidStocktake,idLine,pidCount) {
			set objCount = $$GetCount^INWEINVCount(pidStocktake,idLine,pidCount)
			set $$$INWEINVCountQuantity(objCount) = $random(100)
			do Save^INWEINVCount(pidStocktake,idLine,pidCount,objCount)
		}
	$$$End
	quit
	
dummy(a)
	w !,"This is a dummy routine to test varAlternatives"
	w !,"Arg : "_a
	q "dummy"
	
unitTests()
	;-------------------------------------------------------------------------------
	; Automated unit tests for the functions in this routine
	; do unitTests^INWEINVCount() 
	; should confirm that they're all behaving correctly
	; 
	; Params:
	;		
	; Returns: nothing
	;
	; History:
	; 05-Nov-2007	PJones,  BR014730, created
	;-------------------------------------------------------------------------------
	new objINWEINV, objINWEINVCount, objINWEINV2, objINWEINVCount2, sId, lId, cId, t
	new objStocktake, objCount, objCount2, objLine
	new strKeys
	 
	kill ^zzPhil("INWEINVCount")
	
	w !, "Unit Testing INWEINVCount basic routines"
	set sId = "60068"
	set lId = 3
	set objINWEINV = $get(^INWEINV(YM,sId,lId,1))
	
	set t = $h
	set objINWEINVCount = $$Create^INWEINVCount(45.5,t)
	
	set objINWEINV = $$CopyObjLineFromObjCount^INWEINVCount(objINWEINV, objINWEINVCount) 
	
	if ($$$INWEINVActualQuantity(objINWEINV) '= 45.5) {
		write !,"Error 1 : CopyObjLineFromObjCount"
	}
	
	if ($$$INWEINVCountTimestamp(objINWEINV) '= t) {
		write !,"Error 2 : CopyObjLineFromObjCount"
	}	
 
	set objINWEINV =$get(^INWEINV(YM,sId,lId,1))
	
	set objINWEINVCount = $$CopyObjCountFromObjLine^INWEINVCount(objINWEINVCount, objINWEINV)
 
	if ($$$INWEINVCountQuantity(objINWEINVCount) '= $$$INWEINVActualQuantity(objINWEINV)) {
		write !,"Error 3 : CopyObjCountFromObjLine"
	}
	
	if ($$$INWEINVCountTimestamp1(objINWEINVCount) '= $$$INWEINVCountTimestamp(objINWEINV)) {
		write !,"Error 4 : CopyObjCountFromObjLine"
	}	
	
	set objINWEINV = $get(^INWEINV(YM,sId,lId,1))
	set objINWEINVCount = $$Create^INWEINVCount(45.5,t)
 
	set objINWEINV2 = objINWEINV
	set objINWEINVCount2 = objINWEINVCount
	
	set sId = "60068999"
	set lId = 1
	
	set ^INWEINV(YM,sId,lId,1) = objINWEINV
	set ^INWEINVCount(YM,sId,lId,1,1) = objINWEINVCount
	
	if ($$$INWEINVItemNumber($get(^INWEINV(YM,sId,lId,1))) '= $$$INWEINVItemNumber(objINWEINV2)) {
		write !,"Error 5"
	}
	
	if ($$$INWEINVCountQuantity($get(^INWEINVCount(YM,sId,lId,1,1))) '= $$$INWEINVCountQuantity(objINWEINVCount2)) {
		write !,"Error 6"
	}
  
	do CopyCountFromLine^INWEINVCount(sId, lId, 1)
	
	if ( $$$INWEINVCountQuantity($get(^INWEINVCount(YM,sId,lId,1,1))) '= $$$INWEINVActualQuantity($get(^INWEINV(YM,sId,lId,1))) ) {
		write !,"Error 7 : CopyCountFromLine"
	}	
 
	if ( $$$INWEINVCountTimestamp1($get(^INWEINVCount(YM,sId,lId,1,1))) '= $$$INWEINVCountTimestamp($get(^INWEINV(YM,sId,lId,1))) ) {
		write !,"Error 8 : CopyCountFromLine"
	}	
 
	set ^INWEINV(YM,sId,lId,1) = objINWEINV
	set ^INWEINVCount(YM,sId,lId,1,1) = objINWEINVCount
 
	do CopyLineFromCount^INWEINVCount(sId, lId, 1)
	
	if ( $$$INWEINVActualQuantity($get(^INWEINV(YM,sId,lId,1))) '= $$$INWEINVCountQuantity($get(^INWEINVCount(YM,sId,lId,1,1))) ) {
		write !,"Error 9 : CopyLineFromCount"
	}	
 
	if ( $$$INWEINVCountTimestamp($get(^INWEINV(YM,sId,lId,1))) '= $$$INWEINVCountTimestamp1($get(^INWEINVCount(YM,sId,lId,1,1))) ) {
		write !,"Error 10 : CopyLineFromCount"
	}	
 
	set sId = "100068"
	do CopySnapshotIntoCounts^INWEINVCount(sId,4)
 
	set sId = "60068999"
	set lId = 1
	set t = $h
	set objINWEINVCount = $$CreateAndStore^INWEINVCount(38.2, t, sId, lId, 2)
	
	if ($$$INWEINVCountTimestamp1(objINWEINVCount) '= t) {
		write !, "Error 11 : CreateAndStore, create"
	}
	
	if ($$$INWEINVCountQuantity($get(^INWEINVCount(YM,sId,lId,2,1))) '= 38.2) {
		write !, "Error 12 : CreateAndStore, storage"
	}
	
	if ($$GetQty^INWEINVCount(sId,lId,2) '= 38.2) {
		write !, "Error 12a : GetQty"
	}
 
 	$$$assertEquals($$GetHighestCount^INWEINVCount(sId,lId),2,100)
 	
	set objINWEINV2 = $$GetINWEINVwithLatestCount^INWEINVCount(sId,lId) 
	
	if ($$$INWEINVActualQuantity(objINWEINV2) '= 38.2) {
		write !, "Error 13 : GetINWEINVwithLatestCount"
	}
 
	if ($$$INWEINVCountTimestamp(objINWEINV2) '= t) {
		write !, "Error 14 : GetINWEINVwithLatestCount"
	}
 
	if ($$$INWEINVLastCount(objINWEINV2) '= 2) {
		write !, "Error 15 : GetINWEINVwithLatestCount"
	}
 
	set objINWEINV2 = $$CopyObjLineFromCount^INWEINVCount(sId, lId,2) 
	
	if ($$$INWEINVActualQuantity(objINWEINV2) '= 38.2) {
		write !, "Error 16 : CopyObjLineFromCount"
	}
 
	if ($$$INWEINVCountTimestamp(objINWEINV2) '= t) {
		write !, "Error 17 : CopyObjLineFromCount"
	}
 
	if ($$$INWEINVLastCount(objINWEINV2) '= 2) {
		write !, "Error 18 : CopyObjLineFromCount"
	}
	
	set objStocktake = ""
	set $$$INWEINVPNumberofCounts(objStocktake) = 0
 
	set ^INWEINVCount(YM,767676,1,1,1) = "a~b"
	$$$assertEquals($$Exists^INWEINVCount(767676,1,1),$$$YES,24)
	$$$assertEquals($$Exists^INWEINVCount(767676,1111,1),$$$NO,25)
	
 
	set objLine = ""
	set $$$INWEINVTargetQuantity(objLine) = 444
	set $$$INWEINVSupplier(objLine) = "ACME"
	do SaveLine^INStocktaking(sId,15,objLine)
	
	$$$assertEquals($$GetTarget^INWEINVCount(sId,15),444,26)
	
	set strKeys = sId_","_15
	do KillChildren^COMUtils("INWEINVCount",strKeys)
	
	set objCount = $$CreateAndStore^INWEINVCount(442, $h, sId, 15, 1)
	do assertNOK(27,$$LastEqualsTarget^INWEINVCount(sId,15))
	
	
	set objCount = $$CreateAndStore^INWEINVCount(443, $h, sId, 15, 2)
	do assertNOK(28,$$LastEqualsTarget^INWEINVCount(sId,15))
 
 
	set objCount = $$CreateAndStore^INWEINVCount(444, $h, sId, 15, 2)
	do assertOK(29,$$LastEqualsTarget^INWEINVCount(sId,15))
 
	$$$assertEquals($$GetHighestCount^INWEINVCount(sId,15),2,30)
 
	do utCreateCount()
	do utCreateCountRule2AtStart()
 
 	write !,"Unit tests for INWEINVCount finished"
	w !,"+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
	write !,!
 
	quit
 
	
utCreateCount()
	;-------------------------------------------------------------------------------
	; Automated Unit test for testing the create new count functions
	; 
	; It creates fake INWEINV data
	; calls the routinea to create counts based on it 
	; checks that it only creates new counts when appropriate
	;
	; Both Rule 1 and Rule 2 are tested in the same 
	; 
	; 
	; Params:
	;		
	; Returns: nothing
	;
	; History:
	; 05-Nov-2007	PJones,  BR014730, created
	;-------------------------------------------------------------------------------
	new objINWEINV, objINWEINVCount, strStatus
	new objStocktake, objCount, objCount2, objLine
 	new strKeys
	new sId, lId, cId, i, x, y, z
	
	w !,"Unit Test create new count functions"
 
	set sId = 898989
	
	do KillChildren^COMUtils("INWEINV",sId)
	do KILL^COMUtils("INWEINVP",sId)
	do KillChildren^COMUtils("INWEINVCount",sId)
	
	set objStocktake = $$CreateTestStocktake(sId)
	do CreateTestLines(sId)
	
	do CreateFirstCount^INWEINVCount(sId)
	
	set objCount = $$GetCount^INWEINVCount(sId,1,1)
	$$$assertNEquals($data(^INWEINVCount(YM,sId,1)),0,1)
	$$$assertEquals($$GetHighestCount^INWEINVCount(sId,1),1,110)
	$$$assertNEquals($data(^INWEINVCount(YM,sId,4)),0,112)
	
	$$$assertEquals($$GetMostRecentCountObj^INWEINVCount(sId,1),objCount,200)
	
	; Most of the first count are 0, but line 2 were going to set to the same 
	; as the stock on hand (TargetQuantity)
	; when we do "createNewCount" we *don't* expect line 2 to be copied to it
	; 
	set ^INWEINVCount(YM,sId,2,1,1) = $$$INWEINVTargetQuantity($get(^INWEINV(YM,sId,2,1)))
	
	set objStocktake = $$GetStocktake^INStocktaking(sId)
	$$$assertEquals($$$INWEINVPNumberofCounts(objStocktake),1,102)
	
	do CreateRuleOneCount^INWEINVCount(sId)
	
	set objStocktake = $$GetStocktake^INStocktaking(sId)
	
	$$$assertEquals($$$INWEINVPNumberofCounts(objStocktake),2,104)
	
	if '$data(^INWEINVCount(YM,sId,1,2,1)) {
		w !,"Error 2"
	}
		
	if $$$INWEINVCountQuantity($$GetCount^INWEINVCount(sId,1,2)) '= "" {
		set objCount2 = $$GetCount^INWEINVCount(sId,1,2)
		w !,"Error 3 : " _ objCount2
	}
	
	; Let's test that the OK *wasn't* copied
	if $data(^INWEINVCount(YM,sId,2,2,1)) {
		w !,"Error 4"
	}
	
	; check the get GetCountObjNearestTo(pidStocktake,pidLine,pidCount) 
	$$$assertEquals($$GetCountNearestTo^INWEINVCount(sId,1,2),2,"getCountNearestTo 1")
	$$$assertEquals($$GetCountNearestTo^INWEINVCount(sId,2,2),1,"getCountNearestTo 2")
	
	$$$assertEquals($$GetCountObjNearestTo^INWEINVCount(sId,1,2),$$GetCount^INWEINVCount(sId,1,2),"getCountObjectNearestTo 1")
	$$$assertEquals($$GetCountObjNearestTo^INWEINVCount(sId,2,2),$$GetCount^INWEINVCount(sId,2,1),"getCountObjectNearestTo 2")
	
	do CreateAndStore^INWEINVCount(48,"",sId,8,2)
	
	do CreateRuleOneCount^INWEINVCount(sId)
	
	if $data(^INWEINVCount(YM,sId,8,3,1)) {
		w !,"Error 4a"
	}
	
	do FillTestCountData(sId,3)
	
	set objCount2 = $get(^INWEINVCount(YM,sId,1,3,1))
	
	if objCount2 = "" {
		w !,"Error 5"
	}
 
	set x = $$$INWEINVCountQuantity(objCount2)
	set objINWEINV = $$GetINWEINVwithLatestCount^INWEINVCount(sId,1)
	
	if $$$INWEINVActualQuantity(objINWEINV) '= x {
		w !, "Error 6"
	}
	
	$$$assertEquals($$GetMostRecentCountQty^INWEINVCount(sId,1),x,"MRC1")
 
	
	set strKeys = sId_","_2_","_3
	do KILL^COMUtils("INWEINVCount",strKeys)
	set strKeys = sId_","_2_","_2
	do KILL^COMUtils("INWEINVCount",strKeys)
	set strKeys = sId_","_3_","_3
	do KILL^COMUtils("INWEINVCount",strKeys)
 
	if (' $$Exists^INWEINVCount(sId,1,3)) {
		w !, "Error 7"
	}
	
	if ($$Exists^INWEINVCount(sId,2,2)) {
		w !, "Error 8"
	}
	if ($$Exists^INWEINVCount(sId,2,3)) {
		w !, "Error 9"
	}
	if ($$Exists^INWEINVCount(sId,3,3)) {
		w !, "Error 10"
	}
	
	do CopyCountsToINWEINV^INWEINVCount(sId)
 
	set objINWEINV = $get(^INWEINV(YM,sId,1,1))
	
	if ($$$INWEINVActualQuantity(objINWEINV) '= 
			$$$INWEINVCountQuantity($get(^INWEINVCount(YM,sId,1,3,1))) ) {
		w !, "Error 11"
	}
	
 	set objINWEINV = $get(^INWEINV(YM,sId,2,1))
 
	if ($$$INWEINVActualQuantity(objINWEINV) '= 
			$$$INWEINVCountQuantity($get(^INWEINVCount(YM,sId,2,1,1))) ) {
		w !, "Error 12"
	}
 
	set objINWEINV = $get(^INWEINV(YM,sId,3,1))
 
	if ($$$INWEINVActualQuantity(objINWEINV) '= 
			$$$INWEINVCountQuantity($get(^INWEINVCount(YM,sId,3,2,1))) ) {
		w !, "Error 13"
	}
 
 	if $$CopyCountsToINWEINV^INWEINVCount(123,"dummy^INWEINVCountUT") '= "dummy" {
	 	w !, "Error 14"
 	}
 
	do SetQty^INWEINVCount(sId,6,3,36)
 	$$$assertEquals($$GetQty^INWEINVCount(sId,6,3),36,15)
 
 
 
  	do CreateRuleOneCount^INWEINVCount(sId)
 	set objStocktake = $$GetStocktake^INStocktaking(sId)
	$$$assertEquals($$$INWEINVPNumberofCounts(objStocktake),4,200)
	$$$assertEquals($$GetHighestCount^INWEINVCount(sId,4),4,201)
	$$$assertEquals($$GetHighestCount^INWEINVCount(sId,2),1,202)
	$$$assertEquals($$GetHighestCount^INWEINVCount(sId,3),2,203)
 
 
 	set x = $$GetQty^INWEINVCount(sId,4,3) ; previous count for line 4
 	do SetQty^INWEINVCount(sId,4,4,x)
 	$$$assertEquals($$GetQty^INWEINVCount(sId,4,4),x,16)
 	
 	do assertOK(17,$$LastMatchesPreceding^INWEINVCount(sId,4))
 	do assertNOK(18,$$LastMatchesPreceding^INWEINVCount(sId,5))
 	
	$$$assertEquals($$GetMostRecentCountObj^INWEINVCount(sId,3),$$GetCount^INWEINVCount(sId,3,2),300)
	$$$assertEquals($$GetMostRecentCountObj^INWEINVCount(sId,4),$$GetCount^INWEINVCount(sId,4,4),301)
 
 
 	do CreateRuleTwoCount^INWEINVCount(sId)
 	
	$$$assertEquals($$GetHighestCount^INWEINVCount(sId,4),4,204)
	$$$assertEquals($$GetHighestCount^INWEINVCount(sId,5),5,205)
	
 	set x = $$GetQty^INWEINVCount(sId,9,3) ; previous count for line 4
 	do SetQty^INWEINVCount(sId,9,5,x)
 	$$$assertEquals($$GetQty^INWEINVCount(sId,9,5),x,19)
	
	do CreateRuleTwoCount^INWEINVCount(sId)
	
	if ($data(^INWEINVCount(YM,sId,9,6))) {
		do assertNOK(20,1)
	}
 	
 	;do writeAllCounts(sId,1)
	;do writeAllCounts(sId,2)
	;do writeAllCounts(sId,3)
	;do writeAllCounts(sId,4)
	;do writeAllCounts(sId,5)
	;do writeAllCounts(sId,6)
	;do writeAllCounts(sId,7)
	;do writeAllCounts(sId,8)
	;do writeAllCounts(sId,9)
	;do writeAllCounts(sId,10)
 
	quit
 
 
utCreateCountRule2AtStart()
	;-------------------------------------------------------------------------------
	; Automated Unit test for testing the create new count functions
	; 
	; It creates fake INWEINV data
	; calls the routinea to create counts based on it 
	; checks that it only creates new counts when appropriate
	;
	; Both Rule 1 and Rule 2 are tested in the same 
	; 
	; 
	; Params:
	;		
	; Returns: nothing
	;
	; History:
	; 05-Nov-2007	PJones,  BR014730, created
	;-------------------------------------------------------------------------------
	new objINWEINV, objINWEINVCount, strStatus
	new objStocktake, objCount, objCount2, objLine
 	new strKeys
	new sId, lId, cId, i, x, y, z
	
	w !,"Unit Test create new count functions (part 2)"
 
	set sId = 898981
	
	do KillChildren^COMUtils("INWEINV",sId)
	do KILL^COMUtils("INWEINVP",sId)
	do KillChildren^COMUtils("INWEINVCount",sId)
	
	set objStocktake = $$CreateTestStocktake(sId)
	do CreateTestLines(sId)
			
	do CreateFirstCount^INWEINVCount(sId)
	
	set objCount = $$GetCount^INWEINVCount(sId,1,1)
	$$$assertNEquals($data(^INWEINVCount(YM,sId,1)),0,1)
	$$$assertEquals($$GetHighestCount^INWEINVCount(sId,1),1,110)
	$$$assertNEquals($data(^INWEINVCount(YM,sId,4)),0,112)
	
	$$$assertEquals($$GetMostRecentCountObj^INWEINVCount(sId,1),objCount,200)
	
	; Most of the first count are 0, but line 2 were going to set to the same 
	; as the stock on hand (TargetQuantity)
	; when we do "createNewCount" we *don't* expect line 2 to be copied to it
	; 
	set ^INWEINVCount(YM,sId,2,1,1) = $$$INWEINVTargetQuantity($get(^INWEINV(YM,sId,2,1)))
	
	set objStocktake = $$GetStocktake^INStocktaking(sId)
	$$$assertEquals($$$INWEINVPNumberofCounts(objStocktake),1,102)
 
	do CreateRuleTwoCount^INWEINVCount(sId)
	
	set objStocktake = $$GetStocktake^INStocktaking(sId)
	
	$$$assertEquals($$$INWEINVPNumberofCounts(objStocktake),2,104)
	
	if '$data(^INWEINVCount(YM,sId,1,2,1)) {
		w !,"Error 2"
	}
		
	if $$$INWEINVCountQuantity($$GetCount^INWEINVCount(sId,1,2)) '= "" {
		set objCount2 = $$GetCount^INWEINVCount(sId,1,2)
		w !,"Error 3 : " _ objCount2
	}
	
	; Let's test that the OK *wasn't* copied
	if $data(^INWEINVCount(YM,sId,2,2,1)) {
		w !,"Error 4"
	}
	
	; check the get GetCountObjNearestTo(pidStocktake,pidLine,pidCount) 
	$$$assertEquals($$GetCountNearestTo^INWEINVCount(sId,1,2),2,"getCountNearestTo 1")
	$$$assertEquals($$GetCountNearestTo^INWEINVCount(sId,2,2),1,"getCountNearestTo 2")
	
	$$$assertEquals($$GetCountObjNearestTo^INWEINVCount(sId,1,2),$$GetCount^INWEINVCount(sId,1,2),"getCountObjectNearestTo 1")
	$$$assertEquals($$GetCountObjNearestTo^INWEINVCount(sId,2,2),$$GetCount^INWEINVCount(sId,2,1),"getCountObjectNearestTo 2")
	
	do CreateAndStore^INWEINVCount(48,"",sId,8,2)
	
	do CreateRuleOneCount^INWEINVCount(sId)
	
	if $data(^INWEINVCount(YM,sId,8,3,1)) {
		w !,"Error 4a"
	}
	
	do FillTestCountData(sId,3)
	
	set objCount2 = $get(^INWEINVCount(YM,sId,1,3,1))
	
	if objCount2 = "" {
		w !,"Error 5"
	}
 
	set x = $$$INWEINVCountQuantity(objCount2)
	set objINWEINV = $$GetINWEINVwithLatestCount^INWEINVCount(sId,1)
	
	if $$$INWEINVActualQuantity(objINWEINV) '= x {
		w !, "Error 6"
	}
	
	$$$assertEquals($$GetMostRecentCountQty^INWEINVCount(sId,1),x,"MRC1")
 
	
	set strKeys = sId_","_2_","_3
	do KILL^COMUtils("INWEINVCount",strKeys)
	set strKeys = sId_","_2_","_2
	do KILL^COMUtils("INWEINVCount",strKeys)
	set strKeys = sId_","_3_","_3
	do KILL^COMUtils("INWEINVCount",strKeys)
 
	if (' $$Exists^INWEINVCount(sId,1,3)) {
		w !, "Error 7"
	}
	
	if ($$Exists^INWEINVCount(sId,2,2)) {
		w !, "Error 8"
	}
	if ($$Exists^INWEINVCount(sId,2,3)) {
		w !, "Error 9"
	}
	if ($$Exists^INWEINVCount(sId,3,3)) {
		w !, "Error 10"
	}
	
	do CopyCountsToINWEINV^INWEINVCount(sId)
 
	set objINWEINV = $get(^INWEINV(YM,sId,1,1))
	
	if ($$$INWEINVActualQuantity(objINWEINV) '= 
			$$$INWEINVCountQuantity($get(^INWEINVCount(YM,sId,1,3,1))) ) {
		w !, "Error 11"
	}
	
 	set objINWEINV = $get(^INWEINV(YM,sId,2,1))
 
	if ($$$INWEINVActualQuantity(objINWEINV) '= 
			$$$INWEINVCountQuantity($get(^INWEINVCount(YM,sId,2,1,1))) ) {
		w !, "Error 12"
	}
 
	set objINWEINV = $get(^INWEINV(YM,sId,3,1))
 
	if ($$$INWEINVActualQuantity(objINWEINV) '= 
			$$$INWEINVCountQuantity($get(^INWEINVCount(YM,sId,3,2,1))) ) {
		w !, "Error 13"
	}
 
 	if $$CopyCountsToINWEINV^INWEINVCount(123,"dummy^INWEINVCountUT") '= "dummy" {
	 	w !, "Error 14"
 	}
 
	do SetQty^INWEINVCount(sId,6,3,36)
 	$$$assertEquals($$GetQty^INWEINVCount(sId,6,3),36,15)
 
 
 
 
	w !,"Unit Test create new count functions (part 2)"
	w !,"+++++++++++++++++++++++++++++++++++++++++++++" 
	quit	
]]></Routine>
</Export>