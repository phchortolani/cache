<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INIssueRevTable" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INIssueRevTable
	
#include COMSYS
#include INConst
#include %occInclude
	
#define DELIM	$char(31)
	
ShowItems(pidEvent,pidParameters)
	;-------------------------------------------------------------------------------
	; Description :
	;			
	; Called By : OnBlur^INIssueRevLine
	;             Form : INIssueRevLineSearch dynamic table
	;		
	; Inputs : 
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 15-Sep-2013	SCR		CORE-93: Created
	;-------------------------------------------------------------------------------
	new idGrid,idItem,lstColTypes,lstHeaders,idKey,idLine,idRev
	new objItem,objItemPolicy,objLocn,objAdj,objAdjLine,strFunction,strStatus
	
	set strStatus = $$$OK
	set idGrid    = $$$DYNTABLEGridLineFocusGrid(pidParameters)
	
	kill ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle")
 
	set idKey  = $$ReferenceKey^COMGridEdit31Interface(idGrid,$$$DYNTABLEGridLineFocusRow(pidParameters))
	set idRev  = $$$KEY1(idKey)
	set idLine = $$$KEY2(idKey)
	
	quit:$$$NoKey(idRev)	
	if '$$Editable^INIssueRev(idRev) quit                       ; *** EARLY EXIT ***
	
	;---------------------------------------
	
	set objRev     = $$$GRIDYFELDContainer
	set objRevLine = $$$GRIDGetYFELD(idLine)
	;set strStatus  = $$GetLock^WWWMultiLock("INIssueRev",idGrid,idRev_$$$COMMA_idLine)
  
	//setup JS Callback
	set objLocn = ##class(alLOC.dLocation).%OpenId( $$$INIssueRevFromLocn(objRev))
	set idItem  = $$$INIssueRevLineItemNo(objRevLine)
	set objItem = ##class(alINV.dItem).%OpenId(idItem,0)
		
	if objItem '= $$$NULLOREF {
		set objItemPolicy = objItem.ItemPolicy
	
		if objItemPolicy = $$$NULLOREF {     
			set strStatus = $$$MakeStatus("alINV0100",idItem) ; "Can not access Item Policy for item : %1"
			do DrawTable^WWW120DynTable($listbuild($$$Text(strStatus)),"dStockBundle",$listbuild($listbuild("left","display")),
			                            pidParameters,"",pidEvent)
		}                                      
		
		; Build Table below Dispense To Patient (Issue) grid lines (allows selection)
		;-----------------------------------   e.g.
		;  Stock Bundle              Storage         Lot Number
		;  ABC00123||5||A||2||86     A               1234567
		
		if $$$ISOK(strStatus) {      
			set strFunction = "FillLine"
			set strStatus   = $$BuildDynTableHeader(objItemPolicy,.lstHeaders,.lstColTypes,objLocn.Code)
			do BuildDynTableRows(objItem.%Id(),objLocn.Code,objRev)
		
		; setup JS Callback
			if $$$ISERR(strStatus) {
				write "function "_strFunction_"() {"
				write "alert('"_$$$JSText($$$Text(strStatus))_"');"
				write "}"
			} else {
				write "function "_strFunction_"() {"
				write "CallBack(""SelectIssueLine^INIssueRevTable"", getRowNum(getFocusField()), this.DiscData[0], this.DiscData[1]);"
				write "}"
			}
 
			//SR16599
			//The last parameter (after pidEvent) needs to be set for the RowClick event, will be used by RowClick^WWW120DynTable
			//	e.g. "WarehouseLine^INReqTable"
			//	will be called with the following parameters
			//	1. Row ID
			//	2. Each entry in ^CacheTempDynamicTable(...,data) seperated by "~" will be a new parameter
			//			in this routines case : do WarehouseLine^INReqTable(pidRow,idLocn) will be executed on Row click
			do DrawTable^WWW120DynTable(lstHeaders,"dStockBundle",lstColTypes,pidParameters,strFunction,pidEvent,"SelectIssueLine^INIssueRevTable")
		}
	
	} else {         ; Clear table	; "No Item Selected"    SR17566
		do DrawTable^WWW120DynTable($listbuild($$$Text("IN01142")),
		                            "dStockBundle",
		                            $listbuild($listbuild("left","display")),
		                            pidParameters,
		                            "",
		                            pidEvent)
	}
	quit
	
	
SelectIssueLine(pidRow,pidIssue,pidIssueLine)
	;-------------------------------------------------------------------------------
	; Description : This routine is called OnClick/selection of the record
	;			
	; History:
	; 15-Sep-2013	SCR		CORE-93: Created
	;-------------------------------------------------------------------------------
	new objRev,objIssue,objIssueLine,sc,fltRet,idItem,idBundle,strBundleKey,objBundleStock,objBundle,strBundleValues
	set sc = $$$OK
	
	set objRev		= $$$GRIDYFELDContainer
	set objIssue	= $get(^INIssue(YM,pidIssue,1))
	set objIssueLine= $get(^INIssueLine(YM,pidIssue,pidIssueLine,1))
	set idItem		= $$$INIssueLineItem(objIssueLine)
	set fltRet		= $$GetQtyRetForIssue^INIssueRev(pidIssue,idItem,pidIssueLine)  ;SR16783
	set FROMLOCATION= $$$INIssueRevFromLocn(objRev)
	set TOLOCATION	= $$$INIssueToLocn(objIssue)
	set idBundle     = $$$INIssueLineBundle(objIssueLine)
	set strBundleKey = idItem_"||"_$$$INIssueRevFromLocn(objRev)_"||"_$$$INIssueLineFromStorage(objIssueLine)_"||"_idBundle
	set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(strBundleKey)
	set strBundleValues= ""
	if ($IsObject(objBundleStock)) {
		set objBundle = objBundleStock.Bundle
	} else {
		set objBundle = ##class(alSOH.dBundle).%OpenId(idBundle)
	}
	if ($IsObject(objBundle)){
		set strBundleValues = ##class(alSOH.iUSOH).RenderBundle(objBundle,SPRACHE)
	}

	;---------------------------------------
	; WARNING : "FROMLOCATION" & "TOLOCATION" is required for relationship check
	;           ReferenceKey^COMGridEdit31Interface in SetRecord^COMGridEdit31S1
	;---------------------------------------
	
	if $$$ISOK(sc) {
		do SetRecord^COMGridEdit31S1("INIssueRevLineSearch",pidRow, $$$FldINIssueRevLineStockUnit_		$$$COMMA_ $$$INIssueLineUnit(objIssueLine))
		do SetRecord^COMGridEdit31S1("INIssueRevLineSearch",pidRow, $$$FldINIssueRevLineQtyConsumed_	$$$COMMA_ $$$INIssueLineQtyIssued(objIssueLine))
		do SetRecord^COMGridEdit31S1("INIssueRevLineSearch",pidRow, $$$FldINIssueRevLineBundle_			$$$COMMA_ $$$INIssueLineBundle(objIssueLine))
		do SetRecord^COMGridEdit31S1("INIssueRevLineSearch",pidRow, $$$FldINIssueRevLineRefLine_		$$$COMMA_ pidIssueLine)
		do SetRecord^COMGridEdit31S1("INIssueRevLineSearch",pidRow, $$$FldINIssueRevLineFromStorage_	$$$COMMA_ $$$INIssueLineFromStorage(objIssueLine))
		do SetRecord^COMGridEdit31S1("INIssueRevLineSearch",pidRow, $$$FldINIssueRevLineToStorage	_	$$$COMMA_ $$$INIssueLineToStorage(objIssueLine))
		do SetRecord^COMGridEdit31S1("INIssueRevLineSearch",pidRow, $$$FldINIssueRevLineQtyAlreadyRetrn	_$$$COMMA_ fltRet)
		do SetRecord^COMGridEdit31S1("INIssueRevLineSearch",pidRow, $$$FldINIssueRevLineIssue_			$$$COMMA_ pidIssue)
		do SetRecord^COMGridEdit31S1("INIssueRevLineSearch",pidRow, $$$FldINIssueRevLineToLocation_		$$$COMMA_ $$$INIssueToLocn(objIssue))
		do SetRecord^COMGridEdit31S1("INIssueRevLineSearch",pidRow, $$$FldINIssueRevLineFREE01_			$$$COMMA_ strBundleValues)
		
	}
	quit
	
			
	
BuildDynTableHeader(pobjItemPolicy,&plstHeaders,&plstColTypes,pidLoc)
	;-------------------------------------------------------------------------------
	; Setup Table Headers
	; StockBundleId, BundleAttribute(s), QoH
	;     (1)    	(2)    		(3) 		(4)           (5)                  (6)			(7)
	;     "To Loc"	"Storage"  Issue		Line   Attribute Headings       "Qty Consumed" 	"Qty Already
	;                				   (e.g. "Lot Number")       				 Returned"
	; 
	; 
	; History:
	; 15-Sep-2013	SCR		CORE-93: Created
	;-------------------------------------------------------------------------------
	new arrAttrib,idAttrKey,sc,strAttrName
	
	//---------------------------------------  1 
	set plstHeaders  = $listbuild($$$Text("IN01433"))				;To Location
	set plstColTypes = $listbuild($listbuild("left","link"))
	//---------------------------------------  2 
	set plstHeaders  = plstHeaders_$listbuild($$$Text( "IN01447"))  ;To Storage
	set plstColTypes = plstColTypes_$listbuild($listbuild("left","link"))
	//---------------------------------------  3
	set plstHeaders  = plstHeaders_$listbuild($$$Text("IN01429"))				;Issue
	set plstColTypes = plstColTypes_$listbuild($listbuild("left","link"))
	//---------------------------------------  4 
	set plstHeaders  = plstHeaders_$listbuild($$$Text("IN01430"))				;Line
	set plstColTypes = plstColTypes_$listbuild($listbuild("left","link"))
	//---------------------------------------  5
	set plstHeaders  = plstHeaders_$listbuild($$$Text("IN01434"))				;Issue Date
	set plstColTypes = plstColTypes_$listbuild($listbuild("left","link"))
	
	//---------------------------------------  6
	do DynaHeadings^INBundleUtils(pobjItemPolicy,pidLoc,.plstHeaders,.plstColTypes)
	
	//---------------------------------------  7 
	set plstHeaders  = plstHeaders_$listbuild($$$Text("IN01431"))	;Quantity Consumed
 	set plstColTypes = plstColTypes_$listbuild($listbuild("right","link"))
 	
	//---------------------------------------  8 
	set plstHeaders  = plstHeaders_$listbuild($$$Text("IN01432"))  ;Qty Already Returned
 	set plstColTypes = plstColTypes_$listbuild($listbuild("right","link"))
 	
	quit $$$OK
	
	
BuildDynTableRows(pidItem,pidLocn,pobjRev)
	;-------------------------------------------------------------------------------
	; Build an array "^CacheTempDynamicTable" which contains the lines corresponding
	; to the headings in BuildDynTableHeader
	;
	; 
	; Params:
	;
	; Returns:
	;
	; History:
	; 14-Sep-2013	SCR		CORE-93: Created
	;-------------------------------------------------------------------------------
	; FIXME: Validation of result table against headers
	;-------------------------------------------------------------------------------
	new arrAttrib,arrBundleStock,dteVal,fltQtyAvailable
	new idBundleStock,idLine,idKey,idPolicyAttr,intCol
	new objAttr,objBundleStock,objINIssueLine,objItem,objLocn,objItemPolicy
	new objPolicyAttr,objResultSet,objStore,sc,strAttrValues
	new intExpiredCol
	new arrSearch,intLineCnt,strRec
	
	set objItem  = ##class(alINV.iUINV).GetItem(pidItem)
	set objLocn  = ##class(alLOC.iULOC).GetLocation(pidLocn)
	
	do Search^INIssueRevLineScan(pobjRev,pidItem,"",,,,,,,$$$YES,.arrSearch)
	set intLineCnt	= ""
	merge ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle")=arrSearch
	quit
	
]]></Routine>
</Export>