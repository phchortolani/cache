<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMDesignDoc" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMDesignDoc
	;-------------------------------------------------------------------------------
	; This routine handles the design documentation production
	;-------------------------------------------------------------------------------
	#include WWWConst
 
GenerateDesignDoc(PrefixList,ShowStandard)
    ;-------------------------------------------------------------------------------
    ; Not sure what this does...
    ;
    ; History:
    ; 05-May-2005	Paul K		Normalised Directory.
    ;-------------------------------------------------------------------------------
 
	new status,ERDFile,UniqueRef
	
	; Generate the ERD diagram
	set PrefixList=$ZCONVERT($get(PrefixList),"U")
	set ShowStandard=+$get(ShowStandard)
	set UniqueRef=$job_(($zhorolog*1000)\1)
	set ERDFile=##Class(%File).NormalizeDirectory($$$WWW012PhysicalWWWDirectory($get(^WWW012(0,YM,1))))_"COMDesignDoc"_UniqueRef_".jpg"
	set status=$$GenerateERD(PrefixList,ERDFile,ShowStandard)
	if ($piece(status,Y,1)'=1) {
		do ^WWWINFO("Error Generating ERD: "_$piece(status,Y,2))
		quit
	}
	
	; Now present results
	write !,"<H1>System Structure Documentation</H1>"
	write !,"<b>Selected for "_PrefixList
	if (ShowStandard) {
		write " with standard relationships"
	} else {
		write " without standard relationships"
	}
	write "</b>"
	write !,"<H2>Entity Relationship Diagram</H2>"
	write !,"<img src="_$translate($piece($get(^WWW012(0,YM,1)),Y,47),"\","/")_"/COMDesignDoc"_UniqueRef_".jpg border=0>"
	write !,"<H2>Class Definitions</H2>"
	do GenerateClassDefinitions(PrefixList)
	quit
	
GenerateERD(PrefixList,File,ShowStandard)
	new class,id,ref,DotFile,PrevIO,PrevMode,sc,status,Prefix,%i,UpperClass,UpperRef
	
	; initialisation
	set status=1
	set DotFile=$piece(File,".",1,$length(File,".")-1)_".dot"
	open DotFile:"NW"
	set PrevIO=$IO
	use DotFile
	write !,"digraph G {"
	write !,"ratio=auto;rankdir=LR;"
	
	; Loop through all class definitions
	set class=""
	for  {
		set class=$order(^WWW001(0,class))
		quit:(class="")
		
		set UpperClass=$ZCONVERT($get(class),"U")
		set Prefix=""
		for %i=1:1:$length(PrefixList,",") {
			set Prefix=$piece(PrefixList,",",%i)
			quit:($extract(UpperClass,1,$length(Prefix))=Prefix)
		}
		
		if ($extract(UpperClass,1,$length(Prefix))=Prefix) {
			write !,class_"[style=filled,color=""lightskyblue""];"
		}
		
		; loop through all primary id definitions
		set id=""
		for  {
			set id=$order(^WWW002(0,class,id))
			quit:(id="")
			
			set ref=$piece($get(^WWW002(0,class,id,1)),Y,8)
			set UpperRef=$ZCONVERT($get(ref),"U")
			if (ref'="") {
				if ((($extract(UpperClass,1,$length(Prefix))=Prefix) & ((ShowStandard) ! ($extract(UpperRef,1,3)'="WWW"))) !
					($extract(UpperRef,1,$length(Prefix))=Prefix)) {
					write !,ref_" -> "_class_" [color=""firebrick"",fontcolor=""firebrick"",label="""_$piece($get(^WWW002(0,class,id,1)),Y,1)_"""];"
				}
			}
		}
		
		; loop through all field definitions
		set id=""
		for  {
			set id=$order(^WWW003(0,class,id))
			quit:(id="")
			
			set ref=$piece($get(^WWW003(0,class,id,1)),Y,8)
			set UpperRef=$ZCONVERT($get(ref),"U")
			if (ref'="") {
				if ((($extract(UpperClass,1,$length(Prefix))=Prefix) & ((ShowStandard) ! ($extract(UpperRef,1,3)'="WWW"))) !
					($extract(UpperRef,1,$length(Prefix))=Prefix)) {
					write !,ref_" -> "_class_" [style=dotted,color=""seagreen"",fontcolor=""seagreen"",label="""_$piece($get(^WWW003(0,class,id,1)),Y,1)_"""];"
				}
			}
		}
	}
	
	; finalisation
	write !,"}"
	close DotFile
	use PrevIO
	
	; Remove target file
	set sc=$ZF(-1,"del /f /q "_File)
 
	; Convert dot file to jpg
	set sc=$ZF(-1,"""c:\Program Files\ATT\Graphviz\bin\dot"" -T"_$piece(File,".",$length(File,"."))_" -o"_File_" -q "_DotFile)
	;if (sc'=0) {
	;	do ##class(%SYSTEM.Status).DecomposeStatus(sc,.status)
	;	set status="0"_Y_status
	;}
	
	; Remove dot file
	set sc=$ZF(-1,"del /f /q "_DotFile)
		
	quit status
	
GenerateClassDefinitions(PrefixList)
	new class,id,object,sc,status,Prefix,%i,UpperClass,type,TableHeadings
	
	; initialisation
	set status=1
	
	; Loop through all class definitions
	set class=""
	for  {
		set class=$order(^WWW001(0,class))
		quit:(class="")
		
		set UpperClass=$ZCONVERT($get(class),"U")
		set Prefix=""
		for %i=1:1:$length(PrefixList,",") {
			set Prefix=$piece(PrefixList,",",%i)
			quit:($extract(UpperClass,1,$length(Prefix))=Prefix)
		}
		
		continue:((Prefix'="")&&($extract(UpperClass,1,$length(Prefix))'=Prefix))
		
		; Now ready to display class details
		set TableHeadings=$listbuild(" ","#","Description","Type","Size","Index","Relation Class","Relation Keys")
		do Start^COMTable(TableHeadings,"<H3>"_class_" - "_$piece($get(^WWW001(0,class,1)),Y,1)_"</H3>")
 
		; loop through all primary id definitions
		set id=""
		for  {
			set id=$order(^WWW002(0,class,id))
			quit:(id="")
			
			set object=$get(^WWW002(0,class,id,1))
			do NewLine^COMTable()
			do InsertCell^COMTable("P")					; Primary Key/Data Field indicator
			do InsertCell^COMTable(id)					; Field number
			do InsertCell^COMTable($piece(object,Y,1))	; Description
			set type=$piece(object,Y,3)
			do InsertCell^COMTable($get(^WWW100(0,"FELDTYP",SPRACHE,type,1)))	; Type
			do InsertCell^COMTable($piece(object,Y,4))	; Size
			do InsertCell^COMTable($piece(object,Y,6))	; Index
			do InsertCell^COMTable($piece(object,Y,8))	; Relation Class
			do InsertCell^COMTable($piece(object,Y,9))	; Relation Keys
			do EndLine^COMTable()
		}
 
		; loop through all field definitions
		set id=""
		for  {
			set id=$order(^WWW003(0,class,id))
			quit:(id="")
			
			set object=$get(^WWW003(0,class,id,1))
			do NewLine^COMTable()
			do InsertCell^COMTable("D")					; Primary Key/Data Field indicator
			do InsertCell^COMTable(id)					; Field number
			do InsertCell^COMTable($piece(object,Y,1))	; Description
			set type=$piece(object,Y,3)
			do InsertCell^COMTable($get(^WWW100(0,"FELDTYP",SPRACHE,type,1)))	; Type
			do InsertCell^COMTable($piece(object,Y,4))	; Size
			do InsertCell^COMTable($piece(object,Y,6))	; Index
			do InsertCell^COMTable($piece(object,Y,8))	; Relation Class
			do InsertCell^COMTable($piece(object,Y,9))	; Relation Keys
			do EndLine^COMTable()
		}
		
		do Stop^COMTable()
	}
	
	quit status
	
]]></Routine>
</Export>