<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMUtilStr" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMUtilStr
	
	;-------------------------------------------------------------------------------
	; String Manipulation Utilities
	; 
	; See also : 
	; 	COMUtilDate		Date/Time Utilities
	; 	COMUtils		Other Common Utilities
	; 
	; History:
	; 01-Jul-2004	GRF		Created; moved some routines from COMUtils
	;-------------------------------------------------------------------------------
#include %occOptions
#include COMConst
#include COMSYS
#include WWWConst
 
RangeCheck(pstrValue="",pstrLower="",pstrUpper="")
	;-------------------------------------------------------------------------------
	; Check that a value (string/number) falls within a range.
	;
	; Params:	pstrValue		: Any string to check
	; 			pstrLower		: Lower bound
	; 			pstrUpper		: Upper bound
	;
	; ByRefs:
	;
	; Returns: blnFlag		(within the range or not)
	;
	; History:
	; 26-Sep-2006	JW		SR14956: Peer review. Removed excess conditions, $gets.
	; 13-Sep-2006	SteveS	SR14956: Created
	;-------------------------------------------------------------------------------
	new blnFlag
 
	set blnFlag = $$$YES
	
	if (pstrUpper'="") { // upper limit specified: check this
		if pstrValue]]pstrUpper {
			set blnFlag = $$$NO
		}
	}
		
	if (pstrLower'="") { // lower limit specified: check this
		if (pstrLower'=pstrValue) && (pstrLower]]pstrValue) {
			set blnFlag = $$$NO
		}
	}
	quit blnFlag
	
	
FindLanguageCode(pstrText,pstrModule="")
    ;-------------------------------------------------------------------------------
    ; Looks through all of the language texts and finds close matches
    ;
    ; Returns:List (Format : Code,Text,NumMatches)
    ; 
    ;
    ; History:
    ; 18-Apr-2005	PaulK	Moved from FINUtils
    ; 08-Mar-2005	PaulK	Allow for "Com" module language texts
    ; 05-Feb-2004	PaulK	Don't test if word has a '%' in it, and must have at least 3 chars
    ; 04-Feb-2004   PaulK   Created
    ;-------------------------------------------------------------------------------
	new ArrayMatches,idLanguage,strText,numMatches,intWordLoop,lstMatches
	
	if pstrModule="FI" set pstrModule = "Fi"
	if pstrModule="CO" set pstrModule = "Co"
	set pstrText=$zconvert(pstrText,"U")
	set idLanguage = pstrModule
	set lstMatches = ""
	if pstrText'="" {
		for {
			set idLanguage = $order(^WWW009(0,"EN",idLanguage))
			quit:$extract(idLanguage,1,$length(pstrModule))'=pstrModule
			quit:idLanguage=""
			
			set strText    = $get(^WWW009(0,"EN",idLanguage,1))
			set numMatches = 0
			for intWordLoop=1:1:$length(pstrText," ") {
				if '$find($piece(pstrText," ",intWordLoop),"%") {
					if $length($piece(pstrText," ",intWordLoop))>2 {
						if $find($zconvert(strText,"U"),$piece(pstrText," ",intWordLoop)) {
							set numMatches = numMatches+1
						}
					}
				}
			}
			if numMatches>0 {
				set ArrayMatches(numMatches,idLanguage) = strText
			}
		}
	}
	set numMatches = ""
	for {
		set numMatches = $order(ArrayMatches(numMatches),-1)
		quit:numMatches=""
		
		set idLanguage = ""
		for {
			set idLanguage = $order(ArrayMatches(numMatches,idLanguage))
			quit:idLanguage=""
			
			set lstMatches=lstMatches_$listbuild($listbuild(numMatches,idLanguage,ArrayMatches(numMatches,idLanguage)))
		}
	}
	quit lstMatches
	
	
SortStrList(pSourceList="",pDelim="",pblnASCIISort=$$$NO)
	;-------------------------------------------------------------------------------
	; Sort a string containing multiple pieces
	; 
	; Returns: Sorted version of string with duplicates and nulls removed.
	;          By default, strictly numeric values will appear in numeric order
	;          BEFORE strings.  If the ASCII Sort flag is set to YES all values
	;          are sorted as text strings
	;          i.e.  1P;20;10;1;2;2R;10;1P;11;;103 becomes
	;             1;10;103;11;1P;2;20;2R   rather than   1;2;10;11;20;103;1P;2R
	;
	; History:
	; 01-Jul-2004	GRF		SR10478 : Created
	;-------------------------------------------------------------------------------
	new idx,ListLength,SortedList,sp,SubString
	
	if pDelim="" set pDelim=";"
	
	quit:pSourceList="" pSourceList
	set ListLength=$length(pSourceList,pDelim)
	if ListLength=1 quit pSourceList
	
	kill ^CacheTemp("COMUtilStr","SortStrList",$job)
	set sp=$select(pblnASCIISort:" ",1:"")                	; space prefix for strict ASCII sort
	
	for idx=1:1:ListLength {
		set SubString=$piece(pSourceList,pDelim,idx)
		if SubString'="" set ^CacheTemp("COMUtilStr","SortStrList",$job,sp_SubString)=""
	}
	
	set SortedList=""
	set SubString=""
	for  {
		set SubString=$order(^CacheTemp("COMUtilStr","SortStrList",$job,SubString))
		quit:SubString=""
		
		if SortedList'="" set SortedList=SortedList_pDelim
		if pblnASCIISort {
			set SortedList = SortedList_$extract(SubString,2,$length(SubString))
		} else {
			set SortedList = SortedList_SubString
		}
	}
	kill ^CacheTemp("COMUtilStr","SortStrList",$job)
	quit SortedList
	
	
Strip(pstrString="",StripChar="",RemoveSpaces=$$$NO)
	;-------------------------------------------------------------------------------
	; History:
	; 05-Nov-2004	GRF		Add parameter defaults
	;-------------------------------------------------------------------------------
	
	;FIXME: Isn't it possible to do this using $zstrip only?
	
	if StripChar="" set StripChar = "`~!@#$%^&*()-_=+[{]}\|;:'"",<.>/?"
	set pstrString = $translate(pstrString,StripChar)
	if RemoveSpaces set pstrString = $translate(pstrString," ")
	
	quit pstrString
	
	
Trim(String="")
	; ----------------------------------------------------------------------------
	; Routine to remove trailing spaces
	; 
	; 08-Feb-2005	shobby	Default value for parameter.
	; ----------------------------------------------------------------------------
	new len
	
	set len = $length(String)
	while ($extract(String,len,len)=" ") {
		set len = len-1
	}
	quit $extract(String,1,len)
	
	
TrimSpaces(String="")
	;-------------------------------------------------------------------------------
	; Removes leading and trailing spaces from a string (uses $zstrip).
	;
	; Returns:String
	;
	; History:
	; 01-Nov-2004	SteveS	Created
	;-------------------------------------------------------------------------------
	quit $zstrip(String,"<>W")
	
	
CutString(pstrText="",pintWidth="",pintMaxRows="",pblnUseSpaces=1)
	;-------------------------------------------------------------------------------
	; Slices a string into rows
	;
	; Returns:List
	;
	; History:
	; 05-Nov-2004	GRF		Add parameter defaults
	; 20-Oct-2004	PK/SS	Created
	;-------------------------------------------------------------------------------
	new CharLoop,intLine,lstText
	
	if pintWidth=""   set pintWidth   = 500
	if pintMaxRows="" set pintMaxRows = 1
	
	set lstText = ""
	for {
		quit:pstrText=""
		quit:$listlength(lstText)>=pintMaxRows
		
		for CharLoop=(pintWidth+1):-1:0 {
			quit:'pblnUseSpaces
			quit:$extract(pstrText,CharLoop)=" "
		}
		if CharLoop=0 set CharLoop = pintWidth+1  ;if no spaces...
		set lstText  = lstText_$listbuild($extract(pstrText,1,CharLoop-1))
		set pstrText = $zstrip($extract(pstrText,CharLoop,$length(pstrText)),"<W")
	}
	quit lstText
	
	
Replace(pstrSource="",pstrFrom="",pstrTo="")
	;-------------------------------------------------------------------------------
	; Replaces one string with another in a string.
	; Note: will not replace if the 'to' string string contains the 'from' string.
	; 
	; Returns:String
	;
	; History:
	; 17-Feb-2005	PO		SR11661 Added support where pstrFrom is found in pstrTo.
	; 05-Nov-2004	GRF		Add parameter defaults
	; 09-Jan-2004	PaulK	Commented
	;-------------------------------------------------------------------------------
	if pstrFrom'="" {
		if $find(pstrTo,pstrFrom) {
			set pstrSource=$$FullReplace(pstrSource,pstrFrom,pstrTo)
		} else {
			for {
				quit:'$find(pstrSource,pstrFrom)
				
				set pstrSource=$piece(pstrSource,pstrFrom,1)_pstrTo_$piece(pstrSource,pstrFrom,2,999)
			}
		}
	}
	quit pstrSource
	
	
FullReplace(pstrSource="",pstrFrom="",pstrTo="")
	;-------------------------------------------------------------------------------
	; This procedure does all that Replace does plus handles where pstrFrom is found
	; in pstrTo, Replace procedure left as is slightly faster.
	;
	; History:
	; 17-Feb-2005	PO		SR11661 Created.
	;-------------------------------------------------------------------------------
    new strResult,strPiece,intIndex,intNumPieces
 
    set strResult    = ""
    set intIndex     = 0
    set intNumPieces = $length(pstrSource,pstrFrom)-1
 	
    for {
        quit:intNumPieces=intIndex
        set intIndex  = intIndex+1
        set strPiece  = $piece(pstrSource,pstrFrom,intIndex)
        set strResult = strResult_strPiece_pstrTo
    }
 
	set strResult = strResult_$piece(pstrSource,pstrFrom,intIndex+1)
    quit strResult
    
    
GetMemoTextWithCRLF(pstrMemoText)
	;-------------------------------------------------------------------------------
	; @nm stores new line on memo field as '|' character. This routine will Replace '|'
	; for CRLF chars (Carriage Return and Line Feed). This is used on SQL statements
	; of JReports.
	;
	; Inputs:
	; 	pstrMemoText - the text from a memo that will be updated.
	;
	; Returns:
	;
	; History:
	; 19-Jul-2007	Frank	SRBR014491: Created
	;-------------------------------------------------------------------------------
	quit:($get(pstrMemoText)="") ""
	quit $$FullReplace(pstrMemoText,$$$NewLineCharForMemoFields,$CHAR(13,10))
	
	
Upper(Text="")
	quit $zconvert(Text,"u")	; Use $$$UPPER() Macro from COMSYSString.INC instead
	
	
Lower(Text="")
	quit $zconvert(Text,"L")	; Use $$$LOWER() Macro from COMSYSString.INC instead
	
	
Proper(Text="")
	;-------------------------------------------------------------------------------
	; History:
	; 12-May-2006	RPW		SR14609: Do not use $$Upper^COMUtils, use $$$UPPER
	; 05-Nov-2004	GRF		Convert dot to "{...}" form; Add parameter defaults;
	; 							removed duplicated $$Upper conversion
	;-------------------------------------------------------------------------------
	new Char,Pos,UpFlag
	
	set UpFlag = $$$YES
	set Text   = $$$LOWER(Text)
	
	for Pos=1:1:$length(Text) {
		set Char = $extract(Text,Pos)
		if UpFlag set $extract(Text,Pos) = $$$UPPER(Char)
		set UpFlag = ("`~!@#$%^&*()-_=+[{]}\|;:'"",<.>/? "[Char)
	}
	quit Text
	
	
DoubleQuotes(string)
	; ----------------------------------------------------------------------------
	; Function to double all instances of double quotes
	; History:
	; 05-Nov-2004	GRF		Replace %i variable with idx
	; ----------------------------------------------------------------------------
	new cnt,idx,result
	
	set result = ""
	set cnt    = $length(string,"""")
	for idx=1:1:cnt {
		if (idx'=1) set result = result_""""""
		set result = result_$piece(string,"""",idx)
	}
	quit result
	
 
Colour(pintColour="",pstrDefault="")
	;-------------------------------------------------------------------------------
	; Turns a colour code into a colour name.
	;
	; Returns:String(colour)
	;
	; History:
	; 12-May-2009	SCR		SR16199: Return Text Only
	; 21-Dec-2007	GRF		BR014751: Ensure pintColour is a number
	; 05-Jan-2005	GRF		SR11415: Use parameter defaults
	; 20-Jul-2004	Paul K	Created
	;-------------------------------------------------------------------------------
	new strColour
	
	set strColour = ""
	
	if pintColour'="" {
		set pintColour = +pintColour
	;	set strColour  = $get(^WWW100(0,"FARBE","EN",pintColour,1))
		set strColour  = $$$WWW100Text($get(^WWW100(0,"FARBE","EN",pintColour,1)))
	}
	if strColour="" {
		set strColour = pstrDefault
	}
	quit strColour
	
	
ArrayToString(pArray,pDelim=",",pblnAddValue=$$$NO,pSubDelim=";",pblnNulls=$$$YES)
	;-------------------------------------------------------------------------------
	; Convert first dimension of array to a string, with delimiter
	; If a 1D array can also add the values stored in the array
	; 
	; Params:	pArray       - 1D array of elements
	; 			pDelim       - delimits each element in string
	; 			pblnAddValue - if YES adds corresponding value
	; 			pSubDelim    - separator between subscript and value
	; 
	; e.g.	XX("A")=123  XX("B")=""  XX("C")=456  XX("D")=789
	; 
	; $$ArrayToString(.XX) or $$ArrayToString(.XX,",")
	; 		           returns string :  A,B,C,D
	; 
	; $$ArrayToString(.XX,,$$$YES) or $$ArrayToString(.XX,",",$$$YES,";") or similar
	; 		or similar returns string :  A;123,B;,C;456,D;789
	; 
	; $$ArrayToString(.XX,,$$$YES,,$$$NO) or $$ArrayToString(.XX,",",$$$YES,";",$$$NO)
	; 		or similar returns string :  A;123,C;456,D;789
	;
	; History:
	; 28-Feb-2005	JW		SR11405 : Addded pblnOne option for extra 1
	; 16-Feb-2005	GRF		SR10478 : Optional inclusion of values; eliminate
	; 						with trailing delimiter (checked current usage - okay)
	; 31-Jan-2005	JW		Created
	;-------------------------------------------------------------------------------
	new Delim,element,strList,SubString,Value
	
	set Delim   = ""
	set strList = ""
	set element = ""
	for {
		set element = $order(pArray(element))
		quit:element=""
		
		set Value = $get(pArray(element))
		if (Value'="") || pblnNulls {
			set SubString = element
			if pblnAddValue {
				set SubString = SubString_pSubDelim_Value
			}
			set strList = strList_Delim_SubString
			set Delim   = pDelim
		}
	}
	quit strList
	
	
StringToArray(&pArray,pString="",pDelim=",",pSubDelim="",pblnValueFirst=$$$NO)
	;-------------------------------------------------------------------------------
	; Convert multi-piece string into array; optional pSubDelim to set values too.
	; 
	; Params:	pArray			- result array
	; 			pString 		- string to break up
	; 			pDelim			- string delimiter
	; 			pSubDelim		- separator between subscript and value
	; 			pblnValueFirst	- whether value is before subscript.
	; 			
	; ByRef : 	pArray(element)=""  or pArray(element)=value if pSubDelim'=""
	; 
	; Returns : strStatus if null string or invalid (null) array elements present.
	; 
	; History:
	; 18-Sep-2006	Steve S	SR14952 : Support value being the first piece
	; 16-Feb-2005	GRF		SR10478 : Created to reverse ArrayToString
	;-------------------------------------------------------------------------------
	new idx,StringLength,strStatus,SubString,Value
	
	set strStatus = $$$NO
	kill pArray
	quit:pString="" strStatus
	
	set strStatus = $$$YES
	
	set StringLength = $length(pString,pDelim)
	for idx=1:1:StringLength {
		set SubString = $piece(pString,pDelim,idx)
		set Value=""
		if pSubDelim'="" {
			if 'pblnValueFirst { //SR14952
				set Value     = $piece(SubString,pSubDelim,2)
				set SubString = $piece(SubString,pSubDelim,1)
			} else {
				set Value     = $piece(SubString,pSubDelim,1)
				set SubString = $piece(SubString,pSubDelim,2)
			}
		}
		if SubString'="" {
			set pArray(SubString) = Value
		} else {
			set strStatus = $$$NO
		}
	}
	quit strStatus
	
	
SortString(pstrUnsorted,pstrDelim=",")
	;-------------------------------------------------------------------------------
	; Sort multiple values in a string delimited by a specified character
	;
	; Params:	pstrUnsorted	- unsorted string
	; 			pstrDelim		- delimiter for string passed in
	;
	; ByRefs:
	;
	; Returns:	string - sorted
	;
	; History:
	; 29-Nov-2006	JW		SR15205: Created
	;-------------------------------------------------------------------------------
	new arrVals,strSorted
	
	do StringToArray(.arrVals,pstrUnsorted,pstrDelim)
	set strSorted = $$ArrayToString(.arrVals,pstrDelim)
	
	quit strSorted
	
	
MultiFind(pstrVals1,pstrVals2,pstrDelim1=";",pstrDelim2=";")
	;-------------------------------------------------------------------------------
	; Match an element of One multi-piece string to an element of a 2nd
	;
	; Params:	pstrVals1,pstrVals2		- 2 multi-piece strings
	; 			pstrDelim1,pstrDelim2 	- respective delimiters
	;
	; ByRefs:
	;
	; Returns:	whether there was a match
	;
	; History:
	; 11-Sep-2006	JW		SR14771: Created
	;-------------------------------------------------------------------------------
	new intLoop,blnFound,strCurVal
	
	set blnFound=$$$NO
	
	if (pstrVals1'="") && (pstrVals2'="") {
		set pstrVals1 = pstrDelim1_pstrVals1_pstrDelim1
		
		for intLoop=1:1:$length(pstrVals2,pstrDelim2) {
			set strCurVal = $piece(pstrVals2,pstrDelim2,intLoop)
			
			if $find(pstrVals1,pstrDelim1_strCurVal_pstrDelim1) {	// value found
				set blnFound=$$$YES
				quit
			}
		}
	}
	quit blnFound
	
	
ValueToCSV(pstrValue="")
	;-------------------------------------------------------------------------------
	; Convert to value into CSV form
	;
	; CSV format used
	; Note: this format is what MS Excel uses.
	; - replace all double quotes with two double quotes
	; - wrap all values that contain double quotes or commas in double quotes
	;
	; History:
	; 18-Feb-2005	GRF		Use macro for clarity
	; 16-Feb-2005	PO		SR11661 Created.
	;-------------------------------------------------------------------------------
	new strResult
	
	set strResult = pstrValue
	
 	if $find(strResult,$$$DBLQUOTE) {
	 	set strResult = $$Replace(strResult,$$$DBLQUOTE,$$$DBLQUOTE_$$$DBLQUOTE)
 	}
 	if $find(strResult,",")||$find(strResult,$$$DBLQUOTE) {
 		set strResult = $$$DBLQUOTE_strResult_$$$DBLQUOTE
 	}
	quit strResult
	
	
GetCSVValues(pstrCSV="",arrValues)
	;-------------------------------------------------------------------------------
	; Provided a CSV string an array including the separated values will be returned.
	;
	; CSV format used detailed in ValuesToCSV
	;
	; History:
	; 18-Feb-2005	PO		SR11661 Made necessary change for complete functionality.
	; 18-Feb-2005	GRF		Use macro for clarity
	; 16-Feb-2005	PO		SR11661 Created.
	;-------------------------------------------------------------------------------
	new strValue,intIndex,intStart,intCount,strCSVTmp
 
	set intCount = 0
	for intIndex=1:1:$length(pstrCSV) {
		set intCount  = intCount+1
		set strCSVTmp = $extract(pstrCSV,intIndex,$length(pstrCSV))
		if $extract(pstrCSV,intIndex)'=$$$DBLQUOTE {
			set arrValues(intCount) = $piece(strCSVTmp,",",1)
			set intIndex = intIndex+$length(arrValues(intCount))
		} else {
			set intStart = intIndex
			set intIndex = intIndex+1
			for {
				while $extract(pstrCSV,intIndex,intIndex+1)=($$$DBLQUOTE_$$$DBLQUOTE) {
					set intIndex = intIndex+2
				}
				if $extract(pstrCSV,intIndex)=$$$DBLQUOTE {
					set intIndex = intIndex+1
					quit
				} else {
					set intIndex = intIndex+1
				}
			}
			set arrValues(intCount) = $$Replace($extract(pstrCSV,intStart+1,intIndex-2),$$$DBLQUOTE_$$$DBLQUOTE,$$$DBLQUOTE)
		}
	}
	set arrValues = intCount
	quit
	
	
Capitalise(pstrString="")
    ;-------------------------------------------------------------------------------
    ; Capitalises the first letter of each word in a sentence.
    ;
    ; Returns: String
    ;
    ; History:
    ; 03-Mar-2010	GRF		-: Use Macro
    ; 12-Sep-2005	SteveS	SR12483: Created
    ;-------------------------------------------------------------------------------
	new idx,strLetter,strPunc
 
 	set strPunc = ".:;, "
 	
	for idx=1:1:($length(pstrString)) {
		set strLetter = $extract(pstrString,idx)
		
		if (idx=1) || $find(strPunc,($extract(pstrString,idx-1))) {
			set $extract(pstrString,idx) = $$$UPPER(strLetter)
		}
	}
	quit pstrString
	
	
EscapeString(pstrToEscape="",pstrCharsToEscape="",pblnIncludeExtraChr=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Escape strings, designed for hyperevents where data passes through EventBroker and can cause js actions to be performed.
	;
	; Note: Since it was never thought to escape micro operation data, the data can therefore appear to contain micro ops.
	; The solution to this has been clearly to escape micro op data, however due to the number of points in the code that
	; micro ops are used, instead of tracking down all occurrences, a of form escaping has been used where it is consider highly
	; unlikely to come across in data being sent via any hyperevent.
	;
	; The use of ASCII nul has been investigated however Internet Explorers implementation of the responseText property in the
	; XMLHttpRequest object terminates the returned string at any nuls found in the HTTP response.
	; Therefore the character 0xFF has been used.
	;
    ; Params:	pstrToEscape - String to be escaped.
    ;			pstrCharsToEscape - Which characters that need to be escaped.
    ;			pblnIncudeExtraChr - Whether extra character is to be included when escaping.
    ;
    ; Returns: pstrToEscape - string has been escaped
    ;
    ; History:
    ; 25-Nov-2005	PO		SR13792: Created
    ;-------------------------------------------------------------------------------
	new counter,strChar,strExtractEscapeChar
 
	set strExtractEscapeChar = $case(pblnIncludeExtraChr,$$$YES:$char(255),:"")
 
	for counter = 1:1:$length(pstrCharsToEscape) {
		set strChar = $extract(pstrCharsToEscape,counter)
 
		if pstrToEscape [ strChar {
			set pstrToEscape = $$Replace^COMUtilStr(pstrToEscape,strChar,strExtractEscapeChar_"%"_$zhex($ascii(strChar)))
		}
	}
	quit pstrToEscape
	
	
UnEscapeString(pstrToUnEscape="",pstrCharsToUnEscape="",pblnIncludedExtraChr=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Unescape strings escaped by sub-routine EscapeString
    ;
    ; Params:	pstrToEscape - String to be unescaped.
    ;			pstrCharsToUnEscape - Which characters that need to be unescaped.
    ;			pblnIncudeExtraChr - Whether extra character is included in escaped string.
    ;
    ; ByRefs: None
    ;
    ; Returns: pstrToUnEscape - string has been unescaped
    ;
    ; History:
    ; 27-Jan-2006	PO		SR14130: Created
    ;-------------------------------------------------------------------------------
	new counter,strChar,strExtractEscapeChar
 
	set strExtractEscapeChar = $case(pblnIncludedExtraChr,$$$YES:$char(255),:"")
 
	for counter = 1:1:$length(pstrCharsToUnEscape) {
		set strChar = $extract(pstrCharsToUnEscape,counter)
 
		if pstrToUnEscape [ strExtractEscapeChar_"%"_$zhex($ascii(strChar)) {
			set pstrToUnEscape = $$Replace^COMUtilStr(pstrToUnEscape,strExtractEscapeChar_"%"_$zhex($ascii(strChar)),strChar)
		}
	}
	quit pstrToUnEscape
	
	
MakeKey(pstrKey="",pidForm,pintKeyNumber=1)
 
	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Not Complete! Do not use yet!
	
    /*-------------------------------------------------------------------------------
    ; Process a single string into a valid @NM key
    ;
    ; Params: pstrKey: 			The original string
    ; 		  pidForm: 			The form it's being entered on
    ; 		  pintKeyNumber:	If the form has more than one key, the
    ; 		  					key number to use.
    ;
    ; ByRefs:
    ;
    ; Returns: String
    ;
    ; History:
	; 06-Jan-2011	GRF		SR17579: Use explicit tag for WWWTR calls
	; 05-Jan-2010	GRF		SR15525: Call to $$Convert^WWWTR rather than $$^WWWTR
    ; 28-Dec-2005	SteveS	SR14064: Created
    ;-------------------------------------------------------------------------------*/
	new objWWW120,YDATEI,YTYP,YFORM,YI,objWWW002,YKEY
	
	if $get(Y)="" do ^WWWVAR
 
	if ($get(pidForm)'="") && ($get(pintKeyNumber)'="") {
		set objWWW120 = $get(^WWW120(0,pidForm,1))
		set YDATEI    = $$$WWW120ClassUsedInForm(objWWW120)
		
		if (YDATEI'="") {
			set objWWW002 = $get(^WWW002(0,YDATEI,pintKeyNumber,1))
			set YTYP      = $$$WWW002InputType(objWWW002)
			set YFORM     = pidForm
			set YI        = pintKeyNumber
			
			; WWWEVENT does this processing first upon tabbing away
			set pstrKey = $translate($$GetInternal^WWWTR(YTYP,pstrKey),"&,;()'"_Y_"""","+//////")
				
			; WWWSAVP does this processing when the form is submitted
			set YKEY(YI)=pstrKey
			do PRUEFP^WWWSAVP ;test key
			set pstrKey = $$GetInternal^WWWTR(YTYP,YKEY(YI))
		}
	}
	quit pstrKey
	
	
StringToAscii(pstrText,pblnAsHashCode=$$$NO,pblnUpperNoSpecChar=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Convert String into ASCII Code               ***** SEE FOLLOWING WARNING *****
    ;
    ; Params: pstrText: 	       The original string
    ; 		  pblnAsHashCode:	   Return simple hash code
    ; 		  pblnUpperNoSpecChar: convert upper string without spec. char.
    ;
    ; Returns: Ascii String / Hash Number
    ;
    ; History:
    ; 25-Aug-2008	GRF		SR15852: remove unnecessary +; warning added
    ; 18-Aug-2008	FIS		SR15852: Created
    ;-------------------------------------------------------------------------------
	new strReturn,idx
	
	if (pblnUpperNoSpecChar = $$$YES) {
		set pstrText = $$^WWWUMLAU(pstrText,3)
	}
	
	set strReturn = ""
	set idx=1
	if (pblnAsHashCode = $$$YES) {     // simple hash code   // should use Bob Jenkin's hashcode in some future
		while ($extract(pstrText,idx,$length(pstrText)) '= "") {
			set strReturn = (31 * strReturn) + $ascii($extract(pstrText,idx))
			set idx = idx+1
		}
	} else {                           // ASCII char by char
		while ($extract(pstrText,idx,$length(pstrText)) '= "") {
			set strReturn = strReturn_$ascii($extract(pstrText,idx))
			set idx = idx+1
		}
	}
	
	quit strReturn
	
	;+++++++++++++++++++++++++++++++++++++++
	; WARNING : StringToAscii
	; =======
	; 
	; If the output from the StringToAscii function is treated as a numeric value,
	;   (e.g. if stored as YUSER and then testing +YUSER)
	; the results will not be unique over a certain string length.
	; 
	; e.g.
	; "ABCDEFGHIA" => 65666768697071727365 => 65666768697071727360
	; "ABCDEFGHIB" => 65666768697071727366 => 65666768697071727360
	; 
	; The same will occur with the Hash Switch set to $$$YES with the problem
	; occurring with longer strings.
	; 
	; If the result has other digits appended before being treated as a numeric
	; value, the problem will appear with shorter base strings.
	;+++++++++++++++++++++++++++++++++++++++
	
GetBase64Encode(pstrText="") 
    ;-------------------------------------------------------------------------------
    ; Convert Text to Base64 using UTF8 Translation
    ; The UTF8 takes care of any unicode characters that may be in the text/
    ;
    ; Params: pstrText 
    ;
    ; ByRefs:
    ;
    ; Returns: Base64 
    ;
    ; History:
    ; 22-Jan-2009	SCR		SR16320: Created
    ;-------------------------------------------------------------------------------*/
	set pstrText = $zconvert(pstrText,"O","UTF8")
 	quit $SYSTEM.Encryption.Base64Encode(pstrText)
	
	
GetBase64Decode(pstrBase64="") 
    ;-------------------------------------------------------------------------------
    ; Convert Base64 to text using UTF8 Translation
    ; The UTF8 takes care of any unicode characters that may be in the text/
    ;
    ; Params: pstrBase64 
    ;
    ; ByRefs:
    ;
    ; Returns: text 
    ;
    ; History:
    ; 22-Jan-2009	SCR		SR16320: Created
    ;-------------------------------------------------------------------------------*/
 	new strText
 	
 	set strText = $SYSTEM.Encryption.Base64Decode(pstrBase64)
	quit $zconvert(strText,"I","UTF8")
	
	
NullDevice()
	;-------------------------------------------------------------------------------
	; Return Null Device for OS
	;
	; Inputs: none
	;
	; Returns: device ie: //./null
	;
	; History:
	; 18-Nov-2009	SCR		SR16929: Created
	;-------------------------------------------------------------------------------
	new strDev
	
	if $$$isWINDOWS {
		set strDev="//./nul"
	
	} elseIf $$$isUNIX {
		set strDev="/dev/null/"
	
	} elseIf $$$isVMS {
		set strDev="NL:"
	
	} else {
		set strDev=""
	}
	quit strDev
	
]]></Routine>
</Export>