<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMGridEdit31JSort" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[COMGridEdit31JSort
	
CreateJavascript()
	;-------------------------------------------------------------------------------
	; History:
	; 28-Jan-2014	shobby	SESDF-769: Simplified arrow display.
	; 14-Aug-2013	shobby	CORE-233.5: Fixed an issue with sorting in fixed column mode.
	; 14-Aug-2013	shobby	CORE-233.1 fixed undefined error.
	; 30-Jul-2013	shobby	CORE-204.2: Reversed previous change. Reversed sign of el._descending.
	; 29-Jul-2013	shobby	CORE-204: Reverse Ascending/Descending
	; 23-Jul-2013	shobby	CORE-189.1: CreateEventObject doesn't work in Firefox and is in fact unnecessary.
	; 20-Jul-2012	shobby	SR18063: Additional parameter to allow sort by relations
	; 03-Mar-2012	shobby	SR17724.3 Correction when clicked column is primary key.
	; 29-Feb-2012	shobby	SR17724.3 Correction to previous change
	; 16-Feb-2012	shobby	SR17724.3 Changes to correctly identify which column has
	;							been clicked for sorting purposes.
	; 16-Feb-2012	shobby	SR17724.2 Relocated the positioning of the sort arrow 
	;							reference to the TBODY, now that there are multiple
	;							THEADs
	; 14-Feb-2012	shobby	SR17724: getInnerText is required when patching to 1.70.x
	; 16-Aug-2011	shobby	SR17784: Moved function getParent to WWWFORM8
	; 24-Mar-2011	shobby	SR17687: Make sure the arrows are next to the text in IE.
	; 24-May-2010	GRF		SR17321: insertAdjacentElement replacement
	; 17-May-2010	shobby	SR17293: Replacement for webdings.
	; 21-Sep-2009	shobby	SR16900: Change direction of sort images (el._descending)
	; 11-Nov-2008	shobby	SR16032: Allow saving of grid cell contents before sorting.
	; 19-Jul-2007	RPW		SR15529: Allow the grid to sort if there are more than
	;							one pages in sortTable
	;-------------------------------------------------------------------------------
	&js<
	//<script language="javascript">
	//<!--
	/*----------------------------------------------------------------------------\
	|                                Table Sort                                   |
	|-----------------------------------------------------------------------------|
	|                         Created by Erik Arvidsson                           |
	|                  (http://webfx.eae.net/contact.html#erik)                   |
	|                      For WebFX (http://webfx.eae.net/)                      |
	|-----------------------------------------------------------------------------|
	| A DOM 1 based script that allows an ordinary HTML table to be sortable.     |
	|-----------------------------------------------------------------------------|
	|                  Copyright (c) 1998 - 2002 Erik Arvidsson                   |
	|-----------------------------------------------------------------------------|
	| This software is provided "as is", without warranty of any kind, express or |
	| implied, including  but not limited  to the warranties of  merchantability, |
	| fitness for a particular purpose and noninfringement. In no event shall the |
	| authors or  copyright  holders be  liable for any claim,  damages or  other |
	| liability, whether  in an  action of  contract, tort  or otherwise, arising |
	| from,  out of  or in  connection with  the software or  the  use  or  other |
	| dealings in the software.                                                   |
	| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |
	| This  software is  available under the  three different licenses  mentioned |
	| below.  To use this software you must chose, and qualify, for one of those. |
	| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |
	| The WebFX Non-Commercial License          http://webfx.eae.net/license.html |
	| Permits  anyone the right to use the  software in a  non-commercial context |
	| free of charge.                                                             |
	| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |
	| The WebFX Commercial license           http://webfx.eae.net/commercial.html |
	| Permits the  license holder the right to use  the software in a  commercial |
	| context. Such license must be specifically obtained, however it's valid for |
	| any number of  implementations of the licensed software.                    |
	| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |
	|*GPL - The GNU General Public License    http://www.gnu.org/licenses/gpl.txt |
	|*Permits anyone the right to use and modify the software without limitations |
	|*as long as proper  credits are given  and the original  and modified source |
	|*code are included. Requires  that the final product, software derivate from |
	|*the original  source or any  software  utilizing a GPL  component, such  as |
	|*this, is also licensed under the GPL license.                               |
	\----------------------------------------------------------------------------*/
	var dom = (document.getElementsByTagName) ? true : false;
	var ie5 = (document.getElementsByTagName && document.all) ? true : false;

	function sortTable(tableNode, nCol, bDesc, sType,pblnByRelation) {  //SR18063
	  var tBody = tableNode.tBodies[0];
	  if (tBody!=undefined) {   //SR17253
		  var trs = tBody.rows;
		  var trl= trs.length;
	  } else {
		  trl=0;
	  }
	  if (GRIDNumPages) {
		  var retval=EventValue(YUCI,YUSER,YFORM,'FIX','OnSortGrid^COMGridEdit31Events',getFocusField(),'6',nCol+"~"+bDesc+"~"+pblnByRelation); //SR18063
	  } else {
		  var a = new Array();
		  var b = new Array();
		  var j=-1;
		  var k=-1;
		  for (var i = 0; i < trl; i++) {
			if (trs[i].id.indexOf('_')==-1) {
			  j=j+1;
			  a[j] = trs[i];
			} else {
			  k=k+1;
			  b[k]=trs[i];
			}
		  }
		  var start = new Date;
		  window.status = 'Sorting data...';
		  a.sort(compareByColumn(nCol,bDesc,sType));
		  window.status = 'Sorting data done';
		  //x=y;
		  for (var i = 0; i < j+1; i++) {
		    tBody.appendChild(a[i]);
		    window.status = 'Updating row ' + (i + 1) + ' of ' + trl + ' (Time spent: ' + (new Date - start) + 'ms)';
		  }
		  //for (var i = 0; i < k+1; i++) {
		  for (var i = k; i > -1; i--) {
		    tBody.appendChild(b[i]);
		//  document.getElementById(b[i].id.split('_')[0]).insertAdjacentElement('AfterEnd',b[i])    // SR17321
		    doInsertAdjacentElement(document.getElementById(b[i].id.split('_')[0]),'AfterEnd',b[i]);
		    window.status = 'Updating row ' + (i + 1) + ' of ' + trl + ' (Time spent: ' + (new Date - start) + 'ms)';
		  }
		  
		  // check for onsort
		  if (typeof(tableNode.onsort) == 'string') {
		    tableNode.onsort = new Function('', tableNode.onsort);
		  } else if (typeof(tableNode.onsort) == 'function') {
		    tableNode.onsort();
		  }
	  }
	  resetColumnWidths();
	}
	
	function CaseInsensitiveString(s) {
	  return String(s).toUpperCase();
	}
	function parseDate(s) {
	  if (cgeDateFormat==null) {
	  	cgeDateFormat='DD/MM/YYYY';
	  }
	  var year = s.substring(cgeDateFormat.indexOf('Y'),cgeDateFormat.lastIndexOf('Y')+1),
	      month = s.substring(cgeDateFormat.indexOf('M'),cgeDateFormat.lastIndexOf('M')+1),
	      day = s.substring(cgeDateFormat.indexOf('D'),cgeDateFormat.lastIndexOf('D')+1);
 
	  return year+month+day;
	}
	/* alternative to number function
	 * This one is slower but can handle non numerical characters in
	 * the string allow strings like the follow (as well as a lot more)
	 * to be used:
	 *    '1,000,000'
	 *    '1 000 000'
	 *    '100cm'
	 */
	function toNumber(s) {
	    return Number(s.replace(/[^0-9\.\-]/g, ''));
	}
	function compareByColumn(nCol, bDescending, sType) {
	 var c = nCol;
	 var d = bDescending;
	 var fTypeCast = String;
	 if (sType == 'Number')
	  fTypeCast = toNumber;
	 else if (sType == 'Date')
	  fTypeCast = parseDate;
	 else if (sType == 'CaseInsensitiveString')
	  fTypeCast = CaseInsensitiveString;
	 return function (n1, n2) {
	  //SR17411
	  if (fTypeCast(n1.cells[c].innerText) < fTypeCast(n2.cells[c].innerText))
	   return d ? -1 : +1;
	  if (fTypeCast(n1.cells[c].innerText) > fTypeCast(n2.cells[c].innerText))
	   return d ? +1 : -1;
	  return 0;
	 };
	}
	function sortColumnWithHold(e) {
	 // find table element
	 var el = ie5 ? e.srcElement : e.target;
	 var table = getParent(el, 'TABLE');
	 // backup old cursor and onclick
	 var oldCursor = table.style.cursor;
	 var oldClick = table.onclick;
	 // change cursor and onclick
	 table.style.cursor = 'wait';
	 table.onclick = null;
	 // the event object is destroyed after this thread but we only need
	 // the srcElement and/or the target
	 var fakeEvent = {srcElement : e.srcElement, target : e.target};
	 // call sortColumn in a new thread to allow the ui thread to be updated
	 // with the cursor/onclick
	 window.setTimeout(function () {
	  sortColumn(fakeEvent);
	  // once done resore cursor and onclick
	  table.style.cursor = oldCursor;
	  table.onclick = oldClick;
	 }, 100);
	}

	function sortColumn(e,ptable,pblnByRelation) {  //16032  //SR18063
	   var fakeEvent = {srcElement : e.srcElement, target : e.target};
	   window.setTimeout(function () { sortColumn1(fakeEvent,null,pblnByRelation);},1);  //SR18063
	}
	function sortColumn1(e,ptable,pblnByRelation) { //SR18063
	 var tmp = e.target ? e.target : e.srcElement;
	 //SR17724.2 var tHeadParent = getParent(tmp, 'THEAD');
	 var tHeadParent = document.getElementById('gridDIV'); //getParent(tmp, 'TBODY'); //SR17724.2 //CORE-233.5
	 var el = getParent(tmp, 'TH');
	 if (tHeadParent == null)
	  return;
	 if (el != null) {
	  var p = el.parentNode;
	  var i;
	  // typecast to Boolean
	  if (el._value==null) el._value=el.innerHTML;
	  if ((tHeadParent._arrow != el)&&(tHeadParent._arrow!=null)) tHeadParent._arrow.innerHTML=tHeadParent._arrow._value;
	  tHeadParent._arrow=el;
	  el._descending = !Boolean(el._descending); //CORE-204
	  if (!el._descending) {
	   	el.innerHTML=el._value+' '+String.fromCharCode(9650); //SESDF-769
	  } else {
	   	el.innerHTML=el._value+' '+String.fromCharCode(9660); //SESDF-769
	  }
	  // get the index of the TD
	  var cells = p.cells;
	  var l = cells.length;
	  for (i = 0; i < l; i++) {
	   if (cells[i] == el) break;
	  }
	  if ((document.getElementById('GridVersion').value==1)&&(!isFixedCol(el.parentNode.id))) {i=i+1+parseInt(document.getElementById('FixedColumns').value);} //SR17724.3
	//  var table = getParent(el, 'TABLE');
	  var table = ptable ? ptable : getParent(el, 'TABLE');   //shobby
	  // can't fail
	  //if ((cells[1].id=='THkey_Expand')&&(isFixedCol(el.parentNode.id))) i=i-1; //SR17724.16
	  if ((cells.length>1)&&(cells[1].id=='THkey_Expand')&&(i>1)) i=i-1; //SR17724.16 //SR17724.3 //CORE-233.1
	  sortTable(table,i,el._descending, el.getAttribute('type'),pblnByRelation);  //SR18063
	 }
	}
	function isFixedCol(pid) {
		return (pid.indexOf('Key')>0); //SR17724.2
	}
	function getInnerText(el) {  //TODO SR17724 (Remove this when finished patching to 1.70)
	 if (ie5) return el.innerText;"_" //Not needed but it is faster
	 var str = '';
	 var cs = el.childNodes;
	 var l = cs.length;
	 for (var i = 0; i < l; i++) {
	  switch (cs[i].nodeType) {
	   case 1: //ELEMENT_NODE
	    str += getInnerText(cs[i]);
	    break;
	   case 3:"_" //TEXT_NODE
	    str += cs[i].nodeValue;
	   break;
	  }
	 }
	 return str;
	}
	
function cgeSortColumnAscending(pField,pTable,pblnByRelation) {  	//SR18063
	var table=document.getElementById(pTable);
	var event=new Object(); //document.createEventObject(); //CORE-189.1
	var el=getParent(document.getElementById(pField), 'TH')
	el._descending=true;  //CORE-204.2  Note this will be reversed in SortColumn1
	event.target=document.getElementById(pField);
	sortColumn(event,table,pblnByRelation);							//SR18063
}
function cgeSortColumnDescending(pField,pTable,pblnByRelation) {	//SR18063
	var table=document.getElementById(pTable);
	var event=new Object(); //document.createEventObject(); //CORE-189.1
	var el=getParent(document.getElementById(pField), 'TH')
	el._descending=false; //CORE-204.2  Note this will be reversed in SortColumn1
	event.target=document.getElementById(pField);
	sortColumn(event,table,pblnByRelation);							//SR18063
}
function getParent(el, pTagName) {
	if (el == null) { return null;
	} else if (el.nodeType == 1 && el.tagName.toLowerCase() == pTagName.toLowerCase()) { // Gecko bug, supposed to be uppercase",YCR
	  return el;
	} else {
  		return getParent(el.parentNode, pTagName);
	}
}

	
 	//-->
	//</script>
	>
	quit]]></Routine>
</Export>