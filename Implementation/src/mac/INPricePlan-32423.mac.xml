<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INPricePlan" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INPricePlan
 
#include COMSYS
#include INConst
 
#define StartLog(%1)	if '$$$IsNum(^CacheTempPPLog(YUCI,YUSER)) { set %1 = $$$YES kill ^CacheTempPPLog(YUCI,YUSER) }
#define EndLog(%1)		set:%1 ^CacheTempPPLog(YUCI,YUSER) = ""
 
GetPrice(pidItem,pidCustomer="",pidLocation="",pfltQuantity=1,pblnGenerate=$$$NO,pblnCheckStoreManaged=$$$YES)
	;-------------------------------------------------------------------------------
	; Get the price for the Product, Customer and Location
	; 
	; If none is found, use just the product and customer
	; 
	; If none is found, use just the product
	;
	; Params:
	; pidItem     : The product
	; pidCustomer : The customer
	; pidLocation : The location
	; pfltQuantity: The quantity of the product this customer wants.
	; pblnGenerate: Is this generating the price structure or calculating the price
	;
	; Returns:
	; The price of the item, or 0 if nothing is found
	;
	; History:
	; 20-Dec-2006	RPW		SR15326: Check if there is a store managed plan. If there is
	; 						get the current selling plans details and then use this as the value for the 
	; 						store managed plan calculation.
	; 07-Dec-2006	RPW		SR15270: Modified to just return the unit price
	; 04-Dec-2006	RPW		SR15270: Created
	;-------------------------------------------------------------------------------
 
	new idLine,idPricePlan,idPricePlanLine,strPrice,strPricingFormula,SQLCODE,blnDynamic
	new idRelated,intMatch,fltAverageCost,blnLogStarted,enumType,objPricePlanLineQty
	new strPrevious,strValue,idItem,blnStoreManaged,blnIsDefault,dteCostPoint
	
	set blnLogStarted = $$$NO
	set intMatch=0
	
	set strValue=pidItem_Y_pidCustomer_Y_pidLocation_Y_pfltQuantity
	
	if 'pblnGenerate { // SR15310 vvv
		new objPricePlan, objPricePlanLine, objRelatePricePlanLine, objRelatedPricePlan,blnNoError
		
		$$$StartLog(blnLogStarted)
		
		if blnLogStarted {
			set ^CacheTempPreviousCall(YUCI,YUSER)=strValue_Y_pblnCheckStoreManaged
		} else {
			set strPrevious=$get(^CacheTempPreviousCall(YUCI,YUSER))
			kill ^CacheTempPreviousCall(YUCI,YUSER)
			quit:strPrevious=strValue_Y_pblnCheckStoreManaged 0
		}
		do LogEntry(1,strValue)
	} // SR15310 ^^^
	
	set idLine=""
		
	if pblnCheckStoreManaged {
		set idLine=$$StoreManaged(pidItem,pidCustomer,pidLocation,.intMatch)
	}
	
	set blnStoreManaged=idLine'=""
	
	set blnIsDefault=$$$NO
	
	if 'blnStoreManaged {
		set idLine=$$SellingOrMarketing(pidItem,pidCustomer,pidLocation,.intMatch,.blnIsDefault)
	}
	
	set strPrice=""
	
	if idLine '= "" {
		set idPricePlan=$$$KEY1(idLine)
		set idPricePlanLine=$$$KEY2(idLine)
		
		set idRelated=$$GetRelated^INPricePlanData(idPricePlan)
		
		if 'pblnGenerate { // SR15310 vvv
			do LogEntry(2,idPricePlan_Y_idPricePlanLine_Y_idRelated)
			
			set objPricePlan = $get(^INPricePlan(YM,$$$KEY1(idLine),1))
 
			do LogEntry(3,objPricePlan)
 
			set objPricePlanLine = $get(^INPricePlanLine(YM,$$$KEY1(idLine),$$$KEY2(idLine),1))
 
			do LogEntry(4,objPricePlanLine)
		} // SR15310 ^^^
		
		set strPricingFormula=""
		set blnDynamic=$$$NO
		set idLine=""
		set fltAverageCost=0
		set SQLCODE=0
	
		&sql(select top 1 PricingFormula,Dynamic,QuantityBreak,AverageCost
		into :strPricingFormula,:blnDynamic,:idLine,:fltAverageCost
		from INPricePlanLineQty 
		where PricePlan = :idPricePlan
		and PricePlanLine = :idPricePlanLine 
		and Company = :YM
		and MinQuantity <= :pfltQuantity
		order by MinQuantity desc)
		
		if SQLCODE {
			set strPricingFormula=""
			set blnDynamic=$$$NO
			set idLine=""
			set fltAverageCost=0
		}
		
		if intMatch=4 set pidCustomer=""
		if intMatch=2 set pidLocation=""
		if intMatch=1 {
			set pidCustomer=""
			set pidLocation=""
		}
		
		set dteCostPoint=""
		
		if 'pblnGenerate { // SR15310 vvv
			if SQLCODE {
				do LogEntry(99,SQLCODE)
				set blnNoError = $$$NO
			} else {
				set objPricePlanLineQty = $get(^INPricePlanLineQty(YM,idPricePlan,idPricePlanLine,idLine,1))
				do LogEntry(5,objPricePlanLineQty)
				set blnNoError = $$$YES
			}
			
			if blnIsDefault {
				if blnDynamic {
					set dteCostPoint=+$h
				} else {
					set dteCostPoint=$$$INPricePlanCostPoint(objPricePlan)
				}
			}
			
		} // SR15310 ^^^
		
		set strPrice=$$GetPricingFormula^INBPPGenRule(strPricingFormula,blnDynamic,pidItem,pfltQuantity,idRelated,fltAverageCost,pblnGenerate,blnIsDefault,dteCostPoint,strValue) // SR15326
	
		if 'pblnGenerate { // SR15310 vvv
			if blnNoError {
				do LogEntry(6,strPrice)
			}
		} // SR15310 ^^^
	}
	
	if strPrice="" set strPrice=0
	
	if '$isvalidnum(strPrice) set strPrice=$$$BadFunction
	
	$$$EndLog(blnLogStarted) // SR15310
	
	quit strPrice
 
LogEntry(pidType,pobjRecord)
	;-------------------------------------------------------------------------------
	; 
	;
	; Params:
	; pidType - Record type, eg. identify what the record contains
	; pobjRecord - Record
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 13-Dec-2006	PO		SR15310: Created
	;-------------------------------------------------------------------------------
	new id
 
	set id = $increment(^CacheTempPPLog(YUCI,YUSER))
	set ^CacheTempPPLog(YUCI,YUSER,id,"T") = pidType
	set ^CacheTempPPLog(YUCI,YUSER,id,"R") = pobjRecord
 
	quit
	
StoreManaged(pidItem,pidCustomer,pidLocation,&pintMatch)
	;-------------------------------------------------------------------------------
	; This determines whether there is currently a store managed plan which is active
	; at this location
	;
	; Params:
	;
	; Returns:
	; The id of the Price Plan Line
	;
	; History:
	; 19-Dec-2006	RPW		SR15326: Created
	;-------------------------------------------------------------------------------
 
	new idItem,idLine
	
	for idItem=pidItem,"" {
		set pintMatch=3
		set idLine=$$GetPricePlanLine^INPricePlanData($$$EnumINITEMPRICETYPEStoreManaged,idItem,pidCustomer,pidLocation)
		if idLine="" {
			set pintMatch=4
			set idLine=$$GetPricePlanLine^INPricePlanData($$$EnumINITEMPRICETYPEStoreManaged,idItem,,pidLocation)
		}
		quit:idLine'=""
	}
	
	quit idLine
 
SellingOrMarketing(pidItem,pidCustomer,pidLocation,&pintMatch,&pblnIsDefault)
	;-------------------------------------------------------------------------------
	; Method Usage
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 19-Dec-2006	RPW		SR<place SR Number here>: Created
	;-------------------------------------------------------------------------------
 
	new enumType,idItem,blnIsDefault,idLine
	
	if pidCustomer="" {
		set enumType=$$$EnumINITEMPRICETYPESellingPrice
	} elseif pidCustomer'="" {
		if $$$INKUNDEMarketingLocation($get(^INKUNDE(YM,pidCustomer,1)))'="" {
			set enumType=$$$EnumINITEMPRICETYPEMarketingCost
		} else {
			set enumType=$$$EnumINITEMPRICETYPESellingPrice
		}
	}
	
	
	for idItem=pidItem,"" {
		set pintMatch=3
		set pblnIsDefault=idItem=""
		set idLine=$$GetPricePlanLine^INPricePlanData(enumType,idItem,pidCustomer,pidLocation)
		if idLine="" {
			set pintMatch=2
			set idLine=$$GetPricePlanLine^INPricePlanData(enumType,idItem,pidCustomer)
			if idLine="" {
				set pintMatch=1
				set idLine=$$GetPricePlanLine^INPricePlanData(enumType,idItem)
			}
		}
		quit:idLine'=""
	}
 
	quit idLine
]]></Routine>
</Export>