<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INDPPGenRule" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INDPPGenRule
 
#include INConst
#include COMSYS
 
CopyToStatus(pidRuleHeader,pidStatus,&pidNewRuleHeader,pstrCreationMechanism)
	;-------------------------------------------------------------------------------
	; Copy a Price Plan Generation Rule to a given status
	;
	; Params:
	; pidRuleHeader - Price Plan Rule Id
	; pidStatus - Status Id
	; pidNewRuleHeader - New Price Plan Rule Id
	; pstrCreationMechanism - Message detailing how the Generation rule was created
	;
	; ByRefs: None
	;
	; Returns: strStatus - $$$OK if successful, otherwise error message
	;
	; History:
	; 08-Dec-2006	PO		SR15295: Created
	;-------------------------------------------------------------------------------
	new idNewRuleHeader,objNewRuleHeader,strStatus,idNewRuleLine,idNewQuantityBreak,objNewRuleLine,objNewRuleLineQty,objRuleHeader
	new idRuleLine,idQuantityBreak
 
	set pidNewRuleHeader = $$^WWWNEXT("INPPGenRule")
	set objRuleHeader    = $get(^INPPGenRule(YM,pidRuleHeader,1))
 
	set $$$INPPGenRuleCostPoint(objNewRuleHeader)         = $$$INPPGenRuleCostPoint(objRuleHeader)
	set $$$INPPGenRuleValidFromDate(objNewRuleHeader)     = $$$INPPGenRuleValidFromDate(objRuleHeader)
	set $$$INPPGenRuleValidToDate(objNewRuleHeader)       = $$$INPPGenRuleValidToDate(objRuleHeader)
	set $$$INPPGenRuleValidFromTime(objNewRuleHeader)     = $$$INPPGenRuleValidFromTime(objRuleHeader)
	set $$$INPPGenRuleValidToTime(objNewRuleHeader)       = $$$INPPGenRuleValidToTime(objRuleHeader)
	set $$$INPPGenRuleDescription(objNewRuleHeader)       = $$$INPPGenRuleDescription(objRuleHeader)
	set $$$INPPGenRulePricePlanType(objNewRuleHeader)     = $$$INPPGenRulePricePlanType(objRuleHeader)
	set $$$INPPGenRuleStatus(objNewRuleHeader)            = pidStatus
	set $$$INPPGenRuleNotes(objNewRuleHeader)             = $$$INPPGenRuleNotes(objRuleHeader)
	set $$$INPPGenRuleRelatedParentRule(objNewRuleHeader) = $$$INPPGenRuleRelatedParentRule(objRuleHeader)
	set $$$INPPGenRuleCreationMechanism(objNewRuleHeader) = pstrCreationMechanism
 
	set strStatus = $$$Save("INPPGenRule", pidNewRuleHeader, objNewRuleHeader, $$$YES)
 
	if $$$ISOK(strStatus) {
		set idNewRuleLine = 0
		$$$Order3(^INPPLineGenRule,YM,pidRuleHeader,idRuleLine)
			set objNewRuleLine = $get(^INPPLineGenRule(YM,pidRuleHeader,idRuleLine,1))
			set idNewRuleLine  = idNewRuleLine + 1
			set strStatus = $$$Save("INPPLineGenRule", pidNewRuleHeader_$$$COMMA_idNewRuleLine, objNewRuleLine, $$$YES)
			quit:$$$ISERR(strStatus)
			
			set idNewQuantityBreak = 0
			$$$Order4(^INPPLineQtyGenRule,YM,pidRuleHeader,idRuleLine,idQuantityBreak)
				set objNewRuleLineQty  = $get(^INPPLineQtyGenRule(YM,pidRuleHeader,idRuleLine,idQuantityBreak,1))
				set idNewQuantityBreak = idNewQuantityBreak + 1
				set strStatus = $$$Save("INPPLineQtyGenRule", pidNewRuleHeader_$$$COMMA_idNewRuleLine_$$$COMMA_idNewQuantityBreak, objNewRuleLineQty, $$$YES)
				quit:$$$ISERR(strStatus)
			$$$End
			quit:$$$ISERR(strStatus)
		$$$End
	}
 
	quit strStatus
	
RelatedChildrenOfMarketingPlan(pidGenRule)
	;-------------------------------------------------------------------------------
	; Backtrack to my marketing plan and then find all the children of it.
	;
	; Params:
	;
	; ByRefs: This is not really needed as we use & for ByRef parameters now.
	;
	; Returns:
	; A comma separated list of children, ie a,b,c
	;
	; History:
	; 19-Dec-2006	RPW		SR<place SR Number here>: Created
	;-------------------------------------------------------------------------------
 
	// Follow back to my marketing parent
	
	new strChildren,idParent
	
	set strChildren=""
	
	set idParent=$$$INPPGenRuleRelatedParentRule($get(^INPPGenRule(YM,pidGenRule,1)))
	if idParent'="" {
		set strChildren=strChildren_$$RelatedChildrenOfMarketingPlan(idParent)
	} else {
		// Okay we have the marketing parent, let's go forward
		set strChildren=strChildren_$$RelatedChildren(pidGenRule)
		set strChildren=$piece(strChildren,$$$COMMA,1,$length(strChildren,$$$COMMA)-1)
	}
	
	quit strChildren
	
RelatedChildren(pidGenRule)
	;-------------------------------------------------------------------------------
	; Recursively find the children of the current gen rule (if any)
	;
	; Params:
	;
	; ByRefs: This is not really needed as we use & for ByRef parameters now.
	;
	; Returns:
	; A comma separated list of children
	;
	; History:
	; 19-Dec-2006	RPW		SR<place SR Number here>: Created
	;-------------------------------------------------------------------------------
 
	new strChildren,idChild
	
	set strChildren=""
	
	$$$Order4(^INPPGenRules,YM,2,pidGenRule,idChild)
		set strChildren=strChildren_idChild_$$$COMMA_$$RelatedChildren(idChild)
	$$$End
	
	quit strChildren
	
ValidateLineFunctions(pidRuleHeader,pintPricePlanType)
	;-------------------------------------------------------------------------------
	; Loop through all the lines and validate the following rules:
	; Marketing can only use function F0
	; Selling can only use functions F0 and F1
	; Store Managed can only use function F3
	; Default lines can only use function F2 (these have no item or item group)
	;
	; Params:
	;
	; ByRefs: This is not really needed as we use & for ByRef parameters now.
	;
	; Returns:
	; $$$OK if the data is okay, otherwise an error saying why this is invalid.
	;
	; History:
	; 20-Dec-2006	RPW		SR15326: Modified to check for Function 3 usage and errors.
	; 19-Dec-2006	RPW		SR15326: Created
	;-------------------------------------------------------------------------------
 
	new strPricingFormula,strStatus,idLine
	
	$$$Order3(^INPPLineGenRule,YM,pidRuleHeader,idLine)
		set strPricingFormula = $$$INPPLineGenRulePricingFormula($get(^INPPLineGenRule(YM,pidRuleHeader,idLine,1)))
		set strStatus = $$FindFunctionErrors^INBPPGenRule(pidRuleHeader,idLine,strPricingFormula,pintPricePlanType,"IN00591","IN00590","IN00589","IN00593") // SR15326
		if $$$ISOK(strStatus) set strStatus = $$ValidateBreakFunctions(pidRuleHeader,idLine,pintPricePlanType)
		quit:$$$ISERR(strStatus)
	$$$End
	
	quit strStatus
	
ValidateBreakFunctions(pidRuleHeader,pidLine,pintPricePlanType)
	;-------------------------------------------------------------------------------
	; Loop through all the quantity breaks for a line and validate the following rules:
	; Marketing can only use function F0
	; Selling can only use functions F0 and F1
	; Store Managed can only use function F3
	; Default lines can only use function F2 (these have no item or item group)
	;
	; Params:
	;
	; ByRefs: This is not really needed as we use & for ByRef parameters now.
	;
	; Returns:
	;
	; History:
	; 20-Dec-2006	RPW		SR15326: Modified to check for Function 3 usage and errors.
	; 19-Dec-2006	RPW		SR15326: Created
	;-------------------------------------------------------------------------------
	new strStatus,idQtyBreak,strPricingFormula
	
	set strStatus = $$$OK
	$$$Order4(^INPPLineQtyGenRule,YM,pidRuleHeader,pidLine,idQtyBreak)
		set strPricingFormula = $$$INPPLineQtyGenRulePricingFormula($get(^INPPLineQtyGenRule(YM,pidRuleHeader,pidLine,idQtyBreak,1)))
		set strStatus  = $$FindFunctionErrors^INBPPGenRule(pidRuleHeader,pidLine,strPricingFormula,pintPricePlanType,"","IN00594","IN00595","IN00596") // SR15326
		quit:$$$ISERR(strStatus)
	$$$End
	
	quit strStatus
	
IsMarketingRule(pidGenRule)
	;-------------------------------------------------------------------------------
	; Determines if this rule is a marketing rule
	;
	; Params:
	;
	; ByRefs: This is not really needed as we use & for ByRef parameters now.
	;
	; Returns:
	;
	; History:
	; 19-Dec-2006	RPW		SR<place SR Number here>: Created
	;-------------------------------------------------------------------------------
 
	new blnIsMarketing,objGenRule
	
	set blnIsMarketing=$$$NO
	if '$$$NoKey(pidGenRule) {
		set objGenRule=$get(^INPPGenRule(YM,pidGenRule,1))
		set blnIsMarketing=$$IsMarketingObject(objGenRule)
	}
	
	quit blnIsMarketing
	
IsStoreManagedRule(pidGenRule)
	;-------------------------------------------------------------------------------
	; Determines if this rule is a Store managed rule
	;
	; Params:
	;
	; ByRefs: This is not really needed as we use & for ByRef parameters now.
	;
	; Returns:
	;
	; History:
	; 19-Dec-2006	RPW		SR15326: Created
	;-------------------------------------------------------------------------------
 
	new blnIsStore,objGenRule
	
	set blnIsStore=$$$NO
	if '$$$NoKey(pidGenRule) {
		set objGenRule=$get(^INPPGenRule(YM,pidGenRule,1))
		set blnIsStore=$$$INPPGenRulePricePlanType(objGenRule)=$$$EnumINITEMPRICETYPEStoreManaged
	}
	
	quit blnIsStore
	
IsMarketingObject(pobjGenRule)
	quit $$$INPPGenRulePricePlanType(pobjGenRule)=$$$EnumINITEMPRICETYPEMarketingCost
	
SetStatus(pidGenRule,penumStatus)
	;-------------------------------------------------------------------------------
	; Sets the status on this rule
	;
	; Params:
	;
	; ByRefs: This is not really needed as we use & for ByRef parameters now.
	;
	; Returns:
	;
	; History:
	; 19-Dec-2006	RPW		SR<place SR Number here>: Created
	;-------------------------------------------------------------------------------
 
	new objGenRule
	set objGenRule=$get(^INPPGenRule(YM,pidGenRule,1))
	set $$$INPPGenRuleStatus(objGenRule)=penumStatus
	
	quit $$$Save("INPPGenRule",pidGenRule,objGenRule,$$$YES)
	
ValidateLineLocations(pidRuleHeader,penumType)
	;-------------------------------------------------------------------------------
	; Validate that all lines have locations
	;
	; Params:
	;
	; Returns:
	; strStatus
	; 
	; History:
	; 20-Dec-2006	RPW		SR15326: Created
	;-------------------------------------------------------------------------------
 
	new strStatus
	
	set strStatus=$$$OK
	
	if penumType=$$$EnumINITEMPRICETYPEStoreManaged {
		if $data(^INPPLineGenRules(YM,5," ",pidRuleHeader)) {
			set strStatus="IN00601"  ;All Locations must be set for a Store Managed Price Plan Generator.
		}
	}
	
	quit strStatus
	
 
ValidateLineItem(pidRuleHeader,penumType)
	;-------------------------------------------------------------------------------
	; Method Usage
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 20-Dec-2006	RPW		SR15326: Created
	;-------------------------------------------------------------------------------
 
	new strStatus
	
	set strStatus=$$$OK
	
	if penumType=$$$EnumINITEMPRICETYPEStoreManaged {
		if $data(^INPPLineGenRules(YM,4," "," ",pidRuleHeader)) {
			set strStatus="IN00602"  ;All Lines must have either an Item or an Item Group for a Store Managed Price Plan Generator.
		}
	}
	
	quit strStatus
	
ValidateLines(pidRuleHeader)
	;-------------------------------------------------------------------------------
	; Method Usage
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 20-Dec-2006	RPW		SR15326: Created
	;-------------------------------------------------------------------------------
 
	new strStatus
	
	set objGenRule=$get(^INPPGenRule(YM,pidRuleHeader,1))
	set enumType=$$$INPPGenRulePricePlanType(objGenRule)
	
	set strStatus=$$ValidateLineLocations(pidRuleHeader,enumType)
	set:$$$ISOK(strStatus) strStatus=$$ValidateLineItem(pidRuleHeader,$$$INPPGenRulePricePlanType(objRuleHeader))				
	set:$$$ISOK(strStatus) strStatus=$$ValidateLineFunctions(pidRuleHeader,$$$INPPGenRulePricePlanType(objRuleHeader))				
	
	quit strStatus
]]></Routine>
</Export>