<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINAPHCControlAccount" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINAPHCControlAccount
	#include FINHC

CheckControlAccountZCRC(StartDate="",EndDate="",Location,Level="",Result)
	;-------------------------------------------------------------------------------
	; Check Control Account Balance
	;
	; Returns:
	;
	; History:
	; 29-Oct-2004		shobby		Made sure that the amount was initialised to 0.
	; 28-May-2004		shobby 		Need to manage the fact that the ID of the account may be converted for indexing.
	; 26-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
 	;
	new Depth,objFINAPBalance,Amt,Hash,HashValue
	new idFINGLAccount,idAccount,idAccountLast,objFINGLAccountTotal
	new objFINAPSupplier,idFINAPSupplier
	
	if $get(Y)="" d ^WWWVAR
	kill Result  						; Clear Result
	set Depth=$length(Level) 			; Set the detail depth
	if Level'="" {
		set Level=$$Index^FINSYS(Level)
	}
	set idAccount=Level					; Set the idFINAPBalance to Start at the Level ( Optimisation )
	if (idAccount'="")&&($data(^FINAPSuppliers(YM,2,idAccount))) {	; If the Start Account exsits, go back one
		set idAccount=$order(^FINAPSuppliers(YM,2,idAccount),-1) 	
	}
	for {											; Start of the Loop
		set idAccount=$order(^FINAPSuppliers(YM,2,idAccount))
		quit:idAccount=""
		if $extract(idAccount,1,Depth)=Level {  			; If the Account is inside the Level
			set idFINAPSupplier=$order(^FINAPSuppliers(YM,2,idAccount,""))  ; Doesn't matter which Supplier because it is the id of the control account we are interested in.
			set objFINAPSupplier=$get(^FINAPSupplier(YM,idFINAPSupplier,1))
			set idFINGLAccount=$$$FINAPSupplierControlAccount(objFINAPSupplier)
			set objFINGLAccountTotal=$get(^FINGLAccountTotal(YM,idFINGLAccount,"BAL",1))
			set Amt=$$$FCAdd(0,$$$FINGLAccountTotalAmount(objFINGLAccountTotal)) ; Get the Amount
			set Result("Total")=$$$FCAdd($get(Result("Total")),Amt)
			set Hash=$extract(idFINGLAccount,1,Depth+1)
			if Hash="" set Hash="?"
			set HashValue=$zcrc(idFINGLAccount_"="_Amt,7)
			set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
		}
	}
	Quit 1
	

CheckSupplierBalanceZCRC(StartDate="",EndDate="",Location,Level="",Result)
	;-------------------------------------------------------------------------------
	; Check Supplier Accounts for Suppliers that have a control account.
	;
	; Returns:
	;
	; History:
	; 03-Nov-2004		shobby		Reversal of sign for suppliers.
	; 31-May-2004		shobby 		Need to manage the fact that the ID of the account may be converted for indexing.
	; 26-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
 	;
	new Depth,objFINAPBalance,Amt,Hash,HashValue
	new idFINGLAccount,idAccount,idAccountLast,objFINGLAccount
	new idFINAPSupplier,objFINAPSupplier
	
	if $get(Y)="" d ^WWWVAR
	kill Result  				; Clear Result
	set Depth=$length(Level) 			; Set the detail depth
	if Level'="" {
		set Level=$$Index^FINSYS(Level)
	}
	set idAccount=Level					; Set the idFINAPBalance to Start at the Level ( Optimisation )
	if (idAccount'="")&&($data(^FINAPSuppliers(YM,2,idAccount))) {	; If the Start Account exsits, go back one
		set idAccount=$order(^FINAPSuppliers(YM,2,idAccount),-1) 	
	}
	for {											; Start of the Loop
		set idAccount=$order(^FINAPSuppliers(YM,2,idAccount))
		quit:idAccount=""
		if $extract(idAccount,1,Depth)=Level {  			; If the Account is inside the Level
			set idFINAPSupplier=$order(^FINAPSuppliers(YM,2,idAccount,""))  ; Doesn't matter which Supplier because it is the id of the control account we are interested in.
			set objFINAPSupplier=$get(^FINAPSupplier(YM,idFINAPSupplier,1))
			set idFINGLAccount=$$$FINAPSupplierControlAccount(objFINAPSupplier)
			set idFINAPSupplier=""
			set Amt=0
			for {
				set idFINAPSupplier=$order(^FINAPSuppliers(YM,2,idAccount,idFINAPSupplier))
				quit:idFINAPSupplier=""
				set Amt=$$$FCAdd(Amt,$$GetBalance^FINAPSupplier(idFINAPSupplier,5,,$$$NO))
			}
			set Amt=$$$FCSign(Amt)  ;Reversal of sign for suppliers
			set Result("Total")=$$$FCAdd($get(Result("Total")),Amt)
			set Hash=$extract(idFINGLAccount,1,Depth+1)
			if Hash="" set Hash="?"
			set HashValue=$zcrc(idFINGLAccount_"="_Amt,7)
			set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
		}
	}
	quit 1


Check(StartDate="",EndDate="",Location,Level="",Result)
	;-------------------------------------------------------------------------------
	; Compare the balance of Supplier accounts with there control accounts.
	;
	; Returns:
	;
	; History:
	; 03-Nov-2004		shobby		Reversal of sign for suppliers
	; 31-May-2004		shobby 		Need to manage the fact that the ID of the account may be converted for indexing.
	; 26-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
 	;
	new Depth,objFINAPBalance,Amt,Hash,HashValue
	new idFINGLAccount,idAccount,idAccountLast,objFINGLAccount
	new idFINAPSupplier,objFINAPSupplier,strStatus,objFINGLAccountTotal
	
	if $get(Y)="" d ^WWWVAR
	set strStatus=$$$OK
	kill Result  				; Clear Result
	set Depth=$length(Level) 			; Set the detail depth
	if Level'="" {
		set Level=$$Index^FINSYS(Level)
	}
	set idAccount=Level					; Set the idFINAPBalance to Start at the Level ( Optimisation )
	if (idAccount'="")&&($data(^FINAPSuppliers(YM,2,idAccount))) {	; If the Start Account exsits, go back one
		set idAccount=$order(^FINAPSuppliers(YM,2,idAccount),-1) 	
	}
	for {											; Start of the Loop
		set idAccount=$order(^FINAPSuppliers(YM,2,idAccount))
		quit:idAccount=""
		if $extract(idAccount,1,Depth)=Level {  			; If the Account is inside the Level
			set idFINAPSupplier=$order(^FINAPSuppliers(YM,2,idAccount,""))  ; Doesn't matter which Supplier because it is the id of the control account we are interested in.
			set objFINAPSupplier=$get(^FINAPSupplier(YM,idFINAPSupplier,1))
			set idFINGLAccount=$$$FINAPSupplierControlAccount(objFINAPSupplier)
			set idFINAPSupplier=""
			set Amt(1)=0
			for {
				set idFINAPSupplier=$order(^FINAPSuppliers(YM,2,idAccount,idFINAPSupplier))
				quit:idFINAPSupplier=""
				set Amt(1)=$$$FCAdd(Amt(1),$$GetBalance^FINAPSupplier(idFINAPSupplier,,,$$$NO))
				w !,idFINAPSupplier_","_Amt(1)
			}		

			set objFINGLAccountTotal=$get(^FINGLAccountTotal(YM,idFINGLAccount,"BAL",1))
			set Amt(2)=$$$FINGLAccountTotalAmount(objFINGLAccountTotal) ; Get the Amount
			set Amt(1)=$$$FCSign(Amt(1))  ;Reversal of sign for suppliers
			if +Amt(1)'=+Amt(2) {
				set Result("Hash",$$$ErrorNo(Result("Errors")))=$$$Text($lb("Fin00322",idFINGLAccount,Amt(2),Amt(1))) ;"Control Account(%1) balance(%2) does not balance with Supplier Balances(%3)."
				set strStatus='$$$OK
			}
		}
	}
	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}
	quit strStatus
]]></Routine>
</Export>