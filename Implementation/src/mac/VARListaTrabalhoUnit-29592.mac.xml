<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARListaTrabalhoUnit" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARListaTrabalhoUnit
#include WWWConst
#include INConst
#include VARConst

	quit

OnAfterSave
	;-------------------------------------------------------------------------------
    ; Prepara as variáveis para a consulta do usuário.
	;
    ; History:
    ; 13-Out-2011	RGB	Created
    ;-------------------------------------------------------------------------------	

	//Filter
	set $piece(^VARTempListaTrabUnit(YM,YBED,1),Y,1)  = $get(VORG(1))  ; Local
	set $piece(^VARTempListaTrabUnit(YM,YBED,1),Y,2)  = $get(VORG(2))  ; Endereço
	set $piece(^VARTempListaTrabUnit(YM,YBED,1),Y,3)  = $get(VORG(3))  ; Produto
	set $piece(^VARTempListaTrabUnit(YM,YBED,1),Y,4)  = $get(VORG(4))  ; Grupo
	set $piece(^VARTempListaTrabUnit(YM,YBED,1),Y,5)  = $get(VORG(5))  ; Marca
	set $piece(^VARTempListaTrabUnit(YM,YBED,1),Y,6)  = $get(VORG(6))  ; Ordenar Por
	set $piece(^VARTempListaTrabUnit(YM,YBED,1),Y,7)  = $get(VORG(7))  ; Direção
	
	do VARLogAfterSave^VARUtil(YBED,YFORM)
	do GoToForm^COMUtilForm("VARListaTrabalhoUnit",1,,,,,)
	
	quit

OnAfterDataFields
	;-------------------------------------------------------------------------------
	; Rotina que prepara a pesquisa, busca os dados e monta a tabela com os resultados
	;
	; History:
	; 13-Out-2011 RGB Created
	;-------------------------------------------------------------------------------
	new lstHeader, count, idOrdem, idStatus, idProduto, fltQuantidade, idMarca, strLote,
		dteValidade, param, descStatus, criadoEm, criadoPor, arrayResponse, Location, EndUnitPadrao,
		idGroup

	quit:('$$isAfterSaveLogged^VARUtil(YBED,YFORM))
	do ClearVARLogAterSave^VARUtil(YBED,YFORM)
	
	kill ^VARListaTrabalhoUnitTemp(YBED)
	set lstHeader = ""
	;set lstHeader = lstHeader_$listbuild("","N°. Ordem","N°. Recebimento","Ordem Manual","Cód.","Produto","Quantidade","Unidade","Marca","Lote","Validade","Cód. Grupo","Desc. Grupo","Criado Por","Criado Em","Status","Cancelar","Processar")
	set lstHeader = lstHeader_$listbuild("","N°. Ordem","N°. Recebimento","Cód.","Produto","Quantidade","UN","Marca","Lote","Validade","Status","Abastecimento","Cancelar","Processar")
	
	set Location = YLOCATION
	set objLocation = $get(^WWW0121(YM,YM,Location,1)) //Getting location data
	quit:(objLocation = "")
	
	set EndUnitPadrao = $$$WWW0121FREE14(objLocation) //Getting standard stock location for unitarization
	quit:(EndUnitPadrao = "")	
	
	set objTemp = $get(^VARTempListaTrabUnit(YM,YBED,1))
	set idProduto 		= $piece(objTemp,Y,3)
	set idGroup   		= $piece(objTemp,Y,4)
	set idMarca	  		= $piece(objTemp,Y,5)
	set idOrder	  		= $piece(objTemp,Y,6)
	set idOrientation	= $piece(objTemp,Y,7)
	
	set count = 0
	
	new arrayResponse, arrayWorkList
	set arrayResponse = ""
	set arrayWorkList = ""
	//set orderParam="D" //P for Priority
	
	do GetListaTrabalhoUnit(Location,EndUnitPadrao,.arrayWorkList,idProduto,idGroup,idMarca)
	do ReOrderResult(.arrayWorkList,.arrayResponse,idOrder,Location,idOrientation)
	
	set count = ""
	set count = $order(arrayResponse(count))
	
	if $$Start^COMTable(lstHeader,"Ordens de fracionamento pendentes no local") {
		while count '= "" {
			
			set idOrdem        = $piece(arrayResponse(count),Y,17)
			set idStatus       = $piece(arrayResponse(count),Y,18)
			set idProduto      = $piece(arrayResponse(count),Y,1)
			set idReceipt	   = $piece(arrayResponse(count),Y,4)
			set strManual	   = $piece(arrayResponse(count),Y,3)
			set strDescProduto = $piece(arrayResponse(count),Y,2)
			set fltQuantidade  = $piece(arrayResponse(count),Y,8)
			set strUOM		   = $piece(arrayResponse(count),Y,5)
			set idMarca		   = $piece(arrayResponse(count),Y,16)
			set strLote		   = $piece(arrayResponse(count),Y,12)
			set dteValidade    = $piece(arrayResponse(count),Y,13)
			set criadoEm       = $piece(arrayResponse(count),Y,15)	
			set idGroup		   = $piece(arrayResponse(count),Y,9)
  			set strGroupDesc   = $piece(arrayResponse(count),Y,10)
  			set strProgram	   = $piece(arrayResponse(count),Y,14)
		 	if dteValidade'="" set dteValidade=$zdate(dteValidade,4)
			set criadoPor = YBED
			
			set strAbastecimento=$$GetPorcentAbastecimentoUnit(arrayResponse,idProduto,Location,EndUnitPadrao)
			set strAbastecimento=strAbastecimento*100
			set strAbastecimento=$piece(strAbastecimento,".",1)
			set strAbastecimento=strAbastecimento_"%"

			set param = "STATUSUNITARIZACAO"_Y_idStatus
	
			if (idStatus '= "") {
				set descStatus = $$SQLGetUserParamDescVAR^VARSQL(param)
			} else {
				set descStatus = ""
			}
			
			do NewLine^COMTable()
			do InsertCell^COMTable(count)
			do InsertCell^COMTable(idOrdem,"VAROrdemUnitarizacao",idOrdem)
			
			if (idReceipt = "") {			
				do InsertCell^COMTable("Ordem manual")
			} else {
				do InsertCell^COMTable($piece(idReceipt,",",1),"INReceipt",$piece(idReceipt,",",1))
			}
			
			do InsertCell^COMTable(idProduto)
			do InsertCell^COMTable(strDescProduto,,,,,,,,,$$$YES)
			do InsertCell^COMTable($$^WWWTR(0,12,fltQuantidade),,,,"RIGHT")
			do InsertCell^COMTable($piece(strUOM," - ",1))
			do InsertCell^COMTable($$GetBrandName^VARINBrand(idMarca))
			do InsertCell^COMTable(strLote)
			do InsertCell^COMTable(dteValidade)
			;do InsertCell^COMTable(idGroup)
			;do InsertCell^COMTable(strGroupDesc)
			;do InsertCell^COMTable(criadoPor)			
			;do InsertCell^COMTable($zdt(criadoEm,4))
			do InsertCell^COMTable("<font color='blue'>"_descStatus_"</font>")
			//do InsertCell^COMTable("<img src="_YGIF_"small_x.gif TITLE='Cancelar Ordem/Sugestão de Fracionamento' border=0 align=""CENTER"" onclick='EventValue("""_YUCI_""","""_YUSER_""","""_YFORM_""",""FIX"","""_"CancelOrder^VARListaTrabalhoUnit"_""","""_count_""",""6"",this.id);'>",,,,"CENTER")
			
			do InsertCell^COMTable(strAbastecimento,,,,"RIGHT")
			set pstrRoutine="CancelOrder^VARListaTrabalhoUnit"
			set pstrParams=count
			set pstrText="<img src="_YGIF_"small_x.gif TITLE='Cancelar Ordem/Sugestão de Fracionamento' border=0 align=""CENTER"">"
			do InsertCellCallback^COMTable(pstrText,pstrRoutine,pstrParams)
			
			set pstrRoutine="ProcessOrder^VARListaTrabalhoUnit"
			set pstrParams=count
			set pstrText="<img src="_YGIF_"small_check.gif TITLE='Processar Ordem de Fracionamento' border=0 align=""CENTER"">"
			do InsertCellCallback^COMTable(pstrText,pstrRoutine,pstrParams)
			
			//do InsertCell^COMTable("<img src="_YGIF_"small_check.gif TITLE='Processar Ordem de Fracionamento' border=0 align=""CENTER"" onclick='EventValue("""_YUCI_""","""_YUSER_""","""_YFORM_""",""FIX"","""_"ProcessOrder^VARListaTrabalhoUnit"_""","""_count_""",""6"",this.id);'>",,,,"CENTER")
			//do InsertCellCallback^COMTable("<img src="_YGIF_"small_check.gif TITLE='Processar Ordem de Fracionamento' border=0 align=""CENTER""",pstrRoutine,count)
			do EndLine^COMTable()
			
			set ^VARListaTrabalhoUnitTemp(YBED,count) = arrayResponse(count)
			set count = $order(arrayResponse(count))
		}
		
		do Stop^COMTable()
	}
	
	quit

CancelOrder(pYKEY="",checked="")
	;-------------------------------------------------------------------------------
	; Rotina para cancelar uma ordem não finalizada, ou cancelar uma sugestão de fracionamento.
	; Caso seja uma sugestão baseada no recebimento, a rotina marca no recebimento que a sugestão será ignorada.
	;
	; History:
	; 13-Out-2011 RGB Created
	;-------------------------------------------------------------------------------
	new tempObj,UnitObj
	set tempObj = $get(^VARListaTrabalhoUnitTemp(YBED,pYKEY))
	
	if $piece(tempObj,Y,17) '= "" { //Checking for Unitarization Order
		set UnitObj=$get(^VAROrdemUnitarizacao(YM,$piece(tempObj,Y,17),1))
		if UnitObj="" {
			$$$Alert("Não foi possível cancelar a ordem de fracionamento. Ordem Inexistente, atualizando a tela...")
			do GoToForm^COMUtilForm("VARListaTrabalhoUnit",YKEY,,,,,)
			quit $$$YES
		}
		
		if (($$$VAROrdemUnitarizacaoStatus(UnitObj)<3) || ($$$VAROrdemUnitarizacaoStatus(UnitObj)="")) {
		
			set strStatus = $$KILL^COMUtils("VAROrdemUnitarizacao",$piece(tempObj,Y,17))
		
			if $$$ISOK(strStatus) {
			
				$$$Alert("Ordem de fracionamento cancelada com sucesso.")
				do GoToForm^COMUtilForm("VARListaTrabalhoUnit",YKEY,,,,,)
				quit $$$YES
		
			} else {
				$$$Alert("Não foi possível cancelar a ordem de fracionamento. Favor verificar o erro->"_strStatus)
			}
		}else {
			$$$Alert("Ordem de fracionamento está em execução ou concluída, não pode mais ser cancelada.")	
		}
	}
	
	
	if $piece(tempObj,Y,17) = "" { //If there's no Order, cancel the suggestion
		set recKey = $piece(tempObj,Y,4)
		set recKeyObj = ""
		set recKeyObj = $get(^INRECLine(YM,$piece(recKey,",",1),$piece(recKey,",",2),1))
		set $$$INRECLineFREE14(recKeyObj) = 1
		
		set strStatus = $$Save^COMUtils("INRECLine",recKey,recKeyObj,1)
		
		if $$$ISOK(strStatus) {
			$$$Alert("Sugestão de fracionamento cancelada com sucesso.")
			do GoToForm^COMUtilForm("VARListaTrabalhoUnit",YKEY,,,,,)
			quit $$$YES
		
		} else {
			$$$Alert("Não foi possível cancelar a sugestão de fracionamento. Favor verificar o erro->"_strStatus)
		}
	}

	quit $$$YES

ProcessOrder(pYKEY="",checked="")
	;-------------------------------------------------------------------------------
	; Rotina que, caso exista uma Ordem, leva o usuário para a ordem.
	; Caso seja uma sugestão baseada no recebimento, a rotina cria uma ordem de unitarizacao.
	;
	; History:
	; 13-Out-2011 RGB Created
	;-------------------------------------------------------------------------------
	set tempObj = $get(^VARListaTrabalhoUnitTemp(YBED,pYKEY))
	
	if $piece(tempObj,Y,17) '= "" { //Checking for Unitarization Order
		do GoToForm^COMUtilForm("VAROrdemUnitarizacao",$piece(tempObj,Y,17),,,,,)
	
	} else {
		set recKey = $piece(tempObj,Y,4)
		if $get(^CacheTempSemaphore("VARListaTrabalhoUnit",recKey))>=1 {
		}else {
			
			set ^CacheTempSemaphore("VARListaTrabalhoUnit",recKey)=1
			$$$Alert("Gerando Ordem de Fracionamento, por favor aguarde.")
			set keyUnitarizacao = $$^WWWNEXT("VAROrdemUnitarizacao")
			set strStatus = $$Transaction^COMTransaction("ProcessOrderTxn^VARListaTrabalhoUnit("""_recKey_""","""_pYKEY_""","""_keyUnitarizacao_""")", $$$YES)		
			if $$$ISOK(strStatus) {
				set $piece(^VARListaTrabalhoUnitTemp(YBED,pYKEY),Y,17)=keyUnitarizacao
				$$$Alert("Ordem de fracionamento gerada com sucesso.")
				//kill ^CacheTempSemaphore("VARListaTrabalhoUnit",recKey)
				do GoToForm^COMUtilForm("VAROrdemUnitarizacao",keyUnitarizacao,,,,,)
				quit $$$YES
		
			} else {
				$$$Alert("Não foi possível gerar a ordem de fracionamento. Favor verificar o erro->"_strStatus)
				kill ^CacheTempSemaphore("VARListaTrabalhoUnit",recKey)
			}
		}
	}

	quit $$$YES
	
ProcessOrderTxn(recKey,pYKEY,keyUnitarizacao)
	;-------------------------------------------------------------------------------
	; Rotina de transação para processar uma ordem, salvando na INRECLine que a sugestão será ignorada
	; e criar a Ordem de Fracionamento
	;
	; History:
	; 13-Out-2011 RGB Created
	;-------------------------------------------------------------------------------
	new recKeyObj
	set strStatus=1
	set recKeyObj = ""
	set recKeyObj = $get(^INRECLine(YM,$$$KEY1(recKey),$$$KEY2(recKey),1))
	if recKeyObj="" q 0_"~Erro! Recebimento não existe mais no sistema"
	
	set $$$INRECLineFREE14(recKeyObj) = 1
		
	set strStatus = $$Save^COMUtils("INRECLine",recKey,recKeyObj,1)
	if $$$ISOK(strStatus) set strStatus = $$CreateUnitOrder(YBED,pYKEY,keyUnitarizacao)
	
	q strStatus

ReOrderResult(&oldResultSet,&newResultSet,orderParam,pidLocal,pOrientation)
	;-------------------------------------------------------------------------------
	; Rotina que recebe um conjunto de resultados e ordena estes de acordo com o parâmetro:
	; C - Código do Produto
	; D - Descrição do Produto
	; P - Prioridade (Baseado na relação entre o estoque maximo e a sugestao de compra/abstecimento)
	;
	; pOrientation define se a rotina irá ordenar de forma ascendente ou descendente
	;
	; History:
	; 11-Apr-2012 RGB Alteração no calculo de prioridade, retirando a sugestão e pegando o estoque em locais não bloqueados
	; 13-Out-2011 RGB Created
	;------------------------------------------------------------------------------- 
	new tempResultSet, count, pPercentage, pEM, pSugestao, newCount, pEstoque,pEstoqueUnit,EndUnitPadrao,pEstoqueBlocked
	
	//set Location = YLOCATION
	set objLocation = $get(^WWW0121(YM,YM,pidLocal,1)) //Getting location data
	//quit:(objLocation = "")
	
	set EndUnitPadrao = $$$WWW0121FREE14(objLocation) //Getting standard stock location for unitarization
	
	//if pOrientation=1 set pOrientation=-1
	if pOrientation=2 set pOrientation=-1
	if pOrientation=""  set pOrientation=1
	
	if (orderParam = "") {
		set orderParam = "P"
	}
	
	if orderParam = "C" {
		//Order by product code
		$$$Order1(oldResultSet,count)
			set tempResultSet($piece(oldResultSet(count),Y,1),count) = 1
		$$$End
	}
	
	if orderParam = "D" {
		//Order by product description
		$$$Order1(oldResultSet,count)
			set tempResultSet($piece(oldResultSet(count),Y,2),count) = 1
		$$$End
	}
	
	if orderParam = "P" {
		//Order by forecasting priority
		$$$Order1(oldResultSet,count)
			set idProduto = $piece(oldResultSet(count),Y,1)
			set pPercentage=$$GetPorcentAbastecimentoUnit(oldResultSet,idProduto,pidLocal,EndUnitPadrao)
			set tempResultSet(pPercentage,count)=1
		$$$End
	}
	
	//Create response array
	set newCount=0
	set order=""
	set order=$order(tempResultSet(order),pOrientation)
	while order'=""{
		$$$Order2(tempResultSet,order,count)
			set newCount=newCount+1
			set newResultSet(newCount)=oldResultSet(count)
		$$$End
		set order=$order(tempResultSet(order),pOrientation)
	}
	
	quit
	
CreateUnitOrder(pUser="",pKEY="",keyUnitarizacao)
	;-------------------------------------------------------------------------------
	; Rotina que cria uma entrada na VAROrdemUnitarizacao, baseada na linha escolhida na Lista de Trabalho.
	; A ordem é criada baseada em uma sugestão de recebimento realizada no endereço de fracionamento do local.
	;
	; History:
	; 13-Out-2011 RGB Created
	;-------------------------------------------------------------------------------

	if pKEY="" quit 0_"Não há linha para ser processada."
	new tempObj,idLocal,strEndereco,idProduto,fltQuantidade,idMarca,strLote,dteValidade,idRecebimento
	
	set tempObj = $get(^VARListaTrabalhoUnitTemp(YBED,pYKEY))
	
	//Data
	set strStatus = $$$OK
	
	//set keyUnitarizacao = $$^WWWNEXT("VAROrdemUnitarizacao")	
	set objUnitarizacao = ""
	
	set $$$VAROrdemUnitarizacaoLocal1(objUnitarizacao)         = $piece(tempObj,Y,19)
	set $$$VAROrdemUnitarizacaoEndArmazenagem(objUnitarizacao) = $piece(tempObj,Y,20)	
	set $$$VAROrdemUnitarizacaoProduto(objUnitarizacao)    	   = $piece(tempObj,Y,1)
	set $$$VAROrdemUnitarizacaoQuantidade(objUnitarizacao) 	   = $piece(tempObj,Y,8)
	set $$$VAROrdemUnitarizacaoMarca(objUnitarizacao) 	   	   = $piece(tempObj,Y,16)
	set $$$VAROrdemUnitarizacaoLote(objUnitarizacao) 	   	   = $piece(tempObj,Y,12)
	set $$$VAROrdemUnitarizacaoValidade(objUnitarizacao)   	   = $piece(tempObj,Y,13)
	set $$$VAROrdemUnitarizacaoStatus(objUnitarizacao)     	   = 0 ;0-Em Aberto
	set $$$VAROrdemUnitarizacaoRecebimento(objUnitarizacao)	   = $piece(tempObj,Y,4)
	
	set strStatus = $$$Save("VAROrdemUnitarizacao",keyUnitarizacao,objUnitarizacao,1)		
	//set unitKey = keyUnitarizacao
	
	quit strStatus
	
GetListaTrabalhoUnit(Location,StorageLocation,&arrayResponse,filterItem="",filterGroup="",filterBrand="")
	;-------------------------------------------------------------------------------
	; Rotina para pesquisar sugestões de ordens, 
	; baseadas em recebimentos realizados para o endereço de fracionamento de um determinado local, assim como
	; ordens criadas manualmente pelo formulario VAROrdemUnitarizacao
	;
	;
	; History:
	; 05-Mar-2011 Gustavo	Alterado - evitando erro de subscript caso não encontre a descrição da unidade 
	;						de medida
	; 13-Out-2011 RGB 		Created
	;-------------------------------------------------------------------------------
	new Item, ItemDesc, Manual, Receipt, UOM, RecUOM, RecQuantity, Quantity, ItemGroup, GroupDesc, ItemDesc, 
		LotNumber, Expiration, Program, DateReceived, Brand, WorkID, WorkStatus, itemObj
	
	#Dim tRS As %Library.ResultSet	

	set count = 0
	
	//Retrieving calculated orders
	set tSQL = "SELECT L.Item, "_
					 " L.ItemDescription, "_ 
					 " L.LotNumber, "_
					 " L.ExpirationDate, "_
					 " L.Program1, "_
					 " L.Quantity, "_
					 " L.Brand, "_
					 " L.ReceiptNumber, "_
					 " L.LineNumber, "_
					 " L.ReceivedUnit, "_
					 " L.Unit, "_
					 " L.UnitQuantity "_
		 	    
		 	    " FROM SQLUser.INRECLine L "_
		 	    " JOIN SQLUser.INREC H on (H.ReceiptNumber = L.ReceiptNumber)"_
		 	  
		 	   " WHERE L.Location='"_Location_"' "_
		 	   "   AND L.StockLocation='"_StorageLocation_"' "_
		 	   "   AND L.ReversedByREC is null "_
		 	   "   AND L.Free14 is null "_
		 	   "   AND H.Type = 2"_
		 	   "   AND H.TypeofReceiving =1"_
		 	   "   AND H.Status=1"
		 	   
	if (filterItem '= "") {
		set tSQL = tSQL_" AND L.Item = '"_filterItem_"'"
	}
		
	if (filterBrand '= "") {
		set tSQL = tSQL_" AND L.Brand = '"_filterBrand_"'"
	}
	
	set tRs = ##class(%Library.ResultSet).%New()
	set tRs.RuntimeMode = "0"	
	
	do tRs.Prepare(tSQL) 
	do tRs.Execute()
    
    while tRs.Next() {	
    
    	set count = $increment(count)
    	set Retrieve = 1
    	
    	set Item="", ItemDesc="", Manual="", Receipt="", UOM="", RecUOM="", RecQuantity="", 
    	    Quantity="", ItemGroup = "", GroupDesc = "", ItemDesc="", LotNumber="", Expiration="",
    	    Program="", DateReceived="", Brand="", WorkID=""
    	
		set Item = tRs.Data("Item")
		set itemObj = $get(^INART(YM,Item,1))
		
    	set ItemDesc	= tRs.Data("ItemDescription")
    	set Receipt		= tRs.Data("ReceiptNumber")
    	set LineNumber	= tRs.Data("LineNumber")
    	set Receipt		= Receipt_","_LineNumber
    	set RecQuantity = tRs.Data("UnitQuantity")
    	set Quantity	= tRs.Data("Quantity")
    	set ItemDesc	= tRs.Data("ItemDescription")
    	set LotNumber	= tRs.Data("LotNumber")
    	set Expiration	= tRs.Data("ExpirationDate")
    	set Program		= tRs.Data("Program1")
    	set Brand		= tRs.Data("Brand")
    	
    	set Manual 	   = 0
    	set WorkStatus = 0
    	
    	set DateReceived = $$$INRECProcessedDate($get(^INREC(YM,Receipt,1)))
    	
    	set UOM = $$$INARTBaseUnit(itemObj)    	
    	if (UOM '= "") {
    		set UOM	 = $$$WWW101Text($get(^WWW101(YM,"EINHEIT",SPRACHE,UOM,1)))    	
    	}
    	
    	set RecUOM = tRs.Data("ReceivedUnit")    	
    	if (RecUOM '= "") {
    		set RecUOM = $$$WWW101Text($get(^WWW101(YM,"EINHEIT",SPRACHE,RecUOM,1)))
    	}
    	
    	set ItemGroup = $$$INARTItemGroup(itemObj)
  		
  		set GroupDesc = $$$INItemGroupDescription($get(^INItemGroup(YM,ItemGroup,1)))
  		
  		if (filterGroup '= "") {
	  		if (filterGroup '= ItemGroup) {
		  		set Retrieve = 0
	  		}
  		}
  		//Save response if filter is ok
  		
  		if (Retrieve = 1) {
	  		set $piece(arrayResponse(count),Y,1)  = Item
	  		set $piece(arrayResponse(count),Y,2)  = ItemDesc
	  		set $piece(arrayResponse(count),Y,3)  = Manual
	  		set $piece(arrayResponse(count),Y,4)  = Receipt
	  		set $piece(arrayResponse(count),Y,5)  = UOM
	  		set $piece(arrayResponse(count),Y,6)  = RecUOM
	  		set $piece(arrayResponse(count),Y,7)  = RecQuantity
	  		set $piece(arrayResponse(count),Y,8)  = Quantity
	  		set $piece(arrayResponse(count),Y,9)  = ItemGroup
	  		set $piece(arrayResponse(count),Y,10) = GroupDesc
	  		set $piece(arrayResponse(count),Y,11) = ItemDesc
	  		set $piece(arrayResponse(count),Y,12) = LotNumber
	  		set $piece(arrayResponse(count),Y,13) = Expiration
	  		set $piece(arrayResponse(count),Y,14) = Program
	  		set $piece(arrayResponse(count),Y,15) = DateReceived
	  		set $piece(arrayResponse(count),Y,16) = Brand
	  		set $piece(arrayResponse(count),Y,17) = WorkID
	  		set $piece(arrayResponse(count),Y,18) = WorkStatus
	  		set $piece(arrayResponse(count),Y,19) = Location
	  		set $piece(arrayResponse(count),Y,20) = StorageLocation
  		}
    }		 
	
	if $IsObject(tRs) {
		Do tRs.Close()
	}
	
	//Retrieving Manual Orders
	set tSQL = "SELECT Produto, "_
					 " Lote, "_
					 " Validade, "_
					 " Quantidade, "_
					 " Marca, "_
					 " Recebimento, "_
					 " CodOrdemUnitarizacao, "_
					 " CriadoEm ,"_
					 " Status "_
		 	    
		 	   "  FROM SQLUser.VAROrdemUnitarizacao "_
		 	   
		 	   " WHERE Local1 = '"_Location_"' "_
		 	   "   AND EndArmazenagem = '"_StorageLocation_"' "_
		 	   "   AND Status < 4"
		 	   
	if (filterItem '= "") {
		set tSQL = tSQL_" AND Produto='"_filterItem_"'"
	}
	
	if (filterBrand '= "") {
		set tSQL = tSQL_" And Marca='"_filterBrand_"'"
	}
	
	set tRs = ##class(%Library.ResultSet).%New()
	set tRs.RuntimeMode = "0"	
	
	do tRs.Prepare(tSQL) 
	do tRs.Execute()
    
    while tRs.Next() {	
    	set count = $increment(count)
    	set Retrieve = 1
    	
    	set Item="", ItemDesc="", Manual="", Receipt="", UOM="", RecUOM="", RecQuantity="", Quantity="",
    		ItemGroup="", GroupDesc="", ItemDesc="", LotNumber="", Expiration="", Program="", DateReceived="", 
    		Brand="", WorkID="", WorkStatus=""
    	
		set Item     = tRs.Data("Produto")
		set itemObj  = $get(^INART(YM,Item,1))
		
    	set ItemDesc = $$$INARTSearchName(itemObj)
    	
    	set Receipt	   = tRs.Data("Recebimento")
    	set Quantity   = tRs.Data("Quantidade")
    	set LotNumber  = tRs.Data("Lote")
    	set Expiration = tRs.Data("Validade")
    	set Program	   = ""  //FIX ME
    	set Brand	   = tRs.Data("Marca")
    	set WorkStatus = tRs.Data("Status")
    	set WorkID	   = tRs.Data("CodOrdemUnitarizacao")
    	set Manual	   = 0
    	
    	if (Receipt="") {
	    	set Manual = 1
    	}
    	
    	set DateReceived = tRs.Data("CriadoEm")
    	
    	if (Receipt '= "") {
	    	set DateReceived = $$$INRECProcessedDate($get(^INREC(YM,Receipt,1)))
    	}
    	
    	set UOM = $$$INARTBaseUnit(itemObj)    	
    	if (UOM) {
    		set UOM = $$$WWW101Text($get(^WWW101(YM,"EINHEIT",SPRACHE,UOM,1)))
    	}

    	set ItemGroup = $$$INARTItemGroup(itemObj)
  		set GroupDesc = $$$INItemGroupDescription($get(^INItemGroup(YM,ItemGroup,1)))
  		
  		if (filterGroup '= "") {
	  		if (filterGroup '= ItemGroup) {
		  		set Retrieve = 0
	  		}
  		}
  		
  		//Save response
  		if Retrieve = 1 {
	  		set $piece(arrayResponse(count),Y,1)  = Item
	  		set $piece(arrayResponse(count),Y,2)  = ItemDesc
	  		set $piece(arrayResponse(count),Y,3)  = Manual
	  		set $piece(arrayResponse(count),Y,4)  = Receipt
	  		set $piece(arrayResponse(count),Y,5)  = UOM
	  		set $piece(arrayResponse(count),Y,6)  = RecUOM
	  		set $piece(arrayResponse(count),Y,7)  = RecQuantity
	  		set $piece(arrayResponse(count),Y,8)  = Quantity
	  		set $piece(arrayResponse(count),Y,9)  = ItemGroup
	  		set $piece(arrayResponse(count),Y,10) = GroupDesc
	  		set $piece(arrayResponse(count),Y,11) = ItemDesc
	  		set $piece(arrayResponse(count),Y,12) = LotNumber
	  		set $piece(arrayResponse(count),Y,13) = Expiration
	  		set $piece(arrayResponse(count),Y,14) = Program
	  		set $piece(arrayResponse(count),Y,15) = DateReceived
	  		set $piece(arrayResponse(count),Y,16) = Brand
	  		set $piece(arrayResponse(count),Y,17) = WorkID
	  		set $piece(arrayResponse(count),Y,18) = WorkStatus
	  		set $piece(arrayResponse(count),Y,19) = Location
	  		set $piece(arrayResponse(count),Y,20) = StorageLocation
  		
  		}
    }		 
	
	if $IsObject(tRs) {
		do tRs.Close()
	}
	
	quit

GetPorcentAbastecimentoUnit(ResultSet,idProduto,pidLocal,EndUnitPadrao)
	set pPercentage = 0
	set pEM = $$GetEstoqueMaximo^VARReposicao(idProduto,pidLocal)
	set pEstoque=##class(alSOH.iSOH).GetQtyAvailable(idProduto,pidLocal,,1)
	set pEstoqueUnit=##class(alSOH.iSOH).GetQtyAvailable(idProduto,pidLocal,EndUnitPadrao)
	set EstoqueEmProcessoUnit=$$GetEstoqueEmProcessoUnit(ResultSet,idProduto)
	set pEstoque=pEstoque-pEstoqueUnit+EstoqueEmProcessoUnit
	if pEstoque<0 set pEstoque=0
	if ( (pEstoque>0) && (pEM>0) ) {
		set pPercentage = pEstoque/pEM
	}
	if pEM=0 set pPercentage=1
	
	q pPercentage
	
GetEstoqueEmProcessoUnit(resultSet,idProduto) 
	set returnQty=0
	$$$Order1(resultSet,sequence)
		if (($piece(resultSet(sequence),Y,1)=idProduto) && ($piece(resultSet(sequence),Y,17)'="")) {
			set returnQty=returnQty+$piece(resultSet(sequence),Y,8)
		}
	$$$End
	q returnQty
]]></Routine>
</Export>