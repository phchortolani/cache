<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMUtilCallBacks" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMUtilCallBacks
#include COMSYS
 
 ;----------------------------------------------------------------------------------
 /*  Sample of output
 ; Class or Form INKUNDERFID 1 Entries
 if $$^INGEMSTYLE()                                 ; WWW120 / Stylesheet CSS File  (83) / 0,INKUNDERFID
 
 ; Class or Form INKUNDESUCH 2 Entries
 ; #D ^INSUCH("INKUNDESUCH")                        ; WWW120 / Execute After Save(16) / 0,INKUNDESUCH
 D SUCH^INSUCH("INKUNDE")                           ; WWW120 / Execute After Data Fields  (59) / 0,INKUNDESUCH
 */ 
 ;----------------------------------------------------------------------------------
 
 
Build()
	;-------------------------------------------------------------------------------
	; Scan every WWW global looking for fields that may contain code. Then creates a routine 
	; for each module that contains the code and class/field/reference
	; 
	; Called By : WWWTAG (Edit Auto Executes)
	; 
	; History:
	; 08-Sep-2011	shobby	SR17847: Hooks
	; 04-Apr-2011	GRF		-: Added further classes containing routine calls
	; 19-Oct-2010	shobby	SR17295.2: Replacement for $order(^$Global for improved performance.
	; 19-Oct-2010	GRF		SR17295.1: COMDCMEvent & COMDCMMethod didn't have "^" to
	;							be stripped off in ProcessClass
	; 12-May-2010	shobby	SR17295: Include REPReport.
	; 27-Apr-2010	GRF		SR17228: Added COMGridEditParameter; cleanup code
	; 28-Sep-2009	SCR		Added - SALINFOCommand, SALCSTButton, SALCSTFunction, SALCSTGrid
	; 28-Sep-2009	SCR		Use Commom process class code
	; 11-Sep-2009	GRF		Also check ^COMDCMEvent
	; 01-Sep-2009	GRF		Exclude ^WWWOUT - data for FORMDAT.TXT in release build
	; 20-May-2009	GRF		Exclude ^WWWWSLog error log - may be other audit globals
	; 							that should be skipped as well
	; 02-Dec-2008	GRF		Don't include encrypted passwords
	; 09-Oct-2008	SCR		Created
	;-------------------------------------------------------------------------------
	new idClass,idEvent,idMethod,intCount,intField,intType,objClass,objField,objGlobal,objRtn
	new strCode,strEntry,strField,strFieldName,strGlo,strID,strKeys,strLastTime
	new strModule,strRecord,strRtn,strSpaces
	
	do ^WWWVAR
	set strSpaces = $justify("",50)
	kill ^CacheTemp(YUSER)
	
	set strLastTime = $horolog
	
	write !
	
	; WWW* Globals : All fields
	;---------------------------------------
	set intCount = 0

	;SR17295.2 vvvvvvvvvvvvvvvvv
	do Global^COMSYSGlobalQuery(.objGlobal,"^WWW",$$$NO)
	set strGlo=""
	for {
		set strGlo=$order(objGlobal(strGlo))
		quit:strGlo=""
		continue:strGlo="^WWWWSLog"
		continue:strGlo="^WWWBENCH"
		continue:strGlo="^WWW1261"
		continue:strGlo="^WWWOUT"                          ; temp build structure

		set idClass = $extract(strGlo,2,99)
		if $$ClassOK(idClass) {                            ; Check if the class is ok to scan 
			do ProcessClass(strGlo,.strLastTime,.intCount)
		}
	}
	;SR17295.2 set strGlo   = "^WWW"
	;SR17295.2 for {
	;SR17295.2 	set strGlo = $order(^$Global(strGlo))
	;SR17295.2 	quit:strGlo=""
	;SR17295.2 	quit:($extract(strGlo,2,4)'="WWW")
	;SR17295.2 	continue:strGlo="^WWWWSLog"
	;SR17295.2 	continue:strGlo="^WWWOUT"                          ; temp build structure
	
	;SR17295.2 	set idClass = $extract(strGlo,2,99)
	;SR17295.2 	if $$ClassOK(idClass) {                            ; Check if the class is ok to scan 
	;SR17295.2 		do ProcessClass(strGlo,.strLastTime,.intCount)
	;SR17295.2 	}
	;SR17295.2 }
	;SR17295.2 ^^^^^^^^^^^^^^^^^^

	; Other Classes
	;---------------------------------------
	do ProcessClass("^COMDCMEvent",.strLastTime,.intCount)
	do ProcessClass("^COMDCMMethod",.strLastTime,.intCount)
	do ProcessClass("^SALINFOCommand",.strLastTime,.intCount)
	do ProcessClass("^SALCSTButton",.strLastTime,.intCount)
	do ProcessClass("^SALCSTFunction",.strLastTime,.intCount)
	do ProcessClass("^SALCSTGrid",.strLastTime,.intCount)
	do ProcessClass("^COMGridEditParameter",.strLastTime,.intCount) ; SR17228
	; SR17295 vvv
	do ProcessClass("^REPReport",.strLastTime,.intCount)            
	do ProcessClass("^REPParameter",.strLastTime,.intCount)
	; 04-Apr-2011 vvv
	do ProcessClass("^INREPLSYS",.strLastTime,.intCount)            
	do ProcessClass("^REPRep",.strLastTime,.intCount)            
	do ProcessClass("^REPTemp",.strLastTime,.intCount)
	do ProcessClass("^REPTempInp",.strLastTime,.intCount)
	do ProcessClass("^SALButtonEnabled",.strLastTime,.intCount)
	do ProcessClass("^SALForm",.strLastTime,.intCount)
	do ProcessClass("^SALFormField",.strLastTime,.intCount)
	do ProcessClass("^SALINFOCommand",.strLastTime,.intCount)
	do ProcessClass("^STKBarcodeRelation",.strLastTime,.intCount)
	do ProcessClass("^STKBarcodeType",.strLastTime,.intCount)
	do ProcessClass("^WWWDRAGDROP",.strLastTime,.intCount)
	do ProcessClass("^WWW120Scan",.strLastTime,.intCount)
	do ProcessClass("^WWW001Hook",.strLastTime,.intCount)     ;SR17847
	do ProcessClass("^WWW001VARHooks",.strLastTime,.intCount) ;SR17847
	do ProcessClass("^WWW120Hook",.strLastTime,.intCount)     ;SR17847
	do ProcessClass("^WWW00120Hook",.strLastTime,.intCount)   ;SR17847
	
	
	; Output
	;---------------------------------------
	set strModule = ""
	for {
		set strModule = $order(^CacheTemp(YUSER,strModule))
		quit:strModule=""
		
		set strRtn = "zzXref."_strModule
		set objRtn = ##class(%Routine).%New(strRtn_".mac")
		do objRtn.WriteLine(" ; "_strModule_"  ; call backs from @NM compiled by routine 'COMUtilCallBacks' at "_$zdatetime($horolog,3))
		do objRtn.WriteLine(" ")
		do objRtn.WriteLine(" quit ;  This code is for documentation only ")
		do objRtn.WriteLine(" ")
		do objRtn.WriteLine(" ")
	
		set strID=""
		for {
			set strID=$order(^CacheTemp(YUSER,strModule,strID))
			quit:strID=""
			
			do objRtn.WriteLine(" ")
			do objRtn.WriteLine(" ; Class or Form "_strID_" "_^CacheTemp(YUSER,strModule,strID)_" Entries")
			set strKeys = ""
			for {
				set strKeys = $order(^CacheTemp(YUSER,strModule,strID,strKeys))
				quit:strKeys=""
				
				set strCode = $get(^CacheTemp(YUSER,strModule,strID,strKeys))
				do objRtn.WriteLine(" "_strCode)
			}
		}
		write !,"Routine ",strRtn," Compile "
		write objRtn.Compile("-d")
		do objRtn.%Close()
 
	}
	write !!
	quit
	
	
ProcessClass(pstrGlo,&pstrLastTime,&pintCount)
	;-------------------------------------------------------------------------------
	; Scan global looking for fields that may contain code. Then creates a routine 
	; for each module that contains the code and class/field/reference
	; 
	; Params: Class, LastTime for Update, Running Count
	; 
	; History:
	; 27-Apr-2010	GRF		SR17228: intCount should have been pintCount in code
	; 28-Sep-2009	SCR		Created
	;-------------------------------------------------------------------------------
	new idClass,objClass,strEntry,strRecord,strKeys,intField,strField
	new objField,strFieldName,strCode,strID,strModule,strSpaces
	
	set strSpaces = $justify("",50)
	set idClass=$extract(pstrGlo,2,999)
	set objClass = $get(^WWW001(0,idClass,1))
	set strEntry = pstrGlo
	for {
		set strEntry = $query(@strEntry)           ; Scan every entry
		quit:strEntry=""
				
		set strRecord = @strEntry
		set strKeys   = $translate($piece($piece(strEntry,"(",2),",1)"),"""")
		if $get(pstrLastTime)'=$horolog {
			write pintCount," Entries found, Checking ",strEntry,!   ; SR17228
			set pstrLastTime = $horolog
		}
		for intField=1:1:$length(strRecord,Y) {
			set strField = $piece(strRecord,Y,intField)
			if (strField["^") || ($zconvert(strField,"l")["##class") {	; if the field contains a ^ or ##class
			continue:(idClass="WWW013")&&(intField=2)               ; Bypass user password
						
			set objField     = $get(^WWW003(0,idClass,intField,1))
			set strFieldName = $piece(objField,Y,1)
			set strCode      = $translate(strField,"{}","()")			; SQL calculations
			if $extract(strCode)="$" {
				set strCode = "if "_strCode
			
			} elseif ($zconvert($extract(strCode,1),"l")'="d") || 
			         ($piece(strCode," ",1)["^")               ||
			         (strCode[".%New.")                           {
			
			; check for code the starts with a d but is not a do + Special AEP quirk!
			; if it start with a 'd' (do) leave it as code
				set strCode = "; "_strCode  						; else treat it as a comment
			}
						
			if $length(strCode) < 50 {
				set strCode = $extract(strCode_strSpaces,1,50)
			}
						
			set strCode  = strCode_" ; "_idClass
			set strCode  = strCode_" / "_strFieldName_"("_intField_")"
			set strCode  = strCode_" / "_strKeys
			set pintCount = pintCount + 1
						
			set strID = $$$KEY2(strKeys)    ; Form or Class
			if strID="" {
				set strID = "COM"
			}
			set strModule = $extract(strID,1,3)
			;if $extract(strModule,1,2)="IN" {
			;	set strModule = "IN"
			;}
			; use $increment ?
			if $extract(idClass,1,3)="SAL" {
				set strModule = "SAL"
			}
			set ^CacheTemp(YUSER,strModule,strID,strEntry_"/"_intField) = strCode
			set ^CacheTemp(YUSER,strModule,strID) = $get(^CacheTemp(YUSER,strModule,strID))+1
			}
		}
	}		
	quit	
	
	
ClassOK(pidClass)
	;-------------------------------------------------------------------------------
	; Check if the class is 
	; for each module that contains the code and class/field/reference
	; 
	; History:
	; 09-Oct-2008	SCR		Created
	;-------------------------------------------------------------------------------
	new blnOK
	
	set blnOK = $$$NO
 
	if $get(pidClass)="" quit blnOK
 
	if $data(^WWW001(0,pidClass)) set blnOK = $$$YES
	
	if pidClass="WWW009"    set blnOK = $$$NO
	if pidClass="WWW127"    set blnOK = $$$NO
	if pidClass="WWW1271"   set blnOK = $$$NO
	if pidClass="WWWDATEN"  set blnOK = $$$NO
	if pidClass="WWWERROR"  set blnOK = $$$NO
	if pidClass="WWWLAST"   set blnOK = $$$NO
	if pidClass="WWWPRO"    set blnOK = $$$NO
	if pidClass="WWWPROLNG" set blnOK = $$$NO
	if pidClass="WWWWV"     set blnOK = $$$NO
	if pidClass="WWWLOGIN"  set blnOK = $$$NO
	if pidClass="WWWUSER"   set blnOK = $$$NO
	if pidClass="WWWRECALL" set blnOK = $$$NO
	if pidClass="WWWUSER1"  set blnOK = $$$NO
	if pidClass="WWWSOR"    set blnOK = $$$NO
	
	; FIXME : Perhaps add the following as well? <GRF>
	;		WWW013		D2 contains ^ for password
	;		WWWENCODE	D2 contains ^ as ASCII 94
	
	quit blnOK
	
]]></Routine>
</Export>