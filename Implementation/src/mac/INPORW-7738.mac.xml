<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INPORW" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INPORW

#include COMSYS
#include INConst
#include COMConst
#include COMSYSNum
#include COMDebug

#define enumStandingPO    2   ; PO
#define enumDeliveryPO    3  
#define enumTurnOverPO    4
#define enumConsignmentPO 5
#define enumAgreementPO	  6
#define enumServicePO	  7



CreateDOLine(pobjINPO,pobjINPOLine,pstrStatus,pidPO,pidSupplier) 
	;-------------------------------------------------------------------------------
	; Method Usage
	; Receives a message line string to create a DOLine.
	; Returns a DO line record after creating and saving it.
	; 
	; Params:
	; pstrStatus = Status of creation of DOLine. Comes as a reference parameter. 
	;
	; Returns: DOLine record
	;
	; History:
	; 04-Jan-2010		DWR		SR17074: change to use INDOLine class
	; 18-Dec-2009		DWR		SR17074: re-written from GetDOLine^INPO
	;-------------------------------------------------------------------------------
 
 	new blnCreate,currPrice,idDOLine,idItem,idLine,idPurOrd,idPurOrdLine,idxDOID
 	new idxDueDate,idxItem,intLineType,intQuantity,objDOLine,objPurOrdLine,strBarcode
 	new strBudgetCode,strGLCode,strSuppCode,strStatus
 	
 	set strSuppCode =$$$INPOLineSupplierItemCode(pobjINPOLine)
 	set intLineType =$$$INPOLineLineType(pobjINPOLine)
 	set idItem		=$$$INPOLineItem(pobjINPOLine)
 	set idxItem		=$$$Index(idItem)
 	set idxDueDate	=$$$Index($$$INPOLineDeliveryDate(pobjINPOLine))
 	set idTransMeth =$$$INPOTransportationMethod(pobjINPO)
 	set idxTransMeth = $$$Index(idTransMeth)
 	set idShipToLocn = $$$INPOShipToLocation(pobjINPO)
 	set idxShipToLocn = $$$Index(idShipToLocn)
 	
	set blnCreate=$$$NO 
 	if idItem'="" {
	 	set idLine        = ""
	 	set objDOLine     = ""
	 	set objPurOrdLine = ""
	 	;set idLine=$order(^INDOLines(YM,1,idxItem,intLineType,idxDueDate,pidPO,idLine))  
	 	set idLine = $order(^INDOLines(YM,2,idxItem,idxShipToLocn,idxDueDate,idxTransMeth,pidPO,idLine),-1)
	 	;-----------------------------------
	 	; If no DO Line, need to create one
	 	; to make sure the line number is the
	 	; same as the PO Line, check for a
	 	; matching POLine, if one found create
	 	; use this Line number as the line id
	 	; otherwise get the next PO Line number and 
	 	; use that
	 	;-----------------------------------
	 	
	 	if (idLine="") {
		 	
		 	set idLine = $order(^INDOLine(YM,pidPO,""),-1)+1 ; get the next IdPurOrdLine number
			set blnCreate=$$$YES                             ; flag that you have ctrated a new PurOrdline
		 	
		 	set $$$INDOLinePOLineNumber(objDOLine)     = $$$INPOLinePOLineNumber(pobjINPOLine)
		 	set $$$INDOLineLineType(objDOLine)         = $$$INPOLineLineType(pobjINPOLine)
		 	set $$$INDOLineItem(objDOLine)             = $$$INPOLineItem(pobjINPOLine)
	;	 	set $$$INPOLineItemDescription(objDOLine)  = $$$INPOLineItemDescription(pobjINPOLine)
		 	set $$$INDOLineQtyOrdered(objDOLine)       = $$$INPOLineQuantityOrdered(pobjINPOLine)
		 	set $$$INDOLineUnit(objDOLine)             = $$$INPOLineUnitOfMeasure(pobjINPOLine)
		 	set $$$INDOLineSupplierItemCode(objDOLine) = $$$INPOLineSupplierItemCode(pobjINPOLine)
		 	set $$$INDOLineSupplierBarCode(objDOLine)  = $$$INPOLineSupplierBarCode(pobjINPOLine)
		 	set $$$INDOLineUnitCost(objDOLine)         = $$$INPOLineUnitCost(pobjINPOLine)
		 	set $$$INDOLineNotesCode(objDOLine)        = $$$INPOLineNotesCode(pobjINPOLine)
		 	set $$$INDOLineNotesText(objDOLine)        = $$$INPOLineNotesText(pobjINPOLine)
		 	set $$$INDOLineGLAccount(objDOLine)        = $$$INPOLineGLAccount(pobjINPOLine) 
		 	set $$$INDOLineBudgetCode(objDOLine)       = $$$INPOLineBudgetCode(pobjINPOLine)
		 	set $$$INDOLineStatus(objDOLine)		   = 0 
		 	set $$$INDOLineExtendedCost(objDOLine)     = $$$FCMult($$$INPOLineQuantityOrdered(pobjINPOLine),$$$INPOLineUnitCost(pobjINPOLine))
		 	set $$$INDOLineCostAfterDiscount(objDOLine)= $$$INPOLineExtendedCost(objDOLine)
		 	set $$$INDOLineDeliveryDate(objDOLine)     = $$$INPOLineDeliveryDate(pobjINPOLine)
		 	set $$$INDOLineShipToLocation(objDOLine)   = idShipToLocn
		 	set $$$INDOLineTransportMethod(objDOLine)  = idTransMeth
		 	
		 	if 'blnCreate{
			 	set objPurOrdLine = $get(^INDOLine(0,pidPO,idLine,1))
		 	    set $$$INDOLineQtyOrdered(objPurOrdLine)  = $$$INDOLineQtyOrdered(objPurOrdLine) + $$$INPOLineQuantityOrdered(pobjINPOLine)
	   		 	set $$$INDOLineExtendedCost(objPurOrdLine)     = $$$FCAdd($$$INDOLineExtendedCost(objPurOrdLine),$$$FCMult($$$INPOLineQuantityOrdered(pobjINPOLine),$$$INPOLineUnitCost(pobjINPOLine)))
	   		 	set $$$INDOLineCostAfterDiscount(objPurOrdLine)= $$$INDOLineExtendedCost(objPurOrdLine)
		 	}
	 
	 	} else {
		 	set objDOLine 	  = $get(^INDOLine(YM,pidPO,idLine,1))
		 	
	 	    set $$$INDOLineQtyOrdered(objDOLine)  = $$$INDOLineQtyOrdered(objDOLine) + $$$INPOLineQuantityOrdered(pobjINPOLine)
   		 	set $$$INDOLineExtendedCost(objDOLine)     = $$$FCAdd($$$INDOLineExtendedCost(objDOLine),$$$FCMult($$$INPOLineQuantityOrdered(pobjINPOLine),$$$INPOLineUnitCost(pobjINPOLine)))
   		 	set $$$INDOLineCostAfterDiscount(objDOLine)= $$$INDOLineExtendedCost(objDOLine)
			 	
   		}
 
		set objDOLine = $$GetSupItem(pidSupplier,objDOLine,.strStatus)
		
		if objPurOrdLine=""{
			set objPurOrdLine = objDOLine
		}
		
		set pstrStatus = $$$Save("INDOLine",pidPO_$$$COMMA_idLine,objDOLine,$$$YES)	 	 ; DOLine
		;set strStatus  = $$$Save("INPOLine",pidPO_$$$COMMA_idLine,objPurOrdLine,$$$YES)  ; POLine
	} 
	if $$$ISOK(pstrStatus) {          ; FIXME, should we be doing something with the strStatus?
	;	set strStatus = $$CreatePOLine(pidPO)
	}
		

 	quit idLine  
 	
GetSupItem(pstrSupplier,pstrDOLine,&pstrStatus)
 
	;-------------------------------------------------------------------------------
	; Method Usage	:Updates the Supplier Unit Cost and Unit of Measure for a particular DOLine
	;				 based on the supplier
	; Params:
	; pstrSupplier = Supplier Code 
	; pstrDOLine   = DO Line record
	; pstrStatus   = Status which is to be set with the status of getting the data
	; 				 (But not used for now)
	;
	; Returns:
	;
	; History:
	; 04-Jan-2010			DWR			SR17074: Updated to use INDOLine Class
	; 22-Jul-2008			VIJAY			Created
	;-------------------------------------------------------------------------------
	new objSupp
	
	set objSupp=$get(^INARTK(YM,$$$INPOLineItem(pstrDOLine),pstrSupplier,1))
	if ($$$INDOLineUnitCost(pstrDOLine)=""){
		set $$$INDOLineUnitCost(pstrDOLine)=$$$INARTKBasicPurchasePrice(objSupp)
	}
	if ($$$INDOLineUnit(pstrDOLine)="") {
		set $$$INDOLineUnit(pstrDOLine)= $$$INARTKDeliveryQuantityUnit(objSupp)
	}
	
	quit pstrDOLine

CreatePOLine(pidPO)
	;-------------------------------------------------------------------------------
	; When coming from Release Workpad, create the INPO Lines from the DOLines
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 05-Jan-2010	DWR		SR17074: Created
	;-------------------------------------------------------------------------------
	new arrPOSumm,enumLineType,fltCostAfterDisc,fltExtCost,fltQtyOrdered,fltUnitCost
	new idItem,idLine,idSummLine,idUnit,intCnt,objarrPOSumm,objDOLine,objPOLine,strStatus
	
	set strStatus =$$$OK
	set idSupplier = $$$INPOSupplierCode($get(^INPO(0,pidPO,1)))
	
	set idLine = ""
	for{
		set idLine=$order(^INDOLine(0,pidPO,idLine))
		quit:idLine=""
		
		set objDOLine = $get(^INDOLine(0,pidPO,idLine,1))
		set idItem           = $$$INDOLineItem(objDOLine)

		
		;---------------------
		; get unit and Qty 
		;---------------------
		set enumOrdUnit		 = $$GetPurOrderUnit^INPOUtil(idItem,idSupplier)    ; INARTK suppliers unit, if null, inventory unit
		set enumDelivUnit      = $$$INDOLineUnit(objDOLine)
		set fltQtyOrdered    = $$$INDOLineQtyOrdered(objDOLine)
		
		if enumOrdUnit '= enumDelivUnit {
			set fltConv 		 = $$GetUOMConvBetweenUnits^INUOMConversion(idItem,enumDelivUnit,enumOrdUnit)
			set fltQtyOrdered    = fltQtyOrdered*fltConv
		}
		
		set fltInvConv = $$GetUOMConversion^INUOMConversion(idItem,enumOrdUnit)
		set fltInvQty  = fltQtyOrdered / fltInvConv
		set fltInvQty = $$Ceiling^COMUtilNum(fltInvQty)

		set fltUnitCost      = $$$INDOLineUnitCost(objDOLine)
		set fltExtCost       = $$$INDOLineExtendedCost(objDOLine)
		set fltCostAfterDisc = $$$INDOLineCostAfterDiscount(objDOLine)
		
		if '$data(arrPOSumm(idItem,enumOrdUnit)) {
			set arrPOSumm(idItem,enumOrdUnit) = fltQtyOrdered_Y_fltCostAfterDisc_Y_fltExtCost_Y_fltUnitCost_Y_fltInvQty
		} else {
			set objarrPOSumm = $get(arrPOSumm(idItem,enumOrdUnit))
			set $piece(objarrPOSumm,Y,1) = $piece(objarrPOSumm,Y,1) + fltQtyOrdered
			set $piece(objarrPOSumm,Y,2) = $piece(objarrPOSumm,Y,2) + fltCostAfterDisc
			set $piece(objarrPOSumm,Y,3) = $piece(objarrPOSumm,Y,3) + fltExtCost
			set $piece(objarrPOSumm,Y,5) = $piece(objarrPOSumm,Y,5) + fltInvQty
			set arrPOSumm(idItem,enumOrdUnit)=objarrPOSumm
		}
	}
	
	set idSummLine=0
	set idItem=""
	for{
		quit:$$$ISERR(strStatus)
		set idItem = $order(arrPOSumm(idItem))
		quit:idItem=""
		
		set idUnit=""
		for{
			set idUnit = $order(arrPOSumm(idItem,idUnit))
			quit:idUnit=""
		
			set objarrPOSumm = $get(arrPOSumm(idItem,idUnit))
			set objPOLine=""
			set $$$INPOLineLineType(objPOLine)          = 1 ; "Standard"
			set $$$INPOLineItem(objPOLine)              = idItem
			set $$$INPOLineQuantityOrdered(objPOLine)   = $piece(objarrPOSumm,Y,1)
			set $$$INPOLineUnitOfMeasure(objPOLine)     = idUnit
			set $$$INPOLineUnitCost(objPOLine)          = $piece(objarrPOSumm,Y,4)
			set $$$INPOLineExtendedCost(objPOLine)      = $piece(objarrPOSumm,Y,3)
			set $$$INPOLineCostAfterDiscount(objPOLine) = $piece(objarrPOSumm,Y,2)
			set $$$INPOLineInvQuantityOrdered(objPOLine)= $piece(objarrPOSumm,Y,5)
			set idSummLine = idSummLine + 1
		
			set strStatus = $$$Save("INPOLine",pidPO_$$$COMMA_idSummLine,objPOLine,$$$YES)
		}
	}
	quit 

CreateDOHeader(pidPO)
	;-------------------------------------------------------------------------------
	; create INPO (Delivery Order Header records)
	; 
	; Called BY: CreatePO^INReqRWLine
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 21-Jan-2010	DWR		SR17074: Look at Delivery method too
	; 06-Jan-2010	DWR		SR17074: add the DOLine to the array to reference back to 
	; 							the DOline
	; 04-Jan-2010	DWR		SR17074: Created
	;-------------------------------------------------------------------------------
	new arrDOHeader,dteDelivery,enumOrdType,fltCost,fltExtCost,idBillLocn
	new idDOLine,idShipToLocn,idSupplier,intCnt,objDOHeader,objDOLine,objINPO
	new strBillLocn,strStatus
	
	set intCnt = 0
	
	set objINPO = $get(^INPO(0,pidPO,1))
	set enumOrdType = $$$INPOTypeOfOrder(objINPO)
	set idSupplier  = $$$INPOSupplierCode(objINPO)
	set idBillLocn  = $$$INPOBillToLocation(objINPO)
  	set strBillLocn = $$$INPOBillToAddress(objINPO)
  	
	;--------------------------
	; CREATE AN ARRAY OF HEDAERS
	;--------------------------
	set idDOLine=""	
	for{
		set idDOLine = $order(^INDOLine(0,pidPO,idDOLine))
		quit:idDOLine=""
		
		set objDOLine    = $get(^INDOLine(0,pidPO,idDOLine,1))
		set idShipToLocn = $$$INDOLineShipToLocation(objDOLine)
		set:idShipToLocn="" idShipToLocn=" "
		set dteDelivery  = $$$INDOLineDeliveryDate(objDOLine)
		set fltExtCost   = $$$INDOLineExtendedCost(objDOLine)
		set enumTranMeth = $$$INDOLineTransportMethod(objDOLine)
		set:enumTranMeth="" enumTranMeth=" "
		 
		
		if '$data(arrDOHeader(idShipToLocn,dteDelivery,enumTranMeth)) {
			set arrDOHeader(idShipToLocn,dteDelivery,enumTranMeth) = fltExtCost_Y_idDOLine
		} else {
			set objDOHeader = $get(arrDOHeader(idShipToLocn,dteDelivery,enumTranMeth))
			set $piece(objDOHeader,Y,1) = $piece(objDOHeader,Y,1) + fltExtCost
			set $piece(objDOHeader,Y,2) = $piece(objDOHeader,Y,2)_","_idDOLine
			
			set arrDOHeader(idShipToLocn,dteDelivery,enumTranMeth) = objDOHeader
			
		;	set arrDOHeader(idShipToLocn,dteDelivery) = $get(arrDOHeader(idShipToLocn,dteDelivery)) + fltExtCost
		}
	}
	
	;----------------------------
	; LOOP ARRAY AND SAVE RECORDS
	;----------------------------
	set idShipToLocn=""
	for{
		set idShipToLocn = $order(arrDOHeader(idShipToLocn))
		quit:idShipToLocn=""
		
		set dteDelivery=""
		for{
			set dteDelivery = $order(arrDOHeader(idShipToLocn,dteDelivery))
			quit:dteDelivery=""
			
			set enumTranMeth="" 
			for{
				set enumTranMeth = $order(arrDOHeader(idShipToLocn,dteDelivery,enumTranMeth))
				quit:enumTranMeth=""
				
			
				set intCnt = intCnt + 1
				set objarrHeader = $get(arrDOHeader(idShipToLocn,dteDelivery,enumTranMeth))
				set fltCost = $piece(objarrHeader,Y,1)
				set DOLineRef = $piece(objarrHeader,Y,2)
			
				set objDOHeader=""
				set $$$INPOStatus(objDOHeader)               = 0 ; Pro-Forma
				set $$$INPOSupplierDeliveryDate(objDOHeader) = dteDelivery
				set $$$INPOTypeOfOrder(objDOHeader)          = enumOrdType 
				set $$$INPOTransportationMethod(objDOHeader) = enumTranMeth
				set $$$INPOParentOrder(objDOHeader)          = pidPO
				set $$$INPOSupplierCode(objDOHeader)         = idSupplier
				set $$$INPOSupplierName(objDOHeader)         = $$$INLIEFShortName($get(^INLIEF(0,idSupplier,1)))
				set $$$INPOOrderDate(objDOHeader)            = +$horolog
				set $$$INPOBillToLocation(objDOHeader)       = idBillLocn
				set $$$INPOBillToAddress(objDOHeader)        = strBillLocn
				set $$$INPOShipToLocation(objDOHeader)       = idShipToLocn
				set $$$INPOShipToAddress(objDOHeader)        = $$$WWW0121LocationName($get(^WWW0121(0,YM,idShipToLocn,1)))
				set $$$INPOOrderValue(objDOHeader)           = fltCost
			
				set strStatus = $$$Save("INPO",pidPO_"-"_intCnt,objDOHeader,$$$YES)
				if $$$ISOK(strStatus){
					for loop = 1:1:$length(DOLineRef,",") {
						set idDOLine = $piece(DOLineRef,",",loop)
					
						set objDOLine = $get(^INDOLine(0,pidPO,idDOLine,1))
						set $$$INDOLineDOHeader(objDOLine) = pidPO_"-"_intCnt
					
						set strStatus = $$$Save("INDOLine",pidPO_$$$COMMA_idDOLine,objDOLine,$$$YES)
					}
				}
			}
		}
	}
	quit
		
	;-----------------------------------
	; vvvv   NOT IN USE  vvvvv
	;-----------------------------------
GetDORec(pobjINPO,&pstrStatus,&pDONum,pidPO,&pidDO,pfltQtyOrdered="",pfltUnitCost="" )  
 	;-------------------------------------------------------------------------------
	; Description of Function :
	; To Create Delivery Order From  PstrMessage.
	;
	; Inputs : 
	; pstrMessage  = A message line string consisting all the data required to create a DO		   
	; pstrStatus   = Status of creation of DO. Comes as a reference parameter
	;
	; Returns = DO Record 
	;  
	; History :
	; 21-Dec-2009		DWR		SR17074: Copied here from INOPO for clarity of process
	; 								stage.
	; 08-Dec-2009		DWR		SR17074: clarified Type of order with use of macro
	; 								defined at top of this .mac
	; 15-July-2008 		KALYAN 			Created
	;-------------------------------------------------------------------------------
 	new dtDeliveryDate,idDeliveryMethod,idDO,objDO,strShipToAddress
 	
 	set dtDeliveryDate	 =$$$INPOSupplierDeliveryDate(pobjINPO)
 	set strShipToAddress =$$$INPOShipToAddress(pobjINPO)
 	set idDeliveryMethod =$$$INPOTransportationMethod(pobjINPO)
 	
 	if ((dtDeliveryDate'="")||(strShipToAddress'="")||(idDeliveryMethod'="")) {
	 	set idDO = ""
	 	set objDO=""
	 	set idDO=$order(^INPOs(YM,1,$ZDH(dtDeliveryDate),$$$Index(strShipToAddress),$$$Index(idDeliveryMethod),idDO))
	 	
	 	if (idDO=""){
		 	set pDONum=pDONum+1
		 	set idDO=pidPO_"-"_pDONum    //DO Number  According to Format given "PONumber-1"
		 	
		 	//Setting pstrMessage values to the DO Fields 
		 ;	set $$$INPOTypeOfOrder(objDO)=3		//3 is for delivery order ;$piece(pstrMessage,Y,1)    ;SR17074
		 	set $$$INPOTypeOfOrder(objDO) = $$$enumDeliveryPO
		 	set $$$INPOSupplierCode(objDO)= $$$INPOSupplierCode(pobjINPO)
		 	if $$$INPOSupplierName(pobjINPO)'="" {
		 		set $$$INPOSupplierName(objDO)=$$$INPOSupplierName(pobjINPO)
		 	} else {	
				set $$$INPOSupplierName(objDO)=$$$INLIEFName1($get(^INLIEF(YM,$$$INPOSupplierCode(pobjINPO),1)))
		 	}
		 	
		 	set $$$INPOOrderDate(objDO)		=$ZDH($$$INPOOrderDate(pobjINPO))
			set $$$INPONotesCode(objDO)     =$$$INPONotesCode(pobjINPO)
			set $$$INPONotesText(objDO)     =$$$INPONotesText(pobjINPO)
			set $$$INPOBillToLocation(objDO)=$$$INPOBillToLocation(pobjINPO)
			if $$$INPOBillToAddress(pobjINPO) {
				set $$$INPOBillToAddress(objDO)=$$$INPOBillToAddress(pobjINPO)
			} else{
				set $$$INPOBillToAddress(objDO)=$$$INPOBillToLocation(pobjINPO)
			}
				
			set $$$INPOShipToLocation(objDO)=$$$INPOShipToLocation(pobjINPO)
			if $$$INPOShipToAddress(pobjINPO) {
				set $$$INPOShipToAddress(objDO)= $$$INPOShipToAddress(pobjINPO)
			} else {
				set $$$INPOShipToAddress(objDO)=$$$INPOShipToLocation(pobjINPO)
			}
				
			set $$$INPOSupplierDeliveryDate(objDO)=$ZDH($$$INPOSupplierDeliveryDate(pobjINPO))
			set $$$INPOTransportationMethod(objDO)=$$$INPOTransportationMethod(pobjINPO)
			set $$$INPOPaymentTerms(objDO)=$$$INPOPaymentTerms(pobjINPO)
			
			if pfltUnitCost'=""{
				set $$$INPOOrderValue(objDO)= $$$FCMult(pfltQtyOrdered,pfltUnitCost)
			}
			set $$$INPOParentOrder(objDO)=pidPO
			set pstrStatus = $$$Save("INPO",idDO,objDO,1)		//Saving DO			 
		 	
	 	} else {
		 	set objDO = $get(^INPO(YM,idDO,1))
			if pfltUnitCost'="" {
				set $$$INPOOrderValue(objDO)= $$$FCAdd($$$INPOOrderValue(objDO),$$$FCMult(pfltQtyOrdered,pfltUnitCost))
				set pstrStatus = $$$Save("INPO",idDO,objDO,1)		//Saving DO			 
			}
	 	}
	} 	
	
	if (pstrStatus = $$$YES) { 
		set pidDO = idDO
	} else {
		set objDO=""
	}
	
	quit objDO

]]></Routine>
</Export>