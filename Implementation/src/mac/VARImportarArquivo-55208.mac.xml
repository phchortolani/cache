<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Routine name="VARImportarArquivo" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[VARImportarArquivo

    #include COMSYS
    #include VARConst
    
    #include AEPConstant
    
ExportarModelo(pYKEY)
	//do ExportarModelo^VARImportarArquivo(pYKEY)
	Quit:(pYKEY="")

	New i
	
	Set objImportar = $Get(^VARImportarArquivo(0,pYKEY,1))
	
	Set CodConfig = $$$VARImportarArquivoCodConfiguracao(objImportar)
	
	Set objConfig = $Get(^VARImportarConfig(0,CodConfig,1))
	
	Set Modelo = $$$VARImportarConfigExemploArquivoOrigem(objConfig)
	
	Kill ^CacheTempExportarModelo(YM,YUSER,YBED)
	
	Set i = 0
	For i=1:1:$Length(Modelo,"|") {
		
		Set ^CacheTempExportarModelo(YM,YUSER,YBED,i-1,1) = $Piece(Modelo,"|",i)
		
	}
	
	Do ExportarCSV^VARExportarCSV("CacheTempExportarModelo")
	
 	Do GoToForm^COMUtilForm("VARImportarArquivo",pYKEY,YSEITE,YPARA,,,)

	Quit


ExportarModeloConfig(CodConfig)
	//do ExportarModelo^VARImportarArquivo(pYKEY)
	Quit:(CodConfig="")

	New i
	
	Set objConfig = $Get(^VARImportarConfig(0,CodConfig,1))
	
	Set Modelo = $$$VARImportarConfigExemploArquivoOrigem(objConfig)
	
	Kill ^CacheTempExportarModelo(YM,YUSER,YBED)
	
	Set i = 0
	For i=1:1:$Length(Modelo,"|") {
		
		Set ^CacheTempExportarModelo(YM,YUSER,YBED,i-1,1) = $Piece(Modelo,"|",i)
		
	}
	
	Do ExportarCSV^VARExportarCSV("CacheTempExportarModelo",1)
	Quit


OnAfterDataFields(pYKEY,pYFELD) 
    ;OnAfterDataFields^VARImportarArquivo(YKEY,YFELD)

    quit:pYKEY=""
    quit:pYFELD=""
    
    if (YSEITE = 1){		//1-Geral
		do MontarGridOrigem(pYKEY,pYFELD,10)
    }
    elseif (YSEITE = 3){	//3-Dados Origem
		do MontarGridOrigem(pYKEY,pYFELD)
		;do MontarOrigemPaginada(pYKEY,pYFELD)
    }
    elseif (YSEITE = 4){	//4-Dados Preparados
		do MontarGridDestino(pYKEY,pYFELD)
    }    
    elseif (YSEITE = 5){	//5-Configuração
	    set CodConfiguracao = $$$VARImportarArquivoCodConfiguracao(pYFELD)
    	do MontarGridPreview^VARImportarConfigCampos(CodConfiguracao)
    }
    
    quit


OnBeforeFormConstruction()
	
	kill ^CacheTemp(YUSER,"ImportarArquivo","YPARA")
	if ($G(YPARA) '= "") {
		set ^CacheTemp(YUSER,"ImportarArquivo","YPARA") = $G(YPARA)
	}

	quit


OnBlurMostrarApenasCriticas(pYKEY,pYINHALT)

    set MostrarApenasCriticas  = pYINHALT
    
    set ^VARTempImportarArquivo(YBED) = ""_Y_MostrarApenasCriticas
    
 	do GoToForm^COMUtilForm("VARImportarArquivo",pYKEY,4,YPARA,,,)
	
	quit	



CodConfiguracaoSomenteLeitura()
	;Verifica se o YPARA gravado no OnBeforeFormConstruction tem algum valor (passado pelo menu)
	;Se tiver o campo Cód. Configuração deverá ficar somente leitura
	
	set pYPARA = $get(^CacheTemp(YUSER,"ImportarArquivo","YPARA"))
	if (pYPARA '= ""){
		quit $$$YES
	}
	
	if (YAUSWAHL '= "") {
		set ^CacheTemp(YUSER,"ImportarArquivo","YPARA") = YAUSWAHL
		quit $$$YES
	}

	quit $$$NO

    
CarregarArquivoOrigem(pYKEY)

    quit:pYKEY=""
    new objImportarArquivo,NomeArquivo
     
    set objImportarArquivo = $G(^VARImportarArquivo(YM,pYKEY,1))
    quit:objImportarArquivo=""
       
    set NomeArquivo = $$$VARImportarArquivoNomeArquivo(objImportarArquivo)
    
    if (NomeArquivo '= "")&&($$$VARImportarArquivoImportadoEm(objImportarArquivo) = "") {
        do PreVisualizarDados(pYKEY,objImportarArquivo)
    }
    
    do GoToForm^COMUtilForm("VARImportarArquivo",pYKEY,3,YPARA,,,)


	quit
	

PodeCarregarArquivoOrigem(pYKEY,pYFELD)
    ;do PodeCarregarArquivoOrigem^VARImportarArquivo(YKEY,YFELD)

    new strStatus,NomeArquivo 
    
    set strStatus = $$$OK
    
    if (pYKEY = "") || (pYKEY = "+") {
        set strStatus = "Primeiro, selecione um registro."
    }
    
    if ($$$ISOK(strStatus)) && (pYFELD = "") {
        set strStatus = "Registro não encontrado para carregar."    
    }
    
    
    if ($$$ISOK(strStatus)) && ($$$VARImportarArquivoImportadoEm(pYFELD) '= "") {
        set strStatus = "Esses dados já foram importados."
    }

    set NomeArquivo = $$$VARImportarArquivoNomeArquivo(pYFELD)
    
    if ($$$ISOK(strStatus)) && ( NomeArquivo = ""){
        set strStatus = "Primeiro você deve selecionar um arquivo e clicar em salvar, para depois carregar o arquivo."
    }
    
    $$$YQHandler(strStatus)

    quit
	

OcultarAbaDadosOrigem(pYKEY)
	
	if (pYKEY = "") || (pYKEY = "+") {
		quit $$$YES
	}
	
	;Se ainda não tiver carregado o arquivo oculta a aba Dados de Origem	
	if ('$D(^VARImportarArquivoOrigem(YM,pYKEY))) {
		quit $$$YES
	}
	
	quit $$$NO
	   

OcultarAbaDadosPreparados(pYKEY)
	
	if (pYKEY = "") || (pYKEY = "+") {
		quit $$$YES
	}
	
	;Se ainda não tiver preparado os dados de destino oculta a aba Dados de Origem	
	if ('$D(^VARImportarArquivoDestino(YM,pYKEY))) {
		quit $$$YES
	}
	
	quit $$$NO
    

OcultarAbaConfiguracao(pYKEY,pYFELD)
	
	if (pYKEY = "") || (pYKEY = "+") {
		quit $$$YES
	}
	
	;Se o campo Cód. Configuração estiver vazio oculta a aba Configuração	
	if ($$$VARImportarArquivoCodConfiguracao(pYFELD)="")  {
		quit $$$YES
	}
	
	quit $$$NO

    
InserirBotao(pYKEY)
	
	quit:(pYKEY = "")
	
	set objImportarArquivo = $G(^VARImportarArquivo(YM,pYKEY,1))
	set Configuracao       = $$$VARImportarArquivoCodConfiguracao(objImportarArquivo)
	
	quit:(Configuracao = "")
	
	quit:($$$VARImportarArquivoImportadoEm(objImportarArquivo) '= "")
	
	set objImportarConfig = $G(^VARImportarConfig(YM,Configuracao,1))
	set Diretorio = $$$VARImportarConfigDiretorioUpload(objImportarConfig)  
	
	do ^VARBRUPLOAD(Diretorio, $$$KEY1(pYKEY), "WWW2.YVARImportarArquivoD2")
	
	quit
	

PreVisualizarDados(pYKEY,pYFELD)

    new NomeArquivo,vDir,CaminhoCompleto
    
    set NomeArquivo     = $$$VARImportarArquivoNomeArquivo(pYFELD)
    set CodConfiguracao = $$$VARImportarArquivoCodConfiguracao(pYFELD) 
	set objConfiguracao = $G(^VARImportarConfig(YM,CodConfiguracao,1))

	;Diretório definido na configuração da importação
    set Diretorio       = $$$VARImportarConfigDiretorioUpload(objConfiguracao)
    
    ;Caracter delimitador definido na configuração da importação
    ;Como está gravado o código ansi é necessário converter para caracter
    set Delimitador     = $char($$$VARImportarConfigDelimitadorOrigem(objConfiguracao))
    
    set CaminhoCompleto = ""
    
    set vDir  = $$GetDiretorioFisico^VARBRDiretorios(YM,Diretorio)
    ;Chave Primária ou Diretório onde foi armazenado o arquivo;
  
    ;set vDir  = vDir_"\"_$translate(pYKEY, "/", "_")_"\"
    
	if $FIND($ZVERSION,"Linux"){
		set vDir = $TRANSLATE(vDir,"\","/")_"/"_$translate(pYKEY, "/", "_")_"/"  ;LINUX
	}
	elseif $FIND($ZVERSION,"Windows"){
		set vDir = $TRANSLATE(vDir,"/","\")_"\"_$translate(pYKEY, "/", "_")_"\"  ;windows
	}
    
    
    set CaminhoCompleto = vDir_NomeArquivo

    do CarregarDadosDoArquivoV2(pYKEY,pYFELD,CaminhoCompleto,Delimitador)
    
   
    quit

    
    
CarregarDadosDoArquivo(pYKEY,pYFELD,pNomeArquivo,pSeparador)
   
    new Arquivo,Linha,objLinha,i,j
    
    if $G(YM) = ""{
        do ^WWWVAR
    }

    ;for I=1:1:100 { hang 1 }
    
    K ^VARImportarArquivoOrigem(YM,pYKEY)
    
    ;W !, "Abrindo Arquivo..."
    set Arquivo = $$READ(pNomeArquivo)
    if Arquivo="" {
	    ; W !, "Arquivo não existe "_$G(pNomeArquivo)
	    set msg = "Arquivo não existe: "_$G(pNomeArquivo)
	    $$$Alert(msg)
	    quit
    }
    ;if Arquivo="" quit
    ;W "OK"
    
    ;W !, "Lendo Arquivo..."
    
    ;When set to “true”, Caché sets the $ZEOF special variable to indicate that you have
    ;reached the end of the file. When set to “false”, Caché issues an <ENDOFFILE> error.
    ;The default is “false”. Setting $ZUTIL(69,40) overrides this default system-wide
    ;it does not change the System Configuration setting. Setting $ZUTIL(68,40) overrides
    ;the system-wide setting for the current process. 
    ;vvvvv
    set YEOFILE=$ZUTIL(68,40,1)
    
    USE Arquivo
    FOR i=1:1 {
        
        ;Obs: Não use WRITE após o comando USE Arquivo, porque você
        ;estará escrevendo dentro do Arquivo e não no terminal.
        ;Só volte a usar WRITE após o comando CLOSE Arquivo.
        
        READ Linha#1000:1 
        QUIT:$ZEOF=-1
        QUIT:'$TEST
        QUIT:Linha="EOF"
        
        set QtdeCampos = $length(Linha,pSeparador)
        set objLinha   = ""
        set Sep        = ""
        
        ;Faz o FOR de acordo com a quantidade de campos do arquivo que será importado
        FOR j=1:1:QtdeCampos {
            set $piece(objLinha,Y,j) = $piece(Linha,pSeparador,j)
            ;set objLinha = objLinha_Sep_$piece(Linha,pSeparador,J)
            ;set Sep      = Y
        }
        ;Grava o objLinha na Global já separado por ~ (til)
        set ^VARImportarArquivoOrigem(YM,pYKEY,i,1) = objLinha
        
    }
    
    if Arquivo'="" CLOSE Arquivo    
        
    ;W "OK"
    
    ;W !, "Encerrou"

    quit
    

CarregarDadosDoArquivoV2(pYKEY,pYFELD,pNomeArquivo,pSeparador)
   
    new Arquivo,Linha,objLinha,i,j
    
    if $G(YM) = ""{
        do ^WWWVAR
    }
    K ^VARImportarArquivoOrigem(YM,pYKEY)
    
    ;W !, "Abrindo Arquivo..."
    set fileObj  = ##class(%File).%New(pNomeArquivo)
    set status =  fileObj.Open("R")
    
    if 'status="" {
	    ; W !, "Arquivo não existe "_$G(pNomeArquivo)
	    set msg = "Arquivo não existe: "_$G(pNomeArquivo)
	    $$$Alert(msg)
	    quit
    }
	set i = 0
    while 'fileObj.AtEnd{
	    set i = i + 1
        set Linha = fileObj.ReadLine(,.sc,.eol)
        set LinhaAlt =$ZCONVERT(Linha,"I","UTF8",handle)
        set naoConv = 0
        for pos=1:1:$length(LinhaAlt){
	    	if $ascii($extract(LinhaAlt,pos))=63 set naoConv = 1 quit
        }
        if 'naoConv set Linha = LinhaAlt
        if Linha="" continue
        set QtdeCampos = $length(Linha,pSeparador)
        set objLinha   = ""
        set Sep        = ""
        ;Faz o FOR de acordo com a quantidade de campos do arquivo que será importado
        FOR j=1:1:QtdeCampos {
            set $piece(objLinha,Y,j) = $piece(Linha,pSeparador,j)
        }
        ;Grava o objLinha na Global já separado por ~ (til)
        set ^VARImportarArquivoOrigem(YM,pYKEY,i,1) = objLinha
    }
    do fileObj.Close()   
    quit
    
    
MontarGridOrigem(pYKEY,pYFELD,pQtdeReg="")
   
    
    quit:( '$D(^VARImportarArquivoOrigem(YM,pYKEY)) )
    
    new PrimeiraLinha,DadosLinha,idLinha,Cabecalho,QtdeCampos,lstHeader,Sep
    
    
    set CodConfiguracao = $$$VARImportarArquivoCodConfiguracao(pYFELD) 
	set objConfiguracao = $G(^VARImportarConfig(YM,CodConfiguracao,1))
    
    set PrimeiraLinha = $$$VARImportarConfigPrimeiraLinhaCabecalho(objConfiguracao)
    set DadosLinha    = $G(^VARImportarArquivoOrigem(YM,pYKEY,1,1))
    set QtdeCampos    = $length(DadosLinha,Y)

    set lstHeader = ""
    set Cabecalho = ""
    set Sep       = ""
    
    ;Faz o FOR de acordo com a quantidade de campos da global
    FOR j=1:1:QtdeCampos {
        ;Indica se a 1a Linha Contém o Cabeçalho da Tabela
        if (PrimeiraLinha = 1) {
            set Cabecalho = Cabecalho_Sep_$replace($piece(DadosLinha,Y,j),"""","")
            set Sep       = ","
        }
        else{
            set Cabecalho = Cabecalho_Sep_"Campo "_j
            set Sep       = ","
        }
    }
    
    ;set lstHeader = lstHeader_$listbuild(Cabecalho)
    set lstHeader = lstHeader_$ListFromString(Cabecalho)
    
    //if ($$$VARImportarCSVImportadoEm(pYFELD) = "") {
        set Titulo = "Pré-Visualizar Dados do Arquivo de Origem:"
    //}
    //else{
    //    set Titulo = "Dados Importados:"        
    //}
    
    if $$Start^COMTable(lstHeader,Titulo) {
    
        set idLinha=""
        for {
            set idLinha=$order(^VARImportarArquivoOrigem(YM,pYKEY,idLinha))
            quit:idLinha=""
            
            ;Indica se a 1a Linha Contém o Cabeçalho da Tabela
            if (PrimeiraLinha = 1)&&(idLinha=1){
                continue
            }
            
            set DadosLinha = $G(^VARImportarArquivoOrigem(YM,pYKEY,idLinha,1))
            
            do NewLine^COMTable()
            ;Faz o FOR de acordo com a quantidade de campos da global
            FOR j=1:1:QtdeCampos {
                do InsertCell^COMTable($piece(DadosLinha,Y,j))
            }
            do EndLine^COMTable()
                        
	        ;Se a quantidade de registros for diferente de "" (vazio) mostra apenas a qtde de registros necessários
	        if (pQtdeReg '= "")&&(pQtdeReg=idLinha){
        	
	            do NewLine^COMTable("lightsteelblue")
	            do InsertCell^COMTable("Mostrando apenas os "_pQtdeReg_" primeiros registros. Clique na aba Dados Origem para ver todos os registros do arquivo de origem.",,,,,,QtdeCampos)
	            do EndLine^COMTable()
            
	        	quit	//sai do for
        	
	        }

        }   
        
        do Stop^COMTable()  
    
    }
    
    
    quit  

    
MontarGridDestino(pYKEY,pYFELD,pQtdeReg="")
   
    
    quit:( '$D(^VARImportarArquivoDestino(YM,pYKEY)) )
    
    new PrimeiraLinha,DadosLinha,idLinha,Cabecalho,QtdeCampos,lstHeader,Sep
    
    
    set CodConfiguracao     = $$$VARImportarArquivoCodConfiguracao(pYFELD) 
	set objConfiguracao     = $G(^VARImportarConfig(YM,CodConfiguracao,1))
	set PosicaoCampoDestino = $$GetListaPosicaoDestino^VARImportarConfigCampos(CodConfiguracao)
    
    set PrimeiraLinha  = $$$VARImportarConfigPrimeiraLinhaCabecalho(objConfiguracao)
    set DadosLinha     = $G(^VARImportarArquivoDestino(YM,pYKEY,1,1))
    set QtdeCampos     = $length(DadosLinha,Y)
    set TitulosDestino = $$GetListaTitulosDestino^VARImportarConfigCampos(CodConfiguracao)
    set QtdeTitulos    = $length(TitulosDestino,Y)

    set lstHeader = ""
    set Cabecalho = ""
    set Sep       = ""
    
    ;Faz o FOR de acordo com a quantidade de campos da global
    FOR j=1:1:QtdeTitulos {
		set Cabecalho = Cabecalho_Sep_$replace($piece(TitulosDestino,Y,j),"""","")
        set Sep       = ","
    }
    
    ;set lstHeader = lstHeader_$listbuild(Cabecalho)
    set lstHeader = lstHeader_$ListFromString("#,Validação,"_Cabecalho)
    
    //if ($$$VARImportarCSVImportadoEm(pYFELD) = "") {
        set Titulo = "Pré-Visualizar Dados de Destino:"
    //}
    //else{
    //    set Titulo = "Dados Importados:"        
    //}
    
    if $$Start^COMTable(lstHeader,Titulo) {
    
		set MostrarApenasCriticas = $piece($get(^VARTempImportarArquivo(YBED)),Y,2)

        set idLinha=""
        for {
            set idLinha=$order(^VARImportarArquivoDestino(YM,pYKEY,idLinha))
            quit:idLinha=""
        	
            ;Indica se a 1a Linha Contém o Cabeçalho da Tabela
            if (PrimeiraLinha = 1)&&(idLinha=1){
                continue
            }
            
            set DadosLinha = $G(^VARImportarArquivoDestino(YM,pYKEY,idLinha,1))

			;Verifica se o checkbox Mostrar apenas Criticas está marcado e se possui crítica
            if (MostrarApenasCriticas=$$$YES) {
	            if '$D(^VARImportarArquivoCritica(YM,pYKEY,idLinha)){
		            continue
	            }
            }
            
            do NewLine^COMTable()
            do InsertCell^COMTable(idLinha)
            set posFormat = "</font></strong>"
            set posHint   = "</span>"
            ;Se existir crítica mostra
            if $D(^VARImportarArquivoCritica(YM,pYKEY,idLinha)) {
	            set objCritica = $G(^VARImportarArquivoCritica(YM,pYKEY,idLinha,1))
	            set Critica    = $$GetMemoTextWithCRLF^COMUtilStr(objCritica)
	            set preFormat = "<font color=red><strong>"
	            set preHint = "<span title = '"_Critica_$c(13)_"'>"
	            do InsertCell^COMTable(preFormat_preHint_"Crítica"_posHint_posFormat,,,,"CENTER")
            }
            else{
	            set preFormat = "<font color=green><strong>"
	            do InsertCell^COMTable(preFormat_"OK"_posFormat,,,,"CENTER")
            }
            ;Faz o FOR de acordo com a quantidade de campos da global
            FOR j=1:1:QtdeTitulos {
	            set idCampoDestino = $piece(PosicaoCampoDestino,Y,j)
                do InsertCell^COMTable($piece(DadosLinha,Y,idCampoDestino))
            }
            do EndLine^COMTable()
                        
	        ;Se a quantidade de registros for diferente de "" (vazio) mostra apenas a qtde de registros necessários
	        if (pQtdeReg '= "")&&(pQtdeReg=idLinha){
        	
	            do NewLine^COMTable("lightsteelblue")
	            do InsertCell^COMTable("Mostrando apenas os "_pQtdeReg_" primeiros registros. Clique na aba Dados Origem para ver todos os registros do arquivo de]]><![CDATA[ origem.",,,,,,QtdeTitulos)
	            do EndLine^COMTable()
            
	        	quit	//sai do for
        	
	        }

        }   
        
        do Stop^COMTable()  
    
    }
    
    
    quit      
    

PrepararImportacao(pYKEY)

	quit:(pYKEY = "")
	quit:( '$D(^VARImportarArquivoOrigem(YM,pYKEY)) )
	
	new strStatus
	set strStatus=$$$OK
	
	K ^VARImportarArquivoDestino(YM,pYKEY)
	K ^VARImportarArquivoCritica(YM,pYKEY)
	;Limpa a global que irá armazenar as chaves primárias que serão importadas
	;Ela é necessária para validar se nenhuma chave está sendo duplicada
	K ^VARTempImportarArquivoPK(YM,pYKEY)
	;Limpa a global que irá armazenar o contador de chaves primárias
	;Ela é necessária para quando for necessário o sistema gerar um contador para chave primária
	K ^VARTempImportarArquivoContPK(YM,pYKEY)

	set objImportarArquivo = $G(^VARImportarArquivo(YM,pYKEY,1))
	
    set CodConfiguracao = $$$VARImportarArquivoCodConfiguracao(objImportarArquivo) 
    
    set PrimeiraLinha  = $$GetPrimeiraLinhaCabecalho^VARImportarConfig(CodConfiguracao)
    set DadosLinha     = $G(^VARImportarArquivoOrigem(YM,pYKEY,1,1))
    set QtdeCampos     = $length(DadosLinha,Y)
    
	set objConfig      = $G(^VARImportarConfig(YM,CodConfiguracao,1))
    set ExecutarAntes  = $$$VARImportarConfigExecutarAntesPreparar(objConfig)
    set ExecutarDepois = $$$VARImportarConfigExecutarDepoisPreparar(objConfig)
    
	;Executa a rotina ANTES da preparação se existir
	if (ExecutarAntes '= ""){ 
		;Verifica se a rotina começa com $$ para chamar o método com xecute
		if ($extract(ExecutarAntes,1,2)="$$"){
			;Monta a rotina de acordo com o que foi definido no campo
			set RotinaStr = "set strStatus = "_ExecutarAntes
			xecute RotinaStr
		}
		else{
			W !, "Rotina para executar antes da preparação no formato inválido."
			quit
		}
	}    
	
	
    set idLinha=""
    for {
        set idLinha=$order(^VARImportarArquivoOrigem(YM,pYKEY,idLinha))
        quit:idLinha=""
        
        set DadosLinha = $G(^VARImportarArquivoOrigem(YM,pYKEY,idLinha,1))

        ;Indica se a 1a Linha Contém o Cabeçalho da Tabela
        if (PrimeiraLinha = 1)&&(idLinha=1){
	        set DadosDestino = DadosLinha
        }
        else{
        	set DadosDestino = $$TratarRegistro^VARImportarTratamento(pYKEY,DadosLinha,idLinha)
        }
        
        ;Grava na Global o registro já formatado
        set ^VARImportarArquivoDestino(YM,pYKEY,idLinha,1) = DadosDestino
        
    }
    
	;Executa a rotina DEPOIS da preparação se existir
	if (ExecutarDepois '= ""){ 
	
		;Verifica se a rotina começa com $$ para chamar o método com xecute
		if ($extract(ExecutarDepois,1,2)="$$"){
			;Monta a rotina de acordo com o que foi definido no campo
			set RotinaStr = "set strStatus = "_ExecutarDepois
			xecute RotinaStr
		}
		else{
			W !, "Rotina para executar depois da preparação no formato inválido."
			quit
		}
	}
    



	do GoToForm^COMUtilForm("VARImportarArquivo",pYKEY,4,YPARA,,,)
	
	quit


PodePrepararImportacao(pYKEY,pYFELD)
    ;do PodePrepararImportacao^VARImportarArquivo(YKEY,YFELD)

    new strStatus,NomeArquivo 
    
    set strStatus = $$$OK
    
    if (pYKEY = "") || (pYKEY = "+") {
        set strStatus = "Primeiro, selecione um registro."
    }
    
    if ($$$ISOK(strStatus)) && (pYFELD = "") {
        set strStatus = "Registro não encontrado para carregar."    
    }
   
    if ($$$ISOK(strStatus)) && ($$$VARImportarArquivoImportadoEm(pYFELD) '= "") {
        set strStatus = "Esses dados já foram importados."
    }

    set NomeArquivo = $$$VARImportarArquivoNomeArquivo(pYFELD)
    
    if ($$$ISOK(strStatus)) && ( NomeArquivo = ""){
        set strStatus = "Primeiro você deve selecionar um arquivo, clicar em carregar, para depois preparar os dados para importação."
    }

    if ($$$ISOK(strStatus)) && ( '$D(^VARImportarArquivoOrigem(YM,pYKEY) ) ){
        set strStatus = "Primeiro você deve Carregar o Arquivo de Origem, para depois preparar os dados para importação."
    }

    
    $$$YQHandler(strStatus)

    quit


PodeImportarDados(pYKEY,pYFELD,pTipoRetorno = 0)
    ;do PodeImportarDados^VARImportarArquivo(YKEY,YFELD)

    new strStatus,NomeArquivo 
    
    set strStatus = $$$OK
    
    if (pYKEY = "") || (pYKEY = "+") {
        set strStatus = "Primeiro, selecione um registro."
    }
    
    if ($$$ISOK(strStatus)) && (pYFELD = "") {
        set strStatus = "Registro não encontrado para importar."    
    }
    
    if ($$$ISOK(strStatus)) && ($$$VARImportarArquivoImportadoEm(pYFELD) '= "") {
        set strStatus = "Esses dados já foram importados."  
    }

    set NomeArquivo = $$$VARImportarArquivoNomeArquivo(pYFELD)
    
    if ($$$ISOK(strStatus)) && ( NomeArquivo = ""){
        set strStatus = "Primeiro você deve selecionar um arquivo, clicar em carregar, preparar os dados, para depois importar os dados para a classe de destino."
    }
    
    if ($$$ISOK(strStatus)) && ( '$D(^VARImportarArquivoDestino(YM,pYKEY) ) ){
        set strStatus = "Primeiro você deve Preparar os Dados, para depois importar os dados para a classe de destino."
    }
    
    if ($$$ISOK(strStatus)) && ( $D(^VARImportarArquivoCritica(YM,pYKEY) ) ){
        set strStatus = "Primeiro você deve resolver todas as críticas, para depois importar os dados para a classe de destino."
    }
    
    $$$YQHandler(strStatus)

		If (pTipoRetorno = 1) {
			Quit strStatus			
		}

    quit
    
    
    
ImportarDados(pYKEY)
    ;do ImportarDados^VARImportarArquivo(YKEY)
    
    set pYFELD = $G(^VARImportarArquivo(YM,pYKEY,1))
    
	new strStatus
	
    do PodeImportarDados(pYKEY,pYFELD)
    
    if YQ = $$$YQEnable {
        
        set strStatus=$$Transaction^COMTransaction("ImportarDadosTxn^VARImportarArquivo("""_pYKEY_""","""_pYFELD_""")","1")

    }
    else{
        do ReturnError^COMUtils($$$YQMessage)
    }
    
    if $$$ISOK(strStatus) {
        set QtdeRegistros = 0
        set QtdeRegistros = $G(^CacheTemp(YUSER,"ImportarArquivo",pYKEY,"RegistrosImportados"))
        $$$StartScript()
        w "alert('Importação realizada com sucesso! "_QtdeRegistros_" registros importados.')"
        $$$EndScript()
        ;do ReloadForm^COMUtilForm()
        do GoToForm^COMUtilForm("VARImportarArquivo",pYKEY,1,YPARA,,,)
    }
    else{
	    set Q = $$$QDontSave
        do ReturnError^COMUtilError(strStatus)
    }
    
    
    quit
    

ImportarDadosWeb(pYKEY)
  ;do ImportarDados^VARImportarArquivo(YKEY)
  set pYFELD = $G(^VARImportarArquivo(YM,pYKEY,1))
	new strStatus
  Set strStatus = $$PodeImportarDados(pYKEY,pYFELD,1)
  If (strStatus = $$$OK) {
	  Set strStatus = $$ImportarDadosTxn^VARImportarArquivo(pYKEY,pYFELD,1)
  }
  quit strStatus
    
    
ImportarDadosTxn(pYKEY,pYFELD, pWeb = 0)

    new ClasseDestino,PrimeiraLinha,cont,idLinha,objLinha
    new ListaChaves,TipoChaves,ContChaves,Sep,Chave,idChavePrimaria
    new objWWW002,objNovo,QtdeCampos,newFELD
    
    new strStatus
    
	set strStatus = $$$OK

    
    ;for i=1:1:1000 { hang 1 }
    
    kill ^CacheTemp(YUSER,"ImportarArquivo",pYKEY,"RegistrosImportados")
    
	set objImportarArquivo = $G(^VARImportarArquivo(YM,pYKEY,1))
    set idConfig           = $$$VARImportarArquivoCodConfiguracao(objImportarArquivo) 
	
	set objConfig = $G(^VARImportarConfig(YM,idConfig,1))    
    
    set ClasseDestino  = $$$VARImportarConfigClasseDestino(objConfig)
    set PrimeiraLinha  = $$$VARImportarConfigPrimeiraLinhaCabecalho(objConfig)
    set ExecutarAntes  = $$$VARImportarConfigExecutarRotinaAntes(objConfig)
    set ExecutarDepois = $$$VARImportarConfigExecutarRotinaDepois(objConfig)
    
	;Executa a rotina ANTES da importação se existir
	if (ExecutarAntes '= ""){ 
		;Verifica se a rotina começa com $$ para chamar o método com xecute
		if ($extract(ExecutarAntes,1,2)="$$"){
			;Monta a rotina de acordo com o que foi definido no campo
			set RotinaStr = "set strStatus = "_ExecutarAntes
			xecute RotinaStr
		}
		else{
			set strStatus = "Rotina para executar antes da importação no formato inválido."
		}
	}    
    
    
    if $$$ISERR(strStatus){
	    quit strStatus
    }
    
    set cont = 0
    
    set idLinha = ""
    for {
        set idLinha = $order(^VARImportarArquivoDestino(YM,pYKEY,idLinha))
        quit:(idLinha = "")

        if (PrimeiraLinha = 1)&&(idLinha=1){
            continue
        }

        set objLinha = $G(^VARImportarArquivoDestino(YM,pYKEY,idLinha,1))

        ;Para cada registro monta a chave primária baseada na classe WWW002
        
        ;Se não existir a classe (Tabela) escolhida pelo usuário, cai fora.
        if '$D(^WWW001(YM,ClasseDestino)){
            set strStatus = "Tabela de destino não encontrada para importar."
        }
    
        quit:$$$ISERR(strStatus)
        
        set ListaChaves = ""
        set TipoChaves  = ""
        set Sep         = ""
        set Chave       = ""
    
        ;Popula uma lista com as Chaves Primárias da Classe
        set ListaChavePrimariaOrigem = $$GetListaChavePrimariaOrigem^VARImportarConfigCampos(idConfig)
        
        set idChavePrimaria = ""
        for {
            set idChavePrimaria=$order(^WWW002(YM,ClasseDestino,idChavePrimaria))
            quit:idChavePrimaria=""
            ;set ChaveOrigem = $piece(ListaChavePrimariaOrigem,Y,idChavePrimaria)
            ;Teoricamente não precisa mais da ChaveOrigem pois as chaves já estão
            ;na ordem correta na global VARImportarDestino
            set Chave       = Chave_Sep_$piece(objLinha,Y,idChavePrimaria)
            set Sep         = ","
        }
        

        ;Popula uma lista com os campos da classe (sem as Chaves Primárias)
        set ListaCamposOrigem  = $$GetListaCamposOrigem^VARImportarConfigCampos(idConfig)
        set ListaCamposDestino = $$GetListaCamposDestino^VARImportarConfigCampos(idConfig)

        set objNovo    = ""
        set QtdeCampos = $length(ListaCamposOrigem,Y) 

        for i=1:1:QtdeCampos {
	        set CampoOrigem  = $piece(ListaCamposOrigem,Y,i)
	        set CampoDestino = $piece(ListaCamposDestino,Y,i)
	        ;Se o campo destino não estiver definido nas configurações continua
	        if CampoDestino = "" {
		        continue
	        }
            set $piece(objNovo,Y,i) = $piece(objLinha,Y,CampoDestino)
        }

        set YFORM = ClasseDestino
        
        If (ClasseDestino = "VARManualExame") {
	     If ($Data(^VARManualExame(0,$Piece(Chave,",",1),$Piece(Chave,",",2)))) {
		     Set $$$VARManualExameCriadoEm(objNovo) = $$$VARManualExameCriadoEm($Get(^VARManualExame(0,$Piece(Chave,",",1),$Piece(Chave,",",2),1)))
		     Set $$$VARManualExameCriadoPor(objNovo) = $$$VARManualExameCriadoPor($Get(^VARManualExame(0,$Piece(Chave,",",1),$Piece(Chave,",",2),1)))
		     Set $$$VARManualExameAlteradoEm(objNovo) = $Horolog
		     Set $$$VARManualExameAlteradoPor(objNovo) = $Get(YBED)
	     }Else{
		     Set $$$VARManualExameCriadoEm(objNovo) = $Horolog
		     Set $$$VARManualExameCriadoPor(objNovo) = $Get(YBED)
	     }
        }
        
        
        set strStatus=$$$Save(ClasseDestino,Chave,objNovo,$$$YES)
    
        quit:$$$ISERR(strStatus)
    
        set cont = cont+1

    }   
    
    if $$$ISOK(strStatus){
	    
		;Executa a rotina DEPOIS da importação se existir
		if (ExecutarDepois '= ""){ 
		
			;Verifica se a rotina começa com $$ para chamar o método com xecute
			if ($extract(ExecutarDepois,1,2)="$$"){
				
				;Monta a rotina de acordo com o que foi definido no campo
				set RotinaStr = "set strStatus = "_ExecutarDepois
				xecute RotinaStr
			}
			else{
				set strStatus = "Rotina para executar depois da importação no formato inválido."
			}
		}
    
    }
    

    if $$$ISOK(strStatus){
        set newFELD = pYFELD
        set $$$VARImportarArquivoImportadoEm(newFELD)  = $H     ;Importada Em
        set $$$VARImportarArquivoImportadoPor(newFELD) = YBED   ;Importada Por

        set YFORM = "VARImportarArquivo"
        set strStatus=$$$Save("VARImportarArquivo",pYKEY,newFELD,$$$YES)
        
        set ^CacheTemp(YUSER,"ImportarArquivo",pYKEY,"RegistrosImportados") = cont
                            
    }

    quit strStatus
    
	
READ(FILE,blnIsUTF8=$$$NO) ;  öffnen zum lesen  ;open to read 

	;Rotina copiada de $$READ^WWWDEV por Petik em 13-Set-2011
	;
    ;-------------------------------------------------------------------------------
    ;	open file in read mode
    ;
    ; History:
    ; 16-Jan-2009	FIS		SR16304: Read Unicode with UTF-8 Translation Table
    ;-------------------------------------------------------------------------------
	;S DEV=$$READ^WWWDEV("x:\file.dat")
	IF $FIND($ZVERSION,"Linux")   SET FILE=$TRANSLATE($GET(FILE),"\","/")  ;LINUX
	IF $FIND($ZVERSION,"Windows") SET FILE=$TRANSLATE($GET(FILE),"/","\")  ;windows
	SET %DEV=""
	IF '$DATA(FILE) QUIT %DEV
	IF FILE="" QUIT %DEV
	IF $EXTRACT($TRANSLATE(FILE,"a","A"),1,2)="A:" IF $GET(%ZCS("cli_ip_address"))'="127.0.0.1" QUIT %DEV  ;FELHER WENN NICHT LOCAL BEI A: ;when Not next to 
	;IF YQUERY'="%KEY" SET %DEV=51
	IF YQUERY="%KEY" SET %DEV=FILE
	;IF YQUERY'="%KEY" OPEN %DEV:(FILE:"R"):1 ;msm
	;IF YQUERY="%KEY" OPEN %DEV:("R"):1
	;if (blnIsUTF8 = $$$YES) && (YQUERY="%KEY") {
		;OPEN %DEV:"RK\UTF8\":1
	
	;} elseif (YQUERY="%KEY") {
		//OPEN %DEV:("R"):1
		;OPEN %DEV:"RK\RAW\":1
		OPEN %DEV::1
	;}
	;PETIK 13-Set-2011
	;Em caso de erro ao abrir o arquivo não tinha como saber ao chamar essa função
	;Por isso setei a variável %DEV para vazia
	IF '$TEST SET %DEV=""
	QUIT %DEV	



MontarOrigemPaginada(pYKEY,pYFELD,pQtdeReg="")
	;do MontarOrigemPaginada^VARImportarArquivo(pYKEY,pYFELD)
   
	;for i=1:1:100 { hang 1 }
	
    quit:( '$D(^VARImportarArquivoOrigem(YM,pYKEY)) )
    
    
    new idPagina, idFiltro, Classe, FormAtual, AbaSelecionada, Chave1PrimeiroRegistro, Chave2PrimeiroRegistro,
    RegistrosPorPagina, PrimeiroRegistroPagina, MostrarCampoBusca, TextoCampoBusca, ComandoHTMLAposCampoBusca,
    ChaveEncontrada, PaginaSelecionada, RegistrosPorPaginaDigitado
    
	set idPagina                   = "PAGINAORIGEM"
	set idFiltro                   = ""	;"FILTROORIGEM"
    set Classe                     = "VARImportarArquivoOrigem"
	set FormAtual                  = "VARImportarArquivo"	;YFORM
	set AbaSelecionada             = YSEITE
	set Chave1PrimeiroRegistro     = pYKEY
	set Chave2PrimeiroRegistro     = ""
	set PrimeiroRegistroPagina     = ""
	set MostrarCampoBusca          = $$$NO
	set TextoCampoBusca            = "Ir Para Registro: "
	set ComandoHTMLAposCampoBusca  = "" 
	set ChaveEncontrada            = ""

	;%("%KEY","YANZAHLPAGINAORIGEM")=666
	
	set RegistrosPorPaginaDigitado = $get(%("%KEY","YANZAHL"_idPagina))
	
	if $D(^AEPUserFootPrint(YM,FormAtual,$$$RecordsPerPage_idPagina,YBED,1)){	
		set RegistrosPorPagina = $G(^AEPUserFootPrint(YM,FormAtual,$$$RecordsPerPage_idPagina,YBED,1))
	}
	else{
		set RegistrosPorPagina = 15
	}
	if (RegistrosPorPaginaDigitado '= "") && (RegistrosPorPaginaDigitado '= RegistrosPorPagina){
		set RegistrosPorPagina = RegistrosPorPaginaDigitado
		set ^AEPUserFootPrint(YM,FormAtual,$$$RecordsPerPage_idPagina,YBED,1) = RegistrosPorPaginaDigitado
	}
	
	;set ^AEPUserFootPrint(YM,FormAtual,$$$CurrentPage_idPagina,YBED,1) = 20

	if $D(^AEPUserFootPrint(YM,FormAtual,$$$CurrentPage_idPagina,YBED,1)){	
		set PaginaSelecionada      = $G(^AEPUserFootPrint(YM,FormAtual,$$$CurrentPage_idPagina,YBED,1))
	}
	else{
		set PaginaSelecionada      = ""
	}
	
	do createPagingHeaderTwoPrimaryKeys^VARCOMTableUtil(idPagina,Classe,FormAtual,AbaSelecionada,RegistrosPorPagina,MostrarCampoBusca,TextoCampoBusca,ComandoHTMLAposCampoBusca,.Chave1PrimeiroRegistro,.Chave2PrimeiroRegistro,.PrimeiroRegistroPagina)
	
	do MontarGridOrigemPaginada(Chave1PrimeiroRegistro,RegistrosPorPagina,Chave2PrimeiroRegistro)
	
	if (RegistrosPorPagina > 20) {
		do createPagingHeaderTwoPrimaryKeys^VARCOMTableUtil(idPagina,Classe,FormAtual,AbaSelecionada,RegistrosPorPagina,MostrarCampoBusca,TextoCampoBusca,ComandoHTMLAposCampoBusca,.Chave1PrimeiroRegistro,.Chave2PrimeiroRegistro,.PrimeiroRegistroPagina)
	}
	
	quit


MontarGridOrigemPaginada(pYKEY,pRegistrosPorPagina,pChave2PrimeiroRegistro)
   
    
    quit:( '$D(^VARImportarArquivoOrigem(YM,pYKEY)) )
    
    new PrimeiraLinha,DadosLinha,idLinha,Cabecalho,QtdeCampos,lstHeader,Sep, pYFELD
    
    set pYFELD = $G(^VARImportarArquivo(YM,pYKEY,1))
    
    set ]]><![CDATA[CodConfiguracao = $$$VARImportarA]]><![CDATA[rquivoCodConfiguracao(pYFELD) 
	set objConfiguracao = $G(^VARImportarConfig(YM,CodConfiguracao,1))
    
    set PrimeiraLinha = $$$VARImportarConfigPrimeiraLinhaCabecalho(objConfiguracao)
    set DadosLinha    = $G(^VARImportarArquivoOrigem(YM,pYKEY,1,1))
    set QtdeCampos    = $length(DadosLinha,Y)

    set lstHeader = ""
    set Cabecalho = ""
    set Sep       = ""
    
    ;Faz o FOR de acordo com a quantidade de campos da global
    FOR j=1:1:QtdeCampos {
        ;Indica se a 1a Linha Contém o Cabeçalho da Tabela
        if (PrimeiraLinha = 1) {
            set Cabecalho = Cabecalho_Sep_$replace($piece(DadosLinha,Y,j),"""","")
            set Sep       = ","
        }
        else{
            set Cabecalho = Cabecalho_Sep_"Campo "_j
            set Sep       = ","
        }
    }
    
    ;set lstHeader = lstHeader_$listbuild(Cabecalho)
    set lstHeader = lstHeader_$ListFromString(Cabecalho)
    
    //if ($$$VARImportarCSVImportadoEm(pYFELD) = "") {
        set Titulo = "Pré-Visualizar Dados do Arquivo de Origem:"
    //}
    //else{
    //    set Titulo = "Dados Importados:"        
    //}
    
    if $$Start^COMTable(lstHeader,Titulo) {
    
    	set ContLinha = 0
        set idLinha   = pChave2PrimeiroRegistro
        for {
            set idLinha=$order(^VARImportarArquivoOrigem(YM,pYKEY,idLinha))
            quit:idLinha=""
            
            ;Indica se a 1a Linha Contém o Cabeçalho da Tabela
            if (PrimeiraLinha = 1)&&(idLinha=1){
                continue
            }
            
            set DadosLinha = idLinha_":"_$G(^VARImportarArquivoOrigem(YM,pYKEY,idLinha,1))
            
            do NewLine^COMTable()
            ;Faz o FOR de acordo com a quantidade de campos da global
            FOR j=1:1:QtdeCampos {
                do InsertCell^COMTable($piece(DadosLinha,Y,j))
            }
            do EndLine^COMTable()
            
            set ContLinha =  ContLinha + 1
                        
	        ;Se a quantidade de registros for diferente de "" (vazio) mostra apenas a qtde de registros necessários
	        //if (pQtdeReg '= "")&&(pQtdeReg=idLinha){
        	
	        //    do NewLine^COMTable("lightsteelblue")
	        //    do InsertCell^COMTable("Mostrando apenas os "_pQtdeReg_" primeiros registros. Clique na aba Dados Origem para ver todos os registros do arquivo de origem.",,,,,,QtdeCampos)
	        //    do EndLine^COMTable()
            
	        //	quit	//sai do for
        	
	        //}
	        
	        ;Se a Quantidade de Linhas atingir a Quantidade de Registros por Página, sai do for
	        if (ContLinha = pRegistrosPorPagina){
	        	quit	//sai do for
        	}  

        }   
        
        do Stop^COMTable()  
    
    }
    
    
    quit  



VarDepurar

	do ^WWWVAR
	set YBED   ="RODRIGO"
	SET pYKEY  ="12/000018"
	SET pYFELD =$G(^VARImportarArquivo(0,pYKEY,1))
	set YKEY   = pYKEY
	
	quit]]></Routine>
</Export>