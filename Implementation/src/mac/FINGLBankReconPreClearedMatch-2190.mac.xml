<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLBankReconPreClearedMatch" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLBankReconPreClearedMatch
	#include COMSYS
	#include FINConst
 
MatchToGLTrans(pidBankRecon,penumMatch)
	;-------------------------------------------------------------------------------
	; Attempt to back pre cleared lines to GL trans
	;
	; Params: pidBankRecon		: The bank recon number
	; 		  penumMatch		: The type of match
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 03-Mar-2006	Steve S		SR14126: Created
	;-------------------------------------------------------------------------------
	new blnDate,blnRef,idLine,objPreClear,blnCredit,curAmount,strMatchRef,dteMatchDate
	new idTranLine,idIndex,strRef,dteDate,strNo,idUnMatched,objUnMatched,dteTran
	new intDifMatched,intDifClosest,objClosest,dteClosest
 
	set blnDate=$extract(penumMatch,1)
	set blnRef=$extract(penumMatch,2)
	
	set idLine=""
	for {
		set idLine=$order(^FINGLBankReconPreCleareds(YM,15,$$$ANINO,pidBankRecon,idLine))
		quit:(idLine="")
		continue:('$$IncludePreClear^FINGLBankReconPreCleared(pidBankRecon,idLine))
		
		set objPreClear=$get(^FINGLBankReconPreCleared(YM,pidBankRecon,idLine,1))
		
		set blnCredit=(+$$$FINGLBankReconPreClearedCredit(objPreClear)'=0)
		set curAmount=$select(blnCredit:$$$FINGLBankReconPreClearedCredit(objPreClear),
							  $$$YES:$$$FINGLBankReconPreClearedDebit(objPreClear))
		
		continue:(curAmount="") ;need an amount
		
		set strMatchRef=$$$FINGLBankReconPreClearedReference(objPreClear)
		if strMatchRef="" set strMatchRef=" "
		set dteMatchDate=$$$FINGLBankReconPreClearedTransactionDate(objPreClear)
		
		set idTranLine=""
		
		if (blnDate)&&(blnRef) { ; 1 1
			set idIndex=$select(blnCredit:5,$$$YES:4)
			set strRef=$$$Index(strMatchRef)
			set dteDate=$$$Index(dteMatchDate)
			set strNo=$$$ANINO
			
			if $data(^FINGLBankReconMatcheds(YM,idIndex,strNo,curAmount,dteDate,strRef,pidBankRecon)) {
				set idTranLine=$order(^FINGLBankReconMatcheds(YM,idIndex,strNo,curAmount,dteDate,strRef,pidBankRecon,""))	
			}
			
		} elseif ('blnDate)&&(blnRef) { ; 0 1
			set idIndex=$select(blnCredit:7,$$$YES:6)
			set strRef=$$$Index(strMatchRef)
			set strNo=$$$ANINO
 
			if $data(^FINGLBankReconMatcheds(YM,idIndex,strNo,curAmount,strRef,pidBankRecon)) {
				set idTranLine=$order(^FINGLBankReconMatcheds(YM,idIndex,strNo,curAmount,strRef,pidBankRecon,""))	
			}
			
		} elseif (blnDate)&&('blnRef) { ; 1 0
			set idIndex=$select(blnCredit:11,$$$YES:10)
			set dteDate=$$$Index(dteMatchDate)
			set strNo=$$$ANINO
			
			if $data(^FINGLBankReconMatcheds(YM,idIndex,strNo,curAmount,dteDate,pidBankRecon)) {
				set idTranLine=$order(^FINGLBankReconMatcheds(YM,idIndex,strNo,curAmount,dteDate,pidBankRecon,""))
			}
			
		} elseif ('blnDate)&&('blnRef) { ; 0 0
			set idIndex=$select(blnCredit:9,$$$YES:8)
			set strNo=$$$ANINO
			set objClosest=""
			
			set idUnMatched=""
			for {
				set idUnMatched=$order(^FINGLBankReconMatcheds(YM,idIndex,strNo,curAmount,pidBankRecon,idUnMatched))	
				quit:(idUnMatched="")
				
				set objUnMatched=$get(^FINGLBankReconMatched(YM,pidBankRecon,idUnMatched,1))
				set dteTran=$$$FINGLBankReconMatchedTransactionDate(objUnMatched)
				
				set dteClosest=$piece(objClosest,Y,2)
				
				set intDifMatched=$zabs(dteMatchDate-dteTran)
				set intDifClosest=$zabs(dteMatchDate-dteClosest)
		
				if (intDifMatched<intDifClosest) {
					set objClosest=idUnMatched_Y_dteTran
				} elseif (intDifMatched>intDifClosest) {
					if (objClosest'="") {
						quit
					}
				}
			}
			
			set idTranLine=$piece(objClosest,Y,1)
		}
		
		if (idTranLine'="") do PerformMatch(pidBankRecon,idLine,idTranLine,penumMatch)
	}
 
 
	quit
	
	
PerformMatch(pidBankRecon,pidLine,pidTranLine,penumMatch)
	;-------------------------------------------------------------------------------
	; Match a pre clear line to a GL tran
	;
	; Params:	pidBankRecon	: The bank rec number
	; 			pidLine			: The pre clear line number
	; 			pidTranLine		: The unmatched tran to match to
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 03-Mar-2006	Steve S		SR14126: Created
	;-------------------------------------------------------------------------------
	new objPreClear,objTranLine
 
	if ('$$$NoKey(pidBankRecon))&&($get(pidLine)'="") {
		set objPreClear=$get(^FINGLBankReconPreCleared(YM,pidBankRecon,pidLine,1))
		set $$$FINGLBankReconPreClearedCleared(objPreClear)=$$$YES
		set $$$FINGLBankReconPreClearedGLTranLine(objPreClear)=pidTranLine
		do Save^COMUtils("FINGLBankReconPreCleared",pidBankRecon_","_pidLine,objPreClear,1)
		do HandlePreCleared^FINGLBankReconPreCleared(pidLine,objPreClear,$$$YES,$$$NO,,pidBankRecon,pidLine,$$$NO)
		
		set objTranLine=$get(^FINGLBankReconMatched(YM,pidBankRecon,pidTranLine,1))
 
		do UpdateCleared^FINGLBankRecon(pidBankRecon,
										pidBankRecon,
										$$$FINGLBankReconMatchedTransaction1(objTranLine),
										$$$FINGLBankReconMatchedTransactionLine(objTranLine),
										$$$NO,
										$$$NO,
										$$$FINGLBankReconPreClearedReference(objPreClear),
										$$$FINGLBankReconPreClearedTransactionDate(objPreClear),
										"",
										penumMatch,
										,
										$$$NO)
										
		do AddParentAndChild^FINGLBankReconManualMatch(pidBankRecon,"FINGLBankReconPreCleared",pidBankRecon_","_pidLine,"FINGLBankReconMatched",pidBankRecon_","_pidTranLine,$$$NO)
	}
 
 
	quit
	
	
RemoveFromPreCleared(pidBankRecon,pidRow)
	;-------------------------------------------------------------------------------
	; Given the selected unmatched tran, remove the precleared entries that
	; were matched to it.
	;
	; Params: pidBankRecon	: The bank rec number
	; 		  pidRow		: The tran line number
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 03-Mar-2006	Steve S		SR14126: Created
	;-------------------------------------------------------------------------------
	new idPreCleared,objPreClear,idLine,objLine,strStatus
	
	if '$$$NoKey(pidBankRecon)&&($get(pidRow)'="") {
		set idPreCleared=$order(^FINGLBankReconPreCleareds(YM,20,$$$Index(pidRow),pidBankRecon,""))
		if idPreCleared'="" {
			set objPreClear=$get(^FINGLBankReconPreCleared(YM,pidBankRecon,idPreCleared,1))
			
			set $$$FINGLBankReconPreClearedCleared(objPreClear)=$$$ANNO
			set $$$FINGLBankReconPreClearedGLTranLine(objPreClear)=""
			
			set strStatus=$$$Save("FINGLBankReconPreCleared",pidBankRecon_","_idPreCleared,objPreClear,1)
			
			set idLine=""
			for {
				set idLine=$order(^FINGLBankReconPreCleared(YM,pidBankRecon,idLine))
				quit:(idLine="")
				
				set objLine=$get(^FINGLBankReconPreCleared(YM,pidBankRecon,idLine,1))
				
				continue:(pidBankRecon_","_idPreCleared)'=$$$FINGLBankReconPreClearedReverse(objLine)
				set ^CacheTempPreClearKill(YUSER,idLine)=""	
			}
		}
	}
 
	quit
	
	
HasMatchingPreClear(pidBankRecon,pidLine)
	;-------------------------------------------------------------------------------
	; For a tran line, has it been matched to a pre clear?
	;
	; Params: pidBankRecon		: The bank rec number
	; 		  pidLine			: The tran line number
	;
	; ByRefs:
	;
	; Returns: blnHasMatch
	;
	; History:
	; 03-Mar-2006	Steve S		SR14126: Created
	;-------------------------------------------------------------------------------
	new blnHasMatch,strLine
 
	set blnHasMatch=$$$NO
	if '$$$NoKey(pidBankRecon) {
		set strLine=$$$Index(pidLine)
		set blnHasMatch=(''$data(^FINGLBankReconPreCleareds(YM,20,strLine,pidBankRecon)))
	}
 
	quit blnHasMatch
	
	
RemoveGLTranMatch(pidBankRecon,pidMatchedLine)
	;-------------------------------------------------------------------------------
	; When a pre clear is uncleared, remove its corresponding matched GL tran.
	;
	; Params:	pidBankRecon		: The bank rec number
	; 			pidMatchedLine		: The GL tran number
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 06-Mar-2006	Steve S		SR14126: Created
	;-------------------------------------------------------------------------------
	new objMatchLine
	
	if ('$$$NoKey(pidBankRecon))&&($get(pidMatchedLine)'="") {
		set objMatchLine=$get(^FINGLBankReconMatched(YM,pidBankRecon,pidMatchedLine,1))	
		do UpdateCleared^FINGLBankRecon(pidBankRecon,											;1
										pidBankRecon,											;2
										$$$FINGLBankReconMatchedTransaction1(objMatchLine),		;3
										$$$FINGLBankReconMatchedTransactionLine(objMatchLine),	;4
										$$$YES,													;5
										,														;6
										,														;7
										,														;8
										,														;9
										,														;10
										,														;11
										$$$NO)													;12
	}
 
	quit
]]></Routine>
</Export>