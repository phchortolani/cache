<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INMOVPallet" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INMOVPallet
	
#include COMGridEdit31
#include COMSYS
#include INConst
#include %occInclude
	
#define DELIM	$char(31)
#define FORMFldINMOVPalletFromStore	1
	
#define FORMFldINMOVPalletPallet		1
#define FORMFldINMOVPalletToStorage		2
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INMOVPallet("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
OnBlur(pYM,pYFORM,pYKEY,&pYFELD,pGridRow,pGridCol,pYINHALT)
	;-------------------------------------------------------------------------------
	; On Blur from From Storage field.
	;
	; Params:	pidField	- field id
	;
	; ByRefs:	pobjLine	- current line object
	;			QOH 		- Value of QuantityOnHand Manual Field   ; see FIXME
	;			YRED		- Error colour
	;			YTOOLTIP
	;			
	; Returns:
	;
	; History:
	; 29-Jun-2011	shobby	SR17815: Clear if empty
	; 02-May-2011	PPP		SR17715/1: Add the ref to $$$INMOVPalletOldPhysicalStorage
	; 20-Apr-2011	GRF		SR17715: Created from INMOVLine
	;-------------------------------------------------------------------------------
	new idLocn,idStorage,objHeader,objStore
	
	set objHeader = $$$GRIDYFELDContainer
	set idLocn    = $$$INMOVLocation(objHeader)
	set idStorage = $$$INMOVPalletPallet(pYFELD)
	
	//SR17715/1
	if idStorage'="" {
		set objStore = $get(^INLP(0,idLocn,idStorage,1))
		set $$$INMOVPalletOldPhysicalStorage(pYFELD) = $$$INLPPhysical(objStore)
	} else {
		set $$$INMOVPalletOldPhysicalStorage(pYFELD) = ""  ;SR17815
	}
	; Redraw DynTable
	do ShowItems^INMOVPalletTable($$$EnumWWWDYNTABLEGridLineFocus,"INMOVByPallet"_$$$DELIM_"INMOVPallet"_$$$DELIM_"TSU"_$$$DELIM_pGridRow)
	do CreateXref()
	quit
	
	
CanPost(pidKey)
	;-------------------------------------------------------------------------------
	; NOT FUNCTIONAL - see IsFirmable in alMOV.dUMovPallet
	; 
	; Need to recheck OnBeforeSave in case someone has edited the INLP (e.g. set a
	; New Physical Storage to "Disused") since saving.
	; 
	; 
	; History:
	; 04-May-2011	GRF		SR17715: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus  = $$$OK
	quit strStatus
	
	
OnBeforeSave(pidKey,&pobjLine)  
	;-------------------------------------------------------------------------------
	; OnBeforeSave for the INMOVPallet record
	; 
	; Called By : OnBeforeSave for *FORM* INMOVPallet as Grid save for INMOVByPallet
	;
	; Params:	pidField	- field id
	;
	; ByRefs:	pobjLine	- current line object
	;
	; Returns:  sc (should be strStatus)
	;           YRETVAL ? implicit - how used?
	;
	; History:
	; 20-Apr-2011	GRF		SR17715: Created from INMOVLine
	;-------------------------------------------------------------------------------
	new idLocn,idMoveKey,idMoveLine,idPallet,idPhysical,intMaxTSU
	new objHeader,objPhysical,objStore,strStatus
	
	$$$LogR("OnBeforeSave",pidKey)
	
	set strStatus  = $$$OK
	
	set idMoveKey  = $$$KEY1(pidKey)
	set idMoveLine = $$$KEY2(pidKey)
 
	set objHeader  = $$$GRIDYFELDContainer
	set idLocn     = $$$INMOVLocation(objHeader)
	
	set idPallet   = $$$INMOVPalletPallet(pobjLine)
	set idPhysical = $$$INMOVPalletToStorage(pobjLine)
	;	
	
	if idMoveKey="" {
		set strStatus = $$$MakeStatus("IN00754")           ; "Missing Key Value"
	
	} else {
		if idPallet="" {
			set strStatus = $$$MakeStatus("IN01293",idMoveLine)
			  ; "Pallet has not been set in line %1"
		
		} else {
			set objStore = $get(^INLP(0,idLocn,idPallet,1))
			if objStore="" {
				set strStatus = $$$MakeStatus("IN00821",idPallet,idLocn)
			  ; "Storage %1 does not exist in location %2"
				
			} elseif ($$$INLPPhysical(objStore)=idPhysical) {
				set strStatus = $$$MakeStatus("IN01289")
			  ; "New Physical Storage is same as existing Physical Storage"
			
			} elseif $$$INLPDisusedStorage(objStore) {
				set strStatus = $$$MakeStatus("IN01294",idMoveLine)
			} ; "Pallet is Disused in line %1"
		}
		
		if $$$ISOK(strStatus) {
			if idPhysical="" {
				set strStatus = $$$MakeStatus("IN00734")
			  ; "To Storage needs to be specified"
				
			} else {
				set objPhysical = $get(^INLP(0,idLocn,idPhysical,1))
				if objPhysical="" {
					set strStatus = $$$MakeStatus("IN00821",idPhysical,idLocn)
				  ; "Storage %1 does not exist in location %2"
				
				} elseif $$$INLPTemporaryStorageUnit(objPhysical) {
					set strStatus = $$$MakeStatus("IN01288")
				  ; "Cannot allocate a TSU to another TSU"'
				
				} elseif $$$INLPDisusedStorage(objStore) {
					set strStatus = $$$MakeStatus("IN01294",idMoveLine)
				  ; "Physical Storage is Disused in line %1"
				
				} else {
					set intMaxTSU  = $$$INLPMaxTSUCount(objPhysical)
					if $$IsPhysicalFull($$$Index(idLocn),$$$Index(idPhysical),$$$INVORGApplyTSULimit($get(^INVORG(0,0,1))),.intMaxTSU) {
						set strStatus = $$$MakeStatus("IN01291",intMaxTSU)
					} ; "This Storage is full. (Maxm %1 allowed)"
				}
			}
		}
	}
	if $$$ISERR(strStatus) set YRETVAL = strStatus
	quit strStatus
	
		
OnBeforeDisplayCombo(pstrKeys,pobjMovPallet,pintCol,&pSUCH)
	;-------------------------------------------------------------------------------
	; 
	; set pSUCH as the items to be used when you override the list (set via blnOverride)
	;
	; Called By: COMGridEdit executable when actually access combo box.
	; 
	; Inputs:
	;	pstrKeys		YKEY
	;	pobjMovPallet	YFELD
	; 
	; Returns: $$$YES or $$$NO (override the data) 
	;
	; History:
	; 15-Jun-2011	GRF		SR17716: TSU Closed now based on Status
	; 27-Apr-2011	GRF		SR17715: Copied
	;-------------------------------------------------------------------------------
	new blnOverride,idLocn,idMove,idStore,objMove,objStore
	
	$$$LogR("OnBeforeDisplayCombo",pstrKeys_","_$get(pintCol))
	
	set blnOverride = $$$NO
	
	set idMove  = $translate($$$KEY1(pstrKeys),$$$DBLQUOTE)
	set objMove = $get(^INMOV(0,idMove,1))
	set idLocn  = $$$INMOVLocation(objMove)
	
	
	; F1 - From Storage (Pallet)
	;---------------------------------------
	if pintCol=$$$FORMFldINMOVPalletPallet  {
		kill pSUCH
		set pSUCH = "SUCH"
		if idLocn'="" {
			set idStore = ""
			for {
				set idStore = $order(^INLP(0,idLocn,idStore))
				quit:idStore=""
				
				set objStore = $get(^INLP(0,idLocn,idStore,1))
				continue:'$$$INLPTemporaryStorageUnit(objStore)
		;		continue:'$$$INLPClosed(objStore)    ; SR17716
				continue:$$IsTSUOpen^INLPStatus($$$INLPStatus(objStore))
				
				set pSUCH(idStore) = idStore
			}
			set blnOverride = $$$YES
		}
		
	; F2 - To Storage (New Physical Location)
	;---------------------------------------
	} elseif pintCol=$$$FORMFldINMOVPalletToStorage  {
		kill pSUCH
		set pSUCH = "SUCH"
		if idLocn'="" {
			set idStore = ""
			for {
				set idStore = $order(^INLP(0,idLocn,idStore))
				quit:idStore=""
				
				set objStore = $get(^INLP(0,idLocn,idStore,1))
				continue:$$$INLPTemporaryStorageUnit(objStore)
				
				set pSUCH(idStore) = idStore
			}
			set blnOverride = $$$YES
		}
	}
	quit blnOverride
	
	
OnBeforeFormat(pstrYFIELDNAME,pstrText,pobjPallet)
	;-------------------------------------------------------------------------------
	; Determine how particular fields on the Movement Line are to be displayed.
	; 
	; Called By :
	; 	1. INMOV on loading the line
	; 	2. ScreenUpdateStyle^COMGridEdit31S via COMGridEdit31Events as CallEvent
	;
	; Params:
	;	pstrYFIELDNAME		Field name   (e.g. Y3_6)
	;	pstrText			Not used
	;	pobjPallet			Movement Pallet record (INMOVPallet format corresponding to
	;							grid line from pstrYFIELDNAME)
	; ByRefs:
	;	YGRIDWHITE
	;	YFONTCOLOR
	;	YKEY
	;
	; Returns: Nothing
	;
	; History:
	; 15-Jun-2011	GRF		SR17716: TSU Closed now based on Status
	; 28-Apr-2011	GRF		SR17715: Created from INMOVLine
	;-------------------------------------------------------------------------------
	new idField,idLocn,idPallet,idPhysical,intCol,intMaxTSU,intRow
	new objHeader,objPhysical,objStore,sc
	

	; INMOV Header
	;---------------------------------------
	set objHeader  = $$$GRIDYFELDContainer
	set idLocn     = $$$INMOVLocation(objHeader)
	
	; INMOVPallet from Grid
	;---------------------------------------
	set idPallet   = $$$INMOVPalletPallet(pobjPallet)
	set idPhysical = $$$INMOVPalletToStorage(pobjPallet)
	
	; Grid Position
	;---------------------------------------
	$$$GRIDSplitKey(pstrYFIELDNAME,intRow,intCol)
	set idField = $$$GetClassField(YFORM,intCol)	
	
	if $$$INMOVStatus(objHeader)=2 {
		quit:(idField '= $$$FldINMOVLineBundle)
	}
	
	
	;---------------------------------------
	; ONLY CONSIDER OPEN RECORDS
	;---------------------------------------
	
	if $$$INMOVStatus(objHeader)'=2 { 
		
	; From Storage (TSU/Pallet)
	;---------------------------------------
		if (idField = $$$FORMFldINMOVPalletPallet) {
			if idPallet'="" {
				set objStore = $get(^INLP(0,idLocn,idPallet,1))
				
				if objStore="" {
					set YTOOLTIP = $$$Text($listbuild("IN01287",idPallet,idLocn))
					set YWARNING = $$$YES
					; "Pallet %1 does not exist in location %2"
				
		;		} elseif '$$$INLPClosed(objStore) {                  ; SR17716
				} elseif $$IsTSUOpen^INLPStatus($$$INLPStatus(objStore)) {
						set YTOOLTIP = $$$Text($listbuild("IN01286"))
						set YWARNING = $$$YES
					; "This is an Open Pallet - Close before moving."
				
				} else {	
					if $order(^CacheTempINMOVPallet("Xref",YUSER,idPallet,"")) '=
					   $order(^CacheTempINMOVPallet("Xref",YUSER,idPallet,""),-1) {
						set YTOOLTIP = $$$Text($listbuild("IN01290"))
						set YWARNING = $$$YES
					}
				}	; "This Pallet is already present on this movement"
			}
			
	; To Storage (Physical Storage)
	;---------------------------------------
		} elseif (idField = $$$FORMFldINMOVPalletToStorage) {
			if (idPhysical'="") && (idPallet'="") {
				set objPhysical = $get(^INLP(0,idLocn,idPhysical,1))
				if $$$INLPTemporaryStorageUnit(objPhysical) {
					set YTOOLTIP = $$$Text("IN01288")         ; "Cannot allocate a TSU to another TSU"
					set YWARNING = $$$YES
					
				} else {
					set objStore = $get(^INLP(0,idLocn,idPallet,1))
					if ($$$INLPPhysical(objStore)=idPhysical) {
						set YTOOLTIP = $$$Text("IN01289")     ; "New Physical Storage is same as existing Physical Storage"
						set YWARNING = $$$YES
					
					} else {
						set intMaxTSU = $$$INLPMaxTSUCount(objStore)
						if $$IsPhysicalFull($$$Index(idLocn),$$$Index(idPhysical),$$$INVORGApplyTSULimit($get(^INVORG(0,0,1))),.intMaxTSU) {
							set YTOOLTIP = $$$Text($listbuild("IN01291",intMaxTSU))
							set YWARNING = $$$YES
						} ; "This Storage is full. (Maxm %1 allowed)"
					}
				}
			}
			
		}
	}
	quit
	
	
IsPhysicalFull(pidxSite,pidxPhys,pblnDefault,&pintMaxTSU)
	;-------------------------------------------------------------------------------
	; Are there the maximum TSUs (pallets) assigned to a Physical Storage that the
	; storage can hold?
	; 
	; If the INLP record does not specify a maximum, the INVORG General Parameters
	; will determine if the maximum is one or if no maximum should apply.
	; 
	; History:
	; 03-May-2011	GRF		SR17715: Created
	;-------------------------------------------------------------------------------
	new blnIsFull,idxTSU,intTSUCount
	
	set blnIsFull = $$$NO
	
	if (pintMaxTSU="") && pblnDefault set pintMaxTSU = 1
	
	if pintMaxTSU'="" {
		set idxTSU = ""
		for intTSUCount=0:1 {
			set idxTSU = $order(^INLPs(0,5,pidxSite,pidxPhys,idxTSU))
			quit:idxTSU=""
		}
		set blnIsFull = (intTSUCount>=pintMaxTSU)
	}
	quit blnIsFull
	
	
CreateXref()
	;-------------------------------------------------------------------------------
	; Called By: OnBlur
	; 
	; History:
	; 28-Apr-2011	GRF		SR17715: Created
	;-------------------------------------------------------------------------------
	new dteToday,idGridCell,idLine,idPallet
	
	set dteToday = +$horolog
	
	kill ^CacheTempINMOVPallet("Xref",YUSER)
	set idLine = ""
	for {
		set idLine = $order(^WWWDATEN(0,dteToday,YUSER,"INMOVPallet","V","REFERENCEKEY",idLine))
		quit:idLine=""
		continue:$data(^WWWDATEN(0,dteToday,YUSER,"INMOVPallet","V","KILLEDRECORD",idLine))
		
		set idGridCell = "Y"_idLine_"_"_1
		set idPallet = $get(^WWWDATEN(0,dteToday,YUSER,"INMOVPallet","V","REFERENCEVALUE",idGridCell,1))
		set ^CacheTempINMOVPallet("Xref",YUSER,idPallet,idLine) = ""
	}
	quit
]]></Routine>
</Export>