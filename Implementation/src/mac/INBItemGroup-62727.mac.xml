<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INBItemGroup" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INBItemGroup
	
#include INConst
#include COMSYS
	
GetCode(pidGroup,pidCompany)
	;-------------------------------------------------------------------------------
	; Calculate the code (hierarchical string) for an item group
	; NOTE: Used by calculated field "Code"
	;
	; Params:	pidGroup	- INItemGroup id
	; 			pidCompany	- (optional) company override
	;
	; ByRefs:
	;
	; Returns:	string - code
	;
	; History:
	; 24-Sep-2007	PJones	Note that GetCode is no longer being used by 
	; 							INItemGroup^Start . See comment in INItemGroup^Start 
	; 							for details.
	; 22-Nov-2006	JW		BR014285: Created
	;-------------------------------------------------------------------------------
	new objGroup,strCode,strDelim
	
	//if $get(pidCompany)'="" set YM=pidCompany
	
	set strDelim = $$$INVORGItemGroupDelimiter($get(^INVORG(0,0,1)))
	
	// while A not null
	// 	prepend delimiter and acronym(A) to text
	// 	set A = parent(A)
	
	set strCode = ""
	while (pidGroup'="") {
		set objGroup = $get(^INItemGroup(0,pidGroup,1))
		set strCode = strDelim_$$$INItemGroupAcronym(objGroup)_strCode
		
		set pidGroup = $$$INItemGroupParentGroup(objGroup)
	}
	set $extract(strCode,1,$length(strDelim))=""		// Remove first delimiter
	quit strCode
	
	
GetLevel(pidGroup,pidCompany)
	;-------------------------------------------------------------------------------
	; Get the hierarchical level of the item group.
	; NOTE: Used by calculated field "Level"
	; 
	; Params:	pidGroup	- INItemGroup id
	; 			pidCompany	- (optional) company override
	;
	; ByRefs:
	;
	; Returns:	int - level
	;
	; History:
	; 13-Dec-2006	JW		BR014285: Created
	;-------------------------------------------------------------------------------
	new intLevel
	
	//if $get(pidCompany)'="" set YM=pidCompany
	
	set intLevel=""
	while (pidGroup'="") {
		set pidGroup = $$$INItemGroupParentGroup($get(^INItemGroup(0,pidGroup,1)))
		set intLevel = intLevel+1
	}
	quit intLevel
	
	
GetNodes(pidGroup)
	;-------------------------------------------------------------------------------
	; Return a group, its ancestors and direct children - for display.
	;
	; Params:
	;
	; ByRefs:	global array: ^CacheTempItemGroup(YUCI,YUSER,idGroup)=parent
	;
	; Returns:
	;
	; History:
	; 03-Jun-2011	GRF		SR17716: Replace order macro
	; 23-Nov-2006	JW		BR014285: Created
	;-------------------------------------------------------------------------------
	new idGroup,idParent,objGroup,idxGroup
	
	kill ^CacheTempItemGroup(YUCI,YUSER)
	
	// Get ancestors
	
	set idGroup = pidGroup
	while (idGroup'="") {
		set objGroup = $get(^INItemGroup(0,idGroup,1))
		set idParent = $$$INItemGroupParentGroup(objGroup)
		set ^CacheTempItemGroup(YUCI,YUSER,idGroup) = idParent
		set idGroup = idParent
	}
	
	// Get children
	
	set idxGroup = $$$Index(pidGroup)
	set idGroup  = ""
	for {
		set idGroup = $order(^INItemGroups(0,1,idxGroup,idGroup))
		quit:idGroup=""
		
		set ^CacheTempItemGroup(YUCI,YUSER,idGroup) = pidGroup
	}
	quit
	
	
InUse(pidGroup)
	;-------------------------------------------------------------------------------
	; Is the group in use?  ie has children, or on an item.
	; 
	; Called By : OnBeforeDelete^INUItemGroup
	;
	; Params:	pidGroup - key
	;
	; ByRefs:
	;
	; Returns: boolean
	;
	; History:
	; 28-Oct-2008	GRF		SR16028: Can't delete if specified as the default group
	; 12-Jan-2007	JW		SR15309: Inverted logic from CanDelete
	; 23-Nov-2006	JW		BR014285: Created
	;-------------------------------------------------------------------------------
	new blnInUse,idxGroup
	
	; FIXME : Not Considering SALGroup - used to link Item Groups to General Ledger
	;         Profile Categories (inversion of INARTGROUP?) <GRF>
	;         Also SALLocationRule 
	
	set idxGroup = $$$Index(pidGroup)
	
	set blnInUse = ( $data(^INItemGroups(0,1,idxGroup)) ||
				     $data(^INARTs(0,40,idxGroup))      ||
				    ($$$INVORGDefaultItemGroup($get(^INVORG(0,0,1))) = pidGroup) )
	quit blnInUse
	
	
OnAfterDelete(pidGroup)
	;-------------------------------------------------------------------------------
	; Delete associated subclasses
	;
	; Params:	pidGroup - INItemGroup id
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 04-Dec-2006	JW		BR014285: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	; FIXME : Not Considering SALGroup - used to link Item Groups to General Ledger
	;         Profile Categories (inversion of INARTGROUP?) <GRF>
	;         Also SALLocationRule 
	
						  set strStatus = $$KillChildren^COMUtils("INARTGROUP",pidGroup)
	if $$$ISOK(strStatus) set strStatus = $$KillChildren^COMUtils("INARTRUNDUNG",pidGroup)
	if $$$ISOK(strStatus) set strStatus = $$KillChildren^COMUtils("INFIBITEMGROUP",pidGroup)
	if $$$ISOK(strStatus) set strStatus = $$KillChildren^COMUtils("INKALKPREIS",pidGroup)
	
	if $$$ISERR(strStatus) {
		set Q = $$$QDontDelete
	}
	quit
	
	
OnBeforeSave(pidGroup,pobjGroup)
	;-------------------------------------------------------------------------------
	; Before Save, validate.
	; Parent cannot create circular reference.
	; Cannot make 
	;
	; Params:	pidGroup
	;
	; ByRefs:	Q
	;
	; Returns:	status
	;
	; History:
	; 12-Jan-2007	JW		SR15309: Added active check
	; 23-Nov-2006	JW		BR014285: Created
	;-------------------------------------------------------------------------------
	new strStatus,idGroup,idParent,objGroup
	
	set strStatus = $$$OK
	
	// Same check for making inactive as deletion
	if '$$$INItemGroupActive1(pobjGroup) && $$InUse(pidGroup) {
		set strStatus = $listbuild("IN00640",pidGroup)
	 ; "This record (%1) is in use. It cannot be made inactive."
	
	} else {
		set idParent = $$$INItemGroupParentGroup(pobjGroup)
		while (idParent'="") {
			quit:idParent=pidGroup
			
			set objGroup = $get(^INItemGroup(0,idParent,1))
			set idParent = $$$INItemGroupParentGroup(objGroup)
		}
		if idParent'="" {
			set strStatus = $listbuild("IN00557")
		} ; "The parent group selected is invalid, as it produces a circular group hierarchy."
	}
	
	if $$$ISERR(strStatus) {
		$$$Error(strStatus)
		set Q = $$$QDontSave
	}
	quit strStatus
	
]]></Routine>
</Export>