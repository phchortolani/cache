<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWWFORMCrossBrowserSupportClipboard" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
WWWFORMCrossBrowserSupportClipboard
	#include COMSYS
	
Setup()
	;-------------------------------------------------------------------------------
	; Only for Firefox and Gecko based browsers - You must go to about:config and
	; set "signed.applets.codebase_principal_support" to true to make this work.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 18-Feb-2011	shobby		SR17663: Before removal of unnecessary code (18:33)
	; 18-Feb-2011	shobby		SR17663: Created
	;-------------------------------------------------------------------------------

	
	&js<
		var shift = false
		
		var buffer = "";

		var SetClipboardData = function(text) {
			if(!window.netscape || !netscape.security) return; // Browsers that don't use the Gecko engine
			try {
				netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
				var comp_classes = Components.classes;
			} catch(e) {
				var strMessage='#($$$JSText($$$Text("WWW00136")))#';
				//signed.applets.codebase_principal_support must be set to true to allow clipboard access in Firefox.  Contact your System Administrator.
				alert(strMessage);

				return;
			} // When "signed.applets.codebase_principal_support" is set to false

			var type = "text/unicode";
			var comp_interf = Components.interfaces;
			var clipboard			= comp_interf.nsIClipboard;
			var clipboard_inst		= comp_classes["@mozilla.org/widget/clipboard;1"].createInstance(clipboard);
			var transferable		= comp_interf.nsITransferable;
			var transferable_inst	= comp_classes["@mozilla.org/widget/transferable;1"].createInstance(transferable);
			var supportsstring		= comp_interf.nsISupportsString;
			var supportsstring_inst	= comp_classes["@mozilla.org/supports-string;1"].createInstance(supportsstring);
			if(!clipboard_inst || !transferable_inst || !supportsstring_inst) return;

			transferable_inst.addDataFlavor(type);
			supportsstring_inst.data = text;
			transferable_inst.setTransferData(type, supportsstring_inst, text.length*2);
			clipboard_inst.setData(transferable_inst, null, clipboard.kGlobalClipboard);
		};

		window.clipboardData=new Object();
		
		window.clipboardData.getData = function(sDataFormat) {
			var strText='';
			
			sDataFormat = sDataFormat.toLowerCase();
			if ((sDataFormat != "text") && (sDataFormat != "url")) {
				alert("window.clipboardData.getData: The parameter sDataFormat is incorrect");
			} else {
		        try { 
		            if (netscape.security.PrivilegeManager.enablePrivilege) { 
						netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect"); 
		            } else { 
		                return ""; 
		            } 
		        } catch (ex) { 
		            return ""; 
		        } 

		        var clip = Components.classes["@mozilla.org/widget/clipboard;1"].getService(Components.interfaces.nsIClipboard); 
		        if (clip) { 
		        	var trans = Components.classes["@mozilla.org/widget/transferable;1"].createInstance(Components.interfaces.nsITransferable); 
		       		if (trans) {
		        		trans.addDataFlavor("text/unicode"); 
		        		clip.getData(trans, clip.kGlobalClipboard); 

		        		var str 	  = new Object(); 
		        		var strLength = new Object(); 

		        		trans.getTransferData("text/unicode", str, strLength); 
		        		if (str) {
			        		str  = str.value.QueryInterface(Components.interfaces.nsISupportsString); 
		        			strText = str.data.substring(0, strLength.value / 2); 
		        		}
		       		}
		        }
			}
	        return strText; 
		};
		
		window.clipboardData.setData = function(sDataFormat, sData) {
			var evt = null;

			if(window.event && event.type == "click") {
				// Opera - Google Chrome - Internet Explorer
				evt = event;
			} else if(arguments.callee.caller) {
				// Firefox - Netscape
				if(typeof arguments.callee.caller.arguments[0] == "object" && arguments.callee.caller.arguments[0].type == "click") {
					evt = arguments.callee.caller.arguments[0];
				} else if(arguments.callee.caller.caller && typeof arguments.callee.caller.caller.arguments[0] == "object" && arguments.callee.caller.caller.arguments[0].type == "click") {
					evt = arguments.callee.caller.caller.arguments[0];
				}
			}

			if(evt) {
				var target = evt.target || evt.srcElement;
				if(target.nodeType == 3) target = target.parentNode; // Defeat Safari bug
				if(target == "[object HTMLFontElement]") target = target.parentNode;

				if(target.toString().indexOf(location.href) != -1) {
					 // Opera - Firefox - Google Chrome
					if(evt.preventDefault) {
						evt.preventDefault();
					} else {
						evt.returnValue = false;
					}
				}
			}
			
			sDataFormat = sDataFormat.toLowerCase();
			if ((sDataFormat != "text") && (sDataFormat != "url")) {
				alert('window.clipboardData.setData: The parameter sDataFormat is incorrect');
			} else {
				setTimeout("("+SetClipboardData+")('"+sData+"');",0);
				if(shift) {
					buffer += sData + "\r\n";
					return true;
				} else if(buffer != "") {
					sData = buffer + sData;
					buffer = "";
				}
			}

			return true;
		};
		
	>
	
	quit
]]></Routine>
</Export>