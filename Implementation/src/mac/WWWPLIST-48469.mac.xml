<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWWPLIST" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
WWWPLIST
#include COMSYS
	;-------------------------------------------------------------------------------
	; 		Various tools for processing delimited list strings (not $list*)
	;		diverse Tools zum Arbeiten mit @net-Listen
	;
	; History :
	; 06-Mar-2009	GRF		Doco; mark byRef arguments; boolean macros
	; 02.07.2004	riemer	Revision: 1.1
	; 28.05.2003	ARI
	;-------------------------------------------------------------------------------
	
PUSH(&ioLIST,iWERT,iLEN,iTR)
	;-------------------------------------------------------------------------------
	; Add substring to front of the list and trim the list down to iLEN entries, if non-zero
	; fuegt iWERT in ioLIST Stack-like hinzu (also vorne)
	;
	; Inputs : 
	;	ioLIST = (byRef) Variable, in der die Liste gespeichert ist
	;	iWERT  = Wert, der in die Liste hinzugefuegt werden soll
	;	iLEN   = (optional) Laenge der Liste in Anzahl der Elemente.
	;	         Bei Ueberschreitung der Laenge wird am Ende der Liste abgeschnitten.
	;	         Standardmaessig ist die Laenge unbegrenzt.
	;	iTR    = Delimiter (optional, default comma)
	;-------------------------------------------------------------------------------
	QUIT:$GET(iWERT)=""
	
	SET ioLIST = $GET(ioLIST)
	SET iLEN   = $GET(iLEN)
	SET iTR    = $SELECT($GET(iTR)'="":iTR,1:",")
	SET ioLIST = iWERT_$SELECT(ioLIST'="":iTR_ioLIST,1:"")
	IF iLEN SET ioLIST = $PIECE(ioLIST,iTR,1,iLEN)
	QUIT
	
	
EXIST(iLIST,iWERT,iTR)
	;-------------------------------------------------------------------------------
	; return $$YES if string list contains the substring as an entry
	; prueft, ob iWERT in iLIST vorhanden ist
	;
	; Inputs : 
	;	iLIST  = die Liste
	;	iWERT  = Wert, auf Existenz in der Liste geprueft werden soll
	;	iTR    = Delimiter (optional, default comma)
	;	
	; Returns : boolean
	;-------------------------------------------------------------------------------
	QUIT:$GET(iWERT)="" $$$YES
	
	SET iLIST = $GET(iLIST)
	SET iLEN  = $GET(iLEN)
	SET iTR   = $SELECT($GET(iTR)'="":iTR,1:",")
	QUIT (iTR_iLIST_iTR)[(iTR_iWERT_iTR)
	
	
INSERT(&ioLIST,iWERT,pblnUnique,iTR)
	;-------------------------------------------------------------------------------
	; Add substring to end of the list unless it is already there and must be unique.
	; fuegt iWERT in ioLIST am Ende hinzu
	;
	; Inputs:
	;	ioLIST  = (byRef) Zeiger auf eine Variable (die Liste)
	;	iWERT   = Der Wert, der in die Liste eingefuegt werden soll
	;	pblnUnique = (optional)
	;	          0: (Standard) Werte duerfen mehrfach in der Liste vorkommen
	;	          1: Werte kommen nur eindeutig in der Liste vor
	;	iTR     = Delimiter (optional, default comma)
	;	          Trennzeichen, Standard ist , (Komma)
	;-------------------------------------------------------------------------------
	QUIT:$GET(iWERT)=""
	
	SET ioLIST  = $GET(ioLIST)
	SET iLEN    = $GET(iLEN)
	SET iTR     = $SELECT($GET(iTR)'="":iTR,1:",")
	
	SET pblnUnique = +$GET(pblnUnique)
	IF pblnUnique && $$EXIST(ioLIST,iWERT,iTR) QUIT
	SET ioLIST = ioLIST_$SELECT(ioLIST'="":iTR,1:"")_iWERT
	QUIT
	
	
DELETE(&ioLIST,iWERT,iTR)
	;-------------------------------------------------------------------------------
	; Delete all instances of the entry fron the list
	; Loescht iWERT aus ioLIST
	;-------------------------------------------------------------------------------
	SET iTR    = $SELECT($GET(iTR)'="":iTR,1:",")
	SET ioLIST = $$SUBSTR^WWWTOOLS(ioLIST,iTR_iWERT_iTR,iTR)   ; internal - must be 1st change
	SET ioLIST = $$SUBSTR^WWWTOOLS(ioLIST,iTR_iWERT)           ; last
	SET ioLIST = $$SUBSTR^WWWTOOLS(ioLIST,iWERT_iTR)           ; first
	SET ioLIST = $$SUBSTR^WWWTOOLS(ioLIST,iWERT)               ; only - must be last change
	QUIT
	
	
COUNT(iLIST,iTR)
	;-------------------------------------------------------------------------------
	; How many entries are there in the list
	; Zaehlt die Elemente in iLIST
	; 
	;	iTR     = Delimiter (optional, default comma)
	; 
	; Returns : integer
	;-------------------------------------------------------------------------------
	SET iTR = $SELECT($GET(iTR)'="":iTR,1:",")
	QUIT $LENGTH(iLIST,iTR)
	
	
GETAT(iLIST,iPOS,iTR)
	;-------------------------------------------------------------------------------
	; Return a particular entry (iPOS) from the list
	; Gibt ein Element aus der Liste iLIST an der Stelle iPOS zurueck
	; 
	; Returns : string
	;-------------------------------------------------------------------------------
	SET iTR = $SELECT($GET(iTR)'="":iTR,1:",")
	QUIT $PIECE(iLIST,iTR,iPOS)
	
]]></Routine>
</Export>