<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARVisaoGerItem" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARVisaoGerItem
    #include VARConst
    
    #define Continue Continue
    
    quit
    
GetEstoqueTipoUnid(pItem)
    
    new resultSet, sc
    
    set resultSet = ##class(Tasc.stock.Util).GetEstoqueTipoUnid(pItem)
    
    set sc = resultSet.Execute()
    
    if (sc) {
        write !," <div> "
        write !," <span>Posição do Produto</span> "
        write !," <table> "
        write !," <tr> "
        write !,"         <th> "
        write !,"           Tipo de Estabelecimento "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Qtde. Estoque disponível "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Qtde. Estoque Total "
        write !,"         </th> "
        write !," </tr> "
        
        while (resultSet.Next()) {
            write !," <tr> "
            write !," <td> "
            write $$SQLGetTipoUnidadeDesc^VARSQL(resultSet.Data("TipoEstab"))
            write !," </td> "
            
            write !," <td> "
            write resultSet.Data("QtyAvailable")
            write !," </td> "
            
            write !," <td> "
            write resultSet.Data("QtyTotal")
            write !," </td> "
            write !," </tr> "
            
        }
        write !," </table> "
        write !," </div> "
        
    }
    
    quit
    
GetVisaoEstoqueProd(pItem, pLocal="")
	/*********************************************************
	 2017-05-15	 Henrique Dias	LEAN-66	Remover as colunas que possuem o Nome NTO, NTH na visão do item
	 *********************************************************/
    new resultSet, sc, strTipoEstab, strErro, arrTempTipoEstab
    
    set resultSet = ##class(Tasc.stock.Util).GetEstoqueTipoUnid(pItem)
    
    set sc = resultSet.Execute()
    
    if (sc) {
        write !," <div> "
        write !," <span class='tituloTabela'>Visão Gerencial do Produto</span> "
        write !," <table> "
        write !," <tr> "
        write !,"         <th> "
        write !,"           Produto "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Unidade "
        write !,"         </th> "
        
        
        /*** LEAN-66
        write !,"         <th> "
        write !,"             Saldo CD "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Saldo NTO "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Saldo NTH "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Saldo UNIDADE "
        write !,"         </th> "
        ***/
        
        write !,"         <th> "
        write !,"             Custo Médio "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Consumo Médio na Rede "
        write !,"         </th> "
        
        if (pLocal '= "") {
	        write !,"<th>"
	        write !,"	Consumo Médio no Local ("_pLocal_")"
	        write !,"</th>"
        }
        
        write !,"         <th> "
        write !,"             Última Compra "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Próxima Entrega "
        write !,"         </th> "
        write !," </tr> "
        
        while (resultSet.Next()) {
	        set strTipoEstab = $get(resultSet.Data("TipoEstab"))
	        if (strTipoEstab '= "") {
            	set arrTempTipoEstab(strTipoEstab) = resultSet.Data("QtyAvailable")
	        }
        }
        set strErro = ""
        
        write !," <tr class='estiloOdd'> "
        write !,"         <td> "
        write !,"           "_pItem _ " - " _ $$SQLGetDescricaoProduto^VARSQL(pItem)_" "
        write !,"         </td> "
        write !,"         <td> "
        write !,"             "_$$SQLGetUnitSigla^VARSQL(pItem)_" "
        write !,"         </td> "
        
        /*** LEAN-66
        write !,"         <td class='textCenter'> "        
        write !,"             "_$$ObtemSaldoCD(pItem)_" "
        write !,"              "
        write !,"         </td> "
        write !,"         <td class='textCenter'> "
        write !,"             "_$get(arrTempTipoEstab(3))_" "
        write !,"         </td> "
        write !,"         <td class='textCenter'> "
        write !,"             "_$get(arrTempTipoEstab(2))_" "
        write !,"         </td> "
        write !,"         <td class='textCenter'> "
        write !,"             "_$get(arrTempTipoEstab(1))_" "
        write !,"         </td> "
        ***/
        
        write !,"         <td class='textCenter'> "
        write !,"             "_$$^WWWTR(0,8,$$SQLGetCustoMedioNewDtHr^VARSQL(pItem),2)_" "
        write !,"         </td> "
        write !,"         <td class='textCenter'> "
        write !,"             "_$$^WWWTR(0,12,$$GetMOVCalculated(pItem),2)_" "
        write !,"         </td> "
        
        if (pLocal '= "") {
	        write !,"<td class='textCenter'>"
	        write !," "_$$^WWWTR(0,12,$$GetMOVCalculated(pItem, pLocal),2)_" "
	        write !,"</td>"
        }
        
        write !,"         <td> "
        write !,"              "
        write !,"         </td> "
        write !,"         <td> "
        write !,"              "
        write !,"         </td> "
        write !," </tr> "
        
        write !," </table> "
        write !," </div> "
        
    }
    
    quit
    
GetConsumoProd(pItem,pMesesParaMedia=12)
    write !," <div> "
    write !," <span class='tituloTabela'>Consumo médio por Tipo</span> "
    write !," <table> "
    write !," <tr> "
    write !,"         <th> "
    write !,"           Produto "
    write !,"         </th> "
    write !,"         <th> "
    write !,"             Consumo Médio NTO "
    write !,"         </th> "
    write !,"         <th> "
    write !,"             Consumo Médio NTH "
    write !,"         </th> "
    write !,"         <th> "
    write !,"             Consumo Médio UNIDADE "
    write !,"         </th> "
    write !," </tr> "

    write !," <tr class='estiloOdd'> "
    write !," <td> "
    write !," "_pItem _ " - " _ $$SQLGetDescricaoProduto^VARSQL(pItem)_" "
    write !," </td> "
    write !," <td class='textCenter'> "
    write $$GetMOVCalculated^VARVisaoGerItem(pItem,,",11,21,22,",3,pMesesParaMedia,0)
    write !," </td> "
    write !," <td class='textCenter'> "
    write $$GetMOVCalculated^VARVisaoGerItem(pItem,,",11,21,22,",2,pMesesParaMedia,0)
    write !," </td> "
    write !," <td class='textCenter'> "
    write $$GetMOVCalculated^VARVisaoGerItem(pItem,,",11,21,22,",1,pMesesParaMedia,0)
    write !," </td> "
    write !," </tr> "
    
    write !," </table> "
    write !," </div> "
    quit
    
GetConsumoLocal(pItem)
    
    new resultSet, strLocaisConsHTML
    
    set strLocaisConsHTML = $$ImprimeLocalConsumo(pItem,10,2)
    
    if (strLocaisConsHTML '= "") {
    write !," <div> "
    write !," <span class='tituloTabela'>10 Locais com maior número de consumo nos últimos 2 meses</span> "
    write !," <table> "
    write !," <tr> "
    write !,"         <th> "
    write !,"           Local "
    write !,"         </th> "
    write !,"         <th> "
    write !,"             Consumo Médio "
    write !,"         </th> "
    write !,"         <th> "
    write !,"             Estoque Local "
    write !,"         </th> "
    write !,"         <th> "
    write !,"             Cobertura X Dias "
    write !,"         </th> "
    write !," </tr> "
    write !,strLocaisConsHTML
    write !," </table> "
    write !," </div> "
    }
    quit
    

GetVisaoEstoqueAlter(pItem)
    new resultSet, arrItemAlt, strItemAlt, sc, strTipoEstab, arrTempTipoEstab, strErro
    
    do GetListaAlternativo(pItem,.arrItemAlt)
    
    if ($data(arrItemAlt)) {
	    
        write !," <div> "
        write !," <span class='tituloTabela'>Visão Gerencial do Produto Primo (Substituto)</span> "
        write !," <table> "
        write !," <tr> "
        write !,"         <th> "
        write !,"           Produto "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Unidade "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Saldo CD "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Saldo NTO "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Saldo NTH "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Saldo UNIDADE "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Custo Médio "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Consumo Médio na Rede "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Última Compra "
        write !,"         </th> "
        write !,"         <th> "
        write !,"             Próxima Entrega "
        write !,"         </th> "
        write !," </tr> "

	    set strItemAlt = ""
	    set cont = 0
	    for {
		    set cont = cont + 1
		    
		    set strItemAlt = $order(arrItemAlt(strItemAlt))
		    quit:(strItemAlt = "")
    
		    set resultSet = ##class(Tasc.stock.Util).GetEstoqueTipoUnid(strItemAlt)
		    
		    set sc = resultSet.Execute()
		    
		    if (sc) {
		        
		        while (resultSet.Next()) {
			        set strTipoEstab = $get(resultSet.Data("TipoEstab"))
			        if (strTipoEstab '= "") {
		            	set arrTempTipoEstab(strTipoEstab) = resultSet.Data("QtyAvailable")
			        }
		        }
		        set strErro = ""
		        
		        set strClassTR = " "
		        if ((cont # 2) = 1) {
		        	set strClassTR = " class='estiloOdd' "
		        }
		        else {
			        set strClassTR = " class='estiloEven' "
		        }
		        write !," <tr "_strClassTR_" > "
		        write !,"         <td> "
		        write !,"           "_strItemAlt _ " - " _ $$SQLGetDescricaoProduto^VARSQL(strItemAlt)_" "
		        write !,"         </td> "
		        write !,"         <td> "
		        write !,"             "_$$SQLGetUnitSigla^VARSQL(strItemAlt)_" "
		        write !,"         </td> "
		        write !,"         <td class='textCenter'> "        
		        write !,"             "_$$ObtemSaldoCD(strItemAlt)_" "
		        write !,"              "
		        write !,"         </td> "
		        write !,"         <td class='textCenter'> "
		        write !,"             "_$get(arrTempTipoEstab(3))_" "
		        write !,"         </td> "
		        write !,"         <td class='textCenter'> "
		        write !,"             "_$get(arrTempTipoEstab(2))_" "
		        write !,"         </td> "
		        write !,"         <td class='textCenter'> "
		        write !,"             "_$get(arrTempTipoEstab(1))_" "
		        write !,"         </td> "
		        write !,"         <td class='textCenter'> "
		        write !,"             "_$$^WWWTR(0,8,$$SQLGetCustoMedioNewDtHr^VARSQL(strItemAlt),2)_" "
		        write !,"         </td> "
		        write !,"         <td class='textCenter'> "
		        write !,"             "_$$^WWWTR(0,12,$$GetMOVCalculated(strItemAlt),2)_" "
		        write !,"         </td> "
		        write !,"         <td> "
		        write !,"              "
		        write !,"         </td> "
		        write !,"         <td> "
		        write !,"              "
		        write !,"         </td> "
		        write !," </tr> "
		    }
	    }
        
        write !," </table> "
        write !," </div> "
        
    }
    
    quit
    
GetConsumoMedioTipoEstab(pItem,pTipoEstab="")
	new resultSet, qtdeMes, sc, qtdeMes, totalSaida, mediaSaida, mesAno, qtdeSaida, totalSaida, qtdeMes
	
	set resultSet = ##class(Tasc.stock.Util).GetConsumoMedio(pItem,pTipoEstab)
	
	set sc = resultSet.Execute()
	
	set (qtdeMes, totalSaida, mediaSaida) = 0
	
	if (sc) {
		while (resultSet.Next()) {
			set mesAno = resultSet.Data("MesAno")
			set qtdeSaida = resultSet.Data("QtdeSaida")
			set totalSaida = qtdeSaida + totalSaida
			
			set qtdeMes = qtdeMes + 1
		}
		
		set mediaSaida = totalSaida
		
		if (qtdeMes > 1) {
			set mediaSaida = totalSaida / qtdeMes
		}
	}
	
	quit mediaSaida
	
	
GetMOVCalculated(pidItem,pidLocal="",pLstTipoMov="11,21,22",pTipoEstabelecimento="",pQtdeMonths,pDebug=0)
	$$$VAR
	new calculatedMOV, months, currentmonth, currentyear, x, GetMOVYearMonth
	set calculatedMOV=0
	set months=0
	set currentmonth=$extract($ZD($H,1),1,2)
	set currentyear=$extract($ZD($H,1),7,10)
	set months = $get(pQtdeMonths)
	
	if (months = "") {
		set months=$$GetMonthsForAverage^VARReposicao(pidItem,pidLocal)
	}
	if months="" {
		set months=12
	}
	
	for x=1:1:months {
		set GetMOVYearMonth=0
		set currentmonth=currentmonth-1
		if currentmonth<1 {
			set currentyear=currentyear-1
			set currentmonth=12
		}
		set GetMOVYearMonth=$$GetMOVYearMonth^VARVisaoGerItem(pidItem,pidLocal,currentyear,currentmonth,pLstTipoMov,pTipoEstabelecimento,pDebug)
		if GetMOVYearMonth=0 set months=months-1 //Ignore months with no movement
		set calculatedMOV=calculatedMOV+GetMOVYearMonth
		
		if (pDebug) {
			write !,"Debug GetMOVCalculated"
			write " Meses para média: " _ months
			write " Mês atual: " _ currentmonth _ " "_ currentyear
			write " Movimentação no mês atual: " _ GetMOVYearMonth
			write " Acumulado: " _ calculatedMOV
		}
		
	}
	if ((calculatedMOV>0) && (calculatedMOV'="") && (months>0)) set calculatedMOV=calculatedMOV\months
	q calculatedMOV
	
GetMOVYearMonth(pidItem,pidLocal="",currentyear,currentmonth,pLstTipoMov="11,21,22",pTipoEstabelecimento="",pDebug=0)
	$$$VAR
	new qtyMOVLocation, idTransaction, objMOVLinha, typeTransaction, qty, qtyMOVLocation
	if pidItem="" q 0
	set qtyMOVLocation = 0
	if pidLocal'="" {
		if $order(^VARMOVLinha(YM,pidItem,currentyear,currentmonth,pidLocal,""))'="" {
				
			$$$Order6(^VARMOVLinha,YM,pidItem,currentyear,currentmonth,pidLocal,idTransaction)
				set objMOVLinha = $get(^VARMOVLinha(YM,pidItem,currentyear,currentmonth,pidLocal,idTransaction,1))
				set typeTransaction = $$$VARMOVLinhaTipoMovmto(objMOVLinha)
				if ($find(","_pLstTipoMov_",",","_typeTransaction_",") = 0) { $$$Continue }
				set qty = 0
				set qty = $piece(objMOVLinha,Y,1)
				set qtyMOVLocation = qtyMOVLocation + qty
	
			$$$End
		}
	
	}else {
		$$$Order5(^VARMOVLinha,YM,pidItem,currentyear,currentmonth,pidLocal)
			if ((pTipoEstabelecimento '= "") && ($$SQLGetTipoLocalPainel^VARSQL(pidLocal) '= pTipoEstabelecimento)) { $$$Continue }
			
			$$$Order6(^VARMOVLinha,YM,pidItem,currentyear,currentmonth,pidLocal,idTransaction)
				set objMOVLinha = $get(^VARMOVLinha(YM,pidItem,currentyear,currentmonth,pidLocal,idTransaction,1))
				set typeTransaction = $$$VARMOVLinhaTipoMovmto(objMOVLinha)
				
				if ($find(","_pLstTipoMov_",",","_typeTransaction_",") = 0) { $$$Continue }
				
				set qty = 0
				set qty = $piece(typeTransaction,Y,1)
				set qtyMOVLocation = qtyMOVLocation + qty
	
			$$$End
			
		$$$End
	}
	q qtyMOVLocation
	
GetConsumoMes(pidItem, pidLocal, pAno, pMes)
	new intConsumo
	set intConsumo = 0
	
	if ($get(pidItem) = "") {
		quit intConsumo
	}
	
	set intConsumo = $$GetMOVYearMonth(pidItem,pidLocal,pAno,pMes,"11,21,22","",0)
	quit intConsumo
	
	;Obtém uma lista de locais que já consumiram este item dentro do intervalo determinado
GetLocaisConsumoPorItem(pidItem="",pLstTipoMov="11,21,22",pDiasMedia=60,&pArrLocais)
	new strSQL, resultSet, sc
	
	set strSQL = " " _
	" SELECT DISTINCT LocalEstoque " _
	" FROM VARMOVLinha " _
	" WHERE Produto = '"_pidItem_"' " _
	" AND TipoMovmto IN ("_pLstTipoMov_") " _
	" AND Data >= +$horolog - "_pDiasMedia_" " _
    "  " _
	" GROUP BY LocalEstoque, Produto, Mes, Ano "
	
	set resultSet = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	
	set sc = resultSet.Prepare(strSQL)
	set sc = resultSet.Execute()
	
	if (sc) {
		while (resultSet.Next()) {
			set pArrLocais(resultSet.Data("LocalEstoque")) = ""
		}
	}
	
	quit

GetLocaisMaiorConsumo(pidItem,pQtdeMeses=12,&pLstLocais,&pLstLocaisCons)
	new strLocal, qtdeConsumo
	if ($data(pLstLocais)) {
		set strLocal = ""
		for {
			set strLocal = $order(pLstLocais(strLocal))
			quit:(strLocal = "")
			
			set qtdeConsumo = $$GetMOVCalculated(pidItem,strLocal,,,pQtdeMeses)
			set pLstLocaisCons(qtdeConsumo,strLocal) = ""
		}
	}
	
	quit
	
	
ImprimeLocalConsumo(pidItem,pQtdeRegistro,pQtdeMeses=12)
	new qtdeDias, strHTML, qtdeConsumo, totalRegistro, strLocal,fltCobertura
	set qtdeDias = pQtdeMeses * 30
	
	do GetLocaisConsumoPorItem(pidItem,"11,21,22",qtdeDias,.arrLocais)
	
	do GetLocaisMaiorConsumo(pidItem,pQtdeMeses,.arrLocais,.arrLocaisCons)
	
	set strHTML		= ""
	set qtdeConsumo = ""
	set totalRegistro = 0
	for {
		set qtdeConsumo = $order(arrLocaisCons(qtdeConsumo),-1)
		quit:(qtdeConsumo = "")
		set strLocal = ""
		for {
			set strLocal = $order(arrLocaisCons(qtdeConsumo,strLocal))
			quit:(strLocal = "")
			quit:(totalRegistro >= pQtdeRegistro)
			
			set fltEstoqueLocal = $$GetQtyAvailableLocn^INSOHQTY(pidItem,strLocal)
			
			set fltCobertura = $$GetCoberturaDMMiCMM^VARVisaoGerItem(pidItem,strLocal,fltEstoqueLocal)
			
			if (qtdeConsumo > 0) {
				set totalRegistro = totalRegistro + 1
				set strHTML = strHTML _ " "
				_ " <tr> " 
				_" <td> "
				_ strLocal _ " - " _ $$SQLGetLocationName^VARSQL(strLocal)
				_" </td> "
				_" <td class='textCenter'> "
				_ $$^WWWTR(0,12,qtdeConsumo,1)
				_" </td> "
				_" <td class='textCenter'> "
				_ $$^WWWTR(0,12,fltEstoqueLocal,1)
				_" </td> "
				_" <td class='textCenter'> "
				_ $$^WWWTR(0,12,fltCobertura,2) ; Necessário recuperar da nova estrutura 
				_" </td> "
				_" </tr> "
			}
		}
	}
	
	quit strHTML
	
GetCoberturaDMMiCMM(pItem, pLocal, pQtde)
	new fltCobertura, objComparaDMMi,fltDMMIInformado,fltCMM
	
	set fltCobertura = ""
	
	set objDMMiDetalhe = $get(^VARComparaDMMiDetalhe(0,pLocal,pItem,1))
	if (objDMMiDetalhe '= "") {
		set fltDMMIInformado = $$$VARComparaDMMiDetalheDMMi(objDMMiDetalhe)
		set fltCMM = $$$VARComparaDMMiDetalheCMM(objDMMiDetalhe)
		
		if ((fltDMMIInformado '= "") && (fltDMMIInformado > 0)) {
			set fltCobertura = pQtde / fltDMMIInformado
		}
		elseif (fltCMM > 0) {
			set fltCobertura = pQtde / fltCMM
		}
	}
	quit fltCobertura
	
GetListaAlternativo(pItem,&arrItemAlt)
	
	if ($get(pItem) = "") { quit }
	
	$$$VAR
	new strItemAlt
	if ($data(^INARTA(YM,pItem))) {
		set strItemAlt = ""
		for {
			set strItemAlt = $order(^INARTA(YM,pItem,strItemAlt))
			quit:(strItemAlt = "")
			set arrItemAlt(strItemAlt) = ""
		}
	}
	
	quit
	
	
ObtemSaldoCD(pItem)
	new qtdeSaldo, objSaldo, strErro
	set $ztrap = "ErroSaldo"
	set qtdeSaldo = ""
	set objSaldo = ##class(VAR.DASA.ado.Produtos).saldo(pItem,1,997, .strErro)
	if (objSaldo '= "") {
		set qtdeSaldo = objSaldo.GetAt(1).saldoDatasul
	}
	quit qtdeSaldo
	
ErroSaldo
	set $ztrap = ""
	quit "Sem Informação"
]]></Routine>
</Export>