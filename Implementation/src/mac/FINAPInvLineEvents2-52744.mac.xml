<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINAPInvLineEvents2" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINAPInvLineEvents2
	
#include COMSYS
#include FINConst
	
#define VisibleColumn(%blnIncTax,%blnTotals) $select(%blnIncTax&&%blnTotals:$$$FldFINAPInvLineInvoiceTotalIncludingTax,%blnIncTax&&'%blnTotals:$$$FldFINAPInvLineInvoiceEachIncTax,'%blnIncTax&&%blnTotals:$$$FldFINAPInvLineInvoiceTotal,'%blnIncTax&&'%blnTotals:$$$FldFINAPInvLineInvoiceEach)
	
OnBlur(pCOL,pROW,pYFELD)
    ;-------------------------------------------------------------------------------
    ; Blur code for 3WM Invoice Lines
    ;
    ; Params: pCOL - Form Field number of field blurred out of,
    ;         pROW - Form Field row number (actual line, NOT Line number at left of grid) of field blurred out of and
    ;         pYFELD - 3WM Invoice Line that's been blurred out of
    ;
    ; Returns: NOTHING
    ;
    ; History:
    ; 11-Dec-2009	GRF		Grid Macro
	; 09-Jul-2009	GRF		SR16717: Refresh "ivory" fields on blur rather than
	; 							waiting for save
    ; 23-Nov-2005	PO		SR13895: Update FC variance when invoice is closed
    ; 							or unclosed.
    ; 07-Sep-2005	RPW		SR13425: Calculate the Total Discount/Surcharges field
    ; 							here as well.
    ; 02-Sep-2005	RPW		SR11983: Recalculate the discounts for this line.
    ; 21-Jul-2005	PO		SR12965: Created from OnBlur^OBSFINAPInvLineEvents
    ;-------------------------------------------------------------------------------
	new idFINAPInv,idFINAPInvLine,blnShowTotal,idClassField,objInvoice,curTaxTotal,curTax,idKeyValue
	new curInvoiceTotalIncTax,curInvoiceTotal,oYKEY,blnLinesIncTax,blnShowLinesasTotals,fltTotalDS
	
	set oYKEY = YKEY
	new YKEY
	set YKEY = oYKEY
	
	do GetKey^COMUtilClass(YKEY,,,.idFINAPInv,.idFINAPInvLine)
	
	if idFINAPInvLine="" {
		set YKEY = $get(YYKEY)
		do GetKey^COMUtilClass(YKEY,,,.idFINAPInv,.idFINAPInvLine)
	}
	
	set blnShowTotal = $$IsSupplierTotalVariancePosting^FINAPInvLineEvents(idFINAPInv)
	set idClassField = $$$GetClassField(YFORM,pCOL)
	
	if idClassField = $$$FldFINAPInvLineClosed {  ; SR13895
		do UpdateManualField^COMGridEdit31Interface(pROW,33,$$GetVARFC^FINAPInvLineGet(pYFELD))
		
	} elseif $case(idClassField,$$$FldFINAPInvLineVariancePosting:1,
	                      $$$FldFINAPInvLineVarianceINVQPost:1,
	                      $$$FldFINAPInvLineVarianceINVDPost:1,
	                      $$$FldFINAPInvLineVarianceOTHDPost:1,:0) {
		
		do VariancePosting(pCOL,pROW,idFINAPInv,pYFELD,idClassField,YKEY)
		
    } elseif $case(idClassField,$$$FldFINAPInvLineInvoiceEach:1,
                                $$$FldFINAPInvLineInvoiceTotal:1,
                                $$$FldFINAPInvLineInvoiceEachIncTax:1,
                                $$$FldFINAPInvLineInvoiceTotalIncludingTax:1,
                                $$$FldFINAPInvLineInvoiceQuantity:1,:0) {
		
		if idClassField '= $$$FldFINAPInvLineInvoiceQuantity {
			if (+$$$FINAPInvLineInvoiceQuantity(pYFELD)=0)      &&
			   (+$piece(pYFELD,Y,idClassField)'=0)              &&
			   $case(idClassField,$$$FldFINAPInvLineInvoiceTotal:1,$$$FldFINAPInvLineInvoiceTotalIncludingTax:1,:0) {
				
				$$$Alert("Fin00883")  ; "Invoice Quantity is zero so Invoice Total Amounts will now be set to zero."
			}
		}
 				
		do GetObject^COMGridEdit31Interface(.objInvoice,$$$YES) ; returns both simple variable and array
		
		set blnLinesIncTax       = $$$FINAPInvLinesIncludeTax(objInvoice)
		set blnShowLinesasTotals = $$$FINAPInvShowLinesasTotals(objInvoice)
		
		
		;if $$$DevPhil {
		;	if blnLinesIncTax {
		;		do CalculateLineIncTax^FINAPInvLineTax2(objInvoice,.pYFELD,idClassField)
 
		;		set objInvoice(idFINAPInv,idFINAPInvLine) = pYFELD
		;		$$$GRIDSetContents(.objInvoice,$$$YES)
		;		do PopulateDataField^COMUtils("FINAPInv",$$$FldFINAPInvTaxTotal,$$CalculateTotalTax^FINAPInvLineTax2(.objInvoice),,.objInvoice,$$$NO)
		;	} else {
		;		do CalculateTotalIncTax^FINAPInvLineTax2(.objInvoice,.pYFELD,idFINAPInvLine)
		;		
		;		do PopulateDataField^COMUtils("FINAPInv",$$$FldFINAPInvTaxTotal,$$$FINAPInvTaxTotal(objInvoice),,.objInvoice,$$$NO)
		;	}
		;} else {
		
		do CalculateLineIncTax^FINAPInvLineTax2(objInvoice,.pYFELD,idClassField)
		
		set objInvoice(idFINAPInv,idFINAPInvLine) = pYFELD
		$$$GRIDSetContents(.objInvoice,$$$YES)
		do PopulateDataField^COMUtils("FINAPInv",$$$FldFINAPInvTaxTotal,$$CalculateTotalTax^FINAPInvLineTax2(.objInvoice),,.objInvoice,$$$NO)
		
		;}
		
		if idClassField = $$$FldFINAPInvLineInvoiceQuantity {
			do UpdateForQuantityChange(.pYFELD,pROW,blnShowTotal,YKEY)
		} else {
			do UpdateForAmountChange(.pYFELD,pROW,blnShowTotal,YKEY)
		}
		
		do AddReference^COMGridEdit31Interface($$$VisibleColumn(blnLinesIncTax,blnShowLinesasTotals),"D","FINAPInvLine")
		
		do UpdateDiscount^FINAPInvDiscount(idFINAPInv,idFINAPInvLine) ; SR11983
		set fltTotalDS = $$CalculateTotalDS^FINAPInvLine(YKEY,pYFELD)
		do UpdateManualField^COMGridEdit31Interface(pROW,35,fltTotalDS)
		do ScreenUpdateStyle^COMGridEdit31S("pY"_pROW_"_"_pCOL)    ; SR16717
	}
	
	set YKEY = oYKEY
	
	quit
	
	
VariancePosting(pCOL,pROW,pidFINAPInv,pYFELD,pidField,pYKEY) private
    ;-------------------------------------------------------------------------------
    ; Display the Variance Splitting popup
    ;
    ; Params: pCOL (Grid Column),
    ;         pROW (Grid Row),
    ;         pidFINAPInv (FINAPInv key),
    ;         pYFELD (FINAPInvLine record) and
    ;         pidField (class field that was changed)
    ;
    ; Returns: 
    ;
    ; History:
    ; 21-Jul-2005	PO		SR12965: Created - Code copied from what is now OnBlur^OBSFINAPInvLineEvents
    ;-------------------------------------------------------------------------------
	new fltInvQty,curInvPrice,curExtCharges,curSum
	
	set fltInvQty     = $$GetINVQ^FINAPInvLineGet(pYFELD)
	set curInvPrice   = $$GetINVPrice^FINAPInvLineGet(pYFELD)
	set curExtCharges = $$GetAdditionalCharges^FINAPInvCharge2(pYKEY,pYFELD)
	
	if $$IsSupplierTotalVariancePosting^FINAPInvLineEvents($translate(pidFINAPInv,$char(34),"")) {
		if $$$FINAPInvLineVariancePosting(pYFELD)=$$$EnumFINAPVARIANCEPOSTSplit {
			// We have to split. So far only allows for the main split.
			set curSum = $$$FCAdd(fltInvQty,curInvPrice)
			
			if $$$FCur(curSum)="" {
				if (fltInvQty+curInvPrice+curExtCharges)'=0 {
					do SplitVariancePosting^FINAPInvLine(pROW,pYFELD,"TV",pYKEY,pCOL)
				}
			} elseif '$$$FCZero(curSum) {
				do SplitVariancePosting^FINAPInvLine(pROW,pYFELD,"TV",pYKEY,pCOL)
			}
		}
	
	} elseif pidField=$$$FldFINAPInvLineVarianceINVQPost {
		// We have to split. So .far only allows for the main split.
		if '$$$FCZero(fltInvQty) && ($$$FINAPInvLineVarianceINVQPost(pYFELD)=$$$EnumFINAPVARIANCEPOSTSplit) {
			do SplitVariancePosting^FINAPInvLine(pROW,pYFELD,"IQ",pYKEY,pCOL)
		}
	
	} elseif pidField=$$$FldFINAPInvLineVarianceINVDPost {
		// We have to split. So far only allows for the main split.
		 if '$$$FCZero(curInvPrice) && ($$$FINAPInvLineVarianceINVDPost(pYFELD)=$$$EnumFINAPVARIANCEPOSTSplit) {
			do SplitVariancePosting^FINAPInvLine(pROW,pYFELD,"ID",pYKEY,pCOL)
		 }
	
	} elseif pidField=$$$FldFINAPInvLineVarianceOTHDPost {
		// We have to split. So far only allows for the main split.
		if '$$$FCZero(curExtCharges) && ($$$FINAPInvLineVarianceOTHDPost(pYFELD)=$$$EnumFINAPVARIANCEPOSTSplit) {
			do SplitVariancePosting^FINAPInvLine(pROW,pYFELD,"OD",pYKEY,pCOL)
		}
	}
	
	quit
	
UpdateForQuantityChange(pYFELD,pROW,pblnShowTotal,pYKEY) private
    ;-------------------------------------------------------------------------------
    ; When quantity is changed, set the default posting.
    ;
    ; Params: pYFELD (FINAPInvLine record),
    ;         pROW (Grid Row) and
    ;         pblnShowTotal (FINAPInvShowLinesasTotals)
    ;
    ; Returns: Nothing
    ;
    ; History:
    ;  9-Mar-2006	JW		SR14265: Changed checkbox population
    ; 23-Nov-2005	PO		SR13895: Set the closed field before getting the FC Variance
    ; 22-Jul-2005	PO		SR12965: Created - Code copied from what is now OnBlur^FINAPInvLineEvents
    ;-------------------------------------------------------------------------------
    ;
    ; TODO: Do GetINVPrice & GetINVQ need to be called more than once ?
    ;
	new fltVariance,strType
	
	set fltVariance = $$GetINVQ^FINAPInvLineGet(pYFELD)
	do UpdateManualField^COMGridEdit31Interface(pROW,23,fltVariance) ; FIXME: Don't hard code column reference
	do UpdateManualField^COMGridEdit31Interface(pROW,24,$$GetINVPrice^FINAPInvLineGet(pYFELD)) ; FIXME: Don't hard code column reference
	if 'pblnShowTotal {
		set strType="IQ"
		set $$$FINAPInvLineVarianceINVQPost(pYFELD) = $$GetINVQVP^FINAPInvLineGet(pYFELD)
		;set $$$FINAPInvLineVarianceFCDPost(pYFELD)=$$GetVARFCPost^FINAPInvLineGet(pYFELD) ; ??
		do AddReference^COMGridEdit31Interface($$$FldFINAPInvLineVarianceINVQPost)
		do AddReference^COMGridEdit31Interface($$$FldFINAPInvLineVarianceINVDPost)
		;do AddReference^COMGridEdit31Interface($$$FldFINAPInvLineVarianceFCDPost) ; ??
		if fltVariance=0 {
			do DeleteVariance^FINAPInvLineVariance(pYKEY,strType)
		} elseif $$$FINAPInvLineVarianceINVQPost(pYFELD)=$$$EnumFINAPVARIANCEPOSTSplit { ;changed to use $$$EnumFINAPVARIANCEPOSTSplit instead of 4
			do ModifySplit^FINAPInvLineVarMod(pYKEY,strType,$$$FINAPInvLineInvoiceQuantity(pYFELD)-$$$FINAPInvLineUnmatchedQuantity(pYFELD),fltVariance,$$GetINVPrice^FINAPInvLineGet(pYFELD))
		}
		;changed to use $$$EnumFINAPVARIANCEPOSTSplit instead of 4
		if $$$FINAPInvLineVarianceINVDPost(pYFELD)=$$$EnumFINAPVARIANCEPOSTSplit {
			do ModifySplit^FINAPInvLineVarMod(pYKEY,"ID",,,$$GetINVPrice^FINAPInvLineGet(pYFELD))
		}
	} else {
		set fltVariance = $$GetINVPrice^FINAPInvLineGet(pYFELD)
		if $$$FCur(fltVariance)="" {
			set fltVariance = fltVariance+$$GetAdditionalCharges^FINAPInvCharge2(pYKEY,pYFELD)
		}
		set $$$FINAPInvLineVariancePosting(pYFELD) = $$GetTotalVariance^FINAPInvLineGet(pYKEY,pYFELD)
		if ($$$FCZero(fltVariance))&&($$$FCZero($$GetINVQ^FINAPInvLineGet(pYFELD))) {
			do DeleteAllVariances^FINAPInvLineVariance(pYKEY)
		} elseif $$$FINAPInvLineVariancePosting(pYFELD)=$$$EnumFINAPVARIANCEPOSTSplit { ;changed to use $$$EnumFINAPVARIANCEPOSTSplit instead of 4
			do ModifySplit^FINAPInvLineVarMod(pYKEY,"TV",$$$FINAPInvLineInvoiceQuantity(pYFELD)-$$$FINAPInvLineUnmatchedQuantity(pYFELD),$$GetINVQ^FINAPInvLineGet(pYFELD),fltVariance)
		}
		do AddReference^COMGridEdit31Interface($$$FldFINAPInvLineVariancePosting)
	}
	
	; CODE FOR FC VARIANCE POSTING NEEDS TO BE PLACED HERE - not concerned with total detail
	set $$$FINAPInvLineVarianceFCDPost(pYFELD) = $$GetVARFCPost^FINAPInvLineGet(pYFELD)
	do AddReference^COMGridEdit31Interface($$$FldFINAPInvLineVarianceFCDPost)
	
	;set $$$FINAPInvLineClosed(pYFELD) = ($$$FINAPInvLineInvoiceQuantity(pYFELD)=$$$FINAPInvLineUnmatchedQuantity(pYFELD)) ; SR13895
	do ClosedDefault^FINAPInvMatchCache(.pYFELD) 	; SR14265
	
	set fltVariance = $$GetVARFC^FINAPInvLineGet(pYFELD)
	do UpdateManualField^COMGridEdit31Interface(pROW,33,fltVariance) ; FIXME: Don't hard code column reference
	; Close line if invoice quantity = order quantity - previously invoiced quantity.
	;set $$$FINAPInvLineClosed(pYFELD)=$$AllInvoiced^FINAPInvLine(pYFELD)
	
	quit
	
UpdateForAmountChange(pYFELD,pROW,pblnShowTotal,pYKEY) private
    ;-------------------------------------------------------------------------------
    ; When an amount (Invoice Each Inc/Ex Tax, Invoice Total Inc/Ex Tax) is changed, set the default posting.
    ;
    ; Params: pYFELD (FINAPInvLine record),
    ;         pROW (Grid Row) and
    ;         pblnShowTotal (FINAPInvShowLinesasTotals)
    ;
    ; Returns: Nothing
    ;
    ; History:
    ; 22-Jul-2005	PO		SR12965: Created - Code copied from what is now OnBlur^OBSFINAPInvLineEvents
    ;-------------------------------------------------------------------------------
    ;
    ; TODO: Do GetINVPrice & GetINVQ need to be called more than once ?
    ;
	new fltVariance,strType
	
	set fltVariance = $$GetINVPrice^FINAPInvLineGet(pYFELD)
	do UpdateManualField^COMGridEdit31Interface(pROW,24,fltVariance) ; FIXME: Don't hard code column reference
	if 'pblnShowTotal {
		set strType="ID"
		set $$$FINAPInvLineVarianceINVDPost(pYFELD) = $$GetINVPriceVP^FINAPInvLineGet(pYFELD)
		;set $$$FINAPInvLineVarianceFCDPost(pYFELD)=$$GetVARFCPost^FINAPInvLineGet(pYFELD) ; ??
		if $$$FCZero(fltVariance) {
			do DeleteVariance^FINAPInvLineVariance(pYKEY,strType)
		} else {
			do ModifySplit^FINAPInvLineVarMod(pYKEY,strType,,,fltVariance)
		}
		do AddReference^COMGridEdit31Interface($$$FldFINAPInvLineVarianceINVDPost)
		;do AddReference^COMGridEdit31Interface($$$FldFINAPInvLineVarianceFCDPost) ; ??
	} else {
		set fltVariance = $$GetINVPrice^FINAPInvLineGet(pYFELD)
		if $$$FCur(fltVariance)="" {
			set fltVariance = fltVariance+$$GetAdditionalCharges^FINAPInvCharge2(pYKEY,pYFELD)
		}
		set $$$FINAPInvLineVariancePosting(pYFELD) = $$GetTotalVariance^FINAPInvLineGet(pYKEY,pYFELD)
		if ($$$FCZero(fltVariance))&&($$$FCZero($$GetINVQ^FINAPInvLineGet(pYFELD))) {
			do DeleteAllVariances^FINAPInvLineVariance(pYKEY)
		} elseif $$$FINAPInvLineVariancePosting(pYFELD)=$$$EnumFINAPVARIANCEPOSTSplit { ;changed to use $$$EnumFINAPVARIANCEPOSTSplit instead of 4
			do ModifySplit^FINAPInvLineVarMod(pYKEY,"TV",$$$FINAPInvLineInvoiceQuantity(pYFELD)-$$$FINAPInvLineUnmatchedQuantity(pYFELD),$$GetINVQ^FINAPInvLineGet(pYFELD),fltVariance)
		}
		do AddReference^COMGridEdit31Interface($$$FldFINAPInvLineVariancePosting)
	}
	
	; CODE FOR FC VARIANCE POSTING NEEDS TO BE PLACED HERE - not concerned with total detail
	set $$$FINAPInvLineVarianceFCDPost(pYFELD) = $$GetVARFCPost^FINAPInvLineGet(pYFELD)
	do AddReference^COMGridEdit31Interface($$$FldFINAPInvLineVarianceFCDPost)
	
	set $$$FINAPInvLineInvoiceEach(pYFELD) = $$$FCUpdate($$$FINAPInvLineInvoiceEach(pYFELD),$$GetFCRate^FINAPInvCurrency(),1)
	;set pYFELD=$$UpdatePriceFields^FINAPInvLineTax(pYFELD,objInvoice) ;$get(^FINAPInv(YM,idFINAPInv,1))
	;set pYFELD=$$UpdatePriceFields^FINAPInvLineTax(pYFELD,objInvoice,idField) // JW SR12705 ***** DO NOT DO THIS *****
	
	;set fltVariance=$$GetVARFC^FINAPInvLineGet(pYFELD)
	;do UpdateManualField^COMGridEdit31Interface(pROW,33,fltVariance)
	;
	set fltVariance = $$GetVARFC^FINAPInvLineGet(pYFELD)
	do UpdateManualField^COMGridEdit31Interface(pROW,33,fltVariance)
	
	quit
	
]]></Routine>
</Export>