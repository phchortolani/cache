<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWWLicenseAllocation" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include COMSYS
	
WWWLicenseAllocation(pstrProcess="", pblnShowError=$$$NO,pSource="")    ; FIXME : Separate routine and tag <GRF>
	
	;-------------------------------------------------------------------------------
	; Allocate sessions and processes to license   
	;
	;	set blnSessionLoginOK=$$^WWWLicenseAllocation("BackgroundJob")
	;
	; Inputs: pstrProcess = "" if normal entry (www.cls, COMLogin.cls)
	;                      "BackgroundJob" in case of a backgoundJob
	;                      
	;         pblnShowError = 1 if a error message should appear
	;		  pSource: Source request. Ex: User.COMPreferences
	;
	; Returns:  1 = OK  0 = Error
	;
	; History:
	; 16-Dez-2016	FC		BASIC-16: Controls license by client. Add parameter pSource
	; 21-Oct-2008	FIS		SR16065: re-written
	; 05-Jul-2007	GRF		SR15550: Boolean Macros; default arguments rather than
	; 						$get
	; 21-Jun-2007	ANDREAS	SR15550: Created
	;-------------------------------------------------------------------------------
	new idClient, strStatus, YBED, YUSER, intMaxCon, intAddNo, blnCSPSession,
		blnNewCon

	set ret = $$$OK
	if (pSource = "User.COMUserPreferences") {
		set ret = $$WWWLicenseAllocationLEAN^WWWLicenseAllocationLEAN()
		quit ret
	}
	
	set strStatus     = '$$$OK   ;return status     ; FIXME : Why no error message in this case? <GRF>
	set blnCSPSession =  $$$NO   ;is CSP session
	set blnNewCon     =  $$$NO   ;is New Connection

	// Set ClientId
	if ($$isExplicitLicenseUserIdentification^COMSTARTZstart()) {
		if (($length($get(YBED)) = 0) && $isObject($get(%request))) {
			set YBED = $$$UPPER($get(%request.Data("YBED", 1), ""))
			if ($length(YBED) = 0) {
				set YBED = $$$UPPER($get(%request.CgiEnvs("YBED", 1), ""))
			}

			if ($length(YBED) = 0) {
				set YUSER = $get(%request.Data("YUSER", 1), "")
				if ($length(YUSER) = 0) {
					set YUSER = $get(%request.CgiEnvs("YUSER", 1), "")
				}

				if ($length(YUSER) > 0) {
					set YBED = $$$WWWUSERUser1($get(^WWWUSER(0, YUSER, 1)))
				}
			}
		}

	 	set strStatus = $$AllocWebLicense($get(YBED))
	 	set idClient = $System.License.GetUserId()
	}
	else {
		if (pstrProcess '= "") {         // fix license id
			set idClient = pstrProcess
		}
		elseif ($get(%request) '="") {   // IP Address
			set idClient      = $get(%request.CgiEnvs("REMOTE_ADDR"), "unknown")
			set blnCSPSession = $$$YES
		}
		else {                           // Background Job
			set idClient = "BackgroundJob"
		}

		// Increase ClientId if max. connection are reached
		set intAddNo  = 0
		set intMaxCon = $System.License.MaxConnections() - 1  ; no. of available connections less 1 (just in case)
	 	while ($System.License.ConnectionCount(idClient) > intMaxCon) {
		 	set idClient = $piece(idClient, "_", 1)_"_"_$increment(intAddNo)
		}
		if ($System.License.ConnectionCount(idClient) = 0) set blnNewCon = $$$YES

		// Do Login
	 	if (blnCSPSession = $$$YES)  {  // CSP Login
		 	set strStatus = %session.Login(idClient, , 1)    ; FIXME : Do we need sc to strStatus conversion? <GRF?
	 	}
	 	else {                          // Job Login
		 	set strStatus = $System.License.Login(idClient)  ; FIXME : ditto
		}

	 	// Log Login
	 	if ($$$ISOK(strStatus)) {
			do Log(idClient, blnNewCon)
	 	}
	}

 	// Display Error Message on screen
 	if (('$$$ISOK(strStatus)) && (pblnShowError = $$$YES)) {
		write "<b>Unable to allocate license<b>"
 	}

 	quit strStatus

AllocWebLicense(YBED)
 	quit $$allocWebLicense^COMSTARTZstart($$GetLicenseIdFromUser(YBED))

AllocWebServiceLicense(YBED)
 	quit $$allocWebServiceLicense^COMSTARTZstart($$GetLicenseIdFromUser(YBED))

AllocServiceLicense(YBED)
 	quit $$allocServiceLicense^COMSTARTZstart($$GetLicenseIdFromUser(YBED))

GetLicenseIdFromUser(YBED)
	new strLicenseUserId

	if ($length(YBED) > 0) {
		set strLicenseUserId = $$$WWW013LicenseUserId($get(^WWW013(0, YBED, 1)))
		if ($length(strLicenseUserId) = 0) {
			set strLicenseUserId = YBED
		}
	}
	else {
		set strLicenseUserId = ""
	}

	quit strLicenseUserId

Log(pidClient="unknown", pblnNewCon=$$$NO)
	;-------------------------------------------------------------------------------
	; Log CSP License Logins   
	; 
	; Inputs: pidClient    = Client Id
	;         pblnNewCon   = New Connection (force log)
	;
	; History:
	; 22-Oct-2008	FIS		SR16065: Created
	;-------------------------------------------------------------------------------
	new intLogin, intHrs

	set intHrs = $piece($horolog, ",", 2) / 60 \ 60  ; current hour

	if ((pblnNewCon = $$$YES) ||
		('$data(^CacheTempLicenseLogin(+$horolog,pidClient)))) {
		set intLogin = $order(^CacheTempLicenseLogin(+$horolog, pidClient, ""), -1) + 1
		set ^CacheTempLicenseLogin(+$horolog, pidClient, intLogin) =
			$listbuild($piece($horolog, ",", 2), intHrs)
	}

	quit 1

Snapshot()
	;-------------------------------------------------------------------------------
	; Log Snapshot of License Usage   
	; 
	; History:
	; 22-Oct-2008	FIS		SR16065: Created
	;-------------------------------------------------------------------------------
	new intHrs, intNext, intSum

	set intHrs = $piece($horolog, ",", 2) / 60 \ 60  ; current hour

	// Save current license usage
	set intNext = $order(^CacheTempLicenseUsage(+$horolog, intHrs, ""), -1) + 1
	set ^CacheTempLicenseUsage(+$horolog, intHrs, intNext) =
		$System.License.LUConsumed()  // current license consumption

	quit $$$OK

GetHourConsumption(pdteDay, pintHrs, pblnGetMax=$$$NO)
	;-------------------------------------------------------------------------------
	; Calculate Maximum / Average License Usage per Hour  
	; 
	; Inputs:
	; pdteDay   = Day
	; pintHrs   = Hour (0-23, where 0= 0:00am-0:59am, 1= 1:00am-1:59am, ... 23= 11:00pm-11:59pm)
	; blnGetMax = Return Max. Consumption per Hour (default = Return Average Consumption)
	; 
	; History:
	; 22-Oct-2008	FIS		SR16065: Created
	;-------------------------------------------------------------------------------
	new intCounts, intNext, intSum, intMax, intNumber

	set intMax    = 0
	set intSum    = 0
	set intCounts = 0

	set pdteDay = +$get(pdteDay)
	if (pdteDay = 0) set pdteDay = +$horolog

	// Calculate maximum / average License Usage per hour
	if ((pintHrs '< 0) && (pintHrs '> 23)) {
		set intNext = ""
		for {
			set intNext = $order(^CacheTempLicenseUsage(pdteDay, pintHrs, intNext))
			if (intNext = "") quit

			set intCounts = intCounts +1
			set intNumber = $get(^CacheTempLicenseUsage(pdteDay, pintHrs, intNext))
			set intSum = intSum + intNumber
			if (intNumber > intMax) set intMax = intNumber
		}
	}

	if (intCounts '= 0) {
		if (pblnGetMax = $$$YES) {             // Return Max. Number
			set intSum = intMax
		}
		else {
			set intSum = (intSum \ intCounts)  // Return Average Number
		}
	}

	quit intSum

GetDayConsumption(pdteDay, pblnGetMax=$$$NO)
	;-------------------------------------------------------------------------------
	; Calculate Maximum / Average License Usage per Day  
	; 
	; Inputs:
	; pdteDay   = Day
	; blnGetMax = Return Max. Consumption (default = Return Average Consumption)
	; 
	; History:
	; 22-Oct-2008	FIS		SR16065: Created
	;-------------------------------------------------------------------------------
	new intSum, intMax, intNumber

	set intSum = 0
	set intMax = 0

	set pdteDay = +$get(pdteDay)
	if (pdteDay = 0) set pdteDay = +$horolog

	for intHrs = 0:1:23 {
		set intNumber = $$GetHourConsumption(pdteDay, intHrs, pblnGetMax)
		set intSum = intSum + intNumber
		if (intNumber > intMax) set intMax = intNumber
	}

	if (pblnGetMax) {
		set intSum = intMax
	}
	elseif (intSum '= 0) {
		if ((intSum \ 24) > 0) {
			set intSum = (intSum \ 24)
		}
		else {
			set intSum = 1
		}
	}

	quit intSum

GetMaxConsumption()
	;-------------------------------------------------------------------------------
	; Return Maximum License Usage since installation 
	; 
	; History:
	; 22-Oct-2008	FIS		SR16065: Created
	;-------------------------------------------------------------------------------
	quit $System.License.LUMaxConsumed()  //current license consumption

]]></Routine>
</Export>