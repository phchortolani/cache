<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINSYSBAS" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINSYSBAS
	;-------------------------------------------------------------------------------
	; Setup,Generation and Reporting of BAS Statements (SR:10105)
	;-------------------------------------------------------------------------------
	
#include COMSYS
#include FINConst
#include INConst
#include WWWConst
	
SetupBAS()
    ;-------------------------------------------------------------------------------
    ; Takes over the "Free1" field as an input parameter, setting up
    ; BAS Codes for GLAccounts
    ;
    ; History:
    ; 06-Nov-2009	GRF		use $$$Save macro
    ; 09-Dec-2004	GRF		SR10105 : Remove developer specific form change entries
    ; 							in WWW122D and record as "DISCLINC" from midday on
    ; 							01-Jan-2000.
    ; 21-Sep-2004	PK/SS	Created
    ;-------------------------------------------------------------------------------	
    new idBASCode,strStatus
    
	set idBASCode=""
	for {
		set idBASCode=$order(^INPARA(YM,"BAS","EN",idBASCode))
		quit:idBASCode=""
		
		do ^WWWKILL("INPARA","BAS,EN,"_idBASCode)
	}
	set strStatus = $$$Save("INPARA","BAS,EN,G01","Total sales - including any GST~",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,G02","Export sales~",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,G03","Other GST-free sales~",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,G04","Input taxed sales~",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,G07","Adjustments -if applicable~",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,G10","Capital purchases - including any GST~",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,G11","Non-capital purchases - including any GST ~",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,G13","Purchases for making input taxed sales~",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,G14","Purchases without GST in the price~",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,G15","Extimated purchases for private use/not income tax deduct.~",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,G18","Adjustments - if applicable~",$$$YES)
	
	set strStatus = $$$Save("INPARA","BAS,EN,W1","Total Salary, wages and other payments~",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,W2","Amounts withheld from payments in W1",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,W3","Other amounts (except W2 and W4)",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,W4","Amounts withheld where no ABN",$$$YES)
	
	set strStatus = $$$Save("INPARA","BAS,EN,F1","ATO instalment amount",$$$YES)
	
	set strStatus = $$$Save("INPARA","BAS,EN,T1","PAYG instalment income",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,T7","ATO instalment amount~",$$$YES)
	
	set strStatus = $$$Save("INPARA","BAS,EN,1C","Wine equalisation tax",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,1D","Wine equalisation tax refundable",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,1E","Luxury car tax",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,1F","Luxury car tax refundable",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,5B","Credit from PAYG income tax instalment variation",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,6B","Credit from FBT instalment variation",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,7","Deferred company/fund instalment",$$$YES)
	set strStatus = $$$Save("INPARA","BAS,EN,7A","GST deferred on imported goods",$$$YES)
	
	set strStatus = $$$Save("WWW122D","FINGLAccount,31,0","~~~~~BAS Code~~58074,43200~DISCLINC~58074,43200~DISCLINC~~~~~~~~~~~~~~~~~~~~~INPARA~""BAS"",LANGUAGE~~~~~~~~~~~~~~~~~~~~~~~~~~~1~1~1~")
	set strStatus = $$$Save("WWW122D","FINGLProfile,24,0","~0~~~~BAS Code~~58074,43200~DISCLINC~58074,43200~DISCLINC~~~~~~~~~~~~~~~~~~~~~INPARA~""BAS"",LANGUAGE~~~~~~~~~~~~~~~~~~~~~~~~~~~1~5~~")
	
	quit
	
 
GenerateReport(periodTypeID="",fromYear,fromPeriod,toYear,toPeriod)
    ;-------------------------------------------------------------------------------
    ; This routine builds the row-spec for a BAS Report. This includes account
    ; totals for different BAS Codes (G1, G2, etc), start/end period dates 
    ; as well as company information.
    ;
    ; Returns:ResultSet (a list)
    ;
    ; History:
	; 18-Nov-2009	GRF		SR17046/SR16871: base INFIBPAR on location hierarchy
    ; 13-Jul-2006	JW		SR14836: Index variable. Use it.
	; 15-Jul-2005	shobby	SR12754:Replaced LANGUAGE global (not always reliable)
    ; 01-Dec-2004	SteveS	Added support for from/to periods
    ; 21-Sep-2004	PK/SS	Created
    ;-------------------------------------------------------------------------------
    new arrBAS,idAccount,strBASCode,objAccount,objFINParam,objLocation,lstRow,currentYear,currentPeriod,strPeriod
    new idPeriod,objPeriod,lstPeriods,periodIndex,intdaysToPay,idxPeriodType
 	
	set idAccount = ""
	set lstRow    = ""
 	
	if periodTypeID="" set periodTypeID = $$DefaultPeriod^FINGLPeriod()
	set idxPeriodType = $$$Index(periodTypeID)		// SR14836
	set lstPeriods    = $$BuildPeriodsList^FINGLPeriod(periodTypeID,fromYear,fromPeriod,toYear,toPeriod)
 
	for {
		set idAccount = $order(^FINGLAccount(YM,idAccount))
		quit:idAccount=""
		
		set objAccount = $get(^FINGLAccount(YM,idAccount,1))
		set strBASCode = $$$FINGLAccountFREE1(objAccount)
		if strBASCode'="" {
			for periodIndex=1:1:$listlength(lstPeriods) {
				set arrBAS(strBASCode) = $get(arrBAS(strBASCode))+$$GetPeriodTotal^FINGLPeriodTotal(idAccount,$listget(lstPeriods,periodIndex))
				set arrBAS(strBASCode) = arrBAS(strBASCode)\1 ;remove cents
			}
		}
	}
	
	set strBASCode = ""
	for {
		set strBASCode = $order(^INPARA(YM,"BAS",SPRACHE,strBASCode))
		quit:strBASCode=""
		
		set lstRow = lstRow_$listbuild(+$get(arrBAS(strBASCode)))
	}
	
	; ----------------Add company information------------------------
	set objLocation = $get(^WWW0121(0,0,YLOCATION,1))                ; SR16871
	set lstRow = lstRow_$listbuild($zconvert($$$WWW012CompanyName($get(^WWW012(0,YM,1))),"U"))
	set lstRow = lstRow_$listbuild($$$WWW0121Street(objLocation))
	set lstRow = lstRow_$listbuild($$$WWW0121Zipcode(objLocation))
	set lstRow = lstRow_$listbuild($$$WWW0121City(objLocation))
	set lstRow = lstRow_$listbuild($$$WWW0121State(objLocation))
	set lstRow = lstRow_$listbuild($$$WWW0121Tel(objLocation))
	
	; ----------------Add period start/stop information--------------
	set idPeriod = $order(^FINGLPeriods(YM,1,idxPeriodType,fromYear,fromPeriod,""))	//SR14836
	if idPeriod'="" {
		set objPeriod = $get(^FINGLPeriod(YM,idPeriod,1))	
		set lstRow    = lstRow_$listbuild($zdate($$$FINGLPeriodStartDate(objPeriod),2))
	}
	set idPeriod = $order(^FINGLPeriods(YM,1,idxPeriodType,toYear,toPeriod,""))	//SR14836
	if idPeriod'="" {
		set objPeriod = $get(^FINGLPeriod(YM,idPeriod,1))	
		set lstRow    = lstRow_$listbuild($zdate($$$FINGLPeriodEndDate(objPeriod),2))
	}
	
	; ----------------Add ABN information----------------------------	
	;et lstRow = lstRow_$listbuild($piece($get(^INFIBPAR(0,YM,YLOCATION,1)),Y,40))
	set objFINParam = $$GetGLParams^WWW0121Utils(YLOCATION)
	set lstRow = lstRow_$listbuild($$$INFIBPARTaxNo(objFINParam))

	
	; ----------------Add 'due date' information---------------------
	if $listlength(lstPeriods)=1 {
		set intdaysToPay = 21 ;monthly statements are 21 days to pay
	} else {
		set intdaysToPay = 28 ;anything greater (eg quarterly) gives 28 days to pay
	}
	set lstRow = lstRow_$listbuild($zdate(($$$FINGLPeriodEndDate(objPeriod)+intdaysToPay),2))
	
	quit lstRow
	
]]></Routine>
</Export>