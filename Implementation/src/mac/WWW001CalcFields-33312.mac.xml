<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWW001CalcFields" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
WWW001CalcFields
	;-------------------------------------------------------------------------------
	; Routines relating to Calculated Fields in Classes (used for SQL Projection)
	;-------------------------------------------------------------------------------
	
#include WWWConst
#include COMSYS
	
#define BASESTRING "BASE"
#define FCSTRING   "FC"
#define RATESTRING "RATE"
#define CURSTRING  "CUR"
#define AUTOGEN    "Auto generated at "_$$^WWWTIME($H)_" "_$$^WWWDATE($H)
	
Check() 
    /*-------------------------------------------------------------------------------
    ; Finds calculated fields that are too long to project to XML
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
    ; 07-Apr-2006	shobby	SRBR014013: Created
    ;-------------------------------------------------------------------------------*/
	new idx,objWWW003Calc,intField,strName
	
	set idx=""
	for {
		set idx=$order(^WWW003Calc(0,idx))
		quit:idx=""
		
		set intField=""
		for {
			set intField=$order(^WWW003Calc(0,idx,intField))
			quit:intField=""
			
			set objWWW003Calc=$get(^WWW003Calc(0,idx,intField,1))
			set strName=$$$WWW003CalcFieldName(objWWW003Calc)			
			if $length(strName)>28 {
				write !,$extract(idx_"                   ",1,20)_" : "_strName_":"_$length(strName)
			}
		}
	}
	quit
 
 
CalcFields(iClass="",pobjClass="")
    ;-------------------------------------------------------------------------------
    ; Add Calculated Fields to the class
    ;
    ; Returns:
    ;
    ; History:
    ; 09-Jun-2008	PPP		SRAdhoc:Updated the Version to Cache 2008
    ; 02-Dec-2008	shobby	SR16094: Removed a line that was saving after each calc
    ; 							field was added.  This paradoxically caused the
    ; 							calculated fields not to be saved properly.
    ; 02-Nov-2008	shobby	BR014985: Reintroduced method generation for calc fields
    ; 30-Mar-2007	RPW		SR15488: Check for 2007 for compilation of parameters.
    ; 25-Jul-2005	Steve S	Clean up
    ; 07-Jul-2005	Steve S	Moved from WWW001OO
    ; 22-Jun-2005	SCR		Created SR12755
    ;-------------------------------------------------------------------------------
    new blnIs2007,idCalcField,objCalcField,objMethod,objProp
    new strCaption,strCode,strName,strType
	
    if (iClass'="") && (pobjClass'="") {
	    set blnIs2007 = ($System.Version.GetMajor()>"2007")
	    
	    set idCalcField = ""
	    for {
		    set idCalcField = $order(^WWW003Calc(0,iClass,idCalcField))
		    quit:idCalcField=""
		    
			set objCalcField = $get(^WWW003Calc(0,iClass,idCalcField,1))
			
		    set strName	   = $$$WWW003CalcFieldName(objCalcField)
		    set strCode	   = $$$WWW003CalcCode(objCalcField)
		    set strType	   = $$$WWW003CalcDataType(objCalcField)
		    set strCaption = $$$WWW003CalcCaption(objCalcField)
		    
		    if strType=""    set strType    = "%String"
		    if strCaption="" set strCaption = strName
			
			set objProp=##class(%Dictionary.PropertyDefinition).%New()
			do pobjClass.Properties.Insert(objProp)
			
			set objProp.Name = strName
			set objProp.Type = strType
			if blnIs2007 {
				do objProp.Parameters.SetAt(strCaption,"CAPTION")
			} else {
				set objProp.Parameters.Data("CAPTION") = strCaption
			}
			set objProp.SqlComputeCode = " set {"_strName_"}="_strCode
			set objProp.Calculated     = $$$YES
			set objProp.SqlComputed    = $$$YES
			
			
			;SR16094 (commented the following line)
		;	if $get(YNOFORM)=1 set e = CLASS.%Save() if 'e { write !,"WWW003Calc"_"::"_iClass_":"_objProp.Name_" "_idCalcField do DisplayError^%apiOBJ(e) quit}
			
			;;SR14395 ;BR014985 VVV
			if $length(strName)>28 set strName = $extract(strName,1,28) 
			set objMethod = ##class(%Dictionary.MethodDefinition).%New()
			set objMethod.Name       = strName_"Get"
			set objMethod.ReturnType = strType
			set objMethod.CodeMode   = "expression"
			
			do objMethod.Implementation.Write($$TOSTREAM^WWWMEMO($translate($$FullReplace^COMUtilStr(strCode,"{",".."),"}")))
			do pobjClass.Methods.Insert(objMethod)
			do objMethod.%Close()
			;BR014985 ^^^		
	    }
    }
	quit
	
	
ClearAutoGen(pidCalcField="")
    ;-------------------------------------------------------------------------------
    ; Clear all auto-generated fields for a class
    ;
    ; Returns:
    ;
    ; History:
    ; 20-Jun-2006	RPW		SRBR014013: Call ReloadForm instead of ^WWWFORM
    ; 22-Jul-2005	SteveS	SR13059: Created
    ;-------------------------------------------------------------------------------
	new idCalcProp,idClass,objCalcProp
	
	set idClass=$piece(pidCalcField,",",1)
	set idCalcProp=""
	
	if idClass'="" {
		for {
			set idCalcProp=$order(^WWW003Calc(0,idClass,idCalcProp))
			quit:idCalcProp=""
			
			set objCalcProp=$get(^WWW003Calc(0,idClass,idCalcProp,1))
			if $$$WWW003CalcAutoGenerated(objCalcProp) {
				do KILL^COMUtils("WWW003Calc",idClass_","_idCalcProp)	
			}
		}
	}
	
	do ReloadForm^COMUtilForm() // SRBR014013
	
	quit
	
	
CalcCurrencyFields(pidClass="")
    ;-------------------------------------------------------------------------------
    ; Compute calculated currency fields
    ; 
    ; Returns:
    ;
    ; History:
    ; 20-Jun-2006	RPW		SRBR014013: Get the shortened name. If two names shorten
    ; 							to the same, the second subsequently gets a number
    ; 							attached
    ; 07-Jul-2005	SteveS	SR12854: Created
    ;-------------------------------------------------------------------------------
	new idProperty,objProperty,strPropName,arrProps,strRealName
	
	if pidClass'="" {
		set idProperty=""
		for {
			set idProperty=$order(^WWW003(0,pidClass,idProperty))
			quit:idProperty=""
			
			set objProperty=$get(^WWW003(0,pidClass,idProperty,1))
			
			// Calculate the new name
			
			set strPropName=$$$WWW003PropertyName(objProperty) // SRBR014013
			set strRealName=strPropName
			
			if $length(strPropName)>20 {
				set strPropName=$extract(strPropName,1,20)
				if '$data(arrProps(strPropName)) {
					set arrProps(strPropName)=""
					set arrProps(strPropName,"Count")=0
				} else {
					set strPropName=$extract(strPropName,1,19)
					set strPropName=strPropName_($increment(arrProps(strPropName,"Count")))
				}
			}
			
			if $$$WWW003InputType(objProperty)=8 { ;Currency
				do AddBaseCalcField(pidClass,strRealName,strPropName) // SRBR014013
				if $$$WWW003GenerateFCFields(objProperty) {
					do AddFCCalcFields(pidClass,strRealName,strPropName) // SRBR014013
				} else {
					do RemoveFCCalcFields(pidClass,strPropName,$$$YES) // SRBR014013
				}
			} else {
				do RemoveFCCalcFields(pidClass,strPropName,$$$NO) // SRBR014013
			}
		}
	}
	
	quit
	
	
GetCalcIndex(pidClass="",pstrPropName="")
    ;-------------------------------------------------------------------------------
    ; See if a field already has an auto-generated calc field.
    ; If so, return its calc field number.
    ; Else, return blank.
    ;
    ; Returns:
    ;
    ; History:
    ; 22-Jul-2005	SteveS	SR13059: Created
    ;-------------------------------------------------------------------------------
	new idx,idCalcProp,objCalcProp,strPropName
	
	set idx=""
	
	if pidClass'="" {
		set idCalcProp=""
		for {
			set idCalcProp=$order(^WWW003Calc(0,pidClass,idCalcProp))
			quit:idCalcProp=""
			quit:idx'=""
			
			set objCalcProp=$get(^WWW003Calc(0,pidClass,idCalcProp,1))
			
			if $$$WWW003CalcAutoGenerated(objCalcProp) {
				set strPropName=$$$WWW003CalcFieldName(objCalcProp)
				if (strPropName=pstrPropName) {
					set idx=idCalcProp	
				}
			}
		}	
	}
	
	quit idx
	
	
RemoveFCCalcFields(pidClass,pstrPropName,pblnKeepBase=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Remove auto generated calc fields
    ;
    ; Returns:
    ;
    ; History:
    ; 20-Jun-2006	RPW		SRBR014013: Use the correct property name
    ; 22-Jul-2005	SteveS	SR13059: Use GetCalcIndex, do not use an index
    ; 07-Jul-2005	SteveS	SR12854: Created
    ;-------------------------------------------------------------------------------
    new objProperty,strPropName,strBaseName,strFCName,strRateName,strCurName
    new idBaseCalc,idFCCalc,idRateCalc,idCurCalc
    
    if (pidClass'="")&&(pstrPropName'="") {
		
		set strBaseName =pstrPropName_$$$BASESTRING // SRBR014013
		set strFCName   =pstrPropName_$$$FCSTRING // SRBR014013
		set strRateName =pstrPropName_$$$RATESTRING // SRBR014013
		set strCurName  =pstrPropName_$$$CURSTRING // SRBR014013
		
		if ('pblnKeepBase) {
			set idBaseCalc=$$GetCalcIndex(pidClass,strBaseName)
			if idBaseCalc'="" do KILL^COMUtils("WWW003Calc",pidClass_","_idBaseCalc)	
		}
		
		set idFCCalc=$$GetCalcIndex(pidClass,strFCName)
		if idFCCalc'="" do KILL^COMUtils("WWW003Calc",pidClass_","_idFCCalc)
			
		set idRateCalc=$$GetCalcIndex(pidClass,strRateName)
		if idRateCalc'="" do KILL^COMUtils("WWW003Calc",pidClass_","_idRateCalc)	
			
		set idCurCalc=$$GetCalcIndex(pidClass,strCurName)
		if idCurCalc'="" do KILL^COMUtils("WWW003Calc",pidClass_","_idCurCalc)	
    }
	
	quit
	
	
AddBaseCalcField(pidClass,pstrRealName,pstrPropName)
    ;-------------------------------------------------------------------------------
    ; Add the "BASE" calculated field to a class
    ;
    ; Returns:
    ;
    ; History:
    ; 20-Jun-2006	RPW		SRBR014013: Added pstrPropName as pstrRealName
    ; 22-Jul-2005	SteveS	SR13059: Use GetCalcIndex, do not use an index
    ; 07-Jul-2005	SteveS	SR12854: Created
    ;-------------------------------------------------------------------------------
    new idCalc,objCalc,strNewName
	
	if (pidClass'="") && (pstrPropName'="") {
		set strNewName = pstrPropName_$$$BASESTRING     // SRBR014013
		
		set idCalc = $$GetCalcIndex(pidClass,strNewName)
		
		if idCalc="" { ;Create new
			set idCalc  = $order(^WWW003Calc(0,pidClass,""),-1)+1
			set objCalc = ""
			
			set $$$WWW003CalcFieldName(objCalc)		= strNewName
			set $$$WWW003CalcCode(objCalc)          = "$$FCBase^COMSYSFC({"_pstrRealName_"})" // BR014013
			set $$$WWW003CalcDataType(objCalc)      = "%Float"
			set $$$WWW003CalcAutoGenerated(objCalc) = $$$YES
			set $$$WWW003CalcCaption(objCalc)       = strNewName
			set $$$WWW003CalcComment(objCalc)       = $$$AUTOGEN
			
			do Save^COMUtils("WWW003Calc",pidClass_","_idCalc,objCalc,1)
		}
	}
	
	quit
	
	
AddFCCalcFields(pidClass,pstrRealName,pstrPropName)
    ;-------------------------------------------------------------------------------
    ; Add the FC calculated field to a class
    ;
    ; Returns:
    ;
    ; History:
    ; 29-Jun-2006	SteveS	SRBR014013: (Peer Review) Use pstrRealName
    ; 20-Jun-2006	RPW		SRBR014013: Added pstrPropName as pstrRealName
    ; 22-Jul-2005	SteveS	SR13059: Use GetCalcIndex, do not use an index
    ; 07-Jul-2005	SteveS	SR12854: Created
    ;-------------------------------------------------------------------------------
	new objProperty,strFCName,strRateName,strCurName
	new idFCCalc,objFCCalc,idRateCalc,objRateCalc,objFCName,idFCName
	
	if (pidClass'="") && (pstrPropName'="") {
		set strFCName   = pstrPropName_$$$FCSTRING    // SRBR014013
		set strRateName = pstrPropName_$$$RATESTRING  // SRBR014013
		set strCurName  = pstrPropName_$$$CURSTRING   // SRBR014013
		
		; Store FC Amount
		set idFCCalc = $$GetCalcIndex(pidClass,strFCName)
		if idFCCalc="" {
			set idFCCalc = $order(^WWW003Calc(0,pidClass,""),-1)+1
			set objFCCalc = ""
			
			set $$$WWW003CalcFieldName(objFCCalc)     = strFCName
			set $$$WWW003CalcCode(objFCCalc)          = "$$FCAmount^COMSYSFC({"_pstrRealName_"})" // SRBR014013
			set $$$WWW003CalcDataType(objFCCalc)      = "%Float"
			set $$$WWW003CalcAutoGenerated(objFCCalc) = $$$YES
			set $$$WWW003CalcCaption(objFCCalc)	      = strFCName
			set $$$WWW003CalcComment(objFCCalc)	      = $$$AUTOGEN
			
			do Save^COMUtils("WWW003Calc",pidClass_","_idFCCalc,objFCCalc,1)
		}
		
		;Store FC Rate
		set idRateCalc = $$GetCalcIndex(pidClass,strRateName)
		if idRateCalc="" {
			set idRateCalc  = $order(^WWW003Calc(0,pidClass,""),-1)+1
			set objRateCalc = ""
			
			set $$$WWW003CalcFieldName(objRateCalc)     = strRateName
			set $$$WWW003CalcCode(objRateCalc)          = "$$FCRate^COMSYSFC({"_pstrRealName_"})"
			set $$$WWW003CalcDataType(objRateCalc)      = "%Float"
			set $$$WWW003CalcAutoGenerated(objRateCalc) = $$$YES
			set $$$WWW003CalcCaption(objRateCalc)       = strRateName
			set $$$WWW003CalcComment(objRateCalc)       = $$$AUTOGEN
			
			do Save^COMUtils("WWW003Calc",pidClass_","_idRateCalc,objRateCalc,1)
		}
		
		;Store FC Name
		set idFCName = $$GetCalcIndex(pidClass,strCurName)
		if idFCName="" {
			set idFCName  = $order(^WWW003Calc(0,pidClass,""),-1)+1
			set objFCName = ""
			
			set $$$WWW003CalcFieldName(objFCName)     = strCurName
			set $$$WWW003CalcCode(objFCName)          = "$$Cur^COMSYSFC({"_pstrRealName_"})"
			set $$$WWW003CalcDataType(objFCName)      = "%String"
			set $$$WWW003CalcAutoGenerated(objFCName) = $$$YES
			set $$$WWW003CalcCaption(objFCName)       = strCurName
			set $$$WWW003CalcComment(objFCName)       = $$$AUTOGEN
			
			do Save^COMUtils("WWW003Calc",pidClass_","_idFCName,objFCName,1)
		}
	}
	
	quit
	
	
ShowCalcFields(pidClass="")
    ;-------------------------------------------------------------------------------
    ; Show the calc fields for a class
    ;
    ; Returns:
    ;
    ; History:
    ; 19-Jul-2005	SteveS	SR12854: Created
    ;-------------------------------------------------------------------------------
	new strHeader,lstHeader,idProp,objCalcProp
	
	if (pidClass'="") && ($data(^WWW003Calc(0,pidClass))) {
		set strHeader = $listbuild("WWW00026")  ;Calculated fields
		
		set lstHeader = ""
		set lstHeader = lstHeader_$listbuild($$$StrWWW003CalcPropertyNumber)
		set lstHeader = lstHeader_$listbuild($$$StrWWW003CalcFieldName)
		set lstHeader = lstHeader_$listbuild($$$StrWWW003CalcDataType)
		set lstHeader = lstHeader_$listbuild($$$StrWWW003CalcCode)
		set lstHeader = lstHeader_$listbuild($$$StrWWW003CalcAutoGenerated)
		
		do Start^COMTable(lstHeader,strHeader)
		
		set idProp=""
		
		for {
			set idProp=$order(^WWW003Calc(0,pidClass,idProp))
			quit:idProp=""
			
			set objCalcProp=$get(^WWW003Calc(0,pidClass,idProp,1))
			
			do NewLine^COMTable()
			
			do InsertCell^COMTable(idProp,                             "WWW003Calc",pidClass_","_idProp)
			do InsertCell^COMTable($$$WWW003CalcFieldName(objCalcProp),"WWW003Calc",pidClass_","_idProp)
			do InsertCell^COMTable($$$WWW003CalcDataType(objCalcProp), "WWW003Calc",pidClass_","_idProp)
			do InsertCell^COMTable($$$WWW003CalcCode(objCalcProp),     "WWW003Calc",pidClass_","_idProp)
			do InsertCell^COMTable($$$SysEnum("JA/NEIN",+$$$WWW003CalcAutoGenerated(objCalcProp)),"WWW003Calc",pidClass_","_idProp)
			
			do EndLine^COMTable()
		}
		
		do Stop^COMTable()
		
	}
	quit
	
	
GetParamString(pstrCode="")
    ;-------------------------------------------------------------------------------
    ; Given a Caché callback for a calculated field, return a comma-delimited
    ; list of the parameters required.
    ; 
    ; NOTE: Cannot simply check for Tag^Routine({param_1},...,{param_n}) syntax, since 
    ; we may have a combination of intrinsic/extrinsic function calls which don't
    ; necessarily follow this syntax.
    ;
    ; Params: pstrCode	- The Caché callback
    ;
    ; Returns: string
    ;
    ; History:
    ; 03-Jan-2006	SteveS	SR14116: Created
    ;-------------------------------------------------------------------------------
    ; e.g. ^WWW003Calc(0,"INWEAUF",16,1) : pstrCode = $$SupplierDetail^INRPAUF({Company},{OrderSupplier},8)
    ;      Returns strParams = {Company},{OrderSupplier}
    ;---------------------------------------
	new strParams,idx,subIdx,strName
	
	set strParams=""
	
	for idx=1:1:$length(pstrCode) {
		if $extract(pstrCode,idx)="{" {               //found opening
			set subIdx = idx
			while ($extract(pstrCode,subIdx)'="}") {  //find ending
				set subIdx = subIdx+1
			}
			
			set strName = $extract(pstrCode,idx,subIdx)
			
			if '$find(strParams,strName) {
				if strParams="" {
					set strParams = strName
				} else {
					set strParams = strParams_","_strName
				}	
			}
		}		
	}
	quit strParams


GetCalculatedValue(pidClass,pidField,pidKey,pobjRef) 
	;-------------------------------------------------------------------------------
	; Get the value of a calculated field - Filter type "C"
	;
	; Params:
	; pinRow (added)        : The row number to be displayed
	;
	; Returns:
	;
	; History:
	; 11-Aug-2006	RPW			SR14896: No longer need the result set
	; 27-Apr-2006	JW			SR14423: Convert date for calc fields.
	; 19-Apr-2006	JW			SR14429: Added pobjResult param
	; 03-Jan-2006	Steve S		SR14116: Use $$GetParamString^WWW001CalcFields
	; 23-Sep-2005	shobby		SR13213: Company is a special case of a property.
	;								(Implicitly defined primary key)
	; 22-Sep-2005	shobby		SR13213: Created
	;-------------------------------------------------------------------------------
	new strValue,objWWW003Calc,idField,strCode,strParameters,strParameter,idxParameter
	new idClass,idPiece,strData,idxstrParameter
	
	set strValue=""
	set idClass=$$$Index(pidClass)
	set idField=$extract(pidField,2,99)

	if (pidClass'="")&&(pidField'="") {
		set objWWW003Calc=$get(^WWW003Calc(0,pidClass,idField,1))
		set strCode=$$$WWW003CalcCode(objWWW003Calc)
		if strCode'="" {
			set strParameters=$$GetParamString^WWW001CalcFields(strCode)
			set strParameter=""
			for idxParameter=2:1:$length(strParameters,"{") {
				set strParameter=$piece($piece(strParameters,"{",idxParameter),"}",1)
				
				if strParameter="Company" {
					set strData=YM
					
				} else {
					set idxstrParameter=$$$Index(strParameter)
					set idPiece=$order(^WWW002s(0,3,idClass,idxstrParameter,pidClass,""))
					if idPiece'="" {
						set strData=$piece(pidKey,",",idPiece)
					} else {
						set idPiece=$order(^WWW003s(0,3,idClass,idxstrParameter,pidClass,""))
						if idPiece'="" {
							set strData=$piece(pobjRef,Y,idPiece)
						}
					}
				}
				set strCode=$$Replace^COMUtilStr(strCode,"{"_strParameter_"}",""""_strData_"""")
			}
			xecute "set strValue="_strCode
			write !,strCode_"="_$get(strValue)
		}
		if $$$WWW003CalcDataType(objWWW003Calc)="%Date" {
			set strValue = $$$FormatDate(strValue)
		}
	}
	
	quit strValue

]]></Routine>
</Export>