<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESCOMPRAS" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARSESCOMPRAS
#include COMSYS
 
OnBeforeSave(pYKEY)
	;-------------------------------------------------------------------------------
    ; Inicia-se a posição do processo de compra. Ao criar uma nova dispensa, atribui-se
    ; 1 para a posição do processo.
    ; 
    ; History:
    ; 22-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	if $piece(YFELD,Y,7) = "" set $piece(YFELD,Y,7) = 1
 
	quit
 
OnBeforeSaveHook(pYKEY,pYFORM,&YFELD)
	;-------------------------------------------------------------------------------
    ; Atualiza a posição do processo de compra.
    ; 
    ; History:
    ; 17-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	new strStatus, NoProcessoCompra, objCompra, statusProcesso, blnIsPublicado, isParecerRealizado, Modalidade
	
	set objCompra = $get(^VARSESCOMPRAS(YM,pYKEY,1))
	
	set statusProcesso = $piece(objCompra,Y,7)
	set Modalidade = $$GetModalidade(pYKEY)	
	
	;PositionHere -> 3 - Aguardando Fazer Lançamento
	if (statusProcesso = 3) && (pYFORM = "VARSESCOMPRASLancamento") {
		;PositionHere -> 4 - Aguardando Registrar Publicação
		set $piece(YFELD,Y,7) = 4
		set ^VARSESTempDispensaVoltar(YBED) = 1
	}
	
	;PositionHere -> 4 - Aguardando Registrar Publicação
	elseif (statusProcesso = 4) && (pYFORM = "VARSESCOMPRASPublicacao") {		
			
		set blnIsPublicado = $$$NO
		set blnIsPublicado = $$checkPublicacaoLancamento^VARSESCOMPRASPublicacao(pYKEY)
		
		if (blnIsPublicado = $$$YES) { ;somente se o usuário tiver registrado o número mínimo de publicações
			;PositionHere -> 5 - Aguardando Selec. Participantes
			set $piece(YFELD,Y,7) = 5
			set ^VARSESTempDispensaVoltar(YBED) = 1
		}
	}
	
	/* Não é mais necessário, essa atualização agora é feita dentro do método Marcar^VARSESCOMPRASParecer
	
	;PositionHere -> 8 - Aguardando Parecer de Propostas
	elseif (statusProcesso = 8) && (pYFORM = "VARSESCOMPRASParecer") {
		
		set isParecerRealizado = $$$NO
		set isParecerRealizado = $$checkCadastroParecer^VARSESCOMPRASParecer(pYKEY,objCompra)
		
		if (isParecerRealizado = $$$YES) { ;somente se o usuário tiver registrado os pareceres e aprovado ao menos um fornecedor 
									       ;para cada item ativo na compra
			
			if (Modalidade = 10) { ;PDPAS			
				;PositionHere -> 11 - Processo de Compra Finalizado
				set $piece(YFELD,Y,7) = 11
				
				; Atualiza log de conclusão do processo de compra
				set $piece(YFELD,Y,38) = $piece($horolog,",",1)
				set $piece(YFELD,Y,39) = $piece($horolog,",",2)
				set $piece(YFELD,Y,40) = YBED
				
			} else {
				;PositionHere -> 9 - Aguardando Ordenador de Despesas
				set $piece(YFELD,Y,7) = 9
				set ^VARSESTempDispensaVoltar(YBED) = 1	
			}		
		}
	}
	*/	
	
	quit $$$YES
 
OnBeforeEditAccessHook(pYKEY)
	;-------------------------------------------------------------------------------
    ; Chama verificação se o processo deve ficar somente leitura, e
    ; Adiciona os documentos de habilitação obrigatórios no processo de compra.
    ; 
    ; History:
    ; 27-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	if pYKEY = "" quit $$$YES
	
	new isReadOnly, strStatus	
	set strStatus = $$$OK
 
	set isReadOnly = $$CheckProcessoReadOnly(pYKEY)		
	if isReadOnly = $$$YES quit $$$NO
		
	if (YFORM = "VARSESCOMPRASLancamento") {			
		;[ALUP-233]
		;if ($data(^VARSESCOMPRASHabilitacao(YM,pYKEY)) > 0) quit $$$YES
 
		set strStatus = $$Transaction^COMTransaction("OnBeforeEditAccessHookTxn^VARSESCOMPRAS("""_pYKEY_""")",$$$YES)
	}
 
	if $$$ISERR(strStatus) {
		do ReturnError^COMUtilError(strStatus)
	}
 
	quit strStatus	
		
OnBeforeEditAccessHookTxn(pYKEY)
	;[ALUP-233]
	; Removida a funcionalidade Docs Habilitacao
	s strStatus = $$$OK
	;		
	;new count, codDocumento, objDocHabilitacao, strNomeDocumento, blnObrigatorio, chave, 
	;	objHabilitacaoLinha, reqAutenticacao, strObservacoes, CriadoEm, CriadoPor
	;	
	;set count = 0
	;	
	;//Adicionando os Documentos de Habilitação Obrigatórios
	;$$$Order2(^VARSESCOMPRASHabilitacaoTipo,YM,codDocumento)
	;	
	;	set objDocHabilitacao = $get(^VARSESCOMPRASHabilitacaoTipo(YM,codDocumento,1))
	;	set strNomeDocumento  = $piece(objDocHabilitacao,Y,1)
	;	set blnObrigatorio    = $piece(objDocHabilitacao,Y,4)
	;		
	;	continue:(blnObrigatorio '= 1)
	;		
	;	set count = $i(count)
	;		
	;	set chave = pYKEY_YKOMMA_count
	;		
	;	set reqAutenticacao = $$$NO
	;	set strObservacoes 	= ""
	;	set CriadoEm 		= $h
	;	set CriadoPor 		= YBED
	;		
	;	set objHabilitacaoLinha = codDocumento_Y_reqAutenticacao_Y_strObservacoes_Y_CriadoEm_Y_CriadoPor
	;	set strStatus = $$$Save("VARSESCOMPRASHabilitacao",chave,objHabilitacaoLinha,1)
	;	
	;$$$End
	;
	;if $$$ISOK(strStatus) {			
	;	
	;	//Adicionando as Normas Técnicas
	;	new strNotasTecnicas
	;	set strNotasTecnicas = $$GetStrNotasTecnicas(pYKEY)		
	;	set ultimoReg = ""
	;		
	;	if strNotasTecnicas = "" quit strStatus
	;			
	;	for cnt = 1:1:$length(strNotasTecnicas,";") {
	;		set NotaTecnica = $piece(strNotasTecnicas,";",cnt)
	;	 		
	;	 	continue:(NotaTecnica = "")
	;	 		
	;	 	set tipoNotaTecnica = 4
	;	 		
	;		set objDocHabilitacao = $get(^VARSESCOMPRASHabilitacaoTipo(YM,tipoNotaTecnica,1))  //Código 4 = Nota Técnica *FIXO*
	;		set strNomeDocumento  = $piece(objDocHabilitacao,Y,1)
	;			
	;		if ultimoReg = "" {
	;				set ultimoReg = $order(^VARSESCOMPRASHabilitacao(YM,pYKEY,ultimoReg),-1) + 1			
	;		} 
	;		else {
	;			set ultimoReg = ultimoReg + 1	
	;		}
	;			
	;		set chave = pYKEY_YKOMMA_ultimoReg
	;		
	;		set reqAutenticacao = $$$NO
	;		set strObservacoes 	= "Nota Técnica No. "_NotaTecnica
	;		set CriadoEm 		= $h
	;		set CriadoPor 		= YBED
	;			
	;		w "javascript:alert('"_chave_"');"
	;		
	;		set objHabilitacaoLinha = tipoNotaTecnica_Y_reqAutenticacao_Y_strObservacoes_Y_CriadoEm_Y_CriadoPor
	;		set strStatus = $$$Save("VARSESCOMPRASHabilitacao",chave,objHabilitacaoLinha,1)
	;		set strStatus = ""
	;	}
	;}	
 
	quit strStatus

OnBeforeDataAccess(YFORM,YKEY)	
	;-------------------------------------------------------------------------------
    ; Filtra os dados da classe, não mostrando compras que não tenham como local de
    ; entrega o local do usuário. *NÃO* foi implementado como um Hook, mas como um 
    ; evento da definição da classe 
    ; na aba "Callback (Retorno)".
    ; 
    ; History:
    ; 26-May-2011	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------	
	new blnDataAccess, perfilUsuario, idLocaldeEntrega
	set blnDataAccess = $$$YES
	
	//Não aplicar filtros ao administrador do sistema
	set perfilUsuario = $piece($get(^WWW013(YM,YBED,1)),Y,3)
	quit:(perfilUsuario = 1) $$$YES

	if (YFORM = "VARSESRecRegional") {		
		set idLocaldeEntrega = $piece($get(^VARSESCOMPRAS(YM,YKEY,1)),Y,36)		
		if (idLocaldeEntrega '= YLOCATION) {
			set blnDataAccess = $$$NO
		}
	}
	
	quit blnDataAccess

	
OnFilterHook(YKEY,YFELD,YFORM)
	;-------------------------------------------------------------------------------
    ; Filtra os registros da classe para o COMView e os botões de navegação.
    ; 
    ; History:
    ; 04-May-2011	Gustavo Fiuza		Updated - criada exceções por perfil
    ; 29-Apr-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------	
	new blnFilter, perfilUsuario
	set blnFilter = $$$YES
	
	//Não aplicar filtros ao administrador do sistema
	set perfilUsuario = $piece($get(^WWW013(YM,YBED,1)),Y,3)
	quit:(perfilUsuario = 1) $$$YES
	
	if (YFORM = "VARSESCOMPRASPDPAS") {
		
		;Não aplica filtros caso o usuário seja gestor do PDPAS
		quit:($$isGestorPDPAS^VARSESCOMPRASPDPAS(perfilUsuario) = $$$YES) $$$YES
		
		;Resgata o código da unidade de saúde para definir no contador
		new codUnidadeSaude
		set codUnidadeSaude = $piece($get(^WWW0121(YM,YM,YLOCATION,1)),Y,64)
		
		if (codUnidadeSaude = "") {
			quit blnFilter	
		
		;Verifica se o registro pertence, ou seja, possui o prefixo da unidade de saúde
		} else {
			
			if '$$Contem^VARSESUtil(YKEY,codUnidadeSaude) {
				set blnFilter = $$$NO
			}			
		}		
	}
 
	quit blnFilter

OnBeforeDelete(pYKEY)
 	;-------------------------------------------------------------------------------
    ; Antes de deletar o registro pai, deleta as linhas das tabelas filhas para que
    ; não hajam registros órfãos nestas.
    ; 
    ; History:
    ; 30-Mar-2011   Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------	
	new strStatus		
	set strStatus = $$$OK
	set strStatus = $$Transaction^COMTransaction("OnBeforeDeleteTxn^VARSESCOMPRAS("""_pYKEY_""")",$$$YES)
 
	if $$$ISERR(strStatus) {
		do ReturnError^COMUtilError(strStatus)
	}
 
	quit strStatus
	
OnBeforeDeleteTxn(pidCompra)
	new strStatus, idCompraLinha, keyLinha, idPublicacao, keyPublicacao, idHabilitacao, keyHabilitacao,
		idHistorico, keyHistorico, idCotacao, keyCotacao, idFornecedor, keyFornecedor, idParticipante, keyParticipante
 
 	set strStatus = $$$OK
 
	//Apagando os itens da compra
	$$$Order3(^VARSESCOMPRASLinha,YM,pidCompra,idCompraLinha)
		set keyLinha = pidCompra_$$$COMMA_idCompraLinha
		set strStatus = $$KILL^COMUtils("VARSESCOMPRASLinha",keyLinha)
		quit:$$$ISERR(strStatus)
	$$$End
	
	if $$$ISOK(strStatus) {	
		//Apagando as publicações da compra
		$$$Order3(^VARSESCOMPRASPublicacaoLinha,YM,pidCompra,idPublicacao)
			set keyPublicacao = pidCompra_$$$COMMA_idPublicacao
			set strStatus = $$KILL^COMUtils("VARSESCOMPRASPublicacaoLinha",keyPublicacao)
			quit:$$$ISERR(strStatus)
		$$$End
	}
	
	;[ALUP-233]
	;  Removida a funcionalidade Docs Habilitacao
	;if $$$ISOK(strStatus) {	
	;	//Apagando as habilitações da compra
	;	$$$Order3(^VARSESCOMPRASHabilitacao,YM,pidCompra,idHabilitacao)
	;		set keyHabilitacao = pidCompra_$$$COMMA_idHabilitacao
	;		;[ALUP-233]
	;		;set strStatus = $$KILL^COMUtils("VARSESCOMPRASHabilitacao",keyHabilitacao)
	;		set strStatus = ""
	;		quit:$$$ISERR(strStatus)
	;	$$$End
	;}
	
	if $$$ISOK(strStatus) {	
		//Apagando o histórico de responsáveis pelo processo de compra
		$$$Order3(^VARSESCOMPRASDefinirResp,YM,pidCompra,idHistorico)
			set keyHistorico = pidCompra_$$$COMMA_idHistorico
			set strStatus = $$KILL^COMUtils("VARSESCOMPRASDefinirResp",keyHistorico)
			quit:$$$ISERR(strStatus)
		$$$End
	}
	
	if $$$ISOK(strStatus) {	
		//Apagando as cotações do processo de compra
		$$$Order3(^VARSESCOMPRASCotacao,YM,pidCompra,idCotacao)
			set keyCotacao = pidCompra_$$$COMMA_idCotacao
			set strStatus = $$KILL^COMUtils("VARSESCOMPRASCotacao",keyCotacao)
			quit:$$$ISERR(strStatus)
		$$$End
	}
	
	if $$$ISOK(strStatus) {	
		//Apagando as AFMs associadas ao processo de compra
		$$$Order3(^VARSESCOMPRASAFM,YM,pidCompra,idFornecedor)
			set keyFornecedor = pidCompra_$$$COMMA_idFornecedor
			set strStatus = $$KILL^COMUtils("VARSESCOMPRASAFM",keyFornecedor)
			quit:$$$ISERR(strStatus)
		$$$End
	}

	if $$$ISOK(strStatus) {	
		//Apagando os participantes associados aos itens da compra
		$$$Order3(^VARSESCOMPRASParticipantesLine,YM,pidCompra,idLinha)
			$$$Order4(^VARSESCOMPRASParticipantesLine,YM,pidCompra,idLinha,idParticipante)
				set keyParticipante = pidCompra_$$$COMMA_idLinha_$$$COMMA_idParticipante
				set strStatus = $$KILL^COMUtils("VARSESCOMPRASParticipantesLine",keyParticipante)
				quit:$$$ISERR(strStatus)
			$$$End
		$$$End
	}
	
	if $$$ISOK(strStatus) {	
		//Apagando os participantes associados aos itens da compra
		$$$Order3(^VARSESCOMPRASPropostaLinha,YM,pidCompra,idLinha)
			$$$Order4(^VARSESCOMPRASPropostaLinha,YM,pidCompra,idLinha,idProposta)
				set keyProposta = pidCompra_$$$COMMA_idLinha_$$$COMMA_idProposta
				set strStatus = $$KILL^COMUtils("VARSESCOMPRASPropostaLinha",keyProposta)
				quit:$$$ISERR(strStatus)
			$$$End
		$$$End
	}
	
	quit strStatus
 
OnAfterDataFields(YKEY)
	;-------------------------------------------------------------------------------
    ; Mostra os processos de compra pertencentes ao usuário ou os itens do processo
    ; de compra. 
    ; 
    ; History:
    ; 14-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	
	if (YKEY = "") { //Mostra os processos para os quais o usuário é responsável
	
		new NoProcessoCompra, objProcessoCompra, Responsavel, Modalidade, Objeto, Posicao
		 
		//Tabela
	   	new lstHeader
	 	set lstHeader=""
	  	set lstHeader=lstHeader_$listbuild("No. Processo de Compra","Modalidade","Objeto","Responsável","Posição do Processo")
	  	
	  	if $$Start^COMTable(lstHeader,"Processos de Compra do Usuário: "_YBED_" ("_$$SQLGetUserName^VARSQL(YBED)_")") {
 
			$$$Order2(^VARSESCOMPRAS,YM,NoProcessoCompra)
				
				set objProcessoCompra = $get(^VARSESCOMPRAS(YM,NoProcessoCompra,1))
	
				set Responsavel = $piece(objProcessoCompra,Y,8)
				
				continue:(Responsavel '= YBED)
	
				set Modalidade = $piece(objProcessoCompra,Y,1)
				set Objeto 	   = $piece(objProcessoCompra,Y,3)
				set Posicao    = $piece(objProcessoCompra,Y,7)
				
				;PositionHere -> 11 - Processo de Compra Finalizado
				continue:(Posicao >= 11)
					
				do NewLine^COMTable()
		    	do InsertCell^COMTable(NoProcessoCompra,"VARSESCOMPRASDispensa",NoProcessoCompra)
		    	do InsertCell^COMTable(Modalidade_" - "_$$GetDescricaoModalidade^VARSESCOMPRASModalidade(Modalidade),"VARSESCOMPRASDispensa",NoProcessoCompra)		    	
		    	do InsertCell^COMTable(Objeto,"VARSESCOMPRASDispensa",NoProcessoCompra,,,,,,,1)
		    	do InsertCell^COMTable($$SQLGetUserName^VARSQL(Responsavel),"VARSESCOMPRASDispensa",NoProcessoCompra)
		    	do InsertCell^COMTable(Posicao_" - "_$$GetDescricaoPosicaoProcesso(Posicao),"VARSESCOMPRASDispensa",NoProcessoCompra)
		    	do EndLine^COMTable()			
		
			$$$End
			
			do Stop^COMTable()			
	  	}  
	}
 
	if (YKEY '= "") { //Mostra os produtos do processo de compra
		
		if (YSEITE = 2) {
			;[ALUP-233]
			;do LoadHabilitacao(YKEY)	
		}
		
		new Linha, objProcessoCompraLinha, PAM, Produto, Grupo, Unidade, Quantidade, strInserirCallBack,
			strInserirCallBack, strBotaoEstimativa, strEstimativaCallBack, lstHeader, chave, precoEstimado,
			blnSolicAmostra, blnEncerrado, motivo, strMotivo, blnReadOnly
 
		set strBotaoInserir    = "<IMG SRC="_YGIF_"InserirProdutos.gif TITLE='Clique para inserir produtos na dispensa' border=0 align=""center"" >"
		set strInserirCallBack = "GoToInserirProdutos^VARSESCOMPRASLinha"
		
		set strBotaoEstimativa    = "<IMG SRC="_YGIF_"EstimativaPreco.gif TITLE='Clique para elaborar a estimativa de preços para esse produto' border=0 align=""center"" >"
		set strEstimativaCallBack = "GoToEstimativa^VARSESCOMPRASLinha"
		 
		//Tabela
	 	set lstHeader=""
	  	set lstHeader=lstHeader_$listbuild("Item","PAM","Produto","Amostra?","Grupo","UN","Quantidade","Preço Estimado","")
	  	
	  	if $$Start^COMTable(lstHeader,"Produtos na Dispensa de Licitação") {
		
			if $data(^VARSESCOMPRASLinha(YM,YKEY)) > 0 {
		
				$$$Order3(^VARSESCOMPRASLinha,YM,YKEY,Linha)
				
					set objProcessoCompraLinha = $get(^VARSESCOMPRASLinha(YM,YKEY,Linha,1))
					
					set chave = YKEY_","_Linha
					
					set PAM		   = $piece(objProcessoCompraLinha,Y,1)
					set Produto	   = $piece(objProcessoCompraLinha,Y,2)
					set Grupo      = $piece(objProcessoCompraLinha,Y,3)
					set Unidade    = $piece(objProcessoCompraLinha,Y,4)
					set Quantidade = $piece(objProcessoCompraLinha,Y,5)
					
					set precoEstimado   = $$GetPrecoEstimado^VARSESCOMPRASLinha(chave)
					set blnSolicAmostra = $$GetSolicAmostra^VARSESCOMPRASLinha(chave)
					set blnReadOnly 	= $$CheckProcessoReadOnly(YKEY)
					
					set blnEncerrado = $piece(objProcessoCompraLinha,Y,16)
				
					do NewLine^COMTable()
			    	do InsertCell^COMTable(Linha,,,,"CENTER")
			    	do InsertCell^COMTable(PAM,"VARPedidoCompra",PAM,,,,,,"_BLANK")
			    	do InsertCell^COMTable(Produto_" - "_$extract($$SQLGetDescProduto^VARSQL(Produto),1,50),,,,,,,,,1)
    				do InsertCellCheckbox^COMTable(chave,"SolicitarAmostra^VARSESCOMPRASLinha",blnSolicAmostra,blnReadOnly)
			    	do InsertCell^COMTable(Grupo,,,,"CENTER")
			    	do InsertCell^COMTable($extract($piece($get(^WWW101(YM,"EINHEIT","PT",Unidade,1)),"~",1),1,2),,,,"CENTER")
			    	do InsertCell^COMTable($$^WWWTR(0,12,Quantidade),,,,"RIGHT")
			    	do InsertCurrencyCell^COMTable(precoEstimado)
			    	;do InsertCell^COMTable($$GetTipoMaterial^VARSESCOMPRASLancamento(Produto))
			    	
			    	if blnEncerrado '= 1 {
						do InsertCellCallback^COMTable(strBotaoEstimativa,strEstimativaCallBack,chave)
			    	} else {
						set motivo = $piece(objProcessoCompraLinha,Y,17)
						set strMotivo = $$GetMotivoDescricao^VARSESCOMPRASEncerrar(motivo)				    	
				    	do InsertCell^COMTable("<font color=red>"_strMotivo_"</font>")
			    	}
			    	
			    	do EndLine^COMTable()			
		
				$$$End
			
				do NewLine^COMTable()
				do InsertCell^COMTable("",,,,,,8)
				do InsertCellCallback^COMTable(strBotaoInserir,strInserirCallBack,YKEY)	
				do EndLine^COMTable()		
			}
		
			else {
				do NewLine^COMTable("white")
				do InsertCell^COMTable("Nenhum produto inserido na dispensa&nbsp;&nbsp;",,,,"RIGHT",,7)
				do InsertCellCallback^COMTable(strBotaoInserir,strInserirCallBack,YKEY)
				do InsertCell^COMTable("")
				do EndLine^COMTable()
			}
			
			do Stop^COMTable()			
	  	}  
	}	
	
	quit
	
LoadHabilitacao(pYKEY)
	;[ALUP-233]
	;  Removida a funcionalidade
	;new idHabilitacao, count, objHabilitacao, codDocumento, nomeDocumento, ExigeAutenticacao
	;
	;//Tabela
   	;new lstHeader
 	;set lstHeader = ""
  	;set lstHeader = lstHeader_$listbuild("#","Nome do Documento","Exige Autenticação","Observações")
  	;
  	;set count = 0
  	;
 	;if $$Start^COMTable(lstHeader,"Documentos de Habilitação Técnica Exigidos para participar do Processo") {
	;
	;	$$$Order3(^VARSESCOMPRASHabilitacao,YM,pYKEY,idHabilitacao)
	;
	;		set objHabilitacao = $get(^VARSESCOMPRASHabilitacao(YM,pYKEY,idHabilitacao,1))
	;	
	;		set codDocumento 	  = $piece(objHabilitacao,Y,1)
	;		set ExigeAutenticacao = $piece(objHabilitacao,Y,2)
	;		set Observacoes		  = $piece(objHabilitacao,Y,3)
	;		
	;		set nomeDocumento = $$GetNomeDocHabilitacao^VARSESCOMPRASHabilitacaoTipo(codDocumento)
	;		set nomeDocumento = ""
	;		
	;		set count = $i(count)
	;		
	;		do NewLine^COMTable()
	;		do InsertCell^COMTable(count,,,,"CENTER")
	;		do InsertCell^COMTable(nomeDocumento)
	;		do InsertCell^COMTable($$SQLGetYesOrNo^VARSQL(ExigeAutenticacao))
	;		do InsertCell^COMTable(Observacoes)
	;		do EndLine^COMTable()			
	;	
	;	$$$End
 	;}
	;
	;do Stop^COMTable()	
	;
	quit
	
	
GetResponsavelPeloProcesso(pYKEY)
	;-------------------------------------------------------------------------------
    ; Retorna o responsável atual pelo processo de compra.
    ; 
    ; History:
    ; 14-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	quit:(pYKEY = "")
	
	new ResponsavelAtual
	set ResponsavelAtual = $piece($get(^VARSESCOMPRAS(YM,pYKEY,1)),Y,8)
	
	quit ResponsavelAtual
	
GetSubstituto(pYKEY)
	;-------------------------------------------------------------------------------
    ; Retorna o substituto atual pelo processo de compra.
    ; 
    ; History:
    ; 21-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	quit:(pYKEY = "")
	
	new SubstitutoAtual
	set SubstitutoAtual = $piece($get(^VARSESCOMPRAS(YM,pYKEY,1)),Y,9)
	
	quit SubstitutoAtual	
	
GetPosicao(pYKEY)
	;-------------------------------------------------------------------------------
    ; Retorna a posição do processo de compra.
    ; 
    ; History:
    ; 17-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	quit:(pYKEY = "")
	
	new Posicao
	set Posicao = $piece($get(^VARSESCOMPRAS(YM,pYKEY,1)),Y,7)
	
	quit Posicao
	
GetModalidade(pYKEY)
	;-------------------------------------------------------------------------------
    ; Retorna a modalidade do processo de compra.
    ; 
    ; History:
    ; 30-Mar-2011	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	quit:(pYKEY = "")
	
	new Modalidade
	set Modalidade = $piece($get(^VARSESCOMPRAS(YM,pYKEY,1)),Y,1)
	
	quit Modalidade
	
GetEnquadramentoLegal(pYKEY)
	;-------------------------------------------------------------------------------
    ; Retorna o enquadramento legal do processo de compra.
    ; 
    ; History:
    ; 06-Apr-2011	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	quit:(pYKEY = "")
	
	new EnquadramentoLegal
	set EnquadramentoLegal = $piece($get(^VARSESCOMPRAS(YM,pYKEY,1)),Y,2)
	
	;Caso não esteja preenchido, por default retorna 1
	if EnquadramentoLegal = "" set EnquadramentoLegal = 1
	
	quit EnquadramentoLegal
 
GetDescricaoPosicaoProcesso(pidPosicao)
	;-------------------------------------------------------------------------------
    ; Retorna a descrição da posição do processo de compra.
    ; 
    ; History:
    ; 15-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	if pidPosicao = "" quit ""
	quit $piece($get(^VARSESCOMPRASPosicaoProcesso(YM,pidPosicao,1)),Y,1)
	
 
AtualizaPosicaoParticipante(pNoProcessoCompra)
	;-------------------------------------------------------------------------------
    ; Atualiza a posição do participante. O critério para alterar a posição 4 é que
    ; todos os itens do processo devem ter ao menos um participante associado a ele.
    ; 
    ; History:
    ; 17-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------	
	quit:(pNoProcessoCompra = "")
 
	new strStatus, existeParticipante, objCompra, Posicao
	set strStatus = $$$OK
	
	set existeParticipante = $$GetExisteParticipante(pNoProcessoCompra)
 	
	set objCompra = $get(^VARSESCOMPRAS(YM,pNoProcessoCompra,1))		
	set Posicao = $piece(objCompra,Y,7)
	
	set Modalidade = $$GetModalidade(pNoProcessoCompra)
	
	if (Modalidade = 10) { ;10-PDPAS
	
	 	// Se o processo de compra está na posição 5 - Aguardando Seleção de Fornecedores e existem participantes
	 	// para todos os itens
	  	if ((existeParticipante = $$$YES) && (Posicao = 5)) { ;PositionHere -> 5 - Aguardando Selec. Participantes		
			set $piece(objCompra,Y,7) = 7 ;PositionHere -> 7 - Aguardando Cadastrar Propostas
			set strStatus = $$$Save("VARSESCOMPRAS",pNoProcessoCompra,objCompra,1)
		}
  	
	 	// Se o processo de compra está na posição 7 - Aguardando Cadastrar Propostas e não existem participantes
	 	// para todos os itens  	
	  	elseif ((existeParticipante = $$$NO) && (Posicao = 7)) { ;PositionHere -> 7 - Aguardando Cadastrar Propostas
			set $piece(objCompra,Y,7) = 5 ;PositionHere -> 5 - Aguardando Selec. Participantes
			set strStatus = $$$Save("VARSESCOMPRAS",pNoProcessoCompra,objCompra,1)
		}
	
	} else {
 	
 		// Se o processo de compra está na posição 5 - Aguardando Seleção de Fornecedores e existem participantes
	 	// para todos os itens
	  	if ((existeParticipante = $$$YES) && (Posicao = 5)) { ;PositionHere -> 5 - Aguardando Selec. Participantes		
			set $piece(objCompra,Y,7) = 6 ;PositionHere -> 6 - Aguardando Enviar Cotações
			set strStatus = $$$Save("VARSESCOMPRAS",pNoProcessoCompra,objCompra,1)
		}
	  	
	 	// Se o processo de compra está na posição 6 - Aguardando Enviar Cotações e não existem participantes
	 	// para todos os itens  	
	  	elseif ((existeParticipante = $$$NO) && (Posicao = 6)) { ;PositionHere -> 6 - Aguardando Enviar Cotações
			set $piece(objCompra,Y,7) = 5 ;PositionHere -> 5 - Aguardando Selec. Participantes
			set strStatus = $$$Save("VARSESCOMPRAS",pNoProcessoCompra,objCompra,1)
		}	
	}
	
	quit strStatus
 
 
GetExisteParticipante(pNoProcessoCompra)
	;-------------------------------------------------------------------------------
    ; Retorna se o processo de compra possui ou não participantes para todos os itens
    ; existentes no processo.
    ; 
    ; History:
    ; 17-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------	
	quit:(pNoProcessoCompra = "")
	
	new Item, blnExisteParticipante
	
	set blnExisteParticipante = $$$NO
	
	$$$Order3(^VARSESCOMPRASLinha,YM,pNoProcessoCompra,Item)

 		//Se o item estiver encerrado, não considera como critério para atualizar o processo.
 		continue:($$isItemEncerrado^VARSESCOMPRASPDPASLinha(pNoProcessoCompra,Item) = $$$YES)
					
		if ($data(^VARSESCOMPRASParticipantesLine(YM,pNoProcessoCompra,Item)) > 0) {		
			set blnExisteParticipante = $$$YES
		} else {
			set blnExisteParticipante = $$$NO
			quit
		}
	
	$$$End
	
	quit blnExisteParticipante
	
	
GetCodigoItem(pNoProcessoCompra,pLinhaProcessoCompra)
	if (pNoProcessoCompra = "") || (pLinhaProcessoCompra = "") {
		quit ""
	}
	
	new objCompraLinha, CodigoItem
	
	set objCompraLinha = $get(^VARSESCOMPRASLinha(YM,pNoProcessoCompra,pLinhaProcessoCompra,1))
	set CodigoItem = $piece(objCompraLinha,Y,2)
	
	quit CodigoItem
	
	
GetDescricaoCompletaItem(pNoProcessoCompra,pLinhaProcessoCompra)
	if (pNoProcessoCompra = "") || (pLinhaProcessoCompra = "") {
		quit ""
	}
	
	new objCompraLinha, CodigoItem, DescricaoItem
	
	set objCompraLinha = $get(^VARSESCOMPRASLinha(YM,pNoProcessoCompra,pLinhaProcessoCompra,1))
	set CodigoItem = $piece(objCompraLinha,Y,2)
 
	set DescricaoItem = $$SQLGetDescricaoProduto^VARSQL(CodigoItem)
 
	quit DescricaoItem
	
GetUnidadeItem(pNoProcessoCompra,pLinhaProcessoCompra)
	if (pNoProcessoCompra = "") || (pLinhaProcessoCompra = "") {
		quit ""
	}
	
	new objCompraLinha, CodigoItem, Unidade
	
	set objCompraLinha = $get(^VARSESCOMPRASLinha(YM,pNoProcessoCompra,pLinhaProcessoCompra,1))
	set CodigoItem = $piece(objCompraLinha,Y,2)
 
	set Unidade = $$SQLGetUnitMeasure^VARSQL(CodigoItem)
 
	quit Unidade	
	
GetGrupoItem(pNoProcessoCompra,pLinhaProcessoCompra)
	if (pNoProcessoCompra = "") || (pLinhaProcessoCompra = "") {
		quit ""
	}
	
	new objCompraLinha, CodigoItem, Grupo
	
	set objCompraLinha = $get(^VARSESCOMPRASLinha(YM,pNoProcessoCompra,pLinhaProcessoCompra,1))
	set CodigoItem = $piece(objCompraLinha,Y,2)
 
	set Grupo = $$SQLGetGrupoItem^VARSQL(CodigoItem)
 
	quit Grupo	
	
	
GetQuantidadeSolicitada(pNoProcessoCompra,pLinhaProcessoCompra)
	if (pNoProcessoCompra = "") || (pLinhaProcessoCompra = "") {
		quit ""
	}
	
	new objCompraLinha, qtdeSolicitada
	
	set objCompraLinha = $get(^VARSESCOMPRASLinha(YM,pNoProcessoCompra,pLinhaProcessoCompra,1))
	set qtdeSolicitada = $piece(objCompraLinha,Y,5)
 
	quit qtdeSolicitada
 
CanUseButton(pYKEY,pstrBotao)	
	;-------------------------------------------------------------------------------
    ; Verifica se os botões podem ser habilitados ou não.
    ; 
    ; History:
    ; 21-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------	
	quit:(pYKEY = "")
	
	new idPosicaoProcesso, posicaoAtualMessage, disabledMessage
			
	set idPosicaoProcesso = $$GetPosicao(pYKEY)
	set strPosicaoProcesso = $$GetDescricaoPosicaoProcesso(idPosicaoProcesso)
	set posicaoAtualMessage = "No momento a posição do processo é '"_idPosicaoProcesso_" - "_strPosicaoProcesso_"'."
 
	if (pstrBotao = "Lancamento") {
		if (idPosicaoProcesso < 3) { ;PositionHere -> 3 - Aguardando Fazer Lançamento
			set disabledMessage = "Só é possível fazer o lançamento quando a posição do processo for igual a '3 - Aguardando Fazer Lançamento'."
			set YQ = $$$YQDisable(disabledMessage_$char(10)_posicaoAtualMessage)
		}
	}
 
	elseif (pstrBotao = "Publicacao") {
		if (idPosicaoProcesso < 4) { ;PositionHere -> 4 - Aguardando Registrar Publicação
			set disabledMessage = "Só é possível registrar publicações e divulgações quando a posição do processo for igual ou posterior a '4 - Aguardando Registrar Publicação'."
			set YQ = $$$YQDisable(disabledMessage_$char(10)_posicaoAtualMessage)
		}
	}
 
	elseif (pstrBotao = "Participantes") {
		if (idPosicaoProcesso < 5) { ;PositionHere -> 5 - Aguardando Selecionar Participantes
			set disabledMessage = "Só é possível selecionar participantes quando a posição do processo for igual a  '5 - Aguardando Sel. Participantes'."
			set YQ = $$$YQDisable(disabledMessage_$char(10)_posicaoAtualMessage)
		}
	}
	
	elseif (pstrBotao = "Cotacao") {
		if (idPosicaoProcesso < 6) { ;PositionHere -> 6 - Aguardando Enviar Cotações
			set disabledMessage = "Só é possível enviar os pedidos de cotação quando a posição do processo for igual a '6 - Aguardando Enviar Cotações'."
			set YQ = $$$YQDisable(disabledMessage_$char(10)_posicaoAtualMessage)
		}
	}
 
	elseif (pstrBotao = "Proposta") {
		if (idPosicaoProcesso < 7) { ;PositionHere -> 7 - Aguardando Cadastrar Propostas
			set disabledMessage = "Só é possível cadastrar propostas quando a posição do processo for igual a '7 - Aguardando Cadastrar Propostas'."
			set YQ = $$$YQDisable(disabledMessage_$char(10)_posicaoAtualMessage)
		}
	}
	
	elseif (pstrBotao = "Parecer") {
		if (idPosicaoProcesso < 8) { ;PositionHere -> 8 - Aguardando Parecer de Propostas
			set disabledMessage = "Só é possível cadastrar propostas quando a posição do processo for igual a '8 - Aguardando Parecer de Propostas'."
			set YQ = $$$YQDisable(disabledMessage_$char(10)_posicaoAtualMessage)
		}
	}
	elseif (pstrBotao = "GerarAFM") {
		if (idPosicaoProcesso < 10) { ;PositionHere -> 10 - Aguardando Gerar AFM
			set disabledMessage = "Só é possível gerar a AFM quando a posição do processo for igual a '10 - Aguardando Gerar AFM'."
			set YQ = $$$YQDisable(disabledMessage_$char(10)_posicaoAtualMessage)
		}		
	}
	elseif (pstrBotao = "Relatorio") {
		if (idPosicaoProcesso < 3) { ;PositionHere -> 3 - Aguardando Fazer Lançamento
			set disabledMessage = "Só é possível gerar relatórios quando a posição do processo for igual a '3 - Aguardando Fazer Lançamento'."
			set YQ = $$$YQDisable(disabledMessage_$char(10)_posicaoAtualMessage)
		}		
	}
	elseif (pstrBotao = "MapaComparativo") {
		if (idPosicaoProcesso < 8) { ;PositionHere -> 8 - Aguardando Parecer de Propostas
			set disabledMessage = "Só é possível gerar o mapa comparativo quando a posição do processo for igual ou maior que '8 - Aguardando Parecer de Propostas'."
			set YQ = $$$YQDisable(disabledMessage_$char(10)_posicaoAtualMessage)
		}		
	}	
	elseif (pstrBotao = "Encerrar") {
		if (idPosicaoProcesso < 2) { ;PositionHere -> 2 - Aguardando Estimativa de Preços
			set disabledMessage = "Só é possível encerrar itens da dispensa quando a posição do processo for igual ou maior que '2 - Aguardando Estimativa de Preços'."
			set YQ = $$$YQDisable(disabledMessage_$char(10)_posicaoAtualMessage)
		}
		elseif (idPosicaoProcesso > 11) { ;PositionHere -> 11 - Processo de Compra Finalizado
			set disabledMessage = "Não é possível encerrar."
			set YQ = $$$YQDisable(disabledMessage_$char(10)_posicaoAtualMessage)
		}		
	}
	
	else {
		set YQ = $$$YQEnable
	}
 
	quit
	
	
HideAbaHabilitacao(pYKEY)
	;-------------------------------------------------------------------------------
    ; Só mostra a aba de habilitação quando tiver algum registro na tabela
    ; VARSESCOMPRASHabilitacao.
    ; 
    ; History:
    ; 21-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	if pYKEY = "" {
		quit $$$YES	
	}
	
	;[ALUP-233]
	;if ($data(^VARSESCOMPRASHabilitacao(YM,pYKEY)) > 0) {
	;	quit $$$NO
	;}
	
	quit $$$YES
	
	
GetValorTotalEstimado(pYKEY)
	;-------------------------------------------------------------------------------
    ; Pega o valor total ESTIMADO do processo de compra, que é igual à somatória do
    ; preço estimado de cada item * a quantidade.
    ; 
    ; History:
    ; 27-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	if pYKEY = "" quit ""
	new Item, fltQuantidade, keyLinha, vlueItem, vlueTotal, precoEstimado
	
	set precoEstimado = ""
	set vlueTotal 	  = ""
	
	$$$Order3(^VARSESCOMPRASLinha,YM,pYKEY,Item)
		
		set keyLinha = pYKEY_YKOMMA_Item
		
		set fltQuantidade = $piece($get(^VARSESCOMPRASLinha(YM,pYKEY,Item,1)),Y,5)
		set precoEstimado = $$GetPrecoEstimado^VARSESCOMPRASLinha(keyLinha)
		
		continue:(precoEstimado = "")
		
		set vlueItem  = fltQuantidade * precoEstimado	
		set vlueTotal = vlueTotal + vlueItem
	
	$$$End
	
	if vlueTotal = 0 quit ""		
	quit vlueTotal
	
GetValorTotalReal(pYKEY)
	;-------------------------------------------------------------------------------
    ; Pega o valor total REAL do processo de compra, que é igual à somatória do preço
    ; da proposta vencedora de cada item * a quantidade ofertada.
    ; 
    ; History:
]]><![CDATA[    ; 27-Aug-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	if pYKEY = "" quit ""
	
	new idItem, idFornecedor, custosImportacao, qtyOfertada, precoUnitario, vlueItem, vlueCompra
	
	set vlueCompra = 0
	
	$$$Order5(^VARSESCOMPRASPropostaLinhas,YM,1,1,pYKEY,idItem)	
		$$$Order6(^VARSESCOMPRASPropostaLinhas,YM,1,1,pYKEY,idItem,idFornecedor)
	
			set objPropostaLinha = $get(^VARSESCOMPRASPropostaLinha(YM,pYKEY,idItem,idFornecedor,1))
			
			set custosImportacao = 0
			set qtyOfertada      = 0
			set precoUnitario    = 0
			
			set custosImportacao = $piece(objPropostaLinha,Y,5)
			set qtyOfertada      = $piece(objPropostaLinha,Y,16)
			set precoUnitario    = $piece(objPropostaLinha,Y,17)
			
			set vlueItem   = 0
			set vlueItem   = (qtyOfertada * precoUnitario) + custosImportacao
			set vlueCompra = vlueCompra + vlueItem
		
		$$$End	
	$$$End
		
	quit vlueCompra
	
	
GetEstoquePrincipal(pYKEY)
	if pYKEY = "" quit ""
	new EstoquePrincipal
	set EstoquePrincipal = $piece($get(^VARSESCOMPRAS(YM,pYKEY,1)),Y,34)	
	quit EstoquePrincipal
	
 
OnBeforeFormConstruct(pYKEY)
	;-------------------------------------------------------------------------------
    ; Conforme solicitado pelos usuários, redireciona
    ; 
    ; É executado somente quando o usuário seta uma ação que altera a posição do processo.
    ; Procurar por ; set ^VARSESTempDispensaVoltar(YBED) = 1, 2 ou 3
    ; 
    ; Inserido nos forms (OnBeforeFormConstruction) e métodos:
    ; 	1. Elaborar Estimativa de Preços -> OnAfterSaveHook^VARSESCOMPRASLinha
    ; 	2. Fazer Lançamento              -> OnBeforeSaveHook^VARSESCOMPRAS
    ; 	3. Registrar Publicações         -> OnBeforeSaveHook^VARSESCOMPRAS
    ; 	4. Cadastrar Propostas           -> OnAfterSave do form VARSESCOMPRASPropostaLinha
    ; 	5. Selecionar Participantes      -> OnBeforSave^VARSESCOMPRASParticipantesSel
    ; 
    ; History:
    ; 03-Oct-2009   Gustavo Fiuza		Updated
    ; 30-Set-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	new link, idModalidade, newForm
	if $get(^VARSESTempDispensaVoltar(YBED)) = 1 {
		
		set idModalidade = $$GetModalidade(pYKEY)
		
		if (idModalidade = 10) { ;10-PDPAS
			set newForm = "VARSESCOMPRASPDPAS"
		} else {
			set newForm = "VARSESCOMPRASDispensa"
		}
		
	    set link = YAKTION_"EP=WWWFORM&YFORM="_newForm_"&YUCI="_YUCI_"&YBED="_YBED_"&YM="_YM_"&YUSER="_YUSER_"&YBACK="_YFORM_","_"&YPARA="_YPARA_"&YKEY="_$$$KEY1(pYKEY)
	    $$$StartScript()
		write "window.location = '"_link_"'"
		$$$EndScript()
	
	} elseif $get(^VARSESTempDispensaVoltar(YBED)) = 2 {
	    set link = YAKTION_"EP=WWWFORM&YFORM=VARSESCOMPRASProposta&YUCI="_YUCI_"&YBED="_YBED_"&YM="_YM_"&YUSER="_YUSER_"&YBACK="_YFORM_","_"&YPARA="_YPARA_"&YKEY="_$$$KEY1(pYKEY)
	    $$$StartScript()
		write "window.location = '"_link_"'"
		$$$EndScript()
	}
	elseif $get(^VARSESTempDispensaVoltar(YBED)) = 3 {
	    set link = YAKTION_"EP=WWWFORM&YFORM=VARSESCOMPRASParticipantes&YUCI="_YUCI_"&YBED="_YBED_"&YM="_YM_"&YUSER="_YUSER_"&YBACK="_YFORM_","_"&YPARA="_YPARA_"&YKEY="_$$$KEY1(pYKEY)
	    $$$StartScript()
		write "window.location = '"_link_"'"
		$$$EndScript()
	}	
	
	kill ^VARSESTempDispensaVoltar(YBED)	
	
	quit
	
	
GetStrNotasTecnicas(pYKEY)
	;-------------------------------------------------------------------------------
    ; Retorna uma string com todas as notas técnicas de um processo de compra na 
    ; VARSESCOMPRASLinha.
    ; 
    ; History:
    ; 02-Oct-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	new objLinha, idItem, noNotaTecnica, strNotas
	
	set strNotas = ""
 
	$$$Order3(^VARSESCOMPRASLinha,YM,pYKEY,idLinha)		
		set objLinha = $get(^VARSESCOMPRASLinha(YM,pYKEY,idLinha,1))
		set idItem   = $piece(objLinha,Y,2)
		
		set noNotaTecnica = $$getNotaTecnica^VARTRKINART(idItem)
		
		//Passa reto caso já tenha inserido a nota técnica na String
		continue:($find(strNotas,";"_noNotaTecnica_";"))
		
		if (noNotaTecnica '= "") {
			set strNotas = strNotas_";"_noNotaTecnica
		}
		
	$$$End
		
	set strNotas = strNotas_";"	
	quit strNotas
	
	
CheckProcessoReadOnly(pYKEY)
	;-------------------------------------------------------------------------------
    ; Verifica se o processo deve ou não ficar somente-leitura.
    ; 
    ; History:
	; 14-Jun-2011	Gustavo Fiuza		Updated
	; 01-May-2011	Gustavo Fiuza		Updated
    ; 28-Apr-2011	Gustavo Fiuza		Updated
    ; 29-Mar-2011   Gustavo Fiuza		Updated
    ; 03-Nov-2009	Gustavo Fiuza		Updated
    ; 30-Oct-2009	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	if ( (pYKEY = "") || (pYKEY = "+") ) quit $$$NO
	
	new isReadOnly, Responsavel, Substituto, Posicao, idLocalCompra, codUnidLocalCompra, codUnidSaudeLocalUsuario
	
	set isReadOnly = $$$NO
	
	// 1. Verificando se o usuário é o responsável ou o substituto
	set Responsavel = $$GetResponsavelPeloProcesso(pYKEY)
	set Substituto  = $$GetSubstituto(pYKEY)
	
	if ((Responsavel '= "") && (Substituto '= "")) { //Verifica somente se o processo exige usuário
		if ((YBED '= Responsavel) && (YBED '= Substituto)) {
			set isReadOnly = $$$YES
		}
	}
	
	// 2. Verificando se o local do usuário é igual ao Local de Compra definido no processo
	set idLocalCompra = $$GetLocaldeCompra(pYKEY)
	

		
	set codUnidSaudeLocalCompra  = $piece($get(^WWW0121(YM,YM,idLocalCompra,1)),Y,64)
	set codUnidSaudeLocalUsuario = $piece($get(^WWW0121(YM,YM,YLOCATION,1)),Y,64)
	
	if ( (codUnidSaudeLocalCompra '= "") && (codUnidSaudeLocalUsuario '= "") ) {
		
		if (codUnidSaudeLocalCompra '= codUnidSaudeLocalUsuario) {
			set isReadOnly = $$$YES
			quit isReadOnly
		}
		
	} elseif (idLocalCompra '= YLOCATION) { 
		set isReadOnly = $$$YES
		quit isReadOnly
	}
	
	// 3. Verificando a posição do processo
	/*
	 a)	Quando a posição do processo estiver finalizado, não é mais possível alterá-lo.
	 b)	Após a autorização do ordenador de despesas, não pode mais ser possível alterar o parecer
 	 c)	Após confirmado o parecer, não é mais possível alterar os participantes, pedidos de cotação e propostas
	 d)	Após registradas as publicações, não poderá mais inserir itens, fazer estimativa de preços, alterar dados de lançamento
 	*/
 		
	set Posicao = $$GetPosicao(pYKEY)
 	
 	;Position Here -> 11 - Processo de Compra Finalizado
	if (Posicao >= 11) {				
		if ( (YFORM '= "VARSESCOMPRASParecer") && (YFORM '= "VARSESCOMPRASPropostaLinhaAlt") ) {
			set isReadOnly = $$$YES		
		}
	
	;Position Here -> 10 - Aguardando Gerar AFM
	} elseif (YFORM = "VARSESCOMPRASParecer") && (Posicao = 10) {	
		set isReadOnly = $$$YES
	
	;Position Here -> 9 - Aguardando Ordenador de Despesas
	} elseif ((YFORM = "VARSESCOMPRASParticipantes") || (YFORM = "VARSESCOMPRASCotacao") || (YFORM = "VARSESCOMPRASPropostaLinha")) && (Posicao >= 9) {	
		set isReadOnly = $$$YES
	
	;Position Here -> 7 - Aguardando Cadastrar Propostas
	} elseif (YFORM = "VARSESCOMPRASPDPAS") && (Posicao >= 7) {	
		set isReadOnly = $$$YES

	;Position Here -> 5 - Aguardando Seleção de Participantes
	} elseif ((YFORM = "VARSESCOMPRASDispensa") || (YFORM = "VARSESCOMPRASLinha") || (YFORM = "VARSESCOMPRASLancamento")) && (Posicao >= 5) {	
		set isReadOnly = $$$YES
	}		
	
	quit isReadOnly
	
	
Voltar(pNoProcessoCompra)
	;-------------------------------------------------------------------------------
    ; Botão voltar das telas secundárias de compra para a tela principal.
    ; 
    ; History:
    ; 30-Mar-2011	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	new Modalidade	
	set Modalidade = $$GetModalidade^VARSESCOMPRAS(pNoProcessoCompra)
	
	if (Modalidade = 10) {  ;10-PDPAS	
		do GoToForm^COMUtilForm("VARSESCOMPRASPDPAS",pNoProcessoCompra)
	} else {
		do GoToForm^COMUtilForm("VARSESCOMPRASDispensa",pNoProcessoCompra)
	}

	quit
	
GetTotalCompradoAno(pidProduto,pidUnidade,pAno)
	;-------------------------------------------------------------------------------
    ; Retorna o total comprado no ano em R$ para um determinado produto.
    ;	
    ;	pidProduto	  Produto
    ;	pidUnidade	  Unidade de saúde do local de compra
    ;	pAno 	      Ano corrente (formato YYYY)
    ;
    ; History:
    ; 26-May-2011	Gustavo Fiuza		Updated - Alterado para pegar a unidade de saúde
    ;								    ao invés do local de compra
    ; 04-Apr-2011	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	new fltTotalCompradoAno	
	set fltTotalCompradoAno = 0	
					
		&sql(SELECT SUM(Proposta.PrecoTotal)
			 INTO  :fltTotalCompradoAno
			 FROM  VARSESCOMPRASPropostaLinha Proposta	 
			 INNER JOIN VARSESCOMPRAS Compra on Compra.NoProcessoCompra = Proposta.NoProcessodeCompra 
   			 WHERE $UPPER(Proposta.Resultado) = 1
     		 AND Proposta.Produto = :pidProduto
     		 AND $$getUnidadeSaudeLocal^VARSESWWW0121(Compra.LocaldeCompra) = :pidUnidade
     		 AND $$SQLExtractYearFromDate^VARSQL(Compra.CriadoEm) = :pAno
		)

	quit fltTotalCompradoAno
	
GetLocaldeCompra(pNoProcessoCompra)
	;-------------------------------------------------------------------------------
    ; Retorna o local de compra de um processo de compra.
    ;
    ; History:
    ; 04-Apr-2011	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	new idLocaldeCompra
	
	&sql(SELECT LocaldeCompra
		 INTO  :idLocaldeCompra
		 FROM  VARSESCOMPRAS	 
 		 WHERE NoProcessoCompra = :pNoProcessoCompra
	)

	quit idLocaldeCompra
	
	
GetLocaldeEntrega(pNoProcessoCompra)
	;-------------------------------------------------------------------------------
    ; Retorna o local de entrega de um processo de compra.
    ;
    ; History:
    ; 02-May-2011	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	new idLocaldeEntrega
	
	&sql(SELECT LocaldeEntrega
		 INTO  :idLocaldeEntrega
		 FROM  VARSESCOMPRAS	 
 		 WHERE NoProcessoCompra = :pNoProcessoCompra
	)

	quit idLocaldeEntrega	
	
GetLimiteMinimoModalidade(pidModalidade,pidEnquadramentoLegal)
	;-------------------------------------------------------------------------------
    ; Retorna o limite mínimo da modalidade e enquadramento legal
    ;
    ; History:
    ; 06-Apr-2011	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	quit:(pidModalidade = "") ""
	quit:(pidEnquadramentoLegal = "") ""
	
	quit $piece($get(^VARSESCOMPRASEnquadramento(YM,pidModalidade,pidEnquadramentoLegal,1)),Y,2)

GetLimiteMaximoModalidade(pidModalidade,pidEnquadramentoLegal)
	;-------------------------------------------------------------------------------
    ; Retorna o limite máximo da modalidade e enquadramento legal
    ;
    ; History:
    ; 06-Apr-2011	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	quit:(pidModalidade = "") ""
	quit:(pidEnquadramentoLegal = "") ""
	
	quit $piece($get(^VARSESCOMPRASEnquadramento(YM,pidModalidade,pidEnquadramentoLegal,1)),Y,4)
	
OnBlurLocaldeEntrega(pidLocal)
	;-------------------------------------------------------------------------------
    ; Preenche o tipo de estoque principal 
    ;
    ; History:
    ; 18-Apr-2011	Gustavo Fiuza		Created
    ;-------------------------------------------------------------------------------
	if (pidLocal = "") {
		set %TXT(1) = ""	
		set %TXT(1) = %TXT(1)_"#YVARSESCOMPRASPDPASD34~REMOVE"
		quit
	}
	
	new idTipoEstoque	
	set idTipoEstoque = $$getEstoquePrincipal^VARSESWWW0121(pidLocal)
	
	set %TXT(1) = ""	
	set %TXT(1) = %TXT(1)_"#YVARSESCOMPRASPDPASD34~REMOVE"
	set %TXT(1) = %TXT(1)_"#YVARSESCOMPRASPDPASD34"_"~"_idTipoEstoque
	
	quit
	
]]></Routine>
</Export>