<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INTFRUtilities" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INTFRUtilities
	
#include COMSYS
#include INConst
	
GetStockLocation(pidItem,pidLocn,pidStorage)
	;-------------------------------------------------------------------------------
	; Storage to use based on Item, Location
	;
	; Called By: none found (29-Jun-2011)
	; 
	; ByRefs: None
	;
	; Returns: pidStorage
	;
	; History:
	; 23-Apr-2006	PO		SR14427: Created
	;-------------------------------------------------------------------------------
	if $$IsConsumable^INARTLOCPAR(pidItem,pidLocn) {
		set pidStorage = $$$INVORGDeleteStockLocation($get(^INVORG(0,0,1)))
	}
	quit pidStorage
	
	
GetInTransit(pidItem,&parrTrn)
	;-------------------------------------------------------------------------------
	; Find the qty still in transit for an item
	;
	; Called By: ShowTransitTable^INBESTSALES
	; 
	; Params:	pidItem				: The item number
	;			parrTrn (by ref)	: An array of qty in transit by transfer no.
	;
	; Returns:
	;
	; History:
	; 29-Jun-2011	GRF		Remove order macros
	; 29-Jan-2007	SteveS	SR15374: Created
	;-------------------------------------------------------------------------------
	new idxItem,idxTransit,idTFR,fltPickQty,fltRec,idTFRPickLine
	new objINTFRPickLine,idTFRLine,objINTFRLine,arrSrcLine,fltTransit
	
	set idxItem	= $$$Index(pidItem)
	
	for idxTransit=$$$EnumINTFRSTATUSSent,$$$EnumINTFRSTATUSReceived {
		set idTFR = ""
		for {
			set idTFR = $order(^INTFRs(0,5,idxTransit,idTFR))
			quit:idTFR=""
			
			set fltPickQty	= 0
			set fltRec 		= 0
			
			set idTFRPickLine = ""
			for {
				set idTFRPickLine = $order(^INTFRPickLines(0,5,idxItem,idTFR,idTFRPickLine))
				quit:idTFRPickLine=""
				
				set objINTFRPickLine = $get(^INTFRPickLine(0,idTFR,idTFRPickLine,1))
				set fltPickQty		 = fltPickQty + $$$INTFRPickLinePickedQuantity(objINTFRPickLine)
				set idTFRLine		 = $$$INTFRPickLineSourceline(objINTFRPickLine)
				
				if '$data(arrSrcLine(idTFR,idTFRLine)) {
					set arrSrcLine(idTFR,idTFRLine)=""
					set objINTFRLine	 = $get(^INTFRLine(0,idTFR,idTFRLine,1))
					set fltRec			 = fltRec + $$$INTFRLineReceivedQuantity(objINTFRLine)
				}
			}
			set fltTransit = fltPickQty - fltRec
			if (fltTransit>0) set parrTrn(idTFR)= fltTransit
		}
	}
	quit
	
	
AnalyseTransfer(pidTfr,&parrTfr)
	;-------------------------------------------------------------------------------
	; Review current state of a transfer prior to performing reversal.
	; 
	; Returns (byRef):
	;   parrTfr(TfrLine)                     = Order     Qty
	;   parrTfr(TfrLine,Bundle,PickLine,"P") = Pick/Sent Qty
	;   parrTfr(TfrLine,Bundle,PickLine,"R") = Receipt   Qty - Already assigned to pick line
	;   parrTfr(TfrLine,Bundle,PickLine,"X") = Reversal  Qty - If processed
	; 
	; History:
	; 29-Jun-2011	GRF		SR17770: Created
	;-------------------------------------------------------------------------------
	new enumStatus,fltRecvdQty,idBundle,idPickLine,idReceipt,idRecLine,idRev,idTfrLine
	new idxLink,intLength,objPickLine,objRecLine,objReversal
	new objRevLine,objTfrLine,objTransfer,strBase,strLink
	
	kill parrTfr
	
	set objTransfer = $get(^INTFR(0,pidTfr,1))
	set enumStatus  = $$$INTFRStatus(objTransfer)
	
	set idTfrLine = ""
	for {
		set idTfrLine = $order(^INTFRLine(0,pidTfr,idTfrLine))
		quit:idTfrLine=""
		
		set objTfrLine = $get(^INTFRLine(0,pidTfr,idTfrLine,1))
		set parrTfr(idTfrLine) = $$$INTFRLineBaseQuantity(objTfrLine)
	}
	
	if (enumStatus=2) || (enumStatus=3) {
		set idPickLine = ""
		for {
			set idPickLine = $order(^INTFRPickLine(0,pidTfr,idPickLine))
			quit:idPickLine=""
			
			set objPickLine = $get(^INTFRPickLine(0,pidTfr,idPickLine,1))
			set idBundle    = $$$INTFRPickLineBundle(objPickLine)
			set idTfrLine   = $$$INTFRPickLineSourceline(objPickLine)
			continue:((idBundle="") || (idTfrLine=""))
		
			set parrTfr(idTfrLine,idBundle,idPickLine,"P") = $$$INTFRPickLinePickedQuantity(objPickLine)
		}
		
		if (enumStatus=3) {
			set (strBase,idxLink) = $$$Index(pidTfr)_" "
			set intLength = $length(strBase)
			for {
				set idxLink = $order(^INRECLines(0,3,idxLink))
				quit:$extract(idxLink,1,intLength)'=strBase
				quit:idxLink=""
				
				set idReceipt = ""
				for {
					set idReceipt = $order(^INRECLines(0,3,idxLink,idReceipt))
					quit:idReceipt=""
					
					set idRecLine = ""
					for {
						set idRecLine = $order(^INRECLines(0,3,idxLink,idReceipt,idRecLine))
						quit:idRecLine=""
						
						set objRecLine = $get(^INRECLine(0,idReceipt,idRecLine,1))
						set strLink    = $$$INRECLineCacheLink(objRecLine)
						continue:$piece(strLink,$$$COMMA)'=pidTfr       ; cover same index for similar data
						
						set idTfrLine   = +$piece(strLink,$$$COMMA,2)
						set idBundle    = $$$INRECLineBundle(objRecLine)
						set fltRecvdQty = $$$INRECLineQuantity(objRecLine)
				;		set parrTfr(idTfrLine,idBundle,"R") = $get(parrTfr(idTfrLine,idBundle,"R")) + fltRecvdQty
						
						; Allocate Received Qty to Pick lines
						if fltRecvdQty>0 do Allocate(idTfrLine,idBundle,fltRecvdQty,.parrTfr)
					}
				}
			}
		}
		
		set idRev = ""
		for {
			set idRev = $order(^INTFRRev(0,pidTfr,idRev))
			quit:idRev=""
			
			set objReversal = $get(^INTFRRev(0,pidTfr,idRev,1))
			if $$$INTFRRevStatus(objReversal)=$$$EnumINSTATUSProcessed {
				set idPickLine = ""
				for {
					set idPickLine = $order(^INTFRRevLine(0,pidTfr,idRev,idPickLine))
					quit:idPickLine=""
						
					set objRevLine = $get(^INTFRRevLine(0,pidTfr,idRev,idPickLine,1))
					set idBundle    = $$$INTFRRevLineBundle(objRevLine)
					
					set objPickLine = $get(^INTFRPickLine(0,pidTfr,idPickLine,1))
					set idTfrLine   = $$$INTFRPickLineSourceline(objPickLine)
					continue:((idBundle="") || (idTfrLine=""))
					
					set parrTfr(idTfrLine,idBundle,idPickLine,"X") = $get(parrTfr(idTfrLine,idBundle,idPickLine,"X")) +
					                                                 $$$INTFRRevLineReversalQuantity(objRevLine)
				}
			}
		}
	}
	quit
	
	
Allocate(pidTfrLine,pidBundle,pfltRecvdQty,&parrTfr)
	;-------------------------------------------------------------------------------
	; Allocate Received Qty to Pick lines
	; 
	; History:
	; 29-Jun-2011	GRF		SR17770: Created
	;-------------------------------------------------------------------------------
	new fltAvailQty,fltQtyPicked,fltQtyRecvd,fltQtyReturned,idPickLine
	
	set idPickLine = ""
	for {
		set idPickLine = $order(parrTfr(pidTfrLine,pidBundle,idPickLine))
		quit:idPickLine=""
		
		set fltQtyPicked   = $get(parrTfr(pidTfrLine,pidBundle,idPickLine,"P"))
		set fltQtyRecvd    = $get(parrTfr(pidTfrLine,pidBundle,idPickLine,"R")) ; Prior receipts
		set fltQtyReturned = $get(parrTfr(pidTfrLine,pidBundle,idPickLine,"X"))
		
		set fltAvailQty = fltQtyPicked - fltQtyRecvd - fltQtyReturned
		
		if pfltRecvdQty <= fltAvailQty {
			set parrTfr(pidTfrLine,pidBundle,idPickLine,"R") = fltQtyRecvd + pfltRecvdQty
			set pfltRecvdQty = 0
			
		} else {
			set parrTfr(pidTfrLine,pidBundle,idPickLine,"R") = fltQtyRecvd + fltAvailQty
			set pfltRecvdQty = pfltRecvdQty - fltAvailQty
			
		}
		quit:pfltRecvdQty=0
	}
	quit
]]></Routine>
</Export>