<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Routine name="MANN" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[MANN
	
	
test
	#dim o As %Library.DynamicObject
	new o, iter, prop, val
	Set o = {}
	Set o.x = 100
	Set o.y = 101
	Set o.z = 102
	zw o
	Set iter = o.%GetIterator()
	While iter.%GetNext(.prop, .val) { 
		w prop,"=",val,!
		if prop="y" w "removido "_prop_": "_o.%Remove(prop),!
	}
	w "---",!
	Set iter = o.%GetIterator()
	While iter.%GetNext(.prop, .val) { 
		w prop,"=",val,!
	}
	q
	
	/*****
	**
	** Gera global a partir de um arquivo CSV
	**
	**
	*****/
csv(filename = "C:\Users\lprj1\Documents\FISICA.TXT", separator = "|", ignoreFirstLine = 0, global = "CSVTEMP")
	
	new regexp, file, sc, linha, pos, count, countLine, chave, p, val, x

	x "kill ^"_global
	
	// se o arquivo não existir finaliza programa
	if '##class(%File).Exists(filename)
	{
		w "O arquivo não existe..."
		quit
	}
	
	set regexp = "\" _ separator
	
	set file = ##class(%File).%New(filename)
  set sc = file.Open("R")
	
	// quantindade de pieces
	set count = 0
	// contador de linhas
	set countLine = 0
	
	while 'file.AtEnd
	{
		set linha = file.ReadLine()
		set countLine = $i(countLine)
		continue:(countLine=1 && ignoreFirstLine)
		quit:(linha="")
		
		if 'count
		{
			set pos = 1
			for {
				set pos = $locate(linha, regexp, pos)
				quit:(pos=0)
				set pos = pos + 1
				set count = $i(count)
			}
			// se não encontrou nenhum <VAR regexp> finaliza
			quit:'count
			// define a quantidade correta de pieces
			set count = $i(count)
		}
		
		for p=1:1:count {
			set val = $p(linha, separator, p)
			set pos = $locate(val, "\s+$")
			if pos'=0 set val = $extract(val,0,pos-1)
			if p=1 { set chave = val }
			else {
				x "set x = $g(^"_global_"(chave))"
				set $p(x,"~",p-1) = val
				x "set ^"_global_"(chave) = x"
			}
		}
	}
	do file.Close()
	
	w "Processadas ", countLine, " linha(s)",!
	w "Sucesso...."
	
	quit


	/*****
	**
	**	Correção ^MEDProvider médicos com 
	**	CRM incorreto ajustando para 2231
	**
	**	Note: Rotina funciona apenas com global ^CSVTEMP
	**				previamente preenchida com os dados para 
	**				correção
	*****/
x
	new ssn, id, csv, provider
	w "# # # # # # # # # # # # ",!
	w "# aguarde executando...",!
	w "# # # # # # # # # # # # ",!
	
	set ssn = ""
	for
	{
		set ssn = $order(^CSVTEMP(ssn))
		quit:'ssn
		set id = ""
		for
		{
			set id = $order(^MEDProviders(0, 100, ssn, id))
			quit:'id
			
			set csv = $get(^CSVTEMP(ssn))
			set provider = $get(^MEDProvider(0, id, 1))
			
			// se os estados forem diferentes pula
			continue:$p(csv,"~",6)'=$p(provider,"~",23)
			
			set $p(provider, "~", 3)  = "2231"
			set $p(provider, "~", 5)  = "2231.40"
			set $p(provider, "~", 22) = "2231"
			
			set ^MEDProvider(0, id, 1) = provider
		}
	}
	w "------- FIM ------"
	quit
	
idade(birthday)
 New dtNasc, dtNow, diaNasc, mesNasc, anoNasc, diaNow, mesNow, anoNow, idade
	
	Set dtNasc = $ZDate(birthday,3)
	Set dtNow  = $ZDate($h,3)
	
	Set diaNasc = +$p(dtNasc,"/",3)		// dia Nascimento
	Set mesNasc = +$p(dtNasc,"/",2)		// mes Nascimento
	Set anoNasc = +$p(dtNasc,"/",1)		// ano Nascimento
	
	Set diaNow = +$p(dtNow,"/",3)			// dia Atual
	Set mesNow = +$p(dtNow,"/",2)			// mes Atual
	Set anoNow = +$p(dtNow,"/",1)			// ano Atual
	
	Set idade = anoNow - anoNasc
	
	if (mesNow < mesNasc) || ((mesNow = mesNasc) && (diaNow < diaNasc)) {
		Set idade = idade - 1
	}
	
	w $Select(idade < 0:0,1:idade) 
	q]]></Routine>
</Export>