<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMUtilCmp" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMUtilCmp
#include %occInclude
	
Compare(pNSA,pNSB)
	;-------------------------------------------------------------------------------
	; Description of Function :
	; Compare the MAC and OBJ on 2 differnt namespaces, 
	; Writes the output to screen.
	; 	MACs that are different it writes to file 	 c:\diff
	;
	; Inputs : 
	;	pNSA - name of Namespace A 
	;	pNSB - name of Namespace B
	; ByRef :
	;	nothing 
	;
	; Returns :
	;	nothing 
	;
	; History :
	; 05-Aug-2008	Luke	SR15819: created
	;-------------------------------------------------------------------------------
	new strNameSpaceA,strNameSpaceB,namespaceCurrent,sc
	
	set strNameSpaceA = pNSA
	set strNameSpaceB = pNSB
	set namespaceCurrent=$zutil(5)
	kill ^zzDevCompare
	set sc = $$$OK
	set sc = $$CompareMAC(strNameSpaceA,strNameSpaceB,namespaceCurrent)
	//if $$$ISOK(sc) d CompareOBJ(strNameSpaceA,strNameSpaceB,namespaceCurrent)
	
	if $$$ISOK(sc) do WriteMAC(strNameSpaceA,strNameSpaceB)
	//if $$$ISOK(sc) do WriteOBJ(strNameSpaceA,strNameSpaceB)
	kill ^zzDevCompare
	quit
 
CompareOBJ2(pstrNamespaceA,pstrNamespaceB)
	;-------------------------------------------------------------------------------
	; In progress routine to find class differences.
	; Different approach to CompareOBJ to deal with the fact that that routine doesn't
	; actually work.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 20-Feb-2009	shobby		SRAdhoc: Created
	;-------------------------------------------------------------------------------
	new idClass,arrClasses,strCurrentNamespace
	new strLineA,strLineB,idxQuery,blnDifferent,idxQueryB
	new intDifferences,lstResults
	
	set lstResults=""
	set idClass="AEP."
	for {
		set idClass=$order(^[pstrNamespaceA]oddDEF(idClass))
		quit:idClass=""
		;continue:$extract(idClass,1,2)="al"
		;continue:$extract(idClass,1,8)="WSSample"
		;continue:$extract(idClass,1,5)="User."
		;continue:$extract(idClass,1,5)="Test."
		;continue:$extract(idClass,1,5)="PAUL."
		;continue:$extract(idClass,1,7)="Report."
		;continue:$extract(idClass,1,9)="Activate."
		;continue:$extract(idClass,1,4)="TASS"
		;continue:$extract(idClass,1,5)="MyApp"
		continue:$extract(idClass,1,6)="AEPDWS"
		continue:$extract(idClass,1,7)="AEPSoap"
		continue:($extract(idClass,1,3)'="TS.")&&($extract(idClass,1,3)'="COM")&&($extract(idClass,1,3)'="AEP")
		quit:$extract(idClass,1,4)="csp."
		set arrClasses(idClass)=""
	}
 
	set intDifferences = 0
	set idClass = ""
	for {
		set idClass = $order(arrClasses(idClass))
		quit:idClass=""
		
		set blnDifferent=$$$NO
		set idxQuery="^[pstrNamespaceA]oddDEF(idClass)"
		for {
			quit:blnDifferent
			set idxQuery=$query(@idxQuery)
			quit:idxQuery=""
			quit:$qsubscript(idxQuery,1)'=idClass
			
			set strLineA=@idxQuery
			set idxQueryB=idxQuery
			set $piece(idxQueryB,"""",2)=pstrNamespaceB
			xecute "set strLineB=$get("_idxQueryB_")"
			if (strLineA'=strLineB)&&($piece(idxQuery,",",2)'="63)")&&($piece(idxQuery,",",2)'="64)")&&($piece(idxQuery,",",2)'="60)") {
				write !,idClass
				set blnDifferent=$$$YES
				set intDifferences=intDifferences+1
				set lstResults=lstResults_$listbuild(idClass)
			}
		}
	}
	
	write !,!,"Differences="_intDifferences
	quit lstResults
 
CompareOBJ(pNamespaceA, pNamespaceB,pOrginalNS)
	;-------------------------------------------------------------------------------
	; Description of Function :
	; Compares the Objects on 2 differnt namespaces 
	; NOTE : ignores
	; 	   OBJs in the User package 
	; Inputs : 
	;	pNamespaceA - name of Namespace A 
	;	pNamespaceB - name of Namespace B
	;	pOrginalNS  - name of Namespace that started the comparison 
	; ByRef :
	;	nothing 
	;
	; Returns :
	;	nothing 
	;
	; History :
	; 20-Feb-2009	shobby	SRAdhoc: Disabled.  This will never work.  Opening the ClassDefinition while
	; 						changing namespaces will not guarantee that you are looking at the namespace
	; 						that you expect to be looking at if there is already a class opened with the same
	; 						id.
	; 05-Aug-2008	Luke	SR15819: created
	;-------------------------------------------------------------------------------
 
 	write !,"Warning!  Disabled.  See code comments."
 	quit
	new objClassesA,objClassesB
	new resultA,resultB,blnFound
	new tempObjA,tempOBJB
	new objX,counter,loopi,loopj,blnEqual
	
	set objClassesA = ##class(%Library.ListOfObjects).%New()
	set objClassesB = ##class(%Library.ListOfObjects).%New()
	
	
	Write !
 	Write !, "######################################"
 	Write !, "#####       Object Search         ####"
 	Write !, "######################################"
 	Write !
	
	
	znspace pNamespaceA
	Set resultA=##class(%ResultSet).%New("%ClassDefinition.ClassInfo")
	if $$$ISOK(resultA.Execute()) {
		For {
			quit:'resultA.Next()
			if ##class(%Dictionary.ClassDefinition).%ExistsId(resultA.GetDataByName("Name")) {
				set objX = ""
				set objX = ##class(%ClassDefinition).%OpenId(resultA.GetDataByName("Name"))
				
				
				if objX '= "" {
					if 'objX.System {
						if ($find(objX.Name, "User.") = 0) do objClassesA.Insert(objX)
					}
				}
			}
		}
	}	
	Do resultA.%Close()
	
	znspace pNamespaceB
	set counter = 1
	Set resultB=##class(%ResultSet).%New("%ClassDefinition.ClassInfo")
	if $$$ISOK(resultB.Execute()) {
		For {
			quit:'resultB.Next()
			if ##class(%Dictionary.ClassDefinition).%ExistsId(resultB.GetDataByName("Name")) {
				set objX = ""
				set objX = ##class(%ClassDefinition).%OpenId(resultB.GetDataByName("Name"))
				  
				if objX '= "" {
					if 'objX.System {
						if ($find(objX.Name, "User.") = 0) do objClassesB.Insert(objX)
					}
				}
			}
		}
	}	
	
	kill objX
	
	Do resultB.%Close()
	
	kill resultB
	kill resultA
	
	znspace pOrginalNS
 
 	Write !
 	Write !, "######################################"
 	Write !, "#####       Object Compare        ####"
 	Write !, "######################################"
 	Write !
	Write !, " Running Comparison this may take a while"
	Write !, " Compare "_pNamespaceA_"  To  " _ pNamespaceB
 
	
  	for loopi =1:1:objClassesA.Count() {
	  	znspace pNamespaceA
	 	set tempObjA = objClassesA.GetAt(loopi)
	
	 	set blnFound = $$$NO 
	 	for loopj =1:1:objClassesB.Count() {
			znspace pNamespaceB
		 	set tempOBJB = objClassesB.GetAt(loopj) 
		 	//W !, tempOBJB
		 	If tempObjA.Name = tempOBJB.Name {
			 	set blnEqual = $$$YES 
			 	if tempObjA.Methods.Count() '= tempOBJB.Methods.Count(){
				 	set blnEqual = $$$NO 
			 	} else {
				 	for methLoop =1:1:tempObjA.Methods.Count() {
					 	set tempmethodA = tempObjA.Methods.GetAt(methLoop) 
					 	if tempmethodA = "" continue 
					 	set methodIndex = tempOBJB.Methods.FindObjectId(tempmethodA.%Id())
					 	if methodIndex '= ""  { 
					 		set tempmethodB = tempOBJB.Methods.GetAt(methodIndex) 
					 		if tempmethodB.FormalSpec '= tempmethodA.FormalSpec {
						 		set blnEqual = $$$NO 
					 			quit
					 		}
					 		
					 		if tempmethodB.Implementation '= tempmethodA.Implementation {
						 		set blnEqual = $$$NO 
					 			quit
					 		}
					 		
							if tempmethodB.Code '= tempmethodA.Code {
						 		set blnEqual = $$$NO 
					 			quit
					 		}		 		
					 		
					 	} else {
					 		set blnEqual = $$$NO 
					 		quit
					 	}
					 	
				 	}
				 	
			 	}
			 	if tempObjA.Properties.Count() '= tempOBJB.Properties.Count(){
				 	set blnEqual = $$$NO 
			 	}
			 	if tempObjA.Queries.Count() '= tempOBJB.Queries.Count(){
				 	set blnEqual = $$$NO 
			 	}
			 	znspace pNamespaceA
			 	if 'blnEqual { 
			 	 	write !, tempObjA
			 		write !, tempObjA.Name
			 		set ^zzDevCompare("OBJ","Different",tempObjA.Name)=tempObjA.Name
			 	} else {
				 	set ^zzDevCompare("OBJ","Same",tempObjA.Name)=tempObjA.Name
			 	}
			 	set blnFound = $$$YES
			 	quit 
		 	}
	 	}
	 	
	 	if 'blnFound {
		 	znspace pNamespaceA
		 	set ^zzDevCompare("OBJ","NotFound",pNamespaceA,tempObjA.Name)=tempObjA.Name
	 	}
 	}
 	Write !
 	Write !, " Compare "_pNamespaceB _"  To  " _ pNamespaceA
  	for loopi =1:1:objClassesB.Count() {
	  	znspace pNamespaceB
	 	set tempOBJB = objClassesB.GetAt(loopi)
	 	set blnFound = $$$NO 
	 	for loopj =1:1:objClassesA.Count() {
		 	znspace pNamespaceA
		 	set tempObjA = objClassesA.GetAt(loopj) 
		 	If tempObjA.Name = tempOBJB.Name {		 	
			 	set blnFound = $$$YES
			 	quit 
		 	}
	 	}
	 	if 'blnFound {
		 	set ^zzDevCompare("OBJ","NotFound",pNamespaceB,tempOBJB.Name)=tempOBJB.Name
	 	}
 	}
	set objClassesA = ""
	set objClassesB = ""
	quit 
 
 
CompareMAC(pNamespaceA, pNamespaceB,pOrginalNS)
 	;-------------------------------------------------------------------------------
	; Description of Function :
	; Compares the MAC files from 2 differnt namespaces 
	; NOTE : ignores
	; 	    Mac Names that have CacheSql, INSERV and PATCH in there name
	; 	    Ignores MAC files produced from OBJ complilation 
	; 	    
	; Inputs : 
	;	pNamespaceA - name of Namespace A 
	;	pNamespaceB - name of Namespace B
	;	pOrginalNS  - name of Namespace that started the comparison 
	; ByRef :
	;	nothing 
	;
	; Returns :
	;	nothing 
	;
	; History :
	; 05-Aug-2008	Luke	SR15819: created
	;-------------------------------------------------------------------------------
 
 	new routineA,fileA,routineB,fileB,intPos,sc,err,i
	new objRoutinesA,objRoutinesB,objDifRoutinesA,objDifRoutinesB
	new rsA,rsB,strName,strRemove
	new tempRoutineA,tempRoutineB
	new blnFound,loopi,loopj,loopk,drive,folder,prefix,FileAname,FileBname
 
 	
 	set objDifRoutinesA = ##class(%Library.ArrayOfObjects).%New()
	set objDifRoutinesB = ##class(%Library.ArrayOfObjects).%New()
	
	set objRoutinesA = ##class(%Library.ArrayOfObjects).%New()
	set objRoutinesB = ##class(%Library.ArrayOfObjects).%New()
	Write !
 	Write !, "######################################"
 	Write !, "#####        MAC   Search         ####"
 	Write !, "######################################"
 	Write !
    znspace pNamespaceA
   	set idtempRoutineA = "" 
	for {
		set idtempRoutineA =  $order(^|pNamespaceA|rMAC(idtempRoutineA))
		quit:idtempRoutineA=""
		
		set intPos = 0
		set strName = idtempRoutineA
		
		if $find(strName, "CacheSql") '= 0 continue
		if $find(strName, "INSERV") '= 0 continue
		if $find(strName, "PATCH") '= 0 continue
		/*set intPos =  $find(strName,".MAC")
		set intPos = intPos-5
		set strRemove = $Extract(strName,1,(intPos))*/
		if $find(strName, ".") = 0 {
     ;	  do objRoutinesA.Insert(##class(%Routine).%New(strName))
			do objRoutinesA.SetAt(##class(%Routine).%New(strName),strName)			
		}
	}
 
	znspace pNamespaceB
	set idtempRoutineB = "" 
	for {
		set idtempRoutineB =  $order(^|pNamespaceB|rMAC(idtempRoutineB))
		quit:idtempRoutineB=""
		set intPos = 0
		set strName = idtempRoutineB
		if $find(strName, "CacheSql") '= 0 continue
		if $find(strName, "INSERV") '= 0 continue
		if $find(strName, "PATCH") '= 0 continue
		/*set intPos =  $find(strName,".MAC")
		set intPos = intPos-5
		set strRemove = $Extract(strName,1,(intPos))*/
		if $find(strName, ".") = 0 {
     ;	  do objRoutinesA.Insert(##class(%Routine).%New(strName))
			do objRoutinesB.SetAt(##class(%Routine).%New(strName),strName)			
		}
	}
	
	znspace pOrginalNS
	Write !
 	Write !, "######################################"
 	Write !, "#####       MAC Compare           ####"
 	Write !, "######################################"
 	Write !
	Write !, " Running Comparison this may take a while"
	Write !, " Compare "_pNamespaceA_"  To  " _ pNamespaceB
 	
 
 	//for loopi =1:1:objRoutinesA.Count() {
	set idtempRoutineA = "" 
	for {
		set idtempRoutineA = objRoutinesA.Next(idtempRoutineA) 
		quit:idtempRoutineA=""
		znspace pNamespaceA
		//W !, idtempRoutineA
	 	set tempRoutineA = objRoutinesA.GetAt(idtempRoutineA)
	 	set blnFound = $$$NO 
	 	//W !, tempRoutineA.Name
	 	znspace pNamespaceB
	 	set tempRoutineB  = objRoutinesB.GetAt(idtempRoutineA)
	 	if tempRoutineB = "" continue
		set blnDiff = $$$NO 
	 	set blnFound = $$$YES
	 	
	 	set blnDiff = $$LineCmp(pNamespaceA,pNamespaceB,tempRoutineA.Name)
	 	if blnDiff {
		 	WRITE !, tempRoutineA.Name
		 	do objDifRoutinesA.SetAt(tempRoutineA,tempRoutineA.Name)
		 	do objDifRoutinesB.SetAt(tempRoutineB,tempRoutineB.Name)
	 		set ^zzDevCompare("MAC","Different",tempRoutineA.Name)=tempRoutineA.Name
	 	} else {
		 	set ^zzDevCompare("MAC","Same",tempRoutineA.Name)=tempRoutineA.Name
	 	}
		/*
	 	if 'blnFound {
		 	s ^zzDevCompare("MAC","NotFound",pNamespaceA,tempRoutineA.Name)=tempRoutineA.Name
	 	}*/
 	}
 	Write !
 	Write !, " Compare "_pNamespaceB _"  To  " _ pNamespaceA
  //	for loopi =1:1:objRoutinesB.Count() {
	set idtempRoutineB = ""
	for {
		set idtempRoutineB = objRoutinesB.Next(idtempRoutineB) 
		quit:idtempRoutineB=""
		znspace pNamespaceB
		set tempRoutineB = objRoutinesB.GetAt(idtempRoutineB)
	 	set blnFound = $$$NO 
	 	znspace pNamespaceA
	 	set tempRoutineA  = objRoutinesA.GetAt(tempRoutineB.Name)
	 	if tempRoutineA = "" continue
	 
	 	set blnFound = $$$YES
	 	quit
		 
	 	
	 	if 'blnFound {
		 	set ^zzDevCompare("MAC","NotFound",pNamespaceB,tempRoutineB.Name)=tempRoutineB.Name
	 	}
	 	
 	}
 	set objRoutinesA = ""
	set objRoutinesB = ""
 	
 	Write !
 	Write !, "######################################"
 	Write !, "#####       Writing Out           ####"
 	Write !, "######################################"
 	Write !   
 	write !, "writing out macs that are differnt" 
 
 	set sc = $$$OK
 	//For loopk=1:1:objDifRoutinesA.Count() {
	set idobjDifRoutinesA = "" 
	for {
		set idobjDifRoutinesA = objDifRoutinesA.Next(idobjDifRoutinesA) 
		quit:idobjDifRoutinesA=""
		WRITE !, idobjDifRoutinesA
	 	znspace pNamespaceA
	 	set tempRoutineA = objDifRoutinesA.GetAt(idobjDifRoutinesA)
	 	znspace pNamespaceB
	 	set tempRoutineB = objDifRoutinesB.GetAt(idobjDifRoutinesA)
	 	
	 	
	 	set folder = "diff"
	 	set drive = "c:\"
	 	set prefix = "" 
	 	
	 	if $FIND(tempRoutineA.Name,"WWW") = 4 {
		 	set prefix = "WWW"
	 	}elseif $FIND(tempRoutineA.Name,"COM") = 4 {
		 	set prefix = "COM"
	 	}elseif $FIND(tempRoutineA.Name,"IN") = 3 {
		 	set prefix = "IN"
	 	}elseif $FIND(tempRoutineA.Name,"FIN") = 4 {
		 	set prefix = "FIN"
	 	}else {
		 	set prefix = "Other"
	 	}
	 	
	 	set FileAname = tempRoutineA.Name_pNamespaceA
		set FileBname = tempRoutineB.Name_pNamespaceB
	 	
	 	
	 	set sc = ##class(%File).CreateDirectoryChain(drive_folder_"\"_prefix)
	 	
	 	znspace pNamespaceA
	 	Set fileA=##class(%File).%New(drive_folder_"\"_prefix_"\" _FileAname_".txt")
		if $$$ISOK(sc) set sc = fileA.Open("WSN")
		//if $$$ISOK(sc) set sc =fileA.Write(tempRoutineA.Read(tempRoutineA.Size))
		if $$$ISOK(sc) set sc =fileA.CopyFrom(tempRoutineA)
		if $$$ISOK(sc) do fileA.Close() 
		
		znspace pNamespaceB
		Set fileB=##class(%File).%New(drive_folder_"\"_prefix_"\" _FileBname_".txt")
		if $$$ISOK(sc) set sc =fileB.Open("WSN")
		//if $$$ISOK(sc) set sc =fileB.Write(tempRoutineB.Read(tempRoutineB.Size))
		if $$$ISOK(sc) set sc =fileB.CopyFrom(tempRoutineB)
		if $$$ISOK(sc) do fileB.Close() 
	 	If $$$ISERR(sc) Do DecomposeStatus^%apiOBJ(sc,.err,"-d") For i=1:1:err Write err(i),! quit 
 	}
  	znspace pOrginalNS
 	
 	
 	quit sc
	
LineCmp(pNamespaceA,pNamespaceB,pidName)
	new blnDiff,intLastLine,line,obj1,obj2
	
	set blnDiff=$$$NO
	set intLastLine = ""
	set line=0
 	for  {
	 	set line=$order(^|pNamespaceA|rMAC(pidName,0,line))
	 	quit:+line=0
	 	
	 	set obj1 = ^|pNamespaceA|rMAC(pidName,0,line)
	 	set obj2 = $get(^|pNamespaceB|rMAC(pidName,0,line))
	 	set intLastLine = line
	 	if obj1'=obj2 set blnDiff = $$$YES
	 	quit:blnDiff
 	}
 	if 'blnDiff {
	 	if $order(^|pNamespaceB|rMAC(pidName,0,intLastLine))'="LANG" {
		 	set blnDiff=$$$YES
	 	}
 	}
	quit blnDiff
 	
WriteMAC(pNamespaceA, pNamespaceB)
	;-------------------------------------------------------------------------------
	; Description of Function :
	;	Writes out the out come of the comparison for MACs
	; Inputs : 
	;	pNamespaceA - name of Namespace A 
	;	pNamespaceB - name of Namespace B
	;	 
	; ByRef :
	;	nothing 
	;
	; Returns :
	;	nothing 
	;
	; History :
	; 05-Aug-2008	Luke	SR15819: created
	;-------------------------------------------------------------------------------
 
	New RoutineName,intSQLCount,x
 	
 	Write !," Mac Information"
 
 	set RoutineName = ""
	Write !, " MACS Different "
	for {
		set RoutineName = $order(^zzDevCompare("MAC","Different",RoutineName))
		quit:(RoutineName = "")
 
		Write !, RoutineName                      
	}
	read x 
  	set RoutineName = ""
  	Write !
	Write !, "MACS Routines on the "_pNamespaceA_" namepsace NotFound On the "_pNamespaceB_" Namespace"
	for {
		set RoutineName = $order(^zzDevCompare("MAC","NotFound",pNamespaceA,RoutineName))
		quit:(RoutineName = "")
		set intSQLCount = $find(RoutineName, "CacheSql")
		if intSQLCount = 0 {
			Write !, RoutineName                      
		}
	}
	read x
   	Write !
	Write !, "MACS Routines on the "_pNamespaceB_" namepsace NotFound On the "_pNamespaceA_" Namespace"
	for {
		set RoutineName = $order(^zzDevCompare("MAC","NotFound",pNamespaceB,RoutineName))
		quit:(RoutineName = "")
		set intSQLCount = $find(RoutineName, "CacheSql")
		if intSQLCount = 0 {
			Write !, RoutineName                      
		}                     
	}
 	
 
 	quit
 
WriteOBJ(pNamespaceA, pNamespaceB)
	;-------------------------------------------------------------------------------
	; Description of Function :
	;	Writes out the out come of the comparison for OBJs
	; Inputs : 
	;	pNamespaceA - name of Namespace A 
	;	pNamespaceB - name of Namespace B
	;	 
	; ByRef :
	;	nothing 
	;
	; Returns :
	;	nothing 
	;
	; History :
	; 05-Aug-2008	Luke	SR15819: created
	;-------------------------------------------------------------------------------
 
	New objName,intSQLCount,x, intCounter
 
 
 	set objName = ""
	Write !, " OBJ Different between Namespaces "
	for {
		set objName = $order(^zzDevCompare("OBJ","Different",objName))
		quit:(objName = "")
		Write !, objName                      
	}
	read x 
	set intCounter = 1
  	set objName = ""
  	Write !
	Write !, "OBJ on the "_pNamespaceA_" namepsace NotFound On the "_pNamespaceB_" Namespace"
	for {
		set objName = $order(^zzDevCompare("OBJ","NotFound",pNamespaceA,objName))
		quit:(objName = "")
		set intSQLCount = $find(objName, "USER")
		if intSQLCount = 0 {
			Write !, objName
			set intCounter = intCounter + 1
			if intCounter = 200 {
				write !, "paused, press any key to continue"  
				set intCounter = 1
				read x
			}
			               
		}
	}
	read x
	set intCounter = 1
	set objName = ""
   	Write !
	Write !, "OBJ on the "_pNamespaceB_" namepsace NotFound On the "_pNamespaceA_" Namespace"
	for {
		set objName = $order(^zzDevCompare("OBJ","NotFound",pNamespaceB,objName))
		quit:(objName = "")
		set intSQLCount = $find(objName, "USER")
		if intSQLCount = 0 {
			Write !, objName  
			set intCounter = intCounter + 1
			if intCounter = 200 {
				write !, "paused, press any key to continue" 
				set intCounter = 1
				read x
			}                    
		}                     
	}
 
 quit 
]]></Routine>
</Export>