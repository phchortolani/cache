<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMUpgradeHandler" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMUpgradeHandler
	
	;SR17682 #define PROTOCOL(%1) set ^WWWERROR(0,+$horolog,$piece($horolog,",",2),0,1)=%1_" /  / "_$get(YBED) hang 1
	;SR17787 #define PROTOCOL(%1) do Protocol^COMUpgradeHandler(%1)
#include %occInclude
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	;
	;                                     ALERT
	;                                     
	; 1. This Routine along with COMDistOutObject.MAC will be compiled by the Build Loading Process.
	; Therefore it is essential that these Routines have no dependancies on the Object code.
	; SR16405
	; 
	; 2. $$$PROTOCOL builds ^WWWERROR entries - 1 per second rather than using another
	; subscript - thus each call to $$$PROTOCOL needs a "hang 1" command.
	; 
	; These have been placed BEFORE the macro previously but an error situation will
	; cause the last entry to be over-written.  The hang commands have therefore been
	; moved INSIDE the macro and after the entry has been written.
	; 
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
#include COMSYS
#include WWWConst
#include COMConst
#define NormDir(%str) ##Class(%File).NormalizeDirectory(%str)

Protocol(strText)
	;-------------------------------------------------------------------------------
	; Logs a record to WWWERROR.
	; Replacement for  
	; #define PROTOCOL(%1) set ^WWWERROR(0,+$horolog,$piece($horolog,",",2),0,1)=%1_" /  / "_$get(YBED) hang 1
	; removing the 1 sec hang.
	;
	; History:
	; 15-Nov-2010	shobby	SR17682: Created.
	;-------------------------------------------------------------------------------
	new dteHorolog,dteTime
	
	set dteHorolog=$horolog
	set dteTime=$piece(dteHorolog,",",2)
	for {
		if $data(^WWWERROR(0,+dteHorolog,dteTime)) {
			set dteTime=dteTime+.001
		} else {
			quit
		}
	}
	set ^WWWERROR(0,+dteHorolog,dteTime,0,1)=strText_" /  / "_$get(YBED)
	quit
	
	
	;-------------------------------------------------------------------------------
	; Perform Post Install tasks
	;
	; Params:
	; pidLog: The log number to send the messages to.
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 09-Nov-2011	PPP		SR17929: New CurrentStorageIsBlocked field, requeue all Storages. COMPIT17929
	; 22-Aug-2011	shobby	SR17873: Just delete the JS files. They will be recreated when sometime tries
	;							to use them.	
	; 01-Jun-2011	shobby	SR17720: IsFastBuild don't compile sys routines.
	; 20-Apr-2011	PPP		SR17720: Old COMPIT's that have no LogUpgrade($h) Entries that no longer
	;						need to run
	;						COMPIT16055, COMPIT16268, COMPIT16398
	;						Increasing the time taken for COMPIT Processsing but not achieving anything.
	;
	; 15-Nov-2010	shobby	SR17589: Populate new INLP fields into V2 classes.
	; 02-Nov-2010	shobby	SR17599: Removed COMPIT14952, COMPITBR014490
	; 16-Sep-2010	PPP		SR17550: Clear CacheTemp globals 
	; 10-Jun-2010	PPP		SR17342: Added CreateJS 
	;						- Create the Griden1.js and GridEdit.css files
	;						- Create the COMView_SPRACHE_YM.js and COMView_YM.css files
	; 26-May-2010	PPP		SR17309: Item Status COMPIT
	; 22-Mar-2010 	GRF		SR17081: Reindex INWEINVP 
	; 11-Feb-2010	PPP		SR17138: Relates to adding Order Unit/Order Qty to INAUF (Patched into 1.60)
	; 07-Dec-2009	GRF		SR16871: New Cost Centre-based Average Costs
	; 30-Nov-2009	DWR		SR16357: assign a blank policy to any item missing a policy
	; 26-Nov-2009	DWR		SR16959: remove menu and language translations for forms 
	; 							INREC, INRECB, INWEFREI
	; 23-Jul-2009	PPP		SR16757: improve build
	; 22-Jul-2009 	PPP 	SR16782: Populate alINV.uiPolicyAttrTrans (Language Codes for Policies)
	; 23-Jun-2009 	PPP 	SR16510: Populate INItemPolicy data with previousy existing alINV.dItemPolicy (SR16510A)
	; 15-Jun-2009 	PPP 	SR16510: Populate new property KeyName on the alINV.dItemPolicy
	; 17-Apr-2009	GRF		SR16483: Remove Additional Transaction Types 10,11,12
	; 14-Jan-2009	GRF		SR16253: RecompileRoutine relocated here; copy PROTOCOL
	; 13-Jan-2009	GRF		SR16253: call PurgeBuildErrors; Perform RecompileRoutine
	; 							after objects reloaded
	; 08-Jan-2009	HQN		SR16268: Upgrade Item Policy
	; 06-Jan-2009	GRF		SR16253: Log COMPIT processing
	; 19-Nov-2008	SCR		SR16162: un-comment call to apply custom changes
	; 							(BERECHTIGUNG^WWWMON)
	; 23-Oct-2008	HQN		SR16030: Numerator for PeriodType
	; 21-Oct-2008 	PPP 	SR16055: Period Balance
	; 30-Apr-2008 	Luke 	SR15701: add call to the correction of application parameters
	; 21-Apr-2008	Luke	SR15678: Correct the Values in the Application Parameter
	; 							for item policy
	; 03-Apr-2008	GRF		SR15598: pass parameter to ObjectBuild
	; 30-Jan-2008	GRF		Clean up - comment Adrad specific COMPIT12027
	; 30-Nov-2007	LB		SR15598:  do ObjectBuild
	; 18-Jul-2007	GM		BR014576: Remove all menu option related with form "INAUFRELEASE"
	; 26-Jun-2007	FrankF	BR014503: Create core tabs from custom tabs.
	; 29-Mar-2007	PO		SR15489: Populate prior sending bin on transfer order
	;							pick lines
	; 29-Mar-2007	RPW		SR15488: Fixed compilation sequence to minimize
	;							non-existance of classes. Also perform the Post
	;							Upgrade routines previously done in WWWIN
	; 28-Mar-2007	HeberB	SRBR014367: clean temp globals
	; 14-Mar-2007	RPW		SR14900: Recompile the code correctly.
	; 23-Aug-2006	GRF		SR14544: Relocate FixDates as external routine
	; 11-Aug-2006	PO		SR14331: Added call to AllBankRecsIncludeBankLines^FINGLBankReconUtilities
	; 10-Aug-2006	RPW		SR14900: Remove Source Code
	; 04-May-2006	RPW		SR14354: Created
	;-------------------------------------------------------------------------------
OnAfterUpgrade(pidLog)
	new dteNow,idLogEntry,idView,strStatus
	
	do AddMessage^COMLog(pidLog,"Finalising Routines")
	
	do ExecuteCode^COMUtils("do InstallRoutines^COMSTARTUtils")
	do ExecuteCode^COMUtils("do FixWebService^INSoapFix()")
	do ExecuteCode^COMUtils("do Install^VARInstall")
	
	do CreateCoreTabs^WWW1203D(pidLog)           ; BR014503
	do PurgeBuildErrors()                        ; SR16253
	if ('$$EXIST^%R("UPGUTILS"))||(($$EXIST^%R("UPGUTILS"))&&'$$IsFastBuild^UPGUTILS()) {
		do CompileSysRoutines(pidLog)                ; SR16757  ;SR17720
		do CompileCode(pidLog)                       ; SR15488: vvv
	}
	do ReBuild(pidLog)                           ; Rebuild Classes & Indices ; SR16757

	do AddMessage^COMLog(pidLog,"Recompiling Routines")
	if ('$$EXIST^%R("UPGUTILS"))||(($$EXIST^%R("UPGUTILS"))&&'$$IsFastBuild^UPGUTILS()) do RecompileRoutines($get(^CacheTempWWWINmac($job),$$$YES),$zu(5)) ; SR16253 moved from WWWIN - embedded SQL needs objects
	do AddMessage^COMLog(pidLog,"Completed Recompiling Routines")
	
	kill ^CacheTempIndex
	kill ^CacheTempWWWUMLAU
	kill ^CacheTempReference
	
	do AddMessage^COMLog(pidLog,"Performing Post Install Tasks")
	//do ReBuild(pidLog)                           ; Rebuild Classes & Indices  ; SR16757
	
	if $order(^WWW0044(0,""))'="" {
		do AddMessage^COMLog(pidLog,"Processing Program Entitlements") ; SR16162
		do BERECHTIGUNG^WWWMON                                         ; SR16162
		
	} else {
		do AddMessage^COMLog(pidLog,"Re-inserting Customer Defined Buttons")
		do InsertButtonsJob^WWW124Custom(YM,YUSER,YBED,SPRACHE)	
	}
	
	do ObjectBuild(pidLog)                       ; Run Object-specific OnBuild methods
	
	;---------------------------------------
	;
	;  Add New Stuff Here
	;
	;---------------------------------------
	  
	//Handle the Views
	set dteNow = +$horolog
	if '$data(^CacheTempReportUpgrade(dteNow)) {
		do AddMessage^COMLog(pidLog,"No Views to Create")
	
	} else {
		do AddMessage^COMLog(pidLog,"Creating Views")
		
		set idView = ""
		for {
			set idView = $order(^CacheTempReportUpgrade(dteNow,idView))
			quit:idView=""
			
			do AddMessage^COMLog(pidLog,"Creating View: "_idView)
			
			set strStatus = $$CreateView^REPViewCreate(idView)
			if $$$ISERR(strStatus) {
				set idLogEntry = $order(^COMMsgLog(0,pidLog,""),-1)
				do AddMessage^COMLog(pidLog,"Creating View: "_idView_" failed",idLogEntry)
			}
		}
		kill ^CacheTempReportUpgrade(dteNow)
	}
	
	;---------------------------------------
	;  Calls to COM Post-Install Tasks
	;  NOTE : calls to WWWKILL invoke transaction processing
	;---------------------------------------
	; FIXME : needs separation similar to... (pseudocode only - do not use)
	;		if strOldVersion < "V1.14" do V114
	;		if strOldVersion < "V1.16" do V116
	;		...
	;	where V114 would contain the appropriate "do Execute^COMPITxxxxx" routines
	;---------------------------------------
	do AddMessage^COMLog(pidLog,"Started COMPIT Processing")
	
	do FixDates^COMPIT14544()           ; Fix Dates             ; 04-May-2006
	do AllBankRecsIncludeBankLines^FINGLBankReconUtilities()    ; 11-Aug-2006   // SR14331
	do Execute^COMPIT13968()            ; Remove form INARTB    ; 24-Aug-2006
	do Execute^COMPIT14612()			; Update Suppliers						// SR14612
	do Execute^COMPIT15062(pidLog)		; Update Bank Recon						// SR15062
	do Execute^COMPIT14924()			; Update POS Orders		; 27-Sep-2006	// SR14924
	do Execute^COMPIT15082(pidLog)												// SR15082
	;SR1749 do Execute^COMPIT14952()			; Update INARTHISTL entries				// SR14952
	do Execute^COMPITBR014292()			; Compile WWWIN.MAC						// SRBR014292
	do Execute^COMPIT14914()            ; Set the Do NOT Show Font Buttons Memo Fields on WWW012 to 1. // SR14914
	do Execute^COMPIT15170()			; Fix COMView ids						// SR15170
	do Execute^COMPIT15166()			; Fix COMView filter values				// SR15166
	do Execute^COMPIT14300()			; Transfers the bank accounts to the new bank accounts grid // SR14300
	do Execute^COMPITBR014285(pidLog)	; Convert Item Groups					// BR014285
	do Execute^COMPIT15309()			; Add active flag
	;do:($zutil(5)["ADRAD") Execute^COMPIT12027(pidLog)							// SR12027
	do Execute^COMPIT15184()													// SR15184
	do Execute^COMPIT15453()													// SR15453
	do Execute^COMPIT15489(pidLog)		; Update pick lines of transfers		// SR15489
	do Execute^COMPITBR014465()			; Reindex and Recreate index source files // SRBR014465
	;SR17599 do Execute^COMPITBR014490(pidLog)	; BR014490 - Loop through all the records and set the Consumption Location Field (INARTHISTL)
	do Execute^COMPITBR014477(pidLog)   ; BR014477 - recreate WWW013 index
	do Execute^COMPITBR014576(pidLog)	; BR014576 - Remove all menu option related with form "INAUFRELEASE"
	do Execute^COMPITBR014460(pidLog)	; BR014460 - Delete the method parameters of the method WWWDeleteLTCache of the event WWW009Save.
	do Execute^COMPITBR014794(pidLog)	; BR014794 - Move mask definitions from WWW122D to WWW122D2
	do Execute^COMPIT15678(pidLog)      ; SR15678  - Remove incorrect values in the Application Parameter for Item policy
	do Execute^COMPIT15701(pidLog)		; SR15701: add call to the correction of application parameters
	
	//SR17720 No longer need running : COMPIT16055, COMPIT16268, COMPIT16398
	//do Execute^COMPIT16055(pidLog)		; SR16055: Period Balance Types 	//SR17720	
	do Execute^COMPIT16030(pidLog)		; SR16030: Setup Period Type Numerators 
	//do Execute^COMPIT16268(pidLog)		; SR16268: Upgrade Use By Date Policy to have unique LotNumber //SR17720
	;do Execute^COMPIT16323(pidLog)		; SR16323: Remove duplicate Bundles, correct mismatched hashes
	//do Execute^COMPIT16398(pidLog)		; SR16398: Back Populate INADJ and INADLine //SR17720
	
	; After Build 1.56
	do Execute^COMPIT16483(pidLog)		; SR16483: Remove Additional Transaction Types 10,11,12
	
	; After Build 1.58
	; After Conversion to Cache 20008 (09-Jun-2009)
	do Execute^COMPIT16473(pidLog)      ; SR16473: rebuild transaction types to include new periodBalance Value* properties
	do Execute^COMPIT16510(pidLog)      ; SR16510: Populate new property KeyName on the alINV.dItemPolicy
	do Execute^COMPIT16510A(pidLog)     ; SR16510: Populate INItemPolicy data with previousy existing alINV.dItemPolicy
	do Execute^COMPIT16782(pidLog)      ; SR16782: Populate alINV.uiPolicyAttrTrans (Language Codes for Policies)
	do Execute^COMPIT17138(pidLog)      ; SR17138: Relates to adding Order Unit/Order Qty to INAUF (Patched into 1.60
	
	; After Build 1.60
	do Execute^COMPIT16959(pidLog)		; SR16959: remove menu instances and language translations for forms INREC, INRECB and INWEFREI
	do Execute^COMPIT16357(pidLog)		; SR16357: assign a blank policy to any items missing a policy
	
	; After Build 1.62
	do Execute^COMPIT16871(pidLog)		; SR16871: New Cost Centre-based Average Costs
	do Execute^COMPIT17081(pidLog)		; SR17081: Reindex INWEINVP    22-Mar-2010
	
	; After Build 1.64
	do Execute^COMPIT17309(pidLog)		; SR17309: Item Status
	
	; After Build 1.66
	do Execute^COMPIT17467(pidLog)      ; SR17467: Merge INDRPPARA("TIME") to INPARA("DRPRUNTIME")
	do Execute^COMPIT17589(pidLog)		; SR17589: Populate new INLP fields into V2 classes.

	; After Build 1.68

	; After Build 1.72
	do Execute^COMPIT17929(pidLog)		; SR17929: New CurrentStorageIsBlocked field, requeue all Storages.
	
	; After Build 1.74

	;--------------------------------------- ^^^ ADD NEW ENTRIES TO END OF LIST ABOVE THIS LINE ^^^

	do AddMessage^COMLog(pidLog,"Completed COMPIT Processing")
	
	do ClearTempGlobals(pidLog)			// SR17550: Clear CacheTemp globals
	;SR17873 do CreateJSFiles(pidLog)			// SR17342: Create JS fiels for Grid & COMView
	do DeleteJSFiles()
	do AddMessage^COMLog(pidLog,"Created Grid JS & CSS files")	;SR1787
	
	do PostUpgradeTasks(pidLog)        	// SRxxxxx: Post Upgrade Tasks (Site Based, ^SysSetup("PostUpgradeTasks"))
	
	do PostUpgrade(pidLog)             	// SR15488: This should be the 2nd last.
	do RemoveSourceCode(pidLog)        	// SR14900; Always keep as the last entry.
	if $get(YBED)'="" do MSG^WWW013MSG(YBED,$$^WWWTEXT(33362),$$$WWW120FormHeaderOrImageFile($get(^WWW120(0,"WWWIN",1))))  ; "Process Closed"
	
	quit
	
	
LogErrors(&parrErrors,pstrRef)
	;-------------------------------------------------------------------------------
	; If there were errors in the build, store this information away.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 14-Mar-2008	PPP		SR-----: Added Error Logging Sequence
	; 16-Mar-2007	RPW		SR14900: Created
	;-------------------------------------------------------------------------------
	new intNext
	
	if +$get(parrErrors)'=0 {
		kill ^BuildErrors(+$horolog,pstrRef)
		merge ^BuildErrors(+$horolog,pstrRef)=parrErrors
		
		set intNext=$increment(^BuildErrorSeq(+$horolog))
		kill ^BuildErrorSeq(+$horolog,intNext,pstrRef)
		merge ^BuildErrorSeq(+$horolog,intNext,pstrRef)=parrErrors
	}
	
	quit
	
	
PurgeBuildErrors(pintRetain=7)
	;-------------------------------------------------------------------------------
	; Clear out old Build Error information - default to 7 days
	; 
	; History:
	; 13-Jan-2009	GRF		SR16253: created
	;-------------------------------------------------------------------------------
	new idDate,idEndDate
	
	if pintRetain<0 set pintRetain = 7
	set idEndDate = $horolog-pintRetain
	set idDate = ""
	for {
		set idDate = $order(^BuildErrors(idDate))
		quit:idDate=""
		quit:idDate>idEndDate
		
		kill ^BuildErrors(idDate)
	}
	
	set idDate = ""
	for {
		set idDate = $order(^BuildErrorSeq(idDate))
		quit:idDate=""
		quit:idDate>idEndDate
		
		kill ^BuildErrorSeq(idDate)
	}
	quit
	
	
ReBuild(Log=0)
    ;-------------------------------------------------------------------------------
    ; ReBuild Cache
    ;
    ; Inputs :	Log = Message Logging Number
    ;
    ; History:
    ; 12-Jul-2009	PPP		SR16757: Remove any User Classes not in WWW001
    ; 11-Sep-2008	SCR		SR15870: Added Remove Index function
    ; 09-Sep-2008	SCR		SR15870: Added Custom Indexes for VAR
    ; 29-Mar-2007	RPW		SR15488: Do not attempt to compile the classes
    ; 10-Aug-2006	RW&JW	SR14900: Remove $t
    ; 04-Apr-2005	SCR		Created
    ;-------------------------------------------------------------------------------
	//if $t(CheckAll^COMClassCompile) '= "" do CheckAll^COMClassCompile(1,1,Log)
	
	do StripClassIndex^WWW003CustomIndex(Log)		 	// SR15870  Remove Custom Indexes from class def
	do LoadClassIndex^WWW003CustomIndex(Log)		 	// SR15870  Load Custom Indexes from WWW003CustomIndex
	//do CheckAll^COMClassCompile(1,0,Log) 				// SR15488
	do CheckAll^COMClassCompile(1,1,Log) 				// SRAdhoc  //PPP
	do ClearDeletedANMClasses^COMClassCompile(Log) 		// SR16757
	
	quit
	
FixDates()
	quit $$FixDates^COMPIT14544()


RemoveSourceCode(pidLog)
	;-------------------------------------------------------------------------------
	; Remove all the source code for the system.
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 18-May-2007	RPW		SRadhoc: If the module contains VAR as the first three
	;							characters, do not remove source code at all.
	; 10-Aug-2006	RPW		SR14900: Created
	;-------------------------------------------------------------------------------
	new strModule
	
	set $ztrap="RSCError"
	
	quit:$get(^SysSetup("SourceCode","Keep"))'=""
	
	set strModule = ""
	for {
		set strModule = $order(^WWW101(0,"COMMODULES","EN",strModule))
		quit:strModule=""
		continue:$extract(strModule,1,3)="VAR"
		
		do RoutineClear^COMDistOutRoutine(strModule)
		do MakeDeployed^COMDistOutObject(strModule)
	}
	
	do RoutineClear^COMDistOutRoutine("idx")
	
	quit
	
RSCError ; Internal Tag
	set $ztrap=""
	quit

ClearTempGlobals(pidLog)				
	;-------------------------------------------------------------------------------
	; ClearTempGlobals 
	;		- Create all CacheTemp globals
	;
	; Params:pidLog
	;
	; Returns:None
	;
	; History:
	; 16-Sep-2010	PPP	SR17550:Created
	;-------------------------------------------------------------------------------
	new objGlobal
	new idGlobal
	
	do Global^COMSYSGlobalQuery(.objGlobal,"^CacheTemp",$$$YES)
	
	set idGlobal=""
	for {
		set idGlobal = $order(objGlobal(idGlobal))
		quit:idGlobal=""
		
		continue:($extract(idGlobal,1,17)="^CacheTempSession")
		continue:($extract(idGlobal,1,22)="^CacheTempLicenseLogin")
		continue:($extract(idGlobal,1,11)="^CacheTemp.")
		
		if $$IsValid^WWWEND(idGlobal) {
			write !,idGlobal
			kill @(idGlobal)
		}
	}
 
	do AddMessage^COMLog(pidLog,"Cleared ^CacheTemp Globals")

	quit

CreateJSFiles(pidLog)				
	;-------------------------------------------------------------------------------
	; CreateJSFiles 
	;		- Create the Griden1.js and GridEdit.css files
	;		- Create the COMView_SPRACHE_YM.js and COMView_YM.css files
	;
	; Params:pidLog
	;
	; Returns:None
	;
	; History:
	; 10-Jun-2010	PPP	SR17342:Create JS files
	;-------------------------------------------------------------------------------
	new dteDate
	new strLanguageCheckSum
	
	set SPRACHE = $get(SPRACHE,"EN")
	
	//Grid JSS
	set dteDate=$horolog
	do CreateFile^COMViewSetup("griden1","do CreateJavascriptFile^COMGridEdit31J("""_dteDate_""")",$$$EnumCOMFILETYPEJavaScript,dteDate)	
	do CreateFile^COMViewSetup("GridEdit","do Create^COMGridEdit31CSS()",$$$EnumCOMFILETYPEStyleSheet)
	do AddMessage^COMLog(pidLog,"Created Grid JS & CSS files")
	
	//COMView JSS
	set strLanguageCheckSum = $$$COMViewLanguageTextText($get(^COMViewLanguageText(0,SPRACHE,1)))	
 	do CreateFile^COMViewSetup("COMView"_SPRACHE_"_"_YM,"do Setup^COMViewSetupJS()",$$$EnumCOMFILETYPEJavaScript,dteDate,strLanguageCheckSum)
 	do CreateFile^COMViewSetup("COMView"_YM,"do Setup^COMViewSetupStyle()",$$$EnumCOMFILETYPEStyleSheet)
	do AddMessage^COMLog(pidLog,"Created COMView JS & CSS files")

	quit


DeleteJSFiles()
	;-------------------------------------------------------------------------------
	;
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 22-Aug-2011	shobby		SR17873: Created
	;-------------------------------------------------------------------------------
	new strStatus,strDirectory
	
	set strStatus = $$$OK
	
	set strDirectory = ##Class(%File).NormalizeDirectory($$$WWW012PhysicalWWWDirectory($get(^WWW012(0,0,1))))
	set strStatus    = $$Delete^COMDistOut6(strDirectory_"COMView0.css")
	if $$$ISOK(strStatus) set strStatus = $$Delete^COMDistOut6(strDirectory_"griden1.js")
	if $$$ISOK(strStatus) set strStatus = $$Delete^COMDistOut6(strDirectory_"GridEdit.css")
	set idLanguage = ""
	for {
		set idLanguage = $order(^WWW100(0,"SPRACHE",idLanguage))
		quit:idLanguage=""
		
		if $$$ISOK(strStatus) set strStatus = $$Delete^COMDistOut6(strDirectory_"COMView"_idLanguage_"_0.js")
	}
	quit strStatus
	
	
	;SR17873 CreateJSFiles(pidLog)				
	;SR17873 ;-------------------------------------------------------------------------------
	;SR17873 ; CreateJSFiles 
	;SR17873 ;		- Create the Griden1.js and GridEdit.css files
	;SR17873 ;		- Create the COMView_SPRACHE_YM.js and COMView_YM.css files
	;SR17873 ;
	;SR17873 ; Params:pidLog
	;SR17873 ;
	;SR17873 ; Returns:None
	;SR17873 ;
	;SR17873 ; History:
	;SR17873 ; 22-Aug-2011	shobby	SR17873: No longer required.
	;SR17873 ; 10-Jun-2010	PPP		SR17342:Create JS files
	;SR17873 ;-------------------------------------------------------------------------------
	;SR17873 new dteDate
	;SR17873 new strLanguageCheckSum
	
	;SR17873 set SPRACHE = $get(SPRACHE,"EN")
	
	;SR17873 //Grid JSS
	;SR17873 set dteDate=$horolog
	;SR17873 do CreateFile^COMViewSetup("griden1","do CreateJavascriptFile^COMGridEdit31J("""_dteDate_""")",$$$EnumCOMFILETYPEJavaScript,dteDate)	
	;SR17873 do CreateFile^COMViewSetup("GridEdit","do Create^COMGridEdit31CSS()",$$$EnumCOMFILETYPEStyleSheet)
	;SR17873 do AddMessage^COMLog(pidLog,"Created Grid JS & CSS files")
	
	;SR17873 //COMView JSS
	;SR17873 set strLanguageCheckSum = $$$COMViewLanguageTextText($get(^COMViewLanguageText(0,SPRACHE,1)))	
 	;SR17873 do CreateFile^COMViewSetup("COMView"_SPRACHE_"_"_YM,"do Setup^COMViewSetupJS()",$$$EnumCOMFILETYPEJavaScript,dteDate,strLanguageCheckSum)
 	;SR17873 do CreateFile^COMViewSetup("COMView"_YM,"do Setup^COMViewSetupStyle()",$$$EnumCOMFILETYPEStyleSheet)
	;SR17873 do AddMessage^COMLog(pidLog,"Created COMView JS & CSS files")
	;SR17873 quit

PostUpgradeTasks(pidLog)
	;-------------------------------------------------------------------------------
	; Post Upgrade Processing based on Site Data (^SysSetup("PostUpgradeTasks"))
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 20-Apr-2011	PPP		SR17720: Job the Monthly process instead of doing it
	; 28-Oct-2009	PPP		SR16988: Added the System Cleanups
	; 10-Jul-2009	PPP		SRxxxx: Created
	;-------------------------------------------------------------------------------
	new intCnt,strExecute
	
	if $data(^SysSetup("PostUpgradeTasks")) {
		do AddMessage^COMLog(pidLog,"Post Upgrade Tasks")
		for intCnt=1:1 {
			set strExecute = $get(^SysSetup("PostUpgradeTasks",intCnt))
			quit:strExecute=""
			
			do AddMessage^COMLog(pidLog,"Post Upgrade Task Execute : "_strExecute)
			xecute strExecute
		}
		do AddMessage^COMLog(pidLog,"End Post Upgrade Tasks")
	}

	do AddMessage^COMLog(pidLog,"System Cleanups")   ; SR16988

	do AddMessage^COMLog(pidLog,"Job Monthly Process")
	//SR17720
	//do START1^WWWMON($get(YM),$get(SPRACHE))
	do ^WWWMON

	quit
	
		
PostUpgrade(pidLog)
	;-------------------------------------------------------------------------------
	; Post Upgrade Processing
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 29-Mar-2007	RPW		SR15488: Created
	;-------------------------------------------------------------------------------
	new strNamespace,strRoutine,strToExecute
	
	do AddMessage^COMLog(pidLog,"Start Automated Background Jobs")
	set strNamespace = $get(YUCI,$zutil(5))
	
	if $data(^CacheTempPostUpgrade(strNamespace)) {
		set strRoutine = ""
		for {
			set strRoutine = $order(^CacheTempPostUpgrade(strNamespace,strRoutine))
			quit:strRoutine=""
			
			set strToExecute = "do ^"_strRoutine
	;	SR15311: Added this to look at problems, please turn this off when NOT debugging an upgrade
			if $get(^SysSetup("LogUpgrade"))=$$$YES {
				do AddMessage^COMLog(pidLog,strToExecute)
			}
			xecute strToExecute
		}
	}
	
	do AddMessage^COMLog(pidLog,"Background Jobs Finished")
	kill ^CacheTempPostUpgrade(strNamespace)
	
	quit
	
	
CompileCode(pidLog) ; Do *** NOT *** run on DEV namespace - removes special User.xxxxx.cls
	;-------------------------------------------------------------------------------
	; Completely compile the code, separated out to handle errors.  
	;
	; Inputs:
	;
	; ByRef:
	;
	; Returns:
	;
	; History:
	; 03-Mar-2009	PPP		SR16405:Add more logging (new parameter)
	; 17-Apr-2008	PPP		SRadhoc: Package Compile has issues - Changed to
	; 							Project Compile
	; 03-Apr-2008	GRF		SR15650: If/else rather than repeated test
	; 02-Nov-2207	PPP		SRadhoc: Updated the routine to include compilation of
	;							AL packages (V2)
	; 22-May-2007	RPW		SRadhoc: Created
	;-------------------------------------------------------------------------------
	new arrErrors,blnShowMessages,intLevel,intOrder,strRef,strShow
	
	set $ztrap="CompileCodeError"
	
	set strShow         = $select($data(^CacheTempDisplay):"d",1:"-d")
	set blnShowMessages = $get(^SysSetup("ShowLoads"))'=""
	
	
	; 1) Loading
	;---------------------------------------
	do AddMessage^COMLog(pidLog,"Loading Modules")
	
	set intOrder=""
	for {
		set intOrder=$order(^CacheTempReference(intOrder))
		quit:intOrder=""
		
	;	++++++++++++++++++++++++++++++++++++
		set intLevel=$tlevel
	;	++++++++++++++++++++++++++++++++++++
		set strRef=$get(^CacheTempReference(intOrder))
		if blnShowMessages {
			do AddMessage^COMLog(pidLog,"Loading Module="_strRef)
		}
		
		do ExecuteCode^COMUtils("d ObjectLoadV2^COMDistOutObject("""_strRef_""","""_pidLog_""")")		//SR16405
		
		; Do *** NOT *** run on DEV namespace - removes these special User.xxxxx.cls
		if strRef="WWW" {
			do $SYSTEM.OBJ.Compile("User.www",               "vfuco1o2o3"_strShow)
		} elseif strRef="COM" {
			do $SYSTEM.OBJ.Compile("User.COMLogin",          "vfuco1o2o3"_strShow)
			do $SYSTEM.OBJ.Compile("User.COMUserPreferences","vfuco1o2o3"_strShow)
		}
	;	++++++++++++++++++++++++++++++++++++
		if $tlevel>intLevel {
			do AddMessage^COMLog(pidLog,"Transaction Level Error: Module="_strRef)
			tcommit
		}
	;	++++++++++++++++++++++++++++++++++++
	}
	
	
	; 2) Compiling
	;---------------------------------------
	do AddMessage^COMLog(pidLog,"Compiling Modules")
	
	//SR16757
	//do:blnShowMessages AddMessage^COMLog(pidLog,"Compiling Module=User")
	//do $SYSTEM.OBJ.CompilePackage("User","vfuco1o2o3"_strShow,.arrErrors)
	do AddMessage^COMLog(pidLog,"Compiling Relevant Classes = User")
	do CompileRelevantUserClasses(pidLog)
	
	//do LogErrors(.arrErrors,"User")		//SR16757
	
	set intOrder=""
	for {
		set intOrder=$order(^CacheTempReference(intOrder))
		quit:intOrder=""
		
		kill arrErrors
		
		set strRef=$get(^CacheTempReference(intOrder))
		if blnShowMessages {
			do AddMessage^COMLog(pidLog,"Compiling Module="_strRef)
		}
		
		if strRef = "AL" {
		//	do CompilePackage(strRef,pidLog,.arrErrors)			; 02-Nov-2007
			do CompileProject(strRef,pidLog,blnShowMessages)		; 17-Apr-2008
		} else {
			do $SYSTEM.OBJ.CompilePackage(strRef,"vfuco1o2o3"_strShow,.arrErrors)
			do LogErrors(.arrErrors,strRef)
		}
		
		/*if strRef="WWW" {
			do $System.OBJ.Compile("User.www",               "vfuco1o2o3"_strShow,.arrErrors)
		} elseif strRef="COM" {
			do $System.OBJ.Compile("User.COMLogin",          "vfuco1o2o3"_strShow,.arrErrors)
			do $System.OBJ.Compile("User.COMUserPreferences","vfuco1o2o3"_strShow,.arrErrors)
		}*/
	}
	// SR15488: ^^^
	
	quit
	
CompileCodeError  ; Internal Tag
	set $ztrap=""
	if $get(pidLog)'="" {
		do AddMessage^COMLog(pidLog,"Module Compilation Failed : "_$zerror)
	}
	quit
	
	
CompileProject(pstrRef,pidLog,pblnShowMessages)
	;-------------------------------------------------------------------------------
	; Get all the package names given the starting characters and compile them
	;
	; Inputs:
	; 	pstrRef
	; 	pidLog
	; 	pblnShowMessages
	;
	; ByRef:
	;
	; Returns:
	;
	; History:
	; 21-Jul-2009	PPP		SR16757: Revert the Project Compilation to only Once (using Cache 2008 now)
	; 17-Mar-2009	PPP		SR: Do  not include classes which are 'WebService generated'
	; 13-Jan-2009	GRF		SR16253: new intRotation
	; 17-Apr-2008	PPP		SRadhoc: Created  (Package Compile has issues - with
	; 							InterSystems, interim solution) However a complete
	; 							project compile works. (waiting for a solution)
	;-------------------------------------------------------------------------------
	new arrErrors,blnInclude,intRotation,objClass,objProj,result,sc,strClass,strProject
	
	kill ^CacheTempArrClass
	set strProject = "V2-"_$zu(5)
	
	if ##class(%Studio.Project).%ExistsId(strProject) {
		set sc = ##class(%Studio.Project).%DeleteId(strProject)
		
		if $$$ISERR(sc) {
			do AddMessage^COMLog(pidLog,"Cannot Delete Current '"_strProject_"' project, Compile aborted")
			quit
		}
	}
	
	// Creation the Class list for the PROJECT
	set result = ##class(%ResultSet).%New("%Dictionary.ClassDefinitionQuery:Summary")
	do result.Execute()
	
	for {
		quit:'result.Next()
		
		set strClass=result.Data("Name")
		if $zconvert($extract(strClass,1,$length(pstrRef)),"U") = pstrRef {
			set blnInclude = $$$YES
			
			set objClass = ##class(%Library.ClassDefinition).%OpenId(strClass)
			if objClass '=$$$NULLOREF {
				if (objClass.Super [ "%SOAP.") && (objClass.Super [ "Descriptor") {
					set blnInclude = $$$NO
				}
				do objClass.%Close()
			}
 
			if blnInclude {
				set ^CacheTempArrClass(strClass)=""
			}
			
		}
	}
	
	do result.%Close()
	
	; Creation of the PROJECT
	;---------------------------------------
	set sc = $$$OK
	set objProj = $$CreateProjectHeader(strProject)
	
	if objProj'="" {
		set strClass = ""
		for {
			set strClass = $order(^CacheTempArrClass(strClass))
			quit:strClass=""
			
			do objProj.AddItem(strClass, "CLS")
		}
		set sc=objProj.%Save()
		do objProj.%Close()
		
		if $$$ISOK(sc) {
			do AddMessage^COMLog(pidLog,"Created Project : "_strProject)
		}
		
	; Compiling the PROJECT : for some reason need to do it twice
	;---------------------------------------
		
		for intRotation=1:1:1 {     ; =1:1:2 {  //SR16757 (Revert to only Once)
			set sc = $$$OK
			kill arrErrors											
			do AddMessage^COMLog(pidLog,"Compiling Project "_intRotation_" : "_strProject)
	 		if pblnShowMessages {
				do CompileProjectAndWritetoFile(strProject,.arrErrors,intRotation)
			} else {
				set sc = $SYSTEM.OBJ.CompileProject(strProject,"cfkvo3byr-d",.arrErrors)
			}
	 		do AddMessage^COMLog(pidLog,"Compiling Project "_intRotation_" : "_strProject_" completed with "_+$get(arrErrors)_" errors")
			do LogErrors(.arrErrors,strProject)
		}
 	
	}
	
	if objProj="" {
		do AddMessage^COMLog(pidLog,"Cannot Create '"_strProject_"' project, Compile aborted")	
	}
	
	quit
	
	
CreateProjectHeader(pstrName)
	;-------------------------------------------------------------------------------
	; Create the Project Header
	;
	; Inputs:
	; 	pstrName
	;
	; History:
	; 17-Apr-2008	PPP		SRadhoc: Created  (Package Compile has issues - with
	; 							InterSystems, Interim Solution)
	;-------------------------------------------------------------------------------
	new objProj
	
	set objProj = ##class(%Studio.Project).%New()
	if objProj'="" {
		set objProj.Name        = pstrName
		set objProj.Description = "All V2 Classes"
	}
	
	quit objProj
	
	
CompileProjectAndWritetoFile(pstrProject,&parrErrors,pintRotation=0)
	;-------------------------------------------------------------------------------
	; Write the display of the compile to a file
	;
	; Inputs:
	; 	pstrProject	-	Project Name
	; 	parrErrors	-	Errors
	;
	; History:
	; 13-Jan-2009	GRF		SR16253: reset $ztrap on error
	; 18-Apr-2008	PPP		SRadhoc: Created - Project Compile with display to file
	; 						Only Temporary, till we get the the compiling fixed
	;-------------------------------------------------------------------------------
	new io,sc,strFile
	
	set $ztrap = "WritetoFileError"
	set strFile = pstrProject_pintRotation_".txt"
	
	open strFile:"WNS"
	set io=$io
	use strFile
	
	set sc = $SYSTEM.OBJ.CompileProject(pstrProject,"cfkvo3byrd",.parrErrors)
	
	use io
	close strFile
	quit
	
WritetoFileError  ; Internal Tag
	set $ztrap = ""    ; SR16253
	write !,"Error Compiling : "_$zerror
	use io
	close strFile
	quit
	
	
CompilePackage(pstrRef,pidLog,&parrErrors)
	;-------------------------------------------------------------------------------
	; Get all the package names given a the starting characters  and compile them
	;
	; Inputs:
	; 	pstrRef
	; 	pidLog
	;
	; ByRef:
	; 	parrErrors
	;
	; Returns: list of packages
	;
	; History:
	; 28-Mar-2008	Luke	SR15650: Issues from several AL* classes, an initial
	;							soft compile then a deep recusive compile fixes the
	;							issue though the acutal reason for the problem is
	;							deeper
	; 27-Mar-2008	Luke	SR15650: Change the Compiler Flags to Compile all related classes
	; 20-Mar-2008	PPP		SRadhoc: 1.	arrErrors cleared within the loop
	;							2.	Added compile options "fkbr" and removed "u"
	; 02-Nov-2007	PPP		SRadhoc: Created  (Not compiling 'al' packages - loading them OK)
	;------------------------------------------]]><![CDATA[-------------------------------------
	new arrErrors,arrPackage,result,sc,strPackage
	
	set result = ##class(%ResultSet).%New("%Dictionary.PackageDefinitionQuery:SubPackage")
	do result.Execute("")
	
	for {
		quit:'result.Next()
		
		set strPackage = $zconvert(result.Data("Name"),"U")
		
		if $extract(strPackage,1,$length(pstrRef)) = pstrRef {
			set arrPackage(strPackage)=""
		}
	}
	
	do result.%Close()
	
	//These will have errors on the first time they are compiled, The second run through 
	// Will correct these errors.
	do $SYSTEM.OBJ.CompilePackage("alLOC","cfvk-o",.arrErrors)
	do $SYSTEM.OBJ.CompilePackage("alGL" ,"cfvk-o",.arrErrors)
	
	set strPackage = ""
	for {
		set strPackage = $order(arrPackage(strPackage))
		quit:strPackage=""
		
		set sc = $$$OK
		kill arrErrors
		do AddMessage^COMLog(pidLog,"Compiling Package="_strPackage)
	//	do $System.OBJ.CompilePackage(strPackage,"vfuco1o2o3d",.arrErrors)
	//	set sc = $SYSTEM.OBJ.CompilePackage(strPackage,"cfvo3krby-d",.arrErrors) //SR15650
		set sc = $SYSTEM.OBJ.CompilePackage(strPackage,"cfvo3by-d",.arrErrors)
		do LogErrors(.arrErrors,strPackage)
	}
	quit
	
	
DeletePackage(pstrRef,pidLog)
	;-------------------------------------------------------------------------------
	; Get all the package names given the starting characters and delete them
	;
	; Inputs:
	; 	pstrRef
	; 	pidLog
	;
	; Returns: none
	;
	; History:
	; 18-Mar-2008	PPP		SRadhoc: Created
	;-------------------------------------------------------------------------------
	new arrErrors,arrPackage,result,sc,strPackage
	
	set sc=$$$OK
		
	set result=##class(%ResultSet).%New("%Dictionary.PackageDefinitionQuery:SubPackage")
	do result.Execute("")
	
	for {
		quit:'result.Next()
		
		set strPackage = $zconvert(result.Data("Name"),"U")
	
		if $extract(strPackage,1,$length(pstrRef)) = pstrRef {
			set arrPackage(strPackage) = ""
		}
	}
	
	do result.%Close()
	
	set strPackage = ""
	for {
		set strPackage = $order(arrPackage(strPackage))
		quit:strPackage=""
		
		do AddMessage^COMLog(pidLog,"Deleting Package="_strPackage)
		set sc = $SYSTEM.OBJ.DeletePackage(strPackage,"af-d")
		
		if $$$ISERR(sc) {
			do AddMessage^COMLog(pidLog,"Error deleting package "_strPackage_":"_sc)
		}
	}
	quit
	
	
ObjectBuild(pidLog)
	;-------------------------------------------------------------------------------
	; Packages are called to take care of their own object and data. 
	; Standard Black boxing.  The "i" prefix on the class name signifies an
	; Interface to the package - contains public methods, such as "OnBuild".
	; 
	; As more packages are developed, add the OnBuild Call here 
	;
	; History:
	; 18-Sep-2008	shobby	SR15880: Subroutined the OnBuild call.
	; 15-Aug-2008 	Luke	SR15813 added call to build transaction types 
	; 16-Jul-2008	HQN		SR15799: iDRP (movements) and iREC population readded
	; 03-Apr-2008	GRF		SR15598: pass parameter
	; 15-Mar-2008	PPP		SRAdhoc:  More Logging of Errors
	; 12-Mar-2008	shobby	SRAdhoc:  Put an temporary error trap in.
	; 04-Mar-2008	Luke	added calls to LOC and INV interfaces
	; 30-Nov-2007	LB		SR15598: created
	;-------------------------------------------------------------------------------
	new sc
	
	set $ztrap="ObjectBuildError"  ;FIXME (shobby) It would be better if this routine
	; didn't crash, but if it does then allow the upgrade to run to completion.
	
	do AddMessage^COMLog(pidLog,"Object OnBuild Processes")
	
	set sc = $$$OK
	
	if $$$ISOK(sc) set sc = $$OnBuild(pidLog,"alDRP.iDRP")
	;f $$$ISOK(sc) set sc = $$OnBuild(pidLog,"alSYS.Script.iScript")
	if $$$ISOK(sc) set sc = $$OnBuild(pidLog,"alSOH.iSOH")
	;f $$$ISOK(sc) set sc = $$OnBuild(pidLog,"alSYS.Status.iStatus")
	;f $$$ISOK(sc) set sc = $$OnBuild(pidLog,"alREC.iREC")
	if $$$ISOK(sc) set sc = $$OnBuild(pidLog,"alLOC.iLOC")
	if $$$ISOK(sc) set sc = $$OnBuild(pidLog,"alINV.iINV")
	quit
	
ObjectBuildError ; Internal Tag
	if $get(pidLog)'="" {
		do AddMessage^COMLog(pidLog,"Object OnBuild Trapped Error:"_$zerror)
	}
	set $ztrap=""
	
	quit
	
	
OnBuild(pidLog,pstrMethod)
	;-------------------------------------------------------------------------------
	; Subroutined out of ObjectBuild.
	; Tests whether a OnBuild method exists before attempting to run it.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 13-Jan-2009	GRF		SR16253: prefix
	; 27-Oct-2008	shobby	SR16082: Removed unused third parameter and corrected
	; 							usage of subscript in err(i) reference
	; 28-Oct-2008	PPP		SR16082: Trying to displaying even if OK, corrected
	; 21-Oct-2008	shobby	SR15880: Incl. Luke's suggestion for decoding the error
	; 18-Sep-2008	shobby	SR15880: Created
	;-------------------------------------------------------------------------------
	new arrErr,loop,sc,strMessage
	
	set sc = $$$OK
	
	if ##class(%Library.CompiledMethod).%ExistsId(pstrMethod_".OnBuild") {
		xecute "set sc=##class("_pstrMethod_").OnBuild()"
	}
	set strMessage = "" 
	
	if $$$ISERR(sc) {
		do DecomposeStatus^%apiOBJ(sc,.arrErr,"-d") 
		for loop=1:1:arrErr {
	 		set strMessage  = strMessage_arrErr(loop)       ; SR16082
		}
		do AddMessage^COMLog(pidLog,"Object OnBuild Error <<"_pstrMethod_">> :"_strMessage)
	}
	
	quit sc
	

CompileSysRoutines(pidLog)
	;-------------------------------------------------------------------------------
	; Recompile System Routines (this is required for the Compile Code to function)
	;
	;
	; History:
	; 06-Jun-2011	shobby	SR17787: Replaced Protocol with AddMessage
    ; 21-Jul-2009	PPP		SR16757:Created
	;-------------------------------------------------------------------------------
	new arrRoutine,idRtnName,lstError,strNum,strPrefix,strResult

	//do AddMessage^COMLog(pidLog,"Start Recompile SYSTEM Routines")
	
	;SR17787 $$$PROTOCOL(" ")
	;SR17787 $$$PROTOCOL("Start Recompile SYSTEM Routines")
	do AddMessage^COMLog(pidLog,$$$Text("Com00336"))  ;Start Recompile SYSTEM Routines	;SR17787


	for strPrefix = "COM","WWW" {
		set idRtnName = strPrefix
		for {
			set idRtnName = $order(^rMAC(idRtnName))
			quit:$extract(idRtnName,1,3)'=strPrefix
			continue:idRtnName="COMUpgradeHandler"
			continue:idRtnName="WWWINTEMP"
		
			set strResult = $$ROUTINE^%R(idRtnName_".MAC",.arrRoutine,.lstError,"LCS")
			if 'strResult {
				do AddMessage^COMLog(pidLog," * MAC * "_idRtnName_" : "_$piece(strResult,"^",2)) ;SR17787
				;SR17787 $$$PROTOCOL(" * MAC * "_idRtnName_" : "_$piece(strResult,"^",2))
			}
		}

	}
	do AddMessage^COMLog(pidLog,$$$Text("Com00337"))  ;SYSTEM Routines Recompiled) ;SR17787
	;SR17787 $$$PROTOCOL("SYSTEM Routines Recompiled")
	;SR17787 $$$PROTOCOL(" ")

	//do AddMessage^COMLog(pidLog,"End Recompile System Routines")
	
	quit
	
	
RecompileRoutines(pblnCompile=$$$YES,pidNamespace)
	;-------------------------------------------------------------------------------
	; History:
	; 06-Jun-2011	shobby	SR17787: Replaced Protocol with AddMessage
	; 10-Mar-2011	shobby	SR17682: Don't compile CacheSql* routines.  (They will 
	;							fail to compile anyway.
	; 21-Jul-2009	PPP		SR16757: SYSTEM routines ie COM,WWW already compiled in
	;							subroutine 'CompileSysRoutines'
	; 14-Jan-2009	GRF		SR16253: moved from WWWIN to ensure present when called
	; 							(build sequencing); Exclude self; skip idx.*, zz*
	; 13-Jan-2009	GRF		SR16253: separate RecompileRoutines; log better details
	;							for recompile errors (^CacheTempWWWINmac)
	;-------------------------------------------------------------------------------
	new arrRoutine,idRtnName,lstError,strNum,strResult
	
	;SR17787 $$$PROTOCOL(" ")                             ; SR16253
	;SR17787 $$$PROTOCOL("Start Recompile Routines")
	do AddMessage^COMLog(pidLog,$$$Text("Com00338"))     ;Start Recompile Routines ;SR17787
	
	if pblnCompile=$$$YES {
		
		;-------------------------------------
		; .INT Files
		;-------------------------------------
		if $$$NEVER {                                ; <Block Disabled> ; SR16253
			set idRtnName="%zzzzzzzz"
			for {
				set idRtnName=$order(^ROUTINE(idRtnName))
				quit:idRtnName=""
				continue:$extract(idRtnName)="%"
				continue:$extract(idRtnName,1,3)="ZZZ"
				continue:$piece(idRtnName,".",1)="idx"
				continue:$piece(idRtnName,".",$length(idRtnName,"."))="T1"
				continue:##class(%Dictionary.ClassDefinition).%ExistsId($piece(idRtnName,".",1,$length(idRtnName,".")-1))
				continue:idRtnName="COMUpgradeHandler"          ; Don't recompile itself  ; SR16253
				continue:idRtnName="WWWINTEMP"
			;	continue:idRtnName="WWWINSTALL"  ;TYBD;23,6,2004;
			
				set strResult = $$ROUTINE^%R(idRtnName_".INT",.arrRoutine,.lstError,"LCS")
				;SR17787 if 'strResult $$$PROTOCOL(" * INT * "_idRtnName_" : "_$piece(strResult,"^",2))     ; SR16253
				if 'strResult do AddMessage^COMLog(pidLog," * INT * "_idRtnName_" : "_$piece(strResult,"^",2))     ; SR16253 ;SR17787
			}
		}
		
		;-------------------------------------
		; .MAC Files                                     <Block Restored> ; SR16253
		;-------------------------------------
		set idRtnName = "%zzzzzzzz"
		for {
			set idRtnName = $order(^rMAC(idRtnName))
			quit:idRtnName=""
			continue:$extract(idRtnName,1,8)="CacheSql"     ;SR17682
			continue:$extract(idRtnName)="%"
			continue:$piece(idRtnName,".",1)="idx"
			continue:$extract(idRtnName,1,3)="COM"     //SR16757
			continue:$extract(idRtnName,1,3)="WWW"
			continue:$piece(idRtnName,".",$length(idRtnName,"."))="T1"
			continue:idRtnName="COMUpgradeHandler"          ; Don't recompile itself  ; SR16253
			continue:idRtnName="WWWINTEMP"
			continue:$extract(idRtnName,1,2)="zz"
		;	continue:idRtnName="WWWINSTALL"
			continue:##class(%Dictionary.ClassDefinition).%ExistsId($piece(idRtnName,".",1,$length(idRtnName,".")-1))
		
			set strResult = $$ROUTINE^%R(idRtnName_".MAC",.arrRoutine,.lstError,"LCS")
			if 'strResult {
				;SR17787 $$$PROTOCOL(" * MAC * "_idRtnName_" : "_$piece(strResult,"^",2))     		 ; SR16253
				do AddMessage^COMLog(pidLog," * MAC * "_idRtnName_" : "_$piece(strResult,"^",2))     ; SR16253 ;SR17787
				set ^CacheTempWWWINmac($job,idRtnName) = lstError
				; If required, can then use something like
				;    do FMTERR^%R(.lstError,.arrRoutine,.arrLines)
				;    for loop=1:1:arrLines(0) w "Error(",loop,") = ",arrLines(loop)
			}
		}
		
		;-------------------------------------
		; .INC Files
		;-------------------------------------
		if $$$NEVER {                                ; <Block Disabled - don't compile .INC>
			set idRtnName = "%zzzzzzzz"
			for {
				set idRtnName = $order(^rINC(idRtnName))
				quit:idRtnName=""
				continue:$extract(idRtnName)="%"
				continue:$find(idRtnName,".")  ;KEINE PROGRAMME MIT . WEGEN KLASSENDEFINITION / DO NOT COMPILE CLASSES WITH A DOT.
				continue:idRtnName="WWWINTEMP"
			;	continue:idRtnName="WWWINSTALL"
			
				set strResult = $$ROUTINE^%R(idRtnName_".INC",.arrRoutine,.lstError,"LCS")
				;SR17787 if 'strResult $$$PROTOCOL(" * INC * "_idRtnName_" : "_$piece(strResult,"^",2))     		; SR16253
				if 'strResult do AddMessage^COMLog(pidLog," * INC * "_idRtnName_" : "_$piece(strResult,"^",2))      ; SR16253	;SR17787
			}
		}
	}
	
	set strNum = ""
	do ##class(%Library.RoutineIndex).RebuildIndex(pidNamespace,.strNum)    ; FIXME : Check returned sc? <GRF>
	do AddMessage^COMLog(pidLog,"Routines Recompiled")		;SR17787
	;SR17787 $$$PROTOCOL("Routines Recompiled")
	;SR17787 $$$PROTOCOL(" ")                             ; SR16253
	quit
	
	
CompileRelevantUserClasses(pidLog)
	;-------------------------------------------------------------------------------
    ; Only Compile User classes used by 'al' classes using inheritance
    ; 
    ; 
    ; Returns:
    ;
    ; History:
	; 05-May-2011	shobby	SR17742: Reindex WWW003Calc.  Index hasn't been rebuilt
	;							at this time but is relied on for determining class
	;							methods to preserve, leading to a doubling up and
	;							failing to compile.
    ; 21-Jul-2009	PPP		SR16757:Created
    ;-------------------------------------------------------------------------------
	new idANMClass,idClass,sc,strStatus
	
	do ReIndex^COMIndex("WWW003Calc")	;SR17742

	kill ^CacheTempArrUserClass
	do GetUserClasses^COMUpgradeUtils("AL")
	
	set idClass = ""
	for {
		set idClass = $order(^CacheTempArrUserClass(idClass))
		quit:idClass=""

		do AddMessage^COMLog(pidLog,"Compiling Required User Class "_idClass)
		
		set sc = $$$OK
		set strStatus = "Ok"
		
		set idANMClass = $extract(idClass,6,999)		
		do COMPILE^WWW001OO(idANMClass,$$$YES,.sc)						//Do not show errors
		
		if $$$ISERR(sc) set strStatus = $$ISStatusToDLStatus^COMUtilError(sc,$$$NO)	
		do AddMessage^COMLog(pidLog,"Completed Compiling Required User Class "_idClass_" : "_strStatus)
	}
	
	kill ^CacheTempArrUserClass
	
	quit
	
	
	/*	
DeleteUserPackage(pidLog)
	//
	// **** NOT REQUIRED YET
	;-------------------------------------------------------------------------------
	; Get all the package names given the starting characters and delete them
	;
	; Inputs:
	; 	pstrRef
	; 	pidLog
	;
	; Returns: none
	;
	; History:
	; 18-Mar-2008	PPP		SR16757: Created
	;-------------------------------------------------------------------------------
	new arrClass,sc,strStatus
	
	do AddMessage^COMLog(pidLog,"Deleting Package = User")
	; Use Add Message $$$PROTOCOL(" ")
	; Use Add Message $$$PROTOCOL("Start Deleting User Classes")

	set sc=$SYSTEM.OBJ.GetPackageList(.arrClass, "User")

	if $$$ISOK(sc){
		set idClass =""
		for {
			set idClass = $order(arrClass(idClass))
			quit:idClass=""
			continue:idClass="User.www"
			continue:idClass="User.COMLogin"
			continue:idClass="User.COMUserPreferences"
		
			set sc=$SYSTEM.OBJ.Delete(idClass)

			if $$$ISERR(sc) {
				set strStatus = $$ISStatusToDLStatus^COMUtilError(sc,$$$NO)
				; Use Add Message $$$PROTOCOL(" * CLS * "_idClass_" : "_strStatus)
			}
		}
	}

	; Use Add Message $$$PROTOCOL("Completed Deleting User Classes")
	quit
	*/
	
]]></Routine>
</Export>