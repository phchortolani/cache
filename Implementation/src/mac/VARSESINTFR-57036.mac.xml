<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESINTFR" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARSESINTFR
#include WWWConst
#include COMConst
#include COMSYS
#include INConst
#include COMGridEdit31
#include VARConst
#include VARSESConst
 
OnAfterDataFields(pidForm,pidTFR,pobjTFR)
 
	// Gustavo@30/01/2008 
	// This is used only in VARSESINTFR, which is the form where users can do 
	// consumptions without a request (consumo p/ setor sem solicitação)
	
	new YKEY,YFELD
	
	set YKEY  = pidTFR
	set YFELD = pobjTFR
 	
	do RemoveLocksIfRequired^COMLock(pidForm,pidTFR,$$GetRemovalCode^INTFR(,pidTFR),$$$YES)		//SR15134  
  	
	do LoadGrid(pidTFR,"VARSESINTFRLine")	
 
	quit
 
 
LoadGrid(pidTFR,pidForm)
	new blnEnabled,objTFR,fldItem,fldQuantity,fldStockLocn,fldDate,fldParentQty,YFORM,YFELD,YKEY
 
	set YFORM = pidForm
	set YFELD = ""
	set YKEY  = $get(pidTFR)
 
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)    = 1
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL) = 290
	set $$$COMGridEditParameterGridName(YAUSWAHL)      = YFORM
 
	set blnEnabled = $$$OK
 
 	if '$$$NoKey(pidTFR) {
		set objTFR = $get(^INTFR(YM,pidTFR,1))
		if pidForm = "VARSESINTFRLine" {
			set blnEnabled = ($$$INTFRStatus(objTFR) = $$$EnumINTFRSTATUSCreated)
		} elseif pidForm = "INTFRPickLine" {
			set blnEnabled = ($$$INTFRStatus(objTFR) = $$$EnumINTFRSTATUSFirmed) &&
			                 ($$$INTFRPickListPrinted(objTFR) '= "") &&
			                 ($$$INTFRStatus(objTFR) '= $$$EnumINTFRSTATUSSent)
			                 ;($$$INTFRLoadListPrinted(objTFR) = "")
		}
 
		if blnEnabled {
			set $$$COMGridEditParameterEnabled(YAUSWAHL) = '($$$WWW120AuthorizationToModifyData(YVOR)=5)
		} else {
			set $$$COMGridEditParameterEnabled(YAUSWAHL) = blnEnabled
		}
 	}
	set $$$COMGridEditParameterContainer(YAUSWAHL)   = "VARSESINTFR"
 
	do ^COMGridEdit31
 
	if '$$$NoKey(pidTFR) {
		if $$$GRIDRowCount > 0 {
			if pidForm="INTFRLine" {
				set fldItem = $$$FldINTFRLineItem
				set fldQuantity = $$$FldINTFRLineBaseQuantity
				set fldStockLocn = ""
				set fldDate = ""
				set fldParentQty = ""
			} else {
				set fldItem = $$$FldINTFRPickLineItem
				set fldQuantity = $$$FldINTFRPickLinePickedQuantity
				set fldStockLocn = $$$FldINTFRPickLineSendingStockLocation
				set fldDate = $$$FldINTFRPickLineINWEDate
				set fldParentQty = $$$FldINTFRPickLineQuantity
			}
 
			if ((pidForm = "INTFRLine") && ($$$INTFRStatus(objTFR) = $$$EnumINTFRSTATUSCreated)) { ; || ((pidForm="INTFRPickLine") && ($$$INTFRStatus(objTFR)'=$$$EnumINTFRSTATUSCreated)) {  // Check for Load/Delivery/Shipped done.
				do SetupErrors^INTFRValidation(pidForm,pidTFR,fldItem,fldQuantity,fldStockLocn,fldDate,fldParentQty)
			
			} elseif ((pidForm = "INTFRPickLine") && ($$$INTFRStatus(objTFR) '= $$$EnumINTFRSTATUSCreated) && ($$$INTFRPickListPrinted(objTFR) '= "") && ($$$INTFRShipped(objTFR) = "")) {  // Check for Load/Delivery/Shipped done.
				do CheckValidityOfPickLines^INTFRValidation(pidTFR)
			}
 
			$$$JS($$$GRIDGoToPage(1,$$$GRIDNumPages,$$$GRIDGetFirstCell(1),$$$NO))
		}
	}
	quit
 
 
CanViewReport()
 	//Gustavo, 11/10/2007
 	//Desabilita o botão de relatório caso a solicitação não tenha sido processada.
 	
 	if (YKEY) { 	 		
 		if $$$INTFRStatus(YFELD) < 2 {
			//set YQ = 1_"O relatório só fica disponível após a transferência ter sido processada."
			set YQ = 1_$$$Text("MED00308")
		}  	
		else { 
			set YQ = $$$YQEnable
		} 	
 	} 
	quit
 
VoltaParaListaDeSolicitacoes()
	//Gustavo, 05/10/07
	//Rotina do botão customizado na INTFR que faz voltar diretamente para a lista de solicitações, conforme o YPARA do usuário.
 
 	if YPARA = "CONSUMOSETOR" {
	 	set YPARA = "CONSUMO"
 	}
 
	do GoToForm^COMUtilForm("VARSESListaEfetSolicLoader", "", 1, YPARA)
	
	quit
 
 
InserePrefixoNumerador()	
	//Gustavo, 17/09/07
	//Insere o prefixo que identifica o tipo de operação antes do campo chave primária do form.
 
	set TipoOperacao = YPARA
 
	if TipoOperacao = "TRANSFERENCIA" {
		write "  TR"
	}
	
	elseif TipoOperacao = "CONSUMOSETOR" {
		write "  CS"	
	}
	
	quit
 
ValidaBotaoProcessar(YKEY)
	;-------------------------------------------------------------------------------
    ; History:
    ; 20-May-2008   GFiuza  Validation for "Setor" are not alerted anymore. Request
    ; 						by Marcelo and end users.
    ; 15-May-2008   GFiuza  Alert user which lines does not have stock anymore from
    ; 						the time he created the line to the time he tries to
    ; 						click on process.
    ; 14-Feb-2008	Andre	Prevents the subscript error when there is no 
    ; 						request.
    ; 31-Jan-2008   GFiuza  Validations when the form is VARSESINTFR - check
    ; 						if there are Centros de Custo in the Local Solicitante 						location.    
    ; 15-Sep-2007	GFiuza	Created - do not let user process the record
    ; 						if it's not from his location.
    ;-------------------------------------------------------------------------------
 
	if (YKEY '="") {
		
		new objTransfer, SendingLocation, statusTFR, objSolicTransf
		
		set objTransfer = $get(^INTFR(YM,YKEY,1))
		
		set SendingLocation = $piece(objTransfer,Y,3)
		set statusTFR 		= $piece(objTransfer,Y,7)						
		
		if YLOCATION '= SendingLocation {
				//set YQ = 1_"Só quem pode processar é o local abastecedor."
				set YQ = 1_$$$Text("MED00309")
				quit
				
		} elseif statusTFR = $$$EnumINTFRSTATUSCreated {
			
			new idLinhaTFR, objLinhaTFR, Produto, Quantidade, EstoqueAtual, 
				strMensagem, blnDisable
		
			set idLinhaTFR  = ""
			set strMensagem = ""
			set blnDisable 	= $$$NO
		
			for {
				set idLinhaTFR = $order(^INTFRLine(YM,YKEY,idLinhaTFR))   
				quit:(idLinhaTFR = "")
		
				set objLinhaTFR  = $get(^INTFRLine(YM,YKEY,idLinhaTFR,1))
				set Produto	     = $piece(objLinhaTFR,Y,1)
				set Quantidade   = $piece(objLinhaTFR,Y,3)
				set EstoqueAtual = $$getSOHLocal^VARSESINTFRLine(Produto,SendingLocation)
		
				if Quantidade > EstoqueAtual {				
					//set strMensagem = strMensagem_$char(10)_"Seq. "_idLinhaTFR_". Produto "_Produto_" -> Quant. Atendida = "_$$^WWWTR(0,12,Quantidade)_" e Quant. Estoque = "_$$^WWWTR(0,12,EstoqueAtual)_""
					set strMensagem = strMensagem_$char(10)_$$$Text("MED00039")_idLinhaTFR_$$$Text("MED00110")_Produto_" -> "_$$$Text("MED00310")_" = "_$$^WWWTR(0,12,Quantidade)_" "_$$$Text("MED00311")_" = "_$$^WWWTR(0,12,EstoqueAtual)_""
					set blnDisable = $$$YES				
				}
			}
		
			if (blnDisable = $$$YES) {
				//set YQ = 1_"Um ou mais produtos não têm estoque suficiente para a quantidade a ser atendida. Favor corrigir."_$char(10)_strMensagem
				set YQ = 1_$$$Text("MED00312")_$char(10)_strMensagem
				quit
			} else {
		 		// Se o registro estiver firmado, não precisamos fazer essa verificação.
				do CanFirm^INTFR(YKEY)
			}
		}
				 		
		elseif statusTFR = $$$EnumINTFRSTATUSReceived {
			//set YQ = $$$YQDisable("Essa transferência já foi recebida.")
			set YQ = $$$YQDisable($$$Text("MED00313"))
		} 
		elseif statusTFR = $$$EnumINTFRSTATUSSent {
			//set YQ = $$$YQDisable("Essa transferência já foi enviada.")
			set YQ = $$$YQDisable($$$Text("MED00314"))
		}
 		
 		if (YFORM = "INTFR") { 		
			// Andre, 14/02/2008: evita o erro de subscript após este if, se não há solicitação:
			if ($piece($get(YFELD),Y,26)) = "" {
				quit
			}
			set objSolicTransf = $get(^VARSESSolicTransf(0,$piece(YFELD,Y,26),1))
			if $$$VARSESSolicTransfParcialmenteAtendido(objSolicTransf) '= $$$SolicAguardandoAtendimento {
				//set YQ = $$$YQDisable("A solicitação de transferência de número "_$piece(YFELD,Y,26)_" não é mais passível de atendimento.")
				set YQ = $$$YQDisable($$$Text($listbuild("MED00315",$piece(YFELD,Y,26))))
			}
 		}
 	
		;if (YFORM = "VARSESINTFR") {		
			;new Setor				
			;set Setor = $piece(YFELD,Y,21)			
			;if ((^VARSESExisteSetor(YUSER)>=10) && (Setor = "")) {				
				;set YQ = 1_"Esse centro de custo contém setores. Por favor selecione um Setor, clique em salvar e clique em processar novamente."
				;quit
			;}			
		;}
 	}
 	
	quit		
 
OnBeforeButtonLine(pForm,pKey)
	//Bloqueia a INTFR para usuários que estejam lotados em centros de custo
	//É importante pois poderão existir usuários que poderão alternar entre locais de estoque e centro de custo,
	//por isso é preciso bloquear a tela para o caso de ele estar logado como centro de custo e tenha esquecido de alternar 
	//para local de estoque na hora de utilizar essa tela.
	// Andre, 26/08/2007:
	;if $PIECE($GET(^WWW0121(YM,YM,YLOCATION,1)),Y,24)'=1 {
	;	$$$StartScript()
	;	w "alert('O local atual ("_YLOCATION_") não pode utilizar essa tela. Ficará disponível apenas para consulta de documentos.'); "
	;	$$$EndScript()
	;	if $piece($get(^WWW013(YM,YLOCATION,1)),Y,105)="" do GoToForm^COMUtilForm("VARSESMostraMensagens","","")
	;	do GoToForm^COMUtilForm($piece($get(^WWW013(YM,YLOCATION,1))Y,105),"","")
	;	quit			
	;}
	// Chama evento core:
	do OnBeforeButtonLine^INTFR(pForm,pKey)
	
	// Monta COMTempList de local solicitante:
	do ListLocalSolicitante
	
	// Monta COMTempList de solicitações de transferência:
	do ListSolics
	
	// A lista de produtos já é carregada pelo INTFRLine quando o campo está em edição.
	// Quando o campo é readonly, queremos que a lista esteja vazia para mostar apenas o item.
	// Frank: 28/09/2007
	;do ListProdutos
	
	// Define YOPTION de acordo com YPARA:
	// (YOPTION é usada para selecionar campos a serem exibidos/escondidos. Veja
	// rotina INTFROptions^VARSESMudancasNoOriginal para mais detalhes.)
	if ($get(YPARA) = "TRANSFERENCIA") {
		set YOPTION = 1
	}
	elseif ($get(YPARA) = "CONSUMOSETOR") {
		set YOPTION = 3
	}
	else {
		set YPARA = "TRANSFERENCIA"
		set YOPTION = 1
	}
	quit
 
	/*
validarLocalSolicitante()
	if $PIECE(YFELD,Y,4)'="" {
		IF $GET(^COMTempList(YM,YUSER,"VARSESINTFRRecLoc",$PIECE(YFELD,Y,4),1))="" {
			if $piece(YFELD,Y,34)=1 {
				QUIT 1
			}
		}
	}
	QUIT 0
	*/
	
getLocalSolicitante()
	// Obtém o local solicitante a partir da solicitação de transferência escolhida.
	// Esta rotina é chamada pela rule do campo Local Solicitante.
	new idSolicTransf,objSolicTransf,localSolicitante
	set idSolicTransf = $$$INTFRFREE7(YFELD)
	set objSolicTransf = $get(^VARSESSolicTransf(YM,idSolicTransf,1))
	set localSolicitante = $$$VARSESSolicTransfLocalRecebedor(objSolicTransf)
	// set localSolicitante = $piece($get(^COMTempList(YM,YUSER,"VARSESINTFRSolicTransf",$$$INTFRFREE7(YFELD),1)),Y,1)
	quit localSolicitante
 
OnBeforeEditAccess()  
 
	if YFORM = "VARSESINTFR" {
		
		set ^VARSESLocalAbastecedor(YUSER) = $PIECE(YFELD,Y,3)
		set ^VARSESLocalSolicitante(YUSER) = $PIECE(YFELD,Y,4)
		
		set YPARA = "CONSUMOSETOR"
			
		if (YKEY) {									
			set ^VARSESExisteSetor(YUSER) = $DATA(^VARSESCCLOCAL(YM,^VARSESLocalSolicitante(YUSER)))		
		}
		
		do ListaLocaisConsumo		
	}
 
 	do ListLocais
 	
	if YKEY'="" {
 
		//Gustavo, 27/09/2007: conforme solicitação do Marcelo e Soleni,
		//deve ser mantido a quantidade em estoque da data de processamento.
		
		set LocalAbastecedor = $PIECE(YFELD,Y,3)
		set Processado = $PIECE(YFELD,Y,7)
 
		if Processado < 2 { //2 é processado, e 3 é recebido.
			do CarregaEstoque^VARSESINTFRLine(YKEY,LocalAbastecedor)
		}
		
 
		if YLOCATION'=$PIECE($GET(^INTFR(YM,YKEY,1)),Y,3) && $data(^INTFR(YM,YKEY,1))  {
			$$$StartScript()
			//w "alert('Esse documento é do local "_$PIECE($GET(^INTFR(YM,YKEY,1)),Y,3)_"!  Seu local é "_YLOCATION_". A tela ficará disponível apenas para consulta de documentos.'); "
			w "alert('"_$$$Text($listbuild("MED00316",$PIECE($GET(^INTFR(YM,YKEY,1)),Y,3),YLOCATION))_"'); "
			$$$EndScript()
			quit $$$NO
		}
	}
	quit 1
 
 
getTransporte()
	set Transporte = ""
	
	quit:($get(YFELD) = "") Transporte
	
	set LocalSolicitante = $piece($get(YFELD),Y,4)
	quit:(LocalSolicitante = "") Transporte
	
	set Transporte = $order(^INDRPUMLKWs(YM,1,LocalSolicitante,""))
	quit Transporte
 
onBeforeSaveHook()
	//Não deixa usar uma solicitação de consumo para setor na tela de transferência, e vice-versa.
 
	quit:($data(^VARSESTempAceite("INRECTFR", YUSER))) $$$OK
	set Local 		  = $piece(YFELD, Y, 4)
	set objLocalidade = $get(^WWW0121(YM, YM, Local, 1))
	set blnStorageLocation = $$$WWW0121StorageLocn(objLocalidade)
 
 	set strTipoMovimentacao = $piece(YFELD,"~",18)
 	IF YFORM="VARSESINTFR" set strTipoMovimentacao="CONSUMOSETOR"
	if strTipoMovimentacao  = "TRANSFERENCIA" {
		
		if 'blnStorageLocation {
			$$$StartScript()
			//w "alert('A solicitação escolhida é uma solicitação de consumo para setor. Favor ir para a tela de Efetivar Consumo para Setor para efetivar essa solicitação.'); "
			w "alert('"_$$$Text("MED00317")_"'); "
			$$$EndScript()
			quit $$$NO
		}
	}
 
	elseif strTipoMovimentacao = "CONSUMOSETOR" {
				
		if blnStorageLocation {
			$$$StartScript()
			//w "alert('A solicitação escolhida é uma solicitação de transferência. Favor ir para a tela de Efetivar Transferência para efetivar essa solicitação.'); "
			w "alert('"_$$$Text("MED00318")_"'); "
			$$$EndScript()
			quit $$$NO
		}
	}
	
	
	new strStatus
	
	set strStatus = $$$OK
	
	set $piece(YFELD,Y,34)=1
	set $piece(YFELD,Y,5)=$$getTransporte()
	if YBED="WEBSERVICE" QUIT strStatus
	
	if YFORM = "INTFR" {
		set strStatus = $$VerificaSolicTransfJaUsada($$$INTFRFREE7(YFELD),YKEY)
	}
	
	quit strStatus
	
	
 
onAfterSaveHook()
 
	quit:($data(^VARSESTempAceite("INRECTFR", YUSER))) $$$OK
	new strStatus
	
	set strStatus = $$$OK
	if YBED="WEBSERVICE" QUIT strStatus
	if ($data(^INTFRLine(YM,YKEY)) '= 10) {
		set strStatus = $$CopySolicTransfLinhas($$$INTFRFREE7(YFELD),YKEY)
	}
	
	quit strStatus
	
OnBlur(pidField,pobjTFR)
	; Phil Jones, July 7-2007 :
	; I've hacked this so that 
	do blurValidations(pidField,pobjTFR)
		
	quit
 
blurValidations(pidField,pobjTFR)
	;-------------------------------------------------------------------------------
	; PJones July 7, 2007 : 
	; 
	; This is a SES specific copy of OnBlur^INTFR 
	;  
	; The problem was that SES don't want the transport field to be shown on INTFR
	; but there's code buried deep in the original OnBlur^INTFR that will update 
	; the field on the form (which is a drop-down) with a list of relevant options. 
	; When it updates the HTML, it leaves the actual *selected* value blank. And 
	; because this field is *also* mandatory, the result is that we have a hidden 
	; (uneditable) field, which *must* have a value, but has been set to nothing by the OnBlur
	; handler. 
	; 
	; I've had to reproduce the whole original OnBlur here, minus the bit that fills 
	; the transport field. Ideally, we'd probably like to refactor OnBlur to allow that 
	; automatic population of the transport field to be optional. But that's a core change 
	; which won't be ready when we need it.
	;
	; Params:
	; pidField - Field id that caused this event to occur
	; pobjTFR - Record of header
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 7-Jul-2007	PJones		Forked from the original OnBlur^INTFR
	;-------------------------------------------------------------------------------
 
	new idSendingLocation,idReceivingLocation,lstDispatch,dteTransfer,strStatus
 
	if $case(pidField,$$$FldINTFRTransferDate:$$$YES,$$$FldINTFRSendingLocation:$$$YES,$$$FldINTFRReceivingLocation:$$$YES,$$$FldINTFRDispatch:$$$YES,:$$$NO) {
		set idSendingLocation = $$$INTFRSendingLocation(pobjTFR)
		set idReceivingLocation = $$$INTFRReceivingLocation(pobjTFR)
		
		if $case(pidField,$$$FldINTFRSendingLocation:$$$YES,$$$FldINTFRReceivingLocation:$$$YES,:$$$NO) { // BR014318 vvv
			if (idSendingLocation '= "") && (idSendingLocation = idReceivingLocation) {
				$$$Alert("IN00555")  ;Please note you have set the sending and receiving locations to be the same
			}
		} // BR014318 ^^^
		
		if (idSendingLocation '= "") && (idReceivingLocation '= "") {
			; Following line changed to reflect fact DefaultDispatch is in INTFR not this routine
			set lstDispatch = $$DefaultDispatch^INTFR(idSendingLocation,idReceivingLocation)
			;if pidField '= $$$FldINTFRDispatch do PopulateDataField^COMUtils("INTFR",$$$FldINTFRDispatch,$listget(lstDispatch,1),,,$$$NO)
 
			set dteTransfer = $$$INTFRTransferDate(pobjTFR)
			if dteTransfer '= "" {
				do PopulateDataField^COMUtils("INTFR",$$$FldINTFRDueDate,dteTransfer + $listget(lstDispatch,2),,,$$$NO)
			}
		}
	} elseif pidField = $$$FldINTFRDueDate {
		; Following line changed to reflect fact IsDueDateValid is in INTFR not this routine
		set strStatus = $$IsDueDateValid^INTFR(pobjTFR) 
		
		if $$$ISERR(strStatus) {
			$$$Alert(strStatus)
		}
	}
 
	quit
 
 
runTransfConsumo(TRIGGER)
	if TRIGGER=1 {
		SET $PIECE(^WWW120D(YM,"INTFR",0,1),Y,1)="Efetivar Transferência"
		do GoToForm^COMUtilForm("INTFR","","")
		//(pstrForm,pidKey,plngPage,pstrParam,pblnOpenNewWindow,pstrWindowName)
		quit
	}
	if TRIGGER=2 {
		SET $PIECE(^WWW120D(YM,"INTFR",0,1),Y,1)="Efetivar Consumo"
		do GoToForm^COMUtilForm("INTFR","","")
		quit
	}
	quit
	
 
callINTFR()
		do GoToForm^COMUtilForm("INTFR","","")
		quit
 
 
ListLocais
 
		kill ^COMTempList(YM,YUSER,"ListLocais")
		
		new Local
		set Local=""
		set Local=$order(^WWW0121(YM,YM,Local))
		while Local'="" {
			set ^COMTempList(YM,YUSER,"ListLocais",Local,1) = $PIECE(^WWW0121(YM,YM,Local,1),Y,1)
			set Local=$order(^WWW0121(YM,YM,Local))
		}
		
		quit
 
		
ListaLocaisConsumo
	//Alterado: Karine@20/02/08
	//Alterado para montar a TempList na classe ^VARSESINTFRTempListLocCons para pegar
	//nomes dos campos corretamente
 
		kill ^COMTempList(YM,YUSER,"ListaLocaisConsumo") //karine
		//kill ^VARSESINTFRTempListLocCons(YM,YUSER)
		
		new Local, Abastecedores, MeuLocal, MeusAbastecedores, LocalArmazenagem
		
		// Andre, 07/02/2008: Substituído o código anterior por consulta à tabela de 
		// Abastecedores X Abastecidos (Centros de Custo - CC) - VARSESABASTCC:
		set Local = ""
		for {
			set Local = $order(^VARSESABASTCC(YM,YLOCATION,Local))
			quit:(Local = "")
			set ^COMTempList(YM,YUSER,"ListaLocaisConsumo",Local,1) = $PIECE($get(^WWW0121(0,YM,Local,1)),Y,1)
			//set ^VARSESINTFRTempListLocCons(YM,YUSER,Local,1) = $PIECE($get(^WWW0121(0,YM,Local,1)),Y,1)
		}
		/*
		
		;if YLOCATION = "1004" {
			set Local=""
			set Local=$order(^WWW0121(YM,YM,Local))
			
			while Local'="" {
				set Abastecedores = $piece($get(^WWW0121(YM,YM,Local,1)),Y,78)
				
				set MeuLocal 	      = ";"_YLOCATION_";"
				set MeusAbastecedores = ";"_Abastecedores_";"
				set LocalArmazenagem  = $piece($get(^WWW0121(YM,YM,Local,1)),Y,24)
				
				if $find(MeusAbastecedores,MeuLocal) && (LocalArmazenagem = "") {
				
					set ^COMTempList(YM,YUSER,"ListaLocaisConsumo",Local,1) = $PIECE(^WWW0121(YM,YM,Local,1),Y,1)								
				}
				
				set Local=$order(^WWW0121(YM,YM,Local))
			}				
		
		;}
		
		;else {			
		;	set Local=""
		;	set Local=$order(^WWW0121(YM,YM,Local))
		;	while Local'="" {
		;		set ^COMTempList(YM,YUSER,"ListaLocaisConsumo",Local,1) = $PIECE(^WWW0121(YM,YM,Local,1),Y,1)
		;		set Local=$order(^WWW0121(YM,YM,Local))
			;}		
		;}
		*/
		quit		
		
		
ListLocalSolicitante
	// Cria a lista temporária de local solicitante.
	// Quando o usuário for efetivar uma transferência ou consumo para setor,
	// ele verá a lista de locais de acordo com as seguintes condições:
	// 
	// 1. Se YPARA = TRANSFERENCIA, então...
	//		...o local solicitante (local corrente) tem que ser de armazenagem
	// 		...só mostra locais da mesma cidade
	// 		...só mostra locais do mesmo tipo do usuário (ou almoxarifado ou farmácia)
    //
    // 2. Se YPARA = CONSUMOSETOR, então...
    // 		...o local solicitante não é de armazenagem (ou seja, é centro de custo):
    // 		...só mostra os locais autorizados na VARSESABASTCC
 
	kill ^COMTempList(YM,YUSER,"VARSESINTFRRecLoc")
	
	quit:($get(YPARA) = "")
	
	set LocalAbastecedor = YLOCATION
	quit:(LocalAbastecedor = "")
	
	set type = $get(YPARA)
	if (type = "CONSUMOSETOR") {
		set StorageLocation = " "
		set Location = ""
		for {
			set Location = $order(^VARSESABASTCC(0,LocalAbastecedor,Location))
			quit:(Location = "")
			continue:(Location = LocalAbastecedor)
			
			set ^COMTempList(YM,YUSER,"VARSESINTFRRecLoc",Location,1)=$piece($get(^WWW0121(0,YM,Location,1)),Y,1)
		}
	}
	elseif (type = "TRANSFERENCIA") {
		set TipoEstoque = $$Index^COMUtilIndex($PIECE($GET(^WWW0121(0,YM,YLOCATION,1)),Y,61),"WWW0121") ;CORE-303
		set Cidade = $$Index^COMUtilIndex($PIECE($GET(^WWW0121(0,YM,YLOCATION,1)),Y,8),"WWW0121") ;CORE-303
		set StorageLocation = 1
		set Location = ""
		for {
			set Location = $order(^WWW0121s(0,9,TipoEstoque,Cidade,StorageLocation,YM,Location))
			quit:(Location = "")
			continue:(Location = YLOCATION)
			set ^COMTempList(YM,YUSER,"VARSESINTFRRecLoc",Location,1)=$piece($get(^WWW0121(0,YM,Location,1)),Y,1)
		}
	}
	else {
		quit
	}
	
 	quit
 
ListProdutos
	
	IF YKEY="" QUIT
	kill ^COMTempList(YM,YUSER,"VARSESINTFRProdutos")
	set objINTFR=$get(^INTFR(YM,$PIECE(YKEY,YKOMMA,1),1))
	set Solic=$piece(objINTFR,Y,26)
	set linha=""
	IF Solic="" quit
	for {
		set linha = $order(^VARSESSolicTransfLinha(0,Solic,linha))
		quit:(linha = "")
		set Produto=$piece($get(^VARSESSolicTransfLinha(0,Solic,linha,1)),Y,1)
		/*set ProdutoINTFR=""
		set linhaINTFR=$order(^INTFRLine(0,$PIECE(YKEY,YKOMMA,1),linhaINTFR))
		while linhaINTFR'="" {
			set ProdutoINTFR=""
			set ProdutoINTFR=$piece($get(^INTFRLine(0,$PIECE(YKEY,YKOMMA,1),linhaINTFR,1)),Y,1)
			if Produto=ProdutoINTFR {
				set linhaINTFR=""
			} ELSE {
				set linhaINTFR=$order(^INTFRLine(0,$PIECE(YKEY,YKOMMA,1),linhaINTFR))
			}
		if Produto'=ProdutoINTFR set ^COMTempList(YM,YUSER,"VARSESINTFRProdutos",Produto,1)=$piece($get(^INART(0,Produto,1)),Y,1)
		
		}*/
		set ^COMTempList(YM,YUSER,"VARSESINTFRProdutos",Produto,1)=$piece($get(^INART(0,Produto,1)),Y,1)
	}	
 	quit
 
ListSolics
	kill ^VARSESTEMPSolic(YM,YUSER)
	set idForm = YPARA
	if idForm="" set idForm=$piece(YFELD,Y,18)
	IF idForm="" quit
	set idSolicTransf=""
	set idSolicTransf=$order(^VARSESSolicTransfs(YM,2,YLOCATION,$$$YES,idSolicTransf))
	while idSolicTransf'="" {
		set objSolicTransf = $get(^VARSESSolicTransf(YM,idSolicTransf,1))
		set tipo=$piece(objSolicTransf,Y,15)
		if idForm=tipo {
			set intfr=""
			set intfr=""
			// Se a Solicitação não pertence a alguma INTFR, ela é incluída na lista:
			IF $ORDER(^INTFRs(YM,11,$$^WWWUMLAU(idSolicTransf,1),""))="" {
				set ^VARSESTEMPSolic(YM,YUSER,idSolicTransf,1) = $$$VARSESSolicTransfLocalRecebedor(objSolicTransf)_Y_$$$VARSESSolicTransfLocalAbastecedor(objSolicTransf)_Y_$$$VARSESSolicTransfDatadaSolicitacao(objSolicTransf)
			}
		}
		set idSolicTransf=$order(^VARSESSolicTransfs(YM,2,YLOCATION,$$$YES,idSolicTransf))
	}
	quit
 
ListSolicTransf
	// Lista de solicitações de transferência, incluindo somente as:
	// - Processadas
	// - Que não tenham sido selecionadas em outra Ordem de Transferência.
	// - Mostrar somente solicaçao do tipo TRANSFERENCIA se "Efitivar Transferencia"
	//   e do tipo CONSUMO se "Efetivar consumo para setor" Karine@14/09/2007
	
	new idSolicTransf, idForm
		
	kill ^VARSESTEMPSolic(YM,YUSER)
	set idForm = YPARA
	
	set idSolicTransf = ""
	for {
		set Processado = $$$YES
		
		set idSolicTransf = $order(^VARSESSolicTransfs(YM,2,YLOCATION,Processado,idSolicTransf))
		quit:(idSolicTransf = "")
		
		set objSolicTransf = $get(^VARSESSolicTransf(YM,idSolicTransf,1))
		continue:(objSolicTransf = "")
		set idTipo = $$$VARSESSolicTransfTransferenciaouConsumo(objSolicTransf)
		
		if idForm '= "" {		
			if idForm="TRANSFERENCIA" {		
				continue:(idTipo="CONSUMO")
			}
			elseif idForm ="CONSUMOSETOR" {			
				continue:(idTipo="TRANSFERENCIA")
			}
		} 
		// Se Solicitação já usada em outra Transferência, pula:
		if ($data(^INTFRs(YM,11,idSolicTransf)) = 10) {
			continue
		}
		
		set ^VARSESTEMPSolic(YM,YUSER,idSolicTransf,1) = $$$VARSESSolicTransfLocalRecebedor(objSolicTransf)_Y_$$$VARSESSolicTransfLocalAbastecedor(objSolicTransf)_Y_$$$VARSESSolicTransfDatadaSolicitacao(objSolicTransf)
	}
	quit
 
CopySolicTransfLinhas(pidSolicTransf,pidTFR)
	// Copia as linhas da Solicitação de Transferência para a Ordem de Transferência.
	new strStatus,idSolicTransfLinha,objSolicTransfLinha,objINTFRLine,idOutraTFR,listOutrasTFR,
		fltQuantidadeAAtender
 
	set strStatus = $$$YES
	
	quit:(pidSolicTransf = "") $$$YES
	quit:(pidTFR = "") $$$YES
	//if $order(^INTFRLine(YM,pidTFR,""))'="" quit
 	
	//set strStatus = $$VerificaSolicTransfJaUsada(pidSolicTransf,pidTFR) Comentei homologação multiplas transferencias Rubens
	//quit:($$$ISERR(strStatus)) strStatus
	
	set idSolicTransfLinha = ""
	for {
		set idSolicTransfLinha = $order(^VARSESSolicTransfLinha(YM,pidSolicTransf,idSolicTransfLinha))
		quit:(idSolicTransfLinha = "")
 
		set objSolicTransfLinha = $get(^VARSESSolicTransfLinha(YM,pidSolicTransf,idSolicTransfLinha,1))
		quit:(objSolicTransfLinha = "")
			
		set fltQuantidadeAAtender = $$GetQuantidadeAAtender^VARSESSolicTransfLinha(objSolicTransfLinha)
		
		// Se a quantidade a ser atendida for zero, não copiar a linha.
		continue:(fltQuantidadeAAtender = 0)
		
		set objINTFRLine = ""
		set $$$INTFRLineItem(objINTFRLine)           = $$$VARSESSolicTransfLinhaCodigodoProduto(objSolicTransfLinha)
		set $piece(objINTFRLine,Y,16)= $$$VARSESSolicTransfLinhaCodigodoProduto(objSolicTransfLinha)
 
		; Gustavo, 17/09/07
		; Conforme solicitação da Soleni, não é para preencher a quantidade atendida quando abrir o form, então as duas linhas abaixo foram comentadas.
		;set $$$INTFRLineQuantity(objINTFRLine)       = $$$VARSESSolicTransfLinhaQuantidade(objSolicTransfLinha)
		;set $$$INTFRLineBaseQuantity(objINTFRLine)   = $$$VARSESSolicTransfLinhaQuantidade(objSolicTransfLinha) apaguei customizacao do campo @$$getQuantSolicitada^VARSESINTFRLine() Rubens
		set $$$INTFRLineUnit(objINTFRLine)           = $$$VARSESSolicTransfLinhaUnidadedeEstoque(objSolicTransfLinha)
		set $$$INTFRLineFREE4(objINTFRLine)          = $$$VARSESSolicTransfLinhaQuantidade(objSolicTransfLinha)
		SET $PIECE(objINTFRLine,Y,25)=$piece(objSolicTransfLinha,Y,10)
		set strStatus = $$$Save("INTFRLine",pidTFR_$$$COMMA_idSolicTransfLinha,objINTFRLine,$$$YES)
		quit:($$$ISERR(strStatus))
	}
	quit strStatus
	
VerificaSolicTransfJaUsada(pidSolicTransf,pidTFR)
	
	if pidSolicTransf '= "" { //Validação inserida devido ao Consumo p/ setor sem solicitação
		// Verifica se a solicitação foi usada em outra transferência:
		new strStatus,idOutraTFR,listOutrasTFR
		set strStatus = $$$YES
		set idOutraTFR = ""
		set listOutrasTFR = ""
		for {
			set idOutraTFR = $order(^INTFRs(YM,11,pidSolicTransf,idOutraTFR))
			quit:(idOutraTFR = "")
			continue:(idOutraTFR = pidTFR)
			set:(listOutrasTFR = "") listOutrasTFR = idOutraTFR
			set:(listOutrasTFR '= "") listOutrasTFR = listOutrasTFR_", "_idOutraTFR
		}
		if (listOutrasTFR '= "") {
			//set strStatus = "A Solicitação de Transferência "_pidSolicTransf_" já foi escolhida nas transferências "_listOutrasTFR_"."
			//set strStatus = "Erro: solicitação já usada em outra transferência."
			set strStatus = $$$Text($listbuild("MED00319",))
			set strStatus = $$$Text("MED00320")
			quit strStatus
		} 
	}
	
	quit strStatus
	
	/*
Lists
	do ListProdutos
	do ListLocalSolicitante
	do ListSolicTransf
	quit
	*/
 
CheckAccessToINTRANSFER()
	set hasAccess = 0
	new formAccessList, userAccessList
	set formAccess = $piece($get(^WWW120(0,"INTRANSFER",1)),Y,22)
	set userAccess = $piece($get(^WWW013(0,YBED,1)),Y,3)
	set i = 1
	for {
		set profile = $piece(formAccess,";",i)
		quit:(profile = "")
		set formAccessList(profile)=1
		set i = i + 1
	}
	set i = 1
	for {
		set profile = $piece(userAccess,";",i)
		quit:(profile = "")
		set userAccessList(profile)=1
		set i = i + 1
	}
	set i = ""
	for {
		set i = $order(userAccessList(i))
		quit:(i = "")
		if ($get(formAccessList(i)) = 1) {
			set hasAccess = 1
			quit
		}
	}
	quit hasAccess
 
EfetivarTransferenciaOnClick(pidTransfer, isConsumo)
 
	new strStatus
 	;if YBED="FRANK" for i=1:1:100 hang 1
	do ProcessAll(pidTransfer, isConsumo)
 
	quit
 
ProcessAll(pidTransfer, isConsumo=$$$YES)
 
 	new arrTransfLinhas, idTransf, idTransfLinha, objTransfLinha, blnLinhaSelecionada, strStatus
	do GetGridContents^COMGridEdit31Interface(.arrTransfLinhas, "INTFRLine")
 
	// Verificar se alguma linha foi checada para ser rejeitada.
	set blnLinhaSelecionada = $$$NO
	$$$Order1(arrTransfLinhas,idTransf)
		$$$Order2(arrTransfLinhas,idTransf,idTransfLinha)
	
			set objTransfLinha = arrTransfLinhas(idTransf, idTransfLinha)
			if $piece(objTransfLinha, Y, 22) { ; Rejeitar Quantidade não atendida.
				set blnLinhaSelecionada = $$$YES
				quit
			}
					
		$$$End
	$$$End
 	
 	if blnLinhaSelecionada {
	 	&js<
		    var motivo = iePrompt('Por favor insira o motivo da rejeição dos itens restantes das linhas selecionadas.');		
			if (motivo != false) {
				CallBackNow("EfetivarERejeitar^VARSESINTFR",'#(pidTransfer)#',motivo,#(isConsumo)#)
			}
	 	>
 	} else {
	 	do EfetivarSomente(pidTransfer, isConsumo)
	}
 
	quit 
	
EfetivarSomente(pidTransfer, isConsumo)
 
	new strStatus
 
	set strStatus = $$Transaction^COMTransaction("EfetivarTransferencia^VARSESINTFR("""_pidTransfer_""")")
 
	if $$$ISOK(strStatus) {
		if isConsumo {
			if YFORM '= "VARSESINTFR" {
				&js<
					//alert("Consumo processado com sucesso!");
					alert($$$Text("MED01316"));
				>
			}
			do GoToForm^COMUtilForm("VARSESINTFR", pidTransfer)
		} else {
			&js<
				//alert("Transferência processada com sucesso!");
				alert($$$Text("MED01317"));
			>
			do GoToForm^COMUtilForm("INTFR", pidTransfer)
		}
	} else {
		&js<
			alert('#(strStatus)#');
		>
	}
	
	quit	
 
EfetivarERejeitar(pidTransfer, pstrMotivo, isConsumo)
 
	new strStatus
 
	set strStatus = $$Transaction^COMTransaction("EfetivarERejeitarTxn^VARSESINTFR("""_pidTransfer_""","""_pstrMotivo_""")")
 
	if $$$ISOK(strStatus) {
		if isConsumo {
			&js<
				//alert("Consumo processado com sucesso!");
				alert($$$Text("MED01316"));
			>
			do GoToForm^COMUtilForm("VARSESINTFR", pidTransfer)
		} else {
			&js<
				//alert("Transferência processada com sucesso!");
				alert($$$Text("MED01317"));
			>
			do GoToForm^COMUtilForm("INTFR", pidTransfer)
		}
	} else {
		&js<
			alert('#(strStatus)#');
		>
	}
	
	quit	
	
EfetivarERejeitarTxn(pidTransfer, pstrMotivo)
 
	new strStatus 
	
	set strStatus = $$EfetivarTransferencia^VARSESINTFR(pidTransfer)
	if $$$ISOK(strStatus) {
		do RejectSolicLines(pstrMotivo)
	}
 
	quit strStatus
	
RejectSolicLines(pstrMotivo)
 
 	new arrTransfLinhas, idTransf, idTransfLinha, objTransfLinha, objTransf, idSolic,
 		idItemTransfLinha, idSolicLInha, objSolicLinha, idItemSolicLinha, strStatus
 
	do GetGridContents^COMGridEdit31Interface(.arrTransfLinhas, "INTFRLine")
 
	// Coletar as linhas checadas para serem rejeitadas.
	$$$Order1(arrTransfLinhas,idTransf)
	
		set objTransf = $get(^INTFR(YM, idTransf, 1))
		$$$Order2(arrTransfLinhas,idTransf,idTransfLinha)
	
			set objTransfLinha = arrTransfLinhas(idTransf, idTransfLinha)
			
			// Se a linha foi selecionada para ter a sua quantidade restante rejeitada.
			if $piece(objTransfLinha, Y, 22) { ; Rejeitar Quantidade não atendida.
 
				set idItemTransfLinha = $piece(objTransfLinha, Y, 1)
				set idSolic 		  = $piece(objTransf, Y, 26)
 
				// Procurando pela Linha da Solicitação que tem o mesmo item da Linha da
				// transferência.
				set idSolicLinha  = $order(^VARSESSolicTransfLinhas(YM, 1, idItemTransfLinha, idSolic, ""))
				set objSolicLinha = $get(^VARSESSolicTransfLinha(YM, idSolic, idSolicLinha, 1))
 
				// Preparando a linha da solicitação para ser rejeitada e rejeitando.
				set objSolicLinha = $$PrepareLineToReject^VARSESSolicTransf(,,objSolicLinha)
				set $$$VARSESSolicTransfLinhaMotivodaRejeicao(objSolicLinha) = pstrMotivo
				
				set strStatus = $$$Save("VARSESSolicTransfLinha",idSolic_$$$COMMA_idSolicLinha,objSolicLinha,$$$YES)
			}
					
		$$$End
 
		// Refazer o cálculo da Solic.
		do RecalcularStatus^VARSESSolicTransf(idSolic)
		
	$$$End
 
	quit
 
EfetivarTransferencia(pidTFR)
 
	new strStatus, objSolicLinha, idItemSolicLinha, idTRStatus
	set strStatus = $$$NO
	
	/*
 	Frank 12/09: Core Alphalinc foi alterado e agora limpa as restrições de acessa da tela INTRANSFER.
 	if ('$$CheckAccessToINTRANSFER) {
		set strStatus = "0~Não foi possivel processar a operação.Por favor informe ao suporte do sistema que a tela INTRANSFER está desautorizada."
		quit strStatus
	}
	*/
 	set objTFR 	   = $get(^INTFR(YM,pidTFR,1))
	set idTRStatus = $piece(objTFR, Y, 7)
	
	// Não precisamos tentar firmar se o status for igual a 1.
	if idTRStatus = $$$EnumINTFRSTATUSCreated {
		do CanFirm^INTFR(pidTFR)
	  	if YQ = $$$YQEnable {
	 
			set strStatus = $$FirmTxn^INTFR(pidTFR)
	 
			quit:$$$ISERR(strStatus) strStatus
			
	 	} else {
		 	quit "0 "_$$$YQMessage
	 	}
	}
 	set objTFR 	   = $get(^INTFR(YM,pidTFR,1))
 	// Copia Data de Processamento para a Data:
 	set $$$INTFRTransferDate(objTFR) = $$$INTFRProcessedDate(objTFR)
 	set strStatus = $$Save^COMUtils("INTFR",pidTFR,objTFR,1)
	quit:$$$ISERR(strStatus) strStatus
 
 	if $piece(objTFR,Y]]><![CDATA[,26)="" { //Para efetivar consumo sem solicitação insere a quantidade após consumo no piece 22
	 	SET INTFRLine=""
	 	SET INTFRLine=$order(^INTFRLine(YM,pidTFR,INTFRLine))
	 	while INTFRLine'="" {
		 	set $piece(^INTFRLine(YM,pidTFR,INTFRLine,1),Y,22)=$piece(^INTFRLine(YM,pidTFR,INTFRLine,1),Y,14)-$piece(^INTFRLine(YM,pidTFR,INTFRLine,1),Y,3)
		 	SET INTFRLine=$order(^INTFRLine(YM,pidTFR,INTFRLine))
	 	}
 	}
 	
 	do CanPrintPick^INTFR(pidTFR)
  	if YQ = $$$YQEnable {
	    
		set strStatus = $$PrintPickListTxn^INTFRInterface(pidTFR)
 
		if $$$ISOK(strStatus) {
			set $piece(^INUSER(YM,YBED,1),Y,76) = $$$INTFRTour($get(^INTFR(YM,pidTFR,1)))
		}
		else {
			quit strStatus
		}
    }
	else {
	 	quit "0 "_$$$YQMessage
	}
 	;if YBED= "FRANK" for i=1:1:100 hang 1
	do CanShip^INTFR(pidTFR)
  	if YQ = $$$YQEnable {
 
		set strStatus = $$ShipTxn^INTFRInterface(pidTFR)
		quit:$$$ISERR(strStatus) strStatus
	}
	else {
	 	quit "0 "_$$$YQMessage
	}
	
	set pDate = $h
	set pLocalEst=$piece($get(^INTFR(YM,pidTFR,1)),Y,3)
	set pItens=""
	set dado=""
	set dado=$order(^INTFRLine(YM,pidTFR,dado))
	while dado'="" {
		if pItens'="" set pItens=pItens_"|"
		set pItens=pItens_$piece($get(^INTFRLine(YM,pidTFR,dado,1)),Y,1)_Y_"-"_$piece($get(^INTFRLine(YM,pidTFR,dado,1)),Y,3)
		//Mudança rubens para homologação, multiplas transferências começa aqui		
		set nosolic=$piece($get(^INTFR(YM,pidTFR,1)),Y,26)
		//Gustavo inseriu a validação abaixo pq agora existe consumo para setor sem solicitação, daí se não tiver solic ele passa direto
		if nosolic '= "" {
			set linhasolic=""
			set linhasolic=$order(^VARSESSolicTransfLinha(YM,nosolic,linhasolic))
 
			while linhasolic'="" {
				
				set objSolicLinha    		 = $get(^VARSESSolicTransfLinha(YM, nosolic, linhasolic, 1))
				set idItemSolicLinha 		 = $$$VARSESSolicTransfLinhaCodigodoProduto(objSolicLinha)
				
				if $piece($get(^INTFRLine(YM,pidTFR,dado,1)),Y,1) = idItemSolicLinha {
					
					set fltQuantidadeTransferida = $$$VARSESSolicTransfLinhaQuantTransf(objSolicLinha)
					set fltQuantidadeTransferida = fltQuantidadeTransferida + $piece($get(^INTFRLine(YM,pidTFR,dado,1)),Y,3)
					
					set $$$VARSESSolicTransfLinhaQuantTransf(objSolicLinha) = fltQuantidadeTransferida
					set strStatus = $$$Save("VARSESSolicTransfLinha",nosolic_$$$COMMA_linhasolic,objSolicLinha,$$$YES)
				}
				
				set linhasolic = $order(^VARSESSolicTransfLinha(YM,nosolic,linhasolic))
			}
			// Refazer o cálculo da Solic.
			do RecalcularStatus^VARSESSolicTransf(nosolic)
 
		}
		//termina aqui
		set dado=$order(^INTFRLine(YM,pidTFR,dado))
 
	}
 
	do AjustarEstoqueClient^VARSESIntegration(pDate,pLocalEst,pItens,pidTFR)
	
	if (YBED = "FRANK") || (YBED = "FRANK2") || (YBED [ "SHOBBY") quit "0 Erro do Frank!"
	
	quit strStatus
 
OldProcessAll(YKEY) 
   ; Created by Phil Jones, July 4, 2007
   ; Combine functions of "firming", "picking" and "dispatching" a transfer in one routine
   ; Because SES want to have fewer steps when it's actually a consumption.
   ; (In SES a consumption is a transfer to a consumption location)
   ; 
   ; Here are the sub-routine calls extracted from the various buttons in the original transfer (INTFR) form
   ; do CanFirm^INTFR(YKEY)
   ;   do Perform^COMTransaction(YFORM,YKEY,"Firm^INTFR(YKEY)","IN00428")
   ; do CanPrintPick^INTFR(YKEY)
   ;   do PrintPick^INTFR(YKEY)
   ; do CanShip^INTFR(YKEY)
   ;   do Perform^COMTransaction(YFORM,YKEY,"Ship^INTFR(YKEY)","IN00429")
 
 
 
 
 	// Andre, 26/08/2007: CONSERTAR!!! COLOCAR TODAS AS OPERAÇÕES NUMA MESMA TRANSAÇÃO!!!!!
 
	// Andre, 26/08/2007: Incluir cópia da data de processamento para o campo Data.
 
 
   ; Let's see if we can just call them one after another, break out if we hit an error
   /* Frank 12/09: Core Alphalinc foi alterado e agora limpa as restrições de acessa da tela INTRANSFER.
 	set strstatus=$$CheckAccessToINTRANSFER
	if ('strstatus) {
		$$$StartScript()
		w "alert('Não foi possivel processar a operação.Por favor informe ao suporte do sistema que a tela INTRANSFER está desautorizada.');"
		$$$EndScript()
		quit	
	}
	*/
   new strStatus,pidTFR
   set pidTFR = YKEY
   
   set YFORM = "INTFR"
   ; we call consumption from the Transfer form at the moment, but this may need to become a parameter later
	open 2:(YUSER)
	use 2
      
   do Perform^COMTransaction(YFORM,YKEY,"Firm^INTFR(YKEY)","IN00428")
   if YQ = $$$YQEnable {
     do CanPrintPick^INTFR(YKEY)
     if YQ = $$$YQEnable {
		set strStatus = $$Transaction^COMTransaction("PrintPickListTxn^INTFRInterface("""_pidTFR_""")",$$$YES)
 
		if $$$ISOK(strStatus) {
			set $piece(^INUSER(YM,YBED,1),Y,76) = $$$INTFRTour($get(^INTFR(YM,pidTFR,1)))
		}
 		
	    if YQ = $$$YQEnable {
	      do CanShip^INTFR(YKEY)
     	  if YQ = $$$YQEnable {
 	     	  
             do Perform^COMTransaction(YFORM,YKEY,"Ship^INTFR(YKEY)","IN00429")
           
	 	  }
	    }
     }
   }
   close 2
 
   quit
   
webprocessall(pYKEY,pYLOCATION)
   
	$$$VAR
	
	set YKEY=pYKEY
	set YM=0
	set YLOCATION = pYLOCATION
 
	new strStatus,pidTFR
	set pidTFR = YKEY
 
	new strClass,blnGotLock ; SR14409
	Set pstrStatus = $$$NO
	set blnGotLock = $$$NO
	set strClass = $$$WWW120ClassUsedInForm($get(^WWW120(0,"INTFR",1)))
	lock ^Semaphore("INTFR",pidTFR):2 ; SR14409
	
	if $test { ; SR14409
		set blnGotLock = $case($increment(^CacheTempSemaphore("INTFR",pidTFR)),1:$$$YES,:$$$NO)
	}
	
	lock -^Semaphore("INTFR",pidTFR)
	set pblnReloadForm=1
	new strStatus
	set strStatus = 0
	open 2:(YUSER)
	use 2
	set strStatus = $$ProcessAllTxn^VARSESINTFR(pidTFR)
	close 2
	
	quit strStatus
	
FixAceite(pIdLocation)
	// Andre, 28/02/2008:
	// Faz o aceite para as transferências/consumos p/setor que ficaram sem aceite automático,
	// pois o local não estava configurado corretamente c/o campo AutoReceiptTransferOrders marcado.
	new strStatus, idTFR, objTFR, statusTFR, tipoTFR, strStatus 
	
	quit:( $get(pIdLocation) = "" )
	
	do ^WWWVAR
	
	set YLOCATION = pIdLocation // 508101
	
	//write !,"Aceites do local "_YLOCATION_": ",!
	write !,$$$Text($listbuild("MED00321",YLOCATION)),!
	
	// Pesquisa transferências ainda não recebidas:
	set idTFR = ""
	for {
		set idTFR = $order(^INTFRs(YM,2,YLOCATION," ",idTFR))
		quit:(idTFR = "")
		set objTFR = $get(^INTFR(YM,idTFR,1))
		set statusTFR = $piece(objTFR,Y,7)
		set tipoTFR = $piece(objTFR,Y,18)
		set strStatus = ""
		if ( (statusTFR = 2) && (tipoTFR = "CONSUMOSETOR") ) { // Se TFR foi enviada, mas não recebida:
			set strStatus = $$Transaction^COMTransaction("FixAceiteTxn^VARSESINTFR("""_idTFR_""")")
		}
		write !,"TR/CONS: ",idTFR,", Tipo: ",tipoTFR,", Status: ",statusTFR,", Status aceite: ",strStatus
	}
	
	quit
	
FixAceiteTxn(pidTFR)
	// Andre, 28/02/2008:
	// Faz o aceite para as transferências/consumos p/setor que ficaram sem aceite automático,
	// pois o local não estava configurado corretamente c/o campo AutoReceiptTransferOrders marcado.
	new strStatus,objLocation
	set strStatus = 0
	set objLocation = $get(^WWW0121(0,YM,YLOCATION,1))
	if $$$WWW0121AutoReceiptTransferOrders(objLocation) {
		set strStatus = $$CreateReceiptTxn^INTFRInterface(pidTFR)
		if $$$ISOK(strStatus) {
			set idREC = $get(^CacheTempTransferReceipt(YUSER))
			set strStatus = $$PostTxn^INRECTFR(idREC,"INRECLine") ;BR014754
		}
	} 
	quit strStatus
	
	
CanCreateReversal(YKEY)
 	;06-May-2008	GustavoFiuza    Fixes for chamado nº 08/000021.
 	;02-May-2008	Karine			Only do something if YKEY is not null
 	
 	if YKEY '="" {
 												 
		do CanCreateReversal^INTFRButtons(YKEY)
	
		new idTransferencia, idLinhaTransferencia, objLinhaTransferencia, QuantidadeTransferida,
			QuantidadeEstornada, Estornavel
	
		set idTransferencia = YKEY
		set idLinhaTransferencia  = ""
	
		set Estornavel = 0
	
		for {
			set idLinhaTransferencia = $order(^INTFRLine(YM,idTransferencia,idLinhaTransferencia))
			quit:(idLinhaTransferencia = "")
	
			set objLinhaTransferencia = $get(^INTFRLine(YM,idTransferencia,idLinhaTransferencia,1))		
		
			set QuantidadeTransferida = $piece(objLinhaTransferencia,Y,2)
			set QuantidadeEstornada	  = $piece(objLinhaTransferencia,Y,5)
		
			if (QuantidadeTransferida '= QuantidadeEstornada) {
				set Estornavel = 1
			}
		}	
		
		if Estornavel = 0 {
			//set YQ = 1_"Essa transferência não pode mais ser estornada."
			set YQ = 1_$$$Text("MED00322")
		}				
	}
	
	quit
	
PrintJS(pobjForm)
 
	new idClass 
	set strStatus = $$$OK 
	set idClass   = $piece(pobjForm, Y, 11)
	$$$Alert("Pop UP of DOOM")
	set strP1Name = "Y"_idClass_"P1"
	write !,"<script language=""javascript"">"
	&js<
		var transferencia = document.#(YHTMFORM)#.#(strP1Name)#.value;
		var YPARA = document.WWW.YPARA.value;
		var isConsumo = (YPARA == "CONSUMOSETOR");
		if (isConsumo) {
			isConsumo = 1;
		} else {
			isConsumo = 0;
		}
 
		function iePrompt(message){
		   var settings = "dialogWidth: 290px; dialogHeight: 160px; center: yes; edge: raised; scroll: no; status: no";
		   return window.showModalDialog("#(YGIF)#VARSESPrompt.html", message, settings);
		}
 
		function processTransfer() {
			CallBackNow("EfetivarTransferenciaOnClick^VARSESINTFR", transferencia,isConsumo);
		}
	>
 
	write !,"</script>"
 
	quit strStatus
 
]]></Routine>
</Export>