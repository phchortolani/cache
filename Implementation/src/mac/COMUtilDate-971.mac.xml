<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMUtilDate" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMUtilDate
    ;-------------------------------------------------------------------------------
	; Date Manipulation Utilities
    ; 
    ; See also : 
    ; 	COMUtilStr		String Manipulation
    ; 	COMUtils		Other Common Utilities
    ; 
	; History:
	; 17-Feb-2005	GRF		Additional Doco
	; 01-Jul-2004	GRF		Created; moved some routines from COMUtils
    ;-------------------------------------------------------------------------------
    
    ;-------------------------------------------------------------------------------
    ; Date & Time Functions
    ; =====================
    ; Special Values
    ;    $H     $HOROLOG		Internal : Current Time   ddddd,ttttt
    ;    $ZTS   $ZTIMESTAMP		Internal : Universal Time ddddd,ttttt.ttt
    ;    						           based on $ZTIMEZONE & Daylight Savings
    ;    						           
    ; 
    ; Internal to Literal
    ;    $ZD    $ZDATE			e.g. MM/DD/[YY]YY
    ;    $ZDT   $ZDATETIME		e.g. MM/DD/[YY]YY hh:mm:ss[.ffff] - see Cache doco for formats
    ;    $ZT    $ZTIME			hh:mm[:ss] [AM/PM]   (12 or 24 hr) based on format code 1-4
    ; 
    ; Literal to Internal
    ;    $ZDH   $ZDATEH
    ;    $ZDTH  $ZDATETIMEH
    ;    $ZTH   $ZTIMEH
    ;    
    ; Date Format Codes
    ;  1 MM/DD/[YY]YY    (07/01/97) 
	;  2 DD Mmm [YY]YY   (01 Jul 97) 
	;  3 YYYY-MM-DD      (1997-07-01)   - ODBC format 
	;  4 DD/MM/[YY]YY    (01/07/97)     - European format 
	;  5 Mmm D, YYYY     (Jul 1, 1997) 
	;  6 Mmm D YYYY      (Jul 1 1997) 
	;  7 Mmm DD [YY]YY   (Jul 01 1997) 
	;  8 YYYYMMDD        (19970701)     - Numeric format 
	;  9 Mmmmm D, YYYY   (July 1, 1997) 
    ; 10 W               (2) [2nd day of the week] 		* Internal to Literal Only *
	; 11 Www             (Tue) 							* Internal to Literal Only *
	; 12 Wwwwww          (Tuesday) 						* Internal to Literal Only *
    ;-------------------------------------------------------------------------------
 
#include COMConst
#include COMSYS
#include WWWConst
#define SecondsInDay 86400
#define MonthsInYear 12
 
	 
GetEndOfMonth(pdteDate)
    ;-------------------------------------------------------------------------------
    ; For a date, return the date at the end of the month.
    ;
    ; Returns: date ($horolog format)
    ;
    ; History:
    ; 08-Jun-2005	Steve S		Created
    ;-------------------------------------------------------------------------------
	new intDays,intMonth,intYear
	
	set:$get(pdteDate)="" pdteDate=+$horolog
	
	set intDays		= $$GetDaysInMonth(pdteDate)
	set intMonth	= $$$DateMonth(pdteDate)
	set intYear		= $$$DateYear(pdteDate)
 
	quit $zdateh(intMonth_"/"_intDays_"/"_intYear)
	
	
GetStartOfMonth(pdteDate)
    ;-------------------------------------------------------------------------------
    ; For a date, return the date at the start of the month.
    ;
    ; Returns: date ($horolog format)
    ;
    ; History:
    ; 09-Jun-2005	Steve S		Created
    ;-------------------------------------------------------------------------------
	new intMonth,intYear
	
	set:$get(pdteDate)="" pdteDate=+$horolog
	
	set intMonth	  = $$$DateMonth(pdteDate)
	set intYear		  = $$$DateYear(pdteDate)
 
	quit $zdateh(intMonth_"/1/"_intYear)
	
	
GetMonthString(pdteDate)
    ;-------------------------------------------------------------------------------
    ; For a date, return the month string literal ("January", "February", etc.)
    ;
    ; Returns: string
    ;
    ; History:
    ; 08-Jun-2005	Steve S		Created
    ;-------------------------------------------------------------------------------
	new intMonth,strMonth
 
	set:$get(pdteDate)="" pdteDate=+$h
	
	set strMonth = ""
	set intMonth = $$$DateMonth(pdteDate)
	set strMonth = $$$AppEnum("COMMONTHSOFYEAR",intMonth)
	
	quit strMonth
	
	
ConvertDate(pstrDate="",pstrFormat=1,pdteDate="")
    ;-------------------------------------------------------------------------------
    ; Converts a date to horolog and returns a status if not successful.
    ; 
    ; pstrFormat values: 1-9 see above
 
    ; ByRef  : pdteDate
    ; Returns: Status
    ;
    ; History:
    ; 17-Feb-2005	GRF		Boolean Macros; clarify ByRef
    ; 05-Nov-2004	GRF		Add parameter defaults
    ; 21-Oct-2004	Paul K	Created
    ;-------------------------------------------------------------------------------
	new strStatus
	
	//FIXME: A Fin language text in the COM module ??
	
	set pdteDate=$zdateh(pstrDate,pstrFormat,,,,,,,$lb("Fin00394",pstrDate))  ;Invalid Date Format: '%1'
	if 'pdteDate {
		set strStatus=pdteDate
		set pdteDate=""
	} else {
		set strStatus=$$$OK
	}
	quit strStatus
	
Date(pstrDate="",pstrFormat=1)
    ;-------------------------------------------------------------------------------
    ; Returns a horolog for a date string. can pass in the format.
    ; 
    ; Format : -1 or 1 through 9
    ; Returns:
    ;
    ; History:
    ; 05-Nov-2004	GRF		Add parameter defaults
    ; 31-Mar-2004   Paul K	Created
    ;-------------------------------------------------------------------------------
	set $ztrap="DateException"
	
	// FIXME: Why do we have this routine? Just call $zdateh directly. Nothing seems
	// 		  to be calling this.
	
	quit $zdateh(pstrDate,pstrFormat)
	
	
DateException
	quit 0
	
	
DateDiff(pdteFirst="",pdteSecond="")
	; ----------------------------------------------------------------------------
	; Determine the number of seconds difference between two $horolog dates
	; 
	; NOTE: This is not taking leap seconds into consideration.
	; 
	; History:	
    ; 05-Nov-2004	GRF		Add parameter defaults
	; 28-Mar-2003	Paul K	Created(Commented)
	; ----------------------------------------------------------------------------
	new plngFirst,plngSecond
	
	set plngFirst  = $piece(pdteFirst ,$$$COMMA,1)*$$$SecondsInDay+$piece(pdteFirst ,$$$COMMA,2)
	set plngSecond = $piece(pdteSecond,$$$COMMA,1)*$$$SecondsInDay+$piece(pdteSecond,$$$COMMA,2)
	
	quit plngSecond-plngFirst
 
 
Max(pdteFirst="",pdteSecond="")
    ;-------------------------------------------------------------------------------
    ; Returns the later of two horolog "date,time" or "date" values
    ;
    ; Returns:Date
    ;
    ; History:
    ; 15-Mar-2005	GRF		Remove else so terminating quit case is clearer
    ; 21-Jan-2005	Paul K	Created
    ;-------------------------------------------------------------------------------
 
	if $$DateDiff(pdteFirst,pdteSecond) < 0 {
		quit pdteFirst
	}
	quit pdteSecond
	
	
GetDaysInMonth(pdteDate="")
	; ----------------------------------------------------------------------------
	; Returns the number of days in the month of the date passed in.
	; 
	; Input : pdteDate as +$HOROLOG format
	; 
	; History:
	; 19-Dec-2006	Steve S	SR15244: Rewrote and greatly simplified
    ; 05-Nov-2004	GRF		Add parameter defaults
	; 28-Mar-2003	Paul K	Created (Commented)
	; ----------------------------------------------------------------------------
	
	//	SR15244: Use $case statement. Experiments at the terminal prompt reveal this
	//	to be about 5 times quicker than complex $zd logic, as per the old method.
	
	quit $case($$$DateMonth(pdteDate),1:31,													  //Jan
									  2:$select($$IsLeapYear($$$DateYear(pdteDate)):29,1:28), //Feb
									  3:31,													  //Mar
									  4:30,													  //Apr
									  5:31,													  //May
									  6:30,													  //June
								      7:31,													  //July
									  8:31,													  //Aug
									  9:30,													  //Sept
					   				 10:31,													  //Oct
					   				 11:30,													  //Nov
					   				 12:31)													  //Dec 
	/* SR15244: Commented
	new lngYear,lngMonth,dteFirstNextMonth
	
	set pdteDate = $zdate(pdteDate,3)
	set lngYear  = $piece(pdteDate,"-",1)
	set lngMonth = $piece(pdteDate,"-",2)+1
	if lngMonth>$$$MonthsInYear {
		set lngYear  = lngYear + 1
		set lngMonth = lngMonth-$$$MonthsInYear
	}
	set dteFirstNextMonth = lngYear_"-"_lngMonth_"-01"
	set dteFirstNextMonth = $zdateh(dteFirstNextMonth,3)
	
	quit $piece($zdate(dteFirstNextMonth-1,3),"-",3)
	*/
 
 
AddSeconds(pdteDate="",lngSeconds=0)
	; ----------------------------------------------------------------------------
	; Adds X number of seconds to a $horolog format date.
	;                               ========
	;
	; NOTE: This is not taking leap seconds into consideration.
	; 
	; History:	
    ; 05-Nov-2004	GRF		Add parameter defaults
	; 28-Mar-2003	Paul K	Created(Commented)
	; ----------------------------------------------------------------------------
	new lngTotalSeconds
	
	set lngTotalSeconds=$piece(pdteDate,$$$COMMA,1)*$$$SecondsInDay+$piece(pdteDate,$$$COMMA,2)+lngSeconds
	quit (lngTotalSeconds\$$$SecondsInDay)_$$$COMMA_(lngTotalSeconds#$$$SecondsInDay)
	
 
AddMonth(pdteDate,pintNumMonths=0,pintOffset="")
	;-------------------------------------------------------------------------------
	; Adds/Subtracts a specified number of months from a date.  Will try and
	; get as close as it can in case day of month>current month
	;
	; Returns:
	;
	; History:
	; 15-Dec-2004	Paul K	Added Offset
	; 07-Nov-2003  	Paul K	Created
	;-------------------------------------------------------------------------------
    new intNumDays,intNumMonths,intNumYears,lngDaysInMonth
    
    set pintNumMonths=pintNumMonths\1
    
    if pintNumMonths>0 {
		set intNumMonths = pintNumMonths#$$$MonthsInYear
		set intNumYears  = pintNumMonths\$$$MonthsInYear
    } else {
	    set intNumMonths = pintNumMonths#-$$$MonthsInYear
		set intNumYears  = pintNumMonths\$$$MonthsInYear
    }
	if pintOffset'="" {
		set intNumDays = +pintOffset\1
		if intNumDays<=0 set intNumDays = 1
	} else {
		set intNumDays = $piece($zdate(pdteDate,3),"-",3)
	}
	set intNumMonths = intNumMonths+$piece($zdate(pdteDate,3),"-",2)
	set intNumYears  = $piece($zdate(pdteDate,3),"-",1)+intNumYears
	
	if intNumMonths<1 {
		set intNumMonths = intNumMonths+$$$MonthsInYear
		set intNumYears  = intNumYears-1
	} elseif intNumMonths>$$$MonthsInYear {
		set intNumMonths = intNumMonths-$$$MonthsInYear
		set intNumYears  = intNumYears+1
	}
	set pdteDate = intNumYears_"-"_intNumMonths_"-01"
	set lngDaysInMonth = $$GetDaysInMonth($zdateh(pdteDate,3))
	if intNumDays>lngDaysInMonth set intNumDays = lngDaysInMonth
	
	quit $zdateh(intNumYears_"-"_intNumMonths_"-"_intNumDays,3)
	
	
AddWeek(pstrDate="",pintAddWeek="",pintOffset="")
	
	if pstrDate="" set pstrDate=+$h
	set pstrDate=pstrDate+(7*pintAddWeek)
	
	if pintOffset'="" {
		set pstrDate=pstrDate-$zdate(pstrDate,10)+pintOffset
	}
	quit pstrDate
	
	
IsLeapYear(pintYear=0)
	;-------------------------------------------------------------------------------
	; A function to determine if a year is a leap year.
	;
	; Returns:Boolean
	;
	; History:
	; 05-Jan-2004	GRF		SR11415 : Standardise in COM Module
	; 28-Jul-2004	Paul K	Created
	;-------------------------------------------------------------------------------
	new blnLeapYear
	
	// TODO: Make a macro to avoid the extra function call.
	
	set blnLeapYear = $$$NO
	if (pintYear#4=0) && ((pintYear#400=0) || (pintYear#100'=0)) {
		set blnLeapYear = $$$YES
	}
	
	quit blnLeapYear
	
	
WithinDateRange(pdteDate="",pdteLower="",pdteUpper="")
    ;-------------------------------------------------------------------------------
    ; Is pdteDate within the date range given by pdteLower -> pdteUpper?
    ; 
    ; Returns: boolean
    ;
    ; History:
    ; 21-Mar-2005	JW		Simplified.
    ; 28-Jan-2005	Steve S	Created
    ;-------------------------------------------------------------------------------
	new blnWithinRange
	
	set blnWithinRange=$$$YES
	
	if pdteDate'="" {
		if (pdteLower>pdteDate) {
			set blnWithinRange=$$$NO
		} elseif (pdteUpper'="")&&(pdteDate>pdteUpper) {
			set blnWithinRange=$$$NO
		}
	}
	
	quit blnWithinRange
	
	
FindBadDates(pblnFix=$$$NO,pstrModule="")
    ;-------------------------------------------------------------------------------
    ; Looks through the @Net globals for date and timestamp fields.
    ; Fixes them if they're out.
    ;
    ; History:
    ; 15-Mar-2005	GRF		Boolean Macro in parameters
    ; 04-Mar-2005	Steve S	Newed idKey,KeyLoop,objRef
    ; 23-Feb-2005	Paul K	Created
    ;-------------------------------------------------------------------------------
	new idClass,idField,objField,strRef,intTypeGuess,intGuess,strDate
	new idKey,KeyLoop,objRef
	
	// TODO : Move to a DEV .mac file??
	
	set idClass=""
	for {
		set idClass=$order(^WWW001(0,idClass))
		quit:idClass=""
		
		if $extract(idClass,1,$length(pstrModule))=pstrModule {
			set idField=""
			for {
				set idField=$order(^WWW003(0,idClass,idField))
				quit:idField=""
				
				set objField=$get(^WWW003(0,idClass,idField,1))
				set strRef="^"_idClass_"(0)"
				set intTypeGuess=""
				if ($$$WWW003InputType(objField)=1) || ($$$WWW003InputType(objField)=14) {	
					for {
						set strRef=$query(@strRef)
						quit:strRef=""
						
						set strDate=$piece(@strRef,"~",idField)
						set intGuess=""
						if strDate'="" {
							if strDate=+strDate {
								set intGuess=1
							} else {
								set intGuess=14
							}
						}
						quit:('pblnFix)&&(intGuess'="")&&(intTypeGuess'="")&&(intTypeGuess'=intGuess)
						
						set intTypeGuess=intGuess
						if (pblnFix)&&(intGuess'="")&&(intGuess'=$$$WWW003InputType(objField)) {
							if $$$WWW003InputType(objField)=1 set strDate=+strDate
							if $$$WWW003InputType(objField)=14 set strDate=strDate_",43200"  ;midday
							write YCR,"Class:"_idClass_" Field:("_idField_") "_$$$WWW003PropertyDescription(objField)_" "_$piece(@strRef,"~",idField)_" changed to:"_strDate
							if $$$WWW003IndexKey(objField)="" {
								set $piece(@strRef,"~",idField)=strDate
							} else {
								set idKey=""
								for KeyLoop=2:1:$qlength(strRef)-1 {
									if idKey'="" set idKey=idKey_","
									set idKey=idKey_$qsubscript(strRef,KeyLoop)
								}
								set objRef=@strRef
								set $piece(objRef,"~",idField)=strDate
								set @strRef=objRef
								;set strStatus=$$$Save(idClass,idKey,objRef)
							}
							
						}
					}
					if strRef'="" {
						write YCR,"Class:"_idClass_" Field:("_idField_") "_$$$WWW003PropertyDescription(objField)_" ("_$$GetEnumDescription^COMUtils("FELDTYP",$$$WWW003InputType(objField),1)_") has a mix of dates and time stamps"
					} else {
						if (intTypeGuess'="")&&(intTypeGuess'=$$$WWW003InputType(objField)) {
							write YCR,"Class:"_idClass_" Field:("_idField_") "_$$$WWW003PropertyDescription(objField)_" is a '"_$$GetEnumDescription^COMUtils("FELDTYP",$$$WWW003InputType(objField),1)_"' should be a '"_$$GetEnumDescription^COMUtils("FELDTYP",intTypeGuess,1)_"'"
						}
					}
				}
			}
		}
	}
	
	quit
]]></Routine>
</Export>