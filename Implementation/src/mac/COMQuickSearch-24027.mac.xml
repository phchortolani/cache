<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMQuickSearch" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMQuickSearch
	
#include COMSYS
#include WWWConst
#include COMConst
	
#define	IndexStrip	"*PC"
	
CheckIfUsingQuickSearch(pidClass,&pblnUseQuickSearch,&pblnUseStartsWith)
	;-------------------------------------------------------------------------------
	; Looks at the Quick Search Setup for this class and determines how the quick search...
	; is to be used
	;
	; Params:
	; pidClass          : The class to check
	; pblnUseQuickSearch: Whether this class uses quick search
	; pblnUseStartsWith : Whether this class uses starts with search
	;
	; ByRefs:
	; pblnUseQuickSearch
	; pblnUseStartsWith
	;
	; Returns:
	;
	; History:
	; 07-Jul-2006	RPW		SR12522: Created
	;-------------------------------------------------------------------------------
 
	new objSetup
	
	set objSetup=$get(^COMQuickSearchSetup(YM,pidClass,1))
	
	set pblnUseStartsWith=+$$$COMQuickSearchSetupUseStartsWithSearch(objSetup)
	set pblnUseQuickSearch=+$$$COMQuickSearchSetupUseQuickSearch(objSetup)
	
	quit
	
	
PopulateIndex(pidClass,pidObject)
	;-------------------------------------------------------------------------------
	; Populate a single index for a given class
	;
	; Params:
	; pidClass : The class to be indexed
	; pidObject: The 1st primary key of the class
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 19-Oct-2006	JW		SR15134: Return status
	; 07-Jul-2006	RPW		SR12522: Created
	;-------------------------------------------------------------------------------
	new blnUseQuickSearchStartsWith,blnUseQuickSearch,idxObject,idIndex,strStatus
 	
 	set strStatus = $$$OK
 	
	do CheckIfUsingQuickSearch(pidClass,.blnUseQuickSearch,.blnUseQuickSearchStartsWith)
	
	if blnUseQuickSearchStartsWith || blnUseQuickSearch {
		if '$data(^COMQuickSearchs(YM,1,$$$Index(pidObject),pidClass)) {
			set idxObject=$zstrip(pidObject,$$$IndexStrip)
		
			if '$data(^COMQuickSearch(YM,pidClass,idxObject)) {
				set idIndex=1
				
			} else {
				set idIndex=$order(^COMQuickSearch(YM,pidClass,idxObject,""),-1)+1
			}
			set strStatus=$$$Save("COMQuickSearch",pidClass_$$$COMMA_idxObject_$$$COMMA_idIndex,pidObject,$$$YES)
		}
	}
	
	quit strStatus
	
	
DeleteIndex(pidClass,pidObject)
	;-------------------------------------------------------------------------------
	; Remove a single index from the Quick Search Index
	;
	; Params:
	; pidClass : The class to be removed from the index
	; pidObject: The 1st primary key of the class
	; 
	; ByRefs:
	;
	; Returns:	status
	;
	; History:
	; 18-Oct-2006	JW		SR15134: Look at kill status. Return status
	; 05-Jul-2006	RPW		SR12522: Created
	;-------------------------------------------------------------------------------
	new idIndex,idxRealObject,idxObject,strStatus
	
	set strStatus = $$$OK
	
	set idxRealObject=$$$Index(pidObject)
	if $data(^COMQuickSearchs(YM,1,idxRealObject,pidClass)) {
		set idxObject=$order(^COMQuickSearchs(YM,1,idxRealObject,pidClass,""))
		if idxObject'="" {
			set idIndex=$order(^COMQuickSearchs(YM,1,idxRealObject,pidClass,idxObject,""))
			if idIndex'="" {
				set strStatus = $$$Kill("COMQuickSearch",pidClass_$$$COMMA_idxObject_$$$COMMA_idIndex)		//SR15134
			}
		}
	}
	
	quit strStatus
	
	
PerformQuickSearch(pidClass,pidObject)
	;-------------------------------------------------------------------------------
	; This method actually performs the Quick Search
	; 
	; Step 1:
	; Check for an exact match in the class for this primary key. Return this if found
	; 
	; Step 2:
	; If Quick Search, Check for an exact match in the COMQuickSearch class. Return this if found
	; 
	; Step 3:
	; If Starts With, Check for a Starts With match in the class for this primary key. Return this if found
	; 
	; Step 4:
	; If Starts With and Quick Search, Check for a Starts With match in the COMQuickSearch class. Return this if found
	; 
	; Step 5:
	; If nothing is found, strip the the input to alphanumerics and try again
	; 
	; Step 6:
	; If still nothing is found, return the original value
	;
	; Params:
	; pidClass : The class to be search for
	; pidObject: The 1st primary key of the class
	;
	; ByRefs:
	;
	; Returns:
	; idAccount: The GL Account from either the FINGLAccount or the FINGLAccountIndex
	;
	; History:
	; 06-May-2009	PPP		SR16521:Barcode Scanning to identify Item
	; 						1. if Relation class = Quick Search Class ($$GetId) check for matches
	; 15-Nov-2006	PO		SR15134: New idxKey
	; 05-Jul-2006	RPW		SR12522: Created
	;-------------------------------------------------------------------------------
 
	new idAccount,idIndex,SQLCODE,idObject,strFullClass,blnUseQuickSearchStartsWith,blnUseQuickSearch
	new idKey,objResultSet,strQuery,idStripped,idxKey
	
	quit:pidObject="" pidObject														//EARLY EXIT
 
	set idObject = pidObject
 
	//SR16521
	if $$GetId(pidClass,,.pidObject) quit:(pidObject'=idObject) pidObject 			//EARLY EXIT
 
	set SQLCODE=0
	set idIndex=""
	
	do CheckIfUsingQuickSearch(pidClass,.blnUseQuickSearch,.blnUseQuickSearchStartsWith)
	
	if blnUseQuickSearch || blnUseQuickSearchStartsWith {
		set strFullClass="^"_pidClass
		if '$data(@strFullClass@(YM,pidObject)) {
			if blnUseQuickSearch {
				set idIndex=$order(^COMQuickSearch(YM,pidClass,pidObject,""))
				if idIndex'="" {
					set idObject=$get(^COMQuickSearch(YM,pidClass,pidObject,idIndex,1))
				}
			}
	 
			if (idIndex="")||(idObject="") {
				set idObject=""
				if blnUseQuickSearchStartsWith {
					// This query finds the first matching entry via startswith if one exists.
					// Code Check issues at the moment. Will address later.
					
					set idKey=$$$WWW002PropertyName($get(^WWW002(0,pidClass,1,1)))
								
					set objResultSet=##class(%Library.ResultSet).%New()
					set idxKey=$$$Index(idKey)
					//set idxObject=$$$Index(pidObject)
					set strQuery="select top 1 "_idKey_" As PrimaryKey from "_$$getTableName(pidClass)_" where %upper("_idKey_") %startswith %upper('"_pidObject_"')" ;CORE-385.25
					if $$$ISOK(objResultSet.Prepare(strQuery)) {
						if $$$ISOK(objResultSet.Execute()) {
							if objResultSet.Next() {
								set idObject=$get(objResultSet.Data("PrimaryKey"))
							}
						}
					}
					
					if idObject="" {
						//set idxClass=$$$Index(pidClass)
						&sql(select top 1 ItemData into :idObject from SQLUser.COMQuickSearch where %upper(ItemIndex) %startswith %upper(:pidObject) and %upper(ClassName) = %upper(:pidClass))
					}
					
					if SQLCODE'=0 {
						set idObject=""
					}
				}
			}
		}
		
		if idObject="" {
			set idStripped=$zstrip(pidObject,$$$IndexStrip)
			if idStripped'=pidObject {
				set idObject=$$PerformQuickSearch(pidClass,idStripped)
			} else {
				set idObject=pidObject
			}
		}
	}
	quit idObject
	
	
UpdateIndexForClass(pidClass,pblnPopulate=$$$YES,pblnReloadForm=$$$NO)
	;-------------------------------------------------------------------------------
	; Create/Delete the data for the Quick Search index.
	; 
	; If we are populating, remove the original entry, even if it does not exist, then
	; add the new entry.
	; If we are removing, just remove the entry.
	;
	; Params:
	; pidClass      : The class to be populated
	; pblnPopulate  : Is this populate or delete
	; pblnReloadForm: Should the form be reloaded, this allows the form to be run from
	; 				  the command line
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 18-Oct-2006	JW		SR15134: Look at kill status. Return status
	; 07-Jul-2006	RPW		SR12522: Created
	;-------------------------------------------------------------------------------
	new strFullClass,idKey,strStatus
	
	quit:$$^WWWRELOAD()=1
	
	set strFullClass="^"_pidClass
	
	set idKey=""
	
	for {
		set idKey=$order(@strFullClass@(YM,idKey))
		quit:idKey=""
		
		set strStatus = $$DeleteIndex(pidClass,idKey)		//SR15134
		if pblnPopulate && $$$ISOK(strStatus) {
			set strStatus = $$PopulateIndex(pidClass,idKey)		//SR15134
		}
		quit:$$$ISERR(strStatus)
	}
	
	if pblnReloadForm {
		if $$$ISOK(strStatus) {
			do ReloadForm^COMUtilForm()
		} else {
			do ReturnError^COMUtilError(strStatus)		//SR15134
		}
	}
 
	quit strStatus
	
	
OnAfterDelete(pidKey)
	;-------------------------------------------------------------------------------
	; When a quick search is deleted, remove the data for the class.
	;
	; Params:
	; pidKey: The key to the Quick Search entry.
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 19-Oct-2006	JW		SR15134: Look at kill status
	; 07-Jul-2006	RPW		SR12522: Created
	;-------------------------------------------------------------------------------
 	new strStatus
 	
	set strStatus = $$UpdateIndexForClass(pidKey,$$$NO)
	if $$$ISERR(strStatus) {
		set Q = $$$QDontDelete		//SR15134
	}
	
	quit
	
	
	
	/**********************************************************************************/
	/*********************** INTERFACE METHODS FOR QUICK SEARCH ***********************/
	/**********************************************************************************/
 
IsSearchClass(pidClass="",pidRelClass="")
	;-------------------------------------------------------------------------------
	; When a quick search is called, check if the input class needs to be
	; has the Search Facilty Enabled
	;
	; Params:
	; pidClass: The Class to the Quick Search
	;
	; ByRefs:
	;
	; Returns: Boolean
	;
	; History:
	; 06-May-2009	PPP		SR16521:Barcode Scanning to identify Item
	;-------------------------------------------------------------------------------
 	new blnOK
 	
 	set blnOK = $$$NO
 
	if ($get(pidClass) = "INART")          ||
	   ($get(pidRelClass) = "INART")       ||
	   ($get(pidClass) = "alINV.dItem")    ||
	   ($get(pidRelClass) = "alINV.dItem")    {
		
		set blnOK = $$$YES
	}
		
	quit blnOK
	
 
GetId(pidClass="",pidRelClass="",&pstrCode,pidFieldType="")
	;-------------------------------------------------------------------------------
	; When a quick search is called, get the Original ID of the code entered
	;
	;
	; Params:
	; pidClass 		The Class to the Quick Search
	; pidRelClass	Relation Class
	; pstrCode			String to be checked
	;
	; ByRef:
	; pstrCode
	;
	; Returns: Boolean
	;
	; History:
	; 14-May-2009	PPP		SR16521:If main class is INART and not Primary key 
	; 						no Conversion
	; 06-May-2009	PPP		SR16521:Barcode Scanning to identify Item
	;-------------------------------------------------------------------------------
 	new blnOK
 	
 	set blnOK = $$$NO

	// Item Master  - Checks for Barcodes/UPC
	if ($get(pidClass) = "INART")          ||
	   ($get(pidRelClass) = "INART")       ||
	   ($get(pidClass) = "alINV.dItem")    ||
	   ($get(pidRelClass) = "alINV.dItem")    {
 
		//Main Class is INART and the field is a Primary Key no conversion
		if '((pidClass = "INART") && (pidFieldType = "D")) {
			set blnOK = $$$YES
			// At the moment hardcoded, but will update with a Table Definition for Barcodes
			set pstrCode=$$GetCode^INARTCode(pstrCode)
		}
	}

	quit blnOK

getTableName(idClass="")
    ;-------------------------------------------------------------------------------
    ; Get the SQL table name of a given @nm class name.
    ; 
    ; NOTE: ##class(%CompiledClass).%ExistsId will find the FIRST entry against any package for a given class name
    ; 		##class(x).%New() will find the class x in Package User.
    ; 
    ; So if I have a class Report.x, here is the problem:
    ; 
    ; Report.x comes before User.x and if Report.x is compiled and User.x is not.
    ; Now can you see the DANGER with this routine, it can/will return the WRONG information:
    ; 
    ; ##class(%CompiledClass).%ExistsId(x) will return true 
    ; ##class(x).%New() will return an error
    ; 
    ; 
    ; Returns:
    ;
    ; History:
    ; 18-Jul-2014	shobby		CORE-385.25: Moved from REPViewCreateSQL
    ; 10-Mar-2006	RPW			SR14354: Change to use zobjclassmethod to get the information
    ; 08-Mar-2006	shobby/ff	SR13631:Check for existence of class prior to opening.  Will fail if
    ; 							Class doesn't exist... ie when doing an upgrade.  Removed some short cut quits.
    ; 17-Jan-2006	Frank		Created SR13631 Error Creating Views (Advanced E Procurement)
    ;-------------------------------------------------------------------------------
	new strCommand, objClass, strClassName, strTableName, counter 
    new intPiecesCount, strSchemaName, idx,blnExists,strName
    
    set $ztrap="getTableNameError"
 
	set strName=""
	if idClass'="" {
		;set blnExists=$$$NO
		;set strCommand = "set blnExists = ##class(%CompiledClass).%ExistsId("""_idClass_""")" // SR14354
		;xecute strCommand
		
		set blnExists = $zobjclassmethod("%Library.CompiledClass","%ExistsId",idClass) ; Changed back for the moment. // SR14354
		; The problem appears to be AtNet somewhere the CompiledClass exists but there is nothing to it and this is 
		; why the two classmethod routines fail below and why the %New failed.
		; Open the class def for the broken class and clicked compile.
 		
		if blnExists {
			// Setting objClass to nothing just to pass the code check.
			;set objClass = ""
			;set strCommand = "set objClass = ##class("_idClass_").%New()"
			;xecute strCommand
		 
			;set strClassName = objClass.%ClassName(1)
			;set strTableName = objClass.%ClassName(0)
			;kill objClass
		
			set strClassName = $zobjclassmethod(idClass,"%ClassName",1) // SR14354
			set strTableName = $zobjclassmethod(idClass,"%ClassName",0) // SR14354
			
			set counter = 0
			do {
				set counter = counter + 1
			} while ($piece(strClassName, ".", counter) '= "")
			
			set intPiecesCount = counter - 1
			set strSchemaName = ""
			
			for idx = 1 : 1 {
				set strSchemaName = strSchemaName _ $piece(strClassName, ".", idx)
				if (idx < (intPiecesCount - 1)) {
					set strSchemaName = strSchemaName _ "_"
					
				} else {
					quit
				}
			}
		 
			if strSchemaName = "User" set strSchemaName = "SQLUser"
			set strName = strSchemaName_"."_strTableName
		}
	}
	quit strName
	
getTableNameError
	set $ztrap=""
	quit ""

 
 
 
]]></Routine>
</Export>