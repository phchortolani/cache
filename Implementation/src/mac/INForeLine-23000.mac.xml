<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INForeLine" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INForeLine  ; Forecasting Rule Line
	
#include INConst
#include WWWConst
#include COMSYS
	
#; SR13395 - whether we can use syntax highlighting.
#define CANCODECHECK	(($System.Version.GetOS()["Windows") || ($System.Version.GetNumber()>=5.2))
	
BeforeButtonLine(objLine="",MasterfileClass) 
    ;-------------------------------------------------------------------------------
    ; Before Button Line
    ;
    ; Returns:
    ;
    ; History:
    ; 17-Jul-2006	JW		SR14832: Changed call
    ; 03-Aug-2004	SCR		Created
    ;-------------------------------------------------------------------------------
	do SetLineFields(objLine,,.MasterfileClass)
	do ListUsedFreeFields^WWW122D("INForeRest")
	quit	
 
 
OnAfterPrimaryKey(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
	; After the PrimaryKey is obtained.
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 18-Oct-2006	shobby	SRBR014191: Created
	;-------------------------------------------------------------------------------
	do CreateMethodList()
	quit
	
		 
CreateMethodList()
	;-------------------------------------------------------------------------------
	; Obtain the translated description of the INForeCalc record.
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 18-Oct-2006	shobby	SRBR014191: Created
	;-------------------------------------------------------------------------------
	new idx,strRule,objINForeCalcLang,objINForeCalc
	
	kill ^COMTempList(YUSER,"INForeCalc")
	set idx = ""
	for {
		set idx = $order(^INForeCalc(0,idx))
		quit:idx=""
		
		set objINForeCalcLang = $get(^INForeCalcLang(0,idx,SPRACHE,1))
		set strRule = $$$INForeCalcLangDescription(objINForeCalcLang)
		if strRule="" {
			set objINForeCalc = $get(^INForeCalc(0,idx,1))
			set strRule       = $$$INForeCalcDescription(objINForeCalc)
		}
		if strRule="" set strRule=idx
		do Save^COMUtils("COMTempList",YUSER_",INForeCalc,"_idx,strRule,1)
	}
	quit
	
	
OnRuleSelect(pidRule,pidLine)
    ;-------------------------------------------------------------------------------
    ; Creates the context menu for the calculaion field.
    ;
    ; History:
    ; 30-May-2005	PaulK	Added system variables SR:12462
    ; 16-Mar-2005	PaulK	Created
    ;-------------------------------------------------------------------------------
	new lstVariables,VariableLoop,strName,strExecute,arrAllowed,strAllowed
	
	do StartMenu^COMViewColumnMenu()
	
	set lstVariables=$$GetValidVariables(pidRule,pidLine)
	for VariableLoop=1:1:$listlength(lstVariables) {
		set strName=$listget(lstVariables,VariableLoop)
		do AddRow^COMViewColumnMenu("clear.gif",strName,"CallBack(""RuleSelected^INForeLine"","""_$zconvert(strName,"o","JS")_""")")
	}
	do AddSeparator^COMViewColumnMenu()
	do AddRow^COMViewColumnMenu("clear.gif","Current Date","CallBack(""RuleSelected^INForeLine"","""_$zconvert("$horolog","o","JS")_""")")
	do GetSystemVariables(.arrAllowed)
	set strAllowed=""
	for {
		set strAllowed=$order(arrAllowed(strAllowed))
		quit:strAllowed=""
		do AddRow^COMViewColumnMenu("clear.gif",arrAllowed(strAllowed),"CallBack(""RuleSelected^INForeLine"","""_$zconvert("#"_strAllowed,"o","JS")_""")")
	}
	do EndMenu^COMViewColumnMenu()
	quit
 
 
RuleSelected(pstrName="")
    ;-------------------------------------------------------------------------------
    ; Couldn't work this into about routine because of a clash of "'" and javascript.
    ; replaces current selected text with what a user selected from the context menu.
    ;
    ; History:
    ; 16-Mar-2005	PK		Created
    ;-------------------------------------------------------------------------------
	if pstrName'="" {
		if '$find(pstrName,"$") {
			if $extract(pstrName)="#" {
				set pstrName=$extract(pstrName,2,99)
			} else {
				set pstrName="'"_pstrName_"'"
			}
		}
		write "document.selection.createRange().text="""_$zconvert(pstrName,"o","JS")_""""
	}
	quit
	
	
BeforeSave(Data="") 
    ;-------------------------------------------------------------------------------
    ; Set the Description
    ;
    ; Returns:
    ;
    ; History:
    ; 25-May-2009	DWR		SR16577: moved return error outside loop.
    ; 26-Oct-2005	PO		SR13684: Display error if rule name not in valid form
    ; 03-Aug-2004	SCR		Created
    ;-------------------------------------------------------------------------------
    new strDesc
    
	do SetLineFields(Data,.strDesc)
	set $$$INForeLineDescription(Data) = strDesc
	
	if '($$$INForeLineName(Data)?1.(1A,1N)) { ; If string is not solely alphanumeric then not valid
		set Q = $$$QDontSave
		do ReturnError^COMUtilError($listbuild("IN00364"))  ;"Rule Name must be all alphanumeric."
	}
	quit
	
	
SetLineFields(Data="",&pstrDesc,MasterfileClass)
    ;-------------------------------------------------------------------------------
    ; Show / Hide Rule Line Fields
    ;
    ; Returns:
    ;
    ; History:
    ; 03-Jun-2010	GRF		Show & for pstrDesc
    ; 22-Jan-2008	SCR		BR014376:Change Masterfile
    ; 14-Aug-2006	HeberB	BR014164:Added translation to method description
    ; 08-Aug-2006	HeberB	BR014164:Removed hardcoded text
    ; 30-May-2005	PaulK	Fixed Offset not showing properly SR:12464
    ; 27-May-2005	PaulK	Bug making $$$FldINForeLineRounding $$$FldINForeLineRoundingValue invisible fixed.
    ; 07-Oct-2004	SCR		Added Save to Result
    ; 24-Aug-2004	SCR		If Test Bug Fix
    ; 23-Aug-2004	SCR		Ask For Masterfile Class
    ; 18-Aug-2003	SCR		Added 'Ask for Date'
    ; 06-Aug-2004	SCR		Added Item Master
    ; 03-Aug-2004	SCR		Created
    ;-------------------------------------------------------------------------------
	new Form,FormHeader,Calc,FormField,FieldData,NewType,OldType
	new Class,DataField
	new CalcRec,AskForDates,AskForLocation,Text,AskForMasterfile,AskForCalc
	new AskForRule,AskForDate,objINForeCalcLang
	new strChangeFields,strMasterFileData,blnAskForChange
	
	set MasterfileClass="?"
	
	set Form       = YFORM
	set FormHeader = $get(^WWW120(0,Form,1))
	set Class      = $$$WWW120ClassUsedInForm(FormHeader)
	set Calc       = $$$INForeLineMethod(Data)
	if Calc="" set Calc = " "
	set CalcRec          = $get(^INForeCalc(0,Calc,1))
	set AskForDates      = $$$INForeCalcDateRange(CalcRec)
	set AskForDate       = $$$INForeCalcAsAtDate(CalcRec)
	set AskForLocation   = $$$INForeCalcLocation(CalcRec)
	set AskForCalc       = $$$INForeCalcCalculation(CalcRec)
	set AskForMasterfile = $$$INForeCalcMasterfile(CalcRec)
	set AskForRule       = $$$INForeCalcRule(CalcRec)
 
 
 	; Change masterfile
 	; Get the list of fields that can be changed
 	set strChangeFields     = ";"_$$$INForeCalcChangeFields(CalcRec)_";" 
 	set strMasterFileData   = $$$INForeLineItemMasterFileData(Data)
 	set blnAskForChange     = $$$NO
 	set strMasterfileChange = $$$INForeLineMasterfileChange(Data)
 	if (AskForMasterfile'="") && (strMasterFileData'="") && (strChangeFields[(";"_strMasterFileData_";")) {
		set blnAskForChange = $$$YES
		if strMasterfileChange=$$$YES {
			set AskForCalc  = $$$YES  ; If change is required, turn Calcfield on
		}	
 	} 
 	
 
	set objINForeCalcLang = $get(^INForeCalcLang(0,Calc,SPRACHE,1))
	set pstrDesc = $$$INForeCalcLangDescription(objINForeCalcLang)
	if (pstrDesc = "") { 
		set pstrDesc = $$$INForeCalcDescription(CalcRec)
	}
 	
	if AskForMasterfile'="" set MasterfileClass=AskForMasterfile ; Used by entry form
	
	
	;+++++++++++++++++++++++++++++++++++++++
	lock +^INForeLine
	;+++++++++++++++++++++++++++++++++++++++
	
	set FormField=""
	for {
		set FormField=$order(^WWW122(0,Form,FormField))
		quit:FormField=""
		
		set FieldData=$get(^WWW122(0,Form,FormField,1))
		set DataField=$$$WWW122SequenceNumber(FieldData)
 		if DataField'="" {
			set OldType = $$$WWW122DataInputType(FieldData)
			set NewType = 15 							; Default to 15 (Hidden)
			
			if DataField=$$$FldINForeLineName {
				set NewType = OldType                      ; Name
			
			} elseif DataField=$$$FldINForeLineMethod {
				set NewType = OldType                      ; Method
			
			} elseif DataField=$$$FldINForeLineDateType {
				if AskForDates set NewType = 0             ; Ask for Dates
			
			} elseif ((DataField=$$$FldINForeLineStartDate)||(DataField=$$$FldINForeLineEndDate)) {
				if AskForDates if $$$INForeLineDateType(Data)=1 set NewType = 0  ; Fixed Dates
			
			} elseif ((DataField=$$$FldINForeLineDateRangeDuration)||(DataField=$$$FldINForeLineDateStartingFrom)) {
				if AskForDates if $$$INForeLineDateType(Data)=2 set NewType = 0  ; Date Range
			
			} elseif DataField=$$$FldINForeLineLocationQualifier {
				if AskForLocation set NewType = 0          ; Ask for Locations
			
			} elseif DataField=$$$FldINForeLineSpecifiedLocation {
				if AskForLocation && ($$$INForeLineLocationQualifier(Data)=$$$EnumINFORELOCATIONTYPESpecifiedLocation) set NewType = 0	; Specifed Location
			
			} elseif DataField=$$$FldINForeLineCalculation {
				if AskForCalc               set NewType = 0
			
			} elseif DataField=$$$FldINForeLineItemMasterFileData {
				if AskForMasterfile'=""	    set NewType = 0
			
			} elseif DataField=$$$FldINForeLineMasterfileChange {
				if blnAskForChange=$$$YES   set NewType = 0
			
			} elseif DataField=$$$FldINForeLineRunRule {
				if AskForRule               set NewType = 0
			
			} elseif (DataField=$$$FldINForeLineRounding) || (DataField=$$$FldINForeLineRoundingValue) {
				set NewType = 0
			
			} elseif DataField=$$$FldINForeLineSequenceNumber {
				set NewType = 0
			
			} elseif DataField=$$$FldINForeLineDateType1 {
				if AskForDate               set NewType = 0          ; Ask a single Date
			
			} elseif DataField=$$$FldINForeLineAsAtDate {
				if AskForDate && $listfind($listbuild(3,4),$$$INForeLineDateType1(Data)) set NewType = 0  ; As at Date
			
			} elseif DataField=$$$FldINForeLineDateOffest {
				if AskForDate && $listfind($listbuild(2,4),$$$INForeLineDateType1(Data)) set NewType = 0  ; As at Date
			
			} elseif DataField=$$$FldINForeLineCondition {
				if (Calc'="If") && (Calc'="End If")	set NewType = 0  ; Condition
			
			} elseif DataField=$$$FldINForeLineStoreinResult {
				if (Calc'="If") && (Calc'="End If")	set NewType = 0  ; Save to Result
			}
			
			if NewType'=OldType {
				set $$$WWW122DataInputType(FieldData) = NewType
				set ^WWW122(0,Form,FormField,1)       = FieldData
			}
			if NewType'=15 {  ; Complete the Description
				set Text = $$^WWWFORMAT(Form,"D",DataField,$piece(Data,Y,DataField),3)
				if Text="" set Text = " "
				
				if DataField=$$$FldINForeLineStartDate          set pstrDesc = pstrDesc_" "_$$$Text(68)_" "_Text       ; "From"
				if DataField=$$$FldINForeLineEndDate            set pstrDesc = pstrDesc_" "_$$$Text(69)_" "_Text       ; "To"
				if DataField=$$$FldINForeLineDateRangeDuration  set pstrDesc = pstrDesc_" "_$$$Text(32807)_" "_Text_" "_$select(Text>1:$$$Text(32092),1:$$$Text(32667))	; "For"  "Days" (or "Day")
				if DataField=$$$FldINForeLineDateStartingFrom   set pstrDesc = pstrDesc_" "_$$$Text(34438)_" "_Text_" "_$select(Text>1:$$$Text(32092),1:$$$Text(32667)) ; "starting back"  "Days" (or "Day")
				if DataField=$$$FldINForeLineLocationQualifier  set pstrDesc = pstrDesc_" "_Text
				if DataField=$$$FldINForeLineSpecifiedLocation  set pstrDesc = pstrDesc_" "_Text
				if DataField=$$$FldINForeLineCalculation        set pstrDesc = pstrDesc_" "_Text
				if DataField=$$$FldINForeLineMasterfileChange   set pstrDesc = pstrDesc_" "_$$$Text("IN00839")         ; "Change Masterfile"
				if DataField=$$$FldINForeLineItemMasterFileData set pstrDesc = pstrDesc_" '"_$$$FieldName(AskForMasterfile,"D",$piece(Data,Y,DataField))_"'"
				if DataField=$$$FldINForeLineRunRule            set pstrDesc = pstrDesc_" "_Text
				if DataField=$$$FldINForeLineAsAtDate           set pstrDesc = pstrDesc_" "_$$$Text(32096)_" "_Text    ; "At"
				if DataField=$$$FldINForeLineDateOffest         set pstrDesc = pstrDesc_" "_$$$Text(34439)_" "_Text_" "_$select(Text>1:$$$Text(32092),1:$$$Text(32667))_" "  ; "plus" "Days" (or "Day")
				if (DataField=$$$FldINForeLineCondition) && ($translate(Text," ")'="") {
					                                            set pstrDesc = $$$Text(34440)_" "_Text_" , "_pstrDesc  ; "if"
				}
			}
 		}
	}
	;+++++++++++++++++++++++++++++++++++++++
	lock -^INForeLine 
	;+++++++++++++++++++++++++++++++++++++++
	
	quit
	
	
ShowLines(Rule,pintOption="")
    ;-------------------------------------------------------------------------------
    ; Show Lines
    ;
    ; Returns:
    ;
    ; History:
    ; 24-Jan-2007	JW			SR13395: Switch for COMCodeCheck.
	; 21-Aug-2006	HeberB		BR014189: translated help text
    ; 15-Aug-2006	HeberB		BR014164: remove hardcoded english text
    ; 08-Aug-2006	HeberB		BR014164: call to build description based on language
    ; 16-Jun-2005	RobertW		All statuses return $$$Text, let's not decode this.
    ; 13-Aug-2004	SCR			Created
    ;-------------------------------------------------------------------------------
    new lstHeader,Order,Line,LineRec,Form,Key,gColour,strStatus,idCurrentLine,strTab
    new helpText,blnCodeCheck	; BR014189
	
 	if $piece(Rule,",",2)="" {
	 	do ShowRules^INForeRule(Rule)
 	}
	set strTab=""
	if Rule'="" {
		do ShowLocks()
		set lstHeader=""
		set lstHeader=lstHeader_$listbuild($$$StrINForeLineName) ; Name
		set lstHeader=lstHeader_$listbuild($$$StrINForeLineDescription) ; Description
		set lstHeader=lstHeader_$listbuild($$$StrINForeLineSequenceNumber) ; Sort Order
		if pintOption set lstHeader=lstHeader_$listbuild($$$StrINForeCalcHelpText) ; Sort Order
		set lstHeader=lstHeader_$listbuild($$$Text("IN00299"))  ;Validation
		
		if pintOption="" {
			write $$$Text(34446)	                                        ; "Hide Help Text"
			do InsertLink^COMTable("INForeLine",Rule," "_$$$Text(34447),1)	; "Show Help Text"
		} else {
			do InsertLink^COMTable("INForeLine",Rule,$$$Text(34446),"")		; "Hide Help Text"
			write " "_$$$Text(34447)                                        ; "Show Help Text"
		}
		
		set blnCodeCheck = $$$CANCODECHECK
		
		set idCurrentLine=$piece(Rule,",",2)
		set Rule=$piece(Rule,",",1)
		do Start^COMTable(lstHeader)
		set Order=""
		for {
			set Order=$order(^INForeLines(YM,1,Order))
			quit:Order=""
			
			set Line=""
			for {
				set Line=$order(^INForeLines(YM,1,Order,Rule,Line))
				quit:Line=""
				
				set LineRec=$get(^INForeLine(YM,Rule,Line,1))
				set Form="INForeLine"
				set Key=Rule_","_Line
				
				if $$$INForeLineMethod(LineRec)="If" {
					set strTab=strTab_"&nbsp;"
				} elseif $$$INForeLineMethod(LineRec)="End If" {
					set strTab=$extract(strTab,1,$length(strTab)-5)
				}
				do NewLine^COMTable($select(Line=idCurrentLine:"lightgreen",1:""))
				do InsertCell^COMTable($$$INForeLineName(LineRec),Form,Key,pintOption)
				do InsertCell^COMTable(strTab_$$BuildINForeLineDescription(LineRec),Form,Key,pintOption)
				do InsertCell^COMTable($$$INForeLineSequenceNumber(LineRec),Form,Key,pintOption)
				
				if pintOption {
					if $$$INForeLineMethod(LineRec)="" set $$$INForeLineMethod(LineRec)=" " 
					set helpText = $select($$$INForeCalcLangHelpText($get(^INForeCalcLang(0,$$$INForeLineMethod(LineRec),SPRACHE,1))) = "":$$$INForeCalcHelpText($get(^INForeCalc(0,$$$INForeLineMethod(LineRec),1))),
																					       1:$$$INForeCalcLangHelpText($get(^INForeCalcLang(0,$$$INForeLineMethod(LineRec),SPRACHE,1))))
					do InsertCell^COMTable("<textarea readonly style=""overflow:visible;width:300px;border:0;background-color:transparent;"">"_$$Replace^COMUtilStr(helpText,"|",$$$CRLF)_"</textarea>",Form,Key,pintOption)
				}
				set strStatus=$$ValidateLine(Rule,Line,blnCodeCheck)
				if strStatus=$$$OK {
					set gColour="lightgreen"
					do InsertCell^COMTable("OK",Form,Key,pintOption)
				} else {
					set gColour="lightcoral"
					do InsertCell^COMTable(strStatus,Form,Key,pintOption)
				}
				do EndLine^COMTable()
			}
		}
	 	do Stop^COMTable()
	 	
	 	do:'blnCodeCheck DisplayText^COMUtilForm($$$Text("IN00653"),,"center")
	 	;NOTE: Full rule validation is not available with the current system setup.
 	}
	quit
	
	
BuildINForeLineDescription(pLineRec)
	;-------------------------------------------------------------------------------
	; Build rule line description for current language
	;
	; Params: Rule line data
	;
	; ByRefs:
	;
	; Returns: rule line description text
	;
	; History:
	; 24-Feb-2011	SCR			SR17666: Return correct var
	; 14-Aug-2006 	HeberB&JW	SRBR014164: Set YFORM before SetLineFields call
	; 08-Aug-2006	HeberB		SRBR014164: Created
	;-------------------------------------------------------------------------------
	new strDesc,YFORM
	
	set YFORM="INForeLine"
	do SetLineFields(pLineRec,.strDesc)
	;quit Description
	quit strDesc  ; SR17666
 
 
ShowLocks()
    ;-------------------------------------------------------------------------------
    ; Show any locks that might prevent compiling.
    ;
    ;
    ; History:
    ; 17-Mar-2005	Paul K	Created
    ;-------------------------------------------------------------------------------
    new lstHeader,idLock
    
	if $extract($order(^$Lock("^INForeLock("""")")),1,$length("^INForeLock"))="^INForeLock" {
		set lstHeader=""
		set lstHeader=lstHeader_$listbuild($$$Text("IN00304"))  ;Job Number
		set lstHeader=lstHeader_$listbuild($$$Text("IN00305"))  ;Process Start Time) ; Description
		do Start^COMTable(lstHeader,$$$Text("IN00306"))  ;Processes running that will stop compiling of rules)
	 	
	 	set idLock="^INForeLock("""")"
	 	for {
		 	set idLock=$order(^$Lock(idLock))
		 	quit:$extract(idLock,1,$length("^INForeLock"))'="^INForeLock"
			do NewLine^COMTable()
			do InsertCell^COMTable($qsubscript(idLock,1))
			do InsertCellDate^COMTable($qsubscript(idLock,2))
			do EndLine^COMTable()
		}
	 	do Stop^COMTable()	
	 	write "<br>"
	}
	quit
	
	
ValidateLine(pidRule="",pidLine="",pblnCodeCheck)
    ;-------------------------------------------------------------------------------
    ; Make sure that rule lines aren't used before defined.
    ;
    ; Returns:Status
    ;
    ; History:
    ; 24-Jan-2007	JW		SR13395: Parameter switch for COMCodeCheck. Clean up.
    ; 30-May-2005	Paul K	Added System variable check. SR:12462
    ; 21-Apr-2005	Paul K	Return method text SR:12072
    ; 08-Apr-2005	Paul K	Return error if rule line's method doesn't exist SR#12072
    ; 16-Mar-2005	Paul K	Created
    ;-------------------------------------------------------------------------------
	new strStatus,strCode,lstVariables,objLine,objCalc,strVariable,VariableLoop,arrAllowed
	
	do GetSystemVariables(.arrAllowed)
	set strStatus=$$$OK
	if (pidRule'="") && (pidLine'="") {
		set objLine=$get(^INForeLine(YM,pidRule,pidLine,1))
		
		set lstVariables=$$GetValidVariables(pidRule,pidLine)
		if $$$INForeLineMethod(objLine)'="" {
			if $data(^INForeCalc(0,$$$INForeLineMethod(objLine),1)) {
				set objCalc=$get(^INForeCalc(0,$$$INForeLineMethod(objLine),1))
				if $$$INForeCalcCalculation(objCalc) {
					if $$$ISOK(strStatus) set strStatus=$$ValidateCalculation($$$INForeLineCalculation(objLine),lstVariables)
					
					if $$$ISOK(strStatus) && pblnCodeCheck {		//SR13395
						set strCode=" if ("_$translate($$$INForeLineCalculation(objLine),"'","""")_")"
						set strCode=$$DecodeLine^COMCodeCheck(strCode)
						if $find(strCode,"COS_00") {
							set strStatus=$$$Text("IN00302")  ;Line contains errors.
						} elseif $find(strCode,"COS_14") {
							for VariableLoop=2:1:$length(strCode,"<SPAN CLASS=""COS_14"">") {
								set strVariable=$piece($piece(strCode,"<SPAN CLASS=""COS_14"">",VariableLoop),"</SPAN>",1)
								if (strVariable'="")&&($extract(strVariable)'="Y")&&('$data(arrAllowed(strVariable))) {
									set strStatus=$$$Text("IN00303")  ;Line contains invalid variables.
								}
							}
						}
					}
				}
			} else {
				set strStatus=$$$Text($listbuild("IN00311",$$$INForeLineMethod(objLine)))  ;Forcasting method '%1' no longer exists.
			}
		}
		if $$$ISOK(strStatus) {
			if $piece($piece($$$INForeRuleLastCompileStatus($get(^INForeRule(YM,pidRule,1))),"Data(""v"",""",2),"""",1)=$$$INForeLineName(objLine) {
				set strStatus=$$$Text("IN00301")  ;Line Does not compile.
			}
		}
	}
	quit strStatus
	
	
GetSystemVariables(parrAllowed)
    ;-------------------------------------------------------------------------------
    ; Returns an array of allowed variable to be used in forecast rules
    ;
    ; History:
    ; 30-May-2005	Paul K	Created SR:12462
    ;-------------------------------------------------------------------------------
	kill parrAllowed
	set parrAllowed("Item")     = "Item"
	set parrAllowed("Location") = "Location"
	set parrAllowed("Planner")  = "Planner"
	set parrAllowed("Supplier") = "Supplier"
	set parrAllowed("Date")     = "Run Date"
	quit
	
	
ValidateCalculation(pstrValue="",plstAllowed="")
    ;-------------------------------------------------------------------------------
	; History:
	; 16-Jun-2005	RPW		Modified to return $$$Text like the rest of the routines.
    ;-------------------------------------------------------------------------------
	new strStatus,strValue
	
	set strStatus=1
	for {
		quit:'$find(pstrValue,"'")
		
		set strValue=$piece(pstrValue,"'",2)
		;if '$listfind(plstAllowed,strValue) set strStatus=$listbuild("IN00300",strValue)  ;Variable %1 is not yet defined.
		if '$listfind(plstAllowed,strValue) set strStatus=$$$Text($listbuild("IN00300",strValue))  ;Variable %1 is not yet defined.
		quit:strStatus'=1
		set pstrValue=$piece(pstrValue,"'",3,999)
	}
	quit strStatus
	
	
GetValidVariables(pidRule="",pidLine="",plstVariables="")
	new intSequence,idLine,objLine
	
	set intSequence=""
	for {
		set intSequence=$order(^INForeLines(YM,1,intSequence))
		quit:intSequence=""
		
		set idLine=""
		for {
			set idLine=$order(^INForeLines(YM,1,intSequence,pidRule,idLine))
			quit:idLine=""
			quit:idLine=pidLine
			
			set objLine=$get(^INForeLine(YM,pidRule,idLine,1))
			if '$listfind($listbuild("If","End If","Quit"),$$$INForeLineMethod(objLine)) {
				if '$listfind(plstVariables,$$$INForeLineName(objLine)) set plstVariables=plstVariables_$listbuild($$$INForeLineName(objLine))
			}
			if $$$INForeLineMethod(objLine)="Run Rule" {
				set plstVariables=$$GetValidVariables($$$INForeLineRunRule(objLine),"",plstVariables)
				
			}
		}
		quit:idLine'=""
	}
	quit plstVariables
	
 	
]]></Routine>
</Export>