<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INReqIssueSummary" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include COMSYS
#include COMConst
#include INConst
#include %occInclude
#include WWWConst



CreateIssue(pidReq, &strStatus)
	;-------------------------------------------------------------------------------
	;	Creates an INIssue, INIssueSummary from the selected INReq
	;	
	; Called By :
	;	CreateIssue^INReqIssueAsReq
	;	create a new header and assign the line to it if one is not already present
	;		
	; Inputs : 
	;	pidReq		-	INReq ID
	;	
	;
	; ByRef :
	;
	; Returns :
	;
	;
	; History :
	; 15-Aug-2012	PPP		SR18081: Created
	;-------------------------------------------------------------------------------
	new idReqLn
	new objReqLine
	new objIssLine
	new idLine
	new idItem
	new idIssue
	new objResultSet
	
	set strStatus = $$$OK
		
	set idIssue = $$CreateIssueHeader(pidReq, .strStatus)

	if $$$ISOK(strStatus) {
		
		//Create Issue Lines
		set idReqLn = ""
		for {
			
			quit:$$$ISERR(strStatus)
			
			set idReqLn = $order(^INReqLine(0,pidReq,idReqLn))
			quit:idReqLn=""
			
			set objReqLine = $get(^INReqLine(0,pidReq,idReqLn,1))
			
			;HEVA-1142 vvvv
			if ($$$INReqLineItem(objReqLine) '= ""){
				set objINART = $get(^INART(0,$$$INReqLineItem(objReqLine),1))
				if (objINART '= "") {
					continue:($$$INARTHoldReason(objINART) = $$$YES) //Inactive item
				}
			}
			;HEVA-1142 ^^^^
			
			continue:$$$INReqLineCancelled(objReqLine)
			continue:$$$INReqLineRejected(objReqLine)
			
			if $$$INReqLineQtyRequired(objReqLine) > $$$INReqLineQtyIssued(objReqLine) {
				
				set objIssLine = ""

				set ($$$INIssueSummaryItem(objIssLine),idItem) 	= $$$INReqLineItem(objReqLine)
				set $$$INIssueSummaryUnit(objIssLine)      		= $$$INReqLineUnit(objReqLine)
				set idBaseUnit = $$$INARTUnitofMeasure($get(^INART(0,idItem,1)))

				set fltQtyRequired     	= $$$INReqLineQtyRequired(objReqLine) - $$$INReqLineQtyIssued(objReqLine)
				set fltQtyInUnits 		= $$Convert^INUOMConversion(
															idItem,
															fltQtyRequired,
															idBaseUnit,
															$$$INReqLineUnit(objReqLine),
															$$$YES)

				
				set $$$INIssueSummaryUnitQuantity(objIssLine) 	= fltQtyInUnits

				set fltQtyInBase 		= $$Convert^INUOMConversion(
															idItem,
															fltQtyInUnits,
															$$$INReqLineUnit(objReqLine),
															idBaseUnit,
															$$$YES)

				set $$$INIssueSummaryBaseQuantity(objIssLine)   = fltQtyInBase

				set objResultSet = ##class(%Library.ResultSet).%New()
				do objResultSet.Prepare("SELECT ID FROM SQLUser.INDRPDEMAND WHERE %upper(DemandType) = 7 AND %upper(RequisitionNumber) = ? AND %upper(Reference) = ?")
				set sc = objResultSet.Execute(pidReq, idReqLn)
				if objResultSet.Next(.sc) {
					set objDemand = ##class(User.INDRPDEMAND).%OpenId(objResultSet.Get("ID"))
					if '$$$ISERR(objDemand) {
						set $$$INIssueSummaryDemand(objIssLine)  = objDemand.DemandNo
					}
				}
				set $$$INIssueSummaryReferenceLine(objIssLine)  = pidReq_","_idReqLn

		 		set idLine = $i(idLine)	 		
	 			set strStatus = $$$Save("INIssueSummary", idIssue_","_idLine,objIssLine,$$$YES)
		
			}
		
		}
		
		
	}


	quit idIssue


CreateIssueHeader(pidReq, &strStatus)
	;-------------------------------------------------------------------------------
	;	Creates an INIssue, Header
	;	
	;		
	; Inputs : 
	;	pidReq		-	INReq ID
	;	
	; ByRef :
	;
	; Returns :Status
	;
	;
	; History :
	; 15-Aug-2012	PPP		SR18081: Created
	;-------------------------------------------------------------------------------
	new objIssue
	new idToLocn
	new idIssue 
	new objReq 
	
	set strStatus = $$$OK
	
 	set objReq = $get(^INReq(0,pidReq,1))
 	
	set objIssue 	= ""
	set $$$INIssueFromLocn(objIssue) 	= $get(YLOCATION)

	set idToLocn 						= $$$INReqToLocn(objReq)
	if idToLocn '= "" {
		set $$$INIssueToLocn(objIssue)	= idToLocn
	}

	set $$$INIssueDemandType(objIssue) 	= 7					//Requisition
	set $$$INIssueType(objIssue)     	= $$$INReqType(objReq)
	set $$$INIssueReference(objIssue)	= pidReq
	set $$$INIssueProgram1(objIssue)    = $$$INReqProgram1(objReq)
	set $$$INIssuePriority(objIssue)    = $$$INReqPriority(objReq)
	set $$$INIssueStatus(objIssue)   	= 1
	set $$$INIssueCreatedOn(objIssue)   = +$horolog
	set $$$INIssueCreatedBy(objIssue)   = $get(YBED)

 	set idIssue = $$^WWWNEXT("INIssue")
 	set strStatus = $$$Save("INIssue",idIssue,objIssue,$$$YES)

	quit idIssue


CanPick(pidIssue,pYFELD)
	;-------------------------------------------------------------------------------
	; Description : Determines if Button should be enabled
	;			
	; Called By : INIssue FORMSPEC - Button(2) Pick
	;
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 25-Mar-2013	SCR		HEVA-811: Check for null pidIssue
	; 06-Mar-2013	SCR		HEVA-811: Check BOH.
	; 15-Aug-2012	PPP		SR18081: Created
	;-------------------------------------------------------------------------------
	new strStatus,idLn,objLine,objIssue,idFromLoc,fltSumQty,fltBOHQty,idItem,objVORG
	new objReqLine,idReq,idReqLine,blnLess,blnMore
	
	set strStatus = $$$OK
	
	; HEVA-811 vvvv
	if pidIssue="" {
			$$$YQHandler(strStatus)
			quit
	}
	; HEVA-811 ^^^^

	if $data(^INIssueLine(0,pidIssue)) {
		set strStatus = $$$MakeStatus("IN01335")    ; "Pick List has been generated"
	} else {
		if ($$$INIssueStatus(pYFELD) > 1) {
			set strStatus = $$$MakeStatus("IN01333")    ; "Invalid Operation for Current Status."			
		}
	}
	; HEVA-811 vvvv
	if strStatus = $$$OK {
		set objIssue 	= $get(^INIssue(0,pidIssue,1))
		set idFromLoc	= $$$INIssueFromLocn(objIssue)
		set objVORG		= $get(^INVORG(YM,YM,1))
		set blnMore		= $$$INVORGIssueMorethantheRequested(objVORG)
		set blnLess		= $$$INVORGIssueLessthantheRequested(objVORG)
		set idLn 		= ""
		for {
			
			quit:$$$ISERR(strStatus)
			
			set idLn = $order(^INIssueSummary(0,pidIssue,idLn))
			quit:idLn=""
			
			set objLine 	= $get(^INIssueSummary(0,pidIssue,idLn,1))
			set idItem		= $$$INIssueSummaryItem(objLine)
			set fltSumQty	= $$$INIssueSummaryUnitQuantity(objLine)
			set fltBOHQty 	= ##class(alSOH.iSOH).GetQtyOnHand(idItem,idFromLoc,"",$$$YES) ;dont include blocked items
			set idReq		= $$$KEY1($$$INIssueSummaryReferenceLine(objLine))
			set idReqLine	= $$$KEY2($$$INIssueSummaryReferenceLine(objLine))
			set objReqLine	= $get(^INReqLine(YM,idReq,idReqLine,1))
			set fltReqQty	= $$$INReqLineQtyOrdered(objReqLine) - $$$INReqLineQtyIssued(objReqLine)
			if (fltSumQty > fltReqQty) &&'blnMore {
				set strStatus = $listbuild("IN01406",fltSumQty,fltReqQty,idLn)  ;Quantity (%1) can not be greater thanl Requested Quantity (%2) Line (%3)
			}
			if (fltSumQty < fltReqQty) &&'blnLess {
				set strStatus =  $listbuild("IN01407",fltSumQty,fltReqQty,idLn)  ;Pick Quantity (%1) can not be less than Requested Quantity (%2) Line (%3)
			}
			if (fltSumQty > fltBOHQty) {  
				set strStatus = $listbuild("IN01403",fltSumQty,fltBOHQty,idLn)  ;Quantity (%1) can not be greater than BOH (%2) Line (%3) 
			}

		}		
		
	}
	; HEVA-811 ^^^^
	
	$$$YQHandler(strStatus)
	
	quit

CreatePick(pidIssue)
	;-------------------------------------------------------------------------------	
	; Creation of the PickList Lines
	;
	; Params:	pidIssue	- ISsue
	;
	; Returns:	
	;
	; History:
	; 15-Aug-2012	PPP		SR18081: Created
	;-------------------------------------------------------------------------------	
	new strStatus,intPage
	new objIssue
	
	set strStatus = $$$OK
	 			 
	//Print the PickList Report
	//If Pick Lines exist only print the Pick List Report
	if '$data(^INIssueLine(0,pidIssue)) {
		
		set objIssue = $get(^INIssueLine(0,pidIssue,1))
		do CanPick(pidIssue, objIssue)
		 
		if YQ = $$$YQEnable {
			set strStatus = $$Transaction^COMTransaction("CreatePickTxn^INReqIssueSummary("""_pidIssue_""")",$$$YES)
			
			if $$$ISOK(strStatus) {  //If a Scanning Form then clearout IssueQty
				if $$IsScanReq^WWW120Scan("INIssueLine") {
					set strStatus = $$Transaction^COMTransaction("ClearIssueQty^INReqIssueAsReq("""_pidIssue_""")",1)
				}
	 			
				//if $$$ISOK(strStatus) {  ; Print the PickList Report (HTML)	
				//	set strStatus = $$PrintPickList^MEDDispensePickList(pidDispense)
				//}
			}
	 		
		} else {
			do ReturnError^COMUtils($$$YQMessage)
		}
		
	//} else {     ; Print the PickList Report
	//	set strStatus = $$PrintPickList^MEDDispensePickList(pidDispense)
	}
	
	if (+$$$WWWClientParamCoreChangesHEVA($get(^WWWClientParam(YM,YM,1)))) ||
		(+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))){
		if $$$ISOK(strStatus) {
			do UpdatePickPrinted^INIssuePrint(pidIssue)
			if ($$IsListPrinted^VARINIssue(pidIssue))  {
				do RunReportListaSeparacao^VARTCIJasperRunReport(pidIssue)
				quit
			}
		}
	}

	if $$$ISOK(strStatus) {
		; HEVA-811 vvvv
		set intPage	= 2
		set:$$HideTab2^INIssueSummary(pidIssue) intPage = 1
		do GoToForm^COMUtilForm("INIssue",pidIssue,intPage)		//Go to Tab 2 (Pick)
		;do GoToForm^COMUtilForm("INIssue",pidIssue,2)		//Go to Tab 2 (Pick)
		; HEVA-811 ^^^^
	}

	quit strStatus

CreatePickTxn(pidIssue)
	;-------------------------------------------------------------------------------
	;	Create the Pick Lines INIssueLine using INIssueSummary
	;	
	; Called By :
	;	(Button)Pick (FORMSPEC) INIssue
	;		
	; Inputs : 
	;	pidIssue		-	INIssue ID
	;	
	;
	; ByRef :
	;
	; Returns :
	;
	;
	; History :
	; 27-Jun-2013	SCR		CORE-131: Use source line number
	; 15-Aug-2012	PPP		SR18081: Created
	;-------------------------------------------------------------------------------
	new strStatus
	new objIssue
	new idLocn
	new idToLocn
	new idPickLine 
	new idLn
	new objLine
	
	set strStatus = $$$OK
	set objIssue 	= $get(^INIssue(0,pidIssue,1))
	set idLocn 		= $$$INIssueFromLocn(objIssue)
	set idToLocn 	= $$$INIssueToLocn(objIssue)
	
	set idPickLine = 0
	
	if $$$ISOK(strStatus) {
	
		if '$data(^INIssueLine(0,pidIssue)) {


			//Create Issue Pick Lines
			set idLn = ""
			for {
			
				quit:$$$ISERR(strStatus)
			
				set idLn = $order(^INIssueSummary(0,pidIssue,idLn))
				quit:idLn=""
			
				set objLine = $get(^INIssueSummary(0,pidIssue,idLn,1))
			
				if $$$INIssueSummaryBaseQuantity(objLine) > 0 {
					;set strStatus = $$CreateIssueLine(pidIssue,idLocn,idToLocn,objLine,$increment(idPickLine))
					set strStatus = $$CreateIssueLine(pidIssue,idLocn,idToLocn,objLine,idLn) ; CORE-131 use source line number
				}
		
			}
			
			if $$$ISOK(strStatus) {
				set $$$INIssuePickTimestamp(objIssue) = $horolog
				set $$$INIssuePickUser(objIssue) = $get(YBED)
				set strStatus = $$$Save("INIssue",pidIssue,objIssue,$$$YES)
			}
		
		}
	
	}
	
	quit strStatus
	

CreateIssueLine(pidIssue,pidLocn,pidToLocn,pobjLine,pidLine)
	;-------------------------------------------------------------------------------
	; This process generates the INIssueLines for the Issue
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 
	; 17-Jun-2013	SCR		CORE-94: Add Reservations
	; 15-Aug-2012	PPP		SR18081: Created
	;-------------------------------------------------------------------------------
	new blnNotFirst,fltOutstanding,fltQty,fltQtyIssued,idItem,idLn,idToStorage
	new loopStock,lstAvailableIssues,objBundle,objINIssueLine,objStorage,strStatus
	new idBaseUnit
	new idDemand
	new idRefLn,objReservation
	
	set strStatus = $$$OK
	
 	set idItem      = $$$INIssueSummaryItem(pobjLine)
 	set fltQty      = $$$INIssueSummaryBaseQuantity(pobjLine)
	set idDemand	= $$$INIssueSummaryDemand(pobjLine)
	set idRefLn		= $piece($$$INIssueSummaryReferenceLine(pobjLine),",",2)	//Get only the Line #
 	set idToStorage = $$GetStorage^INIssueAuto(idItem,pidToLocn)
	set idBaseUnit 	= $$$INARTUnitofMeasure($get(^INART(0,idItem,1)))
 	set blnNotFirst = $$$NO
 	
 	set fltOutstanding = fltQty
 	
	set lstAvailableIssues = ##class(alDRP.iDRP).SourceIssue(idItem,pidLocn,fltQty)
 	
	if lstAvailableIssues.Count() > 0 {
		for loopStock=1:1:lstAvailableIssues.Count() {
			quit:$$$ISERR(strStatus)
			
			set objItem      = lstAvailableIssues.GetAt(loopStock).Item ; CORE-94
			set objStorage   = lstAvailableIssues.GetAt(loopStock).Storage
			set objBundle    = lstAvailableIssues.GetAt(loopStock).Bundle
			set fltQtyIssued = lstAvailableIssues.GetAt(loopStock).QtyToIssue
			
			set objINIssueLine = ""
			 			
			; CORE-94 vvvv
			set objReservation = ##class(alDRP.dPlannedMovement).%New()
			set objReservation.MovementType = ##class(alDRP.dMovementType.Issue).%New()
			set objReservation.Item         = objItem
			set objReservation.FromLocn     = objStorage.Location
			set objReservation.FromStorage  = objStorage
			set objReservation.ToLocn       = pidToLocn
			set objReservation.ToStorage    = $$GetStorage^INIssueAuto(idItem,pidToLocn)
			set objReservation.Bundle       = objBundle
			set objReservation.QtyRequired  = fltQtyIssued
			set objReservation.Reference    = pidIssue
			set objReservation.LineNumber   = pidLine
			
			set sc = objReservation.ChangeState(3)
			if '$$$ISOK(sc) {
				set strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
				quit
			}
			; CORE-94 ^^^^
			set $$$INIssueLineStatus(objINIssueLine)      	= 1				
			set $$$INIssueLineQtyRequired(objINIssueLine) 	= fltQty
			set $$$INIssueLineQtyIssued(objINIssueLine)   	= fltQtyIssued
			set $$$INIssueLineItem(objINIssueLine)        	= idItem
			set $$$INIssueLineUnit(objINIssueLine)        	= idBaseUnit
			set $$$INIssueLineToStorage(objINIssueLine)   	= idToStorage
			set $$$INIssueLineFromStorage(objINIssueLine) 	= objStorage.Code
			set $$$INIssueLineBundle(objINIssueLine)      	= objBundle.%Id()
			set $$$INIssueLineReference(objINIssueLine)   	= idRefLn
			set $$$INIssueLineDemand(objINIssueLine)   		= idDemand
			
			if blnNotFirst = $$$YES {
				set idLn    = $increment(idLn)
				set pidLine = (pidLine\1)_"."_idLn
			} else {
				set blnNotFirst = $$$YES
			}
			
			set strStatus = $$$Save("INIssueLine",pidIssue_","_pidLine,objINIssueLine,$$$YES)
			set fltOutstanding = fltOutstanding - fltQtyIssued
		}
	}
	
	//Blank Lines for remaining Qty
	if fltOutstanding>0 {
		quit:$$$ISERR(strStatus)			; EARLY EXIT
		
		set objINIssueLine = ""
		set $$$INIssueLineStatus(objINIssueLine)      	= 1				
		set $$$INIssueLineQtyRequired(objINIssueLine) 	= fltQty
		set $$$INIssueLineQtyIssued(objINIssueLine)   	= fltOutstanding
		set $$$INIssueLineItem(objINIssueLine)        	= idItem
		set $$$INIssueLineUnit(objINIssueLine)        	= idBaseUnit
		set $$$INIssueLineToStorage(objINIssueLine)   	= idToStorage
		set $$$INIssueLineReference(objINIssueLine)   	= idRefLn
		set $$$INIssueLineDemand(objINIssueLine)   		= idDemand
		
		if blnNotFirst = $$$YES {
			set idLn = $increment(idLn)
			set pidLine = (pidLine\1)_"."_idLn
		} else {
			set blnNotFirst = $$$YES
		}
		set strStatus = $$$Save("INIssueLine",pidIssue_","_pidLine,objINIssueLine,$$$YES)	
	}
	
	quit strStatus
	
	
]]></Routine>
</Export>