<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINAPHCInvoiceTransaction" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINAPHCInvoiceTransaction ;AP Invoice Transaction Health Check
	#Include FINHC
	#define Check "^CacheTemp(YUSER,""FINAPHCInvoiceTransaction"")"
	
CheckBatchLinesZCRC(StartDate="",EndDate="",Location="",Level="",Result,blnStandAlone=$$$NO)
	;-------------------------------------------------------------------------------
	; Creates a checksum of FININTBatchLine that should create FINAPInvoiceTran
	;
	; Returns:
	;
	; History:
	; 12-Aug-2004	GRF		ALWAYS macro
	; 15-Jun-2004	shobby	Doesn't need to be posted.
	; 21-May-2004	shobby	Creation
	;-------------------------------------------------------------------------------
	new Depth,Amt,Hash,HashValue
	new idBatch,idLine,idSupplier,objFININTBatch,objFINAPInvoice,arrTypes,strType
	new idSupplierEx,idSupplierLast,objFININTBatchLine
	
	kill Result  				; Clear Result
	if 'blnStandAlone kill @$$$Check
	if $get(Y)="" d ^WWWVAR
	set Depth=$length(Level) 	; Set the detail depth
	
	do GetInterfaceTypes^FINARHCInvoice("AP",.arrTypes)
	set strType=""
	for {
		set strType=$order(arrTypes(strType))
		quit:strType=""
		
		set idSupplier=Level	; Set the idFINGLAccount to Start at the Level ( Optimisation )
		
		if (idSupplier'="")&&($data(^FININTBatchLines(YM,2,strType,idSupplier))) {	; If the Start Account exsits, go back one
			set idSupplier=$order(^FININTBatchLines(YM,2,strType,idSupplier),-1) 	
		}
		
		for {											; Start of the Loop
			set idSupplier=$order(^FININTBatchLines(YM,2,strType,idSupplier))
			quit:idSupplier=""
			
			if $extract(idSupplier,1,Depth)'=Level {  					; If the Supplier is outside the Level
				if (+Level'=Level)||(+idSupplier'=idSupplier) { 	; If it is a String Quit
					quit
				} else { 			; Do number checking
					set idSupplierLast=idSupplier
					; Pad out the Number with zeros
					; Example if the Level is 13 Check 13, 130, 1300, 13000 etc.
					set idSupplier=Level_$translate($justify("",$Length(idSupplier)-Depth)," ","0")
					if idSupplierLast>idSupplier set idSupplier=idSupplier_"0" ; If the Supplier is Greater than the Level add an zero.
					; If the Account exists, go back one
					if (idSupplier'="")&&($data(^FININTBatchLines(YM,2,strType,idSupplier))) set idSupplier=$order(^FININTBatchLines(YM,2,strType,idSupplier),-1)
				}
			} else {				; Record the Info
				set idBatch=""
				for {
					set idBatch=$order(^FININTBatchLines(YM,2,strType,idSupplier,idBatch))
					quit:idBatch=""
					
					set idLine=""
					set objFININTBatch=$get(^FININTBatch(YM,idBatch,1))
					if $$$ALWAYS { ;$$$FININTBatchPostedDate(objFININTBatch)'="" {
						for {
							set idLine=$order(^FININTBatchLines(YM,2,strType,idSupplier,idBatch,idLine))
							quit:idLine=""
							
							set idSupplierEx=idSupplier
							set objFININTBatchLine=$get(^FININTBatchLine(YM,idBatch,idLine,1))
							set idSupplierEx=$$$FININTBatchLineReference(objFININTBatchLine)
							set $piece(@$$$Check@(idSupplierEx,idBatch,idLine),Y,1)=$$$FININTBatchLineAmount(objFININTBatchLine)
						}
					}
				}
			}
		}
	}
	do CreateHashTable(1,.Result,Depth)
	Quit 1

CheckTransactionsZCRC(StartDate="",EndDate="",Location="",Level="",Result,blnStandAlone=$$$NO)
	;-------------------------------------------------------------------------------
	; Creates a checksum of FINAPInvoiceTran that have been created by FININTBatchLine
	;
	; Returns:
	;
	; History:
	; 21-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
	new Depth,Amt,Hash,HashValue
	new idBatch,idLine,idSupplier,objFININTBatch,objFINAPInvoice,idInvoice,idNumber
	new objFINAPInvoiceTran,idSupplierLast
	
	kill Result  				; Clear Result
	if 'blnStandAlone kill @$$$Check
	if $get(Y)="" d ^WWWVAR
	set Depth=$length(Level) 	; Set the detail depth
	set idSupplier=Level	; Set the idFINGLAccount to Start at the Level ( Optimisation )
	
	if (idSupplier'="")&&($data(^FINAPInvoiceTran(YM,idSupplier))) {	; If the Start Account exsits, go back one
		set idSupplier=$order(^FINAPInvoiceTran(YM,idSupplier),-1) 	
	}
	
	for {											; Start of the Loop
		set idSupplier=$order(^FINAPInvoiceTran(YM,idSupplier))
		quit:idSupplier=""
		
		if $extract(idSupplier,1,Depth)'=Level {  					; If the Supplier is outside the Level
			if (+Level'=Level)||(+idSupplier'=idSupplier) { 	; If it is a String Quit
				quit
			} else { 			; Do number checking
				set idSupplierLast=idSupplier
				; Pad out the Number with zeros
				; Example if the Level is 13 Check 13, 130, 1300, 13000 etc.
				set idSupplier=Level_$translate($justify("",$Length(idSupplier)-Depth)," ","0")
				if idSupplierLast>idSupplier set idSupplier=idSupplier_"0" ; If the Supplier is Greater than the Level add an zero.
				; If the Account exists, go back one
				if (idSupplier'="")&&($data(^FINAPInvoiceTran(YM,idSupplier))) set idSupplier=$order(^FINAPInvoiceTran(YM,idSupplier),-1)
			}
		} else {				; Record the Info
			set idInvoice=""
			for {
				set idInvoice=$order(^FINAPInvoiceTran(YM,idSupplier,idInvoice))
				quit:idInvoice=""
				
				set idNumber=""
				for {
					set idNumber=$order(^FINAPInvoiceTran(YM,idSupplier,idInvoice,idNumber))
					quit:idNumber=""
					
					set objFINAPInvoiceTran=$get(^FINAPInvoiceTran(YM,idSupplier,idInvoice,idNumber,1))
					set idBatch=$$$FINAPInvoiceTranInterfaceBatch(objFINAPInvoiceTran)
					set idLine=$$$FINAPInvoiceTranInterfaceBatchLine(objFINAPInvoiceTran)
					set $piece(@$$$Check@(idSupplier,idBatch,idLine),Y,2)=$$$FINAPInvoiceTranTransactionAmount(objFINAPInvoiceTran)
				}
				
			}
		}
	}
	do CreateHashTable(2,.Result,Depth)
	Quit 1
	
CreateHashTable(pstrType,Result,Depth)
    ;-------------------------------------------------------------------------------
    ; Turn the table sorted by Batch and Line into a Hash Table
    ;
    ; Returns:
    ;
    ; History:
    ; 21-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new idSupplier,idBatch,idLine,Hash,HashValue
	set idSupplier=""
	for {
		set idSupplier=$order(@$$$Check@(idSupplier))
		quit:idSupplier=""
		
		set idBatch=""
		for {
			set idBatch=$order(@$$$Check@(idSupplier,idBatch))
			quit:idBatch=""
			
			set idLine=""
			for {
				set idLine=$order(@$$$Check@(idSupplier,idBatch,idLine))
				quit:idLine=""
				
				if $piece(@$$$Check@(idSupplier,idBatch,idLine),Y,pstrType)=1 {
					set Result("Total")=$get(Result("Total"))+1
					set Hash=$extract(idSupplier,1,Depth+1)
					if Hash="" set Hash="?"
					set HashValue=$zcrc(idSupplier_"="_idBatch_","_idLine,7)
					set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
				}
			}
		}
	}
	Quit 1
	
Check(StartDate="",EndDate="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; Compare the results of the Two Part checks above.  Used if there is a problem.
    ;
    ; Returns:
    ;
    ; History:
    ; 24-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new strStatus,idSupplier,idBatch,idLine,fltAmount
	
	if $get(Y)="" d ^WWWVAR
	set strStatus=$$$OK
	kill @$$$Check
	kill Result

	do CheckTransactionsZCRC(StartDate,EndDate,Location,Level,.Result,$$$YES)
	do CheckBatchLinesZCRC(StartDate,EndDate,Location,Level,.Result,$$$YES)
	kill Result

	set idSupplier=""
	for {
		set idSupplier=$order(@$$$Check@(idSupplier))
		quit:idSupplier=""
		
		set idBatch=""
		for {
			set idBatch=$order(@$$$Check@(idSupplier,idBatch))
			quit:idBatch=""
			
			set idLine=""
			for {
				set idLine=$order(@$$$Check@(idSupplier,idBatch,idLine))
				quit:idLine=""
				
				;break:((idBatch=1156)&&(idLine=42))
				set fltAmount("BatchLine")  =$piece($get(@$$$Check@(idSupplier,idBatch,idLine)),Y,1)
				set fltAmount("InvoiceTran")=$piece($get(@$$$Check@(idSupplier,idBatch,idLine)),Y,2)
				if +fltAmount("BatchLine")'=+$$$FCSign(fltAmount("InvoiceTran")) { ;Sign change for suppliers
					if fltAmount("InvoiceTran")="" {
						set Result("Hash","Error No. "_$translate($justify($i(Result("Errors")),3)," ","0"))="Invoice Transaction for ^FININTBatchLine("_YM_YKOMMA_idBatch_YKOMMA_idLine_YKOMMA_"1) is missing."
					} elseif fltAmount("BatchLine")="" {
						set Result("Hash","Error No. "_$translate($justify($i(Result("Errors")),3)," ","0"))="^FININTBatchLine("_YM_YKOMMA_idBatch_YKOMMA_idLine_YKOMMA_"1) is missing."
					} else {
						set Result("Hash","Error No. "_$translate($justify($i(Result("Errors")),3)," ","0"))="Amounts do not match. ^FININTBatchLine("_YM_YKOMMA_idBatch_YKOMMA_idLine_YKOMMA_"1)="_fltAmount("BatchLine")_", Invoice Transaction="_fltAmount("InvoiceTran")_"."
					}
					set strStatus='$$$OK
				}
			}
		}
	}

	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}
	
	kill @$$$Check
	quit strStatus
	
]]></Routine>
</Export>