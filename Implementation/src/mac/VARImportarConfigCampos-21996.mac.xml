<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARImportarConfigCampos" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARImportarConfigCampos

    #include COMSYS
    #include VARConst
    
    
OnAfterDataFields(pYKEY)
	
	quit:(pYKEY = "")

	do MontarGridDetalheCampos(pYKEY)
	do MontarGridPreview(pYKEY)

	quit



MontarGridDetalheCampos(pYKEY)


	new count, lstHeader, idConfig, idCampos
	
	set count     = 0
	set idConfig  = $$$KEY1(pYKEY)
	set objConfig = $G(^VARImportarConfig(YM,idConfig,1))
	set Classe    = $$$VARImportarConfigClasseDestino(objConfig)

 	set lstHeader = ""
  	set lstHeader = lstHeader_$listbuild("Seq.","Campo<br>&nbsp&nbsp&nbspOrigem","CP","Campo Destino","Tipo","Rotina para Formatar","Rotina para Validar")
  	set Titulo    = "Origem: Arquivo<br>Destino: Classe "_Classe
  	
  	if $$Start^COMTable(lstHeader,Titulo,,,$$$NO) {

		$$$Order3(^VARImportarConfigCampos,YM,idConfig,idCampos)
				
			set objCampos = $G(^VARImportarConfigCampos(YM,idConfig,idCampos,1))		
			
			set count = $i(count)
			
			set PosCampoOrigem   = $$$VARImportarConfigCamposPosicaoCampoOrigem(objCampos)
			set CampoDestinoEhPK = $$$VARImportarConfigCamposCampoDestinoChavePrimaria(objCampos)
			set RotinaFormatar   = $$$VARImportarConfigCamposRotinaFormatarEntrada(objCampos)
			set RotinaValidar    = $$$VARImportarConfigCamposRotinaValidarEntrada(objCampos)
			
			set chave  = idConfig_","_idCampos
			set pYPARA = Classe
		
			do NewLine^COMTable()
			do InsertCell^COMTable(idCampos,"VARImportarConfigCampos",chave,pYPARA,"CENTER")
			do InsertCell^COMTable(PosCampoOrigem,"VARImportarConfigCampos",chave,pYPARA,"CENTER")
			if CampoDestinoEhPK {
				set CampoDestino     = $$$VARImportarConfigCamposChavePrimariaDestino(objCampos)
				set DescCampoDestino = $$GetDescChavePrimaria(Classe,CampoDestino)
				set TipoCampoDestino = $$GetTipoChavePrimaria(Classe,CampoDestino)
				do InsertCell^COMTable("#",,,,"CENTER")
			}
			else{
				set CampoDestino     = $$$VARImportarConfigCamposCampoDestino(objCampos)
				set DescCampoDestino = $$GetDescCampo(Classe,CampoDestino)	
				set TipoCampoDestino = $$GetTipoCampo(Classe,CampoDestino)
				do InsertCell^COMTable("",,,,"CENTER")
			}				
			
			do InsertCell^COMTable("("_CampoDestino_") "_DescCampoDestino,"VARImportarConfigCampos",chave,pYPARA)
			do InsertCell^COMTable(TipoCampoDestino,"VARImportarConfigCampos",chave,pYPARA)
			do InsertCell^COMTable(RotinaFormatar,"VARImportarConfigCampos",chave,pYPARA)
			do InsertCell^COMTable(RotinaValidar,"VARImportarConfigCampos",chave,pYPARA)
			do EndLine^COMTable()
			
		$$$End
		
		if (count = 0) {
			do NewLine^COMTable()
			do InsertCell^COMTable("Nenhum campo definido para a configuração atual.",,,,,,7)
			do EndLine^COMTable()
		}
		
		do Stop^COMTable()
		
  	}


	quit    
	
	
MontarGridPreview(pYKEY)
    
    ;Monta a grid com as colunas da tabela escolhida e com o exemplo do arquivo de origem para analizar se está tudo ok
    
    quit:pYKEY=""
    
	set idConfig  = $$$KEY1(pYKEY)
	set objConfig = $G(^VARImportarConfig(YM,idConfig,1))
	set Classe    = $$$VARImportarConfigClasseDestino(objConfig)
	
    ;Se o usuário não tiver configurado ainda os campos para importação, cai fora.
    if '$D(^VARImportarConfigCampos(YM,idConfig)){
        quit
    }
    
    ;Se não existir a classe (Tabela) escolhida pelo usuário, cai fora.
    if '$D(^WWW001(YM,Classe)){
        quit
    }
    
    set ListaChaves = ""
    set TipoChaves  = ""
    set Sep         = ""
    
    ;Popula uma lista com as Chaves Primárias da Classe
    set idChavePrimaria = ""
    for {
        set idChavePrimaria=$order(^WWW002(YM,Classe,idChavePrimaria))
        quit:idChavePrimaria=""
        set objWWW002   = $G(^WWW002(YM,Classe,idChavePrimaria,1))
        set ListaChaves = ListaChaves_Sep_"# "_$$$WWW002TextInForms(objWWW002)
        set TipoChaves  = TipoChaves_Sep_$$$WWW002InputType(objWWW002)
        set Sep         = Y
    }

	set QtdeChavesPrimarias  = $length(ListaChaves,Y)
	
    set ListaCampos = ""
    set TipoCampos  = ""
    set Sep         = ""
    
    ;Popula uma lista com os Campos da Classe
    set idCampos = ""
    for {
        set idCampos=$order(^WWW003(YM,Classe,idCampos))
        quit:idCampos=""
        set objWWW003 = $G(^WWW003(YM,Classe,idCampos,1))
        set ListaCampos = ListaCampos_Sep_$$$WWW003CaptionInForms(objWWW003)
        set TipoCampos  = TipoCampos_Sep_$$$WWW003InputType(objWWW003)
        set Sep         = Y
    }
    
   
    set ListaConfig     = ""
    set PosOrigemConfig = ""

    ;Popula uma lista com os Campos já configurados
    set idCampos = ""
    for {
    	set idCampos=$order(^VARImportarConfigCampos(YM,idConfig,idCampos))
    	quit:idCampos=""
    	set objCampos        = $G(^VARImportarConfigCampos(YM,idConfig,idCampos,1))
    	set CampoDestinoEhPK = $$$VARImportarConfigCamposCampoDestinoChavePrimaria(objCampos)
    	
		if CampoDestinoEhPK {
			set CampoDestino     = $$$VARImportarConfigCamposChavePrimariaDestino(objCampos)
			set DescCampoDestino = "# "_$$GetDescChavePrimaria(Classe,CampoDestino)
			set PosCampoOrigem   = $$$VARImportarConfigCamposPosicaoCampoOrigem(objCampos)
			set PosCampoDestino  = CampoDestino
			
		
		}
		else{
			set CampoDestino     = $$$VARImportarConfigCamposCampoDestino(objCampos)
			set DescCampoDestino = $$GetDescCampo(Classe,CampoDestino)	
			set PosCampoOrigem   = $$$VARImportarConfigCamposPosicaoCampoOrigem(objCampos)
			;Necessário somar o número de chaves primárias para colocar na posição correta
			set PosCampoDestino  = QtdeChavesPrimarias + CampoDestino
		}

		;Grava na posição correta a Descrição e o Tipo do campo
    	set $piece(ListaConfig,Y,PosCampoDestino)     = DescCampoDestino
    	set $piece(PosOrigemConfig,Y,PosCampoDestino) = PosCampoOrigem

   	
    }

    
    ;Monta Lista com Chaves Primárias e Campos da Tabela
    set ListaTabela = ListaChaves_Y_ListaCampos
    set ListaTipos  = TipoChaves_Y_TipoCampos
    
    set QtdeCampos  = $length(ListaTabela,Y)
    set Cabecalho   = ""
    set Sep         = ""
    
    ;Faz o FOR de acordo com a quantidade de campos da classe
    FOR i=1:1:QtdeCampos {
        set Cabecalho = Cabecalho_Sep_"Campo "_i
        set Sep       = Y
    }

    set lstHeader = ""
    
    set lstHeader = lstHeader_$ListFromString(ListaTabela)
    
    if $$Start^COMTable(lstHeader,"Campos da Classe de Destino escolhida:") {

        ;Insere os Tipos dos campos
        do NewLine^COMTable("white")
        ;Faz o FOR de acordo com a quantidade de campos da classe
        FOR i=1:1:QtdeCampos {
            set idTipo   = $piece(ListaTipos,Y,i)
            set DescTipo = $$$WWW100Text($get(^WWW100(0,"FELDTYP","PT",idTipo,1)))
            do InsertCell^COMTable(DescTipo)
        }
        do EndLine^COMTable()

        ;Insere uma linha em branco
        do NewLine^COMTable("lightgray")
        do InsertCell^COMTable("",,,,,,QtdeCampos)
        do EndLine^COMTable() 
                
        ;Insere uma linha como se fosse um novo cabeçalho
        do NewLine^COMTable("lightgray")
        do InsertCell^COMTable("<strong>Campos configurados:</strong>",,,,,,QtdeCampos)
        do EndLine^COMTable()                
		
        do NewLine^COMTable("buttonshadow")
        ;Faz o $ORDER para o cabeçalho dos campos já configurados, ou não configurados ainda
        FOR i=1:1:QtdeCampos {
            set DescCampo = $piece(ListaConfig,Y,i)
            if (DescCampo = ""){
	        	do InsertCell^COMTable("<strong>Não Configurado</strong>")   
            }
            else{
            	do InsertCell^COMTable("<strong>"_DescCampo_"</strong>")
            }
        }
        do EndLine^COMTable()


        do NewLine^COMTable("white")
        ;Faz o $ORDER para o tipo dos campos já configurados, ou não configurados ainda
        FOR i=1:1:QtdeCampos {
            set PosOrigem = $piece(PosOrigemConfig,Y,i)
            if (PosOrigem = ""){
	        	do InsertCell^COMTable("-",,,,"CENTER")   
            }
            else{
            	do InsertCell^COMTable("Pos. Orig. "_PosOrigem)
            }
        }
        do EndLine^COMTable()

        ;Insere uma linha em branco
        do NewLine^COMTable("lightgray")
        do InsertCell^COMTable("",,,,,,QtdeCampos)
        do EndLine^COMTable() 
        
        ;Insere uma linha como se fosse um novo cabeçalho
        do NewLine^COMTable("lightgray")
        do InsertCell^COMTable("<strong>Preview usando Exemplo do Arquivo de Origem:</strong>",,,,,,QtdeCampos)
        do EndLine^COMTable()                


		set ExArqOrigem   = $$$VARImportarConfigExemploArquivoOrigem(objConfig)

		if (ExArqOrigem = "") {
	        do NewLine^COMTable("white")
	        do InsertCell^COMTable("Exemplo de Arquivo de Origem não definido nas configurações.",,,,,,QtdeCampos)
	        do EndLine^COMTable()  			
		}
		else {

			set PrimeiraLinha = $$$VARImportarConfigPrimeiraLinhaCabecalho(objConfig)
			set Delimitador   = $CHAR($$$VARImportarConfigDelimitadorOrigem(objConfig))
			;Identifica quantas linhas tem no Exemplo do Arquivo de Origem usando o caracter pipe (|)
			set QtdeLinhas    = $length(ExArqOrigem,"|")
			set Linha1        = $piece(ExArqOrigem,"|",1) 
		
		
			do NewLine^COMTable("buttonshadow")
	        ;Faz o $ORDER para o cabeçalho do Exemplo de Arquivo de Origem
	        FOR i=1:1:QtdeCampos {
		        set PosOrigem = $piece(PosOrigemConfig,Y,i)
		        if (PrimeiraLinha = 1) {
		            set DescCampo = $piece(Linha1,Delimitador,PosOrigem)
		        }
		        else{
		            set DescCampo = "Campo "_PosOrigem
		        }
		        if PosOrigem = ""{
			    	do InsertCell^COMTable("<strong>"_"Não existem dados"_"</strong>")    
		        }
		        else{
	            	do InsertCell^COMTable("<strong>("_PosOrigem_") "_DescCampo_"</strong>")
		        }
 
	        }
	        do EndLine^COMTable()


			;Faz o FOR para cada linha do Exemplo de Arquivo de Origem
			FOR j=1:1:QtdeLinhas {
		
				if (PrimeiraLinha = 1)&&(j=1) {
					continue
				}
			
				set Linha = $piece(ExArqOrigem,"|",j)
			
				do NewLine^COMTable("white")
		        ;Faz o $ORDER para cada CAMPO de cada LINHA do Exemplo de Arquivo de Origem
		        FOR i=1:1:QtdeCampos {
			        set PosOrigem  = $piece(PosOrigemConfig,Y,i)
		            set ValorCampo = $piece(Linha,Delimitador,PosOrigem)
		            do InsertCell^COMTable(ValorCampo)
 
		        }
		        do EndLine^COMTable()
		
			}		

		}	;end else if (ExArqOrigem = "")
		
        do Stop^COMTable()  
    
    }
    
    
    quit   
    	
	
GetDescChavePrimaria(pClasse,pChavePrimaria)

	quit:pClasse=""
	quit:pChavePrimaria=""
	
	set DescChavePrimaria = ""
	
	set objWWW002         = $G(^WWW002(0,pClasse,pChavePrimaria,1))
	set DescChavePrimaria = $$$WWW002TextInForms(objWWW002)

    quit DescChavePrimaria
   

GetTipoChavePrimaria(pClasse,pChavePrimaria)

	quit:pClasse=""
	quit:pChavePrimaria=""
	
	set idTipoChavePrimaria   = ""
	set DescTipoChavePrimaria = ""
	
	set objWWW002             = $G(^WWW002(0,pClasse,pChavePrimaria,1))
	set idTipoChavePrimaria   = $$$WWW002InputType(objWWW002)
	set DescTipoChavePrimaria = $$$WWW100Text($get(^WWW100(0,"FELDTYP","PT",idTipoChavePrimaria,1)))

    quit DescTipoChavePrimaria


GetDescCampo(pClasse,pCampo)

	quit:pClasse=""
	quit:pCampo=""
	
	set DescCampo = ""
	
	set objWWW003 = $G(^WWW003(0,pClasse,pCampo,1))
	set DescCampo = $$$WWW003CaptionInForms(objWWW003)

    quit DescCampo
   

GetTipoCampo(pClasse,pCampo)

	quit:pClasse=""
	quit:pCampo=""
	
	set idTipoCampo   = ""
	set DescTipoCampo = ""
	
	set objWWW003     = $G(^WWW003(0,pClasse,pCampo,1))
	set idTipoCampo   = $$$WWW003InputType(objWWW003)
	set DescTipoCampo = $$$WWW100Text($get(^WWW100(0,"FELDTYP","PT",idTipoCampo,1)))

    quit DescTipoCampo


GetQtdeChavesPrimarias(pClasse)
	
	;Retorna a quantidade de chaves primárias de uma determinada classe
	
    set count = 0
    set idChavePrimaria = ""
    for {
        set idChavePrimaria=$order(^WWW002(YM,pClasse,idChavePrimaria))
        quit:idChavePrimaria=""
        set count = $increment(count)
    }

	quit count
	

GetListaPosicaoOrigem(pidConfig)

    ;Retorna uma lista com a posição do campo de origem para uma configuração de importação
    ;Ex: 2~5~3~6~4~1
    ;2~ Indica que o campo 1 (posição 1) da configuração deverá vir do campo 2 da origem
	;5~ Indica que o campo 2 (posição 2) da configuração deverá vir do campo 5 da origem
	;3~ Indica que o campo 3 (posição 3) da configuração deverá vir do campo 3 da origem
	;6~ Indica que o campo 4 (posição 4) da configuração deverá vir do campo 6 da origem
	;4~ Indica que o campo 5 (posição 5) da configuração deverá vir do campo 4 da origem
	;1~ Indica que o campo 6 (posição 6) da configuração deverá vir do campo 1 da origem
	    
    set ListaPosOrigem = ""
    
    set objImportarConfig = $G(^VARImportarConfig(YM,pidConfig,1))
    set Classe            = $$$VARImportarConfigClasseDestino(objImportarConfig)
    
    set QtdeChavesPrimarias = $$GetQtdeChavesPrimarias^VARImportarConfigCampos(Classe)

    set idCampos = ""
    for {
    	set idCampos=$order(^VARImportarConfigCampos(YM,pidConfig,idCampos))
    	quit:idCampos=""
    	set objCampos        = $G(^VARImportarConfigCampos(YM,pidConfig,idCampos,1))
    	set CampoDestinoEhPK = $$$VARImportarConfigCamposCampoDestinoChavePrimaria(objCampos)
    	
		if CampoDestinoEhPK {
			set CampoDestino     = $$$VARImportarConfigCamposChavePrimariaDestino(objCampos)
			set PosCampoOrigem   = $$$VARImportarConfigCamposPosicaoCampoOrigem(objCampos)
			set PosCampoDestino  = CampoDestino
		}
		else{
			set CampoDestino     = $$$VARImportarConfigCamposCampoDestino(objCampos)
			set PosCampoOrigem   = $$$VARImportarConfigCamposPosicaoCampoOrigem(objCampos)
			;Necessário somar o número de chaves primárias para colocar na posição correta
			set PosCampoDestino  = QtdeChavesPrimarias + CampoDestino
		}

		;Grava na posição de destino da lista, a posição em que deve buscar a informação no arquivo de origem
    	//set $piece(ListaPosOrigem,Y,PosCampoDestino) = PosCampoOrigem
    	set $piece(ListaPosOrigem,Y,idCampos) = PosCampoOrigem

   	
    }

	quit ListaPosOrigem	
	


GetListaPosicaoDestino(pidConfig)

    ;Retorna uma lista com a posição do campo de destino para uma configuração de importação
    ;Ex: 2~5~3~6~4~1
    ;2~ Indica que o campo 1 (posição 1) da configuração deverá ser gravado na posição 2 da VARImportarDestino
	;5~ Indica que o campo 2 (posição 2) da configuração deverá ser gravado na posição 5 da VARImportarDestino
	;3~ Indica que o campo 3 (posição 3) da configuração deverá ser gravado na posição 3 da VARImportarDestino
	;6~ Indica que o campo 4 (posição 4) da configuração deverá ser gravado na posição 6 da VARImportarDestino
	;4~ Indica que o campo 5 (posição 5) da configuração deverá ser gravado na posição 4 da VARImportarDestino
	;1~ Indica que o campo 6 (posição 6) da configuração deverá ser gravado na posição 1 da VARImportarDestino
	    
    set ListaPosDestino = ""
    
    set objImportarConfig = $G(^VARImportarConfig(YM,pidConfig,1))
    set Classe            = $$$VARImportarConfigClasseDestino(objImportarConfig)
    
    set QtdeChavesPrimarias = $$GetQtdeChavesPrimarias^VARImportarConfigCampos(Classe)

    set idCampos = ""
    for {
    	set idCampos=$order(^VARImportarConfigCampos(YM,pidConfig,idCampos))
    	quit:idCampos=""
    	set objCampos        = $G(^VARImportarConfigCampos(YM,pidConfig,idCampos,1))
    	set CampoDestinoEhPK = $$$VARImportarConfigCamposCampoDestinoChavePrimaria(objCampos)
    	
		if CampoDestinoEhPK {
			set CampoDestino     = $$$VARImportarConfigCamposChavePrimariaDestino(objCampos)
			set PosCampoDestino  = CampoDestino
			set Pos = CampoDestino
		}
		else{
			set CampoDestino     = $$$VARImportarConfigCamposCampoDestino(objCampos)
			;Necessário somar o número de chaves primárias para colocar na posição correta
			set PosCampoDestino  = QtdeChavesPrimarias + CampoDestino
			set Pos = QtdeChavesPrimarias + CampoDestino
		}

		;Grava na posição do campo da lista, a posição em que deve gravar a informação no arquivo de destino
    	set $piece(ListaPosDestino,Y,idCampos) = PosCampoDestino
    	//set $piece(ListaPosDestino,Y,Pos) = PosCampoDestino

		/*
		
			set PosCampoDestino  = CampoDestino
			set PosCampoOrigem   = QtdeChavesPrimarias + CampoDestino 
		}

		;Grava na posição do campo da lista, a posição em que deve gravar a informação no arquivo de destino
    	set $piece(ListaPosDestino,Y,PosCampoDestino) = PosCampoOrigem
		
		
		*/
   	
    }

	quit ListaPosDestino	


GetListaCamposDestino(pidConfig)

    ;Retorna uma lista com a posição dos campos de destino (sem chave primárias) para uma configuração de importação
    ;Ex: 6~4~1
	    
    set ListaPosDestino = ""
    
    set objImportarConfig = $G(^VARImportarConfig(YM,pidConfig,1))
    set Classe            = $$$VARImportarConfigClasseDestino(objImportarConfig)
    
    set QtdeChavesPrimarias = $$GetQtdeChavesPrimarias^VARImportarConfigCampos(Classe)

    set idCampos = ""
    for {
    	set idCampos=$order(^VARImportarConfigCampos(YM,pidConfig,idCampos))
    	quit:idCampos=""
    	set objCampos        = $G(^VARImportarConfigCampos(YM,pidConfig,idCampos,1))
    	set CampoDestinoEhPK = $$$VARImportarConfigCamposCampoDestinoChavePrimaria(objCampos)
    	
		if CampoDestinoEhPK {
			continue		
		}
		else{
			set CampoDestino     = $$$VARImportarConfigCamposCampoDestino(objCampos)
			;Necessário somar o número de chaves primárias para colocar na posição correta
			set PosCampoDestino  = CampoDestino
			set PosCampoOrigem   = QtdeChavesPrimarias + CampoDestino 
		}

		;Grava na posição do campo da lista, a posição em que deve gravar a informação no arquivo de destino
    	set $piece(ListaPosDestino,Y,PosCampoDestino) = PosCampoOrigem

   	
    }
    
	quit ListaPosDestino	


GetListaTitulosDestino(pidConfig)

    ;Retorna uma lista com os títulos dos campo de destino para uma configuração de importação
    ;Ex: Código~Descrição~Tipo~Status
	    
    set ListaTitulosDestino = ""
    
    set objImportarConfig = $G(^VARImportarConfig(YM,pidConfig,1))
    set Classe            = $$$VARImportarConfigClasseDestino(objImportarConfig)
    
    set QtdeChavesPrimarias = $$GetQtdeChavesPrimarias^VARImportarConfigCampos(Classe)

    set idCampos = ""
    for {
    	set idCampos=$order(^VARImportarConfigCampos(YM,pidConfig,idCampos))
    	quit:idCampos=""
    	set objCampos        = $G(^VARImportarConfigCampos(YM,pidConfig,idCampos,1))
    	set CampoDestinoEhPK = $$$VARImportarConfigCamposCampoDestinoChavePrimaria(objCampos)
    	
		if CampoDestinoEhPK {
			set CampoDestino       = $$$VARImportarConfigCamposChavePrimariaDestino(objCampos)
			set TituloCampoDestino = $$GetDescChavePrimaria(Classe,CampoDestino)
		}
		else{
			set CampoDestino       = $$$VARImportarConfigCamposCampoDestino(objCampos)
			set TituloCampoDestino = $$GetDescCampo(Classe,CampoDestino)
		}

		;Grava na posição do campo da lista, o título de destino
    	set $piece(ListaTitulosDestino,Y,idCampos) = TituloCampoDestino

   	
    }

	quit ListaTitulosDestino	


GetListaChavePrimariaOrigem(pidConfig)

    ;Retorna uma lista com a posição das chaves primárias de origem para uma configuração de importação
    ;Ex: 2~5~3
    ;2~ Indica que a chave primária 1 (posição 1) da configuração deverá vir do campo 2 da origem
	;5~ Indica que o chave primária 2 (posição 2) da configuração deverá vir do campo 5 da origem
	;3~ Indica que o chave primária 3 (posição 3) da configuração deverá vir do campo 3 da origem
	    
    set ListaPosOrigem = ""
    
    set objImportarConfig = $G(^VARImportarConfig(YM,pidConfig,1))
    set Classe            = $$$VARImportarConfigClasseDestino(objImportarConfig)
    
    set idCampos = ""
    for {
    	set idCampos=$order(^VARImportarConfigCampos(YM,pidConfig,idCampos))
    	quit:idCampos=""
    	set objCampos        = $G(^VARImportarConfigCampos(YM,pidConfig,idCampos,1))
    	set CampoDestinoEhPK = $$$VARImportarConfigCamposCampoDestinoChavePrimaria(objCampos)
    	
		if CampoDestinoEhPK {
			set CampoDestino     = $$$VARImportarConfigCamposChavePrimariaDestino(objCampos)
			set PosCampoOrigem   = $$$VARImportarConfigCamposPosicaoCampoOrigem(objCampos)
			set PosCampoDestino  = CampoDestino
		}

		;Grava na posição de destino da lista, a posição em que deve buscar a informação no arquivo de origem
    	set $piece(ListaPosOrigem,Y,PosCampoDestino) = PosCampoOrigem
   	
    }

	quit ListaPosOrigem	
	
	
GetListaCamposOrigem(pidConfig)

    ;Retorna uma lista com a posição dos campos de origem (sem chaves primárias) para uma configuração de importação
    ;Ex: 6~4~1
	    
    set ListaPosOrigem = ""
    
    set objImportarConfig = $G(^VARImportarConfig(YM,pidConfig,1))
    set Classe            = $$$VARImportarConfigClasseDestino(objImportarConfig)
    
    set idCampos = ""
    for {
    	set idCampos=$order(^VARImportarConfigCampos(YM,pidConfig,idCampos))
    	quit:idCampos=""
    	set objCampos        = $G(^VARImportarConfigCampos(YM,pidConfig,idCampos,1))
    	set CampoDestinoEhPK = $$$VARImportarConfigCamposCampoDestinoChavePrimaria(objCampos)
    	
		if CampoDestinoEhPK {
			continue
		}
		else{
			set CampoDestino     = $$$VARImportarConfigCamposCampoDestino(objCampos)
			set PosCampoOrigem   = $$$VARImportarConfigCamposPosicaoCampoOrigem(objCampos)
			set PosCampoDestino  = CampoDestino
		}

		;Grava na posição de destino da lista, a posição em que deve buscar a informação no arquivo de origem
    	set $piece(ListaPosOrigem,Y,PosCampoDestino) = PosCampoOrigem

   	
    }

	quit ListaPosOrigem	
	
	
OnBlurFormatarEntrada(pYINHALT)
	quit:(pYINHALT = "")
	
	new strStatus
	
	set strStatus = $$RotinaFormatoCorreto(pYINHALT)
	if $$$ISERR(strStatus) {
		set mensagem = "Rotina para Formatar Entrada inválida: "_$extract(strStatus,2,$length(strStatus))
		$$$Alert(mensagem)
	}

	quit


OnBlurValidarEntrada(pYINHALT)
	quit:(pYINHALT = "")
	
	new strStatus
	
	set strStatus = $$RotinaFormatoCorreto(pYINHALT)
	if $$$ISERR(strStatus) {
		set mensagem = "Rotina para Validar Entrada inválida: "_$extract(strStatus,2,$length(strStatus))
		$$$Alert(mensagem)
	}

	quit
	
	
RotinaFormatoCorreto(pRotina)
	;-------------------------------------------------------------------------------
	; Verifica se a rotina/método digitado está no formato correto:
	;
	; $$NomeMetodo^NomeArquivo
	;-------------------------------------------------------------------------------
	new Rotina, strStatus 
	
	set strStatus = $$$OK
	if (pRotina'="") {
		;Verifica se começa com $$
		if ($extract(pRotina,1,2)'="$$"){
			set strStatus = 0_"A rotina deve começar com $$" 	
		}
		if ($$$ISOK(strStatus)) && ('$find(pRotina,"^")){
			set strStatus = 0_"A rotina deve conter o caracter ^ (circunflexo)" 	
		}
		if ($$$ISOK(strStatus)){
			if ( $find(pRotina,"(") ) || ( $find(pRotina,")") ){
				set strStatus = 0_"A rotina não pode conter parâmetros. O parâmetro é o próprio valor de entrada."
			}
		}

	}
	quit strStatus
	
	
]]></Routine>
</Export>