<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INAvgCost" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INAvgCost

#include COMSYS
#include INConst
#include FINEnum
		
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2)  	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1_"^INAvgCost("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
	; Application Parameter "HERSTELLKOSTEN"
#define enumAverageCost		9
	
	;+++++++++++++++++++++++++++++++++++++++
	;   Retrieve Cost Information
	;+++++++++++++++++++++++++++++++++++++++
	
	
GetCostForLocn(pidItem="",pidLocn="",pdteEffect)
	;-------------------------------------------------------------------------------
	; Get the average cost for an item based on location when cost centre is not
	; known, as at a date (default - today).
	; 
	; 
	; History:
	; 19-Oct-2009	GRF		SR16871: Created
	;-------------------------------------------------------------------------------
	new curCost,idCostCentre
	
	set curCost = 0
	quit:pidItem="" curCost
	
	if $get(pdteEffect)="" set pdteEffect = +$horolog
	
	set idCostCentre = $$GetCostCentre^INCostCentre(pidLocn)
	if (idCostCentre'="") {
		set curCost = $$GetCostForCC(pidItem,idCostCentre,pdteEffect)
	}
	quit curCost
	
	
GetCostForCC(pidItem="",pidCostCentre="",pdteEffect)
	;-------------------------------------------------------------------------------
	; Get the average cost for an item based on cost centre, as at a date.
	; 
	; Returns : The last entry for the date in question or, if none present for that
	;           day, the opening value for the date.
	;
	; History:
	; 19-Oct-2009	GRF		SR16871: Created
	;-------------------------------------------------------------------------------
	new curCost,objAvgCost,tmeEffect
	
	set curCost = 0
	quit:pidItem="" curCost
	quit:pidCostCentre="" curCost
	
	if $get(pdteEffect)="" set pdteEffect = +$horolog
	
	set pdteEffect = $order(^INAvgCost(0,pidItem,pidCostCentre,pdteEffect+1),-1)
	if pdteEffect'="" {
		set tmeEffect = $order(^INAvgCost(0,pidItem,pidCostCentre,pdteEffect,""),-1)
		if tmeEffect'="" {
			set objAvgCost = $get(^INAvgCost(0,pidItem,pidCostCentre,pdteEffect,tmeEffect,1))
			set curCost = $$$INAvgCostNewAvgCost(objAvgCost)
		}
	}
	
	quit curCost
	
	
GetCostAtTimeForLocn(pidItem="",pidLocn="",pdteEffect="",ptmeEffect="")
	;-------------------------------------------------------------------------------
	; Get the average cost for an item based on location when cost centre is not
	; known, as at a date and time.  If no time is specified, use GetCostForCC
	; 
	; 
	; History:
	; 19-Oct-2009	GRF		SR16871: Created
	;-------------------------------------------------------------------------------
	new curCost,idCostCentre
	
	set curCost = 0
	quit:pidItem="" curCost
	
	if $get(pdteEffect)="" set pdteEffect = +$horolog
	
	set idCostCentre = $$GetCostCentre^INCostCentre(pidLocn)
	if (idCostCentre'="") {
		if ptmeEffect="" {
			set curCost = $$GetCostForCC(pidItem,idCostCentre,pdteEffect)
		} else {
			set curCost = $$GetCostAtTimeForCC(pidItem,idCostCentre,pdteEffect,ptmeEffect)
			
		}
	}
	quit curCost


GetCostAtTimeForCC(pidItem="",pidCostCentre="",pdteEffect="",ptmeEffect="")
	;-------------------------------------------------------------------------------
	; Get the average cost for an item based on cost centre, as at a date and time.
	; If no time is specified, use GetCostForCC
	; 
	; History:
	; 23-Jul-2010	PPP		SR17464: Correct Variables usage, was crashing before.
	; 19-Oct-2009	GRF		SR16871: Created
	;-------------------------------------------------------------------------------
	new curCost,strGlobal,objINARTAVG
	
	if ptmeEffect="" quit $$GetCostForCC(pidItem,pidCostCentre,pdteEffect)
	
	set curCost = 0
	quit:pidItem="" curCost
	quit:pidCostCentre="" curCost
	
	if pdteEffect="" set pdteEffect = +$horolog
	
	if $data(^INAvgCost(0,pidItem,pidCostCentre,pdteEffect,ptmeEffect,1)) {  ; NOTE : getting cost BEFORE the date/time if found.
		set curCost   = $$$INAvgCostCurrentAvgCost($get(^INAvgCost(0,pidItem,pidCostCentre,pdteEffect,ptmeEffect,1)))
		
	} else {
		set strGlobal = "^INAvgCost(0,"""_pidItem_""","""_pidCostCentre_""","_pdteEffect_","_ptmeEffect_")"
		//SR17464 - Use of objINARTAVG throught introduced
		set objINARTAVG = $query(@strGlobal,-1)
		if (objINARTAVG="")                            ||
		   ($qsubscript(objINARTAVG,2)'=pidItem)       ||
		   ($qsubscript(objINARTAVG,3)'=pidCostCentre)    {
			
			set objINARTAVG = $query(@strGlobal)
			if (objINARTAVG'="")                          &&
			   ($qsubscript(objINARTAVG,2)=pidItem)       &&
			   ($qsubscript(objINARTAVG,3)=pidCostCentre)    {
				
				set curCost = $$$INAvgCostNewAvgCost(@objINARTAVG)      ; returns first entry for item even if after date/time
			
			} else { ; no INARTAVG for item - get from Item Master Data
				set curCost = $$$INARTAverageCost($get(^INART(0,pidItem,1)))
			}
		} else {     ; entry for item prior to date/time
			set curCost = $$$INAvgCostNewAvgCost(@objINARTAVG)
		}
	}
	quit curCost
	
GetCostForReference(pidItem,pidCostCentre="",pstrRef,&pstrKeys)
	;-------------------------------------------------------------------------------
	; Given a reference, find the associated keys and return the calculated average
	; cost at that time.
	; 
	; History:
	; 04-Nov-2009	GRF		SR16871: pass in cost centre for specific match
	; 19-Oct-2009	GRF		SR16871: Created
	;-------------------------------------------------------------------------------
	new curCost,dteEffect,idxRef,tmeEffect
	
	set pstrKeys = ""
	set curCost  = 0
	quit:$get(pstrRef)="" curCost
	
	set idxRef = $$$Index(pstrRef)
	if pidCostCentre="" set pidCostCentre = $order(^INAvgCosts(0,1,idxRef,pidItem,""))
	if pidCostCentre'="" {
		set dteEffect = $order(^INAvgCosts(0,1,idxRef,pidItem,pidCostCentre,""))
		if dteEffect'="" {
			set tmeEffect = $order(^INAvgCosts(0,1,idxRef,pidItem,pidCostCentre,dteEffect,""))
			if tmeEffect'="" {
				set curCost  = $$$INAvgCostNewAvgCost($get(^INAvgCost(0,pidItem,pidCostCentre,dteEffect,tmeEffect,1)))
				set pstrKeys = pidItem_$$$COMMA_pidCostCentre_$$$COMMA_dteEffect_$$$COMMA_tmeEffect
			}
		}
	}
	
	quit curCost
	
	
	;+++++++++++++++++++++++++++++++++++++++
	;   Alter Cost Information
	;+++++++++++++++++++++++++++++++++++++++
	
	
UpdateCost(pidItem,pidLocn,pfltQtyRecvd,pcurEachRecvd,pstrRef,pidCostCentre,&pstrStatus)
	;-------------------------------------------------------------------------------
	; Calculate new average cost and save the record.
	; 
	; Called By :
	;	alDRP.dMovementType - Issue, IssueReversal, Receipt, ReceiptReversal,
	;	                      TransferIssue, TransferReceipt, TransferReverse
	;	INARTPLUS1 (Possibly deprecated)
	;
	; Inputs :
	;	pidItem       = Item No.
	;	pidLocn       = Location - to identify cost centre
	;	pfltQtyRecvd  = Received Qty
	;	pcurEachRecvd = unit item cost of receipt
	;	pstrRef       = Receipt Reference to re-calculate at time of invoice posting
	;	                COMMA Delimited
	;			        Order,OrderLine,Location,Storage,ReceiptDate,
	;			            ReceiptNo,ReceiptLine,SourceCode
	;			        (SourceCode is "R" for Supplier Receipts,
	;			                       "M" for Manufacturing Receipts, and
	;			                       "T" for Transfers across Cost Centres)
	;	pidCostCentre = Pass in if already determined elsewhere, else will calculate
	;	pstrAdjRef    = Adjustment reference where update is not through supplier receipt
	; 
	; History:
	; 26-Feb-2014	SCR		HEVA-1343:Improve Error Checking
	; 25-Feb-2014	SCR		SESDF-1158: Pass Back Status
	; 19-Oct-2009	GRF		SR16871: Created
	;-------------------------------------------------------------------------------
	new curNewCost,dteEffect,objAvgCost,objItem,strKeys,strStatus,tmeEffect
	
	
	$$$LogR("UpdateCost",$get(pidItem)_","_$get(pidLocn)_","_$get(pfltQtyRecvd)_","_$get(pcurEachRecvd)_","_$get(pstrRef)_","_$get(pidCostCentre))
	set pstrStatus	= $$$OK
	quit:$get(pidItem)="" 0
	
	set objItem = $get(^INART(0,pidItem,1))
	quit:$$$INARTItemWithoutInventoryMaint(objItem) 0
	
	if $get(pidCostCentre)="" set pidCostCentre = $$GetCostCentre^INCostCentre(pidLocn)
	
	;+++++++++++++++++++++++++++++++++++++++
	lock +^INAvgCost(pidItem,pidCostCentre):5
	;+++++++++++++++++++++++++++++++++++++++
	
	set curNewCost = $$CalcNewCost(pidItem,pidLocn,pfltQtyRecvd,pcurEachRecvd,.objAvgCost,pidCostCentre)
	
	set $$$INAvgCostIncomingGoodsRef(objAvgCost) = $get(pstrRef)
	$$$LogRx("UC:"_objAvgCost)
	
	do GetNextKeys(pidItem,pidCostCentre,.dteEffect,.tmeEffect)
	
	set strKeys = pidItem_$$$COMMA_pidCostCentre_$$$COMMA_dteEffect_$$$COMMA_tmeEffect
	set strStatus = $$$Save("INAvgCost",strKeys,objAvgCost,$$$YES)
	
	;+++++++++++++++++++++++++++++++++++++++
	lock -^INAvgCost(pidItem,pidCostCentre)#"I"
	;+++++++++++++++++++++++++++++++++++++++
	
	if $$$ISOK(strStatus) {
		set $$$INARTAverageCost(objItem) = curNewCost
		set strStatus = $$$Save("INART",pidItem,objItem,$$$YES)   ; FIXME : This is common over all cost centres - Deprecated? see use when no other figure.
	}
	set pstrStatus	= strStatus
	quit curNewCost


ResetCost(pidItem,pidCostCentre,pcurEachRecvd,pstrAdjRef)
	;-------------------------------------------------------------------------------
	; 
	; Called By: Adjust^INStockValCCAdj
	; 
	; History:
	; 29-Oct-2009	GRF		SR16871: Base on Cost Centre rather than Location
	; 19-Oct-2009	GRF		SR16871: Created
	;-------------------------------------------------------------------------------
	new curNewCost,curOldCost,dteEffect,fltQtyOH,objAvgCost,objItem
	new strKeys,strStatus,tmeEffect
	
	$$$LogR("ResetCost",$get(pidItem)_","_$get(pidCostCentre)_","_$get(pcurEachRecvd)_","_$get(pstrAdjRef))
	; FIXME : if CC is null?
	
	;+++++++++++++++++++++++++++++++++++++++
	lock +^INAvgCost(pidItem,pidCostCentre):5
	;+++++++++++++++++++++++++++++++++++++++
	
	set curOldCost   = $$GetCostForCC(pidItem,pidCostCentre)
	set fltQtyOH     = $$QtyForCC^INARTMENGE(pidItem,pidCostCentre)
	set curNewCost   = pcurEachRecvd
	
	set objAvgCost = fltQtyOH_Y_0_Y_curOldCost_Y_pcurEachRecvd_Y_curNewCost_Y_Y_Y_Y_pstrAdjRef
	$$$LogRx("RC:"_objAvgCost)
	
	do GetNextKeys(pidItem,pidCostCentre,.dteEffect,.tmeEffect)
	
	set strKeys   = pidItem_$$$COMMA_pidCostCentre_$$$COMMA_dteEffect_$$$COMMA_tmeEffect
	set strStatus = $$$Save("INAvgCost",strKeys,objAvgCost,$$$YES)
	
	;+++++++++++++++++++++++++++++++++++++++
	lock -^INAvgCost(pidItem,pidCostCentre)#"I"
	;+++++++++++++++++++++++++++++++++++++++
	
	set objItem = $get(^INART(0,pidItem,1))
	set $$$INARTAverageCost(objItem) = $get(curNewCost)
	set strStatus = $$$Save("INART",pidItem,objItem,$$$YES)
	
	quit curNewCost
	
	
GetNextKeys(pidItem,pidCostCentre,&pdteEffect,&ptmeEffect) private
	;-------------------------------------------------------------------------------
	; 
	; History:
	; 27-Oct-2009	GRF		SR16871: Created
	;-------------------------------------------------------------------------------
	set pdteEffect = +$horolog
	set ptmeEffect = $piece($horolog,",",2)
	if $data(^INAvgCost(0,pidItem,pidCostCentre,pdteEffect,ptmeEffect)) {
		for  {
			quit:'$data(^INAvgCost(0,pidItem,pidCostCentre,pdteEffect,ptmeEffect))
			set ptmeEffect = ptmeEffect+1             ; if multiple receipts move to next second
			if ptmeEffect=86400 {                     ; at midnight changes to next day
				set pdteEffect = pdteEffect + 1
				set ptmeEffect = 0
			}
		}
	}
	quit
	
	
	;-------------------------------------------------------------------------------
	; Standard Calc : (old QOH  and new QOH positive
	;                  New WAC = (Current Qty * Old WAC) + (ReceiveQty * ReceiveCost)
	;                           ----------------------------------------------------
	;                                      (Current Qty + Receive Qty)
	;
	; Special Calcs :
	; 	- If new quantity is zero            : keep old average cost
	; 	- If quantity was negative
	; 	    a) and new quantity is positive  : use Received cost as new average cost
	; 	    b) and new quantity in negative  : keep old average cost
	;-------------------------------------------------------------------------------
	
CalcNewCost(pidItem,pidLocn,pfltQtyRecvd,pcurEachRecvd,&pobjAvgCost,pidCostCentre)
	;-------------------------------------------------------------------------------
	; Calculate the new average cost for an item and cost centre - will not actually
	; update the average cost record here.
	;
	; Inputs :
	;	pidItem       = Item No.
	;	pidLocn       = Location - to identify cost centre
	;	pidCostCentre = Pass in if already determined elsewhere, else will calculate
	;	pfltQtyRecvd  = Received Qty
	;	pcurEachRecvd = unit item cost of receipt
	;	pobjAvgCost   = returned cost record for saving if required
	;	
	; Outputs:
	;	new Average Cost per Item @ Cost Centre
	;	zero if a non-stock item
	;	
	; History:
	; 26-Oct-2009	GRF		SR16871: Separated actual calculation
	; 19-Oct-2009	GRF		SR16871: Created
	;-------------------------------------------------------------------------------
	new curOldCost,fltQtyOH
	
	if $get(pidCostCentre)="" set pidCostCentre = $$GetCostCentre^INCostCentre(pidLocn)
	; FIXME : if CC still null?
	
	set curOldCost = $$GetCostForCC(pidItem,pidCostCentre)
	set fltQtyOH   = $$QtyForCC^INARTMENGE(pidItem,pidCostCentre)
	
	quit $$CalcFromQty(fltQtyOH,curOldCost,pfltQtyRecvd,pcurEachRecvd,.pobjAvgCost)
	
	
CalcFromQty(pfltQtyOH,pcurOldCost,pfltQtyRecvd,pcurEachRecvd,&pobjAvgCost)
	;-------------------------------------------------------------------------------
	; 
	; History:
	; 31-Mar-2011	GRF		-: Don't keep excess zero decimal places (+ before $j)
	; 26-Oct-2009	GRF		SR16871: Separated for external call
	;-------------------------------------------------------------------------------
	new curNewCost,fltSumQty
	
	set fltSumQty  = pfltQtyOH + pfltQtyRecvd
	if fltSumQty=0 {
		set curNewCost = pcurOldCost
	
	} else {
		if pfltQtyOH < 0 {
			if fltSumQty > 0 {
				set curNewCost = pcurEachRecvd
			} else {
				set curNewCost = pcurOldCost  ; There is no change to Average Cost, but create an INAvgCost entry
			}
		
		; Reversal must have adequate quantity before processing thus never goes negative
		; -ve Adjustment might exceed QOH ? : pfltQtyOH >= 0 and fltSumQty < 0  FIXME?  May not trigger average cost event
		
	;	} elseif pfltQtyRecvd < 0 {  ; currently same functionality
	;		set curNewCost = $justify(((pfltQtyOH*pcurOldCost)+(pfltQtyRecvd*pcurEachRecvd))/fltSumQty,0,$$DPforInventoryCost^INVORG())
		
		} else {
			set curNewCost = +$justify(((pfltQtyOH*pcurOldCost)+(pfltQtyRecvd*pcurEachRecvd))/fltSumQty,0,$$DPforInventoryCost^INVORG())
		}
		if (curNewCost=0) && (pcurOldCost'=0) set curNewCost = pcurOldCost      ; do not overwrite existing cost with 0
	}
	
	set pobjAvgCost = pfltQtyOH_Y_pfltQtyRecvd_Y_pcurOldCost_Y_pcurEachRecvd_Y_curNewCost   ;_Y_Y_Y_Y_Y
	
	quit curNewCost
	
	
ChangeCCStock(pidLocn,pidOldCC,pidNewCC)
	;-------------------------------------------------------------------------------
	; Relocate Stock from one Cost Centre to another
	; 
	;              Run *AFTER* the cost centre for the location
	;                  has been updated in ^INCCLocation
	; 
	; When the cost centre for a location is changed it is necessary to move all
	; stock held at that location to the new location.  This will take some time.
	; 
	; Any locations inheriting from pidLocn will also need recalculation.
	; (Call this tag as each location is changed from OldCC to NewCC.)
	; 
	; For each item 
	;   -  Get current AvgCost @ OldCC
	;   -  Get SOH at Location
	;   -  Get SOH at NewCC (current SOH less SOH @ Location)
	; 
	; Once all locations in the hierarchy inheriting from the changed location have
	; been processed the INStockVal records will be updated separately.
	; 
	; Called By : UpdateCCLocn^INCostCentre
	; 
	; History:
	; 18-Nov-2009	GRF		SR16871: call $$UpdateFinance
	; 12-Nov-2009	GRF		SR16871: no recalculation needed if fltQtyLocn is zero.
	; 10-Nov-2009	GRF		SR16871: include location in strRef
	;-------------------------------------------------------------------------------
	new curAvgCost,curCostLocn,curCostOH,dteEffect,fltQtyLocn,fltQtyOH,idItem
	new objAvgCost,strKeys,strRef,strStatus,tmeEffect
	
	set strRef = $$$Text($listbuild("IN01145",pidLocn,pidOldCC,pidNewCC))   ; "Change Location %1 From Cost Centre %2 to %3"
	
	; FIXME : if CC is null?
	
	set idItem = ""
	for {
		set idItem = $order(^INStockVal(0,idItem))
		quit:idItem=""
		
		;+++++++++++++++++++++++++++++++++++
		lock +^INAvgCost(idItem,pidNewCC):5
		;+++++++++++++++++++++++++++++++++++
	
		set fltQtyLocn  = $$GetQty^INARTMENGE(idItem,$$$NO,pidLocn,$$$NO,9,$$$NO,$$$NO)
		
		if fltQtyLocn {
			set fltQtyOH    = $$QtyForCC^INARTMENGE(idItem,pidNewCC) - fltQtyLocn
			set curCostLocn = $$GetCostAtTimeForCC(idItem,pidOldCC,"","")
			set curCostOH   = $$GetCostAtTimeForCC(idItem,pidNewCC,"","") 
			set strStatus   = $$UpdateFinance(idItem,pidLocn,pidOldCC,pidNewCC,fltQtyLocn,curCostLocn,strRef)
		
			set curAvgCost  = $$CalcFromQty(fltQtyOH,curCostOH,fltQtyLocn,curCostLocn,.objAvgCost)
			set $$$INAvgCostAdjRef(objAvgCost) = strRef
		
			do GetNextKeys(idItem,pidNewCC,.dteEffect,.tmeEffect)
			set strKeys   = idItem_$$$COMMA_pidNewCC_$$$COMMA_dteEffect_$$$COMMA_tmeEffect
			set strStatus = $$$Save("INAvgCost",strKeys,objAvgCost,$$$YES)
		}
		;+++++++++++++++++++++++++++++++++++
		lock -^INAvgCost(idItem,pidNewCC)#"I"
		;+++++++++++++++++++++++++++++++++++
	}
	quit
	
	/*
	;===============================================================================
	;	Locn B with 200 units @ $3.00 changes from Cost Centre Y to Cost Centre Z
	;	where there are 100 units (60 in Location L and 40 in Location M) at $3.30.
	;	
	;---------	
	;	INStockVal									   INAvgCost
	;		A	...		 ...				CC-Y		$3.00
	;		B	200		$600.00				CC-Y		$3.00
	;		L	 60		$198.00				CC-Z		$3.30
	;		M	 40		$132.00				CC-Z		$3.30
	;---------	
	;	
	;		[ INCostCentre : OnSaveLocation, OnDeleteLocation, OnLocnChange ]
	;	1.  Record Old Cost Centre [Y] and original Value ($600)
	;	
	;	2.	[ UpdateCCLocn^INCostCentre ]
	;		Change INCCLocation from Cost Centre Y to Cost Centre Z)
	;	
	;		>>>	[ UpdateCCLocn^INCostCentre => ChangeCCStock^INAvgCost => UpdateFinance^INAvgCost ]
	;	3.	Credit SOH (Locn B, Cost Centre Y)					$600.00
	;		Debit  SOH (Locn B, Cost Centre Z)								$600.00
	;	
	;	4.	Average Cost recalculation
	;		>>>	[ UpdateCCLocn^INCostCentre => ChangeCCStock^INAvgCost ]
	;			(200 * 3.00) + (100 * 3.30)  /  (200 + 100)  =  $930.00 / 300 = $3.10
	;
	;---------	
	;	INStockVal									   INAvgCost
	;		A	...		 ...				CC-Y		$3.00
	;		B	200		$600.00				CC-Z		$3.10
	;				 => $620.00	(+$20.00)
	;		L	 60		$198.00				CC-Z		$3.10
	;				 => $186.00	(-$12.00)
	;		M	 40		$132.00				CC-Z		$3.10
	;				 => $124.00	(-$ 8.00)
	;---------	
	;	
	;	5.	Update Stock Val
	;		[ UpdateStockVal^INCostCentre => $$AutoUpdate^INStockValCCAdj ]
	;		Debit  SOH (LocnB, Cost Centre Z)								$ 20.00
	;		Credit SOH (LocnL, Cost Centre Z)					$ 12.00
	;		Credit SOH (LocnM, Cost Centre Z)					$  8.00
	;===============================================================================
	*/
	

UpdateFinance(pidItem,pidLocn,pidOldCC,pidNewCC,pfltQty,pcurCost,pstrRef)
	;-------------------------------------------------------------------------------
	; History:
	; 18-Nov-2009	GRF		SR16871/SR17048: Created
	;-------------------------------------------------------------------------------
	new curAdjVal,strAudit,strStatus
	
	set strStatus = $$$OK
	quit strStatus               ; Temp exit while functionality added.
	
	;+++++++++++++++++++++++++++++++++++++++
	;  TODO : Add code - see SR17048
	;         Use tstart?
	;  
	;	Credit     SOH (Locn B, Old Cost Centre)
	;		Debit  SOH (Locn B, New Cost Centre)
	;+++++++++++++++++++++++++++++++++++++++
	
	set strAudit  = "CostCentre|"_pidOldCC_$$$COMMA_pidNewCC
	set curAdjVal = $justify(pfltQty * pcurCost,0,2)     ; FIXME : ledger currency DP
	
	; FIXME : Requires call to INFIBUCH45 with new Finance Interface processing (new Interface batch type)
	
	do PostToFin^INFINInterface($$$EnumCostCentre,"CCC",strAudit,pstrRef,pidItem,pfltQty,
	                            curAdjVal,pidLocn,"",pidLocn,"","",
	                            "","","","","",pidOldCC,pidNewCC)
	quit strStatus
	
	
ReviseHistory(pstrSource,pstrRef,pidItem,pidLocn,pdteEffect,ptmeEffect)
	;-------------------------------------------------------------------------------
	; Average Cost Recalculation
	; 
	; The Average Cost record has already been updated with the revised details
	; (usually the Received Unit Cost.)  This subroutine recalculates what the
	; Weighted Average Cost would have been and then works forward to re-adjust any
	; later entries.
	; 
	; Originally Called By : INERECH1, INSHIPINFOCOSTS and INSHIPINFOCOSTSAllocn
	;                        All deprecated but may need to have available when
	;                        can enter estimated costs for receipt separately from
	;                        actual at invoicing.
	; 
	; Params:
	;	pstrSource		Transaction Type generating AutoUpdate e.g. "INWEFREI"
	;					 - allows trace if necessary
	;	pstrRef			Reference String to identify source transaction
	;	pidItem			Item Number
	;	pidLocn			Location
	;	pdteEffect		Current Cost Change - Date
	;	ptmeEffect		                    - Time
	;
	; Returns: Nothing
	;
	; History:
	; 26-Oct-2009	GRF		SR16871: copied from INARTAVG
	;-------------------------------------------------------------------------------
	new curEachRecvd,curNewCost,curOldCost,dteKey4,fltQtyOH,fltQtyRecvd,fltSumQty
	new idCostCentre,intDecPoints,objAvgCost,objItem,strStatus,tmeKey5
	
	$$$LogR("Revise",$get(pidLocn)_","_$get(pdteEffect)_","_$get(ptmeEffect)_","_$get(pstrSource)_","_$get(pstrRef))
	
	set objItem = $get(^INART(0,pidLocn,1))
	quit:$$$INARTItemWithoutInventoryMaint(objItem)
	
	set idCostCentre = $$GetCostCentre^INCostCentre(pidLocn)
	
	/*++++++++++++++++++++++++++++++
	; Find last ^INAvgCost entry matching current change (pdteEffect/ptmeEffect) or with Qty on Hand of zero
	;+++++++++++++++++++++++++++++++*/
	set curNewCost = 0
	
	set dteKey4 = ""
	for {
		set dteKey4 = $order(^INAvgCost(0,pidItem,idCostCentre,pdteEffect),-1)
		quit:dteKey4=""
		
		set tmeKey5 = ""
		for {
			set tmeKey5 = $order(^INAvgCost(0,pidItem,idCostCentre,pdteEffect,tmeKey5),-1)
			quit:tmeKey5=""
			quit:(dteKey4=pdteEffect)&&(tmeKey5=ptmeEffect)
			quit:$piece($get(^INAvgCost(0,pidItem,idCostCentre,pdteEffect,tmeKey5,1)),Y,1)=0 
		}
		quit:tmeKey5'=""
	}
	
	/*++++++++++++++++++++++++++++++
	; If an entry was found, go back so we can come forward again.
	;+++++++++++++++++++++++++++++++*/
	if (dteKey4'="") && (tmeKey5'="") {
		if $order(^INAvgCost(0,pidItem,idCostCentre,pdteEffect,tmeKey5),-1)'="" {
			set tmeKey5 = $order(^INAvgCost(0,pidItem,idCostCentre,pdteEffect,tmeKey5),-1)
			set dteKey4 = dteKey4-1
		
		} else {
			set dteKey4 = $order(^INAvgCost(0,pidItem,idCostCentre,pdteEffect),-1)
			if dteKey4="" {
				set tmeKey5 = ""
			} else {
				set tmeKey5 = $order(^INAvgCost(0,pidItem,idCostCentre,pdteEffect,tmeKey5),-1)
			}
		}
	}
	
	/*--------------------------------------
	;
	;  TODO : Need to consider situation where one of the subsequent entries is
	;         a manual cost adjustment (D9'=""), should stop carrying
	;         revision forward at this point.
	;         
	;         Also need to consider what happens to SOH/COGS split of difference.
	;         
	;         If received 200 items and current QOH is >= 200 then all of
	;         difference goes to SOH.  If QOH is <200 then QOH/200*Difference
	;         goes to SOH and balance goes to COGS.  Similar complication if
	;         item is a component in BOM for another item.
	;         
	;  TODO : Should Invoice difference be recorded as new entry (Cost Change?)
	;         rather than the original and any subsequent entries being
	;         recalculated?  Original "best average cost information" has been
	;         used at the time of any transactions and we now lose the audit
	;         record.  At best should probably keep the original and add a new
	;         record for the following second - with the timestamp for the actual
	;         update so intervening transactions can be recognised.
	;
	;-------------------------------------*/ ; <GRF>
	
	/*++++++++++++++++++++++++++++++
	; Come forward again.
	; Save changed Average Cost from previous calculation.
	; Recalculate subsequent Average Costs.
	;+++++++++++++++++++++++++++++++*/
	set intDecPoints = $$DPforInventoryCost^INVORG()
	for {
		set dteKey4=$order(^INAvgCost(0,pidItem,idCostCentre,pdteEffect))
		quit:dteKey4=""
		
		for {
			set tmeKey5 = $order(^INAvgCost(0,pidItem,idCostCentre,pdteEffect,tmeKey5))
			quit:tmeKey5=""
			
			set objAvgCost = $get(^INAvgCost(0,pidItem,idCostCentre,pdteEffect,tmeKey5,1))
			
			if +curNewCost'=0 {
				set $$$INARTAVGCurrentAverageCost(objAvgCost) = curNewCost		; D3
				set $$$INARTAVGCurrentAverageCost(^INAvgCost(0,pidItem,idCostCentre,pdteEffect,tmeKey5,1)) = curNewCost
			}
				
			set fltQtyOH     = $$$INARTAVGQuantityOnHand(objAvgCost)
			set fltQtyRecvd  = $$$INARTAVGIncomingGoodsQuantity(objAvgCost)
			set curOldCost   = $$$INARTAVGCurrentAverageCost(objAvgCost)
			set curEachRecvd = $$$INARTAVGIncomingGoodsCost(objAvgCost)
			
			set fltSumQty = fltQtyOH + fltQtyRecvd
			
			if fltSumQty=0 {
				set curNewCost = curOldCost
			} else {
				if fltQtyOH < 0 {
					
					if fltSumQty > 0 {
						set curNewCost = curEachRecvd
					} else {
						set curNewCost = curOldCost
					}
				} else {
					set curNewCost = $justify(((fltQtyOH * curOldCost)+(fltQtyRecvd * curEachRecvd))/fltSumQty,0,intDecPoints)
				}
				
			}
			
			if curNewCost=0 if curOldCost'=0 set curNewCost = curOldCost      ;do not overwrite existing cost with 0
			set $$$INARTAVGNewAverageCost(^INAvgCost(0,pidItem,idCostCentre,pdteEffect,tmeKey5,1)) = curNewCost
		}
	}
	
	/*++++++++++++++++++++++++++++++
	; Record new average cost in Item master data.
	; Update Average Costs in Ledger.
	;+++++++++++++++++++++++++++++++*/
	if curNewCost {
		set $$$INARTAverageCost(objItem) = curNewCost
		set strStatus = $$$Save("INART",pidItem,objItem,$$$YES)

		set YOK = $$AutoUpdate^INStockValCCAdj(pstrSource,pstrRef,pidItem,idCostCentre,curNewCost)
	}
	quit

]]></Routine>
</Export>