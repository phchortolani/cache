<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINSYSValidation" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINSYSValidation
#include COMSYS
 
 
FindPictureReferences(pstrType="ICO")
	do FindPictureReferencesWWW124(pstrType)
	do FindPictureReferencesSALCSTButton(pstrType)
	quit
 
 
FindPictureReferencesSALCSTButton(pstrType)
    ;-------------------------------------------------------------------------------
    ; Find Picture References in SALCSTButton
    ;
    ; Returns:
    ;
    ; History:
    ; 12-May-2006	RPW			SR14609: Do not use $$Upper^COMUtils, use $$$UPPER
    ; 02-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new idSALCSTButton,objSALCSTButton,idTemplate,strFile
	
	set pstrType=$$$UPPER(pstrType)
	if pstrType'["." set pstrType="."_pstrType
	set idTemplate=""
	for {
		set idTemplate=$order(^SALCSTButton(YM,idTemplate))
		quit:idTemplate=""
		set idSALCSTButton=""
		for {
			set idSALCSTButton=$order(^SALCSTButton(YM,idTemplate,idSALCSTButton))
			quit:idSALCSTButton=""
			set objSALCSTButton=$get(^SALCSTButton(YM,idTemplate,idSALCSTButton,1))
			set strFile=$$$UPPER($piece(objSALCSTButton,Y,15))  ;Graphic
			if strFile[pstrType {
				write !,"Template:"_idTemplate_", Button:"_idSALCSTButton_" -- "_strFile
			}
		}
	}
	
	quit
 
 
FindPictureReferencesWWW124(pstrType="ICO")
    ;-------------------------------------------------------------------------------
    ; Finds references to picture files.
    ;
    ; Returns:
    ;
    ; History:
    ; 12-May-2006	RPW			SR14609: Do not use $$Upper^COMUtils, use $$$UPPER
    ; 31-Mar-2004   Shobby   Created (TR007427)
    ;-------------------------------------------------------------------------------
	;
	new idxFormName,idxLanguage,idxNumber,objWWW124,strFile
	
	if $get(Y)="" do ^WWWVAR // TODO: MUST NOT be here, if for dev purposes put in DEV code
	set pstrType=$$$UPPER(pstrType)
	if pstrType'["." set pstrType="."_pstrType
	set idxFormName=""
	for {
		set idxFormName=$order(^WWW124(0,idxFormName))
		quit:idxFormName=""
		set idxLanguage=""
		for {
			set idxLanguage=$order(^WWW124(0,idxFormName,idxLanguage))
			quit:idxLanguage=""
			set idxNumber=""
			for {
				set idxNumber=$order(^WWW124(0,idxFormName,idxLanguage,idxNumber))
				quit:idxNumber=""
				set objWWW124=$get(^WWW124(0,idxFormName,idxLanguage,idxNumber,1))
				if objWWW124'="" {
					set strFile=$$$UPPER($piece(objWWW124,Y,9))
					if strFile[(pstrType) {
						write !,"Form:"_idxFormName_", Language:"_idxLanguage_", Button:"_idxNumber_" -- "_strFile
					}
					set strFile=$$$UPPER($piece(objWWW124,Y,21))
					if strFile[(pstrType) {
						write !,"Form:"_idxFormName_", Language:"_idxLanguage_", Button:"_idxNumber_" -- "_strFile
					}
				}
			}
		}
	}
	
	quit
 
 
CopyReportData(pstrNameSpaceDestination="",pstrNameSpaceSource="",pblnClear=0)
    ;-------------------------------------------------------------------------------
    ; Copy the Cheque Report data from one namespace to another
    ;
    ; Returns:
    ;
    ; History:
    ; 05-Apr-2004   Shobby   Created (TR006822)
    ;-------------------------------------------------------------------------------
	new lstClasses,intClasses,i
	
	if (pstrNameSpaceDestination'="")&&(pstrNameSpaceSource'="") {
		set lstClasses=""
		;set lstClasses="REPCheque,REPChequeSegment,REPChequeSegmentTable,REPChequeSegmentTableCol,REPChequeSegmentTableData,REPHTMLReport"
		;set lstClasses="REPPDFSetup,REPRep,REPRepCell,REPRepGrid,REPRepInp,REPRepLevel,REPRepLookUp,REPRepRun,REPSavedReports,REPSetup,REPTemp,REPTempData,REPTempFld,REPTempInp,REPTempLevel,REPTempLevelRep"
		set intClasses=$length(lstClasses,",")
		for i=1:1:intClasses {
			if pblnClear {
				xecute "kill ^[pstrNameSpaceDestination]"_$piece(lstClasses,",",i)
				xecute "kill ^[pstrNameSpaceDestination]"_$piece(lstClasses,",",i)_"s"
			}
			xecute "merge ^[pstrNameSpaceDestination]"_$piece(lstClasses,",",i)_"=^[pstrNameSpaceSource]"_$piece(lstClasses,",",i)
			xecute "merge ^[pstrNameSpaceDestination]"_$piece(lstClasses,",",i)_"s=^[pstrNameSpaceSource]"_$piece(lstClasses,",",i)_"s"
		}
	}
	quit
 
CompareReportData(pstrNameSpace1="",pstrNameSpace2="")
    ;-------------------------------------------------------------------------------
    ; Compare data in the named classes.
    ;
    ; Returns:
    ;
    ; History:
    ; 05-Apr-2004   Shobby   Created (TR006822)
    ;-------------------------------------------------------------------------------
	;
	new lstClasses,intClasses,i,intErrorCounter
 
	if (pstrNameSpace1'="")&&(pstrNameSpace2'="") {
		if $get(Y)="" do ^WWWVAR // TODO: MUST NOT be here, if for dev purposes put in DEV code
		k ^CacheTemp($job)
		set intErrorCounter=0
		;set lstClasses="REPCheque,REPChequeSegment,REPChequeSegmentTable,REPChequeSegmentTableCol,REPChequeSegmentTableData,REPHTMLReport"
		;set lstClasses="REPCheque,REPChequeSegment,REPChequeSegmentTable,REPChequeSegmentTableCol,REPChequeSegmentTableData"
		set lstClasses="REPPDFSetup,REPRep,REPRepCell,REPRepGrid,REPRepInp,REPRepLevel,REPRepLookUp,REPRepRun,REPSavedReports,REPSetup,REPTemp,REPTempData,REPTempFld,REPTempInp,REPTempLevel,REPTempLevelRep"
		set lstClasses="REPRepGrid,REPRepInp,REPRepLevel,REPRepLookUp,REPRepRun,REPSavedReports,REPSetup,REPTemp,REPTempData,REPTempFld,REPTempInp,REPTempLevel,REPTempLevelRep"
		set intClasses=$length(lstClasses,",")
		for i=1:1:intClasses {
			set intErrorCounter=intErrorCounter+$$Compare($piece(lstClasses,",",i),pstrNameSpace1,pstrNameSpace2)		
			quit:intErrorCounter>20
		}
		;k ^CacheTemp($job)
	}
	quit
 
 
Compare(pstrClass="",pstrNameSpace1="DEVELOPMENT",pstrNameSpace2="BUILD")
    ;-------------------------------------------------------------------------------
    ; Compares the named routine between two namespaces.
    ;
    ; Returns:
    ;
    ; History:
    ; 01-Apr-2004   Shobby   Created  (TR006822)
    ;-------------------------------------------------------------------------------
 
	new idx,intCounter,strStatus,intErrorCounter,strNameSpace,strNode1,strNode2,strData1,strData2
	
	kill ^CacheTemp($Job)
	set intErrorCounter=0
	
	set strNameSpace=$znspace
	do $zutil(5,pstrNameSpace1)
	set idx=""
	set intCounter=0
	xecute "set idx=$query(^"_pstrClass_"(YM))"
	for {
		quit:idx=""
		set intCounter=$i(intCounter)
		set ^CacheTemp($job,intCounter,pstrNameSpace1,pstrClass,"Node")=$get(idx)
		set ^CacheTemp($job,intCounter,pstrNameSpace1,pstrClass,"Data")=$get(@idx)
		xecute "set idx=$query(@idx)"
	}
	
	do $zutil(5,pstrNameSpace2)
	set idx=""
	set intCounter=0
	xecute "set idx=$query(^"_pstrClass_"(YM))"
	for {
		quit:idx=""
		set intCounter=$i(intCounter)
		set ^CacheTemp($job,intCounter,pstrNameSpace2,pstrClass,"Node")=$get(idx)
		set ^CacheTemp($job,intCounter,pstrNameSpace2,pstrClass,"Data")=$get(@idx)
		xecute "set idx=$query(@idx)"
	}
	
	set idx=""
	for {
		quit:intErrorCounter>20
		set idx=$order(^CacheTemp($job,idx))
		quit:idx=""
		set strNode1=$get(^CacheTemp($job,idx,pstrNameSpace1,pstrClass,"Node"))
		set strNode2=$get(^CacheTemp($job,idx,pstrNameSpace2,pstrClass,"Node"))
		set strData1=$get(^CacheTemp($job,idx,pstrNameSpace1,pstrClass,"Data"))
		set strData2=$get(^CacheTemp($job,idx,pstrNameSpace2,pstrClass,"Data"))
		if (strNode1'=strNode2)||(strData1'=strData2) {
			write !,pstrNameSpace1_"("_pstrClass_","_idx_")=","("_strNode1_")","("_strData1_")"
			write !,pstrNameSpace2_"("_pstrClass_","_idx_")","("_strNode2_")","("_strData2_")"
			set intErrorCounter=intErrorCounter+1
		}
	}
	do $zutil(5,strNameSpace)
	quit intErrorCounter
]]></Routine>
</Export>