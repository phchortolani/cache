<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLHCPeriodTotal" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLHCPeriodTotal ; Period Total Health Check
	#Include FINHC
	#define Check "^CacheTemp(YUSER,""PeriodTotal"")"
	

TransactionsZCRC(StartDate="",EndDate="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; Wrapper for TranactionsZRCREx
    ;
    ; Returns:
    ;
    ; History:
    ; 14-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------

	new strStatus
	
	if $get(Y)="" d ^WWWVAR
	kill Result  				; Clear Result
	kill @$$$Check
	set strStatus=$$TransactionsZCRCEx(StartDate,EndDate,Location,Level,.Result)
	kill @$$$Check
	quit strStatus
	
	
TransactionsZCRCEx(StartDate="",EndDate="",Location="",Level="",Result)
	;-------------------------------------------------------------------------------
	; Check Period totals based on transactions
	;
	; Returns:
	;
	; History:
	; 05-Nov-2004		shobby		Foreign currency check for zero.
	; 17-Aug-2004		shobby		Fixed Level checking
	; 07-Jun-2004		shobby		Foreign Currency.
	; 07-Jun-2004		shobby		Only check posted transactions.
	; 17-May-2004		shobby		Exclude 0 amounts from the zcrc calculation, transaction calculation may be 0, accounts value may not exist, leads to different zcrc value.
	; 14-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
 	;
	new Depth,Amt,Hash,HashValue,idFINGLAccountLast
	new idFINGLAccount,idFINGLTran,objFINGLTran,idLine,objFINGLTranLine
	new dteTransactionDate,dteDate,lstPeriods,objFINGLAccount,i,fltAmount
	new idPeriod,strTransactionType
	
	set Depth=$length(Level) 	; Set the detail depth
	set idFINGLAccount=Level	; Set the idFINGLAccount to Start at the Level ( Optimisation )

	if (idFINGLAccount'="") {	; If the Start Account exsits, go back one
		set idFINGLAccount=$order(^FINGLTranLines(YM,50,idFINGLAccount),-1) 	
	}
	
	for {											; Start of the Loop
		set idFINGLAccount=$order(^FINGLTranLines(YM,50,idFINGLAccount))
		quit:idFINGLAccount=""
		if $extract(idFINGLAccount,1,Depth)=Level {  					; If the Account is inside the Level
			set objFINGLAccount=$get(^FINGLAccount(YM,idFINGLAccount,1))
			if $$$FINGLAccountAccountUsage(objFINGLAccount)=$$$EnumFINGLACCOUNTUSAGETransaction {
				set idFINGLTran=""
				for {
					set idFINGLTran=$order(^FINGLTranLines(YM,50,idFINGLAccount,idFINGLTran))
					quit:idFINGLTran=""		
					set objFINGLTran=$get(^FINGLTran(YM,idFINGLTran,1))
					if $$$FINGLTranPostedDate(objFINGLTran)'="" {
						if $$$FINGLTranAmountType(objFINGLTran)="BAL" {
							;Currency Type only <FIXME> will fail with a currency type not called 'BAL' 
							set dteTransactionDate=$$$FINGLTranTransactionDate(objFINGLTran)
							set strTransactionType=$$$FINGLTranTransactionType(objFINGLTran)
							set dteDate=$piece(dteTransactionDate," ",1)
							if $data(@$$$Check@("Periods",dteDate))=0 {
								do GetPeriodsForDate^FINGLPeriod(dteDate,.lstPeriods)
								set @$$$Check@("Periods",dteDate)=lstPeriods
							} else {
								set lstPeriods=$get(@$$$Check@("Periods",dteDate))
							}
							set idLine=""
							for {
								set idLine=$order(^FINGLTranLines(YM,50,idFINGLAccount,idFINGLTran,idLine))
								quit:idLine=""
								set objFINGLTranLine=$get(^FINGLTranLine(YM,idFINGLTran,idLine,1))
								set Amt=$$$FCSub($$$FINGLTranLineDebit(objFINGLTranLine),$$$FINGLTranLineCredit(objFINGLTranLine))
								;set Amt=$$$FINGLTranLineDebit(objFINGLTranLine)-$$$FINGLTranLineCredit(objFINGLTranLine)
								for i=1:1:$ll(lstPeriods) {
									set idPeriod=$lg(lstPeriods,i)
									set fltAmount=$get(@$$$Check@("Transactions",idFINGLAccount,idPeriod,strTransactionType))
									set @$$$Check@("Transactions",idFINGLAccount,idPeriod,strTransactionType)=$$$FCAdd(fltAmount,Amt)
								}
							}
						}
					}
				}
			}
		}
	}
	
	set idFINGLAccount=""
	for {
		set idFINGLAccount=$order(@$$$Check@("Transactions",idFINGLAccount))
		quit:idFINGLAccount=""
		set idPeriod=""
		for {
			set idPeriod=$order(@$$$Check@("Transactions",idFINGLAccount,idPeriod))
			quit:idPeriod=""
			set strTransactionType=""
			for {
				set strTransactionType=$order(@$$$Check@("Transactions",idFINGLAccount,idPeriod,strTransactionType))
				quit:strTransactionType=""
				set Amt=$get(@$$$Check@("Transactions",idFINGLAccount,idPeriod,strTransactionType))
				set Result("Total")=$$$FCAdd($get(Result("Total")),Amt)
				;set Result("Total")=$get(Result("Total"))+Amt
				set Hash=$extract(idFINGLAccount,1,Depth+1)
				if Hash="" set Hash="?"
				if $$$FCZero(Amt) {
					set HashValue=$zcrc(idFINGLAccount_"("_idPeriod_","_strTransactionType_")="_Amt,7)
					set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
				}
			}
		}
	}
	Quit 1


AccountsZCRC(StartDate="",EndDate="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; Wrapper for TranactionsZRCREx
    ;
    ; Returns:
    ;
    ; History:
    ; 14-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------

	new strStatus
	
	if $get(Y)="" d ^WWWVAR
	kill Result  				; Clear Result
	kill @$$$Check
	set strStatus=$$AccountsZCRCEx(StartDate,EndDate,Location,Level,.Result)
	kill @$$$Check
	quit strStatus


AccountsZCRCEx(StartDate="",EndDate="",Location="",Level="",Result)
	;-------------------------------------------------------------------------------
	; Check Period totals for accounts.
	;
	; Returns:
	;
	; History:
	; 14-Apr-2005		RobertW		SR12159: Make sure that FINGLTranType is no longer shared.
	; 05-Nov-2004		shobby		Foreign currency check for zero.
	; 17-Aug-2004		shobby		Fixed Level checking
	; 21-Jun-2004		shobby		FINGLTranType doesn't have to be shared.
	; 20-Jun-2004		shobby		Don't test budgets.
	; 17-May-2004		shobby		Exclude 0 amounts from the zcrc calculation, transaction calculation may be 0, accounts value may not exist, leads to different zcrc value.
	; 14-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
 	;
 	new idAccount,Depth,idAccountLast,idPeriod,idTransactionType,Amt,Hash,HashValue
 	new objFINGLAccount,objFINGLPeriodTotal,objFINGLTranType
 	
	set Depth=$length(Level) 	; Set the detail depth
	set idAccount=Level	; Set the idFINGLAccount to Start at the Level ( Optimisation )

	if (idAccount'="") {	; If the Start Account exsits, go back one
		set idAccount=$order(^FINGLPeriodTotal(YM,idAccount),-1) 	
	}

	for {											; Start of the Loop
		set idAccount=$order(^FINGLPeriodTotal(YM,idAccount))
		quit:idAccount=""
		if $extract(idAccount,1,Depth)=Level {  					; If the Account is inside the Level
			set objFINGLAccount=$get(^FINGLAccount(YM,idAccount,1))
			if $$$FINGLAccountAccountUsage(objFINGLAccount)=$$$EnumFINGLACCOUNTUSAGETransaction {
				set idPeriod=""
				for {
					set idPeriod=$order(^FINGLPeriodTotal(YM,idAccount,idPeriod))
					quit:idPeriod=""
					set idTransactionType=""
					for {
						set idTransactionType=$order(^FINGLPeriodTotal(YM,idAccount,idPeriod,idTransactionType))
						quit:idTransactionType=""
						set objFINGLTranType=$get(^FINGLTranType(YM,idTransactionType,1))
						if '$$$FINGLTranTypeBudget(objFINGLTranType) {
							; Ignore budgets. Budgets don't roll up from Transaction Acounts to Parent Account.
							set objFINGLPeriodTotal=$get(^FINGLPeriodTotal(YM,idAccount,idPeriod,idTransactionType,1))
							
							set Amt=$$$FINGLPeriodTotalAmount(objFINGLPeriodTotal)
							set @$$$Check@("Accounts",idAccount,idPeriod,idTransactionType)=Amt
							set Result("Total")=$$$FCAdd($get(Result("Total")),Amt)
							set Hash=$extract(idAccount,1,Depth+1)
							if Hash="" set Hash="?"
							if $$$FCZero(Amt) {
								set HashValue=$zcrc(idAccount_"("_idPeriod_","_idTransactionType_")="_Amt,7)
								set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
							}
						}
					}
				}
			}
		}
	}
	Quit 1


Check(StartDate="",EndDate="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; Stand Alone check of Period Totals.  Allows drill down when AccountPeriodTotalZRCR
    ; reports errors.
    ;
    ; Returns:
    ;
    ; History:
    ; 05-Nov-2004	shobby	 Foreign Currency compare with $$$FCZero
    ; 17-Aug-2004	shobby	 Simplified comparism.
    ; 17-Aug-2004	shobby	 Fixed parameter passing into the two routines.
    ; 03-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------

	new strStatus,idFINGLAccount,strRelationship,idPeriod,idType,fltAmountAccounts,fltAmountTransactions
	new curDifference
	
	if $get(YUSER)="" do ^WWWVAR

	kill @$$$Check
	kill Result	

	set strStatus=$$$OK
	do TransactionsZCRCEx(StartDate,EndDate,Location,Level,.Result)
	do AccountsZCRCEx(StartDate,EndDate,Location,Level,.Result)

	set strRelationship=""
	for {
		set strRelationship=$order(@$$$Check@(strRelationship))
		quit:strRelationship=""
		set idFINGLAccount=""
		for {
			set idFINGLAccount=$order(@$$$Check@(strRelationship,idFINGLAccount))
			quit:idFINGLAccount=""
			set idPeriod=""
			for {
				set idPeriod=$order(@$$$Check@(strRelationship,idFINGLAccount,idPeriod))
				quit:idPeriod=""
				set idType=""
				for {
					set idType=$order(@$$$Check@(strRelationship,idFINGLAccount,idPeriod,idType))
					quit:idType=""
					set fltAmountAccounts=$get(@$$$Check@("Accounts",idFINGLAccount,idPeriod,idType))
					set fltAmountTransactions =$get(@$$$Check@("Transactions",idFINGLAccount,idPeriod,idType))
					set curDifference=$$$FCSub(fltAmountAccounts,fltAmountTransactions)
					if '$$$FCZero(curDifference) {
						if strRelationship="Accounts" {
							set Result("Hash",$$$ErrorNo(Result("Errors")))=$$$Text($lb("Fin00335",idFINGLAccount,idPeriod,idType,fltAmountAccounts,fltAmountTransactions)) ;Account Period Total (%1,%2,%3). Amount(%4) does not match Transactions(%5).
							set strStatus='$$$OK
						} elseif strRelationship="Transactions" {
							set Result("Hash",$$$ErrorNo(Result("Errors")))=$$$Text($lb("Fin00336",idFINGLAccount,idPeriod,idType,fltAmountAccounts,fltAmountTransactions))  ;Account Period Total (%1,%2,%3). Amount(%4) does not match Transactions(%5)
							set strStatus='$$$OK
						}
					}
				}
			}
		}
	}

	kill @$$$Check

	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}
	quit strStatus

]]></Routine>
</Export>