<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESIntegration" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
	#include VARConst
	#include COMSYS
	#include INConst
	#include VARSESFarmaciaAltoCusto
	#include %occStatus
	#include VARUtil
	#include VARLog
 
VARSESIntegration
	quit
	
SolicitarTransferencia(pidSolicTransf) ;throws SolicitarTransferenciaException
 
 	// Desabilitando os WebServices
 	quit $$$OK
 	
 	set $ztrap = "TratamentoErroSolicTransf^VARSESIntegrationErrorHandler"
 
 	$$$VAR
 
	new objSolicTransf, objSolicTransfLinha, idSolicTransfLinha, strItens, strStatus, strTipoTransferencia
	new idLocRequisitante, idLocAbastecedor, objLocRequisitante, objLocAbastecedor, idLocRequisitanteTRAK, idLocAbastecedorTRAK, idLog
	new blnLocalArmazenagem, arrLog, intNoDocumento
	 
	// Verifica se o parâmetro foi passado.
	if $get(pidSolicTransf) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICTRANS", $$$NO, "Parâmetro id da Solicitação de Transferência não informado.")
		ztrap		
	}
 
	// Verifica se a solicitação existe.
	if '$data(^VARSESSolicTransf(YM,pidSolicTransf,1)) {
		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICTRANS", $$$NO, "Solicitação de Transferência inexistente.")
		ztrap		
	}
	
	// Verificar se o tamanho da solicitação é igual a 10.
	set objSolicTransf = $get(^VARSESSolicTransf(YM, pidSolicTransf, 1))
	;set intNoDocumento = $$$VARSESSolicTransfNoDocumento(objSolicTransf)
	
	/* Andre, 17/09/2007: retirar esta validação, de acordo com orientações do Léo:
	if $length(pidSolicTransf) '= 10 {
		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICTRANS", $$$NO, "O número do documento tem que ter 10 caracteres.")
		ztrap		
	}
	*/
	
	// Verifica se a solicitação de transferência contém itens.
	if $order(^VARSESSolicTransfLinha(YM,pidSolicTransf,"")) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICTRANS", $$$NO, "A Solicitação de Transferência não contém itens.")
		ztrap		
	}
	
	// Verifica se a solicitação de transferência foi processada.
	if '$$$VARSESSolicTransfProcessado(objSolicTransf) {
		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICTRANS", $$$NO, "É necessário que a Solicitação de Transferência esteja processada antes de enviá-la para o MedTrak.")
		ztrap		
	}
 
	// Verificar Localidades. 
 	set idLocRequisitante   = $$$VARSESSolicTransfLocalRecebedor(objSolicTransf)
 	set idLocAbastecedor    = $$$VARSESSolicTransfLocalAbastecedor(objSolicTransf)
 	set strStatus = $$VerificarLocalidades(idLocRequisitante, idLocAbastecedor)
 	if '$$$ISOK(strStatus) {
		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICTRANS", $$$YES, "Web Service de Solicitação de Transferência não executado por incompatibilidade de localidades.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Detalhes do Erro", strStatus)
		do LogSolicitarTransferencia^VARSESIntegrationParametersLog(.arrLog, pidSolicTransf)
		do Save^VARSESIntegrationLog(.arrLog)
		quit
 	}
 
	set strItens = ""
	$$$Order3(^VARSESSolicTransfLinha,YM,pidSolicTransf,idSolicTransfLinha)
	
		set objSolicTransfLinha = $get(^VARSESSolicTransfLinha(YM, pidSolicTransf, idSolicTransfLinha, 1))
		
		// Adiciona uma vírgula se já foi adicionao algum item.
		if strItens '= "" set strItens = strItens_"|"
		
		set strItens = strItens_$$$VARSESSolicTransfLinhaCodigodoProduto(objSolicTransfLinha)_"~"_$$$VARSESSolicTransfLinhaQuantidade(objSolicTransfLinha)	
	$$$End
 
	// Chamando o Web Service.	 
	set strTipoTransferencia = $piece($get(^INPARA(YM,"VARSESTIPOSOLICITACAO",SPRACHE,$$$VARSESSolicTransfTipoSolicitacao(objSolicTransf),1)),Y,1)
	
	set objLocRequisitante    = $get(^WWW0121(0,YM,idLocRequisitante,1))
	set idLocRequisitanteTRAK = $$$WWW0121FREE4(objLocRequisitante)
	
	set objLocAbastecedor     = $get(^WWW0121(0,YM,idLocAbastecedor,1))
	set idLocAbastecedorTRAK  = $$$WWW0121FREE4(objLocAbastecedor)
	
	set strStatus = ##class(VARSESTrakIntegration.RISoap).%New().InsereRI($$$VARSESSolicTransfDatadaSolicitacao(objSolicTransf),
			$piece($$$VARSESSolicTransfDatadaSolicitacao(objSolicTransf),",",2), idLocRequisitanteTRAK,
			idLocAbastecedorTRAK, pidSolicTransf, strTipoTransferencia, strItens)
 
 	// Verificar se a solicitação foi Ok.
 	if $$$ISOK(strStatus) {
	 	
	 	; Andre, 17/09/2007: variável intNoDocumento não está mais sendo definida. No lugar, usar pidSolicTransf:
	 	;do GetLog^VARSESIntegrationLog(.arrLog, "SOLICTRANS", $$$YES, "A Solicitação de transferência "_intNoDocumento_" foi enviada com sucesso para o MedTrak.")	
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICTRANS", $$$YES, "A Solicitação de transferência "_pidSolicTransf_" foi enviada com sucesso para o MedTrak.")	
		do LogSolicitarTransferencia^VARSESIntegrationParametersLog(.arrLog, pidSolicTransf)
		do Save^VARSESIntegrationLog(.arrLog)
 	} else {
	 	
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICTRANS", $$$NO, "Erro na chamada do Web Service 'Solicitar Transferência'")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Detalhes do Erro", strStatus)
		ztrap		
 	}
 
	quit
	
CancelSolic(pidSolicTransf)
 
 	// Desabilitando os WebServices
 	quit $$$OK
 
	/*set x=0
	while x=0 {
		hang 1
	}*/
	set $ztrap = "TratamentoErroCancelTransf^VARSESIntegrationErrorHandler"
 	$$$VAR
 	if $get(pidSolicTransf) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "CANCELSOLIC", $$$NO, "Parâmetro id da Solicitação de Transferência não informado.")
		ztrap		
	}
	if '$data(^VARSESSolicTransf(YM,pidSolicTransf,1)) {
		do GetLog^VARSESIntegrationLog(.arrLog, "CANCELSOLIC", $$$NO, "Solicitação de Transferência inexistente.")
		ztrap		
	}
	set strStatus = ##class(VARSESTrakIntegration.RISoap).%New().DescompletaRI(pidSolicTransf)
	if $$$ISOK(strStatus) {
		set ^zzRubens2("cancelok")=strStatus
 		do GetLog^VARSESIntegrationLog(.arrLog, "CANCELSOLIC", $$$YES, "A Solicitação de transferência "_pidSolicTransf_" foi cancelada com sucesso no MedTrak.")	
		do LogCancelSolic^VARSESIntegrationParametersLog(.arrLog, pidSolicTransf)
		do Save^VARSESIntegrationLog(.arrLog)
 	} else {
	 	//set ^zzRubens("cancelsolicerro")=strStatus
 		do GetLog^VARSESIntegrationLog(.arrLog, "CANCELSOLIC", $$$NO, "Erro na chamada do Web Service 'Cancelar Transferência'")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Detalhes do Erro", strStatus)
		ztrap		
 	}
 	quit strStatus
	
ParseTransferLine(&parrTransferLines, pobjTransferLinesToParse, &parrLog, pidSolicTransf)
 
	new intNumberLines, idxLine, objTransferLine, objTransferLineToParse, objItem, idItem, fltQuantity
	new idSolicTransfLinha, blnItemFound, fltSolicTransfQuantity
	
	set intNumberLines = $length(pobjTransferLinesToParse, "|")
	set idxLine = 0
	while idxLine < intNumberLines {
 
		set idxLine = idxLine + 1
		set objTransferLine = ""
		
		set objTransferLineToParse = $piece(pobjTransferLinesToParse, "|", idxLine)
		
		// Verificar se a linha não está na forma 'cod_produto~quantidade'.
		if $length(objTransferLineToParse, "~") '= 2 {
			do GetLog^VARSESIntegrationLog(.parrLog, "DISPATCHTRANS", $$$NO, "A linha de transferência não está no formato 'cod_produto_til_quantidade'. Valor da Linha "_idxLine_": " _ objTransferLineToParse)
			ztrap		
		}
		
		// Verificar se o item está vazio.
		set idItem = $piece(objTransferLineToParse, Y, 1)
		if idItem = "" {
			do GetLog^VARSESIntegrationLog(.parrLog, "DISPATCHTRANS", $$$NO, "Código do item vazio. Valor da Linha "_idxLine_": " _ objTransferLineToParse)
			ztrap		
		}
		
		// Verificar se o item existe.
		if '$data(^INART(YM, idItem, 1)) {
			do GetLog^VARSESIntegrationLog(.parrLog, "DISPATCHTRANS", $$$NO, "O item "_idItem_" não existe.")
			ztrap		
		}
		
		set objItem = $get(^INART(0, idItem, 1))
		
		// Verificar se foi especificada alguma quantidade.
		set fltQuantity = $piece(objTransferLineToParse, Y, 2)
		if fltQuantity = "" {
			do GetLog^VARSESIntegrationLog(.parrLog, "DISPATCHTRANS", $$$NO, "Quantidade do item não especificada. Valor da Linha "_idxLine_": " _ objTransferLineToParse)
			ztrap
		}
 
		// Verificar se o item em questão fazia parte da solicitação de transferência.
		set blnItemFound = $$$NO
		$$$Order3(^VARSESSolicTransfLinha,YM,pidSolicTransf,idSolicTransfLinha)
		
			set objSolicTransfLinha = $get(^VARSESSolicTransfLinha(YM, pidSolicTransf, idSolicTransfLinha, 1))
			
			if idItem = $$$VARSESSolicTransfLinhaCodigodoProduto(objSolicTransfLinha) {
				set blnItemFound   		   = $$$YES
				set fltSolicTransfQuantity = $$$VARSESSolicTransfLinhaQuantidade(objSolicTransfLinha)
			}
		$$$End
		if 'blnItemFound {
			do GetLog^VARSESIntegrationLog(.parrLog, "DISPATCHTRANS", $$$NO, "O item "_idItem_" - "_$$$INARTSearchName(objItem)_" não estava na Solicitação de Transferência.")
			ztrap
		}
 
		set $$$INTFRLineItem(objTransferLine) 		  = idItem
		set $$$INTFRLineBaseQuantity(objTransferLine) = fltQuantity
		set $$$INTFRLineQuantity(objTransferLine) 	  = fltQuantity
		set $$$INTFRLineUnit(objTransferLine)	      = $$$INARTUnitofMeasure(objItem)
		set $$$INTFRLineFREE4(objTransferLine)		  = fltSolicTransfQuantity
		
		set parrTransferLines(idxLine) = objTransferLine
	}
	quit
	
VerificarLocalidades(pidLocRequisitante, pidLocAbastecedor)
 
 	new objLocRequisitante, blnLocalArmazenagem, idTipoEstoque, strErrorMessage
 
 	set strStatus = $$$OK
 
 	// Somente os seguintes pares de requisitante e abastecedor são permitidos:
 	// 1) Requisitante: 1006 - ALM. HRG; 1025 - ALM. SAM	Abastecedor: 1 - ALMOXARIFADO CENTRAL
 	// 2) Requisitante: 5006 - FAR. HRG; 5085 - FAR. SAM	Abastecedor: 5 - FARMACIA CENTRAL
 	// 3) Requisitante: Storage Location do tipo Farmácia	Abastecedor: 5070 - NIAB	
	set objLocRequisitante  = $get(^WWW0121(0,YM,pidLocRequisitante,1))
	set blnLocalArmazenagem = $$$WWW0121StorageLocn(objLocRequisitante)
	set idTipoEstoque		= $$$WWW0121FREE2(objLocRequisitante)
 	
 	if '((pidLocRequisitante = 1006) && (pidLocAbastecedor = 1)) && 
 	   '((pidLocRequisitante = 5006) && (pidLocAbastecedor = 5)) && 
  	   '((pidLocRequisitante = 1025) && (pidLocAbastecedor = 1)) && 
 	   '((pidLocRequisitante = 5085) && (pidLocAbastecedor = 5)) && 
 	   '(blnLocalArmazenagem && (idTipoEstoque = "FARMACIA") && (pidLocAbastecedor = 5070)) {
 
		set strErrorMessage = "Local Requisitante e Abastecedor Inválidos. Apenas os pares 1006 - 1; 1025 - 1; 5006 - 5; 5085 - 5 são válidos; ou o requisitante sendo local de armazenagem e do tipo farmácia e o abastecedor = 5070."
 
		set strStatus = "0~"_strErrorMessage
	}
 
	quit strStatus
	
EfetivarTransfer(pintNoDocumento, pidTransfer, objTransferLines, pidRecLocationTRAK, pidSendLocationTRAK)
 
	new arrLog, arrTransferLines, idRecLocation, idSendLocation, objTransfer, strStatus, idTransferLine, objTransferLine, idSolicTransf
	
 	set $ztrap = "TratamentoErroDispatchTransf^VARSESIntegrationErrorHandler"
 	
	// Validando os parâmetros:
	
	if $get(pintNoDocumento) = "" {
 		do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "Número do documento vazio.")	
		ztrap
	}
	
	// Se a solicitação não existir.
	;set idSolicTransf = $$GetIdSolicTransf^VARSESSolicTransf(pintNoDocumento)
	set idSolicTransf = pintNoDocumento
	if idSolicTransf = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "Solicitação de Transferência inexistente.")
		ztrap		
	}
 
	// Se o id da Transferência for vazia.
	if $get(pidTransfer) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "Identificador da transferência vazio.")
		ztrap		
	}
	
	// Se a transferência já existir.
	if $data(^INTFR(YM, pidTransfer, 1)) {
		do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "A transferência "_pidTransfer_" já existe.")
		ztrap		
	}
	
	// Se a lista de itens estiver vazia.
	if $get(objTransferLines) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "Lista de itens vazia.")
		ztrap		
	}
 
	// Fazendo um parse na lista de itens e fazendo mais verificações (Vide implementação).
	do ParseTransferLine^VARSESIntegration(.arrTransferLines, objTransferLines, .arrLog, idSolicTransf)
 
	// Se o Local de Recebimento estiver vazio.
	if $get(pidRecLocationTRAK) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "Local recebedor não informado.")
		ztrap		
	}
 
	// Verificar se o Local de Recebimento existe.
	set idRecLocation = $order(^WWW0121s(YM, 11, pidRecLocationTRAK, 0, ""))
	if idRecLocation = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "Local recebedor "_pidRecLocationTRAK_" não existe.")
		ztrap		
	}
 
	// Se o Local Abastecedor estiver vazio.
	if $get(pidSendLocationTRAK) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "Local abastecedor não informado.")
		ztrap		
	}
 
	// Verificar se o Local Abastecedor existe.
	set idSendLocation = $order(^WWW0121s(YM, 11, pidSendLocationTRAK, 0, ""))
	if idSendLocation = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "Local abastecedor "_pidSendLocationTRAK_" não existe.")
		ztrap		
	}
	
	// Verificar regras de Localidade.
	set strStatus = $$VerificarLocalidades(idRecLocation, idSendLocation)
 	if '$$$ISOK(strStatus) {
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, strStatus)
		ztrap
 	}
		
	SET YLOCATION = idSendLocation
 
	// Salvando a tranferência.
	// COLOCAR NUMA TRANSAÇÃO.
 
	set objTransfer = ""
	set $$$INTFRTransferDate(objTransfer)      = $horolog
	set $$$INTFRTransferType(objTransfer)      = "REMOTE"
	set $$$INTFRSendingLocation(objTransfer)   = idSendLocation
	set $$$INTFRReceivingLocation(objTransfer) = idRecLocation
	set $$$INTFRDispatch(objTransfer)		   = $order(^INDRPUMLKWs(0, 1, idRecLocation, ""))
	set $$$INTFRDueDate(objTransfer)		   = $horolog
	set $$$INTFRStatus(objTransfer)			   = 0
	set $$$INTFRFREE1(objTransfer)			   = "TRANSFERENCIA"
	set $$$INTFRFREE15(objTransfer)			   = 1
	set $$$INTFRFREE2(objTransfer)			   = 1 //marca como transferencia criada por webservice
	set $$$INTFRFREE7(objTransfer)			   = pintNoDocumento
	set strStatus = $$$Save("INTFR",pidTransfer,objTransfer,$$$YES)
	if '$$$ISOK(strStatus) {
		do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "Não foi possível salvar a transferência '"_pidTransfer_"'.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", strStatus)
		ztrap		
	}
	
	// Salvando as linhas.
	$$$Order1(arrTransferLines,idTransferLine)
	
		set objTransferLine = arrTransferLines(idTransferLine)
	
		set strStatus = $$$Save("INTFRLine",pidTransfer_$$$COMMA_idTransferLine,objTransferLine,$$$YES)
		if '$$$ISOK(strStatus) {
			do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "Não foi possível salvar a linha '"_idTransferLine_"' da transferência '"_pidTransfer_"'.")
			do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", strStatus)
			ztrap		
		}
	
	$$$End
 
	do OnAfterSave^INTFR(pidTransfer, objTransfer)
 
 	;for i=1:1:100 hang 1
 	;set YFORM = "INTFR"
	set strStatus = $$webprocessall^VARSESINTFR(pidTransfer, idSendLocation)
	if '$$$ISOK(strStatus) {
		do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$NO, "Erro ao processar a transferência.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no processamento", $$$Text(strStatus))
		ztrap	
	}	
 
	do GetLog^VARSESIntegrationLog(.arrLog, "DISPATCHTRANS", $$$YES, "A efetivação da transferência "_pidTransfer_" foi processada com sucesso.")	
	do LogEfetivarTransfer^VARSESIntegrationParametersLog(.arrLog, pintNoDocumento, pidTransfer, objTransferLines, pidRecLocationTRAK, pidSendLocationTRAK)
	do Save^VARSESIntegrationLog(.arrLog)
 
	quit $$$OK
	
CadastrarItem(pidItem, pstrNome, pstrDescricao, pidUnidade, pidGrupo, pidStatus, pidATC, pidTipoCentral, pidElementoDespesa, pidSubelementoDespesa)
 
 	set $ztrap = "TratamentoErroCadastrarItem^VARSESIntegrationErrorHandler"
 
	new arrLog, objItem, strStatus
 
	// Verificando se o código do item foi passado em branco.
	if $get(pidItem) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Identificador do item não informado.")
		ztrap		
	}
	
	// Verificando se o nome do item foi passado em branco.
	if $get(pstrNome) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Nome do item não informado.")
		ztrap		
	}
 
	// Verificando se a unidade de medida do item foi passada em branco.
	if $get(pidUnidade) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Unidade de medida do item não informada.")
		ztrap		
	}
	
	// Verificando se a unidade de medida do item está cadastrada.
	set pidUnidade = $$GetUnidadeMedida(pidUnidade)
	if pidUnidade = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Unidade de medida do item não cadastrada.")
		ztrap		
	}
	
	// Verificando se o grupo do item foi passado em branco.
	if $get(pidGrupo) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Grupo do item não informado.")
		ztrap		
	}
	
	// Verificando se o grupo do item está cadastrada.
	if '$data(^INItemGroup(YM, pidGrupo, 1)) {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Grupo do item não cadastrado.")
		ztrap		
	}
	
	// Verificando se o status do item foi passado em branco.
	if $get(pidStatus) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Status do item não informado.")
		ztrap		
	}
	
	// Verificando se o status do item está cadastrado.
	if '$data(^WWW101(YM, "SPERRE", "PT", pidStatus, 1)) {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Status do item não cadastrado.")
		ztrap		
	}
	
	// Verificando se o Código ATC está cadastrado.
	if ($get(pidATC) '= "") && '$data(^VARSESATC(YM, pidATC, 1)) {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Código ATC do item não cadastrado.")
		ztrap		
	}
 
	// Verificando se o tipo do item foi passado em branco.
	if $get(pidTipoCentral) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Tipo do item não informado.")
		ztrap		
	}
	
	// Verificando se o tipo do item é 'ALMOXARIFADO' OU 'FARMACIA'
	if '((pidTipoCentral = "ALMOXARIFADO") || (pidTipoCentral = "FARMACIA")) {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Tipo do item tem que ser 'ALMOXARIFADO' ou 'FARMACIA'. Valor informado '"_pidTipoCentral_"'.")
		ztrap		
	}
 
	// Verificando se o elemento de despesa foi passado em branco.
	if $get(pidElementoDespesa) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Elemento de despesa do item não informado.")
		ztrap		
	}
  	/*
	// Verificando se o sub-elemento de despesa foi passado em branco.
	if $get(pidSubelementoDespesa) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Sub-elemento de despesa do item não informado.")
		ztrap		
	}
 	*/
	set objItem = $get(^INART(YM, pidItem, 1))
 
	set $$$INARTSearchName(objItem) 			  = pstrNome
	set $$$INARTCustomerTextorItemTextNo(objItem) = pstrDescricao
	set $$$INARTUnitofMeasure(objItem)			  = pidUnidade
	set $$$INARTItemGroup(objItem)				  = pidGrupo
	set $$$INARTHoldReason(objItem)				  = pidStatus
	set $$$INARTFREE12(objItem)					  = pidATC
	set $$$INARTFREE35(objItem)					  = pidTipoCentral
	set $$$INARTItemType(objItem)				  = 0 ; Produzir ou Comprar
	set $$$INARTFREE11(objItem)					  = pidElementoDespesa
	set $$$INARTFREE14(objItem)					  = pidSubelementoDespesa
	set $$$INARTFREE40(objItem)					  = 1 ; Natureza do estoque: 1- Estoque
 
	set strStatus = $$$Save("INART",pidItem,objItem,$$$YES)
	if '$$$ISOK(strStatus) {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$NO, "Não foi possível salvar o item '"_pidItem_"'.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", strStatus)
		ztrap		
	}
 
	do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$YES, "Item '"_pidItem_"' criado/atualizado com sucesso.")	
	do LogCadastrarItem^VARSESIntegrationParametersLog(.parrLog, pidItem, pstrNome, pstrDescricao, pidUnidade, pidGrupo, pidStatus, pidATC)
	do Save^VARSESIntegrationLog(.arrLog)
 
	quit $$$OK
 
CadastrarParteItem(pidItem, pidParte, pfltQuantidade)
 
  	set $ztrap = "TratamentoErroCadastrarParteItem^VARSESIntegrationErrorHandler"
 
	new arrLog, strStatus, idPartePosition, objItemPartRel, idUnidade, objParte
 
	// Verificando se o item foi passado em branco.
	if $get(pidItem) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGPARTITEM", $$$NO, "Item não informado.")
		ztrap		
	}
	
	// Verificando se o item existe.
	if '$data(^INART(YM, pidItem, 1)) {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGPARTITEM", $$$NO, "Item principal não cadastrado.")
		ztrap		
	}
	
	// Verificando se a parte do item foi passado em branco.
	if $get(pidParte) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGPARTITEM", $$$NO, "Parte não informada.")
		ztrap		
	}
	
	// Verificando se a parte existe.
	if '$data(^INART(YM, pidParte, 1)) {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGPARTITEM", $$$NO, "Parte não cadastrada.")
		ztrap		
	}
	
	// Verificando se a quantidade foi informada.
	if $get(pfltQuantidade) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGPARTITEM", $$$NO, "Quantidade não informada.")
		ztrap		
	}
	
	// Verificando se a quantidade é maior que zero.
	if $get(pfltQuantidade) = 0 {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGPARTITEM", $$$NO, "Quantidade deve ser maior que 0.")
		ztrap		
	}
	
	set idPartePosition = $order(^INARTTs(0, 1, pidParte, pidItem, ""))
	if idPartePosition = "" {
		set idPartePosition = $order(^INARTT(YM, pidItem, ""),-1) + 1
	} else {
 
		set objItemPartRel = $get(^INARTT(0, pidItem, pidParte, 1))
	}
	
	set objParte 	   = $get(^INART(0, pidParte, 1))
	set idUnidade      = $$$INARTUnitofMeasure(objParte)
	set strDescription = $$$INARTSearchName(objParte)
	
	set $$$INARTTItemNumber1(objItemPartRel) = pidParte
	set $$$INARTTDescription(objItemPartRel) = strDescription
	set $$$INARTTQuantity(objItemPartRel)	 = pfltQuantidade
	set $$$INARTTUnit(objItemPartRel)		 = idUnidade
 
	set strStatus = $$$Save("INARTT",pidItem_$$$COMMA_idPartePosition,objItemPartRel,$$$OK)
	if '$$$ISOK(strStatus) {
		do GetLog^VARSESIntegrationLog(.arrLog, "REGPARTITEM", $$$NO, "Não foi possível salvar a parte do item. Item '"_pidItem_"' e parte '"_pidParte_"'.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", strStatus)
		ztrap		
	}
 
	do GetLog^VARSESIntegrationLog(.arrLog, "REGITEM", $$$YES, "Parte do item criado/atualizado com sucesso.")	
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Item", pidItem)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Parte", pidParte)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Quantidade", pfltQuantidade)
	do Save^VARSESIntegrationLog(.arrLog)
 
	quit $$$OK
 
AtualizarCustoMedio(pidItem, pfltCustoMedio)
 
  	set $ztrap = "TratamentoErroAtualizarCustoMedio^VARSESIntegrationErrorHandler"
 
	new arrLog, strStatus, objItem
 
	// Verificando se o item foi passado em branco.
	if $get(pidItem) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "UPDCM", $$$NO, "Item não informado.")
		ztrap		
	}
	
	// Verificando se o item existe.
	if '$data(^INART(YM, pidItem, 1)) {
		do GetLog^VARSESIntegrationLog(.arrLog, "UPDCM", $$$NO, "Item não cadastrado.")
		ztrap		
	}
 
	// Verificando se custo médio foi informado.
	if $get(pfltCustoMedio) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "UPDCM", $$$NO, "Valor do custo médio não informado.")
		ztrap		
	}
 
 	set objItem = $get(^INART(YM, pidItem, 1))
 	
 	set $$$INARTAverageCost(objItem) = pfltCustoMedio
 	//set $$$INARTFixedPurchasePrice(objItem) = pfltCustoMedio
 	//Karine@25/01/08 - Alterado para pegar custo médio corretamente
 
 	set strStatus = $$$Save("INART",pidItem,objItem,1)
	if '$$$ISOK(strStatus) {
		do GetLog^VARSESIntegrationLog(.arrLog, "UPDCM", $$$NO, "Não foi possível salvar o item. Item '"_pidItem_"'.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", strStatus)
		ztrap		
	}
	
	do GetLog^VARSESIntegrationLog(.arrLog, "UPDCM", $$$YES, "Custo médio do item atualizado com sucesso.")	
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Item", pidItem)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Custo Médio", pfltCustoMedio)
	do Save^VARSESIntegrationLog(.arrLog)
 
	quit $$$OK
 
PacienteService(pidPaciente, pstrNome, pdteDataNascimento, pblnDataNInformada, pstrCPF, pstrProntuario, pstrCNS)
 
   	set $ztrap = "TratamentoErroPacienteService^VARSESIntegrationErrorHandler"
 
	new arrLog, strStatus, objPaciente
 
	// Verificando se o identificador do paciente foi passado em branco.
	if $get(pidPaciente) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTMASTER", $$$NO, "Identificador do paciente não informado.")
		ztrap		
	}
 
	// Verificando se o nome do paciente foi passado em branco.
	if $get(pstrNome) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTMASTER", $$$NO, "Nome do paciente não informado.")
		ztrap		
	}
 
	// Verificando se a data de nascimento e o boleano de data foi passado em branco.
	if ($get(pdteDataNascimento) = "") && ($get(pblnDataNInformada) = "") {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTMASTER", $$$NO, "Data de nascimento ou boleano de data não informado.")
		ztrap		
	}
 
	set objPaciente = $get(^VARSESPACIENTE(YM, pidPaciente, 1))
 
	set $$$VARSESPACIENTENome(objPaciente)           			= pstrNome
	set $$$VARSESPACIENTECPF(objPaciente)            			= pstrCPF
	set $$$VARSESPACIENTEProntuario(objPaciente)     			= pstrProntuario
	set $$$VARSESPACIENTEDataNascimento(objPaciente) 			= pdteDataNascimento
	set $$$VARSESPACIENTEDatadenascimentonaoinform(objPaciente) = pblnDataNInformada
	set $$$VARSESPACIENTECNS(objPaciente) 						= pstrCNS
	
	set strStatus = $$$Save("VARSESPACIENTE",pidPaciente,objPaciente,$$$YES)
	if '$$$ISOK(strStatus) {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTMASTER", $$$NO, "Não foi possível salvar o paciente. Paciente '"_pidPaciente_"'.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", strStatus)
		ztrap		
	}
	
 
	do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTMASTER", $$$YES, "Paciente atualizado com sucesso.")	
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Paciente", pidPaciente)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Nome", pstrNome)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "CPF", pstrCPF)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Prontuario", pstrProntuario)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Data Nascimento", pdteDataNascimento)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Data ñ informada", pblnDataNInformada)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "CNS", pstrCNS)
	do Save^VARSESIntegrationLog(.arrLog)
	
	quit $$$OK
 
EfetivarConsumoPacienteWS(pidPaciente, pidMedico, pstrPrescricao, pidSendLocationTRAK, pstrItens, pidCentroCustoTRAK) 
 
 	set $ztrap = "TratamentoErroEfetivarConsumoPaciente^VARSESIntegrationErrorHandler"
 
	new arrLog, idSendLocation, objParamSES, strLocGerenciadosAlphalinc, intNumeroLocais, blnLocalFound, idLocation, objSendLocation,
		objAdjustment, arrAdjustmentLines, idAdjustmentLine, objAdjustmentLine, idConsumoPaciente, objPaciente, objMedico
 
	// Verifica se o identificador do paciente foi informado.
	if $get(pidPaciente) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Identificador do paciente não informado.")
		ztrap		
	}
	
	// Verifica se o paciente existe.
	if '$data(^VARSESPACIENTE(0, pidPaciente, 1)) {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Código do paciente não cadastrado.")
		ztrap		
	}
 
	// Verifica se o identificador do médico foi informado.
	if $get(pidMedico) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Identificador do médico não informado.")
		ztrap		
	}
	
	// Verifica se o médico existe.
	if '$data(^VARSESProfSaude(0, pidMedico, 1)) {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Código do médico não cadastrado.")
		ztrap		
	}
 
	// Verifica se a prescrição foi informada.
	if $get(pstrPrescricao) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Prescrição não informada.")
		ztrap		
	}
 
	// Andre, 28/03/2008:
	// Verifica se a prescrição já foi utilizada em outro consumo anterior:
	new numOutroConsumo
	set numOutroConsumo = $order(^INADJs(YM,100,pstrPrescricao,""))
	if $get(numOutroConsumo) '= "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Prescrição já utilizada em outra dispensação de número '"_numOutroConsumo_"'.")
		ztrap		
	}
 
 
	// Andre, 28/03/2008:
	// Não será mais feita reserva.
	// Libera as reservas para a prescrição informada:
	/*
	new strStatusLiberarReserva
	set strStatusLiberarReserva = $$LiberarReservaPorPrescricao^VARSESReserva(pstrPrescricao)
	if strStatusLiberarReserva '= 1  {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Não foi possível liberar reservas para a prescrição '"_pstrPrescricao_"'. Erro: "_strStatusLiberarReserva_".")
		ztrap		
	}
	*/
 
	// Verifica se o local foi informado.
	if $get(pidSendLocationTRAK) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Local abastecedor não informado.")
		ztrap		
	}
 
	// Verificar se o Local Abastecedor existe.
	set idSendLocation = $order(^WWW0121s(YM, 11, pidSendLocationTRAK, 0, ""))
	if idSendLocation = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Local abastecedor "_pidSendLocationTRAK_" não existe.")
		ztrap		
	}
 
 	// Andre, 28/03/2008
	// Verifica se o centro de custo foi informado.
	if $get(pidCentroCustoTRAK) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Centro de Custo não informado.")
		ztrap		
	}
 
 	// Andre, 28/03/2008
	// Verificar se o centro de custo  existe.
	new idCentroCustoAlpha
	set idCentroCustoAlpha = $order(^WWW0121s(YM, 11, pidCentroCustoTRAK, 0, ""))
	if idCentroCustoAlpha = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Centro de Custo "_pidCentroCustoTRAK_" não existe.")
		ztrap		
	}
 
 	// Andre, 28/03/2008
 	// Define YLOCATION para que o numerador das chaves primárias possual o local correto:
 	set YLOCATION = idSendLocation
 
 	// Andre, 27/03/2008:
 	// Não há mais necessidade de verificar "Locais Gerenciados no Alphalinc".
 	// 
 	// TODO: AINDA É PRECISO VERIFICAR SE O LOCAL É FARMÁCIA DE REGIONAL, POIS SÓ ESTES PODEM
 	// RECEBER PRESCRIÇÃO ELETRÔNICA!!!!
 	/*
 	// Só podem ser aceitos ajustes para os locais regionais (campo "Locais Gerenciados no Alphalinc")
	set objParamSES = $get(^VARSESParams(YM, YM, 1))
	set strLocGerenciadosAlphalinc = $$$VARSESParamsLocaisAlphalincaSincroniz(objParamSES)
	set intNumeroLocais = $length(strLocGerenciadosAlphalinc, ";")
	set blnLocalFound = $$$NO
 	for i = 1:1:intNumeroLocais {
		set idLocation = $piece(strLocGerenciadosAlphalinc, ";", i)
		if idLocation = idSendLocation {
			set blnLocalFound = $$$YES
		}
 	}
 	if 'blnLocalFound {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Local abastecedor "_pidSendLocationTRAK_" não está configurado como sendo um 'Locais Gerenciados no Alphalinc' e portanto não pode ter o estoque ajustado.")
		ztrap		
 	}
 	*/
 
	// Verificando se o local é do tipo Farmácia.
	set objSendLocation = $get(^WWW0121(0, YM, idSendLocation, 1))
	if $$$WWW0121FREE2(objSendLocation) '= "FARMACIA" {
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Local abastecedor "_pidSendLocationTRAK_" não é do tipo farmácia.")
		ztrap		
	}
	
	 
	// Fazendo um parse na lista de itens e fazendo mais verificações (Vide implementação).
	do ParseAdjustmentLine(.arrAdjustmentLines, pstrItens, .arrLog, 0) ; 0 = Motivo Próprio.
	
  	// Verificando se o estoque vai ficar negativo.
 	$$$Order1(arrAdjustmentLines,idAdjustmentLine)
 
  		set objAdjustmentLine = arrAdjustmentLines(idAdjustmentLine)
 
 		// Andre, 28/03/2008:
 		// A quantidade informada deve ser negativa:
 		if ( $$$INADJLineQuantity(objAdjustmentLine) >= 0 ) {
	 		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "A quantidade informada de consumo deve ser negativa (Item: '"_$$$INADJLineItem(objAdjustmentLine)_"', Local: '"_pidSendLocationTRAK_"', Quantidade: '"_$$$INADJLineQuantity(objAdjustmentLine)_"').")
	 		ztrap
 		}
 		
 		// Se o estoque atual após o ajuste ficar negativo.
 		if $$Estoque^VARSESEstoque(YM, $$$INADJLineItem(objAdjustmentLine), idSendLocation) + $$$INADJLineQuantity(objAdjustmentLine) < 0 {
 			do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "O Item '"_$$$INADJLineItem(objAdjustmentLine)_"' na Localidade '"_pidSendLocationTRAK_"' ficará com o estoque negativo se fizermos o ajuste de "_$$$INADJLineQuantity(objAdjustmentLine)_" unidades.")
 			ztrap
 		}
  	$$$End
	
	
	// Salvando o Consumo para paciente.
	set idAdjustment = $$$NextKey("INADJ")
	set $$$INADJReasonCode(objAdjustment)  		   = 0 ; Motivo Próprio.
	set $$$INADJCreatedDate(objAdjustment) 		   = $horolog
	set $$$INADJCreatedBy(objAdjustment)   		   = YBED
	set $$$INADJSit]]><![CDATA[eLocation(objAdjustment)		   = idSendLocation
	set $$$INADJStatus(objAdjustment) 			   = $$$EnumINSTATUSUnprocessed
	set $$$INADJStockAdjustmentDate(objAdjustment) = $horolog
	
	set objPaciente = ^VARSESPACIENTE(0, pidPaciente, 1)
	set objMedico   = ^VARSESProfSaude(0, pidMedico, 1)
	
	set $$$INADJFREE1(objAdjustment) = $$$VARSESProfSaudeNumero(objMedico)
	set $$$INADJFREE2(objAdjustment) = pidPaciente
	set $$$INADJFREE3(objAdjustment) = 3 ; Prescrição TRAK
	; set $$$INADJFREE4(objAdjustment) = ; Deixar em branco
	; set $$$INADJFREE5(objAdjustment) = ; Também não precisa. Funcionalidade usada apenas na tela
	set $$$INADJFREE6(objAdjustment) = $$$VARSESPACIENTENomedaMae(objPaciente)
	set $$$INADJFREE7(objAdjustment) = $$$VARSESPACIENTEDataNascimento(objPaciente)
	set $$$INADJFREE8(objAdjustment) = $$$VARSESPACIENTENome(objPaciente)
	set $$$INADJFREE9(objAdjustment) = $$$VARSESProfSaudeNomedoServidor(objMedico)
	; set $$$INADJFREE10(objAdjustment) = ; Também não precisa. Funcionalidade usada apenas na tela
	set $$$INADJFREE11(objAdjustment) = $$$VARSESProfSaudeFuncaoEspecialidade(objMedico)
	set $$$INADJFREE12(objAdjustment) = $$$VARSESPACIENTECNS(objPaciente)
	set $$$INADJFREE13(objAdjustment) = pstrPrescricao
	set $$$INADJFREE14(objAdjustment) = idCentroCustoAlpha
	set $$$INADJFREE21(objAdjustment) = $$$VARSESPACIENTEProntuario(objPaciente) // No. do Prontuário do Paciente
	
	set strStatus = $$$Save("INADJ",idAdjustment,objAdjustment,$$$YES)
 	if '$$$ISOK(strStatus) {
	 	
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Erro ao efetuar o ajuste.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", $$DecodeError^COMUtilError(strStatus))
		ztrap		
 	}
 	
 	$$$Order1(arrAdjustmentLines,idAdjustmentLine)
 	
 		set objAdjustmentLine = arrAdjustmentLines(idAdjustmentLine)
 		
 		// Andre, 28/03/2008 - Informações adicionais:
 		set $piece(objAdjustmentLine,Y,9) 	= -$$$INADJLineQuantity(objAdjustmentLine)
 		set $piece(objAdjustmentLine,Y,10) 	= $$Estoque^VARSESEstoque(YM,$$$INADJLineItem(objAdjustmentLine),idSendLocation)
 		set $piece(objAdjustmentLine,Y,11) 	= $$EstoqueNaEmpresa^VARSESEstoque(YM,$$$INADJLineItem(objAdjustmentLine))
 		
 		set strStatus = $$$Save("INADJLine",idAdjustment_$$$COMMA_idAdjustmentLine,objAdjustmentLine,$$$YES)
 	
	 	if '$$$ISOK(strStatus) {
		 	
			do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, "Erro ao efetuar o ajuste.")
			do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", $$DecodeError^COMUtilError(strStatus))
			ztrap		
	 	}
 	$$$End
 
	// Processar o consumo para paciente.
	set strStatus = $$Editable^INADJ(idAdjustment)
 	if '$$$ISOK(strStatus) {	 	
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, $$DecodeError^COMUtilError(strStatus))
		ztrap		
 	}
 	
 	set strStatus = $$PostTxn^INADJ(idAdjustment)
 	if '$$$ISOK(strStatus) {	 	
		do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$NO, $$DecodeError^COMUtilError(strStatus))
		ztrap		
 	}
 
 	do GetLog^VARSESIntegrationLog(.arrLog, "PATIENTCONSUMPWS", $$$YES, "Consumo para paciente feito com sucesso.")	
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Consumo para paciente criado: ", idAdjustment)
	do LogConsumoPaciente^VARSESIntegrationParametersLog(.arrLog, pidPaciente, pidMedico, pstrPrescricao, pidSendLocationTRAK, pstrItens, pidCentroCustoTRAK) 
 
	do Save^VARSESIntegrationLog(.arrLog)
 
	quit $$$OK
 
AtualizarProfissionalSaude(pidCodigo, pstrMatriculaSES, pstrNome, pidConselho, pstrNumConselho, pidEspecialidadeTrak)
 	// Andre, 02/04/2008: O parâmetro pidEspecialidade foi alterado para pidEspecialidadeTrak e agora é 
 	// feita uma conversão entre o código de especialidade do Trak para o código de especialidade do Alphalinc.
 
 	set $ztrap = "TratamentoErroAtualizarProfissionalSaude^VARSESIntegrationErrorHandler"
 
 	$$$VAR
 
	new arrLog, objProfissionalSaude, strStatus
	 
	// Verifica se o identificador do profissional de saúde foi informado.
	if $get(pidCodigo) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "DOCTORMASTER", $$$NO, "Identificador do profissional de saúde não informado.")
		ztrap		
	}
 
	// Verifica se o nome do profissional de saúde foi informado.
	if $get(pstrNome) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "DOCTORMASTER", $$$NO, "Nome do profissional de saúde não informado.")
		ztrap		
	}
 
	// Andre, 02/04/2008
	// Verifica se o Id do conselho do profissional de saúde foi informado.
	if $get(pidConselho) = "" {
		// Andre, 04/04/2008 - Não mais obrigatório:
		;do GetLog^VARSESIntegrationLog(.arrLog, "DOCTORMASTER", $$$NO, "Id do conselho do profissional de saúde não informado.")
		;ztrap		
	}
 	else {
		// Andre, 02/04/2008:
		// Verifica se o Id do conselho do profissional de saúde existe.
		if ( '$data(^INPARA(0,"VARSESCONSELHOS","PT",pidConselho)) ) {
			do GetLog^VARSESIntegrationLog(.arrLog, "DOCTORMASTER", $$$NO, "Id do conselho do profissional de saúde não cadastrado.")
			ztrap		
		}
 	}
	
	// Verifica se o número do conselho do profissional de saúde foi informado.
	// Andre, 04/04/2008 - Não mais obrigatório:
	/*
	if $get(pstrNumConselho) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "DOCTORMASTER", $$$NO, "Número do conselho do profissional de saúde não informado.")
		ztrap		
	}
	*/
 
	// Andre, 07/04/2008 - A especialidade é opcional no Trak:
	// Verifica se a especialidade do profissional de saúde foi informada.
	/*
	if $get(pidEspecialidadeTrak) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "DOCTORMASTER", $$$NO, "Especialidade do profissional de saúde não informada.")
		ztrap		
	}
	*/
	
	// Verifica se a especialidade do profissional de saúde existe.
	// Andre, 02/04/2008 - Fazendo a conversão do código de especialidade do Trak para o Alphalinc:
	new idEspecialidade
	set idEspecialidade = ""
	if $get(pidEspecialidadeTrak) '= "" {
		set idEspecialidade = $order(^VARSESESPMEDs(YM,1,pidEspecialidadeTrak,""))
		//if '$data(^VARSESESPMED(0, pidEspecialidadeTrak, 1)) {
		if ( idEspecialidade = "" ) {
			do GetLog^VARSESIntegrationLog(.arrLog, "DOCTORMASTER", $$$NO, "Especialidade do profissional de saúde não cadastrada.")
			ztrap		
		}
	}
 
 	set objProfissionalSaude = $get(^VARSESProfSaude(YM, pidCodigo, 1))
 	
 	set $$$VARSESProfSaudeMatricula(objProfissionalSaude) 			= pstrMatriculaSES
 	set $$$VARSESProfSaudeNomedoServidor(objProfissionalSaude) 		= pstrNome
 	set $$$VARSESProfSaudeConselho(objProfissionalSaude) 			= pidConselho
 	set $$$VARSESProfSaudeNumero(objProfissionalSaude) 			    = pstrNumConselho
 	set $$$VARSESProfSaudeFuncaoEspecialidade(objProfissionalSaude) = idEspecialidade // Andre, 02/04/2008 - antes: pidEspecialidade, agora usa o código Alphalinc.
 
 	set strStatus = $$$Save("VARSESProfSaude",pidCodigo,objProfissionalSaude,$$$YES)
 
	if '$$$ISOK(strStatus) {
		do GetLog^VARSESIntegrationLog(.arrLog, "DOCTORMASTER", $$$NO, "Não foi possível salvar o profissional de saúde '"_pidCodigo_"'.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", strStatus)
		ztrap		
	}
 
 	do GetLog^VARSESIntegrationLog(.arrLog, "DOCTORMASTER", $$$YES, "Profissional de saúde atualizado com sucesso.")	
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Identificador", pidCodigo)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Matrícula SES", pstrMatriculaSES)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Nome", pstrNome)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Conselho", pidConselho)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Número Conselho", pstrNumConselho)
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Especialidade Trak", pidEspecialidadeTrak) // Andre, 02/04/2008 - Usando o código Trak.
	do Save^VARSESIntegrationLog(.arrLog)
	
	quit $$$OK
	
EnviarReciboTransferencia(pidRec)
 
 	// Desabilitando os WebServices
 	quit $$$OK
 
	new arrLog, objRec, idRecLine, objRecLine, fltQuantity, idItem, strItens
	
   	set $ztrap = "TratamentoErroEnviarReciboTransferencia^VARSESIntegrationErrorHandler"
 
	set strItens = ""
	$$$Order3(^INRECLine,YM,pidRec,idRecLine)
	
		set objRecLine = $get(^INRECLine(YM, pidRec, idRecLine, 1))
		
		set fltQuantity = $$$INRECLineQuantity(objRecLine)
		set idItem 		= $$$INRECLineItem(objRecLine)
 
		// Adiciona uma vírgula se já foi adicionao algum item.
		if strItens '= "" set strItens = strItens_"|"
		
		set strItens = strItens_idItem_"~"_fltQuantity	
 
	$$$End
 
	set objRec = $get(^INREC(YM, pidRec, 1))
 
	set strStatus = ##class(VARSESTrakIntegration.AceiteTRSoap).%New().AceiteTR($$$INRECProcessedDate(objRec), 
								$$$INRECTransferNumbers(objRec), strItens)
 
 	// Verificar se a solicitação foi Ok.
 	if $$$ISOK(strStatus) {
	 	
 		do GetLog^VARSESIntegrationLog(.arrLog, "RECEIPTTRANSF", $$$YES, "O recibo "_pidRec_" foi enviado com sucesso para o MedTrak.")	
		do Save^VARSESIntegrationLog(.arrLog)
 	} else {
	 	
 		do GetLog^VARSESIntegrationLog(.arrLog, "RECEIPTTRANSF", $$$NO, "Erro na chamada do Web Service 'Aceite TR.'")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Identificação do recibo", pidRec)
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Detalhes do Erro", strStatus)
		ztrap		
 	}
 
	quit  
 
AjustarEstoqueWS(pidSendLocationTRAK, pobjAjusteLinhas, pstrMotivo)
 
   	set $ztrap = "TratamentoErroAjustarEstoque^VARSESIntegrationErrorHandler"
 
	new arrLog, strStatus, objAdjustment, arrAdjustmentLines, idAdjustmentLine, objAdjustmentLine, objParamSES, strLocGerenciadosTrak
	new intNumeroLocais, blnLocalFound, idLocation, idSendLocation, objSendLocation, objItem
 
	// Se o Local Abastecedor estiver vazio.
	if $get(pidSendLocationTRAK) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$NO, "Local abastecedor não informado.")
		ztrap		
	}
 
	// Verificar se o Local Abastecedor existe.
	set idSendLocation = $order(^WWW0121s(YM, 11, pidSendLocationTRAK, 0, ""))
	if idSendLocation = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$NO, "Local abastecedor "_pidSendLocationTRAK_" não existe.")
		ztrap		
	}
 	
	// Só podem ser aceitos ajustes para os locais centrais (campo "Locais Gerenciados no MedTrak")
	set objParamSES = $get(^VARSESParams(YM, YM, 1))
	set strLocGerenciadosTrak = $$$VARSESParamsLocaisGerenciadosnoTrakCa(objParamSES)
	set intNumeroLocais = $length(strLocGerenciadosTrak, ";")
	set blnLocalFound = $$$NO
 	for i = 1:1:intNumeroLocais {
		set idLocation = $piece(strLocGerenciadosTrak, ";", i)
		if idLocation = idSendLocation {
			set blnLocalFound = $$$YES
		}
 	}
 	if 'blnLocalFound {
		do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$NO, "Local abastecedor "_pidSendLocationTRAK_" não está configurado como sendo um 'Locais Gerenciados no MedTrak' e portanto não pode ter o estoque ajustado.")
		ztrap		
 	}
	 
	// Fazendo um parse na lista de itens e fazendo mais verificações (Vide implementação).
	do ParseAdjustmentLine(.arrAdjustmentLines, pobjAjusteLinhas, .arrLog, 8) ; 8 = Ajustado pelo MedTrak
	
	// Verificando se:
	// Produto de FARMACIA só pode ser aceito em local do tipo FARMACIA. 
	// Produto de ALMOXARIFADO só pode ser aceito em local do tipo ALMOXARIFADO.
	set objSendLocation = $get(^WWW0121(YM, YM, idSendLocation, 1))
 	$$$Order1(arrAdjustmentLines,idAdjustmentLine)
 	
 		set objAdjustmentLine = arrAdjustmentLines(idAdjustmentLine)
 		set objItem = $get(^INART(0, $$$INADJLineItem(objAdjustmentLine), 1))
 		
 		if $$$INARTFREE35(objItem) '= $$$WWW0121FREE2(objSendLocation) {
			do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$NO, "A Localidade '"_pidSendLocationTRAK_"' é do tipo '"_$$$WWW0121FREE2(objSendLocation)_"'. E o produto '"_$$$INADJLineItem(objAdjustmentLine)_"'é do tipo '"_$$$INARTFREE35(objItem)_"'")
 			ztrap
 		}
  	$$$End
  	
  	// Verificando se o estoque vai ficar negativo.
 	$$$Order1(arrAdjustmentLines,idAdjustmentLine)
 	
 		set objAdjustmentLine = arrAdjustmentLines(idAdjustmentLine)
 		// Se o estoque atual após o ajuste ficar negativo.
  		if $$Estoque^VARSESEstoque(YM, $$$INADJLineItem(objAdjustmentLine), idSendLocation) + $$$INADJLineQuantity(objAdjustmentLine) < 0 {
 			do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$NO, "O Item '"_$$$INADJLineItem(objAdjustmentLine)_"' na Localidade '"_pidSendLocationTRAK_"' ficará com o estoque negativo se fizermos o ajuste de "_$$$INADJLineQuantity(objAdjustmentLine)_" unidades.")
 			ztrap
 		}
  	$$$End
	
	// Salvando o ajuste.
	set idAdjustment = $$$NextKey("INADJ")
	set $$$INADJReasonCode(objAdjustment)  		   = 8 ; Ajustado pelo MedTrak
	set $$$INADJCreatedDate(objAdjustment) 		   = $horolog
	set $$$INADJCreatedBy(objAdjustment)   		   = YBED
	set $$$INADJSiteLocation(objAdjustment)		   = idSendLocation
	set $$$INADJStatus(objAdjustment) 			   = $$$EnumINSTATUSUnprocessed
	set $$$INADJStockAdjustmentDate(objAdjustment) = $horolog
	
	set strStatus = $$$Save("INADJ",idAdjustment,objAdjustment,$$$YES)
 	if '$$$ISOK(strStatus) {
	 	
		do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$NO, "Erro ao efetuar o ajuste.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", $$DecodeError^COMUtilError(strStatus))
		ztrap		
 	}
 	
 	$$$Order1(arrAdjustmentLines,idAdjustmentLine)
 	
 		set objAdjustmentLine = arrAdjustmentLines(idAdjustmentLine)
 		set strStatus = $$$Save("INADJLine",idAdjustment_$$$COMMA_idAdjustmentLine,objAdjustmentLine,$$$YES)
 	
	 	if '$$$ISOK(strStatus) {
		 	
			do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$NO, "Erro ao efetuar o ajuste.")
			do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", $$DecodeError^COMUtilError(strStatus))
			ztrap		
	 	}
 	$$$End
 
	// Processar o ajuste.
	set strStatus = $$Editable^INADJ(idAdjustment)
 	if '$$$ISOK(strStatus) {	 	
		do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$NO, $$DecodeError^COMUtilError(strStatus))
		ztrap		
 	}
 	
 	set strStatus = $$PostTxn^INADJ(idAdjustment)
 	if '$$$ISOK(strStatus) {	 	
		do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$NO, $$DecodeError^COMUtilError(strStatus))
		ztrap		
 	}
 
	do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$YES, "Ajuste de estoque feito com sucesso.")
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "Ajuste Criado", idAdjustment)
	do LogAjustarEstoqueWS^VARSESIntegrationParametersLog(.arrLog, pidSendLocationTRAK, pobjAjusteLinhas, pstrMotivo)	
	do Save^VARSESIntegrationLog(.arrLog)
	
	quit $$$OK
	
ParseAdjustmentLine(&parrAdjustmentLines, pobjAdjustmentLinesToParse, &parrLog, pidRazao)
 
	new intNumberLines, idxLine, objAdjustmentLine, objAdjustmentLineToParse, objItem, idItem, fltQuantity
	
	set intNumberLines = $length(pobjAdjustmentLinesToParse, "|")
	set idxLine = 0
	while idxLine < intNumberLines {
 
		set idxLine = idxLine + 1
		set objAdjustmentLine = ""
		
		set objAdjustmentLineToParse = $piece(pobjAdjustmentLinesToParse, "|", idxLine)
		
		// Verificar se a linha não está na forma 'cod_produto~quantidade'.
		if $length(objAdjustmentLineToParse, "~") '= 2 {
			do GetLog^VARSESIntegrationLog(.parrLog, "STOCKADJ", $$$NO, "Os itens do ajuste não está no formato 'cod_produto_til_quantidade'. Valor da Linha "_idxLine_": " _ objAdjustmentLineToParse)
			ztrap		
		}
		
		// Verificar se o item está vazio.
		set idItem = $piece(objAdjustmentLineToParse, Y, 1)
		if idItem = "" {
			do GetLog^VARSESIntegrationLog(.parrLog, "STOCKADJ", $$$NO, "Código do item vazio. Valor da Linha "_idxLine_": " _ objAdjustmentLineToParse)
			ztrap
		}
		
		// Verificar se o item existe.
		if '$data(^INART(YM, idItem, 1)) {
			do GetLog^VARSESIntegrationLog(.parrLog, "STOCKADJ", $$$NO, "O item "_idItem_" não existe.")
			ztrap
		}
		
		set objItem = $get(^INART(0, idItem, 1))
		
		// Verificar se foi especificada alguma quantidade.
		set fltQuantity = $piece(objAdjustmentLineToParse, Y, 2)
		if fltQuantity = "" {
			do GetLog^VARSESIntegrationLog(.parrLog, "STOCKADJ", $$$NO, "Quantidade do item não especificada. Valor da Linha "_idxLine_": " _ objAdjustmentLineToParse)
			ztrap
		}
 
		set $$$INADJLineItem(objAdjustmentLine)          = idItem
		set $$$INADJLineQuantity(objAdjustmentLine)      = fltQuantity
		set $$$INADJLineBaseQuantity(objAdjustmentLine)  = fltQuantity
		set $$$INADJLineUnit(objAdjustmentLine)          = $$$INARTUnitofMeasure(objItem)
		set $$$INADJLineReasonCode(objAdjustmentLine)	 = pidRazao
		set $$$INADJLineStockLocation(objAdjustmentLine) = "A"
		
		set parrAdjustmentLines(idxLine) = objAdjustmentLine
	}
	quit
 
AjustarEstoqueClient(pDate, pLocalEst, pItens, pidIdentificador)
 
 	// Desabilitando os WebServices
 	quit $$$OK
	
   	set $ztrap = "TratamentoErroAjustarEstoqueCliente^VARSESIntegrationErrorHandler"
 
	new arrLog, strStatus, intNumberLines, idxLine, objAdjustmentLineToParse, idItem, fltQuantidade, pLocalEstTRAK
 
	set boolean=0
	set objVARSESParams=$PIECE($get(^VARSESParams(YM,0,1)),Y,4)
	set counter=$length(objVARSESParams,";")
	while counter'=0 {
		if $piece(objVARSESParams,";",counter)=pLocalEst set boolean=1
		set counter=counter-1
	}
 
	if boolean=0 {
		do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$YES, "Web Service não invocado, pois a localidade '"_pLocalEst_"' não está configurada como 'Locais Alphalinc a Sincronizar com MedTrak'.")
		do LogAjustarEstoqueClient^VARSESIntegrationParametersLog(.arrLog, pDate, pLocalEst, pItens, pidIdentificador)
		do Save^VARSESIntegrationLog(.arrLog)
		quit
	}
 
	set pLocalEstTRAK=$piece($get(^WWW0121(YM,YM,pLocalEst,1)),Y,63)
	if (pLocalEst=""){
		do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$YES, "Local '"_pLocalEst_"' sem relação com algum local no MedTrak.")
		ztrap		
	}
	
  	// Verificando se o estoque vai ficar negativo.
	set intNumberLines = $length(pItens, "|")
	set idxLine = 0
 
	while idxLine < intNumberLines {
 
		set idxLine = idxLine + 1
		
		set objAdjustmentLineToParse = $piece(pItens, "|", idxLine)
		
		set idItem 		  = $piece(objAdjustmentLineToParse, "~", 1)
		set fltQuantidade = $piece(objAdjustmentLineToParse, "~", 2)
	
 		// Se o estoque atual após o ajuste ficar negativo.
 		// Comentando o "+ fltQuantidade", pois quando o Web service Client é chamado, o estoque já foi baixado, logo 
 		// não precisamos somar novamente essa quantidade para zerarmos o estoque.
  		if $$Estoque^VARSESEstoque(YM, idItem, pLocalEst) /*+ fltQuantidade*/ < 0 {
 			do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$NO, "O Item '"_idItem_"' na Localidade '"_pLocalEst_"' ficará com o estoque negativo se fizermos o ajuste de "_fltQuantidade_" unidades.")
 			ztrap
 		}
	}
 
	set strStatus = ##class(VARSESTrakIntegration.MovEstoqueSoap).%New().MovEstoque(pDate,pLocalEstTRAK,pItens)
	if strStatus = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$NO, "Erro ao chamar o Web Service do MedTrak de ajuste de estoque.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Detalhes do Erro", strStatus)
		ztrap		
	}
 
 	do GetLog^VARSESIntegrationLog(.arrLog, "STOCKADJ", $$$YES, "Ajuste de estoque feito com sucesso.")	
	do LogAjustarEstoqueClient^VARSESIntegrationParametersLog(.arrLog, pDate, pLocalEst, pItens, pidIdentificador)
 
	do Save^VARSESIntegrationLog(.arrLog)
	
	quit
 
GetUnidadeMedida(pstrSigla)
 
	new intSiglaSize, idUnidadeMedida, objUnidadeMedida
 
	set intSiglaSize = $length(pstrSigla)
	$$$Order4(^WWW101,0,"EINHEIT","PT",idUnidadeMedida)
	
		set objUnidadeMedida = $get(^WWW101(0, "EINHEIT", "PT", idUnidadeMedida, 1))
		if $extract(objUnidadeMedida, 1, intSiglaSize) = pstrSigla {
			quit
		}
	
	$$$End
 
	quit idUnidadeMedida
	
SolicitarConsumoParaSetor(idLocalSolicitanteTRAK, idLocalAbastecedorTRAK, dteDataDesejada, strItens, strNoControle, strMatricula)
 
	new idLocalSolicitante, idLocalAbastecedor, objLocalSolicitante, idTipoEstoque,
		strAbastecedores, arrItens, strStatus, idConsumoSetor, objConsumoSetor,
		idLinhaConsumoSetor, objLinhaConsumoSetor, idItem, objItem, idUnidadeMedida, idGrupo
 
 	set $ztrap = "TratamentoErroSolicitarConsumoParaSetor^VARSESIntegrationErrorHandler"
 
	// Verificar se o número de controle foi passado.
	if $get(strNoControle) = "" {
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, "Número de Controle em branco.")	
		ztrap
	}
 
	// Verificar se o local solicitante foi passado.
	if $get(idLocalSolicitanteTRAK) = "" {
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, "Local solicitante em branco.")	
		ztrap
	}
 
	// Verificar se o local solicitante existe.
	set idLocalSolicitante  = $order(^WWW0121s(YM, 11, idLocalSolicitanteTRAK, 0, ""))
	if idLocalSolicitante = "" {
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, "Local solicitante Trak '"_idLocalSolicitanteTRAK_"' não está relacionado no Alphalinc.")	
		ztrap
	}
	
	// Verificando se o local solicitante pode fazer Consumo para Setor.
	// Se o tamanho do local for 6 e não for local de armazenagem.
	set objLocalSolicitante = $get(^WWW0121(0, YM, idLocalSolicitante, 1))
	set idTipoEstoque 		= $piece(objLocalSolicitante, Y, 61)
	if ($length(idLocalSolicitante) '= 6) || (idTipoEstoque '= "CENTRODECUSTO") {
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, "O local solicitante '"_idLocalSolicitanteTRAK_"' não está autorizado para fazer Consumo para Setor.")	
		ztrap
	}
 
	// Verificar se o local abastecedor foi passado.
	if $get(idLocalAbastecedorTRAK) = "" {
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, "Local abastecedor em branco.")	
		ztrap
	}
	
	// Verificar se o local abastecedor existe.
	set idLocalAbastecedor = $order(^WWW0121s(YM, 11, idLocalAbastecedorTRAK, 0, ""))
	if idLocalAbastecedor = "" {
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, "Local abastecedor Trak '"_idLocalAbastecedorTRAK_"' não está relacionado no Alphalinc.")	
		ztrap
	}
	
	// Verificar se o local abastecedor está listado como um abastecedor do local solicitante.
	set strAbastecedores = $piece(objLocalSolicitante, Y, 78)
	if '$find(";"_strAbastecedores_";",";"_idLocalAbastecedor_";") {
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, "Local abastecedor '"_idLocalAbastecedorTRAK_"' não está configurado como local abastecedor do local '"_idLocalSolicitanteTRAK_"'.")	
		ztrap
	}
	
	// Verificar data.
	if $get(dteDataDesejada) = "" {
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, "Data em branco.")
		ztrap
	}
	 
	// Verificar Itens.
	if $get(strItens) = "" {
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, "Itens em branco.")	
		ztrap
	}
	set strStatus = $$ParseItens(strItens, .arrItens)
	if $$$ISERR(strStatus) {
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, strStatus)	
		ztrap
	}
 
	// Verificar se os itens estão autorizados para o abastecedor.
	set strStatus = $$VerificarAutorizacaoItens(.arrItens, idLocalAbastecedor)
	if $$$ISERR(strStatus) {
 		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, strStatus)	
		ztrap
	}
 
	// Criando o Consumo para Setor.
	set $$$VARSESSolicTransfLocalRecebedor(objConsumoSetor)          = idLocalSolicitante
	set $$$VARSESSolicTransfLocalAbastecedor(objConsumoSetor)        = idLocalAbastecedor
	set $$$VARSESSolicTransfDateCreated(objConsumoSetor)	         = $horolog
	set $$$VARSESSolicTransfCreatedBy(objConsumoSetor)		         = strMatricula
	set $$$VARSESSolicTransfDataDesejada(objConsumoSetor)	  	     = +dteDataDesejada
	set $$$VARSESSolicTransfTransferenciaouConsumo(objConsumoSetor)  = "CONSUMO"
	set $$$VARSESSolicTransfCCTemSetor(objConsumoSetor)				 = 0
	set $$$VARSESSolicTransfNoDocumento(objConsumoSetor)			 = strNoControle
 
	set idConsumoSetor = $$$NextKey("VARSESSolicTransf")
	set strStatus = $$$Save("VARSESSolicTransf",idConsumoSetor,objConsumoSetor,$$$YES)
	if '$$$ISOK(strStatus) {
		do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, "Não foi possível salvar a solicitação de consumo para setor '"_idConsumoSetor_"'.")
		do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", strStatus)
		ztrap		
	}
	
	// Criando as linhas.
	$$$Order1(arrItens,idItem)
	
		set objItem 		= $get(^INART(YM, idItem, 1))
		set idUnidadeMedida = $piece(objItem, Y, 40)
		set idGrupo			= $piece(objItem, Y, 30)
	
		set $$$VARSESSolicTransfLinhaCodigodoProduto(objLinhaConsumoSetor)     = idItem
		set $$$VARSESSolicTransfLinhaQuantidade(objLinhaConsumoSetor) 	       = arrItens(idItem)
		set $$$VARSESSolicTransfLinhaUnidadedeEstoque(objLinhaConsumoSetor)    = idUnidadeMedida
		set $$$VARSESSolicTransfLinhaCriadoEm(objLinhaConsumoSetor)			   = $horolog
		set $$$VARSESSolicTransfLinhaCriadoPor(objLinhaConsumoSetor)		   = strMatricula
		set $$$VARSESSolicTransfLinhaGrupo(objLinhaConsumoSetor)			   = idGrupo
		set $$$VARSESSolicTransfLinhaEstoqueFisicoLocal(objLinhaConsumoSetor)       = $$Estoque^VARSESEstoque(YM, idItem, idLocalSolicitante)
		set $$$VARSESSolicTransfLinhaEstoqueFisicoAbastecedor(objLinhaConsumoSetor) = $$Estoque^VARSESEstoque(YM, idItem, idLocalAbastecedor)
	
		set idLinhaConsumoSetor = $order(^VARSESSolicTransfLinha(YM, idConsumoSetor, ""), -1) + 1
		set strStatus = $$$Save("VARSESSolicTransfLinha",idConsumoSetor_$$$COMMA_idLinhaConsumoSetor,objLinhaConsumoSetor,$$$YES)
		if '$$$ISOK(strStatus) {
			do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$NO, "Não foi possível salvar os itens da solicitação de consumo para setor '"_idConsumoSetor_"'.")
			do GetLogDetail^VARSESIntegrationLog(.arrLog, "Erro no $$$Save", strStatus)
			ztrap		
		}
	$$$End
 
	do Process^VARSESSolicTransf(idConsumoSetor, objConsumoSetor)
 
	;for i=1:1:100 hang 1
 
 	do GetLog^VARSESIntegrationLog(.arrLog, "SOLICCONSUMOSETOR", $$$YES, "Solicitação de Consumo para Setor '"_idConsumoSetor_"' criado com sucesso.")	
	do LogConsumoSetor^VARSESIntegrationParametersLog(.arrLog,idLocalSolicitanteTRAK, idLocalAbastecedorTRAK, dteDataDesejada, strItens)
	do Save^VARSESIntegrationLog(.arrLog)
 
	quit $$$OK
	
VerificarAutorizacaoItens(&parrItens, pidLocal)
 
	new idItem, strStatus
 
	set strStatus = $$$OK
	$$$Order1(parrItens,idItem)
 
		if '$data(^INDRPITEM(YM, pidLocal, idItem, 1)) {
			set strStatus = "O item '"_idItem_"' não está autorizado para o local '"_pidLocal_"'."
			quit
		}
 
	$$$End
 
	quit strStatus
	
ParseItens(pstrItens, &parrItens)
 
	new intNumberLines, idxLine, idItem, fltQuantidade, objLine, strStatus
 
	set intNumberLines = $length(pstrItens, "|")
	set idxLine = 0
	
	set strStatus = $$$OK
	
	while idxLine < intNumberLines {
 
		set idxLine = idxLine + 1
		
		set objLine = $piece(pstrItens, "|", idxLine)
		
		// Verificar se a linha não está na forma 'cod_produto~quantidade'.
		if $length(objLine, "~") '= 2 {
			set strStatus = "Os itens não estão no formato 'cod_produto_til_quantidade'. Valor da Linha "_idxLine_": " _ objLine
			quit
		}
		
		// Verificar se o item está vazio.
		set idItem = $piece(objLine, Y, 1)
		if idItem = "" {
			set strStatus = "Código do item vazio. Valor da Linha "_idxLine_": " _ objLine
			quit
		}
		
		// Verificar se o item existe.
		if '$data(^INART(YM, idItem, 1)) {
			set strStatus = "O item "_idItem_" não existe."
			quit
		}
		
		set objItem = $get(^INART(0, idItem, 1))
		
		// Verificar se foi especificada alguma quantidade.
		set fltQuantity = $piece(objLine, Y, 2)
		if fltQuantity = "" {
			set strStatus = "Quantidade do item não especificada. Valor da Linha "_idxLine_": " _ objLine
			quit
		}
 
		set parrItens(idItem) = fltQuantity
	}
	
	quit strStatus
	
ReservarEstoque(pidSiteLocationTRAK, pstrPrescricao, pstrItens)
	;ReservarEstoque(pCodItem, pQuantidade, pSiteLocation, pCodReserva)
	// Andre, 24/03/2008
	// Reserva uma determinada quantidade de um item, em um certo local e 
	// retorna o código da reserva, se esta for bem sucedida.
 
	// TODO: PARECE QUE HÁ UM PROBLEMA SÉRIO NO CORE, ROTINA $$^INWERES, POIS
	// ELA SÓ RESERVA SE HOUVER ESTOQUE SUFICIENTE EM UM ÚNICO RECEBIMENTO!!!
	
 	set $ztrap = "TratamentoErroReservarEstoque^VARSESIntegrationErrorHandler"
 
	new arrLog, idSiteLocationAlpha, objSiteLocation, 
		arrAdjustmentLines, idAdjustmentLine, objAdjustmentLine,
		codReserva
	
	// Verifica se o local foi informado.
	if $get(pidSiteLocationTRAK) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "RESERVARESTOQUEWS", $$$NO, "Local não informado.")
		ztrap		
	}
 
	// Verificar se o Local Abastecedor existe.
	set idSiteLocationAlpha = $order(^WWW0121s(YM, 11, pidSiteLocationTRAK, 0, ""))
	if idSiteLocationAlpha = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "RESERVARESTOQUEWS", $$$NO, "Local "_pidSiteLocationTRAK_" não existe.")
		ztrap		
	}
 
	// Verificando se o local é do tipo Farmácia.
	set objSiteLocation = $get(^WWW0121(0, YM, idSiteLocationAlpha, 1))
	if $$$WWW0121FREE2(objSiteLocation) '= "FARMACIA" {
		do GetLog^VARSESIntegrationLog(.arrLog, "RESERVARESTOQUEWS", $$$NO, "Local abastecedor "_pidSiteLocationTRAK_" não é do tipo farmácia.")
		ztrap		
	}
	
	// Verifica se a prescrição foi informada.
	if $get(pstrPrescricao) = "" {
		do GetLog^VARSESIntegrationLog(.arrLog, "RESERVARESTOQUEWS", $$$NO, "Prescrição não informada.")
		ztrap		
	}
 
	// Verifica se a prescrição já foi utilizada anteriormente.
	if ( $data(^INWERs(0,6,pstrPrescricao)) ) {
		do GetLog^VARSESIntegrationLog(.arrLog, "RESERVARESTOQUEWS", $$$NO, "Não é possível reservar pois número de prescrição "_pstrPrescricao_" já utilizado para reservar.")
		ztrap
	}
	
	// Fazendo um parse na lista de itens e fazendo mais verificações (Vide implementação).
	do ParseAdjustmentLine(.arrAdjustmentLines, pstrItens, .arrLog, 0) ; 0 = Motivo Próprio.
	
  	// Verificando se o estoque vai ficar negativo.
 	$$$Order1(arrAdjustmentLines,idAdjustmentLine)
 
 		// Se o estoque atual após o ajuste ficar negativo.
  		set objAdjustmentLine = arrAdjustmentLines(idAdjustmentLine)
 		if $$Estoque^VARSESEstoque(YM, $$$INADJLineItem(objAdjustmentLine), idSiteLocationAlpha) + $$$INADJLineQuantity(objAdjustmentLine) < 0 {
 			do GetLog^VARSESIntegrationLog(.arrLog, "RESERVARESTOQUEWS", $$$NO, "O Item '"_$$$INADJLineItem(objAdjustmentLine)_"' na Localidade '"_pidSiteLocationTRAK_"' ficará com o estoque negativo se fizermos o ajuste de "_$$$INADJLineQuantity(objAdjustmentLine)_" unidades.")
 			ztrap
 		}
  	$$$End
 
 	// Realizando reservas item a item, com o mesmo no. de prescrição como no. de reserva:
 	$$$Order1(arrAdjustmentLines,idAdjustmentLine)
 
		set objAdjustmentLine = arrAdjustmentLines(idAdjustmentLine)
		
  		set codReserva = $$^WWWNEXT("VARSESReserva")
  		
  		set statusReserva = $$Save^COMUtils("VARSESReserva",codReserva,pstrPrescricao,1)
 
 		if ( statusReserva '= 1 ) {
 			do GetLog^VARSESIntegrationLog(.arrLog, "RESERVARESTOQUEWS", $$$NO, "Erro ao salvar código da reserva de quantidade '"_$$$INADJLineQuantity(objAdjustmentLine)_"' do item '"_$$$INADJLineItem(objAdjustmentLine)_"' no local Trak '"_pidSiteLocationTRAK_"'. Erro: '"_statusReserva_"'.")
 			ztrap
 		}
  		
  		set statusReserva = $$^INWERES(	$$$INADJLineItem(objAdjustmentLine), 
 										$$$INADJLineQuantity(objAdjustmentLine),
 										idSiteLocationAlpha, 
 										codReserva)
		if ( statusReserva '= 1 ) {
 			do GetLog^VARSESIntegrationLog(.arrLog, "RESERVARESTOQUEWS", $$$NO, "Não foi possível reservar quantidade '"_$$$INADJLineQuantity(objAdjustmentLine)_"' do item '"_$$$INADJLineItem(objAdjustmentLine)_"' no local Trak '"_pidSiteLocationTRAK_"'. Erro: '"_statusReserva_"'.")
 			ztrap
 		}
  	$$$End
 
	/* Código antigo: TODO: Excluí-lo:
	new strStatus, statusReserva codReserva
	
	set codReserva = ""
 
	// Obtém o código sequencial da reserva:
	;set codReserva = $$^WWWNEXT("VARSESReserva")
	
	set statusReserva = $$^INWERES(pCodItem, pQuantidade, pSiteLocation, pCodReserva)
	
	if (statusReserva = 1) {
		set strStatus = 1
	}
	else {
		set strStatus = "0~Erro ao tentar reservar ("_statusReserva_")."
	}
 
	quit strStatus
	*/
 
 	do GetLog^VARSESIntegrationLog(.arrLog, "RESERVARESTOQUEWS", $$$YES, "Reserva de estoque feita com sucesso.")	
	do LogReservarEstoque^VARSESIntegrationParametersLog(.arrLog, pidSiteLocationTRAK, pstrPrescricao, pstrItens)
 
	do Save^VARSESIntegrationLog(.arrLog)
 
	quit $$$OK
	
CadastrarPrescricaoWS(pPai, pFilhos)
	new strStatus
	set strStatus = $$$OK
	// funcao diff (onde é feito o registro)
	set strStatus = $$CompararPrescricao^VARSESFarmaciaAltoCustoUtil(pPai, pFilhos)
	if ('$$$ISOK(strStatus)) { quit strStatus }
	set strStatus = $$CadastrarPrescricaoInicioWS(
		pPai.NumeroPedidoAutorizacao, pPai.NumeroAPAC, pPai.CodigoPaciente, 
		pPai.DataInicioTratamento, pPai.DataTerminoTratamento, pPai.DataAPAC,
		pPai.Autorizador, pPai.Documento, pPai.NumeroDocumento, pPai.Observacao,
		pPai.IsAPACouAEPAC, pPai.Status, pPai.CodCID, pPai.ObservacaoAprovador
	) 
	
	if ('$$$ISOK(strStatus)) quit strStatus

	set strStatus = $$]]><![CDATA[CadastrarPrescricaoLineWS(
		pFilhos
	) 
	if ($$$ISOK(strStatus))	$$$VARLOGINFO("Prescrição '"_pPai.NumeroPedidoAutorizacao_"' foi cadastrado com sucesso.")

	quit strStatus 

CadastrarPrescricaoInicioWS(pIdTreatment, pNumAPAC, pCodigoPaciente,
	pDataInicio, pDataFim, pDataAPAC, pNomeAutorizador,
	pTipoDoc, pNumeroDoc, pObservacao, pIsAPACouAEPAC,
	pStatusTRAK, pCodCID, pObservacaoAprovador
	)	
	new strStatus, objTreatment, codMedico, codPaciente
	set strStatus = $$$OK
	set objTreatment = ""
	if ($data(^VARSESTreatmentHC(0, pIdTreatment, 1)) = 1) { 
		set objTreatment = ^VARSESTreatmentHC(0, pIdTreatment, 1)
	} else {
		set $$$VARSESTreatmentHCStatus(objTreatment) = $$$TreatmentStatusPronto
	}
	
	set $$$VARSESTreatmentHCNumeroAPAC(objTreatment) = pNumAPAC //"1234"
	set $$$VARSESTreatmentHCDataAPAC(objTreatment) = pDataAPAC   //"02/16/2010")
	set $$$VARSESTreatmentHCCodigoPaciente(objTreatment) = pCodigoPaciente
	set $$$VARSESTreatmentHCNumeroDocumentoProfSaude(objTreatment) = pNumeroDoc
	set $$$VARSESTreatmentHCTipoDocumentoProfSaude(objTreatment) = pTipoDoc
	set $$$VARSESTreatmentHCNumeroDocumentoProfSaude(objTreatment) = pNumeroDoc //"10001443"
	set $$$VARSESTreatmentHCTipoDocumentoProfSaude(objTreatment) = $$BuscaTipoDocumentoPorString^VARSESTreatmentHC(pTipoDoc) //"10001443"
	set $$$VARSESTreatmentHCUsuarioAutorizador(objTreatment) = pNomeAutorizador //"10001443"
	set $$$VARSESTreatmentHCDataInicioTratamento(objTreatment) = pDataInicio
	set $$$VARSESTreatmentHCDataTerminoTratamento(objTreatment) = pDataFim
	set $$$VARSESTreatmentHCObservacao(objTreatment) = pObservacao
	set $$$VARSESTreatmentHCTemFaturamento(objTreatment) = pIsAPACouAEPAC
	if ((+$get(pStatusTRAK)) = 0) {
		set $$$VARSESTreatmentHCStatusTRAK(objTreatment) = $$ConverteStatusPrescricao^VARSESFarmaciaAltoCustoUtil(pStatusTRAK)
	}
	else {
		set $$$VARSESTreatmentHCStatusTRAK(objTreatment) = pStatusTRAK
	}
	set $$$VARSESTreatmentHCCID(objTreatment) = pCodCID
	set $$$VARSESTreatmentHCObservacaoAprovador(objTreatment) = pObservacaoAprovador
	set strStatus = $$$Save("VARSESTreatmentHC",pIdTreatment,objTreatment,$$$YES)
	if ('$$$ISOK(strStatus)) $$$VARLOGERROR("Erro ao incluir prescrição '"_pIdTreatment_"': "_$$$Text(strStatus))
	quit strStatus
 
	/// Cadastra um conjunto de produtos para 
	/// uma prescrição específica
CadastrarPrescricaoLineWS(pObj)
	new strStatus, id, lista, total, i1, line, total2, i2, id2
	set strStatus = $$$OK
	set id = pObj.NumeroPedidoAutorizacao //$piece(obj,Y,1)
	merge lista = pObj
	set total = pObj.Linhas.Count() //$order(lista(""),-1)
	set i1 = 1
	while (i1 <= total) {
		set line = pObj.Linhas.GetAt(i1) //lista(i)
		if (line.SeqRegistrado '= 0) {
			set id2 = line.SeqRegistrado
		} else {
			set id2=0
		}
		
		set strStatus = $$CadastrarPrescricaoLine(id, line.CodigoMedicamento, line.Status, .id2) //$piece(line,Y,3), .id2)
		if ('$$$ISOK(strStatus)) quit
		
		set total2 = line.Linhas1.Count() //$order(lista(i,""),-1)
		set i2 = 1
		while (i2 <= total2) {
			set line1 = line.Linhas1.GetAt(i2) //lista(i,i2)
			if (line.SeqRegistrado '= 0) {
				set codAlteracao = i2
			} 
			else {
				set codAlteracao = 0
			}
			set strStatus = $$CadastrarPrescricaoLine1(id, id2, line1.Mes, line1.Quantidade, codAlteracao)
				//$piece(line1,Y,4), $piece(line1,Y,5))
				if ('$$$ISOK(strStatus)) {
					$$$VARLOGERROR("Erro ao finalizar prescrição '"_pIdTreatment_"', Linha '"_id2_"': "_$$$Text(strStatus))
					quit
				}
			set i2 = $i(i2)
		}
		set i1 = $i(i1)
	}
	
	if ((strStatus '= "") && ('$$$ISOK(strStatus))) quit strStatus
	set strStatus = $$CadastrarPrescricaoFimWS(id)
	quit strStatus
	
CadastrarPrescricaoLine(pIdTreatment, pCodigoProcedimentoSUS, pStatus, &pSubId)
	new strStatus, idTreatmentLine, objTreatmentLine, codigoProduto
	set strStatus = $$$OK
	if (($get(pSubId) = "") ||(pSubId = 0)) {
		set idTreatmentLine = $$^WWWNEXT1("VARSESTreatmentHCLine", pIdTreatment, 2)
		set pSubId = idTreatmentLine
	}
	else {
		set idTreatmentLine = pSubId
	}
	set objTreatmentLine = ""
	
	set strStatus = $$ConverteProcedimentoSUSparaProduto^VARSESFarmaciaAltoCustoUtil(pCodigoProcedimentoSUS, .codigoProduto)
	if ('$$$ISOK(strStatus)) {
		$$$VARLOGERROR("Erro ao incluir prescrição """_pIdTreatment_""", linha """_idTreatmentLine_": "_$$$Text(strStatus))
		quit strStatus
	
	}
	if ($get(codigoProduto) = "") {
		set strStatus = $$$MakeStatus("Relação de procedimento """_$get(pCodigoProcedimentoSUS)_""" não existe")
		$$$VARLOGERROR("Erro ao incluir prescrição """_pIdTreatment_""", linha """_idTreatmentLine_": "_$$$Text(strStatus))
	}
	else {
		set objTreatment = ^VARSESTreatmentHC(0,pIdTreatment,1)
		if ($$$VARSESTreatmentHCTemFaturamento(objTreatment)) {
			set codigoProdutoMS ="MS"_codigoProduto 
			if ($data(^INART(0,codigoProdutoMS,1))) {
				set objINART = ^INART(0,codigoProdutoMS,1)
				if ($$$INARTHoldReason(objINART) = 0) { // Ativo
					set codigoProduto = codigoProdutoMS
				}
			}
		}
 
		set $$$VARSESTreatmentHCLineCodigoMedicamento(objTreatmentLine) = 
			codigoProduto
		set $$$VARSESTreatmentHCLineCodigoProcedimento(objTreatmentLine) = 
			pCodigoProcedimentoSUS
		if (+$get(pStatus) = 0) {
			set $$$VARSESTreatmentHCLineStatusTRAK(objTreatmentLine) = $$ConverteStatusPrescricao^VARSESFarmaciaAltoCustoUtil(pStatus)
		}
		else {
			set $$$VARSESTreatmentHCLineStatusTRAK(objTreatmentLine) = pStatus	
		}
		
		set strStatus = $$$Save("VARSESTreatmentHCLine",pIdTreatment_$$$COMMA_idTreatmentLine,objTreatmentLine,$$$YES)
		if ('$$$ISOK(strStatus)) $$$VARLOGERROR("Erro ao incluir prescrição """_pIdTreatment_""", linha """_idTreatmentLine_": "_$$$Text(strStatus))
	}
	quit strStatus
 
CadastrarPrescricaoLine1(pIdTreatment, pIdTreatmentLine, pData, pQuantidade, pCodAlteracao)
	new strStatus, idTreatmentLine1, objTreatmentLine1, mes, ano
	set strStatus = $$$OK
	$$$VARLOGINFO("Line1Param: id="_pIdTreatment_",Linha="_pIdTreatmentLine_",pCodAlteracao:"_pCodAlteracao_",pQuant:"_pQuantidade)
	if (($get(pCodAlteracao) '= "") && (pCodAlteracao '= 0)) {
		set idTreatmentLine1 = $get(pCodAlteracao)
			set objTreatmentLine1 = $G(^VARSESTreatmentHCLine1(0,pIdTreatment,pIdTreatmentLine,idTreatmentLine1,1))
			if (objTreatmentLine1'="") {
				if ($$$VARSESTreatmentHCLine1Enviado(objTreatmentLine1)) {
					$$$VARLOGINFO("Prescricao ja enviada: id="_pIdTreatment_",Linha="_pIdTreatmentLine_",Seq"_idTreatmentLine1_"")
					quit strStatus
				}
			} else {
				$$$VARLOGINFO("Prescricao ja enviada: id="_pIdTreatment_",Linha="_pIdTreatmentLine_",Seq"_idTreatmentLine1_" -situacao de alteracao e insercao d nova linha-")
				set idTreatmentLine1 = $$^WWWNEXT1("VARSESTreatmentHCLine1", pIdTreatment_$$$COMMA_pIdTreatmentLine, 3)
				set pCodAlteracao = 0
				set objTreatmentLine1 = ""
			}
	} else {
		set idTreatmentLine1 = $$^WWWNEXT1("VARSESTreatmentHCLine1", pIdTreatment_$$$COMMA_pIdTreatmentLine, 3)
		set objTreatmentLine1 = ""
	}
 
	
	set $$$VARSESTreatmentHCLine1Quantidade(objTreatmentLine1) = pQuantidade //30
	if (pCodAlteracao = 0) {
		set mes = pData # 100
		set ano = pData \ 100
		set data = $$GetStartOfMonth^COMUtilDate($zdateh(mes_"/01/"_ano))
		set $$$VARSESTreatmentHCLine1DataReferencia(objTreatmentLine1) = data //1
		set $$$VARSESTreatmentHCLine1MotivoSaida(objTreatmentLine1) = ""
		set $$$VARSESTreatmentHCLine1Enviado(objTreatmentLine1) = $$$NO
		set $$$VARSESTreatmentHCLine1ErroNoEnvio(objTreatmentLine1) = ""
	}
	set strStatus = $$$Save("VARSESTreatmentHCLine1",pIdTreatment_$$$COMMA_pIdTreatmentLine_$$$COMMA_idTreatmentLine1,objTreatmentLine1,$$$YES)
	if ('$$$ISOK(strStatus)) $$$VARLOGERROR("Erro ao incluir prescrição '"_pIdTreatment_"', linha '"_idTreatmentLine_", Seq '"_idTreatmentLine1_"': "_$$$Text(strStatus))
	quit strStatus
 
CadastrarPrescricaoFimWS(pIdTreatment)
	new strStatus, objTreatment
	set strStatus = $$$OK
	set objTreatment = ^VARSESTreatmentHC(0,pIdTreatment,1)
	set $$$VARSESTreatmentHCStatus(objTreatment) = $$$TreatmentStatusPronto
	set strStatus = $$$Save("VARSESTreatmentHC",pIdTreatment,objTreatment,$$$YES)
	if ('$$$ISOK(strStatus)) $$$VARLOGERROR("Erro ao finalizar prescrição '"_pIdTreatment_"': "_$$$Text(strStatus))
	if ($$$VARSESTreatmentHCStatus(objTreatment)'=$$$TreatmentStatusPronto) { 
		set strStatus = $$UpdateStatus^VARSESTreatmentHC(pIdTreatment)
		if ('$$$ISOK(strStatus)) $$$VARLOGERROR("Erro ao atualizar os status das Line1s '"_pIdTreatment_"': "_$$$Text(strStatus))
	}
	set strStatus = $$UpdateStatus^VARSESTreatmentHCLine1(pIdTreatment)
	if ('$$$ISOK(strStatus)) $$$VARLOGERROR("Erro ao atualizar os status das Line1s '"_pIdTreatment_"': "_$$$Text(strStatus))
	quit strStatus
	
	
CancelarPrescricao(pIdTreatment)
	new strStatus, objTreatment
	set strStatus = $$$OK
	set objTreatment = ""
	if ($data(^VARSESTreatmentHC(0, pIdTreatment, 1)) = 1) {
		set objTreatment = ^VARSESTreatmentHC(0, pIdTreatment, 1)
	}
	if ('$$IsPrescricaoDispensada()) {
		set $$$VARSESTreatmentHCStatus(objTreatment)=$$$TreatmentStatusCancelado
		set strStatus = $$$Save("VARSESTreatmentHC",pIdTreatment,objTreatment,$$$YES)
		if ('$$$ISOK(strStatus)) $$$VARLOGERROR("Erro ao cancelar prescrição '"_pIdTreatment_"': "_$$$Text(strStatus))
	}
	else {
		$$$VARLOGERROR("Erro ao cancelar prescrição '"_pIdTreatment_"': "_"Prescrição ainda possui itens dispensados.")
	}
	quit strStatus
 
IsPrescricaoDispensada()
	set bolExisteDispensacao = 0
	// loop
	if ($get(^VARSESTreatmentHC(0,pNumeroPedidoAutorizacao,1))'="") {
		set Linha = $order(^VARSESTreatmentHCLine(0,pNumeroPedidoAutorizacao,""))
		for {
			quit:Linha=""
			set Seq = $order(^VARSESTreatmentHCLine1(0,pNumeroPedidoAutorizacao,Linha,""))
			for {
				quit:Seq=""
				set DataRef = $piece(^VARSESTreatmentHCLine1(0,pNumeroPedidoAutorizacao,Linha,Seq,1),"~",1)
				if ($$GetQuantidadeTotalLinhaEmUsoSQL^VARSESTreatmentHCLine(pNumeroPedidoAutorizacao,Linha,DataRef)>0) {
					set bolExisteDispensacao = 1
					quit 
				}	
				set Seq = $order(^VARSESTreatmentHCLine1(0,pNumeroPedidoAutorizacao,Linha,Seq))
			}
			if (bolExisteDispensacao) quit
			set Linha = $order(^VARSESTreatmentHCLine(0,pNumeroPedidoAutorizacao,Linha))
		}
	}
	quit bolExisteDispensacao

 
 
]]></Routine>
</Export>