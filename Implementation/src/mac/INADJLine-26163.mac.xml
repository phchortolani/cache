<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INADJLine" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INADJLine
	
#include COMSYS
#include INConst
#include COMConst
#include %occInclude 
#include WWWConst
#include COMGridEdit31
	
#define FORMFldINADJLineQuantity	 3
#define FORMFldINADJLineUnit         4
#define FORMFldINADJLineLotNo	    19
#define FORMFldINADJLineExpiryDate	20
#define FORMFldINADJLineBrand		21
#define FORMFldINADJLineOwner		22
#define FORMFldINADJLineProgram		23
	
#define DELIM	$char(31)
	
GetReasonCode()
	;-------------------------------------------------------------------------------
	; Get the reason code from the header
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:	id reason code
	;
	; History:
	; 14-Aug-2006	JW		SR14826: Created
	;-------------------------------------------------------------------------------
	new objAdj
	
	set objAdj = $$$GRIDYFELDContainer
	
	quit $$$INADJReasonCode(objAdj)
	
	
OnBlur(pidClassField,&pobjLine,pidKeys="",pGridRow)
	;-------------------------------------------------------------------------------
	; On Blur from Item, Qty and Unit fields.
	; Calculate unit, and costs
	;
	; Called By : COMGridEdit31Events due to setting on form
	; 
	; Params:	pidClassField	- field id
	;
	; ByRefs:	pobjLine		- current line object
	;			GROW 			- current Grid Row
	; Returns:
	;
	; History:
	; 04-Feb-2011	GRF		SR17579: Rename CalculateBaseQuantity
	; 24-May-2010	PPP		SR17320: Added call to DynaGrid
	; 08-Jan-2010	shobby	SR15753: No need for AddReference
	; 10-Nov-2009	DWR		SR16983: set value directly from INART record
	; 03-Nov-2009	DWR		SR16983: Commented out un-needed method call
	; 27-Oct-2009	GRF		SR16871: INItemCost with location replaces INARTKOST;
	; 							requires key; curUnitCost not used after last set -
	; 							comment and move idUnit inside if block
	; 12-Aug-2009	PPP		SR16765:Only update if expiry date is not blank
	; 17-Jun-2009 	PPP 	SR16510:Get the Lot from a method
	; 05-Mar-2009	GRF		SR16398: use $$$FORMFld... Macros
	; 24-Feb-2009	GRF		SR16394: Clarify pidClassField rather than pidField
	; 07-Jan-2009	HQN		SR16268: Suggest ExpirationDate for existing LotNumber
	; 							on inital entry
	; 06-Jan-2009	HQN		SR16268: Added LotNumber and Expiration date validation
	; 							trigger
	; 23-Oct-2008	HQN		SR16050: Always update Quantity on blur of any field
	; 20-May-2008	HQN 	SR15762: Rerender Quantity field; Use values for units
	; 							from line, would have been set prior
	; 12-May-2008	HQN		SR15726: Added reference and screen updates for
	; 							additional columns
	; 14-Aug-2006	JW		SR14826: Created
	;-------------------------------------------------------------------------------
	new curUnitCost,dteExpiry,fltQuantity,idAdjust,idItem,idLocn,idUnit
	new objBundle,objItem,objResultSet,objUItem,sc
	
	set idItem   = $$$INADJLineItem(pobjLine)
	set idAdjust = $$$KEY1(pidKeys)
	if idAdjust'="" {
		set idLocn = $$$INADJSiteLocation($get(^INADJ(0,idAdjust,1)))
	} else {
		set idLocn = ""
	}
	
	; Field-Specific Processing
	;---------------------------------------
	
	; If item - update units, and unit cost
	if pidClassField = $$$FldINADJLineItem {
		if idItem="" {
			set curUnitCost = 0
			set idUnit  = ""
		} else {
			set objItem = $get(^INART(YM,idItem,1))
			set curUnitCost = $$GetCost^INItemCost(idItem,idLocn)
			set idUnit  =  $$$INARTUnitofMeasure($get(^INART(YM,idItem,1)))
		}
		set $$$INADJLineUnitCost(pobjLine) = curUnitCost
		set $$$INADJLineUnit(pobjLine)     = idUnit
		
	} elseif pidClassField = $$$FldINADJLineLotNumber {
		set dteExpiry = ##class(alSOH.iUItemPolicy).GetExpiryForLot(idItem,$$$INADJLineLotNumber(pobjLine))
		; Suggest Expiration Date if applicable
		if dteExpiry'="" {
			set $$$INADJLineExpirationDate(pobjLine) = dteExpiry
		}
	}
	
	; General Processing
	;---------------------------------------
	
	if idItem'="" {    ; Update base qty and total cost
		set idUnit      = $$$INADJLineUnit(pobjLine)
		set fltQuantity = $$CalcInventoryQty^INUOMConversion(idItem,idUnit,$$$INADJLineQuantity(pobjLine)) ; SR17579
		set $$$INADJLineBaseQuantity(pobjLine) = fltQuantity
		set $$$INADJLineTotalCost(pobjLine)    = $$GetCost^INItemCost(idItem,idLocn)*fltQuantity
	}
	
	if ((+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) 
		&& '(+$$$WWWClientParamCoreChangesTCI($get(^WWWClientParam(YM,YM,1))))){
		//SR17320 - Redraw DynTable
	  	if $get(pGridRow)'=""    { 
  	
	  		if YFORM = "VARINADJDoacaoLinha"{
		  		do ShowItems^INADJTable(1,"VARINADJDoacao"_$$$DELIM_"VARINADJDoacaoLinha"_$$$DELIM_"dStockBundle"_$$$DELIM_pGridRow)
	  		
	  		} elseif YFORM = "VARINADJLinha" {
		  		do ShowItems^INADJTable(1,"VARINADJ"_$$$DELIM_"VARINADJLinha"_$$$DELIM_"dStockBundle"_$$$DELIM_pGridRow)

	  		} else {
		  		do ShowItems^INADJTable(1,"INADJ"_$$$DELIM_"INADJLine"_$$$DELIM_"dStockBundle"_$$$DELIM_pGridRow) 
	  		}
	  	}
	}
	else {
		//SR17320
		if $get(pGridRow)'="" {
			do ShowItems^INADJTable(1,"INADJ"_$$$DELIM_"INADJLine"_$$$DELIM_"dStockBundle"_$$$DELIM_pGridRow)  ; Redraw DynTable
		}
	}
	quit
	
	
OnBeforeDisplayCombo(pstrKeys,pobjMov,pintCol,&pSUCH)
	;-------------------------------------------------------------------------------
	; Populates the Unit with the UOM as defined in INARTPACK only, excludes
	; units that the item does not come in.
	; 
	; set pSUCH as the items to be used when you override the list (set via blnOverride)
	;
	; Called By: COMGridEdit executable
	; 
	; Inputs:
	;	pstrKeys		YKEY
	;	pobjSummary		YFELD
	; 
	; Returns: $$$YES or $$$NO (override the data) 
	;
	; History:
	; 15-Jul-2011	GRF		SR17669: Call common code
	; 03-Nov-2009	DavidR	SR16983: Created
	;-------------------------------------------------------------------------------
	new blnOverride,enumLineType,enumUnit,idClassField,idItem
	
	set blnOverride = $$$NO
	
	; Unit
	;---------------------------------------
	if pintCol = $$$FORMFldINADJLineUnit {      ; SR17669 vvv
		set blnOverride = $$LoadCombo^INARTPACK($$$INADJLineItem(pobjMov),blnOverride,.pSUCH)
	}
	quit blnOverride
	/*
	if pintCol = $$$FORMFldINADJLineUnit  {
		kill pSUCH
		set pSUCH  = "SUCH"
		set idItem = $$$INADJLineItem(pobjMov)
		if idItem '= "" {
			set enumUnit = ""
			for {
				set enumUnit = $order(^INARTPACK(YM,idItem,enumUnit))
				quit:enumUnit=""
				
				set pSUCH(enumUnit) = enumUnit
			}
			set blnOverride = $$$YES
		}
	}
	quit blnOverride
	*/                                           ; SR17669 ^^^
	
	
OnBeforeFormat(pYFIELDNAME,pYTEXT,pYFELD)
	;-------------------------------------------------------------------------------
	; Called By :
	; 	Form - GridEdit:INADJLine
	; 
	; Inputs : 
	;	pYFIELDNAME	- 	Browser Element ID
	;	pYTEXT 		- 	Value currently in element
	;	pYFELD		-	ANM INIssueLine Data record
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 10-Sep-2013	SCR		CORE-266: Pass in Location to GetAttributes
	; 25-May-2010	PPP		SR17320: Check for existing QOH if Adj qty is -ve
	; 24-May-2010	PPP		SR17320: Removed QOH tool tip as the Dynagrid shows the
	; 							QOH details
	; ??-Feb-2010	shobby	SR15753: Rewrite.
	; 23-Nov-2009	PPP		SR17055: If Item Policy is Expiry Date, ensure Expiry
	; 							Date is captured
	; 30-Sep-2008	PPP		SR16918: Created new method LotExists to check for Lots
	; 05-Aug-2009	PPP		SR16765: Updated Lot Number and Expiry Date checks
	; 22-Jul-2009	PPP		SR16721: 2 Missed the Policy Optional check for Program (corrected)
	; 09-Jul-2009	PPP		SR16721: Optional policy definitions (can be 1-Yes, 2-No, 3-Optional)
	; 19-Jun-2009 	PPP 	SR16510: 1. Updated routine to use INItemPolicy class
	;							2. Included BRAND, OWNER, PROGRAM as additional
	;							parameters for Bundle creation
	; 20-Mar-2009	GRF		SR16428: Call common code for CellColours; $$$OK return
	; 							not needed
	; 24-Feb-2009	GRF		SR16394: Clarify idClassField rather than idField
	; 06-Feb-2009	GRF		SR16328: EnumReadOnly Macro
	; 06-Jan-2009	HQN		SR16268: Added Unique Lot Number validation
	; 15-Dec-2008	GRF		SR16216: Actual text message - use idItem; use
	; 							$$Get^WWW122 to include customisations; apply to
	; 							expiry date as well.
	; 10-Dec-2008	HQN		SR16216: Stop internal error when ItemPolicy is
	; 							inaccessable.
	; 22-Oct-2008	HQN		SR16050: Show on the tooltip Available/Planned
	; 							Quantities if Item is set
	; 03-Sep-2008	GRF		SR15804: Replace message INADJ001 with IN00753; simplify
	; 20-May-2008	HQN		SR15762: Check for zero quantity
	; 12-May-2008	HQN		SR15726: Created
	;-------------------------------------------------------------------------------
	new blnFound,blnIsLotUnique,blnLotNo,blnLotExists,blnLotUnique,blnUseByDate,dteCurrentUseBy
	new idClassField,idCurrentLotNo,idItem,idStorage,intBrand,intCol,intOwner,intProgram,intRow
	new loopPolicyAttr,objBundle,objHeader,objItem,objResultSet,sc,strADJLine
	new idLoc
	
	if $$$INADJStatus($$$GRIDYFELDContainer) = 1 quit
	
	$$$GRIDSplitKey(pYFIELDNAME,intRow,intCol)
	set idClassField = $$$GetClassField(YFORM,intCol)
	
	set strADJLine	= $$$GRIDGetYFELD($$GetYKEY^COMGridEdit31Interface(intRow))
	set idItem		= $$$INADJLineItem(strADJLine)
	set objHeader	= $$$GRIDYFELDContainer
	set idLoc		= $$$INADJSiteLocation(objHeader)

	do GetAttributes^INItemPolicyUtils(idItem,.blnLotNo,.blnUseByDate,.blnLotUnique,.intBrand,.intOwner,.intProgram,idLoc)
	
	; Lot Number
	;---------------------------------------
	if (idClassField = $$$FldINADJLineLotNumber) {
		if 'blnLotNo {
			set YENABLED = $$$NO
			
		} else {
			set YMANDATORY = $$$YES
			
			if ($$$INADJLineLotNumber(strADJLine) '= "") {
				set blnLotExists = ##class(alSOH.iUItemPolicy).LotExists(idItem,$$$INADJLineLotNumber(strADJLine))
				
				//check if Qty < 0 (reducing the Qty, hence Lot has to exist, cannot create new ones)
				if ($$$INADJLineQuantity(strADJLine) < 0) {
					if 'blnLotExists {
						set YWARNING = $$$YES
						set YTOOLTIP = $$$Text("IN00866") ; "Invalid Lot Number"
					}
				}
			}
		}
		
	; Mark Expiry Date as Mandatory or R/O
	;---------------------------------------
	} elseif (idClassField = $$$FldINADJLineExpirationDate) {
		set blnIsLotUnique = ##class(alSOH.iUItemPolicy).IsLotUnique(idItem,$$$INADJLineLotNumber(strADJLine),$$$INADJLineExpirationDate(strADJLine))
		
		if ($$$INADJLineQuantity(strADJLine) > 0) {
			if blnUseByDate {
				set YMANDATORY = $$$YES
				if blnIsLotUnique=$$$YES {
					if ($$$INADJLineExpirationDate(strADJLine) '= "")     &&
					   ($$$INADJLineExpirationDate(strADJLine) < $horolog)   { 
						set YTOOLTIP = $$$Text($listbuild("IN00867")) 			; "Invalid Expiry Date"
						set YWARNING = $$$YES
					}
				}
				
			} else {
				set YENABLED   = $$$NO 
			}
			
		} else {
			if blnUseByDate {
				set YMANDATORY = $$$YES
			} else {
				set YENABLED   = $$$NO 
			}
		}				
		
	; Mark Non-Zero Quantity as Mandatory
	;---------------------------------------
	} elseif (idClassField = $$$FldINADJLineQuantity) {
		set strADJLine = $$$GRIDGetYFELD($$GetYKEY^COMGridEdit31Interface(intRow))
		set objHeader  = $$$GRIDYFELDContainer
		
		if ($$$INADJLineQuantity(strADJLine) = 0) {
			set YTOOLTIP = $$$Text("IN00753")         ; "Quantity cannot be 0"
			set YWARNING = $$$YES

		} elseif ($$$INADJLineQuantity(strADJLine) < 0) {
			if '$$CheckForStock^INADJUtils(idItem,
											$$$INADJSiteLocation(objHeader),
											$$$INADJLineStockLocation(strADJLine),
											$$$INADJLineQuantity(strADJLine)*-1,
											$$$INADJLineLotNumber(strADJLine),
											$$$INADJLineExpirationDate(strADJLine),
											$$$INADJLineBrand(strADJLine),
											$$$INADJLineOwner(strADJLine),
											$$$INADJLineProgram1(strADJLine)) {
				set YWARNING = $$$YES
				set YTOOLTIP = $$$Text("IN00897")         ; "Not enough items in storage
			}
		}
		
	} elseif (idClassField = $$$FldINADJLineBrand) {
		if intBrand {
			set:intBrand=1 YMANDATORY = $$$YES
		} else {
			set YENABLED = $$$NO 
		}					
		
	} elseif (idClassField = $$$FldINADJLineOwner) {
		if intOwner {
			set:intOwner=1 YMANDATORY = $$$YES
		} else {
			set YENABLED = $$$NO 
		}
				
	} elseif (idClassField = $$$FldINADJLineProgram1) {
		if intProgram {
			set:intProgram=1 YMANDATORY = $$$YES
		} else {
			set YENABLED = $$$NO 
		}					
	}
	quit
	
	
UpdateContainer(pstrFld,&objGrid,&headYFELD,&headYMFELD)
	;-------------------------------------------------------------------------------
	; Checks whole grid, if a single record requires lot number or expiry,
	; show that column
	;		hide=$$YES or show=$$$NO
	; 
	; Called By : UpdateContainer^COMGridEdit31G  (see matching code in LoadGrid^INADJ)
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 10-Oct-2013	SCR		CORE-266: Leave all attributes as read only
	; 09-Jul-2009	PPP		SR16721: Optional policy definitions (can be 1-Yes, 2-No, 3-Optional)
	; 19-Jun-2009 	PPP 	SR16510: Updated routine to use INItemPolicy class
	; 05-Mar-2009	GRF		SR16398: FORMFld macros; clarify boolean usage and
	; 							simplify Hide/Show
	; 12-May-2008	HQN		SR15726: Moved from OnLineAdded
	;-------------------------------------------------------------------------------
	new blnHideExpiry,blnHideLotNumber,blnHideBrand,blnHideOwner,blnHideProgram
	new blnLotNo,blnUseByDate,blnLotUnique,idItem,intBrand,intOwner,intProgram
	new objItem,strAdjLine,strLineYKEY
	new idLoc
	set blnHideLotNumber = $$$YES
	set blnHideExpiry    = $$$YES
	set blnHideBrand     = $$$YES
	set blnHideOwner     = $$$YES
	set blnHideProgram   = $$$YES
	set idLoc			 = $$$INADJSiteLocation(headYFELD)
	
	set strLineYKEY = ""
	for {
		set strLineYKEY = $order(objGrid($$$GRIDYKEYContainer,strLineYKEY))
		quit:(strLineYKEY = "")
		continue:$data(^WWWDATEN(YM,$horolog,YUSER,"INADJLine","V","KILLEDRECORD",strLineYKEY))
		
		set strAdjLine = $$$GRIDGetYFELD(strLineYKEY)
		set idItem     = $$$INADJLineItem(strAdjLine)
		if idItem'="" {
			do GetAttributes^INItemPolicyUtils(idItem,.blnLotNo,.blnUseByDate,.blnLotUnique,.intBrand,.intOwner,.intProgram,idLoc)
			if blnLotNo                         set blnHideLotNumber = $$$NO
			if blnUseByDate                     set blnHideExpiry    = $$$NO
			if (intBrand=1)   || (intBrand=3)   set blnHideBrand     = $$$NO
			if (intOwner=1)   || (intOwner=3)   set blnHideOwner     = $$$NO
			if (intProgram=1) || (intProgram=3) set blnHideProgram   = $$$NO
		}
	}
	
	$$$StartScript()
	$$$GRIDHideShowColumns($$$FORMFldINADJLineLotNo,blnHideLotNumber,"INADJLine")    	; F19
	$$$GRIDHideShowColumns($$$FORMFldINADJLineExpiryDate,blnHideExpiry,"INADJLine") 	; F20
	$$$GRIDHideShowColumns($$$FORMFldINADJLineBrand,blnHideBrand,"INADJLine")  			; F21
	$$$GRIDHideShowColumns($$$FORMFldINADJLineOwner,blnHideOwner,"INADJLine")  			; F22
	$$$GRIDHideShowColumns($$$FORMFldINADJLineProgram,blnHideProgram,"INADJLine")  		; F23
	$$$EndScript()
	
	quit
	
	
OnBeforeSave(pYM,pYFORM,pYKEY,pYFELD,pblnQtyCheck=$$$YES)
	;-------------------------------------------------------------------------------
	; Called by FORM
	;
	; History:
	; 02-Apr-2013	SCR		HEVA-811: Convert INBRAND to INBrand
	; 13-Nov-2011	shobby	SR17910: Test if valid INBRAND
	; 05-Aug-2009	PPP		SR16510: Removed Early Quits
	; 19-Jun-2009 	PPP 	SR16510: Updated routine to use INItemPolicy class
	; 17-Oct-2008	GRF		SR15804: Match strStatus to YRETVAL; don't use sc at all
	; 16-Oct-2008	GRF		SR15804: Return strStatus rather than sc; add
	; 							pblnQtyCheck to permit initial value to be set to
	; 							zero but not saved with that afterwards.
	; 03-Sep-2008	GRF		SR15804: Replace message INADJ001 with IN00753; SOH0003
	; 							with alADJ0004
	; 20-May-2008	HQN		SR15762: Check for zero quantity
	; 12-May-2008	HQN		SR15726: Created Optional Validation of required fields
	;-------------------------------------------------------------------------------
	new blnLotNo,blnLotUnique,blnUseByDate,idItem,intBrand,intOwner,intProgram,objItem,strStatus
	new objHeader,idLoc
	
	kill YRETVAL
	set strStatus = $$$OK
	set objHeader	= $$$GRIDYFELDContainer
	set idLoc		= $$$INADJSiteLocation(objHeader)
	
	set idItem = $$$INADJLineItem(pYFELD)
	do GetAttributes^INItemPolicyUtils(idItem,.blnLotNo,.blnUseByDate,.blnLotUnique,.intBrand,.intOwner,.intProgram,idLoc)
	if idItem '="" {
		if blnLotNo && ($$$INADJLineLotNumber(pYFELD) = "") {
			set strStatus = $$$MakeStatus("IN01061",$$$KEY2(pYKEY)) 	; "Line (%1) Lot Number not entered"
			set YRETVAL   = strStatus
			
		} elseif blnUseByDate && ($$$INADJLineExpirationDate(pYFELD) = "") {
			set strStatus = $$$MakeStatus("IN01062",$$$KEY2(pYKEY)) 	; "Line (%1) Expiry Date not entered"
			set YRETVAL   = strStatus
			
		} elseif (intBrand=1) && ($$$INADJLineBrand(pYFELD) = "") {
			set strStatus = $$$MakeStatus("IN01063",$$$KEY2(pYKEY)) 	; "Line (%1) Brand not entered"
			set YRETVAL   = strStatus
			
		;} elseif ($$$INADJLineBrand(pYFELD)'="") && '$data(^INBRAND(0,$$$INADJLineBrand(pYFELD))) { ;SR17910
		} elseif ($$$INADJLineBrand(pYFELD)'="") && '$data(^INBrand(0,$$$INADJLineBrand(pYFELD))) { ;HEVA-811
			set strStatus = $$$MakeStatus("IN01330",$$$INADJLineBrand(pYFELD),$$$KEY2(pYKEY))
			set YRETVAL   = strStatus
								; "Entry needs to be created in the Master File for Brand '%1' on Line '%2'."
		
		} elseif (intOwner=1) && ($$$INADJLineOwner(pYFELD) = "") {
			set strStatus = $$$MakeStatus("IN01064",$$$KEY2(pYKEY)) 	; "Line (%1) Owner not entered"
			set YRETVAL   = strStatus
			
		} elseif (intProgram=1) && ($$$INADJLineProgram1(pYFELD) = "") {
			set strStatus = $$$MakeStatus("IN01065",$$$KEY2(pYKEY)) 	; "Line (%1) Program not entered"
			set YRETVAL   = strStatus
			
		} elseif pblnQtyCheck && ($$$INADJLineQuantity(pYFELD) = 0) {
			set strStatus = $$$MakeStatus("IN00753")         ; "Quantity cannot be 0"
			set YRETVAL   = strStatus
		}
	}	
	quit strStatus
	
	
Postable(pYKEY)
	;-------------------------------------------------------------------------------
	; Check if the Adjustment Line can be posted.
	;
	; History:
	; 06-Aug-2010	GRF		SR17320.1: extract data once and reuse variables
	; 25-May-2010	PPP		SR17320: Check for existing QOH if -ve Qty
	; 13-Oct-2009	PPP		SR16918: 2 Only check if a Lot Item
	; 30-Sep-2009	PPP		SR16918: Created new method LotExists to check for Lots
	; 07-Sep-2009	PPP		SR16765: Only check for Uniqueness of LOT if qty < 0
	; 17-Jun-2009 	PPP 	SR16510: 1. Updated routine to use INItemPolicy class
	; 02-Feb-2009	SCR		SR16268: Changed Validation Logic to handle new lot numbers
	; 22-Jan-2009	HQN		SR16268: Corrected logic, now is ok for an item that has
	; 							an existing bundle but differing lot numbers
	; 16-Jan-2009	GRF		SR16284: Zero test needs to have plus
	; 08-Jan-2009	HQN		SR16274: Check zero quantities
	; 06-Jan-2009	HQN		SR16268: Created
	;-------------------------------------------------------------------------------
	new arrErr,blnFound,blnLotExists,blnLotNo,blnLotUnique,blnOK,blnUseByDate
	new dteExpiry,fltQty,idItem,idLocn,idStore
	new intBrand,intOwner,intProgram,loopPolicyAttr
	new objAdjLine,objBundle,objResultSet,objUItem,sc
	new strBrand,strLotNo,strOwner,strProgram,strStatus
	new objHeader,idLoc
	
	
	set strStatus  = $$$OK
	set objAdjLine = $get(^INADJLine(YM,$$$KEY1(pYKEY),$$$KEY2(pYKEY),1))
	set idItem     = $$$INADJLineItem(objAdjLine)
	set idLocn     = $$$INADJSiteLocation($$$GRIDYFELDContainer)
	
	set idStore    = $$$INADJLineStockLocation(objAdjLine)
	set strLotNo   = $$$INADJLineLotNumber(objAdjLine)
	set dteExpiry  = $$$INADJLineExpirationDate(objAdjLine)
	set strBrand   = $$$INADJLineBrand(objAdjLine)
	set strOwner   = $$$INADJLineOwner(objAdjLine)
	set strProgram = $$$INADJLineProgram1(objAdjLine)
	set fltQty     = $$$INADJLineQuantity(objAdjLine)
	set objHeader  = $$$GRIDYFELDContainer
	set idLoc	   = $$$INADJSiteLocation(objHeader)
	
	if idItem'="" {  ; item is mandatory on saved line so should never be null
		set blnOK = $$CheckItemAttributes^INItemPolicyUtils(idItem,0,strLotNo,dteExpiry,strBrand,strOwner,strProgram,.arrErr,idLoc)
		
		if '$$$ISOK(blnOK) {
			set strStatus = $$$MakeStatus($order(arrErr("")),$$$KEY2(pYKEY))
		}
	}
	
	if $$$ISOK(strStatus) {                           ; Verify quantities
		do GetAttributes^INItemPolicyUtils(idItem,.blnLotNo,.blnUseByDate,.blnLotUnique,.intBrand,.intOwner,.intProgram,idLoc)
		
		if ($$$INADJLineQuantity(objAdjLine)<0) {
			if '$$CheckForStock^INADJUtils(idItem,idLocn,idStore,-fltQty,strLotNo,
			                               dteExpiry,strBrand,strOwner,strProgram) {
				set strStatus = $$$MakeStatus("IN00897")         ; "Not enough items in storage
			}
			
			if $$$ISOK(strStatus) {
				if blnLotNo && blnLotUnique {
					set blnLotExists = ##class(alSOH.iUItemPolicy).LotExists(idItem,strLotNo)
			
					if 'blnLotExists {
						set strStatus = $$$MakeStatus("IN00866") ; "Invalid Lot Number"
					}
				}
			}
			
		} elseif +fltQty=0 {
			set strStatus = $$$MakeStatus("IN00753")  ; "Quantity cannot be 0"
		}
	}
	quit strStatus
	
	
GetStockHistory(pidAdj,pidLine)
	;-------------------------------------------------------------------------------
	; Retrieves a alSOH.dStockHistory record related to this INADJLine
	; 
	; WARNING: 	Direct usage of alSOH.dStockHistory, should be refactored into
	;		 	the object interface
	; 
	; History:
	; 05-Mar-2009	GRF		SR16398: Separate the parameters instead of combining
	; 							them only to split them up
	; 25-Feb-2009	HQN		SR16398: Created
	;-------------------------------------------------------------------------------
	new idAdjLine,idStockHistory,objStockHistory,sc,SQLCODE
	
	set idAdjLine = pidAdj_"||"_pidLine
	
	set idStockHistory  = ""
	set SQLCODE         = ""
	set objStockHistory = ""
	
	; FIXME : Why include reference? already in linenumber test <GRF>
	&sql(
		SELECT ID INTO :idStockHistory
		FROM alSOH.dStockHistory
		WHERE txtype     = 9          AND
		      reference  = :pidAdj    AND
		      linenumber = :idAdjLine    )
	
	if (SQLCODE = 0) {
		set objStockHistory = ##class(alSOH.dStockHistory).%OpenId(idStockHistory,,.sc)
	}
	quit objStockHistory
	
]]></Routine>
</Export>