<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARHistoricoRecebimento" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[VARHistoricoRecebimento
	quit
	
#include COMSYS
#include COMConst
	
LoadStorageLocn()

	new codLocn, descLocn
	
	&sql( DECLARE StorageLocation CURSOR FOR
		SELECT 
				Location, LocationName
		INTO
				:codLocn,
				:descLocn
		
		FROM 	SQLUser.WWW0121
		
		WHERE 
				StorageLocn = 1
		)
		
	&sql(OPEN StorageLocation)
	&sql(FETCH StorageLocation)
	while (SQLCODE = 0) {
		set $p(^COMTempList(0,"VARHistoricoRecebimentoStorage",codLocn,1),"~",1) = descLocn
		&sql(FETCH StorageLocation)
		}
		
	&sql(ClOSE StorageLocation)
	
 quit
 
OnAfterSave()
	new Local
	set DataInicial	= $get(VORG(1))
	set DataFinal	= $get(VORG(2))
	
	kill ^VARTempHistoricoRecebimento(YM,YBED)
	
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,1)  = DataInicial
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,2)  = DataFinal
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,3)  = $get(VORG(3))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,4)  = $get(VORG(4))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,5)  = $get(VORG(5))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,6)  = $get(VORG(6))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,7)  = $get(VORG(7))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,8)  = $get(VORG(8))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,9)  = $get(VORG(9))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,10) = $get(VORG(10))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,11) = $get(VORG(11))
 	
 	do VARLogAfterSave^VARUtil(YBED,YFORM)
 	do GoToForm^COMUtilForm("VARHistoricoRecebimento",1,,,,,)
	
	quit
	
OnAfterDataFields()

	new objTemp,vDataInicial,vDataFinal,vLocal,vProduto,vGrupo,vOrdemFornec,vFornecedor,vTipo,vFormato,vPrograma,vMarca
	set objTemp = $get(^VARTempHistoricoRecebimento(YM,YBED,1))
	
	kill ^CacheTempHistRecebimentoXLS(YM,YUSER,YBED)
	
	set vDataInicial = $piece(objTemp,Y,1)
	set vDataFinal   = $piece(objTemp,Y,2)
	set vLocal 		 = $piece(objTemp,Y,3)
	set vProduto  	 = $piece(objTemp,Y,4)
	set vGrupo   	 = $piece(objTemp,Y,5)
	set vOrdemFornec = $piece(objTemp,Y,6)
	set vFornecedor	 = $piece(objTemp,Y,7)
	set vTipo   	 = $piece(objTemp,Y,8)
	set vFormato	 = $piece(objTemp,Y,9)
	set vPrograma 	 = $piece(objTemp,Y,10)
	set vMarca		 = $piece(objTemp,Y,11)

	quit:( (vDataInicial = "") || (vDataFinal = "") )
	
	if (vDataInicial > vDataFinal) {
		$$$Alert("Insira um período válido para a pesquisa!")
		quit
	}

	//Só apresenta os resultados da consulta caso o usuário tenha clicado no botão 'Ok' do form.
	quit:('$$isAfterSaveLogged^VARUtil(YBED,YFORM))
	do ClearVARLogAterSave^VARUtil(YBED,YFORM)	
	
	//Monta query
	set querySQL = $$MontaSQL(vDataInicial,vDataFinal,vLocal,vProduto,vGrupo,vOrdemFornec,vFornecedor,vTipo,vPrograma,vFormato,vMarca)
	
	//Exibe resultados
	do ExibeResultados(querySQL,vFormato)
	
	quit
	
MontaSQL(pDataInicial,pDataFinal,pLocal,pProduto,pGrupo,pOrdemFornec,pFornecedor,pTipo,pPrograma,pFormato,pMarca)

	new meuSQL
	set meuSQL = ""
	
 	set meuSQL = "SELECT "
	set meuSQL = meuSQL_" $$SQLGetDataFormatada^VARSQL("_pDataInicial_") as DataIFormatada, "
	set meuSQL = meuSQL_" $$SQLGetDataFormatada^VARSQL("_pDataFinal_") as DataFFormatada, "
	//INREC
	set meuSQL = meuSQL_" INR.ReceiptNumber as codRec, "
	set meuSQL = meuSQL_" INR.Location as codLocal, "
	set meuSQL = meuSQL_" $$SQLGetLocationName^VARSQL(INR.Location) as descLocal, "
	set meuSQL = meuSQL_" TO_CHAR(INR.ProcessedDate,'DD/MM/YYYY') as DataProcessamento, "
	set meuSQL = meuSQL_" INR.Supplier as codFornecedor, "
	set meuSQL = meuSQL_" $$SQLGetDescFornecedor^VARSQL(INR.Supplier) as descFornecedor, "
	set meuSQL = meuSQL_" InvoiceNumber as NumeroRecibo, "
	set meuSQL = meuSQL_" INR.FREE8 as Empenho, "
	//INRECLine
	set meuSQL = meuSQL_" INRLine.Order1 as NoOrdem, "
	set meuSQL = meuSQL_" INRLine.Program1 as Programa, "
	set meuSQL = meuSQL_" INRLine.Item as codItem, "
	set meuSQL = meuSQL_" INRLine.ItemDescription as descItem, "
	set meuSQL = meuSQL_" INRLine.UnitCost as PrecoUnitario, "
	set meuSQL = meuSQL_" SUM(INRLine.Quantity) as Quantidade, "
	
	if (pFormato = 2){
		set meuSQL = meuSQL_" SUM(INRLine.UnitCost * INRLine.Quantity) as PrecoTotal, "
	}
	else {
		set meuSQL = meuSQL_" SUM(INRLine.TotalCost) as PrecoTotal, "
	}
	set meuSQL = meuSQL_" INRLine.Brand as Marca "
	
	set meuSQL = meuSQL_" FROM SQLUser.INREC as INR INNER JOIN SQLUser.INRECLine as INRLine "
	set meuSQL = meuSQL_" ON INR.ReceiptNumber = INRLine.ReceiptNumber "
	set meuSQL = meuSQL_" AND INR.Company = INRLine.Company "

	set meuSQL = meuSQL_" WHERE INR.Type = 2 "
	set meuSQL = meuSQL_" AND INR.Company = 0 "
	set meuSQL = meuSQL_" AND %UPPER(INR.Status) <> 4 "
	set meuSQL = meuSQL_" AND DATEDIFF('dd',INR.ProcessedDate,"_pDataInicial_") <= 0 "
	set meuSQL = meuSQL_" AND DATEDIFF('dd',INR.ProcessedDate,"_pDataFinal_") >= 0 "
	//Filtros
	if (pLocal '=""){
		set meuSQL = meuSQL_" AND INR.Location = '"_pLocal_"' "
	}
	
	if (pGrupo '= ""){
		set meuSQL = meuSQL_" AND $$SQLGetFiltroGrupo^VARSQL('"_pGrupo_"',INRLine.Item) = 1 "
	}
	
	if (pProduto '=""){
		set meuSQL = meuSQL_" AND INRLine.Item = '"_pProduto_"' "
	}
	
	if (pOrdemFornec '=""){
		set meuSQL = meuSQL_" AND  INRLine.Order1 = '"_pOrdemFornec_"' "
	} 
	
	if (pFornecedor '=""){
		set meuSQL = meuSQL_" AND INR.Supplier = "_pFornecedor_" "
	} 
	
	if (pTipo '=""){
		set meuSQL = meuSQL_" AND INR.TypeofReceiving = "_pTipo_" "
	}
	
	if (pPrograma '=""){
		set meuSQL = meuSQL_" AND INRLine.Program1 = "_pPrograma_" "
	}
	if (pMarca '= "") {
		set meuSQL = meuSQL_" AND INRLine.Brand = '"_pMarca_"' "
	}	
	if (pFormato = 2){
		set meuSQL = meuSQL_" GROUP BY INR.ReceiptNumber,INR.ProcessedDate,INR.Supplier,INR.FREE8,InvoiceNumber  "
	}
	else {
		set meuSQL = meuSQL_" GROUP BY INR.ReceiptNumber,INRLine.Item "
	}
	
	set meuSQL = meuSQL_" ORDER BY INR.ProcessedDate "

	quit meuSQL
	
ExibeResultados(pquerySQL,pFormato)

	new rsHistoricoRecebimento,lstHeader,count,ValorTotal
	
	kill ^CacheTempHistRecebimentoXLS(YM,YUSER,YBED)
	
	set rsHistoricoRecebimento = ##class(%ResultSet).%New()  ;Create Result Set Object		

	do rsHistoricoRecebimento.Prepare(pquerySQL)  ;Prepare Query
	do rsHistoricoRecebimento.Execute()  		  ;Execute Query

 	if (pFormato = ""){
	 	set pFormato = 1
 	}
 	
 	// Tabela
 	set lstHeader = "" 
 	if (pFormato = "1"){ ;Completo
 		set lstHeader = lstHeader_$listbuild("Seq.","Recebimento","Data","O.C.","Local","Fornecedor","Produto","Marca","Nota Fiscal","Quant.","Preço Total (R$)")
 		// BASIC-12: Montagem do Cabeçalho
		set ^CacheTempHistRecebimentoXLS(YM,YUSER,YBED,0,1) = "Seq.~Recebimento~Data~O.C.~Local~Fornecedor~Produto~Marca~Nota Fiscal~Quant.~Preço Total (R$)"
 	} else { ;Simplificado  	
		set lstHeader = lstHeader_$listbuild("Seq.","Recebimento","Data","Fornecedor","Nota Fiscal","Preço Total (R$)")
		// BASIC-12: Montagem do Cabeçalho
		set ^CacheTempHistRecebimentoXLS(YM,YUSER,YBED,0,1) = "Seq.~Recebimento~Data~Fornecedor~Nota Fiscal~Preço Total (R$)"
		
 	}
 	
 	if $$Start^COMTable(lstHeader) {
		
		set count      = 0
		set ValorTotal = 0
		set descMarca  = ""
		
		While (rsHistoricoRecebimento.Next()) {
			
			set DtInicialF        = rsHistoricoRecebimento.GetData(1)
			set DtFinalF  		  = rsHistoricoRecebimento.GetData(2)
			set NoRecebimento     = rsHistoricoRecebimento.GetData(3)
			set CodLocal    	  = rsHistoricoRecebimento.GetData(4)
			set DescLocal 		  = rsHistoricoRecebimento.GetData(5)
			set DataProcessado    = rsHistoricoRecebimento.GetData(6)
			set CodFornecedor     = rsHistoricoRecebimento.GetData(7)
			set DescFornecedor 	  = rsHistoricoRecebimento.GetData(8)
			set NotaFiscal    	  = rsHistoricoRecebimento.GetData(9)
			set Empenho  		  = rsHistoricoRecebimento.GetData(10)
			set OrdemFornecimento = rsHistoricoRecebimento.GetData(11)
			set Programa      	  = rsHistoricoRecebimento.GetData(12)
			set Produto    		  = rsHistoricoRecebimento.GetData(13)
			set DescProduto 	  = rsHistoricoRecebimento.GetData(14)
			set PrecoUnitario     = rsHistoricoRecebimento.GetData(15)
			set Quantidade   	  = rsHistoricoRecebimento.GetData(16)
			set PrecoTotal 	  	  = rsHistoricoRecebimento.GetData(17)
			set Marca			  = rsHistoricoRecebimento.GetData(18)
			
			set nomePrograma = $$GetProgramName^VARSQL(Programa)
			set descMarca = $$GetBrandName^VARSQL(Marca)
			set count = $i(count)
			set ValorTotal = ValorTotal + PrecoTotal
			
			// BASIC-12
			set objExcel = ""
					
			do NewLine^COMTable()
	    	do InsertCell^COMTable(count)
	    	do InsertCell^COMTable(NoRecebimento,"INReceipt",NoRecebimento)
		    do InsertCell^COMTable(DataProcessado)
		    set objExcel = count_"~"_NoRecebimento_"~"_DataProcessado
		    if (pFormato = 1) {
	    		do InsertCell^COMTable(OrdemFornecimento)
	    		do InsertCell^COMTable(CodLocal_" - "_DescLocal,,,,,,,,,$$$YES)
	    		set objExcel = objExcel_"~"_OrdemFornecimento_"~"_CodLocal_" - "_DescLocal_" - "_DescLocal
		    }
			do InsertCell^COMTable(CodFornecedor_" - "_DescFornecedor,,,,,,,,,$$$YES)
	    	set objExcel = objExcel_"~"_CodFornecedor_" - "_DescFornecedor
	    	if (pFormato = 1) {
		    	do InsertCell^COMTable(Produto_" - "_DescProduto,,,,,,,,,$$$YES)
	    		do InsertCell^COMTable(descMarca,,,,"CENTER")
	    		set objExcel = objExcel_"~"_Produto_" - "_DescProduto_"~"_descMarca
	    	}
	    	do InsertCell^COMTable(NotaFiscal)
	    	set objExcel = objExcel_"~"_NotaFiscal
	    	if (pFormato = 1) {
		    	do InsertCell^COMTable($$^WWWTR(0,12,Quantidade),,,,"RIGHT")
		    	set objExcel = objExcel_"~"_$$^WWWTR(0,12,Quantidade)
	    	}
	    	do InsertCell^COMTable($$^WWWTR(0,8,PrecoTotal),,,,"RIGHT")
	    	set objExcel = objExcel_"~"_$$^WWWTR(0,8,PrecoTotal)
	    	do EndLine^COMTable()
	    	
	    	set ^CacheTempHistRecebimentoXLS(YM,YUSER,YBED,count,1) = objExcel
		}
		
		do NewLine^COMTable("lightsteelblue")
		
		if (pFormato = 1) set columnPosition = 10
		if (pFormato = 2) set columnPosition = 5

		do InsertCell^COMTable("<strong>Valor Total em Estoque</strong>",,,,"RIGHT",,columnPosition)	    
	    do InsertCell^COMTable("<strong>R$ "_$$^WWWTR(0,8,ValorTotal,2)_"</strong>",,,,"RIGHT")	
	    set $piece(^CacheTempHistRecebimentoXLS(YM,YUSER,YBED,count+1,1),"~",columnPosition) = "<strong>Valor Total em Estoque</strong>~<strong>R$ "_$$^WWWTR(0,8,ValorTotal,2)_"</strong>"
	    
		do EndLine^COMTable()
		
		do Stop^COMTable()	
  	}
	
	do rsHistoricoRecebimento.Close()

	quit
 
Imprimir()

	set DataInicial	= $get(VORG(1))
	set DataFinal	= $get(VORG(2))
	set Formato		= $get(VORG(9))
	
	quit:( (DataInicial = "") || (DataFinal = "") )
	
	if (DataInicial > DataFinal) {
		$$$Alert("Insira um período válido para a pesquisa!")
		do GoToForm^COMUtilForm("VARHistoricoRecebimento",1,,,,,)
		quit
	}
	
	if (Formato="") set Formato = 1

	do RunReportHistoricoRec^VARJasperRunReportContinuacao(DataInicial,DataFinal,Formato)
	
	quit
	
	// BASIC-12
ExportarExcel()
	$$$VAR
	set DataInicial	= $get(VORG(1))
	set DataFinal	= $get(VORG(2))
	
	kill ^VARTempHistoricoRecebimento(YM,YBED)
	
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,1)  = DataInicial
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,2)  = DataFinal
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,3)  = $get(VORG(3))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,4)  = $get(VORG(4))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,5)  = $get(VORG(5))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,6)  = $get(VORG(6))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,7)  = $get(VORG(7))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,8)  = $get(VORG(8))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,9)  = $get(VORG(9))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,10) = $get(VORG(10))
	set $piece(^VARTempHistoricoRecebimento(YM,YBED,1),Y,11) = $get(VORG(11))
 	
 	do VARLogAfterSave^VARUtil(YBED,YFORM)
	if ('$data(^CacheTempHistRecebimentoXLS(YM,YUSER,YBED))) {
		$$$Alert("IN00740")
	}
	else {
		do ExportarExcel^VARExportarExcel("CacheTempHistRecebimentoXLS")
	}
	do GoToForm^COMUtilForm("VARHistoricoRecebimento",1,,,,,)
	quit]]></Routine>
</Export>