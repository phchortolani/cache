<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLBankReconPost" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLBankReconPost
 
#include COMSYS
#include FINConst
 
CreateBatch(pidBankRecon,pdteGLEffective)
	;-------------------------------------------------------------------------------
	; Create and Post a Batch to generate a FINGLTran for FINGLBankReconLine entries
	;
	; Params:
	; pidBankRecon   : The id of the Bank Reconciliation
	; pdteGLEffective: The date to post this entry to the GL.
	;
	; ByRefs:
	;
	; Returns:
	; strStatus: $$$OK no errors, anything else are errors
	;
	; History:
	; 13-Jun-2006	RPW		SR14642: Created
	;-------------------------------------------------------------------------------
 
	new strStatus,objBankRecon,idCreator,idBankAccount,strDetail,strForm,idBatch,idBlock
	
	set objBankRecon=$get(^FINGLBankRecon(YM,pidBankRecon,1))
	
	set idCreator     = $$$FINGLBankReconCreatedBy(objBankRecon)
	set idBankAccount = $$$FINGLBankReconBankAccount(objBankRecon)
	set strDetail     = "Fin01038"_$$$COMMA_pidBankRecon_$$$COMMA_idBankAccount  ;Bank Reconciliation %1 for Bank Account %2.
	set strForm		  = $$CheckForm^FINUtils($get(YFORM),"FINGLBankRecon")	; Get the form using YFORM, with validation
	set strStatus     = $$Allocate^FININTBatch(.idBatch,.idBlock,"GLBR",,pdteGLEffective,,idCreator,,strForm,pidBankRecon,strDetail)
 
	if $$$ISOK(strStatus) {
		set strStatus=$$AddLines(pidBankRecon,idBatch,idBlock,idBankAccount)
		if $$$ISOK(strStatus) {
			set strStatus = $$PostBlock^FININTBatch(idBatch,idBlock)
			if $$$ISOK(strStatus) {
				set strStatus = $$PostBatch^FININTBatch(idBatch,"CI")
			}
		}	
	}
	
	quit strStatus
	
AddLines(pidBankRecon,pidBatch,pidBlock,pidBankAccount)
	;-------------------------------------------------------------------------------
	; Loop through the gl adjustment lines and add them as batch lines
	;
	; Params:
	; pidBankRecon  : The id of the Bank Reconciliation
	; pidBatch      : The id of the FININTBatch
	; pidBlock      : The id of the FININTBatchBlock
	; pidBankAccount: The Bank Account of the Bank Reconciliation
	;
	; ByRefs:
	;
	; Returns:
	; strStatus: $$$OK no errors, anything else are errors
	;
	; History:
	; 29-Sep-2006 	JW		SR15088: Reversed batch line amounts.
	; 13-Jun-2006	RPW		SR14642: Created
	;-------------------------------------------------------------------------------
 
	new strStatus,idLine,objLine,curCredit,curDebit,curAmount,idAccount,objParameters
	
	set strStatus=$$$OK
 
	$$$Order3(^FINGLBankReconLine,YM,pidBankRecon,idLine)
			
		set objLine=$get(^FINGLBankReconLine(YM,pidBankRecon,idLine,1))
		set curCredit=$$$FINGLBankReconLineCredit(objLine)
		set curDebit=$$$FINGLBankReconLineDebit(objLine)
		
		set curAmount=$select($$$FCZero(curCredit):$$$FCSign(curDebit),1:curCredit)
		
		set idAccount=$$$FINGLBankReconLineAccount(objLine)
		set $piece(objParameters,",",1)=pidBankRecon
		set $piece(objParameters,",",2)=idLine
		set $piece(objParameters,",",8)=$$$FINGLBankReconLineReference(objLine)
 
		set strStatus=$$AddLine^FININTBatch(pidBatch,pidBlock,idAccount,curAmount,"CI",objParameters,pidBankRecon_$$$COMMA_idLine,$$$FINGLBankReconLineReference(objLine),,,,,,,,pidBankRecon)
		set strStatus=$$AddLine^FININTBatch(pidBatch,pidBlock,pidBankAccount,$$$FCSign(curAmount),"CI",objParameters,pidBankRecon_$$$COMMA_idLine,$$$FINGLBankReconLineReference(objLine))
		quit:$$$ISERR(strStatus)
	$$$End
 
	quit strStatus
]]></Routine>
</Export>