<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESPamAfm" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include COMSYS
#include VARConst
 
VARSESPamAfm
	quit
	
OnAfterSave()
 
	;if YBED = "FRANK" for i=1:1:100 hang 1
	new idPAM, idPAMLine
	
	set idPAM     = $$$KEY1(YKEY)
	set idPAMLine = $$$KEY2(YKEY)
 
	set strStatus = $$UpdateUsedQuantity^VARTRKPAMLineFake(idPAM, idPAMLine)
 
	quit strStatus
	
OnBeforeDelete()
 
 
	new idPAM, idPAMLine, fltQuantity
	
	set idPAM       = $$$KEY1(YKEY)
	set idPAMLine   = $$$KEY2(YKEY)
	set fltQuantity = $$$VARSESPAMAFMQtdAtendida(YFELD)
 
 	set ^AndreDebug("DeletePAMAFM",1,$horolog) = idPAM_","_idPAMLine_","_fltQuantity
 	
	set strStatus = $$UpdateUsedQuantity^VARTRKPAMLineFake(idPAM, idPAMLine, fltQuantity)	
 
	quit strStatus
	
Regerar()
 
	new idAFM, idAFMLine, objAFMLine, idPAM, idPAMLine, fltQuantidade, idItem
 
	$$$VAR
	;for i=1:1:100 hang 1
	$$$Order2(^INAUFP,YM,idAFM)
 
		$$$Order3(^INAUFP,YM,idAFM,idAFMLine)
 
			set objAFMLine    = $get(^INAUFP(YM, idAFM, idAFMLine, 1))
			set fltQuantidade = $piece(objAFMLine, Y, 5)
			set idItem		  = $piece(objAFMLine, Y, 4)
			set idPAM		  = $piece(objAFMLine, Y, 289)
			
			if (idPAM '= "") && (idPAM '= "PAM") {
				$$$Order3(^VARTRKPAMLineFake,YM,idPAM,idPAMLine)
	
					set objPAMLine = $get(^VARTRKPAMLineFake(YM, idPAM, idPAMLine, 1))
					quit:$piece(objPAMLine,Y,1)=idItem
	
				$$$End
	
				if idPAMLine '= "" {
					set idPAMAFM  = idPAM_$$$COMMA_idPAMLine_$$$COMMA_idAFM_$$$COMMA_idAFMLine
					if '$data(^VARSESPAMAFM(YM, idPAM, idPAMLine, idAFM, idAFMLine, 1)) {
						set strStatus = $$$Save("VARSESPAMAFM",idPAMAFM,fltQuantidade,$$$YES)
						
						if ($extract(strStatus,1,1)="0") {
							;write "Erro na PAMAFM (id=",idPAMAFM,"):",strStatus,!
							write $$$Text($listbuild("MED01058",idPAMAFM))_":",strStatus,!  ;Erro na PAMAFM (id = %1 ) ;use text macro;15-Sep-2008
						}
					}						
				}
			}
			
		$$$End 
	$$$End
 
	quit
	
GetPAMs(pidAFM, pidAFMLine, &arrPAMs)
	
	new idPAM, strPAMs, idxPAM, idxPAMLine
	
	set strPAMs = ""
	$$$Order5(^VARSESPAMAFMs,YM,1,$$$Index(pidAFM),$$$Index(pidAFMLine),idxPAM)
	
		$$$Order6(^VARSESPAMAFMs,YM,1,$$$Index(pidAFM),$$$Index(pidAFMLine),idxPAM,idxPAMLine)
	
			$$$Order7(^VARSESPAMAFMs,YM,1,$$$Index(pidAFM),$$$Index(pidAFMLine),idxPAM,idxPAMLine,idPAM)
 
				set arrPAMs(idPAM) = ""
			
			$$$End
		$$$End
	$$$End
 
	$$$Order1(arrPAMs,idPAM)
		if strPAMs = "" {
			set strPAMs = idPAM
			
		} else {
			set strPAMs = strPAMs_";"_idPAM
		}
	$$$End
	
	quit strPAMs
	
GetAFMs(pidPAM, pidPAMLine, &parrAFMLines)
  
  	new idAFM, idAFMLine
  
  	$$$Order4(^VARSESPAMAFM,YM,pidPAM,pidPAMLine,idAFM)
  
  		$$$Order5(^VARSESPAMAFM,YM,pidPAM,pidPAMLine,idAFM,idAFMLine)
  		
  			set parrAFMLines(idAFM, idAFMLine) = ""
  		
  		$$$End
   	$$$End
  
	quit
	
GetAFMCountNotReceived(pidPAM, pidItem)
 
	new idxAFM, intAFMCount, idxPAM, idLine, idAFM, idPAMLine, objPAMLine, idAFMLine
 
	set intAFMCount = 0
	
	$$$Order3(^VARSESPAMAFM,YM,pidPAM,idPAMLine)
	
		set objPAMLine = $get(^VARTRKPAMLineFake(YM, pidPAM, idPAMLine, 1))
		set idItem 	   = $piece(objPAMLine, Y, 1)
		continue:(idItem '= pidItem)
		
		$$$Order4(^VARSESPAMAFM,YM,pidPAM,idPAMLine,idAFM)
			$$$Order5(^VARSESPAMAFM,YM,pidPAM,idPAMLine,idAFM,idAFMLine)
			
				set objAFMLine = $get(^INAUFP(YM, idAFM, idAFMLine, 1))
				set idItem	   = $piece(objAFMLine, Y, 4)
				continue:(idItem '= pidItem)
				
				if '$$HasBeenReceived^VARSESINAUF(idAFM, idAFMLine) {
					set intAFMCount = intAFMCount + 1
				}
						
			$$$End
		$$$End
	$$$End
 
	quit intAFMCount
]]></Routine>
</Export>