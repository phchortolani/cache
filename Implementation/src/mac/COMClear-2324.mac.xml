<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMClear" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMClear
	
#include COMSYS
#include WWWConst
#include COMConst
#include %occInclude
	
OnAfterDataFields(pidClass="")
    ;-------------------------------------------------------------------------------
    ;
    ; Returns:
    ;
    ; History:
    ; 03-Jun-2005	shobby	SR10782: Check for pidClass=1, invalid, used when
    ; 							generating help text screens. 
    ; 01-Jun-2005	shobby	Created SR10782..
    ;-------------------------------------------------------------------------------
	new strClass,intCount
	
	if (pidClass'="") && (pidClass'=1) && ($length(pidClass,",")=1) {
		set strClass = "^"_pidClass
		write "Data? "_$select($data(@strClass):"Yes",1:"No")
		write "<BR>"
		for intCount=1:1:20 {
			set strClass = $query(@strClass)
			quit:strClass=""
			
			write "<BR>"
			write strClass_" : "_@strClass
		}
	}
	quit
	
	
OnAfterPrimaryKey()
	&html<
		<script type='text/javascript'>
		<!--
		function COMClearInput() {
			Result=window.prompt("Enter Module Prefix:","","100;100;100;100;");
			if (Result!=null) {
				CallBack("Generate^COMClear",Result);
			}
		}	
		-->
		</script>	>
	quit	
	
	
Generate(pstrModule)
    ;-------------------------------------------------------------------------------
    ; Method to populate the COMClear globals
    ;
    ; Returns:
    ;
    ; History:
    ; 25-May-2005	shobby	Created SR10782
    ;-------------------------------------------------------------------------------
	new idClass,blnUpdated,objCOMClear,objWWW001
	
	set blnUpdated = $$$NO
	set idClass    = ""
	for {
		set idClass = $order(^WWW001(0,idClass))
		quit:idClass=""
		
		if ($extract(idClass,1,$length(pstrModule))=pstrModule) {
			set objCOMClear = $get(^COMClear(YM,idClass,1))
			set objWWW001   = $get(^WWW001(0,idClass,1))
			;set $$$COMClearLevel1(objCOMClear)=$$$EnumCOMCLEARTransactionalData
			
			if $$$WWW001UpdateFile(objWWW001)=$$$YES {
				set $$$COMClearLevel1(objCOMClear) = $$$EnumCOMCLEARDonotremove
			}
			
			do Save^COMUtils("COMClear",idClass,objCOMClear,$$$YES)
			set blnUpdated = $$$YES
		}
	}
	
	write "SAVENOW();"
	write "document.WWW.target='';document.WWW.YBUTTON.value=''; OPENNOW();return false;"
	
	quit
	
	
Clear(pstrApplication="",pintLevel=0,pblnFlag=0)
    ;-------------------------------------------------------------------------------
    ; Removes data and resets the database to various states of 'cleanliness'.
    ;
    ; Returns:
    ; 
    ; Notes:
    ; 	pintLevel: 	1: Transactional Data
    ; 				2: Customer Data
    ; 				3: Setup Data
    ; 				4: Configuration Data
    ; 			
    ; 	***********************  USE WITH CAUTION  *********************************
    ;
    ; History:
    ; 16-Jun-2005	shobby	SR10782: COMClear is shared.
    ; 03-Jun-2005	shobby	SR10782: Rewritten using the COMClear class.
    ; 28-Oct-2004	shobby	SR10782: Don't remove classes that have no clear level.
    ; 13-Jul-2004	shobby  WWWVAR
    ; 08-Jun-2004   Shobby  Created
    ;-------------------------------------------------------------------------------
	new strDescription,strClass,intLevel,lstClasses,objCOMClear
	
	if $get(Y)="" do ^WWWVAR
	
	set strClass = pstrApplication
	for {
		set strClass = $order(^COMClear(YM,strClass))
		quit:strClass=""
		
		if $extract(strClass,1,$length(pstrApplication))=pstrApplication {
			set objCOMClear = $get(^COMClear(YM,strClass,1))
			set intLevel    = $$$COMClearLevel1(objCOMClear)
			if intLevel="" {
				write !,"Class "_strClass_" unknown!"
			
			} elseif intLevel'>pintLevel {
				do Kill(strClass,pblnFlag)
			
			} else {
				write !,"Class "_strClass_" ignored!"
			}
		}
	}
	quit
	
	
ClassLevel(plstClasses,strClass)
    ;-------------------------------------------------------------------------------
    ; Determines the level needed to remove this class
    ;
    ; Returns:
    ;
    ; History:
    ; 28-Oct-2004	Shobby	Created (SR10782)
    ;-------------------------------------------------------------------------------
	new intLevel
	
	set intLevel = ""
	for {
		set intLevel = $order(plstClasses(intLevel))
		quit:intLevel=""
		quit:($find(","_plstClasses(intLevel)_",",strClass)>0)
	}
	quit intLevel
	
	
Kill(pstrClass,pblnFlag=0)
    ;-------------------------------------------------------------------------------
    ; Conditionally do the actual kill
    ;
    ; Returns:
    ;
    ; History:
    ; 08-Jun-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new strCommand
	
	set strCommand(1) = "kill ^"_pstrClass_"("_YM_")"
	set strCommand(2) = "kill ^"_pstrClass_"s("_YM_")"
	if pblnFlag {
		xecute strCommand(1)
		xecute strCommand(2)
		xecute "kill ^"_pstrClass_"b("_YM_")"
		xecute "kill ^"_pstrClass_"bi("_YM_")"
	}	
	write !,strCommand(1)
	quit
	
	
ResetCustomerBalance() ; No reference to any calls found 25-Mar-2010 <GRF>
    ;-------------------------------------------------------------------------------
    ; Resets the Customer Balances.
    ; 
    ; Returns:
    ;
    ; History:
    ; 15-Jun-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new idCustomer,fltBalance,objFINARBalance,objFINARBalanceOld
	
	if $get(Y)="" do ^WWWVAR
	set idCustomer = ""
	for {
		set idCustomer = $order(^FINARCustomer(YM,idCustomer))
		quit:idCustomer=""
		
		set objFINARBalance    = $get(^FINARBalance(YM,idCustomer,1))
		set objFINARBalanceOld = objFINARBalance
		set objFINARBalance    = objFINARBalance+1     ; FIXME : Not used but if balance was $200 sets balance to $201 ???
		do ^WWWKILL("FINARBalance",idCustomer)
		if objFINARBalanceOld'="" {
			do ^WWWSPEI("FINARBalance",idCustomer,objFINARBalanceOld,$$$YES)
		}  ; FIXME : If the record is not blank run WWWSPEI which will find it is the same and hence not save it ???
	}
	quit
	
	
ClearAndCompress(pNamesp="TEMP")
    ;-------------------------------------------------------------------------------
	; History :
	; 04-May-2005	RobertW	Don't bother copying mtemp*
	; 02-May-2005	GRF		Don't copy certain entries; Permit alternate namespaces;
	; 						Don't bother copying empty entries; Don't copy CacheTemp*
    ;-------------------------------------------------------------------------------
	new d,Glo,new
	
	if pNamesp="" set pNamesp = "TEMP"
	
	kill ^COMDCMEventsProcessed
	kill ^COMDCMEventsProcesseds
	kill ^COMDCMEventsProcessedData
	kill ^COMDCMEventsProcessedDatas
	kill ^COMDCMEventsProcessedTarget
	kill ^COMDCMEventsProcessedTargets
	kill ^COMDCMMethodsRun
	kill ^COMDCMMethodsRuns
	kill ^COMDCMMethodsRunData
	kill ^COMDCMMethodsRunDatas
	kill ^COMLog
	kill ^COMLogs
	kill ^COMScheduleMessage
	kill ^COMScheduleMessages
	kill ^ERRORS
	kill ^ERRORSs
	kill ^Log
	kill ^Logs
	kill ^SALCSTLog
	kill ^SALCSTLogs
	
	write !,"Data cleared.. now merging",!
	
	set Glo = "^%zzzzz"
	for {
		set Glo = $order(^$Global(Glo))
		quit:Glo=""
		
		set d = +$data(@Glo)
		continue:'d
		continue:$extract(Glo,1,10)="^CacheTemp"
		continue:$extract(Glo,1,12)="^CacheStream"
		continue:$extract(Glo,1,6)="^mtemp"
		
		write !,d," ",Glo
		set new = "^["""_pNamesp_"""]"_$extract(Glo,2,999999)
		merge @new = @Glo
	}
	quit
	
	
ListGlobals
	;-------------------------------------------------------------------------------
	; List globals copied in ClearAndCompress - doesn't consider those killed
	; 
	; History :
	; 02-May-2005	GRF		Utility check created
	;-------------------------------------------------------------------------------
	new Glo,d
	
	set Glo = "^A"
	for {
		set Glo = $order(^$Global(Glo))
		quit:Glo=""
		
		set d = +$data(@Glo)
		write !,d," ",Glo
	}
	quit
	
	
 ; *******************************************
 ; *
 ; *
CopyToLog(pNamesp="TEMP")
	;-------------------------------------------------------------------------------
	; Copy specific log & audit globals to a "LOG" dataset
	; 
	; History :
	; 05-May-2005	GRF		Utility check created
	;-------------------------------------------------------------------------------
	new idGlo
	
	if pNamesp="" set pNamesp = "TEMP"
	
	kill ^CacheTempCOMClear($job)
	
	; If set with a value of $$$YES, only copies the specified global
	; If with $$NO, copies all globals with that prefix
	
	set ^CacheTempCOMClear($job,"^COMDCMEventsProc") = $$$NO
	set ^CacheTempCOMClear($job,"^COMDCMMethodsRun") = $$$NO
	set ^CacheTempCOMClear($job,"^COMLog")           = $$$NO
	set ^CacheTempCOMClear($job,"^COMMsgLog")        = $$$NO
	set ^CacheTempCOMClear($job,"^COMScheduleMess")  = $$$NO
	set ^CacheTempCOMClear($job,"^COMViewLog")       = $$$NO
	set ^CacheTempCOMClear($job,"^COMViewUser")      = $$$NO
	set ^CacheTempCOMClear($job,"^ERRORS")           = $$$NO
	set ^CacheTempCOMClear($job,"^ExecuteCodeError") = $$$NO
	set ^CacheTempCOMClear($job,"^Log")              = $$$NO
	set ^CacheTempCOMClear($job,"^SALCSTLog")        = $$$NO
	set ^CacheTempCOMClear($job,"^SALCSTSecurity")   = $$$NO
	set ^CacheTempCOMClear($job,"^SALCSTShipUnit")   = $$$NO
	set ^CacheTempCOMClear($job,"^WWW006")           = $$$NO
	set ^CacheTempCOMClear($job,"^WWW1205")          = $$$NO
	set ^CacheTempCOMClear($job,"^WWWBENCH")         = $$$NO
	set ^CacheTempCOMClear($job,"^WWWDATEN")         = $$$NO
	set ^CacheTempCOMClear($job,"^WWWDLF")           = $$$NO
	set ^CacheTempCOMClear($job,"^WWWDUMMY")         = $$$NO
	set ^CacheTempCOMClear($job,"^WWWERROR")         = $$$NO
	set ^CacheTempCOMClear($job,"^WWWFOOL")          = $$$NO
	set ^CacheTempCOMClear($job,"^WWWLAST")          = $$$NO
	set ^CacheTempCOMClear($job,"^WWWLOGIN")         = $$$NO
	set ^CacheTempCOMClear($job,"^WWWPAGE")          = $$$NO
	set ^CacheTempCOMClear($job,"^WWWPRO")           = $$$NO
	set ^CacheTempCOMClear($job,"^WWWRELOAD")        = $$$NO
	set ^CacheTempCOMClear($job,"^WWWSOR")           = $$$YES
	set ^CacheTempCOMClear($job,"^WWWUSER")          = $$$YES
	set ^CacheTempCOMClear($job,"^WWWUSER1")         = $$$YES
	set ^CacheTempCOMClear($job,"^WWWWV")            = $$$NO
	
	write !,"Data merging",!
	
	set idGlo = ""
	for {
		set idGlo = $order(^CacheTempCOMClear($job,idGlo))
		quit:idGlo=""
		
		if ^CacheTempCOMClear($job,idGlo) {
			do CopySingle(pNamesp,idGlo)
		} else {
			do CopyForPrefix(pNamesp,idGlo)
		}
	}
	quit
	
CopyForPrefix(pNamesp="TEMP",pGlo="")
	new Glo,lenGlo
	
	quit:pGlo=""
	
	if $extract(pGlo,1)'="^" {
		set pGlo = "^"_pGlo
	}
	if pNamesp="" set pNamesp = "TEMP"
	set lenGlo=$length(pGlo)
	
	set Glo=$order(^$Global(pGlo),-1)
	for {
		set Glo=$order(^$Global(Glo))
		quit:Glo=""
		quit:$extract(Glo,1,lenGlo)'=pGlo
		
		do CopySingle(pNamesp,Glo)
	}
	quit
	
CopySingle(pNamesp="TEMP",pGlo="")
	new d,new
	
	quit:pGlo=""
	if $extract(pGlo,1)'="^" {
		set pGlo = "^"_pGlo
	}
	if pNamesp="" set pNamesp = "TEMP"
	
	set d=+$data(@pGlo)
	quit:'d
	
	write !,d," ",pGlo
	set new="^["""_pNamesp_"""]"_$extract(pGlo,2,999999)
	write ?40,new
	merge @new=@pGlo
	
	quit
 ; *
 ; *
 ; *******************************************
	
Create(pstrDirectory) private
    ;-------------------------------------------------------------------------------
    ; Create a database, dismount it, copy the CACHE.DAT to CLEAN.DAT
    ; 
    ; Parmeters:
    ; pstrDirectory	The database directory, this is normalized and returned
    ; 
	; History :
	; 03-Nov-2009	shobby	SR16936: Simplified.  Only supporting Cache 2008 now.
	; 03-Mar-2009	shobby	SR16353:	Calls to Database package different in 2008.  Redirected to wrapper.
	; 05-May-2005	RobertW	Created SR12283
    ;-------------------------------------------------------------------------------
	new strCachename,strCleanname,blnExists,blnAbort,db
	new strNS	;SR16936

	set pstrDirectory=##class(%File).NormalizeDirectory(pstrDirectory)
	
	set strCachename=pstrDirectory_"CACHE.DAT"
	set strCleanname=pstrDirectory_"CLEAN.DAT"
	
	do ##class(%File).CreateDirectoryChain(pstrDirectory)
		
	set blnExists=##class(%File).Exists(strCachename)
	
	set blnAbort=$$$NO
 	
 	set strNS=$zutil(5)													;SR16936
 	zn "%SYS"															;SR16936
	if blnExists {
		
		if ##class(SYS.Database).%ExistsId(pstrDirectory) {  ;16353		;SR16936
			if ##class(%File).Exists(strCleanname) {
				set db=##class(SYS.Database).%OpenId(pstrDirectory)		;SR16936
				if db'=$$$NULLOREF {
					if $$$ISOK(db.Dismount()) {
						do ##class(%File).Delete(strCachename)
						do ##class(%File).CopyFile(strCleanname,strCachename)
						do db.Mount()
					}
				}
				do db.%Close() 											;SR16936
			} else {
				write !,"CACHE.DAT exists in "_pstrDirectory_" but there is no CLEAN.DAT,"
				write !,"I can not tell if the CACHE.DAT is clean. Aborting"
				set blnAbort=$$$YES
			}
		}
		
	} else {
		set db=##class(SYS.Database).%New()		;SR16353  				;SR16936
		if db'=$$$NULLOREF {
			set db.Directory=pstrDirectory
			if $$$ISOK(db.%Save()) {									;SR16936
				if db.Mounted {
					do db.Dismount()
				}
				do ##class(%File).CopyFile(strCachename,strCleanname)
				do db.Mount()
			}
			do db.%Close() 												;SR16936
		}
	}
	kill db																;SR16936
	zn strNS															;SR16936
	quit 'blnAbort
	
	
Finalise(pstrDirectory) private
    ;-------------------------------------------------------------------------------
    ; Remove the database from cache and remove the CACHE.DAT file
    ; 
    ; Parmeters:
    ; pstrDirectory	The database directory.
    ; 
	; History :
	; 03-Nov-2009	shobby	SR16936: Simplified.  Only supporting Cache 2008 now.
	; 03-Mar-2009	shobby	SR16353: Calls to Database package different in 2008.
	; 							Redirected to wrapper.
	; 05-May-2005	RobertW	SR12283: Created
    ;-------------------------------------------------------------------------------
	new strCachename,strCopyname,db
	new strNS   ;SR16936
 
	set strCachename = pstrDirectory_"CACHE.DAT"
	set strCopyname  = pstrDirectory_"COPYANDRENAMETOCACHE.DAT"
 
 	set strNS = $zu(5)												;SR16963
 	zn "%SYS"														;SR16963
 	
	set db=##class(SYS.Database).%OpenId(pstrDirectory)				;SR16936
	if db'=$$$NULLOREF {
		if $$$ISOK(db.Dismount()) {
			do ##class(%File).Rename(strCachename,strCopyname)
		}
	}
	do db.%Close()  												;SR16936
	kill db															;SR16936
	
	do ##class(SYS.Database).DeleteDatabase(pstrDirectory)			;SR16936
	
	zn strNS														;SR16963
	write !,"Please dismount "_$zutil(5)_" and copy "_strCopyname_" to "_$zutil(12,"")_"."
	write !,"You will then need to delete the CACHE.DAT and rename COPYANDRENAMETOCACHE.DAT to CACHE.DAT"
	write !,"Please leave "_pstrDirectory_"CLEAN.DAT here as this will be used next time."
	
	quit
	
	
DBClearAndCompress(pstrDirectory,pblnCompanyZero=$$$NO)
    ;-------------------------------------------------------------------------------
	; 1) Identify temp copy path (which doesn't currently have CACHE.DAT file) on
	;    drive with enough free space for compressed data
	; 
	; 2) Make sure everyone is off of the server
	; 
	; 3) Call this subroutine e.g.
	;         do DBClearAndCompress^COMClear("e:\data\copy",1)
	; 
	; 4) Follow unmount and replace instructions once all required globals have
	;    been copied.
	; 
	; Prompts:
	; 	pstrDirectory		pathname where new CACHE.DAT is to be created
	; 	pblnCompanyZero		0 : Copy data for all companies
	; 						1 : Only copy data for company zero
	; 
	; History :
	; 28-Jan-2011	shobby	SRAdhoc: Disabled journaling while running.
	; 19-Oct-2006	shobby	SRBR014204:With optional parameter pblnCompanyZero don't copy
	; 						across data (or indexes) for companies other than 0.
	; 						Useful for cleaning out databases and compress DEV to sync with PROD
	; 05-May-2005	RobertW	Create a directory and cache.dat for the work.
	; 						Don't copy ^WWWDATEN
	; 04-May-2005	RobertW	Don't copy mtemp*
	; 02-May-2005	GRF		Don't copy certain entries; Permit alternate namespaces;
	; 						Don't bother copying empty entries; Don't copy CacheTemp*
    ;-------------------------------------------------------------------------------
	new d,Glo,new
	
	//TODO: Make all strings here language text.
	
	write #!,"Please make sure everyone is logged off of AlphaLinc",!
	
	if $$Continue() && $$Create(.pstrDirectory) {
		DO DISABLE^%NOJRN
		kill ^COMDCMEventsProcessed
		kill ^COMDCMEventsProcesseds
		kill ^COMDCMEventsProcessedData
		kill ^COMDCMEventsProcessedDatas
		kill ^COMDCMEventsProcessedTarget
		kill ^COMDCMEventsProcessedTargets
		kill ^COMDCMMethodsRun
		kill ^COMDCMMethodsRuns
		kill ^COMDCMMethodsRunData
		kill ^COMDCMMethodsRunDatas
		kill ^COMLog
		kill ^COMLogs
		kill ^COMScheduleMessage
		kill ^COMScheduleMessages
		kill ^ERRORS
		kill ^ERRORSs
		kill ^Log
		kill ^Logs
		kill ^SALCSTLog
		kill ^SALCSTLogs
		kill ^WWWSOR
		kill ^WWWDUMMY
		
		do Purge^%apiSQL(0)
		
		write !,"Data cleared.. now merging",!
		
		set Glo="^%zzzzz"
		for {
			set Glo=$order(^$Global(Glo))
			quit:Glo=""
			
			set d=+$data(@Glo)
			continue:'d
			
			continue:$extract(Glo,1,10)="^CacheTemp"
			continue:$extract(Glo,1,6)="^mtemp"
			continue:$extract(Glo,1,9)="^WWWDATEN"
			continue:$extract(Glo,1,8)="^WWWLAST"
			continue:$extract(Glo,1,7)="^WWWPRO"
			continue:$extract(Glo,1,3)="^zz"
			continue:$extract(Glo,1,4)="^Log"
			continue:$extract(Glo,1,2)="^X"
			continue:($extract(Glo,1,18)="^AEPLanguageImport")&&(pblnCompanyZero) ;BR014024... lot of data here.  Don't think it is needed.
			
			write !,d," ",Glo
			//merge ^["^^d:\temp\fred\"]RPW=^RPW
			
			set new="^[""^^"_pstrDirectory_"""]"_$extract(Glo,2,999999)
			if pblnCompanyZero && $$IsAtNetClass(Glo) {
				merge @new@(0) = @Glo@(0)	;Only company 0
			} else {
				merge @new=@Glo
			}
		}
		do Finalise(pstrDirectory)
		DO ENABLE^%NOJRN
	}
	quit
 
 
ClearOther
    ;-------------------------------------------------------------------------------
	; Collects some information from the user about what they want to do here.
	; 
	; Parameters:
	;
	; History :
	; 20-Sep-2007	shobby	SRBR014204: Creation
    ;-------------------------------------------------------------------------------
	new blnFix,blnBackup,blnList
	
	set blnList   = $$ReadInput("Display a list of data to be cleared (y/n)?")
	set blnBackup = $$ReadInput("Back up data that will be removed to a ^CLEARBACKUP global (y/n)?")
	set blnFix    = $$ReadInput("Actually remove the data (y/n)?")
	do DoClearOtherCompanies(blnFix,blnBackup,blnList)
	quit
	
	
ListOtherCompanies
    ;-------------------------------------------------------------------------------
	; List the changes that will be made when clearing the other companies
	; 
	; Parameters:
	;
	; History :
	; 20-Sep-2007	shobby	SRBR014204: Creation
    ;-------------------------------------------------------------------------------
	do DoClearOtherCompanies($$$NO,$$$NO,$$$YES)
	quit
	
	
BackupOtherCompanies
    ;-------------------------------------------------------------------------------
	; Backup the data so changes can be examined at a later date
	; 
	; Parameters:
	;
	; History :
	; 20-Sep-2007	shobby	SRBR014204: Creation
    ;-------------------------------------------------------------------------------
	do DoClearOtherCompanies($$$NO,$$$YES,$$$NO)
	quit
	
	
ClearOtherCompanies
    ;-------------------------------------------------------------------------------
	; Just clear the data without backup or feedback.
	; 
	; Parameters:
	;
	; History :
	; 20-Sep-2007	shobby	SRBR014204: Creation
    ;-------------------------------------------------------------------------------
	do DoClearOtherCompanies($$$YES,$$$NO,$$$NO)
	quit
	
	
ReadInput(pstrMessage)
    ;-------------------------------------------------------------------------------
	; Finds out how the user wants to proceed.
	; 
	; Parameters:
	; 		pstrMessage:	The prompt to show the user
	;
	; History :
	; 20-Sep-2007	shobby	SRBR014204: Creation
    ;-------------------------------------------------------------------------------
	new blnFlag,strInput
	
	write !
	set pstrMessage=""""_pstrMessage_""""  ;Need some special tricks here to allow the read command to read with the
										   ;message in a variable.  Otherwise 'read pstrMessage, strInput' actually
										   ;does two reads without writing the message.
	for {
		write $char(13)
		read @pstrMessage, strInput
		set strInput=$$$UPPER(strInput)
		quit:(strInput="Y")||(strInput="N")
	}
	set blnFlag=(strInput="Y")
	quit blnFlag
	
	
DoClearOtherCompanies(pblnFix=$$$NO,pblnBackup=$$$YES,pblnList=$$$YES)
    ;-------------------------------------------------------------------------------
	; List or Remove all data for companies other than company 0
	; 
	; Parameters:
	; 		pblnFix:$$$NO  Just list the data that will be removed
	; 		pblnFix:$$$YES Remove the data.
	; 		pblnBackup: Copies the data to a ^CLEARBACKUP global
	; 		pblnList:	Writes to screen what is happening.
	;
	; History :
	; 25-Mar-2010	GRF		-: Replace order macros
	; 20-Sep-2007	shobby	SRBR014204: Include pblnList as a parameter.
	; 21-Aug-2007	shobby	SRBR014204: Optional flag to make a backup of the data removed.
	; 							Change to include data stored in globals that have
	; 							the first data field as a company.
	; 19-Oct-2006	shobby	SRBR014204: Creation
    ;-------------------------------------------------------------------------------
	new idClass,idKey,objWWW002,intKey,idCompany,intLevel,strQuery,strCommand,intLoop,strIndexSuffix
	
	kill ^CLEARBACKUP
	if $get(Y)="" do ^WWWVAR
	
	set idClass = ""
	for {
		set idClass = $order(^WWW001(0,idClass))
		quit:idClass=""
		
		set intKey=0
		set idKey = ""
		for {
			set idKey = $order(^WWW001(0,idClass,idKey))
			quit:idKey=""
			
			set objWWW002=$get(^WWW002(0,idClass,idKey,1))
			if ($$$WWW002RelationClass(objWWW002)="WWW012"){
				set intKey=idKey
			} elseif (idClass="WWW012") {
				set intKey=1
			}
			if intKey=0 {
				set idCompany=0
				for {
					xecute "set idCompany=$order(^"_idClass_"(idCompany))"
					quit:idCompany=""
					
					if idCompany'=0 {
						if pblnList {
							if pblnBackup 	write !, "merge ^CLEARBACKUP("""_idClass_""","_idCompany_")=^"_idClass_"("_idCompany_")"
							write !, "kill ^"_idClass_"("_idCompany_")"
						}
						if pblnBackup 	xecute "merge ^CLEARBACKUP("""_idClass_""","_idCompany_")=^"_idClass_"("_idCompany_")"
						if pblnFix {
							for strIndexSuffix="","s","b","bi" {
								xecute "kill ^"_idClass_strIndexSuffix_"("_idCompany_")"
							}
						}
					}
				}
				
			} else {
				$$$Query("^"_idClass,strQuery)
					if $qsubscript(strQuery,intKey+1)'=0 {
						set strCommand = ""
						for intLoop=1:1:$qlength(strQuery) set strCommand = strCommand_","_$qsubscript(strQuery,intLoop)
						if pblnList {
							if pblnBackup 	write !,  "merge ^CLEARBACKUP("""_idClass_""""_strCommand_")="_strQuery
							write !,  "kill ^"_idClass_"("_$piece(strCommand,",",2,9999)_")"
						}
						if pblnBackup xecute "merge ^CLEARBACKUP("""_idClass_""""_strCommand_")="_strQuery
						if pblnFix {
							for strIndexSuffix="","s","b","bi" {
								xecute "kill ^"_idClass_strIndexSuffix_"("_$piece(strCommand,",",2,9999)_")"
							}
						}
					}
				$$$End
			}
		}
	}
	
	if (pblnBackup) {
		if pblnFix {
			write !,!,"Data that has been removed has been backed up to ^CLEARBACKUP"
		} else {
			write !,!,"Data that could be removed has been listed in ^CLEARBACKUP"
		}
	}
	quit	
	
	
IsAtNetClass(pstrGlobal)
	;-------------------------------------------------------------------------------
	; Used to determine if this data belongs to a company other than 0.
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 19-Dec-2006	RPW		SRBR014204: Peer Review, cleaned up the code a little for
	; 							ease of reading.
	; 19-Oct-2006	shobby	SRBR014204: Created
	;-------------------------------------------------------------------------------
	new blnResult,intLen,strChar
	
	set blnResult = $$$NO
	if pstrGlobal'="" {
		if $extract(pstrGlobal,1)="^" set pstrGlobal = $extract(pstrGlobal,2,99999)
		if $data(^WWW001(0,pstrGlobal)) {
			if $data(^WWW002(0,pstrGlobal)) {
				set blnResult = $$$YES
			}
		}
		if 'blnResult {
			set intLen  = $length(pstrGlobal)
			set strChar = $extract(pstrGlobal,intLen)
			if (strChar="s") || (strChar="b") {
				set blnResult = $$IsAtNetClass($extract(pstrGlobal,1,intLen-1))
			
			} elseif $extract(pstrGlobal,intLen-1,intLen)="bi" {
				set blnResult = $$IsAtNetClass($extract(pstrGlobal,1,intLen-2))
			}
		}
	}
	quit blnResult
	
	
Continue() private
    ;-------------------------------------------------------------------------------
    ; Loop through and make sure the user wants to do the copy.
    ; 
    ; Parmeters:
    ;  
	; History :
	; 05-May-2005	RobertW	Created SR12283
    ;-------------------------------------------------------------------------------
	new blnContinue,blnLoop,strAnswer,strChar
	
	set blnContinue = $$$NO
	set blnLoop     = $$$YES
		
	while blnLoop {
		read !,"Press C to continue, A to abort .. ? [A] ",strAnswer
		
		if strAnswer="" set strAnswer = "A"
		
		set strChar = $extract($$$UPPER(strAnswer))
		if strChar="C" {
			set blnContinue = $$$YES
			set blnLoop     = $$$NO
			
		} elseif strChar="A" {
			set blnContinue = $$$NO
			set blnLoop     = $$$NO
			write !!,"Aborting..."
			
		} else {
			write !,$char(9)_"Valid Options are C or A",!
		}
	}
	
	write !
	quit blnContinue
	
]]></Routine>
</Export>