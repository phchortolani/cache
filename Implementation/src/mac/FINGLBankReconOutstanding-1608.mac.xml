<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLBankReconOutstanding" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLBankReconOutstanding
    ;-------------------------------------------------------------------------------
    ; Screen to show a list of in clear bank trans and
    ; the number of exceptions waiting for review.
    ;-------------------------------------------------------------------------------
#include FINConst
#include COMSYS
#;define Add(%obj)		$select(%obj="":"""""",%obj=+%obj:%obj,1:""""_%obj_"""")
 
AfterDataFields()
    ;-------------------------------------------------------------------------------
    ; Display a grid of bank accounts and the number of uncleared transactions
    ;
    ; History:
	; 14-Oct-2009	GRF		SR15632: Macro replacement
    ; 09-Aug-2006	SC&JW/RPW	SR14686: Added "Last Reconciled" date column to grid
    ; 26-Jul-2006	JW		SR14880: Encapsulated account loop
    ; 02-Feb-2006	RPW		SR14103: Remvoed exceptions from loop.
    ; 02-Feb-2006	RPW		SR14103: Get all the reconciliation accounts and sum
    ; 							the transactions for them, cleared and uncleared.
    ; 01-Feb-2006	RPW		SR13710: Added 1E16 as the maximum no of nodes to return
    ; 27-Oct-2004	Paul K	Created
    ;-------------------------------------------------------------------------------
    new idBankAccount,objBankAccount,lstHeader,intTransactions,intExceptions
    new lstAccounts,idAccount,intLoop,idxLastPosted,dteLast,idBankRecon
	
	set lstHeader = ""
	set lstHeader = lstHeader_$listbuild($$$StrFINGLBankAccountNumber)
	set lstHeader = lstHeader_$listbuild($$$StrFINGLBankBankAccountNumber)
	set lstHeader = lstHeader_$listbuild($$$StrFINGLBankBankAccountName)
	set lstHeader = lstHeader_$listbuild($$$Text("Fin00401")) ; "Uncleared Transactions"
	set lstHeader = lstHeader_$listbuild($$$Text("Fin00399")) ; "Bank Lines"
	set lstHeader = lstHeader_$listbuild($$$Text("Fin01070")) ; "Last Reconciled"
	  
	do Start^COMTable(lstHeader)
	
	set idBankAccount=""
	for {
		set idBankAccount=$order(^FINGLBank(YM,idBankAccount))
		quit:idBankAccount=""
		
		set intTransactions = $$GetUncleared^FINGLBank(idBankAccount)
	;	set intExceptions   = $$GetNumNodes^COMUtils("^FINGLBankTran("_$$$Add(YM)_","_$$$Add(idBankAccount),1E16)  ; SR15632
		set intExceptions   = $$GetNumNodes^COMUtils("^FINGLBankTran(0,"_$$$AddQuotes(idBankAccount),1E16)
		set objBankAccount  = $get(^FINGLBank(0,idBankAccount,1))
		
		do NewLine^COMTable()
		do InsertCell^COMTable(idBankAccount,                                "FINGLBank",idBankAccount)
		do InsertCell^COMTable($$$FINGLBankBankAccountNumber(objBankAccount),"FINGLBank",idBankAccount)
		do InsertCell^COMTable($$$FINGLBankBankAccountName(objBankAccount),  "FINGLBank",idBankAccount)
		do InsertCell^COMTable(intTransactions,                              "FINGLBank",idBankAccount)
		do InsertCell^COMTable(intExceptions,                                "FINGLBank",idBankAccount)
		
		set idxLastPosted=$order(^FINGLBankRecons(0,2,$$$Index(idBankAccount),""),-1)
		if idxLastPosted {
			set idBankRecon = $order(^FINGLBankRecons(0,2,idBankAccount,idxLastPosted,""))
			set dteLast     = $$$FINGLBankReconReconcilingGLDate($get(^FINGLBankRecon(0,idBankRecon,1)))
			do InsertCellDate^COMTable(dteLast,"FINGLBankRecon",idBankRecon)
		
		} else {
			do InsertCell^COMTable("")
		}
		
		do EndLine^COMTable()
	}
	do Stop^COMTable()
	quit
]]></Routine>
</Export>