<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMCleanUp" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMCleanUp  ;   CleanUp/Remove old code, data, classes, @nm forms, menu etc.
#include COMSYS
	
	;-------------------------------------------------------------------------------
	; COMMONLY USED INPUTS
	; 	pstrName		Name of Routine, Class, Object, Form or Menu entry
	; 					also identified as pstrRoutine, pstrClass, pstrObject,
	; 					pstrForm and pstrMenu
	;	
	; 	pidLog			Log Number : Key for ^COMMsg record
	; 	
	; 	pblnVerbose		$$$YES if progress is to appear on screen (run from Terminal)
	; 					$$$NO is browser or background processing.
	;-------------------------------------------------------------------------------
 
	
Clean(pidLog="",pblnVerbose=$$$NO)
	;-------------------------------------------------------------------------------
	; Clean up code
	;
	; Returns: Nothing
	;
	; This function should be used as audit of code clean up.
	; Please add as much relevant detail as posible to log.
	;
	; History:
	; 13-Feb-2008	GRF		SR15613: doco; correction; separate removals so later
	; 							additions not mixed
	; 29-Nov-2007	SCR		SR15613: Remove 'Modify Quantity Unit' option
	; 26-Nov-2007	SCR		SR15613: Added Reindex Function
	; 20-Nov-2007	SCR		SR15613: Created..
	;-------------------------------------------------------------------------------
	do ^WWWVAR
	
	kill ^mtemp($job,"ReIndex")  ; used to log classed that need to be indexed
	
	if pidLog="" {  ; if No
		do StartLog^COMLog("Code Clean Up",.pidLog)
	}
	do AddMessage^COMLog(pidLog,$$$Text($listbuild("Com00306")))  ; "Code Clean up started"
	
	do RemoveList(pidLog,pblnVerbose)
	
	; ***** END PROCESSING
	
	do CleanSave(pidLog,pblnVerbose)
	do CleanMenu(pidLog,pblnVerbose)
	do AddMessage^COMLog(pidLog,$$$Text($listbuild("Com00307")))  ; "Code Clean up complete"
	do ReIndex(pidLog,pblnVerbose)		; Re-Index classes
	
	kill ^mtemp($job,"ReIndex")  ; used to log classes that need to be indexed
	
	quit
	
	;+++++++++++++++++++++++++++++++++++++++
	;
	; TODO :	INConst, etc generation?
	; 			existing Macros, references to routines in classes,
	; 			references to classes as relations
	;
	;+++++++++++++++++++++++++++++++++++++++
	
	
RemoveList(pidLog,pblnVerbose) PRIVATE
	;-------------------------------------------------------------------------------
	;
	;				*****  ADD ANY FURTHER ENTRIES TO THIS SECTION  *****
	;
	;	NOTE : For actual menu cleanup, use the format
	;				do Remove("Finance,02*","M",pidLog,pblnVerbose)
	;	       
	;	       This is distinct from the subroutine CleanMenu which removes
	;	       references to deleted entries.
	;-----
	;	NOTE : For V2 object cleanup, use the format
	;				do Remove("alXXX.dYYY","O",pidLog,pblnVerbose)
	;-----
	; Pre-checking routines are provided
	;	e.g. if intending to specify
	;				do Remove("INUL*","RCOF",pidLog,pblnVerbose)
	;	     from a terminal session first use the command 
	;				do Check^COMCleanUp("INUL*","RCOF")
	;-----
	;
	; TODO: 
	;    Remove all of INSERV?
	;
	;
	;
	; History:
	; 03-Mar-2011	shobby	SRBR014970: Included INWEINVELINEUT
	; 13-Feb-2008	GRF		SR15613: separate removals so later additions not mixed
	; 20-Nov-2007	SCR		SR15613: Created
	;-------------------------------------------------------------------------------
	do Remove("INARTEINHEIT","RCOF",pidLog,pblnVerbose)    ; Modify Quantity Unit
	
	do Remove("WWW000","RCOF",pidLog,pblnVerbose)          ; Routine Edit
	
	do Remove("INUL*","RCOF",pidLog,pblnVerbose)           ; United Logistics
	
	do Remove("INDAA*","RCOF",pidLog,pblnVerbose)          ; Fitness
	do Remove("INDAB*","RCOF",pidLog,pblnVerbose)
	do Remove("INDAC*","RCOF",pidLog,pblnVerbose)
	do Remove("INDAE*","RCOF",pidLog,pblnVerbose)          ; excludes r INDADRUCK, c INDAFIRM, o User.INDAFIRMR
	do Remove("INDAI*","RCOF",pidLog,pblnVerbose)
	do Remove("INDAK*","RCOF",pidLog,pblnVerbose)
	do Remove("INDAM*","RCOF",pidLog,pblnVerbose)
	do Remove("INDAN*","RCOF",pidLog,pblnVerbose)
	do Remove("INDAO*","RCOF",pidLog,pblnVerbose)
	do Remove("INDAP*","RCOF",pidLog,pblnVerbose)
	do Remove("INDARU*","RCOF",pidLog,pblnVerbose)         ; excludes r INDARTUtilities
	do Remove("INDAST*","RCOF",pidLog,pblnVerbose)         ; excludes c/f INDASHBOARDVORG, f INDASHBOARD
	do Remove("INDAT*","RCOF",pidLog,pblnVerbose)          ; excludes r INDAUERTAGE   ?????
	do Remove("INDAV*","RCOF",pidLog,pblnVerbose)
	do Remove("INDAW*","RCOF",pidLog,pblnVerbose)
	
	do Remove("ADR*","RCOF",pidLog,pblnVerbose)            ; Adrad take on classes
	
	do Remove("INGOE*","RCOF",pidLog,pblnVerbose)          ; GOE Code, used for a German Customer
	do Remove("INANGGOE*","RCOF",pidLog,pblnVerbose)
	
	do Remove("INKUECH*","RCOF",pidLog,pblnVerbose)        ; Food Processing
	
	;SR17599 Removing things related to INARTHIST and INARTHISTL
	do Remove("COMPIT14952"     ,"R"    ,pidLog,pblnVerbose)
	do Remove("COMPITBR014490"  ,"R"    ,pidLog,pblnVerbose)
	do Remove("DEVINTAGES"      ,"R"    ,pidLog,pblnVerbose)
	do Remove("INARTHIST"       ,"RCOF" ,pidLog,pblnVerbose)
	do Remove("INARTConsumption","RCOF" ,pidLog,pblnVerbose)
	do Remove("INARTEINHEIT"    ,"RCOF" ,pidLog,pblnVerbose)    ; Modify Quantity Unit
	do Remove("INARTHISTANZ"    ,"RF"   ,pidLog,pblnVerbose)    ; Modify Quantity Unit
	do Remove("INARTHISTL"      ,"RCOF" ,pidLog,pblnVerbose)
	do Remove("INARTHISTLANZ"   ,"RCOF" ,pidLog,pblnVerbose)
	do Remove("INARTHISTList"   ,"RCOF" ,pidLog,pblnVerbose)
	do Remove("INARTHISTLUT"    ,"R" ,pidLog,pblnVerbose)
	do Remove("INARTHISTLValidate"    ,"R" ,pidLog,pblnVerbose)
	do Remove("INARTHISTLValidateINADJ","R"    ,pidLog,pblnVerbose)
	do Remove("INARTHISTLValidateINRECReverse","R"    ,pidLog,pblnVerbose)
	do Remove("INARTHISTLValidateINTFR","R"    ,pidLog,pblnVerbose)
	do Remove("INARTHISTLValidateVARSESEntrada","R"    ,pidLog,pblnVerbose)
	do Remove("INARTHISTList","R"    ,pidLog,pblnVerbose)
	do Remove("PATCH00104200000001"   ,"R"    ,pidLog,pblnVerbose)
	do Remove("UTCINARTHISTL","R"   ,pidLog,pblnVerbose)
	do Remove("INPANDOJOB"   ,"R"   ,pidLog,pblnVerbose)
	do Remove("INSERV001"    ,"R"   ,pidLog,pblnVerbose)
	do Remove("INSERV029"    ,"R"   ,pidLog,pblnVerbose)
	do Remove("INSERV031"    ,"R"   ,pidLog,pblnVerbose)
	do Remove("INSERV033"    ,"R"   ,pidLog,pblnVerbose)
	do Remove("INSERV035"    ,"R"   ,pidLog,pblnVerbose)
	do Remove("INSERV044"    ,"R"   ,pidLog,pblnVerbose)
	do Remove("INSERV091"    ,"R"   ,pidLog,pblnVerbose)
	do Remove("INSERV167"    ,"R"   ,pidLog,pblnVerbose)
	do Remove("INStockMovement"   ,"R"    ,pidLog,pblnVerbose)
	do Remove("INStockMovementRec","R"    ,pidLog,pblnVerbose)
	do Remove("INStocktakingOtherTest"   ,"R"    ,pidLog,pblnVerbose)
	do Remove("INStocktakingUT"   ,"R"    ,pidLog,pblnVerbose)
	do Remove("INWEAUFDEL"   ,"R"    ,pidLog,pblnVerbose)

	;Forms
	do Remove("INWE2"   ,"FR"    ,pidLog,pblnVerbose)
	do Remove("INWE3"   ,"F"    ,pidLog,pblnVerbose)
	
	;BR014970
	do Remove("INWEINVCountUT","R",pidLog,pblnVerbose)
	do Remove("INDRPDEMANDValidate","R",pidLog,pblnVerbose)
	do Remove("INTFRValidate","R",pidLog,pblnVerbose)
	do Remove("TSCallTreeAnalysis","R",pidLog,pblnVerbose)
	do Remove("INADJUT","R",pidLog,pblnVerbose)
	do Remove("INLocking2","R",pidLog,pblnVerbose)
	
	do Remove("INWEINVELINEUT","R",pidLog,pblnVerbose)
		
	do Remove("WWWBUTTONOnClickCode","R",pidLog,pblnVerbose)
	do Remove("COMViewChooseSHOBBY","R",pidLog,pblnVerbose)
	do Remove("COMViewSetupJS2SHOBBY","R",pidLog,pblnVerbose)
	quit
	
	
Remove(pstrName,strTypes,pidLog,pblnVerbose)
	;-------------------------------------------------------------------------------
	; Remove items form the core.
	;
	; Inputs:
	; 	pstrName	Name of the item to remove, End "*" will remove all the items
	;				starting with the prefix.
	;				e.g. "INUL*" will remove all items starting with "INUL"
	;
	;				NOTE : "INUL*ABC" is equivalent to "INUL*" - trailing characters
	;				       are ignored
	;				
	; 	strTypes	Types of items to remove. 
	;					R = Routines (MAC,INT,OBJ)
	;					C = @NM Classes
	;					O = Cache Objects
	;					F = @NM Forms
	;					M = Menus
	;
	; Returns: Nothing
	;
	; History:
	; 18-Nov-2010	shobby	SR17616: Remove data.
	; 20-Nov-2007	SCR		SR15613: Created
	;-------------------------------------------------------------------------------
	if strTypes["R" do Routines(pstrName,pidLog,pblnVerbose)
	if strTypes["C" do Classes(pstrName,pidLog,pblnVerbose)
	if strTypes["O" do Objects(pstrName,pidLog,pblnVerbose)
	if strTypes["F" do Forms(pstrName,pidLog,pblnVerbose)
	if strTypes["M" do Menus(pstrName,pidLog,pblnVerbose)
	if strTypes["D" do Data(pstrName,pidLog,pblnVerbose)		;SR17616
			
	quit

	
Data(pstrName,pidLog,pblnVerbose) 
	;-------------------------------------------------------------------------------
	; Blowing away globals that match the pattern
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 19-Nov-2010	shobby		SR17616: Created
	;-------------------------------------------------------------------------------
	new arrGlobals,idGlobal,strExecute
	
	do Global^COMSYSGlobalQuery(.arrGlobals,pstrName,0)
	set idGlobal=""
	for {
		set idGlobal=$order(arrGlobals(idGlobal))
		quit:idGlobal=""
		
		set strExecute="kill "_idGlobal
		do AddMessage^COMLog(pidLog,$$$Text($listbuild("Com00334",idGlobal)))  ; "Removing Data %1"
		write:pblnVerbose !," Removing Data ",idGlobal
		xecute strExecute
	}
	quit
	
	
Routines(pstrName,pidLog,pblnVerbose)
	;-------------------------------------------------------------------------------
	; Remove Routines .MAC, .INT & .OBJ formats
	;
	; Inputs:
	; 	pstrName	Name of the item to remove, End "*" will remove all the items
	;				starting with the prefix.
	;
	; Returns: Nothing
	;
	; History:
	; 13-Feb-2008	GRF		SR15613: separation to simplify processing
	; 20-Nov-2007	SCR		SR15613: Created
	;-------------------------------------------------------------------------------
	new intLength,strBase,strRoutine
 
	quit:$extract(pstrName)="*"
	
	if pstrName["*" {
		set strBase    = $piece(pstrName,"*")              ; Multiple entries
		set intLength  = $length(strBase)
		set strRoutine = $order(^rOBJ(strBase),-1)
		for {
			set strRoutine = $order(^rOBJ(strRoutine))
			quit:strRoutine=""
			quit:$extract(strRoutine,1,intLength)'=strBase
			
			if $data(^rOBJ(strRoutine)) do DelRoutine(strRoutine,pidLog,pblnVerbose)
		}
		
	} else {
		if $data(^rOBJ(pstrName)) do DelRoutine(pstrName,pidLog,pblnVerbose)   ; single item
	} 
	quit
	
	
DelRoutine(pstrRoutine,pidLog,pblnVerbose) PRIVATE
	;-------------------------------------------------------------------------------
	; Delete a specific routine entry
	; 
	; Inputs:
	; 	pstrRoutine			Routine to be deleted
	; 	
	; History:
	; 13-Feb-2008	GRF		SR15613: separated to simplify processing
	;-------------------------------------------------------------------------------
	do DEL^%R(pstrRoutine_".*")
	do AddMessage^COMLog(pidLog,$$$Text($listbuild("Com00305",pstrRoutine)))  ; "Removing Routine %1"
	write:pblnVerbose !," Removing Routine ",pstrRoutine
	
	quit
	
	
Classes(pstrName,pidLog,pblnVerbose)
	;-------------------------------------------------------------------------------
	; Remove @NM Classes.
	;
	; Inputs:
	; 	pstrName	Name of the item to remove , End "*" will remove all the items
	; 				starting with the prefix.
	;
	; Returns: Nothing
	;
	; History:
	; 18-Nov-2010	shobby	SR17616: 003CalcLang
	; 13-Feb-2008	GRF		SR15613: separation to simplify processing
	; 20-Nov-2007	SCR		SR15613: Created
	;-------------------------------------------------------------------------------
	new intLength,loop,strBase,strGloList,strClass
	
	quit:$extract(pstrName)="*"
	
	set strGloList = "001,0011,002,0021,003,0031,001B,0022,0032,003Calc,003CalcLang"  ; List of Globals to delete for a @NM Class
	
	if pstrName["*" {
		set strBase   = $piece(pstrName,"*")                   ; Multiple entries
		set intLength = $length(strBase)
		set strClass  = $order(^WWW001(0,strBase),-1)
		for {
			set strClass = $order(^WWW001(0,strClass))
			quit:strClass=""
			quit:$extract(strClass,1,intLength)'=strBase
			
			do DelClass(strClass,strGloList,pidLog,pblnVerbose)
		}
		
	} else {
		do DelClass(pstrName,strGloList,pidLog,pblnVerbose)    ; single item
	} 
	quit
	
	
DelClass(pstrClass,pstrGloList,pidLog,pblnVerbose) PRIVATE
	;-------------------------------------------------------------------------------
	; Delete a specific Class entry
	; 
	; Inputs:
	; 	pstrClass			Class to be deleted
	; 	pstrGloList			Comma-delimited list of globals to be checked
	; 	
	; History:
	; 28-Jan-2009	GRF		Strip leading "^" to make class name
	; 13-Feb-2008	GRF		SR15613: separated to simplify processing
	;-------------------------------------------------------------------------------
	new loop,strGlo
	
	for loop=1:1:$length(pstrGloList,",") {
		set strGlo = "^WWW"_$piece(pstrGloList,",",loop)
		if $data(@strGlo@(0,pstrClass)) {
			kill @strGlo@(0,pstrClass)
		;	set ^mtemp($job,"ReIndex",strGlo)=""
			set ^mtemp($job,"ReIndex",$extract(strGlo,2,999))=""
			write:pblnVerbose !,"Removing ",pstrClass," ",strGlo
		}
	}
	do Routines("idx."_pstrClass,pidLog,pblnVerbose)
	do AddMessage^COMLog(pidLog,$$$Text($listbuild("Com00308",pstrClass)))  ; "Removing Class %1"
	
	quit
	
	
Objects(pstrName,pidLog,pblnVerbose)
	;-------------------------------------------------------------------------------
	; Remove Cache Objects
	;
	; Inputs:
	; 	pstrName	Name of the item to remove, End "*" will remove all the items
	; 				starting with a prefix.
	;
	; Returns: Nothing
	;
	; History:
	; 13-Feb-2008	GRF		SR15613: separation to simplify processing
	; 20-Nov-2007	SCR		SR15613: Created
	;-------------------------------------------------------------------------------
	new intLength,strBase,strObject
 
	quit:$extract(pstrName)="*"
	
	if pstrName'["." set pstrName="User."_pstrName	
	if pstrName["*" {
		set strBase   = $piece(pstrName,"*")              ; Multiple entries
		set intLength = $length(strBase)
		set strObject = $order(^oddDEF(strBase),-1)
		for {
			set strObject = $order(^oddDEF(strObject))
			quit:strObject=""
			quit:$extract(strObject,1,intLength)'=strBase
			
			if $data(^oddDEF(strObject)) do DelObject(strObject,pidLog,pblnVerbose)
		}
		
	} else {
		if $data(^oddDEF(pstrName)) do DelObject(pstrName,pidLog,pblnVerbose)   ; single item
	} 
	quit
	
	
DelObject(pstrObject,pidLog,pblnVerbose) PRIVATE
	;-------------------------------------------------------------------------------
	; Delete a specific object entry
	; 
	; Inputs:
	; 	pstrObject			Object to be deleted
	; 	
	; History:
	; 13-Feb-2008	GRF		SR15613: separated to simplify processing
	;-------------------------------------------------------------------------------
	do $SYSTEM.OBJ.Delete(pstrObject)
	write:pblnVerbose !," Removing Object ",pstrObject
	do AddMessage^COMLog(pidLog,$$$Text($listbuild("Com00309",pstrObject)))  ; "Removing Class %1"
	
	quit
	
	
Forms(pstrName,pidLog,pblnVerbose)
	;-------------------------------------------------------------------------------
	; Remove @NM Forms.
	;
	; Inputs:
	; 	pstrName	Name of the item to remove , End "*" will remove all the items
	; 				starting with a prefix.
	;
	; Returns: Nothing
	;
	; History:
	; 08-Sep-2011	shobby	SR17847: WWW120Hook, WWW120VARHook
	; 20-Feb-2008	GRF		SR15613: include Numerator classes
	; 13-Feb-2008	GRF		SR15613: separation to simplify processing
	; 20-Nov-2007	SCR		SR15613: Created
	;-------------------------------------------------------------------------------
	new intLength,strBase,strForm,strGloList
	
	quit:$extract(pstrName)="*"
	
	; List of Globals to delete for a @NM Form
	set strGloList = "120,1201,1203,121,1210,1211,122,1221,123,1231,1232,124,1251,127,128,1280,129,1291,131,132,133,"
	set strGloList = strGloList_"DRAGDROP,DRAGDROPD,120DynTable,001Hook,120Hook"
	set strGloList = strGloList_"002D,003D,1203D,120D,121D,121D1,122D,122D1,122D2,124D,001VARHooks,120VARHook"	 
 
	if pstrName["*" {
		set strBase   = $piece(pstrName,"*")                   ; Multiple entries
		set intLength = $length(strBase)
		set strForm   = $order(^WWW120(0,strBase),-1)
		for {
			set strForm = $order(^WWW120(0,strForm))
			quit:strForm=""
			quit:$extract(strForm,1,intLength)'=strBase
			
			do DelForm(strForm,strGloList,pidLog,pblnVerbose)
		}
		
	} else {
		do DelForm(pstrName,strGloList,pidLog,pblnVerbose)    ; single item
	} 
	quit
	
	
DelForm(pstrForm,pstrGloList,pidLog,pblnVerbose) PRIVATE
	;-------------------------------------------------------------------------------
	; Delete a specific menu entry
	; 
	; Inputs:
	; 	pstrForm			Form to be deleted
	; 	pstrGloList			Comma-delimited list of globals to be checked
	; 	
	; History:
	; 28-Jan-2009	GRF		Strip leading "^" to make class name
	; 13-Feb-2008	GRF		SR15613: separated to simplify processing
	;-------------------------------------------------------------------------------
	new loop,strGlo
	
	for loop=1:1:$length(pstrGloList,",") {
		set strGlo="^WWW"_$piece(pstrGloList,",",loop)
		if $data(@strGlo@(0,pstrForm)) {
			kill @strGlo@(0,pstrForm)
		;	set ^mtemp($job,"ReIndex",strGlo)=""
			set ^mtemp($job,"ReIndex",$extract(strGlo,2,999))=""
			write:pblnVerbose !,"Removing ",pstrForm," ",strGlo
		}
	}
	do AddMessage^COMLog(pidLog,$$$Text($listbuild("Com00310",pstrForm)))  ; "Removing Form %1"
	
	quit
	
	
Menus(pstrName,pidLog,pblnVerbose)
	;-------------------------------------------------------------------------------
	; Remove @NM Menus.
	;
	; Inputs:
	; 	pstrName	Name of the item to remove, "*" suffix will remove all the items
	; 				starting with the prefix.
	;				The Name is in 2 parts: Application & Menu Number, comma delimited.
	;				e.g. Finance,01.01
	;
	; Returns: Nothing
	;
	; History:
	; 13-Feb-2008	GRF		SR15613: separation to simplify processing
	; 20-Nov-2007	SCR		SR15613: Created
	;-------------------------------------------------------------------------------
	new intLength,strApplication,strBase,strGloList,strMenu
	new strItem,blnReindex
	
	set strApplication = $piece(pstrName,",",1)     quit:strApplication=""
	set pstrName       = $piece(pstrName,",",2,99)
 
	quit:$extract(pstrName)="*"
	
	if pstrName["*" {
		set strBase    = $piece(pstrName,"*")                   ; Multiple entries
		set intLength  = $length(strBase)
		set strMenu   = $order(^WWW004(0,strApplication,strBase),-1)
		for {
			set strMenu = $order(^WWW004(0,strApplication,strMenu))
			quit:strMenu=""
			quit:$extract(strMenu,1,intLength)'=strBase
			
			do DelMenu(strMenu,pidLog,pblnVerbose)
		}
		
	} else {
		do DelMenu(pstrName,pidLog,pblnVerbose)    ; single item
	} 
	quit
	
	
DelMenu(pstrApplication,pstrMenu,pidLog,pblnVerbose) PRIVATE
	;-------------------------------------------------------------------------------
	; Delete a specific menu entry
	; 
	; Inputs:
	; 	pstrApplication		Menu Entry to be deleted : Key 1 (WWW004)
	; 	pstrMenu			                           Key 2 
	; 	
	; History:
	; 13-Feb-2008	GRF		SR15613: separated to simplify processing
	;-------------------------------------------------------------------------------
	if $data(^WWW004(0,pstrApplication,pstrMenu)) {
		kill ^WWW004(0,pstrApplication,pstrMenu)
		set ^mtemp($job,"ReIndex","WWW004")=""
		write:pblnVerbose !,"Removing Menu",pstrApplication," ",pstrMenu
		do AddMessage^COMLog(pidLog,$$$Text($listbuild("Com00311",pstrApplication_" "_pstrMenu)))
	} ; "Removing Menu %1"
	
	quit
	
	
CleanSave(pidLog,pblnVerbose)
	;-------------------------------------------------------------------------------
	; Clean WWW001Save, WWW002Save, WWW003Save & WWW003CalcSave.
	;
	; Check the 'Save' globals for Classes that no longer exist
	;
	; History:
	; 21-Nov-2007	SCR	SR15613: Created
	;-------------------------------------------------------------------------------
	new strList,strGlo,intGlo,strClass,intIndex
	
	set strList="^WWW001Save,^WWW002Save,^WWW003Save,^WWW003CalcSave"
	
	for intGlo=1:1:$length(strList,",") {
		set strGlo=$piece(strList,",",intGlo)
		set strClass=""
		for {
			set strClass=$order(@strGlo@(0,strClass))
			quit:strClass=""
			
			if '$data(^WWW001(0,strClass)) {
				kill @strGlo@(0,strClass)
			}
		}
		set strClass=""
		for {
			set strClass=$order(@strGlo@(1,strClass))
			quit:strClass=""
			
			if '$data(^WWW001(0,strClass)) {
				kill @strGlo@(1,strClass)
			}
		}
	}
	quit
	
	
CleanMenu(pidLog,pblnVerbose)
	;-------------------------------------------------------------------------------
	; Clean Menu.
	;
	; - Check Menus that use a form
	; - if the form does not exist remove it and then reindex it
	;
	; History:
	; 21-Nov-2007	SCR	SR15613: Created
	;-------------------------------------------------------------------------------
	new blnReindex,strApp,strItem,strForm,strMenu
	
	set blnReindex = $$$YES
	set strApp = ""
	for {
		set strApp = $order(^WWW004(0,strApp))
		quit:strApp=""
		
		set strItem = ""
		for {
			set strItem = $order(^WWW004(0,strApp,strItem))
			quit:strItem=""
			
			set strMenu = $get(^WWW004(0,strApp,strItem,1))
			set strForm = $piece(strMenu,"~",2)
			if strForm'="" {
				if '$data(^WWW120(0,strForm)) {
					set blnReindex = $$$YES
					kill ^WWW004(0,strApp,strItem)
					write:pblnVerbose !,"Removing Menu ",strApp," ",strItem," ",$piece(strMenu,"~",1,2)
					do AddMessage^COMLog(pidLog,$$$Text($listbuild("Com00311",strItem)))
				} ; "Removing Menu %1"
			}
		}
	}
	
	if blnReindex {
			write:pblnVerbose !,"Adding WWW004 to ReIndex List"
			set ^mtemp($job,"ReIndex","WWW004")=""
	}
	quit
	
	
ReIndex(pidLog,pblnVerbose)
	;-------------------------------------------------------------------------------
	; Re-index those classes recognised as changing through ^mtemp record.
	;
	; History:
	; 26-Nov-2007	SCR	SR15613: Created
	;-------------------------------------------------------------------------------
	new strClass
	
	set strClass = ""
	for {
		set strClass = $order(^mtemp($job,"ReIndex",strClass))
		quit:strClass=""
		
		write:pblnVerbose !,"Indexing ",strClass
		do ReIndex^COMIndex(strClass,1,pidLog)  ; Re Index
	}
	quit
	
	
Check(pstrName="",pstrTypes="")
	;-------------------------------------------------------------------------------
	;	Show what routines are going to be removed by a particular command
	;	
	;	e.g. if intending to specify
	;	         do Remove("INUL*","RCOF",pidLog,pblnVerbose)
	;	     from the command prompt first use the command
	;	         do Check^COMCleanUp("INUL*")
	;
	; History:
	; 13-Feb-2008	GRF		SR15613: Created
	;-------------------------------------------------------------------------------
	if pstrTypes["R" {
		write !!,"Routines"
		do CheckRtn^COMCleanUp(pstrName)
	}
	if pstrTypes["C" {
		write !!,"Classes"
		do CheckCls^COMCleanUp(pstrName)
	}
	if pstrTypes["O" {
		write !!,"Objects"
		do CheckObj^COMCleanUp(pstrName)
	}
	if pstrTypes["F" {
		write !!,"Forms"
		do CheckFrm^COMCleanUp(pstrName)
	}
	write !!
	quit
	
	
CheckRtn(pstrName,pstrIndent="")
	;-------------------------------------------------------------------------------
	;	Show what routines are going to be removed by a particular command
	;
	; Inputs:
	;	pstrIndent		sub-level for idx routines associated with classes
	;	
	; History:
	; 13-Feb-2008	GRF		SR15613: Created
	;-------------------------------------------------------------------------------
	new intLength,strBase,strRoutine
 
	quit:$extract(pstrName)="*"
	
	if pstrName["*" {
		set strBase    = $piece(pstrName,"*")
		set intLength  = $length(strBase)
		set strRoutine = $order(^rOBJ(strBase),-1)
		for {
			set strRoutine = $order(^rOBJ(strRoutine))
			quit:strRoutine=""
			quit:$extract(strRoutine,1,intLength)'=strBase
			
			if $data(^rOBJ(strRoutine)) write !,pstrIndent,strRoutine
		}
		
	} else {
		if $data(^rOBJ(pstrName)) write !,pstrIndent,pstrName
	}
	quit
	
	
CheckCls(pstrName)
	;-------------------------------------------------------------------------------
	;	Show what classes are going to be removed by a particular command
	;	
	; History:
	; 13-Feb-2008	GRF		SR15613: Created
	;-------------------------------------------------------------------------------
	new intLength,strBase,strClass
	
	quit:$extract(pstrName)="*"
	
	if pstrName["*" {
		set strBase   = $piece(pstrName,"*")
		set intLength = $length(strBase)
		set strClass  = $order(^WWW001(0,strBase),-1)
		for {
			set strClass = $order(^WWW001(0,strClass))
			quit:strClass=""
			quit:$extract(strClass,1,intLength)'=strBase
			
			write !,strClass
			do CheckRtn("idx."_strClass,$$$TAB)
		}
		
	} else {
		write !,pstrName
		do CheckRtn("idx."_pstrName,$$$TAB)
	}
	quit
	
	
CheckObj(pstrName)
	;-------------------------------------------------------------------------------
	;	Show what objects are going to be removed by a particular command
	;
	; History:
	; 13-Feb-2008	GRF		SR15613: Created
	;-------------------------------------------------------------------------------
	new intLength,strBase,strObject
	
	quit:$extract(pstrName)="*"
	
	if pstrName'["." set pstrName="User."_pstrName	
	if pstrName["*" {
		set strBase   = $piece(pstrName,"*")
		set intLength = $length(strBase)
		set strObject = $order(^oddDEF(strBase),-1)
		for {
			set strObject = $order(^oddDEF(strObject))
			quit:strObject=""
			quit:$extract(strObject,1,intLength)'=strBase
			
			if $data(^oddDEF(strObject)) write !,strObject
		}
		
	} else {
		if $data(^oddDEF(pstrName)) write !,pstrName
	} 
	quit
	
	
CheckFrm(pstrName)
	;-------------------------------------------------------------------------------
	;	Show what forms are going to be removed by a particular command
	;
	; History:
	; 13-Feb-2008	GRF		SR15613: Created
	;-------------------------------------------------------------------------------
	new intLength,strBase,strForm
	
	quit:$extract(pstrName)="*"
	
	if pstrName["*" {
		set strBase   = $piece(pstrName,"*")
		set intLength = $length(strBase)
		set strForm   = $order(^WWW120(0,strBase),-1)
		for {
			set strForm = $order(^WWW120(0,strForm))
			quit:strForm=""
			quit:$extract(strForm,1,intLength)'=strBase
			
			write !,strForm
		}
		
	} else {
		write !,pstrName
	} 
	quit
	
]]></Routine>
</Export>