<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARAtaLinhaPreco" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARAtaLinhaPreco
#include COMSYS
#include VARConst

OnBeforeSave(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
    ; Chamado por:
    ;	Campo OnBeforeSave do form VARAtaLinhaPreco
    ; 
    ; Histórico:
    ; 	17-May-2012	Gustavo Fiuza	Criado
	;-------------------------------------------------------------------------------    
	new strStatus
	
	set strStatus = $$$OK	
	set strStatus = $$GeraPrecoInicial(pYKEY,pYFELD)
	
	if $$$ISERR(strStatus) {		
		set Q=$$$QDontSave
		do ReturnError^COMUtilError(strStatus)
	}
	
	quit
	
	
OnAfterDataFields(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
    ; Chamado por:
    ;	Campo OnAfterDataFields do form VARAtaLinhaPreco
    ; 
    ; Histórico:
    ; 	17-May-2012	Gustavo Fiuza	Criado
    ;-------------------------------------------------------------------------------	
	new idAta, idLinha, idPreco
	
	set idAta   = $$$KEY1(pYKEY)
	set idLinha = $$$KEY2(pYKEY)
	set idPreco = $$$KEY3(pYKEY)
	
	if (idAta = "") {
		set idAta = $get(^CacheTempRenegociarPreco(YBED))	
	}	
	quit:(idAta = "")
		
	if ( (idLinha = "") && ( (idPreco = "") || (idPreco = "+") ) ) {
		do PrintTableItemAta(idAta) 	
	
	} else {
		do PrintTableHistoricoPrecoAta(idAta,idLinha)
	}	
	
	quit
	
GeraPrecoInicial(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Gera o preço inicial (ou preço base) na tabela de preços do item da ata, caso
    ;	este não exista ainda. A chave do registro do preço inicial é igual a 0.
    ;
    ; Chamado por:
    ;	Método OnBeforeSave da rotina VARAtaLinhaPreco.mac
    ; 
    ; Histórico:
    ; 	17-May-2012	Gustavo Fiuza	Criado
    ;-------------------------------------------------------------------------------	
	new strStatus, idAta, idLinha, fltPrecoInicial, objPrecoInicial, keyPrecoInicial,
		idPrecoInicial
	
	set strStatus = $$$OK
	
	set idAta   = $$$KEY1(pYKEY)
	set idLinha = $$$KEY2(pYKEY)
	
	;0 é o ID do preço inicial
	set idPrecoInicial = 0
	
	quit:( (idAta = "") || (idLinha = "") ) "Favor selecionar a ata e o item da ata"	
	
	;Vai embora caso já tenha o registro de preço inicial na tabela
	quit:( $data(^VARAtaLinhaPreco(YM,idAta,idLinha,idPrecoInicial)) ) $$$OK
	
	set fltPrecoInicial = $$GetPrecoUnitario^VARAtaLinha(idAta,idLinha)
	quit:( fltPrecoInicial = "") "Item sem preço de inicial"
	
	set objPrecoInicial = "NA"_Y_fltPrecoInicial
	set keyPrecoInicial = idAta_$$$COMMA_idLinha_$$$COMMA_idPrecoInicial
	
	set strStatus = $$$Save("VARAtaLinhaPreco",keyPrecoInicial,objPrecoInicial,$$$YES)		
	
	quit strStatus
	
PrintTableItemAta(pidAta)
	;-------------------------------------------------------------------------------
    ; Chamado por:
    ;	Método OnAfterDataFields da rotina VARAtaLinhaPreco.mac
    ; 
    ; Histórico:
    ;	18-Jul-2012	Gustavo Fiuza	Incluída coluna de situação do item
    ; 	17-May-2012	Gustavo Fiuza	Criado
	;-------------------------------------------------------------------------------    
	quit:(pidAta = "")
	
	new lstHeader, idLinha, objLinha, idProduto, idFornecedor, chave, quantAlteracoesItem,
		strSituacaoItem, idSituacao, descSituacao

	//Monta cabeçalho da tabela
 	set lstHeader = ""
  	;set lstHeader = lstHeader_$listbuild("Item","Produto","Fornecedor","Qtde. Alterações")
  	set lstHeader = lstHeader_$listbuild("Item","Produto","Qtde. Alterações","Situação do Item")
    			    							 	
  	if $$Start^COMTable(lstHeader,"Selecione um dos itens da ata que deseja renegociar o preço",,,$$$NO) {
	  	
	  	$$$Order3(^VARAtaLinha,YM,pidAta,idLinha)
	  	
	  		set objLinha = $get(^VARAtaLinha(YM,pidAta,idLinha,1))
	  		
	  		set idProduto 	 = $$$VARAtaLinhaProduto(objLinha)
	  		set idFornecedor = $$$VARAtaLinhaFornecedor(objLinha)	  		
	  		
	  		set quantAlteracoesItem = $$GetQuantAlteracoesItemAta(pidAta,idLinha)
	  		
    		set strSituacaoItem = $$GetSituacaoItem^VARAtaLinha(idAta,idLinha)
    		
    		set idSituacao 	 = $piece(strSituacaoItem,Y,1)
            set descSituacao = $piece(strSituacaoItem,Y,2)  
	  	
	  		set chave = pidAta_$$$COMMA_idLinha
	  	
	  		do NewLine^COMTable()
	  		do InsertCell^COMTable(idLinha,"VARAtaLinhaPreco",chave)
	  		do InsertCell^COMTable(idProduto_" - "_$$SQLGetDescricaoProduto^VARSQL(idProduto),"VARAtaLinhaPreco",chave)
	  		;do InsertCell^COMTable(idFornecedor_" - "_$$SQLGetDescFornecedor^VARSQL(idFornecedor),"VARAtaLinhaPreco",chave)
	  		
	  		if (quantAlteracoesItem > 0) {
	  			do InsertCell^COMTable("<strong>"_quantAlteracoesItem_"</strong>","VARAtaLinhaPreco",chave,,"right")
	  		} else {
	  			do InsertCell^COMTable(quantAlteracoesItem,"VARAtaLinhaPreco",chave,,"right")
	  		}
	  		
	  		do InsertCell^COMTable(descSituacao)
	  		do EndLine^COMTable()
	  	
	  	$$$End

 		do Stop^COMTable()
  	}	
	
	quit
	
PrintTableHistoricoPrecoAta(pidAta,pidLinha="")
	;-------------------------------------------------------------------------------
    ; Chamado por:
    ;	Método OnAfterDataFields da rotina VARAtaLinhaPreco.mac
    ; 
    ; Histórico:
    ; 	17-May-2012	Gustavo Fiuza	Criado
	;-------------------------------------------------------------------------------
	quit:(pidAta = "")
	
	new lstHeader, idLinhaAta

	//Monta cabeçalho da tabela
 	set lstHeader = ""
  	set lstHeader = lstHeader_$listbuild("Alteração","Preço Inicial","Novo Preço","Data","Alteração aplicada")       

 	if $$Start^COMTable(lstHeader,"Histórico de Alterações de Preço na Ata",,,$$$NO) {

		if (pidLinha '= "") {		
			do PrintHistoricoPrecoItem(pidAta,pidLinha)		
		
		} else {
			
			$$$Order3(^VARAtaLinhaPreco,YM,pidAta,idLinhaAta)
				do PrintHistoricoPrecoItem(pidAta,idLinhaAta)
			$$$End	
			
		}

 		do Stop^COMTable()
 	}
	
	quit
	
PrintHistoricoPrecoItem(pidAta,pidLinha)
	quit:( (pidAta = "") || (pidLinha = "") )
	
	new idProduto, count, idPreco, objPreco, fltPrecoAnterior, fltNovoPreco, dteCriadoEm,
		blnAplicada, chave, chaveLinha
		
	set idProduto = $$GetProduto^VARAtaLinha(pidAta,pidLinha)
	
	set chaveLinha = pidAta_$$$COMMA_pidLinha
	
	do NewLine^COMTable("lightsteelblue")
	do InsertCell^COMTable("<strong>Produto</strong>")
	do InsertCell^COMTable(""_idProduto_" - "_$$SQLGetDescricaoProduto^VARSQL(idProduto),"VARAtaLinhaPreco",chaveLinha,,,,4)
	do EndLine^COMTable()
	
	set count = 0
	
	$$$Order4(^VARAtaLinhaPreco,YM,pidAta,pidLinha,idPreco)

	  	;Desconsidera o preço inicial na contagem de alterações
	  	if (idPreco '= 0) {
	  		set count = $increment(count)
	  	}

		set objPreco = $get(^VARAtaLinhaPreco(YM,pidAta,pidLinha,idPreco,1))
		continue:(objPreco = "")
	  	
	  	set fltPrecoAnterior = $$$VARAtaLinhaPrecoValorUnitarioAnterior(objPreco)
	  	set fltNovoPreco	 = $$$VARAtaLinhaPrecoNovoValorUnitario(objPreco)
	  	set dteCriadoEm		 = $$$VARAtaLinhaPrecoCriadoem(objPreco)
	  	set blnAplicada		 = $$$VARAtaLinhaPrecoAlteracaoaplicada(objPreco)
	  		  	
	  	set chave = pidAta_$$$COMMA_pidLinha_$$$COMMA_idPreco
	  	
	  	if (blnAplicada = 1) {
			set strAplicada = "<font color='blue'>Sim</font>"
	  	} else {
			set strAplicada = "<font color='red'>Não</font>"	
	  	}
	  	
	  	do NewLine^COMTable()
	  		
	  	;0=Preço inicial
	  	if (idPreco = "0") {
	  		do InsertCell^COMTable("")
	  		do InsertCurrencyCell^COMTable(fltNovoPreco)
	  		do InsertCell^COMTable("-",,,,"center")
	  		do InsertCell^COMTable($zdate(dteCriadoEm,4),"VARAtaLinhaPreco",chave,,"right")	  			
	  		do InsertCell^COMTable("-",,,,"center")
	  	
	  	} else {
	  		do InsertCell^COMTable(count,"VARAtaLinhaPreco",chave)
	  		do InsertCell^COMTable("-",,,,"center")	
	  		do InsertCurrencyCell^COMTable(fltNovoPreco)
			do InsertCell^COMTable($zdate(dteCriadoEm,4),"VARAtaLinhaPreco",chave,,"right")	
	  		do InsertCell^COMTable(strAplicada,"VARAtaLinhaPreco",chave,,"center")	  			
	  	}
	  	
	  	do EndLine^COMTable()  	
	  	
	$$$End
	
	if (count = 0) && ( '$data(^VARAtaLinhaPreco(YM,pidAta,pidLinha)) ) {
		do NewLine^COMTable("white")
		do InsertCell^COMTable("Nenhuma alteração de preço registrada para este item.",,,,,,5)
		do EndLine^COMTable() 	
	}
	
	do NewLine^COMTable("lightgoldenrodyellow")
	do InsertCell^COMTable("",,,,,,5,1)
	do EndLine^COMTable()
	
	

	quit
	
	
GetQuantAlteracoesItemAta(pidAta,pidLinha)
	;-------------------------------------------------------------------------------
	; Descrição:
	;	Retorna a quantidade de alterações de preço em um item da ata.
	;
    ; Chamado por:
    ;	Método PrintTableItemAta da rotina VARAtaLinhaPreco.mac
    ; 
    ; Histórico:
    ; 	17-May-2012	Gustavo Fiuza	Criado
	;-------------------------------------------------------------------------------	
	quit:( (pidAta = "") || (pidLinha = "") ) 0
		
	;Vai embora caso não tenha nenhum registro de alteração de preço
	quit:( '$data(^VARAtaLinhaPreco(YM,idAta,idLinha)) ) 0
	
	new idPreco, count
	
	set count = 0
	
	$$$Order4(^VARAtaLinhaPreco,YM,pidAta,pidLinha,idPreco)		
		;Ignora o registro de preço inicial
		continue:(idPreco = 0)
		
		set count = $increment(count)
	$$$End
		
	quit count

CanAplicarAlteracao(pYKEY)
	;-------------------------------------------------------------------------------
    ; Verifica se a alteração de preço pode ser feita.
    ;
    ; History:
    ; 17-May-2012	Gustavo Fiuza	Created
    ;-------------------------------------------------------------------------------
	new idAta, idLinha, idPreco, objAlteracao, idUltimaAlteracao, idAlteracaoAnterior,
		objAlteracaoAnterior
	
	set idAta   = $$$KEY1(pYKEY)
	set idLinha = $$$KEY2(pYKEY)
	set idPreco = $$$KEY3(pYKEY)
	
	if ( (idAta = "") || (idLinha = "") || (idPreco = "") || (idPreco = "+") ) {	
		set YQ = $$$YQDisable("É preciso selecionar uma alteração de preço.")
		quit	
	}
	
	set objAlteracao = $get(^VARAtaLinhaPreco(YM,idAta,idLinha,idPreco,1))

	;Verifica se a alteração já foi aplicada	
	if ( $$$VARAtaLinhaPrecoAlteracaoaplicada(objAlteracao) = 1 ) {
		set YQ = $$$YQDisable("A alteração já foi aplicada.")
		quit
	}
	
	;Verifica se esta é a última alteração
	set idUltimaAlteracao = ""
	set idUltimaAlteracao = $order(^VARAtaLinhaPreco(YM,idAta,idLinha,idUltimaAlteracao),-1)
	
	if (idUltimaAlteracao '= idPreco) {
		set YQ = $$$YQDisable("Não é possível aplicar essa alteração pois existem alterações subsequentes que precisam ser desfeitas antes.")
		quit			
	}
	
	;Verifica se existem alterações antecedentes que ainda não foram aplicadas
	for idAlteracaoAnterior = 1:1:(idUltimaAlteracao-1) {
		quit:(idAlteracaoAnterior = "")
	
		if $data(^VARAtaLinhaPreco(YM,idAta,idLinha,idAlteracaoAnterior)) {			
			set objAlteracaoAnterior = $get(^VARAtaLinhaPreco(YM,idAta,idLinha,idAlteracaoAnterior,1))			
			if ($$$VARAtaLinhaPrecoAlteracaoaplicada(objAlteracaoAnterior) '= $$$YES) {
				set YQ = $$$YQDisable("Não é possível aplicar essa alteração pois existem alterações anteriores que precisam ser aplicadas. É necessário deletar esta e tratar a anterior que ainda não foi aplicada.")
				quit	
			}
		}
	}

	quit
	
CanDesfazerAlteracao(pYKEY)
	;-------------------------------------------------------------------------------
    ; Verifica se a alteração de preço pode ser desfeita.
    ;
    ; History:
    ; 17-May-2012	Gustavo Fiuza	Created
    ;-------------------------------------------------------------------------------		
	new idAta, idLinha, idPreco, objAlteracao, idUltimaAlteracao
	
	set idAta   = $$$KEY1(pYKEY)
	set idLinha = $$$KEY2(pYKEY)
	set idPreco = $$$KEY3(pYKEY)
	
	if ( (idAta = "") || (idLinha = "") || (idPreco = "") || (idPreco = "+") ) {	
		set YQ = $$$YQDisable("É preciso selecionar uma alteração de preço.")
		quit	
	}
	
	set objAlteracao = $get(^VARAtaLinhaPreco(YM,idAta,idLinha,idPreco,1))
	
	if ( $$$VARAtaLinhaPrecoAlteracaoaplicada(objAlteracao) '= 1 ) {
		set YQ = $$$YQDisable("A alteração não está aplicada, portanto não é possível desfazê-la.")
		quit
	}
	
	set idUltimaAlteracao = ""
	set idUltimaAlteracao = $order(^VARAtaLinhaPreco(YM,idAta,idLinha,idUltimaAlteracao),-1)
	
	if (idUltimaAlteracao '= idPreco) {
		set YQ = $$$YQDisable("Não é possível desfazer essa alteração pois existem alterações subsequentes que precisam ser desfeitas antes.")
		quit			
	}

	quit
	
AplicarAlteracao(pYKEY)
	;-------------------------------------------------------------------------------
    ; Aplica a alteração de preço para o item da ata.
    ;
    ; History:
    ; 17-May-2012	Gustavo Fiuza	Created
    ;-------------------------------------------------------------------------------	
	quit:(pYKEY = "")
	
	new idAta, idLinha, idPreco, strStatus, objPreco
	set strStatus = $$$OK
	
	set idAta   = $$$KEY1(pYKEY)
	set idLinha = $$$KEY2(pYKEY)
	set idPreco = $$$KEY3(pYKEY)
	
	quit:($$$NoKey(idPreco))
	
	set objPreco = $get(^VARAtaLinhaPreco(YM,idAta,idLinha,idPreco,1))
	
	if ($$$VARAtaLinhaPrecoAlteracaoaplicada(objPreco) '= 1) {
		
		set strStatus = $$AtualizaPrecoNaAta(idAta,idLinha,idPreco)		
		
		if $$$ISOK(strStatus) {		
			set $$$VARAtaLinhaPrecoAlteracaoaplicada(objPreco) = 1		
			set strStatus = $$$Save("VARAtaLinhaPreco",pYKEY,objPreco,$$$YES)
		}
	
		if $$$ISERR(strStatus) { 
			$$$StartScript()
			w "alert('Não foi possível aplicar a alteração. "_strStatus_" Favor verificar.');"
			$$$EndScript()
		}
		
		do GoToForm^COMUtilForm("VARAtaLinhaPreco",pYKEY)
	}
		
	quit

DesfazerAlteracao(pYKEY)
	;-------------------------------------------------------------------------------
    ; Desfaz a alteração de preço para o item da ata.
    ;
    ; History:
    ; 17-May-2012	Gustavo Fiuza	Created
    ;-------------------------------------------------------------------------------	
	quit:(pYKEY = "")
	
	new idAta, idLinha, idPreco, strStatus, objPreco
	set strStatus = $$$OK
	
	set idAta   = $$$KEY1(pYKEY)
	set idLinha = $$$KEY2(pYKEY)
	set idPreco = $$$KEY3(pYKEY)
	
	quit:($$$NoKey(idPreco))
	
	set objPreco = $get(^VARAtaLinhaPreco(YM,idAta,idLinha,idPreco,1))
	
	if ($$$VARAtaLinhaPrecoAlteracaoaplicada(objPreco) = 1) {
	
		set strStatus = $$RevertePrecoNaAta(idAta,idLinha,idPreco)
	
		if $$$ISOK(strStatus) {
			set $$$VARAtaLinhaPrecoAlteracaoaplicada(objPreco) = ""
			set strStatus = $$$Save("VARAtaLinhaPreco",pYKEY,objPreco,$$$YES)
		}
	
		if $$$ISERR(strStatus) { 
			$$$StartScript()
			w "alert('Não foi possível desfazer a alteração. Favor verificar.');"
			$$$EndScript()
		}	
		
		do GoToForm^COMUtilForm("VARAtaLinhaPreco",pYKEY)
	}
		
	quit

AtualizaPrecoNaAta(pidAta,pidLinha,pidPreco)
	;-------------------------------------------------------------------------------
    ; Valida e aplica o novo preço unitário do item na ata na classe VARAtaLinha.
    ;
    ; History:
    ; 17-May-2012	Gustavo Fiuza	Created
    ;-------------------------------------------------------------------------------	
	quit:( (pidAta = "") || (pidLinha = "") || (pidPreco = "") ) "Alteração de preço não identificada."

	new strStatus, objPreco, valorAnterior, valorNovo, objAtaLinha, keyLinha, idUltimaAlteracao

	set strStatus = $$$OK

	set objPreco  = $get(^VARAtaLinhaPreco(YM,pidAta,pidLinha,pidPreco,1))
	quit:(objPreco = "") "Objeto de alteração de preço inexistente."
	
	set valorAnterior = $$$VARAtaLinhaPrecoValorUnitarioAnterior(objPreco)
	set valorNovo     = $$$VARAtaLinhaPrecoNovoValorUnitario(objPreco)
	
	;Confirmando se é possível aplicar a alteração
	if (valorNovo = "") {
		set strStatus = "Nenhum novo preço definido."
	
	} elseif (valorAnterior = valorNovo) {
		set strStatus = "O novo valor unitário é igual ao valor anterior."
	
	} elseif (valorNovo <= 0) {
		set strStatus = "O novo valor unitário não pode ser menor ou igual a zero."	
	
	} elseif (valorNovo > valorAnterior) {
		set strStatus = "O novo valor unitário não pode ser maior que o valor anterior."
	
	}
	
	set idUltimaAlteracao = ""
	set idUltimaAlteracao = $order(^VARAtaLinhaPreco(YM,pidAta,pidLinha,idUltimaAlteracao),-1)
	
	if (idUltimaAlteracao '= pidPreco) {
		set strStatus = "Não é possível desfazer essa alteração pois existem alterações subsequentes que precisam ser desfeitas antes."			
	}
		
	;Aplicando a alteração (salvando o novo valor unitário do item na ata)
	if $$$ISOK(strStatus) {		
		
		set keyLinha = pidAta_$$$COMMA_pidLinha
		set objAtaLinha = $get(^VARAtaLinha(YM,pidAta,pidLinha,1))		
		
		set $$$VARAtaLinhaValorUnitario(objAtaLinha) = valorNovo
		
		set strStatus = $$$Save("VARAtaLinha",keyLinha,objAtaLinha,$$$YES)
	}
	
	quit strStatus

RevertePrecoNaAta(pidAta,pidLinha,pidPreco)
	;-------------------------------------------------------------------------------
    ; Valida e reverte do novo preço unitário do item para o anterior na ata na 
    ; classe VARAtaLinha.
    ;
    ; History:
    ; 17-May-2012	Gustavo Fiuza	Created
    ;-------------------------------------------------------------------------------	
	quit:( (pidAta = "") || (pidLinha = "") || (pidPreco = "") ) "Alteração de preço não identificada."

	new strStatus, objPreco, valorAnterior, valorNovo, objAtaLinha, keyLinha, idUltimaAlteracao

	set strStatus = $$$OK
	set objPreco  = $get(^VARAtaLinhaPreco(YM,pidAta,pidLinha,pidPreco,1))
	quit:(objPreco = "") "Objeto de alteração de preço inexistente."
	
	set valorAnterior = $$$VARAtaLinhaPrecoValorUnitarioAnterior(objPreco)
	set valorNovo     = $$$VARAtaLinhaPrecoNovoValorUnitario(objPreco)
	
	;Confirmando se é possível desfazer a alteração
	if (valorAnterior = "") {
		set strStatus = "Nenhum preço anterior definido."	
	}
	
	set idUltimaAlteracao = ""
	set idUltimaAlteracao = $order(^VARAtaLinhaPreco(YM,pidAta,pidLinha,idUltimaAlteracao),-1)
	
	if (idUltimaAlteracao '= pidPreco) {
		set strStatus = "Não é possível desfazer essa alteração pois existem alterações subsequentes que precisam ser desfeitas antes."			
	}
		
	;Restaurando o valor anterior no item da ata
	if $$$ISOK(strStatus) {		
		
		set keyLinha = pidAta_$$$COMMA_pidLinha
		set objAtaLinha = $get(^VARAtaLinha(YM,pidAta,pidLinha,1))		
		
		set $$$VARAtaLinhaValorUnitario(objAtaLinha) = valorAnterior
		
		set strStatus = $$$Save("VARAtaLinha",keyLinha,objAtaLinha,$$$YES)
	}
	
	quit strStatus
	
isAlgumPrecoAtaAlterado(pidAta)
	;-------------------------------------------------------------------------------
    ; Retorna (booleano) se algum item da ata sofreu pelo menos uma alteração de preço.
    ;
    ; History:
    ; 17-May-2012	Gustavo Fiuza	Created
    ;-------------------------------------------------------------------------------	
	quit:(pidAta = "") "Favor informar a ata"
	quit:( $data(^VARAtaLinhaPrecos(YM,1,1,pidAta)) ) $$$YES	
	quit $$$NO
	

GetListaPrecosItemAta(pidAta,pidLinha)	
	;-------------------------------------------------------------------------------
    ; Retorna o(s) possíveis preço(s) do item na ata em uma string separada por ';'.
    ; Primeiro verifica na VARAtaLinhaPreco, e caso não haja nenhum registro, pega 
    ; normalmente da VARAtaLinha.
    ;
    ; History:
    ; 21-May-2012	Gustavo Fiuza	Created
    ;-------------------------------------------------------------------------------	
	quit:( (pidAta = "") || (pidLinha = "") ) "Favor informar a ata e a linha da ata."
	
	new idPreco, listaPrecos	
	set listaPrecos = ""
	
	if $data(^VARAtaLinhaPreco(YM,pidAta,pidLinha)) {
	
		$$$Order4(^VARAtaLinhaPreco,YM,pidAta,pidLinha,idPreco)			
			set objPreco = $get(^VARAtaLinhaPreco(YM,pidAta,pidLinha,idPreco,1))
			continue:(objPreco = "")
		
			;Somente alterações de preço aplicadas e com ID diferente de 0 (preço inicial)
			if ( ($$$VARAtaLinhaPrecoAlteracaoaplicada(objPreco) '= 1) && (idPreco '= 0) ) {
				continue
			}
		
			set listaPrecos = listaPrecos_";"_$$$VARAtaLinhaPrecoNovoValorUnitario(objPreco)	
		$$$End
	}
	
	;Caso não tenha encontrado nenhum preço renegociado, pega o preço normal da ata
	else {
		set listaPrecos = ";"_$$GetPrecoUnitario^VARAtaLinha(pidAta,pidLinha)
	}

	quit listaPrecos_";"
]]></Routine>
</Export>