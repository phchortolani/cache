<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWW120DynTable" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[WWW120DynTable
	
#include WWWConst
#include COMSYS
#include COMConst
	
#define Alignment	1
#define Type		2
#define Color		3
#define DELIM		"^"
	
OnBeforeSave(YKEY,YFELD)
	;-------------------------------------------------------------------------------
	; Called when saving form         (Page equates to tab)
	; 
	; History:
	; 20-Apr-2011	GRF		SR17715: Partial bug fix to avoid subscript error. New
	;							SR created to clarift rules and adjust code if it is
	;							now possible to have multiple tables on same tab.
	;-------------------------------------------------------------------------------
	new idDynTab,idForm,intPage,strStatus
	
	set idForm    = $$$KEY1(YKEY)
	set idDynTab  = $$$KEY2(YKEY)                  ; SR17715
	set strStatus = $$$OK
	set intPage   = $$$WWW120DynTablePages1(YFELD)
	
	; FIXME : This rule may no longer apply - see SR17739
	
	;if $order(^WWW120DynTables(0,2,$$$Index(idForm),intPage,idForm,intPage))'="" {  ; SR17715
	if $order(^WWW120DynTables(0,2,$$$Index(idForm),$$$Index(intPage),idForm,idDynTab))'="" {
		set strStatus = $$$MakeStatus("WWW00059")
	
	;} elseif $order(^WWW120DynTables(0,2,$$$Index(idForm),intPage,idForm,intPage),-1)'="" {  ; SR17715
	} elseif $order(^WWW120DynTables(0,2,$$$Index(idForm),$$$Index(intPage),idForm,idDynTab),-1)'="" {
		set strStatus = $$$MakeStatus("WWW00059")
	} ; "Currently there can only be one Dynamic Table per page of a form."
	set YRETVAL = strStatus
	quit
	
	
OnBeforeFormat(pstrYFieldName,pstrText,pobjLine)
	;-------------------------------------------------------------------------------
	; Set the formatting of Edit Grid fields
	;
	; Params:
	; pstrYFieldName - Edit Grid Field Name
	; pstrText - Current fields value
	; pobjLine - Record
	;
	; ByRefs: This is not really needed as we use & for ByRef parameters now.
	;
	; Returns:
	;
	; History:
	; 17-Sep-2010	GRF		SR16346: General code cleanup
	; 08-Jan-2010	shobby	SR15753: blnError not used.
	; 08-Jan-2010	shobby	SR15753: No need to set YBACKGROUNDCOLOR
	; 18-Dec-2006	PO		SR15351: Created
	;-------------------------------------------------------------------------------
	new enumBasis,idCol,idField,idRow,objForm
		
	$$$GRIDSplitKey(pstrYFieldName,idRow,idCol) 
	
	set idField   = $$$GetClassField(YFORM,idCol)
	set enumBasis = $$$WWW120DynTableBasis(pobjLine)
	
	if (idField = $$$FldWWW120DynTableClassOrForm) || (idField = $$$FldWWW120DynTableHyperLink) {
		if (enumBasis = "") || (enumBasis = $$$EnumWWWBASEDONCustom) {
			set YENABLED = $$$NO
		}
	
	} elseif idField = $$$FldWWW120DynTableCustomCode {
		if (enumBasis = "") || (enumBasis = $$$EnumWWWBASEDONClass) || (enumBasis = $$$EnumWWWBASEDONForm) {
			set YENABLED = $$$NO
		}
	}
	quit
	
	
	;SR17245 ValidateLines(pidForm,pobjForm)
	;SR17245 ;-------------------------------------------------------------------------------
	;SR17245 ; Check whether data is in a saveable state
	;SR17245 ;
	;SR17245 ; Params:
	;SR17245 ; pidForm - Form Id
	;SR17245 ; pobjForm - Form Record
	;SR17245 ;
	;SR17245 ; ByRefs: This is not really needed as we use & for ByRef parameters now.
	;SR17245 ;
	;SR17245 ; Returns: strStatus - $$$OK if valid, else error message
	;SR17245 ;
	;SR17245 ; History:
	;SR17245 ; 23-Mar-2010	shobby	Redundant.  Core Rules. 
	;SR17245 ; 21-Aug-2009	GRF		Replace Order macro
	;SR17245 ; 19-Dec-2006	PO		SR15351: Created
	;SR17245 ;-------------------------------------------------------------------------------
	;SR17245 new objDynamicTable,objLine,idLine,penumBasis,strStatus
	
	;SR17245 set strStatus = $$$OK
	
	;SR17245 $$$GRIDGetContents(.arrDynTable)
	
	;SR17245 set idLine = ""
	;SR17245 for {
	;SR17245 	set idLine = $order(arrDynTable(pidForm,idLine))
	;SR17245 	quit:idLine=""
		
	;SR17245 	set objLine = $get(arrDynTable(pidForm,idLine))
	;SR17245 	if ($$$WWW120DynTableBasis(objLine) = $$$EnumWWWBASEDONClass) ||
	;SR17245 	   ($$$WWW120DynTableBasis(objLine) = $$$EnumWWWBASEDONForm)     {
	;SR17245 		if $$$WWW120DynTableClassOrForm(objLine) = "" {
	;SR17245 			set strStatus = $listbuild("WWW00057",idLine)
	;SR17245 		}  ; "The field Class / Form must be filled out on line %1."
		
	;SR17245 	} elseif $$$WWW120DynTableBasis(objLine) = $$$EnumWWWBASEDONCustom {
	;SR17245 		if $$$WWW120DynTableCustomCode(objLine) = "" {
	;SR17245 			set strStatus = $listbuild("WWW00058",idLine)
	;SR17245 		}  ; "The field Custom Code must be filled out on line %1."
	;SR17245 	}
	;SR17245 	quit:$$$ISERR(strStatus)
	;SR17245 }
	;SR17245 quit strStatus
	
OnBeforeFormConstruction(pidField,pobjLine)
	;-------------------------------------------------------------------------------
	; Generate the relation text before field is displayed
	;
	; Params:
	; pidField - Field Id
	; pobjLine - Record
	;
	; Returns: Nothing
	;
	; History:
	; 19-Dec-2006	PO		SR15351: Created
	;-------------------------------------------------------------------------------
	do CreateRelationText(pidField,pobjLine)
	quit
	
	
OnBlur(pidField,&pobjLine)
	;-------------------------------------------------------------------------------
	; Switch editable state of fields based on data entered, also create relation text
	;
	; Params:
	;	pidField - Field Id
	;	pobjLine - Record  (ByRef)
	;
	; Returns: Nothing
	;
	; History:
	; 08-Jan-2010	shobby	SR15753: A lot of code not required.
	; 19-Dec-2006	PO		SR15351: Created
	;-------------------------------------------------------------------------------
	do CreateRelationText(pidField,pobjLine)
	quit
	
	
CreateRelationText(pidField,pobjLine)
	;-------------------------------------------------------------------------------
	; Create relation text for a particular field
	;
	; Params:
	; pidField - Field Id
	; pobjLine - Record
	;
	; Returns: Nothing
	;
	; History:
	; 19-Dec-2006	PO		SR15351: Created
	;-------------------------------------------------------------------------------
	new idClassOrForm,objRecord,strDescription
	
	if pidField = $$$FldWWW120DynTableClassOrForm {
		set idClassOrForm = $$$WWW120DynTableClassOrForm(pobjLine)
		if idClassOrForm '= "" {
			set strDescription = ""
			if $$$WWW120DynTableBasis(pobjLine) = $$$EnumWWWBASEDONClass {
				set strDescription = $$GetClassName^COMConst(idClassOrForm)
			
			} elseif $$$WWW120DynTableBasis(pobjLine) = $$$EnumWWWBASEDONForm {
				set strDescription = $$^WWWFORMNAME(idClassOrForm)
			}
			set ^COMTempList(YM,YUSER,"ClassOrForm",idClassOrForm,1) = strDescription
		}
	}
	quit
	
	
ClassOrForm(pstrField)
	;-------------------------------------------------------------------------------
	; Start COMView searching the appropriate data structure based on what the dynamic table is based on.
	;
	; Params:
	; pstrField - Edit Grid Field reference
	;
	; Returns: Nothing
	;
	; History:
	; 21-Dec-2006	PO		SR15351: Created
	;-------------------------------------------------------------------------------
	new idLine,objDynTable
	
	set idLine      = $piece($piece(pstrField,"Y",2),"_",1)
	set objDynTable = $$$GRIDGetYFELD($$$GRIDGetCurrentYKEY)
	
	if $$$WWW120DynTableBasis(objDynTable) = $$$EnumWWWBASEDONClass {
		do Initialise^COMViewCustom("WWW001")
	
	} elseif $$$WWW120DynTableBasis(objDynTable) = $$$EnumWWWBASEDONForm {
		do Initialise^COMViewCustom("WWW120")
	}
	
	do Start^COMViewCustom("WWW2.Y"_idLine_"_"_$piece($piece($piece(pstrField,"Y",2),"_",2),".",1))
	quit
	
	
ForGrid(pstrField)
	;-------------------------------------------------------------------------------
	; Start COMView searching for Edit Grid form
	;
	; Params:
	; pstrField - Edit Grid Field reference
	;
	; Returns: Nothing
	;
	; History:
	; 22-Dec-2006	PO		SR15351: Created
	;-------------------------------------------------------------------------------
	new idLine,objDynTable
	
	set idLine      = $piece($piece(pstrField,"Y",2),"_",1)
	set objDynTable = $$$GRIDGetYFELD($$$GRIDGetCurrentYKEY)
	
	do Initialise^COMViewCustom("WWW120")
	do Start^COMViewCustom("WWW2.Y"_idLine_"_"_$piece($piece($piece(pstrField,"Y",2),"_",2),".",1))
	quit
	
	
CreateDynTableCall(pidForm,pidGrid="",pintPage="",&parrTables)
	;-------------------------------------------------------------------------------
	; Create javascript functions that can be called when particular events occur.
	;
	; Params:
	; pidForm - Form Id
	; pidGrid - Edit Grid From Id
	;
	; Returns: Nothing
	;
	; History:
	; 14-Dec-2009	PPP		SR17077: DIV for Multiple DynaGrids, Remove all children
	;							on Grid Focus
	; 21-Aug-2009	GRF		Replace Order macro
	; 29-Mar-2007	GRF		SR15426: intPages => strPages
	; 15-Feb-2007	PO		SR15426: Remove table if nothing to display
	; 11-Jan-2007	PO		SR15339: Table heading
	; 02-Jan-2007	PO		SR15351: Created
	;-------------------------------------------------------------------------------
	new idLine,objDynamicTable,idxForm,idxOrder,strPages
 
	set idxForm = $$$Index(pidForm)
 
	$$$StartScript()
 
	set idxOrder = ""
	for {
		set idxOrder = $order(^WWW120DynTables(0,1,idxForm,idxOrder))
		quit:idxOrder=""
		
		set idLine = ""
		for {
			set idLine = $order(^WWW120DynTables(0,1,idxForm,idxOrder,pidForm,idLine))
			quit:idLine=""
			
			set objDynamicTable = $get(^WWW120DynTable(0,pidForm,idLine,1))
			set strPages = $$$WWW120DynTablePages1(objDynamicTable)
			if pidGrid '= "" continue:$$$WWW120DynTableForGrid(objDynamicTable)'=pidGrid
			if (pintPage '= "") && (strPages '= "") continue:($$$COMMA_strPages_$$$COMMA)'[($$$COMMA_pintPage_$$$COMMA)
 
			if $$$WWW120DynTableFiringEvent(objDynamicTable) = $$$EnumWWWDYNTABLEGridLineFocus {
			// Function name will need to include order no. when multiple grids are allowed per form.
				write "function DrawDynTable_GridFieldFocus(pRow) {"
				write "if (pRow == '') { RemoveChildren(document.getElementById('DYNAMIC_div'),true); } else {"
				write "var UnitSep = unescape('%1f');"
				write "RemoveChildren(document.getElementById('DYNAMIC_div'),false);"
				write "CallBack('"_$$$WWW120DynTableCustomCode(objDynamicTable)_"','"_$$$EnumWWWDYNTABLEGridLineFocus_"','"_pidForm_"'+UnitSep+'"_$$$GRIDName_"'+UnitSep+'"_idLine_"'+UnitSep+pRow);"
				write "} }"
				set parrTables(idLine)=objDynamicTable
			
			} elseif $$$WWW120DynTableFiringEvent(objDynamicTable) = $$$EnumWWWDYNTABLEAfterDataFields {
			// Function name will need to include order no. when multiple grids are allowed per form.
				write "function DrawDynTable_AfterDataFields(pRow) {"
				write "var UnitSep = unescape('%1f');"
				write "CallBack('"_$$$WWW120DynTableCustomCode(objDynamicTable)_"','"_$$$EnumWWWDYNTABLEAfterDataFields_"','"_pidForm_"'+UnitSep+'"_idLine_"'+UnitSep+'"_YKEY_"');"
				write "}"
				set parrTables(idLine)=objDynamicTable
			}
		}
	}
 
	$$$EndScript()
	quit
	
	
DrawTable(plstHeaders,pidTableData,plstColTypes,pidParameters,pstrFunction,pidEvent,pstrExecute="",pstrTableHeading="",pblnAutoSelect=$$$NO)
	;---------------------------------------------------------------------------------------------------------------------------------------
	; Draw Dynamic Table
	;
	; Data:
	; ^CacheTempDynamicTable(YUCI,YUSER,pidTableData,seq)         =  display data, tilde delimited
	; ^CacheTempDynamicTable(YUCI,YUSER,pidTableData,seq,"data")  =  link key
	; 
	; Formatting:
	; plstColTypes = $listbuild($listbuild({Alignment},{Type}), ...)
	;                   {Alignment}: center, left, right
	;                   {Type}:      display (data without hyperlink), link (includes hyperlink)
	;
	; Params:
	;	plstHeaders		The headers for the table                            [$lb()]
	;	pidTableData	^CacheTempDynamicTable id - can uniquely identify
	;						multiple dynamic tables presented together
	;	plstColTypes	List of lists detailing each column                  [$lb($lb(),$lb(),...)]
	;	pidParameters	Parameters passed when event fired                   [$c(31) delimited]  [idForm*idGrid*idKey*intRow]
	;	pstrFunction	javascript function to call onclick of line
	;						e.g. "FillLine" if link or "" if empty grid or error message
	;	pidEvent		Event that has caused dynamic table to be drawn
	;						1	$$$EnumWWWDYNTABLEGridLineFocus     Dynamic Table based on Grid Line with focus
	;						3	$$$EnumWWWDYNTABLEAfterDataFields   Dynamic Table simply presented After Data displayed (check)
	;	pstrExecute		Call onclick
	;   pstrTableHeading	Use this parameter to Set the Header, overwrites the one on ^WWW120DynTable #11
	;   pblnAutoSelect	if set to YES, auto select the record if there is only one record
	;	
	; Returns: Nothing
	;
	; History:
	; 08-Nov-2012	SCR		SR18193: Corrected Heading
	; 07-Sep-2010	PPP		SR17494: 1. New parameter - pblnAutoSelect
	;							2. if set to YES, auto select the record if there is
	;							only one record
	; 03-Aug-2010	PPP		SR17484: If no focusfield - stop the JS error
	; 25-Feb-2010	GRF		new objColData
	; 14-Dec-2009	PPP		SR17077:1. Added id to the DynaGrid to enable Mutiple DynaGrids
	;							2. Added new parameter for Header ,pstrHeader
	;						    3. Create a DIV for the multiple Tables
	;						    4. Added Color to the cells
	;							   4.1 To set a Column for every row
	;							       set lstColTypes = $listbuild($listbuild("left","link","red"),
	;							   4.2 To set an individual row/col
	;							       set ^CacheTempDynamicTable(YUCI,YUSER,pidTable,idLine,"col") = "red"_Y_Y_Y_Y_Y_Y_"red"_Y_Y_Y
	; 01-Jun-2009	PPP		SR16599: 1. Add background colors to the DynaGrid
	; 							Changes also made to commonfunctions.js
	; 							  a. function DynTable_CreateHeader
	; 							  b. function DynTable_CreateRow
	; 							2. Added Functions (to enable row selection)
	; 							  a. function DynTable_SelectRow
	; 							  b. function DynTable_RowMouseOut
	; 							  c. function DynTable_RowClick
	; 							3. Save the key to the Row and retrieve it onclick
	; 							4. Added Row highlight & click functionality
	; 						
	; 09-Feb-2009	GRF		SR16328: doco
	; 03-Apr-2008	shobby	SRBR014916: If there is no table heading defined for
	; 							a dynamic table attached to a grid, browser will
	; 							lockup.  Append a &nbsp; to the Table heading.
	; 11-Jan-2007	PO		SR15339: Table heading
	; 03-Jan-2007	PO		SR15351: Created
	;-------------------------------------------------------------------------------
	new idDyn,idLine,idKey,idRow,intLen,loop
	new objColData,objDynTable,objLine,objLinkData
	new strAlign,strColHdrCol,strColor,strMessage,strType
 	
	$$$StartScript()

  	set idDyn  = pidTableData
	set intLen = $listlength(plstHeaders)
	quit:((intLen>0) && (intLen'=$listlength(plstColTypes)))
 
	if pidEvent = $$$EnumWWWDYNTABLEGridLineFocus {
	;SR17306 write "var row = document.getElementById('focusfield').value.split('tdY')[1].split('_')[0];" // Use getRowNum(getFocusField())
		write "var r1 = document.getElementById('focusfield');"		//SR17484
  	    write "if (r1 != null) {"
		write "var row=getRowNum(r1.value);" ;SR17306
		//write "var row=getRowNum(document.getElementById('focusfield').value);" ;SR17306
		set idRow = $$$DYNTABLEGridLineFocusRow(pidParameters)
		set idKey = $$ReferenceKey^COMGridEdit31Interface($$$DYNTABLEGridLineFocusGrid(pidParameters),idRow)
		set idKey = $$$KEYMAX(idKey) // SR15339 ^^^
	
		write "if (row != '"_idRow_"') {"
		write "DrawDynTable_GridFieldFocus(row);"
 		write "} else {"               // ###START### ... MATCHING BRACE AT ###END###
 		
 	} elseif pidEvent = $$$EnumWWWDYNTABLEAfterDataFields {
	 	set idKey = $$$DYNTABLEAfterDataFieldsKey(pidParameters)
 	}
 
	// Auto correction ^^^
 
 	// Creation of the DIV
 	write "if (document.getElementById('DYNAMIC_div') != null) {"
	write "DYNAMIC_div = document.getElementById('DYNAMIC_div');"
	write "} else {"
	write "var DYNAMIC_div = document.createElement('div');"
	write "DYNAMIC_div.id = 'DYNAMIC_div';"
	write "}"

	write "if (document.getElementById('DYNAMIC_table"_idDyn_"') != null) {"
	//No need to remove children separately
	write "document.getElementById('DYNAMIC_table"_idDyn_"').removeChild(document.getElementById('DYNAMIC_tbody"_idDyn_"'));"
	write "document.getElementById('DYNAMIC_table"_idDyn_"').removeChild(document.getElementById('DYNAMIC_caption"_idDyn_"'));"
	write "DYNAMIC_table = document.getElementById('DYNAMIC_table"_idDyn_"');"
	write "} else {"
	write "var DYNAMIC_table = document.createElement('table');"
	write "DYNAMIC_table.id = 'DYNAMIC_table"_idDyn_"';"
	write "DYNAMIC_table.className = 'gDIVsh';"
	write "DYNAMIC_table.width = '100%';"
	write "}"

	write "DYNAMIC_div.appendChild(DYNAMIC_table);"
	
	; FIXME]]><![CDATA[ : Following code is common to both Grid Line Focus and After Data Field tables.
	;         ^WWW120DynTable(0,param1,param3,1) is based on Grid Line Focus parameter
	;         structure - should make both consistent <GRF> (SR16346 raised)
	
 	if $get(pstrTableHeading)'="" {
	 	write "var DYNAMIC_caption1 = document.createElement('caption');"
		write "DYNAMIC_caption1.id = 'DYNAMIC_caption1"_idDyn_"';"
		write "DYNAMIC_caption1.innerHTML = '&nbsp;';"
		write "DYNAMIC_table.appendChild(DYNAMIC_caption1);"
 		write "DYNAMIC_caption1.style.fontSize = '6pt';"
	}
 	
	write "var DYNAMIC_caption = document.createElement('caption');"
	write "DYNAMIC_caption.id = 'DYNAMIC_caption"_idDyn_"';"
 	if $data(^CacheTempDynamicTable(YUCI,YUSER,pidTableData)) {
	 	if $get(pstrTableHeading)="" {
	 		set objDynTable = $get(^WWW120DynTable(0,$$$DYNTABLEGridLineFocusForm(pidParameters),$$$DYNTABLEGridLineFocusDynTable(pidParameters),1))
	 		set pstrTableHeading = $$$WWW120DynTableTableHeading(objDynTable)
	 	}
	 	set strMessage = $$$Text(pstrTableHeading)

	 	;set strMessage = $$^WWWTEXT(pstrTableHeading)
	 	;if strMessage [ "%1" set strMessage = $$$Text($listbuild(pstrTableHeading,idKey))

		write "DYNAMIC_caption.innerHTML = '"_$$$JSText(strMessage)_"&nbsp;';"
		write "DYNAMIC_caption.style.textAlign = 'left';"
		write "DYNAMIC_caption.style.fontSize = '10pt';"
		write "DYNAMIC_caption.style.fontWeight = 'bold';"
	}
	write "DYNAMIC_table.appendChild(DYNAMIC_caption);"
 
	write "var DYNAMIC_tbody = document.createElement('tbody');"
	write "DYNAMIC_tbody.id = 'DYNAMIC_tbody"_idDyn_"';"
	write "DYNAMIC_table.appendChild(DYNAMIC_tbody);"
 
	write "var row=new Object();"
	write "row.cells = new Array();"
 
 	set strColHdrCol = $$$Colour($$$WWW012ColourTableHeading($get(^WWW012(0,0,1))))
	for loop=1:1:$listlength(plstHeaders) {
		write "DynTable_AddHeaderCell(row, '"_$listget($listget(plstColTypes,loop),$$$Alignment)_"', '"_$listget(plstHeaders,loop)_"', '"_$get(strColHdrCol)_"');"
	}
 
	write "DynTable_CreateHeader(DYNAMIC_tbody, row);"
 
	set idLine = ""
	for {
		set idLine = $order(^CacheTempDynamicTable(YUCI,YUSER,pidTableData,idLine))
		quit:idLine=""
		
		set objLine     = $get(^CacheTempDynamicTable(YUCI,YUSER,pidTableData,idLine))
		set objLinkData = $get(^CacheTempDynamicTable(YUCI,YUSER,pidTableData,idLine,"data"))
		set objColData 	= $get(^CacheTempDynamicTable(YUCI,YUSER,pidTableData,idLine,"col"))
 
		if objLinkData '= "" {
			write "var data=new Array();"
			write "var i=-1;"
			for loop=1:1:$length(objLinkData,Y) {
				write "data[++i]='"_$$$JSText($piece(objLinkData,Y,loop))_"';"
			}
		}
 
		write "var row=new Object();"
		write "row.cells=new Array();"
		for loop=1:1:$listlength(plstColTypes) {
			set strAlign = $$$LOWER($listget($listget(plstColTypes,loop),$$$Alignment))
			set strType  = $$$LOWER($listget($listget(plstColTypes,loop),$$$Type))
			
			//For a Row and Column (data record)
			set strColor = $piece(objColData,Y,loop)
			//Column for all Rows
			if strColor = "" {
				set strColor = $$$LOWER($listget($listget(plstColTypes,loop),$$$Color))
			}

			if strType = "display" {
				write "DynTable_AddDataCell(row, '"_strAlign_"', '"_$$$JSText($piece(objLine,Y,loop))_"', '"_$get(strColor)_"');"
			
			} elseif strType = "link" {
				write "DynTable_AddDataCellWithLink(row, data, '"_strAlign_"', '#', "_pstrFunction_", '"_$$$JSText($piece(objLine,Y,loop))_"', '"_$get(strColor)_"');"
			}
		}
		write "var idrow="_idLine_";"
		write "var Key="""_$translate(objLinkData,Y,$$$DELIM)_""";"
		
		write "var exec=null;"
	//the reason for this is that the onclick event will not be setup for the Row if pstrExecute is not defined.
		if pstrExecute'="" {
			write "exec="""_pstrExecute_""";"
		}
		
		write "DynTable_CreateRow(DYNAMIC_tbody,row,idrow,exec,Key);"
	}
 
	; Append the DIV to the Dynamic Area
	write "document.getElementById('DynamicArea').appendChild(DYNAMIC_div);"
 
	if pidEvent = $$$EnumWWWDYNTABLEGridLineFocus {
		write "}"                      // ###END### ... MATCHING BRACE AT ###START###
	  write "}"		//SR17484
	}

	
	//SR17494 - Only one line select the line if AutoSelect = YES
  	if pblnAutoSelect = $$$YES {
		if $get(pstrExecute)'="" {
			set idLine = +$order(^CacheTempDynamicTable(YUCI,YUSER,pidTableData,""))
			if idLine && (idLine=$order(^CacheTempDynamicTable(YUCI,YUSER,pidTableData,""),-1)) {
				//Row ID = "Dynbdy"_idRow; hence Dynbdy1 as there is only 1 Row
				write "var input = document.getElementById ('Dynbdy"_idLine_"');"
	    		write "input.focus();"
				write "DynTable_RowClick('',input.Key,input.exec);"
		 	}
		}
 	}
 	write "window.setTimeout('resetColumnWidths();',50);"
	$$$EndScript()
	quit
	
	
DisplayFields()
	;-------------------------------------------------------------------------------
	; Check whether current Dynamic Table is custom and if so show message otherwise
	; open dynamic table field entry form 
	;
	; Params: None
	;
	; Returns: Nothing
	;
	; History:
	; 04-Jan-2007	PO		SR15351: Created
	;-------------------------------------------------------------------------------
	new objLine
 
	set objLine = $$$GRIDGetYFELD($$$GRIDGetCurrentYKEY)
 
	// Check would be best on draw but could not see how to quickly implement
	if $$$WWW120DynTableBasis(objLine) = $$$EnumWWWBASEDONCustom {
		$$$Alert("WWW00060")  ; "Custom Dynamic Tables can not have fields entered against them."
		do GoToForm^COMGridEdit31G("WWW120")
	
	} else {
		do GoToForm^COMGridEdit31G("WWW120DynTableDisp")
	}
	quit
	
 
RowClick(pstrCallBack,pidRow,pidKey="")
	;-------------------------------------------------------------------------------
	; Get Link for Form & Key then open form.
	;
	; Parameters:
	; 	pidRow 	-	Row Id
	; 	pidKey	-	Parameters for the Row, separated by '^'
	; 
	; Returns: 1
	; 
	; Assumes:YUCI,YUSER
	;
	; History:
	; 01-Jun-2009	PPP		SR16599: Added Rowclick functionality to DynaGrid
	;-------------------------------------------------------------------------------
	new intCnt,strCallBack,strParam

	if pidKey'="" {
		set strParam = "" 
		for intCnt=1:1:$length(pidKey,$$$DELIM) {
			set strParam=strParam_""""_$piece(pidKey,$$$DELIM,intCnt)
			if intCnt '= $length(pidKey,$$$DELIM) {
				set strParam = strParam_""","
			} else {
				set strParam = strParam_""""
			}
		}
 
		if pstrCallBack'="" {
			if pstrCallBack'["(" {
				set pstrCallBack = pstrCallBack_"("""_pidRow_""","_strParam_")"
			}
			xecute "do "_pstrCallBack
		}
	}
	quit 1]]></Routine>
</Export>