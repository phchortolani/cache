<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLBankReconPreCleared" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLBankReconPreCleared
	
#include COMSYS
#include FINConst
#include FINSYS
	
GetPreCleared(pKEY,pobjBankRecon="",pblnRedo=$$$NO)
    ;-------------------------------------------------------------------------------
    ;
    ; Params:
    ;
    ; Returns:
    ;
    ; History:
    ; 12-Oct-2005	JW		SR13682: Remove Bank Line number
    ; 20-Sep-2005	JW		SR13309: Created
    ;-------------------------------------------------------------------------------
	new strStatus,thisBankRecon,thisReconLine,idxAccount,blnCleared,dteTrans,idBankRecon,idReconLine,objPreCleared
	
	set strStatus     = $$$OK
	set thisBankRecon = $$$KEY1(pKEY)
	set thisReconLine = $order(^FINGLBankReconPreCleared(0,thisBankRecon,""),-1)
	
	if pblnRedo || '$data(^FINGLBankReconPreCleared(0,thisBankRecon)) {
		set idxAccount = $$$Index($$$FINGLBankReconBankAccount(pobjBankRecon))
		for blnCleared=$$$ANINO,$$$NO {
			set dteTrans = ""
			for {
				set dteTrans = $order(^FINGLBankReconPreCleareds(0,1,idxAccount,blnCleared,dteTrans))
				quit:dteTrans=""
				
				set idBankRecon=""
				for {
					set idBankRecon = $order(^FINGLBankReconPreCleareds(0,1,idxAccount,blnCleared,dteTrans,idBankRecon))
					quit:idBankRecon=""
					
					if idBankRecon'=thisBankRecon {
						
						set idReconLine=""
						for {
							set idReconLine = $order(^FINGLBankReconPreCleareds(0,1,idxAccount,blnCleared,dteTrans,idBankRecon,idReconLine))
							quit:idReconLine=""
							
							set objPreCleared = $get(^FINGLBankReconPreCleared(0,idBankRecon,idReconLine,1))
							set $$$FINGLBankReconPreClearedReverse(objPreCleared)=idBankRecon_","_idReconLine
							set $$$FINGLBankReconPreClearedBankFileLine(objPreCleared)=""	//SR13682
							set $$$FINGLBankReconPreClearedClearedHere(objPreCleared)=$$$ANNO
							set strStatus = $$$Save("FINGLBankReconPreCleared",thisBankRecon_","_$i(thisReconLine),objPreCleared,$$$YES)
						}
					}
					quit:$$$ISERR(strStatus)
				}
				quit:$$$ISERR(strStatus)
			}
			quit:$$$ISERR(strStatus)
		}
	}
	quit strStatus
	
	
GetAccount() 
    ;-------------------------------------------------------------------------------
    ; Method Usage
    ;
    ; Params:
    ;
    ; Returns:
    ;
    ; History:
    ; 20-Sep-2005	JW		SR13309: Created
    ;-------------------------------------------------------------------------------
	new objBankRecon
	set objBankRecon = $$$GRIDYFELDContainer
	quit $$$FINGLBankReconBankAccount(objBankRecon)
	
	
SetCleared(pidBankRecon) 
    ;-------------------------------------------------------------------------------
    ; Clear the Pre Cleared transactions
    ;
    ; Params:
    ;
    ; Returns:
    ;
    ; History:
    ; 19-Oct-2006	JW		SR15134: Look at kill status
    ; 11-Oct-2005	JW		SR13661: Make sure there is original entry
    ; 20-Sep-2005	JW		SR13309: Created
    ;-------------------------------------------------------------------------------
	new strStatus,idPreCleared,objPreCleared,idReverse,objReverse
	
	set strStatus=$$$OK
	
	set idPreCleared = ""
	for {
		set idPreCleared = $order(^FINGLBankReconPreCleared(0,pidBankRecon,idPreCleared))
		quit:idPreCleared=""
		
		set objPreCleared=$get(^FINGLBankReconPreCleared(0,pidBankRecon,idPreCleared,1))
		
		if $$$FINGLBankReconPreClearedCleared(objPreCleared) {
			set idReverse = $$$FINGLBankReconPreClearedReverse(objPreCleared)
			if (idReverse'="") {		// SR13661
				// Has been reversed, so update original entry
				set objReverse = $get(^FINGLBankReconPreCleared(0,$piece(idReverse,",",1),$piece(idReverse,",",2),1))
				set $$$FINGLBankReconPreClearedCleared(objReverse) = $$$YES
				set strStatus=$$$Save("FINGLBankReconPreCleared",idReverse,objReverse,1)
			}
		} elseif $$$FINGLBankReconPreClearedReverse(objPreCleared)'="" {
			// Remove if not cleared
			set strStatus = $$$Kill("FINGLBankReconPreCleared",pidBankRecon_","_idPreCleared)		//SR15134
		}
		quit:$$$ISERR(strStatus)
	}
	
	quit strStatus
	
OnAfterDelete(pstrYKEY,pstrYFELD) 
	/*------------------------------------------------------------------------------
	; Delete the PreCleared entry.
	;
	; Params:
	; pstrYKEY : The YKEY of the record
	; pstrYFELD: The YFELD of the bank reconciliation
	;
	; Returns:
	;
	; History:
	; 23-Oct-2006	JW			SR15134: Look at kill status.
	; 26-Sep-2005	RobertW		SR13304: Created
	;-----------------------------------------------------------------------------*/
	new objBankRecon,idAccount,idBankTran,strStatus
	
	set idBankTran=$$$FINGLBankReconPreClearedBankFileLine(pstrYFELD)
	if idBankTran'="" {
		set objBankRecon=$get(^FINGLBankRecon(0,$$$KEY1(pstrYKEY),1))
		set idAccount=$$$FINGLBankReconBankAccount(objBankRecon)
		
		set strStatus=$$SetManualMatch^FINGLBankTran(idBankTran,idAccount,$$$NO)		// SR15134
		if $$$ISERR(strStatus) {
			set Q = $$$QDontDelete		// SR15134
		}
	}
	
	quit 
 
CanDelete(pstrYKEY,pstrYFELD)
	/*------------------------------------------------------------------------------
	; Determines whether we can delete this pre cleared entry.
	; 
	; We can not delete if this comes from another bank reconciliation
	;
	; Params:
	; pstrYKEY : The key to the line
	; pstrYFELD: The data for the line
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 10-Feb-2006	RPW		SR14135: Created
	;-----------------------------------------------------------------------------*/
	new strStatus,strReference
	
	set strStatus=$$$OK
	
	set strReference=$piece($$$FINGLBankReconPreClearedReverse(pstrYFELD),",",1)
	
 	if strReference'="" {
		if strReference'=$piece(pstrYKEY,",",1) {
			set strStatus="Fin00972"  ;Unable to delete pre-cleared entry, it came from a previous Bank Reconciliation."
		} else {
			set strStatus="Fin00973"  ;Unable to delete pre-cleared reversal entry.
			
		}
 	}
 	
	if $$$ISOK(strStatus) {
		set Q=$$$YQEnable
		if $get(YKILL)="" {
			do PreClearedUncomplete^FINGLBankReconMatchCache(pstrYKEY)	
		}
	} else {
		set Q=$$$YQDisable(strStatus)
	}
	
	quit
	
 
OnBlur(pintCol,pintRow,pstrYFELD)
	/*------------------------------------------------------------------------------
	; Handle the blur of the grid:
	; 
	; Col 5:
	; Checked  : Create a new precleared record reversing the current row
	; UnChecked: Remove the new precleared record.
	;
	; Params:
	; pintCol  : The column on the grid
	; pintRow  : The row on the grid
	; pstrYFELD: The data of the grid line
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 27-Apr-2006	RPW		SR14459: If the reference or date are modified, then update
	; 						the match cache entry as well.
	; 24-Mar-2006	RPW		SR14459: If the amounts are really changed then
	; 						uncomplete the line; handles non-existent lines
	; 09-Mar-2006	RPW		SR13305: Make sure the PreCleared is cleanup when we uncomplete.
	; 06-Mar-2006	Steve S	SR14126: Call to RemoveGLTranMatch^FINGLBankReconPreClearedMatch
	; 23-Feb-2006	RPW		SR13305: Moved the Handling into a separate routine.
	; 16-Feb-2006	RPW		SR14135: Do not negate the number. Undid this later.
	; 10-Feb-2006	RPW		SR14135: Created
	;-----------------------------------------------------------------------------*/
	new blnClear,idPreCleared,idBankRecon,curWithdrawal,curDeposit
	new idMatchedLine,objPreCleared
 
	set idBankRecon=$$GetYKEYContainer^COMGridEdit31Interface()
	set idMatchedLine=""
	
	set idPreCleared=$$ReferenceKey^COMGridEdit31Interface(YFORM,pintRow)
	
	if pintCol=5 {
		
		quit:$$$FINGLBankReconPreClearedReverse(pstrYFELD)=""
		
		set blnClear=$$$FINGLBankReconPreClearedCleared(pstrYFELD)
		if 'blnClear {
			set $$$FINGLBankReconPreClearedCleared(pstrYFELD)=$$$ANNO
			set $$$FINGLBankReconPreClearedBankFileLine(pstrYFELD)=""
		}
		
		set curWithdrawal=$$$FINGLBankReconPreClearedCredit(pstrYFELD)
		set curDeposit=$$$FINGLBankReconPreClearedDebit(pstrYFELD)
		
		if ('blnClear) { //SR14126
			set idMatchedLine=$$$FINGLBankReconPreClearedGLTranLine(pstrYFELD)
			if (idMatchedLine'="") {
				set $$$FINGLBankReconPreClearedGLTranLine(pstrYFELD)=""
				do RemoveGLTranMatch^FINGLBankReconPreClearedMatch(idBankRecon,idMatchedLine)
			}
		}
		
		do HandlePreCleared(pintRow,pstrYFELD,blnClear,,pintCol,idBankRecon)
		
		do:('blnClear) PreClearedUncomplete^FINGLBankReconMatchCache(idPreCleared)
		
	}
	
	if (pintCol'=7)&&(pintCol'=5) {
		do SetDifference^FINGLBankReconGet(idBankRecon,YFORM,pintRow,.pstrYFELD,$$$FldFINGLBankReconPreClearedDebit,$$$FldFINGLBankReconPreClearedCredit)
		if (pintCol=2)||(pintCol=3) {
			if $data(@("^"_YFORM_"("_$$^WWWKEYBUILD(idPreCleared)_")")) {
				set objPreCleared=$$$DATA(YFORM,idPreCleared)
			
				if pintCol=2 {
					set blnClear=$$$FINGLBankReconPreClearedCredit(objPreCleared)'=$$$FINGLBankReconPreClearedCredit(pstrYFELD)
				} else {
					set blnClear=$$$FINGLBankReconPreClearedDebit(objPreCleared)'=$$$FINGLBankReconPreClearedDebit(pstrYFELD)
				}
				
				do:blnClear PreClearedUncomplete^FINGLBankReconMatchCache($$ReferenceKey^COMGridEdit31Interface(YFORM,pintRow))
			}
		}
		
		// SR14459 (27-Apr-2006 Bug Fix)
		if (pintCol=8)||(pintCol=6) {
			// Update the Match Cache entry.
			do UpdateMatchCache^FINGLBankReconMatchCache(idBankRecon,"FINGLBankReconPreCleared",idPreCleared,$$$FINGLBankReconPreClearedTransactionDate(pstrYFELD),$$$FINGLBankReconPreClearedReference(pstrYFELD))
		}
	}
	quit
	
	
HandlePreCleared(pintRow,pstrYFELD,pblnClear,pblnUpdateGrid=$$$YES,pintCol=0,
				pidBankRecon,pidLine,pblnHeader=$$$YES)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 10-Apr-2010	GRF		SR17177: arrGrid rather than objGrid; GRID Macros
	; 09-Mar-2006	RPW		SR13305: Make sure we correctly Create the Pre Cleared entry, ie clear it.
	; 27-Feb-2006	Steve S	SR14126: Pass in the bank rec number + pre clear line
	; 23-Feb-2006	RPW		SR13305: Created
	;-------------------------------------------------------------------------------
	new arrGrid,strCopy,fltWithdrawal,fltDeposit,objParent,strKey,idRow,objRow,idRealRow
	new strMatch,strStatus
	
	if $get(pidBankRecon)="" { //SR14126
		set strKey = $$$GRIDYKEYContainer
	} else {
		set strKey = pidBankRecon
	}
	
	if pblnClear {
		if $$$FINGLBankReconPreClearedReverse(pstrYFELD)'="" {
			set strCopy       = pstrYFELD
			set fltWithdrawal = $$$FINGLBankReconPreClearedCredit(strCopy)
			if '$$$FCZero(fltWithdrawal) {
				set fltWithdrawal = $$$FCSign(fltWithdrawal)
			}
			set fltDeposit = $$$FINGLBankReconPreClearedDebit(strCopy)
			if '$$$FCZero(fltDeposit) {
				set fltDeposit = $$$FCSign(fltDeposit)
			}
			
			set objParent = $$$GRIDYFELDContainer
			
			if $get(pidLine)="" { //SR14126
				set idRow = $$ReferenceKey^COMGridEdit31Interface(YFORM,pintRow)
			} else {
				set idRow = strKey_","_pidLine	
			}
			
			set strCopy = $$CreatePreCleared(strKey,									; 1
		                        fltWithdrawal,											; 2
		                        fltDeposit,												; 3
		                        $$$FINGLBankReconPreClearedReference(strCopy),			; 4
		                        $$$FINGLBankReconPreClearedTransactionDate(strCopy),	; 5
		                        ,														; 6
		                        $$$FINGLBankReconBankAccount(objParent),				; 7
		                        idRow,													; 8
		                        $$$YES,													; 9
		                        $$$YES,													; 10
		                        'pblnUpdateGrid)										; 11
		    
		    if pblnUpdateGrid {
				new YFELD
				$$$GRIDAddLine(strCopy)
		    } else {
			    set $$$FINGLBankReconPreClearedCleared(pstrYFELD)=$$$YES
			    set strStatus=$$$Save("FINGLBankReconPreCleared",idRow,pstrYFELD,1)
		    }
		    
		    do UpdateBalances^FINGLBankReconGet(strKey,fltWithdrawal,fltDeposit,$$$YES,pblnHeader)
		}
	} else {
		if $$$FINGLBankReconPreClearedReverse(pstrYFELD)'="" {
			$$$GRIDGetContents(.arrGrid)
			set strMatch = $$ReferenceKey^COMGridEdit31Interface(YFORM,pintRow)
			
			set idRow = ""
			for {
				set idRow = $order(arrGrid(strKey,idRow))
				quit:idRow=""
				
				set objRow = arrGrid(strKey,idRow)
				quit:$$$FINGLBankReconPreClearedReverse(objRow)=strMatch
			}
			
			set fltWithdrawal = $$$FINGLBankReconPreClearedCredit(objRow)
			if '$$$FCZero(fltWithdrawal) {
				set fltWithdrawal = $$$FCSign(fltWithdrawal)
			}
			set fltDeposit = $$$FINGLBankReconPreClearedDebit(objRow)
			if '$$$FCZero(fltDeposit) {
				set fltDeposit = $$$FCSign(fltDeposit)
			}
			
			do UpdateBalances^FINGLBankReconGet(strKey,fltWithdrawal,fltDeposit,$$$YES,pblnHeader)
			
			if pblnUpdateGrid {
				if idRow'="" {
					set idRealRow = $$ReferenceRow^COMGridEdit31Interface(YFORM,idRow)
					write $piece($$^COMGridEdit31S("KILL","Y"_idRealRow_"_"_pintCol_";-1"),Y,2)
				}
			} else {
				set $$$FINGLBankReconPreClearedCleared(pstrYFELD)=$$$ANNO
				set idRow     = $$ReferenceKey^COMGridEdit31Interface(YFORM,pintRow)
			    set strStatus = $$$Save("FINGLBankReconPreCleared",idRow,pstrYFELD,$$$YES)
			}
		}
	}
	quit
	
	
CreatePreCleared(pidBankRecon,pfltCredit,pfltDebit,pstrReference,pdteTransaction,
				 pidBankTran="",pidAccount,pstrReverse="",pblnCleared=$$$NO,
				 pblnClearedHere=$$$NO,pblnCreate=$$$YES,&pidPreCleared)
	/*------------------------------------------------------------------------------
	; Create a Pre Cleared entry in OO way. Only I know how to create and save it.
	;
	; Params:
	; pidBankRecon    : The id of the bank reconciliation record
	; pfltCredit      : The amount to credit
	; pfltDebit       : The amount to debit
	; pstrReference   : The line reference
	; pdeTransaction  : The date of the transactions
	; pidBankTran     : The bank tran line we came from. Defaults to ""
	; pidAccount      : The id of the account
	; pstrReverse     : The reference to the previous bank reconciliation or the source line for this one. Defaults to ""
	; pblnCleared     : Has this entry been cleared? Defaults to $$$NO
	; pblnClearedHere :=$$$NO
	; pblnCreate      :=$$$YES
	; pidPreCleared   : The id of the pre cleared entry created
	;
	; ByRefs:
	; pidPreCleared
	;
	; Returns:
	; The pre cleared object.
	;
	; History:
	; 09-Mar-2006	RPW		SR13305: Return the id of the pre cleared just created
	; 10-Feb-2006	RPW		SR14135: Created
	;-----------------------------------------------------------------------------*/
	new objPC,strStatus
	
	set pidPreCleared=""
	set objPC=""
	set $$$FINGLBankReconPreClearedCredit(objPC)          = pfltCredit
	set $$$FINGLBankReconPreClearedDebit(objPC)           = pfltDebit
	set $$$FINGLBankReconPreClearedReference(objPC)       = pstrReference
	set $$$FINGLBankReconPreClearedTransactionDate(objPC) = pdteTransaction
	set $$$FINGLBankReconPreClearedBankFileLine(objPC)    = pidBankTran
	set $$$FINGLBankReconPreClearedAccount(objPC)         = pidAccount		//SR13654
	set $$$FINGLBankReconPreClearedReverse(objPC)         = pstrReverse
	set $$$FINGLBankReconPreClearedCleared(objPC)         = $$$ANBOOLEAN(pblnCleared)
	set $$$FINGLBankReconPreClearedClearedHere(objPC)     = $$$ANBOOLEAN(pblnClearedHere)
	
	if pblnCreate {
		set pidPreCleared=pidBankRecon_$$$COMMA_($order(^FINGLBankReconPreCleared(0,pidBankRecon,""),-1)+1)
		
		set strStatus=$$$Save("FINGLBankReconPreCleared",pidPreCleared,objPC,1)
	}
	
	quit objPC
	
	
UpdatePreCleared(pidBankRecon)
	;-------------------------------------------------------------------------------
	; If any pre cleared lines are not cleared, ensure the bank line
	; property is blank and the corresponding bank line record is uncleared
	;
	; Params: pidBankRecon		: The bank rec number
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 26-Feb-2006	Steve S		SR14126: Created
	;-------------------------------------------------------------------------------
	new idLine,objPreClear,idBankLine,idAccount,objBankLine
	
	if ('$$$NoKey(pidBankRecon)) {
		set idLine=""
		for {
			set idLine=$order(^FINGLBankReconPreCleareds(0,15,$$$ANINO,pidBankRecon,idLine))
			quit:(idLine="")
			
			set objPreClear=$get(^FINGLBankReconPreCleared(0,pidBankRecon,idLine,1))
			
			set idBankLine=$$$FINGLBankReconPreClearedBankFileLine(objPreClear)
			if (idBankLine'="") {
				set $$$FINGLBankReconPreClearedBankFileLine(objPreClear)=""
				do Save^COMUtils("FINGLBankReconPreCleared",pidBankRecon_","_idLine,objPreClear,1)
				
				set idAccount=$$$FINGLBankReconBankAccount($get(^FINGLBankRecon(0,pidBankRecon,1)))
				if (idAccount'="") {
					set objBankLine=$get(^FINGLBankTran(0,idAccount,idBankLine,1))
					set $$$FINGLBankTranMatched(objBankLine)=$$$ANNO
					do Save^COMUtils("FINGLBankTran",idAccount_","_idBankLine,objBankLine,1)	
				}
			}
		}
		
		set idLine=""
		for {
			set idLine=$order(^CacheTempPreClearKill(YUSER,idLine))
			quit:idLine=""
			
			do KILL^COMUtils("FINGLBankReconPreCleared",pidBankRecon_","_idLine)
 
		}
	}
	
	kill ^CacheTempPreClearKill(YUSER)
	
	quit
	
	
IncludePreClear(pidBankRecon,pidLine)
	;-------------------------------------------------------------------------------
	; Determines whether a pre clear line should be included as part of the
	; auto match process for this bank rec.
	;
	; Params:	pidBankRecon	: The bank rec number
	; 			pidLine			: The pre clear number
	;
	; ByRefs:
	;
	; Returns: blnInclude
	;
	; History:
	; 27-Feb-2006	Steve S		SR14126: Created
	;-------------------------------------------------------------------------------
	new blnInclude,objLine,strOriginal
 
	set blnInclude=$$$NO
 
	if ('$$$NoKey(pidBankRecon)) && ($get(pidLine)'="") {
		set objLine=$get(^FINGLBankReconPreCleared(0,pidBankRecon,pidLine,1))
		set strOriginal=$$$FINGLBankReconPreClearedReverse(objLine)
		if (strOriginal'="") && ($piece(strOriginal,",",1)'=pidBankRecon) {
			set blnInclude=$$$YES	
		}
	}
 
	quit blnInclude
	
	
OnLineDeleted(pstrYKEY,pintRowCount) 
	;-------------------------------------------------------------------------------
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 07-Mar-2006	RPW		SR<place SR Number here>: Created
	;-------------------------------------------------------------------------------
 
	new intRow,idBankRecon
	
	set intRow=$$ReferenceRow^COMGridEdit31Interface(YFORM,$$$KEY2(pstrYKEY))
	set idBankRecon=$$$KEY1(pstrYKEY)
	
	if $$$FINGLBankReconPreClearedCleared(pstrYKEY)=$$$YES {
		do RemoveDifference^FINGLBankReconGet(idBankRecon,YFORM,intRow,YFELD,$$$FldFINGLBankReconPreClearedDebit,$$$FldFINGLBankReconPreClearedCredit)
	}
	
	quit
	
	
OnAfterDataFields()
	;-------------------------------------------------------------------------------
	; Routine to run after data fields
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 07-Mar-2006	Steve S		SR14126: Created
	;-------------------------------------------------------------------------------
	if $get(^CacheTempPCFilter(YUSER)) {
		$$$GRIDHideShowRows($$$FldFINGLBankReconPreClearedBankFileLine,,$$$NO,$$$YES,"",$$$YES)
	}
 
	quit
	
	
SetFilter()
	;-------------------------------------------------------------------------------
	; Sets the cleared bank line filter to on
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 07-Mar-2006	Steve S		SR14126: Created
	;-------------------------------------------------------------------------------
	set ^CacheTempPCFilter(YUSER)=1
 
	quit
	
	
GetFilter()
	;-------------------------------------------------------------------------------
	; Return a textual description of any current filters
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns: strFilter
	;
	; History:
	; 07-Mar-2006	Steve S		SR14146: Created
	;-------------------------------------------------------------------------------
	new strFilter
 
	if $get(^CacheTempPCFilter(YUSER)) {
		set strFilter=$$$Text("Fin01004")  ;Cleared Bank Lines
	} else {
		set strFilter=$$$Text("Fin00888")  ;None
	}
 
	quit strFilter
	
	
ClearFilters(pa,pb)
	;-------------------------------------------------------------------------------
	; Clear filters for pre clear lines
	;
	; Params: pa,pb : Not used
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 07-Mar-2006	Steve S		SR14146: Created
	;-------------------------------------------------------------------------------
	if $data(^CacheTempPCFilter(YUSER)) {
		kill ^CacheTempPCFilter(YUSER)
		do UpdateHeaderField^COMGridEdit31G("M40",$$$Text("Fin00888")) ;None
		do ShowAllRows^COMGridEdit31R()
	} else {
		$$$Alert("Fin00985")  ;No filter applied	
	}
	
	quit ""
	
OnBeforeFormConstruction() 
	;-------------------------------------------------------------------------------
	; Make sure the field is locked if the cleared here flag is set.
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 04-Apr-2006	RPW		SR14459: Created
	;-------------------------------------------------------------------------------
 
 	quit:$get(YFELD)=""
 	
	if $$$FINGLBankReconPreClearedClearedHere(YFELD) {
		set YHID=2
	}
	
	quit
	
	
OnBeforeSave(pYFELD)
	;-------------------------------------------------------------------------------
    ; Make sure an amount is entered
    ;
    ; Params: line object
    ;
    ; Returns: nil
    ;
    ; History:
    ; 27-Jun-2006	JW		SR13755: Created
	;-------------------------------------------------------------------------------
	
    if ($$$FINGLBankReconPreClearedCredit(pYFELD)="") && ($$$FINGLBankReconPreClearedDebit(pYFELD)="") {
		set YRETVAL = $listbuild("Fin01049")  ;Enter either a deposit or a withdrawal
	}
    
	quit
]]></Routine>
</Export>