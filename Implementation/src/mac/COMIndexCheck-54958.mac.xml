<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMIndexCheck" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMIndexCheck
	#include COMConst

Start()
	if '$data(^CacheTempTestIndex(YUCI)) {
		set ^CacheTempTestIndex(YUCI)=""
		job TestIndex^COMIndexCheck()
	}
	do GoToForm^COMUtilForm("COMIndexCheck",0)
	quit
	
TestIndex(pidClass="")
	new intTotalErrors,intCount,intIndexCount,YINDEX,VORG,YQ,strStatus,idClass
	new intErrors,intReverseErrors,blnCanSkip,obj,strGlobal,blnFound
	new dteStart,intTime
	
	$$$VAR
	set intTotalErrors=0
	set intCount=0
	set intIndexCount=0
	set YINDEX="A"
	set YQ=1
	
	set strStatus=$$UpdateHeader()
	set idClass="" for { set idClass=$order(^WWW001(0,idClass)) quit:idClass=""
		continue:(idClass="COMLogin")
		continue:(idClass="COMUserPreferences")
		continue:((pidClass'="")&&(idClass'=pidClass))
		set intTime=-1
		set dteStart=$horolog
		set intErrors=0
		set intReverseErrors=0
		;break
		set blnCanSkip=((pidClass="")&&$$CanSkip(idClass))
		if 'blnCanSkip {
			set intErrors=0
			write $extract(idClass_"                              ",1,25)
			xecute "kill ^CacheTemp"_idClass_"s"
			set VORG(1)=idClass
			do ^WWWSORT
			
			set intIndexCount=intIndexCount+$$CountIndex(idClass)

			set obj="^CacheTemp"_VORG(1)_"s(0)"
			for { 
				set obj=$query(@obj)
				quit:obj=""
				
				set strGlobal="^"_VORG(1)_"s("_$piece(obj,"(",2,99999)
				
				set intCount=intCount+1
				xecute "set blnFound=$data("_strGlobal_")"
				if 'blnFound {
					set intErrors=intErrors+1
					write strGlobal,!
				}
				;xecute "set ^CacheTemp"_$extract(strGlobal,2,99999)_"="""""
			}
			
			set intTotalErrors=intTotalErrors+intErrors
			set intReverseErrors=$$Reverse(idClass)
			write " Cnt="_intCount_":Idx="_intIndexCount_":Err="_intTotalErrors_":Diff="_(intIndexCount-intCount)_":Rev="_intReverseErrors,!
			;break:intErrors>0
			;break:intReverseErrors>0
			xecute "kill ^CacheTemp"_idClass_"s"
			set intTime=$$DateDiff^COMUtilDate(dteStart,$horolog)
		}
		set strStatus=$$UpdateLine(idClass,intErrors+intReverseErrors,blnCanSkip,intTime)
		;quit
	}
	kill ^CacheTempTestIndex(YUCI)
	quit intErrors


UpdateHeader()
	new strStatus,objCOMIndexCheck
	
	set objCOMIndexCheck=$get(^COMIndexCheck(0,0,1))
	set $$$COMIndexCheckLastRun(objCOMIndexCheck)=$horolog
	set $$$COMIndexCheckTimesRun(objCOMIndexCheck)=$$$COMIndexCheckTimesRun(objCOMIndexCheck)+1
	set strStatus=$$Save^COMUtils("COMIndexCheck",0,objCOMIndexCheck,$$$YES)
	quit strStatus
	
	
GetLine(pidClass)
	new idLine
	set idLine=$order(^COMIndexCheckLines(0,1,$$$Index(pidClass),0,""))
	if idLine="" set idLine=$order(^COMIndexCheckLine(0,0,""),-1)+1
	if idLine="" set idLine=1
	quit idLine

	
Reorder()
	quit

CanSkip(pidClass)
	new blnSkip,idLine,intClear,intOnOKSkip,objCOMIndexCheckLine
	new objCOMIndexCheck

	set blnSkip=$$$YES

	if pidClass       = "1INARTXL"    {
	} elseif pidClass = "1INAUFPXL"   {
	} elseif pidClass = "1INXAUFP"    {
	} elseif pidClass = "1INXAUFPXL"  {
	} elseif pidClass = "1SALKeyword" {
	} elseif pidClass = "1zzSCH"      {
	} elseif pidClass = "1www"        {
	
	  ; Review	
	} elseif pidClass = "1AEPProduct" {
	} elseif pidClass = "1INART"      {
	} elseif pidClass = "1INAUFP"     {
	} elseif pidClass = "1INDRPITEM"  {
	} elseif pidClass = "1INDRPITEMRUN"  {
	} else {
		set idLine=$$GetLine(pidClass)
		if idLine'="" {
			set objCOMIndexCheck=$get(^COMIndexCheck(0,0,1))			
			set objCOMIndexCheckLine=$get(^COMIndexCheckLine(0,0,idLine,1))
			set intClear=$$$COMIndexCheckLineClear(objCOMIndexCheckLine)
			set intOnOKSkip=$$$COMIndexCheckOnOKSkip(objCOMIndexCheck)
			if ($$$COMIndexCheckLineTime1(objCOMIndexCheckLine)>$$$COMIndexCheckSlow(objCOMIndexCheck))&&($$$COMIndexCheckSlow(objCOMIndexCheck)'="") {
				set blnSkip=$$$YES
			} elseif '$$$COMIndexCheckLineLast1(objCOMIndexCheckLine) {
				set blnSkip=$$$NO
			} else {
				set blnSkip=(intOnOKSkip)&&'(intClear\intOnOKSkip)
			}
		} else {
			set blnSkip=$$$NO
		}
	}
		

	quit blnSkip

UpdateLine(pidClass,pintErrors,pblnCanSkip,pintTime)
	;-------------------------------------------------------------------------------
	; Update The Line with the results of the test.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 28-Mar-2011	shobby		SR17692: Created
	;-------------------------------------------------------------------------------

	new strStatus,objCOMIndexCheckLine,idLine

	set idLine=$$GetLine(pidClass)
	
	set objCOMIndexCheckLine=$get(^COMIndexCheckLine(0,0,idLine,1))
	set $$$COMIndexCheckLineClass(objCOMIndexCheckLine)=pidClass
	if pintTime>-1 set $$$COMIndexCheckLineTime1(objCOMIndexCheckLine)=pintTime
	
	if pblnCanSkip {
		set $$$COMIndexCheckLineClear(objCOMIndexCheckLine)=$$$COMIndexCheckLineClear(objCOMIndexCheckLine)+1
	} else {
		set $$$COMIndexCheckLineClear(objCOMIndexCheckLine)=0
		if pintErrors=0 {
			set $$$COMIndexCheckLineOK(objCOMIndexCheckLine)=$$$COMIndexCheckLineOK(objCOMIndexCheckLine)+1
			set $$$COMIndexCheckLineLast1(objCOMIndexCheckLine)=$$$YES
			set $$$COMIndexCheckLineClear(objCOMIndexCheckLine)=$$$COMIndexCheckLineClear(objCOMIndexCheckLine)+1
		} else {
			set $$$COMIndexCheckLineError(objCOMIndexCheckLine)=$$$COMIndexCheckLineError(objCOMIndexCheckLine)+1
			set $$$COMIndexCheckLineLastError(objCOMIndexCheckLine)=$horolog
			set $$$COMIndexCheckLineLast1(objCOMIndexCheckLine)=$$$NO
		}
		set $$$COMIndexCheckLineLastRun(objCOMIndexCheckLine)=$horolog
	} 
	set strStatus=$$Save^COMUtils("COMIndexCheckLine",0_","_idLine,objCOMIndexCheckLine,$$$YES)
	quit strStatus
	
	
Reverse(pidClass)
	new obj,str,i,blnFound,intReverseCount
	
	set intReverseCount=0
	set obj="^"_pidClass_"s(0)"
	for { set obj=$query(@obj)
		quit:obj=""
		set str=$replace(obj,"^"_pidClass_"s(","^CacheTemp"_pidClass_"s(")
		xecute "set blnFound=$data("_str_")"
		if 'blnFound {
			write !,"### "_obj_" ("_intReverseCount_")"
			set intReverseCount=intReverseCount+1
		}
	}
	quit intReverseCount
		
CountIndex(pidClass)
	new intCount,obj

	set intCount=0
	set obj="^"_pidClass_"s"
	for { 
		set obj=$query(@obj)
		quit:obj=""
		continue:$qsubscript(obj,1)'=0
		set intCount=intCount+1
	}
	quit intCount

TestIndexOld()
	new idClass,arrIndex,idIndex,obj,objIndex1,i,idKey,blnFound,intTotalErrors,intIndexCount,intCount
	new objPiece,intLoop,strGlobal,objIndex2,strField,intLoop2,objIndex3
	new strPieces,str,blnRepeat,blnIndexFlag,intReverseErrors
	new intErrors,strStatus,blnCanSkip

	$$$VAR
	set intTotalErrors=0
	set intCount=0
	set intIndexCount=0
	
	set strStatus=$$UpdateHeader()
	set idClass="" for { set idClass=$order(^WWW001(0,idClass)) quit:idClass=""
		set intErrors=0
		set intReverseErrors=0
		set blnCanSkip=$$CanSkip(idClass)
		if 'blnCanSkip {
			set intErrors=0
		
			write $extract(idClass_"                                         ",1,50)_$char(13)
			xecute "kill ^CacheTemp"_idClass_"s"
			set intIndexCount=intIndexCount+$$CountIndex(idClass)
			do GetKeys^COMIndex(idClass,.arrIndex)
			set idIndex="" for { set idIndex=$order(arrIndex(idIndex)) quit:idIndex="" 
				set obj="^"_idClass_"(0)"
				for {
					set obj=$query(@obj)
					quit:obj=""
					quit:$qsubscript(obj,1)>0
					break:(idClass="INFIBCHARMATRIX")
					;break:(idClass="INARTK")&&($qsubscript(obj,2)="803")&&($qsubscript(obj,3)="IG02")&&(idIndex=3)
					;break:(idClass="WWW124")&&($qsubscript(obj,2)="WWWWAE")&&($qsubscript(obj,3)="DE")&&($qsubscript(obj,4)="3")
					set objIndex=""
					set blnIndexFlag=1 ;($length(arrIndex(idIndex),",")=1)
					for i=1:1:$length(arrIndex(idIndex),",") {
						if i'=1 set objIndex=objIndex_","
						set idKey=$piece(arrIndex(idIndex),",",i)
						if $extract(idKey)="K" {
							set objIndex=objIndex_$extract($$$Index($translate($piece(obj,",",$extract(idKey,2,99999)+1),"""")),1,150)
						} elseif $extract(idKey)="F" {
							set strField=$piece(@obj,"~",$extract(idKey,2,99999))
							if (strField'[";")&&(blnIndexFlag) set strField=$extract($$$Index(strField),1,150)
							set objIndex=objIndex_strField
						}
					}
				
					if (objIndex[";")&&blnIndexFlag {
						set objIndexTemp=objIndex
						set objIndex=""
						for intLoop=1:1:$length(objIndexTemp,";") {
							set str=$piece(objIndexTemp,";",intLoop)
							if str'="" {
								set str=$$$Index(str)
								;if str'=" " {
									if intLoop'=1 set objIndex=objIndex_";"
									set objIndex=objIndex_str
								;}
							}
						}
					}				
				
					set objIndex3=$piece(objIndex,",",3,99999)
					set objIndex2=$piece(objIndex,",",2)
					set objIndex1=$piece(objIndex,",",1)
					for intLoop1=1:1:$length(objIndex1,";") {
						if $piece(objIndex1,";",intLoop1)'="" {
							set strPiece1=$extract($piece(objIndex1,";",intLoop1),1,150)
							if strPiece1'=objIndex1 {
								;set strPiece1=$$$Index(strPiece1)
								;if $translate(strPiece1," ")'="" set strPiece1=$zstrip(strPiece1,"<>"," ")
							}
							;set strPiece1=$$^WWWKEYBUILD($translate(strPiece1,""""))
							;for intLoop2=1:1:$length(objIndex2,";") {
								;if ($piece(objIndex2,";",intLoop2)'="")||(objIndex2'[";") {
									set strPiece2=$$^WWWKEYBUILD($extract(objIndex2,1,150)_",")
									set strPiece=strPiece1
									if $translate(strPiece2,"""")'="" set strPiece=strPiece_","_strPiece2
									if $translate(objIndex3,"""")'="" set strPiece=strPiece_","_objIndex3
									set strPiece=$$^WWWKEYBUILD($translate(strPiece,""""))
									if idClass="COMViewColumn" {
										set strGlobal="^"_idClass_"s(0,"_idIndex_","_strPiece_","_$piece(obj,",",2,$length(obj,","))
									} else {
										set strGlobal="^"_idClass_"s(0,"_idIndex_","_strPiece_","_$piece(obj,",",2,$length(obj,",")-1)_")"
									}
									;break
									xecute "set blnRepeat=$data(^CacheTemp"_$extract(strGlobal,2,99999)_")"
									if 'blnRepeat {
										set intCount=intCount+1
										xecute "set blnFound=$data("_strGlobal_")"
										if 'blnFound {
											set intErrors=intErrors+1
											write strGlobal,!
										}
										xecute "set ^CacheTemp"_$extract(strGlobal,2,99999)_"="""""
									}
								;}
							;}
						}
					}
				}
			}
			;break
			set intTotalErrors=intTotalErrors+intErrors
			set intReverseErrors=$$Reverse(idClass)
			write idClass_" Count="_intCount_" : Index="_intIndexCount_" : Errors="_intTotalErrors_" Diff="_(intIndexCount-intCount)_" Reverse="_intReverseErrors,!
			xecute "kill ^CacheTemp"_idClass_"s"
		}
		set strStatus=$$UpdateLine(idClass,intErrors+intReverseErrors,blnCanSkip)
		;quit
	}
	kill ^CacheTempTestIndex(YUCI)
	quit intErrors

]]></Routine>
</Export>