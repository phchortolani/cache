<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INSupMastAgreeItem" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INSupMastAgreeItem
#include COMConst
#include INConst
#include COMSYS
 	
OnBlur(&pobjLine)
	;-------------------------------------------------------------------------------
	; Routine to run on blur of a grid cell
	;
	; Params:	pobjLine		: The YFELD value
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 28-Dec-2006	Steve S		SR15341: Created (Copied from REQUISITIONVAR)
	;-------------------------------------------------------------------------------
	new curCost,fltAgreeQty,fltUsedQty,fltAvailQty
	
	set curCost 		= $$$INSupMastAgreeItemCost(pobjLine)
	set fltAgreeQty 	= $$$INSupMastAgreeItemAgreementQty(pobjLine)
	set fltUsedQty 		= $$$INSupMastAgreeItemAppliedQty(pobjLine)
	set fltAvailQty 	= fltAgreeQty - fltUsedQty
	
	set $$$INSupMastAgreeItemAvailableQty(pobjLine) 	= fltAvailQty
	set $$$INSupMastAgreeItemAgreementValue(pobjLine) 	= $$$FCMult2(fltAgreeQty,curCost)
	set $$$INSupMastAgreeItemAppliedValue(pobjLine)		= $$$FCMult2(fltUsedQty,curCost)
	set $$$INSupMastAgreeItemAvailableValue(pobjLine) 	= $$$FCMult2(fltAvailQty,curCost)
	
	quit
	
UpdateAppliedQuantity(pidSupplier,pidAgree,pidItem,pfltQty)
	;-------------------------------------------------------------------------------
	; Updates the used (applied) quantity on an agreement
	;
	; Params:	pidSupplier		: The supplier number
	; 			pidAgree		: The agreement number
	; 			pidItem			: The item number
	; 			pfltQty			: How much to adjust by
	;
	; ByRefs:
	;
	; Returns:	strStatus
	;
	; History:
	; 03-Jan-2007	Steve S		SR15341: Created
	;-------------------------------------------------------------------------------
	new objAgreeLine,strStatus
	
	set objAgreeLine = $get(^INSupMastAgreeItem(YM,pidSupplier,pidAgree,pidItem,1))
	set $$$INSupMastAgreeItemAppliedQty(objAgreeLine) = $$$INSupMastAgreeItemAppliedQty(objAgreeLine) + pfltQty
	
	do OnBlur(.objAgreeLine)
	
	set strStatus = $$$Save("INSupMastAgreeItem",pidSupplier_","_pidAgree_","_pidItem,objAgreeLine,1)
	
	quit strStatus
	
	
OnBeforeSave(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
	; Routine to run before trying to save a grid line
	;
	; Params:	pYKEY		: The YKEY for the gridline
	; 			pYFELD		: The YFELD string
	;
	; Returns:
	;
	; History:
	; 25-Jan-2007	Steve S		SR15341: Store create history properly
	; 03-Jan-2007	Steve S		SR15341: Created
	;-------------------------------------------------------------------------------
	new dteOpen,dteClose,idSupplier,idAgree,idItem
 
	if ($$$INSupMastAgreeItemAgreementQty(pYFELD)<0) {
		set YRETVAL = $listbuild("IN00490")  ;Quantity can not be negative.
	} else {
		set dteOpen	 = $$$INSupMastAgreeItemOpenDate(pYFELD)
		set dteClose = $$$INSupMastAgreeItemCloseDate(pYFELD)
		if (dteOpen'="")&&(dteClose'="")&&(dteOpen>dteClose) {
			set YRETVAL = $listbuild("IN00614") ;Open Date can not be after Close Date.
		} elseif $$GetKey^COMUtilClass(pYKEY,3,3,.idSupplier,.idAgree,.idItem) { //SR15341
			kill ^CacheTempPrevRecord(YUCI,YUSER,idSupplier,idAgree,idItem) // Safeguard
			if $data(^INSupMastAgreeItem(YM,idSupplier,idAgree,idItem)) { // mod'd
				set ^CacheTempPrevRecord(YUCI,YUSER,idSupplier,idAgree,idItem)=$get(^INSupMastAgreeItem(YM,idSupplier,idAgree,idItem,1))
			}
		}
	}
 
	quit
	
	
OnAfterSave(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
	; Routine to run after saving an item line.
	;
	; Params:		pYKEY	: The YKEY value
	; 				pYFELD	: The YFELD value
	;
	; Returns:
	;
	; History:
	; 25-Jan-2007	Steve S		SR15341: Created
	;-------------------------------------------------------------------------------
	new idSupplier,idAgree,idItem,objPrevRec
	
	if $$GetKey^COMUtilClass(pYKEY,3,3,.idSupplier,.idAgree,.idItem) {
		if '$data(^CacheTempPrevRecord(YUCI,YUSER,idSupplier,idAgree,idItem)) { // created
			do AddEntry^COMChangeHistory(YM,YFORM,YBED,pYKEY,$$$Text($listbuild("IN00630",YBED,$$^WWWDATE($horolog),$$^WWWTIME($horolog))))  ;Created by %1 on %2 at %3
		} else {
			set objPrevRec = $get(^CacheTempPrevRecord(YUCI,YUSER,idSupplier,idAgree,idItem))
			if (objPrevRec'=$get(^INSupMastAgreeItem(YM,idSupplier,idAgree,idItem,1))) { // change made
				do AddEntry^COMChangeHistory(YM,YFORM,YBED,pYKEY,$$$Text($listbuild("IN00625",YBED,$$^WWWDATE($horolog),$$^WWWTIME($horolog))))  ;Modified by %1 on %2 at %3
			}
		}			
	
		kill ^CacheTempPrevRecord(YUCI,YUSER,idSupplier,idAgree,idItem)
		
	}
 
	quit
	
 
OnBeforeFormat(pstrYFieldName,pstrText,pobjLine)
	;-------------------------------------------------------------------------------
	; Display field in error with message if data entry is incorrect
	;
	; Params:
	; pstrYFieldName 	: Current Edit Grid field name
	; pstrText			: Current fields content
	; pobjLine			: Current Edit Grid record
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 03-Jan-2007	Steve S		SR15341: Created
	;-------------------------------------------------------------------------------
	new idField,idRow,idCol
 
	$$$GRIDSplitKey(pstrYFieldName,idRow,idCol) 
	set idField 	= $$$GetClassField(YFORM,idCol)
	
	do ValidateGridLine^INSupMastAgreeCommon(pobjLine,idField,$$$FldINSupMastAgreeItemAgreementQty,
															  $$$FldINSupMastAgreeItemOpenDate,
															  $$$FldINSupMastAgreeItemCloseDate)
	
	quit
]]></Routine>
</Export>