<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINAPChequeBook" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINAPChequeBook
	;----------------------------------------------------------------------------
	; History
	; 22-Mar-2005	GRF		Use Boolean Macros/QSave Macros
	; 08-Jul-2003	SCR		Bug Fixes from Code Checking
	;----------------------------------------------------------------------------
#include FINConst
#include COMConst
#include COMSYS
 
OnAfterDataFields(YKEY="",YFELD="")
	;----------------------------------------------------------------------------
	; History
	;  7-Aug-2006	JW		SR14730: Don't check YKEY
	; 21-Feb-2006	SC		SR13975: Fix key validation.
	; 15-Feb-2006	SC		SR13975: Only show grid if valid keys entered. 
	; 16-Jan-2006	SC		SR14016: Swap Cheques, Cancelled. Show Cheques first
	; 						Replaced Used Cheques table with a grid.
	;----------------------------------------------------------------------------
	if YSEITE=1 {
		do ShowGrid(YKEY,"FINAPChequeBookUsed") ;SR14016 .
	} elseif YSEITE=2 {
		do ShowGrid(YKEY,"FINAPChequeBookCancelled")
	}
	quit
 
ShowGrid(pYKEY="",pYFORM)
    ;-------------------------------------------------------------------------------
    ; Show a list and allow adding and removing of cancelled cheques.
    ;
    ; Params:
    ;
    ; Returns:
    ;
    ; History:
	; 05-Dec-2008	GRF		Clarify Enabled test
    ; 11-Jul-2006	JW		SR14730: Added DontUpdateContainer/StoreAll. GRIDStart
    ; 							macro
    ; 17-Jan-2006	SC		SR14016: Add form parameter
    ; 11-Jul-2005	shobby	SR12678 Created
    ;-------------------------------------------------------------------------------
  	new YAUSWAHL
	
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)          = $$$YES
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL)       = 500
	set $$$COMGridEditParameterGridName(YAUSWAHL)            = pYFORM
	set $$$COMGridEditParameterEnabled(YAUSWAHL)             = ($$$WWW120AuthorizationToModifyData(YVOR)'=$$$EnumReadOnly)
	set $$$COMGridEditParameterContainer(YAUSWAHL)           = "FINAPChequeBook"
	set $$$COMGridEditParameterDontUpdateContainer(YAUSWAHL) = $$$YES
	set $$$COMGridEditParameterDontStoreAll(YAUSWAHL)        = $$$YES
	
	$$$GRIDStart(pYFORM,pYKEY)
	
	quit
	
	
GetNextCheque(pidBankAccount,pstrLastChequeNo,blnUseVeryNextNumber=$$$NO,pidPayment="")
	;-------------------------------------------------------------------------------
	; Get the next cheque number based on the cheque books and payments.
	; 
	; History:
	; 23-Jan-2006	SC		SR14036: Use TextChequeLessThan to compare text cheques
	; 20-Jan-2006	SC		SR14036: Use IncTextCheque to increment cheque numbers
	; 03-Dec-2005	PO		SR13948: Introduced ability to force use of very next
	; 							number (Used for prepayments). Also skip used cheque
	; 							numbers for payments that are not set to use very
	; 							next number
	; 18-Jul-2005	RPW		SR12761: Cleaned up unused code
	; 25-Feb-2004	shobby	IsChequeUsed returns a status now.
	; 07-Jul-2003	shobby	Variables
	; 02-Jul-2003	shobby	Creation (TR005529)
	; ------------------------------------------------------------------------------
	new strNextChqNo,objChequeBook,strLastChqNo,blnFound,strFirstChqNo
	new strStatus
	
	set blnFound  = $$$NO
	set strStatus = $$$OK
 
	if blnUseVeryNextNumber {
		set strNextChqNo = $$IncTextCheque(pstrLastChequeNo,1) ;SR14036
		set strStatus    = $$IsChequeUsed(pidBankAccount,strNextChqNo,pidPayment)
	} else {
		set strNextChqNo  = ""
		set strFirstChqNo = ""
		; Provided with the last cheque number, determine a possible next cheque number
		for {
			set strFirstChqNo = $order(^FINAPChequeBook(0,pidBankAccount,strFirstChqNo))
			quit:strFirstChqNo=""
			
			set objChequeBook = $get(^FINAPChequeBook(0,pidBankAccount,strFirstChqNo,1))
			set strLastChqNo  = $$$FINAPChequeBookEndChequeNumber(objChequeBook)
			
			if $$TextChequeLessThan(pstrLastChequeNo,strFirstChqNo) {
				set blnFound     = $$$YES
				set strNextChqNo = strFirstChqNo
			
			} elseif $$TextChequeLessThan(pstrLastChequeNo,strLastChqNo) {
				set blnFound     = $$$YES
				set strNextChqNo = $$IncTextCheque(pstrLastChequeNo,1)
			}
			quit:blnFound
		}
		; Having determined the next possible cheque number check whether the number is used, if number is used
		; keep stepping through the cheque numbers to locate the first available number.
		; 
		; This means when the very next cheque is not required ie. payment method is cheque and cheque number is auto allocated,
		; the only error ever reported will be that there are no more cheques available in the cheque register.
		if $$$ISERR($$IsChequeUsed(pidBankAccount,strNextChqNo,pidPayment)) {
			for {
				set strNextChqNo = $$IncTextCheque(strNextChqNo,1)
				if $$TextChequeLessThan(strLastChqNo,strNextChqNo) {
					set strFirstChqNo = $order(^FINAPChequeBook(0,pidBankAccount,strFirstChqNo))
					if strFirstChqNo = "" {
						set strNextChqNo = "" ; Set blank because no cheque found
						quit
					}
					set objChequeBook  = $get(^FINAPChequeBook(0,pidBankAccount,strFirstChqNo,1))
					set strLastChqNo   = $$$FINAPChequeBookEndChequeNumber(objChequeBook)
					if $$TextChequeLessThan(strNextChqNo,strFirstChqNo) {
						set strNextChqNo = strFirstChqNo
					}
				}
				quit:$$$ISOK($$IsChequeUsed(pidBankAccount,strNextChqNo,pidPayment))
			}
		}
	}
	
	if $$$ISOK(strStatus) {
		if strNextChqNo="" {
			set strStatus = $listbuild("Fin00179")  ; "No more cheques available, add more to Cheque Register."
		}
		set pstrLastChequeNo = strNextChqNo
	}
	
	quit strStatus
	
	
IsChequeUsed(pidAccount,pstrChequeNumber,pidPayment)
	;-------------------------------------------------------------------------------
	; Routine to determine if a cheque has been used for this account
	; 
	; History:
	; 16-Jan-2006	SC		SR14026: Maintain Cheque Numbers for Cancelled Cheques.
	; 							Determine if a used Cheque Number is valid.
	;  9-Nov-2005	JW		SR13775: Fixed null check on account
	; 29-aug-2005 	MS		Added check for pidAccount and pstrChequeNumber being undefined/null
	; 26-Aug-2005	Steve S	SR12761: Pass in a payment number to skip
	; 18-Jul-2005	RPW		SR12761: Removed unused code with new message we do not
	; 							need to get the supplier details anymore.
	; 13-Jul-2005	shobby	SR12678 : Check if the Cheque has been cancelled.
	; 25-Feb-2004	shobby	Returns a status message.
	; 02-Jul-2003	shobby	Creation (TR005529)
	; ------------------------------------------------------------------------------
	new strPaymentNumber,objFINAPPayment,strStatus,objFINAPPaymentLine,strLineNumber,idSupplier
	new objFINAPSupplier,strSupplier,temp,intLines,intCancelled,blnPostChequeExists
 	
 	set strStatus    = $$$OK
 	set intLines     = 0
 	set intCancelled = 0
 	set blnPostChequeExists = $$$NO
 	
	if ($get(pstrChequeNumber)'="") && ($get(pidAccount)'="") {
		;was cheque number manually cancelled?
		if $data(^FINAPChequeBookCancelleds(0,1,pstrChequeNumber,pidAccount)) {  ; CHQ Manually marked 'Used'    ; FIXME : $$$Index
			set strStatus = $listbuild("Fin00845",pstrChequeNumber)   ; "Cheque number '%1' has been cancelled."
		
		} else {
			set strPaymentNumber = ""
			for {
				set strPaymentNumber = $order(^FINAPPaymentLines(0,2,pstrChequeNumber,strPaymentNumber))
				quit:(strPaymentNumber="")||($$$ISERR(strStatus)) ;SR14026 loop through all CHQs.
				continue:($get(pidPayment)'="")&&(pidPayment=strPaymentNumber) ;SR12761
				
				set objFINAPPayment = $get(^FINAPPayment(0,strPaymentNumber,1))
				if $$$FINAPPaymentBankAccount(objFINAPPayment)=pidAccount {
					set strLineNumber = $order(^FINAPPaymentLines(0,2,pstrChequeNumber,strPaymentNumber,""))
					
					if ($$$FINAPPaymentLineStatus($get(^FINAPPaymentLine(0,strPaymentNumber,strLineNumber,1)))) '= ($$$EnumFINSYSSTATUSCancelled){	
						set strStatus = $listbuild("Fin00082",pstrChequeNumber,strPaymentNumber)  ;Cheque number %1 already used in payment run %2.
						
					} elseif '($$$FINGeneralSetupReusecancelledcheques($get(^FINGeneralSetup(0,0,1)))) {
						set strStatus = $listbuild("Fin00951",pstrChequeNumber,strPaymentNumber)	;Cheque Number %1 cancelled in Supplier Payment %2.  Re-Use Cancelled Cheques ´Disabled´.
					}
 				}
			}
		}
	}					
					
 	quit strStatus
 	
 	
GuessNextNumber(pintNumber)
	;-------------------------------------------------------------------------------
	;
	; History
	; 07-Jul-2003	shobby	Variables
	;-------------------------------------------------------------------------------
	new intLoop,strChar,blnContinue,strLeadingZeros,strPrefix,intNumberLength
	new intNumber
	
	set strLeadingZeros = ""
	set strPrefix       = ""
	set intNumber       = ""
	
	for intLoop=1:1 {
		quit:$extract(pintNumber,intLoop)=""
		
		set strChar     = $extract(pintNumber,intLoop)
		set blnContinue = $$$YES
		if strLeadingZeros="" {
			if '$find("1234567890",strChar) {
				set strPrefix   = strPrefix_strChar
				set blnContinue = $$$NO
			}
		}
		if (intNumber="") && (blnContinue) {
			if strChar=0 {
				set strLeadingZeros = strLeadingZeros_"0"
				set blnContinue     = $$$NO
			}
		}
		if blnContinue set intNumber = intNumber_strChar
	}
	set intNumberLength = $length(strLeadingZeros_intNumber)
	set intNumber       = strPrefix_$tr($j(intNumber+1,intNumberLength)," ","0")
	quit intNumber
	
	
GetLastNumber(pidBankAccount)
	;---------------------------------------------------------------------------
	;Returns the highest Used Cheque Number in cheque books for pidBankAccount.
	;If no cheque numbers used, will return "".
	;
	; History:
	; 17-Jan-2007	JW		SR15393: Reverted SR14743.
	; 07-Aug-2006	RPW		SR14867: If there are no records for this bank account, just quit.
	; 10-Jul-2006	RPW		SR14743: Cache the last good known cheque/prepayment information.
	; 10-Feb-2006	SC		SR14036: Allow searching to include Alphanumeric cheques.
	; 01-Dec-2005	PO		SR13931: Take prepayments into account when determining last cheque number
	; 02-Jul-2003	shobby	Complete reworking (TrackRecord 005529)
	; 27-Jun-2003	shobby	Wouldn't find first check number. If we don't find
	; 							a last cheque, don't assume the number in the
	; 							cheque book, assume "" (TR005486)
	;---------------------------------------------------------------------------
	new blnFound,intChequeNumber,idPayment,intPrepayChqNo,intPriorPrepayChqNo,objFINAPPayment,blnFirstTimeThrough ; SR13931
	// new intStart,blnIgnoreStart
 
	set blnFound        = $$$NO
	set intChequeNumber = ""
	
	quit:'$data(^FINAPPayments(0,51,$$$Index(pidBankAccount))) intChequeNumber
	
	set blnFirstTimeThrough = $$$YES
	set intPrepayChqNo      = 0
	set intPriorPrepayChqNo = 0
	
	if pidBankAccount'="" {
		for {
			set intChequeNumber = $order(^FINAPPaymentLines(0,2,intChequeNumber),-1)   ; FIXME : $$$Index?
			continue:intChequeNumber=" "
			quit:intChequeNumber=""
						
			set idPayment = ""
			for {
				set idPayment = $order(^FINAPPaymentLines(0,2,intChequeNumber,idPayment))
				quit:idPayment=""
				
				set objFINAPPayment = $get(^FINAPPayment(0,idPayment,1)) ; SR13931
				
				if pidBankAccount=$$$FINAPPaymentBankAccount(objFINAPPayment) { ; SR13931
					;
					; Return the last cheque number from a payment of type NOT prepayment (ie. Cheque), unless
					; there are no free cheque numbers between the last cheque number used for a payment of type
					; NOT prepayment and payment of type prepayment.
					
					; TODO: What if cheque numbers jumped when performing payment of type cheque
					if $$$FINAPPaymentPaymentMethod(objFINAPPayment) = $$$EnumFINARBANKLINEMETHODPrePayment {
						if blnFirstTimeThrough || ($$IncTextCheque(intPriorPrepayChqNo,-1) '= intChequeNumber) {
							set intPriorPrepayChqNo = intChequeNumber
							set intPrepayChqNo      = intChequeNumber
						} else {
							set intPriorPrepayChqNo = intChequeNumber
						}
					} else {
						set blnFound = $$$YES
						
						if $$IncTextCheque(intPriorPrepayChqNo,-1) = intChequeNumber { ;SR14036
							set intChequeNumber = intPrepayChqNo
						}
					}
					set blnFirstTimeThrough = $$$NO
				}
				quit:blnFound
			}
			quit:blnFound
		}
	}
	
	if 'blnFound set intChequeNumber = ""
	
	quit intChequeNumber
 
 
UpdateLastChequeNumber(pidChequeBook="",pobjChequeBook="",pstrNewChequeBook="",pidExistingRecord="")
	;------------------------------------------------------------------------
	; Change the last cheque number when a different bank account is selected.
	;
	; History:
	; 16-Jun-2005	PO		Removed unnecessary set %TXT(1)=""
	; 24-Mar-2005	Paul K	Added params
	; 06-Jan-2005	Steve S	SR10648 
	; 						*Added test to dynamically update Cheque No.
	; 						*Added $$$Fld macro usage for %TXT(1) updating
	; 28-Oct-2004	PO		SR10781 protection against intNumber being undefined
    ; 03-May-2004   Shobby  Replaced YKOMMA with ","
	; 30-Jun-2003	shobby	Recalculated each time the record is loaded. (TR005413)
	; 29-Jun-2003	shobby	Creation (TR005413)
	;------------------------------------------------------------------------
	new intNumber
	
	set intNumber = ""
	
	if pidChequeBook'="" {  ; Existing records
		set intNumber = $$GetLastNumber^FINAPChequeBook($piece(pidChequeBook,",",1))
		set %TXT(1)   = "#Y"_YFORM_"D"_$$$FldFINAPChequeBookCurrentChequeNumber_Y_intNumber
	}
	
	if (pstrNewChequeBook'="")&&(pidExistingRecord'="") {  ; only change new instances
		set intNumber = $$GetLastNumber^FINAPChequeBook(pstrNewChequeBook)
		set %TXT(1)   = "#Y"_YFORM_"D"_$$$FldFINAPChequeBookCurrentChequeNumber_Y_intNumber
	}
	
	if (pobjChequeBook'="") {
		set $$$FINAPChequeBookCurrentChequeNumber(pobjChequeBook) = intNumber
	}
	
	quit
	
	
UpdateChequeNumber(pobjFINAPPayment,pobjFINAPPaymentLine)
	;-----------------------------------------------------------------------------
	; Routine to update the last cheque number in ^FINAPChequeBook
	; 
	; History
	; 23-Jan-2006	SC		SR14036: Use TextChequeLessThan to compare text cheques
    ; 03-May-2004   Shobby  Replaced YKOMMA with ","
	; 29-Jul-2003	shobby	Creation (TR005711)
	;-----------------------------------------------------------------------------
	new intChequeNumber,intFirstChqNo,objChequeBook,strAccount,strStatus
	
	set intChequeNumber = $$$FINAPPaymentLineChequeNumber(pobjFINAPPaymentLine)
	set strAccount      = $$$FINAPPaymentBankAccount(pobjFINAPPayment)
	set intFirstChqNo   = $$GetChequeBook(strAccount,intChequeNumber)
 	
	if $$TextChequeLessThan(0,intFirstChqNo) {
		set objChequeBook = $get(^FINAPChequeBook(0,strAccount,intFirstChqNo,1))
		set $$$FINAPChequeBookCurrentChequeNumber(objChequeBook) = intChequeNumber
		set strStatus = $$$Save("FINAPChequeBook",strAccount_","_intFirstChqNo,objChequeBook,$$$YES)
	}
	
	quit $$$OK
	
GetChequeBook(pstrAccount,pintChequeNumber)
	;------------------------------------------------------------------------------
	; Find out the cheque book that the specified cheque belongs to
	; 
	; History
	; 29-Jul-2003	shobby	Creation  (TR005711)
	;-------------------------------------------------------------------------------
	new intChequeNumber
	
	set intChequeNumber = 0
	if $data(^FINAPChequeBook(0,pstrAccount,pintChequeNumber,1)) {
		set intChequeNumber = pintChequeNumber
	}
	if intChequeNumber=0 {
		set intChequeNumber = $order(^FINAPChequeBook(0,pstrAccount,pintChequeNumber),-1)
	}
	
	quit intChequeNumber
	
	
OnBeforeSave(pYFELD,pKey)
	;------------------------------------------------------------------------------
	; make sure that this cheque book isn't in the same range as any other cheque book.
	;
	; History
	; 22-Feb-2006	SC		SR14036: Validation checking on First/Last Cheque Book Nums.
	; 23-Jan-2006	SC		SR14036: Use TextChequeLessThan to compare text cheques
	; 05-Feb-2004	shobby	Creation (TR006515)
	;-----------------------------------------------------------------------------
	new intFirstChqNoNew,intLastChqNoNew,idBankAccount
	new intFirstChqNo,intLastChqNo,strStatus
	
	set strStatus = $$$GRIDSave(pKey)
 	
 	if $$$ISOK(strStatus) {
		set idBankAccount    = $$$KEY1($get(pKey))
		set intFirstChqNoNew = $$$KEY2($get(pKey))
		set intLastChqNoNew  = $$$FINAPChequeBookEndChequeNumber(pYFELD)
		
		;Check for any overlap in other cheque books.	
		set intFirstChqNo = ""
		for {
			;iterate through Cheque Numbers
			set intFirstChqNo = $order(^FINAPChequeBook(0,idBankAccount,intFirstChqNo))
			quit:intFirstChqNo=""
	 		
			if intFirstChqNo'=intFirstChqNoNew {   ; Don't check against itself.
				set intLastChqNo = $$GetLastChequeNumber(idBankAccount,intFirstChqNo)
				if $$TextChequeLessThan(intFirstChqNo,intFirstChqNoNew) {
					if $$TextChequeLessThan(intFirstChqNoNew,intLastChqNo) || (intFirstChqNoNew=intLastChqNo) {
						set strStatus = $listbuild("Fin00227",idBankAccount,intFirstChqNo,intLastChqNo)
					}   ; "Can't Save.  This Cheque book has cheque numbers that overlap with '%1' (%2-%3)"
				
				} else {
					if '$$TextChequeLessThan(intLastChqNoNew,intFirstChqNo) {
						set strStatus = $listbuild("Fin00227",idBankAccount,intFirstChqNo,intLastChqNo)
					}   ; "Can't Save.  This Cheque book has cheque numbers that overlap with '%1' (%2-%3)"
				}
			}
			quit:$$$ISERR(strStatus)
		}
		
		if $$$ISOK(strStatus) {  ;no overlap, check for valid Last Num
			if '$$IsChequeBookLastNumberValid(intFirstChqNoNew,intLastChqNoNew) {
				set strStatus = $listbuild("Fin00984")
			}  ; "First and Last Cheque Numbers not valid. Must use same alphanumeric prefixes (if any), must have same lengths, and First cannot be greater than Last."
		}
	}
	if $$$ISERR(strStatus) {
		set Q=$$$QDontSave
		do ReturnError^COMUtils(strStatus)
	}
	quit
	
GetLastChequeNumber(pidBankAccount,pintFirstChqNo)
	;-------------------------------------------------------------------------------
	;
	; Returns:
	;
	; History:
	; 05-Feb-2004	shobby	Creation
	;-------------------------------------------------------------------------------
	new intLastChqNo,objChequeBook
	
	set intLastChqNo = ""
	if (pidBankAccount'="") && (pintFirstChqNo'="") {
		set objChequeBook = $get(^FINAPChequeBook(0,pidBankAccount,pintFirstChqNo,1))
		if objChequeBook'="" {
			set intLastChqNo = $$$FINAPChequeBookEndChequeNumber(objChequeBook)
		}
	}
	
	quit intLastChqNo
	
	
CanDelete(pYKEY)
	;------------------------------------------------------------------------------
	; Tests before an object is deleted
	; 
	; History
	; 03-Mar-2006	JW&SC	SR14036: Check new data structure
    ; 03-May-2004  	Shobby  Replaced YKOMMA with ","
	; 27-Feb-2004	shobby	Fixed problem with Status checking of IsChequeUsed.
	; 25-Feb-2004	shobby	IsChequeUsed now returns a status rather than a boolean
	; 09-Jul-2003	shobby	Creation (TR005570)
	; -----------------------------------------------------------------------------
	new blnResult,strNumber,intFirstCheque,intLastCheque
	new intCheque,strStatus
	
	set strStatus = $$$OK
	
	if pYKEY'="" {   ; Check that the cheque book is not used in payments.
		set strNumber      = $$$KEY1(pYKEY)
		set intFirstCheque = $$$KEY2(pYKEY)
		
		if $data(^FINAPChequeBookUsed(0,strNumber,intFirstCheque,1)) {
			set strStatus = $listbuild("Fin00191") ; "Cannot delete! Cheque Book contains used cheques."
		}
	}
	
	if $$$ISERR(strStatus) {
		do ReturnError^COMUtils(strStatus)
		set Q=$$$QDontSave
	}
	quit strStatus
	
	
IncTextCheque(pstrTextCheque,pintIncrement=1) 
    ;-------------------------------------------------------------------------------
    ;
    ; Params: Cheque Number (as type Text)
    ;
    ; ByRefs:
    ;
    ; Returns: Next Cheque Number with same prefix. If no more cheque numbers, returns null.
    ;
    ; History:
    ; 17-Jan-2007	JW		SR15393: Handle cheques with no prefix.
    ; 30-Jan-2006	SC		SR14036: Noticed afterwards, "" + 1 would return "". Fixed so "" + 1 = 1.
    ; 23-Jan-2006	SC		SR14036: If no increment specified, default add +1.
    ; 20-Jan-2006	SC		SR14036: Created
    ;-------------------------------------------------------------------------------
	new intCharCounter,strChar,intNumLength,intPrefixLength,intNum,strPrefix,strNextCheque
	
	set strNextCheque=""
 
	if pstrTextCheque="" set pstrTextCheque = 0
	
	if +pstrTextCheque=pstrTextCheque {		; if no prefix, just add to it.
		set strNextCheque = pstrTextCheque + pintIncrement
		
	} else {
	 	set intNumLength = $$CountLengthChequeNum(pstrTextCheque)
		set intPrefixLength = $length(pstrTextCheque)-intNumLength
 
		set strPrefix = $extract(pstrTextCheque,1,intPrefixLength)
		set intNum =$extract(pstrTextCheque,intPrefixLength+1,$length(pstrTextCheque))
		
		;if increment not specified, default add 1.
		set intNum = intNum + pintIncrement
	 	
		;if next cheque number isn't too long
		if $length(intNum)<= intNumLength {
			; next cheque = prefix + number, justified and padded with zeros if required.
			set strNextCheque = strPrefix_$translate($justify(intNum,intNumLength)," ",0)
		}
	}
	;returns null if no next cheque number
	quit strNextCheque
  
 
TextChequeLessThan(pstrCheque1, pstrCheque2)
    /*-------------------------------------------------------------------------------
    ; Is pstrCheque2 less than pstrCheque1 ?
    ;
    ; Params: 2 Text Cheques
    ;
    ; ByRefs:
    ;
    ; Returns: Applies operator to the cheques, returns result.
    ;
    ; History:
    ;  3-Mar-2006	JW&SC	SR14036: Cleaned up to use blnStop
    ; 23-Jan-2006	SC		SR14036: Created
    ;-------------------------------------------------------------------------------*/
 	new intCharCounter,strChar1,strChar2,intNumLength,intPrefixLength,strPrefix 
	new blnLessThan,strPrefix1,intNum1,intPrefixLength2,strPrefix2,intNum2,strNextCheque
	new blnStop
  	
 	set blnLessThan = $$$NO ;default NO.
 	
 	; separate prefix + num - first cheque
 	set intNumLength    = $$CountLengthChequeNum(pstrCheque1) 	
	set intPrefixLength = $length(pstrCheque1)-intNumLength
	set strPrefix1      = $extract(pstrCheque1,1,intPrefixLength)
	set intNum1         = $extract(pstrCheque1,intPrefixLength+1,$length(pstrCheque1))
 
 
  	; separate prefix + num - second cheque
 	set intNumLength     = $$CountLengthChequeNum(pstrCheque2)
	set intPrefixLength2 = $length(pstrCheque2)-intNumLength
	set strPrefix2       = $extract(pstrCheque2,1,intPrefixLength2)
	set intNum2          = $extract(pstrCheque2,intPrefixLength2+1,$length(pstrCheque2))
 
	; compare prefixes
	
	; translate prefixes
	set strPrefix1 = $zconvert(strPrefix1,"U")  
	set strPrefix2 = $zconvert(strPrefix2,"U") 
 	
	; loop through chars
	set blnStop        = $$$NO
	set intCharCounter = ""
	for {
		set intCharCounter = intCharCounter+1
 		
 		// When past prefix, compare numbers
		if (intCharCounter>intPrefixLength) && (intCharCounter>intPrefixLength2) { ;prefix same, check num
			
			if intNum1 < intNum2 {
				set blnLessThan = $$$YES
			}	
			set blnStop = $$$YES
			
		} else {
	 		// Check a char of the prefix
	 		set strChar1 = $extract(strPrefix1,intCharCounter)
			set strChar2 = $extract(strPrefix2,intCharCounter)
			
			if '($ascii(strChar1) >= 65) && '($ascii(strChar1) <= 90) set strChar1=""	;if Char valid 
			if '($ascii(strChar2) >= 65) && '($ascii(strChar2) <= 90) set strChar2=""
			
			if $ascii(strChar1) < $ascii(strChar2){	;if condition true, set YES
				set blnLessThan = $$$YES
				set blnStop     = $$$YES
				
			} elseif $ascii(strChar1) '= $ascii(strChar2){		;condition false, set NO
				set blnStop = $$$YES
			}													;else cant tell, get next char
		}
		quit:blnStop
	}
	
	quit blnLessThan
	
	
CountLengthChequeNum(pstrCheque) ;private
    /*-------------------------------------------------------------------------------
    ; Iterates through a string, separates number suffix and returns length.
    ; Number suffix is the all numbers after the last non-numeric char.
    ; ie. Cheque: "AA00A789" - Suffix is "789". Returns num length, 3.
    ;
    ; Params: string.
    ;
    ; ByRefs:
    ;
    ; Returns: Length of num suffix.
    ;
    ; History:
    ; 17-Mar-2006	JW		SR14444: Sped up.
    ; 25-Jan-2006	SC		SR14036: Created
    ;-------------------------------------------------------------------------------*/
	new strCheque
 	
	set strCheque = pstrCheque
	for {
		quit:strCheque=""
		quit:($isvalidnum(strCheque))
		
		set $extract(strCheque) = ""
	}
	quit $length(strCheque)
	
 
IsChequeBookLastNumberValid(pintFirstCheque, pintLastCheque)
	;-------------------------------------------------------------------------------
	; Validation checking for user-entered first/last cheque book numbers.
	; First and Last Cheque Numbers must have same alphanumeric prefix, Last Num must 
	; be greater than First Num, and Last Num cannot exceed length of first num.
	;
	; Params: First + Last Cheque Book Numbers
	;
	; ByRefs:
	;
	; Returns: blnStatus, $$$YES if validation passes, otherwise $$$NO.
	;
	; History:
	; 07-Mar-2006 	SC		SR14036: Validate ChequeNumber+ChequeBookFirstNum. 
 	; 							If not nums, must be same length.
	; 22-Feb-2006	SC		SR14036: Created
	;-------------------------------------------------------------------------------
	new intNumLength,intPrefixLength,strPrefix1,intNum1,intPrefixLength2
	new strPrefix2,intNum2,intMaxNum,blnStatus
 	
 	set blnStatus = $$$YES
 	
 	;if both numbers
 	if (+pintFirstCheque=pintFirstCheque) && (+pintLastCheque=pintLastCheque) {
	 	if pintFirstCheque>pintLastCheque {
	 		set blnStatus = $$$NO
	 	}
 
	;if not both numbers	 	
 	} else {
	 	
	 	;SR14036
	 	;if not same length, raise error
	 	if $length(pintFirstCheque)'=$length(pintLastCheque) {
			set blnStatus = $$$NO
		
		;same length, check prefixes match
	 	} else {	
		 	; separate prefix + num - first cheque
			set intNumLength    = $$CountLengthChequeNum(pintFirstCheque) 	
			set intPrefixLength = $length(pintFirstCheque)-intNumLength
			set strPrefix1      = $extract(pintFirstCheque,1,intPrefixLength)
			set intNum1         = $extract(pintFirstCheque,intPrefixLength+1,$length(pintFirstCheque))
		 	
			set intMaxNum = $translate($justify("",intNumLength)," ",9)	
		 
		  	; separate prefix + num - second cheque
		 	set intNumLength     = $$CountLengthChequeNum(pintLastCheque)
			set intPrefixLength2 = $length(pintLastCheque)-intNumLength
			set strPrefix2       = $extract(pintLastCheque,1,intPrefixLength2)
			set intNum2          = $extract(pintLastCheque,intPrefixLength2+1,$length(pintLastCheque))
		 
			
			; if prefixes dont match, LastCheque exceeds intMaxNum, or LastCheque
			; less than FirstCheque, then not valid and return $$$NO.
			if (strPrefix1'=strPrefix2) || (intNum2>intMaxNum) || (intNum2<intNum1) {
				set blnStatus = $$$NO
			}
	 	}
 	}
	
	quit blnStatus
	
]]></Routine>
</Export>