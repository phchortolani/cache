<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINARHCInvoiceTransaction" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINARHCInvoiceTransaction ;AR Invoice Transaction Health Check
	#Include FINHC
	#define Check "^CacheTemp(YUSER,""FINARHCInvoiceTransaction"")"


CheckBatchLinesZCRC(StartDate="",EndDate="",Location="",Level="",Result,blnStandAlone=$$$NO)
	;-------------------------------------------------------------------------------
	; Creates a checksum of FININTBatchLine that should create FINARInvoiceTran
	;
	; Returns:
	;
	; History:
	; 14-Jun-2005		shobby		Reference on batch line may include invoice number as well as customer. Use only first piece SR7576
	; 21-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
 	;
	new Depth,Amt,Hash,HashValue
	new idBatch,idLine,idCustomer,objFININTBatch,objFINARInvoice,arrTypes,strType
	new idCustomerEx,idCustomerLast,objFININTBatchLine
	
	kill Result  				; Clear Result
	if $get(Y)="" d ^WWWVAR
	if 'blnStandAlone kill @$$$Check
	set Depth=$length(Level) 	; Set the detail depth
	
	do GetInterfaceTypes^FINARHCInvoice("AR",.arrTypes)
	set strType=""
	for {
		set strType=$order(arrTypes(strType))
		quit:strType=""
		set idCustomer=Level	; Set the idFINGLAccount to Start at the Level ( Optimisation )
		
		if (idCustomer'="")&&($data(^FININTBatchLines(YM,2,strType,idCustomer))) {	; If the Start Account exsits, go back one
			set idCustomer=$order(^FININTBatchLines(YM,2,strType,idCustomer),-1) 	
		}
		
		for {											; Start of the Loop
			set idCustomer=$order(^FININTBatchLines(YM,2,strType,idCustomer))
			quit:idCustomer=""
			if $extract(idCustomer,1,Depth)'=Level {  					; If the Customer is outside the Level
				if (+Level'=Level)||(+idCustomer'=idCustomer) { 	; If it is a String Quit
					quit
				} else { 			; Do number checking
					set idCustomerLast=idCustomer
					; Pad out the Number with zeros
					; Example if the Level is 13 Check 13, 130, 1300, 13000 etc.
					set idCustomer=Level_$translate($justify("",$Length(idCustomer)-Depth)," ","0")
					if idCustomerLast>idCustomer set idCustomer=idCustomer_"0" ; If the Customer is Greater than the Level add an zero.
					; If the Account exists, go back one
					if (idCustomer'="")&&($data(^FININTBatchLines(YM,2,strType,idCustomer))) set idCustomer=$order(^FININTBatchLines(YM,2,strType,idCustomer),-1)
				}
			} else {				; Record the Info
				set idBatch=""
				for {
					set idBatch=$order(^FININTBatchLines(YM,2,strType,idCustomer,idBatch))
					quit:idBatch=""
					set idLine=""
					set objFININTBatch=$get(^FININTBatch(YM,idBatch,1))
					if $$$FININTBatchPostedDate(objFININTBatch)'="" {
						for {
							set idLine=$order(^FININTBatchLines(YM,2,strType,idCustomer,idBatch,idLine))
							quit:idLine=""
							set objFININTBatchLine=$get(^FININTBatchLine(YM,idBatch,idLine,1))
							set idCustomerEx=$piece($$$FININTBatchLineReference(objFININTBatchLine),",",1) ;SR7576
							set $piece(@$$$Check@(idCustomerEx,idBatch,idLine),Y,1)=1
						}
					}
				}
			}
		}
	}
	do CreateHashTable(1,.Result,Depth)
	Quit 1


CheckTransactionsZCRC(StartDate="",EndDate="",Location="",Level="",Result,blnStandAlone=$$$NO)
	;-------------------------------------------------------------------------------
	; Creates a checksum of FINARInvoiceTran that have been created by FININTBatchLine
	;
	; Returns:
	;
	; History:
	; 27-May-2004		shobby		Customer must come from the object not the index.
	; 21-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
 	;
	new Depth,Amt,Hash,HashValue
	new idBatch,idLine,idCustomer,objFININTBatch,objFINARInvoice,idInvoice,idNumber
	new objFINARInvoiceTran,idCustomerLast
	
	kill Result  				; Clear Result
	if $get(Y)="" d ^WWWVAR
	if 'blnStandAlone kill @$$$Check
	set Depth=$length(Level) 	; Set the detail depth
	set idCustomer=Level	; Set the idFINGLAccount to Start at the Level ( Optimisation )
	
	if (idCustomer'="")&&($data(^FINARInvoiceTran(YM,idCustomer))) {	; If the Start Account exsits, go back one
		set idCustomer=$order(^FINARInvoiceTran(YM,idCustomer),-1) 	
	}
	
	for {											; Start of the Loop
		set idCustomer=$order(^FINARInvoiceTran(YM,idCustomer))
		quit:idCustomer=""
		if $extract(idCustomer,1,Depth)'=Level {  					; If the Customer is outside the Level
			if (+Level'=Level)||(+idCustomer'=idCustomer) { 	; If it is a String Quit
				quit
			} else { 			; Do number checking
				set idCustomerLast=idCustomer
				; Pad out the Number with zeros
				; Example if the Level is 13 Check 13, 130, 1300, 13000 etc.
				set idCustomer=Level_$translate($justify("",$Length(idCustomer)-Depth)," ","0")
				if idCustomerLast>idCustomer set idCustomer=idCustomer_"0" ; If the Customer is Greater than the Level add an zero.
				; If the Account exists, go back one
				if (idCustomer'="")&&($data(^FINARInvoiceTran(YM,idCustomer))) set idCustomer=$order(^FINARInvoiceTran(YM,idCustomer),-1)
			}
		} else {				; Record the Info
			set idInvoice=""
			for {
				set idInvoice=$order(^FINARInvoiceTran(YM,idCustomer,idInvoice))
				quit:idInvoice=""
				set idNumber=""
				for {
					set idNumber=$order(^FINARInvoiceTran(YM,idCustomer,idInvoice,idNumber))
					quit:idNumber=""
					set objFINARInvoiceTran=$get(^FINARInvoiceTran(YM,idCustomer,idInvoice,idNumber,1))
					set idBatch=$$$FINARInvoiceTranInterfaceBatch(objFINARInvoiceTran)
					set idLine=$$$FINARInvoiceTranInterfaceBatchLine(objFINARInvoiceTran)
					;set $piece(@$$$Check@(idCustomer,idBatch,idLine),Y,2)=$piece($get(@$$$Check@(idCustomer,idBatch,idLine)),Y,2)+1
					if $piece($get(@$$$Check@(idCustomer,idBatch,idLine)),Y,2)'="" {
						set $piece(@$$$Check@(idCustomer,idBatch,idLine),Y,2)= $piece(@$$$Check@(idCustomer,idBatch,idLine),Y,2)_YKOMMA
					}
					set $piece(@$$$Check@(idCustomer,idBatch,idLine),Y,2)=$piece($get(@$$$Check@(idCustomer,idBatch,idLine)),Y,2)_idInvoice_"("_idNumber_")"
				}
				
			}
		}
	}
	do CreateHashTable(2,.Result,Depth)
	Quit 1


CreateHashTable(pstrType,Result,Depth)
    ;-------------------------------------------------------------------------------
    ; Turn the table sorted by Batch and Line into a Hash Table
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Jun-2004	shobby	 Removed the 'piece' check.
    ; 21-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idCustomer,idBatch,idLine,Hash,HashValue
	set idCustomer=""
	for {
		set idCustomer=$order(@$$$Check@(idCustomer))
		quit:idCustomer=""
		set idBatch=""
		for {
			set idBatch=$order(@$$$Check@(idCustomer,idBatch))
			quit:idBatch=""
			set idLine=""
			for {
				set idLine=$order(@$$$Check@(idCustomer,idBatch,idLine))
				quit:idLine=""
				;if $piece(@$$$Check@(idCustomer,idBatch,idLine),Y,pstrType)=1 {
					set Result("Total")=$get(Result("Total"))+1
					set Hash=$extract(idCustomer,1,Depth+1)
					if Hash="" set Hash="?"
					set HashValue=$zcrc(idCustomer_"="_idBatch_","_idLine,7)
					set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
				;}
			}
		}
	}
	Quit 1


Check(StartDate="",EndDate="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; Compare the results of the Two Part checks above.  Used if there is a problem.
    ;
    ; Returns:
    ;
    ; History:
    ; 24-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new strStatus,idCustomer,idBatch,idLine,blnInvoiceTran,blnBatchLine
	
	if $get(Y)="" d ^WWWVAR
	set strStatus=$$$OK
	kill @$$$Check
	kill Result

	do CheckTransactionsZCRC(StartDate,EndDate,Location,Level,.Result,$$$YES)
	do CheckBatchLinesZCRC(StartDate,EndDate,Location,Level,.Result,$$$YES)
	kill Result

	set idCustomer=""
	for {
		set idCustomer=$order(@$$$Check@(idCustomer))
		quit:idCustomer=""
		set idBatch=""
		for {
			set idBatch=$order(@$$$Check@(idCustomer,idBatch))
			quit:idBatch=""
			set idLine=""
			for {
				set idLine=$order(@$$$Check@(idCustomer,idBatch,idLine))
				quit:idLine=""
				set blnBatchLine  =$piece($get(@$$$Check@(idCustomer,idBatch,idLine)),Y,1)
				set blnInvoiceTran=$piece($get(@$$$Check@(idCustomer,idBatch,idLine)),Y,2)
				if '(blnBatchLine&&($length(blnInvoiceTran,YKOMMA)=1)&&(blnInvoiceTran'="")) {
					if blnBatchLine {
						if blnInvoiceTran="" {
							set Result("Hash",$$$ErrorNo(Result("Errors")))="Invoice Transaction for ^FININTBatchLine("_YM_YKOMMA_idBatch_YKOMMA_idLine_YKOMMA_"1) is missing."
						} elseif $length(blnInvoiceTran,YKOMMA)>1 {	
							set Result("Hash",$$$ErrorNo(Result("Errors")))="Multiple Invoice Transactions for ^FININTBatchLine("_YM_YKOMMA_idBatch_YKOMMA_idLine_YKOMMA_"1) - "_blnInvoiceTran
						}
					} else {
						set Result("Hash",$$$ErrorNo(Result("Errors")))="^FININTBatchLine("_YM_YKOMMA_idBatch_YKOMMA_idLine_YKOMMA_"1) is missing."
					}
					set strStatus='$$$OK
				}
			}
		}
	}

	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}
	
	;kill @$$$Check
	quit strStatus
]]></Routine>
</Export>