<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWWDATE1" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
WWWDATE1(YA,pstrFormat="") ; defaults to use GetDateFormat^COMUtilLocale
	;WWWDATE1(YA) ; Original
	;WWWDATE1(YA,pstrFormat="DD.MM.YYYY")   ; proposal to handle hardcoded calls for first/last day based on this format independantly of user parameters
	
#include COMSYS
#define IncrementFactor	0.00001
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^WWWDATE1("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
	;-------------------------------------------------------------------------------
	; Description of Function :
	;		Convert Date to Horolog format
	;		ANZEIGEN $H AUS DATUM
	;
	; Inputs : 
	;	expects  dd.mm.yyyy                  [hardcoded calls - ignore FELDFORMAT]
	;	         dd/mm/yyyy or mm/dd/yyyy    [based on "FELDFORMAT" setting]
	;	         yyyy-mm-dd or yyyymmdd
	;	         +$h (5 digits)              [allows ., +n, -n converted values to be accepted]
	;
	; ByRef :
	;
	;
	; Returns :
	;
	;
	; History :
	; 01-Jun-2010	GRF		SR17146: Common functions - restore call to LitToInt;
	; 							Expand parameters (though not used yet for override)
	; 22-Feb-2010	shobby	SR17162: Included YM in NEW(...) command
	; 07-May-2009	GRF		SR16522: Revised to cover YYYYMMDD, YYYY/MM/DD
	; 13-Jun-2007	GRF		SR15525: Naked Reference; braces; !=>||; doco; comment
	; 							duplicated tests
	; 01-Jun-2007	GRF		Expand commands; quits
	; 24-Mar-2006	JW		SR14422: Allow counter on date
	; 07-Apr-2005 	Paul K	Year was not defaulting correctly if > 25. Modified
	; 							to sliding scale.
	; 				PJK		SR10644: DD.MM or DD.MM.YY => DD.MM.YYYY
	; 30.07.1997	DT	
	;-------------------------------------------------------------------------------
	new (pstrFormat,SPRACHE,Y,YA,YBED,YM)              ; FIXME : <GRF> Exclusive new is very inefficient.  ;SR17162
	quit $$LitToInt(YA,pstrFormat)           ; SR16522   ; SR17146
	
	; vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv Replaces code
old(YA)	
	NEW (YA,SPRACHE,Y,YBED,YM)              ; FIXME : <GRF> Exclusive new is very inefficient.  ;SR17162
	
	// display counter A.0000B as A (B)
	set YB = ""
	if $find($get(YA),"(") {
		set YB = $piece(YA,"(",2) * $$$IncrementFactor   ;$$GetIncrementFactor()
		set YA = $piece(YA," ",1)
	}
	
	SET YKW = 0
	SET A   = $GET(YA)
	
	; YYYY-MM-DD => DD.MM.YYYY
	if $find(A,"-") && ($length($piece(A," ",1)=10)) {
		set A = $piece(A," ",1)
		if ($length($piece(A,"-",1))=4) && ($length($piece(A,"-",2))=2) && ($length($piece(A,"-",3))=2) {
			set A = $piece(A,"-",3)_"."_$piece(A,"-",2)_"."_$piece(A,"-",1)
		}
		set YA = A
	}
	
	SET A = $TRANSLATE($GET(A)," |")
	
	IF YA="." SET A = +$HOROLOG
	IF YA="" QUIT ""
	
	; w23 (Monday of week 23) => DD/MM/YYYY (or DD.MM.YYYY based on SPRACHE)
	IF $FIND(A,"W") || $FIND(A,"w") SET YKW=1 SET A=$$^WWWWEEK1(A)  ;WOCHE IN DATUM ;week within Date
	
	; YYYYMMDD => DD.MM.YYYY
	IF $LENGTH(+A)=8 IF A=+A SET A = $EXTRACT(A,7,8)_"."_$EXTRACT(A,5,6)_"."_$EXTRACT(A,1,4) SET YA = A   ;FALSCHES FORMAT;TYBD;21,08,2003
	
	; +$h rather than DD/MM which gets current year appended
	IF ($LENGTH($PIECE(A,",",1))=5) && '($FIND(YA,".") || $FIND(YA,"/")) QUIT A   ;BEC;26815;19.11.04;FALSCHES FORMAT
	
	IF $FIND(YA,".") || $FIND(YA,"/") DO START
	IF YA=A SET A = ""
	SET YA = A
	IF YKW=1 SET YA = YA_".1"      ; FIXME : This returns DD/MM/YYYY.1 (or similar) rather than $horolog format; *ONLY* for week input
	
	QUIT YA_YB
	
	
START
    ;-------------------------------------------------------------------------------
    ; History:
 	; 09-Aug-2011	shobby	SR17807: GetFormat has moved.
	; 20-Aug-2007	GM		SR13729: Change "FELDFORMAT" parameter to $$GetFormat^INPARA()
    ; 20-Jul-2005	JW		SR12807: Changed 1800 to 1841
    ;-------------------------------------------------------------------------------
	IF '$DATA(Y) DO ^WWWVORG
	
	if (A'="") && $find(A,"/") {
		IF $GET(Y)="" SET Y = "~"
		;SR1807 SET FORMAT = $$GetFormat^INPARA(1,"DD.MM.YYYY")      ; FIXME : use GetDateFormat^COMUtilLocale ?
		SET FORMAT = $$GetFormat^WWW100(1,"DD.MM.YYYY")      ; FIXME : use GetDateFormat^COMUtilLocale ? ;SR1807 
		
		IF ($EXTRACT(FORMAT)="D") || ($EXTRACT(FORMAT)="T") SET A=$TRANSLATE(A,"/",".")
	}
	
	SET A = $TRANSLATE(A," ;,_+:=()\!`´~|#'*°^<>§$%&"_"""")
	
	IF A'="" {
	;	YYYY-MM-DD => DD.MM.YYYY (already done above?)
		IF $FIND(A,"-") IF $LENGTH($PIECE(A,"-",1))=4 SET A=$PIECE(A,"-",3)_"."_$PIECE(A,"-",2)_"."_$PIECE(A,"-",1)
		IF $FIND(A,"-") SET A=$TRANSLATE(A,"-",".")
	
	;	MM/DD/YYYY => DD.MM.YYYY
		IF $FIND(A,"/") SET A=$PIECE(A,"/",2)_"."_$PIECE(A,"/",1)_"."_$PIECE(A,"/",3)
	}
	
	; DD.MM or DD.MM.YY => DD.MM.YYYY
	IF $LENGTH($PIECE(A,".",3))<3 SET $PIECE(A,".",3) = $$GETYEAR($PIECE(A,".",3))
	
	; check *.MM.YYYY and not extra pieces
	IF $LENGTH($PIECE(A,".",3))'=2 IF $LENGTH($PIECE(A,".",3))'=4 SET A="" QUIT  ;FALSCHES DATUM ;Date 
	IF $LENGTH(A,".")>3   SET A="" QUIT
	
	; Month Check
	IF $PIECE(A,".",2)>12 SET A="" QUIT
	IF $PIECE(A,".",2)<1  SET A="" QUIT
	
	; Date Check
	IF $PIECE(A,".",1)<1  SET A="" QUIT
	IF $FIND(",1,3,5,7,8,10,12,",","_+$PIECE(A,".",2)_",") IF $PIECE(A,".",1)>31 SET A="" QUIT
	IF $FIND(",4,6,9,11,",","_+$PIECE(A,".",2)_",")        IF $PIECE(A,".",1)>30 SET A="" QUIT
	
	SET A(1)=29
	IF +$PIECE(A,".",2)=2 DO
	. IF $PIECE(A,".",3)#4   SET A(1)=28 QUIT
	. IF $PIECE(A,".",3)#100 SET A(1)=29 QUIT
	. IF $PIECE(A,".",3)#400 SET A(1)=28
	
	IF +$PIECE(A,".",2)=2 IF $PIECE(A,".",1)>A(1) SET A="" QUIT
	
	; Year Check
	IF $PIECE(A,".",3)<1841 SET A="" QUIT
	IF $PIECE(A,".",3)>2201 SET A="" QUIT
	
	SET A = $zdateh(+$PIECE(A,".",2)_"/"_+$PIECE(A,".",1)_"/"_+$PIECE(A,".",3))    ; uses MM/DD/YYYY
	
	QUIT
	
	
DMY(pstrDate="")
	;-------------------------------------------------------------------------------
	; Wrapper replacing all calls for WWWDATE1 where date string is in set format
	; rather than complying with system FELDFORMAT setting.
	; 
	; History :
	; 03-Jun-2010	GRF		SR17146: Rewritten with common functions
	;-------------------------------------------------------------------------------
	quit $$LitToInt(pstrDate,"DD.MM.YYYY")
	
	
LitToInt(pstrDate="",pstrFormat="")
	;-------------------------------------------------------------------------------
	;		Convert Date to Horolog format
	; 
	; History :
	; 01-Jun-2010	GRF		SR17146: Rewritten with common functions
	;-------------------------------------------------------------------------------
	new dteInternal,strDelim
	$$$LogR("LitToInt",">"_pstrDate_"<"_pstrFormat_"<")
	
	if '$data(Y) do GetBasics(.SPRACHE,.Y,.YBED,.YM)
	if pstrFormat="" {
		do GetDateFormat^COMUtilLocale(.pstrFormat,.strDelim,SPRACHE)
	} else {
		set strDelim = $extract($translate(pstrFormat,"DMY"),1)
	}
	
	do LitToStdLit(.pstrDate,SPRACHE,pstrFormat)
	$$$LogRx("L2I:"_pstrDate_"<")
	set dteInternal = $$StdLitToInt(pstrDate,pstrFormat,strDelim)
	
	quit dteInternal
	
	
GetBasics(&SPRACHE,&Y,&YBED,&YM)
	;-------------------------------------------------------------------------------
	; Wrapper to restrict variable override - only called when necessary
	;
	; History :
	; 07-May-2009	GRF		SR16522: Revised to cover YYYYMMDD, YYYY/MM/DD
	;-------------------------------------------------------------------------------
	new (SPRACHE,Y,YBED,YM)
	do ^WWWVORG
	quit
	
	
LitToStdLit(&pstrDate="",pidLocale="",pstrFormat="")
	;-------------------------------------------------------------------------------
	;	Convert possibly Incomplete Literal Date to Standard Literal Date
	;	(StdLitDate matches format returned from GetDateFormat^COMUtilLocale)
	;	
	;	eg MM.DD.YYYY, MM/DD/YY, MM/DD, MMDDYY, MMDD, DD, etc all => MM/DD/YYYY
	;	
	;	If no year is specified, uses current year but interpret near future or past
	;		(subtract 1 Year)   Nov/Dec <==> Jan/Feb   (add 1 Year)
	;		
	;	Doesn't recognise YYYYDDMM or YYYY/DD/MM sequences - treats as YYYYMMDD or YYYY/MM/DD
	;
	;
	; Inputs :
	;	pstrDate  - Initial Date String - Returns revised Date String byRef
	; 	pidLocale - Locale used to specify standard format (initially Language)
	;    Input                  
	;   Date			dd/mm/yyyy, mm/dd/yyyy, yyyy/mm/dd, yyyymmdd
	;   				(permit other delimiters or some partial entry)
	;   Date (Counter)	xx/xx/xxxx (n)
	;   Week Number		Wn or nW                (=> Monday starting week)
	; 					Wnn.yyyy or nn.yyyyW
	;   Day of *THIS* week	"mo", "tu", etc.   (Limited use - must be 2 characters in EN/DE/ES - not PT)
	;   Horolog			recognised though unlikely to be entered
	; 
	; 
	; History:
	; 11-Jun-2010	GRF		SR17146: Basic "+" or "-" interpretation to function as
	; 							it was with previous WWWTR.  Note: +$H becomes today
	; 							because it equates to +0 not because of any
	; 							interpretation of the $horolog part of the input
	; 							string.  +$H-7 would also equate to +0.
	; 01-Jun-2010	GRF		SR17146: Created as common function; add day-of-week
	; 							name & DD entry from WWWFieldRules
	;-------------------------------------------------------------------------------
	new arrDate,dteToday,intCentury,intCounter,intDayofWeek,intThisMonth,intSDLength,intToday
	new loop,strDelim,strDelimUsed,strToday,strType,strXlateIn,strXlateOut
	
	if $get(SPRACHE)="" set SPRACHE = $$^WWWLANGU(YBED)
	if pidLocale="" set pidLocale = SPRACHE  ; simplify later conversion to true locale
	
	if pstrFormat="" {
		do GetDateFormat^COMUtilLocale(.pstrFormat,.strDelim,pidLocale)
	} else {
		set strDelim = $extract($translate(pstrFormat,"DMY"),1)
	}
	
	;---------------------------------------
	; Extract date & counter from "DD/MM/YYYY (B)" or similar
	;     eventually becomes HHHHH.0000B e.g. 65000.00001
	;---------------------------------------
	set intCounter = ""
	if $find(pstrDate,"(") {
		set intCounter = +$piece(pstrDate,"(",2)
		set pstrDate   =  $piece(pstrDate," ",1)
	}
	set pstrDate = $translate(pstrDate," |")
	set dteToday = +$horolog
	
	;---------------------------------------
	; Offset shortcuts - today, past, future, Monday of week
	;---------------------------------------
	if pstrDate="." {
		set pstrDate = $$^WWWDATE(dteToday)
		
	} elseif $extract(pstrDate)="-" {
		set pstrDate = $$^WWWDATE(dteToday-$extract(pstrDate,2,9))   ; 11-Jun-2010
	;	if +$extract(pstrDate,2,9)'=0 set pstrDate = $$^WWWDATE(dteToday-$extract(pstrDate,2,9))
	;	if $length(pstrDate)=1        set pstrDate = $$^WWWDATE(dteToday)    ; "-" alone => "."
	;	if pstrDate="-0"              set pstrDate = $$^WWWDATE(dteToday)
		
	} elseif $extract(pstrDate)="+" {
		set pstrDate = $$^WWWDATE(dteToday+$extract(pstrDate,2,9))   ; 11-Jun-2010
	;	if +$extract(pstrDate,2,9)'=0 set pstrDate = $$^WWWDATE(dteToday+$extract(pstrDate,2,9))
	;	if $length(pstrDate)=1        set pstrDate = $$^WWWDATE(dteToday)
	;	if pstrDate="+0"              set pstrDate = $$^WWWDATE(dteToday)    ; "+" alone => "."
	
	} elseif $find(pstrDate,"W") || $find(pstrDate,"w") {            ; Week
		set pstrDate = $$^WWWWEEK1(pstrDate) 
	
	;---------------------------------------
	; 2 char day of week (mo,tu,we,...,su) case insensitive
	; 
	; NOTE : Only available in DE, EN, ES.  "PT" requires 3 chars for uniqueness
	; 
	; FIXME :  Must be 2 chars "Mo" not "Mon"; "PT" missed
	;---------------------------------------
	} elseif pstrDate?2A {                                      ;
		set intDayofWeek = $order(^WWW101s(0,1,$$$Index(pstrDate),"COMDAYSOFWEEKSHORT",SPRACHE,""))
		if intDayofWeek'="" {
			set intToday = $$$DayOfWeek(dteToday)
			set pstrDate = $$^WWWDATE(dteToday - intToday + intDayofWeek)  ; +$h for corresponding day of *THIS* week Mon-Sun
		}
	
	;---------------------------------------
	; Internal format - +$horolog, $horolog
	;---------------------------------------
	} elseif ($length(pstrDate)=5) && (pstrDate=+pstrDate) {
		set pstrDate = $$^WWWDATE(pstrDate)
		
	} elseif ($length(pstrDate\1)=5) && ($extract(pstrDate,1,5)=(pstrDate\1)) {
		set pstrDate = $$^WWWDATE(pstrDate\1)
	
	} else {
	;---------------------------------------
	; Any initial delimiter converted to standard delimiter (strDelim may be null)
	;---------------------------------------
		set strXlateIn  = "`~!@#$%^&*()-_=+:;.,<>/\|'´°§"_""""
		set strXlateOut = $translate($justify("",$length(strXlateIn))," ",strDelim)  ; string of delimiters
		set pstrDate    = $translate(pstrDate,strXlateIn,strXlateOut)
	$$$LogRx("l2sl:1:"_pstrDate_"<"_pstrFormat_"<"_strDelim_"<")
		
	;---------------------------------------
	; No delimiter : YYYYMMDD => std format 
	;   or
	; Entered without required delimiter (shown as / in comments - could be other)
	;---------------------------------------
		kill arrDate
		set intSDLength = $length(pstrDate)
		
	;	if (strDelim="") || '$find(pstrDate,strDelim) {
		if (pstrDate?1.N) {
			if (intSDLength=8) {
	$$$LogRx("l2sl:path 1-8")
				if $extract(pstrFormat,1) = "Y" {                    ; YYYYMMDD (Japan, etc.)
					set arrDate("Y") = $extract(pstrDate,1,4)        ; YYYY/MM/DD (China?)
					set arrDate("M") = $extract(pstrDate,5,6)
					set arrDate("D") = $extract(pstrDate,7,8)
					
				} elseif $extract(pstrFormat,1) = "M" {              ; MMDDYYYY (not expected)
					set arrDate("M") = $extract(pstrDate,1,2)        ; MM/DD/YYYY
					set arrDate("D") = $extract(pstrDate,3,4)
					set arrDate("Y") = $extract(pstrDate,5,8)
					
				} else {                                             ; DDMMYYYY (not expected)
					set arrDate("D") = $extract(pstrDate,1,2)        ; DD/MM/YYYY
					set arrDate("M") = $extract(pstrDate,3,4)
					set arrDate("Y") = $extract(pstrDate,5,8)
				}
			
			} elseif (intSDLength=6) {                               ; with YY instead of YYYY
	$$$LogRx("l2sl:path 1-6")
				if $extract(pstrFormat,1) = "Y" {
					set arrDate("Y") = $extract(pstrDate,1,2)
					set arrDate("M") = $extract(pstrDate,3,4)
					set arrDate("D") = $extract(pstrDate,5,6)
					
				} elseif $extract(pstrFormat,1) = "M" {
					set arrDate("M") = $extract(pstrDate,1,2)
					set arrDate("D") = $extract(pstrDate,3,4)
					set arrDate("Y") = $extract(pstrDate,5,6)
				
				} else {
					set arrDate("D") = $extract(pstrDate,1,2)
					set arrDate("M") = $extract(pstrDate,3,4)
					set arrDate("Y") = $extract(pstrDate,5,6)
				}
			
			} elseif (intSDLength=4) {                               ; without YYYY
	$$$LogRx("l2sl:path 1-4")
			    set strToday     = $zdate(+$horolog,8)               ; as YYYYMMDD
			    set intThisMonth = $extract(strToday,5,6)
			    
				if $extract(pstrFormat,1) = "Y" {
					set arrDate("M") = $extract(pstrDate,1,2)
					set arrDate("D") = $extract(pstrDate,3,4)
					set arrDate("Y") = $extract(strToday,1,4)
					
				} elseif $extract(pstrFormat,1) = "M" {
					set arrDate("M") = $extract(pstrDate,1,2)
					set arrDate("D") = $extract(pstrDate,3,4)
					set arrDate("Y") = $extract(strToday,1,4)
				
				} else {
					set arrDate("D") = $extract(pstrDate,1,2)
					set arrDate("M") = $extract(pstrDate,3,4)
					set arrDate("Y") = $extract(strToday,1,4)
				}
				
				if (intThisMonth<3) && (arrDate("M")>10) {        ; if in Jan/Feb and specify Nov/Dec use last year
					set arrDate("Y") = arrDate("Y") - 1
				} elseif (intThisMonth>10) && (arrDate("M")<10) { ; if in Nov/Dec and specify Jan/Feb use next year
					set arrDate("Y") = arrDate("Y") + 1
				}
			
			} elseif (intSDLength=2) || (intSDLength=1) {  ; D or DD only
	$$$LogRx("l2sl:path 1-2")
			    set strToday     = $zdate(+$horolog,8)               ; as YYYYMMDD
				set arrDate("D") = $select(intSDLength=2:"",1:"0")_pstrDate
				set arrDate("M") = $extract(strToday,5,6)
				set arrDate("Y") = $extract(strToday,1,4)
			}
		
	;---------------------------------------
	; Different Character used as delimiter
	;---------------------------------------
		} elseif (strDelim="") || '$find(pstrDate,strDelim) {
			set strDelimUsed = $extract($translate(pstrDate,"1234567890"),1)
	$$$LogRx("l2sl:path 1a:"_strDelimUsed_"<")
			if (strDelimUsed'="") {
				if $length(pstrDate,strDelim)=3 {
	$$$LogRx("l2sl:path 1a-1")
					for loop = 1:1:3 {
						set strType = $extract($piece(pstrFormat,strDelim,loop),1)
						if strType'="" {
							set arrDate(strType) = $piece(pstrDate,strDelim,loop)
						}
					}
					
				} elseif $length(pstrDate,strDelim)=2 {
	$$$LogRx("l2sl:path 1a-2")
				    set strToday     = $zdate(+$horolog,8)          ;  as YYYYMMDD
				    set intThisMonth = $extract(strToday,5,6)
					if $extract(pstrFormat,1) = "Y" {                     ; YYYY/MM/DD
						set arrDate("M") = $piece(pstrDate,strDelim,1)
						set arrDate("D") = $piece(pstrDate,strDelim,2)
						set arrDate("Y") = $extract(strToday,1,4)
					} elseif $extract(pstrFormat,1) = "M" {               ; MM/DD/YYYY
						set arrDate("M") = $piece(pstrDate,strDelim,1)
						set arrDate("D") = $piece(pstrDate,strDelim,2)
						set arrDate("Y") = $extract(strToday,1,4)
					} else {                                             ; DD/MM/YYYY
						set arrDate("D") = $piece(pstrDate,strDelim,1)
						set arrDate("M") = $piece(pstrDate,strDelim,2)
						set arrDate("Y") = $extract(strToday,1,4)
					}
					if (intThisMonth<3) && (arrDate("M")>10) {        ; if in Jan/Feb and specify Nov/Dec use last year
						set arrDate("Y") = arrDate("Y") - 1
					} elseif (intThisMonth>10) && (arrDate("M")<10) { ; if in Nov/Dec and specify Jan/Feb use next year
						set arrDate("Y") = arrDate("Y") + 1
					}
				}
			}
				
	;---------------------------------------
	; 3 pieces : split according to type
	;            MM.DD.(YY)YY or DD.MM.(YY)YY or even (YY)YY.MM.DD
	;---------------------------------------
		} elseif $length(pstrDate,strDelim)=3 {
	$$$LogRx("l2sl:path 2 >"_pstrFormat_"<")
			for loop = 1:1:3 {
				set strType = $extract($piece(pstrFormat,strDelim,loop),1)
				if strType'="" {
					set arrDate(strType) = $piece(pstrDate,strDelim,loop)
				}
			}
		
	;---------------------------------------
	; 2 pieces : split according to type
	;            MM.DD or DD.MM
	;---------------------------------------
		} elseif $length(pstrDate,strDelim)=2 {
	$$$LogRx("l2sl:path 3")
		    set strToday     = $zdate(+$horolog,8)          ; as YYYYMMDD
		    set intThisMonth = $extract(strToday,5,6)
			if $extract(pstrFormat,1) = "Y" {                     ; YYYY/MM/DD
				set arrDate("M") = $piece(pstrDate,strDelim,1)
				set arrDate("D") = $piece(pstrDate,strDelim,2)
				set arrDate("Y") = $extract(strToday,1,4)
			} elseif $extract(pstrFormat,1) = "M" {               ; MM/DD/YYYY
				set arrDate("M") = $piece(pstrDate,strDelim,1)
				set arrDate("D") = $piece(pstrDate,strDelim,2)
				set arrDate("Y") = $extract(strToday,1,4)
			} else {                                             ; DD/MM/YYYY
				set arrDate("D") = $piece(pstrDate,strDelim,1)
				set arrDate("M") = $piece(pstrDate,strDelim,2)
				set arrDate("Y") = $extract(strToday,1,4)
			}
			if (intThisMonth<3) && (arrDate("M")>10) {        ; if in Jan/Feb and specify Nov/Dec use last year
				set arrDate("Y") = arrDate("Y") - 1
			} elseif (intThisMonth>10) && (arrDate("M")<10) { ; if in Nov/Dec and specify Jan/Feb use next year
				set arrDate("Y") = arrDate("Y") + 1
			}
		}
		
	;---------------------------------------
	; Reconstruct from Pieces (single-digit D or M padded; century added)
	;---------------------------------------
		if $data(arrDate) {
	$$$LogRx("l2sl:2:"_arrDate("Y")_"<"_arrDate("M")_"<"_arrDate("D")_"<")
			
			if $length(arrDate("D"))=1   set arrDate("D") = "0"_arrDate("D")
			if $length(arrDate("M"))=1   set arrDate("M") = "0"_arrDate("M")
			if $get(arrDate("Y")) < 1000 set arrDate("Y") = $$GETYEAR(arrDate("Y")) ; YY => YYYY
			
			
			if $extract(pstrFormat,1) = "Y" {
				set pstrDate = arrDate("Y")_strDelim_arrDate("M")_strDelim_arrDate("D")
				
			} elseif $extract(pstrFormat,1) = "M" {
				set pstrDate = arrDate("M")_strDelim_arrDate("D")_strDelim_arrDate("Y")
				
			} else { ; default to DD/MM/YYYY
				set pstrDate = arrDate("D")_strDelim_arrDate("M")_strDelim_arrDate("Y")
			}
		}
	$$$LogRx("l2sl:3:"_pstrDate_"<")
	
	}
	
	if intCounter'="" set pstrDate = pstrDate_" ("_intCounter_")"
	quit
	
	
StdLitToInt(pstrDate,pstrFormat,pstrDelim)
	;-------------------------------------------------------------------------------
	;	Convert Standard Literal Date to Horolog format
	;	(StdLitDate matches format returned from GetDateFormat^COMUtilLocale)
	;-------------------------------------------------------------------------------
	new arrDate,dteInternal,fltCounter
	
	set dteInternal = ""
	set fltCounter = ""
	if $find(pstrDate,"(") {
		set fltCounter = $piece(pstrDate,"(",2) * $$$IncrementFactor
		set pstrDate   = $piece(pstrDate," ",1)
	}
	
	if $extract(pstrFormat,1) = "Y" {
		if pstrDelim = "" {
			set arrDate("Y") = $extract(pstrDate,1,4)      ; YYYYMMDD
			set arrDate("M") = $extract(pstrDate,5,6)
			set arrDate("D") = $extract(pstrDate,7,8)
			
		} else {
			set arrDate("Y") = $extract(pstrDate,1,4)      ; YYYY/MM/DD
			set arrDate("M") = $extract(pstrDate,6,7)
			set arrDate("D") = $extract(pstrDate,9,10)
		}
		
	} elseif $extract(pstrFormat,1) = "M" {
		if pstrDelim = "" {
			set arrDate("M") = $extract(pstrDate,1,2)      ; MMDDYYYY
			set arrDate("D") = $extract(pstrDate,3,4)
			set arrDate("Y") = $extract(pstrDate,5,8)
			
		} else {
			set arrDate("M") = $extract(pstrDate,1,2)      ; MM/DD/YYYY
			set arrDate("D") = $extract(pstrDate,4,5)
			set arrDate("Y") = $extract(pstrDate,7,10)
		}
	
	} else {
		if pstrDelim = "" {
			set arrDate("D") = $extract(pstrDate,1,2)      ; DDMMYYYY
			set arrDate("M") = $extract(pstrDate,3,4)
			set arrDate("Y") = $extract(pstrDate,5,8)
			
		} else {
			set arrDate("D") = $extract(pstrDate,1,2)      ; DD/MM/YYYY
			set arrDate("M") = $extract(pstrDate,4,5)
			set arrDate("Y") = $extract(pstrDate,7,10)
		}
	}
	if $$Validate(+$get(arrDate("D")),+$get(arrDate("M")),+$get(arrDate("Y"))) {
		set dteInternal = $zdateh(+arrDate("M")_"/"_+arrDate("D")_"/"_+arrDate("Y"))   ; uses MM/DD/YYYY
	}
	if (dteInternal'="") set dteInternal = dteInternal_fltCounter
	quit dteInternal
	
	
	/*
oldLitToInt(pstrDateIn="",pstrFormat="")
	;-------------------------------------------------------------------------------
	;		Convert Date to Horolog format
	; 
	; Called By : removed from ^WWWDATE1 with concern over SQL access - restore?
	; 
	; Inputs : 
	;	pstrDateIn
	;
	; ByRef :
	;
	;
	; Returns :
	;	Horolog date [with suffixes if applicable] e.g. 65000 or 65000.1 or 65000.00003
	;
	; History :
	; 07-May-2009	GRF		SR16522: Revised to cover YYYYMMDD, YYYY/MM/DD
	;-------------------------------------------------------------------------------
	new arrDate,dteInternal,fltCounter,loop,strDelim,strType
	
	;if '$data(Y) do ^WWWVORG
	if '$data(Y) do GetBasics(.SPRACHE,.Y,.YBED)
	;---------------------------------------
	;    Input                  Output
	;   xx/xx/xxxx              nnnnn            Date => +$horolog
	;   xx/xx/xxxx (n)          nnnnn.0000n      Date (Counter) => Horolog.counter
	;    Wn or nW               nnnnn            Week Number => Monday starting week => +horolog.1
	; Wnn.yyyy or nn.yyyyW      nnnnn
	;---------------------------------------
	
	set dteInternal = ""
	
	; Extract date & counter A.0000B from A (B)    65000.00001
	set fltCounter = ""
	if $find(pstrDateIn,"(") {
		set fltCounter  = $piece(pstrDateIn,"(",2) * $$$IncrementFactor
		set pstrDateIn  = $piece(pstrDateIn," ",1)
	}
	
	set pstrDateIn = $translate(pstrDateIn," |")
	
	if pstrDateIn = "" {
		set dteInternal = ""
		
	} elseif pstrDateIn = "." {
		set dteInternal = +$horolog
		
	} elseif $find(pstrDateIn,"W") || $find(pstrDateIn,"w") {                 ; Week
		set dteInternal = $$^WWWWEEK1(pstrDateIn,1)_".1"         ; FIXME : Why sequence no?  NOTE - $horolog
	
	} else {
		if pstrFormat="" {
			do GetDateFormat^COMUtilLocale(.pstrFormat,.strDelim,SPRACHE)
		
		} else {
			if $length(pstrFormat)=8 {
				set strDelim = ""                                         ; YYYYMMDD
			} else {
				set strDelim = $extract(pstrFormat,3)                     ; xx.xx.YYYY
				if strDelim = "Y" set strDelim = $extract(pstrFormat,5)   ; YYYY.MM.DD
			}
		}
		
		if ($length(pstrDateIn)=5) && (pstrDateIn=+pstrDateIn) {
			set dteInternal = pstrDateIn                                  ; +$horolog (excludes DD/MM)
		}
		
		if (dteInternal="") && ($length(pstrDateIn,strDelim)<4) {         ; passes initial validation
			if (($length(pstrDateIn)=8) && (pstrDateIn=+pstrDateIn)) || (strDelim="") {
				set arrDate("Y") = $extract(pstrDateIn,1,4)
				set arrDate("M") = $extract(pstrDateIn,5,6)              ; YYYYMMDD (can ALWAYS be specified)
				set arrDate("D") = $extract(pstrDateIn,7,8)
				
			} else {                             ; DD.MM.YYYY, MM.DD.YYYY, YYYY.MM.DD (any delimiter)
				for loop = 1:1:3 {
					set strType = $extract($piece(pstrFormat,strDelim,loop),1)
					if strType'="" {
						set arrDate(strType) = $piece(pstrDateIn,strDelim,loop)
					}
				}
				if $get(arrDate("Y")) < 1000 {                            ; YY => YYYY
					set arrDate("Y") = $$GETYEAR(arrDate("Y"))
				}
			}
			if $$Validate(+$get(arrDate("D")),+$get(arrDate("M")),+$get(arrDate("Y"))) {
				set dteInternal = $zdateh(+arrDate("M")_"/"_+arrDate("D")_"/"_+arrDate("Y"))   ; uses MM/DD/YYYY
			}
			if (dteInternal'="") set dteInternal = dteInternal_fltCounter
		}
	}
	
	quit dteInternal
	*/
	
LitToDMY(pstrDateIn,pstrFormat,pstrDelim,&intDay,&intMonth,&intYear)
	;-------------------------------------------------------------------------------
	; Split literal components into array
	; 
	; Called By : WWWCAL2
	;
	; History :
	; 02-Feb-2010	GRF		SR17146: extract date where no delimiter (e.g. YYYYMMDD)
	; 08-May-2009	GRF		SR16522: Created
	;-------------------------------------------------------------------------------
	new arrDate,loop,strType
	
	if (pstrDelim="") {            ; SR17146 vvv
		if $length(pstrDateIn)=8 {
			set arrDate("Y") = $extract(pstrDateIn,1,4)         ; YYYYMMDD
			set arrDate("M") = $extract(pstrDateIn,5,6)
			set arrDate("D") = $extract(pstrDateIn,7,8)
			
		} elseif $length(pstrDateIn)=6 {
			set arrDate("Y") = $extract(pstrDateIn,1,2)         ; YYMMDD
			set arrDate("M") = $extract(pstrDateIn,3,4)
			set arrDate("D") = $extract(pstrDateIn,5,6)
			
		} elseif $length(pstrDateIn)=4 {
			set arrDate("Y") = ""
			set arrDate("M") = $extract(pstrDateIn,1,2)         ; MMDD   ; FIXME : Should we allow DDMM if locale date is DD/MM/YYYY or similar?
			set arrDate("D") = $extract(pstrDateIn,3,4)
		}
		
	} else {                      ; SR17146 ^^^
		for loop = 1:1:3 {
			set strType = $extract($piece(pstrFormat,pstrDelim,loop),1)
			if strType'="" {
				set arrDate(strType) = $piece(pstrDateIn,pstrDelim,loop)
			}
		}
		if $get(arrDate("Y")) < 1000 {                          ; YY => YYYY
			set arrDate("Y") = $$GETYEAR(arrDate("Y"))
		}
	}
		
	set intDay   = +$get(arrDate("D"))
	set intMonth = +$get(arrDate("M"))
	set intYear  = +$get(arrDate("Y"))
	quit
	
	
Validate(pintDay,pintMonth,pintYear)
	;-------------------------------------------------------------------------------
	; Description of Function :
	;		Check that the digits entered represent a valid date
	;
	; Inputs : 
	;	day, month and year portions
	;
	;
	; Returns :
	;	Horolog date [with suffixes if applicable] e.g. 65000 or 65000.1 or 65000.00003
	;
	; History :
	; 07-May-2009	GRF		SR16522: Revised to cover YYYYMMDD, YYYY/MM/DD
	;-------------------------------------------------------------------------------
	new blnDateOkay,intMaxDays
	
	set blnDateOkay = $$$YES
	
	if ($length(pintYear)'=4) || (pintYear\1'=pintYear) {                      ; Year
		set blnDateOkay = $$$NO
	
	} elseif (pintYear<1841) || (pintYear>2201) {
		set blnDateOkay = $$$NO
	
	} elseif (pintMonth<1) || (pintMonth>12) || (pintMonth\1'=pintMonth) {     ; Month
		set blnDateOkay = $$$NO
	
	} elseif (pintDay<1) || (pintDay\1'=pintDay) {                             ; Date
		set blnDateOkay = $$$NO
	
	} else {
		if $find(",4,6,9,11,",$$$COMMA_pintMonth_$$$COMMA) {
			set intMaxDays = 30
		
		} elseif pintMonth'=2 {
			set intMaxDays = 31
		
		} else {                                                               ; Leap Year
			if pintYear#4 {
				set intMaxDays = 28       ; 2001
			
			} elseif pintYear#100 {
				set intMaxDays = 29       ; 2004
			
			} elseif pintYear#400 {
				set intMaxDays = 28       ; 1900
			
			} else {
				set intMaxDays = 29       ; 2000
			}
		}
		if (pintDay>intMaxDays) set blnDateOkay = $$$NO
	}
	quit blnDateOkay
	
	
GETYEAR(pintYY="",pintBaseYear="")
	;-------------------------------------------------------------------------------
	; Given a two digit year, guess the correct year. Current year can be passed in as a param.
	; 
	; Inputs:
	;	pintYY			2 digit year (or null for current year)
	;	pintBaseYear	base year - if blank uses current year
	; 
	; Returns:
	;	intReturn		4 digit year
	;
	; History:
	; 27-Sep-2007	GRF		SRBR014643: Changed 75/25 default to 95/05
	; 26-Sep-2007	GRF		SRBR014643: Doco and use offset variables rather than hard
	; 						coded values as precursor to more flexible mechanism.
	; 13-Jun-2007	GRF		SR15525: Clarify variable use and simplify; calling with
	; 						-ve value results in 3 digit response (e.g. -3 => 97 => 7)
	; 						now -ve equivalent to zero
	; 07-Apr-2005	Paul K	SR10644: Created 
	;-------------------------------------------------------------------------------
	new intBack,intForward,intReturn
	
	;+++++++++++++++++++++++++++++++++++++++
	; Sliding interpretation of 2 digit dates based on
	; Back Offset of 75 years and thus a Forward offset of 25 years
	; 
	;               Current Year (pintBaseYear)			|	              Current Year (pintBaseYear)
	; -75                       2007             +25	|	-75                       2087             +25
	;  +-------------------------|----------------+		|	 +-------------------------|----------------+
	; 1932                                       2032	|	2012                                       2112
	; 													|	
	; pintYY		02		20		40		90			|	pintYY		02		20		40		90
	; Case #		3		2		1		1			|	Case #		4		3		3		2
	; Year			2002	2020	1940	1990		|	Year		2102	2020	2040	2090
	; 													|
	;+++++++++++++++++++++++++++++++++++++++
	
	set intBack    = 95
	set intForward = 100 - intBack
	
	if pintBaseYear="" set pintBaseYear=$piece($zdatetime($horolog,3),"-",1)  ;current year
	set intReturn = pintBaseYear
	
	if pintYY'="" {
		set pintYY = +pintYY
		if pintYY<0          set pintYY=0
		if $length(pintYY)=1 set pintYY = "0"_pintYY
	 	
	 	if pintYY>$extract(pintBaseYear,3,4) {
		 	if pintYY > ($extract(pintBaseYear,3,4)+intForward) {
			 	set intReturn = ($extract(pintBaseYear,1,2)-1)_pintYY           ; #1  Previous Century
		 	} else {
			 	set intReturn =  $extract(pintBaseYear,1,2)   _pintYY           ; #2  A little way ahead
		 	}
	 	} else {
		 	if (pintYY+intBack) > $extract(pintBaseYear,3,4) {
			 	set intReturn =  $extract(pintBaseYear,1,2)   _pintYY           ; #3  A little way back
		 	} else {
			 	set intReturn = ($extract(pintBaseYear,1,2)+1)_pintYY           ; #4  Next Century
		 	}
	 	}
	}
	quit intReturn
	
	
GetIncrementFactor()
	;-------------------------------------------------------------------------------
	; How much a date value will increment by if being used as a counter.
	;
	; Called by : INReceiptLinePost, INRECLine, INWECounter
	; 
	; Returns: CONSTANT - DO NOT CHANGE !!
	; 			Set to 5 decimal places so it can be replaced by time if necessary
	;
	; History:
	; 02-Jun-2010	GRF		SR17146: Use Macro
	; 23-Mar-2006	JW		SR14422: Created
	;-------------------------------------------------------------------------------
	quit $$$IncrementFactor       ;0.00001
	
]]></Routine>
</Export>