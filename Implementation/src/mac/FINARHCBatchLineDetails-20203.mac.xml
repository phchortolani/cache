<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINARHCBatchLineDetails" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINAPHCBatchLineDetails ;AP Invoice Transaction Health Check
	#Include FINHC
	
Verify(StartDate="",EndDate="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; Check that the different types of FINARInvoiceTran have correct values in the
    ; Parameters,Source and Reference Fields.
    ;
    ; Returns:
    ;
    ; History:
    ; 24-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new strStatus,idBatch,idLine,objFININTBatchLine,strInterfaceTypes
	new strInterfaceType
	
	if $get(Y)="" d ^WWWVAR
	set strStatus=$$$OK
	kill Result

	set strInterfaceTypes=$$GetInterfaceTypes^FINARHCInvoice("AR")
	
	set idBatch=""
	for {
		set idBatch=$order(^FININTBatchLine(YM,idBatch))
		quit:idBatch=""
		
		set idLine=""
		for {
			set idLine=$order(^FININTBatchLine(YM,idBatch,idLine))
			quit:idLine=""
			
			set objFININTBatchLine=$get(^FININTBatchLine(YM,idBatch,idLine,1))
			set strInterfaceType=$$$FININTBatchLineInterfaceType(objFININTBatchLine)
			if strInterfaceTypes[(YKOMMA_strInterfaceType_YKOMMA) {
				set strStatus=strStatus&&$$CheckDetails(idBatch,idLine,strInterfaceType,.Result)
			}
		}
	}
	
	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}
	quit strStatus
	
CheckDetails(pidBatch,pidLine,pstrInterfaceType,Result)
    ;-------------------------------------------------------------------------------
    ; Check that the Reference structure matches the Interface Type Definition
    ;
    ; Returns:
    ;
    ; History:
	; 12-Aug-2004	GRF		ALWAYS macro
    ; 24-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new strStatus,strParameters,strSource,strReference,objFININTBatchLine
	new idAdjustment,idAdjustmentLine,strObject,objFINARADJLine
	new idADJCustomer,idADJInvoice
	new idFINARInvoiceTranCustomer,idFINARInvoiceTranInvoice
	new objFININTInterfaceType
	new idParametersCustomer,idParametersInvoice
	
	set strStatus=$$$OK
	
	set objFININTBatchLine=$get(^FININTBatchLine(YM,pidBatch,pidLine,1))
	set strReference=$$$FININTBatchLineReference(objFININTBatchLine)
	set strSource=$$$FININTBatchLineSource(objFININTBatchLine)
	set strParameters=$$$FININTBatchLineParameters(objFININTBatchLine)

	if $$$ALWAYS { ;pstrInterfaceType="ACP" {
		; Reference
		set idFINARInvoiceTranCustomer=$order(^FINARInvoiceTrans(YM,2,pidBatch,pidLine,""))
		if idFINARInvoiceTranCustomer="" set idFINARInvoiceTranCustomer=" "
		set idFINARInvoiceTranInvoice=$order(^FINARInvoiceTrans(YM,2,pidBatch,pidLine,idFINARInvoiceTranCustomer,""))
		set strObject="^FININTBatchLine("_YM_YKOMMA_pidBatch_YKOMMA_pidLine_YKOMMA_"1).  "
		if idFINARInvoiceTranCustomer'=strReference {
			set Result("Hash",$$$ErrorNo(Result("Errors")))=strObject_"Reference='"_strReference_"' does not match Customer='"_idFINARInvoiceTranCustomer_"'"
		}
		; Source
		if pstrInterfaceType="ARADJ" {
			set idAdjustment=$piece(strSource,YKOMMA,1)
			if idAdjustment="" set idAdjustment=" "
			set idAdjustmentLine=$piece(strSource,YKOMMA,2)
			if idAdjustmentLine="" set idAdjustmentLine=" "
			set objFINARADJLine=$get(^FINARADJLine(YM,idAdjustment,idAdjustmentLine,1))
			set idADJCustomer=$$$FINARADJLineCustomer(objFINARADJLine)
			set idADJInvoice=$$$FINARADJLineRef(objFINARADJLine)
			if (idADJCustomer'=idFINARInvoiceTranCustomer)||(idADJInvoice'=idFINARInvoiceTranInvoice)||($length(strSource,YKOMMA)'=2) {
				set Result("Hash",$$$ErrorNo(Result("Errors")))=strObject_"Source='"_strSource_"' should be a two part key referring to a FINARADJLine."		
			}
		} elseif pstrInterfaceType="ACC" {
			do ValidateSaleID(strParameters,strSource,strObject,.Result)
		} elseif pstrInterfaceType="ACP" {
			if $length(strSource,YKOMMA)'=2 {
				if $get(^FININTSale(YM,strSource,"SaleID"))'=strSource {
					; If it isn't a sale then possibly banking.
					set Result("Hash",$$$ErrorNo(Result("Errors")))=strObject_"Source='"_strSource_"' should be a two part key referring to a FINARBankLine."		
				}
			}
		}
		;Parameters
		set objFININTInterfaceType=$get(^FININTInterfaceType(0,pstrInterfaceType,1))
		if $length($$$FININTInterfaceTypeParameters(objFININTInterfaceType),YKOMMA)'=$length(strParameters,YKOMMA) {
			set Result("Hash",$$$ErrorNo(Result("Errors")))=strObject_"Parameters='"_strParameters_"' should be a "_$length($$$FININTInterfaceTypeParameters(objFININTInterfaceType),YKOMMA)_" part key matching the Parameters column in the Interface Type screen for '"_pstrInterfaceType_"' ("_$$$FININTInterfaceTypeParameters(objFININTInterfaceType)_")."
		}
		set idParametersCustomer=$piece(strParameters,YKOMMA,1)
		set idParametersInvoice=$piece(strParameters,YKOMMA,2)
		if (idParametersCustomer'=idFINARInvoiceTranCustomer)||(idParametersInvoice'=idFINARInvoiceTranInvoice) {
			set Result("Hash",$$$ErrorNo(Result("Errors")))=strObject_"First two parts of Parameters='"_$piece(strParameters,YKOMMA,1,2)_"' should match with ^FINARInvoiceTran("_YM_YKOMMA_idFINARInvoiceTranCustomer_YKOMMA_idFINARInvoiceTranInvoice_YKOMMA_"1)."		
		}
	}	
	quit strStatus
	
ValidateSaleID(pstrParameters,pstrSource,pstrObject,Result)
    ;-------------------------------------------------------------------------------
    ; Validate the SaleID against the parameters.
    ;
    ; Returns:
    ;
    ; History:
    ; 01-Jun-2004	shobby		Parameters pstrObject and Result.
    ; 24-May-2004   Shobby   	Created
    ;-------------------------------------------------------------------------------
	new strCustomer,strInvoice
	
	if $get(^FININTSale(YM,pstrSource,"SaleID"))=pstrSource {
		set strCustomer=$get(^FININTSale(YM,pstrSource,"Customer"))
		set strInvoice=$get(^FININTSale(YM,pstrSource,"Invoice Number"))
		if strCustomer'=$piece(pstrParameters,YKOMMA,1) {
			set Result("Hash",$$$ErrorNo(Result("Errors")))=pstrObject_"SaleID='"_pstrSource_"' Customer mismatch - '"_strCustomer_"' does not equal '"_$piece(pstrParameters,YKOMMA,1)_"'."
		}
		if strInvoice'=$piece(pstrParameters,YKOMMA,2) {
			if strInvoice'="" {
				if $piece(pstrParameters,YKOMMA,2)'="Unallocated - 001" {
					set Result("Hash",$$$ErrorNo(Result("Errors")))=pstrObject_"SaleID='"_pstrSource_"' Invoice mismatch - '"_strInvoice_"' does not equal '"_$piece(pstrParameters,YKOMMA,2)_"'."
				}
			}
		}
	} else {
		set Result("Hash",$$$ErrorNo(Result("Errors")))=pstrObject_"SaleID='"_pstrSource_"' may not be correct."
	}
	quit
	
FixBatchLines()
    ;-------------------------------------------------------------------------------
    ; Fix AR type batch lines with incorrect Parameters, Source or Reference.
    ;
    ; Returns:
    ;
    ; History:
    ; 24-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new idBatch,idLine,objFININTBatchLine,strInterfaceType,strParameters,strSource
	new blnSave,strReference,strInterfaceTypes,strParametersACC
	new idCustomer,idInvoice
	
	if $get(Y)="" d ^WWWVAR
	set idBatch=""
	set strInterfaceTypes=$$GetInterfaceTypes^FINARHCInvoice("AR")
	for {
		set idBatch=$order(^FININTBatchLine(YM,idBatch))
		quit:idBatch=""
		
		set idLine=""
		for {
			set blnSave=$$$NO
			set idLine=$order(^FININTBatchLine(YM,idBatch,idLine))
			quit:idLine=""
			
			set objFININTBatchLine=$get(^FININTBatchLine(YM,idBatch,idLine,1))
			set strInterfaceType=$$$FININTBatchLineInterfaceType(objFININTBatchLine)
			if strInterfaceTypes[(YKOMMA_strInterfaceType_YKOMMA) {
				set strParameters=$$$FININTBatchLineParameters(objFININTBatchLine)
				set strSource=$$$FININTBatchLineSource(objFININTBatchLine)
				set strReference=$$$FININTBatchLineReference(objFININTBatchLine)
				if strInterfaceType="ACP" {
					if $length(strParameters,YKOMMA)>2 {
						set $$$FININTBatchLineParameters(objFININTBatchLine)=$piece(strParameters,YKOMMA,1,2)
						set blnSave=$$$YES
					}
					if $length(strSource,YKOMMA)=1 {
						if $get(^FININTSale(YM,strSource,"SaleID"))'=strSource {
							if $data(^FINARBank(YM,strSource,1))'=0 {
								if $order(^FINARBankLine(YM,strSource,""),-1)=1 {
									set $$$FININTBatchLineSource(objFININTBatchLine)=strSource_YKOMMA_"1"
									set blnSave=$$$YES
								}
							}
						}
					}
				} elseif strInterfaceType="ARADJ" {
					if $length(strReference,YKOMMA)=2 {
						set $$$FININTBatchLineSource(objFININTBatchLine)=strReference
						set blnSave=$$$YES
					}
				} elseif strInterfaceType="ACC" {
					if $get(^FININTSale(YM,strSource,"SaleID"))=strSource {
						set strParametersACC=$get(^FININTSale(YM,strSource,"Customer"))_YKOMMA
						set strParametersACC=strParametersACC_$get(^FININTSale(YM,strSource,"Invoice Number"))_YKOMMA
						set strParametersACC=strParametersACC_$get(^FININTSale(YM,strSource,"DueDate"))_YKOMMA
						set strParametersACC=strParametersACC_$get(^FININTSale(YM,strSource,"Settlement Discount"))_YKOMMA
						set strParametersACC=strParametersACC_$get(^FININTSale(YM,strSource,"Date"))_YKOMMA
						set strParametersACC=strParametersACC_$$Freight(strSource)
						if strParameters'=strParametersACC {
							set $$$FININTBatchLineParameters(objFININTBatchLine)=strParametersACC
							set blnSave=$$$YES
						}
					}
				}
				if strReference'=$piece(strParameters,YKOMMA,1) {
					set $$$FININTBatchLineReference(objFININTBatchLine)=$piece(strParameters,YKOMMA,1)
					set blnSave=$$$YES
				}
				set idCustomer=$order(^FINARInvoiceTrans(YM,2,idBatch,idLine,""))
				if idCustomer'="" {
					set idInvoice=$order(^FINARInvoiceTrans(YM,2,idBatch,idLine,idCustomer,""))
					if idInvoice'="" {
						if $piece(strParameters,YKOMMA,1,2)'=idCustomer_YKOMMA_idInvoice {
							set $piece(strParameters,YKOMMA,1,2)=idCustomer_YKOMMA_idInvoice
							set $$$FININTBatchLineParameters(objFININTBatchLine)=strParameters
							set blnSave=$$$YES
						}
					}
				}
				if blnSave {
					do Save^FINSYS("FININTBatchLine",idBatch_YKOMMA_idLine,objFININTBatchLine,1)
				}
			}
		}
	}
	quit
	
Freight(pstrSaleID)
    ;-------------------------------------------------------------------------------
    ; Get the freight value for a sale
    ;
    ; Returns:
    ;
    ; History:
    ; 24-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new intLine,strFreight
	
	set strFreight=0
	set intLine=""
	for {
		set intLine=$order(^FININTSale(YM,pstrSaleID,"Lines",intLine))
		quit:intLine=""
		
		if $get(^FININTSale(YM,pstrSaleID,"Lines",intLine,"NoDiscount")) {
			set strFreight=strFreight+$get(^FININTSale(YM,pstrSaleID,"Lines",intLine,"Value"))
		}
	}
	quit strFreight
	
]]></Routine>
</Export>