<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INSOHToolBoxCopyData" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INSOHToolBoxCopyData ; Copy Client Data Based on Transaction , Item , Location

	#include COMSYS
	#include INConst
	#define BitSize	1
	#define RepCnt	2

	
INRECS(pstrArr,pblnSub=$$$NO)
	;-------------------------------------------------------------------------------
	; Get multiple INREC Details bassed on an array
	;
	; Returns:
	;
	; History:
	; 21-May-2014	SCR		SESDF-1411: Created
	;-------------------------------------------------------------------------------
	new idRec,strGloOut
	
	$$$VAR
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	kill:'pblnSub @strGloOut
	set idRec	= ""
	for {
		set idRec	= $order(@pstrArr@(idRec))
		quit:idRec=""
		do INREC(idRec,$$$YES)
	}
	do:'pblnSub ItemsOut()	
	quit

INREC(pidRec,pblnSub=$$$NO)
	;-------------------------------------------------------------------------------
	; Get INREC Details
	;
	; Returns:
	;
	; History:
	; 16-May-2014	SCR		SESDF-1411: Add PO 
	; 07-May-2014	SCR		SESDF-1378: Created
	;-------------------------------------------------------------------------------
	new idItem,idLine,idLoc,idPO,idType,objLine,objRec,strGloOut
	$$$VAR
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	kill:'pblnSub @strGloOut
	do Out($name(^INREC(YM,pidRec)))
	do Out($name(^INRECSummary(YM,pidRec)))
	do Out($name(^INRECLine(YM,pidRec)))
	set objRec	= $get(^INREC(YM,pidRec,1))
	set idLoc	= $$$INRECLocation(objRec)
	set idType	= $$$INRECType(objRec)
	set idLine	= ""
	for {
		set idLine	= $order(^INRECLine(YM,pidRec,idLine))
		quit:idLine=""
		set objLine	= $get(^INRECLine(YM,pidRec,idLine,1))
		set idItem	= $$$INRECLineItem(objLine)
		set idPO	= $$$INRECLineOrder1(objLine)
		set @strGloOut@("i",idItem,idLoc)=""
		if idPO'="" {
			set @strGloOut@("po",idPO)=""
		}
	}
	if idType=2 {  ; Order
		set idPO	= ""
		for {
			set idPO	= $order(@strGloOut@("po",idPO))
			quit:idPO=""
			do PO(idPO,$$$YES)
		}
	}
	if idType=3 {  ; Transfer
		
		do INTFR($$$INRECTransferNumbers(objRec),$$$YES)
	}
	do:'pblnSub ItemsOut()
	quit
	
INIssue(pidIssue,pblnSub=$$$NO)
	;-------------------------------------------------------------------------------
	; Get INIssue Details
	;
	; Returns:
	;
	; History:
	; 16-May-2014	SCR		SESDF-1411: Add PO 
	; 07-May-2014	SCR		SESDF-1378: Created
	;-------------------------------------------------------------------------------
	new idDem,idFrom,idItem,idLine,idTo,objIssue,objLine,strGloOut
	$$$VAR
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	kill:'pblnSub @strGloOut
	do Out($name(^INIssue(YM,pidIssue)))
	do Out($name(^INIssueLine(YM,pidIssue)))
	set objIssue= $get(^INIssue(YM,pidIssue,1))
	set idFrom	= $$$INIssueFromLocn(objIssue)
	set idTo	= $$$INIssueToLocn(objIssue)
	set idLine	= ""
	for {
		set idLine	= $order(^INIssueLine(YM,pidIssue,idLine))
		quit:idLine=""
		set objLine	= $get(^INIssueLine(YM,pidIssue,idLine,1))
		set idItem	= $$$INIssueLineItem(objLine)
		set idDem	= $$$INIssueLineDemand(objLine)
		set @strGloOut@("i",idItem,idFrom)=""
		if idTo'="" {
			set @strGloOut@("i",idItem,idTo)=""
		}
		if idDem'="" {
			set @strGloOut@("dem",idFrom,idDem)=""
		}
	}
	do:'pblnSub ItemsOut()
	do:'pblnSub DemandOut()
	quit
	
PO(pidPO,pblnSub=$$$NO)
	;-------------------------------------------------------------------------------
	; Get INAUF Details
	;
	; Returns:
	;
	; History:
	; 16-May-2014	SCR		SESDF-1411: Created
	;-------------------------------------------------------------------------------
	new strGloOut
	$$$VAR
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	kill:'pblnSub @strGloOut
	if '$data(@strGloOut@("Done","PO",pidPO)) {
		do Out($name(^INAUF(YM,pidPO)))
		do Out($name(^INAUFP(YM,pidPO)))
		set @strGloOut@("Done","PO",pidPO)=""
	}
	do:'pblnSub ItemsOut()
	quit
	
INTFR(pidTFR,pblnSub=$$$NO)
	;-------------------------------------------------------------------------------
	; Get INTFR Details
	;
	; Returns:
	;
	; History:
	; 07-May-2014	SCR		SESDF-1378: Created
	;-------------------------------------------------------------------------------
	new idFrom,idItem,idLine,idTo,objLine,objTFR,strGloOut
	$$$VAR
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	kill:'pblnSub @strGloOut
	do Out($name(^INTFR(YM,pidTFR)))
	do Out($name(^INTFRPickLine(YM,pidTFR)))
	do Out($name(^INTFRLine(YM,pidTFR)))
	set objTFR	= $get(^INTFR(YM,pidTFR,1))
	set idFrom	= $$$INTFRSendingLocation(objTFR)
	set idTo	= $$$INTFRReceivingLocation(objTFR)
	set idLine	= ""
	for {
		set idLine	= $order(^INTFRLine(YM,pidTFR,idLine))
		quit:idLine=""
		set objLine	= $get(^INTFRLine(YM,pidTFR,idLine,1))
		set idItem	= $$$INTFRLineItem(objLine)
		set @strGloOut@("i",idItem,idFrom)=""
		set @strGloOut@("i",idItem,idTo)=""
	}
	do:'pblnSub ItemsOut()
	quit
	
DemandOut()
	;-------------------------------------------------------------------------------
	; Output Demands
	;
	; Returns:
	;
	; History:
	; 07-May-2014	SCR		SESDF-1378: Created
	;-------------------------------------------------------------------------------
	new idDem,idLoc,strGloOut
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	set idLoc	= ""
	for {
		set idLoc	= $order(@strGloOut@("dem",idLoc))
		quit:idLoc=""
		set idDem	= ""
		for {
			set idDem	= $order(@strGloOut@("dem",idLoc,idDem))
			quit:idDem=""
			
		}
	}
	quit
	
INART(&parrItem,pblnSub=$$$NO)
	;-------------------------------------------------------------------------------
	; Output INART for all locations
	;
	; Returns:
	;
	; History:
	; 15-Jul-2014	SCR		SESDF-1323: Created
	;-------------------------------------------------------------------------------
	new idItem,idLoc,objResultSet,sc,strGloOut,strSQL
	$$$VAR
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	kill:'pblnSub @strGloOut
	set idItem	= ""
	for {
		set idItem	= $order(parrItem(idItem))
		quit:idItem=""
		set strSQL="select location from alSOH.dStockHistory where Item=? group by location"
		set objResultSet	= ##class(%Library.ResultSet).%New()
		set sc				= objResultSet.Prepare(strSQL)
		set:sc sc			= objResultSet.Execute(idItem)
		if sc {
			while objResultSet.Next() {
				set idLoc	= objResultSet.Data("Location")
				set @strGloOut@("i",idItem,idLoc)=""
			}
		}
	}
	do:'pblnSub ItemsOut()
	quit

ItemsOut()
	;-------------------------------------------------------------------------------
	; Output Items , SOH , Hist , Cost
	;
	; Returns:
	;
	; History:
	; 17-Jun-2014	SCR		SESDF-1378: index alSOH.dBundle
	; 07-May-2014	SCR		SESDF-1378: Created
	;-------------------------------------------------------------------------------
	new idBundle,idHist,idItem,idLoc,idPolicy,idStorage,idSub,objResultSet,sc,strGloOut
	new strSQL
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	set idItem	= ""
	for {
		set idItem	= $order(@strGloOut@("i",idItem))
		quit:idItem=""
		do Out($name(^INART(YM,idItem)))
		do Out($name(^INARTPACK(YM,idItem)))
		do Out($name(^INARTK(YM,idItem)))
		do Out($name(^INStockValCCAdj(YM,idItem)))
		do Out($name(^INAvgCost(YM,idItem)))
		set strSQL="select ItemPolicy,childsub from alSOH.dBundle where item=?"
		set objResultSet	= ##class(%Library.ResultSet).%New()
		set sc				= objResultSet.Prepare(strSQL)
		set:sc sc			= objResultSet.Execute(idItem)
		if sc {
			while objResultSet.Next() {
				set idPolicy	= objResultSet.Data("ItemPolicy")
				set idSub		= objResultSet.Data("childsub")				
				do Out($name(^alINV.dItemPolicyD(idPolicy,"Bundles",idSub)))
			}
		}
		set idLoc=""
		for {
			set idLoc	= $order(@strGloOut@("i",idItem,idLoc))
			quit:idLoc=""
			set strSQL="select id from alSOH.dStockHistory where Item=? and Location=?"
			set objResultSet	= ##class(%Library.ResultSet).%New()
			set sc				= objResultSet.Prepare(strSQL)
			set:sc sc			= objResultSet.Execute(idItem,idLoc)
			if sc {
				while objResultSet.Next() {
					set idHist	= objResultSet.Data("ID")
					do Out($name(^alSOH.dStockHistoryD(idHist)))
				}
			}
			set strSQL="select Storage from alSOH.dSOH where item=? and storage->location=?"
			set objResultSet	= ##class(%Library.ResultSet).%New()
			set sc				= objResultSet.Prepare(strSQL)
			set:sc sc			= objResultSet.Execute(idItem,idLoc)
			if sc {
				while objResultSet.Next() {
					set idStorage	= objResultSet.Data("Storage")
					do Out($name(^alSOH.dSOHD(idItem,idStorage)))
				}
			}
			set strSQL="select Storage,Bundle from alSOH.dBundleStock  where item=? and storage->location=?"
			set objResultSet	= ##class(%Library.ResultSet).%New()
			set sc				= objResultSet.Prepare(strSQL)
			set:sc sc			= objResultSet.Execute(idItem,idLoc)
			if sc {
				while objResultSet.Next() {
					set idStorage	= objResultSet.Data("Storage")
					set idBundle	= objResultSet.Data("Bundle")
					do Out($name(^alSOH.dBundleStockD(idItem,idStorage)))
				}
			}
			do Out($name(^alSOH.dStockBalanceD(idItem,idLoc)))
		}
		
	}
	write !!
	write "x=1 do ##class(alSOH.dSOH).%PurgeIndices()",!
	write "x=1 do ##class(alSOH.dSOH).%BuildIndices()",!
	write "x=1 do ##class(alSOH.dStockBalance).%PurgeIndices()",!
	write "x=1 do ##class(alSOH.dStockBalance).%BuildIndices()",!
	write "x=1 do ##class(alSOH.dBundleStock).%PurgeIndices()",!
	write "x=1 do ##class(alSOH.dBundleStock).%BuildIndices()",!
	write "x=1 do ##class(alSOH.dPeriodBalance).%PurgeIndices()",!
	write "x=1 do ##class(alSOH.dPeriodBalance).%BuildIndices()",!
	write "x=1 do ##class(alSOH.dStockHistory).%PurgeIndices()",!
	write "x=1 do ##class(alSOH.dStockHistory).%BuildIndices()",!
	write "x=1 do ##class(alSOH.dBundle).%PurgeIndices()",!
	write "x=1 do ##class(alSOH.dBundle).%BuildIndices()",!
	write "x=1 do ##class(alSOH.dBundleAttribute).%PurgeIndices()",!
	write "x=1 do ##class(alSOH.dBundleAttribute).%BuildIndices()",!
	write "x=1 do ^WWWVAR",!
	write "x=1 do ReIndex^COMIndex(""INREC"",1)",!
	write "x=1 do ReIndex^COMIndex(""INRECSummary"",1)",!
	write "x=1 do ReIndex^COMIndex(""INRECLine"",1)",!
	write "x=1 do ReIndex^COMIndex(""INTFR"",1)",!
	write "x=1 do ReIndex^COMIndex(""INTFRPickLine"",1)",!
	write "x=1 do ReIndex^COMIndex(""INTFRLine"",1)",!
	write "x=1 do ReIndex^COMIndex(""INART"",1)",!
	write "x=1 do ReIndex^COMIndex(""INARTPACK"",1)",!
	write "x=1 do ReIndex^COMIndex(""INARTK"",1)",!
	write "x=1 do ReIndex^COMIndex(""INStockValCCAdj"",1)",!
	write "x=1 do ReIndex^COMIndex(""INAvgCost"",1)",!
	write "x=1 do ReIndex^COMIndex(""INAUF"",1)",!
	write "x=1 do ReIndex^COMIndex(""INAUFP"",1)",!
	
	write @strGloOut@("st","c")_" [ "_@strGloOut@("st","o")_" / "_@strGloOut@("st","n")_" ] "
	zwrite @strGloOut@("st")
	kill @strGloOut
	quit
	
Test()
	new strGloOut
	set strGloOut	= "^CacheTempTBOUT($znspace)"

	kill @strGloOut
	do Out($name(^alSOH.dStockHistoryD))
	
	quit
Out(pstrGlo)
	;-------------------------------------------------------------------------------
	; Output Globals
	;
	; Returns:
	;
	; History:
	; 11-Jun-2014	SCR		SESDF-1356: Created
	;-------------------------------------------------------------------------------
	new arrSub,intStart,intSub,intSubs,strGlo,strStart,strAct,strGloOut

	set strGloOut	= "^CacheTempTBOUT($znspace)"
	set strGlo	= $name(@pstrGlo)
	set intSubs	= $qlength(strGlo)
	for intSub=1:1:intSubs {
		set arrSub(intSub)	= $qsubscript(strGlo,intSub)
	}
	if $data(@strGlo)#2 {
		do OutData(strGlo)
	}
	if $extract(strGlo,$length(strGlo))=")" {
		set strStart	= $extract(strGlo,1,$length(strGlo)-1)_","  ; Subscript
	} else {
		set strStart	= strGlo_"("	; Whole Global
	}
	set intStart	= $length(strStart)
	for {
		set strGlo	= $query(@strGlo)
		quit:$extract(strGlo,1,intStart)'=strStart
		do OutData(strGlo)
		set strAct	= $piece(strGlo,"(")
		if strAct'="" {
			set @strGloOut@("st","g",strAct)	= $get(@strGloOut@("st","g",strAct))+1
		}
	}
	quit
	
OutData(pstrGlo)
	;-------------------------------------------------------------------------------
	; Output a Global Ref and Data
	;
	; Returns:
	;
	; History:
	; 11-Jun-2014	SCR		SESDF-1356: Created
	;-------------------------------------------------------------------------------
	new intNew,intOld,strData,strGlo,strGloOut,strOut,intKey
	set strData	= $get(@pstrGlo)
	;set strGlo	= $$Convert(pstrGlo)
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	set strGlo	= pstrGlo
	set strData	= $$Convert(strData)
	set strOut	= strGlo_"="_strData
	set intOld	= $length(strOut)
	;write !,strOut
	set strOut	= $$Compress(strOut)
	set intNew	= $length(strOut)
	set @strGloOut@("st","o")	= $get(@strGloOut@("st","o"))+intOld
	set @strGloOut@("st","n")	= $get(@strGloOut@("st","n"))+intNew
	set @strGloOut@("st","c")	= $get(@strGloOut@("st","c"))+1
	;write !,intOld_"/"_intNew_" [ "_@strGloOut@("st","o")_" / "_@strGloOut@("st","n")_" ] "
	write !,strOut
	set intKey		= $increment(@strGloOut@("k","c"))
	if intKey>800000 {
		do KeyShrink()
	}
	;write !,$$Decode(strOut)
	quit



Compress(pstrIn)
	;-------------------------------------------------------------------------------
	; Compress Data
	;
	;	a ??? ; Key 
	;	s ? ; String with Length 0 - 9
	;	t ?? ; String with Length 10 - 99
	;	u ??? ; String with Length 100 - 999
	;	v ???? ; String with Length 1000 - 9999
	;	w ????? ; String with Length 10000 - 99999
	;
	;	k ??? ???? Key Definition
	;	i ??? ??? ? Key Extension
	;	x reset start
	;	y reset end
	; Returns:
	;
	; History:
	; 11-Jun-2014	SCR		SESDF-1356: Created
	;-------------------------------------------------------------------------------

	new intLen,intPos,intSeg,strGloOut,strOut,strSeg
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	set strOut	= ""
	set intLen	= $length(pstrIn)
	set intPos	= 1
	if intLen>19 {
		for intPos=1:1:$length(pstrIn) {
			set strSeg	= $extract(pstrIn,intPos,intPos+9)
			if $length(strSeg)>9 {
				set intSeg	= $increment(@strGloOut@("s",strSeg))
				if intSeg>$$$RepCnt {
					; Compress
					set strOut	= strOut _$$Build(.pstrIn,.intPos)
				} 
			}
		}
	}
	if pstrIn'="" {
		set strOut = strOut_$$StringOut(pstrIn)
	}
	quit strOut

Build(pstrIn,&pintPos)
	;-------------------------------------------------------------------------------
	; Build Compressed or leave as text
	;
	; Returns:
	;
	; History:
	; 11-Jun-2014	SCR		SESDF-1356: Created
	;-------------------------------------------------------------------------------
	new intEnd,intLen,intPos,intTry,strGloOut,strKey,strOut,strSeg,strTry
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	set strOut	= ""
	if pintPos>1 {
		set strOut	= strOut_$$StringOut($extract(pstrIn,1,pintPos-1))
		set pstrIn	= $extract(pstrIn,pintPos,9999999)
	}
	set intPos	= 1
	set intEnd	= intPos+9
	set strSeg	= $extract(pstrIn,intPos,intPos+9)
	for intTry = intPos+9:$$$BitSize:$length(pstrIn) {
		set strTry	= $extract(pstrIn,intPos,intTry)
		if $increment(@strGloOut@("s",strTry))> $$$RepCnt {
			set strSeg	= strTry 
			set intEnd	= intTry
		} else {
			quit
		}
	}
	set strKey 	= $get(@strGloOut@("k","s",strSeg)) 
	if strKey="" {
		set strOut	= strOut _$$SetSeg(strSeg)
	} else {
		set strOut	= strOut _"a"_strKey
		set @strGloOut@("st","a") = $get(@strGloOut@("st","a"))+1
	}
	set intLen	= $length(pstrIn)
	set pintPos = 0
	set pstrIn	= $extract(pstrIn,intEnd+1,9999999)
	quit strOut
	
SetSeg(pstrSeg)
	;-------------------------------------------------------------------------------
	; Put a segment of data in a key
	;
	; Returns:
	;
	; History:
	; 11-Jun-2014	SCR		SESDF-1356: Created
	;-------------------------------------------------------------------------------
	new intKey,strGloOut,strKey,strOut,strPrev
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	set strOut		= ""
	set intKey		= $increment(@strGloOut@("k","c"))
	set strKey		= ""
	set strKey		= strKey _ $char(intKey\8836#94+33)
	set strKey		= strKey _ $char(intKey\94#94+33)
	set strKey		= strKey _ $char(intKey#94+33)
	set @strGloOut@("k","s",pstrSeg)	= strKey
	set @strGloOut@("k","r",strKey)	= pstrSeg
	set strPrev		= $get(@strGloOut@("k","s",$extract(pstrSeg,1,$length(pstrSeg)-$$$BitSize)))
	
	if strPrev'="" {
		set strOut		= strOut_"i"_strKey_strPrev_$extract(pstrSeg,$length(pstrSeg)-$$$BitSize+1,$length(pstrSeg))
	} else {
		set strOut		= strOut_"k"_strKey_$translate($justify($length(pstrSeg),4)," ",0)_pstrSeg
	}
	quit strOut

StringOut(pstrIn)
	;-------------------------------------------------------------------------------
	; Send Text
	;
	; Returns:
	;
	; History:
	; 11-Jun-2014	SCR		SESDF-1356: Created
	;-------------------------------------------------------------------------------
	new intLen,strGloOut,strOut
	set intLen	= $length(pstrIn)
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	set @strGloOut@("st","s",intLen) = $get(@strGloOut@("st","s",intLen))+1
	if intLen<10 {
		set strOut = "s"_intLen_pstrIn
	} elseif intLen<100 {
		set strOut = "t"_intLen_pstrIn
	} elseif intLen<1000 {
		set strOut = "u"_intLen_pstrIn
	} elseif intLen<10000 {
		set strOut = "v"_intLen_pstrIn
	} else {
		set strOut = "w"_intLen_pstrIn
	}
	quit strOut

Convert(pstrData)
	;-------------------------------------------------------------------------------
	; Convert non ascii and quotes
	;
	; Returns:
	;
	; History:
	; 11-Jun-2014	SCR		SESDF-1356: Created
	;-------------------------------------------------------------------------------
	quit ##class(Common.Dump).DumpData(pstrData,,1)

	
DecodeFile(pstrFile,pblnSet=$$$NO)
	;-------------------------------------------------------------------------------
	; Decode Compressed Data File
	;
	; Returns:
	;
	; History:
	; 11-Jun-2014	SCR		SESDF-1356: Created
	;-------------------------------------------------------------------------------
	new strCode,strDecode,strGloOut,strInput,blnReset,bnlResetNew
	close pstrFile
	do $ZUTIL(68,40,1)
	open pstrFile:"rs"
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	kill @strGloOut@("d")
	;else  write !,"Can not open file" quit
	set blnReset	= $$$NO
	for {
		use pstrFile
		quit:$zeof=-1
		read strInput
		use 0
		write !,strInput
		set bnlResetNew	= blnReset
		set strDecode	= $$Decode(strInput,.bnlResetNew,.blnReset)
		write !,strDecode
		if pblnSet&&('blnReset) {
			set strCode="s "_strDecode
			x strCode
		}
		set blnReset	= bnlResetNew
	}
	use 0
	close pstrFile
	quit


Decode(pstrCode,&pblnResetNew,&pblnReset)
	;-------------------------------------------------------------------------------
	; Decode Compressed Data
	;
	; Returns:
	;
	; History:
	; 11-Jun-2014	SCR		SESDF-1356: Created
	;-------------------------------------------------------------------------------
	new intLen,strCmd,strGloOut,strKey,strOut,strSrc,strText,p
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	set strOut	= ""
	;write !,"Job ",$job for i=1:1:100 h 1
	for p=1:1:10000 {
		quit:pstrCode=""
		set strCmd	= $extract(pstrCode)
		if strCmd="a" {
			set strKey	= $extract(pstrCode,2,4)
			set strText	= @strGloOut@("d",strKey)
			set strOut	= strOut _ strText
			set pstrCode= $extract(pstrCode,5,999999)
			set @strGloOut@("dc",strText,1)	= $g(@strGloOut@("dc",strText,1))+1
		} elseif strCmd="s" {
			set intLen	=  $extract(pstrCode,2,2)
			set strOut	= strOut _ $extract(pstrCode,3,intLen+2)
			set pstrCode= $extract(pstrCode,intLen+3,999999)			
		} elseif strCmd="t" {
			set intLen	=  $extract(pstrCode,2,3)
			set strOut	= strOut _ $extract(pstrCode,4,intLen+3)
			set pstrCode= $extract(pstrCode,intLen+4,999999)			
		} elseif strCmd="u" {
			set intLen	=  $extract(pstrCode,2,4)
			set strOut	= strOut _ $extract(pstrCode,5,intLen+4)
			set pstrCode= $extract(pstrCode,intLen+5,999999)			
		} elseif strCmd="v" {
			set intLen	=  $extract(pstrCode,2,5)
			set strOut	= strOut _ $extract(pstrCode,6,intLen+5)
			set pstrCode= $extract(pstrCode,intLen+6,999999)			
		} elseif strCmd="w" {
			set intLen	=  $extract(pstrCode,2,6)
			set strOut	= strOut _ $extract(pstrCode,7,intLen+6)
			set pstrCode= $extract(pstrCode,intLen+7,999999)			
		} elseif strCmd="k" {
			set strKey	= $extract(pstrCode,2,4)
			set intLen	= +$extract(pstrCode,5,8)
			set strText	= $extract(pstrCode,9,intLen+8)	
			set strOut	= strOut _ strText
			set pstrCode= $extract(pstrCode,intLen+9,999999)						
			set @strGloOut@("d",strKey)	= strText
			set @strGloOut@("d",strKey,1)	= $g(@strGloOut@("d",strKey,1))+1
			set @strGloOut@("dc",strText,1)	= $g(@strGloOut@("dc",strText,1))+1
		
		} elseif strCmd="i" {
			set strKey	= $extract(pstrCode,2,4)
			set strSrc	= $extract(pstrCode,5,7)
			set strText	= @strGloOut@("d",strSrc) _ $extract(pstrCode,8,7+$$$BitSize)	
			set strOut	= strOut _ strText
			set pstrCode= $extract(pstrCode,8+$$$BitSize,999999)						
			set @strGloOut@("d",strKey)	= strText
			set @strGloOut@("d",strKey,1)	= $g(@strGloOut@("d",strKey,1))+1
			set @strGloOut@("dc",strText,1)	= $g(@strGloOut@("dc",strText,1))+1
			
		} elseif strCmd="x" {
			kill @strGloOut@("d")
			set pstrCode	= $extract(pstrCode,2,999999)
			set pblnReset	= $$$YES
			set pblnResetNew= $$$YES
		} elseif strCmd="y" {
			set pblnResetNew= $$$YES
		}
	}
	quit strOut

KeyShrink()
	;-------------------------------------------------------------------------------
	; Shrink Keys , keep the top 10%
	;
	; Returns:
	;
	; History:
	; 10-Oct-2014	SCR		HEVA-1580: Created
	;-------------------------------------------------------------------------------
	new intCnt,intCur,intMax,strGloOut,strKey,strOut
	
	set strGloOut	= "^CacheTempTBOUT($znspace)"
	kill @strGloOut@("ks")
	set strKey	= ""
	for {
		set strKey	= $order(@strGloOut@("s",strKey),1,intCnt)
		quit:strKey=""
		set @strGloOut@("ks","s",intCnt,strKey)=""
	}
	kill @strGloOut@("k")
	kill @strGloOut@("s")
	write !,"x"
	set intCur	= 0
	set intMax	= 800000/10
	set intCnt	= ""
	set strOut	= ""
	for {
		set intCnt	= $order(@strGloOut@("ks","s",intCnt),-1)
		quit:intCur>intMax
		quit:intCnt<10
		set strKey	= ""
		for {
			set strKey	= $order(@strGloOut@("ks","s",intCnt,strKey))
			quit:strKey=""
			set @strGloOut@("ks","o",strKey)	= intCnt
			set intCur	= intCur+1
			set @strGloOut@("s",strKey)	= $$$RepCnt 
			set strOut	= strOut _$$SetSeg(strKey)
			if $length(strOut)>120 {
				write !,strOut			
				set strOut	= ""
			}

		}
	}
	;set strOut	= strOut _ "x" ; Reset Keys
	kill @strGloOut@("ks")
	if strOut'="" {
		write !,strOut			
	}
	write !,"y"
	quit
]]></Routine>
</Export>