<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARMovMensalContabil" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARMovMensalContabil
#include COMSYS
#define Titulo "" 
	;-------------------------------------------------------------------------------
    ; Refactoring VARTCIRMMA
    ; Relatorio utilizado para apresentar entradas e saídas agrupadas por natureza 
    ; despesa do produto, em alguns casos chamado de conta contábil de despesa (não é a mesma coisa)
    ; mas o campo da INART utilizado é o mesmo. piece 278 - FREE3
    ;
    ; History:
    ; 29-Dez-2011	Karine	Created
    ;-------------------------------------------------------------------------------	
 

OnAfterSave
	;-------------------------------------------------------------------------------
    ; Salva as variáveis de tela para filtro de pesquisa
    ;
    ; History:
    ; 07-Mai-2012	Gustavo		Incluído VARLogAfterSave
    ; 11-Jan-2012	Karine		Retirada a opção de mostrar apenas contas com movimentação
    ;                     		pois tem muitos produtos não utilizados no SESPE gerando 
    ;                     		saldos zerados e tornando a pesquisa lenta   
    ; 29-Dez-2011	Karine		Created
    ;-------------------------------------------------------------------------------	
	;OnAfterSave^VARMovMensalContabil
	new Referencia, ano, mes, getMes, local, programa, formato
	
	set mes        = $get(VORG(1)) 
	set getMes     = $$FillChar^VARSQL(mes,2,"0") ;VARPARA salva sem o zero a esquerda
	set ano        = $get(VORG(2)) 
	set Referencia = ano_"/"_getMes
	set MostrarMov = 1  ;$get(VORG(3)) ;sempre mostrar apenas contas com movimentação
	set MostrarDet = $get(VORG(4))
	set local      = $get(VORG(6))
	set programa   = $get(VORG(7))
	set formato    = $get(VORG(8))
	
	if (formato = "") {
		set formato = 1
	}
			
	set ^VARTempMovMensalContabil(YM,YBED,1) = mes
	set ^VARTempMovMensalContabil(YM,YBED,2) = ano
	set ^VARTempMovMensalContabil(YM,YBED,3) = MostrarMov
	set ^VARTempMovMensalContabil(YM,YBED,4) = MostrarDet
	set ^VARTempMovMensalContabil(YM,YBED,5) = Referencia
	set ^VARTempMovMensalContabil(YM,YBED,6) = local
	set ^VARTempMovMensalContabil(YM,YBED,7) = programa
	set ^VARTempMovMensalContabil(YM,YBED,8) = formato
	
	;do GerarSaldoDetalhe(Referencia)
	
	do VARLogAfterSave^VARUtil(YBED,YFORM)
	do GoToForm^COMUtilForm("VARMovMensalContabil",Referencia,,,,,)
	
	quit
	
	
OnAfterDataFields()
	;OnAfterDataFields^VARMovMensalContabil
	do PrintJS
	
	//Só apresenta os resultados da consulta caso o usuário tenha clicado no botão 'Ok' do form.
	quit:('$$isAfterSaveLogged^VARUtil(YBED,YFORM))
	do ClearVARLogAterSave^VARUtil(YBED,YFORM)
	
	set MostrarDet = ""
	set MostrarDet = $get(^VARTempMovMensalContabil(YM,YBED,4))
	if MostrarDet = 1 {
		do MostraAnalitico()
	}
	else{
		do MostraResumido()	
	}
	
	quit
	

MostraResumido()
	;-------------------------------------------------------------------------------
    ; Mostra os dados da tela através de COMTable de forma resumida
    ;
    ; History:
    ; 29-Dez-2011	Karine	Created
    ;-------------------------------------------------------------------------------	

	//quit:($get(VORG(1)) = "")
	quit:('$G(^VARTempMovMensalContabil(YM,YBED,5))) ;mês e ano de referencia
	
	new vfilterReferencia, count, vTotalSaldoAnterior, vTotalEntradas,
	    vTotalSaidas, vTotalSaldoAtual, sContaContabil, sDescContaContabil, sAnoMes, sSaldoAnterior,
	    sEntradas, sSaidas, sSaldoAtual, vfilterLocal, vfilterPrograma  
	
	//set vfilterReferencia = $get(VORG(1))
	set vfilterReferencia = $G(^VARTempMovMensalContabil(YM,YBED,5))
	set MostraMov         = $get(^VARTempMovMensalContabil(YM,YBED,4))
	set vfilterLocal      = $get(^VARTempMovMensalContabil(YM,YBED,6))
	set vfilterPrograma   = $get(^VARTempMovMensalContabil(YM,YBED,7))
	set vformato          = $get(^VARTempMovMensalContabil(YM,YBED,8))
	// VER AQUI
    
    set meuSQL = ""
	set meuSQL = meuSQL_"SELECT "
	set meuSQL = meuSQL_"AnoMes, "
	set meuSQL = meuSQL_"I.FREE3 as ContaContabil, "
	set meuSQL = meuSQL_"$$SQLGetUserParamDesc^VARSQL('VARTCICONTACONTABIL~'||I.FREE3) as DescContaContabil, "
	set meuSQL = meuSQL_"Produto, "
	set meuSQL = meuSQL_"$$SQLGetDescricaoProduto^VARSQL(Produto) as DescProduto, "
	set meuSQL = meuSQL_"$$SQLGetUnitSigla^VARSQL(Produto) as DescUnidade, "
	set meuSQL = meuSQL_"SUM(ROUND(SaldoAnterior,2)) as SaldoAnterior, "
	set meuSQL = meuSQL_"SUM(ROUND(Entradas,2)) as Entradas, "
	set meuSQL = meuSQL_"SUM(ROUND(Saidas,2)) as Saidas, "
	set meuSQL = meuSQL_"SUM(ROUND(SaldoAtual,2)) as SaldoAtual, "
	set meuSQL = meuSQL_"QtdeAnterior, "
	set meuSQL = meuSQL_"QtdeEntradas, "
	set meuSQL = meuSQL_"QtdeSaidas, "
	set meuSQL = meuSQL_"QtdeAtual, "
	set meuSQL = meuSQL_"MostrarRegistro, "
	set meuSQL = meuSQL_"Mov.ProgramaMov "
	set meuSQL = meuSQL_"FROM SQLUser.VARMovContabilDetalhe as Mov "
	set meuSQL = meuSQL_"LEFT JOIN INART as I "
	set meuSQL = meuSQL_"ON Mov.Company = I.Company "
	set meuSQL = meuSQL_"AND Mov.Produto = I.ItemNumber "
	set meuSQL = meuSQL_"WHERE Mov.Company = 0 "
	set meuSQL = meuSQL_"AND Mov.AnoMes like '"_vfilterReferencia_"' "
	
	if (vfilterLocal '= ""){
		set meuSQL = meuSQL_"AND Mov.LocalMov = '"_vfilterLocal_"' "
	}
	
	if (vfilterPrograma '= ""){
		set meuSQL = meuSQL_"AND Mov.ProgramaMov = '"_vfilterPrograma_"' "
	}
	
	set meuSQL = meuSQL_"GROUP BY I.FREE3, Mov.AnoMes "
	set meuSQL = meuSQL_"ORDER BY to_number(I.FREE3)"
	  
	set ContabilGridDet = ##class(%Library.ResultSet).%New()
  	do ContabilGridDet.Prepare(meuSQL) 
  	do ContabilGridDet.Execute()
	
	//Tabela
   	new lstHeader
 	set lstHeader = ""
  	set lstHeader = lstHeader_$listbuild("Conta","Saldo Anterior","Entradas","Saídas","Saldo Atual")
  	
  	if $$Start^COMTable(lstHeader,"Movimentação Mensal Contábil - Resumida - Mês de Referência: "_vfilterReferencia) {
		
		set count               = 0
		set vTotalSaldoAnterior = 0
		set vTotalEntradas      = 0
		set vTotalSaidas        = 0
		set vTotalSaldoAtual    = 0
		set programaAnterior    = ""
		
		While (ContabilGridDet.Next()) {
    
	    	set sAnoMes = ContabilGridDet.GetData(1)
	    	set sContaContabil = ContabilGridDet.GetData(2)
	    	set sDescContaContabil = ContabilGridDet.GetData(3)
		    set sProduto = ContabilGridDet.GetData(4)
		    set sDescProduto = ContabilGridDet.GetData(5)
		    set sDescUnidade = ContabilGridDet.GetData(6)
			set sSaldoAnterior = ContabilGridDet.GetData(7)
			set sEntradas = ContabilGridDet.GetData(8)
			set sSaidas = ContabilGridDet.GetData(9)
			set sSaldoAtual = ContabilGridDet.GetData(10)
		    set sQtdeAnterior = ContabilGridDet.GetData(11)
		    set sQtdeEntradas = ContabilGridDet.GetData(12)
		    set sQtdeSaidas = ContabilGridDet.GetData(13)
		    set sQtdeAtual = ContabilGridDet.GetData(14)
			set sMostrarRegistro = ContabilGridDet.GetData(15)
			set sPrograma = ContabilGridDet.GetData(16)

			set count    = $increment(count)
			set objSaldo = ""
			
			set vTotalSaldoAnterior = vTotalSaldoAnterior + sSaldoAnterior
			set vTotalEntradas      = vTotalEntradas + sEntradas
			set vTotalSaidas        = vTotalSaidas + sSaidas
			set vTotalSaldoAtual    = vTotalSaldoAtual + sSaldoAtual

			set Chave = vfilterReferencia_","_sContaContabil
		
			do NewLine^COMTable()			
			do InsertCell^COMTable(sContaContabil_" - "_sDescContaContabil,"VARMovContabilDetalhe",Chave,Chave)
			do InsertCell^COMTable($$FormatCurrency^VARSQL(sSaldoAnterior),,,,"RIGHT")
			do InsertCell^COMTable($$FormatCurrency^VARSQL(sEntradas),,,,"RIGHT")
			do InsertCell^COMTable($$FormatCurrency^VARSQL(sSaidas),,,,"RIGHT")
			do InsertCell^COMTable($$FormatCurrency^VARSQL(sSaldoAtual),,,,"RIGHT")
	    	do EndLine^COMTable()
		}
			if (count = 0) {
				do NewLine^COMTable()
				do InsertCell^COMTable("Nenhuma movimentação para esse Mês de Referência.",,,,,,11)
		    	do EndLine^COMTable()
			}
			else {
				do NewLine^COMTable("lightsteelblue")
				do InsertCell^COMTable("<strong>Total Geral</strong>",,,,"RIGHT")
				do InsertCell^COMTable("<strong>R$ "_$$^WWWTR(0,8,vTotalSaldoAnterior,2)_"</strong>",,,,"RIGHT")	
				do InsertCell^COMTable("<strong>R$ "_$$^WWWTR(0,8,vTotalEntradas,2)_"</strong>",,,,"RIGHT")	
				do InsertCell^COMTable("<strong>R$ "_$$^WWWTR(0,8,vTotalSaidas,2)_"</strong>",,,,"RIGHT")	
				do InsertCell^COMTable("<strong>R$ "_$$^WWWTR(0,8,vTotalSaldoAtual,2)_"</strong>",,,,"RIGHT")	
				do EndLine^COMTable()		
			}
		}
		
  	do Stop^COMTable()	
	do ContabilGridDet.Close()
	quit
	

MostraAnalitico(pConta="")
	;-------------------------------------------------------------------------------
    ; Mostra os dados da tela através de COMTable de forma detalhada
    ;
    ; History:
    ; 29-Dez-2011	Karine	Created
    ;-------------------------------------------------------------------------------	
	if (YFORM = "VARMovContabilDetalhe"){
		set ^VARTempMovMensalContabil(YM,YBED,8) = 1
	}
	
	quit:('$G(^VARTempMovMensalContabil(YM,YBED,5)))
	
	new vfilterReferencia,count,vTotalSaldoAnterior,vTotalEntradas,
	    vTotalSaidas,vTotalSaldoAtual, MostraMov, vfilterLocal, vfilterPrograma, vformato
	
	set vfilterReferencia = $get(^VARTempMovMensalContabil(YM,YBED,5))
	set MostraMov         = $get(^VARTempMovMensalContabil(YM,YBED,3))
	set vfilterLocal      = $get(^VARTempMovMensalContabil(YM,YBED,6))
	set vfilterPrograma   = $get(^VARTempMovMensalContabil(YM,YBED,7))
	set vformato          = $get(^VARTempMovMensalContabil(YM,YBED,8))
	
	set meuSQL = ""
	set meuSQL = meuSQL_"SELECT "
	set meuSQL = meuSQL_"AnoMes, "
	set meuSQL = meuSQL_"I.FREE3 as ContaContabil, "
	set meuSQL = meuSQL_"$$SQLGetUserParamDesc^VARSQL('VARTCICONTACONTABIL~'||I.FREE3) as DescContaContabil, "
	set meuSQL = meuSQL_"Produto, "
	set meuSQL = meuSQL_"$$SQLGetDescricaoProduto^VARSQL(Produto) as DescProduto, "
	set meuSQL = meuSQL_"$$SQLGetUnitSigla^VARSQL(Produto) as DescUnidade, "
	if (vformato '= 2){
		set meuSQL = meuSQL_"SUM(ROUND(SaldoAnterior,2)) AS SaldoAnterior, "
		set meuSQL = meuSQL_"SUM(ROUND(Entradas,2)) AS Entradas, "
		set meuSQL = meuSQL_"SUM(ROUND(Saidas,2)) AS Saidas, "
		set meuSQL = meuSQL_"SUM(ROUND(SaldoAtual,2)) AS SaldoAtual, "
		set meuSQL = meuSQL_"SUM(QtdeAnterior) AS QtdeAnterior, "
		set meuSQL = meuSQL_"SUM(QtdeEntradas) AS QtdeEntradas, "
		set meuSQL = meuSQL_"SUM(QtdeSaidas) AS QtdeSaidas, "
		set meuSQL = meuSQL_"SUM(QtdeAtual) AS QtdeAtual, "
	}
	else {
		set meuSQL = meuSQL_"ROUND(SaldoAnterior,2) AS SaldoAnterior, "
		set meuSQL = meuSQL_"ROUND(Entradas,2) AS Entradas, "
		set meuSQL = meuSQL_"ROUND(Saidas,2) AS Saidas, "
		set meuSQL = meuSQL_"ROUND(SaldoAtual,2) AS SaldoAtual, "
		set meuSQL = meuSQL_"QtdeAnterior, "
		set meuSQL = meuSQL_"QtdeEntradas, "
		set meuSQL = meuSQL_"QtdeSaidas, "
		set meuSQL = meuSQL_"QtdeAtual, "
	}
	set meuSQL = meuSQL_"MostrarRegistro, "
	set meuSQL = meuSQL_"Mov.ProgramaMov "
	set meuSQL = meuSQL_"FROM SQLUser.VARMovContabilDetalhe as Mov "
	set meuSQL = meuSQL_"LEFT JOIN INART as I "
	set meuSQL = meuSQL_"ON Mov.Company = I.Company "
	set meuSQL = meuSQL_"AND Mov.Produto = I.ItemNumber "
	set meuSQL = meuSQL_"WHERE Mov.Company = 0 "
	set meuSQL = meuSQL_"AND Mov.AnoMes like '"_vfilterReferencia_"' "

	
	if (vfilterLocal '= ""){
		set meuSQL = meuSQL_"AND Mov.LocalMov = '"_vfilterLocal_"' "
	}
	
	if (vfilterPrograma '= ""){
		set meuSQL = meuSQL_"AND Mov.ProgramaMov = '"_vfilterPrograma_"' "
	}
	
	if (vformato = 2){
		set meuSQL = meuSQL_"ORDER BY +Mov.ProgramaMov, to_number(I.FREE3), Mov.Produto "
	}
	else {
		set meuSQL = meuSQL_"GROUP BY I.ItemNumber "
		;set meuSQL = meuSQL_"ORDER BY I.FREE3, DescProduto "
		set meuSQL = meuSQL_"ORDER BY to_number(I.FREE3), DescProduto "
	}
	  
	set ContabilGridDet = ##class(%Library.ResultSet).%New()
  	do ContabilGridDet.Prepare(meuSQL) 
  	do ContabilGridDet.Execute()
    
    //Tabela
	new lstHeader
	set lstHeader = ""
	;set lstHeader = lstHeader_$listbuild("Cod", "Produto","UN","Saldo Anterior","   Entradas   ","    Saídas    ","  Saldo Atual ")
	  	
	if $$Start^COMTable(lstHeader,"Movimentação Contábil Analítica - Mês de Referência: "_vfilterReferencia) {
    
    	set count                = 0
		set vTotalSaldoAnterior  = 0
		set vTotalEntradas       = 0
		set vTotalSaidas         = 0
		set vTotalSaldoAtual     = 0
	
		set vTotalGSaldoAnterior = 0
		set vTotalGEntradas      = 0
		set vTotalGSaidas        = 0
		set vTotalGSaldoAtual    = 0
		
		set programaAnterior  = -1
		set ContaAnterior = ""
    	
   	 	While (ContabilGridDet.Next()) {
    
	    	set sAnoMes = ContabilGridDet.GetData(1)
	    	set sContaContabil = ContabilGridDet.GetData(2)
	    	set sDescContaContabil = ContabilGridDet.GetData(3)
		    set sProduto = ContabilGridDet.GetData(4)
		    set sDescProduto = ContabilGridDet.GetData(5)
		    set sDescUnidade = ContabilGridDet.GetData(6)
			set sSaldoAnterior = ContabilGridDet.GetData(7)
			set sEntradas = ContabilGridDet.GetData(8)
			set sSaidas = ContabilGridDet.GetData(9)
			set sSaldoAtual = ContabilGridDet.GetData(10)
		    set sQtdeAnterior = ContabilGridDet.GetData(11)
		    set sQtdeEntradas = ContabilGridDet.GetData(12)
		    set sQtdeSaidas = ContabilGridDet.GetData(13)
		    set sQtdeAtual = ContabilGridDet.GetData(14)
			set sMostrarRegistro = ContabilGridDet.GetData(15)
			set sPrograma = ContabilGridDet.GetData(16)
				
			;Se os Valores Analíticos para essa conta/produto estiverem zerados continua
			if (sSaldoAnterior=0)&&(sEntradas=0)&&(sSaidas=0)&&(sSaldoAtual=0){
					continue
			}
		
			if pConta '= "" { ;filtra por conta contábil 
				continue:sContaContabil'=pConta
			}
					
			if (ContaAnterior '= sContaContabil) {
			
				if (ContaAnterior '= "") {
				
					do NewLine^COMTable("beige")	
					do InsertCell^COMTable("<b>"_"Sub-Total"_"</b>",,,,"RIGHT",,3)
					do InsertCell^COMTable("<b>"_"R$ "_$$^WWWTR(0,8,vTotalSaldoAnterior,2)_"</b>",,,,"RIGHT",,2)
					do InsertCell^COMTable("<b>"_"R$ "_$$^WWWTR(0,8,vTotalEntradas,2)_"</b>",,,,"RIGHT",,2)
					do InsertCell^COMTable("<b>"_"R$ "_$$^WWWTR(0,8,vTotalSaidas,2)_"</b>",,,,"RIGHT",,2)
					do InsertCell^COMTable("<b>"_"R$ "_$$^WWWTR(0,8,vTotalSaldoAtual,2)_"</b>",,,,"RIGHT",,2)
			    	do EndLine^COMTable()

					do NewLine^COMTable("lightgrey")
					do InsertCell^COMTable("",,,,,,12)
					do EndLine^COMTable()					
				
				}
			
				if (vformato = 2) {					
		
					if (programaAnterior '= sPrograma){				
		
						do NewLine^COMTable("lightsteelblue")	
		
						if (sPrograma = ""){
								do InsertCell^COMTable("<b>Sem Programa</b>",,,,"LEFT",,11)
						}
		
						else {
							do InsertCell^COMTable("<b>"_"Programa: "_$$GetNomePrograma^VARSQL(sPrograma)_"</b>",,,,"LEFT",,11)
						}
		
						do NewLine^COMTable("lightgrey")
						do InsertCell^COMTable("",,,,,,12)
						do EndLine^COMTable()						
						set programaAnterior = sPrograma
		
					}
			
					if (programaAnterior = sPrograma){
						set ContaAnterior = sContaContabil
					}
		
					else {
						set ContaAnterior = ""
					}	
				}
		
				if (vformato '= 2){
					set ContaAnterior      = sContaContabil
					set vDescContaAnterior = sDescContaContabil
				}
				;Coloquei o somatório do Total Geral aqui
				set vTotalGSaldoAnterior = vTotalGSaldoAnterior + vTotalSaldoAnterior
				set vTotalGEntradas      = vTotalGEntradas      + vTotalEntradas
				set vTotalGSaidas        = vTotalGSaidas        + vTotalSaidas
				set vTotalGSaldoAtual    = vTotalGSaldoAtual    + vTotalSaldoAtual
	
				set vTotalSaldoAnterior = 0
				set vTotalEntradas      = 0
				set vTotalSaidas        = 0
				set vTotalSaldoAtual    = 0					

				do NewLine^COMTable("")	
				do NewLine^COMTable("darkgray")		
				do InsertCell^COMTable("<b>"_"Conta: "_sContaContabil_" - "_sDescContaContabil_"</b>",,,,,,3)
				do InsertCell^COMTable("<b>"_"Saldo Anterior"_"</b>",,,,"CENTER",,2)
				do InsertCell^COMTable("<b>"_"Entradas"_"</b>",,,,"CENTER",,2)
				do InsertCell^COMTable("<b>"_"Saídas"_"</b>",,,,"CENTER",,2)
				do InsertCell^COMTable("<b>"_"Saldo Atual"_"</b>",,,,"CENTER",,2)
		    	do EndLine^COMTable()
	
				do NewLine^COMTable("lightsteelblue")	
				do InsertCell^COMTable("<b>"_"Produto"_"</b>")
				do InsertCell^COMTable("<b>"_"Descrição"_"</b>")
				do InsertCell^COMTable("<b>"_"Unidade"_"</b>")
				do InsertCell^COMTable("<b>"_"Quant."_"</b>",,,,"RIGHT")
				do InsertCell^COMTable("<b>"_"Valor"_"</b>",,,,"RIGHT")
				do InsertCell^COMTable("<b>"_"Quant."_"</b>",,,,"RIGHT")
				do InsertCell^COMTable("<b>"_"Valor"_"</b>",,,,"RIGHT")
				do InsertCell^COMTable("<b>"_"Quant."_"</b>",,,,"RIGHT")
				do InsertCell^COMTable("<b>"_"Valor"_"</b>",,,,"RIGHT")
				do InsertCell^COMTable("<b>"_"Quant."_"</b>",,,,"RIGHT")
				do InsertCell^COMTable("<b>"_"Valor"_"</b>",,,,"RIGHT")

		    	do EndLine^COMTable()	
		 
		 	}	
		
			set count    = $i(count)
			set objSaldo = ""

			set vTotalSaldoAnterior = vTotalSaldoAnterior + sSaldoAnterior
			set vTotalEntradas      = vTotalEntradas      + sEntradas
			set vTotalSaidas        = vTotalSaidas        + sSaidas
			set vTotalSaldoAtual    = vTotalSaldoAtual    + sSaldoAtual

			do NewLine^COMTable()
			do InsertCell^COMTable(sProduto)
			do InsertCell^COMTable(sDescProduto,,,,,,,,,$$$YES)
			do InsertCell^COMTable(sDescUnidade)
			do InsertCell^COMTable($$^WWWTR(0,12,sQtdeAnterior),,,,"RIGHT")
			do InsertCell^COMTable($$FormatCurrency^VARSQL(sSaldoAnterior),,,,"RIGHT")
			do InsertCell^COMTable($$^WWWTR(0,12,sQtdeEntradas),,,,"RIGHT")
			do InsertCell^COMTable($$FormatCurrency^VARSQL(sEntradas),,,,"RIGHT")
			do InsertCell^COMTable($$^WWWTR(0,12,sQtdeSaidas),,,,"RIGHT")
			do InsertCell^COMTable($$FormatCurrency^VARSQL(sSaidas),,,,"RIGHT")
			do InsertCell^COMTable($$^WWWTR(0,12,sQtdeAtual),,,,"RIGHT")
			do InsertCell^COMTable($$FormatCurrency^VARSQL(sSaldoAtual),,,,"RIGHT")
			do EndLine^COMTable()	
 		
 		} // fim do While
									
		if (count = 0) {
			do NewLine^COMTable()
			do InsertCell^COMTable("Nenhuma movimentação para esse Mês de Referência.",,,,,,11)
	    	do EndLine^COMTable()
		}
		else {
		
			;Imprime Sub-Total
			do NewLine^COMTable("beige")			
			do InsertCell^COMTable("<b>"_"Sub-Total"_"</b>",,,,"RIGHT",,3)
			do InsertCell^COMTable("<b>"_"R$ "_$$^WWWTR(0,8,vTotalSaldoAnterior,2)_"</b>",,,,"RIGHT",,2)
			do InsertCell^COMTable("<b>"_"R$ "_$$^WWWTR(0,8,vTotalEntradas,2)_"</b>",,,,"RIGHT",,2)
			do InsertCell^COMTable("<b>"_"R$ "_$$^WWWTR(0,8,vTotalSaidas,2)_"</b>",,,,"RIGHT",,2)
			do InsertCell^COMTable("<b>"_"R$ "_$$^WWWTR(0,8,vTotalSaldoAtual,2)_"</b>",,,,"RIGHT",,2)
	    	do EndLine^COMTable()

			do NewLine^COMTable("lightgrey")
			do InsertCell^COMTable("",,,,,,12)
			do EndLine^COMTable()						
		
			;Saldos Totais
			set vTotalGSaldoAnterior = vTotalGSaldoAnterior + $justify(vTotalSaldoAnterior,0,2)
			set vTotalGEntradas      = vTotalGEntradas      + $justify(vTotalEntradas,0,2)
			set vTotalGSaidas        = vTotalGSaidas        + $justify(vTotalSaidas,0,2)
			set vTotalGSaldoAtual    = vTotalGSaldoAtual    + $justify(vTotalSaldoAtual,0,2)
	
			;Imprime Total Geral
			do NewLine^COMTable("slategray")
			do InsertCell^COMTable("<strong>Total Geral</strong>",,,,"RIGHT",,3)
		    do InsertCell^COMTable("<strong>R$ "_$$^WWWTR(0,8,vTotalGSaldoAnterior,2)_"</strong>",,,,"RIGHT",,2)	
		    do InsertCell^COMTable("<strong>R$ "_$$^WWWTR(0,8,vTotalGEntradas,2)_"</strong>",,,,"RIGHT",,2)	
		    do InsertCell^COMTable("<strong>R$ "_$$^WWWTR(0,8,vTotalGSaidas,2)_"</strong>",,,,"RIGHT",,2)	
		    do InsertCell^COMTable("<strong>R$ "_$$^WWWTR(0,8,vTotalGSaldoAtual,2)_"</strong>",,,,"RIGHT",,2)	
			do EndLine^COMTable()		
		}	
		
	 }	
	 do Stop^COMTable()		
     do ContabilGridDet.Close()

	quit


OnAfterDataFieldsDetalhe(pConta="")
	;OnAfterDataFieldsDetalhe^VARMovMensalContabil()
	new vReferencia, vConta
	
	;Não utiliza o YKEY, pois não vem com o id da Conta contábil
	set vReferencia = $piece(YPARA,",",1)
	set vConta      = $piece(YPARA,",",2)
	
	do MostraAnalitico(vConta)
	
	quit
	

GerarSaldoDetalhe(pReferencia="")
	;-------------------------------------------------------------------------------
    ; Popula a tabela VARMovContabilDetalhe com as informações de movimentação se
	; o mês de referência for o mês atual, se for um mês anterior ao atual, não precisa
	; pois os dados já estão carregados.
	;
    ; History:
    ; 17-Abr-2012	RGB		Alteração para guardar os calculos na nova estrutura, por locais, a versão anterior misturava o saldo da rede com o do local
    ; 13-Abr-2012	RGB		Alteração para zerar a variavel vQtdeAnterior, caso fosse a primeira movimentação do produto,
    ;						a rotina pegava o estoque anterior de outro produto, causando as quantidades a estarem erradas em todos os meses.
    ; 26-Dez-2011	Karine	Created
    ; 06-Jan-2012	Karine	Alterado para refazer a pesquisa somente se o mês de 
    ;                       referencia for o mês corrente
    ;-------------------------------------------------------------------------------	
	new Ano, Mes, Dia, DataStr, objProduto, vSaldoAnterior, vQtdeAnterior, objSaldo,
	    MostrarRegistro, stKey, mesAtual, minDate, maxDate, diffMonths, mesAnterior
	
	set vfilterLocal      = $get(^VARTempMovMensalContabil(YM,YBED,6))
	set vfilterPrograma   = $get(^VARTempMovMensalContabil(YM,YBED,7))
	if (vfilterLocal = "") set vfilterLocal = YLOCATION
	
	quit:(pReferencia = "")

	set Ano     = $piece(pReferencia,"/",1)
	set Mes     = $piece(pReferencia,"/",2)
	set Dia     = "01"
	set DataStr = Ano_Mes_Dia
	
	;Se ainda faz parte do mês corrente recalcula, pois ainda pode existir movimentação  
	if (+$H < $$GetEndOfMonth^COMUtilDate($zdateh(DataStr,8)) ) { 
	                                                            
		;Limpa os registros para o mês atual informado
		kill ^VARMovContabilDetalhe(YM,pReferencia)
	
		;Gera um registro para cada Produto e local cadastrado
		$$$Order3(^WWW0121,YM,YM,Location)
			$$$Order2(^INART,YM,Produto)
			
				set objProduto = $G(^INART(YM,Produto,1))
				if objProduto'="" {
					;set ContaContabil = $piece(objProduto,Y,278)
		
					set vSaldoAnterior = 0
					set vQtdeAnterior  = 0
		
					;Pega o Saldo Atual do mês anterior para usar como Saldo Anterior
					set vMesAnt = $$MesAnterior(pReferencia)
					set objSaldoAnterior = $get(^VARMovContabilDetalhe(YM,vMesAnt,Location,Produto,1))
					if objSaldoAnterior '= ""{
						set vSaldoAnterior = $piece(objSaldoAnterior,Y,4)
						set vQtdeAnterior  = $piece(objSaldoAnterior,Y,8)
					}
		
					;Se existe Saldo Anterior grava como Anterior e Atual
					;pois se existir movimentação no mês esses valores serão recalculados
					set objSaldo = ""
			    	set $piece(objSaldo,Y,1) = vSaldoAnterior
			    	set $piece(objSaldo,Y,2) = 0
			    	set $piece(objSaldo,Y,3) = 0
			    	set $piece(objSaldo,Y,4) = vSaldoAnterior

			    	set $piece(objSaldo,Y,5) = vQtdeAnterior
			    	set $piece(objSaldo,Y,6) = 0
			    	set $piece(objSaldo,Y,7) = 0
			    	set $piece(objSaldo,Y,8) = vQtdeAnterior
    	    
			    	set MostrarRegistro = $$$YES
			    	if (vSaldoAnterior=0) && (vQtdeAnterior=0){
				    	set MostrarRegistro = $$$NO
			    	}

					if MostrarRegistro { ;Não registra produto com todos os saldos zerados - são muitos produtos inativos ou não utilizados
						set $piece(objSaldo,Y,9) = MostrarRegistro
			    		set stKey = pReferencia_","_Location_","_Produto
			    		set status = $$$Save("VARMovContabilDetalhe",stKey,objSaldo,1)
					}
				}
			$$$End
		$$$End
		
		;Popula os Dados de Saldo, Entradas e Saídas para o Mês informado
		&sql(DECLARE MovContabil CURSOR FOR
				SELECT
					TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') as AnoMes,
					alSOH.dStockHistory.Item,
					I.SearchName as DescProduto,
					alSOH.dStockHistory.Location as Location,
					alSOH.dStockHistory.Bundle->Program as Program,
					SUM(CASE WHEN alSOH.dStockHistory.TxValue > 0 THEN alSOH.dStockHistory.TxValue ELSE 0 END) as ValorEntradas,
					SUM(CASE WHEN alSOH.dStockHistory.TxValue < 0 THEN alSOH.dStockHistory.TxValue*-1 ELSE 0 END) as ValorSaidas,
					SUM(CASE WHEN alSOH.dStockHistory.QtyMoved > 0 THEN alSOH.dStockHistory.QtyMoved ELSE 0 END) as QtdeEntradas,
					SUM(CASE WHEN alSOH.dStockHistory.QtyMoved < 0 THEN alSOH.dStockHistory.QtyMoved*-1 ELSE 0 END) as QtdeSaidas
				INTO :sAnoMes, :sProduto,
				:sDescProduto, :sLocation, :sProgram, :sEntradas, :sSaidas, :sQtdeEntradas, :sQtdeSaidas
				FROM alSOH.dStockHistory
				JOIN SQLUser.INART I on (I.ItemNumber = alSOH.dStockHistory.Item)
				WHERE alSOH.dStockHistory.Location->Code IS NOT NULL 
				AND alSOH.dStockHistory.MovementType_MovementTypeId <> 5
                AND alSOH.dStockHistory.MovementType_MovementTypeId <> 51
                AND alSOH.dStockHistory.Storage->Code <> "EmTransito"
				and TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') = :pReferencia
				GROUP BY TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM'), I.FREE3, alSOH.dStockHistory.Item 
				ORDER BY TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM'), I.FREE3, alSOH.dStockHistory.Item
		)
		&sql(open MovContabil)
	    if (SQLCODE) {
			quit
	    }
	
		for { &sql(fetch MovContabil)
				   quit:SQLCODE
		
			set count          = $i(count)
			set objSaldo       = ""
			set vSaldoAnterior = 0
			set vQtdeAnterior  = 0
		
			;Pega o Saldo Atual do mês anterior para usar como Saldo Anterior
			set vMesAnt = $$MesAnterior(pReferencia)
			
			set objSaldoAnterior = $G(^VARMovContabilDetalhe(YM,vMesAnt,sLocation,sProduto,1))
			if objSaldoAnterior '= ""{
				set vSaldoAnterior = $piece(objSaldoAnterior,Y,4)
				set vQtdeAnterior  = $piece(objSaldoAnterior,Y,8)
			}
		
	    	;set vSaldoAtual = vSaldoAnterior + sEntradas - sSaidas
	    	;set vQtdeAtual  = vQtdeAnterior + sQtdeEntradas - sQtdeSaidas
	    	set vQtdeAtual  = vQtdeAnterior + sQtdeEntradas - sQtdeSaidas
	    	
	    	if (vQtdeAnterior > 0) {
	    		set vSaldoAtual	= vQtdeAnterior * $$SQLGetCustoMedioNewDtHr^VARSQL(sProduto,sLocation,dtUltMesDiaHr)
	    	}
    	
	    	set $piece(objSaldo,Y,1) = vSaldoAnterior
	    	set $piece(objSaldo,Y,2) = sEntradas
	    	set $piece(objSaldo,Y,3) = sSaidas
	    	set $piece(objSaldo,Y,4) = vSaldoAtual
    	
	    	set $piece(objSaldo,Y,5) = vQtdeAnterior
	    	set $piece(objSaldo,Y,6) = sQtdeEntradas
	    	set $piece(objSaldo,Y,7) = sQtdeSaidas
	    	set $piece(objSaldo,Y,8) = vQtdeAtual
	    	set $piece(objSaldo,Y,10)= sLocation
	    	set $piece(objSaldo,Y,11)= sProgram
    		

	    	set MostrarRegistro = $$$YES
	    	if (vSaldoAnterior=0) && (sEntradas=0) && (sSaidas=0) && (vSaldoAtual=0) &&
	    	   (vQtdeAnterior=0) && (sQtdeEntradas=0) && (sQtdeSaidas=0) && (vQtdeAtual=0){
	    	
		    	set MostrarRegistro = $$$NO
	    	}

			if MostrarRegistro { ;não salva itens com todos os saldos zerados
		    	set $piece(objSaldo,Y,9) = MostrarRegistro
	    		set stKey = pReferencia_","_sLocation_","_sProduto
	    		set status = $$$Save("VARMovContabilDetalhe",stKey,objSaldo,1)
			}	
		}
		&sql(close MovContabil)	
	}
	quit	
	
	
MesAnterior(pAnoMesAtual)
	;Retorna o mês e ano anterior ao informado
	;pAnoMesAtual deve estar no formato "YYYY/MM"
	
	if pAnoMesAtual=""{
		quit ""
	}
	
	new mesAnterior,anoAnterior,Ano,Mes,Result
	
	set mesAnterior = ""		
	set anoAnterior = ""
	
	set Ano = $piece(pAnoMesAtual,"/",1)
	set Mes = $piece(pAnoMesAtual,"/",2)
	
	;Remove zeros a esquerda
	set Mes = $zstrip($fnumber(Mes,"T"),"<>W")
	
	if (Mes > 1){
		set mesAnterior = Mes-1	
		;Preenche com zeros a esquerda
		set mesAnterior = $$FillChar^VARSQL(mesAnterior,2,"0")	
		set anoAnterior = Ano
	} else {
		set mesAnterior = 12		
		set anoAnterior = Ano-1
	}
	
	set Result = anoAnterior_"/"_mesAnterior
	
	quit Result
	
MesPosterior(pAnoMesAtual)
	;Retorna o mês seguinte oa mes e ano informado
	;pAnoMesAtual deve estar no formato "YYYY/MM"
	new mesPosterior,anoPosterior,Ano,Mes,Result
	
	if pAnoMesAtual '="" {
		set mesPosterior = ""		
		set anoPosterior = ""
	
		set Ano = $piece(pAnoMesAtual,"/",1)
		set Mes = $piece(pAnoMesAtual,"/",2)
	
		;Remove zeros a esquerda
		set Mes = $zstrip($fnumber(Mes,"T"),"<>W")
	
		if (Mes < 12){
			set mesPosterior = Mes+1	
			;Preenche com zeros a esquerda
			set mesPosterior = $$FillChar^VARSQL(mesPosterior,2,"0")	
			set anoPosterior = Ano	
		} else {
			set mesPosterior = "01"		
			set anoPosterior = Ano+1
		}
	
		set Result = anoPosterior_"/"_mesPosterior
	}
	quit Result

	
Imprimir()	
	;do Imprimir^VARMovMensalContabil()
    new Referencia,MostrarDet

	set MostrarDet = ""
	set Referencia = $G(^VARTempMovMensalContabil($G(YM),$G(YBED),5))	
	set MostrarDet = $G(^VARTempMovMensalContabil($G(YM),$G(YBED),4))
	
	set filterLocal      = $get(^VARTempMovMensalContabil(YM,YBED,6))
	set filterPrograma   = $get(^VARTempMovMensalContabil(YM,YBED,7))
	set vformato         = $get(^VARTempMovMensalContabil(YM,YBED,8))
	
	if MostrarDet = 1 {
		do ImprimirAnalitico(Referencia,filterLocal,filterPrograma,vformato)
	}
	else{
		do ImprimirSintetico(Referencia,filterLocal,filterPrograma)	
	}

	quit
	
	
ImprimirSintetico(pReferencia,pfilterLocal,pfilterPrograma)
	
	set Titulo = "RESUMO DE MOVIMENTAÇÃO MENSAL CONTÁBIL"
	
	;Se a data de hoje não for maior que o fim do mês de referência
	;escolhido altera o título
	set Ano     = $piece(pReferencia,"/",1)
	set Mes     = $piece(pReferencia,"/",2)
	set Dia     = "01"
	set DataStr = Ano_Mes_Dia
	if (+$H < $$GetEndOfMonth^COMUtilDate($zdateh(DataStr,8)) ) {
		set Titulo = "PRÉVIA - RESUMO DE MOVIMENTAÇÃO MENSAL CONTÁBIL"
	}
	
	do RunReportRMMA^VARTCIJasperRunReport(pReferencia,Titulo,pfilterLocal,pfilterPrograma)  //TODO
	
	quit	

ImprimirAnalitico(pReferencia,pfilterLocal,pfilterPrograma,pformato)	

	set Titulo = "RELATÓRIO ANALÍTICO DE MOVIMENTAÇÃO MENSAL CONTÁBIL"
	
	;Se a data de hoje não for maior que o fim do mês de referência
	;escolhido altera o título
	set Ano     = $piece(pReferencia,"/",1)
	set Mes     = $piece(pReferencia,"/",2)
	set Dia     = "01"
	set DataStr = Ano_Mes_Dia
	if (+$H < $$GetEndOfMonth^COMUtilDate($zdateh(DataStr,8)) ) {
		set Titulo = "PRÉVIA - RELATÓRIO ANALÍTICO DE MOVIMENTAÇÃO MENSAL CONTÁBIL"
	}

	do RunReportRMMAAnalitico^VARTCIJasperRunReport(pReferencia,Titulo,pfilterLocal,pfilterPrograma,pformato) //TODO

	quit


ReGerarSaldosDetalhe()
	;-------------------------------------------------------------------------------
    ; 		Para iniciar o uso dessa funcionalidade é preciso popular a VARMovContabilDetalhe 
    ; com as informações de movimentação até a data atual.
	; 		Toda vez que a rotina for chamada, ela apagará todos os valores e preencherá novamente
	; a tabela, por isso, dependendo do tempo de operação do ambiente, isso pode levar bastante tempo.
	;
    ; History:
    ; 17-Abr-2012	RGB		Alteração para guardar os calculos na nova estrutura, por locais, a versão anterior misturava o saldo da rede com o do local
    ; 13-Abr-2012	RGB		Alteração para zerar a variavel vQtdeAnterior, caso fosse a primeira movimentação do produto,
    ;						a rotina pegava o estoque anterior de outro produto, causando as quantidades a estarem erradas em todos os meses.
    ; 26-Dez-2011	Karine	Created
    ; 04-Jan-2012	Karine	Correção de parâmetros de conta contábil
    ;-------------------------------------------------------------------------------	
	
	new Produto, objProduto, vSaldoAnterior, vQtdeAnterior, objSaldo , MostrarRegistro, stKey, mesAtual,
	    minDate, maxDate, diffMonths, mesAnterior, dtPrimDiaMesAnt, dtUltMesDiaHr
	
	
	if $GET(YM)="" {
		do ^WWWVAR
	}
	;Limpa todos os registros
	kill ^VARMovContabilDetalhe(YM)
	set mesAtual = ""
	;set mesSeguinte = ""
	if ($get(YLOCATION) = "") || ($get(YLOCATION) = "SESPE") {
		 set YLOCATION=1
	}
	
	;Pega o Saldo do primeiro mês de movimentação
	&sql(SELECT min(TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM')) as AnoMes
		   INTO :minDate
		   FROM alSOH.dStockHistory)
	      write "Min Date = "_minDate, !
	
	;Pega último mês de Movimentação
	&sql(SELECT max(TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM')) as AnoMes
		   INTO :maxDate
		   FROM alSOH.dStockHistory)
	      write "Max Date = "_maxDate, !
	
	;Diferença
	&sql(SELECT DATEDIFF("mm",min(alSOH.dStockHistory.DateConfirmed),max(alSOH.dStockHistory.DateConfirmed))
		   INTO :diffMonths
		   FROM alSOH.dStockHistory)
	      write "Diff Month = "_diffMonths, !
	set mesAtual = minDate
	
	
	
	for i=0:1:diffMonths {		
		;Gera um registro para cada Produto e local cadastrado
		$$$Order3(^WWW0121,YM,YM,Location)
			$$$Order2(^INART,YM,Produto)
				set objProduto = $G(^INART(YM,Produto,1))
				if objProduto'="" {	
					set vSaldoAnterior = 0
					set vQtdeAnterior  = 0
					set mesAnterior = $$MesAnterior(mesAtual)	
					
					set objSaldoAnterior = $get(^VARMovContabilDetalhe(YM,mesAnterior,Location,Produto,1))
					if objSaldoAnterior '= ""{
						set vSaldoAnterior = $piece(objSaldoAnterior,Y,4)
						set vQtdeAnterior  = $piece(objSaldoAnterior,Y,8)
					}
    				
			    	set MostrarRegis]]><![CDATA[tro = $$$YES
			    	
			    	if (vSaldoAnterior=0) && (vQtdeAnterior=0){
				    	set MostrarRegistro = $$$NO
			    	}

					if MostrarRegistro {
						set $piece(objSaldo,Y,9) = MostrarRegistro
			    		set stKey = mesAtual_","_Location_","_Produto
			    		set status = $$$Save("VARMovContabilDetalhe",stKey,objSaldo,1)
					}
				}
			$$$End
		$$$End
		;Popula os Dados de Saldo, Entradas e Saídas para o Mês informado
		&sql(DECLARE MovContabilT CURSOR FOR
				SELECT
					TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') as AnoMes,
					$$SQLGetContaContabil^VARSQL(alSOH.dStockHistory.Item) AS ContaContabil,
					alSOH.dStockHistory.Item,
					I.SearchName as DescProduto,
					alSOH.dStockHistory.Location as Location,
					alSOH.dStockHistory.Bundle->Program as Program, 
					SUM(CASE WHEN alSOH.dStockHistory.TxValue > 0 THEN alSOH.dStockHistory.TxValue ELSE 0 END) as ValorEntradas,
					SUM(CASE WHEN alSOH.dStockHistory.TxValue < 0 THEN alSOH.dStockHistory.TxValue*-1 ELSE 0 END) as ValorSaidas,
					SUM(CASE WHEN alSOH.dStockHistory.QtyMoved > 0 THEN alSOH.dStockHistory.QtyMoved ELSE 0 END) as QtdeEntradas,
					SUM(CASE WHEN alSOH.dStockHistory.QtyMoved < 0 THEN alSOH.dStockHistory.QtyMoved*-1 ELSE 0 END) as QtdeSaidas
				INTO :sAnoMes, :sContaContabil, :sProduto,
				:sDescProduto, :sLocation, :sProgram, :sEntradas, :sSaidas, :sQtdeEntradas, :sQtdeSaidas
				FROM alSOH.dStockHistory
				JOIN SQLUser.INART I on (I.ItemNumber = alSOH.dStockHistory.Item)
				WHERE alSOH.dStockHistory.Location->Code IS NOT NULL 
				AND alSOH.dStockHistory.MovementType_MovementTypeId <> 5
				AND alSOH.dStockHistory.MovementType_MovementTypeId <> 51
				AND alSOH.dStockHistory.Storage->Code <> "EmTransito"
				AND TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') = :mesAtual
				GROUP BY TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM'), I.FREE3, alSOH.dStockHistory.Item 
				ORDER BY TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM'), I.FREE3, alSOH.dStockHistory.Item
		)
		&sql(open MovContabilT)
	    if (SQLCODE) {
			quit
	    }
	
		for { &sql(fetch MovContabilT)
				   quit:SQLCODE
		
			set count          	= $i(count)
			set objSaldo       	= ""
			set vSaldoAtual		= 0
			set vSaldoAnterior	= 0
	    	
	    	set dtPrimDiaMesAnt	= $zdatetimeh($replace((mesAnterior_"/01"),"/",""),5)
	    	set dtUltMesDiaHr	= $$SQLGetUltimoDiaMes^VARSQL($piece(mesAnterior,"/",2),$piece(mesAnterior,"/",1))_",86399"
	    	
	    	set vQtdeAnterior	= +$$GetEstoqueOnHandAtDate^VARReposicao(sProduto,sLocation,,,+dtPrimDiaMesAnt)
	    	set vQtdeAtual		= +$$GetEstoqueOnHandAtDate^VARReposicao(sProduto,sLocation,,,+dtUltMesDiaHr)
	    	
	    	if (vQtdeAnterior > 0) { 
	    		set vSaldoAnterior	= vQtdeAnterior * $$SQLGetCustoMedioNewDtHr^VARSQL(sProduto,sLocation,dtPrimDiaMesAnt)
	    	}
	    	if (vQtdeAtual > 0) { 
	    		set vSaldoAtual		= vQtdeAtual * $$SQLGetCustoMedioNewDtHr^VARSQL(sProduto,sLocation,dtUltMesDiaHr)
	    	}
	    	
	    	set $piece(objSaldo,Y,1) = vSaldoAnterior
	    	set $piece(objSaldo,Y,2) = sEntradas
	    	set $piece(objSaldo,Y,3) = sSaidas
	    	set $piece(objSaldo,Y,4) = vSaldoAtual
    	
	    	set $piece(objSaldo,Y,5) = vQtdeAnterior
	    	set $piece(objSaldo,Y,6) = sQtdeEntradas
	    	set $piece(objSaldo,Y,7) = sQtdeSaidas
	    	set $piece(objSaldo,Y,8) = vQtdeAtual
    	    set $piece(objSaldo,Y,10)= sLocation
    	    set $piece(objSaldo,Y,11)= sProgram

	    	set MostrarRegistro = $$$YES
	    	if (vSaldoAnterior=0) && (sEntradas=0) && (sSaidas=0) && (vSaldoAtual=0) &&
	    	   (vQtdeAnterior=0) && (sQtdeEntradas=0) && (sQtdeSaidas=0) && (vQtdeAtual=0){
	    	
		    	set MostrarRegistro = $$$NO
	    	}

			if MostrarRegistro { ;só salva se tiver pelo menos um saldo diferente de zero
		    	set $piece(objSaldo,Y,9) = MostrarRegistro
	    		set stKey = mesAtual_","_sLocation_","_sProduto
	    		set status = $$$Save("VARMovContabilDetalhe",stKey,objSaldo,1)
			}
		}
		&sql(close MovContabilT)	
		
	 set mesAtual = $$MesPosterior(mesAtual)	
	}
	
	quit	

BotaoRegerarSaldos()
	; do BotaoRegerarSaldos^VARMovMensalContabil()
	
	DO LOW^%PRIO
	JOB ReGerarSaldosDetalhe^VARMovMensalContabil()::1
	
	;Zera varíáveis - para a chamada via botão
	set VORG(1)=""
	set VORG(2)=""
	set VORG(3)=""
	set VORG(4)=""
	kill ^VARTempMovMensalContabil(YM,YBED)
	;WRITE $TEST
	
	set YFORM="VARMovMensalContabil"
	DO ^WWWTEST
	;do GoToForm^COMUtilForm("VARMovMensalContabil",,,,,,)
	
	quit
	
PrintJS
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Executa os eventos de javascript que manipulam os campos da tela.
    ;
    ; Histórico:
    ; 	05-Oct-2011		Copiado da rotina VAREstoquePosicao
    ;-------------------------------------------------------------------------------

	write !, "<script language=""javascript"">"
	
	&js<
	
		function OnLoadFilterAnalitico() {
			OnBlurCheckAnalitico();	
		}
		
		function OnBlurCheckAnalitico() {
			if (document.getElementById('Y#(YFORM)#M4').checked == true) {
				// Habilita o campo Formato
				document.getElementById('Y#(YFORM)#M7').disabled = false;						
			} else {
				// Desabilita e e seta o campo Formato como Padrão
				document.getElementById('Y#(YFORM)#M7').value = 1
				document.getElementById('Y#(YFORM)#M7').disabled = true;	
			}				
		}		
		
		function addEvent(obj, evType, fn) {
 			if (obj.addEventListener) {
   				obj.addEventListener(evType, fn, false);
   				return true;
 			} else if (obj.attachEvent){
   				var r = obj.attachEvent('on'+evType, fn);
   				return r; 
 			} else {
   				return false;
 			}
		}		

		addEvent(document.forms[1].YVARMovMensalContabilM4, 'blur', OnBlurCheckAnalitico);
		addEvent(window,'load', OnLoadFilterAnalitico);
			
	>
	
	write !, "</script>"
	
	quit
	
NewQuery(pstrSQL)
	new objResult
	
	set objResult = ##class(%Library.ResultSet).%New()
	do objResult.Prepare(pstrSQL) 
	quit objResult	
]]></Routine>
</Export>