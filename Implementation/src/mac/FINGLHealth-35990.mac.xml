<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLHealth" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLHealth
	
#include COMSYS
#include FINConst
	
AfterDataFields
	if YSEITE=1 d ^FINSYSStatus 
	;if YSEITE=2	d HealthCheck^FINGLHealth(0)  ;todo shobby 19-Aug-2004
	quit
	
HealthCheck(pblnFix)
	new blnComplete,idAccount,lstHeader
	
	set lstHeader = ""
	set lstHeader = lstHeader_$lb($listbuild("Fin00143"))  ; Message Type
	set lstHeader = lstHeader_$lb($listbuild("Fin00144"))  ; Message Reference
	set lstHeader = lstHeader_$lb($listbuild("Fin00132"))  ; Message)
	
	do Start^COMTable(lstHeader,$listbuild("Fin00142"))  ; Financial Data Integrity Check)
	do CheckAccounts(pblnFix)
	do Stop^COMTable()
	quit
	
AddMessage(pMessageType,pstrRef,plstMessage)
	new strColour,strMessageType,strForm
	
	set strColour=$$GetColour^COMUtils("FINGLHEALTHMESSAGETYPE",pMessageType)
	set strMessageType=$$GetEnumDescription^COMUtils("FINGLHEALTHMESSAGETYPE",pMessageType)
	set strForm=$select(pMessageType=$$$EnumFINGLHEALTHMESSAGETYPEAccountTransactions:"FINGLAccount",$$$EnumFINGLHEALTHMESSAGETYPETransaction:"FINGLTran")
	
	
	do NewLine^COMTable(strColour)
	do InsertCell^COMTable(strMessageType,strForm,pstrRef)
	do InsertCell^COMTable(pstrRef,strForm,pstrRef)
	do InsertCell^COMTable($$$Text(plstMessage),strForm,pstrRef)
	do EndLine^COMTable()
 
	quit
	
CheckAccounts(pblnFix)
	;-------------------------------------------------------------------------------
	;
	; History
	; 14-Apr-2005	RPW		SR12159: Make sure that FINGLTranType is no longer shared.
	; 24-Jun-2003	shobby	Put in the obj variable to check that a global
	; 							exists before working on it. TrackRecord 005086
	;-------------------------------------------------------------------------------
	new blnComplete,idAccount,blnCreateAccount,curChildTotal,idChildAccount,curTransTotal,objAccount,curAccountTotal
	new Temp,obj,lngCreated,lngAccountErrors,blnChildrenDone,idTran,idPeriod,idTranType,curPeriodTotal
	
	set Temp="^mtemp(""FINHealth"","""_$job_""")"
	kill @Temp
	set lngCreated=0
	set lngAccountErrors=0
	for {
		set blnComplete=$$$YES
		set idAccount=""
		for {
			set idAccount=$order(^FINGLAccount(YM,idAccount))
			quit:idAccount=""
			
			if '$data(@Temp@("Done",idAccount)) {
				set blnComplete=$$$NO
				set blnChildrenDone=$$$YES
				set idChildAccount=""
 
				for {
					set idChildAccount=$order(^FINGLAccounts(YM,50,idAccount,idChildAccount))
					quit:idChildAccount=""
					if '$data(@Temp@("Done",idChildAccount)) set blnChildrenDone=$$$NO
					quit:blnChildrenDone=$$$NO
				}
 
				if blnChildrenDone {
					do CheckAccount(idAccount,Temp)
					set @Temp@("Done",idAccount)=$$$YES
					set lngCreated=lngCreated+1
				}
			}
		}
		quit:blnComplete
	}
	
	set idTran=""
	for {
		set idTran=$order(@Temp@("Tran",idTran))
		quit:idTran=""
		do AddMessage($$$EnumFINGLHEALTHMESSAGETYPETransaction,idTran,$listbuild("Fin00059",$$FormatCurrency^COMTable(@Temp@("Tran",idTran))))  ; Balance must be zero (%1)
	}
 
	set idTran=""
	for {
		set idTran=$order(@Temp@("TranUnPosted",idTran))
		quit:idTran=""
		
		do AddMessage($$$EnumFINGLHEALTHMESSAGETYPETransaction,idTran,$listbuild("Fin00147",idTran))  ; Transaction Number %1 UnPosted.
	}
 
	
	set idAccount=""
	for {
		set idAccount=$order(@Temp@("Total",idAccount))
		quit:idAccount=""
		set objAccount=$get(^FINGLAccount(YM,idAccount,1))
		set curAccountTotal=$$GetAccountTotal^FINGLAccount(idAccount,"BAL")
		if curAccountTotal'=@Temp@("Total",idAccount,"BAL") {
			do AddMessage($$$EnumFINGLHEALTHMESSAGETYPEAccountTransactions,idAccount,$listbuild("Fin00141",$$FormatCurrency^COMTable(curAccountTotal),$$FormatCurrency^COMTable(@Temp@("Total",idAccount,"BAL"))))  ; Account total(%1) different to Transaction Total(%2)
			set lngAccountErrors=lngAccountErrors+1
			if pblnFix {
				do AddAccountTotal^FINGLAccountProcess(idAccount,@Temp@("Total",idAccount,"BAL"),curAccountTotal,"BAL")
			}
		}
		set idPeriod=""
		for {
			set idPeriod=$order(^FINGLPeriod(YM,idPeriod))
			quit:idPeriod=""
			set idTranType=""
			for {
				set idTranType=$order(^FINGLTranType(YM,idTranType))
				quit:idTranType=""
				set curPeriodTotal=$$GetPeriodTotal^FINGLPeriodTotal(idAccount,idPeriod,idTranType)
				; TrackRecord 005086
				set obj=$get(@Temp@("Total",idAccount,"PER",idPeriod,idTranType))
				if (obj'=curPeriodTotal)&(obj'="") {
					new strTransTotal,strPeriodTotal,strTransType,dtePeriod
					
					set strTransTotal=$$FormatCurrency^COMTable(@Temp@("Total",idAccount,"PER",idPeriod,idTranType))
					set strPeriodTotal=$$FormatCurrency^COMTable(curPeriodTotal)
					set strTransType=$$$FINGLTranTypeDescription($get(^FINGLTranType(YM,idTranType,1)))
					set dtePeriod=$$^WWWDATE($$$FINGLPeriodStartDate($get(^FINGLPeriod(YM,idPeriod,1))))
					do AddMessage($$$EnumFINGLHEALTHMESSAGETYPEAccountTransactions,idAccount,$listbuild("Fin00146",dtePeriod,strTransType,strPeriodTotal,strTransTotal))  ; Period info out. Period starting %1 for transaction type "%2" reports total %3. Transactions say %4.
					set lngAccountErrors=lngAccountErrors+1
				}
			}
		}
	}
	do AddMessage($$$EnumFINGLHEALTHMESSAGETYPESummary,"",$listbuild("Fin00145",lngCreated,lngAccountErrors))  ; Accounts Processed : %1. Account Errors : %2
	
	quit
	
	
CheckAccount(pidAccount,Temp)
	new curTotal,idTran,idTranLine,dteTransdate,objTranLine,PeriodList,curAmount,intLoop,numPeriods
	new Period,TranType,objTran,idChild
 
	kill @Temp@("Total",pidAccount)
	set curTotal=0
	set dteTransdate=""
	for { 
		set dteTransdate=$order(^FINGLTranLines(YM,1,pidAccount,dteTransdate))
		quit:dteTransdate=""
		
		set idTran=""
		for {
			set idTran=$order(^FINGLTranLines(YM,1,pidAccount,dteTransdate,idTran))
			quit:idTran=""
			
			set objTran=$get(^FINGLTran(YM,idTran,1))
			if $$$FINGLTranAmountType(objTran)="BAL" {
				if $$$FINGLTranPostedDate(objTran)'="" {
					set TranType=$$$FINGLTranTransactionType(objTran)
					
					set idTranLine=""
					for {
						set idTranLine=$order(^FINGLTranLines(YM,1,pidAccount,dteTransdate,idTran,idTranLine))
						quit:idTranLine=""
						set objTranLine=$get(^FINGLTranLine(YM,idTran,idTranLine,1))
						set curAmount=$$$FINGLTranLineDebit(objTranLine)-$$$FINGLTranLineCredit(objTranLine)
						if +curAmount'=+$justify(curAmount,0,2) {
							write !,"Rounding Error tran=",idTran," line=",idTranLine," amt=",curAmount,!
						}
						set @Temp@("Tran",idTran)=$get(@Temp@("Tran",idTran))+curAmount
						if '@Temp@("Tran",idTran) kill @Temp@("Tran",idTran)
						set curTotal=curTotal+curAmount
						do GetPeriodsForDate^FINGLPeriod($$$FINGLTranLineTransactionDate(objTranLine),.PeriodList)
						set numPeriods=$listlength(PeriodList)
						for intLoop=1:1:numPeriods {
							set Period($listget(PeriodList,intLoop),TranType)=$get(Period($listget(PeriodList,intLoop),TranType))+curAmount
						}
					}
				} else {
					set @Temp@("TranUnPosted",idTran)=""
				}
			}
		}
	}
	
	set @Temp@("Total",pidAccount,"BAL")=curTotal
	merge @Temp@("Total",pidAccount,"PER")=Period
	
	set idChild=""
	for {
		set idChild=$order(^FINGLAccounts(YM,50,pidAccount,idChild))
		quit:idChild=""
		
		set Period=""
		set @Temp@("Total",pidAccount,"BAL")=@Temp@("Total",pidAccount,"BAL")+@Temp@("Total",idChild,"BAL")
		for {
			set Period=$order(@Temp@("Total",idChild,"PER",Period))
			quit:Period=""
			
			set TranType=""
			for {
				set TranType=$order(@Temp@("Total",idChild,"PER",Period,TranType))
				quit:TranType=""
				
				set @Temp@("Total",pidAccount,"PER",Period,TranType)=$get(@Temp@("Total",pidAccount,"PER",Period,TranType))+@Temp@("Total",idChild,"PER",Period,TranType)
			}
		}
	}
	quit
	
]]></Routine>
</Export>