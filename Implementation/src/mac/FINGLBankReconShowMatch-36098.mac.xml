<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLBankReconShowMatch" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLBankReconShowMatch
 
#include COMSYS
#include FINConst
#include FINSYS
#include WWWConst
 
OnAfterDataFields() 
	;-------------------------------------------------------------------------------
	; Display the matched lines for a line in the GL Trans grid
	;
	; Params:	nil (keys retrieved via grid call backs)
	;
	; ByRefs:	nil
	;
	; Returns:	nil
	;
	; History:
	; 10-Aug-2006	PO		SR14331: Always use the match cache for reporting - old code left in case there is a need to change
	; 28-Feb-2006	JW&RW	SR13697: Created
	;-------------------------------------------------------------------------------
	new YFORM,idBankRecon,strYKEY,arrMatches,lstHeader,idx,objMatch,blnCurrent
	new idKey,idClass
	
	set YFORM = $$$GRIDName
	quit:YFORM=""
	set idClass = $$$WWW120ClassUsedInForm($GET(^WWW120(0,YFORM,1)))
	
	set idBankRecon=$$GetYKEYContainer^COMGridEdit31Interface()
	set strYKEY = $$$GRIDGetCurrentYKEY
	
	do GetMatchArray^FINGLBankReconManualMatch(idBankRecon,idClass,strYKEY,.arrMatches,$$$YES) // SR14331
	
	if $$$KEY2(strYKEY)="" {
		write "<h4>"_$$$Text($listbuild("Fin00089"))_"</h4>"  ;No Record Selected.
		
		
	} elseif '$data(arrMatches) {
		write "<h4>"_$$$Text($listbuild("Fin00992",$$$KEY2(strYKEY)))_"</h4>"  ;Line number %1 has not been matched.
		
	} else {
		set lstHeader = $listbuild(	$$$StrFINGLBankReconMatchCacheType,
									$$$StrFINGLBankReconMatchCacheDate1,
									$$$StrFINGLBankReconMatchCacheRef,
									$$$StrFINGLBankReconMatchedDeposit,
									$$$StrFINGLBankReconMatchedWithdrawal)
		
		do Start^COMTable(lstHeader,$listbuild("Fin00994",$$$KEY2(strYKEY)))	; Matches for line number %1.
			
		set idx=""
		for {
			set idx=$order(arrMatches(idx))
			quit:idx=""
			
			set idKey = $piece(arrMatches(idx),Y,2)
			
			set idClass = $piece(arrMatches(idx),Y,1)
			set objMatch = $get($$$DATA(idClass,idKey))
			
			if idClass = "FINGLBankTran" {
				do DisplayLine($$$Text("Fin00987"),	// Bank Line
								$$$FINGLBankTranTransactionDate(objMatch),$$$FINGLBankTranReference(objMatch),
								$$$FINGLBankTranCreditAmount(objMatch),$$$FINGLBankTranDebitAmount(objMatch))
											
			} elseif idClass = "FINGLBankReconPreCleared" {		// Pre Cleared
				do DisplayLine($$$Text("Fin00894"),
								$$$FINGLBankReconPreClearedTransactionDate(objMatch),$$$FINGLBankReconPreClearedReference(objMatch),
								$$$FINGLBankReconPreClearedDebit(objMatch),$$$FINGLBankReconPreClearedCredit(objMatch))
			
			} elseif idClass = "FINGLBankReconMatched" {
				do DisplayLine($$$FINGLBankReconMatchedTransactionType(objMatch),
								$$$FINGLBankReconMatchedTransactionDate(objMatch),$$$FINGLBankReconMatchedReference(objMatch),
								$$$FINGLBankReconMatchedDeposit(objMatch),$$$FINGLBankReconMatchedWithdrawal(objMatch))
								
			} elseif idClass = "FINGLBankReconLine" {
				do DisplayLine($$$Text("Fin00150"),	;GL Adj,
								$$$FINGLBankReconLineTransactionDate(objMatch),$$$FINGLBankReconLineReference(objMatch),
								$$$FINGLBankReconLineDebit(objMatch),$$$FINGLBankReconLineCredit(objMatch))
				
			} elseif idClass = "FINGLBankReconMatchCache" { // SR14331 - will always go through here
				do DisplayLine($$$FINGLBankReconMatchCacheType(objMatch),
								$$$FINGLBankReconMatchCacheDate1(objMatch),$$$FINGLBankReconMatchCacheRef(objMatch),
								$$$FINGLBankReconMatchCacheWithdrawal(objMatch),$$$FINGLBankReconMatchCacheDeposit(objMatch))
 
			}
		}
	 	do Stop^COMTable()
	}
	quit
	
 
DisplayLine(pstrType,pdteTrans,pstrRef,pcurDeposit,pcurWithdrawal) 
	;-------------------------------------------------------------------------------
	; Draw line to screen
	;
	; Params:	pblnHighlight - whether we highlight the line
	; 			pstrType,pdteTrans,pstrRef,pcurDeposit,pcurWithdrawal - to display
	;
	; ByRefs:	nil
	;
	; Returns:	nil
	;
	; History:
	; 28-Feb-2006	JW		SR13697: Created
	;-------------------------------------------------------------------------------
	do NewLine^COMTable()
	do InsertCell^COMTable(pstrType)
	do InsertCellDate^COMTable(pdteTrans)
	do InsertCell^COMTable(pstrRef)
	do InsertCurrencyCell^COMTable(pcurDeposit)
	do InsertCurrencyCell^COMTable(pcurWithdrawal)
	do EndLine^COMTable()
	quit
	
]]></Routine>
</Export>