<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INPO" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INPO
 
#include COMSYS
#include INConst
#include COMConst
#include COMSYSNum
#include COMDebug

#define enumStandingPO    2   ; PO
#define enumDeliveryPO    3  
#define enumTurnOverPO    4
#define enumConsignmentPO 5
#define enumAgreementPO	  6
#define enumServicePO	  7

 ;**********************************************************************************
 ; History:
 ; 07-dec-2009	DWR		SR17074: corrected all macros, was INPODiscountRules removed
 ; 							the trailing s
 ;**********************************************************************************
 
POCreateFromLines(parrINPO,parrINPOLine,pstrStatus,&parrStatus)
 	;-------------------------------------------------------------------------------
	; Description of Function :
	; Create a PO, DOs & DOLines from an array of lines.
	;
	; Inputs : 
	; parrLines = array of Lines that contain additional information for the 
	; 			  creation of the PO and the DO.
	; pstrStatus= Status Code
	; parrStatus= array of Status codes of Errors if any while Creating PO
	; 
	; History :
	; 05-Jan-2010		DWR		SR17074: pass in POHeader array to fill DOLines
	; 21-Dec-2009		DWR		SR17074: Call to method in created INPORW for clarity
	; 								of form process.
	; 08-Dec-2009		DWR		SR17074: clarified Type of order with use of macro
	; 								defined at top of this .mac
	; 15-July-2008 		SRINIVAS RAPOL 		Created
	; 17-Apr-2009       VIJAY				Added Logic for Updation of DO and DOLine 
	; 										to sent Array of Messages(parrLines)
	;-------------------------------------------------------------------------------
	new blnFlag,DONum,idDO,idPO,intCounter,objDO,objPO,strMessage
	new strPONumber,strDOLine,strDO,strDOLineStatus,strDOStatus,strPOStatus
 
	set intCounter=""
	set strDOStatus=""
	set strDOLineStatus=""
	set blnFlag=1	
	set strMessage = ""
	set objPO=""
	set idPO=$$^WWWNEXT("INPO")	//To Generate a New PO Number
	set strPONumber=""
	set DONum=0		// A Counter Used in generating Unique DO IDs for a single PO. Initially set to 0
	for {
		set intCounter = $Order(parrINPO(intCounter))
		quit:intCounter=""
		set pobjINPO= parrINPO(intCounter)
		set pobjINPOLine = parrINPOLine(intCounter)
		quit:objINPO=""
		
		if (blnFlag){   ; 
			set $$$INPOSupplierCode(objPO)=$$$INPOSupplierCode(pobjINPO)
		 	if $$$INPOSupplierName(pobjINPO)'="" {
		 		set $$$INPOSupplierName(objPO)=$$$INPOSupplierName(pobjINPO)
		 	} else {
				set $$$INPOSupplierName(objPO)=$$$INLIEFName1($get(^INLIEF(YM,$$$INPOSupplierCode(pobjINPO),1)))
		 	}
		 	
			set $$$INPOBillToLocation(objPO)=$$$INPOBillToLocation(pobjINPO)
			set $$$INPOShipToLocation(objPO)=$$$INPOShipToLocation(pobjINPO)
			set $$$INPOStatus(objPO) = 0   ; "ProForma"
			set $$$INPOTransportationMethod(objPO) = $$$INPOTransportationMethod(pobjINPO)
		 	set $$$INPOTypeOfOrder(objPO)=$$$enumStandingPO     //2 is for Purchase order ;SR17074
		 	set $$$INPOStockProgram(objPO)=$$$INPOStockProgram(pobjINPO)
			set pstrStatus = $$$Save("INPO",idPO,objPO,1)	
			set blnFlag=0
		}	
		#;As of now we are saving the PO,DO,DOLine in Sub Lables so we are just returinig the records to 
		#;POCreateFromLines sublabel but not using them to do anything
	;	set strDO = ""
	;	set strDO = $$GetDORec(pobjINPO,.strDOStatus,.DONum,idPO,.idDO,$$$INPOLineQuantityOrdered(pobjINPOLine),$$$INPOLineUnitCost(pobjINPOLine))
	;	set strDO = $$GetDORec^INPORW(pobjINPO,.strDOStatus,.DONum,idPO,.idDO,$$$INPOLineQuantityOrdered(pobjINPOLine),$$$INPOLineUnitCost(pobjINPOLine))  ; 21-Dec-2009
	;	continue:strDO=""
	;	
		set strDOLine = ""
	;	set strDOLine = $$GetDOLine(pobjINPOLine,.strDOLineStatus,idDO,$$$INPOSupplierCode(pobjINPO))
		set strDOLine = $$CreateDOLine^INPORW(pobjINPO,pobjINPOLine,.strDOLineStatus,idPO,$$$INPOSupplierCode(pobjINPO))   ;05-Jan-2010 SR17074
	
	
		set $piece(strMessage,Y,29)=""
		set $piece(strMessage,Y,30)=strDOLine
	;	set parrLines(intCounter) = strMessage ; dont think this is required
		continue:strDOLine=""
	}
	set pstrStatus = $$ValidatePO(idPO,.parrStatus)

	if (pstrStatus'=$$$YES) {
		set idPO = ""
	} else {
		do ApplyDiscountRules(idPO)
		do OnAfterSaveDiscounts(idPO)
	}
	quit idPO
	
OLD2POCreateFromLines(parrINPO,parrINPOLine,pstrStatus,&parrStatus)
 	;-------------------------------------------------------------------------------
	; Description of Function :
	; Create a PO, DOs & DOLines from an array of lines.
	;
	; Inputs : 
	; parrLines = array of Lines that contain additional information for the 
	; 			  creation of the PO and the DO.
	; pstrStatus= Status Code
	; parrStatus= array of Status codes of Errors if any while Creating PO
	; 
	; History :
	; 21-Dec-2009		DWR		SR17074: Call to method in created INPORW for clarity
	; 								of form process.
	; 08-Dec-2009		DWR		SR17074: clarified Type of order with use of macro
	; 								defined at top of this .mac
	; 15-July-2008 		SRINIVAS RAPOL 		Created
	; 17-Apr-2009       VIJAY				Added Logic for Updation of DO and DOLine 
	; 										to sent Array of Messages(parrLines)
	;-------------------------------------------------------------------------------
	new blnFlag,DONum,idDO,idPO,intCounter,objDO,objPO,strMessage
	new strPONumber,strDOLine,strDO,strDOLineStatus,strDOStatus,strPOStatus
 
	set intCounter=""
	set strDOStatus=""
	set strDOLineStatus=""
	set blnFlag=1	
	set strMessage = ""
	set objPO=""
	set idPO=$$^WWWNEXT("INPO")	//To Generate a New PO Number
	set strPONumber=""
	set DONum=0		// A Counter Used in generating Unique DO IDs for a single PO. Initially set to 0
	for {
		set intCounter = $Order(parrINPO(intCounter))
		quit:intCounter=""
		set pobjINPO= parrINPO(intCounter)
		set pobjINPOLine = parrINPOLine(intCounter)
		quit:objINPO=""
		
		if (blnFlag){   ; 
			set $$$INPOSupplierCode(objPO)=$$$INPOSupplierCode(pobjINPO)
		 	if $$$INPOSupplierName(pobjINPO)'="" {
		 		set $$$INPOSupplierName(objPO)=$$$INPOSupplierName(pobjINPO)
		 	} else {
				set $$$INPOSupplierName(objPO)=$$$INLIEFName1($get(^INLIEF(YM,$$$INPOSupplierCode(pobjINPO),1)))
		 	}
		 	
			set $$$INPOBillToLocation(objPO)=$$$INPOBillToLocation(pobjINPO)
			set $$$INPOShipToLocation(objPO)=$$$INPOShipToLocation(pobjINPO)
			set $$$INPOStatus(objPO) = 0   ; "ProForma"
			set $$$INPOTransportationMethod(objPO) = $$$INPOTransportationMethod(pobjINPO)
		 	set $$$INPOTypeOfOrder(objPO)=$$$enumStandingPO     //2 is for Purchase order ;SR17074
		 	set $$$INPOStockProgram(objPO)=$$$INPOStockProgram(pobjINPO)
			set pstrStatus = $$$Save("INPO",idPO,objPO,1)	
			set blnFlag=0
		}	
		#;As of now we are saving the PO,DO,DOLine in Sub Lables so we are just returinig the records to 
		#;POCreateFromLines sublabel but not using them to do anything
		set strDO = ""
	;	set strDO = $$GetDORec(pobjINPO,.strDOStatus,.DONum,idPO,.idDO,$$$INPOLineQuantityOrdered(pobjINPOLine),$$$INPOLineUnitCost(pobjINPOLine))
		set strDO = $$GetDORec^INPORW(pobjINPO,.strDOStatus,.DONum,idPO,.idDO,$$$INPOLineQuantityOrdered(pobjINPOLine),$$$INPOLineUnitCost(pobjINPOLine))  ; 21-Dec-2009
		continue:strDO=""
	;	
		set strDOLine = ""
	;	set strDOLine = $$GetDOLine(pobjINPOLine,.strDOLineStatus,idDO,$$$INPOSupplierCode(pobjINPO))
		set strDOLine = $$GetDOLine^INPORW(pobjINPOLine,.strDOLineStatus,idDO,$$$INPOSupplierCode(pobjINPO))
		set $piece(strMessage,Y,29)=idDO
		set $piece(strMessage,Y,30)=strDOLine
	;	set parrLines(intCounter) = strMessage ; dont think this is required
		continue:strDOLine=""
	}
	set pstrStatus = $$ValidatePO(idPO,.parrStatus)

	if (pstrStatus'=$$$YES) {
		set idPO = ""
	} else {
		do ApplyDiscountRules(idPO)
		do OnAfterSaveDiscounts(idPO)
	}
	quit idPO

 
OLDPOCreateFromLines(&parrLines,&pstrStatus,&parrStatus)
 	;-------------------------------------------------------------------------------
	; Description of Function :
	; Create a PO, DOs & DOLines from an array of lines.
	;
	; Inputs : 
	; parrLines = array of Lines that contain additional information for the 
	; 			  creation of the PO and the DO.
	; pstrStatus= Status Code
	; parrStatus= array of Status codes of Errors if any while Creating PO
	; 
	; History :
	; 08-Dec-2009		DWR		SR17074: clarified Type of order with use of macro
	; 								defined at top of this .mac
	; 15-July-2008 		SRINIVAS RAPOL 		Created
	; 17-Apr-2009       VIJAY				Added Logic for Updation of DO and DOLine 
	; 										to sent Array of Messages(parrLines)
	;-------------------------------------------------------------------------------
	
 
	new blnFlag,DONum,idDO,idPO,intCounter,objDO,objPO,strMessage
	new strPONumber,strDOLine,strDO,strDOLineStatus,strDOStatus,strPOStatus
 
	set intCounter=""
	set strDOStatus=""
	set strDOLineStatus=""
	set blnFlag=1	
	set strMessage = ""
	set objPO=""
	set idPO=$$^WWWNEXT("INPO")	//To Generate a New PO Number
	set strPONumber=""
	set DONum=0		// A Counter Used in generating Unique DO IDs for a single PO. Initially set to 0
	for {
		set intCounter = $Order(parrLines(intCounter))
		quit:intCounter=""
		set strMessage= parrLines(intCounter)
		quit:strMessage=""
		if (blnFlag){
			set $$$INPOSupplierCode(objPO)=$piece(strMessage,Y,14)
		 	if ($piece(strMessage,Y,15)'="") {
		 		set $$$INPOSupplierName(objPO)=$piece(strMessage,Y,15)
		 	} else {
				set $$$INPOSupplierName(objPO)=$$$INLIEFName1($get(^INLIEF(YM,$piece(strMessage,Y,14),1)))
		 	}
		 	
			set $$$INPOBillToLocation(objPO)=$piece(strMessage,Y,19)
			set $$$INPOShipToLocation(objPO)=$piece(strMessage,Y,25)
			set $$$INPOStatus(objPO) = 5
			set $$$INPOTransportationMethod(objPO) = $piece(strMessage,Y,28)
		 ;	set $$$INPOTypeOfOrder(objPO)=1     //2 is for Purchase order ;FIXME is it supposed to be 1 or 2? <DWR>
		 	set $$$INPOTypeOfOrder(objPO)=$$$enumStandingPO     //2 is for Purchase order ;SR17074
		 	set $$$INPOStockProgram(objPO)=$piece(strMessage,Y,32)
			set pstrStatus = $$$Save("INPO",idPO,objPO,1)	
			set blnFlag=0
		}	
		#;As of now we are saving the PO,DO,DOLine in Sub Lables so we are just returinig the records to 
		#;POCreateFromLines sublabel but not using them to do anything
	;	set strDO = ""
	;	set strDO = $$GetDORec(strMessage,.strDOStatus,.DONum,idPO,.idDO)
	;	continue:strDO=""
	;	set strDOLine = ""
	;	set strDOLine = $$GetDOLine(strMessage,.strDOLineStatus,idDO)
	;	set $piece(strMessage,Y,29)=idDO
	;	set $piece(strMessage,Y,30)=strDOLine
	;	set parrLines(intCounter) = strMessage
	;	continue:strDOLine=""
	}
	set pstrStatus = $$ValidatePO(idPO,.parrStatus)

	if (pstrStatus'=$$$YES) {
		set idPO = ""
	} else {
		do ApplyDiscountRules(idPO)
		do OnAfterSaveDiscounts(idPO)
	}
	quit idPO
 
 
GetDORec(pobjINPO,&pstrStatus,&pDONum,pidPO,&pidDO,pfltQtyOrdered="",pfltUnitCost="" )  
 	;-------------------------------------------------------------------------------
	; Description of Function :
	; To Create Delivery Order From  PstrMessage.
	;
	; Inputs : 
	; pstrMessage  = A message line string consisting all the data required to create a DO		   
	; pstrStatus   = Status of creation of DO. Comes as a reference parameter
	;
	; Returns = DO Record 
	;  
	; History :
	; 08-Dec-2009		DWR		SR17074: clarified Type of order with use of macro
	; 								defined at top of this .mac
	; 15-July-2008 			KALYAN 			Created
	;-------------------------------------------------------------------------------
 	new dtDeliveryDate,idDeliveryMethod,idDO,objDO,strShipToAddress
 	
 	set dtDeliveryDate	 =$$$INPOSupplierDeliveryDate(pobjINPO)
 	set strShipToAddress =$$$INPOShipToAddress(pobjINPO)
 	set idDeliveryMethod =$$$INPOTransportationMethod(pobjINPO)
 	
 	if ((dtDeliveryDate'="")||(strShipToAddress'="")||(idDeliveryMethod'="")) {
	 	set idDO = ""
	 	set objDO=""
	 	set idDO=$order(^INPOs(YM,1,$ZDH(dtDeliveryDate),$$$Index(strShipToAddress),$$$Index(idDeliveryMethod),idDO))
	 	
	 	if (idDO=""){
		 	set pDONum=pDONum+1
		 	set idDO=pidPO_"-"_pDONum    //DO Number  According to Format given "PONumber-1"
		 	
		 	//Setting pstrMessage values to the DO Fields 
		 ;	set $$$INPOTypeOfOrder(objDO)=3		//3 is for delivery order ;$piece(pstrMessage,Y,1)    ;SR17074
		 	set $$$INPOTypeOfOrder(objDO) = $$$enumDeliveryPO
		 	set $$$INPOSupplierCode(objDO)= $$$INPOSupplierCode(pobjINPO)
		 	if $$$INPOSupplierName(pobjINPO)'="" {
		 		set $$$INPOSupplierName(objDO)=$$$INPOSupplierName(pobjINPO)
		 	} else {	
				set $$$INPOSupplierName(objDO)=$$$INLIEFName1($get(^INLIEF(YM,$$$INPOSupplierCode(pobjINPO),1)))
		 	}
		 	
		 	set $$$INPOOrderDate(objDO)		=$ZDH($$$INPOOrderDate(pobjINPO))
			set $$$INPONotesCode(objDO)     =$$$INPONotesCode(pobjINPO)
			set $$$INPONotesText(objDO)     =$$$INPONotesText(pobjINPO)
			set $$$INPOBillToLocation(objDO)=$$$INPOBillToLocation(pobjINPO)
			if $$$INPOBillToAddress(pobjINPO) {
				set $$$INPOBillToAddress(objDO)=$$$INPOBillToAddress(pobjINPO)
			} else{
				set $$$INPOBillToAddress(objDO)=$$$INPOBillToLocation(pobjINPO)
			}
				
			set $$$INPOShipToLocation(objDO)=$$$INPOShipToLocation(pobjINPO)
			if $$$INPOShipToAddress(pobjINPO) {
				set $$$INPOShipToAddress(objDO)= $$$INPOShipToAddress(pobjINPO)
			} else {
				set $$$INPOShipToAddress(objDO)=$$$INPOShipToLocation(pobjINPO)
			}
				
			set $$$INPOSupplierDeliveryDate(objDO)=$ZDH($$$INPOSupplierDeliveryDate(pobjINPO))
			set $$$INPOTransportationMethod(objDO)=$$$INPOTransportationMethod(pobjINPO)
			set $$$INPOPaymentTerms(objDO)=$$$INPOPaymentTerms(pobjINPO)
			
			if pfltUnitCost'=""{
				set $$$INPOOrderValue(objDO)= $$$FCMult(pfltQtyOrdered,pfltUnitCost)
			}
			set $$$INPOParentOrder(objDO)=pidPO
			set pstrStatus = $$$Save("INPO",idDO,objDO,1)		//Saving DO			 
		 	
	 	} else {
		 	set objDO = $get(^INPO(YM,idDO,1))
			if pfltUnitCost'="" {
				set $$$INPOOrderValue(objDO)= $$$FCAdd($$$INPOOrderValue(objDO),$$$FCMult(pfltQtyOrdered,pfltUnitCost))
				set pstrStatus = $$$Save("INPO",idDO,objDO,1)		//Saving DO			 
			}
	 	}
	} 	
	
	if (pstrStatus = $$$YES) { 
		set pidDO = idDO
	} else {
		set objDO=""
	}
	
	quit objDO
	
OLDGetDORec(pstrMessage,&pstrStatus,&pDONum,pidPO,&pidDO)   
 	;-------------------------------------------------------------------------------
	; Description of Function :
	; To Create Delivery Order From  PstrMessage.
	;
	; Inputs : 
	; pstrMessage  = A message line string consisting all the data required to create a DO		   
	; pstrStatus   = Status of creation of DO. Comes as a reference parameter
	;
	; Returns = DO Record 
	;  
	; History :
	; 08-Dec-2009		DWR		SR17074: clarified Type of order with use of macro
	; 								defined at top of this .mac
	; 15-July-2008 			KALYAN 			Created
	;-------------------------------------------------------------------------------
 
 	new dtDeliveryDate,idDeliveryMethod,idDO,objDO,strShipToAddress
 	
 	set dtDeliveryDate=$piece(pstrMessage,Y,27)
 	set strShipToAddress=$piece(pstrMessage,Y,26)
 	set idDeliveryMethod=$piece(pstrMessage,Y,28)
 	if ((dtDeliveryDate'="")||(strShipToAddress'="")||(idDeliveryMethod'="")) {
	 	set idDO = ""
	 	set objDO=""
	 	set idDO=$order(^INPOs(YM,1,$ZDH(dtDeliveryDate),$$$Index(strShipToAddress),$$$Index(idDeliveryMethod),idDO))
	 	
	 	if (idDO=""){
		 	set pDONum=pDONum+1
		 	set idDO=pidPO_"-"_pDONum    //DO Number  According to Format given "PONumber-1"
		 	
		 	//Setting pstrMessage values to the DO Fields 
		 ;	set $$$INPOTypeOfOrder(objDO)=3		//3 is for delivery order ;$piece(pstrMessage,Y,1)    ;SR17074
		 	set $$$INPOTypeOfOrder(objDO) = $$$enumDeliveryPO
		 	set $$$INPOSupplierCode(objDO)=$piece(pstrMessage,Y,14)
		 	if ($piece(pstrMessage,Y,15)'="") {
		 		set $$$INPOSupplierName(objDO)=$piece(pstrMessage,Y,15)
		 	} else {	
				set $$$INPOSupplierName(objDO)=$$$INLIEFName1($get(^INLIEF(YM,$piece(pstrMessage,Y,14),1)))
		 	}
		 	
		 	set $$$INPOOrderDate(objDO)		=$ZDH($piece(pstrMessage,Y,16))
			set $$$INPONotesCode(objDO)     =$piece(pstrMessage,Y,23)
			set $$$INPONotesText(objDO)     =$piece(pstrMessage,Y,24)
			set $$$INPOBillToLocation(objDO)=$piece(pstrMessage,Y,19)
			if ($piece(pstrMessage,20)'="") {
				set $$$INPOBillToAddress(objDO)=$piece(pstrMessage,Y,20)
			} else{
				set $$$INPOBillToAddress(objDO)=$piece(pstrMessage,Y,19)
			}
				
			set $$$INPOShipToLocation(objDO)=$piece(pstrMessage,Y,25)
			if ($piece(pstrMessage,Y,26)'="") {
				set $$$INPOShipToAddress(objDO)=$piece(pstrMessage,Y,26)
			} else {
				set $$$INPOShipToAddress(objDO)=$piece(pstrMessage,Y,25)
			}
				
			set $$$INPOSupplierDeliveryDate(objDO)=$ZDH($piece(pstrMessage,Y,27))
			set $$$INPOTransportationMethod(objDO)=$piece(pstrMessage,Y,28)
			set $$$INPOPaymentTerms(objDO)=$piece(pstrMessage,Y,21)
			
			if ($piece(pstrMessage,Y,9)'="") {
				set $$$INPOOrderValue(objDO)= $$$FCMult(($piece(pstrMessage,Y,5)),($piece(pstrMessage,Y,9)))
			}
			set $$$INPOParentOrder(objDO)=pidPO
			set pstrStatus = $$$Save("INPO",idDO,objDO,1)		//Saving DO			 
		 	
	 	} else {
		 	set objDO = $get(^INPO(YM,idDO,1))
			if (($piece(pstrMessage,Y,9)'="")) {
				set $$$INPOOrderValue(objDO)= $$$FCAdd($$$INPOOrderValue(objDO),$$$FCMult(($piece(pstrMessage,Y,5)),($piece(pstrMessage,Y,9))))
				set pstrStatus = $$$Save("INPO",idDO,objDO,1)		//Saving DO			 
			}
	 	}
	} 	
	
	if (pstrStatus = $$$YES) { 
		set pidDO = idDO
	} else {
		set objDO=""
	}
	
	quit objDO

 
GetDOLine(pobjINPOLine,pstrStatus,pidDO,pidSupplier) 
	;-------------------------------------------------------------------------------
	; Method Usage
	; Receives a message line string to create a DOLine.
	; Returns a DO line record after creating and saving it.
	; 
	; Params:
	; pstrMessage = A message line string consisting all the data required to create a DOLine
	; pstrStatus = Status of creation of DOLine. Comes as a reference parameter. 
	;
	; Returns: DOLine record
	;
	; History:
	; 08-Dec-2009		DWR		SR17074: clarified Type of order with use of macro
	; 								defined at top of this .mac
	; 16-Jul-2008			VIJAY			Created
	; 17-Apr-2009			VIJAY			Return Value Changed from objDOLine to idDOLine
	;-------------------------------------------------------------------------------
 
 	new currPrice,idDOLine,idItem,objDOLine,strBarcode,strBudgetCode,strGLCode,strSuppCode
 	new intLineType,intQuantity,strStatus
 	new idxDOID
 	set strSuppCode =$$$INPOLineSupplierItemCode(pobjINPOLine)
 	set intLineType =$$$INPOLineLineType(pobjINPOLine)
 	set idItem		=$$$INPOLineItem(pobjINPOLine)
 	set idxDOID     =$$$Index(pidDO)
 	
 	if idItem'="" {
	 	set idDOLine  = ""
	 	set objDOLine = ""
	 	set idDOLine=$order(^INPOLines(YM,1,$$$Index(idItem),intLineType,idxDOID,idDOLine))
	 	
	 	if (idDOLine="") {
		 	set idDOLine=$order(^INPOLine(YM,pidDO,""),-1)+1
		 	set $$$INPOLinePOLineNumber(objDOLine)     = $$$INPOLinePOLineNumber(pobjINPOLine)
		 	set $$$INPOLineLineType(objDOLine)         = $$$INPOLineLineType(pobjINPOLine)
		 	set $$$INPOLineItem(objDOLine)             = $$$INPOLineItem(pobjINPOLine)
		 	set $$$INPOLineItemDescription(objDOLine)  = $$$INPOLineItemDescription(pobjINPOLine)
		 	set $$$INPOLineQuantityOrdered(objDOLine)  = $$$INPOLineQuantityOrdered(pobjINPOLine)
		 	set $$$INPOLineUnitOfMeasure(objDOLine)    = $$$INPOLineUnitOfMeasure(pobjINPOLine)
		 	set $$$INPOLineSupplierItemCode(objDOLine) = $$$INPOLineSupplierItemCode(pobjINPOLine)
		 	set $$$INPOLineSupplierBarCode(objDOLine)  = $$$INPOLineSupplierBarCode(pobjINPOLine)
		 	set $$$INPOLineUnitCost(objDOLine)         = $$$INPOLineUnitCost(pobjINPOLine)
		 	set $$$INPOLineNotesCode(objDOLine)        = $$$INPOLineNotesCode(pobjINPOLine)
		 	set $$$INPOLineNotesText(objDOLine)        = $$$INPOLineNotesText(pobjINPOLine)
		 	set $$$INPOLineGLAccount(objDOLine)        = $$$INPOLineGLAccount(pobjINPOLine) 
		 	set $$$INPOLineBudgetCode(objDOLine)       = $$$INPOLineBudgetCode(pobjINPOLine)
		 	set $$$INPOLineStatus(objDOLine)		   = 0 
		 	set $$$INPOLineExtendedCost(objDOLine)     = $$$FCMult($$$INPOLineQuantityOrdered(pobjINPOLine),$$$INPOLineUnitCost(pobjINPOLine))
		 	set $$$INPOLineCostAfterDiscount(objDOLine)= $$$INPOLineExtendedCost(objDOLine)
	 	} else {
		 	set objDOLine = $get(^INPOLine(YM,pidDO,idDOLine,1))
	 	    set $$$INPOLineQuantityOrdered(objDOLine)  = $$$INPOLineQuantityOrdered(objDOLine) + $$$INPOLineQuantityOrdered(pobjINPOLine)
   		 	set $$$INPOLineExtendedCost(objDOLine)     = $$$FCAdd($$$INPOLineExtendedCost(objDOLine),$$$FCMult($$$INPOLineQuantityOrdered(pobjINPOLine),$$$INPOLineUnitCost(pobjINPOLine)))
   		 	set $$$INPOLineCostAfterDiscount(objDOLine)= $$$INPOLineExtendedCost(objDOLine)
   		}
 
		set objDOLine = $$GetSupItem(pidSupplier,objDOLine,.strStatus)
		set pstrStatus = $$$Save("INPOLine",pidDO_","_idDOLine,objDOLine,1)					
	} 
	if (pstrStatus '= $$$YES) { 
	 	set objDOLine = ""
	}
 	quit idDOLine  

OLDGetDOLine(pstrMessage,pstrStatus,pidDO) 
	;-------------------------------------------------------------------------------
	; Method Usage
	; Receives a message line string to create a DOLine.
	; Returns a DO line record after creating and saving it.
	; 
	; Params:
	; pstrMessage = A message line string consisting all the data required to create a DOLine
	; pstrStatus = Status of creation of DOLine. Comes as a reference parameter. 
	;
	; Returns: DOLine record
	;
	; History:
	; 08-Dec-2009		DWR		SR17074: clarified Type of order with use of macro
	; 								defined at top of this .mac
	; 16-Jul-2008			VIJAY			Created
	; 17-Apr-2009			VIJAY			Return Value Changed from objDOLine to idDOLine
	;-------------------------------------------------------------------------------
 
 	new currPrice,idDOLine,idItem,objDOLine,strBarcode,strBudgetCode,strGLCode,strSuppCode
 	new intLineType,intQuantity,strStatus
 	new idxDOID
 	set strSuppCode=$piece(pstrMessage,Y,14)
 	set intLineType=$piece(pstrMessage,Y,2)
#; 	set currPrice=$piece(pstrMessage,Y,)
#; 	set strBarcode=$piece(pstrMessage,Y,8)
 	set idItem=$piece(pstrMessage,Y,3)
#;	set strBudgetCode=$piece(pstrMessage,Y,13) 	
#;	set strGLCode=$piece(pstrMessage,Y,12)
 	set idxDOID=$$$Index(pidDO)
 	if (idItem'="") {
	 	set idDOLine = ""
	 	set objDOLine=""
	 	set idDOLine=$order(^INPOLines(YM,1,$$$Index(idItem),intLineType,idxDOID,idDOLine))
	 	
	 	if (idDOLine="") {
		 	set idDOLine=$order(^INPOLine(YM,pidDO,""),-1)+1
		 	set $$$INPOLinePOLineNumber(objDOLine)     = $piece(pstrMessage,Y,1)
		 	set $$$INPOLineLineType(objDOLine)         = $piece(pstrMessage,Y,2)
		 	set $$$INPOLineItem(objDOLine)             = $piece(pstrMessage,Y,3)
		 	set $$$INPOLineItemDescription(objDOLine)  = $piece(pstrMessage,Y,4)
		 	set $$$INPOLineQuantityOrdered(objDOLine)  = $piece(pstrMessage,Y,5)
		 	set $$$INPOLineUnitOfMeasure(objDOLine)    = $piece(pstrMessage,Y,6)
		 	set $$$INPOLineSupplierItemCode(objDOLine) = $piece(pstrMessage,Y,7)
		 	set $$$INPOLineSupplierBarCode(objDOLine)  = $piece(pstrMessage,Y,8)
		 	set $$$INPOLineUnitCost(objDOLine)         = $piece(pstrMessage,Y,9)
		 	set $$$INPOLineNotesCode(objDOLine)        = $piece(pstrMessage,Y,10)
		 	set $$$INPOLineNotesText(objDOLine)        = $piece(pstrMessage,Y,11)
		 	set $$$INPOLineGLAccount(objDOLine)        = $piece(pstrMessage,Y,12)
		 	set $$$INPOLineBudgetCode(objDOLine)       = $piece(pstrMessage,Y,13)
		; 	set $$$INPOLineStatus(objDOLine)		   = 5 
		 	set $$$INPOLineStatus(objDOLine)		   = $$$enumConsignmentPO   ; SR17074
		 	set $$$INPOLineExtendedCost(objDOLine)     = $$$FCMult($piece(pstrMessage,Y,5),$piece(pstrMessage,Y,9))
		 	set $$$INPOLineCostAfterDiscount(objDOLine)= $$$INPOLineExtendedCost(objDOLine)
	 	} else {
		 	set objDOLine = $get(^INPOLine(YM,pidDO,idDOLine,1))
	 	    set intQuantity=$$$INPOLineQuantityOrdered(objDOLine)+$piece(pstrMessage,Y,5)
	 	    set $$$INPOLineQuantityOrdered(objDOLine)  =intQuantity
   		 	set $$$INPOLineExtendedCost(objDOLine)     = $$$FCAdd($$$INPOLineExtendedCost(objDOLine),$$$FCMult($piece(pstrMessage,Y,5),$piece(pstrMessage,Y,9)))
   		 	set $$$INPOLineCostAfterDiscount(objDOLine)=$$$INPOLineExtendedCost(objDOLine)
   		}
 
		set objDOLine = $$GetSupItem($piece(pstrMessage,Y,14),objDOLine,.strStatus)
		set pstrStatus = $$$Save("INPOLine",pidDO_","_idDOLine,objDOLine,1)					
	} 
	if (pstrStatus '= $$$YES) { 
	 	set objDOLine = ""
	}
 	quit idDOLine  

 
GetSupItem(pstrSupplier,pstrDOLine,&pstrStatus)
 
	;-------------------------------------------------------------------------------
	; Method Usage	:Updates the Supplier Unit Cost and Unit of Measure for a particular DOLine
	;				 based on the supplier
	; Params:
	; pstrSupplier = Supplier Code 
	; pstrDOLine   = DO Line record
	; pstrStatus   = Status which is to be set with the status of getting the data
	; 				 (But not used for now)
	;
	; Returns:
	;
	; History:
	; 22-Jul-2008			VIJAY			Created
	;-------------------------------------------------------------------------------
	new objSupp
	
	set objSupp=$get(^INARTK(YM,$$$INPOLineItem(pstrDOLine),pstrSupplier,1))
	if ($$$INPOLineUnitCost(pstrDOLine)=""){
		set $$$INPOLineUnitCost(pstrDOLine)=$$$INARTKBasicPurchasePrice(objSupp)
	}
	if ($$$INPOLineUnitOfMeasure(pstrDOLine)="") {
		set $$$INPOLineUnitOfMeasure(pstrDOLine)= $$$INARTKDeliveryQuantityUnit(objSupp)
	}
	
	quit pstrDOLine
 
ValidatePO(PONumber,&parrStatus)   ; TODO - still looking at DOLine as using INPOLine class needs to look at INDOLine class
	;-------------------------------------------------------------------------------
	; Method Usage
	; To Validate PO against min and max ordervalues and item quantity of supplier.
	; And to caluculate Extended costs and order value.Finally to update PO  
	; 
	; Params:
	; PONumber = Purchase Order Number
	; 
	;
	; Returns: 
	; Array Of Errors if any.Else INPO will be Updated with Payment terms,order value etc.
	;
	; History:
	; 22-Jul-2008			KALYAN			Created
	; 25-Jul-2008			VIJAY			Modified
	; 01-Oct-2008			VIJAY			Modified
	;-------------------------------------------------------------------------------
 	new strPONumber,idSupplier,MinOrderValue,MaxOrderValue,strStatus,OrdQuantSum
 	new objPO,objDO,objDOLine,idDO,fltOrderValue,idDOLine,item,paymentterms,tempIndex
 	new objSuppItem,objSupplier,arrItemSum,arrStatus,tempItem,intIndex,orderDate,DOValue
 	
 	set arrStatus = ""
 	set intIndex = ""
	set objPO=$get(^INPO(YM,PONumber,1))
	set idSupplier=$$$INPOSupplierCode(objPO)
	set objSupplier=$get(^INLIEF(YM,idSupplier,1))
	
	//Comparing order value of PO with supplier's minimum and maximum order value
	if ($$$INPOOrderValue(objPO)<$$$INLIEFMinimumPurchaseOrderValue(objSupplier)) {
		set intIndex = $order(arrStatus(intIndex),-1)+1
		set arrStatus($listbuild("INPO00003",$$$INPOOrderValue(objPO),$$$INLIEFMinimumPurchaseOrderValue(objSupplier))) = "" ;Ordered Value (%1) should not be less than suppliers Minimum  Order Value %2
	}
	if ($$$INPOOrderValue(objPO)>$$$INLIEFMaximumPurchaseOrderValue(objSupplier)) {
		set intIndex = $order(arrStatus(intIndex),-1)+1
		set arrStatus($listbuild("INPO00004",$$$INPOOrderValue(objPO),$$$INLIEFMaximumPurchaseOrderValue(objSupplier))) = ""  ;Ordered Value (%1) should not be greater than suppliers Maximum  Order Value %2
	}
	set idDO=""
	set OrdQuantSum=0
	set fltOrderValue=0
	set orderDate=0
	set DOValue=0
	for {
		set idDO=$order(^INPOs(YM,2,PONumber,idDO))
		quit:idDO=""
		set objDO = $get(^INPO(YM,idDO,1))
		quit:objDO=""
		
		if (orderDate < $$$INPOOrderDate(objDO)) {
			set orderDate = $$$INPOOrderDate(objDO)
		}
		
		set DOValue  = DOValue + $$$INPOOrderValue(objDO)
		set idDOLine = ""
		for {
			set idDOLine = $order(^INPOLine(YM,idDO,idDOLine))
			quit:idDOLine=""
			
			set objDOLine     = $get(^INPOLine(YM,idDO,idDOLine,1))
			set OrdQuantSum   = $$$INPOLineQuantityOrdered(objDOLine)+OrdQuantSum     //Sum of Ordered quantity from DOLine
			set fltOrderValue = $$$INPOLineCostAfterDiscount(objDOLine)+fltOrderValue //Sum of Order value 
			set item          = $$$INPOLineItem(objDOLine)
			if ($get(arrItemSum(item))="") {
				set arrItemSum(item) = $$$INPOLineQuantityOrdered(objDOLine)
			} else {
				set arrItemSum(item) = arrItemSum(item)+ $$$INPOLineQuantityOrdered(objDOLine)
			}
		}
	}
	
	set tempItem=""
	for {
		set tempItem = $Order(arrItemSum(tempItem))
		quit:tempItem=""
		
		set objSuppItem=$get(^INARTK(YM,tempItem,idSupplier,1))
		if (objSuppItem'="") {	
			if ($$$INARTKMinimumOrderQuantity(objSuppItem)'="")                  &&
			   (arrItemSum(tempItem)<$$$INARTKMinimumOrderQuantity(objSuppItem))    {
				set intIndex = $order(arrStatus(intIndex),-1)+1
				set arrStatus(intIndex) = $listbuild("INPO00005",arrItemSum(tempItem),$$$INARTKMinimumOrderQuantity(objSuppItem)) ;Ordered Quantity %1 Cannot be Less Than Minimum Order Quantity of Supplier Item %2
			
			} elseif ($$$INARTKMaxOrderQuantity(objSuppItem)'="")                  &&
			         (arrItemSum(tempItem)>$$$INARTKMaxOrderQuantity(objSuppItem))    {
				set intIndex = $order(arrStatus(intIndex),-1)+1
				set arrStatus(intIndex) = $listbuild("INPO00006",arrItemSum(tempItem),$$$INARTKMaxOrderQuantity(objSuppItem)) ;Ordered Quantity %1 Cannot be Greater Than Maximum Order Quantity of Supplier Item %2
			}
			if ($$$INARTKMinimumOrderValue(objSuppItem)'="") &&
			   ($$$INPOLineCostAfterDiscount(objDOLine)<$$$INARTKMinimumOrderValue(objSuppItem)) {
				set intIndex = $order(arrStatus(intIndex),-1)+1
				set arrStatus(intIndex) = $listbuild("INPO00007",$$$INPOLineCostAfterDiscount(objDOLine),$$$INARTKMinimumOrderValue(objSuppItem)) ;Ordered Value %1 Cannot be Less Than Minimum Order Value of Supplier Item %2
			}
		}
	}
	
	//Comparing order quantity of INPO with supplier's minimum and maximum order quantity 
	if (($$$INLIEFMinimumOrderQty(objSupplier)'="")&& (OrdQuantSum<$$$INLIEFMinimumOrderQty(objSupplier))) {
		set intIndex = $order(arrStatus(intIndex),-1)+1
		set arrStatus(intIndex) = $listbuild("INPO00001",OrdQuantSum,$$$INLIEFMinimumOrderQty(objSupplier)) ;Ordered Quantity (%1) should not be less than suppliers Minimum  Order Quantity %2
		set ^ZZNVK = OrdQuantSum_$$$INLIEFMinimumOrderQty(objSupplier)    ; FIXME : ???
	}
	
	if ($$$INLIEFMaximumOrderQuantity(objSupplier)'="") &&
	   (OrdQuantSum>$$$INLIEFMaximumOrderQuantity(objSupplier)) {
		
		set intIndex = $order(arrStatus(intIndex),-1)+1
		set arrStatus(intIndex) = $listbuild("INPO00002",OrdQuantSum,$$$INLIEFMaximumOrderQuantity(objSupplier))   ;Ordered Quantity (%1) should not be greater than suppliers Maximum  Order Quantity %2
	}
	
	if ($order(arrStatus(""))="") {
		set paymentterms=$$GetTerm^FINAPSupplier(idSupplier) 	  //Payment trems from FINApSupplier Routine  
		set $$$INPOPaymentTerms(objPO)=paymentterms
		;set $$$INPOOrderValue(objPO)=fltOrderValue
		set $$$INPOOrderValue(objPO) = DOValue
		set $$$INPOOrderDate(objPO) = orderDate
		set strStatus = $$$Save("INPO",PONumber,objPO,1)	
	
	} else {	
		set tempIndex = ""
		merge parrStatus=arrStatus
		set strStatus = "There are "_$order(arrStatus(""),-1)_" Errors"
		for {
			set idDO=$order(^INPOs(YM,2,PONumber,idDO))
			quit:idDO=""
			set idDOLine=""
			for {
				set idDOLine = $order(^INPOLine(YM,idDO,idDOLine))
				quit:idDOLine=""
				do KILL^COMUtils("INPOLine",idDO_","_idDOLine) 
			}
			do KILL^COMUtils("INPO",idDO)
		}
		do KILL^COMUtils("INPO",PONumber)
	}
	quit strStatus
 
ApplyDiscountRules(pidPO)
	;-------------------------------------------------------------------------------
	; Method Usage
	; Gets the Discount Rules and checks whether any is applicable current PO or DO or 
	; DOLine and calculates the discounts and order Values accordingly
	;
	; Params:
	; idPO - Purchase ORder Number
	;	
	; Returns:
	;
	; History:
	; 28-Oct-2009	GRF		-: Missing parentheses around IF clause
	; 02-Dec-2008	VIJAY		Created
	;-------------------------------------------------------------------------------
	new idDO,idDOLine,item,objDO,objDOLine,objPO,fltOrderValue
	new idDiscount,intLineSeqNum,fltCalcLevel,objDiscRule,objDiscount,strStatus
	new idxPOID
	
	set fltCalcLevel=""
	set idxPOID=$$$Index(pidPO)
	for {
		set fltCalcLevel=$order(^INPODiscountRules(YM,1,fltCalcLevel))
		quit:fltCalcLevel=""
		
		set idDiscount=""
		for {
			set idDiscount=$order(^INPODiscountRules(YM,1,fltCalcLevel,idDiscount))
			quit:idDiscount=""
			
			set objDiscRule=$get(^INPODiscountRule(YM,idDiscount,1))
			set idDO=""
			set intLineSeqNum=""
			for {
				set idDO=$order(^INPOs(YM,2,idxPOID,idDO))
				quit:idDO=""
				set objDO=$get(^INPO(YM,idDO,1))
				quit:objDO=""
				if $$$INPODiscountRuleSupplier(objDiscRule)'=""   && 
					($$$INPODiscountRuleSupplier(objDiscRule)'=$$$INPOSupplierCode(objDO)) {
					continue
				}
				if $$$INPODiscountRuleShipTo(objDiscRule)'=""     &&
					($$$INPODiscountRuleShipTo(objDiscRule)'=$$$INPOShipToLocation(objDO)) {
					continue
				}
				if ($$$INPODiscountRuleDateFrom(objDiscRule)'="") &&
				 	($$$INPOOrderDate(objDO)<$$$INPODiscountRuleDateFrom(objDiscRule)) {
					continue
				}
				if ($$$INPODiscountRuleDateTo(objDiscRule)'="")   &&
					($$$INPOOrderDate(objDO)>$$$INPODiscountRul]]><![CDATA[eDateTo(objDiscRule)) {
					continue
				}
	 
				set objDiscount=""
				if ($$$INPODiscountRuleControl(objDiscRule)=0) {
		; 28-Oct-2009 Missing parentheses around second clause			
		;			if ($$$INPOOrderValue(objDO)>=$$$INPODiscountRulesValue1(objDiscRule)&&$$$INPOOrderValue(objDO)<=$$$INPODiscountRulesValueTo(objDiscRule)){continue}
					if ($$$INPOOrderValue(objDO)>=$$$INPODiscountRuleValue1(objDiscRule)) &&
					   ($$$INPOOrderValue(objDO)<=$$$INPODiscountRuleValueTo(objDiscRule))   {
						continue
					}
					
					set $$$INPODiscountsCalculationLevel(objDiscount)   = $$$INPODiscountRuleCalculationLevel(objDiscRule)
					set $$$INPODiscountsDiscountCode(objDiscount)       = $$$INPODiscountRuleDiscount(objDiscRule)
					set $$$INPODiscountsDiscountType(objDiscount)       = $$$INPODiscountRuleDiscountType(objDiscRule)
					set $$$INPODiscountsRate(objDiscount)               = $$$INPODiscountRuleRate(objDiscRule)
					set $$$INPODiscountsRateType(objDiscount)           = $$$INPODiscountRuleRateType(objDiscRule)
					set $$$INPODiscountsCostDistribution(objDiscount)   = $$$INPODiscountRuleCostDistribution(objDiscRule)
					set $$$INPODiscountsGLCode(objDiscount)             = $$$INPODiscountRuleGLCode(objDiscRule)
					set $$$INPODiscountsDeliveryOrderNumber(objDiscount)= idDO			
					set $$$INPODiscountsItemCategory(objDiscount)       = $$$INPODiscountRuleItemCategory(objDiscRule)
					set intLineSeqNum=$order(^INPODiscounts(YM,pidPO,intLineSeqNum),-1)+1
					
				} elseif $$$INPODiscountRuleControl(objDiscRule)=1 {	
					set idDOLine=""
					for {
						set idDOLine = $order(^INPOLine(YM,idDO,idDOLine))
						quit:idDOLine=""
						
						set objDOLine=$get(^INPOLine(YM,idDO,idDOLine,1))
						if ($$$INPODiscountRuleItemCategory(objDiscRule)'="") &&
						   $$checkItemCat^INPODiscount($$$INPODiscountRuleItemCategory(objDiscRule),$$$INPOLineItem(objDOLine)) {	
							continue
						}
						if ($$$INPODiscountRuleItem(objDiscRule)'="")                         &&
						   ($$$INPOLineItem(objDOLine)'=$$$INPODiscountRuleItem(objDiscRule))    {
							continue
						}
						if ($$$INPODiscountRuleLineType(objDiscRule)'="")                             &&
						   ($$$INPODiscountRuleLineType(objDiscRule)'=$$$INPOLineLineType(objDOLine))    {
							continue
						}
						
						set $$$INPODiscountsCalculationLevel(objDiscount)   = $$$INPODiscountRuleCalculationLevel(objDiscRule)
						set $$$INPODiscountsDiscountCode(objDiscount)       = $$$INPODiscountRuleDiscount(objDiscRule)
						set $$$INPODiscountsDiscountType(objDiscount)       = $$$INPODiscountRuleDiscountType(objDiscRule)
						set $$$INPODiscountsRate(objDiscount) 			    = $$$INPODiscountRuleRate(objDiscRule)
						set $$$INPODiscountsRateType(objDiscount)           = $$$INPODiscountRuleRateType(objDiscRule)
						set $$$INPODiscountsCostDistribution(objDiscount)   = $$$INPODiscountRuleCostDistribution(objDiscRule)
						set $$$INPODiscountsGLCode(objDiscount)             = $$$INPODiscountRuleGLCode(objDiscRule)
						set $$$INPODiscountsDeliveryOrderNumber(objDiscount)= idDO	
						set $$$INPODiscountsPOLineNumber(objDiscount)       = idDOLine
						set $$$INPODiscountsLineType(objDiscount)           = $$$INPOLineLineType(objDOLine)
						set $$$INPODiscountsItem(objDiscount)               = $$$INPOLineItem(objDOLine)
						set intLineSeqNum=$order(^INPODiscounts(YM,pidPO,intLineSeqNum),-1)+1
					}
				}
				if (objDiscount'="") {
					set strStatus = $$$Save("INPODiscounts",pidPO_","_intLineSeqNum,objDiscount,1)
				}
			}	
		}	
	}
		
	quit
	
	
OnAfterPrimaryKey
	if (YKEY'="") {
	;	if ($order(^INPOs(YM,2,YKEY,""))="") {
	;		set YFELD=""
	;		set YKEY=""
	;	}
		; do FillDO^INPOLine(YKEY)    ; 
	}
	quit
	
	
OnAfterDataFields 
	new blnEditable,strStatus
	
 	quit:YKEY=""
 	
 	set blnEditable=$$$NO
 	if (YFORM="INPOM") set blnEditable=$$$YES
 	
 	if YSEITE=1 { 
	; 	do POLineSum^INPOLine(YKEY)   ; DWR test commented out, apears to be stopping the saving of the grid.
 		do LoadPOLineGrid^INPOLine(YKEY,blnEditable)

 	} elseif YSEITE=2 {
		;if ($get(^CacheTempINPO(YUSER,"CurrentDO"))'="") {   
 		;	do LoadDOLineGrid^INPOLine($get(^CacheTempINPO(YUSER,"CurrentDO")),blnEditable)  ; DWR 04Jan2010 commented out Test change to INDOLine class
 			do LoadDOLineGrid^INPOLine(YKEY,blnEditable)
		//	kill ^CacheTempINPO(YUSER)
	;	}
	
	} elseif YSEITE=3 {
	 	set strStatus = $$POSummary^INPOLine(YKEY)
		if $$$ISOK(strStatus) do LoadPOSummaryGrid^INPOLine(YKEY)
	
	} elseif YSEITE=5 {
		do LoadDiscountGrid^INPODiscount(YKEY)
	}
	quit
 
OnBeforeSave
	;-------------------------------------------------------------------------------
	; save the two grid classes used in form
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 04-Jan-2010	DAVID		SR17074: Add the INDOLine save
	;-------------------------------------------------------------------------------
	new strStatus
	;do OnBeforeSaveDiscounts^INPODiscount  ;Suggested By shobby 30-06-2009
	
	set strStatus = $$$GRIDSave(YKEY,"INPOLine")
	if $$$ISOK(strStatus) {
		set strStatus = $$$GRIDSave(YKEY,"INPODOLine")
	}
	if $$$ISOK(strStatus) {
		set strStatus = $$ProcessSupplies^INPOUtil(YKEY)
	}
	if $$$ISOK(strStatus) {
		set strStatus = $$UpdateDelivHeader^INPODOLine(YKEY)
	}
	
	if $$$ISERR(strStatus) {	
		do ReturnError^COMUtilError(strStatus)
		set Q=$$$QDontSave
	} 
	quit
 
OnAfterSaveDiscounts(pYKEY)
	
	new objDiscount,objDOLine,objPO,objDisc
	new fltOrderValue,fltPrevLvl,idDO,idDOLine,intPrevLineSeqNum,intSeqNumset,intSeqNum
	new currDiscountSum,currPrevDiscounts,strStatus,idxYKEY
 
 	set idxYKEY=$$$Index(pYKEY)
	set idDO=""
	set fltOrderValue=0
	do FillCostAfterDisc^INPODiscount(pYKEY)
	for {
		set idDO=$order(^INPOs(YM,2,idxYKEY,idDO))
		quit:idDO=""
		
		set fltPrevLvl=""
		for {
			set fltPrevLvl=$order(^INPODiscounts(YM,1,fltPrevLvl)) 
			quit:fltPrevLvl=""
					
			set intSeqNum=""
			for {
				set intSeqNum=$order(^INPODiscounts(YM,1,fltPrevLvl,idxYKEY,intSeqNum))
				quit:intSeqNum=""
				
				set objDiscount=$get(^INPODiscount(YM,pYKEY,intSeqNum,1))
				if ($$$INPODiscountPOLineNumber(objDiscount)="") set $$$INPODiscountQuantityOrdered(objDiscount)=$$getTotQuantOrdered^INPODiscount(pYKEY,$$$INPODiscountDeliveryOrderNumber(objDiscount),$$$INPODiscountItemCategory(objDiscount))
				set $$$INPODiscountExtendedCost(objDiscount)=$$calculateExtCost^INPODiscount(pYKEY_","_intSeqNum,objDiscount)
				set $$$INPODiscountValue1(objDiscount)= $$CalcDiscountValue^INPODiscount(pYKEY_","_intSeqNum,objDiscount)
				
				if ($$$INPODiscountPOLineNumber(objDiscount)'="")        &&
				   ($$$INPODiscountDeliveryOrderNumber(objDiscount)'="")    {	
					if ($$$INPODiscountDeliveryOrderNumber(objDiscount)=idDO) {
						set objDOLine=$get(^INPOLine(YM,idDO,$$$INPODiscountPOLineNumber(objDiscount),1))
						set $$$INPOLineCostAfterDiscount(objDOLine) = $$$FCAdd($$$INPOLineCostAfterDiscount(objDOLine),$$$INPODiscountValue1(objDiscount)) 
						set strStatus=$$$Save("INPOLine",idDO_","_$$$INPODiscountPOLineNumber(objDiscount),objDOLine,1)
					}
				
				} elseif ($$$INPODiscountDeliveryOrderNumber(objDiscount)'="") {
					if ($$$INPODiscountCostDistribution(objDiscount)'="") {
						set idDOLine=""
						for {
							set idDOLine = $order(^INPOLine(YM,$$$INPODiscountDeliveryOrderNumber(objDiscount),idDOLine))
							quit:idDOLine=""
							set objDOLine=$get(^INPOLine(YM,$$$INPODiscountDeliveryOrderNumber(objDiscount),idDOLine,1))
							if ($$$INPODiscountItemCategory(objDiscount)'="") {	
								continue:$$checkItemCat^INPODiscount($$$INPODiscountItemCategory(objDiscount),$$$INPOLineItem(objDOLine))=0
							}
	 
							set currDiscountSum=0
							set currPrevDiscounts=0
							set intPrevLineSeqNum=""
							for {
								set intPrevLineSeqNum=$order(^INPODiscount(YM,pYKEY,intPrevLineSeqNum))
								quit:intPrevLineSeqNum=""
								quit:intPrevLineSeqNum=intSeqNum
								set objDisc=$get(^INPODiscount(YM,pYKEY,intPrevLineSeqNum,1))
								quit:$$$INPODiscountCalculationLevel(objDiscount)=$$$INPODiscountCalculationLevel(objDisc)
								
								if (idDOLine=$$$INPODiscountPOLineNumber(objDisc))                                              &&
								   ($$$INPODiscountDeliveryOrderNumber(objDisc)=$$$INPODiscountDeliveryOrderNumber(objDiscount))   {
									set currPrevDiscounts= $$$FCAdd(currPrevDiscounts,$$$INPODiscountValue1(objDisc))
								
								} elseif (($$$INPODiscountPOLineNumber(objDisc)="")) {  //&&($$$INPODiscountDeliveryOrderNumber(objDisc)="")) 
									if ($$$INPODiscountCostDistribution(objDisc)'="") {
										if ($$$INPODiscountCostDistribution(objDisc)=0) {
											set currPrevDiscounts=currPrevDiscounts+$$$FCMult($$$FCDivd($$$FCAdd($$$INPOLineExtendedCost(objDOLine),currPrevDiscounts),$$$INPODiscountExtendedCost(objDisc)),$$$INPODiscountValue1(objDisc))
										
										} elseif ($$$INPODiscountCostDistribution(objDisc)=3) {
											set currPrevDiscounts=currPrevDiscounts+$$$FCMult($$$FCDivd($$$INPOLineQuantityOrdered(objDOLine),$$getTotQuantOrdered^INPODiscount(pYKEY,$$$INPODiscountDeliveryOrderNumber(objDiscount))),$$$INPODiscountValue1(objDisc))
										
										} elseif ($$$INPODiscountCostDistribution(objDisc)=4) {
											set currPrevDiscounts=currPrevDiscounts+$$$FCDivd($$$INPODiscountValue1(objDisc),$$getTotLines^INPODiscount(pYKEY,$$$INPODiscountDeliveryOrderNumber(objDiscount)))
										}							
				 
									}
								}
							}						
							if ($$$INPODiscountCostDistribution(objDiscount)=0) {
								set $$$INPOLineCostAfterDiscount(objDOLine)=$$$INPOLineCostAfterDiscount(objDOLine)+$$$FCMult($$$FCDivd($$$FCAdd($$$INPOLineExtendedCost(objDOLine),currPrevDiscounts),$$$INPODiscountExtendedCost(objDiscount)),$$$INPODiscountValue1(objDiscount))
							
							} elseif ($$$INPODiscountCostDistribution(objDiscount)=3) {
								set $$$INPOLineCostAfterDiscount(objDOLine)=$$$INPOLineCostAfterDiscount(objDOLine)+$$$FCMult($$$FCDivd($$$INPOLineQuantityOrdered(objDOLine),$$getTotQuantOrdered^INPODiscount(pYKEY,$$$INPODiscountDeliveryOrderNumber(objDiscount),$$$INPODiscountItemCategory(objDiscount))),$$$INPODiscountValue1(objDiscount))
							
							} elseif ($$$INPODiscountCostDistribution(objDiscount)=4) {
								set $$$INPOLineCostAfterDiscount(objDOLine)=$$$INPOLineCostAfterDiscount(objDOLine)+$$$FCDivd($$$INPODiscountValue1(objDiscount),$$getTotLines^INPODiscount(pYKEY,$$$INPODiscountDeliveryOrderNumber(objDiscount),$$$INPODiscountItemCategory(objDiscount)))
							}						
							set strStatus=$$$Save("INPOLine",idDO_","_idDOLine,objDOLine,1)
						}
					} else {
						set fltOrderValue = fltOrderValue + $$$INPODiscountValue1(objDiscount)
					}
				}
				set strStatus=$$$Save("INPODiscount",pYKEY_","_intSeqNum,objDiscount,1)
			}
		}
	}
	do FillOrderValue^INPODiscount(pYKEY,fltOrderValue)
	quit
 
 
OnFilter(pYKEY,pYFELD)
 ;-------------------------------------------------------------------------------
 ; Restricts the visibility of the difference types of forms that relate to the
 ; class INPO so only appropriate records can be searched or loaded into a 
 ; particular form.
 ;
 ; Inputs:
 ;
 ; Returns:
 ;
 ; History:
 ; 31-Oct-2008 
 ;-------------------------------------------------------------------------------
 new blnStatus
 set blnStatus=$$$OK
 
 if pYFELD'="" {
  	if ($$$INPOTypeOfOrder(pYFELD) = 3 ) {
	  	set blnStatus=$$$NO
  	}
 }
 quit blnStatus

CanCancel(pidPO,pobjPO) 
	;-------------------------------------------------------------------------------
	; check if can cancel the Purchase Order
	;
	; Inputs:
	;
	; Returns: strStatus
	;
	; History:
	; 08-Dec-2009	DWR		SR17074: Created
	;-------------------------------------------------------------------------------
	new blnCancel,POStatus,strStatus
	
	set strStatus=$$$OK
	if '$$$NoKey(pidPO){
		set POStatus = $$$INPOStatus(pobjPO)
		if (POStatus= 9) || (POStatus=10) {
			set strStatus = $$$MakeStatus("IN01161") ;"Purchase Order is already closed"
		}else {
			set strStatus=$$$OK
		}
	}else {
		set strStatus = $$$MakeStatus(32072)    ;"Please Select A Data Record First"	
	}
	$$$YQHandler(strStatus)
	quit strStatus
 	
CancelPO(pidPO)
	;-------------------------------------------------------------------------------
	; cancels the PO, and clears entries on INRequisition to put it back into the list
	; to be ordered.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 08-Dec-2009	DWR		SR17074: Created
	;-------------------------------------------------------------------------------
	new idReq,idxPO,objPO,objReq,strStatus
	
	set idxPO = $$$Index(pidPO)
	
	set idReq = ""
	for{
		set idReq = $order(^INRequisitions(0,19,idxPO,YM,idReq))
		quit:idReq=""
		
		set objReq = $get(^INRequisition(0,YM,idReq,1))
		if objReq'=$$$NULLOREF {
			set $$$INRequisitionStatus(objReq)   = 3
			set $$$INRequisitionINPOLine(objReq) = ""
			set $$$INRequisitionINPOID(objReq)   = ""
			set $$$INRequisitionRelease(objReq)  = $$$NO
		
			set strStatus=$$$Save("INRequisition","0,"_idReq,objReq,$$$YES)	
		}
	}
	if $$$ISOK(strStatus){
		set objPO = $get(^INPO(0,pidPO,1))
		if objPO'=$$$NULLOREF{
			set $$$INPOStatus(objPO) = 10 ;"Cancelled"
			set strStatus = $$$Save("INPO",pidPO,objPO,$$$YES)
			if $$$ISOK(strStatus){
				do GoToForm^COMUtilForm("INPOReqSummary",YUSER)
			}
		}
	}
	quit
	
OnBeforeDelete(pidPO)
	;-------------------------------------------------------------------------------
	; clear out the INRequisition data to make sure it can be sourced again.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 09-Dec-2009	DWR		SR17074: Created
	;-------------------------------------------------------------------------------
	set idxPO = $$$Index(pidPO)
	
	set objINPO = $get(^INPO(0,pidPO,1))
	set enumStatus = $$$INPOStatus(objINPO)
	
	if (enumStatus = 3) || 
		(enumStatus = 5) || 
		(enumStatus = 7) || 
		(enumStatus = 8 ){		; Cut  ; placed ; Receiving; Blocked
		set strStatus = $$$MakeStatus("IN01174")  ; 'Cannot Delete Purchase order, can only Cancel. '
		
	} elseif (enumStatus = 9) || (enumStatus = 10){   ; Closed , Cancelled
		set strStatus = $$$MakeStatus("IN01161") ;"Purchase Order is already closed"
		
	} else {		 
		set idReq = ""
		for{
			set idReq = $order(^INRequisitions(0,19,idxPO,YM,idReq))
			quit:idReq=""
		
			set objReq = $get(^INRequisition(0,YM,idReq,1))
			if objReq'=$$$NULLOREF {
				set $$$INRequisitionStatus(objReq)   = 3
				set $$$INRequisitionINPOLine(objReq) = ""
				set $$$INRequisitionINPOID(objReq)   = ""
				set $$$INRequisitionRelease(objReq)  = $$$NO
		
				set strStatus = $$$Save("INRequisition","0,"_idReq,objReq,$$$YES)	
			}
		}
		
		if $$$ISERR(strStatus){
			;set Q = $$$QDontDelete_$$$Text($listbuild("IN01162",pidPO))  ; 'Problem occured clearing requisiton links to Purchase Order %1
			set strStatus = $$$MakeStatus("IN01162",pidPO)  ; 'Problem occured clearing requisiton links to Purchase Order %1
		} else {
			set strStatus = $$$Kill("INDOLine",pidPO)  ;FIXME not working DWR
		}
	}
	
	if $$$ISERR(strStatus) {
		do ReturnError^COMUtilError(strStatus)
		set Q=$$$QDontDelete
	}

	quit
	
CanCut(pidINPO,pobjINPO)
	;-------------------------------------------------------------------------------
	; Checks for disable button (7) on form INPO - Cut Purchase Order
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 14-Dec-2009	DWR		SR17074: Created
	;-------------------------------------------------------------------------------
	new strStatus 
	
	if '$$$NoKey(pidINPO){
		if ($$$INPOStatus(pobjINPO)=0) || ($$$INPOStatus(pobjINPO)=2) {   ; 0 = Pro Forma   2 = Open
			set strStatus = $$$OK  
		} elseif +$$$INPOCutDate(pobjINPO)'="" {
			set strStatus = $$$MakeStatus("IN01170")  ;"Purchase Order Already Cut"
		} else {
			set strStatus = $$$MakeStatus("IN01172")   ;"Cannot Cut Order"
		}
	} else {
		set strStatus = $$$MakeStatus(32072)    ;"Please Select A Data Record First"	
	}
	$$$YQHandler(strStatus)
	
	quit strStatus
	
CutOrder(pidINPO)   ;WIP DWR 14DEC2009
	;-------------------------------------------------------------------------------
	; changes status to Cut
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 14-Dec-2009	DWR		SR17074: Created
	;-------------------------------------------------------------------------------
	
	if '$$$NoKey(pidINPO){
		set objINPO = $get(^INPO(0,pidINPO,1))
		set $$$INPOStatus(objINPO) = 3 ; Cut
		set $$$INPOCutDate(objINPO) = $horolog
		
		set idLine=""
		for{
			set idLine = $order(^INPOLine(0,pidINPO,idLine))
			quit:idLine=""
			set objPOLine = $get(^INPOLine(0,pidINPO,idLine,1))
			
			set $$$INPOLineStatus(objPOLine) = 3   ;cut
			
			set strStatus = $$$Save("INPOLine",pidINPO_$$$COMMA_idLine,objPOLine,$$$YES)
		}
		if $$$ISOK(strStatus){
			set strStatus = $$$Save("INPO",pidINPO,objINPO,$$$YES)
		}
		if $$$ISOK(strStatus){
			do GoToForm^COMUtilForm("INPO",pidINPO)
		} else {
			$$$Alert($$$Text("IN01171")) ; "Error occured Cutting Purchase Order"
			do GoToForm^COMUtilForm("INPO",pidINPO)
		}
	}
	quit 
	
CanPlace(pidINPO,pobjINPO)
	;-------------------------------------------------------------------------------
	; checks for disable button () Form INPO
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 14-Dec-2009	DWR		SR17074: Created
	;-------------------------------------------------------------------------------
	
	quit 1
	
PlaceOrder(pidINPO)
	;-------------------------------------------------------------------------------
	; Changes status to Placed
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 14-Dec-2009	DWR		SR17074: Created
	;-------------------------------------------------------------------------------

	quit 1
	


#;ToggleHeader(pstrType="none",pintHeight)
#;	;-------------------------------------------------------------------------------
#;	; This routine is used to attempt to keep the grid knowledge inside the grid
#;	; and not have developers know about other things.
#;	;
#;	; Returns:
#;	;
#;	; History:
#;	; 29-Mar-2004	shobby	Grid,Container is the correct solution.  The javascript event that calls
#;	; 						ToggleHeader comes from within the grid.  At some point the issue of custom
#;	; 						application code being contained within the grid has to be addressed.
#;	; 29-Dec-2004	RPW		Created (SR10061)
#;	;-------------------------------------------------------------------------------
#;	new strForm
#;	// Temporary - Shobby to fix - work out why YFORM can't be used here.
#;	set strForm = $get(^CacheTemp(YUSER,"Grid","Container"))
#;	
#;	do PopulateDataField^COMUtils(strForm,24,";"_pstrType_";"_pintHeight)
#;	quit ""
 
 
 
TestPOCreateFromLines
	
	;-------------------------------------------------------------------------------
	; Method Usage
	; This is to test the functioning of "POCreateFromLines" with sample data
	; this a temporary label will be removed after finalizing.
	; 
	; Params:
		;
	; Returns:
	;
	; History:
	;-------------------------------------------------------------------------------
 
	new arrayMsgLines,arrStatus,idPO,strStatus
	
#;	set arrayMsgLines(1) = "~1~OT61~IV Pump Giving Set~10~EA~MED01~~1999~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
#;	set arrayMsgLines(2) = "~1~10001~Infant Nasal Aspirator~8~EA~MED01~~2499~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
#;	set arrayMsgLines(3) = "~1~OT63~Spinal Needle 16f~6~EA~MED02~~2800~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
#;	set arrayMsgLines(4) = "~2~OT61~IV Pump Giving Set~1~EA~MED01~~0~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
 
	set arrayMsgLines(1) = "~1~OT61~IV Pump Giving Set~2~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(2) = "~1~OT61~IV Pump Giving Set~1~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(3) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(4) = "~2~OT61~IV Pump Giving Set~1~EA~MED01~~0~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(5) = "~1~10001~Infant Nasal Aspirator~1~EA~MED01~~100~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/12/2008~2~~~"
	set arrayMsgLines(6) = "~1~10002~Mylicon drops for Infants~1~EA~MED01~~300~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(7) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/13/2008~2~~~"
	set arrayMsgLines(8) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/16/2008~2~~~"	
	set arrayMsgLines(9) = "~1~10004~Baby Relief Kit~1~EA~MED01~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(10) = "~1~OP001~Operating Gloves~1~EA~MED01~~200~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(11) = "~1~10004~Baby Relief Kit~1~EA~MED02~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/18/2008~2~~~"
	set arrayMsgLines(12) = "~1~OP001~Operating Gloves~1~EA~MED02~~60~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
 
	set arrayMsgLines(13) = "~1~OP002~Operating Scalpel~2~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(14) = "~1~OT72~Opsite Dressing~1~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(15) = "~1~OP001~Operating Gloves~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(16) = "~1~OT72~Opsite Dressing~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(17) = "~1~10001~Infant Nasal Aspirator~1~EA~MED01~~100~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/20/2008~2~~~"
	set arrayMsgLines(18) = "~1~10002~Mylicon drops for Infants~1~EA~MED01~~300~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/20/2008~2~~~"
	set arrayMsgLines(19) = "~1~OPER001~Operation 1~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/13/2008~2~~~"
	set arrayMsgLines(20) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/16/2008~2~~~"	
	set arrayMsgLines(21) = "~1~OPER001~Baby Relief Kit~1~EA~MED01~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(22) = "~1~OP001~Operating Gloves~1~EA~MED01~~200~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(23) = "~1~10004~Baby Relief Kit~1~EA~MED02~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/18/2008~2~~~"
	set arrayMsgLines(24) = "~1~OP001~Operating Gloves~1~EA~MED02~~60~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(25) = "~1~OT61~IV Pump Giving Set~2~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(26) = "~1~OT61~IV Pump Giving Set~1~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(27) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(28) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(29) = "~1~10001~Infant Nasal Aspirator~1~EA~MED01~~100~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/12/2008~2~~~"
	set arrayMsgLines(30) = "~1~10002~Mylicon drops for Infants~1~EA~MED01~~300~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(31) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/13/2008~2~~~"
	set arrayMsgLines(32) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/16/2008~2~~~"	
	set arrayMsgLines(33) = "~1~10004~Baby Relief Kit~1~EA~MED01~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(34) = "~1~OP001~Operating Gloves~1~EA~MED01~~200~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(35) = "~1~10004~Baby Relief Kit~1~EA~MED02~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/18/2008~2~~~"
	set arrayMsgLines(36) = "~1~OP001~Operating Gloves~1~EA~MED02~~60~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(37) = "~1~OT61~IV Pump Giving Set~2~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(38) = "~1~OT61~IV Pump Giving Set~1~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(39) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(40) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(41) = "~1~10001~Infant Nasal Aspirator~1~EA~MED01~~100~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/12/2008~2~~~"
	set arrayMsgLines(42) = "~1~10002~Mylicon drops for Infants~1~EA~MED01~~300~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(43) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/13/2008~2~~~"
	set arrayMsgLines(44) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/16/2008~2~~~"	
	set arrayMsgLines(45) = "~1~10004~Baby Relief Kit~1~EA~MED01~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(46) = "~1~OP001~Operating Gloves~1~EA~MED01~~200~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(47) = "~1~10004~Baby Relief Kit~1~EA~MED02~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/18/2008~2~~~"
	set arrayMsgLines(48) = "~1~OP001~Operating Gloves~1~EA~MED02~~60~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(49) = "~1~OT61~IV Pump Giving Set~2~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(50) = "~1~OT61~IV Pump Giving Set~1~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(51) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(52) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(53) = "~1~10001~Infant Nasal Aspirator~1~EA~MED01~~100~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/12/2008~2~~~"
	set arrayMsgLines(54) = "~1~10002~Mylicon drops for Infants~1~EA~MED01~~300~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(55) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/13/2008~2~~~"
	set arrayMsgLines(56) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/16/2008~2~~~"	
	set arrayMsgLines(57) = "~1~10004~Baby Relief Kit~1~EA~MED01~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(58) = "~1~OP001~Operating Gloves~1~EA~MED01~~200~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(59) = "~1~10004~Baby Relief Kit~1~EA~MED02~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/18/2008~2~~~"
	set arrayMsgLines(60) = "~1~OP001~Operating Gloves~1~EA~MED02~~60~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(61) = "~1~OT61~IV Pump Giving Set~2~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(62) = "~1~OT61~IV Pump Giving Set~1~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(63) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(64) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(65) = "~1~10001~Infant Nasal Aspirator~1~EA~MED01~~100~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/12/2008~2~~~"
	set arrayMsgLines(66) = "~1~10002~Mylicon drops for Infants~1~EA~MED01~~300~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(67) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/13/2008~2~~~"
	set arrayMsgLines(68) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/16/2008~2~~~"	
	set arrayMsgLines(69) = "~1~10004~Baby Relief Kit~1~EA~MED01~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(70) = "~1~OP001~Operating Gloves~1~EA~MED01~~200~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(71) = "~1~10004~Baby Relief Kit~1~EA~MED02~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/18/2008~2~~~"
	set arrayMsgLines(72) = "~1~OP001~Operating Gloves~1~EA~MED02~~60~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(73) = "~1~OT61~IV Pump Giving Set~2~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(74) = "~1~OT61~IV Pump Giving Set~1~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(75) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(76) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(77) = "~1~10001~Infant Nasal Aspirator~1~EA~MED01~~100~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/12/2008~2~~~"
	set arrayMsgLines(78) = "~1~10002~Mylicon drops for Infants~1~EA~MED01~~300~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(79) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/13/2008~2~~~"
	set arrayMsgLines(80) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/16/2008~2~~~"	
	set arrayMsgLines(81) = "~1~10004~Baby Relief Kit~1~EA~MED01~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(82) = "~1~OP001~Operating Gloves~1~EA~MED01~~200~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(83) = "~1~10004~Baby Relief Kit~1~EA~MED02~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/18/2008~2~~~"
	set arrayMsgLines(84) = "~1~OP001~Operating Gloves~1~EA~MED02~~60~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(85) = "~1~OT61~IV Pump Giving Set~2~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(86) = "~1~OT61~IV Pump Giving Set~1~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(87) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(88) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/20]]><![CDATA[08~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(89) = "~1~10001~Infant Nasal Aspirator~1~EA~MED01~~100~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/12/2008~2~~~"
	set arrayMsgLines(90) = "~1~10002~Mylicon drops for Infants~1~EA~MED01~~300~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(91) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/13/2008~2~~~"
	set arrayMsgLines(92) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/16/2008~2~~~"		
	set arrayMsgLines(93) = "~1~OP001~Operating Gloves~1~EA~MED01~~200~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(94) = "~1~10004~Baby Relief Kit~1~EA~MED02~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/18/2008~2~~~"
	set arrayMsgLines(95) = "~1~OP001~Operating Gloves~1~EA~MED02~~60~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(96) = "~1~OT61~IV Pump Giving Set~2~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(97) = "~1~OT61~IV Pump Giving Set~1~EA~MED01~~200~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(98) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(99) = "~1~OT63~Spinal Needle 16f~1~EA~MED02~~60~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
	set arrayMsgLines(100) = "~1~10001~Infant Nasal Aspirator~1~EA~MED01~~100~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/12/2008~2~~~"
	set arrayMsgLines(101) = "~1~10002~Mylicon drops for Infants~1~EA~MED01~~300~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/10/2008~2~~~"
	set arrayMsgLines(102) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/13/2008~2~~~"
	set arrayMsgLines(103) = "~1~10003~Infant Tylenol~1~EA~MED02~~30~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/16/2008~2~~~"	
	set arrayMsgLines(104) = "~1~10004~Baby Relief Kit~1~EA~MED01~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(105) = "~1~OP001~Operating Gloves~1~EA~MED01~~200~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/17/2008~2~~~"
	set arrayMsgLines(106) = "~1~10004~Baby Relief Kit~1~EA~MED02~~150~~~~~N5030~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10004D~Warehouse~03/18/2008~2~~~"
	set arrayMsgLines(107) = "~1~OP001~Operating Gloves~1~EA~MED02~~60~~~~~SUP0001~~03/01/2008~~~CHI10002S~Site 1~~~~~CHI10006D~Dept3~03/15/2008~2~~~"	
 
	set idPO =  $$POCreateFromLines(.arrayMsgLines,.strStatus,.arrStatus)
	zw strStatus,arrStatus,idPO //This is just for testing the results 
	quit 
 
 
 
 
]]></Routine>
</Export>