<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESSolicTransf" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARSESSolicTransf
	#include COMSYS
	#include COMConst
	#include INConst
	#include WWWConst
	#include FIN
	#include VARConst
	#include VARSESConst 
 
ChecaSeExisteSetor()
	//A regra de customização já verifica lá mesmo se é uma movimentação
	//de consumo. Caso seja, aí então é chamada essa rotina:
	new CCTemSetor, ExisteSetor
	
	set CCTemSetor = $$$NO
	if ('YKEY) {
	
		set ExisteSetor = $DATA(^VARSESCCLOCAL(YM,YLOCATION))	
			
			if ExisteSetor >= 10 {	
				set CCTemSetor = $$$YES
			}
		
			if ExisteSetor < 10 {	
				set CCTemSetor = $$$NO
			}
		
		}
	
	quit CCTemSetor
 
 
checkLocalSolicitante()
	
	new dado
	
	set dado=$piece(YFELD,Y,3)
	if dado="" quit ""
	if ($get(^COMTempList(YM,YUSER,"VARSESSolicTransfAbastecedor",dado,1))="") {
			$$$StartScript()
			write "alert('"_$$$Text("MED01160")_".'); "  ;Favor inserir um local válido. Clique na lupa de busca para visualizar os locais válidos ;use text macro;15-Sep-2008
			$$$EndScript()
		quit 1	
		}
	quit ""
 
DefinirAbastecedor()
 
 	new idAbastecedor
 	set idAbastecedor = ""
 
	quit:(YKEY = "")
	
	//Gustavo, 27/09/2007: conforme solicitação do Marcelo e Soleni, a 
	//quantidade em estoque é relativa à data de processamento.
	// Andre, 07/11/2007: este código está errado e foi substituído por código na transação de Processar:
	/*
	set LocalSolicitante = $PIECE(YFELD,Y,2)
	
	if Processado '= 1 {
		do CarregaEstoque^VARSESSolicTransfLinha(YKEY,LocalSolicitante)
	}
	*/
 
	//Gustavo, 15/09/2007
	//A global abaixo foi criada para definir qual será o local que será utilizado 
	//como critério de filtro para os produtos autorizados. A global é chamada na 
	//Chave Primária Relacional da relação de classe do campo Código/Descrição no grid.
	//Se for Solicitação de Transferência, a lista de produtos deverá abrir os produtos
	//autorizados na INDRPITEM para o local SOLICITANTE da solicitação.
	//Se for Solicitação de Consumo para Setor, a lista de produtos deverá abrir
	//os produtos autorizados na INDRPITEM para o local ABASTECEDOR da solicitação.
	// Andre, 01/04/2008 - A definição acima, mudou. Leia meu próximo comentário a seguir.
					
	set TipoTransacao = $PIECE(YFELD,Y,15)
	// Andre, 03/10/2007:
	//set YPARA = TipoTransacao
	
	if TipoTransacao = "TRANSFERENCIA" {
		set idAbastecedor = $PIECE(YFELD,Y,2)		
	}	
		
	elseif TipoTransacao = "CONSUMO" {
		// Andre, 01/04/2008 - Apesar da data, isto não é uma mentira, ok? Bem, quando a solicitação 
		// for de consumo, agora, passaremos a verificar se existe alguma autorização na INDRPITEM para 
		// o próprio local solicitante, mesmo que ele seja um centro de custo. Se existir, buscaremos 
		// na INDRPITEM os registro do próprio centro de custo, ao invés de buscarmos na INDRPITEM por
		// registros do local abastecedor.
		// Código antigo:
		// set ^VARSESLocalAbastecedor(YUSER) = $PIECE(YFELD,Y,3)
		if ( $data(^INDRPITEM(YM,$PIECE(YFELD,Y,2))) ) {
			// Se há dados na INDRPITEM para o local solicitante (centro de custo), usa-se
			// o próprio local solicitante para procurar registros na INDRPITEM:
			set idAbastecedor = $PIECE(YFELD,Y,2)
		}
		else {
			// Se **não** há dados na INDRPITEM para o local solicitante (centro de custo), usa-se
			// o local abastecedor para procurar registros na INDRPITEM:
			set idAbastecedor = $PIECE(YFELD,Y,3)
		}
	}
 
	set ^VARSESLocalAbastecedor(YUSER) = idAbastecedor
			
	quit idAbastecedor
 
DefinirYOPTION()
 
	// Define YOPTION de acordo com YPARA:
	if ($get(YPARA) = "TRANSFERENCIA") {
		set YOPTION = 1
	}
	elseif ($get(YPARA) = "CONSUMO") {
		set YOPTION = 2
	}
	else {
		set YPARA = "TRANSFERENCIA"
		set YOPTION = 1
	}
 
	quit 
 
CheckEditAccess(pidSolic)
 
 	new objSolic
 
 	if $data(^VARSESSolicTransf(YM, pidSolic, 1)) {
 			
 		set objSolic = $get(^VARSESSolicTransf(YM, pidSolic, 1))
		
		if YLOCATION '= $$$VARSESSolicTransfLocalRecebedor(objSolic) {
			// Andre, 04/10/2007 - retirada a msg a pedido do Marcelo:
			//$$$StartScript()
			//w "alert('Esse documento é do local "_$PIECE($GET(^VARSESSolicTransf(YM,YKEY,1)),Y,2)_"! Seu local é "_YLOCATION_". A tela ficará disponível apenas para consulta de documentos.'); "
			//$$$EndScript()
			quit $$$NO
		}
	
		if $$$VARSESSolicTransfProcessado(objSolic) {
			quit $$$NO
		}
 
		set idStatus = $$$VARSESSolicTransfParcialmenteAtendido(objSolic)
 		if idStatus '= $$$SolicEmAberto quit $$$NO	//pau?!?
 
	}
	else {
		//Compara o tipo de usuário com o tipo de tela: não deixa centro de
		//custo criar solicitação de transferência, e nem local de estoque
		//criar solicitação de consumo.
		set LocalAtualEhDeArmazenagem = $PIECE($GET(^WWW0121(0,YM,YLOCATION,1)),Y,24)	
 
		if ('LocalAtualEhDeArmazenagem) && (YOPTION=1) {
			$$$StartScript()
			write "alert('"_$$$Text($listbuild("MED01161",YLOCATION))_". "_$$$Text("MED01162")_".'); "  ;O local atual (%1) não pode criar solicitações de transferência. A tela ficará disponível apenas para consulta de documentos. ;use text macro;15-Sep-2008
			$$$EndScript()
			quit $$$NO			
		}
		
		if (LocalAtualEhDeArmazenagem) && (YOPTION=2) {
			$$$StartScript()
			write "alert('"_$$$Text($listbuild("MED01163",YLOCATION))_". "_$$$Text("MED01162")_".'); "  ;O local atual (%1) não pode criar solicitações de consumo para setor. A tela ficará disponível apenas para consulta de documentos. ;use text macro;15-Sep-2008
			$$$EndScript()
			quit $$$NO			
		}
	
	}
	quit $$$YES
	
 
OnAfterDataFields(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
	; Used on INLIEF, if tab is number 3, loads the grid
	;
	; Returns:
	;
	; History:
	; 14-Nov-2006	RGB		Created (SR BR014300)
	;-------------------------------------------------------------------------------
	do PrintJS^VARSESSolicTransfLinha()
	do PrintJS(YVOR)
 
	do LoadGrid(pYKEY)
	
	do:(pYKEY '= "") PrintLogs(pYKEY, pYFELD)
	
 	quit
 	
LoadGrid(pid="")
	;-------------------------------------------------------------------------------
	; Display the Line Items associated with this Receive.
	;
	; Returns:
	;
	; History:
	; 14-Nov-2006	RGB		Created (SR BR014300)
	;-------------------------------------------------------------------------------
	new objInvoice,YFORM,YKEY,YAUSWAHL,YFELD,objVARTRKATARequest,strData
	set YFORM="VARSESSolicTransfLinha"
	set YFELD=""
	set YKEY=$get(pid)
	
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)=1
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL)=290
	set $$$COMGridEditParameterGridName(YAUSWAHL)=YFORM
	set $$$COMGridEditParameterEnabled(YAUSWAHL)='($$$WWW120AuthorizationToModifyData(YVOR)=5)
	set $$$COMGridEditParameterContainer(YAUSWAHL)="VARSESSolicTransf"
	
	do ^COMGridEdit31
	
	quit
 
 
OnBeforeSave(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
	; Saves the grid
	;
	; Returns:
	;
	; History:
	; 14-Nov-2006	RGB		Created (SR BR014300)
	;-------------------------------------------------------------------------------
	new strStatus
	set strStatus=$$$GRIDSave(pYKEY)
	if $$$ISOK(strStatus) {
	} else {
		set Q=$$$QDontSave
	}
	quit
	
OnAfterDelete(pYKEY)
	;-------------------------------------------------------------------------------
	; Calls the com grid interface for deleting a line
	;
	; Returns:
	;
	; History:
	; 14-Nov-2006	RGB		Created (SR BR014300)
	;-------------------------------------------------------------------------------
	do DELETE^COMGridEdit31Interface()
	quit
	
OnBeforeFormConstruction(pidField,pobjLine)
	new idItem
 
	if pidField = $$$FldINTFRLineUnit {
		set idItem = $$$INTFRLineItem(pobjLine)
		if idItem '= "" do LoadUnitOfMeasureList^INARTUtilities(idItem)
	}
 
	quit
	
ListProdutos
	kill ^VARSESSolicTransfProdutos(YM,YUSER)
	set Produto = ""
	for {
		set Produto = $order(^INDRPITEM(0,YLOCATION,Produto))
		quit:(Produto = "")
		set ^VARSESSolicTransfProdutos(YM,YUSER,Produto,1)=$piece($get(^INART(0,Produto,1)),Y,1)
	}
	QUIT
 
	
ListLocalAbastecedor(pobjSolicTransf)
	// Cria a lista temporária de locais abastecedores.
	// Quando o usuário for fazer uma solicitação, ele verá os locais
	// abastecedores de acordo com as seguintes condições:
	// 
	// 1. se o local requisitante é local de armazenagem pega os abastecedores dele da WWW0121
	// 2. Caso seja centro de custo pega os abastecedores dele da VARSESABASTCC
	// 3. Caso seja solicitação de consumo, ele não inclui os locais de restrição do usuário (piece 129 da WWW013).
 
 	new idAbastecedor
 
	kill ^COMTempList(YM,YUSER,"VARSESSolicTransfAbastecedor")
 
 	set objLocal = $GET(^WWW0121(0,YM,YLOCATION,1))
 	 	
	set LocalAtualEhDeArmazenagem = $piece(objLocal,Y,24)		
	
	if (LocalAtualEhDeArmazenagem) {
 
		set abastecedor = ""
		for i=1:1:$length($$$WWW0121FREE11(objLocal),";") {
			set abastecedor = $piece($$$WWW0121FREE11(objLocal),";",i)
			quit:(abastecedor = "")
			set ^COMTempList(YM,YUSER,"VARSESSolicTransfAbastecedor",abastecedor,1)=$piece($get(^WWW0121(0,YM,abastecedor,1)),Y,1)
		}
	}
 
	else { // locais que abastecem o centro de custo
		set LocalSolicitante = YLOCATION 
		set Location = ""
		set LocaisRestricao = ";"_$piece($get(^WWW013(YM,YBED,1)),Y,129)_";"		
		for {
			set Location = $order(^VARSESABASTCCs(0,1,LocalSolicitante,Location))
			quit:(Location = "")
			continue:(Location = YLOCATION)
			set LocationFind = ";"_Location_";"
			continue:($find(LocaisRestricao,Location))
			set ^COMTempList(YM,YUSER,"VARSESSolicTransfAbastecedor",Location,1)=$piece($get(^WWW0121(0,YM,Location,1)),Y,1)
		}
	}
	
	// Se o solicitação já existir e eu for o local abastecedor, inserir o local atual
	// na lista de locais abastecedores.
	set idAbastecedor = $$$VARSESSolicTransfLocalAbastecedor(pobjSolicTransf)
	if (YKEY '= "") && $data(^VARSESSolicTransf(YM, YKEY, 1)) && (YLOCATION = idAbastecedor) {
		set ^COMTempList(YM,YUSER,"VARSESSolicTransfAbastecedor",YLOCATION,1) = $piece($get(^WWW0121(0,YM,YLOCATION,1)),Y,1)
	}
 
 	quit	
	
CanProcess(pidSolicTransf, pobjSolicTransf)
 
 	if $$$VARSESSolicTransfProcessado(pobjSolicTransf) {
	
		set YQ = $$$YQDisable($$$Text("MED01164"))  ;Essa solicitação já foi processada ;use text macro;15-Sep-2008
 	
 	} elseif $$$VARSESSolicTransfParcialmenteAtendido(pobjSolicTransf) = $$$SolicEncerrada {
 
	 	set YQ = $$$YQDisable($$$Text("MED01165"))  ;Essa solicitação foi encerrada ;use text macro;15-Sep-2008
 
	} elseif $$$VARSESSolicTransfParcialmenteAtendido(pobjSolicTransf) = $$$SolicDocumentoRejeitado {
 
	 	set YQ = $$$YQDisable($$$Text("MED01166"))  ;Essa solicitação foi rejeitada, não pode ser processada mas pode ser reativada ;use text macro;15-Sep-2008
 
	} elseif (pidSolicTransf '= "") && ($order(^VARSESSolicTransfLinha(YM, pidSolicTransf, "")) = "") {
	
		set YQ = $$$YQDisable($$$Text("MED01167"))  ;A Solicitação tem que ter pelo menos 1 item ;use text macro;15-Sep-2008
 
	} elseif $$$VARSESSolicTransfLocalRecebedor(pobjSolicTransf) = "" {
	
		set YQ = $$$YQDisable($$$Text("MED01168"))  ;O local solicitante está vazio ;use text macro;15-Sep-2008
 
	} elseif $$$VARSESSolicTransfLocalAbastecedor(pobjSolicTransf) = "" {
	
		set YQ = $$$YQDisable($$$Text("MED01169"))  ;O local abastecedor está vazio ;use text macro;15-Sep-2008
 
	} elseif $$ChecarQuantidade(pidSolicTransf) {
 
		set YQ = $$$YQDisable($$$Text("MED01170"))  ;É preciso definir quantidade para todos os produtos ;use text macro;15-Sep-2008
 
	} elseif $$$VARSESSolicTransfLocalRecebedor(pobjSolicTransf) '= YLOCATION {
		
		set YQ = $$$YQDisable()
 
	} else { 
 
		set YQ = $$$YQEnable
	}
 
	quit
 
InserePrefixoNumerador()	
	//Gustavo, 17/09/07
	//Insere o prefixo que identifica o tipo de operação antes do campo chave primária do form.
 
	set TipoOperacao = YPARA
 
	if TipoOperacao = "TRANSFERENCIA" {
		write "  ST"
	}
	
	elseif TipoOperacao = "CONSUMO" {
		write "  SC"	
	}
	
	quit
 
 
CanViewReport()
 	//Gustavo, 11/10/2007
 	//Desabilita o botão de relatório caso a solicitação não tenha sido processada.
 	
 	if (YKEY) { 	
 		if '$$$VARSESSolicTransfProcessado(YFELD) {
			set YQ = $$$YQDisable($$$Text("MED01171"))  ;O relatório só fica disponível após a solicitação ter sido processada ;use text macro;15-Sep-2008
		}  	
		else { 
			set YQ = $$$YQEnable
		} 	
 	} 
	quit
 
 
 
CanConfirmPrinting(pidSolic)	
 	//Gustavo, 11/10/2007
 	//Desabilita o botão de confirmação de impressão caso a solicitação ainda não tenha sido processada.
 
	if (YKEY) {
	
	set objSolicTransf = $get(^VARSESSolicTransf(YM, pidSolic, 1))
	set idTransfer = $order(^INTFRs(YM, 11, $$^WWWUMLAU(pidSolic, 1), ""))
		 
 		if '$$$VARSESSolicTransfProcessado(YFELD) {
			set YQ = $$$YQDisable($$$Text("MED01172"))  ;Só é possível confirmar a impressão depois que a solicitação tiver sido processada ;use text macro;15-Sep-2008
		}
		elseif ($$$VARSESSolicTransfLocalAbastecedor(YFELD) '= YLOCATION) {
			set YQ = $$$YQDisable($$$Text("MED01173"))  ;Só os usuários do local abastecedor podem confirmar que a solicitação já foi impressa ;use text macro;15-Sep-2008
			
		}	  	
		elseif (idTransfer '= "") {
			if ($$$INTFRStatus($get(^INTFR(YM,idTransfer,1))) > 1) {
				set YQ = $$$YQDisable($$$Text("MED01174"))  ;Essa solicitação já foi atendida ;use text macro;15-Sep-2008
			}
		}			
		else { 
			set YQ = $$$YQEnable
		} 	
 	} 
	quit
	
ConfirmPrinting(pidSolic)
 	//Gustavo, 24/10/2007
 	//Seta o campo de Impresso para sim e não conforme se clica no botão de Confirmar/Desconfirmar Impressão. 	
	
	if $get(pidSolic) = "" { quit }
	
	set objSolic = $get(^VARSESSolicTransf(YM, pidSolic, 1))		
	if $get(objSolic) = "" { quit }
	
	if $$$VARSESSolicTransfImpresso(objSolic) '= 1 {
		set $$$VARSESSolicTransfImpresso(objSolic) = 1
	}  	
		
	else { 
		set $$$VARSESSolicTransfImpresso(objSolic) = 0 		
	}
	
	set status = $$$Save("VARSESSolicTransf",pidSolic,objSolic,1)
	
	if $$$ISERR(status) { 
		$$$StartScript()
		write "alert('"_$$$Text("MED01175")_"'); "  ;Não foi possível confirmar a impressão. Erro ao salvar. ;use text macro;15-Sep-2008
		$$$EndScript()
	}
	
	do GoToForm^COMUtilForm("VARSESSolicTransf", pidSolic)	
	
	quit
	
ProcessOnClick(pidSolicTransf)
 
	do Perform^COMTransaction(YFORM,YKEY,"StartProcess^VARSESSolicTransf("""_pidSolicTransf_""")","IN00377")
	
	quit
	
	
CanReject(pidSolicTransf)
 
	if pidSolicTransf="" quit
 
	if '$$$VARSESSolicTransfProcessado(YFELD) {
		set YQ = $$$YQDisable($$$Text("MED01176"))  ;Só é possível rejeitar a solicitação depois de processada ;use text macro;15-Sep-2008
		
	} elseif $$$VARSESSolicTransfParcialmenteAtendido(YFELD) = $$$SolicEncerrada {
		set YQ = $$$YQDisable($$$Text("MED01177"))  ;Não é possível rejeitar uma solicitação que está encerrada ;use text macro;15-Sep-2008
		quit
					
	} elseif $$$VARSESSolicTransfParcialmenteAtendido(YFELD) = $$$SolicDocumentoRejeitado {
		set YQ = $$$YQDisable($$$Text("MED01178"))  ;Não é possível rejeitar uma solicitação que está rejeitada ;use text macro;15-Sep-2008
		quit
 
	} elseif ($$$VARSESSolicTransfLocalAbastecedor(YFELD) '= YLOCATION) {
		set YQ = $$$YQDisable($$$Text("MED01179"))  ;Somente os usuários do local abastecedor podem rejeitar a solicitação ;use text macro;15-Sep-2008
 
	} else { 
		set YQ = $$$YQEnable
	} 	
	quit
	
CanCancel(pidSolicTransf)
	if pidSolicTransf="" quit
 
	if '$$$VARSESSolicTransfProcessado(YFELD) {
		set YQ = $$$YQDisable($$$Text("MED01180"))  ;Só é possível cancelar a solicitação depois de processada ;use text macro;15-Sep-2008
		quit	
			
	} elseif $$$VARSESSolicTransfParcialmenteAtendido(YFELD) = $$$SolicEncerrada {
		set YQ = $$$YQDisable($$$Text("MED01181"))  ;Não é possível cancelar uma solicitação que está encerrada ;use text macro;15-Sep-2008
		quit
					
	} elseif $$$VARSESSolicTransfParcialmenteAtendido(YFELD) = $$$SolicDocumentoRejeitado {
		set YQ = $$$YQDisable($$$Text("MED01182"))  ;Não é possível cancelar uma solicitação que está rejeitada ;use text macro;15-Sep-2008
		quit			
		
	} elseif ($$$VARSESSolicTransfLocalRecebedor(YFELD) '= YLOCATION) || 
		   (YBED '= $$$VARSESSolicTransfCreatedBy(YFELD)) {
			   
		set YQ = $$$YQDisable($$$Text("MED01183"))  ;Somente o usuário que criou a solicitação no local recebedor pode cancelar a solicitação ;use text macro;15-Sep-2008
		quit
	}
	else { 
		set YQ = $$$YQEnable
	} 	
	quit
	
 /*
CanReactivate(pidSolicTransf)
	if pidSolicTransf="" quit
	set objSolic = $get(^VARSESSolicTransf(YM, pidSolicTransf, 1))
	if $get(objSolic) = "" { 
		set YQ = $$$YQDisable("Só é possível reativar a solicitação depois de processada.")
		quit 
	}
	if $$$VARSESSolicTransfParcialmenteAtendido(YFELD) '= $$$SolicDocumentoRejeitado {
		set YQ = $$$YQDisable("Só é possível reativar uma solicitação rejeitada.")
	}
	elseif YLOCATION'=$$$VARSESSolicTransfLocalRecebedor(YFELD) {
		set YQ = $$$YQDisable("A solicitação só pode ser reativada no local de origem.")
	}
	elseif YBED'=$$$VARSESSolicTransfCreatedBy(YFELD) {
		set YQ = $$$YQDisable("Só o usuário que criou a solicitação pode reativar a solicitação.")
	}				
	else { 
		set YQ = $$$YQEnable
	} 	
	quit
 
ReactivateOnClick(pidSolicTransf)
	set objSolic = $get(^VARSESSolicTransf(YM, pidSolicTransf, 1))		
	if $get(objSolic) = "" { quit }
	set $$$VARSESSolicTransfFirmado(objSolic)="1"
	set status = $$$Save("VARSESSolicTransf",pidSolicTransf,objSolic,1)
	if $$$ISERR(status) { 
		$$$StartScript()
		w "alert('Não foi possível reativar a solicitação. Erro ao salvar.'); "
		$$$EndScript()
	}
	if $$$ISOK(strStatus) {
		$$$Alert("Solicitação reativada com sucesso!")	
		do ReloadForm^COMUtilForm()
	}
	quit
 */
	
CancelSolic(pidSolicTransf, pobjSolicTransf)
	set status = $$$Save("VARSESSolicTransf",pidSolicTransf,objSolic,1)
	if $$$ISERR(status) {
		/*
		$$$StartScript()
		w "alert('Não foi possível cancelar a solicitação no Alphalinc. Erro ao salvar.'); "
		$$$EndScript()*/
		set $zerror = $$$Text("MED01184")_" => "_$$DecodeError^COMUtilError(strStatus)  ;Não foi possível cancelar a solicitação no Alphalinc. Erro ao salvar. ;use text macro;15-Sep-2008
		zquit 1 GOTO @$ZTRAP
	}
	
	// Não mexer com o DRP por enquanto.
	/*
	new status
	set status=$$$OK
	new strStatus
	set idINDRPDEMAND=""
 	set idNoDoc=$$$VARSESSolicTransfNoDocumento(pobjSolicTransf)
 	set idDemand=""
 	set idDemand=$order(^INDRPDEMANDs(YM,13,$$^WWWUMLAU(idNoDoc,1),$$$VARSESSolicTransfLocalAbastecedor(pobjSolicTransf),idDemand))
 	while idDemand'="" {
	 	set idRequisition=$piece($get(^INDRPDEMAND(YM,$$$VARSESSolicTransfLocalAbastecedor(pobjSolicTransf),idDemand,1)),Y,125)
	 		set item=$piece($get(^INRequisition(YM,YM,idRequisition,1)),Y,1)
	 		set idlinhatransf=""
	 		set idlinhatransf=$order(^VARSESSolicTransfLinhas(YM,1,item,pidSolicTransf,idlinhatransf))
	 		set objlinhatransf=$get(^VARSESSolicTransfLinha(YM,pidSolicTransf,idlinhatransf,1))
	 		IF $piece(objlinhatransf,Y,11)'=1 {
		 		if ($piece(objlinhatransf,Y,10)=0) {
					set status=$$$Kill("INRequisition",YM_YKOMMA_idRequisition)
					set objDemand=$$$DATA("INDRPDEMAND",$$$VARSESSolicTransfLocalAbastecedor(pobjSolicTransf)_YKOMMA_idDemand)
					set $$$INDRPDEMANDDemandClosed(objDemand)=$$$YES			
					set strStatus=$$$Save("INDRPDEMAND",$$$VARSESSolicTransfLocalAbastecedor(pobjSolicTransf)_YKOMMA_idDemand,objDemand,$$$YES)
		 		} else {
			 		set objRequisition=$get(^INRequisition(YM,YM,idRequisition,1))
			 		set $piece(objRequisition,Y,3)=$piece(objlinhatransf,Y,10)
			 		set strStatus=$$$Save("INRequisition",YM_YKOMMA_idRequisition,objRequisition,$$$YES)
		 		}
		 		if $$$ISERR(strStatus) {
					set $zerror = "Não foi possível cancelar a solicitação."_$$DecodeError^COMUtilError(strStatus)
					zquit 1 GOTO @$ZTRAP
					set idDemand=""
				}
	 		}
			set idDemand=$order(^INDRPDEMANDs(YM,13,$$^WWWUMLAU(idNoDoc,1),$$$VARSESSolicTransfLocalAbastecedor(pobjSolicTransf),idDemand))
		if $$$ISERR(status) {
			set $zerror = "Não foi possível cancelar a solicitação."_$$DecodeError^COMUtilError(status)
			zquit 1 GOTO @$ZTRAP
			set idDemand=""
		}
 	}
 	*/
	quit strStatus
	
StartProcess(pidSolicTransf)
 
	new strStatus, objSolicTransf
	
	set objSolicTransf = $get(^VARSESSolicTransf(YM, pidSolicTransf, 1))
	
	set strStatus = $$Transaction^COMTransaction("Process^VARSESSolicTransf("""_pidSolicTransf_""","""_objSolicTransf_""")", $$$YES)
	
	if $$$ISOK(strStatus) {
		$$$Alert($$$Text("MED01185")_"!")  ;Solicitação processada com sucesso ;use text macro;15-Sep-2008
		
		do ReloadForm^COMUtilForm()
	}
 
	quit
	
StartReProcess(pidSolicTransf)
 
	new strStatus, objSolicTransf
	
	set objSolicTransf = $get(^VARSESSolicTransf(YM, pidSolicTransf, 1))
	
	set strStatus = $$Transaction^COMTransaction("Process^VARSESSolicTransf("""_pidSolicTransf_""","""_objSolicTransf_""")", $$$YES)
	
	if $$$ISOK(strStatus) {
		set $piece(objSolicTransf,Y,6)=1
		set strStatus = $$$Save("VARSESSolicTransf",pidSolicTransf,objSolicTransf,$$$YES)
		if $$$ISERR(strStatus) {
			set $zerror = $$$Text("MED01186")_" => "_$$DecodeError^COMUtilError(strStatus)  ;Erro ao salvar o status da solicitação. ;use text macro;15-Sep-2008
			zquit 1 GOTO @$ZTRAP
		}
		$$$Alert($$$Text("MED01187")_"!")  ;Solicitação processada com sucesso ;use text macro;15-Sep-2008
		do ReloadForm^COMUtilForm()
	}
 
	quit
	
Process(pidSolicTransf, pobjSolicTransf)
 
	new objRequisition, idSolicTransfLine, objSolicTransf, objSolicTransfLine, idRequisition, strStatus, arrRequisitions, arrLines
 
  	/*
	// Criar INRequisition.
	$$$Order3(^VARSESSolicTransfLinha,YM,pidSolicTransf,idSolicTransfLine)
	
		set objSolicTransfLine = $get(^VARSESSolicTransfLinha(YM, pidSolicTransf, idSolicTransfLine, 1))
		
		set objRequisition = ""
		set $$$INRequisitionItem(objRequisition)         	 = $$$VARSESSolicTransfLinhaCodigodoProduto(objSolicTransfLine)
		set $$$INRequisitionUnit(objRequisition)         	 = $$$VARSESSolicTransfLinhaUnidadedeEstoque(objSolicTransfLine)
		set $$$INRequisitionQuantity(objRequisition)     	 = $$$VARSESSolicTransfLinhaQuantidade(objSolicTransfLine)
		set $$$INRequisitionPlanDue(objRequisition)      	 = $$$VARSESSolicTransfDataDesejada(pobjSolicTransf)
		set $$$INRequisitionPlanQty(objRequisition)      	 = $$$VARSESSolicTransfLinhaQuantidade(objSolicTransfLine)
		set $$$INRequisitionDueDate(objRequisition)      	 = $$$VARSESSolicTransfDataDesejada(pobjSolicTransf)
		set $$$INRequisitionStatus(objRequisition)       	 = $$$EnumINREQSTATUSUnfirmed
		set $$$INRequisitionLocation(objRequisition)     	 = $$$VARSESSolicTransfLocalRecebedor(pobjSolicTransf)
		set $$$INRequisitionCreatedBy(objRequisition)    	 = $$$VARSESSolicTransfCreatedBy(pobjSolicTransf)
		set $$$INRequisitionCreatedAt(objRequisition)    	 = $$$VARSESSolicTransfDateCreated(pobjSolicTransf)
		set $$$INRequisitionModifiedBy(objRequisition)   	 = $$$VARSESSolicTransfChangedBy(pobjSolicTransf)
		set $$$INRequisitionModifiedAt(objRequisition)   	 = $$$VARSESSolicTransfDateChanged(pobjSolicTransf)
		set $$$INRequisitionFirmBy(objRequisition)       	 = $$$VARSESSolicTransfDataDesejada(pobjSolicTransf)
		set $$$INRequisitionSourceBy(objRequisition)     	 = $$$VARSESSolicTransfDataDesejada(pobjSolicTransf)
		set $$$INRequisitionRaiseBy(objRequisition)      	 = $$$VARSESSolicTransfDataDesejada(pobjSolicTransf)
		set $$$INRequisitionPlaceBy(objRequisition)      	 = $$$VARSESSolicTransfDataDesejada(pobjSolicTransf)
		set $$$INRequisitionConfirmBy(objRequisition)    	 = $$$VARSESSolicTransfDataDesejada(pobjSolicTransf)
		set $$$INRequisitionToSupplierBy(objRequisition) 	 = $$$VARSESSolicTransfDataDesejada(pobjSolicTransf)
		set $$$INRequisitionType(objRequisition)         	 = $$$EnumINREQUISITIONTYPETfr
		set $$$INRequisitionSourcingLocation(objRequisition) = $$$VARSESSolicTransfLocalAbastecedor(pobjSolicTransf)
		
		set $$$INRequisitionFirm(objRequisition)   = $$$YES
		set $$$INRequisitionSource(objRequisition) = $$$YES
		
		set idRequisition = $$$NextKey("INRequisition")
		set idVarRequisition=idRequisition //For use later instead of using $$$NEXT
		
		set strStatus = $$$Save("INRequisition",YM_$$$COMMA_idRequisition,objRequisition,$$$YES)
		if $$$ISERR(strStatus) {
			set $zerror = "Erro ao salvar o alerta de reposição. => "_$$DecodeError^COMUtilError(strStatus)
			zquit 1 GOTO @$ZTRAP
		}
		
		set arrRequisitions(idRequisition) = objRequisition
		
	
	$$$End
 
	// Firmar a INRequisition.
	$$$Order1(arrRequisitions,idRequisition)
	
		set strStatus = $$Firm^VARSESINRequisition(idRequisition)
		
		if $$$ISERR(strStatus) {
			set $zerror = "Erro ao firmar o alerta de reposição. => "_$$DecodeError^COMUtilError(strStatus)
			zquit 1 GOTO @$ZTRAP
		}
	$$$End
	
	// Fazer o Sourcing.
	kill arrLines
 	set strStatus = $$Source^VARSESINRequisition(.arrRequisitions)
	if $$$ISERR(strStatus) {
		set $zerror = "Erro ao definir a fonte de materiais. => "_$$DecodeError^COMUtilError(strStatus)
		zquit 1 GOTO @$ZTRAP
	}
 	*/
 	// Define Data de Solicitação igual à data de processamento (agora):
 	set $$$VARSESSolicTransfDatadaSolicitacao(pobjSolicTransf) = $horolog
	set $$$VARSESSolicTransfProcessado(pobjSolicTransf)		   = $$$YES
 
 	 	// Rubens: Pega a chave do INDRPDemand e procura o No Documento em vez de usar $$$NEXT que estava desincronizado
 	/*
 	set idINDRPDEMAND=""
 	set idINDRPDEMAND=$order(^INDRPDEMANDs(YM,200,idVarRequisition,$$$VARSESSolicTransfLocalAbastecedor(pobjSolicTransf),idINDRPDEMAND))
 	set objINDRPDEMAND=$get(^INDRPDEMAND(YM,$$$VARSESSolicTransfLocalAbastecedor(pobjSolicTransf),idINDRPDEMAND,1))
 	set $$$VARSESSolicTransfNoDocumento(pobjSolicTransf)=$piece(objINDRPDEMAND,Y,124)
 	// 
 	//set $$$VARSESSolicTransfNoDocumento(pobjSolicTransf)	   = $$$NextKey("INTfrGroupNumber")
 	//*/
 	set strStatus = $$Save^COMUtils("VARSESSolicTransf",pidSolicTransf,pobjSolicTransf,1)
	if $$$ISERR(strStatus) {
		set $zerror = $$$Text("MED01188")_" => "_$$DecodeError^COMUtilError(strStatus)  ;Erro ao processar a Solicitação de transferência ;use text macro;15-Sep-2008
		zquit 1 GOTO @$ZTRAP
	}
 
	// 07/11/2007, Andre: saves current SOH of the requisitioning location
	// to the lines:
	$$$Order3(^VARSESSolicTransfLinha,YM,pidSolicTransf,idSolicTransfLine)
		set objSolicTransfLine = $get(^VARSESSolicTransfLinha(YM, pidSolicTransf, idSolicTransfLine, 1))
		set $$$VARSESSolicTransfLinhaEstoqueFisicoLocal(objSolicTransfLine) = $$Estoque^VARSESEstoque(YM,$$$VARSESSolicTransfLinhaCodigodoProduto(objSolicTransfLine),$$$VARSESSolicTransfLocalRecebedor(pobjSolicTransf))
		 set $piece(objSolicTransfLine,Y,10)=0
 		set $piece(objSolicTransfLine,Y,11)=0
	 	set strStatus = $$Save^COMUtils("VARSESSolicTransfLinha",pidSolicTransf_YKOMMA_idSolicTransfLine,objSolicTransfLine,1)
		if $$$ISERR(strStatus) {
			set $zerror = $$$Text("MED01188")_" => "_$$DecodeError^COMUtilError(strStatus)  ;Erro ao processar a Solicitação de transferência ;use text macro;15-Sep-2008
			zquit 1 GOTO @$ZTRAP
		}
	$$$End
 
	// Enviar os documentos para o Trak Care.
	do SolicitarTransferencia^VARSESIntegration(pidSolicTransf)
 
	quit $$$OK
 
GetIdSolicTransf(pstrDocumento)
 
	quit:pstrDocumento="" ""
 
	new idSolicTransf	
	set idSolicTransf = $order(^VARSESSolicTransfs(YM, 1, pstrDocumento, ""))
	
	quit idSolicTransf
	
GetObjSolicTransf(pstrDocumento)
 
	new idSolicTransf, objSolicTransf
	
	set idSolicTransf = $$GetIdSolicTransf(pstrDocumento)
	quit:idSolicTransf="" ""
 
	set objSolicTransf = $get(^VARSESSolicTransf(YM, idSolicTransf, 1))
 
	quit objSolicTransf
 
CreateTransfer(pidSolic)
	// This routine is called by the "Efetivar" (Transfer) button, that either
	// creates a new Transfer or opens an already existing one corresponding to current
	// requisition.
 
 	new objTransfer, idRecLocation, idSendLocation, idTransfer, idxSolic
 	
	set objTransfer = ""
 
	set objSolicTransf = $get(^VARSESSolicTransf(YM, pidSolic, 1))
 
 	set TipoTransacao  = $$$VARSESSolicTransfTransferenciaouConsumo(objSolicTransf)
 
	if TipoTransacao = "TRANSFERENCIA" {	
		set $$$INTFRRequisitionNumber(objTransfer)	   = "TRANSFERENCIA"
 		set YPARA = "TRANSFERENCIA"
	}
	elseif TipoTransacao = "CONSUMO" {
		set $$$INTFRRequisitionNumber(objTransfer)	   = "CONSUMOSETOR"
		set YPARA = "CONSUMOSETOR"
	}
	else {
		$$$StartScript()
		write "alert('"_$$$Text("MED01189")_"'); "  ;Erro ao tentar efetivar esta solicitação. Não foi possível determinar o tipo de solicitação. ;use text macro;15-Sep-2008
		$$$EndScript()
		quit
	}
 
	// Andre, 02/10/2007: If a transfer already exists for this requisition, opens it:
	// set idTransfer = $order(^INTFRs(0, 11, $$^WWWUMLAU(pidSolic, 1), ""))
	// Andre, 04/10/2007: Now, if there is a processed transfer opens it. If not, opens
	// the first one related to the requisition.
	set blnUsedInAProcessedTransfer = 0
	
	// Procurar por uma TR aberta.
	set idxSolic = $$$Index(pidSolic)
	$$$Order4(^INTFRs,YM,11,idxSolic,idTransfer)
		If +$$$INTFRStatus($get(^INTFR(YM,idTransfer,1))) = 0 { // mudei >=1 para =0 Rubens
			quit
		}
	$$$End
 
	if (idTransfer '= "") {
 
		// Andre, 03/10/2007:
		//s ^AndreDebug("ListaSolic",+$o(^AndreDebug("ListaSolic",""),-1)+1)="Botão Efetivar1. idTransfer = "_idTransfer_", YPARA="_YPARA
	    /*
	    set link= YAKTION_"EP=WWWFORM&YFORM=INTFR&YUCI="_YUCI_"&YBED="_YBED_"&YM="_YM_"&YUSER="_YUSER_"&YBACK="_YBACK_",VARSESSolicTransf"_"&YPARA="_YPARA_"&YKEY="_idTransfer
	    $$$StartScript()
		write "window.location = '"_link_"'"
		$$$EndScript()
		*/
		do GoToForm^COMUtilForm("INTFR", idTransfer, 1, YPARA)
		
		quit
	}
	// Andre - End.
 
 	set idRecLocation  = $$$VARSESSolicTransfLocalRecebedor(objSolicTransf)
 	set idSendLocation = $$$VARSESSolicTransfLocalAbastecedor(objSolicTransf)
 
	set $$$INTFRTransferDate(objTransfer)      = $horolog
	set $$$INTFRTransferType(objTransfer)      = "Remote"
	set $$$INTFRSendingLocation(objTransfer)   = idSendLocation
	set $$$INTFRReceivingLocation(objTransfer) = idRecLocation
	set $$$INTFRDispatch(objTransfer)		   = $order(^INDRPUMLKWs(0, 1, idRecLocation, ""))
	set $$$INTFRDueDate(objTransfer)		   = $horolog
	set $$$INTFRStatus(objTransfer)			   = 0
	
	set $$$INTFRFREE15(objTransfer)			   = 1
	set $$$INTFRFREE7(objTransfer)			   = pidSolic
	set $$$INTFRFREE4(objTransfer)			   = $$$VARSESSolicTransfSetor(objSolicTransf)
	set $$$INTFRFREE5(objTransfer) = $$$VARSESSolicTransfGrupoMateriais(objSolicTransf)
	
	set idTransfer = $$$NextKey("INTFR")
	set strStatus  = $$$Save("INTFR",idTransfer,objTransfer,$$$YES)
 	//set YPARA = $$$INTFRFREE1(objTransfer)
 	
	// Andre, 03/10/2007:
	//s ^AndreDebug("ListaSolic",+$o(^AndreDebug("ListaSolic",""),-1)+1)="Botão Efetivar2. idTransfer = "_idTransfer_", YPARA="_YPARA
	/*
    set link= YAKTION_"EP=WWWFORM&YFORM=INTFR&YUCI="_YUCI_"&YBED="_YBED_"&YM="_YM_"&YUSER="_YUSER_"&YBACK="_YBACK_",VARSESSolicTransf"_"&YPARA="_YPARA_"&YKEY="_idTransfer
    $$$StartScript()
	write "window.location = '"_link_"'"
	$$$EndScript()
	*/
	do GoToForm^COMUtilForm("INTFR", idTransfer, 1, YPARA)
 
	quit
	
CanCreateTransfer(pidSolic)
	// This routine enables or disables the "Efetivar" (Transfer) button, 
	// depending on whether the current location is the supplying location of
	// the requisition.
	
	new objSolicTransf, idTransfer
 
	if ($get(pidSolic) = "") {
		set YQ = $$$YQDisable("")
		quit
	}
 
	set objSolicTransf = $get(^VARSESSolicTransf(YM, pidSolic, 1))
 
 	// Andre, 07/11/2007: Avoid transferring if not in correct status:
 
 	if $$$VARSESSolicTransfProcessado(objSolicTransf) = 0 {
		set YQ = $$$YQDisable($$$Text("MED01190"))  ;Essa solicitação ainda não foi processada ;use text macro;15-Sep-2008
		quit
 	}
	elseif $$$VARSESSolicTransfParcialmenteAtendido(objSolicTransf) = $$$SolicDocumentoRejeitado {
	 	set YQ = $$$YQDisable($$$Text("MED01191"))  ;Essa solicitação não pode ser efetivada pois foi rejeitada pelo abastecedor ;use text macro;15-Sep-2008
	 	quit
	}
 	elseif $$$VARSESSolicTransfParcialmenteAtendido(objSolicTransf) = $$$SolicEncerrada {
	 	set YQ = $$$YQDisable($$$Text("MED01192"))  ;Essa solicitação não pode ser efetivada pois já está encerrada ;use text macro;15-Sep-2008
	 	quit
	 	
	} else {
		// Andre, 02/10/2007: Checking if current location is the supplying location of the requisition:
		if ($$$VARSESSolicTransfLocalAbastecedor(objSolicTransf) '= YLOCATION) {
			// If current location is NOT the supplying location:
	 
			set idTransfer = $order(^INTFRs(YM, 11, $$$Index(pidSolic), "")) // Index 11 for field 26 - No. Solicitação
			if (idTransfer '= "") {
				// If there is an INTFR for this VARSESSolicTransf:
	 
				set YQ = $$$YQEnable
			}
			else {
				// If there is NO INTFR for this VARSESSolicTransf:
	 
				set YQ = $$$YQDisable($$$Text("MED01193"))  ;Seu local não é o local abastecedor e esta solicitação ainda não foi efetivada ;use text macro;15-Sep-2008
			}
	 
		}
		else {
			// If current location IS the supplying location:
			// 
			set YQ = $$$YQEnable
		}
	}
 
	quit
	
CanCreateTransferFromSolic(pidSolic)
	new blnUsedInATransfer, blnUserIsSendingLocation, objSolicTransf, idTransf, idSolicTra]]><![CDATA[nslated
 
	quit:pidSolic="" $$$NO
 
 	set blnUsedInAProcessedTransfer       = 1
	set linha=""
	set linha=$order(^VARSESSolicTransfLinha(YM,pidSolic,linha))
	while linha'="" {
		if $piece($get(^VARSESSolicTransfLinha(YM,pidSolic,linha,1)),Y,11)'=1 set blnUsedInAProcessedTransfer       = 0
		set linha=$order(^VARSESSolicTransfLinha(YM,pidSolic,linha))
	}
	//set objSolicTransf = $get(^VARSESSolicTransf(YM, pidSolic, 1))
 
	//set blnUserIsSendingLocation = $$$VARSESSolicTransfLocalAbastecedor(objSolicTransf) = YLOCATION
 
	//set blnUsedInATransfer       = $data(^INTFRs(0, 11, $$^WWWUMLAU(pidSolic, 1)))
	
	/*set idSolicTranslated = $$^WWWUMLAU(pidSolic, 1) Rubens -> comentei para realizar multiplas transferências
	$$$Order4(^INTFRs,YM,11,idSolicTranslated,idTransf)
		If +$$$INTFRStatus($get(^INTFR(YM,idTransf,1))) >= 1 {
			set blnUsedInAProcessedTransfer = 1
			//quit
		}
	$$$End
	*/
	// quit 'blnUsedInATransfer && blnUserIsSendingLocation
	quit 'blnUsedInAProcessedTransfer
	
OnAfterPrimaryKey()
 
 	new idAbastecedor
 
	// A variável LOC é usada como chave na relação do campo de Setor.
	// Se o registro já estiver criado, queremos que a relação seja feita a partir do Location selecionado, caso contrário,
	// usar o YLOCATION.
	if YFELD = "" {
		set LOC = YLOCATION
		
	} else {
		set LOC = $$$VARSESSolicTransfLocalRecebedor(YFELD)
	}
	
 	
 	set YOPTION1 = $$GetVisaoSolicitanteAbastecedor(YFELD)
 
	do DefinirYOPTION()
 	do DefinirAbastecedor()
 	// Listando os abastecedores.
	do ListLocalAbastecedor^VARSESSolicTransf(YFELD)
	
	quit
	
GetVisaoSolicitanteAbastecedor(pobjSolic, idSolic)
 
	new idSolicAbastecedor, idSolicSolicitante, idSolicStatus, intVisao
	
	// Se o objeto não foi passado, instanciar ele a partir do id.
	if '$data(pobjSolic) {
		set pobjSolic = $get(^VARSESSolicTransf(YM, idSolic, 1))
	}
	
	set idSolicStatus	   = $$$VARSESSolicTransfParcialmenteAtendido(pobjSolic)
	set idSolicSolicitante = $$$VARSESSolicTransfLocalRecebedor(pobjSolic)
	set idSolicAbastecedor = $$$VARSESSolicTransfLocalAbastecedor(pobjSolic)
	
	// Essa variável YOPTION1 está sendo usada na definição dos campos 'Cancelar' e 'Rejeitar'
	// e dos botões 'Cancelar' e 'Rejeitar' do VARSESSolicTransfLinha.
	// Esses componentes só estarão visíveis se o status for 'Aguardando Atendimento' e 
	// para o usuário do local específico. Usuário abastecedor vê campo e botão 'Rejeitar' e
	// usuário solicitante vê campo e botão 'Cancelar'.
	set intVisao = $select(idSolicStatus '= 1: $$$VISAOINDISPONIVEL, ; 1 = Aguardando Atendimento
						   idSolicSolicitante = YLOCATION: $$$VISAOSOLICITANTE,
						   idSolicAbastecedor = YLOCATION: $$$VISAOABASTECEDOR,
						   $$$YES: $$$VISAOEXTERNA)
	quit intVisao
	
PickLinesAndReject(pstrMotivo)
 
	new arrSolicLinhas, idSolic, idSolicLinha, objSolicLinha, fltQuantidadeRejeitada
 
	do GetGridContents^COMGridEdit31Interface(.arrSolicLinhas, "VARSESSolicTransfLinha")
 
	// Verificar quais linhas foram marcadas para serem rejeitadas.
	$$$Order1(arrSolicLinhas,idSolic)
		$$$Order2(arrSolicLinhas,idSolic,idSolicLinha)
	
			set objSolicLinha = arrSolicLinhas(idSolic, idSolicLinha)
			if $$$VARSESSolicTransfLinhaRejeitar(objSolicLinha) {
 
				set arrSolicLinhas(idSolic,idSolicLinha) = $$PrepareLineToReject(idSolic, idSolicLinha, objSolicLinha, pstrMotivo)
			}
	
		$$$End
	$$$End
 
	do SetGridContents^COMGridEdit31Interface(.arrSolicLinhas,, "VARSESSolicTransfLinha")
 
	&js<
		alert('#($$$Text("MED01194"))#!');
		SAVENOW();
	>  ;Itens rejeitados com sucesso ;use text macro;15-Sep-2008
 
	quit
	
CanRejectLines()
 
	new arrSolicLinhas, idSolic, idSolicLinha, objSolicLinha, fltQuantidadeCancelada,
	    blnLinhaSelecionada
 
	set blnLinhaSelecionada = $$$NO
	do GetGridContents^COMGridEdit31Interface(.arrSolicLinhas, "VARSESSolicTransfLinha")
	
	// Verificar se alguma linha foi checada para ser rejeitada.
	$$$Order1(arrSolicLinhas,idSolic)
		$$$Order2(arrSolicLinhas,idSolic,idSolicLinha)
	
			set objSolicLinha = arrSolicLinhas(idSolic, idSolicLinha)
			if $$$VARSESSolicTransfLinhaRejeitar(objSolicLinha) {
				set blnLinhaSelecionada = $$$YES
				quit
			}
					
		$$$End
	$$$End
 
 	// Se nenhuma linha foi selecionada, avisar o usuário.
	if 'blnLinhaSelecionada {
		&js<
			alert('#($$$Text("MED01195"))#.\n#($$$Text("MED01196"))#.');
		>    ;Nehuma linha foi selecionada para ser rejeitada. Por favor, selecione a(s) linha(s) para rejeitar. ;use text macro;15-Sep-2008
	} else {
		&js<
		    var motivo = iePrompt('#($$$Text("MED01197"))#.');		
			if (motivo != false) {
				CallBackNow("PickLinesAndReject^VARSESSolicTransf", motivo);
			}
		>  ;Por favor insira o motivo da rejeição das linhas selecionadas ;use text macro;15-Sep-2008
	}
 
	quit
	
CanCancelLines()
	new arrSolicLinhas, idSolic, idSolicLinha, objSolicLinha, fltQuantidadeCancelada,
	    blnLinhaSelecionada
 
	set blnLinhaSelecionada = $$$NO
	do GetGridContents^COMGridEdit31Interface(.arrSolicLinhas, "VARSESSolicTransfLinha")
	
	// Verificar se alguma linha foi checada para ser cancelada.
	$$$Order1(arrSolicLinhas,idSolic)
		$$$Order2(arrSolicLinhas,idSolic,idSolicLinha)
	
			set objSolicLinha = arrSolicLinhas(idSolic, idSolicLinha)
			if $$$VARSESSolicTransfLinhaCancelar(objSolicLinha) {
				set blnLinhaSelecionada = $$$YES
				quit
			}
					
		$$$End
	$$$End
 
 	// Se nenhuma linha foi selecionada, avisar o usuário.
	if 'blnLinhaSelecionada {
		&js<
			alert('#($$$Text("MED01198"))#.\n#($$$Text("MED01199"))#.');
		>  ;Nehuma linha foi selecionada para ser cancelada. Por favor, selecione a(s) linha(s) para cancelar ;use text macro;15-Sep-2008
	} else {
		&js<
		    var motivo = iePrompt('#($$$Text("MED01200"))#.');		
			if (motivo != false) {
				CallBackNow("PickLinesAndCancel^VARSESSolicTransf", motivo);
			}
		>  ;Por favor insira o motivo do cancelamento das linhas selecionadas ;use text macro;15-Sep-2008
	}
 
	quit
	
PickLinesAndCancel(pstrMotivo)
 
	new arrSolicLinhas, idSolic, idSolicLinha, objSolicLinha
 
	do GetGridContents^COMGridEdit31Interface(.arrSolicLinhas, "VARSESSolicTransfLinha")
 
	// Verificar quais linhas foram marcadas para serem canceladas.
	$$$Order1(arrSolicLinhas,idSolic)
		$$$Order2(arrSolicLinhas,idSolic,idSolicLinha)
	
			set objSolicLinha = arrSolicLinhas(idSolic, idSolicLinha)
			if $$$VARSESSolicTransfLinhaCancelar(objSolicLinha) {
 
				set arrSolicLinhas(idSolic,idSolicLinha) = $$PrepareLineToCancel(idSolic, idSolicLinha, objSolicLinha, pstrMotivo)
			}
	
		$$$End
	$$$End
 
	do SetGridContents^COMGridEdit31Interface(.arrSolicLinhas,, "VARSESSolicTransfLinha")
 
	&js<
		alert('#($$$Text("MED01201"))#!');
		SAVENOW();
	>  ;Itens cancelados com sucesso ;use text macro;15-Sep-2008
 
	quit
	
PrepareLineToReject(pidSolic="", pidSolicLinha="", pobjSolicLinha, pstrMotivo="")
 
	new fltQuantidadeRejeitada
 
	set fltQuantidadeRejeitada = $$$VARSESSolicTransfLinhaQuantidadeRejeitada(pobjSolicLinha)
	set fltQuantidadeRejeitada = fltQuantidadeRejeitada + $$GetQuantidadeAAtender^VARSESSolicTransfLinha(pobjSolicLinha)
	
	set $$$VARSESSolicTransfLinhaQuantidadeRejeitada(pobjSolicLinha)  	   = fltQuantidadeRejeitada
	set $$$VARSESSolicTransfLinhaRejeitar(pobjSolicLinha) 	          	   = $$$NO
	set $$$VARSESSolicTransfLinhaDataCancelamentoRejeicao(pobjSolicLinha)  = $horolog
	set $$$VARSESSolicTransfLinhaUsuarioCancelamentoRejeic(pobjSolicLinha) = YBED
	
	if pstrMotivo '= "" {
		// Não posso atualizar o motivo da mesma forma que atualizo os outros campos, pois
		// o motivo é um campo hidden e não funciona com o WWWDATEN.
		do UpdateMotivoRejeição^VARSESSolicTransfLinha(idSolic, idSolicLinha, pstrMotivo)
		do UpdateDataCancelamentoRejeicao^VARSESSolicTransfLinha(pidSolic, pidSolicLinha, $horolog)
		do UpdateUsuarioCancelamentoRejeicao^VARSESSolicTransfLinha(pidSolic, pidSolicLinha, YBED)
	}
 
	quit pobjSolicLinha
	
PrepareLineToCancel(pidSolic, pidSolicLinha, pobjSolicLinha, pstrMotivo="")
	
	new fltQuantidadeCancelada
	
	set fltQuantidadeCancelada = $$$VARSESSolicTransfLinhaQuantidadeCancelada(pobjSolicLinha)
	set fltQuantidadeCancelada = fltQuantidadeCancelada + $$GetQuantidadeAAtender^VARSESSolicTransfLinha(pobjSolicLinha)
	
	set $$$VARSESSolicTransfLinhaQuantidadeCancelada(pobjSolicLinha)       = fltQuantidadeCancelada
	set $$$VARSESSolicTransfLinhaCancelar(pobjSolicLinha) 	               = $$$NO
	set $$$VARSESSolicTransfLinhaDataCancelamentoRejeicao(pobjSolicLinha)  = $horolog
	set $$$VARSESSolicTransfLinhaUsuarioCancelamentoRejeic(pobjSolicLinha) = YBED
	
	if pstrMotivo '= "" {
		// Não posso atualizar o motivo da mesma forma que atualizo os outros campos, pois
		// o motivo é um campo hidden e não funciona com o WWWDATEN.
		do UpdateMotivoCancelamento^VARSESSolicTransfLinha(pidSolic, pidSolicLinha, pstrMotivo)
		do UpdateDataCancelamentoRejeicao^VARSESSolicTransfLinha(pidSolic, pidSolicLinha, $horolog)
		do UpdateUsuarioCancelamentoRejeicao^VARSESSolicTransfLinha(pidSolic, pidSolicLinha, YBED)
	}
	
	quit pobjSolicLinha
	
OnBeforeSaveHook()
 
	new idStatus
	
	;do RegerarStatus^VARSESSolicTransfLinha(YKEY, YFELD)
	set idStatus = $$CalcularStatus(YKEY, YFELD)
	set $$$VARSESSolicTransfParcialmenteAtendido(YFELD) = idStatus
	
	quit $$$OK
 
CalcularStatus(idSolic, objSolic)
 
	new idSolicStatus, blnProcessado, idStatus, idSolicLinha, arrLinhasAguardandoAtendimento,
		arrLinhasEncerradas, arrLinhasTotalmenteRejeitadas, arrLinhasParcialmenteRejeitadas,
		objSolicLinha, idStatusLinha
	;for i=1:1:100 hang 1
	set blnProcessado = $$$VARSESSolicTransfProcessado(objSolic)
	
	// Se tiver sido processado avaliar as linhas individualmente, senão como 0- Em Aberto.
	if blnProcessado {
		
		// Separando as linhas de acordo com o seu status.
		$$$Order3(^VARSESSolicTransfLinha,YM,idSolic,idSolicLinha)
		
			set objSolicLinha = $get(^VARSESSolicTransfLinha(YM, idSolic, idSolicLinha, 1))
			set idStatusLinha = $$$VARSESSolicTransfLinhaStatus1(objSolicLinha)
			
			// Se a linha está aguardando atendimento.
			if idStatusLinha = $$$SolicLinhaAguardandoAtendimento {
				set arrLinhasAguardandoAtendimento(idSolicLinha) = objSolicLinha
			
			// Se a linha foi encerrada
			} elseif idStatusLinha = $$$SolicLinhaEncerrada {
				set arrLinhasEncerradas(idSolicLinha) = objSolicLinha
			
			// Se a linha teve alguma rejeição.
			} elseif idStatusLinha = $$$SolicLinhaRejeitada {
				
				// Verificar se ela foi totalmente rejeitada, ou se teve recebimento pra ela.
				if $$$VARSESSolicTransfLinhaQuantTransf(objSolicLinha) > 0 {
					set arrLinhasParcialmenteRejeitadas(idSolicLinha) = objSolicLinha
				} else {
					set arrLinhasTotalmenteRejeitadas(idSolicLinha) = objSolicLinha
				}
			}			
		$$$End
		
		// Se pelo menos 1 linha ainda é passível de atendimento o status será Aguardando
		// Atendimento.
		if $data(arrLinhasAguardandoAtendimento) {
			set idStatus = $$$SolicAguardandoAtendimento
			
		// Se houve linha encerrada ou parcialmente rejeitada.
		} elseif $data(arrLinhasEncerradas) || $data(arrLinhasParcialmenteRejeitadas) {
			set idStatus = $$$SolicEncerrada
			
		// Se todas as linha forem parcialmente rejeitadas.			
		} elseif $data(arrLinhasTotalmenteRejeitadas) {
			set idStatus = $$$SolicDocumentoRejeitado
		
		// Se nenhum desses for o caso, quer dizer que acabamos de processar o documento.
		} else {
			set idStatus = $$$SolicAguardandoAtendimento
		} 
		
	} else {
		set idStatus = $$$SolicEmAberto
	}
 
	quit idStatus
 
PrintJS(pobjForm)
	
	new idClass
	set idClass   = $piece(pobjForm, Y, 11)
	set strP1Name = "Y"_idClass_"P1"
	
	write !,"<script language=""javascript"">"
	
	&js<
		var solicitacao = document.#(YHTMFORM)#.#(strP1Name)#.value;
		function cancelDocument() {
		    var motivo = iePrompt('#($$$Text("MED01202"))#.');  //;Por favor insira o motivo do cancelamento da solicitação ;use text macro;15-Sep-2008		
			if (motivo != false) {
				CallBackNow("CancelDocument^VARSESSolicTransf", solicitacao, motivo);
			}
		}
 
		function rejectDocument() {
		    var motivo = iePrompt('#($$$Text("MED01203"))#.');  //;Por favor insira o motivo da rejeição da solicitação ;use text macro;15-Sep-2008		
			if (motivo != false) {
				CallBackNow("RejectDocument^VARSESSolicTransf", solicitacao, motivo);
			}
		}
	>
	write !,"</script>"
 
	quit
	
RejectDocument(pidSolic, pstrMotivo)
 
	new idSolicLinha, objSolicLinha, strStatus, objSolic
 
	$$$Order3(^VARSESSolicTransfLinha,YM,pidSolic,idSolicLinha)
	
		set objSolicLinha = $get(^VARSESSolicTransfLinha(YM, pidSolic, idSolicLinha, 1))
		set objSolicLinha = $$PrepareLineToReject(pidSolic, idSolicLinha, objSolicLinha)
		if $$$VARSESSolicTransfLinhaMotivodaRejeicao(objSolicLinha) = "" {
			set $$$VARSESSolicTransfLinhaMotivodaRejeicao(objSolicLinha) = pstrMotivo
		}
		set strStatus 	  = $$$Save("VARSESSolicTransfLinha",pidSolic_$$$COMMA_idSolicLinha,objSolicLinha,$$$YES)
	
	$$$End
 
	set objSolic = $get(^VARSESSolicTransf(YM, pidSolic, 1))
	
	set $$$VARSESSolicTransfMotivoRejeicao(objSolic) 			= pstrMotivo
	set $$$VARSESSolicTransfDataCancelamentoRejeicao(objSolic)  = $horolog
	set $$$VARSESSolicTransfUsuarioCancelamentoRejeic(objSolic) = YBED
	
	set strStatus = $$$Save("VARSESSolicTransf",pidSolic,objSolic,$$$YES)
 
	&js<
		alert('#($$$Text("MED01204"))#!');
		SAVENOW();
	>  ;Solicitação rejeitada com sucesso ;use text macro;15-Sep-2008
 
	quit
	
CancelDocument(pidSolic, pstrMotivo)
 
	new idSolicLinha, objSolicLinha, strStatus, objSolic
 
	$$$Order3(^VARSESSolicTransfLinha,YM,pidSolic,idSolicLinha)
	
		set objSolicLinha = $get(^VARSESSolicTransfLinha(YM, pidSolic, idSolicLinha, 1))
		set objSolicLinha = $$PrepareLineToCancel(pidSolic, idSolicLinha, objSolicLinha)
		if $$$VARSESSolicTransfLinhaMotivodoCancelamento(objSolicLinha) = "" {
			set $$$VARSESSolicTransfLinhaMotivodoCancelamento(objSolicLinha) = pstrMotivo
		}
		set strStatus 	  = $$$Save("VARSESSolicTransfLinha",pidSolic_$$$COMMA_idSolicLinha,objSolicLinha,$$$YES)
	
	$$$End
 
	set objSolic = $get(^VARSESSolicTransf(YM, pidSolic, 1))
	set $$$VARSESSolicTransfMotivoCancelamento(objSolic)        = pstrMotivo
	set $$$VARSESSolicTransfDataCancelamentoRejeicao(objSolic)  = $horolog
	set $$$VARSESSolicTransfUsuarioCancelamentoRejeic(objSolic) = YBED
	
	set strStatus = $$$Save("VARSESSolicTransf",pidSolic,objSolic,$$$YES)
 
	//   alert("#($$$Text("MED01205"))#!");
	&js<
	   SAVENOW();
	>  ;Solicitação cancelada com sucesso ;use text macro;15-Sep-2008
 
	quit
 
PrintLogs(pidSolic, pobjSolic)
	
	new objSolic, strMotivoCancelamento, strMotivoRejeicao, idItem, strDescricaoItem,
		blnHeader, strData, idUsuario, strUsuario, objUsuario
	
	quit:(pobjSolic = "")
	
	set blnHeader = $$$NO
	
	set strMotivoRejeicao = $$$VARSESSolicTransfMotivoRejeicao(pobjSolic)
	set strData			  = $$^WWWDATE($$$VARSESSolicTransfDataCancelamentoRejeicao(pobjSolic))
	set idUsuario		  = $$$VARSESSolicTransfUsuarioCancelamentoRejeic(pobjSolic)
	if idUsuario '= "" {
		set objUsuario = $get(^WWW013(YM, idUsuario, 1))
		set strUsuario		  = idUsuario _ " - " _ $piece(objUsuario, Y, 1)
	}
 
	if strMotivoRejeicao '= "" {
		set blnHeader = $$$YES
		
		do PrintHeader()
		do PrintLogRow($$$Text("MED01206"), pidSolic, strMotivoRejeicao, strData, strUsuario)  ;Documento Rejeitado ;use text macro;15-Sep-2008
	}
	
	set strMotivoCancelamento = $$$VARSESSolicTransfMotivoCancelamento(pobjSolic)
	if strMotivoCancelamento '= "" {
		set blnHeader = $$$YES
 
		do PrintHeader()
		do PrintLogRow($$$Text("MED01207"), pidSolic, strMotivoCancelamento, strData, strUsuario)  ;Documento Cancelado ;use text macro;15-Sep-2008
	}
 
	do PrintLogs^VARSESSolicTransfLinha(pYKEY, blnHeader)
	quit 
	
PrintHeader()
 
	new lstHeader
 	set lstHeader = ""
  	;set lstHeader = lstHeader_$listbuild("Ação","Item/Documento","Motivo","Data","Usuário")
  	set lstHeader = lstHeader_$listbuild($$$Text("MED01208"),$$$Text("MED01209"),$$$Text("MED01210"),$$$Text("MED01211"),$$$Text("MED01212"))  ;use text macro;15-Sep-2008
	do Start^COMTable(lstHeader)
	
	quit
	
PrintLogRow(pstrAction, pstrDescription, pstrReason, pstrDate, pstrUser)
 
	do NewLine^COMTable()
	do InsertCell^COMTable(pstrAction)
	do InsertCell^COMTable(pstrDescription)
	do InsertCell^COMTable(pstrReason)
	do InsertCell^COMTable(pstrDate)
	do InsertCell^COMTable(pstrUser)
	do EndLine^COMTable()	
 
	quit
	
RecalcularStatus(pidSolic)
 
	set objSolic = $get(^VARSESSolicTransf(YM, pidSolic, 1))
	set $$$VARSESSolicTransfParcialmenteAtendido(objSolic) = $$CalcularStatus(pidSolic, objSolic)
	set strStatus = $$$Save("VARSESSolicTransf",pidSolic,objSolic,$$$YES)
 
	quit
	
AtualizarStatusSolicELinhas()
 
	$$$VAR
	
	new idSolic, objSolic
	
	$$$Order2(^VARSESSolicTransf,YM,idSolic)
 
		set objSolic = $get(^VARSESSolicTransf(YM, idSolic, 1))
		do RegerarStatus^VARSESSolicTransfLinha(idSolic, objSolic)
		do RecalcularStatus(idSolic)
	
	$$$End
 
	quit
	
CountSolic()
 
	$$$VAR
	
	new idSolic, intCount
	
	set intCount = 0
	$$$Order2(^VARSESSolicTransf,YM,idSolic)
	
	set intCount = intCount + 1
	
	$$$End
	
	quit intCount
	
CountSolicComLinha()
 
	$$$VAR
	
	new idSolic, intCount
	
	set intCount = 0
	$$$Order2(^VARSESSolicTransf,YM,idSolic)
	
		set:($order(^VARSESSolicTransfLinha(YM,idSolic,"")) = "") intCount = intCount + 1
	
	$$$End
	
	quit intCount
	
CountSolicMisc()
 
	$$$VAR
	
	new idSolic, intCount, objSolic
	
	set intCount = 0
	$$$Order2(^VARSESSolicTransf,YM,idSolic)
	
		set objSolic = $get(^VARSESSolicTransf(YM, idSolic, 1))
		
		;set:($$$VA;RSESSolicTransfFirmado(objSolic) = "") intCount = intCount + 1
		set:($$$VARSESSolicTransfFirmado(objSolic) = 1) intCount = intCount + 1
		;set:($$$VARSESSolicTransfFirmado(objSolic) = 2) intCount = intCount + 1
		;set:($$$VARSESSolicTransfFirmado(objSolic) = 3) intCount = intCount + 1
	
	$$$End
	
	quit intCount
	
 
ChecarQuantidade(pidSolicTransf)
 
	new Linha, objLinha, Quantidade, TemVazio
	
	set Linha    = ""
	set TemVazio = $$$NO
	
	for {
   		set Linha = $order(^VARSESSolicTransfLinha(YM,pidSolicTransf,Linha))
   		quit:(Linha = "")
   		
   		set objLinha = $get(^VARSESSolicTransfLinha(YM,pidSolicTransf,Linha,1)) 
   		
   		set Quantidade = $piece(objLinha,Y,2)
   		
   		if +Quantidade = 0 {
	   		set TemVazio = $$$YES
	   		quit
	   	}
 
	}
		
	quit TemVazio
	
	
CanDelete(pYKEY)
	;-------------------------------------------------------------------------------
	; Only allow to delete a request (solicitação) if the record has not been 
	; processed yet.
	;
	; History:
	; 16-May-2008	Gustavo Fiuza		Created
	;-------------------------------------------------------------------------------
	
	if (YKEY '= "") {
		new status
		set status = $piece($get(^VARSESSolicTransf(YM,pYKEY,1)),Y,21)
	
		if status '= 0 {	
			set Q = $$$YES
		}
	}
	
	quit
]]></Routine>
</Export>