<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESAlertaRegionaisLinha" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARSESAlertaRegionaisLinha

#include COMSYS
#include COMConst
#include COMView
#include INConst
#include VARConst
 

	quit
 
OnBeforeFormat(pstrYFIELDNAME,pstrText,pobjLine)
	new idField, idKey, idLocation, idItem, blnFilterEstoqueAcimaPR, blnFilterEstoqueProximoPR, 
		blnFilterEstoqueAbaixoPRcomEP, blnFilterEstoqueAbaixoPRsemEP, blnFilterEstoqueAcimaEM,cobertura
	
	new objUserPreferences, blnCorAcompanhamCompras
		
	set objUserPreferences = $get(^VARSESPreferenciasUsuario(YM,YBED,1))	
	
	set blnCorAcompanhamCompras = 0
	set blnCorAcompanhamCompras = $piece(objUserPreferences,Y,5)
	
	if (blnCorAcompanhamCompras = 1) {
		$$$GRIDSplitKey(pstrYFIELDNAME,intRow,intCol)
		set idField = $$$GetClassField(YFORM,intCol)
		if intCol=20 {
			q
		}
		if intCol=21 {
			q
		}
		if intCol=28 {
			q
		}
		//$$$Alert(intCol)
		set idKey      = $$ReferenceKey^COMGridEdit31Interface(YFORM,intRow)	
		set idLocation = $$$KEY1(idKey)
		set idItem     = $$$KEY2(idKey)
 		set cobertura=$$GetCoberturaEstoque^VARSESAlertaRegionaisLinha(idItem,idLocation)
	 	
	 	set blnFilterEstoqueAcimaPR=$$$NO
	 	set blnFilterEstoqueProximoPR=$$$NO
	 	set blnFilterEstoqueAbaixoPRsemEP=$$$NO
	 	set blnFilterEstoqueAcimaEM=$$$NO
	 	
	 	if cobertura<15 set blnFilterEstoqueAbaixoPRsemEP=$$$YES //Vermelho
	 	if ((cobertura>=15) && (cobertura<30)) set blnFilterEstoqueProximoPR=$$$YES //Amarelo	 	
	 	if ((cobertura>=30) && (cobertura<45)) set blnFilterEstoqueAcimaPR=$$$YES //Verde
	 	if cobertura>=45 set blnFilterEstoqueAcimaEM=$$$YES //Azul
	 	
	 	 //Filter Estoque Acima PR - VERDE		 
		if (blnFilterEstoqueAcimaPR = $$$YES) {
			set YBACKGROUNDCOLOR = "#92d39e"
			quit
		}
		
		//Filter Estoque Proximo PR - Amarelo
	 	//set blnFilterEstoqueProximoPR = $$FilterEstoqueProximoPR^VARSESAlertaRegionaisUI(idItem,idLocation)
	 	if (blnFilterEstoqueProximoPR = $$$YES) {
		 	set YBACKGROUNDCOLOR = "#f3f2b5"
		 	quit
	 	}
	 	/*
	 	//Filter Estoque Abaixo PR com EP - Laranja		
		set blnFilterEstoqueAbaixoPRcomEP = $$FilterEstoqueAbaixoPRcomEP^VARSESAlertaRegionaisUI(idItem,idLocation)
		if (blnFilterEstoqueAbaixoPRcomEP = $$$YES) {
			set YBACKGROUNDCOLOR = "#f8d08b"
			quit
		}
		*/
		//Filter Estoque Abaixo PR sem EP - Vermelho		
		//set blnFilterEstoqueAbaixoPRsemEP = $$FilterEstoqueAbaixoPRsemEP^VARSESAlertaRegionaisUI(idItem,idLocation)
		if (blnFilterEstoqueAbaixoPRsemEP = $$$YES) {
			set YBACKGROUNDCOLOR = "#e94848"
			quit
		}
		
		//Filter Estoque Acima EM - Azul
		//set blnFilterEstoqueAcimaEM = $$FilterEstoqueAcimaEM^VARSESAlertaRegionaisUI(idItem,idLocation)
		if (blnFilterEstoqueAcimaEM = $$$YES) {
			set YBACKGROUNDCOLOR = "#b5c1d7"
			quit
		}
	}
 
	quit
 
 
OnBlur(pintCol="",pintRow="",pYKEY="",pYFELD="")
	new strStatus
	if $data(^VARSESAlertaRegionaisLinha(YM,$$$KEY1(pYKEY),$$$KEY2(pYKEY),1)) {
		set strStatus=$$$Save("VARSESAlertaRegionaisLinha",pYKEY,pYFELD,1)
	} else {
		set strStatus=$$$MakeStatus("Salvo não foi possível")
	}
	if '$$$ISOK(strStatus) {
		write "alert('Salvo não foi possível');"
	}
	quit
 
GetItemGroup(pidItem)
	;Pega somente o grupo
	;XXYY: XX=grupo, YY=sub-grupo 
	quit $EXTRACT($$GetItemGroupSubGroup(pidItem),1,2)
 
GetItemSubGroup(pidItem)
	;Pega somente o sub grupo
	new idGrupoSubgrupo
	
	;XXYY: XX=grupo, YY=sub-grupo 
	set idGrupoSubgrupo=$$GetItemGroupSubGroup(pidItem)
	if ($LENGTH(idGrupoSubgrupo) > 2) {
		quit $EXTRACT(idGrupoSubgrupo,3,4)
	} else {
		 quit "" 
	}
 
GetItemGroupSubGroup(pidItem)
	;Pega o groupo seguido do subgrupo
	; 
	new objItem, idGrupo
	quit:pidItem="" ""
	
	set objItem  = $get(^INART(YM, pidItem, 1))
	
	;XXYY: XX=grupo, YY=sub-grupo
	set idGrupo  = $piece(objItem, Y, 30)
 
	quit idGrupo
	
GetDescricaoItem(pidItem)
 
	new objItem, strDescricaoItem
	quit:pidItem="" ""
 
	set objItem  		 = $get(^INART(YM, pidItem, 1))
	set strDescricaoItem = $piece(objItem, Y, 1)
 
	quit strDescricaoItem
	
GetUnidadeMedida(pidItem)
 
	new objItem, idUnidadeMedida, strDescricaoUnidadeMedida
	quit:pidItem="" ""
 
	set objItem  		 		  = $get(^INART(YM, pidItem, 1))
	quit:objItem="" ""
	set idUnidadeMedida  		  = $piece(objItem, Y, 40)
	set strDescricaoUnidadeMedida = $piece($get(^WWW101(YM, "EINHEIT", SPRACHE, idUnidadeMedida, 1)), Y, 1)
 
 	// --09/03/2008
 	// Mostrar apenas os três primeiros dígitos da Unidade de Medida.
 	set strDescricaoUnidadeMedida = $extract(strDescricaoUnidadeMedida,1,3)
 	// -- 
 
	quit strDescricaoUnidadeMedida
	
GetPadrao(pidItem)
 
	new objItem, idPadrao, strPadrao
	quit:pidItem="" ""
	
	set strPadrao = ""
	set objItem   = $get(^INART(YM, pidItem, 1))
	set idPadrao  = $piece(objItem, Y, 281)
	//set:strPadrao'="" strPadrao = $piece($get(^WWW101(YM, "JA/NEIN", SPRACHE, idPadrao, 1)), Y, 1)
 	if idPadrao=0 set idPadrao=""
	quit idPadrao
	
GetTipoPadrao(pidItem)
 
	new objItem, idPadrao
	quit:pidItem="" ""
	
	set objItem   = $get(^INART(YM, pidItem, 1))
	set idPadrao  = $piece(objItem, Y, 299)
	quit idPadrao	
	
GetDescricaoPadrao(pidItem)
 
	new idPadrao, strPadrao
	
	set idPadrao = $$GetPadrao(pidItem)
 
	if idPadrao = 1 {
		set strPadrao = "Sim"
	} else {
		set strPadrao = "Não"
	}
 
	quit strPadrao
	
GetIndiceCriticidade(pidItem)
 
	new idIndiceCriticidade
	quit:pidItem="" ""
 
	set idIndiceCriticidade = $$getIC^VARSESINReq(pidItem)
 
	quit idIndiceCriticidade
	
GetCurvaValor(pidItem)
 
	new idCurvaValor
	quit:pidItem="" ""
 
	set idCurvaValor = $$getABC^VARSESINReq(pidItem)
 
	quit idCurvaValor
	
GetPrecoUltimaCompra(pidItem)
 
 	;quit ""
	new curPrecoUltimaCompra, objCompany, idMoeda, objMoeda, strSymbol, blnSymbolOnTheRight,
		strUltimaCompra
	
	quit:pidItem="" ""
 
 	set strUltimaCompra 	 = ""
	set curPrecoUltimaCompra = $$^WWWTR(0, 8, $$getPrecoUltimaCompra^VARSESINReq(pidItem))
 
	set objCompany 		     = $get(^WWW012(0, YM, 1))
	set idMoeda    		     = $$$WWW012StandardCurrency(objCompany)
 	set objMoeda   			 = $get(^WWWWAE(0, idMoeda, 1))
 	set strSymbol  			 = $$$WWWWAESymbol(objMoeda)
 	set blnSymbolOnTheRight  = $$$WWWWAESymbolOnTheRight(objMoeda)
 
 	
 	if curPrecoUltimaCompra '= "" {
	 	if 'blnSymbolOnTheRight {
		 	set strUltimaCompra = strSymbol_" "_curPrecoUltimaCompra
	
	  	} else { 
	 	 	set strUltimaCompra = curPrecoUltimaCompra_" "_strSymbol
		}
 	}
 	
	quit strUltimaCompra
	
GetMovimentacao(pidItem, pidLocation)
	if (($length(pidItem) = 0) || ($length(pidLocation) = 0)) quit ""
 
	quit $$getMOV^VARSESINReq(pidItem, pidLocation)
 
GetCMML(pidItem, pidLocation)
	new fltCustoCMML
	quit:pidItem="" ""
 	//set fltCustoCMML = $$^WWWTR(0,12,$$getCMMLocal^VARSESINReq(pidItem, pidLocation))
	set fltCustoCMML = $$getCMMLocal^VARSESINReq(pidItem, pidLocation)
	quit fltCustoCMML

GetCMMLLink(pidItem,pidLocation)
	new fltCustoCMML
	quit:pidItem="" ""
 	//set fltCustoCMML = $$^WWWTR(0,12,$$getCMMLocal^VARSESINReq(pidItem, pidLocation))
	set fltCustoCMML = $$getCMMLocal^VARSESINReq(pidItem, pidLocation)
	
	if fltCustoCMML > 0 {
		
		set YKEY = $piece(YKEY,",",2)_",Link,"_pidLocation 
		set fltCustoCMML = "<A HREF='' class=link onClick=""subWindow('"_YAKTION_"EP=WWWFORM&amp;YFORM=VARSESAnaliseCMM"_$$WWWCGI2^WWWCGI($$$YES)_"'); return false;"">"_$$^WWWTR(0,12,fltCustoCMML)_"</A>"
	}
 
	quit fltCustoCMML
	
GetCMMLi(pidItem, pidLocation)
	new fltCustoCMMLi
	quit:pidItem="" ""
 	set fltCustoCMMLi = $$GetCMMLi^VARSESAlertaCMMI(pidLocation, pidItem)
	
	quit fltCustoCMMLi
	
GetConsumoMedioMensalRede(pidItem)
 
	new fltCustoMedioMensalRede
	quit:pidItem="" ""
 
	set fltCustoMedioMensalRede = $$^WWWTR(0,12,$$getCMMRede^VARSESINReq(pidItem))
	
	quit fltCustoMedioMensalRede
	
GetConsumoMedioMensalRedeLink(pidItem)
	;Insere um link para a tela de Análise do Consumo Médio Mensal no campo CMM.
	;O link é inserido apenas quando o CMM for maior que zero.
 
	new strCMMRede
	quit:pidItem="" ""
 
	set strCMMRede = $$^WWWTR(0,12,$$getCMMRede^VARSESINReq(pidItem))
 
	if strCMMRede > 0 {
		set YKEY = $piece(YKEY,",",2)_",Link" ;A string "Link" é pra identificar a origem lá na tela de CMM e tratar as variáveis.
		set strCMMRede = "<A HREF='' class=link onClick=""subWindow('"_YAKTION_"EP=WWWFORM&amp;YFORM=VARSESAnaliseCMM"_$$WWWCGI2^WWWCGI($$$YES)_"'); return false;"">"_$$^WWWTR(0,12,strCMMRede)_"</A>"
	}
	
	quit strCMMRede	
	
GetEstoqueFisicoLocal(pidItem, pidLocation)
 
	new fltEstoqueFisicoLocal	
	quit:pidItem="" ""
 
	set fltEstoqueFisicoLocal = $$getEF^VARSESINReq(pidItem, pidLocation)
 
	quit fltEstoqueFisicoLocal
	
GetEstoqueFisicoRede(pidItem)
 
	new fltEstoqueFisicoRede
	quit:pidItem="" ""
 
	set fltEstoqueFisicoRede = $$getEFR^VARSESINReq(pidItem)
 
	quit fltEstoqueFisicoRede
 
GetEstoqueFisicoRedeLink(pidItem)
	;Insere um link para a tela de Consulta de Estoque por Produto no campo Estoque Físico (Rede).
	;O link é inserido apenas quando o estoque for maior que zero.
	
	new strEstoqueFisicoRede
	quit:pidItem="" ""
 
	set strEstoqueFisicoRede = $$getEFR^VARSESINReq(pidItem)
	
	if strEstoqueFisicoRede > 0 {
		set YKEY = $piece(YKEY,",",2)_",3" ;3 = Ver todos os locais
		set strEstoqueFisicoRede = "<A HREF='' class=link onClick=""subWindow('"_YAKTION_"EP=WWWFORM&amp;YFORM=VARSESConsultaEstoqueItemRegiao"_$$WWWCGI2^WWWCGI($$$YES)_"'); return false;"">"_$$^WWWTR(0,12,strEstoqueFisicoRede)_"</A>"
	}
 
	quit strEstoqueFisicoRede
	
GetEstoqueFisicoNIAB(pidItem)
 
	new fltEstoqueFisicoNIAB
	quit:pidItem="" ""
 
	set fltEstoqueFisicoNIAB = $$getEFNIAB^VARSESINReq(pidItem)
 
	quit fltEstoqueFisicoNIAB
	
GetEstoqueFisicoNMAC(pidItem)
 
	new fltEstoqueFisicoNMAC
	quit:pidItem="" ""
 
	set fltEstoqueFisicoNMAC = $$getEFNMAC^VARSESINReq(pidItem)
 
	quit fltEstoqueFisicoNMAC
	
GetPontoRessuprimento(pidItem, pidLocation)
 
	new fltPontoRessuprimento
	quit:pidItem="" ""
 
	set fltPontoRessuprimento = $$^WWWTR(0,12,$$getPR^VARSESINReq(pidItem, pidLocation))
 
	quit fltPontoRessuprimento
	
GetEstoqueSeguranca(pidItem, pidLocation)
 
	new fltEstoqueSeguranca
	quit:pidItem="" ""
 
	set fltEstoqueSeguranca = $$^WWWTR(0,12,$$getES^VARSESINReq(pidItem, pidLocation))
 
	quit fltEstoqueSeguranca
	
GetEstoqueMaximo(pidItem, pidLocation)
 
	new fltEstoqueMaximo
	quit:pidItem="" ""
 
	set fltEstoqueMaximo = $$^WWWTR(0,12,$$getEM^VARSESINReq(pidItem, pidLocation))
 
	quit fltEstoqueMaximo
	
GetEncomendasPendentes(pidItem, pidLocation)
 
	new intEncomendasPendentes
	quit:pidItem="" ""
 
	// Andre, 21/02/2008:
	set fltQuantidadePAMSemAFM = $$GetQuantidadeAAtenderPorItem^VARTRKPAMLineFake(pidItem, pidLocation)
	// set intEncomendasPendentes = $$getQuantidadePendente^VARSESINReq(pidItem, pidLocation)
	set intEncomendasPendentes = $$getQuantidadePendente^VARSESINReq(pidItem, pidLocation) + fltQuantidadePAMSemAFM
	
	quit intEncomendasPendentes
 
GetSolics(pidItem, pidLocation)
	// Rubens - Pega a quantidade solicitada e não transferida
	quit:pidItem="" ""
	set count=0
	/*
	&sql(declare SolicQuery cursor for 
	select NumeroDaSolicitacao,
    CodigodoProduto,
    Status1,
    NiveldeAtendimento,
    Quantidade,
    LocalRecebedor,
    QuantTransf
	into :pSolic,:pProduto,:pStatus,:pNivelAtend,:pQuantidade,:pLocal,:pQuantTransf 
	from VARSESV.SolicTransfLinha
	where LocalRecebedor=:pidLocation and CodigodoProduto=:pidItem)
	&sql(open SolicQuery )
	&sql(fetch SolicQuery)
	while SQLCODE=0 {
			set count=count+pQuantidade-pQuantTransf
			&sql(fetch SolicQuery)
	}
	&sql(CLOSE SolicQuery)
	*/
	set data=""
	set data=$order(^VARSESSolicTransfLinhas(YM,20,pidLocation,1,pidItem,data))
	while data'="" {
		set dataline=""
		set dataline=$order(^VARSESSolicTransfLinhas(YM,20,pidLocation,1,pidItem,data,dataline))
		while dataline'="" {
			set objline=$get(^VARSESSolicTransfLinha(YM,data,dataline,1))
			set pQuantidade=0
			set pQuantTransf=0
			set pQuantidade=$$$VARSESSolicTransfLinhaQuantidade(objline)
			set pQuantTransf=$$$VARSESSolicTransfLinhaQuantTransf(objline)
			set count=count+pQuantidade-pQuantTransf
			set dataline=$order(^VARSESSolicTransfLinhas(YM,20,pidLocation,1,pidItem,data,dataline))
		}
		set data=$order(^VARSESSolicTransfLinhas(YM,20,pidLocation,1,pidItem,data))
	}
	q count
 
GetSolicsID(pidItem, pidLocation)
 	set strIDs=""
 	// Rubens - Pega a quantidade solicitada e não transferida, com seu respectivo id
	quit:pidItem="" ""
	/*
	&sql(declare SolicQueryID cursor for 
	select NumeroDaSolicitacao,
    CodigodoProduto,
    Status1,
    NiveldeAtendimento,
    Quantidade,
    LocalRecebedor,
    QuantTransf
	into :pSolic,:pProduto,:pStatus,:pNivelAtend,:pQuantidade,:pLocal,:pQuantTransf 
	from VARSESV.SolicTransfLinha
	where LocalRecebedor=:pidLocation and CodigodoProduto=:pidItem)
	&sql(open SolicQueryID )
	&sql(fetch SolicQueryID)
	while SQLCODE=0 {
			if strIDs="" {
				set strIDs=pSolic
			} else {
				set strIDs=strIDs_";"_pSolic
			}
			//set count=count+pQuantidade-pQuantTransf
			&sql(fetch SolicQueryID)
	}
	&sql(CLOSE SolicQueryID)
	//q count
	//*/
	set count=0
	set data=""
	set data=$order(^VARSESSolicTransfLinhas(YM,20,pidLocation,1,pidItem,data))
	while ((data'="") && (count<5)) {
		if strIDs="" {
			set strIDs=data
		} else {
			set strIDs=strIDs_";"_data
		}
		set count=count+1
		set data=$order(^VARSESSolicTransfLinhas(YM,20,pidLocation,1,pidItem,data))
	}
	quit strIDs
 
 
GetINTFRPending(pidItem, pidLocation)
	
    set strIDs=""
 	// Rubens - Pega a quantidade transferida com seu respectivo id
	quit:pidItem="" ""
	/*
	&sql(declare INTFRPendingQueryID cursor for 
	select TransferNumber,
    Item,
    Quantity, 
    ReceivedQuantity, 
    ReceivingLocation,
    Status
	into :pINTFR,:pProduto,:pQuantidade,:pQuantidadeRecebida,:pLocal,:pStatus
	from VARSESV.INTFRPending
	where ReceivingLocation=:pidLocation and Item=:pidItem)
	&sql(open INTFRPendingQueryID )
	&sql(fetch INTFRPendingQueryID)
	while SQLCODE=0 {
			if strIDs="" {
				set strIDs=pINTFR
			} else {
				set strIDs=strIDs_";"_pINTFR
			}
			&sql(fetch INTFRPendingQueryID)
	}
	&sql(CLOSE INTFRPendingQueryID)
	*/
	set count=0
	set data=""
	set data=$order(^INTFRLines(YM,10,pidLocation,2,pidItem,data))
	while ((data'="") && (count<5)) {
		if strIDs="" {
			set strIDs=data
		} else {
			set strIDs=strIDs_";"_data
		}
		set count=count+1
		set data=$order(^INTFRLines(YM,10,pidLocation,2,pidItem,data))
	}
	quit strIDs
 
	
GetEstoqueVirtual(pidItem, pidLocation)
    // Rubens - Calcula o estoque virtual
	new fltEstoqueVirtual
	quit:pidItem="" ""
 	set fltEstoqueVirtual = $$getEF^VARSESINReq(pidItem, pidLocation) + $$GetSolics(pidItem, pidLocation)
 	//Usar getEF ou getEFR?
	quit fltEstoqueVirtual
	
GetSugestao(pidItem, pidLocation) 
	new fltEstoqueMaximo, fltEstoqueVirtual, fltQuantidadePAMSemAFM, fltPontoRessuprimento, 
		fltSugestao, daysToCalcPAB, idTipoEstoque
		
	if ($$GetStatus(pidItem) '= 0) quit 0 // Não deve mostrar itens inativos no alerta.
	
	set fltEstoqueMaximo = $$getEM^VARSESINReq(pidItem, pidLocation)
	set fltEstoqueVirtual = $$GetEstoqueVirtual(pidItem, pidLocation)
	//set fltQuantidadeSolics=$$GetSolics(pidItem, pidLocation)
 
	set fltPontoRessuprimento  = $$getPR^VARSESINReq(pidItem, pidLocation)
 	// Se o Estoque Virtual + Solics não atendidas < Ponto de Ressuprimento, temos que fazer 
	// sugestão.
	if fltEstoqueVirtual < fltPontoRessuprimento {
		
		set fltSugestao = fltEstoqueMaximo - fltEstoqueVirtual
 
	} else {
		set fltSugestao = 0
	}
 
	quit $$^WWWTR(0,12,fltSugestao)
 
 
 /*
 // Não vamos mais nos relacionar com a INRequisition.	
GetSugestao(pidItem, pidLocation)
	// Soma a quantidade de todas os Supplies(INRequisition) que ainda não definiram a origem.
	// INRequisitions unfirmed e firmed.
 
	new fltSugestao, idRequisition, objRequisition, fltQuantidade
	quit:pidItem="" ""
	
	set fltSugestao = 0
 
 	
	$$$Order7(^INRequisitions,YM,101,pidItem,pidLocation,1,YM,idRequisition)
	
		set objRequisition = $get(^INRequisition(YM, YM, idRequisition, 1))
		set fltQuantidade  = $piece(objRequisition, Y, 3)
		
		set fltSugestao = fltSugestao + fltQuantidade
	
	$$$End
 
	$$$Order7(^INRequisitions,YM,101,pidItem,pidLocation,2,YM,idRequisition)
	
		set objRequisition = $get(^INRequisition(YM, YM, idRequisition, 1))
		set fltQuantidade  = $piece(objRequisition, Y, 3)
		
		set fltSugestao = fltSugestao + fltQuantidade
	
	$$$End
 
	quit fltSugestao
	*/
	
GetPAMs(pidItem, pidLocation)
 
	new arrPAMs, strPAMs, idPAM, intAFMCount, strNewLines
	quit:pidItem="" ""
 
	do getPAMs^VARSESINReq(pidItem, pidLocation, .arrPAMs)
 
 	set strPAMs = ""
 	$$$Order1(arrPAMs,idPAM)
 
		if $get(strNewLines) = "" set strNewLines = ";"
 		set strPAMs          = $select(strPAMs = "":idPAM,$$$YES: strPAMs_strNewLines_idPAM)
		set intAFMCount      = $$GetAFMCountNotReceived^VARSESPamAfm(idPAM, pidItem)
		set strNewLines      = $extract(";;;;;;;;;;;;;;;;;;;",1,intAFMCount)
 
 	$$$End
 
	quit strPAMs
	
GetAFMs(pidItem, pidLocation, &parrAFMs)
	
	new strAFMs, arrPAMs, arrAFMs, idPAM, idAFM, idxPAM, idxAFM, blnAchou, i
	quit:pidItem="" ""
 
	do getAFMs^VARSESINReq(pidItem, pidLocation, .arrAFMs)
	do getPAMs^VARSESINReq(pidItem, pidLocation, .arrPAMs)
	
	// Verificar para cada PAM, quais AFMs pertencem a ele.
	$$$Order1(arrPAMs,idPAM)
	
		set idxPAM = $$$Index(idPAM)
		$$$Order1(arrAFMs,idAFM)
		
			set idxAFM = $$$Index(idAFM)
			if $data(^VARSESPAMAFMs(YM,3,idxPAM,idxAFM)) {
				//Pablo, 15/07/2009
				if ($length(arrPAMs(idPAM)) = 0) {
					set arrPAMs(idPAM) = idAFM
				}
				else {
					set blnAchou = 0
					for i = 1:1:$length(arrPAMs(idPAM), ";") {
						if ($piece(arrPAMs(idPAM), ";", i) = idAFM) {
							set blnAchou = 1
							quit
						}
					}
					if ('blnAchou) {
						set arrPAMs(idPAM) = arrPAMs(idPAM)_";"_idAFM
					}
				}
			}
		$$$End
	$$$End
 
 	set strAFMs = ""
	$$$Order1(arrPAMs,idPAM)
	
		if arrPAMs(idPAM) = "" {
			set arrPAMs(idPAM) = "Sem Nº AFM"
			set idAFMs 		   = "Sem Nº AFM"
		} else {
			set idAFMs 		   = arrPAMs(idPAM)
		}
		
		set strAFMs = $select(strAFMs = "": idAFMs,
	                    $$$YES:strAFMs_";"_idAFMs)
	$$$End
 
 	merge parrAFMs = arrPAMs
 
	quit strAFMs
	
GetEmpenhos(pidItem, pidLocation)
 
	new strEmpenhos, arrEmpenhos, arrAFMs, idPAM, idAFM, arrPAMs, strAFMs
	quit:pidItem="" ""
 	;if YBED = "FRANK" for i=1:1:100 hang 1
	do getEmpenhos^VARSESINReq(pidItem, pidLocation, .arrEmpenhos)
	do GetAFMs(pidItem, pidLocation, .arrAFMs)
 
	set strEmpenhos = ""
	$$$Order1(arrAFMs,idPAM)
 
		set strAFMs = arrAFMs(idPAM)
		while strAFMs '= "" {
			
			set idAFM 	       = $piece(strAFMs, ";", 1)
			set strAFMs 	   = $extract(strAFMs, $length(idAFM) + 2, $length(strAFMs))
		
			if idAFM = "Sem Nº AFM" {
				set idEmpenho = "Sem Nº Empenho"
			} else {
				set idEmpenho 	   = $select(arrEmpenhos(idAFM) = "": "Sem Nº Empenho", $$$YES: arrEmpenhos(idAFM))
			}
			set strEmpenhos    = $select(strEmpenhos = "": idEmpenho,
		                          $$$YES:strEmpenhos_"<BR>"_idEmpenho)
	}
	
	$$$End
 
	quit strEmpenhos
 
GetDataEntregaEmpenhos(pidItem, pidLocation)
	new strDatasEntrega, arrAFMs, idPAM, idAFM, strAFMs, objAFM,
		intDataEntrega
 
	set strDatasEntrega = ""
	if ($length(pidItem) = "") quit strDatasEntrega
 
	do getEmpenhos^VARSESINReq(pidItem, pidLocation, .arrEmpenhos)
	do GetAFMs(pidItem, pidLocation, .arrAFMs)
 
	$$$Order1(arrAFMs,idPAM)
		set strAFMs = arrAFMs(idPAM)
 
		while ($length(strAFMs) > 0) {
			set idAFM = $piece(strAFMs, ";", 1)
			set strAFMs = $extract(strAFMs, $length(idAFM) + 2, $length(strAFMs))
 
			if (idAFM = "Sem Nº AFM") {
				set intDataEntrega = ""
			}
			else {
				set objAFM = $get(^INAUF(YM, idAFM, 1))
				set intDataEntrega = $$$INAUFFREE15(objAFM)
				if ($length(intDataEntrega) > 0) {
					set intDataEntrega = "&nbsp;&nbsp;&nbsp;"_
						$$^WWWTR(0, 1, intDataEntrega)
				}
			}
			if ($length(intDataEntrega) = 0) {
				set intDataEntrega = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"_
					"&nbsp;&nbsp;&nbsp;---"
			}
 
			set strDatasEntrega = $select(strDatasEntrega = "": intDataEntrega,
				$$$YES:strDatasEntrega_"<BR>"_intDataEntrega)
		}
	$$$End
 
	quit strDatasEntrega
 
GetProcessos(pidItem, pidLocation)
 
	new strProcessos, arrProcessos, strProcessos, idProcesso, idPAM, strNewLines
	quit:pidItem="" ""
 
	do getProcessos^VARSESINReq(pidItem, pidLocation, .arrProcessos)
	
	set strProcessos = ""
	$$$Order1(arrProcessos,idPAM)
 
		if $get(strNewLines) = "" set strNewLines = ";"
 
		set idProcesso   = $select(arrProcessos(idPAM)="":"Sem Nº Processo",$$$YES:arrProcessos(idPAM))
 		set strProcessos = $select(strProcessos = "":idProcesso,$$$YES: strProcessos_strNewLines_idProcesso)
 
		set intAFMCount      = $$GetAFMCountNotReceived^VARSESPamAfm(idPAM, pidItem)
		set strNewLines      = $extract(";;;;;;;;;;;", 1, intAFMCount*1)
	
	$$$End
 
	quit strProcessos
	
GetProcessosPG(pidItem, pidLocation)
 
	new strProcessos, arrProcessos, strProcessos, idProcesso, idPAM, strNewLines
	quit:pidItem="" ""
 
	do getProcessosPG^VARSESINReq(pidItem, pidLocation, .arrProcessos)
	
	set strProcessos = ""
	$$$Order1(arrProcessos,idPAM)
 
		if $get(strNewLines) = "" set strNewLines = ";"
 
		set idProcesso   = $select(arrProcessos(idPAM)="":"Sem Nº Processo",$$$YES:arrProcessos(idPAM))
 		set strProcessos = $select(strProcessos = "":idProcesso,$$$YES: strProcessos_strNewLines_idProcesso)
 
		set intAFMCount      = $$GetAFMCountNotReceived^VARSESPamAfm(idPAM, pidItem)
		set strNewLines      = $extract(";;;;;;;;;;;", 1, intAFMCount*1)
	
	$$$End
 
	quit strProcessos
 
 
GetDetentoresAtuaisSICOP(pidItem, pidLocation)
 	//26-02-2009	Karine	Criado
 	// set k = $$GetDetentoresAtuaisSICOP^VARSESAlertaRegionaisLinha(175,5)
 	
	new strDetentoresAtuaisSICOP,arrProcessos,strProcessos,idDetentor, idPAM, strNewLines, intAFMCount, idProcesso
	
	;if (pidItem=90823) && (YBED = "KARINE")
	;{
	;	for i=1:1:100 hang 1
	;}
	
	quit:pidItem="" ""
	
	do getProcessos^VARSESINReq(pidItem, pidLocation, .arrProcessos)
	
 	set strDetentoresAtuaisSICOP=""
 	set strProcessos = ""
 	set idProcesso = ""
 	set idDetentor = ""
 	set arrProcessos = ""
 	
	$$$Order1(arrProcessos,idPAM)
 		set idDetentor = ""
 
		if $get(strNewLines) = "" set strNewLines = "<BR>"
 
 		// Andre, 04/03/2009
 		// Se o processo SICOP não existe, não chama a rotina $$getDetentor^VARSESProcesso(idProcesso):
		;set idProcesso   		= $select(arrProcessos(idPAM)="":"Sem Nº Processo",$$$YES:arrProcessos(idPAM))
		;set idDetentor =  $$getDetentor^VARSESProcesso(idProcesso)
		if ( $get(arrProcessos(idPAM)) '= "" ) {
			set idProcesso = arrProcessos(idPAM)
			set idDetentor =  $$getDetentor^VARSESProcesso(idProcesso)
		}
		else {
			set idProcesso = "Sem Nº Processo"
			set idDetentor = " "  // Estranhamente, se esta variável ficar nula, não é incluída uma quebra de linha na célula.
		}
		//^^^^^^^^^^^^ // Andre, 04/03/2009
		
		// Andre, 04/03/3009
		// Ao invés de apenas verificar o tamanho da msg, deveria comparar com o texto retornado.
		// Na verdade, esta validação deveria estar na rotina $$getDetentor^VARSESProcesso.
		// E já está, mas lá também estava sendo feita a comparação com o tamanho.
		// Foi consertada a rotina $$getDetentor^VARSESProcesso e retirada esta validação daqui:
		/*
		if $length(detentor) > 15  {    ;"N&atilde;o existe(m) processo(s) para a consulta feita." {
			set idDetentor = "Proc. desconhecido"
		}
		*/
		//^^^^^^^^^^^^ // Andre, 04/03/2009
		
		set strDetentoresAtuaisSICOP = $select(strDetentoresAtuaisSICOP = "":idDetentor,$$$YES:strDetentoresAtuaisSICOP_strNewLines_idDetentor)
 
		set intAFMCount      = $$GetAFMCountNotReceived^VARSESPamAfm(idPAM, pidItem)
		set strNewLines      = $extract("<BR><BR><BR><BR><BR><BR><BR><BR>", 1, intAFMCount*4)
	$$$End
 	
	
	quit strDetentoresAtuaisSICOP_" "
 
	
GetDetentoresAtuais(pidItem, pidLocation)
 
	new strDetentoresAtuais,arrDetentor,strProcessos,idDetentor, idPAM, strNewLines, intAFMCount
	quit:pidItem="" ""
	do getDetentorProcessos^VARSESINReq(pidItem, pidLocation, .arrDetentor)
 	set strDetentoresAtuais=""
 	set strProcessos = ""
	$$$Order1(arrDetentor,idPAM)
 
		if $get(strNewLines) = "" set strNewLines = "<BR>"
 
		set idDetentor   		= $select(arrDetentor(idPAM)="":"Sem Nº Processo",$$$YES:arrDetentor(idPAM))
		set strDetentoresAtuais = $select(strDetentoresAtuais = "":idDetentor,$$$YES:strDetentoresAtuais_strNewLines_idDetentor)
 
		set intAFMCount      = $$GetAFMCountNotReceived^VARSESPamAfm(idPAM, pidItem)
		set strNewLines      = $extract("<BR><BR><BR><BR><BR><BR><BR><BR>", 1, intAFMCount*4)
	$$$End
	
	quit strDetentoresAtuais_" "

UpdateAlertaRegionais(verbose=2)

	do DeletarAlertaLinhas(verbose)
	do ImportarAlertaLinhas(verbose)
	q $$$OK
 
DeletarAlertaLinhas(verbose=1)
 
	//QUIT 
	
	/* Não rodar essa rotina! Ela apaga as observações que existem nas linhas do alerta, e a Marta
	   do Comitê Gestor vai à loucura! Depois vai ter que ir na WWWPRO restaurar tudo! :[ */
 
 
	new idItem, idLocation, objItem, idItemStatus, arrItems, intLinhasDeletadasOk,
	    intLinhasDeletadasErro, strStatus
 
	$$$VAR
	
	if verbose=1 write "Deletando as linhas de alerta.",!!
 
	if verbose=1 write "Verificando os itens do Alerta que foram desativados.",!,!
	// Para todos os itens no Alerta, verificar quais ficaram inativos.
	$$$Order2(^VARSESAlertaRegionaisLinha,YM,idLocation)
		$$$Order3(^VARSESAlertaRegionaisLinha,YM,idLocation,idItem)
			
			//
			if $get(^INDRPITEM(YM,idLocation,idItem,1))="" set arrItems(idLocation, idItem) = ""
 			// Verificando se está ativo.
 			set objItem 	 = $get(^INART(YM, idItem, 1))
 			set idItemStatus = $piece(objItem, Y, 66)
			
			// Não deletar se o item estiver ativo
			continue:(idItemStatus = 0)			
		
			// Não deletar se o item tiver movimentação.
			//continue:($$getExisteMovimentacao^VARSESINReq(idLocation, idItem))
 
			set arrItems(idLocation, idItem) = ""
		
		$$$End
	$$$End
	
	set intLinhasDeletadasOk   = 0
	set intLinhasDeletadasErro = 0
 
	// Deletandos os itens/locais identificados.
 	if verbose=1 write "Deletando os itens/locais identificados... ",!
	$$$Order1(arrItems,idLocation)
	
		$$$Order2(arrItems,idLocation,idItem)
		
 			if verbose=1 write "Deletando a linha ["_idLocation_","_idItem_"]: "		
			set strStatus = $$$Kill("VARSESAlertaRegionaisLinha",idLocation_$$$COMMA_idItem)
			if $$$ISOK(strStatus) {
				if verbose=1 write "Ok",!
				set intLinhasDeletadasOk = intLinhasDeletadasOk + 1
			} else {
				if verbose=1 write "Erro",!
				set intLinhasDeletadasErro = intLinhasDeletadasErro + 1
			}		
		$$$End
	$$$End
 
	if verbose=1 write !,!,"Linhas deletadas com sucesso: "_intLinhasDeletadasOk,!
	if verbose=1 write "Linhas não deletadas por erro: "_intLinhasDeletadasErro
 
	quit 
 
ImportarAlertaLinhas(verbose=1)
 
	new idLocation, idItem, strStatus, intLinhasSalvasOk, objLocation,
		intLinhasSalvasErro, blnStorageLocation, objItem, idItemStatus
	
	kill ^VARSESTempListImpAlerta
	
	$$$VAR
	
	set intLinhasSalvasOk   = 0
	set intLinhasSalvasErro = 0
	w !
	if verbose=1 write "Criando as linhas de alerta.",!!
 
	// Verificando os itens com autorização.
 	if verbose=1 write "Verificando os itens com autorização... ",!
	$$$Order2(^INDRPITEM,YM,idLocation)
	
			// IMPORTAR SOMENTE AS LINHAS REFERENTES ÀS LOCALIDADES CENTRAIS.
			//continue:((idLocation '= 5) && (idLocation '= 1))
	
			$$$Order3(^INDRPITEM,YM,idLocation,idItem)
	
			// O item é considerado autorizado se existir um registro para ele no INDRPItem.
			continue:($data(^VARSESAlertaRegionaisLinha(YM, idLocation, idItem, 1)))
 	
 			// Verificando se está ativo.
 			set objItem 	 = $get(^INART(YM, idItem, 1))
 			set idItemStatus = $piece(objItem, Y, 66)
 	
 			continue:(idItemStatus '= 0) ; 0 = item ativo.
 	
 			set ^VARSESTempListImpAlerta(idLocation, idItem) = ""
			
		$$$End	
	$$$End
	/*
	// Verificando os itens com movimentaçãoz.
 	write "Verificando os itens não autorizados com movimentação... ",!
	$$$Order3(^WWW0121,0,YM,idLocation)
 
		// IMPORTAR SOMENTE AS LINHAS REFERENTES ÀS LOCALIDADES CENTRAIS.
		//continue:((idLocation '= 5) && (idLocation '= 1))
	
		set objLocation = $get(^WWW0121(0, YM, idLocation, 1))
 
		// Não há necessidade de verificar os locais que não são de armazenagem.
		set blnStorageLocation = $piece(objLocation, Y, 24)
		continue:'blnStorageLocation
 
		$$$Order2(^INART,YM,idItem)
		
			// Pular os itens que já foram considerados como Ok na verificação dele ser ativo.
			continue:($data(^VARSESTempListImpAlerta(idLocation, idItem)))
 
			// O item é considerado como ativo se existir um registro para ele no INDRPItem.
			continue:($data(^VARSESAlertaRegionaisLinha(YM, idLocation, idItem, 1)))
			
			// Pular se não existe movimentação para o item.
			continue:'($$getExisteMovimentacao^VARSESINReq(idLocation, idItem))
	
			set ^VARSESTempListImpAlerta(idLocation, idItem) = ""
	
		$$$End
	
	$$$End
	*/
	// Salvando os itens/locais identificados.
 	if verbose=1 write "Salvando os itens/locais identificados... ",!
	$$$Order1(^VARSESTempListImpAlerta,idLocation)
	
		$$$Order2(^VARSESTempListImpAlerta,idLocation,idItem)
		
 			if verbose=1 write "Salvando a linha ["_idLocation_","_idItem_"]: "		
			set strStatus = $$$Save("VARSESAlertaRegionaisLinha",idLocation_$$$COMMA_idItem,"~~",$$$YES)
			if $$$ISOK(strStatus) {
				if verbose=1 write "Ok",!
				set intLinhasSalvasOk = intLinhasSalvasOk + 1
			} else {
				if verbose=1 write "Erro",!
				set intLinhasSalvasErro = intLinhasSalvasErro + 1
			}
			
		
		$$$End
	
	$$$End
 
	if verbose=1 write !,!,"Linhas salvas com sucesso: "_intLinhasSalvasOk,!
	if verbose=1 write "Linhas não salvas por erro: "_intLinhasSalvasErro
 
	quit $$$YES
 
GetTipoMovimentacao(pidItem, pidLocation)
 
	new objItemConfiguration
 
	// Pegando do DRP Item Master.
	set objItemConfiguration = $get(^INDRPITEM(YM, pidLocation, pidItem, 1))
 
	quit $piece(objItemConfiguration, Y, 5)
	
 
EditaObservacoesComite()
	
	// Rotina chamada na regra de customização no campo Observações (Comitê Gestor) do alerta.
	// Valida no cadastro de usuários se o usuário pode editar observações do Comitê Gestor no Alerta.
	// Essa validação não pôde ser feita via perfil de acesso, pois as permissões são dadas a usuários específicos com perfis de acesso diferentes.
 
	new EditaObservacoesComite
	
	set EditaObservacoesComite = $piece($get(^WWW013(YM,YBED,1)),Y,127)
 
	if EditaObservacoesComite = 1 {	
		quit $$$NO
	}
		
	quit $$$YES
 
	
EditaObservacoesProgramacao()
 
	// Rotina chamada na regra de customização no campo Observações (Programação) do alerta.
	// Valida no cadastro de usuários se o usuário pode editar observações da Programação no Alerta.
	// Essa validação não pôde ser feita via perfil de acesso, pois as permissões são dadas a usuários específicos com perfis de acesso diferentes.
 
	new EditaObservacoesProgramacao
	
	set EditaObservacoesProgramacao = $piece($get(^WWW013(YM,YBED,1)),Y,128)
 
	if EditaObservacoesProgramacao = 1 {	
		quit $$$NO
	}
		
	quit $$$YES	
 
	
GetFornecedor(pidItem, pidLocation)
 
	new strFornecedores, arrFornecedores, arrAFMs, idPAM, idAFM, arrPAMs, strAFMs
	quit:pidItem="" ""
 	;if YBED = "FRANK" for i=1:1:100 hang 1
	do getFornecedores^VARSESINReq(pidItem, pidLocation, .arrFornecedores)
	do GetAFMs(pidItem, pidLocation, .arrAFMs)
 
	set strFornecedores = ""
	$$$Order1(arrAFMs,idPAM)
 
		set strAFMs = arrAFMs(idPAM)
		while strAFMs '= "" {
			
			set idAFM 	       = $piece(strAFMs, ";", 1)
			set strAFMs 	   = $extract(strAFMs, $length(idAFM) + 2, $length(strAFMs))
		
			if idAFM = "Sem Nº AFM" {
				set idFornecedor = "Sem Fornecedor"
			} else {
				set idFornecedor 	   = $select(arrFornecedores(idAFM) = "": "Sem Fornecedor", $$$YES: arrFornecedores(idAFM))
			}
			set strFornecedores    = $select(strFornecedores = "": idFornecedor,
		                          $$$YES:strFornecedores_"<BR>"_idFornecedor)
	}
	
	$$$End
 
	quit strFornecedores
	
	
GetDiasAbaixoPR(pidItem,pidLocation)
	//Calcula há quantos dias um produto está abaixo do ponto de ressuprimento
	new idTipoEstoque, fltEF, fltPR, strNoDays, dteToday, dteLimit, dteTarget, dteAnalysis,
		fltEstoqueLocalData, fltEstoqueNUMABData, fltEstoqueGEMEXData, fltEstoqueData
 
	set idTipoEstoque = $piece($get(^WWW0121(YM,YM,pidLocation,1)),Y,61)
	
	if idTipoEstoque = "FARMACIA" {
		set fltEF = $$GetEstoqueCentralFarmacia^VARSESAlertaRegionaisLinha(pidItem, pidLocation)
	
	} elseif idTipoEstoque = "ALMOXARIFADO" {
		set fltEF = $$GetEstoqueCentralAlmoxarifado^VARSESAlertaRegionaisLinha(pidItem, pidLocation)
	}
 
	set fltPR = $$GetPontoRessuprimento^VARSESAlertaRegionaisLinha(pidItem, pidLocation)
 
	set strNoDays = ""
 
	if (fltEF >= fltPR) {
		quit strNoDays
	}
 		
	set dteToday = $piece($h,",",1)	
	set dteLimit = 61027
	
	set dteTarget = dteToday - 1
 
	for dteAnalysis = dteTarget:-1:dteLimit {
		
		if idTipoEstoque = "FARMACIA" {
			set fltEstoqueLocalData = $$GetStockAtDateFast^VARSESEstoqueHistorico(, pidItem, pidLocation, dteAnalysis)
			set fltEstoqueNUMABData = $$GetStockAtDateFast^VARSESEstoqueHistorico(, pidItem, 5070, dteAn]]><![CDATA[alysis)
			set fltEstoqueGEMEXData = $$GetStockAtDateFast^VARSESEstoqueHistorico(, pidItem, 5071, dteAnalysis)
			
			set fltEstoqueData = fltEstoqueLocalData + fltEstoqueNUMABData + fltEstoqueGEMEXData
		
		} elseif idTipoEstoque = "ALMOXARIFADO" {
			set fltEstoqueData = $$GetStockAtDateFast^VARSESEstoqueHistorico(, pidItem, pidLocation, dteAnalysis)
		}		
		
		if (fltEstoqueData >= fltPR) {
			quit
		}
		
		if (strNoDays > 180) {
			set strNoDays = "Acima de 6 meses"
			quit
		}
		
		if strNoDays = "" set strNoDays = 0		
		set strNoDays = strNoDays + 1
	}
 
	quit strNoDays
 
 
GetEstoqueCentralAlmoxarifado(pidItem,pidLocation)
	//Estoque para regional do tipo almoxarifado
	quit $$GetEstoqueFisicoLocal(pidItem, pidLocation)
 
GetEstoqueCentral(pidItem,pidLocation)
 
	set idTipoEstoque = $piece($get(^WWW0121(YM,YM,pidLocation,1)),Y,61)
	
	;if YBED = "MARCELO" for i = 1:1:100
	
	if idTipoEstoque = "FARMACIA" {
		set fltEstoqueCentralLocal = $$GetEstoqueCentralFarmacia^VARSESAlertaRegionaisLinha(pidItem, 5)
	
	} elseif idTipoEstoque = "ALMOXARIFADO" {
		set fltEstoqueCentralLocal = $$GetEstoqueCentralAlmoxarifado^VARSESAlertaRegionaisLinha(pidItem, 1)
	}
	q fltEstoqueCentralLocal
	
GetEstoqueCentralFarmacia(pidItem,pidLocation)	
	//ESTOQUE PARA REGIONAIS SOMANDO APENAS DO LOCAL
 
	new fltEstoqueLocal,fltEstoqueCentralFarmacia
 
	set fltEstoqueLocal = $$GetEstoqueFisicoLocal(pidItem, pidLocation)
	//set fltEstoqueNUMAB = $$GetEstoqueFisicoNIAB(pidItem)
	//set fltEstoqueGEMEX = $$GetEstoqueFisicoNMAC(pidItem)
 
	//set fltEstoqueCentralFarmacia = fltEstoqueLocal + fltEstoqueNUMAB + fltEstoqueGEMEX
 	set fltEstoqueCentralFarmacia = fltEstoqueLocal
	quit fltEstoqueCentralFarmacia
	
GetStatus(pidItem)
	new objItem, itemStatus
		
	set objItem    = $get(^INART(YM,pidItem,1))
	set itemStatus = $piece(objItem,Y,66)
	
	quit itemStatus
	
GetCoberturaEstoque(pidItem,pidLocation)
	new fltEstoque, fltCMML, fltCoberturaEstoque
	
	set fltEstoque = $$GetEstoqueFisicoLocal(pidItem, pidLocation)
	set fltCMML	   = $$getCMMLocal^VARSESINReq(pidItem, pidLocation)
	if fltCMML = 0 quit 0
	if fltEstoque = 0 quit 0
	if fltCMML = "" quit 0
	if fltEstoque = "" quit 0
	
	set fltCoberturaEstoque = $$Floor^COMUtilNum((fltEstoque / fltCMML) * 30) //Não arredondar para cima, mesmo que seja 1,9 por exemplo.
 
	quit fltCoberturaEstoque
	
	
GetDescricaoItemLink(pidItem)
	;Insere um link no campo descrição do produto para a tela de visão gerencial do produto
	new objItem, strDescricaoItem
	quit:pidItem="" ""
 
	set objItem  		 = $get(^INART(YM, pidItem, 1))
	set strDescricaoItem = $piece(objItem, Y, 1)
	
	set YKEY = $piece(YKEY,",",2)
	set strDescricaoItem = "<A HREF='' class=link onClick=""subWindow('"_YAKTION_"EP=WWWFORM&amp;YFORM=VARSESConsultaGerencialProduto"_$$WWWCGI2^WWWCGI($$$YES)_"'); return false;"">"_strDescricaoItem_"</A>"
	
	quit strDescricaoItem
	
	
GetCMMNovo(pidItem)
	//Checar essa rotina, validar se está sendo usada 
	new fltCMMNovo
	quit:pidItem="" ""
	
  	;Apenas temporário para teste - solicitação da UAG
 	set fltCMMNovo = $piece($get(^VARSESCMMTemp(YM,pidItem,1)),Y,1)
 	 	 
	quit $$^WWWTR(0,12,$$Ceiling^COMUtilNum(fltCMMNovo))
	
GetCMMAtencaoBasica(pidItem)
	//NAO SERA UTILIZADO NO ALERTA DE REGIONAIS
	;Local de Atenção Básica = Local onde o Nível de Atenção (FREE12) = 1
	new idLocal, idNivelAtencao, fltCMML, fltCMMAtencaoBasica	
	
	set fltCMMAtencaoBasica = 0
	
	$$$Order5(^WWW0121s,YM,3,1,YM,idLocal)
		
		set idNivelAtencao = $piece($get(^WWW0121(YM,YM,idLocal,1)),Y,79)
		
		continue:(idNivelAtencao '= 1)
		
		set fltCMML = $$GetCMML^VARSESConsultaEstoqueItemRede(idLocal,pidItem)
		set fltCMMAtencaoBasica = fltCMMAtencaoBasica + fltCMML
		
	$$$End
 
	quit $$^WWWTR(0,12,fltCMMAtencaoBasica)
	
GetCMMHospitalar(pidItem)
	//CMM correto para o local? Ou calcular pela INTFR?
	//
	;Local de Atenção Hospitalar = Local onde o Nível de Atenção (FREE12) = 3 ou 4
	new idLocal, idNivelAtencao, fltCMML, fltCMMHospitalar	
	
	set fltCMMHospitalar = 0
	
	$$$Order5(^WWW0121s,YM,3,1,YM,idLocal)
		
		set idNivelAtencao = $piece($get(^WWW0121(YM,YM,idLocal,1)),Y,79)
		
		continue:((idNivelAtencao '= 3) && (idNivelAtencao '= 4))
		
		set fltCMML = $$GetCMML^VARSESConsultaEstoqueItemRede(idLocal,pidItem)
		set fltCMMHospitalar = fltCMMHospitalar + fltCMML
		
	$$$End
 
	quit $$^WWWTR(0,12,fltCMMHospitalar)
	
GetCMMAltoCusto(pidItem)
	//NAO SERA UTILIZADO NO ALERTA DE REGIONAIS
	;Local de Atenção de Alto Custo = Local onde o Nível de Atenção (FREE12) = 2
	new idLocal, idNivelAtencao, fltCMML, fltCMMAltoCusto
	
	set fltCMMAltoCusto = 0
	
	$$$Order5(^WWW0121s,YM,3,1,YM,idLocal)
		
		set idNivelAtencao = $piece($get(^WWW0121(YM,YM,idLocal,1)),Y,79)
		
		continue:(idNivelAtencao '= 2)
		
		set fltCMML = $$GetCMML^VARSESConsultaEstoqueItemRede(idLocal,pidItem)
		set fltCMMAltoCusto = fltCMMAltoCusto + fltCMML
		
	$$$End
 
	quit fltCMMAltoCusto
	
GetNivelAtencao(pidItem)
	;Pega o nivel de atencao do produto
	; 
	new objItem, idGrupo
	quit:pidItem="" ""
	
	set objItem  = $get(^INART(YM, pidItem, 1))
	
	;XXYY: XX=grupo, YY=sub-grupo
	set strNivelAtencao  = $$$INARTFREE25(objItem) //$piece(objItem, Y, 30)
 
	quit strNivelAtencao
]]></Routine>
</Export>