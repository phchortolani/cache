<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INMOIssueLine" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INMOIssueLine
	
#include COMGridEdit31
#include COMSYS
#include INConst
#include %occInclude
	
#define FORMFldINMOIssueLineBundle		10
#define FORMFldINMOIssueLineLotNo		11
	
OnBeforeFormat(pYFIELDNAME,pYTEXT,pobjLine)
	;-------------------------------------------------------------------------------
	; set Color on fields that fail validation
	;	
	; Called By :
	;	Form - GridEdit:INIssueLine
	;	Routines -
	;		
	; Inputs : 
	;	pYFIELDNAME	-	Browser Element ID "tdY#row#_#col#"
	;	pYTEXT		-	Value currently in element
	;	pYFELD		-	@nM INIssueLine Data record
	;
	; ByRef :
	;
	; Returns : 
	;
	; History :
	; 10-Sep-2010	PPP		SR18110: 1. Load default variable quantity available
	;						2. Do not quit evein if status is closed
	; 11-Aug-2010	PPP		SR16573/2: Set the From Storage
	; 11-May-2010	PPP		SR16573/1: Moved idClassField = $$$FldINIssueLineBundle
	;							before the quit. (always paint this field)
	; 30-Apr-2010	PPP		SR16573: Created
	;-------------------------------------------------------------------------------
	new fltQOH,fltQtyIssued,fltQtyPlanned,fltQtyReqd,fltStockBundleQty
	new fltTotalIssued,fltTotQtyIssFromStore,idBundle,idClassField
	new idFromLocn,idFromStore,idIssueLine,idIssueNumber,idItem,idLineNumber,idLn
	new intCol,intRow,objBundle,objBundleStock,objHeader,objIssueLine,sc,strBundleValues
	
	//SR16573/1
	; Grid Position
	;---------------------------------------
	$$$GRIDSplitKey(pYFIELDNAME,intRow,intCol)
	set idClassField = $$$GetClassField(YFORM,intCol)
	
	set idBundle     = $$$INIssueLineBundle(pobjLine)
	if (idClassField = $$$FldINIssueLineBundle) {
		; Manual F11 LotNo = Bundle Attribute Values
		
		if idBundle '= "" { 
		    //Update "Bundle Values" as well as styling
			set objBundle       = ##class(alSOH.dBundle).%OpenId(idBundle)
			set strBundleValues = ##class(alSOH.iUSOH).RenderBundle(objBundle,SPRACHE)
			set YTOOLTIP        = idBundle	//objBundleStock.%Id()     ; TODO : use idBundle with $get(^Development)
			do UpdateManualField^COMGridEdit31Interface(intRow,$$$FORMFldINMOIssueLineLotNo,strBundleValues) ; YTEXT can't be set here, workaround
			
		} else {
			set YWARNING	= $$$YES
			set YTOOLTIP	= $$$Text($listbuild("alINV0102",$$$INIssueLineFromStorage(pobjLine)))  ; //SR16573/2
		} ; "No bundle, or bundle doesn't exist in Storage '%1'"
	}
	
	; don't bother formatting if it is firmed/a-closed/m-closed, locked anyway
	;---------------------------------------
	
	; FIXME : Early exit
	quit:(($$$INIssueLineStatus(pobjLine) = 2) || ($$$INIssueLineStatus(pobjLine) = 8) || ($$$INIssueLineStatus(pobjLine) = 9))
	
	set idIssueNumber = $$$KEY1(YKEY)
	set idLineNumber  = $$$KEY2(YKEY)
	
	; INIssue Header
	;---------------------------------------
	set objHeader  = $$$GRIDYFELDContainer
	;quit:$$$INIssueStatus(objHeader)>3         		; Active
	set idFromLocn = $$$INIssueFromLocn(objHeader)
	
	; INMOIssueLine from Grid
	;---------------------------------------
	set idItem       = $$$INIssueLineItem(pobjLine)
	set idFromStore  = $$$INIssueLineFromStorage(pobjLine)
	set idBundle     = $$$INIssueLineBundle(pobjLine)
	set fltQtyIssued = $$$INIssueLineQtyIssued(pobjLine)
	set fltQtyReqd   = $$$INIssueLineQtyRequired(pobjLine)
	
	; Qty Issued
	;-----------------------------------
	if (idClassField = $$$FldINIssueLineQtyIssued) {
		set fltTotalIssued = $$GetTotalIssued(idLineNumber)+fltQtyIssued
		
		if fltQtyIssued = "" {
			set YWARNING = $$$YES
			
	//	} elseif fltQtyIssued '> 0 {
	//		set YWARNING = $$$YES
	//		set YTOOLTIP = $$$Text("IN00632") ; "Quantity must be greater than 0."
		
		} elseif fltTotalIssued '= fltQtyReqd  {
			set YWARNING = $$$YES
			set YTOOLTIP = $$$Text($listbuild("IN01222",fltTotalIssued,fltQtyReqd,idLineNumber))
		; "Total Quantity Issued (%1) has to be equal to the Unit Quantity (%2) for Line %3"
			
		} else {
			// Read from On Screen Value before On Disk Value
			set fltQOH         = ##class(alSOH.iSOH).GetQtyOnHand(idItem,idFromLocn,idFromLocn_"||"_idFromStore)
			set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(idItem_"||"_idFromLocn_"||"_idFromStore_"||"_idBundle,,.sc)
			
			if $$$ISOK(sc) {
				set fltStockBundleQty = 0
				set:(objBundleStock '= $$$NULLOREF) fltStockBundleQty = objBundleStock.QtyOnHand
	    		set QOH = fltStockBundleQty		//SR18110
				
			; FIXME : can we use idItem, idFromLocn, idFromStore and idBundle in next line rather than extracting when we have used them as the keys?
				
				set fltQtyPlanned = ##class(alSOH.iSOHBalance).GetQtyPlanned(objBundleStock.Item.%Id(),objBundleStock.Storage.Location.%Id(),objBundleStock.Storage.%Id(),objBundleStock.Bundle.%Id())
				
				if (fltQtyIssued > (fltStockBundleQty-fltQtyPlanned)) {
					set YWARNING = $$$YES
					set YTOOLTIP  =$$$Text("IN00437")_" = "_(fltStockBundleQty-fltQtyPlanned) ; "Available Quantity"
					
				} elseif (fltQtyIssued > fltQOH) {
					set YWARNING = $$$YES
					set YTOOLTIP = $$$Text("IN00437")_" = "_fltQOH                            ; "Available Quantity"
					
				} else {
					//	Check Prior Line entries, sum quantities
					if objBundleStock '= $$$NULLOREF {
						set idIssueLine = "" 
						set fltTotQtyIssFromStore = 0
						
					//	set idLn = $$$KEY2($$GetYKEY^COMGridEdit31G(intRow))
						set idLn = $translate(idLineNumber,"x",".")
						for {
							set idIssueLine = $order($$$WWWDATEN("REFERENCEROW",idIssueLine))
							quit:(idIssueLine = "")
							continue:(idIssueLine = idLn) 
							continue:(idIssueLine\1)'=(idLn\1)
							continue:($get($$$WWWDATEN("KILLEDRECORD",$get($$$WWWDATEN("REFERENCEROW",idIssueLine,1))))=$$$YES)
							
							set objIssueLine = $$$GRIDGetYFELD(idIssueLine)
							continue:($$$INIssueLineItem(objIssueLine)        '= idItem)
							continue:($$$INIssueLineFromStorage(objIssueLine) '= idFromStore)
							continue:($$$INIssueLineBundle(objIssueLine)      '= idBundle)
							
							set fltTotQtyIssFromStore = fltTotQtyIssFromStore + $$$INIssueLineQtyIssued(objIssueLine)
						}
						
						if (fltTotQtyIssFromStore > objBundleStock.QtyOnHand) {
							set YWARNING = $$$YES
							set YTOOLTIP = $$$Text($listbuild("alMOV0003",objBundleStock.QtyOnHand))
						} ; "Not enough Items in Storage (Quantity = %1)"
					}
				}
			}
		}
	}
	quit	
	
	
OnBeforeSave(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
	; OnBeforeSave of the INMOIssueLine
	; 
	; History :
	; 20-Jun-2013	SCR		HEVA-1030: Disable QTY checks when Pharmacy
	; 22-Jul-2010	PPP		SRxxxxx:Corrected check for Total Stock for Loc
	; 05-May-2010	PPP		SR16573:Created
	;-------------------------------------------------------------------------------
	new fltIssued,fltLocnQOH,fltQtyIssued,fltQtyPlanned,fltTotQtyIssued
	new idItem,idLn,idLocn,objBundleStock,sc,objProd,obIssue
	
	set objBundleStock = ##class(alSOH.dBundleStock).%OpenId($$$INIssueLineItem(pYFELD)_"||"_$$$INIssueFromLocn($$$GRIDYFELDContainer)_"||"_$$$INIssueLineFromStorage(pYFELD)_"||"_$$$INIssueLineBundle(pYFELD),0,.sc)
	set idLn = $$$KEY2(pYKEY)
	; HEVA-1030 vvvv
	set obIssue			= $Get(^INIssue(YM,$$$KEY1(pYKEY),1))
	set objProd			= ""
	set idProd			= $$$INIssueProductionOrder(obIssue)
	if idProd'="" {
		set objProd	= $get(^INMO(YM,idProd,1))
	}
	; HEVA-1030 ^^^^
		
	if $$$ISERR(sc) {
		set YRETVAL= $$$MakeStatus("alINV0003") ;"Bundle not found in storage"
		
	} else {
		set fltIssued		= $$$INIssueLineQtyIssued(pYFELD)
		set fltTotQtyIssued = $$GetTotalIssued(idLn) + fltIssued
		//SRxxxxx
		set idItem = objBundleStock.Item.%Id()
		set idLocn = objBundleStock.Storage.Location.%Id()
		
		if fltTotQtyIssued '= $$$INIssueLineQtyRequired(pYFELD) {
		;if (fltTotQtyIssued '= $$$INIssueLineQtyRequired(pYFELD)) && ( $$$INMOType(objProd)'=2)  { ; HEVA-1030
			set YRETVAL = $$$Text($listbuild("IN01222",fltTotQtyIssued,$$$INIssueLineQtyRequired(pYFELD),idLn))
		// "Total Quantity Issued (%1) has to be equal to the Unit Quantity (%2) for Line '%3'"
		
		} else {
			set fltQtyPlanned = ##class(alSOH.iSOHBalance).GetQtyPlanned(idItem,idLocn,objBundleStock.Storage.%Id(),objBundleStock.Bundle.%Id())
			
			//SRxxxxx
			if ((fltIssued) > (objBundleStock.QtyOnHand-fltQtyPlanned)) {
				if (fltQtyPlanned > 0) {
					set YRETVAL =  $$$Text($listbuild("alMOV0004",objBundleStock.QtyOnHand,fltQtyPlanned))
					// "Not enough Items in Storage (Quantity = %1)(Planned Quantity = %2)"
				
				} else {
					set YRETVAL =  $$$Text($listbuild("alMOV0003",objBundleStock.QtyOnHand))
				}   // "Not enough Items in Storage (Quantity = %1)"
			}
			//SRxxxxx
			set fltLocnQOH = ##class(alSOH.iSOHBalance).GetQOH(idItem,idLocn)
			if ((fltTotQtyIssued) > (fltLocnQOH)) {
				set YRETVAL =  $$$Text($listbuild("IN00701"))		
			} // "No quantity available at the sending stock location"
		}
	}
	quit
	
	
GetTotalIssued(pidLn)
	;-------------------------------------------------------------------------------
	; Get the Sum of all Issued quantity for a Line
	;
	; ByRef :
	;
	; Returns : 
	;
	; History :
	; 16-Aug-2010	GRF		SR16573: Correction to Edit Grid variable use & prefix
	; 30-Apr-2010	PPP		SR16573:Created
	;-------------------------------------------------------------------------------
	new fltQtyIssued,idDataLine,idGridRow,objIssueLine
	
	set fltQtyIssued = 0
	set idDataLine   = ""
	for {
		set idDataLine =  $order($$$WWWDATEN("REFERENCEROW",idDataLine))
		quit:idDataLine=""
		continue:(idDataLine=pidLn)                       //Skip current line
		continue:(idDataLine\1)'=(pidLn\1)
		
		set idGridRow = $get($$$WWWDATEN("REFERENCEROW",idDataLine,1))
		continue:($get($$$WWWDATEN("KILLEDRECORD",idGridRow))=$$$YES)
		
		set objIssueLine = $$GetYFELD^COMGridEdit31G(YFORM,idGridRow)		
		set fltQtyIssued = fltQtyIssued + $$$INIssueLineQtyIssued(objIssueLine)
	}
	quit fltQtyIssued
	
	/*
	new fltQtyIssued,idRecLine,idLn,strIssueLine
	
	set fltQtyIssued = 0
	set idRecLine   = ""
	
	for {
		set idRecLine =  $order($$$WWWDATEN("REFERENCEROW",idRecLine))
		quit:idRecLine=""
		
		set idLn = $translate(idRecLine,"x",".")
		continue:(idLn=pidLn)                       //Skip current line
		continue:(idLn\1)'=(pidLn\1)
		continue:($get($$$WWWDATEN("KILLEDRECORD",$get($$$WWWDATEN("REFERENCEROW",idRecLine,1))))=1)
		
		set strIssueLine = $$$GRIDGetYFELD(idRecLine)		
		set fltQtyIssued = fltQtyIssued + $$$INIssueLineQtyIssued(strIssueLine)
	}
	quit fltQtyIssued
	*/
OnBeforeDelete(pYKEY)
	;-------------------------------------------------------------------------------
	; This routine makes sure you cant delete the lines created by Sourcing
	; CAN delete copied lines.
	;
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 11-Aug-2010	PPP		SR16573: Created
	;-------------------------------------------------------------------------------
	if pYKEY '[ "." {		
		set Q = $$$QDontDelete_$$$Text("IN00464")
	} ; "Cannot delete a system generated line"
	quit
	
	
OnBeforeCopy(pidMOIssLine,&pobjMOIssLine)
	;-------------------------------------------------------------------------------
	; When a New line is added through Copy remove some properties already set.
	;
	; Params:
	; pidMORevLine -  Rev MO Line Id
	; pobjMORevLine - Rev MO Line record
	;
	; ByRefs: pobjMORevLine
	;
	; Returns: Nothing
	;
	; History:
	; 12-Aug-2010	PPP		SR16573: Created
	;-------------------------------------------------------------------------------
	set $$$INIssueLineQtyIssued(pobjMOIssLine)   = ""
	set $$$INIssueLineFromStorage(pobjMOIssLine) = ""
	set $$$INIssueLineBundle(pobjMOIssLine)      = ""	
	quit
	

]]></Routine>
</Export>