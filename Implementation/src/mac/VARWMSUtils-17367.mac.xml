<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARWMSUtils" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARWMSUtils
#include COMSYS

getListaModulos(pidLocal)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna a lista de módulos de um determinado local separados por ';'.
	;
    ; Histórico:
    ;	23-Set-2011	 Gustavo	Fix - incluíndo TO_NUMBER para ordenar corretamente
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:(pidLocal = "")
	
	new strListaModulos, idLocal, idEndereco, idModulo
	
	set strListaModulos = ";"
	
	&sql(DECLARE custorListaModulos CURSOR FOR
		 SELECT LocationName, StockLocation, $$ExtractModuloFromEnd^VARWMSUtils(StockLocation) as Modulo
		  INTO :idLocal, :idEndereco, :idModulo
		  FROM INLP
		 WHERE LocationName = :pidLocal
		   AND $length(StockLocation,'-') = 5
	  ORDER BY TO_NUMBER($$ExtractModuloFromEnd^VARWMSUtils(StockLocation))
	)
	
	&sql(open custorListaModulos)
   	quit:(SQLCODE)
   	
	for { &sql(fetch custorListaModulos)
		quit:(SQLCODE)
	
		if '$find(strListaModulos_";",";"_idModulo_";") {		
			set strListaModulos = strListaModulos_idModulo_";"
		}			
	}
	
	&sql(close custorListaModulos)
	
	quit strListaModulos
	

getListaRuas(pidLocal,pidModulo)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna a lista de ruas de um determinado local - módulo separadas por ';'.
	;
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
    quit:(pidLocal = "")
    
    new strListaRuas, idLocal, idEndereco, idRua 
    
    set strListaRuas = ";"
    
    &sql(DECLARE cursorListaRuas CURSOR FOR
         SELECT LocationName, StockLocation, $$ExtractRuaFromEnd^VARWMSUtils(StockLocation) as Rua
         INTO :idLocal, :idEndereco, :idRua
         FROM INLP
         WHERE LocationName = :pidLocal
           AND $$ExtractModuloFromEnd^VARWMSUtils(StockLocation) = :pidModulo
           AND $length(StockLocation,'-') = 5
      ORDER BY $$ExtractRuaFromEnd^VARWMSUtils(StockLocation)
    )
    
    &sql(open cursorListaRuas)
    quit:(SQLCODE)
    
    for { &sql(fetch cursorListaRuas)
        quit:(SQLCODE)
        
        if '$find(strListaRuas_";",";"_idRua_";") {     
            set strListaRuas = strListaRuas_idRua_";"
        }           
    }
    
    &sql(close cursorListaRuas)
    
    quit strListaRuas
    
getListaPredios(pidLocal,pidModulo,pidRua,pLado,pView="MODULO")
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna a lista de prédios de um determinado módulo - módulo separados por ';'.
	;
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
    quit:( (pidLocal = "") || (pidModulo = "") || (pidRua = "") || (pLado = "") )
   
    new order, rsListaPredios, listPrediosSQL, strListaPredios, idLocal, idEndereco, idPredio
    
    set strListaPredios = ";"
    
    if (pView = "RUA") {
        if pLado = "IMPAR" set order = "desc"
        if pLado = "PAR"   set order = "asc"
    } else {
	    set order = ""
    }
    
    set rsListaPredios = ##class(%ResultSet).%New()  ;Create Result Set Object
    
    set listPrediosSQL = "SELECT LocationName, StockLocation, $$ExtractPredioFromEnd^VARWMSUtils(StockLocation) as Predio"
    set listPrediosSQL = listPrediosSQL_" FROM INLP"
    set listPrediosSQL = listPrediosSQL_" WHERE LocationName = '"_pidLocal_"'"
    set listPrediosSQL = listPrediosSQL_" AND $$ExtractModuloFromEnd^VARWMSUtils(StockLocation) = '"_pidModulo _"'"
    set listPrediosSQL = listPrediosSQL_" AND $$ExtractRuaFromEnd^VARWMSUtils(StockLocation) = "_pidRua
    set listPrediosSQL = listPrediosSQL_" AND $length(StockLocation,'-') = 5"
    set listPrediosSQL = listPrediosSQL_" ORDER BY $$ExtractPredioFromEnd^VARWMSUtils(StockLocation) "_order
    
    do rsListaPredios.Prepare(listPrediosSQL)  ;Prepare Query
    do rsListaPredios.Execute()  ;Execute Query    

    while (rsListaPredios.Next()) {
            
        set idLocal    = rsListaPredios.GetData(1)
        set idEndereco = rsListaPredios.GetData(2)
        set idPredio   = rsListaPredios.GetData(3)
  
        if (pLado = "IMPAR") continue:(idPredio#2=0)
        if (pLado = "PAR")   continue:(idPredio#2=1)
        
        if '$find(strListaPredios_";",";"_idPredio_";") {       
            set strListaPredios = strListaPredios_idPredio_";"
        }           
    }
    
    do rsListaPredios.Close()

    quit strListaPredios
    
getQtyAndares(pidLocal,pidModulo,pidRua,pidPredio=1)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna a quantidade de andares existentes no prédio.
	;
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
 	quit:( (pidLocal = "") || (pidModulo = "") || (pidRua = "") )
	
	new qtyAndares, idEndereco, idModulo, idRua, idPredio, idApartamento
	
	set qtyAndares = 0
	
	$$$Order3(^INLP,YM,pidLocal,idEndereco)
		
		//Somente endereços com 5 níveis
		continue:($length(idEndereco,"-") '= 5)
		
		set idModulo = $piece(idEndereco,"-",1)
		continue:(idModulo '= pidModulo)
		
		set idRua = $piece(idEndereco,"-",2)
		continue:(idRua '= pidRua)
		
		set idPredio = $piece(idEndereco,"-",3)
		continue:(idPredio '= pidPredio)
				
		// Considerando somente o primeiro apartamento de cada andar
		set idApartamento = $piece(idEndereco,"-",5)
		continue:(idApartamento '= 1)
		
		set qtyAndares = $i(qtyAndares)
	
	$$$End
	
	quit qtyAndares
	
getQtyAptosPredioAndar(pidLocal,pidModulo,pidRua,pidPredio,pidAndar=1)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna a quantidade de apartamentos existentes em um determinado prédio e
    ; 	andar.
	;
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidModulo = "") || (pidRua = "") || (pidPredio = "") )
	
	new qtyAptosAndar, idEndereco, idModulo, idRua, idPredio, idAndar
	
	set qtyAptosAndar = 0
	
	$$$Order3(^INLP,YM,pidLocal,idEndereco)
		
		//Somente endereços com 5 níveis
		continue:($length(idEndereco,"-") '= 5)
		
		set idModulo = $piece(idEndereco,"-",1)
		continue:(idModulo '= pidModulo)
		
		set idRua = $piece(idEndereco,"-",2)
		continue:(idRua '= pidRua)
		
		set idPredio = $piece(idEndereco,"-",3)
		continue:(idPredio '= pidPredio)
		
		set idAndar = $piece(idEndereco,"-",4)
		continue:(idAndar '= pidAndar)
		
		set qtyAptosAndar = $i(qtyAptosAndar)
	
	$$$End
	
	quit qtyAptosAndar
	
getQtyColunas(pidLocal,pidModulo,pidRua,pstrListaPredios)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna a quantidade de colunas a serem construídas em uma lista de prédios
    ;	pertencente a um determinado lado de uma rua. O valor pstrListaPredios é
    ;	obtido por meio do método getListaPredios^VARWMSUtils.
	;
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidModulo = "") || (pidRua = "") || (pstrListaPredios = "") )
	
	new cntPredio, numPredio, qtyPredios, qtyAptos, paramQtyAptosAndar
	
	set qtyPredios = 0	
	set paramQtyAptosAndar = $piece($get(^VAREnderecos(YM,pidLocal,pidModulo,1)),Y,5)	
	
	for cntPredio = 1:1:$length(pstrListaPredios,";") {
		set numPredio = $piece(pstrListaPredios,";",cntPredio)
		continue:(numPredio = "")

		;Caso já tenha o parâmetro definido, fica mais rápida a consulta
		if (paramQtyAptosAndar > 0) {
			set qtyAptos = paramQtyAptosAndar
		} else {
			;Calcula o número de apartamentos utilizando como base o primeiro andar
			set qtyAptos = $$getQtyAptosPredioAndar^VARWMSUtils(pidLocal,pidModulo,pidRua,numPredio,1)
		}
		
		set qtyPredios = qtyPredios + qtyAptos
	}
	
	quit qtyPredios
	
getWidthEsteira(pidLocal,pidModulo,pidRua)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna o comprimento da esteira da área de transferência, com base na
    ;	quantidade de colunas dos lados ímpar e par da rua.
	;
    ; Histórico:
    ;	31-Jan-2011	 Gustavo	Alterado para utilizar cache (melhorias de performace)
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidModulo = "") || (pidRua = "") )	
	
	new strListPrediosIMPAR, qtyColunasIMPAR, strListPrediosPAR, qtyColunasPAR, vlueWidthEsteira
	
	// Tentando primeiro obter a informação de quantidade de colunas do cache
	if $data(^VARTempWMSCacheQtyColunas(YBED,"IMPAR")) {	
		set qtyColunasIMPAR = $get(^VARTempWMSCacheQtyColunas(YBED,"IMPAR"))
	
	} else {	
		set strListPrediosIMPAR = $$getListaPredios(pidLocal,pidModulo,pidRua,"IMPAR","RUA")
		set qtyColunasIMPAR     = $$getQtyColunas(pidLocal,pidModulo,pidRua,strListPrediosIMPAR)
	}

	if $data(^VARTempWMSCacheQtyColunas(YBED,"PAR")) {	
		set qtyColunasPAR = $get(^VARTempWMSCacheQtyColunas(YBED,"PAR"))
	
	} else {
		set strListPrediosPAR = $$getListaPredios(pidLocal,pidModulo,pidRua,"PAR","RUA")	
		set qtyColunasPAR     = $$getQtyColunas(pidLocal,pidModulo,pidRua,strListPrediosPAR)
	}
	
	set vlueWidthEsteira = ( ( (qtyColunasIMPAR + qtyColunasPAR) ) * 42) + 5 //42 = estimated cell width, 5 = área de escape	
	
	quit $$Ceiling^COMUtilNum(vlueWidthEsteira)


getCategAlertaProdEnd(pidLocal,pidEndereco,pModo="Produto")
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna a primeira categoria de alerta dos produtos em um endereço de armazenagem.
	;
    ; Histórico:
    ;	27-Set-2011	 Gustavo	Atualizado para funcionar com paletes
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidEndereco = "") ) ""
	
	new categAlerta, idCategAlerta, idItem, idLocal, idEndereco, rsCategAlerta, categAlertaSQL
	
	set categAlerta = ""
	
    set rsCategAlerta = ##class(%ResultSet).%New()  ;Create Result Set Object
    
    set categAlertaSQL = "SELECT alSOH.dBundleStock.Item,"
    set categAlertaSQL = categAlertaSQL_" alSOH.dBundleStock.Storage->Location,"
    set categAlertaSQL = categAlertaSQL_" alSOH.dBundleStock.Storage->Physical->Code"
    set categAlertaSQL = categAlertaSQL_" FROM alSOH.dBundleStock"
    set categAlertaSQL = categAlertaSQL_" WHERE alSOH.dBundleStock.Storage->Location = '"_pidLocal_"'"
    
    if (pModo = "Produto") {
    	set categAlertaSQL = categAlertaSQL_" AND alSOH.dBundleStock.Storage->Code = '"_pidEndereco_"'"
    
    } elseif (pModo = "Palete") {
    	set categAlertaSQL = categAlertaSQL_" AND alSOH.dBundleStock.Storage->Physical->Code = '"_pidEndereco_"'"
    }
    
    set categAlertaSQL = categAlertaSQL_" GROUP BY alSOH.dBundleStock.Item"
	
    do rsCategAlerta.Prepare(categAlertaSQL) ;Prepare Query
    do rsCategAlerta.Execute()  			 ;Execute Query    

    while (rsCategAlerta.Next()) {
		set idProduto = rsCategAlerta.GetData(1)
				
		set categAlerta = $piece($get(^INART(YM,idProduto,1)),Y,315) //Dangerous Goods Category
		quit:(categAlerta '= "")		
    }
 
    do rsCategAlerta.Close()
    
    quit categAlerta
    
getImgBox(pidCategoriaAlerta="",pModo="Produto")    
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna a imagem definida para uma categoria de alerta	
	;
	;   Imagem padrão
	;   	0 - Caixa vazia
	;
	;	Imagens de alerta
	;		1 - Inflamável  |   2 - Explosivo        |   3 - Ácido
	;		4 - Tóxico		|   5 - Risco biológico  |   6 - Radioativo
	;		7 - Corrosivo   |   8 - Asfixiante       |   9 - Irritante
	;
    ; Histórico:
    ;	28-Set-2011	 Gustavo	Atualizado para considerar o modo Palete.
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	new imgAlerta	
	if pidCategoriaAlerta = "" set pidCategoriaAlerta = 0
	
	if (pModo = "Produto") {
	
		set imgAlerta = $case(pidCategoriaAlerta,0:"boxItem.png", 			1:"boxItemInflamavel.png",
											     2:"boxItemExplosivo.png",  3:"boxItemAcido.png",
										     	 4:"boxItemToxico.png",     5:"boxItemBiohazard.png",
										     	 6:"boxItemRadioativo.png", 7:"boxItemCorrosivo.png",
										     	 8:"boxItemAsfixiante.png", 9:"boxItemIrritante.png")	
	}
	
	elseif (pModo = "Palete") {
		
		set imgAlerta = $case(pidCategoriaAlerta,0:"boxPalete.png", 		   1:"boxPaleteInflamavel.png",
											     2:"boxPaleteExplosivo.png",   3:"boxPaleteAcido.png",
										     	 4:"boxPaleteToxico.png",      5:"boxPaleteBiohazard.png",
										     	 6:"boxPaleteRadioativo.png",  7:"boxPaleteCorrosivo.png",
										     	 8:"boxPaleteAsfixiante.png",  9:"boxPaleteIrritante.png")
	}
	
	
	quit imgAlerta

getBkgColorAlerta(pidCategoriaAlerta="",pidLocal="",pidEndereco="",pModo="Produto")
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna a cor definida para uma categoria de alerta	
	;
	;   Cores utilizadas
	;   	#af8944 (brown box)
	;  		#ff2626 (red)
	;		#66cc33 (green)
	;  		#ffff19 (yellow)
	;		#ff7d00 (orange)
	;		cyan	(cyan)   - para produtos pesquisados pelo usuário
	;
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	new bkgColor, searchItem, isSearchItemInStorage
	
	if pidCategoriaAlerta = "" set pidCategoriaAlerta = 0
	
	set bkgColor = $case(pidCategoriaAlerta,0:"#af8944", 1:"#ff2626",
										    2:"#ff2626", 3:"#ffff19",
										    4:"#ffff19", 5:"#66cc33",
										    6:"#ffff19", 7:"#ffff19",
										    8:"#ffff19", 9:"#ff7d00",
										   	99:"cyan")
	
	//Caso tenha pesquisado pelo produto e ele esteja armazenado no endereço, utiliza cor de destaque	
	if (pidEndereco '= "") {
		
		set searchItem = $piece($get(^VARTempWMSSearchItem(YM,YBED)),Y,1)		
		if (searchItem '= "") {
			
			if (pModo = "Palete") {	
				set isSearchItemInStorage = $$isItemInStorageInPallet^VARWMSUtils(pidLocal,pidEndereco,searchItem)			
			} else {
				set isSearchItemInStorage = $$isItemInStorage^VARWMSUtils(pidLocal,pidEndereco,searchItem)
			}
		
			if (isSearchItemInStorage = $$$YES) {
				set bkgColor = "cyan"
			}
		}
	}
	
	quit bkgColor


BuildFormLink(pidRedirectForm,pKey)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Contrói o link que é utilizado na navegação entre os forms
	;
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:(pidRedirectForm = "") ""

	//quit ##class(COM.fwk.ui.html.LinkBuilder).buildFormLink("", "titulo", "", pidRedirectForm, pKey, "", YFORM, YBACK, "", "", "").getHref()
	quit YAKTION_"EP=WWWFORM&YFORM="_pidRedirectForm_"&YUCI="_YUCI_"&YBED="_YBED_"&YM="_YM_"&YUSER="_YUSER_"&YKEY="_pKey	
	
VerificaModuloExiste(pidLocal,pidModulo)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Verifica se o módulo existe no local
	;
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidModulo = "") )
	
	&sql(SELECT TOP 1 StockLocation
		 FROM INLP
		 WHERE LocationName = :pidLocal
		   AND $$ExtractModuloFromEnd^VARWMSUtils(StockLocation) = :pidModulo
		   AND $length(StockLocation,'-') = 5
	)

	if (SQLCODE = 0) {
		quit $$$YES
	}

	quit $$$NO

VerificaRuaExiste(pidLocal,pidModulo,pidRua)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Verifica se a rua existe no local / módulo
	;
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidModulo = "") || (pidRua = "") )
	
	&sql(SELECT TOP 1 StockLocation
		 FROM INLP
		 WHERE LocationName = :pidLocal
		   AND $$ExtractModuloFromEnd^VARWMSUtils(StockLocation) = :pidModulo
		   AND $$ExtractRuaFromEnd^VARWMSUtils(StockLocation) = :pidRua
		   AND $length(StockLocation,'-') = 5
	)

	if (SQLCODE = 0) {
		quit $$$YES
	}

	quit $$$NO
	
getModuloAnterior(pidLocal,pidModulo)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna o módulo anterior.
	;
    ; Histórico:
    ; 	03-Out-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidModulo = "") )
	
	new idModulo
	set idModulo = ""
	
	&sql(SELECT TOP 1 $$ExtractModuloFromEnd^VARWMSUtils(StockLocation)
		 INTO idModulo
		 FROM INLP
		 WHERE LocationName = :pidLocal
		 AND TO_NUMBER($$ExtractModuloFromEnd^VARWMSUtils(StockLocation)) < TO_NUMBER(:pidModulo)
		 AND $length(StockLocation,'-') = 5
		 GROUP BY $$ExtractModuloFromEnd^VARWMSUtils(StockLocation) 
		 ORDER BY TO_NUMBER($$ExtractModuloFromEnd^VARWMSUtils(StockLocation)) DESC
	)
	
	if (SQLCODE '= 0) {
		quit ""
	}	
	
	quit idModulo

getProximoModulo(pidLocal,pidModulo)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna o próximo módulo.
	;
    ; Histórico:
    ; 	03-Out-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidModulo = "") )
	
	new idModulo
	set idModulo = ""
	
	&sql(SELECT TOP 1 $$ExtractModuloFromEnd^VARWMSUtils(StockLocation)
		 INTO idModulo
		 FROM INLP
		 WHERE LocationName = :pidLocal
		 AND TO_NUMBER($$ExtractModuloFromEnd^VARWMSUtils(StockLocation)) > TO_NUMBER(:pidModulo)
		 AND $length(StockLocation,'-') = 5
		 GROUP BY $$ExtractModuloFromEnd^VARWMSUtils(StockLocation) 
		 ORDER BY TO_NUMBER($$ExtractModuloFromEnd^VARWMSUtils(StockLocation)) ASC
	)
	
	if (SQLCODE '= 0) {
		quit ""
	}
	
	quit idModulo
		
getMotivoEndBloqueado(pidLocal,pidStorage)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna o motivo do bloqueio do endereço de armazenagem
	;
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidStorage = "") ) ""
	
	new idMotivo, descMotivo
	set idMotivo   = $piece($get(^INLP(YM,pidLocal,pidStorage,1)),Y,20)	
	set descMotivo = ""
	
	if (idMotivo '= "") {
		set descMotivo = $piece($get(^INPARA(YM,"LPSPERRGRUND","PT",idMotivo,1)),Y,1)
	} else {
		set descMotivo = "motivo não identificado."	
	}
							
	quit descMotivo
	
isItemInStorage(pidLocal,pidEndereco, pidItem)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna (boolean) se um produto está armazenado em um endereço de armazenagem.
	;
    ; Histórico:
    ; 	07-Jul-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidEndereco = "") || (pidItem = "") ) $$$NO
	
	&sql(SELECT TOP 1 alSOH.dBundleStock.Item
		 FROM alSOH.dBundleStock
		 WHERE alSOH.dBundleStock.Item = :pidItem 
		   AND alSOH.dBundleStock.Storage->Location = :pidLocal
		   AND alSOH.dBundleStock.Storage->Code = :pidEndereco
		   AND +alSOH.dBundleStock.QtyOnHand > 0
	)

	if (SQLCODE = 0) {
		quit $$$YES
	}	
	
	quit $$$NO
	
isItemInStorageInPallet(pidLocal,pidEndereco, pidItem)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna (boolean) se um produto está armazenado em um palete em um endereço
    ;   de armazenagem.
	;
    ; Histórico:
    ; 	14-Set-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidEndereco = "") || (pidItem = "") ) $$$NO
	
	&sql(SELECT TOP 1 alSOH.dBundleStock.Item
		 FROM alSOH.dBundleStock
		 WHERE alSOH.dBundleStock.Item = :pidItem
		   AND alSOH.dBundleStock.Storage->Location = :pidLocal
		   AND alSOH.dBundleStock.Storage->Physical->Code = :pidEndereco		   
		   AND +alSOH.dBundleStock.QtyOnHand > 0
	)

	if (SQLCODE = 0) {
		quit $$$YES
	}	
	
	quit $$$NO	
	
isAnyPalletInStorage(pidLocal,pidEndereco)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Verifica se há algum palete com produtos no endereço de armazenagem.
	;
    ; Histórico:
    ; 	14-Set-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidEndereco = "") ) $$$NO
	
	&sql(SELECT TOP 1 alSOH.dBundleStock.Item
		 FROM alSOH.dBundleStock
		 WHERE alSOH.dBundleStock.Storage->Location = :pidLocal
		   AND alSOH.dBundleStock.Storage->Physical->Code = :pidEndereco
		   AND +alSOH.dBundleStock.QtyOnHand > 0
	)
	
	if (SQLCODE = 0) {
		quit $$$YES
	}	
	
	quit $$$NO
	
getPalletInStorage(pidLocal,pidEndereco)	
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Retorna o código do palete que está armazenado em um endereço de armazenagem
    ;   * Restrição de uso: 01 posição palete, ou seja, 01 palete por M-R-P-A-A. *
	;
    ; Histórico:
    ; 	14-Set-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
	quit:( (pidLocal = "") || (pidEndereco = "") ) $$$NO	
	
	new idPalete
	
	&sql(SELECT TOP 1 alSOH.dBundleStock.Storage->Code
		   INTO idPalete
    	   FROM alSOH.dBundleStock
       	  WHERE alSOH.dBundleStock.Storage->Location = :pidLocal
       	    AND alSOH.dBundleStock.Storage->Physical->Code = :pidEndereco
    )
    
	if (SQLCODE '= 0) {
		quit ""
	}
    
    quit idPalete
	
ExtractModuloFromEnd(pidStorage)
	quit:(pidStorage = "") ""
	quit $piece(pidStorage,"-",1)
	
ExtractRuaFromEnd(pidStorage)
	quit:(pidStorage = "") ""
	quit $piece(pidStorage,"-",2)
	
ExtractPredioFromEnd(pidStorage)
	quit:(pidStorage = "") ""
	quit $piece(pidStorage,"-",3)
	
ExtractAndarFromEnd(pidStorage)
	quit:(pidStorage = "") ""
	quit $piece(pidStorage,"-",4)
	
ExtractApartamentoFromEnd(pidStorage)
	quit:(pidStorage = "") ""
	quit $piece(pidStorage,"-",5)
	
	
CacheEnderecosComPaleteRua(pidLocal,pidModulo,pidRua)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Guarda em uma global temporária os endereços físicos que contém algum palete
    ;   dentro. Esta rotina foi construída para melhorar a performance do WMS e
    ;	substituir o método isAnyPalletInStorage^VARWMSUtils.
	;
    ; Histórico:
    ; 	31-Jan-2011  Gustavo	Criado
    ;-------------------------------------------------------------------------------
    quit:( (pidLocal = "") || (pidModulo = "") || (pidRua = "") )
    
    new prefixEndereco, idEndereco, idProduto, idPalete, categAlerta, objTemp, strAlerta
    
    set prefixEndereco = pidModulo_"-"_pidRua_"%"       
    
    &sql(DECLARE cursorEnderecos CURSOR FOR    
    	  SELECT DISTINCT alSOH.dBundleStock.Storage->Physical->Code, alSOH.dBundleStock.Item, 
    	  				  alSOH.dBundleStock.Storage->Code
    	    INTO :idEndereco, :idProduto, :idPalete
    	    FROM alSOH.dBundleStock
    	   WHERE alSOH.dBundleStock.Storage->Location = :pidLocal
    AND alSOH.dBundleStock.Storage->Physical->Code like :prefixEndereco
    AND +alSOH.dBundleStock.QtyOnHand > 0
    
    )
    
    &sql(open cursorEnderecos)
    quit:(SQLCODE)
    
    for { &sql(fetch cursorEnderecos)
        quit:(SQLCODE)
        	    
	    set categAlerta = $piece($get(^INART(YM,idProduto,1)),Y,315) //Dangerous Goods Category
	    
	    ; Insere as categorias de alerta presentes no endereço em questão	    
		set objTemp   = $get(^VARTempWMSCacheEndereco(YBED,idEndereco))
		set strAlerta = $piece(objTemp,Y,1)
		
		if (strAlerta = "") {
			set ^VARTempWMSCacheEndereco(YBED,idEndereco) = categAlerta_Y_idPalete
		
		} else {
			if (categAlerta '= "") {
				set ^VARTempWMSCacheEndereco(YBED,idEndereco) = strAlerta_";"_categAlerta_Y_idPalete
			} else {
				set ^VARTempWMSCacheEndereco(YBED,idEndereco) = strAlerta_Y_idPalete
			}
		}
    }

    &sql(close cursorEnderecos)
    
    quit
]]></Routine>
</Export>