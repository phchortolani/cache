<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INAEPSendPR" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INAEPSendPR
 
 
 // This routine is called at INAUF Form
checkSendThisReq(YKEY="")
    /*-------------------------------------------------------------------------------
    ; Method Usage
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
    ; 18-Jan-2006	30		SR12003: Give YKEY a default value
    ;-------------------------------------------------------------------------------*/
	;
	set YQ = '+$piece($$checkSendRequisition(YKEY), Y, 1)
	
	if $$checkRequisitionSent(YKEY) {
		set $piece(YVOR, Y, 23) = 5 // Set Form Read-Only
	}
 
	quit
 
 
 // This routine is called at INAUF Form
sendThisReq(YKEY)
	new result, alertmessage
 
	quit:(YKEY = "")
	
	set result = $$sendRequisition(YKEY)
	if '$piece(result, Y, 1) {
		set alertMessage = $piece(result, Y, 2)
	} else {
		set alertMessage = $$^WWWTEXT("INAEP00001")_".\n\n"
 
		// Display Note if DCM is running
		if $$GetStart^COMSchedule() {
			set alertMessage = alertMessage_
			                   $$^WWWTEXT("INAEP00019")_"\n"
		} else {
			set alertMessage = alertMessage_
			                   $$^WWWTEXT("INAEP00020")_"\n"
		}
	}
 
	;do ^WWWFORM
	;quit "<script> if (alert('"_alertMessage_"')); </script>\n"
	quit $piece(result, Y, 1)_Y_alertMessage
 
 // Disable only if this Requisition has already been sent or if this is not a Requisition.
checkEnableDisableSendRequisition(order)
 
	set YQ = 1
 	;quit 0 ;SR13741 disabled until AEP is included in Suite build.
	quit:order="" 0
	quit:'$data(^INAUF(YM,order,1)) 0
 
	// Has the requisition been sent?
	new hasBeenSent, isRequisition
	set hasBeenSent = $$hasTheRequisitionBeenSent(order)
 
	new req
	set req = $get(^INAUF(YM, order, 1))
	set isRequisition = ($piece(req, Y, 2) = 5)	
 
	quit:(hasBeenSent && isRequisition) 0
	set YQ = 0		
	
	quit 1
	
	
hasTheRequisitionBeenSent(order)
	quit:order="" 0
	quit:'$data(^INAUF(YM,order,1)) 0
 
	new req
	set req = $get(^INAUF(YM, order, 1))
	quit:(($piece(req,Y,266) = " ") || ($piece(req,Y,266) = "")) 0
 
	quit 1
	
	
 // In order to send a Requisition somethings should be checked:
 // 
 // - The Requisition should exist;
 // - The Requisition must not have been sent;
 // - It should have Line Items;
checkSendRequisition(nextReq)
    /*-------------------------------------------------------------------------------
    ; Method Usage
    ;
    ; Params:
    ;
    ; ByRefs:
    ;
    ; Returns:
    ;
    ; History:
    ; 18-Jan-2006	shobby	SR12003: Incorrect variable used.
    ;-------------------------------------------------------------------------------*/
	quit:(nextReq="") 0_Y_$$^WWWTEXT("INAEP00002")
	
	// Checking if the Requisition exists.
	quit:($data(^INAUF(YM,nextReq,1)) = 0) 0_Y_$$^WWWTEXT("INAEP00010")
 
	new req
	set req = $get(^INAUF(YM,nextReq,1))
 
	// 2: type (5 = Requisition)
	// Is this order a requisition.
	quit:($piece(req, Y, 2) '= 5) 0_Y_$$^WWWTEXT("INAEP00013")
 
	// 266: date - ref
	// Has the requisition been sent?
	quit:$$hasTheRequisitionBeenSent(nextReq) 0_Y_$$^WWWTEXT("INAEP00011") ;SR12003
 
	// Check if it has Line Items
	quit:('$data(^INAUFP(YM, nextReq))) 0_Y_$$^WWWTEXT("INAEP00015")
	
	quit 1_Y_"OK"
	
	
 // This method should be called only when the the send button of the INAUF form is pressed,
 // using the HyperEvent.
checkAndSend(order)
	new command,readyToSend
	
	set readyToSend = $$checkSendRequisition(order)
	if $piece(readyToSend,Y,1) {
		new result
		set result = $$sendThisReq(order)
 
		set command = "alert("""_$piece(result, Y, 2)_""");"
		
		// If the requisition has been sent, we should refresh the page.
		if $piece(result,Y,1) {
			new refreshLink
			set refreshLink = ""
			do startRedirectStdout()
			do createNewFormLink("INAUF",order,"",YBACK,"")
			do stopRedirectStdout(.refreshLink)
			
			set ^FrankDebug("Refresh Link 1") = refreshLink
			
			set command = command_"window.location = """_refreshLink_""";"
		}
	} else {
		set command = "alert("""_$piece(readyToSend, Y, 2)_""");"
	}
 
	set ^FrankDebug("checkAndSend") = command
	quit "#FUNCTION~"_command
	
	
InsideButtonLine()
	&html<
	<script language="Javascript">
	function sendOnClick() {
		//alert('#(YKEY)#');
		retval = EventValue('#(YUCI)#','#(YUSER)#','#(YFORM)#','FIX','AEPRAServerCall','#(YKEY)#',6,'INAEPSendPR~checkAndSend~1');
	}
	</script>
	>
	quit
	
	
checkRequisitionSent(nextReq)
	
	quit:(nextReq = "") 0
	quit:($data(^INAUF(YM, nextReq, 1)) = 0) 0
	
	new req
	set req = $get(^INAUF(YM, nextReq, 1))
	quit:(req = "") 0
	
	quit:(($piece(req, Y, 2) = 5) &&
	      (($piece(req, Y, 265) = 1) ||
	       (($piece(req, Y, 266) '= " ") && ($piece(req, Y, 266) '= "")))) 1
	
	quit 0
 
 
 // Send Requisition to the default site
 //	OK: 1~<OK>
 //	Error: 0~<message>
sendRequisition(nextReq)
	new strResult, req, supplierParams, supplierID, destCo, destSite,
	    result
	
	set strResult = $$checkSendRequisition(nextReq)
	quit:($piece(strResult, Y, 1) = 0) strResult
	
	set req = $get(^INAUF(YM, nextReq, 1))
	
	// AEP Supplier parameters
	quit:('$data(^INAEPParameters(YM, YM, 1))) 0_Y_$$^WWWTEXT("INAEP00014")
	set supplierParams = ^INAEPParameters(YM, YM, 1)
	
	set supplierID = $piece(supplierParams, Y, 1)
	quit:(supplierID = "") 0_Y_$$^WWWTEXT("INAEP00014")
	
	set destCo = $piece(supplierParams, Y, 2)
	quit:(destCo = "") 0_Y_$$^WWWTEXT("INAEP00002")
		
 
	new locationMaster
	set locationMaster = $get(^WWW0121(0, YM, $piece(req, Y, 6), 1))
 
	new companyName1, companyName2, street, zipcode, city, state
	set companyName1 = $piece(locationMaster, Y, 2)
	set companyName2 = $piece(locationMaster, Y, 3)
	set street       = $piece(locationMaster, Y, 4)
	set zipcode      = $piece(locationMaster, Y, 6)
	set city         = $piece(locationMaster, Y, 8)
	set state        = $piece(locationMaster, Y, 10)
	
	new address
	set address = ""
	if (companyName1'="") set address = address_companyName1_$char(13, 10)
	if (companyName2'="") set address = address_companyName2_$char(13, 10)
	if (street'="")       set address = address_street_$char(13, 10)
	if (zipcode'="")      set address = address_"Zipcode: "_zipcode_$char(13, 10)
	if (city'="")         set address = address_city_$char(13, 10)
	if (state'="")        set address = address_state_$char(13, 10)
	
 
	// Assembling the return data
 
	set result = ""
	;set result = "<?xml version=""1.0"" encoding=""ISO-8859-1""?>"
	set result = result_"<DATA>"
	set result = result_"<REQUISITION>"
	set result = result_"<REQ_NUMBER>"_nextReq_"</REQ_NUMBER>"
	set result = result_"<REQ_DATE>"_$piece(req, Y, 4)_"</REQ_DATE>"
	set result = result_"<REQ_TIME>"_$piece(req, Y, 5)_"</REQ_TIME>"
	set result = result_"<REQ_LOCATION_IN_THE_SOURCE>"_$piece(req, Y, 6)_"</REQ_LOCATION_IN_THE_SOURCE>"
	set result = result_"<REQ_LOCATION_NAME_IN_THE_SOURCE>"_$piece(locationMaster,Y,1)_"</REQ_LOCATION_NAME_IN_THE_SOURCE>"
	set result = result_"<REQ_REQDELDATE>"_$piece(req, Y, 19)_"</REQ_REQDELDATE>"
	set result = result_"<REQ_SENTBY_NUMBER>"_$piece(req, Y, 14)_"</REQ_SENTBY_NUMBER>"
 
	new userName
	set userName = ""
	if ($piece(req, Y, 14) '= "") && $data(^WWW013(0, $piece(req, Y, 14), 1)) {
		set userName = $piece($get(^WWW013(0, $piece(req, Y, 14), 1)), Y, 1)
	}
	set result = result_"<REQ_SENTBY_NAME>"_userName_"</REQ_SENTBY_NAME>"
	set result = result_"<REQ_DELDATE>"_$piece(req, Y, 24)_"</REQ_DELDATE>"
	set result = result_"<REQ_DELTIME>"_$piece(req, Y, 25)_"</REQ_DELTIME>"
	set result = result_"<REQ_PRIORITY_IN_THE_SOURCE>"_$piece(req, Y, 249)_"</REQ_PRIORITY_IN_THE_SOURCE>"
 
	new priorityText
	set priorityText = ""
	if $piece(req, Y, 249) '= "" {
		set priorityText = $piece($get(^WWW101(0, "PRIORITAET", SPRACHE, $piece(req, Y, 249), 1)), Y, 1)
	}
	set result = result_"<REQ_PRIORITY_TEXT_IN_THE_SOURCE>"_priorityText_"</REQ_PRIORITY_TEXT_IN_THE_SOURCE>"
	set result = result_"<REQ_ADDRESS>"_address_"</REQ_ADDRESS>"
	set result = result_"</REQUISITION>"
 
 
	// Grab the Line Items
 
	new lineNo, lineItem, fistItem, itemAtSupplier, itemNumber
	set firstItem = 1
	set lineItem = ""
	set lineNo = ""
 
	do {
		set lineNo = $order(^INAUFP(YM, nextReq, lineNo))
		quit:(lineNo = "")
 
		// If first item, build the XML header
 
		set lineItem = $get(^INAUFP(YM, nextReq, lineNo, 1))
		quit:(lineItem = "") // Problem at the Database
		if firstItem = 1 { 
			set result = result_"  <LINE_ITEMS>"
			set firstItem = 0
		}
 
		set result = result_"<LINE_NUMBER>"_lineNo_"</LINE_NUMBER>"
		set result = result_"<ITEM_NAME>"_$piece(lineItem, Y, 1)_"</ITEM_NAME>"
		
		// Do item code mapping
 
		set itemNumber = $$mapItemCodeBeforeSendingToSupplier(supplierID, $piece(lineItem, Y, 4))
		if itemNumber = 0 {
			set itemNumber = $piece(lineItem, Y, 4)
		}
		set result = result_"<ITEM_NUMBER>"_itemNumber_"</ITEM_NUMBER>"
 
		set result = result_"<ITEM_GROUP>"_$piece(lineItem, Y, 30)_"</ITEM_GROUP>"
 
		// Do quantity conversion: itemCode-qty-qtyUnit
 
		set strResult = $$mapItemQuantityToSupplier($piece(lineItem, Y, 4), $piece(lineItem, Y, 5), $piece(lineItem, Y, 40), supplierID)
		quit:($piece(strResult, Y, 1) = 0)
 
		if ($piece(strResult, Y, 2) '= 0) {
			set $piece(lineItem, Y, 5) = $piece(strResult, Y, 2)
			set $piece(lineItem, Y, 40) = $piece(strResult, Y, 3)
		}
		
		set result = result_"<ITEM_REQDELDATE>"_$piece(lineItem, Y, 19)_"</ITEM_REQDELDATE>"
		set result = result_"<ITEM_QTY>"_$piece(lineItem, Y, 5)_"</ITEM_QTY>"
		set result = result_"<ITEM_QTYUNIT>"_$piece(lineItem, Y, 40)_"</ITEM_QTYUNIT>"
				
		// Send supplier ID if selected and textual data if necessary
 
		new supplierData
		set supplierData = ""
		
		if ($piece(lineItem, Y, 12) '= "") {
			if +$piece(supplierParams, Y, 5) {
				set strResult = $$buildSupplierData($piece(lineItem, Y, 12))
				quit:($piece(strResult, Y, 1) = 0)
				
				set supplierData = $piece(strResult, Y, 2)
				set result = result_"<ITEM_SUPPLIERID></ITEM_SUPPLIERID>"
				set result = result_"<ITEM_SUPPLIERIDATSOURCE>"_supplierData_"</ITEM_SUPPLIERIDATSOURCE>"
			} else {
				set result = result_"<ITEM_SUPPLIERID>"_$piece(lineItem, Y, 12)_"</ITEM_SUPPLIERID>"
				set result = result_"<ITEM_SUPPLIERIDATSOURCE></ITEM_SUPPLIERIDATSOURCE>"
			}
		} else {
			set result = result_"<ITEM_SUPPLIERID></ITEM_SUPPLIERID>"
			set result = result_"<ITEM_SUPPLIERIDATSOURCE></ITEM_SUPPLIERIDATSOURCE>"
		}
	} while 1
	
	quit:(firstItem = 1) 0_Y_$$^WWWTEXT("INAEP00015")
	quit:($piece(strResult, Y, 1) = 0) strResult
 
	set result = result_"</LINE_ITEMS>"
 
 
	// End of Grabing the Line Items
 
	set result = result_"</DATA>"
 
 
	// Send requisition to AEP WS
	
	// Create a purchase requisition at the remote AEP
	// It uses a WS declared just to do that. It must 
	// be configured point to AEP site
 
	set sourceSite = $piece(supplierParams, Y, 6)
	//quit:(sourceSite = "") 0_Y_$$^WWWTEXT("INAEP00016")
 
	new recordKeys, recordData, resultTry
	set recordKeys = ""
	set recordData = ""_Y_destCo_Y_sourceSite_Y_YM_Y_result
 
	set resultTry = $$setRelevantEvents^COMDCMControlModule("DISCLINC", "INAEPSendPR", "other", recordKeys, recordData)
	quit:($piece(resultTry, Y, 1) = 0) resultTry
 
	set result = resultTry
	
	
	// Setting an exclusive lock with timeout of 5 seconds:
	// Shouldn't the lock be at the beginning, so to guarantee 
	// that the grabbed data isn't changed?? If so, remember
	// to deal with unlock when quitting due to errors
	
	lock +(^INAUF(YM, nextReq, 1)):5
	quit:($test = 0) 0_Y_$$^WWWTEXT("INAEP00017")_":"_nextReq
	set data = $get(^INAUF(YM, nextReq, 1))
	set $piece(data, Y, 265) = 1
	set $piece(data, Y, 266) = $piece($horolog, ",", 1)
	do ^WWWSPEI("INAUF", nextReq, data, 1)
	lock -(^INAUF(YM, nextReq, 1))
	quit result
 
 
 // Decodes a listbuild language text list into the appropriate string
decodeLanguageText(plistParams)
	// plistParams contains a list of: Language Text Number,Param1,Param2,...Param9
	// N.B. don't pass through more than 9 extra params
 
	if ($get(SPRACHE) = "") do ^WWWVAR
	if $$isList(plistParams) {
		new numParams, strText, lngLoop
		set numParams = $listlength(plistParams)
		if numParams = 0 { // if no Param passed through, return empty string
			set strText = ""
		} else {
			set strText = $$^WWWTEXT($listget(plistParams, 1))  // if param passed through, get message from WWWTEXT
			for lngLoop = 1:1:(numParams-1) {    				// loop through the extra params, replacing the %1 etc with the param
				for {                                           // this second loop changes each '%X' as many times as it appears in the text
					quit:($find(strText, "%"_lngLoop) = 0)       					   // quit if can't find any more occurances
					quit:($find($listget(plistParams, lngLoop + 1), "%"_lngLoop) '= 0) // quit if param contains the string "%"
					set strText = $piece(strText, "%"_lngLoop, 1)_$listget(plistParams, lngLoop + 1)_$piece(strText, "%"_lngLoop, 2, 99)
				}
			}
		}
	} else {
		set strText = plistParams
	}
	quit strText
 
 
 // Determines whether a variable is a list or a string.
isList(pstrList)
	new ztrapBackup, dummy
	set ztrapBackup = $ZTRAP
	set $ZTRAP = "isListErr"
	set dummy = $list(pstrList, 1)
	set $ZTRAP = ztrapBackup
	quit 1
isListErr
	set $ZTRAP = ""
	quit 0
 
 
mapItemCodeBeforeSendingToSupplier(supplierID, itemCode)
	quit:((itemCode = "") || (supplierID = "")) 0
	quit:('$data(^INARTK(YM, itemCode, supplierID, 1))) 0
 
	quit +$piece($translate($get(^INARTK(YM, itemCode, supplierID, 1)), "|", ""), Y, 1)
 
 
 // Return: 	1~<new quantity>~<new unity>
 // 			0~<error message>
 // 			If no converion is necessary, returns 
 // 			1~0
mapItemQuantityToSupplier(itemCode, currentQty, currentUM, supplierID)
	new itemAtCustomer, itemAtSupplier, newQty
	
	// No item code so no quantity mapping 
	quit:(itemCode = "") 1_Y_0
	quit:((currentQty = "") || (currentUM = "") || (supplierID = "")) 0_Y_$$^WWWTEXT("INAEP00002")
	
	set itemAtCustomer = $get(^INART(YM, itemCode, 1))
	quit:(itemAtCustomer = "") 0_Y_$$^WWWTEXT("INAEP00003")_" ("_supplierID_","_itemCode_")"
	
	set itemAtSupplier = $get(^INARTK(YM, itemCode, supplierID, 1))
	quit:(itemAtSupplier = "") 1_Y_0
	
	// Test if delivery qty at supplier is not specified -> nothing to be done
	quit:($piece(itemAtSupplier, Y, 18) = "") 1_Y_0
	
	// Test if both unity of measures are equal -> nothing to be done...
	quit:(currentUM = $piece(itemAtSupplier, Y, 18)) 1_Y_0
	
	// Verify if UM of OfferLI is equal to UM defined at Product (if is defined)
	quit:(($piece(itemAtCustomer, Y, 40) '= "") && (currentUM '= $piece(itemAtCustomer, Y, 40))) 0_Y_$$^WWWTEXT("INAEP00005")_"("_itemCode_")"
	
	// If different -> needs a conversion factor
	quit:($piece(itemAtSupplier, Y, 41) = "") 0_Y_$$^WWWTEXT("INAEP00006")_" ("_itemCode_","_supplierID_")"
	
	set newQty = $piece(itemAtSupplier, Y, 41) * currentQty
	quit 1_Y_newQty_Y_$piece(itemAtSupplier, Y, 18)
 
 
buildSupplierData(supplierID)
	new inliefData, result, i, temp, fieldPos, listOfFields, counter,
	    fieldDesc
	quit:(supplierID = "") 0_Y_$$^WWWTEXT("INAEP00007")
 
	set temp = $get(^WWW001(0, "INLIEF", 1))
	quit:(temp = "") 0_Y_$$^WWWTEXT("INAEP00008")_": INLIEF"
		
	// Get list of supplier fields to be sent
	set fieldPos = ""
	set listOfFields = ""
	for i=1:1 {
		set fieldPos = $order(^WWW003(0, "INLIEF", fieldPos))
		quit:(fieldPos="")
		
		set fieldDesc = $piece($get(^WWW003(0, "INLIEF", fieldPos, 1)), Y, 1)
		set listOfFields(i) = fieldPos_Y_fieldDesc
	}
 
	// Get supplier data
	set supplierData = $get(^INLIEF(YM, supplierID, 1))
	quit:(supplierData = "") 0_Y_$$^WWWTEXT("INAEP00009")
 
	// Build XML Data	
	set result = "<SUPPLIERDATA>"
	set result = result_"<IDSUPPLIER>"
	set result = result_supplierID       // Supplier ID At source
	set result = result_"</IDSUPPLIER>"
 
	set counter = 1
	for i=1:1 {
		quit:($data(listOfFields(i)) = 0)
		quit:($piece(listOfFields(i), Y, 1) = "")
 
		// Don't add if field is empty
		continue:($piece(supplierData, Y, $piece(listOfFields(i), Y, 1)) = "")
		continue:($case($piece(listOfFields(i), Y, 1), 62:1, 63:1, 64:1, 65:1, 66:1, :0))
 
		set result = result_"<NR"_counter_">"
		set result = result_$piece(listOfFields(i), Y, 1) // Field Position
		set result = result_"</NR"_counter_">"
		set result = result_"<NA"_counter_">"
		set result = result_$piece(listOfFields(i), Y, 2) // Field Description
		set result = result_"</NA"_counter_">"
		set result = result_"<DT"_counter_">"
		set result = result_$piece(supplierData, Y, $piece(listOfFields(i), Y, 1)) // Field Data
		set result = result_"</DT"_counter_">"
		set counter = counter + 1
	}
	set result = result_"</SUPPLIERDATA>"
 
	quit 1_Y_result
 
 new isOpen,io,stream,file    ; FIXME ???
 
startRedirectStdout()
	quit:+$get(isOpen)=1
	set io=$io
	set stream=##class(%FileCharacterStream).%New()
	do stream.Write("") ; force stream's file to open
	set file=stream.Filename ; get filename and make current device
	use file
	set isOpen=1
	quit
	
	
stopRedirectStdout(buffer)
	quit:+$get(isOpen)=0
	new len
	close file
	use io
	set len=16000
	set buffer=""
	while 'stream.AtEnd {
		set buffer=buffer_stream.Read(.len)
	}
	set isOpen=0
	quit
	
	
createNewFormLink(form,keys,additionalParam,returnForm,returnKeys)
	if 1 {
		new YFORM,YBACK,YFKEY
        set YFORM=form
        new YKEY
		set YKEY=keys   ; Create new record if YKEY is empty
		                ; Open an existing record if YKEY is filled
 
		write YAKTION_"EP=WWWFORM&YFORM="_form
		if $get(additionalParam)'="" write "&YAUSWAHL="_additionalParam
		if $data(returnKeys) {
			set YFKEY=returnKeys
		} else {
			set YFKEY=""
		}
		set YBACK=returnForm
 
		do ^WWWCGI
	}
	quit
	
]]></Routine>
</Export>