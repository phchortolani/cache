<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMUtilClass" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMUtilClass
    ;-------------------------------------------------------------------------------
    ; Common Utilities for @netManager Classes
    ; 
    ; See also : 
    ; 	COMUtilDate		Date/Time Utilities
    ; 	COMUtilStr		String Manipulation
    ; 	COMUtilGlo		Global Manipulation
    ; 	COMUtilForm		@netManager Form Utilities
    ; 	
    ; see also DCMEvent : pidClass_"Save" or pidClass_"Kill"
    ;                     associated with WWWSPEI and WWWKILL respectively
	; 
	; History:
	; 18-Mar-2005	GRF		SR10478 : convert pLock to pblnLock;
	; 							pOnceOnly to pblnBlockEvent
	; 23-Feb-2005	GRF		Created; moved some routines from COMUtils
    ;-------------------------------------------------------------------------------
#include COMConst
#include WWWConst
#include COMSYS
	
Kill(pidClass,pstrKey,pidForm)  ; DO NOT USE YET - THIS IS HERE TO COMPARE WITH OTHER VERSIONS
	;-------------------------------------------------------------------------------
	; Wrapper for WWWKILL
	; Calling WWWKILL within a WWWKILL will fail because YFORM is not scoped without
	; being newed here.
	;
	; Returns:
	;
	; History:
	; 12-Aug-2010	GRF		Pass form id in as well as class id since they won't
	; 							always be identical. (implicit pass to WWWKILL)
	; 01-Jul-2004	shobby	Creation (Copied from FINSYS)
	;-------------------------------------------------------------------------------
	new YFORM
	
	if $get(pidForm)="" set pidForm = pidClass
	set YFORM = pidForm
	do ^WWWKILL(pidClass,pstrKey)
	quit
	
	
	; ----------------------------------------------------------------------------
	;	Com00067	:	Save failed. No Class.
	;	Com00068	:	Save failed. Class %1 does not exist
	;	Com00069	:	Save failed. Class %1 has %2 primary keys, Save passed in %3
	;	Com00072	:	Error returned from WWWSPEI
	;	Com00073	: 1	Save performed correctly
	;	Com00074	:	Unable to save - not owner
	;	Com00075	:	Unknown response(%1) from WWWSPEI
	;	Com00078	:	Save failed for class %1. Intraprend returned status %2   => Fin00212 ?
	; x	SALCST1033	: 1	Saved performed correctly
	; x	SALCST1034	:	Error returned from WWWSPEI
	; x	SALCST1035	:	Unable to save - not owner
	; x	SALCST1036	:	Unknown response (%1) from WWWSPEI
	;	Fin00212	:	System save failed, Class:%1 Key:2 Error%3
	; ----------------------------------------------------------------------------
	
Save(pidClass="",pKey="",pData="",pblnLock="",pblnBlockEvent=$$$NO)
	
	; FIXME : pidClass will not always match pidForm - calling routine should
	;         pass both pidClass and pidForm - this routine should new YFORM and
	;         set it to pidForm.
	;         Test of $$$WWW120ClassUsedInForm = YFORM is logically inverted
	
	; DO NOT USE YET - THIS IS HERE TO COMPARE WITH OTHER VERSIONS
 
	; TODO : <GRF> Add extra parameter to pass pblnDoOnBeforeSave to WWWSPEI as
	;              Argument 8 (Default $$$YES) - may have separate calling tags
	;              for with/without
	 
	; ----------------------------------------------------------------------------
	; WWWSPEI Wrapper
	; 
	; History:
	; 15-Mar-2005	Paul K	Use Macros instead of $piece(x,Y,n)
	; 19-Jan-2005	Steve S	Added $$$OK macro usage for Status	
	; 19-Aug-2004	SCR		Copied from FINSYS
	; 27-Feb-2004	shobby	Set default locking to 0 but not allow locking of 1 when Class=YFORM
	; 26-Feb-2004	shobby	Returned default locking to 1 but override with 0 when Class=YFORM
	;                       (Awaiting SR discussion with Germany before finalising this)
	; 09-Jan-2004   lwaugh	Ensured Lock flag is passed to WWWSPEI
	; 07-Jul-2003	SCR		Added Lock Option , New YVOR
	; ----------------------------------------------------------------------------
	new strStatus,YVOR
	
	if $get(pblnLock)'=$$$YES {
		set pblnLock = $$$NO
	} else {
		if pKey=YKEY {
			if ($get(YFORM)'="") && ($$$WWW120ClassUsedInForm($get(^WWW120(0,pidClass,1)))=YFORM) {
				set pblnLock = $$$NO
			}
		}
	}
	
	new YFORM  ;*** Must be after the test that we are not saving to the currently displayed record 
	
	set YFORM = pidClass
	set strStatus = $$^WWWSPEI(pidClass,pKey,pData,pblnLock,pblnBlockEvent)
	
	if (strStatus=$$$NO) {
		; Error returned from WWWSPEI
		set strStatus  = $$$NO_Y_$$DecodeError^COMUtilError($listbuild($$$Text("Com00072"),pidClass,pKey))
	;	set strStatus = $listbuild("Com00078",pidClass,strStatus)       ; "Save failed for class %1. Intraprend returned status %2"
	;	set strStatus = $listbuild("Fin00212",pidClass,pKey,strStatus)  ; "System save failed, Class:%1 Key:2 Error%3"
	
	} elseif (strStatus=$$$OK) {
		set strStatus  = $$$OK_Y_$$DecodeError^COMUtilError($listbuild($$$Text("Com00073")))
		; "Saved performed correctly"
	
	} elseif (strStatus=$$$SPEINotOwned) {
		set strStatus  = $$$NO_Y_$$DecodeError^COMUtilError($listbuild($$$Text("Com00074"),pidClass,pKey))
		; "Unable to save - not owner"
	
	} else {
		set strStatus  = $$$NO_Y_$$DecodeError^COMUtilError($listbuild($$$Text($listbuild("Com00075",)),strStatus,pidClass,pKey))
	} ; "Unknown response (%1) from WWWSPEI"
	
	quit strStatus
	
	
CompileAll(pblnSeparate=$$$YES) 
	;-------------------------------------------------------------------------------
	; Compile all the @NetManager classes into CachÃ© Classes.
	; 
	; History:
	; 05-Jan-2011	shobby	SR17646: Include VAR as requested by Pablo.
	; 28-May-2007	RPW		SRadhoc: Allow single pass compilation
	; 15-Jul-2005	RPW		SR12981: Don't new VORGX; changed VORGX into strClass
	; 02-Mar-2005	PK		Reduce incidence of calling WWWVAR (SR#11305)
	; 22-Feb-2005	RPW		Created
	;-------------------------------------------------------------------------------
	new strPrefix,strShort,strList
	
	if 'pblnSeparate {
		set strList  =",WWW,COM,IN,TER,FIN,CST,SAL,STK,AEP,TS,REP,VAR,"
	} else {
		set strList = ",COM,FIN,CST,SAL,STK,AEP,TS,REP,VAR,"
		do COMPILEALL^WWW001O()   ; ONLY compiles WWW/IN/TE.  strList is used below
	}
	
	if $get(Y)="" do ^WWWVAR
	set SPRACHE="EN"
	do
	. new strClass
	. set strClass=""
	. for  set strClass=$order(^WWW001(0,strClass)) quit:strClass=""  do
	. . ;quit:$extract(VORGX,1,3)="WWW"
	. . set strPrefix = $extract(strClass,1,3)
	. . set strShort  = $extract(strPrefix,1,2)
	. . if (strShort="IN") || (strShort="TS") set strPrefix = strShort
	. . if '$find(strList,","_strPrefix) quit
	. . ;if strPrefix'="CST" if strPrefix'="SAL" if strPrefix'="FIN" if strPrefix'="STK" if strPrefix'="COM" if strPrefix'="VAR" if strPrefix'="AEP" if strPrefix'="TS" quit
	. . set VORG(1) = strClass
	. . set VORG(3) = 1
	. . ;do NEU1
	. . write !,strClass
	. . do
	. . . set YKEY=strClass
	. . . ;new VORGX	
	. . . do COMPILE^WWW001O(YKEY,1)
	
	;do $system.OBJ.CompileAll()
	quit
	
	
GetFieldType(strFormName,strFormFieldNo)
    ;-------------------------------------------------------------------------------
    ; Given a form and one of its fields determine field type
    ;
    ; Called By : OnBlur^COMGridEdit31Events, OnSortGrid^COMGridEdit31Events,
    ;             UpdateContainer^COMGridEdit31G, OnBeforeFormat^FINAPInvLineDisplay  ; Some already use Get^WWW122
    ; 
    ; Returns: Field type
    ;
    ; History:
    ; 19-Nov-2007	shobby	BR014790:Use standard routine to get InputType.
    ; 29-Jun-2005	JW		We already have sequence number!
    ; 18-Mar-2005	PO		SR11349 Created
    ;-------------------------------------------------------------------------------
    ; NOT SURE THAT WAY IN WHICH TYPE IS DETERMINED IS CORRECT 18-Mar-2005
	new objWWW120,objWWW122,objWWW003,strFieldNo,strFieldType,strCur,strValue,strClass
 
 	set objWWW122 = $$Get^WWW122(strFormName,strFormFieldNo)
 	quit $$$WWW122InputType(objWWW122)
	
	
GetDescription(pidClass,pstrFieldType="",pintClassField="")
	;-------------------------------------------------------------------------------
	; Previous code has been moved to GetDescription^COMViewDescription
	; This routine only maintained in case there are any calls missed.
	; OldGetDescription deleted.  Can be recovered from SourceLogging if required.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 21-Feb-2008	shobby		SRBR014900: Created
	;-------------------------------------------------------------------------------
	quit $$GetDescription^COMViewDescription(pidClass,pstrFieldType,pintClassField)
 
 
GetFromWWWFELDNAME(pidClass,&pidForm,pintClassField,&pintFormField="",pblnRecurse=$$$NO)
	;-------------------------------------------------------------------------------
	; Only get information from WWWFELDNAME if there is a form field which matches this class field.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 21-Dec-2007	GRF		SRBR014751: Should be WWW120s not WWW120
	; 19-Dec-2007	shobby	SRBR014751: Created
	;-------------------------------------------------------------------------------
	new strDescription
	
	set strDescription=""
	if pblnRecurse {
		set pidForm=$order(^WWW120s(0,1,$$$Index(pidClass),pidForm))
	}
	if pidForm'="" {
		set pintFormField=""
		set pintFormField=$order(^WWW122s(0,4,pintClassField,pidForm,""))
		if pintFormField'="" {
			set strDescription=$$^WWWFELDNAME(pidForm,"D",pintClassField)
		}
	}
	quit strDescription
	
	
GetKey(pKey="",pNumToCheck,pNumToHave,&pidKeyPart1,&pidKeyPart2,&pidKeyPart3,&pidKeyPart4,&pidKeyPart5,&pidKeyPart6)
    ;-------------------------------------------------------------------------------
    ; Get / separate and verify key.
    ;
    ; Use pNumToCheck to inform procedure how many keys to validate
    ;
    ; Returns: $$$YES if all parts of key are valid, else $$$NO & subscript 0 is $$$YES if left over parts are valid else $$$NO
    ;
    ; History:
    ; 26-Aug-2010	GRF		-: Show & for ByRef
    ; 11-Jul-2005	PO		SR12881: included a third argument, make sure no more
    ; 							than X key values (pNumToHave); also now
    ; 							reporting error if pNumToCheck > intNumOfParts
    ; 04-Jul-2005	PO		Switched over to use $$$NoKey
    ; 30-Jun-2005	PO		Made pKey optional, added new arg - pNumToCheck and
    ; 							result is now an array
    ; 21-Jun-2005   PO		SR12595: Created
    ;-------------------------------------------------------------------------------
	new blnExists,intCounter,intNumOfParts,tmp
 
	set blnExists    = $$$YES
	set blnExists(0) = $$$YES
	set intNumOfParts = $length(pKey,",")
	if '$data(pNumToCheck) {
		set pNumToCheck = intNumOfParts
	
	} else {
		set pNumToCheck = +pNumToCheck
		if pNumToCheck > intNumOfParts set blnExists = $$$NO
	}
	if $data(pNumToHave) {
		if pNumToHave '= intNumOfParts set blnExists = $$$NO
	}
 
	for intCounter=1:1:intNumOfParts {
		set tmp = $piece(pKey,",",intCounter)
		if $$$NoKey(tmp) {
			set @("pidKeyPart"_intCounter) = ""
			set @("pidKeyPart"_intCounter_"(0)") = tmp
		
		} else {
			set @("pidKeyPart"_intCounter) = tmp
		}
		if (intCounter<=pNumToCheck) {
			if $$$NoKey(tmp) set blnExists = $$$NO
		
		} else {
			if $$$NoKey(tmp) set blnExists(0) = $$$NO
		}
	}
	quit blnExists
	
	
GetRecord(strClass="",pidKey="",pobjRecord)
    ;-------------------------------------------------------------------------------
    ; Gets and validates a particular record.
    ;
    ; Returns: strStatus
    ;
    ; History:
    ; 29-Jul-2005	PO		SR12850: Changed NoKey to $$GetKey as don't know number
    ; 							of key values.
    ; 26-Jul-2005	JW		SR13090: Added call to WWWKEYBUILD
    ; 06-Jul-2005	PO		SR12881: Created
    ;-------------------------------------------------------------------------------
	new strStatus,strBaseKeyValue
	set strStatus=$$$OK
	if '$$GetKey(pidKey,,$length(pidKey,",")) { ; $$$NoKey(pidKey)
		set strStatus = $listbuild("Com00207")
	 ; "Please Select A Data Record First."
	
	} elseif strClass="" {
		set strStatus = $listbuild("Com00208")
	 ; "Must Specify Source To Retrieve Record From."
	
	} else {
		if '$$$WWW001SharedFile($get(^WWW001(0,strClass,1))) {
			set strBaseKeyValue = "YM"
		} else {
			set strBaseKeyValue = "0"
		}
		set pobjRecord = $get(@("^"_strClass_"("_strBaseKeyValue_","_$$^WWWKEYBUILD(pidKey)_",1)"))
		if pobjRecord="" set strStatus = $listbuild("Com00209",pidKey)
	} ; "Record Â´%1Â´ is not defined."
	
	quit strStatus
	
	
Delete(pidClass)
	;-------------------------------------------------------------------------------
	; Wrapper for DEL^WWWDLOE. @Net class deletion.
	;
	; Params:	pidClass - (mandatory) class to delete
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 19-Apr-2006	JW		SR14429: Created
	;-------------------------------------------------------------------------------
	new VORGX,VORG,YQ
	
	if $data(^WWW001(0,pidClass,1)) {
		set VORGX = pidClass
		set VORG(2) = $$$YES
		set VORG(3) = $$$YES
		set YQ=1
		do DEL^WWWDLOE
	}
	quit
	
	
FindFieldType(pintDataType)
    ;-------------------------------------------------------------------------------
    ; Find class fields matching a particular data type (e.g. 4 = Integer)
    ;	
    ;	CAVEAT : Doesn't consider form reassignment or Manual fields
    ;	
    ; History:
    ; 05-Nov-2007	GRF		Created
    ;-------------------------------------------------------------------------------
	new count,idClass,intFldNo,intFldType,objClass,tab
	
	set pintDataType = +$get(pintDataType)
	kill ^CacheTempCOMUtilClass("Type")
	
	set tab = $char(9)
	
	set idClass = ""
	for count=1:1 {
		set idClass = $order(^WWW001(0,idClass))
		quit:idClass=""
		
		write:count#50=0 !,idClass
		
		set intFldNo = ""
		for {
			set intFldNo = $order(^WWW002(0,idClass,intFldNo))
			quit:intFldNo=""
			
			set objClass   = $get(^WWW002(0,idClass,intFldNo,1))
			set intFldType = $$$WWW002InputType(objClass)
			if intFldType = pintDataType {
				set ^CacheTempCOMUtilClass("Type",idClass,2,intFldNo) = $$$WWW002PropertyDescription(objClass)_tab_$$$WWW002RelationClass(objClass)
			}
		}
		
		set intFldNo = ""
		for {
			set intFldNo = $order(^WWW003(0,idClass,intFldNo))
			quit:intFldNo=""
			
			set objClass   = $get(^WWW003(0,idClass,intFldNo,1))
			set intFldType = $$$WWW003InputType(objClass)
			if intFldType = pintDataType {
				set ^CacheTempCOMUtilClass("Type",idClass,3,intFldNo) = $$$WWW003PropertyDescription(objClass)_tab_$$$WWW003RelationDatabase(objClass)
			}
		}
	}
	write !!
	quit
	
	
DisplayFieldType
    ;-------------------------------------------------------------------------------
    ; 1.	d FindFieldType^COMUtilClass(4)        ; e.g. if checking for integers
    ; 2.	Open logging file
    ; 3.	d DisplayFieldType^COMUtilClass
    ; 4.	Close logging file
    ; 5.	Open Logging file in Word/Excel/etc.
    ;
    ; History:
    ; 05-Nov-2007	GRF		Created
    ;-------------------------------------------------------------------------------
	new idClass,intDataType,intFldNo,strDataType,tab
	
	set tab = $char(9)
	
	set idClass = ""
	for {
		set idClass = $order(^CacheTempCOMUtilClass("Type",idClass))
		quit:idClass=""
		
		set intDataType = ""
		for {
			set intDataType = $order(^CacheTempCOMUtilClass("Type",idClass,intDataType))
			quit:intDataType=""
			
			set strDataType = $select(intDataType=2:"P",1:"D")
			set intFldNo = ""
			for {
				set intFldNo = $order(^CacheTempCOMUtilClass("Type",idClass,intDataType,intFldNo))
				quit:intFldNo=""
				
				write !,idClass,tab,strDataType,intFldNo,tab,^CacheTempCOMUtilClass("Type",idClass,intDataType,intFldNo)
			}
		}
	}			
	quit
	
	
FieldUsage(pidClass,pidDateForm="")
    ;-------------------------------------------------------------------------------
    ; Display what fields are used in the class
    ;
    ; History:
    ; 11-Nov-2013	SCR		SESDF-681: Created
    ;-------------------------------------------------------------------------------
	new arrStats,idFld,intCreated,intData,intFld,intFldCnt,intRecCnt,intYear,objClass
	new objFld,objForm,strData,strGlo,strRec,strStats,strTypes,strFldLst
	
	$$$VAR
	
	if pidClass="" {
		write !,"No Class"
		quit
	}
	kill ^CacheTempFieldUsage(YUSER,pidClass)
	set objClass	= $get(^WWW001(0,pidClass,1))
	if objClass="" {
		write !,"Class ",pidClass," not Defined "
		quit
	}
	set objForm		= $get(^WWW120(0,pidClass,1)) ; Assumption!
	set intCreated	= $$$WWW120DataFieldEntryDate(objForm)
	set strGlo		= "^"_pidClass
	for intRecCnt=0:1 {
		set strGlo		= $query(@strGlo)
		quit:strGlo=""
		set strRec		= $get(@strGlo)
		set intFldCnt	= $length(strRec,Y)
		if intCreated {
			set intYear	= $horolog-$piece(strRec,Y,intCreated)\365\+1
			set:intYear>5 intYear=5
		}
		for intFld=1:1:intFldCnt {
			set strData	= $piece(strRec,Y,intFld)
			if strData {
				set strStats	= $get(arrStats(intFld))
				set $piece(strStats,Y,intYear)	= $piece(strStats,Y,intYear)+1
				set arrStats(intFld)	= strStats
				set ^CacheTempFieldUsage(YUSER,pidClass,intFld,strData)	= $get(^CacheTempFieldUsage(YUSER,pidClass,intFld,strData))+1
			}
		}
	}
	set strFldLst	= ""
	set idFld		= ""
	for {
		set idFld	= $order(^WWW003(0,pidClass,idFld))
		quit:idFld=""
		set objFld	= $get(^WWW003(0,pidClass,idFld,1))
		write !,$justify(idFld,3)," "
		write $$$WWW002PropertyName(objFld),?30
		for intYear=1:1:5 {
			write $justify(+$piece($get(arrStats(idFld)),Y,intYear),6)
		}
		if $data(arrStats(idFld)) {
			set strFldLst	= strFldLst_$$$WWW002PropertyName(objFld)_","
		}
		set strData		= ""
		set strTypes	= ""
		for intData=0:1:101 {
			set strData		= $order(^CacheTempFieldUsage(YUSER,pidClass,idFld,strData))
			quit:strData=""
			set strTypes	= strTypes_strData_"="_$get(^CacheTempFieldUsage(YUSER,pidClass,idFld,strData))_","
		}
		write !?15,$justify(intData,5)," ",$extract(strTypes,1,55)
	}
	write !,"Total Recs ",intRecCnt
	write !,"Used Fields ",strFldLst
]]></Routine>
</Export>