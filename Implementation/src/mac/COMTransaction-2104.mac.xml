<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMTransaction" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMTransaction
#include COMSYS
#include WWWConst
	
#define LogR(%1,%2)	;
#define LogRx(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^COMTransaction("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
Example	private
	;-------------------------------------------------------------------------------
	; Post Button on form XXX calls "Perform^COMTransaction(YFORM,YKEY,Post^XXX(pstrKey))"
	; 
	; Post^XXX determines if processing can continue and then continues to a command
	; 	set strStatus = $$Transaction^COMTransaction("PostTxn^XXX("""_pidXXX_""","""_objXXX_""")",$$$YES)
	; 	
	;	NOTE : objXXX will be the full record in this case - possible better to pass
	;	       the keys and load it again if the string length could be excessive.
	;	       Can't just specify variables unless we can guarantee they will exist
	;	       inside Transaction^COMTransaction.
	;-------------------------------------------------------------------------------
	new strStatus
	set strStatus=$$Transaction("Routine^Somewhere")
	
	if $$$ISOK(strStatus) {
	} else {
	}
	quit	
 
 
Transaction(pstrCode,pblnShowInfo=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Wrapper for transactions
    ; 	pstrCode 		- Code to run
    ; 	pstrStatus 		- Variable to return the status.  List format.
    ; 	pblnShowInfo	- If this variable is set.  Display the info screen,
    ; 					  validation type errors NOT cache errors.
    ; 	pstrParamN		- Override parameters to pass to the error display when
    ; 					  forcing an error message different from the calculated one.
    ;
    ; Returns:
    ;
    ; History:
    ; 01-Feb-2008	shobby	SRBR014697: Return a fail message if transaction crashed and rolled back.
    ; 18-Mar-2006	RPW/PO	Added check for whether already inside error handler
    ; 04-May-2005	shobby	Created SR11875
    ;-------------------------------------------------------------------------------
	new intParameters,strStatus,trap
	
	$$$LogR("Transaction",pstrCode)
	set trap = $ztrap
	
	set $ztrap = "TransactionError"
	set strStatus = $$$OK
	;***************************************
	$$$LogRx("")
	$$$LogRx("------------- TSTART vvvvvvvvv")
	$$$LogRx("")
	tstart
	;***************************************                    ; *** EXECUTE ***
	
	xecute "set strStatus=$$"_pstrCode
	
	;***************************************
	if $$$ISOK(strStatus) {
		if $tlevel>0 tcommit
	$$$LogRx("")
	$$$LogRx("------------- TCOMMIT ^^^^^^^^")
	$$$LogRx("")
	} else {
		trollback
	$$$LogRx("")
	$$$LogRx("------------- TROLLBACK ^^^^^^^^")
	$$$LogRx("")
		if pblnShowInfo {
			do ReturnError^COMUtilError(strStatus)
		}
	}
	;***************************************
	
	set $ztrap=trap
	
	quit strStatus
	
	; FIXME : Following a <SUBSCRIPT> error elsewhere we are getting an <UNDEFINED>
	;         error in the line     xecute:trap'="" "do "_trap
	;         where the variable trap does not exist.
	;         NOTE : The tag Transaction is called once with trap containing the
	;         correct tag^Routine but then TransactionError is called twice - once
	;         with trap not defined and then with the value from Transaction.
	;	
	;	Interim fix - add $get() around trap - find what is causing it
	;	[save on INReq calling CreateReceiptTxn^INTRNRec which generated an error while trying to save "INRECLine"]
	
TransactionError  ;Internal Tag
	new strError
	
	$$$LogR("TransactionError","")
	
	set strError=$zerror
	set $ztrap=$get(trap)
	;***************************************
	trollback
	;***************************************
	set $zerror=strError
	
	;+++++++++++++++++++++++++++++++++++++++
	;   USE TO DEBUG IF ERROR IS OBSCURED
	;+++++++++++++++++++++++++++++++++++++++
	;do $zu(139,1) set ^zzERR($i(^zzERR)) = $horolog_":"_$get(strError)_"<" do $zu(139,0)
	;+++++++++++++++++++++++++++++++++++++++
	
	;xecute:trap'="" "do "_trap
	xecute:$get(trap)'="" "do "_trap
	;set strStatus = "ROLLBACK"							;BR014697
	set strStatus = $$$MakeStatus("ROLLBACK:"_strError)	;BR014697
	quit strStatus
 
Perform(pstrForm,pstrKeyPerform,pstrCode,pstrLangText,&pstrStatus)
    ;-------------------------------------------------------------------------------
    ; Execute particular code for a particular record.
    ;
    ; Params: pstrForm		Form from which transaction is performed (YDATEI not available when WWWMANU calls this code).
    ; 		  pstrKey		Record key.
    ; 		  pstrCode		Code to execute, either Procedure^Routine or $$Procedure^Routine. Argument list is optional as well as ().
    ; 		  pstrLangText	Language Text id for message if not able to raise semaphore for record.
    ;
    ; ByRefs: pstrStatus - result of code executed.
    ;
    ; Returns: Nothing
    ;
    ; History:
    ; 03-Feb-2010	GRF		SR17160: ReturnError^COMUtilError checks $$$InHyperEvent
    ; 14-Mar-2006	PO		SR14409: Include cachetemp semaphore global to ensure
    ; 							one transaction at a time.  ALSO change from
    ; 							returning status via quit to return byRef.
    ; 05-Jan-2006	PO		SR14118: Created
    ;-------------------------------------------------------------------------------
	set $ztrap = "PerformError"
		
	new blnGotLock,strClassPerform
	
	$$$LogR("Perform",$get(pstrCode)_"<"_$get(pstrLangText))
	
	set pstrStatus = $$$NO
 
	quit:(pstrForm="")||(pstrKeyPerform="")||(pstrCode="")
	
	set blnGotLock = $$$NO
	set strClassPerform   = $$$WWW120ClassUsedInForm($get(^WWW120(0,pstrForm,1)))
	
	if strClassPerform'="" {
	;+++++++++++++++++++++++++++++++++++++++
		lock ^Semaphore(strClassPerform,pstrKeyPerform):2
		
		if $test {
			set blnGotLock = $case($increment(^CacheTempSemaphore(strClassPerform,pstrKeyPerform)),1:$$$YES,:$$$NO)
		}
		
		lock -^Semaphore(strClassPerform,pstrKeyPerform)
	;+++++++++++++++++++++++++++++++++++++++
 
		if blnGotLock {
	;***************************************                    ; *** EXECUTE ***
			if $extract(pstrCode,1,2) = "$$" {
				xecute "set pstrStatus = "_pstrCode
			} else {
				xecute "do "_pstrCode
				set pstrStatus = $$$OK
			}
 	;***************************************
			kill ^CacheTempSemaphore(strClassPerform,pstrKeyPerform)
			
		} else {
	$$$LogR("Perform","CacheTempSemaphore stopped processing")
			
		;          SR17160 vvv
		; Should never see this if return from transaction processing via quits.
			if $get(pstrLangText)="" set pstrLangText="WWW00041"  ; "Unable to obtain lock."
			do ReturnError^COMUtilError(pstrLangText)
			
		;	if $$$InHyperEvent { ; Included for Supplier Payments UnPosting
		;		if $data(pstrLangText)#10 $$$Alert(pstrLangText)
		;	} else {
		;		if $data(pstrLangText)#10 do ReturnError^COMUtilError(pstrLangText)
		;	}      SR17160 ^^^
		}
	}
	quit
	
PerformError  ; Internal Tag
	set $ztrap = ""
	
	lock -^Semaphore(strClassPerform,pstrKeyPerform)
	kill ^CacheTempSemaphore(strClassPerform,pstrKeyPerform)
	
	$$$LogR("PerformError",$zerror)
 
	do ReturnError^COMUtilError($listbuild("Fin00263",$zerror)) ; "Error in Processing, Details %1"
	
	quit
	
	
	; FIXME : "p" prefixes for parameters <GRF>
TransactionUnit(pstrForm,pstrTransaction,pblnNoTControl=$$$NO,&strTError,&blnTQuit)
    ;-------------------------------------------------------------------------------
    ; Wrapper for transaction units (chain of multiple functions as one unit)
    ; 	pstrForm        - Form related Transaction Table
    ; 	pstrTransaction - Name of Transaction Unit
    ; 	pblnNoTControl  - Do Not Start/End Transaction Control (ie. because already done)
    ;
    ; By Refs:
    ; 	strTError 		- Variable to set error flag (any value will cause rollback)
    ; 	blnTQuit 		- Variable to stop form execution (= @net Manager variable "Q")
    ; 					  (ExecuteAfterSave only)
    ;
    ; Returns:
    ; 	pstrStatus 		- Variable to return the status (any other value than 1 will cause rollback)
    ;
    ; History:
    ; 07-Oct-2008	FIS		SR15947: allow set commands (ie. set Q=1)
    ; 30-Sep-2008	FIS		SR15947: Changed WWWTransactionTable into WWWTransactionLine
    ;  						- Sort Run Sequence by Sequence No.
    ; 24-Sep-2008	FIS		Created SR15947
    ;-------------------------------------------------------------------------------
	new arrLines,intNo,intSeq,objTask,Q,strExec,strStatus,strTStatus
	
	set strTStatus = $$$NO
	set strTError = ""
	set $ztrap="TransactionUnitError"
	
	if ($get(pstrForm) '= "")          &&
	   ($get(pstrTransaction) '= "")   &&
	   ($$$WWWTransactionActive1($get(^WWWTransaction(0,pstrForm,pstrTransaction,1))) = $$$YES) {
		if (pblnNoTControl '= $$$YES) {
			set strTStatus = $$StartUnit(pstrForm,pstrTransaction)  //start transaction, set locks
		
		} else {
			set strTStatus = $$$OK
		}
		if $$$ISOK(strTStatus) {
			//sort to sequence
			set intNo=""
			for {
				set intNo = $order(^WWWTransactionLine(0,pstrForm,pstrTransaction,intNo))  //get task by task in sequence
				quit:intNo=""
				
				set objTask = $get(^WWWTransactionLine(0,pstrForm,pstrTransaction,intNo,1))
				set arrLines(+$$$WWWTransactionLineSequence1(objTask),intNo)=""
			}
			//run in sequence
			set intSeq=""
			for {
				set intSeq = $order(arrLines(intSeq))
				quit:intSeq=""
				
				set intNo=""
				for {
					set intNo = $order(arrLines(intSeq,intNo))  //get task by task in sequence
					quit:intNo=""
				
					set objTask = $get(^WWWTransactionLine(0,pstrForm,pstrTransaction,intNo,1))
					continue:($$$WWWTransactionLineEnabled(objTask) '= $$$YES)
					
					set strExec = $$$WWWTransactionLineExecute1(objTask)  //execute command (ie: $$OnAfterSave^Routine)
					if $extract(strExec,1,2)="$$" {
						set strExec="set strStatus="_strExec
					
					} elseif ($extract($zconvert(strExec,"U"),1,2)="S ") || ($extract($zconvert(strExec,"U"),1,4)="SET ") {
						set strExec="set strStatus="_$$$OK_" "_strExec
						
					} elseif ($extract($zconvert(strExec,"U"),1,2)'="D ") && ($extract($zconvert(strExec,"U"),1,3)'="DO ") {
						set strExec="set strStatus=$$"_strExec
					}
					if (strExec '= "") {
						kill Q
						set strStatus = $$$OK
	;***************************************                                 ; *** EXECUTE ***
						xecute strExec
	;***************************************
						if $get(Q)=$$$QDontDelete set blnTQuit = $$$YES
						if '$$$ISOK(strStatus) set strTStatus=strStatus quit  //failed status  [$listbuild(0,"Error Message")]
						quit:(strTError '= "")     //set error flag [$listbuild(1,"Error Message")]
					}
				}
			}
			if (pblnNoTControl '= $$$YES) {
				set strTStatus(1) = $$EndUnit(pstrForm,pstrTransaction,strTStatus,strTError)  //release locks, commit transaction
			}
		}
	
	//valid but not active
	} elseif ($get(pstrForm) '= "")                                &&
	         ($get(pstrTransaction) '= "")                         &&
	         $data(^WWWTransaction(0,pstrForm,pstrTransaction))    &&
	         ($$$WWWTransactionActive1($get(^WWWTransaction(0,pstrForm,pstrTransaction,1))) '= $$$YES) {
		set strTStatus = $$$YES
	}
	quit strTStatus
	
TransactionUnitError  ; Internal Tag
    ;-------------------------------------------------------------------------------
    ; transaction units error handling
    ;
    ; History:
    ; 24-Sep-2008	FIS	Created SR15947
    ;-------------------------------------------------------------------------------
	new strError,strStatus
	
	; FIXME : Should we follow similar error handling blocks with single exit path?
	;         They don't use goto @$ztrap.  strStatus doesn't appear to follow coding
	;         standards - needs to contain "0 "_$lb(errCode,params) or $$$YES <GRF>
	
	set strError = $zerror
	//==========================
	if ($get(pstrForm) '= "") &&($get(pstrTransaction) '= "") && ($$$WWWTransactionTransactionControl($get(^WWWTransaction(0,pstrForm,pstrTransaction,1))) = $$$YES) {
		trollback  //transaction rollback
	$$$LogRx("TUE: TROLLBACK")
	}
	//==========================
	set $zerror = strError
	
	if ($get(pstrForm) '= "") &&($get(pstrTransaction) '= "") {
		kill ^CacheTempTransactionControl(YUSER,pstrForm,pstrTransaction)
	}
	
	//Server Side Event
	if $$$InHyperEvent {
		do BACKGROUND^WWWERROR  ;save error log
		if $find($zerror,"<") && $find($zerror,">") {  //Caché errors
			set strStatus = $$^WWWTEXT(387)_"|Info : "_$piece($piece($zerror,"<",2),">",1)_"|Prog.: "_$piece($zerror,">",2,9)
		
		} else {
			set strStatus = $$DecodeError^COMUtilError($zerror)  //error status or error flag
		}
		do MSG^WWW013MSG(YBED,strStatus)  //inform user
		set $zerror = ""
		quit $$$MakeStatus(strStatus)  ;return error
	
	// Front End Event
	} else {
		if '$find($zerror,"<") || '$find($zerror,">") {        //error status or error flag
			set strStatus = $$DecodeError^COMUtilError($zerror)
			do Alert^COMConst(strStatus)
			set $zerror = ""
			quit strStatus
		
		} else {  //Caché error
			zquit 1 goto @$ztrap  ;run default error handler
		}
	}
	quit
	
	
StartUnit(pstrForm,pstrTransaction)
    ;-------------------------------------------------------------------------------
    ; Start transaction unit and set locks
    ; 	pstrForm        - Form related Transaction
    ; 	pstrTransaction - Transaction to get the required locks
    ;
    ; Returns:
    ; 	strStatus 		- Variable to return the status.  List format.
    ; 	
    ; 	
    ; set $ztrap="TransactionUnitError" if calling without $$TransactionUnit !!!
    ; ==========================================================================
    ;
    ; History:
    ; 24-Sep-2008	FIS	Created SR15947
    ;-------------------------------------------------------------------------------
	new strStatus
	
	$$$LogR("StartUnit",$get(pstrForm)_"<"_$get(pstrTransaction))
	
	set strStatus = $$$NO
	if ($get(pstrForm) '= "") && ($get(pstrTransaction) '= "") && '$data(^CacheTempTransactionControl(YUSER,pstrForm,pstrTransaction)) {
		set ^CacheTempTransactionControl(YUSER,pstrForm,pstrTransaction,"Started") = $zhorolog
	
	;+++++++++++++++++++++++++++++++++++++++
		if ($$$WWWTransactionTransactionControl($get(^WWWTransaction(0,pstrForm,pstrTransaction,1))) = $$$YES) {
	$$$LogRx("SU: TSTART")
			tstart  //start transaction
		}
	;+++++++++++++++++++++++++++++++++++++++
		
		set strStatus = $$LockUnit("+",pstrForm,pstrTransaction)
 
	;+++++++++++++++++++++++++++++++++++++++
		if '$$$ISOK(strStatus) {  //unable to lock records
			tcommit             ; FIXME : This will occur regardless of whether or not the tstart in this subroutine is performed <GRF>
	$$$LogRx("SU: TCOMMIT")
			kill ^CacheTempTransactionControl(YUSER,pstrForm,pstrTransaction)
		}
	;+++++++++++++++++++++++++++++++++++++++ ; FIXME : trollback? <GRF>
	}
	quit strStatus
	
	
EndUnit(pstrForm,pstrTransaction,pstrTStatus=$$$OK,pstrTError="")
    ;-------------------------------------------------------------------------------
    ; Wrapper for transaction units (chain of multiple functions as one unit)
    ; 	pstrTransaction - Transaction to get the locks
    ; 	pstrTStatus     - Current Status
    ; 	pstrTError      - Current Error Flag
    ;
    ; Returns:
    ; 	pstrTStatus 	- Variable to return the status.  List format.
    ;
    ; History:
    ; 24-Sep-2008	FIS	Created SR15947
    ;-------------------------------------------------------------------------------
	new strStatus
	
	$$$LogR("EndUnit",$get(pstrForm)_"<"_$get(pstrTransaction))
	
	set strStatus = $$LockUnit("-",pstrForm,pstrTransaction)
	
	//==========================
	if ($get(pstrForm) '= "")        &&
	   ($get(pstrTransaction) '= "") &&
	   ($$$WWWTransactionTransactionControl($get(^WWWTransaction(0,pstrForm,pstrTransaction,1))) = $$$YES) {
		if $tlevel >0 {
			if ('$$$ISOK(pstrTStatus)) {  //failed status from subroutine    ; FIXME : $$$ISERR <GRF>
				set $zerror = pstrTStatus
				goto @$ztrap  ;TransactionUnitError
			
			} elseif (pstrTError '= "") {  //error flag from subroutine
				set $zerror = pstrTError
				goto @$ztrap  ;TransactionUnitError
			
			} else {
				tcommit  //end transaction
	$$$LogRx("EU: TCOMMIT")
			}
		}
	}
	//==========================
	
	kill ^CacheTempTransactionControl(YUSER,pstrForm,pstrTransaction)
	quit strStatus
	
	
LockUnit(pstrLockSet,pstrForm,pstrTransaction)
    ;-------------------------------------------------------------------------------
    ; Set/Release locks for transaction units
    ; 	pstrLockSet     - "+" = Set / "-" = Release
    ; 	pstrTransaction - Transaction to get the locks
    ;
    ; Returns:
    ; 	pstrTStatus 	- Variable to return the status.  List format.
    ;
    ; History:
    ; 24-Sep-2008	FIS	Created SR15947
    ;-------------------------------------------------------------------------------
	new strLockRec,strLockKey,objLockRec,strLockStr,idx,strStatus
	
	quit $$$OK  // LOCKS NOT IMPLEMENTED YET !!!!!!!!!!!!!
	
	/*
	set strStatus = $$$NO
	
	//set locks
	if (pstrTransaction '= "") && ($extract(pstrLockSet) = "+") {
		set strStatus = $$$OK
		set strLockRec=""
		for {
			set strLockRec=$order(^WWWTransactionLocks(0,pstrTransaction,strLockRec))
			quit:strLockRec=""
			
			set objLockRec = $get(^WWWTransactionLocks(0,pstrTransaction,strLockRec,1))
			
			set strLockStr = "^"_strLockRec_"("_""""_$$^WWWYM(strLockRec)_""""
			if ($piece(objLockRec,Y,1) '= "") {
				for idx=1:1:$length($piece(objLockRec,Y,1),",") {
					set strLockStr = strLockStr_","
					if ($extract($piece($piece(objLockRec,Y,1),",",idx)) = """") {
						set strLockStr = strLockStr_""""_$piece($piece(objLockRec,Y,1),",",idx)_""""
					
					} else {
						set strLockStr = strLockStr_@$piece($piece(objLockRec,Y,1),",",idx)
					}
				}
			}
			set strLockStr = strLockStr_")"
			
			if pstrLockSet="+" {  //set incremental lock
				lock +@strLockStr:1
				if $test {
					set ^CacheTempTransactionControl(YUSER,pstrTransaction,"lock",strLockStr)=""
				
				} else {
					set strStatus = $$$NO
				}
			}
			if pstrLockSet="++" {  //set new lock
				lock @strLockStr:1
				if $test {
					set ^CacheTempTransactionControl(YUSER,pstrTransaction,"lock",strLockStr)=""
				
				} else {
					set strStatus = $$$NO
				}
			}
		}
	
	//release locks
	} elseif (pstrTransaction '= "") && ($extract(pstrLockSet) = "-") {
		set strStatus = $$$OK			
		set strLockStr=""
		for {
			set strLockStr=$order(^CacheTempTransactionControl(YUSER,pstrTransaction,"lock",strLockStr))
			quit:strLockStr=""
			
			if pstrLockSet = "-" {
				lock -@strLockStr:1
				if $test {
					kill ^CacheTempTransactionControl(YUSER,pstrTransaction,"lock",strLockStr)
				}
			
			} elseif pstrLockSet = "--" {
				lock @strLockStr:1
				if $test {
					lock -@strLockStr
					kill ^CacheTempTransactionControl(YUSER,pstrTransaction,"lock",strLockStr)
				}
			}
		}
	}
	quit strStatus
	*/
	
	
]]></Routine>
</Export>