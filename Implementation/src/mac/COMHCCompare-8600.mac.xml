<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMHCCompare" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMHCCompare ; Health Check Compare
	
#include COMConst
	
CompareAll()
    ;-------------------------------------------------------------------------------
    ; Compare All Results
    ; 
    ; Scan COMHCCalculate and check for matching Calculations
    ; Based on Same Result Type, Start, End, Level, Location
    ; Once a Match has been found, it based to the CompareResult method.
    ;
    ; Returns:
    ;
    ; History:
    ; 09-Feb-2004   SCR	   Created
    ;-------------------------------------------------------------------------------
	new Temp,Site,Entry,Rec,Location,Method,Level,Start,End,MethodRec,Key,Type,Count
	
	set Temp="^CacheTempCOMHC("_$job_",""CA"")"
	kill @Temp
 
	set Site=""
	for  {
		set Site=$order(^COMHCCalculate(YM,Site))
		quit:Site=""
		
		set Entry=""
		for  {
			set Entry=$order(^COMHCCalculate(YM,Site,Entry))
			quit:Entry=""
			
			set Rec      = $get(^COMHCCalculate(YM,Site,Entry,1))
			set Location = $$$COMHCCalculateLocation(Rec)
			set Method   = $$$COMHCCalculateMethod(Rec)
			set Level    = $$$COMHCCalculateLevel1(Rec)
			set Start    = $$$COMHCCalculateStart(Rec)
			set End      = $$$COMHCCalculateEnd1(Rec)
			if Level=""  set Level="Top"
			if Method="" set Method=" "
			set MethodRec=$get(^COMHCMethod(0,Method,1))
			set Type=$$$COMHCMethodCheckType(MethodRec)
			if Type="" {
				set Type=$$$COMHCCalculateType(Rec)
			}
			set Key=Type_Y_Level_Y_Start_Y_End_Y_Location
			set Count=$increment(@Temp@("Keys",Key))
			if Count>1 {  ; Must have more than 1
				set @Temp@("Checks",Key)=Count
			}
		}
	}
					
	set Key=""
	for {
		set Key=$order(@Temp@("Checks",Key))
		quit:Key=""
		
		set Count    = $get(@Temp@("Checks",Key))
		set Type     = $piece(Key,Y,1)
		set Level    = $piece(Key,Y,2)
		set Start    = $piece(Key,Y,3)
		set End      = $piece(Key,Y,4)
		set Location = $piece(Key,Y,5)
		do CompareResult(Type,Level,Start,End,Location,Count)
	}
	
	kill @Temp
	quit 1
	
	
CompareResult(Type="",Level="",Start="",End="",Location="",CalcCount="")
    ;-------------------------------------------------------------------------------
    ; Compare Results for Type, Level, Start, End, Location
    ;
    ; Returns:
    ;
    ; History:
    ; 12-Feb-2004	SCR		Added Source Data Login
    ; 09-Feb-2004   SCR	   	Created
    ;-------------------------------------------------------------------------------
	new Temp,TypeI,LevelI,StartI,EndI,LocationI,StatusI,Index,Rec,Match
	new ResultCount,Method,Site,SiteMethod
	new CompareOk,Status,HashValue,Count,Date,CompareForAllDatesOk,Source
	
	set Temp="^CacheTempCOMHC("_$job_",""CR"")"
	kill @Temp
	
	write Type," ",Level," ",Start," ",End," ",Location," ",CalcCount,!
	
	set TypeI     = $$Index(Type)
	set LevelI    = $$Index(Level)
	set StartI    = $$Index(Start)
	set EndI      = $$Index(End)
	set LocationI = $$Index(Location)
	
	set Index=""
	set ResultCount=0
	for StatusI=0,1 { ; Just look for Status 0,1 ( Error, Ready for Compare )
		for {
			set Index=$order(^COMHCResults(YM,1,StatusI,TypeI,LevelI,StartI,EndI,LocationI,Index))
			quit:Index=""
			
			set Rec=$get(^COMHCResult(YM,Index,1))
			set Match=1
			; Double Check the Record with the Index
			if $$$COMHCResultType1(Rec)'=Type        set Match=0
			if $$$COMHCResultLevel1(Rec)'=Level      set Match=0
			if $$$COMHCResultStart(Rec)'=Start       set Match=0
			if $$$COMHCResultEnd1(Rec)'=End          set Match=0
			if $$$COMHCResultLocation(Rec)'=Location set Match=0
			
			if Match=1 {
				set Date=+$$$COMHCResultDate2(Rec)
				set Method=$$$COMHCResultMethod1(Rec)
				set Site=$$$COMHCResultSite1(Rec)
				set SiteMethod=Method_Y_Site
				if '$data(@Temp@("Site",Date,SiteMethod)) {
					set ResultCount(Date)=$get(ResultCount(Date))+1
				}
				; Overwrite the repeat method for the same site/method
				; This is so we only check the last entry
				set @Temp@("Site",Date,SiteMethod)=$$$COMHCResultHashValue(Rec)
				set @Temp@("Entry",Date,Index)=""
				; Check for Source Data 
				if $$$COMHCResultSource(Rec) {
					set @Temp@("Source",Date)=$$$COMHCResultHashValue(Rec)
				}
			}
		}
	}
 
	; Actual Compare Code for each date
	; Only check the last entry
	
	set Date=""
	set CompareForAllDatesOk=1
	for {
		set Date=$order(@Temp@("Site",Date))
		quit:Date=""
		
		set CompareOk=0
		set HashValue=""
		; Only Check when all results are in or when there is source data
		if (CalcCount=$get(ResultCount(Date))) || ($data(@Temp@("Source",Date))) {
			; Set the Compare Value
			if ($data(@Temp@("Source",Date))) {
				set HashValue=$get(@Temp@("Source",Date))
			} else {
				set SiteMethod=$order(@Temp@("Site",Date,""))
				if SiteMethod="" set SiteMethod=" "
				set HashValue=$get(@Temp@("Site",Date,SiteMethod))
			} 
			set CompareOk=1
			set SiteMethod=""
			for Count=1:1 {
				set SiteMethod=$order(@Temp@("Site",Date,SiteMethod))
				quit:SiteMethod=""
				
				if HashValue'=$get(@Temp@("Site",Date,SiteMethod)) {
					set CompareOk=0  ; Failed
				}
			}
		}
		
		; Scan each entry and update the Status
		set Index=""
		for {
			set Index=$order(@Temp@("Entry",Date,Index))
			quit:Index=""
			
			set Rec=$get(^COMHCResult(YM,Index,1))
			set Status=1 ; Read to Check
			if CompareOk {
				set Status=2 ; Ok
			}
			if (CalcCount=$get(ResultCount(Date)))&&('CompareOk) {
				set Status=0 ; Error
			}
			; If There is a Source value and it matches the Result then it is ok
			if ($data(@Temp@("Source",Date))) {
				if $$$COMHCResultHashValue(Rec)=$get(@Temp@("Source",Date)) {
					set Status=2
				}
			}
			set $$$COMHCResultStatus(Rec)=Status
			do Save^COMHCCalculate("COMHCResult",Index,Rec,1)
		}
		if CompareOk=0 set CompareForAllDatesOk=0
	}
	; if the compare failed raise an Error
	if 'CompareForAllDatesOk {
		do RaiseError^COMUtilError($listbuild("Com00089",Type,Location),"COMHCResultShow"," ")
	}
	kill @Temp
	quit
	
	
SetupDrillDown(Temp,pstrHashValue1,pstrHashValue2,pstrDate,pstrSiteMethod)
	write !,$get(@Temp@("Index",pstrDate,pstrSiteMethod))_" ::"_$piece(pstrHashValue1,"|",1)_" :: "_$piece(pstrHashValue2,"|",1)
	quit
	
Index(Val="") 
    ;-------------------------------------------------------------------------------
    ; Convert Value to @NM Index
    ;
    ; Returns:
    ;
    ; History:
    ; 09-Feb-2004   SCR  	 Created
    ;-------------------------------------------------------------------------------
	new Index
	
	if Val="" set Val=" "
	if $data(^CacheTempIndex(Val)) {
		set Index=$get(^CacheTempIndex(Val))
	} else {
		set Index=$$^WWWUMLAU(Val,1)
		set ^CacheTempIndex(Val)=Index
	}
 
	quit Index
	
]]></Routine>
</Export>