<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INSOHPeriodBalance" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INSOHPeriodBalance
	
#include %occInclude
#include COMSYS
#include COMView
#include COMConst
	
OnAfterPrimaryKey(pidLocation,pidItem,pidPeriod)
	;-------------------------------------------------------------------------------
	; Params:
	;
	; Returns:
	;
	; History:
	; 28-Oct-2009	GRF		-: Missing parentheses around IF clause; + return value
	; 28-Aug-2008	HQN		SR15801: Corrected anchor for form name change
	; 20-Aug-2008	HQN		SR15801: Created
	;-------------------------------------------------------------------------------
	new objPeriodBalance,sc,sql,strStatus,objClassDef,lstProperties
	new objPeriodType,objPeriod,objResultSet,objPeriodBalances
	new loopPeriodBalances,objProperty
	new loopProperties
 
	set sc        = $$$OK
	set strStatus = $$$OK
	
	; Check %Request variables
	;quit:pidLocation=""&&pidItem=""          ; 28-Oct-2009
	;quit:$get(dteStart)=""                   ; 28-Oct-2009
	if (pidLocation="") && (pidItem="") quit strStatus
	if $get(dteStart)=""                quit strStatus
	
	set:$get(dteEnd)="" dteEnd = +$horolog ; Default End date today
	;w "pidItem:"_pidItem,!,"pidLocation:"_pidLocation
	 
	set objPeriodBalances = ##class(%Library.ListOfObjects).%New()
	if (pidItem '= "") && (pidLocation  '= ""){
		set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dPeriodType:Extent")
		if objResultSet.Execute() {
			while objResultSet.Next(.sc) {
				set objPeriodType = ##class(alSOH.dPeriodType).%OpenId(objResultSet.Data("ID"),,.sc)
				if objPeriodType '= $$$NULLOREF {
					set objPeriod = objPeriodType.GetPeriodViaDate(dteEnd)
				}
			}
		}
		set objResultSet = ##class(%Library.ResultSet).%New()
		if objResultSet.Prepare("SELECT * FROM alSOH.dSOHPeriod WHERE StartDate <= ? AND EndDate >= ? And StartDate >= ?") {
			if objResultSet.Execute(dteEnd,dteStart,dteStart) {
				while objResultSet.Next() {
					set objPeriodBalance = ##class(alSOH.dPeriodBalance).%OpenId(pidLocation_"||"_pidItem_"||"_objResultSet.Data("ID"),,.sc)
					if objPeriodBalance = $$$NULLOREF {
						set objPeriodBalance = ##class(alSOH.dPeriodBalance).%New()
						set objPeriodBalance.Location = ##class(alLOC.iLOC).GetLocation(pidLocation)
						set objPeriodBalance.Item = ##class(alINV.iUINV).GetItem(pidItem)
						set objPeriodBalance.SOHPeriod = ##class(alSOH.dSOHPeriod).%OpenId(objResultSet.Data("ID"))
						set sc = objPeriodBalance.Populate()
						set:$$$ISOK(sc) sc = objPeriodBalance.%Save()
					}
					do:$$$ISOK(sc) objPeriodBalances.Insert(objPeriodBalance)
				}
			}
		}
		
		; attempt to generate applicable V2 strutures for the query
		;set lstPeriodTypes = $$GetPeriodTypes()
	}
 
	if objPeriodBalances.Count() > 0 {
		set lstProperties = ""
		set objClassDef = ##class(%Dictionary.ClassDefinition).%OpenId("alSOH.dPeriodBalance")
		for loopProperties=1:1:objClassDef.Properties.Count() {
			set lstProperties = lstProperties_$listbuild(objClassDef.Properties.GetAt(loopProperties).Name)
		}
		do Start^COMTable($listbuild("ID","Location","Item","Period")_lstProperties,"Period Balances")
		for loopPeriodBalances=1:1:objPeriodBalances.Count() {
			set objPeriodBalance = objPeriodBalances.GetAt(loopPeriodBalances)
			do NewLine^COMTable()
			do InsertCell^COMTable(objPeriodBalance.%Id(),YFORM)
			do InsertCell^COMTable(objPeriodBalance.Location.%Id())
			do InsertCell^COMTable(objPeriodBalance.Item.%Id())
			do InsertCell^COMTable("<label title="""_objPeriodBalance.SOHPeriod.PeriodType.Description_$char(10)_"Start Date: "_$zdate(objPeriodBalance.SOHPeriod.StartDate)_$char(10)_"End Date: "_$zdate(objPeriodBalance.SOHPeriod.EndDate)_"""><a href="""_YAKTION_"EP=WWWFORM&YFORM=INSOHPeriodType"_$$WWWCGI2^WWWCGI()_"&YKEY="_objPeriodBalance.SOHPeriod.PeriodType.%Id()_""">"_objPeriodBalance.SOHPeriod.%Id()_"</a></label>")
			for loopProperties=1:1:$listlength(lstProperties) {
				set objProperty = $zobjmethod(objPeriodBalance,$listget(lstProperties,loopProperties)_"Get")
				if $isobject(objProperty) {
					do InsertCell^COMTable(objProperty.%Id())
				} else {
					do InsertCell^COMTable(objProperty)
				}
			}
			do EndLine^COMTable()
		}
		do Stop^COMTable()
	} else {
		set strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
		//w strStatus
	}
	
	quit strStatus
 
OnBeforeButtonLine(pidItem="")
	do ListPeriodBalance(pidItem)
	
	quit
 
Submit(pidLocation,pidItem,pidPeriod)
	;-------------------------------------------------------------------------------
	; Method Usage
	;
	; Params:
	; ByRef: idLocation, idItem, idPeriod
	;
	; Returns:
	;
	; History:
	; 20-Aug-2008	HQN		SR15801: Created
	;-------------------------------------------------------------------------------
	new idItem,idLocation,idPeriod
	
	set idLocation = pidLocation
	set idItem     = pidItem
	set idPeriod   = pidPeriod
	
	do ^WWWFORM
	
	do OnAfterDataFields(pidLocation,pidItem,pidPeriod)
	
	quit
	
	
OnAfterDataFields(pidLocation,pidItem,dteTarget)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 20-Aug-2008	HQN		SR15801: Created
	;-------------------------------------------------------------------------------
	$$$StartScript()
	do PopulateDataField^COMUtils(YFORM,1,pidLocation,"M")
	do PopulateDataField^COMUtils(YFORM,2,pidItem,"M")
	;do PopulateDataField^COMUtils(YFORM,3,$get(dteTarget),"M")
	$$$EndScript()
	quit
	
GetPeriodTypes(dteTarget)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 20-Aug-2008	HQN		SR15801: Created
	;-------------------------------------------------------------------------------
	new strPeriodTypes,objResultSet
	set strPeriodTypes = ""
	set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dPeriodType:Extent")
	if objResultSet.Execute() {
		while objResultSet.Next() {
			set $piece(strPeriodTypes,",",$length(strPeriodTypes,",")) = objResultSet.Data("ID")
		}
	}
	quit strPeriodTypes
	
OnAfterButtonLine()
	quit
	
	
ListPeriodBalance(pidItem="",pidLocation="",pdteStart="",pdteEnd="")
	;-------------------------------------------------------------------------------
	; Look at INARTStockHistory for implementation of custom comview to load v2 data
	; structures
	;
	; History:
	; 29-Apr-2009	PPP		SR16499: Updated the COMView to be a Jump to on
	; 							GridClick with a Callback routine; Added the new
	; 							parameter to Initialize (Column Selection #6); Added
	; 							new paramteres - pidLocation="",pdteStart="",pdteEnd
	; 15-OCt-2008	HQN		SR16030: Created
	;-------------------------------------------------------------------------------
	new idClass,idOperator
 
 	set idClass = "alSOH.dPeriodBalance"
 	//SR16499
	do Initialise^COMViewCustom(idClass,"Selected^INSOHPeriodBalance(objResult,pidField)",$$$NO,$$$NO,$$$NO,$$$YES) 	//SR16499
	//do Initialise^COMViewCustom(idClass,,$$$NO,$$$NO,$$$YES) 		//SR16499
 
	$$$ClearExternalFilter(idClass)
 
	if $get(pidItem)'="" {
		set idOperator = $$$EnumCOMVIEWCOMPARATOREquals
	} else {
		set idOperator = $$$EnumCOMVIEWCOMPARATORStartsWith
	}
	
 	if $get(pidLocation)="" set pidLocation = YLOCATION
	if $get(pdteStart) = "" set pdteStart   = $horolog-30
	if $get(pdteEnd) = ""   set pdteEnd     = $horolog+1
	
 
 	do AddExternalFilter^COMViewFilter(idClass,"SOHPeriod->StartDate",pdteStart,  $$$EnumCOMVIEWCOMPARATORGreaterThan,$$$YES)
	do AddExternalFilter^COMViewFilter(idClass,"SOHPeriod->EndDate",  pdteEnd,    $$$EnumCOMVIEWCOMPARATORLessThan,   $$$YES)
	do AddExternalFilter^COMViewFilter(idClass,"Item->ItemId",        pidItem,    idOperator,                         $$$YES)
	do AddExternalFilter^COMViewFilter(idClass,"Location->Code",      pidLocation,$$$EnumCOMVIEWCOMPARATOREquals,     $$$YES)
	
	do Show^COMViewCustom($$$YES) 
 
	quit
 
 
Selected(pobjResultSet,pidField)
	;-------------------------------------------------------------------------------
	; Open original transaction document
	;
	; Params:
	; pobjResult	Resultset of the ID's
	; pidField		Selected Column ID
	;
	; Returns:
	; The record that has been selected will redirect to the Stock Transactions for th
	; selected Row & Column
	;
	; History:
	; 12-Nov-2009	PPP		SR17023: Updated to get Transactions for Free fields based on
	;						User defined parameters if Column is QtySubType - subclass
	; 22-Apr-2009	PPP		SR16499: Created
	;-------------------------------------------------------------------------------
	new idPBalance,idClass,idColumn,idTxn,lstColumns
	new idField
	new idxField
	new strMovList
	new strSubTypeList
	new idMov
	new idSubType
	new sc
	new objPBalance
	new idLocation
	new dteStart
	new dteEnd
	new SQLCODE
	new idTxn
	new idItem
	
	set sc=$$$OK
	
	set idClass    = $get(^CacheTempView(YUSER,"Class"))
	set lstColumns = $$GetColumns^COMViewFilterColumn(idClass)
	
	if pobjResultSet.Next(.sc) {
		set idPBalance = $get(pobjResultSet.Data("ID"))	
		set idColumn   = $listget(lstColumns,pidField+1)
		
		set objPBalance = ##class(alSOH.dPeriodBalance).%OpenId(idPBalance)
		set idItem      = objPBalance.Item.%Id()
		set idLocation  = objPBalance.Location.%Id()
		set dteStart    = (objPBalance.SOHPeriod.StartDate-1)
		set dteEnd      = (objPBalance.SOHPeriod.EndDate+1)
		do objPBalance.%Close()

		//SR17023
		if idColumn '[ "QtySubType" {

			&SQL(SELECT TxnID INTO :idTxn FROM alSOH.dTransactionType WHERE PeriodBalancePropertyIn = :idColumn or PeriodBalancePropertyOut = :idColumn)
 
			if 'SQLCODE {			
				do GoToForm^COMUtils("INARTStockHistory",idItem,,(idLocation_","_dteStart_","_dteEnd_","_idTxn),$$$YES,)
			}

		} else {
			set idField = $piece(idColumn,"->",$length(idColumn,"->"))			//QtyFree1
			set idField	= +$extract(idField,8,99)								//1
			if 'idField {
				set idField = "Consumption"
			}
		
			set idxField 	= $$$Index(idField)
			
			//^INSOHSubTypeMaps(0,1,"CONSUMPTION",0,999)=""
			set strMovList 		= ""
			set strSubTypeList 	= ""
			
			set idMov=""
			for {
				set idMov = $order(^INSOHSubTypeMaps(0,1,idxField,idMov))
				quit:idMov=""
				
				set strMovList = strMovList_":"_idMov
				
				set idSubType = ""
				for {
					set idSubType = $order(^INSOHSubType(0,1,idxField,idMov,idSubType))
					quit:idSubType=""
					
					//SubType 999 = All
					continue:idSubType=999
					
					set strSubTypeList = strSubTypeList_":"_idSubType
				
				}
			
			}

			//Review Trn Type Lists before sending them to the Stock Transaction COMView
			if $translate(strMovList,":")'="" {
				set strMovList = $piece(strMovList,":",2,99)
			} else {
				set strMovList = ""
			}
			if $translate(strSubTypeList,":")'="" {
				set strSubTypeList = $piece(strSubTypeList,":",2,99)
			} else {
				set strSubTypeList = ""
			}

			do GoToForm^COMUtils("INARTStockHistory",idItem,,(idLocation_","_dteStart_","_dteEnd_",,"_strMovList_","_strSubTypeList),$$$YES,)
		
		}
		
	}
	
	quit
	
]]></Routine>
</Export>