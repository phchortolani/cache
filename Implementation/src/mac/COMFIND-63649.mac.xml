<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMFIND" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include %occInclude
 
FindInRoutine(pstrModule="",pstrWhat="",pblnCode=1,pblnCaseSensitive=0)
    ;-------------------------------------------------------------------------------
    ; Searches all developer written code/module looking for a particular string.
    ;
    ; Arguments:
    ; 		pstrModule			- ie. WWW, IN or "" for all modules
    ; 		pstrWhat			- string to find
    ; 		pblnCode			- 1 to ignore comments, 0 to include comments
    ; 		pblnCaseSensitive	- 1 to be case sensitive, 0 to be case insensitive
    ;
    ; Returns: Will generate an HTML document containing all matches.
    ;
    ; History:
    ; 05-Apr-2005	PO		Created
    ;-------------------------------------------------------------------------------
	new intLine,strLine,intLineCount,intCharCount
	new strLineCopy,strWhatCopy
	new oldIO,curIO
	new intMatches,strWhat,strModule,objFile
 
	write "Started at: "_$zdatetime($h),!
 
	set intLine      = ""
	set intLineCount = 0
	set intCharCount = 0
	set intMatches   = 0
	set oldIO        = $io
	set strWhat      = $zstrip(pstrWhat,"*P")
	if pblnCaseSensitive {
		set strWhatCopy = pstrWhat
	} else {
		set strWhatCopy = $$$UPPER(pstrWhat)
	}
	set curIO        = "\\codesplitdev\DiscLinc\Find\"_$select(pstrModule'="":pstrModule_"\",1:"")_strWhat_"."_$job_".html"
	
	set strModule    = pstrModule
 
	set objFile=##class(%Library.File).%New(curIO)
	if objFile'=$$$NULLOREF {
		if $$$ISOK(objFile.Open("NSW")) {
			do objFile.WriteLine("<html><head><title></title><style> <!--")
			do objFile.WriteLine("body { font-family:arial; }")
			do objFile.WriteLine("// -->")
			do objFile.WriteLine("</style></head><body>")
			
			for {
				set strModule=$order(^ROUTINE(strModule))
				
				quit:strModule=""
				quit:(pstrModule'="")&&($extract(strModule,1,$length(pstrModule))'=pstrModule)
				continue:$extract(strModule)="%"
				continue:$extract(strModule,1,2)="oo"
				continue:$extract(strModule,1,3)="idx"
				continue:$extract(strModule,1,3)="csp"
				continue:$extract(strModule,1,4)="User"
				continue:$extract(strModule,1,3)="wld"
				continue:$$$UPPER($extract(strModule))="Z"
				
				set intLine=""
				for {
					set intLine = $order(^ROUTINE(strModule,0,intLine))
					set intLineCount=intLineCount+1
					quit:intLine=""
 
					set strLine = $get(^ROUTINE(strModule,0,intLine))
					set intCharCount = intCharCount + $length(strLine)
					
					if pblnCaseSensitive {
						set strLineCopy = strLine
					} else {
						set strLineCopy = $$$UPPER(strLine)
					}
 
					; assuming looking for functioning code check that pstrWhat is not preceded by a semicolon
					; this will not ensure all comments are omitted but will remove the majority
					; 
					; This ought to do it... (not now though :) )
					; set intIndex = 0
					; for {
					; 	set intIndex = $find(strLineCopy,";",intIndex)
					; 	quit:(intIndex=0)||($find(strLineCopy,strWhatCopy))
					; 	continue:$length($extract(strLineCopy,1,intIndex),"""")#2 ; if ; is part of a literal
					; if $find(strLineCopy,strWhatCopy)&&($find(strLineCopy,strWhatCopy)<$find(strLineCopy,";",intIndex))
					; }
					; ! BUT NOT COMPLETE !
					; Need to ensure semicolon is not part of a string. Secondly I don't think a semicolon is
					; used by any intrinsic functions, ie. how $select uses the colon.
					;
					; Slight issue, if string being searched for exists more than once on a line and some but not all
					; are commented out, would like to ignore commented out section. Can do this by escaping string.
 
					if $find(strLineCopy,strWhatCopy) {
						set intMatches=intMatches+1
						set strLine = $$FullReplace(strLine,pstrWhat,"<b style='color:blue;'>"_pstrWhat_"</b>",pblnCaseSensitive)
						do objFile.WriteLine("<b>"_strModule_"+"_intLine_"</b> "_strLine_"<br />")
				
					}
				}
			}
			
			do objFile.WriteLine("<p>Matches: "_intMatches_", Lines: "_intLineCount_", Chars: "_intCharCount_"</p>")
 
			do objFile.WriteLine("</body></html>")
		}
		kill objFile	
	}
	
	write "Finished at: "_$zdatetime($h),!
	
	write !,"Please navigate to:"
	write !,"file:"_curIO,!
 
	quit
 
FullReplace(pstrSource="",pstrFrom="",pstrTo="",pblnCaseSensitive=0)
	new strResult,strPiece,intIndex,intNumPieces
	new strSourceCopy,strFromCopy,intPrevIndex
 
	set strResult    = ""
	set intIndex     = 0
	if pblnCaseSensitive {
		set strSourceCopy	= pstrSource
		set strFromCopy		= pstrFrom
	} else {
		set strSourceCopy	= $$$UPPER(pstrSource)
		set strFromCopy		= $$$UPPER(pstrFrom)
	}
	set intNumPieces = $length(strSourceCopy,strFromCopy)-1
 
	set intIndex     = 1
	set intPrevIndex = 1
	for {
		set intPrevIndex = intIndex
		set intIndex     = $find(strSourceCopy,strFromCopy,intIndex)
		quit:intIndex=0
		set strPiece     = $zconvert($extract(pstrSource,intPrevIndex,intIndex-$length(pstrFrom)-1),"o","HTML")
		set strResult    = strResult_strPiece_pstrTo
	}
 
	set strResult = strResult_$zconvert($extract(pstrSource,intPrevIndex,$length(pstrSource)),"o","HTML")
 
 /* OLD WAY FROM FullReplace^COMUTILSTR, the above code is able to ignore case and return result in original case
 // There is no need for strings to be altered as passed in.
	for {
		quit:intNumPieces=intIndex
		set intIndex  = intIndex+1
		set strPiece  = $zcvt($piece(pstrSource,pstrFrom,intIndex),"o","HTML")
		set strResult = strResult_strPiece_pstrTo
	}
 
	set strResult = strResult_$zcvt($piece(pstrSource,pstrFrom,intIndex+1),"o","HTML")
 */
 
	quit strResult
]]></Routine>
</Export>