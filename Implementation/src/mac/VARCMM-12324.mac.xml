<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARCMM" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARCMM
#include COMSYS
#include INConst

RecalculateFromStart
	do ^WWWVAR
	new tDateStart,tDateFinish,tMonthStart,tMonthFinish,tYearStart,tYearFinish
	set tDateStart=""
	set tDateFinish=""
	set tMonthStart=""
	set tMonthFinish=""
	set tYearStart=""
	set tYearFinish=""
	w "Clearing CMM globals",!
	kill ^VARCMMLinha
	kill ^VARMOVLinha
	kill ^VARCMMProgramaLinha
	kill ^VARMOVProgramaLinha
	&SQL(select top 1 DateConfirmed into :tDateStart from alSOH.dStockHistory order by DateConfirmed)
	if SQLCODE=0 {
		w "Earlier transaction date found ->",$ZD(tDateStart,4),!
	}else {
		w "Nothing to calculate, Stock History is empty",!
		q
	}
	set tDateFinish=$Piece($H,",",1)
	set tMonthFinish=$e($ZD(tDateFinish,8),5,6)
	set tYearFinish=$e($ZD(tDateFinish,8),0,4)
	
	set tMonthStart=$e($ZD(tDateStart,8),5,6)
	set tYearStart=$e($ZD(tDateStart,8),0,4)
	
	w "Calculating CMM and MOV from ",$ZD(tDateStart,4)," to ",$ZD(tDateFinish,4),!
	
	set tBool=0
	while tBool=0 {
		if ((tYearStart=tYearFinish) && (tMonthStart>tMonthFinish)) {
			set tBool=1
			w !,"Calculation complete! ",!
			q
		}
		if ((tYearStart>tYearFinish)) {
			set tBool=1
			w !,"Calculation complete! ",!
			q
		}
		w !,"Calculating for ",tYearStart_"/"_tMonthStart,"...",!
		do RodaMOVPeriodoLocal(tYearStart_"/"_tMonthStart,,0)
		do RodaMOVPeriodoPrograma(tYearStart_"/"_tMonthStart,,0)
		do RodaCMMPeriodoLocal(tYearStart_"/"_tMonthStart,,0)
		do RodaCMMPeriodoPrograma(tYearStart_"/"_tMonthStart,,0)

		set tMonthStart=tMonthStart+1
		if $length(tMonthStart)=1 set tMonthStart="0"_tMonthStart
		if tMonthStart>12 {
			set tYearStart=tYearStart+1
			set tMonthStart="01"
		}
	}
	w !,"Loading Alert screen ",!
	do RunAll
	q

Fix
	do RunAllAnoMes("2013/09")
	do RunAllAnoMes("2013/10")
	quit

RunAll
	do RunAllAnoMes("")
	q
	
RunAllAnoMes(filterAnoMes="")

	do ^WWWVAR
	
	//do RodaMOVPeriodoPrograma(,,0)
	do RodaCMMPeriodoLocal(filterAnoMes,,0)
	do RodaMOVPeriodoLocal(filterAnoMes,,0)
	//do RodaCMMPeriodoPrograma(,,0)
	/*
	set VORG(1)="VARCMMProgramaLinha"
	DO ^WWWSORT
	set VORG(1)="VARMOVProgramaLinha"
	
	DO ^WWWSORT
	*/
	set VORG(1)="VARCMMLinha"
	DO ^WWWSORT
	set VORG(1)="VARMOVLinha"
	DO ^WWWSORT
	KILL ^VARAlertaLocalLinha
	KILL ^VARAlertaLocalLinhas
	do LoadAlerta
	$$$Order3(^WWW0121,YM,YM,idLocation)
		set objLocation=$get(^WWW0121(YM,YM,idLocation,1))
		if (($piece(objLocation,Y,24)=1) && ($piece(objLocation,Y,67)'=1)) do LoadAlerta(idLocation)
	$$$End
	
	//do LoadAlertaPrograma

	quit
	
LoadAlerta(pidLocal="")
	;-------------------------------------------------------------------------
	; Descrição
	;	Carrega os dados para a tabela VARAlertaLocalLinha, utilizada pelo alerta de reposição
	;
	; Chamado por:
	;	do RunAll^VARCMM
	;
	; Histórico
	;	22-Dez-2016		FC		LEAN-15: Se o local for Rede, carrega os itens mesmo que não tenham demanda média
	;-------------------------------------------------------------------------
	do ^WWWVAR
	set pidItem=""
	set count=0
	write "Loading alerta for "
	if pidLocal="" {
		write "Rede",! 
	}
	else {
		write pidLocal,!
	}
	$$$Order2(^INART,YM,pidItem)
		set fltDM = $$GetDM^VARReposicao(pidItem,pidLocal)
		
		// LEAN-15: Se o local for rede, carrega os itens mesmo que não tenham demanda média
		if ((fltDM > 0) || (pidLocal = "")) {
			write "Item->",pidItem,?20,"Local->",pidLocal,?40,"DM->",fltDM
		
			set count = count+1
			
			set key = pidLocal_","_pidItem
			
			if pidLocal = "" set key="Rede,"_pidItem
			
			set obj=""
			set $piece(obj,Y,3)=$$SQLGetDescricaoProduto^VARSQL(pidItem)
			
			set strStatus=$$Save^COMUtils("VARAlertaLocalLinha",key,obj,1)
			
			if strStatus'=1 write "Erro ao salvar Item ",pidItem,",->",strStatus
			
			write !
		}
		
	$$$End
	write count," products loaded",!!
	quit

LoadAlertaPrograma()
	do ^WWWVAR
	set pidItem=""
	set count=0
	w "Loading alerta for Programs"
	$$$Order2(^INPROJECT,YM,pidPrograma)
		w pidPrograma,!
		$$$Order2(^INART,YM,pidItem)
		if $$GetDM^VARReposicaoPrograma(pidPrograma,pidItem)>0 {
			set count=count+1
			w "Item->",pidItem,!
			set key=pidPrograma_","_pidItem
			set obj=""
			set $piece(obj,Y,3)=$$SQLGetDescricaoProduto^VARSQL(pidItem)
			w obj,!
			set strStatus=$$Save^COMUtils("VARAlertaProgramaLinha",key,obj,1)
			if strStatus'=1 w "Erro ao salvar Item ",pidItem,",->",strStatus
			w !
		}else {
			if $$GetEPLocal^VARReposicaoPrograma(pidPrograma,pidItem)>0 {
				set count=count+1
				w "Item->",pidItem,!
				set key=pidPrograma_","_pidItem
				set obj=""
				set $piece(obj,Y,3)=$$SQLGetDescricaoProduto^VARSQL(pidItem)
				w obj,!
				set strStatus=$$Save^COMUtils("VARAlertaProgramaLinha",key,obj,1)
				if strStatus'=1 w "Erro ao salvar Item ",pidItem,",->",strStatus
				w !
			}
		}
		$$$End
	$$$End
	w count," products loaded",!
	q

RodaCMMPeriodoPrograma(filterAnoMes="",filterLocation="",sort=1)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Função de cálculo dos dados de consumo mensal utilizando a StockHistory.
    ;	São considerados na geração de registros para cálculo de CMM *somente* os
    ;	seguintes tipos de movimentação:
    ;		11. Consumo para Setor (Department Issue)
    ;		21. Dispensação para Paciente (Patient/Sale Issue)
    ;		22. Devolução ao Estoque (Issue Reversal)
    ;		31. Aceite de transferência
    ; 
    ; Histórico:
    ;	20-Oct-2011		RGB		Alterações para utilizar temporariamente na SESPE, incluido Aceite de transferencia e outras validações
    ;							Parâmetreo de local não é mais obrigatório
    ; 	02-Ago-2010		Criado
    ;-------------------------------------------------------------------------------	
	quit:( filterAnoMes = "" )
	if $get(YM)="" do ^WWWVAR
	new sAnoMes, sDocumento, sProduto, sLocal, sMovmtType, sQuantidade, sValorTxn, year, month,
		numMonth, idLocnOrPatient,sProgram
	set sAnoMes=filterAnoMes
	set year  = $piece(sAnoMes,"/",1)
	set month = $piece(sAnoMes,"/",2)
		
	set numMonth = $number(month)
	
	set tSQL="SELECT "_
			   "TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') as AnoMes, "_
			   "alSOH.dStockHistory.Reference as sDocumento, "_
			   "alSOH.dStockHistory.Item as sProduto, "_
			   "alSOH.dStockHistory.Location as sLocal, "_
			   "alSOH.dStockHistory.MovementType_MovementTypeId as sMovmtType, "_
			   "SUM(alSOH.dStockHistory.QtyMoved) as sQuantidade, "_
			   "alSOH.dStockHistory.Bundle->Program as sProgram, "_
			   "SUM(alSOH.dStockHistory.TxValue) as sValorTxn "_
			   "FROM alSOH.dStockHistory "_
			   "WHERE TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') = '"_filterAnoMes_"' "
				if filterLocation'="" set tSQL=tSQL_"and alSOH.dStockHistory.Location='"_filterLocation_"' "
			   set tSQL=tSQL_"and ((alSOH.dStockHistory.MovementType_MovementTypeId = 21) "_
			   "OR (alSOH.dStockHistory.MovementType_MovementTypeId = 22 AND alSOH.dStockHistory.Storage->Code != 'X') "_
               "OR (alSOH.dStockHistory.MovementType_MovementTypeId in(11,31) AND alSOH.dStockHistory.Storage->Code = 'X') ) "_
			   "GROUP BY alSOH.dStockHistory.Reference, alSOH.dStockHistory.Item,alSOH.dStockHistory.Bundle->Program, alSOH.dStockHistory.Location, alSOH.dStockHistory.MovementType "_
			   "ORDER BY alSOH.dStockHistory.ID"

	Set tRs = ##class(%Library.ResultSet).%New()

	Set tRs.RuntimeMode = "0"	

	Do tRs.Prepare(tSQL) 

	Do tRs.Execute()

	While tRs.Next() {

		set sDocumento=""
		set sProduto=""
		set sLocal=""
		set sMovmtType=""
		set sQuantidade=""
		set sValorTxn=""
		set sLocation=""
		set sProgram=""
		
		set sDocumento=tRs.Data("sDocumento")
		set sProduto=tRs.Data("sProduto")
		set sLocal=tRs.Data("sLocal")
		set sMovmtType=tRs.Data("sMovmtType")
		set sQuantidade=tRs.Data("sQuantidade")
		set sValorTxn=tRs.Data("sValorTxn")
		set sLocation=tRs.Data("sLocal")
		set sProgram=tRs.Data("sProgram")
		
		IF sProgram'="" {
			//Salva na global o saldo inverso que é mantido na StockHistory
			set sQuantidade = (sQuantidade * -1)
			set sValorTxn   = (sValorTxn * -1)
		
			;w "Item: "_sProduto_" Data: "_year_"/"_month_" Local: "_sLocal_" Doc: "_sDocumento_" Qty: "_sQuantidade_" Vlue: "_sValorTxn,!
		
			set idLocnOrPatient = $$GetLocnOrPatient(sMovmtType,sDocumento,filterLocation)
		
			set ^VARCMMProgramaLinha(YM,sProduto,year,numMonth,sProgram,sLocal,sDocumento,1) = sQuantidade_Y_sValorTxn_Y_sMovmtType_Y_idLocnOrPatient
		}
		
	}

	If $IsObject(tRs)

		{

		Do tRs.Close()

	}
	if sort=1 {
		set VORG(1)="VARCMMProgramaLinha"
		DO ^WWWSORT
		set VORG(1)="VARMOVProgramaLinha"
		DO ^WWWSORT
	}
	quit

RodaMOVPeriodoPrograma(filterAnoMes="",filterLocation="",sort=1)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Função de cálculo dos dados de consumo mensal utilizando a StockHistory.
    ;	São considerados na geração de registros para cálculo de CMM *somente* os
    ;	seguintes tipos de movimentação:
    ;		11. Consumo para Setor (Department Issue)
    ;		21. Dispensação para Paciente (Patient/Sale Issue)
    ;		22. Devolução ao Estoque (Issue Reversal)
    ;		31. Aceite de transferência
    ; 
    ; Histórico:
    ;	20-Oct-2011		RGB		Alterações para utilizar temporariamente na SESPE, incluido Aceite de transferencia e outras validações
    ;							Parâmetro de local não é mais obrigatório
    ; 	02-Ago-2010		Criado
    ;-------------------------------------------------------------------------------	
	quit:( filterAnoMes = "" )
	if $get(YM)="" do ^WWWVAR
	new sAnoMes, sDocumento, sProduto, sLocal, sMovmtType, sQuantidade, sValorTxn, year, month,
		numMonth, idLocnOrPatient,sProgram
	set sAnoMes=filterAnoMes
	set year  = $piece(sAnoMes,"/",1)
	set month = $piece(sAnoMes,"/",2)
		
	set numMonth = $number(month)
	
	set tSQL="SELECT "_
			   "TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') as AnoMes, "_
			   "alSOH.dStockHistory.Reference as sDocumento, "_
			   "alSOH.dStockHistory.Item as sProduto, "_
			   "alSOH.dStockHistory.Location as sLocal, "_
			   "alSOH.dStockHistory.MovementType_MovementTypeId as sMovmtType, "_
			   "SUM(alSOH.dStockHistory.QtyMoved) as sQuantidade, "_
			   "alSOH.dStockHistory.Bundle->Program as sProgram, "_
			   "SUM(alSOH.dStockHistory.TxValue) as sValorTxn "_
			   "FROM alSOH.dStockHistory "_
			   "WHERE TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') = '"_filterAnoMes_"' "
			   
				if filterLocation'="" set tSQL=tSQL_"and alSOH.dStockHistory.Location='"_filterLocation_"' "
			   set tSQL=tSQL_"and ((alSOH.dStockHistory.MovementType_MovementTypeId = 30 and (alSOH.dStockHistory.QtyMoved<0)) "_
			   "OR (alSOH.dStockHistory.MovementType_MovementTypeId = 32 and (alSOH.dStockHistory.QtyMoved>0)) "_
			   "OR (alSOH.dStockHistory.MovementType_MovementTypeId = 22 AND alSOH.dStockHistory.Storage->Code != 'X' and (alSOH.dStockHistory.QtyMoved<0)) "_
               "OR (alSOH.dStockHistory.MovementType_MovementTypeId = 11 AND alSOH.dStockHistory.Storage->Code != 'X' and (alSOH.dStockHistory.QtyMoved>0)) ) "_
			   "GROUP BY alSOH.dStockHistory.Reference, alSOH.dStockHistory.Item,alSOH.dStockHistory.Bundle->Program, alSOH.dStockHistory.Location, alSOH.dStockHistory.MovementType "_
			   "ORDER BY alSOH.dStockHistory.ID"

	Set tRs = ##class(%Library.ResultSet).%New()

	Set tRs.RuntimeMode = "0"	

	Do tRs.Prepare(tSQL) 

	Do tRs.Execute()

	While tRs.Next() {

		set sDocumento=""
		set sProduto=""
		set sLocal=""
		set sMovmtType=""
		set sQuantidade=""
		set sValorTxn=""
		set sLocation=""
		SET sProgram=""
		set sProgram=tRs.Data("sProgram")
		IF sProgram'="" {
			set sDocumento=tRs.Data("sDocumento")
			set sProduto=tRs.Data("sProduto")
			set sLocal=tRs.Data("sLocal")
			set sMovmtType=tRs.Data("sMovmtType")
			set sQuantidade=tRs.Data("sQuantidade")
			set sValorTxn=tRs.Data("sValorTxn")
			set sLocation=tRs.Data("sLocal")
		
		
			//Salva na global o saldo inverso que é mantido na StockHistory
			set sQuantidade = (sQuantidade * -1)
			set sValorTxn   = (sValorTxn * -1)
		
		
			;w "Item: "_sProduto_" Data: "_year_"/"_month_" Local: "_sLocal_" Doc: "_sDocumento_" Qty: "_sQuantidade_" Vlue: "_sValorTxn,!
		
			set idLocnOrPatient = $$GetLocnOrPatient(sMovmtType,sDocumento,filterLocation)
		
			set ^VARMOVProgramaLinha(YM,sProduto,year,numMonth,sProgram,sLocal,sDocumento,1) = sQuantidade_Y_sValorTxn_Y_sMovmtType_Y_idLocnOrPatient
		}
		
	}

	If $IsObject(tRs)

		{

		Do tRs.Close()

	}
	if sort=1 {
		set VORG(1)="VARCMMProgramaLinha"
		DO ^WWWSORT
	}
	quit
	
RodaCMMPeriodoLocal(filterAnoMes="",filterLocation="",sort=1)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Função de cálculo dos dados de consumo mensal utilizando a StockHistory.
    ;	São considerados na geração de registros para cálculo de CMM *somente* os
    ;	seguintes tipos de movimentação:
    ;		11. Consumo para Setor (Department Issue)
    ;		21. Dispensação para Paciente (Patient/Sale Issue)
    ;		22. Devolução ao Estoque (Issue Reversal)
    ;		31. Aceite de transferência
    ; 
    ; Histórico:
    ;	22-Jan-2016		HGD		HEVA-1895 	Erro <subscript> ao rodar a RunAll^VARCMM com algumas variáveis sem validação
    ;	08-Ago-2012		RGB		Revisão para melhorar a performance, retirando as entradas na INART e INDRPITEM, adicionando entrada de data e hora
    ;	20-Oct-2011		RGB		Alterações para utilizar temporariamente na SESPE, incluido Aceite de transferencia e outras validações
    ;							Parâmetreo de local não é mais obrigatório
    ; 	02-Ago-2010		Criado
    ;-------------------------------------------------------------------------------	
    IF $GET(Y)="" do ^WWWVAR
	if filterAnoMes="" {
		// Run for current Month
		set filterAnoMes=$e($ZD($H,8),0,4)_"/"_$e($ZD($H,8),5,6)
	}
	
	new sAnoMes, sDocumento, sProduto, sLocal, sMovmtType, sQuantidade, sValorTxn, year, month,
		numMonth, idLocnOrPatient,sDate,sTime,sCostCenter, sLineNumber
	set sAnoMes=filterAnoMes
	set year  = $piece(sAnoMes,"/",1)
	set month = $piece(sAnoMes,"/",2)
		
	set numMonth = $number(month)
	
	set tSQL="SELECT "_
			   "TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') as AnoMes, "_
			   "alSOH.dStockHistory.Reference as sDocumento, "_
			   "alSOH.dStockHistory.DateConfirmed as DateConfirmed, "_
			   "alSOH.dStockHistory.TimeConfirmed as TimeConfirmed, "_
			   "alSOH.dStockHistory.Item as sProduto, "_
			   "alSOH.dStockHistory.Location as sLocal, "_
			   "alSOH.dStockHistory.MovementType_MovementTypeId as sMovmtType, "_
			   "SUM(alSOH.dStockHistory.QtyMoved) as sQuantidade, "_
			   "SUM(alSOH.dStockHistory.TxValue) as sValorTxn, "_
			   "alSOH.dStockHistory.ID as sBundleID, "_
			   "alSOH.dStockHistory.LineNumber "_
			   "FROM alSOH.dStockHistory "_
			   "WHERE TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') = '"_filterAnoMes_"' "
				if filterLocation'="" set tSQL=tSQL_"and alSOH.dStockHistory.Location='"_filterLocation_"' "
			   set tSQL=tSQL_"and ((alSOH.dStockHistory.MovementType_MovementTypeId = 21) "_
			   "OR (alSOH.dStockHistory.MovementType_MovementTypeId = 22 AND alSOH.dStockHistory.Storage->Code != 'X' and (alSOH.dStockHistory.QtyMoved>0)) "_
               "OR (alSOH.dStockHistory.MovementType_MovementTypeId in(11,31) AND alSOH.dStockHistory.Storage->Code = 'X') "_
               "OR (alSOH.dStockHistory.MovementType_MovementTypeId =35) "_
               "OR (alSOH.dStockHistory.MovementType_MovementTypeId =37)) "_
			   "GROUP BY alSOH.dStockHistory.Reference, alSOH.dStockHistory.Item, alSOH.dStockHistory.Location, alSOH.dStockHistory.MovementType "_
			   "ORDER BY alSOH.dStockHistory.ID"
	
	Set tRs = ##class(%Library.ResultSet).%New()

	Set tRs.RuntimeMode = "0"	
	;for i=1:1:100 h 1
	Do tRs.Prepare(tSQL) 
	SET ^RubensDebugCMM(1)=tSQL
	Do tRs.Execute()

	While tRs.Next() {

		set sDocumento=""
		set sProduto=""
		set sLocal=""
		set sMovmtType=""
		set sQuantidade=""
		set sValorTxn=""
		set sLocation=""
		set sDate=""
		set sTime=""
		set sLineNumber=""
		set sSaida=""
		
		set sDocumento=tRs.Data("sDocumento")
		set sProduto=tRs.Data("sProduto")
		set sLocal=tRs.Data("sLocal")
		set sMovmtType=tRs.Data("sMovmtType")
		set sQuantidade=tRs.Data("sQuantidade")
		set sValorTxn=tRs.Data("sValorTxn")
		set sLocation=tRs.Data("sLocal")
		set sBundleID=tRs.Data("sBundleID")
		set sDate=tRs.Data("DateConfirmed")
		set sTime=tRs.Data("TimeConfirmed")
		set sLineNumber = tRs.Data("LineNumber")
		
		//Salva na global o saldo inverso que é mantido na StockHistory
		if sQuantidade<0 set sQuantidade = (sQuantidade * -1)
		if sValorTxn<0 set sValorTxn   = (sValorTxn * -1)
		if sMovmtType=22 {
			if sQuantidade>0 set sQuantidade = (sQuantidade * -1)
			if sValorTxn>0 set sValorTxn   = (sValorTxn * -1)
			
			set sSaida=$piece($get(^INIssueRev(YM,sDocumento,1)),Y,1)
			
			// Se a issue não estiver no header, estará nas linhas.
			// Mesmo se houver mais de uma linha com issues diferentes, a informação a ser usada na issue
			// será a mesma para qualquer issue da linha.
			if (sSaida = "") {
				set idLinha = $order(^INIssueRevLine(YM,sDocumento,""))
				
				// 22-Jan-2016		HGD		HEVA-1895 	
				if (idLinha '= "") {
					set sSaida = $$$INIssueRevLineIssue(^INIssueRevLine(YM,sDocumento,idLinha,1))
				}
			}
			
			set objDispensePatient=""
			
			// 22-Jan-2016		HGD		HEVA-1895 	
			if (sSaida '= "") {
				set objDispensePatient=$get(^INIssue(YM,sSaida,1)) //14
			}
			
			if (($piece(objDispensePatient,Y,14)'=sLocal) && ($piece(objDispensePatient,Y,14)'="")) {
				set ^VARMOVLinha(YM,sProduto,year,numMonth,sLocal,sDocumento,1) = sQuantidade_Y_sValorTxn_Y_sMovmtType_Y_$piece(objDispensePatient,Y,14)_Y_sDate_Y_sTime
				set sLocal=$piece(objDispensePatient,Y,14)
				
			}
			if (($piece(objDispensePatient,Y,2)'=sLocal) && ($piece(objDispensePatient,Y,2)'="")) {
				set ^VARMOVLinha(YM,sProduto,year,numMonth,sLocal,sDocumento,1) = sQuantidade_Y_sValorTxn_Y_sMovmtType_Y_$piece(objDispensePatient,Y,2)_Y_sDate_Y_sTime
				set sLocal=$piece(objDispensePatient,Y,2)
				
			}
		}
		if sMovmtType=37 {
			if sQuantidade>0 set sQuantidade = (sQuantidade * -1)
			if sValorTxn>0 set sValorTxn   = (sValorTxn * -1)
		}
		
		set idLocnOrPatient = $$GetLocnOrPatient(sMovmtType,sDocumento,filterLocation,sLineNumber)
		
		if (sMovmtType=21) { //Caso seja dispensação para paciente (INDispenseToPatient), coloca o consumo na unidade que foi feito e cria um MOV na unidade que enviou
			set objDispensePatient=""
			set objDispensePatient=$get(^INIssue(YM,sDocumento,1)) //14
			if (($piece(objDispensePatient,Y,14)'=sLocal) && ($piece(objDispensePatient,Y,14)'="")) {
				set ^VARMOVLinha(YM,sProduto,year,numMonth,sLocal,sDocumento,1) = sQuantidade_Y_sValorTxn_Y_sMovmtType_Y_$piece(objDispensePatient,Y,14)_Y_sDate_Y_sTime
				set sLocal=$piece(objDispensePatient,Y,14)
				
			}
		}
				
		set sCostCenter=""
		set sCostCenter=$PIECE($GET(^WWW0121(YM,YM,sLocal,1)),Y,62)
		set ^VARCMMLinha(YM,sProduto,year,numMonth,sLocal,sDocumento,1) = sQuantidade_Y_sValorTxn_Y_sMovmtType_Y_idLocnOrPatient_Y_sDate_Y_sTime_Y_sCostCenter_Y_sLineNumber

	}
	
	w !!,tSQL

	If $IsObject(tRs)

		{

		Do tRs.Close()

	}
	if sort=1 {
		set VORG(1)="VARCMMLinha"
		DO ^WWWSORT
		set VORG(1)="VARMOVLinha"
		DO ^WWWSORT
	}
	quit

RodaMOVPeriodoLocal(filterAnoMes="",filterLocation="",sort=1)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Função de cálculo dos dados de consumo mensal utilizando a StockHistory.
    ;	São considerados na geração de registros para cálculo de CMM *somente* os
    ;	seguintes tipos de movimentação:
    ;		11. Consumo para Setor (Department Issue)
    ;		21. Dispensação para Paciente (Patient/Sale Issue)
    ;		22. Devolução ao Estoque (Issue Reversal)
    ;		31. Aceite de transferência
    ; 
    ; Histórico:
    ;	20-Oct-2011		RGB		Alterações para utilizar temporariamente na SESPE, incluido Aceite de transferencia e outras validações
    ;							Parâmetro de local não é mais obrigatório
    ; 	02-Ago-2010		Criado
    ;-------------------------------------------------------------------------------	
	IF $GET(Y)="" do ^WWWVAR
	if filterAnoMes="" {
		// Run for current Month
		set filterAnoMes=$e($ZD($H,8),0,4)_"/"_$e($ZD($H,8),5,6)
	}
	
	new sAnoMes, sDocumento, sProduto, sLocal, sMovmtType, sQuantidade, sValorTxn, year, month,
		numMonth, idLocnOrPatient
	set sAnoMes=filterAnoMes
	set year  = $piece(sAnoMes,"/",1)
	set month = $piece(sAnoMes,"/",2)
		
	set numMonth = $number(month)
	
	set tSQL="SELECT "_
			   "TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') as AnoMes, "_
			   "alSOH.dStockHistory.Reference as sDocumento, "_
			   "alSOH.dStockHistory.Item as sProduto, "_
			   "alSOH.dStockHistory.Location as sLocal, "_
			   "alSOH.dStockHistory.DateConfirmed as DateConfirmed, "_
			   "alSOH.dStockHistory.TimeConfirmed as TimeConfirmed, "_
			   "alSOH.dStockHistory.MovementType_MovementTypeId as sMovmtType, "_
			   "SUM(alSOH.dStockHistory.QtyMoved) as sQuantidade, "_
			   "SUM(alSOH.dStockHistory.TxValue) as sValorTxn "_
			   "FROM alSOH.dStockHistory "_
			   "WHERE TO_CHAR(alSOH.dStockHistory.DateConfirmed,'YYYY/MM') = '"_filterAnoMes_"' "
			   
				if filterLocation'="" set tSQL=tSQL_"and alSOH.dStockHistory.Location='"_filterLocation_"' "
			   set tSQL=tSQL_"and ((alSOH.dStockHistory.MovementType_MovementTypeId = 30 and (alSOH.dStockHistory.QtyMoved<0)) "_
			   "OR (alSOH.dStockHistory.MovementType_MovementTypeId = 32 and (alSOH.dStockHistory.QtyMoved>0)) "_   
               "OR (alSOH.dStockHistory.MovementType_MovementTypeId = 11 AND alSOH.dStockHistory.Storage->Code != 'X' and (alSOH.dStockHistory.QtyMoved<0)) ) "_
			   "GROUP BY alSOH.dStockHistory.Reference, alSOH.dStockHistory.Item, alSOH.dStockHistory.Location, alSOH.dStockHistory.MovementType "_
			   "ORDER BY alSOH.dStockHistory.ID"
	// commented out for the time being "OR (alSOH.dStockHistory.MovementType_MovementTypeId = 22 AND alSOH.dStockHistory.Storage->Code != 'X' and (alSOH.dStockHistory.QtyMoved>0)) "_
	Set tRs = ##class(%Library.ResultSet).%New()

	Set tRs.RuntimeMode = "0"	
	SET ^RubensDebugMOV(1)=tSQL
	Do tRs.Prepare(tSQL) 

	Do tRs.Execute()

	While tRs.Next() {

		set sDocumento=""
		set sProduto=""
		set sLocal=""
		set sMovmtType=""
		set sQuantidade=""
		set sValorTxn=""
		set sLocation=""
		
		set sDocumento=tRs.Data("sDocumento")
		set sProduto=tRs.Data("sProduto")
		set sLocal=tRs.Data("sLocal")
		set sMovmtType=tRs.Data("sMovmtType")
		set sQuantidade=tRs.Data("sQuantidade")
		set sValorTxn=tRs.Data("sValorTxn")
		set sLocation=tRs.Data("sLocal")
		set sDate=tRs.Data("DateConfirmed")
		set sTime=tRs.Data("TimeConfirmed")
		
		
		//Salva na global o saldo inverso que é mantido na StockHistory
		if sQuantidade<0 set sQuantidade = (sQuantidade * -1)
		if sValorTxn<0 set sValorTxn   = (sValorTxn * -1)
		if sMovmtType=22 {
			if sQuantidade>0 set sQuantidade = (sQuantidade * -1)
			if sValorTxn>0 set sValorTxn   = (sValorTxn * -1)
		}
		if sMovmtType=32 {
			if sQuantidade>0 set sQuantidade = (sQuantidade * -1)
			if sValorTxn>0 set sValorTxn   = (sValorTxn * -1)
		}
		
		;w "Item: "_sProduto_" Data: "_year_"/"_month_" Local: "_sLocal_" Doc: "_sDocumento_" Qty: "_sQuantidade_" Vlue: "_sValorTxn,!
		
		set idLocnOrPatient = $$GetLocnOrPatient(sMovmtType,sDocumento,filterLocation)
		
		set ^VARMOVLinha(YM,sProduto,year,numMonth,sLocal,sDocumento,1) = sQuantidade_Y_sValorTxn_Y_sMovmtType_Y_idLocnOrPatient_Y_sDate_Y_sTime
		
		
		//Caso o produto não esteja autorizado na INDRPITEM, autorizando ele.
 		//set strStatus=$$CreateAuthorizeINDRP(sLocal,sProduto)
 		
		//set strStatus=$$CreateAuthorizeINDRP(1,sProduto)
	}

	If $IsObject(tRs)

		{

		Do tRs.Close()

	}
	if sort=1 {
		set VORG(1)="VARMOVLinha"
		DO ^WWWSORT
	}
	quit
	
GeraClassificacaoABC(A=20,B=30,C=50,from="",to="",verbose=0)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Função de cálculo dos dados de classificação ABC.
    ;	São considerados no cálculo apenas consumos realizados na rede.
    ;	A rotina utiliza os dados gerados pela VARCMM, usando dados guardados em VARCMMLinha
    ; 
    ; Histórico:
    ; 	20-Oct-2011		Criado
    ;-------------------------------------------------------------------------------
    new LocYearMonthTotal,sProduto,year,numMonth,sLocal,sDocumento
    kill ^VARABCLine,^VARABCLines
    set status="Iniciando rotina..."
    //Validating parameters are in the correct format
    set A=A/100
    set B=B/100
    set C=C/100
	IF A+B+C'=1 {
		if verbose =1 w "Error, the ABC classification does not add up to 100 percent."
		QUIT
	}
	
	//Initiating variable
	if $GET(YM)=""{
		do ^WWWVAR
		set YBED="SYSTEM"
	}
	
	kill ^VARCMMABCTemp
	
	//First Pass, gets total ever moved on the network and by product
	set NetworkTotal=0
	$$$Order2(^VARCMMLinha,YM,sProduto)
		set ProdTotal=0 //Total for product
		$$$Order3(^VARCMMLinha,YM,sProduto,year)
			$$$Order4(^VARCMMLinha,YM,sProduto,year,numMonth)
				$$$Order5(^VARCMMLinha,YM,sProduto,year,numMonth,sLocal)
					$$$Order6(^VARCMMLinha,YM,sProduto,year,numMonth,sLocal,sDocumento)
						//Getting the consumption document
						set CMMOBJ=$get(^VARCMMLinha(YM,sProduto,year,numMonth,sLocal,sDocumento,1))
						//Get the value consumed for that entry
						set sValue=0
						set sValue=$piece(CMMOBJ,Y,2)
						set sValue=0-sValue
						set ProdTotal=ProdTotal+sValue
						//Add up to the product total
					$$$End
					//Add 
					set LocYearMonthTotal(sLocal,year,numMonth)=sValue
				$$$End
			$$$End
		$$$End
		//Creates a temporary global to store the product total consumed value
		set ^VARCMMABCTemp(ProdTotal,sProduto)=1
		//Incrementes the total value consumed on the network
		set NetworkTotal=NetworkTotal+ProdTotal
	$$$End


	//Calculating the points to compare the total value
	SET pointC=NetworkTotal*C
	SET pointB=pointC+(NetworkTotal*B)
	SET pointA=pointB+(NetworkTotal*A)
	
	//The routine now goes thru the products, ordered by consumed value, adding up the incrementedValue variable and comparing it to the points set previously
	set incrementedValue=0
	$$$Order1(^VARCMMABCTemp,value)
		$$$Order2(^VARCMMABCTemp,value,product)
		
			//Compare the incrementedValue
			set incrementedValue=incrementedValue+value
			set classification=""
			if incrementedValue<=pointC set classification="C"
			if ((incrementedValue>pointC) && (incrementedValue<=pointB)) set classification="B"
			if (incrementedValue>pointB) set classification="A"
			
			if verbose=1 w product,"->",classification,!
			//Sets the classification
			//Saves on the Item Master Data
			
			set objINART=$get(^INART(YM,product,1))
			IF objINART'="" {
				set $$$INARTItemClassification(objINART)=classification
				set strStatus=$$Save^COMUtils("INART",product,objINART,1)
				if verbose=1 {
					IF strStatus'=1 W "Error updating ABC classification for product ",product," Error Message->",strStatus,!
				}
			}
			
		$$$End
	$$$End

	q

GetLocnOrPatient(pMovmtType,pDocumento,pLocation,pLinha)
	quit:( (pMovmtType = "") || (pDocumento = "") ) ""
	
	new idDocOrigem, objDocOrigem, tipoDocOrigem
	$$$VAR
	//Type 11 = Consumo para Setor e 22 = Devolução
	if (pMovmtType = 11) {
		IF $piece($get(^INIssue(YM,pDocumento,1)),Y,24)=1 quit $piece($get(^INIssue(YM,pDocumento,1)),Y,23) //Paciente 
		quit $piece($get(^INIssue(YM,pDocumento,1)),Y,2) //Local de Destino
	}

	//Type 21 = Paciente
	elseif (pMovmtType = 21) {
		w !,pDocumento
		quit $piece($get(^INIssue(YM,pDocumento,1)),Y,23) //Paciente
	}
	
	//Type 30 = Transferencia
	elseif (pMovmtType = 30) {
		quit pLocation //Aceite só pode ser no próprio local
	}

	//Type 31 = Aceite Transferencia
	elseif (pMovmtType = 31) {
		quit pLocation //Aceite só pode ser no próprio local
	}
	
	//Type 32 = Estorno Transferencia
	elseif (pMovmtType = 32) {
		quit pLocation //Aceite só pode ser no próprio local
	}
	
	//Type 22 = Devolução
	elseif  (pMovmtType = 22) {
		set idDocOrigem = $$$INIssueRevLineIssue($get(^INIssueRevLine(YM,pDocumento,pLinha,1)))
		if idDocOrigem'="" {
			set objDocOrigem = $get(^INIssue(YM,idDocOrigem,1))		
			
			set tipoDocOrigem = $piece(objDocOrigem,Y,24)		
		
			if (tipoDocOrigem = 1) {
				quit $piece(objDocOrigem,Y,2) //Local de Destino
			} 
			elseif (tipoDocOrigem = 3) {
				quit $piece(objDocOrigem,Y,23) //Paciente
			}
		}
		
	}
	
	quit ""
	
ShowLinks
 
	write "<hr>&nbsp;<font size=3><strong>Executar Rotinas</strong></font><hr>"
 set redirectLink2= ##class(COM.fwk.ui.html.LinkBuilder).buildFormLink("Lista completa", "Lista completa", "_self", "VARListaTrabalhoUnit", "", "", "VARDashboardFracionamento", "", "1", "").getHref()
	write "<div style=margin-left:5px>"
	write "	<table style=font-size:12px>"
	write "		<tr>"
	write "			<td>"
	write "				<strong>Estoque na Rede: </strong>"
	write "			</td>"
	write "			<td>"
	write "				<a href="_YAKTION_"EP=WWWFORM&amp;YFORM=VARStock&amp;YBACK="_YBACK_"&amp;YUCI="_YUCI_"&amp;YBED="_YBED_"&amp;YM="_YM_"&amp;YUSER="_YUSER_"&amp;YTRAKT="_YTRAKT_"&amp;YKEY=External,"_pidItem_">"_$$^WWWTR(0,12,fltEstoqueRede,0)_"</a>"
	write "			</td>"
	write "			<td width=50px>&nbsp;</td>"
	write "			<td>"
	write "				<strong>Consumo Médio Mensal:</strong>"
	write "			</td>"
	write "			<td>"
	write "				<a href="_YAKTION_"EP=WWWFORM&amp;YFORM=VARAnaliseConsumo&amp;YBACK="_YBACK_"&amp;YUSER="_YUSER_"&amp;YBED="_YBED_"&amp;YAUSWAHL=D"_""_","_pidItem_">"_$$^WWWTR(0,12,CMMRede,0)_"</a>"
	write "			</td>"
	write "			<td width=50px>&nbsp;</td>"
	write "			<td>"
	write "				<strong>Movimentação Média Mensal:</strong>"
	write "			</td>"
	write "			<td>"
	write "				<a href="_YAKTION_"EP=WWWFORM&amp;YFORM=VARAnaliseMOV&amp;YBACK="_YBACK_"&amp;YUSER="_YUSER_"&amp;YBED="_YBED_"&amp;YAUSWAHL=D"_""_","_pidItem_">"_$$^WWWTR(0,12,MOVRede,0)_"</a>"
	write "			</td>"
	write "			<td width=50px>&nbsp;</td>"
	write "		</tr>"
	
	write "	</table>"
	write "</div>"
	q

]]></Routine>
</Export>