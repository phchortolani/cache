<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINAPInvLineVarMod" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINAPInvLineVarMod
	
#include FINConst
#include COMSYS
	
#define VarianceTemp "^CacheTemp(YUSER,""FINAPInvLineVariance"")"
	
ModifySplit(pstrKey,pstrType,pintQty,pfltQtyVariance,pfltAmtVariance)
    ;-------------------------------------------------------------------------------
    ; Allow a split to be modified externally.
    ; If the split is not in memory, Swizzle^FINAPVarianceUtilities it in and the modify the values
    ; depending on the current data set and type
    ;
    ; Returns: 
    ;
    ; History:
    ; 15-Jul-2005		RW					SR12891: Moved the Swizzle call to FINAPVarianceUtilities
    ; 14-Mar-2005		PO					SR11349
    ; 14-Feb-2005		RobertW				Fixed the completion check
    ; 08-Feb-2005		RobertW				Pass the new data through to save data
    ; 										so we don't know about the VarianceData macros.
    ; 07-Feb-2005		RobertW				Call UpdateData to peform variance
    ; 										calculations and then get the Completed
    ; 										status and store this away
    ; 04-Feb-2005		RobertW				Removed pfltQuantityVariance
    ; 02-Feb-2005		RobertW				Created
    ;-------------------------------------------------------------------------------
	new intQty,fltQtyVariance,fltAmtVariance,strKey,strData
		
	quit:$get(pstrKey)=""
	quit:$get(pstrType)=""
	
	set strKey=pstrKey_","_pstrType
		
	set intQty=$get(pintQty,"NaN")
	set fltQtyVariance=$get(pfltQtyVariance,"NaN")
	set fltAmtVariance=$get(pfltAmtVariance,"NaN")
	
	do Swizzle^FINAPVarianceUtilities(strKey,.strData)
	
	if pstrType="IQ" {
		do ModifyQtyVar(.strData,intQty,fltQtyVariance)
		do ModifyAmtVar(.strData,fltAmtVariance)
	} elseif (pstrType="ID")||(pstrType="OD") {
		do ModifyAmtVar(.strData,fltAmtVariance)
	} elseif pstrType="TV" {
		do ModifyBothVar(.strData,fltAmtVariance,fltQtyVariance,intQty)
	}
	
	set strData=$$UpdateData(strData,strKey)
	
	set $$$FINAPInvLineVarianceCompleted(strData)=$$$FCAdd($$$FCAdd($$$FINAPInvLineVarianceExpenseTotal(strData),$$$FINAPInvLineVarianceSupplierTotal(strData)),$$$FINAPInvLineVarianceInventoryTotal(strData))=$$$FCAdd($$$FINAPInvLineVarianceOtherAmountVariance(strData),$$$FINAPInvLineVarianceInventoryQuantityVariance(strData))
	
	do SaveData(strData,strKey)
	
	quit
	
	
ModifyQtyVar(pstrData,pintQty,pfltQuantityVariance)
    ;-------------------------------------------------------------------------------
    ; Modify the inventory quantity and variance amounts for this change
    ;
    ; Returns:
    ;
    ; History:
    ; 14-Mar-2005		PO					SR11349
    ; 02-Feb-2005		RobertW				Created
    ;-------------------------------------------------------------------------------
	new fltVariance,intPrevQty,intQty
	
	if pintQty'="NaN" {
		set intPrevQty=$$$FINAPInvLineVarianceInventoryQuantity(pstrData)
		set intQty=$$$FINAPInvLineVarianceInventoryQty(pstrData)+$$$FINAPInvLineVarianceExpenseQty(pstrData)+$$$FINAPInvLineVarianceSupplierQty(pstrData)
		set $$$FINAPInvLineVarianceInventoryQuantity(pstrData)=pintQty
	}
	if pfltQuantityVariance'="NaN" {
		set fltVariance=0
		if pintQty'=0 {
			set fltVariance=pfltQuantityVariance/pintQty
		}
		set $$$FINAPInvLineVarianceInventoryQuantityVariance(pstrData)=pfltQuantityVariance
		set $$$FINAPInvLineVarianceAmountVariance(pstrData)=$$$FCSub(pfltQuantityVariance,$$$FCAdd($$$FCAdd($$$FINAPInvLineVarianceExpenseTotal(pstrData),$$$FINAPInvLineVarianceInventoryTotal(pstrData)),$$$FINAPInvLineVarianceSupplierTotal(pstrData)))
	}
 
	quit
	
ModifyAmtVar(pstrData,pfltAmtVariance)
    ;-------------------------------------------------------------------------------
    ; Modify the amount variances, not really needed to modify anything but keeps
    ; it in sync.
    ;
    ; Returns:
    ;
    ; History:
    ; 14-Mar-2005		PO					SR11349
    ; 04-Feb-2005		RobertW				Removed pfltQuantityVariance
    ; 02-Feb-2005		RobertW				Created
    ;-------------------------------------------------------------------------------
	
	if pfltAmtVariance'="NaN" {
		set $$$FINAPInvLineVarianceOtherAmountVariance(pstrData)=pfltAmtVariance
		set $$$FINAPInvLineVarianceAmountVariance(pstrData)=$$$FCSub(pfltAmtVariance,$$$FCAdd($$$FCAdd($$$FINAPInvLineVarianceExpenseTotal(pstrData),$$$FINAPInvLineVarianceInventoryTotal(pstrData)),$$$FINAPInvLineVarianceSupplierTotal(pstrData)))
	}
	
	quit
	
ModifyBothVar(pstrData,pfltAmtVariance,pfltQtyVariance,pintQty)
    ;-------------------------------------------------------------------------------
    ; Modify the both variances based on changes made on the FINAPInvLine.
    ;
    ; Returns:
    ;
    ; History:
    ; 14-Mar-2005		PO					SR11349
    ; 07-Feb-2005		RobertW				Created
    ;-------------------------------------------------------------------------------
    new fltDollar
	set $$$FINAPInvLineVarianceOtherAmountVariance(pstrData)=pfltAmtVariance
	set $$$FINAPInvLineVarianceInventoryQuantity(pstrData)=pintQty
	set $$$FINAPInvLineVarianceInventoryQuantityVariance(pstrData)=pfltQtyVariance
	
	set fltDollar=$$$FCAdd($$$FCAdd($$$FINAPInvLineVarianceInventory(pstrData),$$$FINAPInvLineVarianceExpense(pstrData)),$$$FINAPInvLineVarianceSupplier(pstrData))
	
	set $$$FINAPInvLineVarianceAmountVariance(pstrData)=$$$FCSub(pfltAmtVariance,fltDollar)
	
	quit
	
 
SaveData(pstrYMFELD,pstrYKEY)
    ;-------------------------------------------------------------------------------
    ; Save the data structure from the manual fields into the FINAPInvLineVariance
    ; class
    ;
    ; Returns:
    ; An empty string.
    ;
    ; History:
    ; 08-Feb-2005	RPW		If we are called from the backend, pstrYMFELD = NOVALUE, so 
    ; 						get the data via the VarianceTemp macro, otherwise use the passed
    ; 						in value. This means outside routines do not need to understand
    ; 						the VarianceTemp structure
    ; 07-Feb-2005	RPW		Call updatedata to modify all the data instead of doing it here
    ; 01-Feb-2005	RPW		Use the class field macros now.
    ; 17-Jan-2005	JW		Don't save data to global.
    ; 05-Jan-2005	RPW		Created for 3 Way Match (SR10061)
    ;-------------------------------------------------------------------------------
	;
	; Get the key and data from the local storage, as YKEY and YMFELD do not exist here.
	
	if $get(pstrYMFELD)="NOVALUE" {
		set pstrYMFELD = @$$$VarianceTemp@("YMFELD")
	}
	
	set pstrYKEY = @$$$VarianceTemp@("KEY")
	
	if (pstrYMFELD'="")&&(pstrYKEY'="") {
		; Save the data
		set @$$$VarianceTemp@("DATA",$p(pstrYKEY,",",1),$p(pstrYKEY,",",2),$p(pstrYKEY,",",3))=$$UpdateData(pstrYMFELD,pstrYKEY)	
 
		; Kill the local storage.
		kill @$$$VarianceTemp@("KEY")
		kill @$$$VarianceTemp@("YMFELD")
	}
	
	quit ""
	
UpdateData(pstrYMFELD,pstrYKEY)
	;-------------------------------------------------------------------------------
	; Prepare the data for saving, do all the variance calculations.
    ;
    ; Returns:
    ; The string of data that has been modified
    ;
    ; History:
    ; 07-Feb-2005	RPW		Created for 3 Way Match (SR10061)
    ;-------------------------------------------------------------------------------
	new i,fltExpense,fltInventory,fltSupplier,strData,intQuantity,fltVarAmount
	
	set strData=pstrYMFELD
	
	if ($get(pstrYMFELD)'="")&&($get(pstrYKEY)'="") {
	
		; Push the YMFELD data in to the correct storage structure.
		
		set fltVarAmount=$$$FINAPInvLineVarianceAmountVariance(strData)
		set fltVarAmount=$piece(strData,Y,$$$FldFINAPInvLineVarianceAmountVariance)
		; Calculate the distributions
		do CalculateDistribution(strData,.fltExpense,.fltInventory,.fltSupplier,.intQuantity)
			
		; Add the distrubtions into the data structure
		set $$$FINAPInvLineVarianceExpenseTotal(strData)=fltExpense
		set $$$FINAPInvLineVarianceInventoryTotal(strData)=fltInventory
		set $$$FINAPInvLineVarianceSupplierTotal(strData)=fltSupplier
		set $$$FINAPInvLineVarianceQuantityVariance(strData)=-intQuantity
		set $$$FINAPInvLineVarianceAmountVariance(strData)=fltVarAmount
		
		; Make sure we store the fact if it's completed or not.
		set $$$FINAPInvLineVarianceCompleted(strData)=$$$FINAPInvLineVarianceCompleted(pstrYMFELD)
	}
	
	quit strData
 
	
CalculateDistribution(pstrYMFELD,pfltExpense,pfltInventory,pfltSupplier,pintQuantity)
    ;-------------------------------------------------------------------------------
    ; Calculates the Variance Distribution Type distribution amount.
    ; Basically it works out how much is from the percentage, the qty and the amount
    ; and returns this as the distributions amounts.
    ;
    ; Returns:
    ; pfltExpense		ByRef
    ; pfltInventory		ByRef
    ; pfltSupplier		ByRef
    ; pintQuantity		ByRef
    ;
    ; History:
    ; 14-Mar-2005		PO				SR11349
    ; 02-Feb-2005		RPW				Modified to use the system generated macros
    ; 05-Jan-2005		RPW				Created for 3 Way Match (SR10061)
    ;-------------------------------------------------------------------------------
	new fltOneUnit,fltQtyAmount,fltRemaining,intQty,intQuantity
 
	; Work out how much 1 qty unit costs
	set intQty=$piece(pstrYMFELD,Y,$$$FldFINAPInvLineVarianceInventoryQuantity)
	if +intQty'=0 {
		set fltOneUnit=$$$FCDivd($$$FINAPInvLineVarianceInventoryQuantityVariance(pstrYMFELD),intQty)
	} else {
		set fltOneUnit=0
	}
	
	set intQuantity=$piece(pstrYMFELD,Y,$$$FldFINAPInvLineVarianceExpenseQty)+$piece(pstrYMFELD,Y,$$$FldFINAPInvLineVarianceInventoryQty)+$piece(pstrYMFELD,Y,$$$FldFINAPInvLineVarianceSupplierQty)
	; Sum the total quantity amount
	set fltQtyAmount=$$$FCMult(fltOneUnit,intQuantity)
	
	; Work out the total amount - the total quantity amount and add the oth $ + inv $ amounts.
	set fltRemaining=$$$FCAdd($$$FCSub($$$FINAPInvLineVarianceInventoryQuantityVariance(pstrYMFELD),fltQtyAmount),$$$FINAPInvLineVarianceOtherAmountVariance(pstrYMFELD))
	
	// Multiply each quantity by the cost of 1 unit, then add the dollar amount and then the percentage amount
	set pfltExpense=$$$FCAdd($$$FCAdd($$$FCMult(fltOneUnit,$$$FINAPInvLineVarianceExpenseQty(pstrYMFELD)),$$$FINAPInvLineVarianceExpense(pstrYMFELD)),$$$FCMult(fltRemaining,$$$FINAPInvLineVarianceExpensePercent(pstrYMFELD)/100))
	set pfltInventory=$$$FCAdd($$$FCAdd($$$FCMult(fltOneUnit,$$$FINAPInvLineVarianceInventoryQty(pstrYMFELD)),$$$FINAPInvLineVarianceInventory(pstrYMFELD)),$$$FCMult(fltRemaining,$$$FINAPInvLineVarianceInventoryPercent(pstrYMFELD)/100))
	set pfltSupplier=$$$FCAdd($$$FCAdd($$$FCMult(fltOneUnit,$$$FINAPInvLineVarianceSupplierQty(pstrYMFELD)),$$$FINAPInvLineVarianceSupplier(pstrYMFELD)),$$$FCMult(fltRemaining,$$$FINAPInvLineVarianceSupplierPercent(pstrYMFELD)/100))
	set pintQuantity=intQty-intQuantity
	quit
]]></Routine>
</Export>