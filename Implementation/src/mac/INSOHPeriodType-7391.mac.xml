<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INSOHPeriodType" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INSOHPeriodType
 	
#include %occInclude
#include COMSYS
#include INConst
#define LogItem(%L,%S,%T,%E)	if %L'="" if %T'=$h do AddMessage^COMLog(%L,$$$Text(%S),.%E) set %T=$h
#define LogMessage(%L,%S)		if %L'="" do AddMessage^COMLog(%L,$$$Text(%S))
	
OnBeforeButtonLine(pYKEY)
	quit
	
OnAfterPrimaryKey(pYM,pYFORM,pYSEITE,pstrKey,&pYFELD,&pobjForm)
	;-------------------------------------------------------------------------------
	; Disable if closed or Period Info exists
	;  
	; 
	; ByRef :
	; 
	; Returns: None
	;
	; History:
	; 24-Aug-2009	PPP		SR16484/1:Test should be INSIDE the "if $$$ISOK" block: 
	; 20-Apr-2009	PPP		SR16484: Disable if Period Info already exists
	; 16-Oct-2008	HQN		SR16030: Created
	;-------------------------------------------------------------------------------
	new objPeriodType,sc
	
	set objPeriodType = ##class(alSOH.dPeriodType).%OpenId(pstrKey,,.sc)
	
	if $$$ISOK(sc) {
		if objPeriodType.DateClosed'="" {
			set $$$WWW120AuthorizationToModifyData(pobjForm) = $$$EnumReadOnly
		}
		if ##class(alSOH.dSOHPeriod).PeriodsExist(pstrKey) {
			set $$$WWW120AuthorizationToModifyData(pobjForm) = $$$EnumReadOnly	
		}
	}	
	quit
	
	
OnAfterDataField(Key="") 
	;-------------------------------------------------------------------------------
	; AfterDataFields
	;
	; Returns:
	;
	; History:
	; 02-Aug-2010	PPP	 	SR17478: Created
	;-------------------------------------------------------------------------------
    if Key'="" {
		do AfterDataField^COMSchedule(Key,"INSOHPeriodType","Process^INSOHPeriodType(´"_Key_"´)")
    }
    quit
	
	
Process(pidKey="")
	;-------------------------------------------------------------------------------
	; Process the Period Balance Updates
	;
	; Returns:$$$OK
	;
	; History:
	; 02-Aug-2010	PPP	 	SR17478: Created
	;-------------------------------------------------------------------------------
	new idLog
	
	do StartLog^COMLog($$$Text($listbuild("IN01234",pidKey)),.idLog) 	// "Period Balances Update for Period Type '%1'"
	job Start(pidKey,YUSER,idLog)
	
	hang 2 ;wait for the process to start up
	
	; Ready to goto the Detail form
	do RedirectForm^COMUtils("COMMsg",idLog,",","","")
	quit 1
	
	
Start(pidPeriodType="",pidSession="",pidLog="") 
	;-------------------------------------------------------------------------------
	; Start a Period Balance Update Process
	;
	; Returns:
	;
	; History:
	; 02-Aug-2010	PPP	 	SR17478: Created
	;-------------------------------------------------------------------------------
 	new idUser,sc,strStatus
	
	if $get(Y)="" do ^WWWVAR
	
	set YUSER   = pidSession
	set idUser  = $piece($get(^WWWUSER(0,YUSER,1)),Y,2)    if idUser'="" set YBED = idUser
	set SPRACHE = $$^WWWLANGU(YBED)
	
	;+++++++++++++++++++++++++++++++++++++++
	set $ZTRAP="^WWWERROR"
	LOCK +^INPeriodType(pidPeriodType):1 
	
	if '$TEST {
		$$$LogMessage(pidLog,$listbuild("IN00935",pidPeriodType))
		quit
	} // "Error : Cannot Lock Period Type %1 exclusively for Recalculation of Balances"
	;+++++++++++++++++++++++++++++++++++++++
	
	$$$LogMessage(pidLog,$listbuild("IN01235",pidPeriodType))        // "Update calculation of Period Balances for Period Type %1 started"
	
	set %("VAR","pidLog")  = pidLog	
 	set sc = ##class(alSOH.iPeriodBalance).CreatePBRecordForType(pidPeriodType, "", +$horolog)
	
	if $$$ISERR(sc) {
		set strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
		$$$LogMessage(pidLog,$listbuild("IN01237",strStatus))        // "Error updating Period Totals : %1"
	}
	
	$$$LogMessage(pidLog,$listbuild("IN01236",pidPeriodType))        // "Update calculation of Period Balances for Period Type %1 completed"
	
	;+++++++++++++++++++++++++++++++++++++++
	LOCK
	;+++++++++++++++++++++++++++++++++++++++
	quit
	
	
LoadRecordType(pType)
	;-------------------------------------------------------------------------------
	; Load Record
	;  
	; 
	; ByRef :
	; 
	; Returns: None
	;
	; History:
	; 16-Oct-2008	HQN		SR16030: Created
	;-------------------------------------------------------------------------------
	new objResultSet
	
	if pType="first" {
		if $get(YKEY) = "" {
			set objResultSet = ##class(%Library.ResultSet).%New()
			if objResultSet.Prepare("SELECT min(ID) AS ID FROM alSOH.dPeriodType") {
				if objResultSet.Execute() {
					if objResultSet.Next() {
						set YKEY = objResultSet.Data("ID")
						do GoToForm^COMUtilForm(YFORM,YKEY)
						quit
					}
				}
			}
		}
	
	} elseif pType="previous" {
	} elseif pType="next" {
	} elseif pType="last" {
	}
	
	do ^WWWFORM
	quit
	
	
Submit(pYKEY,pYFELD)
	quit
	
	
IsClosable(pYKEY)
	;-------------------------------------------------------------------------------
	; Is Record Closable
	;  
	; 
	; ByRef :
	; 
	; Returns: status
	;
	; History:
	; 16-Oct-2008	HQN		SR16030: Created
	;-------------------------------------------------------------------------------
	new objUPeriodType,sc,strStatus 
	
	set strStatus = $$$OK
	
	set objUPeriodType = ##class(alSOH.dUPeriodType).%OpenId("0||"_pYKEY,,.sc)
	
	if $$$ISOK(sc) {
		if objUPeriodType.DateClosed'="" {
			set strStatus = $$$MakeStatus("IN00939")
		}
	}
	
	set:$$$ISERR(sc) strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
	
	$$$YQHandler(strStatus)
	quit strStatus
	
	
Close(pYKEY)
	;-------------------------------------------------------------------------------
	; Close a Period Type
	;  
	; 
	; ByRef :
	; 
	; Returns: status
	;
	; History:
	; 16-Oct-2008	HQN		SR16030: Created
	;-------------------------------------------------------------------------------
	new objUPeriodType,sc,strStatus
	
	set strStatus = $$$OK
	
	set objUPeriodType = ##class(alSOH.dUPeriodType).%OpenId("0||"_pYKEY,4,.sc)
	
	if $$$ISOK(sc)  set sc = objUPeriodType.Close()
	if $$$ISERR(sc) set strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
	
	if $$$ISOK(strStatus) {
		do ^WWWFORM
	} else {
		do ReturnError^COMUtilError(strStatus)
	}
	quit strStatus
	
	
CanDelete(pstrKey)
	;-------------------------------------------------------------------------------
	; If the Periods Exist, do not allow the delete.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 01-May-2009	PPP		SR16484: Created
	;-------------------------------------------------------------------------------
	if ##class(alSOH.dSOHPeriod).PeriodsExist(pstrKey) {
		set Q = $$$QDontDelete
	}
	quit
	
	
OnBeforeDelete(pYKEY)
	;-------------------------------------------------------------------------------
	; Remove V2 dependent records, dSOHPeriod, dPeriodBalance
	;  
	; 
	; ByRef :
	; 
	; Returns: status
	;
	; History:
	; 06-Apr-2011	shobby	SR17698.1: Transactions are creating too many locks causing
	;							the processing never to finish.
	; 02-Dec-2010	SCR		Changed SQL to get the ID only
	; 04-Dec-2009	GRF		Put $tlevel>0 on tcommit not trollback
	; 16-Oct-2008	HQN		SR16030: Created
	;-------------------------------------------------------------------------------
	new objPeriodType,objResultSet,objSOHPeriod,sc,strStatus
	
	set strStatus = $$$OK
	
	;***************************************
	; SR17698.1 tstart
	;***************************************
	set objPeriodType = ##class(alSOH.dPeriodType).%OpenId(pYKEY,,.sc)
	set objResultSet  = ##class(%Library.ResultSet).%New()
	
	;set sc = objResultSet.Prepare("SELECT * FROM alSOH.dPeriodBalance WHERE SOHPeriod->PeriodType = ?")
	set sc = objResultSet.Prepare("SELECT ID FROM alSOH.dPeriodBalance WHERE SOHPeriod->PeriodType = ?") ; SR17622
	if $$$ISOK(sc) {
	//	set sc = objResultSet.Execute(objPeriodType.%Id())
		set sc = objResultSet.Execute(pYKEY)
		if $$$ISOK(sc) {
			while objResultSet.Next(.sc) {
				set sc = ##class(alSOH.dPeriodBalance).%DeleteId(objResultSet.Data("ID"))
			}
		}
	}
	
	//Remove dSOHPeriod
	if $$$ISOK(sc) {
		if objPeriodType'=$$$NULLOREF {
			while objPeriodType.Periods.Count() > 0 {
				set objSOHPeriod = objPeriodType.Periods.GetAt(objPeriodType.Periods.Count())
				set sc = objSOHPeriod.%DeleteId(objSOHPeriod.%Id())
				do:$$$ISOK(sc) objPeriodType.Periods.RemoveAt(objPeriodType.Periods.Count()) 
				quit:$$$ISERR(sc)
			}
		}
	}
	
	;*************************************** ;SR17698.1 block commented
	;if $$$ISERR(sc) {
	;	trollback
	;} else {
	;	if $tlevel>0 tcommit
	;}
	;***************************************
	
	set:$$$ISERR(sc) strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
	
	quit strStatus
	
	
GeneratePeriodBalances(pYKEY)
	;-------------------------------------------------------------------------------
	; Recalculate the Period Info based on the Stock Transactions alSOH.dStockHistory
	; for a given Period Type
	;  
	; 
	; ByRef :
	; 
	; Returns: Status
	;
	; History:
	; 22-Nov-2010	PPP		SR17617:Moved 'Delete' to subroutine - ReCalcPeriodBalances
	; 13-Nov-2009	PPP		SR17023:Delete all the Periods & Period Balance before Regeneration
	; 16-Oct-2008	HQN		SR16030:Created
	;-------------------------------------------------------------------------------
	new idLog,objPeriodType,sc,strStatus
	
	set strStatus = $$$OK
	
	//SR17023:Delete all the Periods & Period Balances
	//set strStatus = $$OnBeforeDelete(pYKEY)	//SR17617
	
	if $$$ISERR(strStatus) {
		do ReloadForm^COMUtilForm()
		$$$Alert(strStatus)
		
	} else {
		set objPeriodType = $get(^INSOHPeriodType(0,pYKEY,1))
		do StartLog^COMLog($$$Text("IN00934")_" "_pYKEY_" ("_$$$INSOHPeriodTypeDescription(objPeriodType)_")",.idLog)	//"Recalculate Period Balances"
		
		JOB ReCalcPeriodBalances^INSOHPeriodType(pYKEY,idLog,YUSER)
	 	
		; Ready to goto the Detail form
		do GoToForm^COMUtilForm("COMMsg",idLog)
	}
	quit strStatus
	
	
ReCalcPeriodBalances(pidPeriodType,pidLog="",pidSession)
	;-------------------------------------------------------------------------------
	;	BACKGROUND PROCESS
	;	
	; Called By: GeneratePeriodBalances^INSOHPeriodType
	;
	; Inputs:
	;	pidPeriodType	: Period Type
	;	pidLog			: COMMsg message number
	;	pidSession		: Retain YUSER
	;	
	; Returns: None
	; 	
	; History:
	; 07-Apr-2011	shobby	SR17698.2: Pass a flag so as to disable transactions.
	; 22-Nov-2010	PPP		SR17617	:1 Added the Job Number to the log
	;							2. Added the deletion of Periods and Period Balances
	;							3. Check for Errors
	; 12-Nov-2009	PPP		SR17023:1.Added COMMsg Logging for the process, saved pidLog in %
	;						2. Saved the alSOH.dPeriodType, and all new classes created
	; 24-Aug-2009	PPP		SR16484/1:QUIT in "if '$TEST" block is before logging macro
	; 20-Apr-2009	PPP		SR16484: Created
	;-------------------------------------------------------------------------------
	new idUser,objPeriodType,sc,strStatus
	
	set sc = $$$OK
	do ^WWWVAR
	
	; Restore parameters passed from calling session
	set YUSER   = pidSession
	set idUser  = $piece($get(^WWWUSER(0,YUSER,1)),Y,2)    if idUser'="" set YBED = idUser
	set SPRACHE = $$^WWWLANGU(YBED)
	
	;+++++++++++++++++++++++++++++++++++++++
	set $ZTRAP="^WWWERROR"
	LOCK +^INPeriodType(pidPeriodType):1 
	
	if '$TEST {
		$$$LogMessage(pidLog,$listbuild("IN00935",pidPeriodType))
		quit
	} ; "Error : Cannot Lock Period Type %1 exclusively for Recalculation of Balances"
	;+++++++++++++++++++++++++++++++++++++++
	
	//SR17617:1
	//$$$LogMessage(pidLog,$listbuild("IN00937",pidPeriodType)_" Job:"_$job)
	if pidLog'="" do AddMessage^COMLog(pidLog,$$DecodeError^COMUtilError($listbuild("IN00937",pidPeriodType))_" Job:"_$job)
	// "Recalculation of Period Balances for Period Type %1 started"
	
	//SR17617:2
	//Delete all the Periods & Period Balances
	$$$LogMessage(pidLog,"Deleting Previous Balances")
	set strStatus = $$OnBeforeDelete(pidPeriodType)
	
	//SR17617:3
	if $$$ISOK(strStatus) {
		set objPeriodType = ##class(alSOH.dPeriodType).%OpenId(pidPeriodType,,.sc)
		
		if $$$ISOK(sc) {
			set %("VAR","pidLog") = pidLog	
			set sc = objPeriodType.Populate($$$NO)	;SR17698.2
			
			if $$$ISOK(sc) {
				set sc = objPeriodType.%Save()
			}
		}
		
		if $$$ISERR(sc) {
			set strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
			$$$LogMessage(pidLog,$listbuild("IN00938",strStatus))    // "Error Recalculating Period Totals : %1"
		}
		$$$LogMessage(pidLog,$listbuild("IN00936",pidPeriodType))    // "Recalculation of Period Balances complete"
		
	} else {
		$$$LogMessage(pidLog,$listbuild("IN00938",strStatus))        // "Error Recalculating Period Totals : %1"	
	}
	quit
	
]]></Routine>
</Export>