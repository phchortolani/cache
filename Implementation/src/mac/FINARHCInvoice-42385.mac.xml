<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINARHCInvoice" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINARHCInvoice ;AR Invoice Health Check
	#Include FINHC
	#define Check "^CacheTemp(YUSER,""FINARHCInvoice"")"

CheckInvoiceZCRC(StartDate="",EndDate="",Location="",Level="",Result)
	;-------------------------------------------------------------------------------
	; Calculate the total amount of invoices less the balance outstanding
	;
	; Returns:
	;
	; History:
	; 05-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
 	;
	new idCustomer,Depth,Amt,Hash,HashValue,idInvoice,idCustomerLast
	new objFINARInvoice
	
	kill Result  				; Clear Result
	if $get(Y)="" d ^WWWVAR
	set Depth=$length(Level) 	; Set the detail depth
	set idCustomer=Level	; Set the idFINGLAccount to Start at the Level ( Optimisation )
	
	if (idCustomer'="")&&($data(^FINARInvoice(YM,idCustomer))) {	; If the Start Account exsits, go back one
		set idCustomer=$order(^FINARInvoice(YM,idCustomer),-1) 	
	}
	
	for {											; Start of the Loop
		set idCustomer=$order(^FINARInvoice(YM,idCustomer))
		quit:idCustomer=""
		if $extract(idCustomer,1,Depth)'=Level {  					; If the Customer is outside the Level
			if (+Level'=Level)||(+idCustomer'=idCustomer) { 	; If it is a String Quit
				quit
			} else { 			; Do number checking
				set idCustomerLast=idCustomer
				; Pad out the Number with zeros
				; Example if the Level is 13 Check 13, 130, 1300, 13000 etc.
				set idCustomer=Level_$translate($justify("",$Length(idCustomer)-Depth)," ","0")
				if idCustomerLast>idCustomer set idCustomer=idCustomer_"0" ; If the Customer is Greater than the Level add an zero.
				; If the Account exists, go back one
				if (idCustomer'="")&&($data(^FINARInvoice(YM,idCustomer))) set idCustomer=$order(^FINARInvoice(YM,idCustomer),-1)
			}
		} else {				; Record the Info
			set idInvoice=""
			for {
				set idInvoice=$order(^FINARInvoice(YM,idCustomer,idInvoice))
				quit:idInvoice=""
				set objFINARInvoice=$get(^FINARInvoice(YM,idCustomer,idInvoice,1))
				set Amt=$$$FINARInvoiceBalance(objFINARInvoice) ; Get the Amount
				set Result("Total")=$$$FCAdd($get(Result("Total")),Amt)
			}
			set Hash=$extract(idCustomer,1,Depth+1)
			if Hash="" set Hash="?"
			set HashValue=$zcrc(idCustomer_"="_Result("Total"),7)
			set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
		}
	}
	Quit 1


CheckTransZCRC(StartDate="",EndDate="",Location="",Level="",Result)
	;-------------------------------------------------------------------------------
	; Calculate the amount paid against invoices.
	;
	; Returns:
	;
	; History:
	; 05-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
 	;
	new idCustomer,Depth,Amt,Hash,HashValue,idInvoice,idCustomerLast,idNumber
	new objFINARInvoiceTran
	
	kill Result  				; Clear Result
	if $get(Y)="" d ^WWWVAR
	set Depth=$length(Level) 	; Set the detail depth
	set idCustomer=Level	; Set the idFINGLAccount to Start at the Level ( Optimisation )
	
	if (idCustomer'="")&&($data(^FINARInvoiceTran(YM,idCustomer))) {	; If the Start Account exsits, go back one
		set idCustomer=$order(^FINARInvoiceTran(YM,idCustomer),-1) 	
	}
	
	for {											; Start of the Loop
		set idCustomer=$order(^FINARInvoiceTran(YM,idCustomer))
		quit:idCustomer=""
		if $extract(idCustomer,1,Depth)'=Level {  					; If the Customer is outside the Level
			if (+Level'=Level)||(+idCustomer'=idCustomer) { 	; If it is a String Quit
				quit
			} else { 			; Do number checking
				set idCustomerLast=idCustomer
				; Pad out the Number with zeros
				; Example if the Level is 13 Check 13, 130, 1300, 13000 etc.
				set idCustomer=Level_$translate($justify("",$Length(idCustomer)-Depth)," ","0")
				if idCustomerLast>idCustomer set idCustomer=idCustomer_"0" ; If the Customer is Greater than the Level add an zero.
				; If the Account exists, go back one
				if (idCustomer'="")&&($data(^FINARInvoiceTran(YM,idCustomer))) set idCustomer=$order(^FINARInvoiceTran(YM,idCustomer),-1)
			}
		} else {				; Record the Info
			set idInvoice=""
			for {
				set idInvoice=$order(^FINARInvoiceTran(YM,idCustomer,idInvoice))
				quit:idInvoice=""
				set idNumber=""
				for {
					set idNumber=$order(^FINARInvoiceTran(YM,idCustomer,idInvoice,idNumber))
					quit:idNumber=""
					set objFINARInvoiceTran=$get(^FINARInvoiceTran(YM,idCustomer,idInvoice,idNumber,1))
					set Amt=$$$FINARInvoiceTranTransactionAmount(objFINARInvoiceTran) ; Get the Amount
					set Result("Total")=$get(Result("Total"))+Amt
				}
			}
			set Hash=$extract(idCustomer,1,Depth+1)
			if Hash="" set Hash="?"
			set HashValue=$zcrc(idCustomer_"="_+Result("Total"),7)
			set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
		}
	}
	Quit 1


CheckInvoice(StartDate="",EndDate="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; Compares the output from CheckInvoiceZCRC and CheckTransZCRC.
    ; Used to drill down when these methods are at variance.
    ; Not very efficient but reuse of code.
    ;
    ; Returns:
    ;
    ; History:
    ; 20-May-2004	shobby	 Rewrote to access data directly.
    ; 05-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new strStatus,idCustomer,idInvoice,objFINARInvoice,fltAmount,idLine
	new objFINARInvoiceTran,fltAmountInvoice,intMinorErrorCounter
	
	if $get(Y)="" d ^WWWVAR
	kill Result
	set strStatus=$$$OK
	set idCustomer=""
	if Level'="" set idCustomer="Level"
	
	for {
		set idCustomer=$order(^FINARInvoice(YM,idCustomer))
		quit:idCustomer=""
		quit:((Level'="")&&(idCustomer'=Level))
		set idInvoice=""
		set fltAmount=0
		for {
			set idInvoice=$order(^FINARInvoice(YM,idCustomer,idInvoice))
			quit:idInvoice=""
			set objFINARInvoice=$get(^FINARInvoice(YM,idCustomer,idInvoice,1))
			set fltAmount=fltAmount+$$$FINARInvoiceBalance(objFINARInvoice)
			set $piece(@$$$Check@(idCustomer,idInvoice),YKOMMA,1)=$$$FINARInvoiceBalance(objFINARInvoice)
		}
		set $piece(@$$$Check@(idCustomer),YKOMMA,1)=fltAmount
	}
	
	set idCustomer=""
	for {
		set idCustomer=$order(^FINARInvoiceTran(YM,idCustomer))
		quit:idCustomer=""
		quit:((Level'="")&&(idCustomer'=Level))
		set idInvoice=""
		set fltAmount=0
		for {
			set idInvoice=$order(^FINARInvoiceTran(YM,idCustomer,idInvoice))
			quit:idInvoice=""
			set idLine=""
			set fltAmountInvoice=0
			for {
				set idLine=$order(^FINARInvoiceTran(YM,idCustomer,idInvoice,idLine))
				quit:idLine=""
				set objFINARInvoiceTran=$get(^FINARInvoiceTran(YM,idCustomer,idInvoice,idLine,1))
				set fltAmount=fltAmount+$$$FINARInvoiceTranTransactionAmount(objFINARInvoiceTran)
				set fltAmountInvoice=fltAmountInvoice+$$$FINARInvoiceTranTransactionAmount(objFINARInvoiceTran)
			}
			set $piece(@$$$Check@(idCustomer,idInvoice),YKOMMA,2)=fltAmountInvoice
		}
		set $piece(@$$$Check@(idCustomer),YKOMMA,2)=fltAmount
	}
	
	; Compare
	set idCustomer=""
	for {
		set idCustomer=$order(@$$$Check@(idCustomer))
		quit:idCustomer=""
		set fltAmount("Invoice")=+$piece(@$$$Check@(idCustomer),YKOMMA,1)
		set fltAmount("Trans")=+$piece(@$$$Check@(idCustomer),YKOMMA,2)
		if fltAmount("Invoice")'=fltAmount("Trans") {
			set Result("Hash",$$$ErrorNo(Result("Errors")))="Customer("_idCustomer_") : Invoice Balances("_+fltAmount("Invoice")_") do not match Invoice Transactions("_+fltAmount("Trans")_")"
			set intMinorErrorCounter=0
			set idInvoice=""
			for {
				set idInvoice=$order(@$$$Check@(idCustomer,idInvoice))
				quit:idInvoice=""
				set fltAmount("Invoice",idInvoice)=+$piece(@$$$Check@(idCustomer,idInvoice),YKOMMA,1)
				set fltAmount("Trans",idInvoice)=+$piece(@$$$Check@(idCustomer,idInvoice),YKOMMA,2)
				if fltAmount("Invoice",idInvoice)'=fltAmount("Trans",idInvoice) {
					set Result("Hash","Error No. "_Result("Errors")_"."_$i(intMinorErrorCounter))="Invoice '"_idInvoice_"' does not balance. Balance="_fltAmount("Invoice",idInvoice)_", transactions="_fltAmount("Trans",idInvoice)
				}
			}
			do FindMissingTransactions(idCustomer,.Result)
		}
	}
	
	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}
	
	kill @$$$Check
	quit strStatus
	

FindMissingTransactions(pidFINARCustomer,Result,pblnFix=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Find FINARInvoice that have missing FINARInvoiceTran
    ; Optional pblnFix flag to remove the Invoices that do not have transactions (should be 
    ; at least one when the invoice was created).
    ; 
    ; Note:
    ; Use pblnFix with Caution, deleting invoices should only be done with the knowledge
    ; that the Invoice is bad data.
    ;
    ; Returns:
    ;
    ; History:
    ; 20-May-2004	shobby	 Removed killing of Invoice, not happy with it.
    ; 05-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------

	new idInvoice,intErrorLine,objFINARInvoice,fltAmount,fltAmountTrans,objFINARInvoiceTran
	
	set intErrorLine=0
	
	set idInvoice=""
	for {
		set idInvoice=$order(^FINARInvoice(YM,pidFINARCustomer,idInvoice))
		quit:idInvoice=""
		set objFINARInvoice=$get(^FINARInvoice(YM,pidFINARCustomer,idInvoice,1))
		set fltAmount=+$$$FINARInvoiceInvoiceTotal(objFINARInvoice)
		
		set objFINARInvoiceTran=$get(^FINARInvoiceTran(YM,pidFINARCustomer,idInvoice,1,1))
		set fltAmountTrans=+$$$FINARInvoiceTranTransactionAmount(objFINARInvoiceTran)
		if fltAmount'=fltAmountTrans {
			if '$$AlreadyFixed(pidFINARCustomer,idInvoice) {
				set Result("Hash","Error No. "_Result("Errors")_"."_$i(intErrorLine))="First Invoice Transaction for Invoice '"_idInvoice_"' (Customer="_pidFINARCustomer_"), Amount("_fltAmount_") is missing."
			}
		}
	}
	
	quit


FixMissingTransactions(pblnFix=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Fix FINARInvoiceTran that were not created when an invoice was created.
    ;
    ; Returns:
    ;
    ; History:
    ; 27-Jan-2005		RobertW			Fixed TCOMMIT and TROLLBACK (SR11273)
    ; 20-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new arrMissing,intMissing,idCustomer,idInvoice,objFINARInvoice
	new fltAmount,fltAmountTrans,idBatch,idLine,objData,strBatch
	new strStatus,datInvoiceDate,strFix,objFINARInvoiceTran
	
	tstart
	set intMissing=0
	if $get(Y)="" d ^WWWVAR
	
	set idCustomer=""
	for {
		set idCustomer=$order(^FINARInvoice(YM,idCustomer))
		quit:idCustomer=""
		set idInvoice=""
		for {
			set idInvoice=$order(^FINARInvoice(YM,idCustomer,idInvoice))
			quit:idInvoice=""
			set objFINARInvoice=$get(^FINARInvoice(YM,idCustomer,idInvoice,1))
			set fltAmount=+$$$FINARInvoiceInvoiceTotal(objFINARInvoice)
			set objFINARInvoiceTran=$get(^FINARInvoiceTran(YM,idCustomer,idInvoice,1,1))
			set fltAmountTrans=+$$$FINARInvoiceTranTransactionAmount(objFINARInvoiceTran)
			if (fltAmount'=fltAmountTrans)||(objFINARInvoiceTran="") {
				if '$$AlreadyFixed(idCustomer,idInvoice) {	
					set arrMissing($i(intMissing))=idCustomer_Y_idInvoice_Y_fltAmount_Y_$$$FINARInvoiceInvoiceDate(objFINARInvoice)
				}
			}
		}
	}
			
	set strStatus=$$$OK
	set intMissing=""
	set strFix="Record missing.  Recreated with FixMissingTransactions^FINARHCInvoice on "_$piece($$^WWWDATEFULL($h)," ",1,4)
	for {
		quit:'$$$ISOK(strStatus)
		set intMissing=$order(arrMissing(intMissing))
		quit:intMissing=""
		set objData=$get(arrMissing(intMissing))
		set idCustomer=$piece(objData,Y,1)
		set idInvoice=$piece(objData,Y,2)
		set fltAmount=$piece(objData,Y,3)
		set datInvoiceDate=$piece(objData,Y,4)
		set strBatch=$$FindBatchLine(idCustomer,idInvoice)
		set idBatch=$piece(strBatch,YKOMMA,1)
		set idLine=$piece(strBatch,YKOMMA,2)
		w !,"Missing "_intMissing_" = "_$get(arrMissing(intMissing))_"  ::  "_idBatch_","_idLine
		if pblnFix {
			if $$$ISOK(strStatus) set strStatus=$$AddInvoiceTran^FINARInvoice(idCustomer,idInvoice,fltAmount,idBatch,idLine,datInvoiceDate,strFix)
			w "... Fixed."
		}
	}
	
	if $$$ISOK(strStatus) {
		if $tlevel>0 tcommit
	} else {
		trollback
	}
	quit

FindBatchLine(pidCustomer,pidInvoice)
    ;-------------------------------------------------------------------------------
    ; Finds a batchline that originally created a customer invoice.
    ;
    ; Returns:
    ;
    ; History:
    ; 20-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new objFININTBatchLine,idBatch,idNumber,strParam,strResult
	
	set strResult=""
	set idBatch=""
	for {
		quit:strResult'=""
		set idBatch=$order(^FININTBatchLine(YM,idBatch))
		quit:idBatch=""
		set idNumber=""
		for {
			quit:strResult'=""
			set idNumber=$order(^FININTBatchLine(YM,idBatch,idNumber))
			quit:idNumber=""
			set objFININTBatchLine=$get(^FININTBatchLine(YM,idBatch,idNumber,1))
			set strParam=$$$FININTBatchLineParameters(objFININTBatchLine)
			if $extract(strParam,1,$length(pidCustomer_","_pidInvoice))=(pidCustomer_","_pidInvoice) {
				set strResult=idBatch_","_idNumber
			}
		}
	}
	
	quit strResult


AlreadyFixed(pidCustomer,pidInvoice)
    ;-------------------------------------------------------------------------------
    ; Finds if this missing data has already been fixed.  Looks for the 'Fix' data on every
    ; FINARInvoiceTran, normally the correct data would be the first FINARInvoiceTran
    ; but if others have been created before the fix this won't be the case.
    ;
    ; Returns:
    ;
    ; History:
    ; 20-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------

	new blnResult,idLine,objFINARInvoiceTran,strFix
	
	set blnResult=$$$NO
	
	set idLine=""
	for {
		quit:blnResult
		set idLine=$order(^FINARInvoiceTran(YM,pidCustomer,pidInvoice,idLine))
		quit:idLine=""
		set objFINARInvoiceTran=$get(^FINARInvoiceTran(YM,pidCustomer,pidInvoice,idLine,1))
		if $$$FINARInvoiceTranFix(objFINARInvoiceTran)'="" {
			set blnResult=$$$YES
		} 
	}
	quit blnResult


BatchLines()
    ;-------------------------------------------------------------------------------
    ; Creates a list of AR FININTBatchLines that should have produced a FINARInvoiceTran
    ;
    ; Returns:
    ;
    ; History:
    ; 10-May-2004	shobby		Invoice is obtained from the Parameters field, not Source field.
    ; 07-May-2004   Shobby      Created
    ;-------------------------------------------------------------------------------
	;
	new Result,idInterfaceTypes,idBatch,idBatchLine,objFININTBatchLine,idAccount,idInvoice
	new idInterfaceType
	
	do GetInterfaceTypes("AR",.Result)
	
	kill @$$$Check@("BatchLines")
	set idInterfaceType=""
	for {
		set idInterfaceType=$order(Result(idInterfaceType))
		quit:idInterfaceType=""
		set idBatch=""
		for {
			set idBatch=$order(^FININTBatchLines(YM,50,idInterfaceType,idBatch))
			quit:idBatch=""
			set idBatchLine=""
			for {
				set idBatchLine=$order(^FININTBatchLines(YM,50,idInterfaceType,idBatch,idBatchLine))
				quit:idBatchLine=""
				set objFININTBatchLine=$get(^FININTBatchLine(YM,idBatch,idBatchLine,1))
				set idAccount=$$$FININTBatchLineAccount(objFININTBatchLine)
				;set idInvoice=$$$FININTBatchLineSource(objFININTBatchLine)
				set idInvoice=$piece($$$FININTBatchLineParameters(objFININTBatchLine),YKOMMA,2)
				set @$$$Check@("BatchLines",idAccount,idInterfaceType,idBatch,idBatchLine,idInvoice)=""
			}
		}
	}

	quit

InvoiceTransactions()
    ;-------------------------------------------------------------------------------
    ; Creates a list of FINARInvoiceTran that have been created from a FININTBatchLine
    ;
    ; Returns:
    ;
    ; History:
    ; 07-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idBatch,idInvoice,idTransaction,objFINARInvoiceTran,idBatchLine
	new objFININTBatchLine,idAccount,idCustomer,idInterfaceType
	
	kill @$$$Check@("Transactions")

	set idCustomer=""
	for {
		set idCustomer=$order(^FINARInvoiceTran(YM,idCustomer))
		quit:idCustomer=""
		set idInvoice=""
		for {
			set idInvoice=$order(^FINARInvoiceTran(YM,idCustomer,idInvoice))
			quit:idInvoice=""
			set idTransaction=""
			for {
				set idTransaction=$order(^FINARInvoiceTran(YM,idCustomer,idInvoice,idTransaction))
				quit:idTransaction=""
				set objFINARInvoiceTran=$get(^FINARInvoiceTran(YM,idCustomer,idInvoice,idTransaction,1))
				set idBatch=$$$FINARInvoiceTranInterfaceBatch(objFINARInvoiceTran)
				set idBatchLine=$$$FINARInvoiceTranInterfaceBatchLine(objFINARInvoiceTran)
				if idBatch="" set idBatch=" "
				if idBatchLine="" set idBatchLine=" "
				set objFININTBatchLine=$get(^FININTBatchLine(YM,idBatch,idBatchLine,1))
				if objFININTBatchLine'="" {
					set idAccount=$$$FININTBatchLineAccount(objFININTBatchLine)
					set idInterfaceType=$$$FININTBatchLineInterfaceType(objFININTBatchLine)
					set @$$$Check@("Transactions",idAccount,idInterfaceType,idBatch,idBatchLine,idInvoice)=idCustomer_","_idInvoice_","_idTransaction
				}
			}
		}
	}
	quit
	
	
GetInterfaceTypes(pstrSubLedgerType,Result)
    ;-------------------------------------------------------------------------------
    ; Gets a list of the Interface types which have the specified Sub Ledger Type.
    ;
    ; Returns:
    ;
    ; History:
    ; 23-May-2004	shobby	 Can also return the interface types as a comma separated string.
    ; 11-May-2004	shobby	 FININTInterfaceType is shared.
    ; 07-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idKey,objFININTInterfaceType,strResult
	
	set idKey=""
	kill Result
	set strResult=YKOMMA
	
	for {
		set idKey=$order(^FININTInterfaceType(0,idKey))
		quit:idKey=""
		set objFININTInterfaceType=$get(^FININTInterfaceType(0,idKey,1))
		if $$$FININTInterfaceTypeSubLedgerInterface(objFININTInterfaceType)=pstrSubLedgerType {
			set Result(idKey)=""
			set strResult=strResult_idKey_YKOMMA
		}
	}
	quit strResult


Compare(StartDate="",EndDate="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; Compares FINARInvoiceTran and FININTBatchLine to find any discrepancies.
    ;
    ; Returns:
    ;
    ; History:
    ; 07-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
    ;
    new strStatus,idAccount,idInterfaceType,idBatch,idBatchLine,idInvoice
    new strType,idInvoiceTrans,idFINARInvoiceTran
    
	if $get(Y)="" d ^WWWVAR
	do BatchLines()
	do InvoiceTransactions()
	
	kill Result
	set strStatus=$$$OK

	set strType=""
	for {
		set strType=$order(@$$$Check@(strType))
		quit:strType=""
		set idAccount=Level	
		for {
			set idAccount=$order(@$$$Check@(strType,idAccount))
			quit:idAccount=""
			set idInterfaceType=""
			for {
				set idInterfaceType=$order(@$$$Check@(strType,idAccount,idInterfaceType))
				quit:idInterfaceType=""
				set idBatch=""
				for {
					set idBatch=$order(@$$$Check@(strType,idAccount,idInterfaceType,idBatch))
					quit:idBatch=""
					set idBatchLine=""
					for {
						set idBatchLine=$order(@$$$Check@(strType,idAccount,idInterfaceType,idBatch,idBatchLine))
						quit:idBatchLine=""
						set idInvoice=""
						for {
							set idInvoice=$order(@$$$Check@(strType,idAccount,idInterfaceType,idBatch,idBatchLine,idInvoice))
							quit:idInvoice=""
							if strType="BatchLines" {
								if $data(@$$$Check@("Transactions",idAccount,idInterfaceType,idBatch,idBatchLine,idInvoice)) {
									; Found a match
									kill @$$$Check@("Transactions",idAccount,idInterfaceType,idBatch,idBatchLine,idInvoice)
								} else {
									if $data(@$$$Check@("Transactions",idAccount,idInterfaceType,idBatch,idBatchLine))=0 {
										set Result("Hash",$$$ErrorNo(Result("Errors")))="No FINARInvoice found for FININTBatchLine("_YM_","_idBatch_","_idBatchLine_",1)."
									} else {
										set idInvoiceTrans=$order(@$$$Check@("Transactions",idAccount,idInterfaceType,idBatch,idBatchLine,""))
										set idFINARInvoiceTran=$get(@$$$Check@("Transactions",idAccount,idInterfaceType,idBatch,idBatchLine,idInvoiceTrans))
										set Result("Hash",$$$ErrorNo(Result("Errors")))="Invoice Number for FINARInvoiceTran("_YM_","_idFINARInvoiceTran_") does not match Invoice found for FININTBatchLine("_YM_","_idBatch_","_idBatchLine_",1)."
									}
									set strStatus='$$$OK									
								}
							} else {  ;Transactions
								set idFINARInvoiceTran=$get(@$$$Check@("Transactions",idAccount,idInterfaceType,idBatch,idBatchLine,idInvoice))
								set Result("Hash",$$$ErrorNo(Result("Errors")))="No FININTBatchLine found for FINARInvoice("_YM_","_idFINARInvoiceTran_").  Expected FININTBatchLine("_YM_","_idBatch_","_idBatchLine_",1)."
								set strStatus='$$$OK									
							}
						}
					}
				}
			}
		}
	}	

	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}
	
	quit strStatus

]]></Routine>
</Export>