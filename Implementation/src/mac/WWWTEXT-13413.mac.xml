<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWWTEXT" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
WWWTEXT(pstrToDecode="",pintJustify="",pintUmlaut=1,pidLang="")	;SRBR014425
	;WWWTEXT(pstrToDecode="",pintJustify="",pintUmlaut="",pidLang="")	;SRBR014425
#include COMSYS
#include WWWConst
	;-------------------------------------------------------------------------------
	; Description of Function :
	;		TEXTE IN SPRACHE
	;
	; Inputs : 
	;	pstrToDecode	String to decode. In the following format:
	;					 - "idCode,intJustify idCode,intJustify ...;string"
 	;					where
 	;						idCode		- ^WWW009 id
 	;						intJustify	- length to justify. See Justify tag
 	;						string		- alternative text if the initial codes can't be decoded
 	;						
	;	pintJustify		(optional) length to justify whole string. See Justify tag.
	;	pintUmlaut		(optional) if not equal to 1, convert using ^WWWUML  [FIXME : boolean? enum?]
	;	pidLang			(optional) override current/default language
	;
	; ByRef :
	;
	;
	; Returns :			string - decoded text
	; 					NOTE : Can return spurious error messages if already expanded
	; 					       since space delimited sub-strings are checked for a
	; 					       matching idError : e.g. "Line Number 1 requires..."
	; 					       matches ^WWW009(0,1,"EN",1) = "User-Identification"
	;
	;
	; History :
	; 12-Feb-2013	SCR		HEVA-834: Check for already converted text
	; 17-Apr-2007	HeberB	SRBR014425: Default no umlaute translation
	; 02-Mar-2007	GM		SRBR014336: Call routine to delete spaces in key of
	; 							language text
	; 04-Oct-2006	JW		SR15098: Default to "EN" not "DE". Rewrote.
	; ------------------------------------------------------------------------------
	; Before Rewrite History:
	; 07-Sep-2006	GRF		Naked References; quits; remove unnecessary $get(X1)
	; 							& YBED test; &&/||; doco  FIX MEs
	; 20-Jul-2005	GRF		Doco
	; 22-Jun-2005	RPW		SR12741: Fixed null subscript error. Was in error check
	; 							for spaces. If the string was all spaces, would
	; 							result in the error.
	; 31-May-2005	RPW		SR12056: Moved WWWLANGU outside the for loop.
	; 27-May-2005	RPW		SR12056: Attempt at perform improvement
	; 01.08.1997	DT
	;-------------------------------------------------------------------------------
	new idLang,idText,strAlternative,strText,blnError
	
	quit:pstrToDecode="" ""
	
	; HEVA-834 vvvv
	if ('$ListValid(pstrToDecode) && ($length(pstrToDecode," ")>1)) {
		quit pstrToDecode   ; Converted text , quit 
	}
	; HEVA-834 ^^^^
	;---------------------------------------
	; FIXME : Should we ensure WWW009 entries are stored without spaces at
	;           either end as part of the save process?   <GRF>
	;---------------------------------------
	; FIXME : WWW009 D1 is a memo field but "|" are not interpreted as
	;         $char(13,10) in alert messages
	;         NOTE : Tooltip can recognise $c(10), $c(13) or $c(13,10)
	;                but alert can only recognise $c(13) and $c(13,10)
	;                [under WINDOWS - may be different in UNIX]  <GRF>
	;---------------------------------------
	
	set idLang = $get(SPRACHE)
	
	if $get(Y)="" do ^WWWVORG				; WWWVORG sets/resets SPRACHE
	if $get(YUCI)="" set YUCI=$zutil(5)
	
	if pidLang'="" {
		set idLang = pidLang
		
	} elseif idLang = "" {
		set idLang = $$^WWWLANGU($get(YBED))
	}
	
	set idText 			= $piece(pstrToDecode,";",1)
	set strAlternative 	= $piece(pstrToDecode,";",2)
	
	set idText = $$$RTRIMWS(idText) //BR014336
	
	set strText = $$GetText(idText,idLang,$$$NO)
	
	if ($translate(strText," ")="") && (idLang'="EN") {			// If not decoded
		set strText = $$GetText(idText,"EN",$$$YES)		// Default
	}
	
	if $translate(strText," ")="" {			// If not decoded
		if strAlternative '= "" {
			set strText = strAlternative			// Return alternative text
		} else {
			set strText = idText					// Return code
		}
	}
 
	if pintUmlaut'=1 {
		set strText = $$^WWWUML(strText)     ;UMLAUTE FÃœR INTERNET ;to INTERNET 
	}
	
	if pintJustify '= "" {						// Justify
		set strText = $$Justify(strText,pintJustify)
	}
	quit strText
	
	
GetText(pstrCodes,pidLang,pblnLogError)
	;-------------------------------------------------------------------------------
	; Attempt to decode the input code(s) and possibly justify.
	; Also attempt to use cache
	;
	; Params:	pstrCodes		- string to decode - see main header
	; 			pidLang			- language to use
	; 			pblnLogError	- whether to log errors to ^CacheTempWWWTEXTERROR
	;
	; ByRefs:
	;
	; Returns:	string - translated text
	;
	; History:
	; 17-Sep-2013	SCR		HEVA-1205
	; 05-Oct-2006	JW		SR15098: Created
	;-------------------------------------------------------------------------------
	new strFullText,intLoop,strCode,idCode,intJustify,strText,blnCache,blnError
	
	set strFullText = ""
	
	set blnError = $$$NO
	set blnCache = ($length(pstrCodes)<=255) && (pstrCodes'="")
	
	if blnCache {		// Check Cache
		set strFullText = $get(^CacheTempWWWTEXT(YUCI,pidLang,pstrCodes))
	}
	if (blnCache) && $data(^SysSetup("WWW009Debug",pstrCodes)) {
		set strDebug	= ""
		for intDebugLoop=$stack(-1)-2:-1:5 {
			set strDebug=strDebug_"[ "_$stack(intDebugLoop)_" = "_$stack(intDebugLoop,"MCODE")_" @ "_$stack(intDebugLoop,"PLACE")_" ]"
		}
		set strDebugVars=$get(^SysSetup("WWW009Debug",pstrCodes))
		for intDebugLoop=1:1:$length(strDebugVars,",") {
			set strDebugVar=$piece(strDebugVars,",",intDebugLoop)
			set:strDebugVar'="" strDebug=strDebug_"["_strDebugVar_"="_$get(@strDebugVar)_"]"
		}
		set ^CacheTempWWWTEXTLog(YUCI,pstrCodes)=strDebug
	}

	if strFullText="" {					// Otherwise, decode each piece
		for intLoop = 1:1 {
			set strCode = $piece(pstrCodes," ",intLoop)
			quit:strCode=""
			
			set idCode 		= $piece(strCode,",",1)		// id to decode
			set intJustify	= $piece(strCode,",",2)
			
			if idCode="" {
				set strText = ""							// no id, just justify
			} else {
				set strText = $$$WWW009Text($get(^WWW009(0,pidLang,idCode,1)))
				if strText="" {
					set blnError = $$$YES					// Not found - return error
				}
			}
			if intLoop>1 $$$Append(strFullText," ")
			$$$Append(strFullText,$$Justify(strText,intJustify))
		}
		
		
		; If we can put this in the cache, then do so
		if blnCache {
			if pblnLogError && blnError {		// If error,
				for intLoop=$stack:-1:1 {		; Run through the stack and dump it into the error global
					set ^CacheTempWWWTEXTERROR(YUCI,pstrCodes,intLoop) = $stack($stack-intLoop,"PLACE")
				}
			}
			
			set ^CacheTempWWWTEXT(YUCI,pidLang,pstrCodes)=strFullText
		}
	}
	quit strFullText
	
	
Justify(pstrValue,pintMove)
	;-------------------------------------------------------------------------------
	; Align text left or right, and pad with spaces
	;
	; Params:	pstrValue	- text to justify
	; 			pintMove	- pintMove - direction and number of spaces to justify
	;							If positive - Left Justify  with trailing space fill
	; 							If negative - Right Justify with leading space fill
	; 							Doesn't truncate pstrValue if abs(pintMove) < length
	;
	; ByRefs:	
	;
	; Returns:	string - justified value
	;
	; History:
	; 05-Oct-2006	JW		SR15098: Created (replaced UMSE)
	;-------------------------------------------------------------------------------
	new intLength
	
	set intLength = $length(pstrValue)
	if pintMove > intLength {				// Left Justify  with trailing space fill
		set pstrValue = pstrValue_$justify("",pintMove-intLength)
		
	} elseif -pintMove > intLength {		// Right Justify with leading space fill
		set pstrValue = $justify(pstrValue,-pintMove)
	}
	quit pstrValue
	
]]></Routine>
</Export>