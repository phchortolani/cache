<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INRECSummaryC" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INRECSummaryC
	;-------------------------------------------------------------------------------
	; Charge Subroutines for INRECSummary
	;-------------------------------------------------------------------------------
#include COMSYS
#include INConst
#include %occInclude
#include COMGridEdit31
	
#define FORMFldINRECSummaryLineType			 5
#define FORMFldINRECSummaryExtendedCost		15
#define FORMFldINRECSummaryCostAfterDisc	16
#define FORMFldINRECSummaryDiscCode			26
#define FORMFldINRECSummaryDiscRate			28
	
#define EnumTypeStandard	0
#define EnumTypeDiscount	1
#define EnumTypeBonus		2
	
#define IsItemLine   ((enumLineType=$$$EnumTypeStandard) || (enumLineType=$$$EnumTypeBonus))
#define IsChargeLine ((enumLineType'="") && (enumLineType'=$$$EnumTypeStandard) && (enumLineType'=$$$EnumTypeBonus))
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#define LogR2(%1,%2) 	;
#define LogR2x(%1)		;
#define LogR2m(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECSummaryC("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR2(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECSummaryC("_%2_") : "_$zh $$$JournalOn
#;define LogR2x(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR2m(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
UpdateRunningTotals(pidSummGridRow,pobjSummary="")
	;-------------------------------------------------------------------------------
	; Update running totals as lines added to grid or edited.
	; 
	; Params: pidSummGridRow : matches idGridRow in COMGridEditDoco
	;         ("2x01" if not saved, 3 once saved)
	; 
	; Usage : 
	;  1. Delete CacheTemp on Loading grid (can we avoid full rebuild on every refresh?)
	;  2. Call as grid lines edited, copied, added or deleted.
	; 
	; Called By : OnLineDeleted^INRECSummary, UpdateThisTotal^INRECSummaryC
	; 
	; History:
	; 20-Jun-2012	GRF		SR18012: Need to base running totals on idDataLine to
	;							ensure sequence is correct before record is saved
	; 06-Jun-2012	GRF		SR18012: get today once & reuse; strRow set twice - add
	;							field number
	; 30-May-2012	GRF		SR18012: Clarify pidSummGridRow
	; 20-Apr-2010	GRF		SR17177: recognise "KILLEDRECORD"
	; 12-Apr-2010	GRF		SR17177: pass in pobjSummary since current change not
	; 							yet in WWWDATEN
	; 31-Mar-2010	GRF		SR17177: Created
	;-------------------------------------------------------------------------------
	new curAfterDisc,curTotal,dteToday,idDataLine,idGridRow,idThisDataLine,strKey,strRow,YFORM
	
	$$$LogR("UpdateRunningTotals",pidSummGridRow_"<"_pobjSummary_"<")
	
	set YFORM = "INRECSummary"
	set dteToday = +$horolog     ; SR18012
	
	;---------------------------------------
	; Start from line before change to get opening total.
	; If called from OnLineDeleted^INRECSummary clear and rebuild all.
	;---------------------------------------
	
	if pidSummGridRow'="" { 
		set strKey  = $get(^WWWDATEN(0,dteToday,YUSER,YFORM,"V","REFERENCEKEY",pidSummGridRow,1))
		set strKey  = $translate(strKey,$$$DBLQUOTE)
		set idThisDataLine = $piece(strKey,$$$COMMA,$length(strKey,$$$COMMA))
		set idDataLine = $order(^CacheTempINRECSummary(YUSER,"Total",idThisDataLine),-1)
	;	set idGridRow = $order(^CacheTempINRECSummary(YUSER,"Total",pidSummGridRow),-1)
	
	} else {
		set idDataLine = ""
		kill ^CacheTempINRECSummary(YUSER,"Total")
	}
	
	if idDataLine'="" {
		set curTotal = $get(^CacheTempINRECSummary(YUSER,"Total",idDataLine))
	} else {
		set curTotal = 0
	}
	
	;---------------------------------------
	; Move through all subsequent lines, adding the ExtAfterDiscount
	; for that line to the previous running total.
	;---------------------------------------
	
	for {
		set idDataLine = $order(^WWWDATEN(0,dteToday,YUSER,"INRECSummary","V","REFERENCEROW",idDataLine))
		quit:idDataLine=""
		
		set idGridRow = $get(^WWWDATEN(0,dteToday,YUSER,"INRECSummary","V","REFERENCEROW",idDataLine,1))
		if $get(^WWWDATEN(0,dteToday,YUSER,"INRECSummary","V","KILLEDRECORD",idGridRow)) {
			kill ^CacheTempINRECSummary(YUSER,"Total",idDataLine)
			continue
		}
		
		if idGridRow'=pidSummGridRow {
			set strRow       = "Y"_idGridRow_"_"_$$$FORMFldINRECSummaryCostAfterDisc          ; SR18012
			set curAfterDisc = $get(^WWWDATEN(0,dteToday,YUSER,"INRECSummary","V",strRow,1))
		
		} else {
			set curAfterDisc = $$$INRECSummaryCostAfterDiscount(pobjSummary)   ; FIXME : Not updated yet - pobjSummary isn't or WWWDATEN isn't?
		}
		
		set curTotal = curTotal + curAfterDisc
		set ^CacheTempINRECSummary(YUSER,"Total",idDataLine) = curTotal
	$$$LogRx("URT:1:"_idDataLine_"<"_idGridRow_"<"_curAfterDisc_"<"_curTotal_"<")
	}
	quit
	
	/*
ObsUpdateRunningTotals(pidSummRow,pobjSummary="")
	;-------------------------------------------------------------------------------
	; Update running totals as lines added to grid or edited.
	; 
	; Usage : 
	;  1. Delete CacheTemp on Loading grid (can we avoid full rebuild on every refresh?)
	;  2. Call as grid lines edited, copied, added or deleted.
	; 
	; Called By :
	; 
	; History:
	; 20-Apr-2010	GRF		SR17177: recognise "KILLEDRECORD"
	; 12-Apr-2010	GRF		SR17177: pass in pobjSummary since current change not
	; 							yet in WWWDATEN
	; 31-Mar-2010	GRF		SR17177: Created
	;-------------------------------------------------------------------------------
	new curAfterDisc,curTotal,idGridRow,strRow,YFORM
	
	$$$LogR("UpdateRunningTotals",pidSummRow_"<"_$get(YINHALT)_"<"_pobjSummary_"<")
	
	set YFORM = "INRECSummary"
	
	if pidSummRow'="" {
		set idGridRow = $order(^CacheTempINRECSummary(YUSER,"Total",pidSummRow),-1)
	} else {
		set idGridRow = ""
		kill ^CacheTempINRECSummary(YUSER,"Total")
	}
	
	if idGridRow'="" {
		set curTotal = $get(^CacheTempINRECSummary(YUSER,"Total",idGridRow))
	} else {
		set curTotal = 0
	}
	
	for {
		set idGridRow = $order(^WWWDATEN(0,+$horolog,YUSER,"INRECSummary","V","REFERENCEKEY",idGridRow))
		quit:idGridRow=""
		
		if $get(^WWWDATEN(0,+$horolog,YUSER,"INRECSummary","V","KILLEDRECORD",idGridRow)) {
			kill ^CacheTempINRECSummary(YUSER,"Total",idGridRow)
			continue
		}
		
		set strRow = "Y"_idGridRow_"_"
		if idGridRow'=pidSummRow {
			set strRow = "Y"_idGridRow_"_"
		
			set curAfterDisc = $get($$$WWWDATEN(strRow_$$$FORMFldINRECSummaryCostAfterDisc,1))
		
		} else {
			set curAfterDisc = $$$INRECSummaryCostAfterDiscount(pobjSummary)   ; FIXME : Not updated yet
		}
		
		set curTotal = curTotal + curAfterDisc
		set ^CacheTempINRECSummary(YUSER,"Total",idGridRow) = curTotal
	}
	quit
	*/
	
UpdateThisTotal(pidSummGridRow,pobjSummary="")
	;-------------------------------------------------------------------------------
	; Update running total for designated line
	; 
	; Params: pidSummGridRow : matches idGridRow in COMGridEditDoco
	;         ("2x01" if not saved, 3 once saved)
	; 
	; Usage : 
	;  1. Delete CacheTemp on Loading grid (can we avoid full rebuild on every refresh?)
	;  2. Call as grid lines edited, copied, added or deleted.
	; 
	; Called By :
	;   OnBlur^INRECSummary, OnBlurQty^INRECSummary, RefreshGridLines^INRECSummary
	;   RefreshLineCharge^INRECSummaryAssoc, RefreshInvoiceCharge^INRECSummaryAssoc
	;   AddScanLine^INRECSummaryScan
	; 
	; History:
	; 02-Jul-2012	GRF		SR18052: ensure idDataLine is reset after calling
	;							UpdateRunningTotals to cover initial setup
	; 20-Jun-2012	GRF		SR18012: Need to base running totals on idDataLine to
	;							ensure sequence is correct before record is saved
	; 30-May-2012	GRF		SR18012: Clarify pidSummGridRow
	; 19-Apr-2010	GRF		SR17177: Created as replacement version
	;-------------------------------------------------------------------------------
	new curAfterDisc,curTotal,idDataLine,idGridRow,idPrevDataLine,idThisDataLine,strKey,YFORM
	
	$$$LogR("UpdateThisTotal",pidSummGridRow_"<"_pobjSummary_"<")
	$$$LogRm(^CacheTempINRECSummary(YUSER,"Total"))
	
	quit:$get(^WWWDATEN(0,+$horolog,YUSER,"INRECSummary","V","KILLEDRECORD",pidSummGridRow))  ; SR18052
	
	;---------------------------------------
	; Start from line before change to get opening total.
	;---------------------------------------
	
	set strKey  = $get(^WWWDATEN(0,+$horolog,YUSER,"INRECSummary","V","REFERENCEKEY",pidSummGridRow,1))
	set strKey  = $translate(strKey,$$$DBLQUOTE)
	set idThisDataLine = $piece(strKey,$$$COMMA,$length(strKey,$$$COMMA))
	set idDataLine = $order(^CacheTempINRECSummary(YUSER,"Total",idThisDataLine),-1)
	
	$$$LogRx("UTT:0:"_idThisDataLine_"<"_idDataLine_"<")
	
	; FIXME/TODO : Should clear running totals when loading form lines         (OnAfterDataFields^INReceipt)
	;                then build all when totals don't exist                    (UpdateRunningTotals) - recalculate discounts/surcharges?
	;                  then rebuild from changed line when change occurs.
	
	if idDataLine="" {
	;if (idDataLine="") && '$data(^CacheTempINRECSummary(YUSER,"Total",idThisDataLine)) {    ; SR18012
		do UpdateRunningTotals(pidSummGridRow,pobjSummary)
		set idDataLine = $order(^CacheTempINRECSummary(YUSER,"Total",idThisDataLine),-1)     ; SR18052/SR18012
	}
	
	if idDataLine'="" {
		set curTotal = $get(^CacheTempINRECSummary(YUSER,"Total",idDataLine))
	} else {
		set curTotal = 0
	}
	
	set curAfterDisc = $$$INRECSummaryCostAfterDiscount(pobjSummary)
	set ^CacheTempINRECSummary(YUSER,"Total",idThisDataLine) = curTotal + curAfterDisc
	quit
	
	/*
ObsUpdateThisTotal(pidSummRow,pobjSummary="")
	;-------------------------------------------------------------------------------
	; Update running total for designated line
	; 
	; Usage : 
	;  1. Delete CacheTemp on Loading grid (can we avoid full rebuild on every refresh?)
	;  2. Call as grid lines edited, copied, added or deleted.
	; 
	; Called By :
	; 
	; History:
	; 19-Apr-2010	GRF		SR17177: Created as replacement version
	;-------------------------------------------------------------------------------
	new curAfterDisc,curTotal,idGridRow,strRow,YFORM
	
	$$$LogR("UpdateThisTotal",pidSummRow_"<"_$get(YINHALT)_"<"_pobjSummary_"<")
	
	if pidSummRow'="" {
		set idGridRow = $order(^CacheTempINRECSummary(YUSER,"Total",pidSummRow),-1)
	} else {
		set idGridRow = ""
		kill ^CacheTempINRECSummary(YUSER,"Total")
	}
	
	if (idGridRow="") && '$data(^CacheTempINRECSummary(YUSER,"Total",pidSummRow)) {
		do UpdateRunningTotals(pidSummRow,pobjSummary)
		set idGridRow = $order(^CacheTempINRECSummary(YUSER,"Total",pidSummRow),-1)
	}
	
	if idGridRow'="" {
		set curTotal = $get(^CacheTempINRECSummary(YUSER,"Total",idGridRow))
	} else {
		set curTotal = 0
	}
	
	set curAfterDisc = $$$INRECSummaryCostAfterDiscount(pobjSummary)
	set ^CacheTempINRECSummary(YUSER,"Total",pidSummRow) = curTotal + curAfterDisc
	quit
	*/
	
OnChangeDiscountCode(pidGridRow,pintCol,&pobjSummary,pblnUpdate=$$$NO)
	;-------------------------------------------------------------------------------
	; Inputs:
	;	pidGridRow		Grid Row - "2x01" format
	;	pintCol			Grid Columm
	;	pobjSummary		WWWDATEN record for INRECSummary line [byRef]
	;	pblnUpdate		Only modify pobjSummary if set
	; 
	; History:
	; 20-Jun-2012	GRF		SR18012: Need to base running totals on idDataLine to
	;							ensure sequence is correct before record is saved
	; 07-Apr-2010	GRF		SR17177.1: Set ExtendedCost for invoice-based charges;
	;							remove commented code under SR15753
	; 30-Mar-2010	GRF		SR17177: Permit Percentage type invoice-based charges
	; 25-Mar-2010	GRF		SR17244: InvoiceBased test should also exclude
	;							Item-based lines; requires enumLineType
	; 18-Feb-2010	shobby	SR15753: Removed some redundant calls.
	; 17-Jul-2009	GRF		SR16669: Calculate blnInvoiceBased; reject if other
	; 							 than Fixed Amount type on invoice-based charges
	; 16-Jul-2009	GRF		SR16669: CostDistribution macro change; preserve
	; 							DiscCode value if set
	; 15-Jul-2009	GRF		SR16669: Add else "no DiscCode" case
	; 15-Jul-2009	GRF		SR16689: Correct INRECSummary property names in macros
	; 29-Jun-2009	GRF		SR16669: created
	;-------------------------------------------------------------------------------
	new blnInvoiceBased,blnSaveDiscCode,curAmount,curTotal
	new enumAllocn,enumCostDistrib,enumDiscType,enumLineType
	new idDataLine,idDiscCode,idGLAccount,idTotalRow,objSuppDisc,strRefKey

	$$$LogR2("OnChangeDiscountCode",pidGridRow_"_"_pintCol_"<"_pblnUpdate_"<")
	$$$LogR2x("Before:"_pobjSummary)
	
	set idDiscCode   = $$$INRECSummaryDiscountCode(pobjSummary)
	set enumLineType = $$$INRECSummaryLineType(pobjSummary)               ; SR17244
	
	;	SR16669 17-Jul-2009 vvv
	set strRefKey  = $get($$$WWWDATEN("REFERENCEKEY",pidGridRow,1))
	set idDataLine = $piece(strRefKey,$$$COMMA,$length(strRefKey,$$$COMMA))
	;et blnInvoiceBased = (idDataLine\1=idDataLine)                       ; SR17244
	set blnInvoiceBased = $$$IsChargeLine && (idDataLine\1=idDataLine) 
	
	;---------------------------------------
	; Changes may be made to inline discounts on Standard or Bonus lines
	; or to either Line-based or Invoice-based charges.
	;---------------------------------------
	
	; Disregard invoice-based charges that are not processed
	;---------------------------------------
	if idDiscCode'="" {
		set objSuppDisc = $get(^INSUPBuyingDiscount(0,idDiscCode,1))
		
		if blnInvoiceBased {
	;		if $$$INSUPBuyingDiscountAmountCalculation(objSuppDisc)'=0 {    ; Fixed Amount  ; SR17177
			if $$$INSUPBuyingDiscountAmountCalculation(objSuppDisc)=2 {    ; Don't accept "Rate per Unit" invoice-based charges 
				set $$$INRECSummaryDiscountCode(pobjSummary) = ""
				set idDiscCode = ""
			}
		; vvv SR18012
			; SR17177.1 vvv    FIXME : if pidGridRow is NULL would cause earlier subscript error
		;	if pidGridRow'="" {
		;		set idTotalRow = $order(^CacheTempINRECSummary(YUSER,"Total",pidGridRow),-1)
		;	} else {
		;		set idTotalRow = ""
		;	}
			
			set idTotalRow = $order(^CacheTempINRECSummary(YUSER,"Total",idDataLine),-1)
		; ^^^ SR18012
	
			if idTotalRow'="" {
				set curTotal = $get(^CacheTempINRECSummary(YUSER,"Total",idTotalRow))
			} else {
				set curTotal = 0
			}
			set $$$INRECSummaryExtendedCost(pobjSummary) = curTotal
			; SR17177.1 ^^^
		}		
	}
	
	; Retest	
	if idDiscCode'="" {
	;	set objSuppDisc = $get(^INSUPBuyingDiscount(0,idDiscCode,1))
	;	SR16669 17-Jul-2009 ^^^
		
		set enumDiscType    = $$$INSUPBuyingDiscountAmountCalculation(objSuppDisc)
		set curAmount       = $$$INSUPBuyingDiscountAmount(objSuppDisc)
		set idGLAccount     = $$$INSUPBuyingDiscountGLAccount(objSuppDisc)
		set enumAllocn      = $$$INSUPBuyingDiscountCostAllocation(objSuppDisc)        ; SR16689
		set enumCostDistrib = $$$INSUPBuyingDiscountCostDistribution(objSuppDisc)
		
		if pblnUpdate {
			set $$$INRECSummaryDiscountType(pobjSummary)     = enumDiscType
			set $$$INRECSummaryDiscountRate(pobjSummary)     = curAmount
			set $$$INRECSummaryGLAccount(pobjSummary)        = idGLAccount        ; SR16689
			set $$$INRECSummaryCostAllocation(pobjSummary)   = enumAllocn         ; SR16689
			set $$$INRECSummaryCostDistribution(pobjSummary) = enumCostDistrib
		}

	} else {  ; SR16669 15-Jul-2009
		if pblnUpdate {
			set $$$INRECSummaryDiscountType(pobjSummary)     = ""
			set $$$INRECSummaryDiscountRate(pobjSummary)     = ""
			set $$$INRECSummaryGLAccount(pobjSummary)        = ""
			set $$$INRECSummaryCostAllocation(pobjSummary)   = ""
			set $$$INRECSummaryCostDistribution(pobjSummary) = ""
		}
	}
	; FIXME : Check continuing compatability with Discount Code if that is not null <GRF>
	$$$LogR2x("After :"_pobjSummary)
	quit
	
]]></Routine>
</Export>