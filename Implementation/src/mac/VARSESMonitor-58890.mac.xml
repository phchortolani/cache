<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESMonitor" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARSESMonitor
	// Andre, 04/04/2008 - Rotinas de monitoramento.
	quit
	
MonitorAndTune()
	new path, file
	
	set path = $zu(168) // Andre, 14/10/2009: Returns location of current working directory
	set file = path_"MonitorAndTune"_$zdatetime(+$horolog,8)_".txt" // Andre, 14/10/2009
	
	do RunOutputToFile^VARSESMonitor( "do Instalacao^VARSESMonitor", file )
	do RunOutputToFile^VARSESMonitor( "do Licencas^VARSESMonitor", file )
	do RunOutputToFile^VARSESMonitor( "do CountUsersAndLogins^VARSESMonitor", file )
	do RunOutputToFile^VARSESMonitor( "do BlocosLivres^VARSESMonitor", file )
	do RunOutputToFile^VARSESMonitor( "do TuneTabelasDoFicha^VARSESMonitor", file )
	// Andre, 26/02/2009:
	// Cannot run the routine TuneTodasAsTabelas because it was taking more than 
	// 15 hours to run (15:05:46 precisely). It seems it was taking more time
	// to tune global ^WWWPRO.
	;do RunOutputToFile^VARSESMonitor("do TuneTodasAsTabelas^VARSESMonitor")
	do RunOutputToFile^VARSESMonitor( "do PrintTaskList^VARSESMonitor", file )
	quit 1
 
 
TuneTabelasDoFicha
	// Andre, 04/04/2008 - Tuning apenas das tabelas do relatório
	// Ficha de Estoque.
	new errors
	
	Do $System.SQL.TuneTable("SQLUser.VARSESEntrada",1,1,.errors)
	write !,"Errors: ",errors
	set errors = ""
	Do $System.SQL.TuneTable("SQLUser.VARSESEntradaLinha",1,1,.errors)
	write !,"Errors: ",errors
	set errors = ""
	Do $System.SQL.TuneTable("SQLUser.INADJ",1,1,.errors)
	write !,"Errors: ",errors
	set errors = ""
	Do $System.SQL.TuneTable("SQLUser.INADJLine",1,1,.errors)
	write !,"Errors: ",errors
	set errors = ""
	Do $System.SQL.TuneTable("SQLUser.INTFR",1,1,.errors)
	write !,"Errors: ",errors
	set errors = ""
	Do $System.SQL.TuneTable("SQLUser.INTFRLine",1,1,.errors)
	write !,"Errors: ",errors
	set errors = ""
	Do $System.SQL.TuneTable("SQLUser.INREC",1,1,.errors)
	write !,"Errors: ",errors
	set errors = ""
	Do $System.SQL.TuneTable("SQLUser.INRECLine",1,1,.errors)
	write !,"Errors: ",errors
	set errors = ""
	Do $System.SQL.TuneTable("SQLUser.VARSESRetornoAoEstoque",1,1,.errors)
	write !,"Errors: ",errors
	set errors = ""
	Do $System.SQL.TuneTable("SQLUser.VARSESRetornoAoEstoqueLinha",1,1,.errors)
	write !,"Errors: ",errors
	set errors = ""
	quit
	
	
TuneTodasAsTabelas
	// Andre, 04/04/2008 - Tuning de todas as tabelas
	new errors
	
	Do $System.SQL.TuneTable("*",1,1,.errors)
	write !,"Errors: ",errors
	quit
	
Licencas
	// Andre, 04/04/2008 - Uso de licenças.
	
	// Andre, 06/03/2009:
	;do DateOfCacheLastStart // Andre, 19/02/2009
	write !,"Last Caché server start at ",$zdt($$DateOfCacheLastStart(),9),"."
 
	// $System.License.CKEY displays the key.
	Do $System.License.CKEY()
	write !
	
	// $System.License.ShowCounts summarizes license use tracked in shared memory on the local system:
	Do $System.License.ShowCounts()
	write !
	
	// $System.License.ShowManager displays the active license manager address and port:
	Do $System.License.ShowManager()
	write !
	
	Do $System.License.ShowSummary()
	write !
	
	quit
	
BlocosLivres
	// Andre, 04/04/2008 - Lista blocos usados e blocos livres. 
	// Segundo Jackson/SES-DF, não pode chegar a menos de 5% pois
	// a performance cai.
	do ^%FREECNT
	quit
 
	
RunOutputToFile(pCmd,pFile="")
	// Andre, 04/04/2008
	// Executa comando informado, salvando output em arquivo de nome:
	// [Diretório do database]\RunAAAAMMDD.txt
 
	// Andre, 25/09/2009:
	// Before this change:
	/*
 	set $ztrap = "ErroRunOutputToFile^VARSESMonitor"
	new file, previousIO, path
	*/
	// After this change:
 
	new previousZTrap
	set previousZTrap = $ztrap
	set $ztrap = "ErroRunOutputToFile^VARSESMonitor"
 
	new file, previousIO, path
	
	if ($get(pCmd) = "") {
		write "Informe um comando."
		quit
	}
	
	if ( $get(pFile) = "" ) {
		set path = $zu(168) // Returns location of current working directory
		set file = path_"Output "_$translate( $zdatetime( $horolog, 3 ), ":", "-" )_".txt" // Andre, 14/10/2009 ; "Run"_$zdatetime(+$horolog,8)_".txt"
	}
	else {
		set file = pFile
	}
	
	set fileExists = '$zu(140,4,file)
	if fileExists {
		open file:("WA"):5 // Write/appends to file
	}
	else {
		open file:("NW"):5 // New file + write access
	}
	set previousIO=$IO
	use file
	// Eliminates the <ENDOFFILE> error for sequential files for the current process:
	// Read Caché documentation:
	// http://desenv:1972/csp/docbook/DocBook.UI.Page.cls?KEY=RCOS_fzutil68-40
	do $ZUTIL(68,40,1) 
	
	write !,$zdatetime($horolog,2)
	write !,"Command: ",pCmd
	write !,"Output:"
	write !
	
	xecute pCmd
	
	use previousIO
	close file
 
	write !,"Resultados armazenados no arquivo ",file
	write !
 
	set $ztrap = previousZTrap // Andre, 25/09/2009
 
	quit
 
ErroRunOutputToFile
	// Andre, 25/09/2009: Wrong comment: // Passando o ztrap para o próximo tratamento da fila.
 	set $ztrap = $get(previousZTrap)
 
	write !,"** An error occurred at ", $zdatetime($horolog,2)
	write !,"Error handled by ErroRunOutputToFile^VARSESMonitor." // Andre, 14/10/2009
	write !,"Error Position:", $ZERROR
	write !,"Error Code:", $ECODE
 
	// Andre, 14/10/2009:
 	write !,"Stack and context:"
	do PrintStack^VARSESErrorHandling()
	
	use previousIO
	close file
 
	// Andre, 25/09/2009:
	if ( $get(previousZTrap) '= "" ) {
		zquit 1 // The ZQUIT 1 command re-signals the error condition and causes Caché to unwind the call stack to thefirst encountered $ZTRAP error handler.
		goto @$ztrap ;xecute "goto "_$get(previousZtrap) // Andre, 14/10/2009
	}
 
	quit
	
Instalacao
	// Andre, 04/04/2008
	// Exibe dados da instalação.
	new OS,file,applicationPrefix,applicationVersion,applicationDate
	write !,"System: ",$zu(131,1) // Sets or returns system identifiers.
	write !,"Namespace: "_$zu(5) // Returns current namespace 
	write !,"Machine: "_$zu(110) // Returns the name of the system that is running.
	set OS = $zu(100) // Determines which Windows operating system is running.
	write !,"OS: ",$case(OS,0:"Windows NT 4, Windows 2000, Windows XP, or Windows Server 2003 (32bit).",1:"Windows 95, Windows 98, or Windows ME.",:"Desconhecido")
	write !,"Current working directory: ",$zu(168) // Returns location of current working directory
	set applicationPrefix = "AlphaLinc"
	set applicationVersion = $piece($get(^WWWVERSION(0,applicationPrefix,1)),"~",1)
	set applicationDate = $zdatetime($piece($get(^WWWVERSION(0,applicationPrefix,1)),"~",2),9)
	write !,"Alphalinc: version of application """_applicationPrefix_""" is "_applicationVersion_" of "_applicationDate_"."
	write !,"DAT files: "
	SET file=$ZSEARCH("*.DAT")
	WHILE file'="" {
	   WRITE !,file,", size: ",$fnumber($zu(140,1,file),".")," bytes"
	   SET file=$ZSEARCH("")
	}
	// Andre, 06/03/2009:
	;do DateOfCacheLastStart() // Andre, 19/02/2009
	write !,"Last Caché server start at ",$zdt($$DateOfCacheLastStart(),9),"."
	write !
	quit
	
PrintTask(pidTask)
 
	new task
	set task = ##class(%SYSTEM.Task).%OpenId(pidTask)
	write "Name: ["_task.Name_"]",!
	write "NameSpace: ["_task.NameSpace_"]",!
	write "Description: ["_task.Description_"]",!
 
	write "Continue After Error: ["_task.ContinueAfterError_"]",!
	write "Daily End Time: ["_$zdatetime(task.DailyEndTime)_"]",!
	write "Daily Frequency: ["_task.DailyFrequency_"]",!
	write "Daily Frequency Time: ["_task.DailyFrequencyTime_"]",!
	write "Daily Increment: ["_task.DailyIncrement_"]",!
	write "Daily Start Time: ["_$ztime(task.DailyStartTime)_"]",!
	write "Day Next Scheduled: ["_$zdatetime(task.DayNextScheduled)_"]",!
	write "ER: ["_task.ER_"]",!
	write "End Date: ["_$zdatetime(task.EndDate)_"]",!
	write "Error: ["_task.Error_"]",!
	write "Execute Code: ["_task.ExecuteCode_"]",!
	write "Expires: ["_task.Expires_"]",!
	write "Expires Days: ["_task.ExpiresDays_"]",!
	write "Expires Hours: ["_task.ExpiresHours_"]",!
	write "Expires Minutes: ["_task.ExpiresMinutes_"]",!
	write "Is Batch: ["_task.IsBatch_"]",!
	write "Last Finished: ["_$zdatetime(task.LastFinished)_"]",!
	write "Last Schedule: ["_$zdatetime(task.LastSchedule)_"]",!
	write "Last Started: ["_$zdatetime(task.LastStarted)_"]",!
	write "Open Output File: ["_task.OpenOutputFile_"]",!
	write "Output Directory: ["_task.OutputDirectory_"]",!
	write "Output Filename: ["_task.OutputFilename_"]",!
	write "Priority: ["_task.Priority_"]",!
	write "Reschedule On Start: ["_task.RescheduleOnStart_"]",!
	write "Run After Job Number: ["_task.RunAfterJobNumber_"]",!
	write "Running Job Number: ["_task.RunningJobNumber_"]",!
	write "Start Date: ["_$zdatetime(task.StartDate)_"]",!
	write "Status: ["_task.Status_"]",!
	write "Suspended: ["_task.Suspended_"]",!
	write "Time Next Scheduled: ["_task.TimeNextScheduled_"]",!
	write "Time Period: ["_task.TimePeriod_"]",!
	write "Time Period Day: ["_task.TimePeriodDay_"]",!
	write "Time Period Every: ["_task.TimePeriodEvery_"]",!
 
	quit	
	
PrintTaskList
	new rset, namespaceAnterior
	
	set namespaceAnterior = $zu(5)
	zn "%SYS"
	set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%SYSTEM.Task"
	set rset.QueryName = "TaskListDetail"
	do rset.Execute()
	
	while rset.Next() {
		;write "Description("_rset.Data("ID")_"): "_rset.Data("Description"),!
		write !,"ID: ",rset.Data("ID"),!
		do PrintTask(rset.Data("ID"))
	}
 
 	zn namespaceAnterior
	quit
 
Reindex
	set classesList = 	"INAUF,INAUFP,VARSESPAMAFM,VARSESCOMTempItensPAMLinha,"_
						"VARTRKPAM,VARTRKPAMLineFake,VARSESEntrada,VARSESEntradaLinha"_
						"INADJ,INADJLine,INTFR,INTFRLine,INREC,INRECLine,"_
						"VARSESRetornoAoEstoque,VARSESRetornoAoEstoqueLinha"
	do ^WWWVAR
	set VORG(1) = $get(classesList)
	do ^WWWSORT
	quit
 
CountUsersAndLogins
	// Andre, 18/02/2009
	// 
	new countUsers, countLogins, maxDiffInDays
	
	write !,"Users and logins counts as of "_$zdatetime($horolog,5)_":"
	write !,"(Counts do not include current date.)"
	
	
	// Registered users:
	write !
	&sql(
		DECLARE CURCountUsersVARSESMonitor CURSOR FOR
		SELECT 
		 	COUNT(*)
		INTO
			:countUsers
		 FROM 
		 	SQLUser.WWW013
	)
	&sql(OPEN CURCountUsersVARSESMonitor)
	&sql(FETCH CURCountUsersVARSESMonitor)
	if (SQLCODE = 0) {
		write !,$get(countUsers)_" registered users."
	}
	&sql(CLOSE CURCountUsersVARSESMonitor)
 
 
	// Distinct employee logins:
	write !
	for maxDiffInDays = 1,10,20,30,60,90,120,150,180 {
		&sql(
			DECLARE CURCountLoginsVARSESMonitor CURSOR FOR
			SELECT 
			 	COUNT(DISTINCT WWWLOGIN.Employee)
			INTO
				:countUsers
			 FROM 
			 	SQLUser.WWWLOGIN
			 
			 	LEFT JOIN SQLUser.WWW013
			 	ON WWWLOGIN.Employee = WWW013.UserName
			 
			 WHERE 
			 	DATEDIFF('dd', Date1, CURRENT_DATE) >= 1
			 	AND DATEDIFF('dd', Date1, CURRENT_DATE) <= :maxDiffInDays
			 	AND WWW013.UserName IS NOT NULL
		)
		&sql(OPEN CURCountLoginsVARSESMonitor)
		&sql(FETCH CURCountLoginsVARSESMonitor)
		if (SQLCODE = 0) {
			write !,$get(countUsers)_" different users logged in to Alphalinc in the last "_maxDiffInDays_" day(s)."
		}
		&sql(CLOSE CURCountLoginsVARSESMonitor)
	}
 
 
	// Successful logins:
	// (Unsuccessful logins are those whose field Employee of table
	//  WWWLOGIN is null.)
	write !
	for maxDiffInDays = 1,10,20,30,60,90,120,150,180 {
		&sql(
			DECLARE CURCountLogins2VARSESMonitor CURSOR FOR
			SELECT 
			 	COUNT(*)
			INTO
				:countLogins
			 FROM 
			 	SQLUser.WWWLOGIN
			 
			 	LEFT JOIN SQLUser.WWW013
			 	ON WWWLOGIN.Employee = WWW013.UserName
			 
			 WHERE 
			 	DATEDIFF('dd', Date1, CURRENT_DATE) >= 1
			 	AND DATEDIFF('dd', Date1, CURRENT_DATE) <= :maxDiffInDays
			 	AND WWW013.UserName IS NOT NULL
		)
		&sql(OPEN CURCountLogins2VARSESMonitor)
		&sql(FETCH CURCountLogins2VARSESMonitor)
		if (SQLCODE = 0) {
			write !,$get(countLogins)_" logins to Alphalinc in the last "_maxDiffInDays_" day(s)."
		}
		&sql(CLOSE CURCountLogins2VARSESMonitor)
	}
 
	quit
 
 
DateOfCacheLastStart()
	// Andre, 19/02/2009
	// Writes the date and time of the last time Caché server was started.
	
	new today, secsSinceSysUp, todayInSecs, sysUpInDays, sysUpInHorolog
	
	set today = $zu(188), secsSinceSysUp = $zh // Note $zu(188) returns a value different of $horolog!
	
	set todayInSecs = (+today*24*60*60) + $p(today,",",2)
	
	set sysUpInDays = ( todayInSecs - secsSinceSysUp )/60/60/24
	
	set sysUpInHorolog = ( sysUpInDays \ 1 )_","_$number( ( ( sysUpInDays # 1 ) * 24 * 60 * 60 ) \ 1 , 0) // $number rounds up
	
	quit sysUpInHorolog
 
ListServerStarts()
	// Andre, 24/06/2009
	// Lists server starts as logged in cconsole.log 
	new sysFolder, result, commandLine  
	
	set sysFolder = $piece($zu(131,1),",",2) ; c:\cachesys\mgr\ is default system folder
	
	// todo:
	// use $zu(168) or $ZUTIL(12,"") ?
 
	set commandLine = "find ""*** Recovery started at"" "_sysFolder_"cconsole.log >"_$zu(168)_"ServerStarts.log"
	
	set result = $zf(-1, commandLine) ; # $ZF(-1)  Executes a program or command as a spawned child process and waits for the child process to return.
	
	if ( result = 0 ) {
		// Success
		write !,"<PRE>"
		new stream
		set stream = ##class(%FileCharacterStream).%New()
		set stream.Filename = $zu(168)_"ServerStarts.log"
		while 'stream.AtEnd {
			set line=stream.ReadLine()
			write !,line
		}
		do stream.%Close()
		write !,"</PRE>"
 
		/*
		new strFile
		set strFile=##class(%Library.File).%New($zu(168)_"ServerStarts.log")
		do strFile.Open("R")
		set intLength = 100
		for  {
			set strLine = strFile.Read(.intLength)
			quit:strFile.AtEnd
		}
		do strFile.Close()
		*/
 
	}
 
	quit
]]></Routine>
</Export>