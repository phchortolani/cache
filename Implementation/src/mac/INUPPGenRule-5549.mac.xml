<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INUPPGenRule" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INUPPGenRule
 
#include COMSYS
#include WWWConst
#include INConst
#include COMConst
 
OnAfterDataFields(pidRuleHeader)
	;-------------------------------------------------------------------------------
	; On After Data Fields load edit grid
	;
	; Params:
	; pidRuleHeader - Price Plan Generation Rule Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 04-Dec-2006	PO		SR15280: Created
	;-------------------------------------------------------------------------------
 
 	if YSEITE=1 {
		do LoadGrid(pidRuleHeader,"INPPLineGenRule")
 	}
	
	quit
	
LoadGrid(pidRuleHeader,pstrForm)
	;-------------------------------------------------------------------------------
	; Load Edit Grid
	;
	; Params:
	; pidRuleHeader - Price Plan Generation Rule Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 05-Dec-2008	GRF		Clarify Enabled test
	; 04-Dec-2006	PO		SR15280: Created
	;-------------------------------------------------------------------------------
	new YKEY,YFORM,YAUSWAHL,YFELD
	
	set YFORM = pstrForm
	set YFELD = ""
	set YKEY  = $get(pidRuleHeader)
	
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)    = $$$YES
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL) = 300
	set $$$COMGridEditParameterGridName(YAUSWAHL)      = YFORM
	set $$$COMGridEditParameterEnabled(YAUSWAHL)       = ($$$WWW120AuthorizationToModifyData(YVOR)'=$$$EnumReadOnly)
	set $$$COMGridEditParameterContainer(YAUSWAHL)     = "INPPGenRule"
 
	do ^COMGridEdit31
 
	quit
 
OnBeforeSave(pidRuleHeader, pobjRuleHeader)
	;-------------------------------------------------------------------------------
	; Determine whether save can be performed, if so save otherwise display message
	;
	; Params:
	; pidRuleHeader  - Price Plan Generation Rule Id
	; pobjRuleHeader - Price Plan Generation Rule record
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 21-Feb-2007	Steve S	SR15276: Validate date/times
	; 04-Dec-2006	PO		SR15280: Created
	;-------------------------------------------------------------------------------
	new strStatus,dteValidFrom,dteValidTo
	new tmeValidFrom,tmeValidTo
 
	set strStatus = $$$OK
 
	set dteValidFrom 	= $$$INPPGenRuleValidFromDate(pobjRuleHeader)
	set dteValidTo 		= $$$INPPGenRuleValidToDate(pobjRuleHeader)
	set tmeValidFrom 	= $$$INPPGenRuleValidFromTime(pobjRuleHeader)
	set tmeValidTo 		= $$$INPPGenRuleValidToTime(pobjRuleHeader)
 
	if $$$INPPGenRuleCostPoint(pobjRuleHeader)>$horolog {
		set strStatus = $$$MakeStatus("IN00571")  ;Cost Point must be for today's date or earlier.
	} else { //SR15276
		set strStatus = $$CheckDateTimes(dteValidFrom,dteValidTo,tmeValidFrom,tmeValidTo)
		if $$$ISOK(strStatus) {
			if $$$INPPGenRuleRelatedParentRule(pobjRuleHeader) = pidRuleHeader {
				set strStatus = $$$MakeStatus("IN00574")  ;Not possible to relate price plan to itself.
			} elseif ($$$INPPGenRulePricePlanType(pobjRuleHeader) = $$$EnumINITEMPRICETYPEMarketingCost) && ($$$INPPGenRuleRelatedParentRule(pobjRuleHeader) '= "") {
				set strStatus = $$$MakeStatus("IN00573",$$$AppEnum("INITEMPRICETYPE",$$$EnumINITEMPRICETYPEMarketingCost))  ;Not possible to have a related price plan for a plan with price type %1.
			} else {
				if $$$INPPGenRuleCreationMechanism(pobjRuleHeader) = "" set $$$INPPGenRuleCreationMechanism(pobjRuleHeader) = $$$Text("IN00577")  ;Manually created
				set $$$INPPGenRuleStatus(pobjRuleHeader)=$$$EnumCOMSYSSTATUSBuilding
				set strStatus = $$$GRIDSave(pidRuleHeader)
			}
		}
	}
 
	if $$$ISERR(strStatus) {
		$$$Alert(strStatus)
		set Q = $$$QDontSave
	}
 
	quit
	
	
CheckDateTimes(pdteValidFrom,pdteValidTo,ptmeValidFrom,ptmeValidTo)
	;-------------------------------------------------------------------------------
	; Validate date/times on the form
	;
	; Params:
	; pdteValidFrom		: The valid from date
	; pdteValidTo		: The valid to date
	; ptmeValidFrom		: The valid from time
	; ptmeValidTo		: The valid to time
	;
	; Returns: strStatus
	;
	; History:
	; 20-Feb-2007	Steve S		SR15276: Created
	;-------------------------------------------------------------------------------
	new strStatus,dteToday,tmeNow,tmsNow
 
 	set tmsNow	 = $horolog
 	
	set dteToday = +tmsNow
	set tmeNow   = $piece(tmsNow,$$$COMMA,2)
	
	set strStatus = $$$OK
 
	if ((ptmeValidFrom'="")&&(pdteValidFrom="")) {
		set strStatus = $$$MakeStatus("IN00660",$$$StrINPPGenRuleValidFromDate,$$$StrINPPGenRuleValidFromTime)  ;%1 required when %2 is specified
	
	} elseif ((ptmeValidTo'="")&&(pdteValidTo="")) {
		set strStatus = $$$MakeStatus("IN00660",$$$StrINPPGenRuleValidToDate,$$$StrINPPGenRuleValidToTime)  ;%1 required when %2 is specified	
	
	} elseif (pdteValidFrom'="")&&(pdteValidTo'="")&&(pdteValidFrom>pdteValidTo) {
		set strStatus = $$$MakeStatus("IN00661",$$$StrINPPGenRuleValidFromDate,$$$StrINPPGenRuleValidToDate)  ;%1 cannot be after %2
	
	} elseif (pdteValidFrom<dteToday)||((pdteValidFrom=dteToday)&&(ptmeValidFrom'="")&&(ptmeValidFrom<tmeNow)) {
		set strStatus = $$$MakeStatus("IN00662")  ;Valid From Date and Valid From Time must be greater than or equal to today's date and time
	
	} elseif (pdteValidFrom=pdteValidTo)&&(ptmeValidFrom'="")&&(ptmeValidTo'="")&&(ptmeValidFrom>ptmeValidTo) {
		set strStatus = $$$MakeStatus("IN00661",$$$StrINPPGenRuleValidFromTime,$$$StrINPPGenRuleValidToTime)  ;%1 cannot be after %2
	}
 
 
	quit strStatus
	
 
Generate(pidRuleHeader)
	;-------------------------------------------------------------------------------
	; Generate Price Plan
	;
	; Params:
	; pidRuleHeader - Price Plan Generation Rule Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 05-Dec-2006	PO		SR15268: Created
	;-------------------------------------------------------------------------------
	new idGenerateStatus
 
	//set idGenerateStatus = $piece($$GetYMFELDContainer^COMGridEdit31G(),Y,8) // Generate Status on Generate Price Plan form
	//if idGenerateStatus = "" {
	//	$$$Alert($$$Text("IN00570"))  ;A Generate Status must be provided to generate the pricing plan.
	//} else {
		//do Generate^INBPPGenRule(pidRuleHeader,idGenerateStatus)
		do Generate^INBPPGenRule(pidRuleHeader)
	//}
 
	do GoToForm^COMUtilForm("INPPGenRule",pidRuleHeader)
 
	quit
 
CanGenerate(pidRuleHeader)
	;-------------------------------------------------------------------------------
	; Only allow price plan generation if rule lines exist
	;
	; Params:
	; pidRuleHeader - Price Plan Generation Rule Id
	;
	; ByRefs: YQ
	;
	; Returns: Nothing
	;
	; History:
	; 19-Jan-2007	RPW		SR15121: Do not store managed to be related
	; 06-Dec-2006	PO		SR15268: Created
	;-------------------------------------------------------------------------------
	new strStatus,idRelated,objRuleHeader,enumStatus
 
	set strStatus = $$$OK
	
	if '$$$NoKey(pidRuleHeader) {
		if '$data(^INPPLineGenRule(YM,pidRuleHeader)) {
			set strStatus = $listbuild("IN00564")  ;Must create rule lines before generating price plan.
			
		} else {
			set objRuleHeader = $get(^INPPGenRule(YM,pidRuleHeader,1))
			
			set enumStatus=$$$INPPGenRuleStatus(objRuleHeader)
			
			if (enumStatus>$$$EnumCOMSYSSTATUSGenerated)&&(enumStatus'=$$$EnumCOMSYSSTATUSRejected) {
				set strStatus="IN00607"  ;Can not generate Price Plan from Awaiting Review or Approved status
			}
			
			if $$$ISOK(strStatus) {
				
				set idRelated = $$$INPPGenRuleRelatedParentRule(objRuleHeader)
				
				if ($$$INPPGenRuleCostPoint(objRuleHeader) > $horolog) || ($$$INPPGenRuleCostPoint(objRuleHeader) = "") {
					set strStatus = $listbuild("IN00571")  ;Cost Point must be for today's date or earlier.
					
				} elseif $$$INPPGenRulePricePlanType(objRuleHeader) = $$$EnumINITEMPRICETYPESellingPrice {
					
					if idRelated = "" {
						set strStatus = $listbuild("IN00578",$$$AppEnum("INITEMPRICETYPE",$$$INPPGenRulePricePlanType(objRuleHeader)))  ;Price Plans of type %1 must have a related price plan.
						
					} elseif '$$IsRelatedGenRuleGenerated^INBPPGenRule(idRelated) {
						set strStatus = $listbuild("IN00565",idRelated)  ;Related price plan "%1" must be generated first.
					}
				} elseif $$$INPPGenRulePricePlanType(objRuleHeader) = $$$EnumINITEMPRICETYPEStoreManaged { // SR15121
					if idRelated'="" {
						set strStatus=$listbuild("IN00645")  ;Store Managed Price Plans can not be related to another price plan.
					}
				}
				if $$$ISOK(strStatus) {
					if '$$IsComplete(pidRuleHeader,$$$INPPGenRulePricePlanType(objRuleHeader)) {
						set strStatus = "IN00588"  ;Missing Default Catch All line.
					}
				}
				
				set:$$$ISOK(strStatus) strStatus=$$ValidateLines^INDPPGenRule(pidRuleHeader)
				
			}
 
		}
	}
 
	$$$YQHandler(strStatus)
 	
	quit strStatus
 
OpenPlan(pidRuleHeader)
	;-------------------------------------------------------------------------------
	; Open the Price Plan for this generation rule
	;
	; Params:
	; pidRuleHeader - Price Plan Generation Rule id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 06-Dec-2006	PO		SR15276: Created
	;-------------------------------------------------------------------------------
	new objRuleHeader
 
	set objRuleHeader = $get(^INPPGenRule(YM,pidRuleHeader,1))
 
	do GoToForm^COMUtilForm("INPricePlan",$$$INPPGenRulePricePlanID(objRuleHeader))
 
	quit
 
EnableOpenPlan(pidRuleHeader)
	;-------------------------------------------------------------------------------
	; Only allow plan to be open if a plan has already been generated
	;
	; Params:
	; pidRuleHeader - Price Plan Generation Rule id
	;
	; ByRefs: YQ
	;
	; Returns: Nothing
	;
	; History:
	; 06-Dec-2006	PO		SR15276: Created
	;-------------------------------------------------------------------------------
	new objRuleHeader,strStatus
 
	set strStatus = $$$OK
 
	set objRuleHeader = ""
	if '$$$NoKey(pidRuleHeader) set objRuleHeader = $get(^INPPGenRule(YM,pidRuleHeader,1))
 
	if $$$INPPGenRulePricePlanID(objRuleHeader) = "" {
		set strStatus = $listbuild("IN00563")  ;No price plan has been created for this generation rule.
	}
	
	$$$YQHandler(strStatus)
 
	quit
	
Search()
	;-------------------------------------------------------------------------------
	; Show the user parameters for the Pricing Category
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	; Always $$$OK
	;
	; History:
	; 19-Jan-2007	RPW		SR15121: Do not allow store managed plans to show the comview.
	; 05-Dec-2006	RPW		SR15273: Created
	;-------------------------------------------------------------------------------
	
	if ($$$INPPGenRulePricePlanType($$$GRIDYFELDContainer) = $$$EnumINITEMPRICETYPEStoreManaged ) {
		$$$Alert("IN00645")
	} else {
		
		do Initialise^COMViewCustom("INPPGenRule","ItemsSelected^"_$zname)
		do AddFilter^COMViewCustom("P1",$$$EnumCOMVIEWCOMPARATORNotEquals,$$$GRIDYKEYContainer)
		if $$IsMarketingObject^INDPPGenRule($$$GRIDYFELDContainer) {
			do AddFilter^COMViewCustom("D4",$$$EnumCOMVIEWCOMPARATOREquals,-1)
		} else {
			do AddFilter^COMViewCustom("D4",$$$EnumCOMVIEWCOMPARATOREquals,$$$EnumINITEMPRICETYPEMarketingCost)
		}
		do Start^COMViewCustom()
	}
	
	quit $$$OK
 
ItemsSelected(pobjResultSet)
	;-------------------------------------------------------------------------------
	; Get the selected item(s).
	;
	; Params:
	; pobjResultSet: The %Library.ResultSet object with the results of the query.
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 05-Dec-2006	RPW		SR15273: Created
	;-------------------------------------------------------------------------------
	new idKey,objItem
	
	if pobjResultSet.Next() {
		set idKey=$$GetID^COMViewCustom(pobjResultSet)
		
		do PopulateDataField^COMUtils(YFORM,$$$FldINPPGenRuleRelatedParentRule,idKey)
	}
	
	quit
 
Copy(pidRuleHeader)
	;-------------------------------------------------------------------------------
	; Duplicate a price plan rule, it's lines and quantity breaks
	;
	; Params:
	; pidRuleHeader - Price Plan Rule Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 07-Dec-2006	PO		SR15295: Created
	;-------------------------------------------------------------------------------
	new strStatus,idNewRuleHeader
 
	set strStatus = $$CopyToUnposted^INBPPGenRule(pidRuleHeader,.idNewRuleHeader,$$$Text($listbuild("IN00576",pidRuleHeader)))  ;Copied from Generation rule %1
 
	if $$$ISOK(strStatus) {
		do GoToForm^COMUtilForm("INPPGenRule",idNewRuleHeader)
	} else {
		$$$Alert($$$Text(strStatus))
	}
 
	quit
 
IsComplete(pidRuleHeader,pintPricePlanType)
	;-------------------------------------------------------------------------------
	; Determine if the completely blank default line exists.
	;
	; Params:
	;
	; ByRefs: This is not really needed as we use & for ByRef parameters now.
	;
	; Returns:
	;
	; History:
	; 15-Dec-2006	RPW		Created
	;-------------------------------------------------------------------------------
 	new blnComplete
	
	// Find Super Mega Default Line
	set blnComplete=$$$NO
	
	if pintPricePlanType'=$$$EnumINITEMPRICETYPEStoreManaged {
	
		if $data(^INPPLineGenRules(YM,3," "," "," "," ",pidRuleHeader)) {
			set blnComplete=$$$YES
		}
	} else {
		set blnComplete=$$$YES
	}
	
	quit blnComplete
	
CanSubmitForApproval(pidGenRule)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 21-Dec-2006	RPW		Created
	;-------------------------------------------------------------------------------
	new strStatus,enumStatus
	
	set strStatus=$$$OK
	
	if '$$$NoKey(pidGenRule) {
	
		set enumStatus=$$GetStatus(pidGenRule)
		if enumStatus<$$$EnumCOMSYSSTATUSGenerated {
			set strStatus="IN00603"  ;Only Generated Price Plans can by Submitted for Approval
		} elseif (enumStatus>$$$EnumCOMSYSSTATUSGenerated) && (enumStatus'=$$$EnumCOMSYSSTATUSRejected) {
			set strStatus="IN00604"  ;Can not submit again, this must be rejected first.
		}
	}
	
	$$$YQHandler(strStatus)
	
	quit
	
GetStatus(pidGenRule)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 21-Dec-2006	RPW		Created
	;-------------------------------------------------------------------------------
	new objGenRule
	
	quit:$$$NoKey(pidGenRule) $$$EnumCOMSYSSTATUSNew
	
	set objGenRule=$get(^INPPGenRule(YM,pidGenRule,1))
	quit $$$INPPGenRuleStatus(objGenRule)
	
GetParent(pidGenRule)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 21-Dec-2006	RPW		Created
	;-------------------------------------------------------------------------------
	new objGenRule
	
	quit:$$$NoKey(pidGenRule) $$$EnumCOMSYSSTATUSNew
	
	set objGenRule=$get(^INPPGenRule(YM,pidGenRule,1))
	quit $$$INPPGenRuleRelatedParentRule(objGenRule)
	
SetStatus(pidGenRule,penumStatus)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 21-Dec-2006	RPW		Created
	;-------------------------------------------------------------------------------
	new objGenRule,strStatus,idPricePlan,objPricePlan
	
	set objGenRule=$get(^INPPGenRule(YM,pidGenRule,1))
	set $$$INPPGenRuleStatus(objGenRule)=penumStatus
	
	set strStatus=$$$Save("INPPGenRule",pidGenRule,objGenRule,$$$YES)
	
	set idPricePlan=$$$INPPGenRulePricePlanID(objGenRule)
	set objPricePlan=$get(^INPRicePlan(YM,idPricePlan,1))
	set $$$INPricePlanStatus(objGenRule)=penumStatus
	
	set strStatus=$$$Save("INPricePlan",idPricePlan,objPricePlan,$$$YES)
	
	do ReloadForm^COMUtilForm(YFORM)
	
SubmitForApproval(pidGenRule)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 21-Dec-2006	RPW		Created
	;-------------------------------------------------------------------------------
	new enumStatus
	
	set enumStatus=$$GetStatus(pidGenRule)
	do SetStatus(pidGenRule,$$$EnumCOMSYSSTATUSAwaitingReview)
	;Now located in COMChangeHistory
	;do AddEntry^COMAudit(YM,YFORM,$horolog,YBED,pidGenRule,enumStatus_" > "_$$$EnumCOMSYSSTATUSAwaitingReview)
	
	quit
 
 
CanApprove(pidGenRule)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 21-Dec-2006	RPW		Created
	;-------------------------------------------------------------------------------
	new strStatus,enumStatus,idParent
	
	set strStatus=$$$OK
	
	if '$$$NoKey(pidGenRule) {
 
		set enumStatus=$$GetStatus(pidGenRule)
		if enumStatus'=$$$EnumCOMSYSSTATUSAwaitingReview {
			set strStatus="IN00605"  ;To Approve this Price Plan Generator, it must be Awaiting Review
		}
		
		if $$$ISOK(strStatus) {
			// Is my Parent Approved
			
			set idParent=$$GetParent(pidGenRule)
			if idParent'="" {
				set enumStatus=$$GetStatus(idParent)
				if enumStatus'=$$$EnumCOMSYSSTATUSApproved {
					set strStatus=$listbuild("IN00608",idParent)  ;To Approve this Price Plan Generator, it's parent %1, must be Approved
				}
			}
		}
	}
	
	$$$YQHandler(strStatus)
	
	quit
	
	
Approve(pidGenRule)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 21-Dec-2006	RPW		Created
	;-------------------------------------------------------------------------------
 	new enumStatus
 	
 	set enumStatus=$$GetStatus(pidGenRule)
	do SetStatus(pidGenRule,$$$EnumCOMSYSSTATUSApproved)
	;Now located in COMChangeHistory
	;do AddEntry^COMAudit(YM,YFORM,$horolog,YBED,pidGenRule,enumStatus_" > "_$$$EnumCOMSYSSTATUSApproved)
	quit
 
 
CanReject(pidGenRule)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 21-Dec-2006	RPW		Created
	;-------------------------------------------------------------------------------
 
	new strStatus,enumStatus
	
	set strStatus=$$$OK
	
	if '$$$NoKey(pidGenRule) {
	
		set enumStatus=$$GetStatus(pidGenRule)
		if (enumStatus'=$$$EnumCOMSYSSTATUSAwaitingReview)&&(enumStatus'=$$$EnumCOMSYSSTATUSApproved) {
			set strStatus="IN00606"  ;To Reject this Price Plan Generator, it must be Approved or Awaiting Review
		}
	}
	
	$$$YQHandler(strStatus)
	
	quit
	
Reject(pidGenRule)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 21-Dec-2006	RPW		Created
	;-------------------------------------------------------------------------------
 
	new strChildren,loop,idChild,enumStatus
	
	set enumStatus=$$GetStatus(pidGenRule)
	do SetStatus(pidGenRule,$$$EnumCOMSYSSTATUSRejected)
	;Now located in COMChangeHistory
	;do AddEntry^COMAudit(YM,YFORM,$horolog,YBED,pidGenRule,enumStatus_" > "_$$$EnumCOMSYSSTATUSRejected)
	
	set strChildren=$$RelatedChildren^INDPPGenRule(pidGenRule)
	
	if strChildren'="" {
		for loop=1:1:($length(strChildren,$$$COMMA)-1) {
			set idChild=$piece(strChildren,$$$COMMA,loop)
			set enumStatus=$$GetStatus(idChild)
			if (enumStatus=$$$EnumCOMSYSSTATUSAwaitingReview) || (enumStatus=$$$EnumCOMSYSSTATUSApproved) {
				do SetStatus(idChild,$$$EnumCOMSYSSTATUSRejected)
				;Now located in COMChangeHistory
				;do AddEntry^COMAudit(YM,YFORM,$horolog,YBED,idChild,pidGenRule_" > "_enumStatus_" > "_$$$EnumCOMSYSSTATUSRejected)
			}
		}
	}
	
	quit
	
	
OnBeforeButtonLine(pidGenRule)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 21-Dec-2006	RPW		Created
	;-------------------------------------------------------------------------------
	new idGenRule,enumStatus
	
	set idGenRule = $$$KEY1(pidGenRule)
	quit:$$$NoKey(idGenRule)
	
	set enumStatus = $$GetStatus(idGenRule)
	
	// Disabled for Awaiting Review, Approved, Used, No Longer Valid
	if (enumStatus>=$$$EnumCOMSYSSTATUSAwaitingReview) &&
	   (enumStatus'=$$$EnumCOMSYSSTATUSRejected)          {
		
		set $$$WWW120AuthorizationToModifyData(YVOR) = $$$EnumReadOnly
	}
	
	quit
]]></Routine>
</Export>