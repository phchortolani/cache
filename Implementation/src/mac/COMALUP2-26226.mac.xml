<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMALUP2" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMALUP2
	#include COMSYS
	#include COMConst
	
	; Example Usage  
	;
	;do Start^COMALUP2(1,1,1,"MEDPatient;VARAlertaLocal;INART;")
	;Comment.  ALUP-DEV not updating.
	new YSESDFV3

Inputs(&pstrFrom,&pstrTo,&pstrMenu)
	new blnResult,strMessage
	
	set blnResult=$$$NO
	read !,"Principle namespace (SESDF-V3 or ALUP-DEV)? ",YSESDFV3
	read !,"Copy from? ",strFrom  ;Normally ALUP-DEV
	if pstrFrom'="" {
		set strMessage="Copy To? (ALUP)"
		write !,strMessage
		read pstrTo
		if pstrTo="" set pstrTo="ALUP"
		read !,"Menu? ",pstrMenu
		if pstrMenu'="" {
			set blnResult=$$$YES
		}	
	}
	quit blnResult

FastBuild()
	; comment to force an bazaar update
	new strNS
	read !,"Build to which namespace? ",strNS
	if strNS'="" {
		do Start(1,,,,,$$$NO,"SESDF-V3",strNS,"AL14")
		do Start(0,,,,,$$$NO,"HEVA",strNS,"VARAL14HEVA")
		do Start(0,,,,,$$$NO,"SESPE",strNS,"VARAL14SESPE")
		do Start(0,,,,,$$$NO,"ALUP-DEV",strNS,"VARAL14ALUPDEV")
	}
	quit

Start(pblnRefresh=$$$NO,pblnReportErrors=$$$NO,pblnFormsFromMenu=$$$YES,pblnCustomisation=$$$YES,plstForms="",pblnAsk=$$$YES,pstrFromA,pstrToA,pstrMenuA)
	new strFrom,strTo,strPath,intErrors,i,strMessage,ARR2,idMenu,strNS,blnInputs

	set strNS=$zu(5)	
	DO DISABLE^%NOJRN
	set intErrors=0
	$$$VAR
	
	if pblnAsk {
		set blnInputs=$$Inputs(.strFrom,.strTo,.strMenu)
	} else {
		set YSESDFV3="SESDF-V3"
		set strFrom=pstrFromA
		set strTo=pstrToA
		set strMenu=pstrMenuA
		set blnInputs=$$$YES
	}
	if blnInputs {
		kill ARR
		kill ARRRETRY
		kill ARRUNCOMPILED
		kill ARRINDEX
		if pblnFormsFromMenu {
			set plstForms=plstForms_";"_$$ListOfFormsFromMenu(strMenu,strNS)
			set plstForms=plstForms_";"_$$ListOfFormsFromMenu("Jasper",strNS)
			set plstForms=plstForms_";"_$$ListOfFormsFromMenu("@nm14",strNS)
		}
		
		if plstForms'="" do Routines1^COMReferences("WWWFORM","",.ARR,plstForms,pblnReportErrors,strFrom)
		set strPath=$$GetPath(strFrom,strTo)
		if pblnRefresh do RefreshDB(strPath,strTo)
		;zn strTo
		$$$JournalOff
		do Globals(strFrom,strTo,pblnRefresh,pblnCustomisation)
		do Classes(strFrom)		
		do Routines(strFrom)
		do CSP(strFrom)
		zn strNS kill ^ARR2(strMenu) merge ^ARR2(strMenu)=ARR2
		
		do ViewsAdd(strFrom)
		if 'pblnRefresh do GlobalsRemove(strFrom,strTo)
		if 'pblnRefresh do ClassesRemove(strTo)
		if 'pblnRefresh do ViewsRemove(strTo)
		if 'pblnRefresh do RoutinesRemove(strFrom,strTo)
		if 'pblnRefresh do CSPRemove(strFrom,strTo)

		zn strNS kill ^ARR2(strMenu) merge ^ARR2(strMenu)=ARR2
		break
		do GlobalsMove(strFrom,strTo)
		do CreateCOMConst(strTo)
		do Generate("VAR")		
		do ClassesMove(strFrom,strTo,.intErrors)
		do RoutinesMove(strFrom,strTo,pblnReportErrors,.intErrors)
		do CSPMove(strFrom,strTo,pblnReportErrors,.intErrors)
		zn strNS kill ^ARR2(strMenu) merge ^ARR2(strMenu)=ARR2
		
		do Setup(strTo,strPath,strNS,strMenu)

		zn strTo
		$$$JournalOff
		if pblnRefresh {
			Do $system.OBJ.CompileAll()
		} else {
			do $system.OBJ.CompileAll("U")
		}
		zn strFrom
		for i=1:1:20 do RetryRoutines(strFrom,strTo,pblnReportErrors,.intErrors)
		zn strFrom
		$$$VAR
		zn strTo
		do ReIndexAll()
		; ## THIS WILL DELETE alSOH.dBundleStock (and others) ##### ;do ConvertAll^COMConversion ;eg maps WWW0121->alLoc.dLocation
		zn strFrom
		do Images(strPath,YSESDFV3,strTo)
		write !,"Errors="_intErrors
		$$$JournalOn
		DO ENABLE^%NOJRN
	}
	zn strNS
	quit

Images(pstrPath,pstrFrom,pstrTo)
	do ImagesCopy(pstrPath,pstrFrom,pstrTo,"logo_",".gif")
	do ImagesCopy(pstrPath,pstrFrom,pstrTo,"logo_externa_",".gif")
	do ImagesCopy(pstrPath,pstrFrom,pstrTo,"logo_parceiro_",".gif")
	do ImagesCopy(pstrPath,pstrFrom,pstrTo,"VARLoginLeft_",".jpg")
	quit

ImagesCopy(pstrPath,pstrFrom,pstrTo,pstrFileName,pstrType)
	if '##class(%Library.File).Exists(pstrPath_"Resources\"_pstrFileName_pstrTo_pstrType) {
		write !,pstrPath_"Resources\"_pstrFileName_pstrTo_pstrType
		w !, ##class(%Library.File).CopyFile(pstrPath_"Resources\"_pstrFileName_pstrFrom_pstrType,pstrPath_"Resources\"_pstrFileName_pstrTo_pstrType)
	}
	quit

CreateCOMConst(pstrFrom)
	; Create a COMConst based on all the available classes.
	; Global and index created directly as proper function of @netManager may not be available yet
	new idClass
	
	
	set idClass="" for { set idClass=$order(^[pstrFrom]WWW001(0,idClass)) quit:idClass=""
		set $piece(^[pstrFrom]COMConst(0,idClass,1),Y,1)=1
		set ^[pstrFrom]COMConsts(0,1,$zcvt(idClass,"U"),idClass)="" 
	}
	quit
	
Setup(pstrTo,pstrPath,pstrNS,pstrMenu)
	;
	; History
	; 10-Sep-2014	shobby	ALPHAUP-177: Changed character set.
	; 10-Sep-2014	shobby	ALPHAUP-231: Get users from ALUP-DEV
	; 29-Aug-2014	shobby	ALPHAUP-72: VARBRDiretorios
	; 17-Jul-2014	shobby	CORE-385: Change requested by Ramalho. Use the menu from SESDF-V3
	;
	new objWWW012
	
	set objWWW012=pstrTo_"~~~~47~8~2~~2~~"_pstrTo_"~125~1~41~47~66~3~1~FRAME2~~~1~2~1~KEY~A~VV~MK1~~~3~~~~~~~~~loira~~7025~~/"_pstrTo_"/~"_pstrPath_"/Resources~/"_pstrTo_"/~/"_pstrTo_"/~/"_pstrTo_"/~"_pstrPath_"/Resources/~~~~~100~100~~~48~~~~~~103~~0~1~~~0~-3~~,~suporte.saudelog@gmail.com~BRR~0~47~~~~~1~~admin@disclinc.com~~~~~~~2~~~~1~~http://www.systranlinks.com/systran/cgi?partner=systran-Abacho-de&ab_cmd=translate&lp=pt_de&urltext=~/"_pstrTo_"/~~~116~~~~~~~~~25~137~69~1~~1~114~~~19~~~~~~~~~~~~~~~~~1~~~~~~~~~~1~116~1~~/"_pstrTo_"/~1~1~~~~~~~~50~1~1~60~1~~~1~~~0~TASC-logo.png~~~~~~~~~~~~~~~~~~~~~75~8~60~8~COMLogin.cls~~FCKeditor~1~~1~~~~~~1~~~~1~"
	set $piece(objWWW012,Y,76)=7 ;UTF-8
	set ^[pstrTo]WWW012(0,0,1)=objWWW012
		
	kill ^[pstrTo]WWW013					;ALPHAUP-231
	kill ^[pstrTo]WWW013s					;ALPHAUP-231
	merge ^[pstrTo]WWW013=^[pstrNS]WWW013	;ALPHAUP-231
	set ^[pstrTo]WWW013(0,"AL14",1)="AL14~^1441,~1~1~0~EN~~~~~~WWW120~555~63333~56694~Your Visit No.: 555,  Last Visit: 26/05/2014, 15:41:00~~~63146,39043~63321,55351~SHOBBYPTMM~~~~~~~~~~~~~~~~~BR~~~~~~5~~~~~~~~~~~~~~~0~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~5~~~~~~~~~~~~~~~~~~~~~CARGADEDADOS~~~~0001~~1~1~~~~~~~~~~~~~~~~~~~~VARMegaSESDF~~~DISCLINCSUPPORT"
	set ^[pstrTo]WWW013(0,"ALUP",1)="UP14~^1441,~1~1~0~EN~~~~~~WWW013~557~63349~40315~Your Visit No.: 557,  Last Visit: 11/06/2014, 09:53:25~~~63146,39043~63321,55351~SHOBBYPTMM~~~~~~~~~~~~~~~~~BR~~~~~~5~~~~~~~~~~~~~~~0~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~5~~~~~~~~~~~~~~~~~~~~~CARGADEDADOS~~~~0001~~1~1~~~~~~~~~~~~~~~~~~~~VARMegaSESDF~~~DISCLINCSUPPORT"
	set ^[pstrTo]WWW013(0,"ALUPMM",1)="UP14~^1441,~1~1~0~EN~~~~~13~~560~63349~31382~Your Visit No.: 560,  Last Visit: 03/06/2014, 04:16:17~~~63146,39043~63341,15104~ALUP~~~~~~~~~~~~~~~~~BR~~~~~~~~~~~~~~~~~~~~~0~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~5~~~~~~~~~~~~~~~~~~~~~CARGADEDADOS~~~~0001~~1~1~~~~~~~~~~~~~~~~~~2~1~AL14~~~DISCLINCSUPPORT"
	set ^[pstrTo]WWW013(0,"DEMO",1)="Demonstração Alphalinc~^1441,1450,1459,~1~~0~PT~~~demo@tasc.com.br~~13~WWW013~5~63349~79912~Your Visit No.: 5,  Last Visit: 11/06/2014, 17:34:49~~~63349,61730~63349,61744~RAMALHO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~0~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~RAMALHO~~~~~~~~~~~~~~~~~~~~~~~~~~~AL14~~~DEMO"
	set ^[pstrTo]WWW013(0,"RAMALHO",1)="Francisco Ramalho~^11044,1873,1963,1909,1999,1918,1918,~1~~0~PT~~~ramalho@axis.com.br~~13~WWWBLANK~18~63349~63241~Your Visit No.: 18,  Last Visit: 11/06/2014, 17:30:16~~~63349,40943~63349,61157~RAMALHO~~1~Ramalho~Francisco~~~~~~~(11) 99102-8771~~~~~~~~~~~~~~~~~1~~~~~~~~~~0~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ALUP~~~~~~~~~~~AL14~~~~~~~~~~~~~~~~AL14~~~RAMALHO"
	set ^[pstrTo]WWW013(0,"SHOBBYPTMM",1)="Stephen Hobby~~1~1~0~PT~~~~~13~~560~63349~31382~Your Visit No.: 560,  Last Visit: 03/06/2014, 04:16:17~~~63146,39043~63341,15104~ALUP~~~~~~~~~~~~~~~~~BR~~~~~~~~~~~~~~~~~~~~~0~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~1;5;5006~~~~~~~~~~~~~~~~~~~~~CARGADEDADOS~~~~0001~~1~1~~~~~~~~~~~~~~~~~~2~1~AL14~~~DISCLINCSUPPORT"
	
	set ^[pstrTo]VARJasper(0,0,1)=$translate(pstrPath,"\","/")_"Reports/~/"_pstrTo_"/servlet/~192.168.200.6~8080~127.0.0.1~8080~localhost/"_pstrTo_"/"
	set ^[pstrTo]VARBRDiretorios(0,0,1)="D:\Alphalinc\"_pstrTo_"\Documentos~Pasta principal para Imagens e Documentos~Documentos~"
	
	kill ^[pstrTo]WWW004(0,pstrMenu)
	merge ^[pstrTo]WWW004(0,pstrMenu)=^[pstrNS]WWW004(0,pstrMenu)
	
	merge ^[pstrTo]VARPARA(0,"TIPOESTOQUEJUDICIAL")=^["HEVA"]VARPARA(0,"TIPOESTOQUEJUDICIAL")
	set ^[pstrTo]SysSetup("ContextMenu")=1
	;do Menu(pstrTo)
	quit
	
RefreshDB(pstrPath,pstrTo)
	new db,strNS
	
	set strNS=$zu(5)
	zn "%SYS"
	
	write !,"Mounting New Database. "
	set pstrPath=##class(%File).NormalizeDirectory(pstrPath_"\database\")

	set db=##class(SYS.Database).%OpenId(pstrPath)
	if db'=$$$NULLOREF {
		if $$$ISOK(db.Dismount()) {
			do ##class(%File).Delete(pstrPath_"CACHE.DAT")
			do ##class(%File).CopyFile(pstrPath_"CACHE.DAT_CLEAN",pstrPath_"CACHE.DAT")
			do db.Mount()
		}
		do db.%Close()
	}
	kill db
	zn strNS
	write "Done."
	quit
	
	
	
GetPath(pstrFrom,pstrTo)
	new strPath
	
	set strPath=$piece(##class(%SYS.Namespace).GetGlobalDest(pstrFrom),"^",2)
	set strPath=$zconvert(strPath,"L")
	set strPath=$replace(strPath,$zconvert(pstrFrom,"L"),$zconvert(pstrTo,"L"))
	set strPath=$replace(strPath,"\database","")
	quit strPath

Globals(pstrFrom="",pstrTo,pblnRefresh=$$$YES,pblnCustomisation=$$$NO)
	; 02-Sep-2014	shobby	ALPHAUP-113: MEDPatient must come from HEVA
	new objResultSet,sc,strName,blnContinue,idKey,idKey2,idKey3,lstGlobals,obj,blnRefresh
	new strNS
	
	set strNS=$zu(5)
	if pstrFrom'="" zn pstrFrom
	
	write !
	set lstGlobals=##class(SourceControl.data.global.NetManagerAll).GetAllGlobals()
	set objResultSet = ##class(%ResultSet).%New("%SYS.GlobalQuery:NameSpaceList")
	set sc = objResultSet.Execute(pstrFrom,"",0)
	if $$$ISOK(sc) {
		while objResultSet.Next() {
			set strName=objResultSet.GetData(1)
			write !,strName
			;if strName="FINAPInvMatchCache" break
			set blnContinue=$$$NO
			if $listfind(lstGlobals,"^"_strName)'=0 set blnContinue=$$$YES
			; The following should be included by modifying SourceControl
			if strName="WWWFORMHOTKEY" set blnContinue=$$$YES
			if strName="WWWFORMHOTKEYD" set blnContinue=$$$YES
			if strName="WWWEP" set blnContinue=$$$YES
			;------------------------------------------------------------
			if 'pblnCustomisation continue:$$IsCustomisation(strName)
			if '$$IsExcluded(strName,"Global",pstrFrom) set blnContinue=$$$YES
			if blnContinue {
				write $char(13)="                                                              "
				write $char(13)_"Merging "_strName
				set ARR2("View",strName)=""
				if ";WWW001;WWW001B;WWW0011;WWW0013;WWW0021;WWW0022;WWW002;WWW003;WWW0031;WWW0032;WWW001Hook;WWW003Calc;WWW003CalcLang;COMConst;WWW120;WWW1201;WWW1203;WWW121;WWW1210;WWW1211;WWW122;WWW1221;WWW123;WWW1231;WWW1232;WWW124;WWW1251;WWW129;WWW1291;WWW131;WWW132;WWW133;WWWDRAGDROP;WWWDRAGDROPD;WWW120DynTable;WWW120DynTableLine;WWW127;WWW122C2;COMGridEditParameter;WWW120Hook"[(";"_strName_";") {
					set idKey="" for { 
						xecute "set idKey=$order(^"_strName_"(0,idKey))"
						quit:idKey=""
						continue:($$IsExcluded(idKey,"Global",pstrFrom)&&$$IsExcluded(idKey,"Form",pstrFrom))
						continue:(idKey="COMINTQUESTMF")		;Generates some test data for POS application
						continue:(idKey="COMINTQUESTTRANS")		;Generates some test data for POS application
						continue:(idKey="WWWTESTSTART")			;Unused screen that tests routines.
						set blnRefresh=pblnRefresh
						if 'blnRefresh xecute "set blnRefresh='$data(^["""_pstrTo_"""]"_strName_"(0,idKey))"
						if blnRefresh {
							set ARR2("Global",strName_"(0,"""_idKey_""")")=""
						}
					}
				} elseif "WWW002D;WWW003D;WWW001VARHooks;COMView;COMViewColumn;COMViewFilter;COMViewLang;COMViewD;WWW120D;WWW1203D;WWW121D;WWW121D1;WWW122D;WWW122D1;WWW122D2;WWW124D;WWW124;COMHelpButton;WWW120VARHook"[(";"_strName_";") {
					if pblnCustomisation {
						if strName="WWW001VARHooks" {
							set idKey="" for { 
								xecute "set idKey=$order(^"_strName_"(0,idKey))"
								quit:idKey=""
								continue:$$IsExcluded(idKey,"Global",pstrFrom)
								set idKey2="" for {
								xecute "set idKey2=$order(^"_strName_"(0,idKey,idKey2))"
									quit:idKey2=""
									xecute "set obj=^"_strName_"(0,idKey,idKey2,1)"
									if $extract(obj,1,31)'="##class(SourceControl.Exporter)" {
										set blnRefresh=pblnRefresh
										if 'blnRefresh xecute "set blnRefresh='$data(^["""_pstrTo_"""]"_strName_"(0,idKey,idKey2))"
										if blnRefresh {
											set ARR2("Global",strName_"(0,"""_idKey_""","""_idKey2_""")")=""
										}
									}
								}
							}
						} else {
							set idKey="" for { 
								xecute "set idKey=$order(^"_strName_"(0,idKey))"
								quit:idKey=""
								continue:$$IsExcluded(idKey,"Global",pstrFrom)
								continue:(idKey="COMINTQUESTMF")		;Generates some test data for POS application
								continue:(idKey="COMINTQUESTTRANS")		;Generates some test data for POS application
								continue:(idKey="WWWTESTSTART")			;Unused screen that tests routines.
								set blnRefresh=pblnRefresh
								if 'blnRefresh xecute "set blnRefresh='$data(^["""_pstrTo_"""]"_strName_"(0,idKey))"
								if blnRefresh {
									set ARR2("Global",strName_"(0,"""_idKey_""")")=""
								}
							}
						}
					}
				} else {
					if $data(^WWW001(0,strName,1)) {
						if $$$WWW001ClassType($get(^WWW001(0,strName,1)))'=1 { ; Exclude logging data.
							do RefreshGlobals(strName,pstrTo,pblnRefresh)
					;		if 'blnRefresh xecute "set blnRefresh='$data(^["""_pstrTo_"""]"_strName_")"
					;		if blnRefresh {
					;			set ARR2("Global",strName)=""
					;		}
						}
					}
				}
			}
		}
	}
	zn strNS
	quit sc

RefreshGlobals(pstrName,pstrTo,pblnRefresh)
	new intNumKeys,idKey1,idKey2,idKey3
	
	set intNumKeys=$order(^WWW001(0,pstrName,""),-1)
	
	if intNumKeys>3 {
		break
	} elseif intNumKeys=3 {
		set idKey1="" for { xecute "set idKey1=$order(^"_pstrName_"(0,idKey1))" quit:idKey1=""
			set idKey2="" for { xecute "set idKey2=$order(^"_strName_"(0,idKey1,idKey2))" quit:idKey2=""
				set idKey3="" for { xecute "set idKey3=$order(^"_strName_"(0,idKey1,idKey2,idKey3))" quit:idKey3=""
					if 'pblnRefresh xecute "set pblnRefresh='$data(^["""_pstrTo_"""]"_strName_"(0,idKey1,idKey2,idKey3))"
					if pblnRefresh set ARR2("Global",strName_"(0,"""_idKey1_""","""_idKey2_""","""_idKey3_""")")=""
				}
			}
		}
	} elseif intNumKeys=2 {
		set idKey1="" for { xecute "set idKey1=$order(^"_pstrName_"(0,idKey1))" quit:idKey1=""
			set idKey2="" for { xecute "set idKey2=$order(^"_strName_"(0,idKey1,idKey2))" quit:idKey2=""
				if 'pblnRefresh xecute "set pblnRefresh='$data(^["""_pstrTo_"""]"_strName_"(0,idKey,idKey2))"
				if pblnRefresh set ARR2("Global",strName_"(0,"""_idKey1_""","""_idKey2_""")")=""
			}
		}
	} elseif intNumKeys=1 {
		if 'pblnRefresh xecute "set pblnRefresh='$data(^["""_pstrTo_"""]"_strName_")"
		if pblnRefresh set ARR2("Global",strName)=""
	}
	
	quit
	
GlobalsRemove(pstrFrom,pstrTo)
	new strName,strGlobal
	
	set strName="" for { set strName=$order(ARR2("Global",strName)) quit:strName=""
		; Remove Globals that already exist in target namespace
		set strGlobal="^["""_pstrTo_"""]"_strName
		set blnContinue = $data(@strGlobal)
		if blnContinue kill ARR2("Global",strName)
		
		; Remove Globals that are empty in source namespace
		set strGlobal="^["""_pstrFrom_"""]"_strName
		set blnContinue = '$data(@strGlobal)
		if blnContinue kill ARR2("Global",strName)
	}
	
	; To allow VAR routines to compile we need a merged version of VARConst.INC
	; to achieve this a merged version of ^COMConst is required so this is always transferred.
	set ARR2("Global","COMConst")=""
	
	quit

GlobalsMove(pstrFrom,pstrTo)
	new strName,strCommand
	
	set strName="" for { set strName=$order(ARR2("Global",strName)) quit:strName=""
		write !,"Moving "_strName
		set strCommand="merge ^["""_pstrTo_"""]"_strName_"=^["""_pstrFrom_"""]"_strName
		xecute strCommand
		set ARRINDEX($piece(strName,"(",1))=""
	}
	quit
	
	
IsExcluded(pid,pstrType,pstrFrom)
	;----------------------------------------------------------------------------------------------------
	; History
	; 02-Sep-2014	shobby	ALPHAUP-113: MEDPatient must come from HEVA
	;----------------------------------------------------------------------------------------------------
	new blnExcluded,arrGlobals,idNS
	
	set blnExcluded=$$$YES
	if $extract(pid,1,3)="COM" {							set blnExcluded=$$$NO
	} elseif $extract(pid,1,3)="WWW" {						set blnExcluded=$$$NO
	} elseif $data(ARR(pstrType,pid)) {						set blnExcluded=$$$NO
		if $extract(pid,1,2)="IN" {
		} elseif $extract(pid,1,3)="MED" {
		} elseif $extract(pid,1,3)="VAR" {
		} elseif (pid="FINAPInvMatchCache") {
		} elseif (pid="FINAPInvDCM") {
		} else {
			set blnExcluded=$$$YES
		}
	}
	if 'blnExcluded {
		if $extract(pid,1,6)="COMDCM" { 						set blnExcluded=$$$YES
		} elseif $extract(pid,1,6)="INCALL" { 					set blnExcluded=$$$YES
		} elseif $extract(pid,1,9)="CacheTemp" { 				set blnExcluded=$$$YES
		} elseif $extract(pid)= $zcvt($extract(pid),"L") { 		set blnExcluded=$$$YES
		} ;elseif $extract(pid
	}

	if 'blnExcluded {
		if (pstrType="Form")||(pstrType="Global") {
			set arrGlobals(YSESDFV3)=	",INRECLine,INRECSummary," ;ALPHAUP-214
			set arrGlobals("HEVA")	=	",VARDoseAprazamento,INDispenseToPatient,VARAdmMedicamentosa,VARDispensacaoViaPrescricao"_
										",VARListaTrabalhoEnfermagem,MEDPrescriptionDispense,MEDDispense,MEDAdmission,MEDAdmissionHistory"_
										",MEDAuthorize,MEDDispAsIssue,MEDDispenseIssue,MEDDispenseLine,MEDDispenseMan,MEDDispenseManPickLine"_
										",MEDDispensePickLine,MEDDrugInteraction,MEDFrequency,MEDICD,MEDInfuseTime,MEDPatient,MEDPresAsIssue"_
										",MEDPresDispLine,MEDPrescription,MEDPrescriptionHosp,MEDPrescriptionHospLine,MEDPrescriptionIssue"_
										",MEDPrescriptionLine,MEDPrescriptionPat,MEDPrescriptionSetup,MEDPrescriptionSol,MEDPrescriptionSolHead"_
										",MEDPrescriptionSolLine,MEDPrescriptonHosp,MEDProvider,VARListaTrabalhoFarmacotecnica,VARFarmacotecnicaLista"_
										",VARDoseAprazamento,VARDesempAtendPresc,VARDispensacaoViaPrescricao,VARFechamentoContabil"_
										",VARLivroRegInventario,VAREntradaNotaFiscal,VARMapaMovMensal,VARMapaMovProduto,VAREntradaDevolucao"_
										",VARSaidaRequisicao,VARContabilNotaFiscal,VARContabilInventario,VARContabilTransferencia"_
										",VARConsumoProdutosTrimestreContabil,VARConsGrupoEstocagem,VARConsCentroCusto,VARResumoMovMensal"_
										",VARMonitoramentoEstoquePainel,VARPreAlertaRede,VARPreAlertaLocal,VARConsultaGerencialProduto,VARReposicao"_
										",VARReposicaoLocal,VARReposicaoProduto,VARReposicaoLocalProduto,VARAlertaCMMLi,VARHistoricoDevolucoes"_
										",VARHistInteracoesMedicamentosas,VARHistoricoEstorno,VARPreAlertaRede,VARCompareQrCodes,VARConfigImpEtiqueta,VARNCM,"_
										",INDispenseToPatient,INMO,MEDAdmission,MEDAuthorize,MEDDispense,MEDFrequency,MEDPatient,MEDPrescription"_
										",MEDPrescriptionDispense,MEDPrescriptionHosp,MEDPrescriptionIssue,MEDPrescriptionPat,MEDPrescriptionSetup"_
										",MEDProvider,VARAdmMedicamentosa,VARAlertaCMMLi,VARCompareQrCodes,VARConfigImpEtiqueta,VARConsCentroCusto"_
										",VARConsGrupoEstocagem,VARConsultaGerencialProduto,VARConsultaOrdemUnitarizacao"_
										",VARConsumoProdutosTrimestreContabil,VARContabilInventario,VARContabilNotaFiscal,VARContabilTransferencia"_
										",VARDashboardFracionamento,VARDesempAtendPresc,VARDispensacaoViaPrescricao,VARDoseAprazamento"_
										",VAREntradaDevolucao,VAREntradaNotaFiscal,VARFarmacovigilancia,VARFechamentoContabil"_
										",VARHistAtendimentoPaciente,VARHistInteracoesMedicamentosas,VARHistoricoConsumoDetalhe,VARHistoricoDevolucoes"_
										",VARHistoricoEstorno,VARListaTrabalhoEnfermagem,VARListaTrabalhoFarmacotecnica,VARListaTrabalhoKit"_
										",VARListaTrabalhoUnit,VARLivroRegInventario,VARMapaMovMensal,VARMapaMovProduto,VARMEDDispenseMan"_
										",VARMonitoramentoEstoquePainel,VARNCM,VAROrdemUnitarizacao,VAROrdemUnitarizacaoManual,VARPacienteEtq"_
										",VARPreAlertaLocal,VARPreAlertaRede,VARProducaoFracionamento,VARRelatorioPacientesAtendidos,VARReposicao"_
										",VARReposicaoLocal,VARReposicaoLocalProduto,VARReposicaoProduto,VARResumoMovMensal,VARSaidaRequisicao,"
			set arrGlobals("SESPE")=	",VAREnderecos,VARTCIModulo,VARGerarTSU,VARPalletStatus,VARProdutosAguardEndereco,INBESTNULL"_
										",VARWMSVisualizaLocal,WWW013,VARMOVMensalContabil,VARStockByProgram,VARPreAlertaPrograma"_
										",VARMonitoramentoPrograma,VARReposicaoPrograma,VARReposicaoProgramaLocal,VARAceiteInformaEntrega"_
										",VARHistoricoConsumo,VARAtaCompra,VARDUCEtq,VARABC,VARAlertaLocal,VARAlertaLocalConfig"_
										",VARVolumeEstoque,VARVolumeEstoqueDemo,VARVolumeEstoqueLocal,VARVolumeEstoqueProduto,"_
										",INBESTNULL,VARABC,VARAceiteInformaEntrega,VARAlertaLocal,VARAlertaLocalConfig,VARAtaCompra,VARDUCEtq"_
										",VAREnderecos,VARGerarTSU,VARHistoricoConsumo,VARMonitoramentoPrograma,VARMovMensalContabil"_
										",VARPalletStatus,VARPreAlertaPrograma,VARProdutosAguardEndereco,VARReposicaoPrograma,VARReposicaoProgramaLocal"_
										",VARStockByProgram,VARTCIModulo,VARVolumeEstoque,VARWMSVisualizaLocal,WWW013,"
			set arrGlobals("ALUP-DEV")= ",VARParametroCliente,"

			set idNS="" for { set idNS=$order(arrGlobals(idNS)) quit:idNS=""
				set blnExcluded=((idNS'=pstrFrom)&&($find(arrGlobals(idNS),(","_pid_","))))
				quit:blnExcluded
			}
			if ('blnExcluded)&&(pstrFrom'=YSESDFV3) {
				if '$find(arrGlobals(pstrFrom),(","_pid_",")) {
					if (pstrType="Form")&&($data(^[YSESDFV3]WWW120(0,pid))) {
						set blnExcluded=$$$YES
					} elseif (pstrType="Global")&&($data(^[YSESDFV3]WWW101(0,pid))) {
						set blnExcluded=$$$YES
					}
				}
			}
		}
	}

	quit blnExcluded

IsCustomisation(pid)
	quit $$$WWW001ClassType($get(^WWW001(0,pid,1)))=10

CSP(pstrFrom="")
	merge ARR2("CSP")=ARR("CSP")
	quit
	
Routines(pstrFrom="")
	new objResultSet,strName,idRoutine,idSuffix,blnContinue,strType,strName2,strNS
	
	set strNS=$zu(5) 
	if pstrFrom'="" zn pstrFrom
	
	for strType="*.INC","*.MAC" {
		set objResultSet = ##class(%ResultSet).%New("%Library.Routine:RoutineList")
		if objResultSet'=$$$NULLOREF {
			if $$$ISOK(objResultSet.Execute(strType,0,0)) {
				for {
					quit:'objResultSet.Next()
					set strName = objResultSet.Data("Name")
					set strName2=$piece(strName,".",1)
					continue:$extract(strName2,1,6)="COMPIT"
					continue:strName2="COMExcel"
					continue:strName2="COMHCV1"
					continue:strName2="COMReferences"
					continue:strName2="COMServe"
					continue:strName2="COMTest2" ;Creates DEMO data.  Move to another module.
					continue:$extract(strName2,1,10)="COMDistOut" 		;Creates upgrade package, superceded by ASDE
					continue:$extract(strName2,1,11)="COMVARBuild" 		;Creates upgrade package, superceded by ASDE
					continue:$extract(strName2,1,6)="COMUPG" 			;Creates upgrade import, superceded by ASDE
					continue:$extract(strName2,1,14)="WWWCoreChanges" 	;Creates upgrade import, superceded by ASDE
					continue:$extract(strName2,1,11)="COMINTQuest" 		;Generates some test data for POS application
					continue:$extract(strName2,1,6)="COMPL1" 			;Creates upgrade package, superceded by ASDE
					continue:$extract(strName2,1,13)="COMPreUpgrade" 	;Creates upgrade package, superceded by ASDE
					continue:$extract(strName2,1,9)="WWWRECORD" 		;Does anyone use this?
					continue:$extract(strName2,1,12)="WWWTESTSTART" 	;Unused screen that tests routines.
					continue:$extract(strName2,1,6)="COMDCM"			;Noone using DCM at the moment?
					continue:$extract(strName2,1,6)="INCALL"			;Noone using INCALL at the moment?
					continue:($piece(strName,".",$length(strName,".")-1,$length(strName,"."))="T1.MAC")
					continue:($piece(strName,".",$length(strName,".")-1,$length(strName,"."))="T2.MAC")
					continue:($piece(strName,".",$length(strName,".")-1,$length(strName,"."))="T3.MAC")
					continue:($piece(strName,".",$length(strName,".")-1,$length(strName,"."))="T4.MAC")
					continue:($piece(strName,".",$length(strName,".")-1,$length(strName,"."))="T5.MAC")
					continue:($piece(strName,".",$length(strName,".")-1,$length(strName,"."))="T6.MAC")
					continue:($piece(strName,".",$length(strName,".")-1,$length(strName,"."))="T7.MAC")
					
					set blnContinue=$$$NO				
					if $extract(strName,1,4)="idx." {
						if (($piece(strName,".",2)="COM")||($piece(strName,".",2)="WWW"))&&($extract(strName,8)'=".") {
							set blnContinue=$$$YES
						}
					} elseif $extract(strName,1,3)="COM" {
						;if $extract(strName,4)'="." {
							set blnContinue=$$$YES
						;}
					} elseif $extract(strName,1,3)="WWW" {
						if $extract(strName,4)'="." {
							set blnContinue=$$$YES
						}
					} elseif $data(ARR("Routine",$piece(strName,".",1,$length(strName,".")-1))) {
						set blnContinue=$$$YES
					} elseif (strType="*.INC")&&($data(ARR("INC",$piece(strName,".",1,$length(strName,".")-1)))){
						; include relevant INC files
						set blnContinue=$$$YES
					}
					if blnContinue set ARR2("Routine",strName)=""
				}
			}
		}
	}
	if pstrFrom'="" zn strNS
	quit

CSPRemove(pstrFrom,pstrTo)
	new strName,strNS
	
	set strNS=$zu(5)
	
	zn pstrTo
	set strName="" for { set strName=$order(ARR2("CSP",strName)) quit:strName=""
		if ##class(%CSP.Routine).Exists("csp/"_pstrTo_"/"_strName) {
			kill ARR2("CSP",strName)
		}
	}	
	zn pstrTo
	set strName="" for { set strName=$order(ARR2("CSP",strName)) quit:strName=""
		if '##class(%CSP.Routine).Exists("csp/"_pstrTo_"/"_strName) {
			kill ARR2("CSP",strName)
		}
	}	
	zn strNS
	quit

RoutinesRemove(pstrFrom,pstrTo)
	new strType,idRoutine,arrRoutines,strShortName,blnContinue,idNS

	set blnContinue=$$$NO
	
	set arrRoutines(YSESDFV3)=  ",VARAtaLinha,VARCompra,VARCompraEntrega,VARCompraEntregaAgendamento,VARCompraLinha,VARFornecedorOcorrencia"_
								",VARINART,VARINAUFPCLOSE"_
								",VARINIssue,VARINLIEF,VARINRECSummary,VARINReceipt,VARINReq,VARINReqIssue,VARINTFR,VARINWEINVD,VARJasperRunReport"_
								",VARJasperRunReportContinuacao,VARMEDProvider"_
								",VARPedidoCompra,VARPedidoCompraEntrega,VARPedidoCompraHistorico,VARPedidoCompraLinha,VARSESCONSUMOPACIENTE"_
								",VARSESJasperRunReport,VARSQL,VARTCIReq,"
	set arrRoutines("HEVA")=	",VARAlertaLinha,VARINARTT1,VARINDispenseToPatient,VARINMO,VARMEDAuthorize,VARMEDPatient,VARMEDPrescription"_
								",VARProdutoEtq,VARReposicao,VARReposicaoForm,VARTCIJasperRunReport,VARTCIWWW013"_
								",VARMEDAdmission,VARMEDAuthorize,VARMEDDispense,VARMEDDispenseMan,VARMEDDispenseManPickLine"_
								",VARMEDDispenseManPickLineScan,VARMEDDispenseManTable,VARMEDDrugInteraction,VARMEDPatient,VARMEDPrescription"_
								",VARMEDPrescriptionLine,VARMEDPresDispLine,VARMEDProvider,VARFarmacovigilancia,VARAdmMedicamentosa"_
								",VARAdmMedicamentosaSelecionar,VARDispensacaoViaPrescricao,VARDispensacaoViaPrescricaoLinha,VARDose"_
								",VARDoseAdministracao,VARDoseAprazamento,VARDoseConfirma,VARINDispenseToPatient,VARINDispenseToPatientJS"_
								",VARINDispenseToPatientLine,VARINMO,VARINMOExecuteToCheckForDisabled,VARINMOIssue,VARINMORev,VARINMOV"_
								",VARListaTrabalhoEnfermagem,VARListaTrabalhoFarmacotecnica,VARListaTrabalhoFarmacotecnicaSQL,VARListaTrabalhoKit"_
								",VARListaTrabalhoUnit,VARManipulacaoMagistral,VARManipulacaoMagistralLine,VARManipulacaoMagistralLineScan"_
								",VARManipulacaoMagistralOBDA,VARManipulacaoMagistralOBSQL,VARManipulacaoMagistralProcess"_
								",VARManipulacaoMagistralTable,VAROrdemUnitarizacao,VAROrdemUnitarizacaoEtapa,VAROrdemUnitarizacaoManual"_
								",VARPaciente,VARPacienteAutorizacao,VARPacienteEtq,VARProducaoFracionamento,VARProdutoEtq,VARProdutoEtqImprimir"_
								",VARProdutoManipulado,"
	set arrRoutines("SESPE")=	",VARINTRNShip,VARPerfilModelo"_
								",VARVolumeEstoque,VARVolumeEstoqueDemo,VARVolumeEstoqueLocal,VARVolumeEstoqueProduto,"
	set arrRoutines("ALUP-DEV")=",VARParametroCliente,"

	set idRoutine="" for { set idRoutine=$order(ARR2("Routine",idRoutine)) quit:idRoutine=""
		set strType=$zcvt(idRoutine,"L")
		set strType= $extract(strType,$length(strType)-3,$length(strType))
		set strShortName=$piece(idRoutine,".",1,$length(idRoutine,".")-1)
		;if strShortName["VARINDispenseToPatient" break
		if strType=".inc" {
			set blnContinue=$data(^[pstrTo]rINC(strShortName))	
		} else {
			set blnContinue=$data(^[pstrTo]rMAC(strShortName))
		}
		if 'blnContinue {
			set idNS="" for { set idNS=$order(arrRoutines(idNS)) quit:idNS=""
				continue:idNS=pstrFrom
				if $find(arrRoutines(idNS),(","_strShortName_",")) {
					set blnContinue=$$$YES
					quit
				}
			}
		}
		;xxxxxx if blnContinue set blnContinue='$find(arrRoutines(pstrFrom),(","_strShortName_","))
		
		if blnContinue kill ARR2("Routine",idRoutine)
		;if $data(^[pstrTo]rMAC(strShortName)) kill ARR2("Routine",idRoutine)
	}
	if pstrFrom="HEVA" set ARR2("Routine","VARMEDPatient.MAC")="" ;Temporary.  MEDPatient is not in VARAL14HEVA menu
	quit blnContinue


CSPMove(pstrFrom,pstrTo,&pintErrors,pblnRefresh)
	new strName,obj

	
	set strName="" for { set strName=$order(ARR2("CSP",strName)) quit:strName=""
		do Do(pstrFrom,pstrTo,strName,$$$YES,$$$NO,.pintErrors)
		;if strName["VARFlexible" break
		zn pstrTo
		set obj=##class(%CSP.Routine).%New("csp/"_pstrTo_"/"_strName)
		if obj'="" do obj.Compile(1)
		zn pstrFrom
	}
	
	quit
	
	
RoutinesMove(pstrFrom,pstrTo,&pintErrors,pblnRefresh)
	new strName,strType
	
	for strType=".INC",".MAC" {
		set strName="" for { set strName=$order(ARR2("Routine",strName)) quit:strName=""
			if $zconvert($extract(strName,$length(strName)-3,$length(strName)),"U")=strType {
				do Do(pstrFrom,pstrTo,strName,$$$YES,$$$NO,.pintErrors)
			}
		}
	}
	quit

RetryRoutines(pstrFrom,pstrTo,pblnReportErrors=$$$NO,&pintErrors)
	; Some routines may fail to compile because the User.* class has not yet been compiled. eg COMQuickSearch.mac
	new idRoutine
	
	set idRoutine="" for { set idRoutine=$order(ARRRETRY(idRoutine)) quit:idRoutine=""
		set pintErrors=pintErrors-1
		kill ARRUNCOMPILED
		do Do(pstrFrom,pstrTo,idRoutine,$$$YES,pblnReportErrors,.pintErrors)
		merge ARRUNCOMPILED=ARRRETRY
	}
	quit

Classes(pstrFrom="")
	new objResultSet,strName,blnContinue,strNS

	set strNS=$zu(5)
	if pstrFrom'="" zn pstrFrom
		
	set objResultSet = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
	if objResultSet'=$$$NULLOREF {
		if $$$ISOK(objResultSet.Execute()) {
			for {
				quit:'objResultSet.Next()
				set strName = objResultSet.Data("Name")
				set blnContinue=$$$NO
				continue:$extract(strName,1)="%"
				continue:$piece(strName,".",1)="Report"
				continue:($piece(strName,".",1)="VAR")&&('$data(ARR("Class",strName)))
				continue:$extract(strName,1,11)="User.INCALL"
				if $extract($piece(strName,".",2),1,3)="COM" 		{ set blnContinue=$$$YES
				} elseif $extract($piece(strName,".",2),1,3)="WWW" 	{ set blnContinue=$$$YES
				} elseif $extract($piece(strName,".",1),1,3)="COM" 	{ set blnContinue=$$$YES
				} elseif $extract($piece(strName,".",1),1,3)="WWW" 	{ set blnContinue=$$$YES
				} elseif strName="User.www" 						{ set blnContinue=$$$YES
				} elseif strName="User.COMUserPreferences"			{ set blnContinue=$$$YES
				} elseif strName="COM.COMViewToExcel" 				{ set blnContinue=$$$YES
				} elseif strName="COM.FCKeditor" 					{ set blnContinue=$$$YES
				} elseif strName="WWW.DiscDate" 					{ set blnContinue=$$$YES
				} elseif strName="WWW.DiscTimestamp" 				{ set blnContinue=$$$YES
				} elseif strName="User.COMLogin"					{ set blnContinue=$$$YES
				} elseif strName="Common.Dump"						{ set blnContinue=$$$YES
				} elseif strName="Common.SourceLogging"				{ set blnContinue=$$$YES
				} elseif strName="Common.SourceLogging1"			{ set blnContinue=$$$YES
				} elseif $data(ARR("Class",strName))				{ set blnContinue=$$$YES
				} elseif ($extract(strName,1,5)="User.")&&($data(ARR("Global",$piece(strName,".",2))))		{ set blnContinue=$$$YES
				}
				if blnContinue set ARR2("Class",strName)=""
			}
		}
	}
	if pstrFrom'="" zn strNS
	quit

ClassesRemove(pstrTo)
	new strName,strNS,blnKill,ARR
	
	set strNS=$zu(5)
	zn pstrTo
	
	set strName="" for { set strName=$order(ARR2("Class",strName)) quit:strName=""
		if ##class(%Dictionary.ClassDefinition).%ExistsId(strName) {
			kill ARR2("Class",strName)
		}
	}	
	zn strNS
	quit

ViewsRemove(pstrTo)
	new strName,strNS,blnKill,ARR
	
	set strNS=$zu(5)
	
	set strName="" for { set strName=$order(ARR2("View",strName)) quit:strName=""
		if '##class(%Dictionary.ClassDefinition).%ExistsId("Report."_strName)&&'##class(%Dictionary.ClassDefinition).%ExistsId("Report."_strName) {
			kill ARR2("View",strName)
		}
	}	

	zn pstrTo
	
	set strName="" for { set strName=$order(ARR2("View",strName)) quit:strName=""
		if ##class(%Dictionary.ClassDefinition).%ExistsId("Report."_strNam]]><![CDATA[e)||##class(%Dictionary.ClassDefinition).%ExistsId("Report."_strName) {
			kill ARR2("View",strName)
		}
	}	
	zn strNS
	quit

ViewsAdd(pstrNS="")
	new strName,strNS
	
	set strNS=$zu(5)
	if pstrNS'="" zn pstrNS
	
	set strName="" for { set strName=$order(ARR2("Global",strName)) quit:strName=""
		set ARR2("View",strName)=""
	}
	set ARR2("View","VARCompra")=""
	set ARR2("View","VARConsultaPrevisaoEntregas")=""
	set ARR2("View","VARContrato")=""
	set ARR2("View","VAREstoqueConsEndereco")=""
	set ARR2("View","VARGuiaRemessaNF")="" 
	set ARR2("View","VARHistAtendimentoPaciente")=""
	set ARR2("View","VARHistoricoPrecoCompra")=""
	set ARR2("View","VARMapaMovMensal")=""
	set ARR2("View","VARNadaConsta")=""
	set ARR2("View","VARPedidoCompra")=""
	set ARR2("View","VARPosicaoEstoque")="" 
	set ARR2("View","VARREME")=""
	set ARR2("View","VARSESAjusteDeEstoque")=""
	set ARR2("View","VARSESCONSUMOPACIENTE")=""
	set ARR2("View","VARSESEntrada")=""
	set ARR2("View","VARSESEstornoRecebimento")=""
	set ARR2("View","VARSESHistAtendimentoPaciente")="" 
	set ARR2("View","VARSESSolicRegPreco")=""
	set ARR2("View","VARSESSolTransf")=""
	set ARR2("View","VARSESUltimosPrecos")=""
	set ARR2("View","WWW013")=""
	set ARR2("View","VARSESPrevisaoAtendimento")="" 
	
	set strName="" for { set strName=$order(ARR2("View",strName)) quit:strName=""
		if ##class(%Dictionary.ClassDefinition).%ExistsId("Report."_strName) {
			set ARR2("Class","Report."_strName)=""
		}
		if ##class(%Dictionary.ClassDefinition).%ExistsId("Report.Query."_strName) {
			set ARR2("Class","Report.Query."_strName)=""
		}
	}	
	zn strNS
	quit
	
ClassesMove(pstrFrom,pstrTo,&pintErrors)
	new strName
	
	set strName="" for { set strName=$order(ARR2("Class",strName)) quit:strName=""
		do Do(pstrFrom,pstrTo,strName_".cls",$$$NO,$$$NO,.pintErrors)
		xecute "merge ^["""_pstrTo_"""]"_strName_"D=^["""_pstrFrom_"""]"_strName_"D"
		xecute "merge ^["""_pstrTo_"""]"_strName_"I=^["""_pstrFrom_"""]"_strName_"I"
	}
	quit


Do(pstrFrom,pstrTo,pstrName,pblnCompile=$$$NO,pblnReportError=$$$YES,&pintErrors)
	new sc,arrErrors,strType,strPath
	
	write !,pstrName
	zn pstrFrom
	
	if $zconvert($extract(pstrName,$length(pstrName)-3,$length(pstrName)),"U")=".CSP" {
		set strPath="csp/"_pstrFrom_"/"
	} else {
		set strPath=""
	}
	do $System.OBJ.Export(strPath_pstrName,"c:\temp\B.xml")
	zn pstrTo
	if pblnCompile {
		set sc=$System.OBJ.Load("c:\temp\B.xml","vfc-udk",.arrErrors)
	} else {
		set sc=$System.OBJ.Load("c:\temp\B.xml","vf-udk",.arrErrors)
	}
	zn pstrFrom
	kill ARRRETRY(pstrName)
	if $data(arrErrors) {
		set pintErrors=$get(pintErrors)+1
		set ARRRETRY(pstrName)=""
		if pblnReportError break $data(arrErrors)
	}
	if pblnReportError break $$$ISERR(sc)
	quit

MenuPro(pblnFix=$$$NO)
	new idDate,idTime,idUser,id,obj,obj2,intCount,arr,id1,id2
	
	$$$VAR
	set intCount=0
	set idDate="" for { set idDate=$order(^WWWPRO(0,"WWW004",idDate)) quit:idDate=""
		set idTime="" for { set idTime=$order(^WWWPRO(0,"WWW004",idDate,idTime)) quit:idTime=""
			set idUser="" for { set idUser=$order(^WWWPRO(0,"WWW004",idDate,idTime,idUser)) quit:idUser=""
				set id="" for { set id=$order(^WWWPRO(0,"WWW004",idDate,idTime,idUser,id)) quit:id=""
					if $extract(id,1,4)="AL14" {
						set obj =$get(^WWWPRO(0,"WWW004",idDate,idTime,idUser,id,1,1))
						set arr($piece(id,",",1),$piece(id,",",2))=obj
					}
				}
			}
		}
	}
	set id1="" for { set id1=$order(arr(id1)) quit:id1=""
		set id2="" for { set id2=$order(arr(id1,id2)) quit:id2=""
			set obj=arr(id1,id2)
			set obj2=$get(^WWW004(0,id1,id2,1))
			set intCount=intCount+1
			if obj'=obj2 {
				if pblnFix set ^WWW004(0,id1,id2,1)=obj
				write !,id2_"="_obj
			}
		}
	}
	do ReIndex^COMIndex("WWW004")
	quit intCount
	
Menu(pstrTo)
	set ^[pstrTo]WWW004(0,"AL14","01.",1)="Compras"
	set ^[pstrTo]WWW004(0,"AL14","01.01.",1)="Pedido de Compras"
	set ^[pstrTo]WWW004(0,"AL14","01.01.01.",1)="Pedido de Compra~VARPedidoCompra~~~~~~~~63349~RAM~~~~Subentidade VARPedidoCompraPaciente é exclusiva do segmento saúde."
	set ^[pstrTo]WWW004(0,"AL14","01.01.02.",1)="Consultar Pedido de Compra~VARPedidoCompra~~~~~~~~63349~RAM~~1~~Inicia como busca"
	set ^[pstrTo]WWW004(0,"AL14","01.01.03.",1)="Associar Processo a Pedido de Compra~VARPedidoCompraProcesso~~~~~~~~63349~RAM~~~~Governo"
	set ^[pstrTo]WWW004(0,"AL14","01.01.04.",1)="Cadastro de Pregão~VARPregao~~~~~~~~63349~RAM~~~~Governo"
	set ^[pstrTo]WWW004(0,"AL14","01.02.",1)="Gestão de ARPs"
	set ^[pstrTo]WWW004(0,"AL14","01.02.01.",1)="Solicitação de Registro de Preço~VARSESSOLICPRECO~~~~~~~~63349~RAM~~~~Governo"
	set ^[pstrTo]WWW004(0,"AL14","01.02.02.",1)="SRP - Consulta~VARSESSOLICPRECO~~~~~~~~63349~RAM~~1~~Governo"
	set ^[pstrTo]WWW004(0,"AL14","01.02.03.",1)="SRP - Informar Processo~VARProcessoSRP~~~~~~~~63349~RAM~~~~Governo"
	set ^[pstrTo]WWW004(0,"AL14","01.02.04.",1)="Ata de Registro de Preço~VARAta~~~~~~~~63349~RAM~~~~Governo"
	set ^[pstrTo]WWW004(0,"AL14","01.02.05.",1)="Consultar Atas~VARAta~~~~~~~~63349~RAM~~1~~Inicia como busca"
	set ^[pstrTo]WWW004(0,"AL14","01.02.06.",1)="Alerta de Validade de Atas~VARAtaAlerta~~~~~~~~63349~RAM~~~~Governo"
	set ^[pstrTo]WWW004(0,"AL14","01.03.",1)="Banco de Preços"
	set ^[pstrTo]WWW004(0,"AL14","01.03.01.",1)="Estimativa de Preço~VARBancoPrecoEstimativa~~~~~~~~63349~RAM~~~~Tudo que é VARBancoPreco* vai."
	set ^[pstrTo]WWW004(0,"AL14","01.03.02.",1)="Banco de Preços~VARBancoPreco~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","01.04.",1)="Compras"
	set ^[pstrTo]WWW004(0,"AL14","01.04.01.",1)="Ordem de Compra~VARCompra~~~~~~~~63349~RAM~~~~As entidades cores utilizados são somente INAUF, INAUFP e INAUFPK."
	set ^[pstrTo]WWW004(0,"AL14","01.04.02.",1)="Consultar Ordem de Compra~VARCompra~~~~~~~~63349~RAM~~1~~Inicia como busca"
	set ^[pstrTo]WWW004(0,"AL14","01.04.03.",1)="Informar Entrega do Empenho~VARCompraEmpenho~~~~~~~~63349~RAM~~~~Governo"
	set ^[pstrTo]WWW004(0,"AL14","01.05.",1)="Relatórios Gerenciais"
	set ^[pstrTo]WWW004(0,"AL14","01.05.01.",1)="Histórico de Compras~VARHistoricoCompras~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","02.",1)="Recebimento"
	set ^[pstrTo]WWW004(0,"AL14","02.01.",1)="Fornecedor"
	set ^[pstrTo]WWW004(0,"AL14","02.01.01.",1)="Fazer Recebimento~INReceipt (INREC)~~~~~~~~63349~RAM~~~~Excluir INRECCharge, e diversos formulários com o prefixo INREC*."
	set ^[pstrTo]WWW004(0,"AL14","02.01.02.",1)="Consultar Recebimentos~INREC~~~~~~~~63349~RAM~~1~~Inicia como busca"
	set ^[pstrTo]WWW004(0,"AL14","02.01.03.",1)="Guia de Remessa de Notas Fiscais~VARGuiaRemessaNF~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","02.01.04.",1)="Estorno de Recebimento~INRECReverse~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","02.01.05.",1)="Previsão de Entregas~VARCompraEntregaPrevisao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","02.01.06.",1)="Calendário de Entregas~VARCompraEntregaPrevisaoCal~~~~~~~~63349~RAM~~~~Incluir subformulário VARCompraEntregaAgendamento."
	set ^[pstrTo]WWW004(0,"AL14","02.01.07.",1)="Devolução ao Fornecedor~INReturnToSupplier~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","02.02.",1)="Relatórios Gerenciais"
	set ^[pstrTo]WWW004(0,"AL14","02.02.01.",1)="Relação de Recebimentos~VARRecebimentoHistorico~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","02.02.02.",1)="Histórico de Recebimentos~VARHistoricoRecebimento~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","02.02.03.",1)="Histórico de Estornos~VARHistoricoEstorno~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","02.02.04.",1)="Ranking de Fornecedores~VARFornecedorRanking~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.",1)="Armazenamento"
	set ^[pstrTo]WWW004(0,"AL14","03.01.",1)="Estoque"
	set ^[pstrTo]WWW004(0,"AL14","03.01.01.",1)="Consulta de Estoque por Produto~VARStock~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.02.",1)="Consulta de Estoque por Endereço~VAREstoqueConsEndereco~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.03.",1)="Consulta de Estoque por Paciente~VAREstoqueConsEndereco~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.04.",1)="Consulta de Estoque por Programa~VARStockByProgram~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.05.",1)="Consulta de Movimentação de Estoque~VARStockHistory~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.06.",1)="Movimentar Produtos no Local~INMOV~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.07.",1)="Movimentar Paletes no Local~INMOVByPallet~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.08.",1)="Posição de Estoque por Local~VAREstoquePosicao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.09.",1)="Mapa de Falta~VAREstoqueZerado~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.10.",1)="Produtos sem Movimentação~VAREstoqueSemMovto~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.11.",1)="Consulta de Endereços Vazios~INBESTNULL~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.12.",1)="Alerta de Validade de Produtos~VARExpiryAlert~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.13.",1)="Nada Consta~VARNadaConsta~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.14.",1)="Ajuste de Estoque~INADJ~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.15.",1)="Alteração de Atributos no Estoque~INADJATT~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.01.16.",1)="Ajuste de Custo Médio~INStockValCCAdjust~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.02.",1)="WMS"
	set ^[pstrTo]WWW004(0,"AL14","03.02.01.",1)="Criar Endereços de Armazenagem~VAREnderecos~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.02.02.",1)="Gerenciar Endereços de Armazenagem~VARTCIModulo~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.02.03.",1)="Gerar Paletes~~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.02.04.",1)="Gerenciar Paletes~VARGerarTSU~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.02.05.",1)="Visualização Gráfica do Armazém~VARWMSVisualizaLocal~~~~~~~~63349~RAM~~~~Utilização de bibliotecas externas (jquery e redips) e páginas CSP externas"
	set ^[pstrTo]WWW004(0,"AL14","03.02.06.",1)="Produtos aguardando Endereçamento~VARProdutosAguardEndereco~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.02.07.",1)="Consulta de Endereços Vazios~INBESTNULL~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.03.",1)="Inventário"
	set ^[pstrTo]WWW004(0,"AL14","03.03.01.",1)="Cadastrar Inventário~INWEINVP~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.03.02.",1)="Fazer Inventário~INWEINVD~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.03.03.",1)="Cancelar Inventário~INWEINVK~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.04.",1)="Relatórios Gerenciais"
	set ^[pstrTo]WWW004(0,"AL14","03.04.01.",1)="Resumo Contábil de Estoque~VARReportEstoqueContabil~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","03.04.02.",1)="Relatório de Cubagem~VARVolumeEstoque~~~~~~~~63349~RAM~~~~03 visões gerenciais: por produto, local ou demonstrativo do estoque."
	set ^[pstrTo]WWW004(0,"AL14","04.",1)="Distribuição"
	set ^[pstrTo]WWW004(0,"AL14","04.01.",1)="Transferências"
	set ^[pstrTo]WWW004(0,"AL14","04.01.01.",1)="Pré-requisição~VARPreRequisicao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.01.02.",1)="Aprovar pedido de transferência~VARPreReqAprovacao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.01.03.",1)="Requisição / Solicitação~INReq~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.01.04.",1)="Consultar Requisições / Solicitações~INReq~~~~~~~~63349~RAM~~1"
	set ^[pstrTo]WWW004(0,"AL14","04.01.05.",1)="Atendimento por Produto~INReqViewItem~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.01.06.",1)="Atender Requisição / Solicitação~INReqIssue~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.01.07.",1)="Transferência Direta~INTFR~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.01.08.",1)="Consultar Transferências~INTFR~~~~~~~~63349~RAM~~1"
	set ^[pstrTo]WWW004(0,"AL14","04.01.09.",1)="Aceite de Transferência~INRECTFR~~~~~~~~63349~RAM~~~~Equivalências de pesquisa - INRECTFRSearch, VARTransfAguardAceite"
	set ^[pstrTo]WWW004(0,"AL14","04.01.10.",1)="Consultar Aceites de Transferência~INRECTFR~~~~~~~~63349~RAM~~1"
	set ^[pstrTo]WWW004(0,"AL14","04.01.11.",1)="Abastecimentos Pendentes~VARAbastecimento~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.02.",1)="Consumo"
	set ^[pstrTo]WWW004(0,"AL14","04.02.01.",1)="Modelo de Requisição (Template)~INReqTemplate~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.02.02.",1)="Fazer Requisição~INReq~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.02.03.",1)="Consultar Requisições~INReq~~~~~~~~63349~RAM~~1"
	set ^[pstrTo]WWW004(0,"AL14","04.02.04.",1)="Atender Requisição~INReqIssue, INIssue~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.02.05.",1)="Pesquisar Consumos~INIssue~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.02.06.",1)="Saída sem Requisição/Saída Direta~INDispenseToPatient~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","04.02.07.",1)="Devolução ao Estoque~INIssueRev~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.02.08.",1)="Efetivar Saída para Paciente~VARINDispenseToPatient~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","04.03.",1)="Outras Saídas"
	set ^[pstrTo]WWW004(0,"AL14","04.03.01.",1)="Saída por Doação / Empréstimo~VARINADJDoacao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.03.02.",1)="Consultar Doação / Empréstimo~VARINADJDoacao~~~~~~~~63349~RAM~~1"
	set ^[pstrTo]WWW004(0,"AL14","04.03.03.",1)="Outras Saídas~VARINADJ~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.03.04.",1)="Consultar Outras Saídas~VARINADJ~~~~~~~~63349~RAM~~1"
	set ^[pstrTo]WWW004(0,"AL14","04.04.",1)="Relatórios Gerenciais"
	set ^[pstrTo]WWW004(0,"AL14","04.04.01.",1)="Relatório de Distribuição~VARRelDistribuicao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.04.02.",1)="Relatório de Solicitações Atendidas~VARRelReqAtendidas~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.04.03.",1)="Análise do MOV~VARHistoricoMOV~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.04.04.",1)="Históricos de Consumo~VARHistoricoConsumo~~~~~~~~63349~RAM~~~~04 visões gerenciais  - Produto, Local, Paciente e Centro de Custo"
	set ^[pstrTo]WWW004(0,"AL14","04.04.05.",1)="Histórico de Devoluções~VARHistoricoDevolucoes~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.04.06.",1)="Consumo de Produtos por Trimestre~VARConsumoProdutosTrimestre~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.04.07.",1)="Análise do CMM (Consumo Médio Mensal)~VARHistoricoConsumo~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","04.04.08.",1)="Histórico de Outras Saídas~VARHistoricoSaidas~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","05.",1)="Farmácia"
	set ^[pstrTo]WWW004(0,"AL14","05.01.",1)="Prescrição/Dispensação"
	set ^[pstrTo]WWW004(0,"AL14","05.01.01.",1)="Prescrição Ambulatorial~MEDPrescription~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.01.02.",1)="Consultar Prescrição Ambulatorial~MEDPrescription~~~~~~~~63349~RAM~~1~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.01.03.",1)="Atender Prescrição Ambulatorial~MEDPrescriptionIssue~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.01.04.",1)="Efetuar Dispensação Ambulatorial~MEDPrescriptionDispense~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.01.05.",1)="Autorização para Dispensação~MEDAuthorize~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.01.06.",1)="Prescrição Hospitalar~MEDPrescriptionPat, MEDPrescriptionHosp~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.01.07.",1)="Consultar Prescrição Hospitalar~MEDPrescriptionHosp~~~~~~~~63349~RAM~~1~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.01.08.",1)="Dispensação via Prescrição~MEDDispense~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.01.09.",1)="Prescrições Aguard. Dispensação~VARDispensacaoViaPrescricao~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.01.10.",1)="Lista de Trabalho - Enfermagem~VARListaTrabalhoEnfermagem~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.02.",1)="Paciente"
	set ^[pstrTo]WWW004(0,"AL14","05.02.01.",1)="Consultar Paciente~MEDPatient~~~~~~~~63349~RAM~~1~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.02.02.",1)="Dispensação para Paciente~INDispenseToPatient~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.02.03.",1)="Associar Processo ao Paciente~VARProcessoJudicial~~~~~~~~63349~RAM~~~~Saúde/Governo"
	set ^[pstrTo]WWW004(0,"AL14","05.02.04.",1)="Consultar Profissional de Saúde~MEDProvider~~~~~~~~63349~RAM~~1~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.02.05.",1)="Consultar Admissões de Pacientes~MEDAdmission~~~~~~~~63349~RAM~~1~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.02.06.",1)="Administração de Medicamentos~VARAdmMedicamentosa~~~~~~~~63349~RAM~~~~Saúde (Integração com o módulo mobile)"
	set ^[pstrTo]WWW004(0,"AL14","05.02.07.",1)="Lista de Trabalho - Enfermagem~VARDoseAprazamento~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.03.",1)="Farmácia Especializada"
	set ^[pstrTo]WWW004(0,"AL14","05.03.01.",1)="Prescrição - Alto Custo~VARSESTreatmentHC~~~~~~~~63349~RAM~~~~Saúde/Governo"
	set ^[pstrTo]WWW004(0,"AL14","05.03.02.",1)="Dispensação - Tratamento AC~VARSESPatientConsumptionHC~~~~~~~~63349~RAM~~~~Saúde/Governo"
	set ^[pstrTo]WWW004(0,"AL14","05.03.03.",1)="Prescrição - Média Complexidade~VARSESTreatmentMC~~~~~~~~63349~RAM~~~~Saúde/Governo (Nutrição Domiciliar, Ação Judicial, etc.)"
	set ^[pstrTo]WWW004(0,"AL14","05.03.04.",1)="Dispensação - Tratamento MC~VARSESPatientConsumptionMC~~~~~~~~63349~RAM~~~~Saúde/Governo (Nutrição Domiciliar, Ação Judicial, etc.)"
	set ^[pstrTo]WWW004(0,"AL14","05.03.05.",1)="Previsão de Atendimento~VARSESPrevisaoAtendimento~~~~~~~~63349~RAM~~~~Saúde/Governo (Nutrição Domiciliar, Ação Judicial, etc.)"
	set ^[pstrTo]WWW004(0,"AL14","05.04.",1)="Produção"
	set ^[pstrTo]WWW004(0,"AL14","05.04.01.",1)="Lista de Trabalho - Farmacotécnica~VARListaTrabalhoFarmacotecnica~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.04.02.",1)="Lista de Trabalho - Farmacotécnica~VARFarmacotecnicaLista~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.04.03.",1)="Painel de Fracionamento~VARConsultaOrdemUnitarizacao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","05.04.04.",1)="Ordem Manual - Fracionamento~VAROrdemUnitarizacaoManual~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","05.04.05.",1)="Consultar Ordens de Fracionamento~VAROrdemUnitarizacao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","05.04.06.",1)="Lista de Trabalho - Fracionamento~VARListaTrabalhoUnit~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","05.04.07.",1)="Ordem de Produção~INMO~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","05.04.08.",1)="Lista de Trabalho - Kits~VARListaTrabalhoKit~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","05.04.09.",1)="Dashboard de Produção~VARDashboardFracionamento~~~~~~~~63349~RAM~~~~Páginas CSP externas"
	set ^[pstrTo]WWW004(0,"AL14","05.05.",1)="Cadastros"
	set ^[pstrTo]WWW004(0,"AL14","05.05.01.",1)="Cadastro de Pacientes~MEDPatient~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.05.02.",1)="Cadastro de Admissão~MEDAdmission~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.05.03.",1)="Cadastro de Profissional de Saúde~MEDProvider~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.05.04.",1)="CID - Medicamentos~MEDICD~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.05.05.",1)="Posologia - Freq. de Administração~MEDFrequency~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.06.",1)="Relatórios Gerenciais"
	set ^[pstrTo]WWW004(0,"AL14","05.06.01.",1)="Histórico de Consumo por Paciente~VARHistoricoConsumoDetalhe~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.06.02.",1)="Relatório de Pacientes Atendidos~VARRelatorioPacientesAtendidos~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.06.03.",1)="Relatório de Farmacovigilância~VARFarmacovigilancia~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.06.04.",1)="Interações Medicamentosas~VARHistInteracoesMedicamentosas~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.06.05.",1)="Desempenho no Atendimento às Prescrições~VARDesempAtendPresc~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","05.06.06.",1)="Produção no Fracionamento~VARProducaoFracionamento~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","06.",1)="Planejamento"
	set ^[pstrTo]WWW004(0,"AL14","06.01.",1)="Monitoramento"
	set ^[pstrTo]WWW004(0,"AL14","06.01.01.",1)="Mapa do Estado~VARMapa~~~~~~~~63349~RAM~~~~Customização por projeto - página CSP externa"
	set ^[pstrTo]WWW004(0,"AL14","06.01.02.",1)="Monitoramento de Estoque~VARMonitoramentoEstoquePainel~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.01.03.",1)="Visão Gerencial do Produto~VARConsultaGerencialProduto~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.01.04.",1)="Classificação ABC~INSTAABC ou VARABC~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.01.05.",1)="Monitoramento de Programa~VARMonitoramentoPrograma~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.01.06.",1)="CMMLi - Consolidado~VARCMMIConsolidado~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.01.07.",1)="Painel de Abastecimento~VARSESPainelAbastecimentoMain~~~~~~~~63349~RAM~~~~Páginas CSP externas"
	set ^[pstrTo]WWW004(0,"AL14","06.02.",1)="Alertas"
	set ^[pstrTo]WWW004(0,"AL14","06.02.01.",1)="Alerta de Reposição - Rede~VARPreAlertaRede~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.02.02.",1)="Alerta de Reposição - Local~VARPreAlertaLocal~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.02.03.",1)="Alerta de Reposição - Programa~VARPreReposicaoPrograma~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.02.04.",1)="Alerta de Reposição - Central~VARAlertaLocal~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.02.05.",1)="Alerta de Reposição - Regionais~VARAlertaLocal~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.02.06.",1)="Alerta de Reposição - Proprietário~VARAlertaLocal~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.02.07.",1)="Inserir/Excluir Produtos do Alerta de Reposição~VARAlertaLocalConfig~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.03.",1)="Parâmetros"
	set ^[pstrTo]WWW004(0,"AL14","06.03.01.",1)="Parâmetros Reposição - Rede~VARReposicao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.03.02.",1)="Parâmetros Reposição - Produto~VARReposicaoProduto~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.03.03.",1)="Parâmetros Reposição - Local~VARReposicaoLocal~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.03.04.",1)="Parâmetros Reposição - Produto/Local~VARReposicaoLocaProduto~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.03.05.",1)="Parâmetros de Reposição - Programa~VARReposicaoPrograma~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.03.06.",1)="Parâmetros de Reposição - Programa Local~VARReposicaoProgramaLocal~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.03.07.",1)="Cadastro de CMMLi~VARAlertaCMMLi~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","06.04.",1)="Relatórios Gerenciais"
	set ^[pstrTo]WWW004(0,"AL14","06.04.01.",1)="Legislação~VARLegislacao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.",1)="Cadastros"
	set ^[pstrTo]WWW004(0,"AL14","07.01.",1)="Cadastro de Produtos"
	set ^[pstrTo]WWW004(0,"AL14","07.01.01.",1)="Cadastro de Produto~INART~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.01.02.",1)="Consultar Produtos~INART~~~~~~~~63349~RAM~~1"
	set ^[pstrTo]WWW004(0,"AL14","07.01.03.",1)="Unidades de Medidas~VARTCIUnidadeMedida~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.01.04.",1)="Autorização de Produto por Local~VARINDRPITEMTabela~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.01.05.",1)="Cadastro de Grupos~INItemGroup~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.01.06.",1)="Produtos Padronizados~VARREME~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.01.07.",1)="Cadastro de Códigos Externos~VARSESINARTRelacao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.01.08.",1)="Alterar Status do Produto~VARProdutoStatus~~~~~~~~63349~RAM~~~~Suporte"
	set ^[pstrTo]WWW004(0,"AL14","07.01.09.",1)="Cadastro da NCM~VARNCM~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.01.10.",1)="Cadastro de Fonte de Recurso~VARFonteRecurso~~~~~~~~63349~RAM~~~~Governo"
	set ^[pstrTo]WWW004(0,"AL14","07.02.",1)="Cadastro de Locais"
	set ^[pstrTo]WWW004(0,"AL14","07.02.01.",1)="Cadastro de Locais de Consumo~WWW0121C~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.02.02.",1)="Cadastro de Locais de Estoque~WWW0121C~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.02.03.",1)="Cadastro de Centros de Custo~VARCentroCusto~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.02.04.",1)="Endereços de Armazenagem~INLP~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.02.05.",1)="Cadastro de Setores de Centro de Custo~VARSESCCLOCAL~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.02.06.",1)="Cadastro de Local/Fornecedor x Cidade~VARSESACESSOLOCAL~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.03.",1)="Cadastro de Fornecedores"
	set ^[pstrTo]WWW004(0,"AL14","07.03.01.",1)="Cadastro de Fornecedores~INLIEF~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.03.02.",1)="Consultar Fornecedores~INLIEF~~~~~~~~63349~RAM~~1"
	set ^[pstrTo]WWW004(0,"AL14","07.03.03.",1)="Consultar Ocorrências~VARFornecedorOcorrencia~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.03.04.",1)="Emitir CRC do Fornecedor~VAREmitirCRCFornecedor~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.03.05.",1)="Transportadora~VARTransportadora~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.03.06.",1)="Visitas de Qualificação de Fornecedores~VARRelatorioGeralVisitas~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.04.",1)="Controle de Estoque"
	set ^[pstrTo]WWW004(0,"AL14","07.04.01.",1)="Projetos/Programas~VARINPROJECT~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.04.02.",1)="Cadastro de Marcas/Laboratórios~INBrand~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.04.03.",1)="Proprietário~VARProprietario~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.04.04.",1)="Cadastro de Códigos de Barras 2D~VARCompareQrCodes~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","07.04.05.",1)="Alterar Atributos do Estoque~INADJATT~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","08.",1)="Contratos"
	set ^[pstrTo]WWW004(0,"AL14","08.01.",1)="Gestão de Contratos"
	set ^[pstrTo]WWW004(0,"AL14","08.01.01.",1)="Consultar Contratos~VARContrato~~~~~~~~63349~RAM~~1"
	set ^[pstrTo]WWW004(0,"AL14","08.01.02.",1)="Consulta de Alterações~VARContratoSelecao~~~~~~~~63349~RAM~~1"
	set ^[pstrTo]WWW004(0,"AL14","08.01.03.",1)="Alerta de Término de Vigência~VARContratoAlerta~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","08.01.04.",1)="Notificações de Executores~VARContratoSelecao2~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","08.01.05.",1)="Meus Contratos~VARContratoUsuario~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","08.01.06.",1)="Relação de Contratos~VARContratoReport~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","08.02.",1)="Cadastros"
	set ^[pstrTo]WWW004(0,"AL14","08.02.01.",1)="Cadastro de Contratos~VARContrato~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","08.02.02.",1)="Cadastro de Alterações~VARContratoSelecao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","08.02.03.",1)="Cadastro de Executores~VARContratoExecutorCad~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","08.02.04.",1)="Parâmetros de Contratos~VARContratoParametros~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.",1)="Sistema"
	set ^[pstrTo]WWW004(0,"AL14","09.01.",1)="Usuário"
	set ^[pstrTo]WWW004(0,"AL14","09.01.01.",1)="Alterar Senha~WWWPWD~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.01.02.",1)="Minhas Preferências~VARPreferenciasUsuario~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.01.03.",1)="Alterar Local~WWW0131B~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.01.04.",1)="Cadastro de Usuários~WWW013~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.01.05.",1)="Administração de Usuários~VARAdminUsuario~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.01.06.",1)="Exportar Dados~VARDump~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.02.",1)="Status"
	set ^[pstrTo]WWW004(0,"AL14","09.02.01.",1)="Informações do Ambiente~VAREnvInfo~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.02.02.",1)="Painel de Mensagens~VARTelaEntrada~~~~~~~~63349~RAM~~~~Página CSP externa"
	set ^[pstrTo]WWW004(0,"AL14","09.02.03.",1)="Atualizar Painel de Mensagens~VARMensagem~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.02.04.",1)="Consultar Logs de Alterações~VARWWWPRO~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.03.",1)="Configurações"
	set ^[pstrTo]WWW004(0,"AL14","09.03.01.",1)="Parâmetros do Cliente~VARParametroCliente~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.03.02.",1)="Parâmetros da Prescrição~MEDPrescriptionSetup~~~~~~~~63349~RAM~~~~Saúde"
	set ^[pstrTo]WWW004(0,"AL14","09.03.03.",1)="Ativar/Desativar Unidade de Medida~VARParametroAtivarTabela~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.04.",1)="Administração"
	set ^[pstrTo]WWW004(0,"AL14","09.04.01.",1)="Informações do Sistema~VARTCISystemInformation~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.04.02.",1)="Log de Uso de Licenças~VARTCILicenseUsageLog~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.04.03.",1)="Parâmetros Gerais do Sistema~INVORG~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.04.04.",1)="Parâmetros Gerais da Empresa~WWW012~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.04.05.",1)="Módulos do Sistema~VARBRModulo~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.04.06.",1)="Diretórios para Arquivos~VARBRDiretorios~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","09.04.07.",1)="Tipos de Arquivo para Upload~VARBRTipoArqUpload~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.",1)="Relatórios"
	set ^[pstrTo]WWW004(0,"AL14","10.01.",1)="Etiquetas"
	set ^[pstrTo]WWW004(0,"AL14","10.01.01.",1)="Endereço de Armazenagem~VAREstoqueEtq~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.01.02.",1)="Produto~VARProdutoEtq~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.01.03.",1)="Paciente~VARPacienteEtq~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.01.04.",1)="Embalagem~VAREmbalagemEtq~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.01.05.",1)="Configurar Impressoras~VARConfigImpEtiqueta~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.",1)="Relatórios Contábeis"
	set ^[pstrTo]WWW004(0,"AL14","10.02.01.",1)="Fechamento Contábil~VARFechamentoContabil~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.02.",1)="Livro de Registro de Inventário~VARLivroRegInventario~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.03.",1)="Entrada via Nota Fiscal~VAREntradaNotaFiscal~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.04.",1)="Mapa de Movimentação Mensal~VARMapaMovMensal~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.05.",1)="Mapa de Movimentação do Produto~VARMapaMovProduto~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.06.",1)="Entrada via Devolução~VAREntradaDevolucao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.07.",1)="Saída via Requisição~VARSaidaRequisicao~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.08.",1)="Nota Fiscal~VARContabilNotaFiscal~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.09.",1)="Inventário~VARContabilInventario~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.10.",1)="Transferência~VARContabilTransferencia~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.11.",1)="Consumo de Produtos por Trimestre~VARConsumoProdutosTrimestreContabil~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.12.",1)="Consumo por Grupo de Estocagem~VARConsGrupoEstocagem~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.13.",1)="Consumo por Centro de Custo~VARConsCentroCusto~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.14.",1)="Resumo da Movimentação Mensal~VARResumoMovMensal~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.15.",1)="Relatório de Movimentação Mensal Contábil~VARMOVMensalContabil~~~~~~~~63349~RAM"
	set ^[pstrTo]WWW004(0,"AL14","10.02.16.",1)="Mapa de Movimentação Mensal~VARMapaMovMensal~~~~~~~~63349~RAM"

quit

	;--------------------------------------------
ListRoutines(pintTest=1,pstrNS="")
	new idRoutine,objResultSet,sc,strName,strNS
	
	if pstrNS'="" {
		set strNS=$zu(5)
		zn pstrNS
	}
	if (pintTest<3) {
		for strType="*.INC","*.MAC" {
			set objResultSet = ##class(%ResultSet).%New("%Library.Routine:RoutineList")
			if objResultSet'=$$$NULLOREF {
				if $$$ISOK(objResultSet.Execute(strType,0,0)) {
					for {
						quit:'objResultSet.Next()
						set strName = objResultSe]]><![CDATA[t.Data("Name")
						if pintTest=1 {
							write !,strName
						} elseif pintTest=2 {
							if $extract(strName,1,5)="User." {
								if '$data(^WWW001(0,$piece(strName,".",2))) {
									write !,strName			
								}
							}
						}
					}
				}
			}
		}
	} else {
		set objResultSet=##class(%ResultSet).%New("%Dictionary.ClassDefinitionQuery:Summary")
		set sc = objResultSet.Execute()
		if $$$ISOK(sc) {
			while objResultSet.Next() {
				continue:$extract(objResultSet.GetData(1),1)="%"
				write !,objResultSet.GetData(1)
			}
		}
		do objResultSet.%Close()
	}
	if pstrNS'= "" zn strNS
	quit

ListOfFormsFromMenu2()
	;
	;   **** NOT CURRENTLY USED ****
	;
	;
	; Get the list of forms that will eventually appear in the mega menu AL14
	;
	; History
	; 17-Jul-2014	shobby	CORE-385: Change requested by Ramalho. Use the menu from SESDF-V3
	
	
	new lstForms,idLine,strLine,blnStarted,arrForms,idForm
	
	set blnStarted=$$$NO
	set lstForms=""

	set idLine="" for { set idLine=$order(^rMAC("COMALUP2",0,idLine)) quit:idLine=""
		quit:(idLine'=+idLine)
		set strLine=^rMAC("COMALUP2",0,idLine)
		if strLine="Menu()" set blnStarted=$$$YES
		if blnStarted {
			;write !,strLine
			if strLine="quit" quit
			set idForm=$piece(strLine,Y,2)
			if idForm'="" {
				set arrForms(idForm)=""
				write !,idForm
			}
		}
	}
	set idForm="" for { set idForm=$order(arrForms(idForm)) quit:idForm=""
		if lstForms'="" set lstForms=lstForms_";"
		set lstForms=lstForms_idForm
	}
	
	quit lstForms

ListOfFormsFromMenu(pidMenu,pstrFrom="")
	new strGlobal,lstForms
	
	set lstForms=""
	set strGlobal="^["""_pstrFrom_"""]WWW004(0,"""_pidMenu_""")"
	for { set strGlobal=$query(@strGlobal) quit:strGlobal=""
		quit:$qsubscript(strGlobal,2)'=pidMenu
		;write !,strGlobal_"="_@strGlobal
		if $$$WWW004FormName(@strGlobal)'="" {
			if lstForms'="" set lstForms=lstForms_";"
			set lstForms=lstForms_$piece($$$WWW004FormName(@strGlobal)," ",1) ;Examble of bad Form Name 'INReceipt (INREC)'
		}
	}
	quit lstForms

ReIndexAll()
	new Class,Keys

	set Class="" for { set Class=$order(ARRINDEX(Class)) quit:Class=""
		
		do GetKeys^COMIndex(Class,.Keys)
		if $order(Keys(""))'="" {  								; Only do this when there is an index.
			write !,"Indexing "_Class
			do ReIndex^COMIndex(Class,$$$YES)
		}
	}
	quit


	;---------------------------------------------------------------------------------------------------------
	
Compare(pblnReportErrors=$$$YES)
	; Routine to check that the results from Routines1 has not changed.  This is to ensure
	; that when doing 'tidy-up' code changes that no errors are introduced.
	
	new lstForms,id1,id2,id3,dte
	
	set dte=$h
	$$$VAR
	
	kill ARR2
	kill ARR3
	merge ARR2=ARR
	kill ARR
	do SQLTableName^COMReferences()
	set lstForms=$$ListOfFormsFromMenu("AL14")
	if lstForms'="" do Routines1^COMReferences("WWWFORM","",.ARR,lstForms,pblnReportErrors)
	merge ARR3=ARR
	
	set obj="ARR3"
	
	set id1="" for { set id1=$order(ARR3(id1)) quit:id1=""
		set id2="" for { set id2=$order(ARR3(id1,id2)) quit:id2=""
			set id3="" for { set id3=$order(ARR3(id1,id2,id3)) quit:id3=""
				if ($get(ARR3(id1,id2,id3))=$get(ARR2(id1,id2,id3)))&&+$data(ARR3(id1,id2,id3))&&+$data(ARR2(id1,id2,id3)) {
					kill ARR3(id1,id2,id3)
					kill ARR2(id1,id2,id3)
			 	} else {
					;break
			 	}
			}
		}
	}
	set id1="" for { set id1=$order(ARR3(id1)) quit:id1=""
		set id2="" for { set id2=$order(ARR3(id1,id2)) quit:id2=""
			if ($get(ARR3(id1,id2))=$get(ARR2(id1,id2)))&&+$data(ARR3(id1,id2))&&+$data(ARR2(id1,id2)) {
				kill ARR3(id1,id2)
				kill ARR2(id1,id2)
		 	} else {
				;break
			}
		}
	}
	write !,$$DateDiff^COMUtilDate($h,dte)_" seconds."
	quit 
	
Compare2(pblnReportErrors=$$$YES)
	; Look for any additional things that are added from the HEVA namespace.
	
	new lstForms,id1,id2,obj
	$$$VAR
	
	kill ARR2
	kill ARR3
	kill ARR
	
	set lstForms=$$ListOfFormsFromMenu("AL14")
	if lstForms'="" do Routines1^COMReferences("WWWFORM","",.ARR,lstForms,pblnReportErrors,"ALUP-DEV")
	merge ARR3=ARR

	set lstForms=$$ListOfFormsFromMenu("VARAL14HEVA")
	if lstForms'="" do Routines1^COMReferences("WWWFORM","",.ARR,lstForms,pblnReportErrors,"HEVA")
	merge ARR2=ARR
	
	
	set id1="" for { set id1=$order(ARR3(id1)) quit:id1=""
		set id2="" for { set id2=$order(ARR3(id1,id2)) quit:id2=""
			 if ($get(ARR3(id1,id2))=$get(ARR2(id1,id2)))&&+$data(ARR3(id1,id2))&&+$data(ARR2(id1,id2)) {
				 kill ARR3(id1,id2)
				 kill ARR2(id1,id2)
			 } else {
				; break
			 }
		}
	}
	zn "ALUP-DEV"
	quit 

Compare3(pstrFrom="ALUP-DEV",pstrTo="ALUP")
	; This routine compares changes in the exporting of Globals routine.
	new strNS,idLine
	
	set strNS=$zu(5)
	$$$VAR
	;merge ^ARRGLOBALBEFORE=^ARRGLOBAL
	set lstForms=$$ListOfFormsFromMenu("AL14")
	if lstForms'="" do Routines1^COMReferences("WWWFORM","",.ARR,lstForms,$$$NO,pstrFrom)
	do Globals($$$YES,$$$YES,$$$YES)
	zn strNS
	merge ^ARRGLOBAL=^[pstrFrom]ARRGLOBAL
	kill ^[pstrFrom]ARRGLOBAL
	
	set idLine="" for { set idLine=$order(^ARRGLOBAL(idLine)) quit:idLine=""
		break:'$data(ARR("Global",$piece($piece(idLine,"""ALUP""]",2),"=",1)))
	}

	;set idLine="" for { set idLine=$order(^ARRGLOBALBEFORE(idLine)) quit:idLine=""
	;	if $data(^ARRGLOBALBEFORE(idLine))=$data(^ARRGLOBAL(idLine)) {
	;		kill ^ARRGLOBALBEFORE(idLine)
	;		kill ^ARRGLOBAL(idLine)
	;	}
	;}
	quit
	
Compare4()
	new strNS,strFrom,ARR,ARR1,strMenu,idMenu,idType,idName,strMessage,id
	new idNSMenu
	
	$$$VAR
	
	kill ^ARR1
	set strNS=$zu(5)
	
	
	read !,"1st Namespace? ",strFrom(1) ;set strFrom="SESDF-V3"
	read !,"Menu? "         ,strMenu(1) ;set strMenu="AL14"
	read !,"2nd Namespace? ",strFrom(2) ;set strFrom="HEVA"
	read !,"Menu? "         ,strMenu(2) ;set strMenu="VARAL14HEVA"
	read !,"Get Menus From? (ALUP-DEV)", idNSMenu
	if idNSMenu="" set idNSMenu="ALUP-DEV"
	
	set id="" for { set id=$order(strFrom(id)) quit:id=""
		kill ARR
		set plstForms=$$ListOfFormsFromMenu(strMenu(id),idNSMenu)
		if plstForms'="" do Routines1^COMReferences("WWWFORM","",.ARR,"",$$$NO,strFrom(id))
		zn strNS
		merge ^ARR1(strMenu(id))=ARR
	}
	set id="" for { set id=$order(strFrom(id)) quit:id=""
		set idType="" for { set idType=$order(^ARR1(strMenu(id),idType)) quit:idType=""
			set idName="" for { set idName=$order(^ARR1(strMenu(id),idType,idName)) quit:idName=""
				if $extract(idName,1,3)'="VAR" {
					kill ^ARR1(strMenu(1),idType,idName)
					kill ^ARR1(strMenu(2),idType,idName)						
				} elseif id=1 {
					if '$data(^ARR1(strMenu(2),idType,idName)) {
						kill ^ARR1(strMenu(1),idType,idName)
						kill ^ARR1(strMenu(2),idType,idName)						
					}
				} else {
					if '$data(^ARR1(strMenu(1),idType,idName)) {
						kill ^ARR1(strMenu(1),idType,idName)
						kill ^ARR1(strMenu(2),idType,idName)						
					}
				}
			}
		}
	}
	set idName="" for { set idName=$order(^ARR1(strMenu(1),"Routine",idName)) quit:idName=""
		set strMessage = $$CompareRoutine^TSCompareRoutines(strFrom(1),strFrom(2),idName)
		if strMessage'="" {
			 write !,idName ;_":"_strMessage
		}
	}
	quit

MenuList(pidMenu)
	new idMenu,objWWW004
	$$$VAR
	set idMenu="" for { set idMenu=$order(^WWW004(0,pidMenu,idMenu)) quit:idMenu=""
		set objWWW004=$get(^WWW004(0,pidMenu,idMenu,1))
		if $$$WWW004FormName(objWWW004)'="" {
			write !,$$$WWW004FormName(objWWW004)_" : "_$$$WWW004MenuDescription(objWWW004)
			write !,$piece($get(^WWW127(0,$$$WWW004FormName(objWWW004),"M",0,"EN",1)),Y,1)
			write !,"----------------------------------------------------------------------"
		}
	}
	quit


	;*************************** Routines to generate constants

	
	 
Data(pintPos,FieldName,%obj,%value)
	if $data(%value) {
		set $piece(%obj,Y,pintPos) = %value
		quit %obj
	
	} elseif $data(%obj) {
		quit $piece(%obj,Y,pintPos)
	
	} else {
		quit FieldName
	}
	quit
	
GetPropertyName(pidClass,pintField="",pintKey="",pintCalcField="")
	new strName
	
	if $get(SPRACHE)="" do ^WWWVAR
	set strName = ""
	if pidClass'="" {
		if pintField'="" {
			set strName = $$$WWW0031PropertyDescription($get(^WWW0031(0,pidClass,pintField,SPRACHE,1)))
			if strName="" set strName = $$$WWW002TextInForms($get(^WWW003(0,pidClass,pintField,1)))
		
		} elseif pintKey'="" {
			set strName = $$$WWW0021PropertyDescription($get(^WWW0021(0,pidClass,pintKey,SPRACHE,1)))
			if strName="" set strName = $$$WWW002TextInForms($get(^WWW002(0,pidClass,pintKey,1)))
		
		} elseif pintCalcField'="" { ;SR13474
			set strName = $$$WWW003CalcLangDescription($get(^WWW003CalcLang(0,pidClass,pintCalcField,SPRACHE,1)))
			if strName="" set strName = $$$WWW003CalcCaption($get(^WWW003Calc(0,pidClass,pintCalcField,1)))
		}
	}
	
	if $get(^LanguageTest)=1 {
		set strName="<span title='Class: "_pidClass_" Field: "_pintField_" Key: "_pintKey_"' style='color:green'>"_strName_"</span>"
	}
	
	quit strName
 
 
GetClassName(pidClass="")
	new strName
	
	if $get(SPRACHE)="" do ^WWWVAR
	set strName = ""
	if pidClass'="" {
		set strName = $$$WWW0011ClassDescription($get(^WWW0011(0,pidClass,SPRACHE,1)))
		if strName="" set strName = $$$WWW001ClassDescription($get(^WWW001(0,pidClass,1)))
	}
	if $get(^LanguageTest)=1 {
		set strName = "<span title='Class: "_pidClass_"' style='color:green'>"_strName_"</span>"
	}
	quit strName
 
 
Generate(pidModule="")
	new arrModules,idClass,idModule,idParam,intLength,intParamNum,gINC,lang
	new strClass,strParam,strParamKey,strQuery
	
	if $get(Y)="" do ^WWWVAR

	do GetClassesForModule(pidModule,.arrModules)
	
	if pidModule="" {
		kill ^rINC("Const",0)
		set ^rINC("Const",0) = $horolog
		set ^rINC("Const",0,$increment(^rINC("Const",0,0))) = " ; All Include Files"
	}
	set idModule = ""
	for {
		set idModule = $order(arrModules(idModule))
		quit:idModule=""
		
		set intLength = $length(idModule) // SR15121
		
		set lang = "EN"
		if pidModule="" {
			set ^rINC("Const",0,$increment(^rINC("Const",0,0))) = "#include "_idModule_"Const"
		}
		set gINC = "^rINC("""_idModule_"Const"",0)"
		kill @gINC
		set @gINC = $horolog
		set @gINC@($increment(@gINC@(0))) = " ; Enumerated values for Cache Datatypes"
		//set @gINC@($increment(@gINC@(0))) = " ; Generated on "_$zdate($horolog,2)_" at "_$ztime($piece($horolog,",",2))
		set @gINC@($increment(@gINC@(0))) = " ;"
		set @gINC@($increment(@gINC@(0))) = "#include COMSYS" ;SR17682
		set @gINC@($increment(@gINC@(0))) = "#def1arg SaveGlobal(%obj) $$Save^SALUtils(YM,%obj)"
	;	set @gINC@($increment(@gINC@(0))) = "#define Index(%obj) $$Index^COMUtils(%obj)"     ; 16-Nov-2009
		set @gINC@($increment(@gINC@(0))) = "#define Index(%obj) $$Index^COMUtilIndex(%obj)"
		
		set idClass = ""
		for {
			set idClass = $order(arrModules(idModule,idClass))
			quit:idClass=""
			
			do GenerateForClass(gINC,idClass)
	 	}
		set idParam = idModule
		for {
			set idParam = $order(^WWW101(0,idParam))
			quit:$extract(idParam,1,intLength)'=idModule // SR15121
			
			set intParamNum = ""
			for {
				set intParamNum = $order(^WWW101(0,idParam,lang,intParamNum))
				quit:intParamNum=""
				
				set strParam = $piece($get(^WWW101(0,idParam,lang,intParamNum,1)),"~",1) //SR14196
				set strParam = $translate(strParam,"³_+@-.[],()/'´ &") //SR14196
				set strClass = $translate(idParam,"³_+@-.[],()/")
				
				set @gINC@($increment(@gINC@(0))) = "#define Enum"_strClass_strParam_" """_intParamNum_""""
			}
		}
		
		// SR15121
		set strQuery = "^COMParameter(0,"""_idModule_""")"
		for {
			set strQuery = $query(@strQuery)
			quit:strQuery=""
			
			set idParam     = $qsubscript(strQuery,2)
			set strParamKey = $qsubscript(strQuery,3)
			quit:$extract(idParam,1,intLength)'=idModule
			
			set strParam = $piece($get(^COMParameter(0,idParam,strParamKey,1)),"~",1) //SR14196
			set strParam = $translate(strParam,"³_+@-.[],()/'´ &")                    //SR14196
			set strClass = $translate(idParam,"³_+@-.[],()/")
			
			set @gINC@($increment(@gINC@(0))) = "#define CPEnum"_strClass_strParam_" """_strParamKey_"""" // Use CP so that we can have same names as Application Parameters
		}

		// Export the related Cache include to the file system
		;if ##class(%Dictionary.CompiledClass).%ExistsId("SourceControl.data.SourceBase") do ##class(SourceControl.data.SourceBase).ExportAsCleanXML(idModule_"Const.INC") ;CORE-385.4
	}
 	do ROUTINE^%R(idModule_"Const.INC",,,"LCS")  ; SR16546
	quit
	
	
GenerateForClass(gINC,pidClass)
    ;-------------------------------------------------------------------------------
    ;
    ;-------------------------------------------------------------------------------
	new FieldName,FormName,intField
	
	if pidClass'="" {
		set intField = ""
		for {
			set intField = $order(^WWW003(0,pidClass,intField))
			quit:intField=""
			
			set FieldName = $piece($get(^WWW003(0,pidClass,intField,1)),"~",25)  ; Property Name
			set FormName  = $piece($get(^WWW003(0,pidClass,intField,1)),"~",2)   ; Caption in Forms
			do DefineConst(gINC,intField,pidClass,FieldName,FormName,1)
		}
		
		set intField = ""
		for {
			set intField = $order(^WWW002(0,pidClass,intField))
			quit:intField=""
			
			set FieldName = $piece($get(^WWW002(0,pidClass,intField,1)),"~",25)  ; Property Name
			set FormName  = $piece($get(^WWW002(0,pidClass,intField,1)),"~",2)   ; Caption in Forms
			do DefineConst(gINC,intField,pidClass,FieldName,FormName)
		}
		set @gINC@($increment(@gINC@(0))) = ""
	}
	quit
	
	
DefineConst(gINC,intField,idClass,FieldName,FormName,pblnField=0)
	set idClass   = $translate(idClass,".","")
	set FieldName = $translate(FieldName,"_","")
	
	if pblnField {
		set @gINC@($increment(@gINC@(0))) = "#define "_idClass_FieldName_"(%obj) $piece(%obj,"""_Y_""","_intField_")"
		set @gINC@($increment(@gINC@(0))) = "#define Fld"_idClass_FieldName_" "_intField
		set @gINC@($increment(@gINC@(0))) = "#define Str"_idClass_FieldName_" $$GetPropertyName^COMConst("""_idClass_""","_intField_")"
	
	} else {
		set @gINC@($increment(@gINC@(0))) = "#define Fld"_idClass_FieldName_" "_intField
		set @gINC@($increment(@gINC@(0))) = "#define Str"_idClass_FieldName_" $$GetPropertyName^COMConst("""_idClass_""",,"_intField_")"
	}
	quit
	
	
GetClassesForModule(pstrModule,parrModules) 
	new idConst,lstClasses,idClass,objConst
	
	set lstClasses=""
	
	set pstrModule=$$Module(pstrModule) // SR15121
		
	if pstrModule="" {
		set idConst=""
	} else {
		set idConst=$order(^COMConst(0,pstrModule),-1)
	}
	for {
		set idConst=$order(^COMConst(0,idConst))
		quit:$extract(idConst,1,$length(pstrModule))'=pstrModule
		quit:idConst=""
		
		set objConst=$get(^COMConst(0,idConst,1))
		if $$$COMConstGenerate(objConst) {
			if $$$COMConstSubClasses(objConst) {
				set idClass=$order(^WWW002(0,idConst),-1)
				for {
					set idClass=$order(^WWW002(0,idClass))
					quit:$extract(idClass,1,$length(idConst))'=idConst
					
					set parrModules($$Module(idClass),idClass)=""
				}
			} else {
				set parrModules($$Module(idConst),idConst)=""
			}
		}
		
	}
	quit lstClasses
	
	
Module(pidClass) 
	if $extract(pidClass,1,2)="IN" {
		set pidClass = "IN"
	
	} elseif $extract(pidClass,1,2)="TS" {
		set pidClass = "TS"
	
	} elseif $extract(pidClass,1,2)="WF" {
		set pidClass = "WF"
	
	} else {
		set pidClass = $extract(pidClass,1,3)
	}
	quit pidClass
	
]]></Routine>
</Export>