<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMDifferences" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMTest
	
#include WWWConst
#include COMSYS 
 
	new SCHTEST
	new SCHTESTRoutines
	new SCHTESTClass
	new blnSetup
	;*************************************** Create Project ************************************************** 
 
Project(pstrNamespace1,pstrNamespace2,pstrPrefix)
	;-------------------------------------------------------------------------------
	; Run from a terminal prompt.  Creates a studio package that contains only routines
	; that are different between the two specified namespaces.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 23-Mar-2010	shobby	SR17248: COMGridEditParameter.
	; 21-Sep-2009	shobby	SRAdhoc: Release the lock on the project just created.
	; 17-Sep-2008	shobby	SRAdhoc: Created
	;-------------------------------------------------------------------------------
	new objProject,objProjectItem,strStatus,err,idProject
	
	set idProject = "a"
	
	set strStatus = ##class(%Studio.Project).Delete(idProject)
	do Error(strStatus)
	set objProject = ##class(%Studio.Project).%New()
	set objProject.Name = idProject
	do Items(.objProject,pstrNamespace1,pstrNamespace2,pstrPrefix)
	;do Classes(pstrNamespace1,pstrNamespace2,.objProject)
	set strStatus = objProject.%Save(idProject)
	if $$$ISOK(strStatus) set strStatus = objProject.%Close()
	if $$$ISOK(strStatus) set strStatus = objProject.Unlock()
	lock -^oddPROJECT("a")  ;dont' know why the unlock doesn't work.
	kill objProject
	do Error(strStatus)
	quit
	
	
Classes(pstrNamespace1,pstrNamespace2,pobjProject)
	;-------------------------------------------------------------------------------
	; Call out to find class differences in COMUtilCmp
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 20-Feb-2009	shobby	SRAdhoc: Created
	;-------------------------------------------------------------------------------
	new lstClasses,loop,strStatus
	
	set lstClasses=$$CompareOBJ2^COMUtilCmp(pstrNamespace1,pstrNamespace2)
	for loop=1:1:$listlength(lstClasses) {
		set strStatus=pobjProject.AddItem($listget(lstClasses,loop),"CLS")
	}
	quit
 
Items(pobjProject,pstrNamespace1,pstrNamespace2,pstrPrefix)
	;-------------------------------------------------------------------------------
	; 21-Sep-2009	shobby	SRAdhoc: Cache2008 requires the .MAC in the first parameter.
	;-------------------------------------------------------------------------------
	new idRoutine,strMessage,strStatus
	
	set idRoutine = ""
	for {
		set idRoutine = $order(^[pstrNamespace1]rMAC(idRoutine))
		quit:idRoutine=""
		
		if $extract(idRoutine,1,$length(pstrPrefix))=pstrPrefix {
			write !, idRoutine
			set strMessage = $$CompareRoutine^TSCompareRoutines(pstrNamespace1,pstrNamespace2,idRoutine)
			if strMessage'="" {
				set strStatus = pobjProject.AddItem(idRoutine_".MAC","MAC") ;21-Sep-2009
				do Error(strStatus)
			}
		}
	}
	quit
	
	
Error(pstrStatus)
	new err
	do $SYSTEM.Status.DecomposeStatus(strStatus,.err)
	if $data(err) write !,"Error:"_err_","_err(1)
	quit 
 
 
 
	;************************************************************************************************************ 
 
Setup(pstrType="")
	new lstData,lstRoutines
	
	set lstData=""
	if SCHTEST="*" {
		set lstData=""
	} elseif SCHTEST="SR16437" {
		set lstRoutines=$$FindReferences(SCHTEST)
		if pstrType="MAC" 		  { set lstData=lstRoutines
		} elseif pstrType="FORM"  { set lstData=lstRoutines_";WWW003;WWW101;WWWDataExMessage;WWWDataExMessageRulesD;"
		} elseif pstrType="CLASS" { set lstData=lstRoutines_";WWW003;WWW101;WWWDataExMessage;WWWDataExMessageRulesD;"
		}
	} elseif $extract(SCHTEST,1,3)="COM" {
		if pstrType="MAC" 		  { set lstData=";COM*;"
		} elseif pstrType="FORM"  { set lstData=";COM*;"
		} elseif pstrType="CLASS" { set lstData=";COM*;"
		}
	} elseif SCHTEST="COMVIEW" {
		set lstRoutines=$$FindReferences(SCHTEST)
		if pstrType="MAC" 		  { set lstData=";COMView*;"
		} elseif pstrType="FORM"  { set lstData=";COMView*;"
		} elseif pstrType="CLASS" { set lstData=";COMView*;"
		}
	} elseif SCHTEST="GRID" {
		set lstRoutines=$$FindReferences(SCHTEST)
		if pstrType="MAC" 		  { set lstData=";COMGrid*;"
		} elseif pstrType="FORM"  { set lstData=";COMGrid*;"
		} elseif pstrType="CLASS" { set lstData=";COMGrid*;"
		}
	} elseif $extract(SCHTEST,1,2)'="" {
		set lstRoutines=$$FindReferences(SCHTEST)
		if pstrType="MAC" 		  { set lstData=lstRoutines
		} elseif pstrType="FORM"  { set lstData=lstRoutines_";"_SCHTESTClass
		} elseif pstrType="CLASS" { set lstData=lstRoutines_";"_SCHTESTClass
		}
	}
	quit lstData
 
 
FindReferences(pstrSRNumber="")
	;-------------------------------------------------------------------------------
	; Look for references to the SR in all routines
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 05-Jun-2008	shobby	SRAdhoc: Finds class references in routines and adds to
	;							list of things to check
	; 03-Mar-2008	shobby	SRAdhoc: Created
	;-------------------------------------------------------------------------------
	;new lstRoutines,idRoutine,idVersion,idLine,strLine,arrRoutines,intPiece,strGlobal,strPiece,arrClass
	
	if $get(blnSetup)'="" {
		set lstRoutines = SCHTESTRoutines
	
	} else {
		set lstRoutines = ""
		set idRoutine   = ""
		for {
			set idRoutine = $order(^rMAC(idRoutine))
			quit:idRoutine=""
			
			if $extract(pstrSRNumber,1,2)="SR" {
				set idVersion = ""
				for {
					set idVersion = $order(^rMAC(idRoutine,idVersion))
					quit:idVersion=""
					
					set idLine = ""
					for {
						set idLine = $order(^rMAC(idRoutine,idVersion,idLine))
						quit:idLine=""
						
						set strLine = $get(^rMAC(idRoutine,idVersion,idLine))
						if strLine[pstrSRNumber set arrRoutines(idRoutine) = ""
					}
				}
			} elseif $extract(idRoutine,1,$length(pstrSRNumber))=pstrSRNumber {
				set arrRoutines(idRoutine) = ""
			}
		}
		/*
		set idRoutine=""
		for {
			set idRoutine=$order(arrRoutines(idRoutine))
			quit:idRoutine=""
			
			set idVersion=""
			for {
				set idVersion=$order(^rMAC(idRoutine,idVersion))
				quit:idVersion=""
				
				set idLine=""
				for {
					set idLine=$order(^rMAC(idRoutine,idVersion,idLine))
					quit:idLine=""
					
					set strLine=$get(^rMAC(idRoutine,idVersion,idLine))
					if strLine["^" {
						for intPiece=2:1:$length(strLine,"^") {
							set strPiece=$piece(strLine,"^",intPiece)
							set strGlobal=$piece(strPiece,"(",1)
							if strGlobal'="" {
								if $data(^WWW001(0,strGlobal)) {
									set arrClass(strGlobal)=""
								}
							}
						}
					}
				}
			}
		}*/
 
		set idRoutine = ";"
		for {
			set idRoutine = $order(arrRoutines(idRoutine))
			quit:idRoutine=""
			
			set lstRoutines = lstRoutines_idRoutine_";"
		}
		;break
		set SCHTESTClass = ";"
		set strGlobal    = ";"
		for {
			set strGlobal = $order(arrClass(strGlobal))
			quit:strGlobal=""
			
			if '$data(arrRoutines(strGlobal)) {  ;Ignore if already added as a routine.
				set SCHTESTClass = SCHTESTClass_strGlobal_";"
			}
		}
		set SCHTESTRoutines = lstRoutines
		set blnSetup = $$$YES
	}
	quit lstRoutines
	
	
Differences(pstrNamespace1="",pstrNamespace2="",pintTest=0,pblnBasicMetadataTest=$$$NO)
	new intCount
	
	set SCHTEST = pintTest
	kill blnSetup
	set intCount = 0
	set intCount = intCount+$$FormDifferences(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest)
	set intCount = intCount+$$KeyTest3(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest,"^WWW124",";22;73;75;","Form Button Differences")  ;22=Authorisation ;73=Date Created ;75=Date Changed
	set intCount = intCount+$$KeyTest3(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest,"^WWW1203",";5;6;","Form Tab Differences")  ;5=Access For Module 6=User Access
	;et intCount = intCount+$$KeyTest3(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest,"^WWW1221","","Manual Language Text")  ;5=Access For Module 6=User Access
	set intCount = intCount+$$FormPrimaryKeyDifferences(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest)
	set intCount = intCount+$$FormDataFieldDifferences(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest)
	set intCount = intCount+$$CoreRuleDifferences(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest)
	set intCount = intCount+$$ClassDifferences(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest)
	set intCount = intCount+$$ClassHooksDifferences(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest)
	set intCount = intCount+$$ClassPrimaryKeyDifferences(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest)
	set intCount = intCount+$$ClassDataFieldDifferences(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest)
	set intCount = intCount+$$GridSetupDifferences(pstrNamespace1,pstrNamespace2,pblnBasicMetadataTest)    ; SR17248?
	if 'pblnBasicMetadataTest {
		set intCount = intCount+$$RoutineDifferences(pstrNamespace1,pstrNamespace2)
		set intCount = intCount+$$WWW009Differences(pstrNamespace1,pstrNamespace2)
	}
	write !,!,"Total="_intCount
	quit
 
WWW009Differences(pstrNamespace1="",pstrNamespace2="")
	new lstInclude,idRoutine,intRoutine,int,intLine,strLine,idText
	new strPrefix,idLanguage,intCount,arrProblems
	
	write !,"----------------Language Text-------------------"
	do ^WWWVAR
	set intCount=0
	
	set lstInclude=$$Setup("MAC")
	for intRoutine=1:1:$length(lstInclude,";") {
		set idRoutine=$piece(lstInclude,";",intRoutine)
		if idRoutine'="" {
			set int=""
			for {
				set int=$order(^[pstrNamespace1]rMAC(idRoutine,int))
				quit:int=""
				
				set intLine=""
				for {
					set intLine=$order(^[pstrNamespace1]rMAC(idRoutine,int,intLine))
					quit:intLine=""
					
					set strLine=$get(^[pstrNamespace1]rMAC(idRoutine,int,intLine))
					for strPrefix="""IN","""WWW","""COM","""Com" {
						if (strLine[strPrefix) {
							set idText=$translate(strPrefix_$piece($piece(strLine,strPrefix,2),"""",1),"""")
							if idText'="" {
								for idLanguage="EN","PT" {
									if $data(^[pstrNamespace1]WWW009(0,"EN",idText)) {
										if ($get(^[pstrNamespace1]WWW009(0,idLanguage,idText,1))'=$get(^[pstrNamespace2]WWW009(0,idLanguage,idText,1))) {
											set arrProblems(idText,idLanguage) = "Language Text different."
										
										} elseif ($get(^[pstrNamespace1]WWW009(0,idLanguage,idText,1))=""){
											set arrProblems(idText,idLanguage) = "Language Text is missing."
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	set idText = ""
	for { 
		set idText = $order(arrProblems(idText))
		quit:idText=""
		
		set idLanguage = ""
		for {
			set idLanguage = $order(arrProblems(idText,idLanguage))
			quit:idLanguage=""
			
			write !,idText_","_idLanguage_":"_arrProblems(idText,idLanguage)
			set intCount = intCount+1
		}
	}
	write $$FormatEnd(intCount)
	quit intCount
	
	
FormDifferences(pstrNamespace1="",pstrNamespace2="",pblnBasicMetadataTest=$$$NO)
	new idForm,intPiece,obj1,obj2,lstInclude
	
	write !,"----------------Form Differences-------------------"
	do ^WWWVAR
	set intCount = 0
	if pstrNamespace1="" set pstrNamespace1 = $zutil(5)
	
	set lstInclude = $$Setup("FORM")
	set idForm = ""
	for {
		set idForm = $order(^[pstrNamespace1]WWW120(0,idForm))
		quit:idForm=""
		
		if $$Test(lstInclude,idForm) {
			set obj2=$get(^[pstrNamespace2]WWW120(0,idForm,1))
			if (obj2'="") || 'pblnBasicMetadataTest {
				;may not want to report if it is a new object
				set obj1 = $get(^[pstrNamespace1]WWW120(0,idForm,1))
				for intPiece=1:1:$length(obj1,Y) {
					continue:intPiece=50  ;Number of hits
					continue:intPiece=110 ;form information
					;continue:intPiece=22 ;User access
					
					if $piece(obj1,Y,intPiece)'=$piece(obj2,Y,intPiece) {
						set intCount = intCount+1
						write !,$$Format(idForm,13)_"Field "_$justify(intPiece,3)_" ("_$$Field("WWW120",intPiece)_")"
						write !,$$Format("("_pstrNamespace1_")",12,$$$YES)_$piece(obj1,Y,intPiece)
						write !,$$Format("("_pstrNamespace2_")",12,$$$YES)_$piece(obj2,Y,intPiece)
						do LastChanged("WWW120",idForm,,pblnBasicMetadataTest)
						write !,"IMPACT: "
						if (",94,")[(","_intPiece_",") {
							write "MEDIUM.  Change in screen operation."
						} elseif (",14,16,93,59,")[(","_intPiece_",") {
							write "HIGH.  Change in business logic."
						} elseif ("")[(","_intPiece_",") {
						} 
					}
				}
			}
		}
	}
	write $$FormatEnd(intCount)
	quit intCount
	
	
KeyTest3(pstrNamespace1="",pstrNamespace2="",pblnBasicMetadataTest=$$$NO,pstrGlobal,plstExclude,pstrHeading)
	new intPiece,obj1,obj2,lstInclude,idKey1,idKey2,idKey3,strGlobal
	
	write !,"----------------"_pstrHeading_"-------------------"
	do ^WWWVAR
	set intCount  = 0
	set strGlobal = $piece(pstrGlobal,"^",2)
	if pstrNamespace1="" set pstrNamespace1 = $zutil(5)
	
	set lstInclude = $$Setup("FORM")
	set idKey1 = ""
	for {
		set idKey1 = $order(@pstrGlobal@(0,idKey1))
		quit:idKey1=""
		
		set idKey2 = ""
		for {
			set idKey2 = $order(@pstrGlobal@(0,idKey1,idKey2))
			quit:idKey2=""
			
			set idKey3 = ""
			for {
				set idKey3 = $order(@pstrGlobal@(0,idKey1,idKey2,idKey3))
				quit:idKey3=""
				
				if $$Test(lstInclude,idKey1) {
					xecute "set obj2=$get(^[pstrNamespace2]"_strGlobal_"(0,idKey1,idKey2,idKey3,1))"
					;if (obj2'="") || 'pblnBasicMetadataTest {
					if 'pblnBasicMetadataTest {
						;may not want to report if it is a new object
						xecute "set obj1=$get(^[pstrNamespace1]"_strGlobal_"(0,idKey1,idKey2,idKey3,1))"
						for intPiece=1:1:$length(obj1,Y) {
							continue:(plstExclude[(";"_intPiece_";"))
							if $piece(obj1,Y,intPiece)'=$piece(obj2,Y,intPiece) {
								set intCount=intCount+1
								write !,$$Format(idKey1_" "_idKey2_" "_idKey3,40)_"Field "_$justify(intPiece,3)_" ("_$$Field(strGlobal,intPiece)_")"
								write !,$$Format("("_pstrNamespace1_")",12,$$$YES)_$piece(obj1,Y,intPiece)
								write !,$$Format("("_pstrNamespace2_")",12,$$$YES)_$piece(obj2,Y,intPiece)
							}
						}
					}
				}
			}
		}
	}
	write $$FormatEnd(intCount)
	quit intCount
 
 
RoutineDifferences(pstrNamespace1="",pstrNamespace2="")
	new intCount,idRoutine,strMessage,lstInclude
	
	set intCount   = 0
	set lstInclude = $$Setup("MAC")
	set idRoutine  = ""
	for {
		set idRoutine = $order(^[pstrNamespace1]rMAC(idRoutine))
		quit:idRoutine=""
		
		if $$Test(lstInclude,idRoutine) {
			set strMessage = $$CompareRoutine^TSCompareRoutines(pstrNamespace1,pstrNamespace2,idRoutine)
			if strMessage'="" {
				set intCount = intCount+1
				write !,"Routine "_$$Format(idRoutine,20,$$$NO)_strMessage
			}
		}
	}
	quit intCount
 
Test(plstInclude,pid)
	new blnFlag,loop,strMatch
	
	if (";VAR;APM;DVD;DEV;OBS;PJO;ROB;idx;")[(";"_$extract(pid,1,3)_";") {
		set blnFlag=$$$NO
	} elseif (";WF;zz;LW;ZZ;")[(";"_$extract(pid,1,2)_";") {
		set blnFlag=$$$NO
	} elseif (";User;BUIN;INDA;VIEW;DISC;SYS.;")[(";"_$extract(pid,1,4)_";") {
		set blnFlag=$$$NO
	} elseif (";TERMIN;Report;CSTRUN;REPRUN;")[(";"_$extract(pid,1,6)_";") {
		set blnFlag=$$$NO
	} elseif $extract(pid,1,1)="z" {
		set blnFlag=$$$NO
	} elseif $extract(pid,1,5)="PATCH" {
		set blnFlag=$$$NO
	} elseif $extract(pid,1,7)="Gerbils" {
		set blnFlag=$$$NO
	} elseif $extract(pid,1,8)="CacheSql" {
		set blnFlag=$$$NO
	} elseif $extract(pid,1,14)="INForeRuleComp" {
		set blnFlag=$$$NO
	} else {
		if (plstInclude="") {
			set blnFlag=$$$YES
		} else {
			for loop=1:1:$length(plstInclude,";") {
				set blnFlag  = $$$NO
				set strMatch = $piece(plstInclude,";",loop)
				if strMatch'="" {
					if strMatch["*" {
						set blnFlag = ($piece(strMatch,"*",1)=$extract(pid,1,$length($piece(strMatch,"*",1))))
					} else {
						set blnFlag = (strMatch=pid)
					}
				}
				quit:blnFlag
			}
		}
	}
	quit blnFlag
	
	
FormDataFieldDifferences(pstrNamespace1="",pstrNamespace2="",pblnBasicMetadataTest=$$$NO)
	new idForm,idField,intPiece,obj1,obj2,intCount,lstInclude
	
	write !,"----------Form Data Field Differences--------------"
	do ^WWWVAR
	set intCount   = 0
	set lstInclude = $$Setup("FORM")
	if pstrNamespace1="" set pstrNamespace1 = $zutil(5)
	
	set idForm = ""
	for {
		set idForm = $order(^[pstrNamespace1]WWW122(0,idForm))
		quit:idForm=""
		
		if $$Test(lstInclude,idForm) {
			set idField = ""
			for {
				set idField = $order(^[pstrNamespace1]WWW122(0,idForm,idField))
				quit:idField=""
				
				set obj2=$get(^[pstrNamespace2]WWW122(0,idForm,idField,1))
				if (obj2'="") || 'pblnBasicMetadataTest {
					;may not want to report if it is a new field
					set obj1 = $get(^[pstrNamespace1]WWW122(0,idForm,idField,1))
					for intPiece=1:1:$length(obj1,Y) {
						continue:(idForm="INWEINVELINE")&&(+$piece($piece(obj1,Y,12),"Count ",2)>0) ;Special test for dynamically added stocktake count fields.
						continue:(idForm="INWEINVELINE")&&(+$piece($piece(obj2,Y,12),"Count ",2)>0) ;Special test for dynamically added stocktake count fields.
						
						if $piece(obj1,Y,intPiece)'=$piece(obj2,Y,intPiece) {
							continue:intPiece=103 ;Changed by
							continue:intPiece=100 ;Date created
							continue:intPiece=101 ;Created by
							continue:intPiece=102 ;Date Changed
							continue:(intPiece=39)&&pblnBasicMetadataTest  ;Group Name
							
							set intCount = intCount+1
							write !,idForm_" Piece "_$justify(intPiece,3)_"("_$$Field("WWW122",intPiece)_") of data field "_idField_" is different."
							write !,$$Format("("_pstrNamespace1_")",12,$$$YES)_$piece(obj1,Y,intPiece)
							write !,$$Format("("_pstrNamespace2_")",12,$$$YES)_$piece(obj2,Y,intPiece)
							do LastChanged("WWW122",idForm,idField,pblnBasicMetadataTest)
							write !,"IMPACT: "
							if (idForm="WWW0121C")&&($$$WWW122ManualCaption(obj1)="_FREE") {
								write "LOW.  New free field which will be in core in build 1.42"
							} elseif (",94,")[(","_intPiece_",") {
								write "LOW.  Change in screen operation."
							} elseif (",25,33,30,32,13,")[(","_intPiece_",") {
								write "HIGH.  Change in business logic."
							} elseif (",88,23,94,15,")[(","_intPiece_",") {
								write "LOW."
							} elseif (",2,")[(","_intPiece_",") {
								write "LOW. Can be done with customisation."
							} elseif (",103,102,")[(","_intPiece_",") {
								write "LOW. Indication that someone has been messing with something."
							} else {
								write "Unknown."
							}
							write !
						}
					}
				}
			}
		}
	}
	write $$FormatEnd(intCount)
	quit intCount
	
	
ClassPrimaryKeyDifferences(pstrNamespace1="",pstrNamespace2="",pblnBasicMetadataTest=$$$NO)
	new idForm,idField,intPiece,obj1,obj2,intCount,lstInclude
	
	write !,"----------Class Primary Key Differences------------"
	do ^WWWVAR
	set intCount   = 0
	set lstInclude = $$Setup("CLASS")
	if pstrNamespace1="" set pstrNamespace1 = $zutil(5)
	
	set idForm = ""
	for {
		set idForm = $order(^[pstrNamespace1]WWW002(0,idForm))
		quit:idForm=""
		
		if $$Test(lstInclude,idForm) {
			set idField = ""
			for {
				set idField = $order(^[pstrNamespace1]WWW002(0,idForm,idField))
				quit:idField=""
				
				set obj2 = $get(^[pstrNamespace2]WWW002(0,idForm,idField,1))
				if (obj2'="") || 'pblnBasicMetadataTest {
					;may not want to report if it is a new field
					set obj1 = $get(^[pstrNamespace1]WWW002(0,idForm,idField,1))
					for intPiece=1:1:$length(obj1,Y) {
						;continue:intPiece=2  ;Automatic sequence counter
						;continue:intPiece=110 ;form information
						if $piece(obj1,Y,intPiece)'=$piece(obj2,Y,intPiece) {
							set intCount = intCount+1
							write !,idForm_" Piece "_$justify(intPiece,3)_"("_$$Field("WWW002",intPiece)_") of primary key "_idField_" is different."
						}
					}
				}
			}
		}
	}
	write $$FormatEnd(intCount)
	quit intCount
 
	
 
FormPrimaryKeyDifferences(pstrNamespace1="",pstrNamespace2="",pblnBasicMetadataTest=$$$NO)
	new idForm,idField,intPiece,obj1,obj2,lstInclude
	
	write !,"----------Form Primary Key Differences-------------"
	do ^WWWVAR
	set intCount = 0
	if pstrNamespace1="" set pstrNamespace1 = $zutil(5)
 
	set lstInclude = $$Setup("FORM")	
	set idForm = ""
	for {
		set idForm = $order(^[pstrNamespace1]WWW121(0,idForm))
		quit:idForm=""
		
		if $$Test(lstInclude,idForm) {
			set idField = ""
			for {
				set idField = $order(^[pstrNamespace1]WWW121(0,idForm,idField))
				quit:idField=""
				
				set obj2 = $get(^[pstrNamespace2]WWW121(0,idForm,idField,1))
				if (obj2'="") || 'pblnBasicMetadataTest {
					;may not want to report if it is a new field
					set obj1 = $get(^[pstrNamespace1]WWW121(0,idForm,idField,1))
					for intPiece=1:1:$length(obj1,Y) {
						continue:intPiece=2  ;Automatic sequence counter
						continue:intPiece=100 ;Date Created.
						continue:intPiece=102 ;Date Changed.
						if $piece(obj1,Y,intPiece)'=$piece(obj2,Y,intPiece) {
							set intCount = intCount+1
							write !,idForm_" Piece "_$justify(intPiece,3)_"("_$$Field("WWW121",intPiece)_") of primary key "_idField_" is different."
						}
					}
				}
			}
		}
	}
	write $$FormatEnd(intCount)
	quit intCount
	
	
ClassDataFieldDifferences(pstrNamespace1="",pstrNamespace2="",pblnBasicMetadataTest=$$$NO)
	new idForm,idField,intPiece,obj1,obj2,lstInclude
	
	write !,"----------------Class data field-------------------"
	do ^WWWVAR
	set intCount = 0
	if pstrNamespace1="" set pstrNamespace1 = $zutil(5)
	set lstInclude = $$Setup("CLASS")
	set idForm = ""
	for {
		set idForm = $order(^[pstrNamespace1]WWW003(0,idForm))
		quit:idForm=""
		
		if $$Test(lstInclude,idForm) {
			set idField = ""
			for {
				set idField = $order(^[pstrNamespace1]WWW003(0,idForm,idField))
				quit:idField=""
				
				set obj2=$get(^[pstrNamespace2]WWW003(0,idForm,idField,1))
				if (obj2'="") || 'pblnBasicMetadataTest {
					;may not want to report if it is a new field
					set obj1 = $get(^[pstrNamespace1]WWW003(0,idForm,idField,1))
					for intPiece=1:1:$length(obj1,Y) {
						;continue:intPiece=2  ;Automatic sequence counter
						;continue:intPiece=100 ;Date Created
						if $piece(obj1,Y,intPiece)'=$piece(obj2,Y,intPiece) {
							set intCount = intCount+1
							write !,idForm_" Piece "_$justify(intPiece,3)_"("_$$Field("WWW003",intPiece)_") of class field "_idField_" is different."
							write !,$$Format("("_pstrNamespace1_")",12,$$$YES)_$piece(obj1,Y,intPiece)
							write !,$$Format("("_pstrNamespace2_")",12,$$$YES)_$piece(obj2,Y,intPiece)
							do LastChanged("WWW003",idForm,idField,pblnBasicMetadataTest)
						}
					}
				}
			}
		}
	}
	write $$FormatEnd(intCount)
	quit intCount
	
	
LastChanged(pidObject,pidForm,pidField="",pblnBasicMetadataTest=$$$NO)
	new objWWW120,obj,strText
	
	set objWWW120=$get(^WWW120(0,pidObject,1))
	xecute "set obj=$get(^"_pidObject_"(0,pidForm,"_$select(pidField="":"",1:pidField_",")_"1))"
	if $$$WWW120DataFieldEntryDate(objWWW120)'="" {
		set strText=$$$TRIMWS($piece(obj,Y,$$$WWW120DataFieldEntryDate(objWWW120)))
		if strText'="" set strText=$zdatetime(strText,3)
		write !,$$Format("Created On:"_strText,60,$$$YES)
	}
	if $$$WWW120DataFieldEnteredBy(objWWW120)'="" {
		write !,$$Format("Created By:"_$piece(obj,Y,$$$WWW120DataFieldEnteredBy(objWWW120)),60,$$$YES)
	}
	if $$$WWW120DataFieldForDateModified(objWWW120)'="" {
		set strText=$$$TRIMWS($piece(obj,Y,$$$WWW120DataFieldForDateModified(objWWW120)))
		if strText'="" set strText=$zdatetime(strText,3)
		write !,$$Format("Changed On:"_strText,60,$$$YES)
	}
	if $$$WWW120DataFieldForModifiedBy(objWWW120)'="" {
		write !,$$Format("Changed By:"_$piece(obj,Y,$$$WWW120DataFieldForModifiedBy(objWWW120)),60,$$$YES)
	}
	quit
 
ClassDifferences(pstrNamespace1="",pstrNamespace2="",pblnBasicMetadataTest=$$$NO)
	new idForm,intPiece,obj1,obj2,lstInclude
	
	write !,"----------------Class Differences------------------"
	do ^WWWVAR
	set intCount = 0
	if pstrNamespace1="" set pstrNamespace1 = $zutil(5)
	set lstInclude = $$Setup("CLASS")
	set idForm = ""
	for {
		set idForm = $order(^[pstrNamespace1]WWW001(0,idForm))
		quit:idForm=""
		
		if $$Test(lstInclude,idForm) {
			set obj2 = $get(^[pstrNamespace2]WWW001(0,idForm,1))
			if (obj2'="") || 'pblnBasicMetadataTest {
				;may not want to report if it is a new object
				set obj1 = $get(^[pstrNamespace1]WWW001(0,idForm,1))
				for intPiece=1:1:$length(obj1,Y) {
					;continue:intPiece=50  ;Number of hits
					;continue:intPiece=110 ;form information
					if $piece(obj1,Y,intPiece)'=$piece(obj2,Y,intPiece) {
						set intCount = intCount+1
						write !,"Piece "_$justify(intPiece,3)_"("_$$Field("WWW001",intPiece)_") of class "_idForm_" is different."
					}
				}
			}
		}
	}
	write $$FormatEnd(intCount)
	quit intCount
	
	
ClassHooksDifferences(pstrNamespace1="",pstrNamespace2="",pblnBasicMetadataTest=$$$NO)
	new idForm,intPiece,obj1,obj2,lstInclude,intNumber
	
	write !,"----------------Class Hooks Differences------------------"
	do ^WWWVAR
	set intCount=0
	if pstrNamespace1="" set pstrNamespace1=$zutil(5)
	set lstInclude=$$Setup("CLASS")
	set idForm=""
	for {
		set idForm = $order(^[pstrNamespace1]WWW001Hook(0,idForm))
		quit:idForm=""
		
	    set intNumber = ""
	    for {
		    set intNumber = $order(^[pstrNamespace1]WWW001Hook(0,idForm,intNumber))
		    quit:intNumber=""
		    
			if $$Test(lstInclude,idForm) {
				set obj2 = $get(^[pstrNamespace2]WWW001Hook(0,idForm,intNumber,1))
				;if (obj2'="") || 'pblnBasicMetadataTest {
					;may not want to report if it is a new object
					set obj1=$get(^[pstrNamespace1]WWW001Hook(0,idForm,intNumber,1))
					for intPiece=1:1:$length(obj1,Y) {
						;continue:intPiece=50  ;Number of hits
						;continue:intPiece=110 ;form information
						if $piece(obj1,Y,intPiece)'=$piece(obj2,Y,intPiece) {
							set intCount=intCount+1
							write !,"Piece "_$justify(intPiece,3)_"("_$$Field("WWW001Hook",intPiece)_") of class "_idForm_" is different."
						}
					}
				;}
			}
	    }
	}
	write $$FormatEnd(intCount)
	quit intCount
	
	
Field(pstrObject,pintField)
	new objWWW003
	
	set objWWW003 = $get(^WWW003(0,pstrObject,pintField,1))
	quit $$$TRIMWS($$$WWW003PropertyDescription(objWWW003))
	
	
Format(pstrText="",pintWidth=0,pblnFlag=$$$NO)
	new strText
	
	set strText = ""
	if pblnFlag set strText = "......       "
	set strText = strText_$extract(pstrText_"                              ",1,pintWidth)
	quit strText
	
	
FormatEnd(pintCount=0)
	new strText
	
	set strText=""
	if pintCount>0 {
		set strText=$$$CRLF_"---------------------------------------------------"_$$$CRLF_$$$CRLF
	}
	quit strText
	
	
GridSetupDifferences(pstrNamespace1="",pstrNamespace2="",pblnBasicMetadataTest=$$$NO)   ; SR17248?
	new idForm,intPiece,obj1,obj2,lstInclude,intNumber
	
	write !,"----------------Grid Setup Differences------------------"
	do ^WWWVAR
	set intCount = 0
	if pstrNamespace1="" set pstrNamespace1 = $zutil(5)
	set lstInclude = $$Setup("FORM")
	set idForm = ""
	for {
		set idForm = $order(^[pstrNamespace1]COMGridEditParameter(0,idForm))
		quit:idForm=""
		
	    set intNumber = ""
	    for {
		    set intNumber = $order(^[pstrNamespace1]COMGridEditParameter(0,idForm,intNumber))
		    quit:intNumber=""
		    
			if $$Test(lstInclude,idForm) {
				set obj2 = $get(^[pstrNamespace2]COMGridEditParameter(0,idForm,intNumber,1))
				;if (obj2'="") || 'pblnBasicMetadataTest {
					;may not want to report if it is a new object
					set obj1 = $get(^[pstrNamespace1]COMGridEditParameter(0,idForm,intNumber,1))
					for intPiece=1:1:$length(obj1,Y) {
						;continue:intPiece=50  ;Number of hits
						;continue:intPiece=110 ;form information
						if $piece(obj1,Y,intPiece)'=$piece(obj2,Y,intPiece) {
							set intCount=intCount+1
							write !,"Piece "_$justify(intPiece,3)_"("_$$Field("COMGridEditParameter",intPiece)_") of grid "_idForm_" is different."
						}
					}
				;}
			}
	    }
	}
	write $$FormatEnd(intCount)
	quit intCount

CoreRuleDifferences(pstrNamespace1="",pstrNamespace2="",pblnBasicMetadataTest=$$$NO)
	new idForm,idField,intPiece,obj1,obj2,intCount,lstInclude,idRule
	
	write !,"----------Core Rule Differences--------------"
	$$$VAR
	set intCount   = 0
	set lstInclude = $$Setup("FORM")
	if pstrNamespace1="" set pstrNamespace1 = $zutil(5)
	
	set idForm = "" for { set idForm = $order(^[pstrNamespace1]WWW122C2(0,idForm)) quit:idForm=""
		if $$Test(lstInclude,idForm) {
			set idField = "" for { set idField = $order(^[pstrNamespace1]WWW122C2(0,idForm,idField)) quit:idField=""
				set idRule = "" for { set idRule = $order(^[pstrNamespace1]WWW122C2(0,idForm,idField,idRule)) quit:idRule=""
				
					set obj2=$get(^[pstrNamespace2]WWW122C2(0,idForm,idField,idRule,1))
					if (obj2'="") || 'pblnBasicMetadataTest {
						;may not want to report if it is a new field
						set obj1 = $get(^[pstrNamespace1]WWW122C2(0,idForm,idField,idRule,1))
						for intPiece=1:1:$length(obj1,Y) {
							continue:(idForm="INWEINVELINE")&&(+$piece($piece(obj1,Y,12),"Count ",2)>0) ;Special test for dynamically added stocktake count fields.
							continue:(idForm="INWEINVELINE")&&(+$piece($piece(obj2,Y,12),"Count ",2)>0) ;Special test for dynamically added stocktake count fields.
						
							if $piece(obj1,Y,intPiece)'=$piece(obj2,Y,intPiece) {
								;continue:intPiece=103 ;Changed by
								;continue:intPiece=100 ;Date created
								;continue:intPiece=101 ;Created by
								;continue:intPiece=102 ;Date Changed
								;continue:(intPiece=39)&&pblnBasicMetadataTest  ;Group Name
							
								set intCount = intCount+1
								write !,idForm_" Piece "_$justify(intPiece,3)_"("_$$Field("WWW122C2",intPiece)_") of data field "_idField_" is different."
								write !,$$Format("("_pstrNamespace1_")",12,$$$YES)_$piece(obj1,Y,intPiece)
								write !,$$Format("("_pstrNamespace2_")",12,$$$YES)_$piece(obj2,Y,intPiece)
								do LastChanged("WWW122C2",idForm,idField,pblnBasicMetadataTest)
								write !
							}
						}
					}
				}
			}
		}
	}
	write $$FormatEnd(intCount)
	quit intCount

	
]]></Routine>
</Export>