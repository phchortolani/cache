<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INARTUtilities" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INARTUtilities
	
#include COMSYS
#include INConst
	
LoadUnitOfMeasureList(pidItem)
	;-------------------------------------------------------------------------------
	; Build the Unit of Measure COMTempList for the Unit field in Transfer Order Line.
	;
	; Params:
	; pidItem - Item Id
	;
	; ByRefs: None
	;
	; Returns: idUnitOfMeasure - INVENTORY unit of measure, blank if not
	;                            detailed on Item Master Data.
	;
	; History:
	; 21-Nov-2012	shobby	SR18205: Clear list without crashing if pidItem is blank
    ; 15-Aug-2006	JW		SR14826: Moved from INTFRUtilities. Changed YUSER to
    ;							pidItem in COMTempList
	; 13-Apr-2006	PO		SR14427: Created
	;-------------------------------------------------------------------------------
	new idItem,idUnitOfMeasure
 	
	set idUnitOfMeasure = ""		;SR18205
 	if pidItem'="" {				;SR18205
		kill ^COMTempList(0,pidItem,"UOM")   ; FIXME : Potential process overlap see SR16864 <GRF>
 
		for {
			set idUnitOfMeasure = $order(^INARTPACK(0,pidItem,idUnitOfMeasure))
			quit:idUnitOfMeasure=""
 
			set ^COMTempList(0,pidItem,"UOM",idUnitOfMeasure,1) = $$$AppEnum("EINHEIT",idUnitOfMeasure)
		}
 	
		set idUnitOfMeasure = $$$INARTUnitofMeasure($get(^INART(0,pidItem,1)))
		set:idUnitOfMeasure'="" ^COMTempList(0,pidItem,"UOM",idUnitOfMeasure,1) = $$$AppEnum("EINHEIT",idUnitOfMeasure)
 	} 	
	quit idUnitOfMeasure			;SR18205
 
 
GetSupplierUOM(pidItem, pidSupplier)
	;-------------------------------------------------------------------------------
	; Get the Suppliers UOM
	; Build the Unit of Measure COMTempList for the Unit field in Transfer Order Line.
	;
	; Params:
	; pidItem - Item Id
	;
	; ByRefs: None
	;
	; Returns: idUnitOfMeasure - Supplier's Delivery Unit, INVENTORY unit of measure, blank if not
	;                            detailed on Item Master Data.
	;
	; History:
	; 03-Aug-2009	PPP		SR16815: Created
	;-------------------------------------------------------------------------------
	new idItem,idUnitOfMeasure
 	
	kill ^COMTempList(0,pidItem,"UOM")
 
	set idUnitOfMeasure=""
	for {
		set idUnitOfMeasure=$order(^INARTPACK(0,pidItem,idUnitOfMeasure))
		quit:idUnitOfMeasure=""
 
		set ^COMTempList(0,pidItem,"UOM",idUnitOfMeasure,1) = $$$AppEnum("EINHEIT",idUnitOfMeasure)
	}
 
 	if pidSupplier'="" {
 		set idUnitOfMeasure = $$$INARTKDeliveryQuantityUnit($get(^INARTK(0,pidItem,pidSupplier,1)))
 	}
	set:idUnitOfMeasure="" idUnitOfMeasure = $$$INARTUnitofMeasure($get(^INART(0,pidItem,1)))

	set:idUnitOfMeasure'="" ^COMTempList(0,pidItem,"UOM",idUnitOfMeasure,1) = $$$AppEnum("EINHEIT",idUnitOfMeasure)
 	
	quit idUnitOfMeasure


GetSupplierItemNo(pidItem,pidSupplier)
	;-------------------------------------------------------------------------------
	; Get the Suppliers Item No
	; 
	; Called By : LoadLines^INReceiptButton, Create^INReceiptLink, OnBlur^INRECSummary
	; 
	; Params: pidItem - Item Id
	;
	; Returns: Suppliers Item No
	;
	; History:
	; 09-Sep-2010	PPP		SR17492: Created
	;-------------------------------------------------------------------------------
	new strSupCode
 	
 	if pidSupplier'="" {
 		set strSupCode = $$$INARTKSupplierItemNo($get(^INARTK(0,pidItem,pidSupplier,1)))
 	}
	quit $get(strSupCode)


DefaultStkLoc(pidLocn,pidItem)    ; TO BE PHASED OUT WITH alLOC.dULocation BEING USED INSTEAD
	;-------------------------------------------------------------------------------
	; Get default storage
	;
	; look at ANM: Item Location Parameters 
	; 1.  Stock Item + Location						(^INARTLOCPAR)
	;     (Alphalinc >> Items >> Item Master Data >> ItemLocationParameter Button)
	;     a)	Receipt
	;     b)	On Hand
	; 2.  Stock Item + Storages						(^INARTLP)
	;     (Alphalinc >> Items >> Item Master Data >> ItemStockLocation Button)
	;     Take first alphanumeric entry.
	; 3.  Location Master Data						(^WWW0121)
	;     (Alphalinc >> System >> Company Parameters >> Edit Locations >> Storage Tab)
	;     a)	Receipt
	;     b)	On Hand
	; 4.  General Location Parameters for Location	(^INVORGB)
	;     (Alphalinc >> Program Parameters >> Edit General Parameters >> Location Button)
	;     a)	On Hand
	; 5.  Storage Places							(^INLP)
	;     (Alphalinc >> System >> Program Parameters >> Edit Storage)
	;     Take first alphanumeric entry.
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 24-Jan-2008	HQN		SR15625 Changed class signature dLocation to dULocation
	; 05-Dec-2007   PPP		Updated routine with INARTLOCPAR & WWW0121 default storage locations - SR15597
	; 30-Nov-2007   LB		Changed the return Value to idStorage - SR15597
    ; 31-Oct-2007	PPP		SR15597: Creation
	;-------------------------------------------------------------------------------
	;  See also : (alLOC.dULocation).GetDefaultStorage
	;-------------------------------------------------------------------------------
	new idStorage
	
	set idStorage=""
	
	; 1.  Stock Item + Location
	if pidItem'="" {
		set idStorage = $$$INARTLOCPARDefaultReceiptStorage($get(^INARTLOCPAR(0,pidItem,pidLocn,1)))
	}
	if idStorage="" {
		set idStorage = $$$INARTLOCPARDefaultOnHandStorage($get(^INARTLOCPAR(0,pidItem,pidLocn,1)))
	}
 	
 	; 2.  Stock Item + Storages      First item storage  (OLD NEED TO PHASE OUT)
	if idStorage="" {
		set idStorage = $order(^INARTLP(0,pidItem,pidLocn,""))
	}
	
	; 3.  Location Master Data
	if idStorage="" {
		set idStorage = $$$WWW0121ReceiptStorage($get(^WWW0121(0,0,pidLocn,1)))
	}
	if idStorage="" {
		set idStorage = $$$WWW0121OnHandStorage($get(^WWW0121(0,0,pidLocn,1)))
	}
	
	; 4.  General Location Parameters for Location
	if idStorage="" {
		set idStorage = $$$INVORGBOnHandLocation($get(^INVORGB(0,0,pidLocn,1)))
	}
	
	; 5.  Storage Places         no default - use first (OLD NEED TO PHASE OUT)
	if idStorage="" {
		set idStorage = $order(^INLP(0,pidLocn,""))
	}
	
	quit idStorage
	
]]></Routine>
</Export>