<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INPP00GenRule" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INPP00GenRule ; Price Plan Generate Rule
	
#include INConst
#include COMConst
#include COMSYS
	
	
OnAfterPrimaryKey(YKEY,YFELD)
	;-------------------------------------------------------------------------------
	; Lock the record once the prices have been generated.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 29-Jul-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	if ($$$INPP00GenRuleStatus(YFELD)=$$$EnumCOMSYSSTATUSUsed) {
		set $$$WWW120AuthorizationToModifyData(YVOR) = $$$EnumReadOnly
	}
	quit

GoToRule2(YFELD)
	do GoToRule($$$KEY1($$$INARTPREISBE1PricePlanRule(YFELD)),1)
	quit

GoToRule(YKEY,pidRuleLine="")
	;-------------------------------------------------------------------------------
	; Display the rule that created this preview line
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 03-Aug-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	set ^CacheTemp(YUSER,"GridLine") =pidRuleLine
	do GoToForm^COMUtilForm("INPP00GenRule",$$$KEY1(YKEY))
	quit $$$OK
	
	 
OnBlur(YBBN,YKEY,&YFELD)
	new arrGrid,idLine,FELD
	
	if YBBN=2 do Update^COMGridEdit31Interface(YFORM_"Line",YKEY,.YFELD)
	quit
	 
OnBeforeDelete(YKEY)
	new strStatus
	set strStatus = $$Transaction^COMTransaction("DeleteTxn^INPP00GenRule("""_YKEY_""")")
	
	if $$$ISERR(strStatus) {
		do ReturnError^COMUtilError($listbuild("IN00462",pidTFR,$$$Text(strStatus)))  ;Delete of Transfer Order %1 unsuccessful. Reason: %2
		set Q = $$$QDontDelete // SR15098
	}
	quit strStatus
	
	
DeleteTxn(YKEY)
	new strStatus,idLine
	
	set strStatus = $$$OK
	set idLine    = ""
	for {
		set idLine = $order(^INPP00GenRuleLine(YM,YKEY,idLine))
		quit:idLine=""
		set strStatus = $$^WWWKILL("INPP00GenRuleLine",YKEY_$$$COMMA_idLine)
		quit:$$$ISERR(strStatus)
	}
	quit strStatus
 
OnBeforeSave(YKEY,&YFELD)
	;-------------------------------------------------------------------------------
	; Method Usage
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 05-May-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$$GRIDSave(YKEY)
 	if $$$ISOK(strStatus) if $$$INPP00GenRuleStatus(YFELD)=$$$EnumCOMSYSSTATUSNew set $$$INPP00GenRuleStatus(YFELD)=$$$EnumCOMSYSSTATUSBuilding
	if $$$ISERR(strStatus) {
		$$$Alert(strStatus)
		set Q = $$$QDontSave
	}
	quit
 
OnAfterDataFields(pidINPP00GenRule)
	;-------------------------------------------------------------------------------
	; On After Data Fields load edit grid
	;
	; Params:
	; pidINPP00GenRule - Price Plan Generation Rule Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 05-May-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
 	if YSEITE=1 {
		do LoadGrid(pidINPP00GenRule,"INPP00GenRuleLine")
 	}
	
	quit
	
LoadGrid(pidINPP00GenRule,pstrForm,pidFocus="")
	;-------------------------------------------------------------------------------
	; Load Edit Grid
	;
	; Params:
	; pidINPP00GenRule - Price Plan Generation Rule Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 05-May-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new YKEY,YFORM,YAUSWAHL,YFELD
	
	set YFORM = pstrForm
	set YFELD = ""
	set YKEY  = $get(pidINPP00GenRule)
	
	set $$$COMGridEditParameterSharedForm(YAUSWAHL) = $$$YES
	set $$$COMGridEditParameterGridName(YAUSWAHL)   = YFORM
	set $$$COMGridEditParameterEnabled(YAUSWAHL)    = ($$$WWW120AuthorizationToModifyData(YVOR)'=$$$EnumReadOnly)
	set $$$COMGridEditParameterContainer(YAUSWAHL)  = "INPP00GenRule"
	do ^COMGridEdit31
 
	quit
 
 
CanGenerate(pidRuleHeader)
	;-------------------------------------------------------------------------------
	; Only allow price plan generation if rule lines exist.  Based on CanGenerate^INUPPGenRule
	;
	; Params:
	; pidRuleHeader - Price Plan Generation Rule Id
	;
	; ByRefs: YQ
	;
	; Returns: Nothing
	;
	; History:
	; 06-May-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new strStatus,idRelated,objRuleHeader,enumStatus
 
	set strStatus = $$$OK
	
	if '$$$NoKey(pidRuleHeader) {
		if '$data(^INPP00GenRuleLine(YM,pidRuleHeader)) {
			set strStatus = $listbuild("IN00564")  ; "Must create rule lines before generating price plan."
			
		} else {
			set objRuleHeader = $get(^INPP00GenRule(YM,pidRuleHeader,1))
			
			set enumStatus = $$$INPP00GenRuleStatus(objRuleHeader)
			
			if (enumStatus>$$$EnumCOMSYSSTATUSGenerated)&&(enumStatus'=$$$EnumCOMSYSSTATUSRejected) {
				set strStatus = "IN00607"  ; "Can not generate Price Plan from Awaiting Review or Approved status"
			}
			
			if $$$ISOK(strStatus) {
				
				;set idRelated = $$$INPPGenRuleRelatedParentRule(objRuleHeader)
				
				if ($$$INPP00GenRuleCostPointDate(objRuleHeader) > $horolog) || ($$$INPP00GenRuleCostPointDate(objRuleHeader) = "") {
					set strStatus = $listbuild("IN00571")  ;Cost Point must be for today's date or earlier.
					
				;} elseif $$$INPPGenRulePricePlanType(objRuleHeader) = $$$EnumINITEMPRICETYPESellingPrice {
				;	
				;	if idRelated = "" {
				;		set strStatus = $listbuild("IN00578",$$$AppEnum("INITEMPRICETYPE",$$$INPPGenRulePricePlanType(objRuleHeader)))  ;Price Plans of type %1 must have a related price plan.
				;		
				;	} elseif '$$IsRelatedGenRuleGenerated^INBPPGenRule(idRelated) {
				;		set strStatus = $listbuild("IN00565",idRelated)  ;Related price plan "%1" must be generated first.
				;	}
				;} elseif $$$INPPGenRulePricePlanType(objRuleHeader) = $$$EnumINITEMPRICETYPEStoreManaged { // SR15121
				;	if idRelated'="" {
				;		set strStatus=$listbuild("IN00645")  ;Store Managed Price Plans can not be related to another price plan.
				;	}
				}
				if $$$ISOK(strStatus) {
					;if '$$IsComplete(pidRuleHeader,$$$INPPGenRulePricePlanType(objRuleHeader)) {
					;	set strStatus = "IN00588"  ;Missing Default Catch All line.
					;}
				}
				
				;set:$$$ISOK(strStatus) strStatus=$$ValidateLines^INDPPGenRule(pidRuleHeader)
				
			}
			if $$$ISOK(strStatus) set strStatus = $$Validate^INPP00GenRuleLine(pidRuleHeader)

 
		}
	}
 
	$$$YQHandler(strStatus)
 	
	quit strStatus
 
 
Generate(pidRuleHeader)
	;-------------------------------------------------------------------------------
	; Generate Price Plan
	;
	; Params:
	; pidRuleHeader - Price Plan Generation Rule Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 
	; 25-Aug-2009	shobby	SR16511: Call to Validate
	; 25-Aug-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new strStatus
 
 	set strStatus = $$$OK

	if $$$ISOK(strStatus) set strStatus = $$Validate^INPP00GenRuleLine(pidRuleHeader)
 	if $$$ISOK(strStatus) set strStatus = $$CreatePreview^INPP00Preview(pidRuleHeader)
 	if $$$ISOK(strStatus) set strStatus = $$SetStatus(pidRuleHeader,$$$EnumCOMSYSSTATUSGenerated)
	if $$$ISOK(strStatus) do ViewPreview(pidRuleHeader)
	if $$$ISERR(strStatus) {
		$$$AlertInScript(strStatus)
		do GoToForm^COMUtilForm("INPP00GenRule",pidRuleHeader)
	}
	quit
 
ViewPreview(pidRuleHeader)
	do GoToForm^COMUtilForm("INPP00Preview",pidRuleHeader)
	quit
 
SetStatus(pidRuleHeader,penumStatus)
	;-------------------------------------------------------------------------------
	; Sets the status on this rule
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 12-May-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
 	new YKEY  ; leave this here to allow saving of the record while exiting to another form.
 
	new objGenRule
 
	set objGenRule=$get(^INPP00GenRule(YM,pidRuleHeader,1))
	set $$$INPP00GenRuleStatus(objGenRule)=penumStatus
	quit $$Save^COMUtils("INPP00GenRule",pidRuleHeader,objGenRule,1)
 
GetStatus(pidRuleHeader)
	;-------------------------------------------------------------------------------
	; Rule Status
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 12-May-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new objGenRule
	
	quit:$$$NoKey(pidRuleHeader) $$$EnumCOMSYSSTATUSNew
	
	set objGenRule=$get(^INPP00GenRule(YM,pidRuleHeader,1))
	quit $$$INPP00GenRuleStatus(objGenRule)
 
 
IsDisabled(pintButton,pidRuleHeader)
	;-------------------------------------------------------------------------------
	; Is the button disabled?
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 16-Jul-2009	shobby	SR16511: Created
	;-------------------------------------------------------------------------------
	new enmStatus,strStatus
	
	set strStatus = $$$OK
	
	if '$$$NoKey(pidRuleHeader) {
		set enmStatus = $$GetStatus(pidRuleHeader)
		if pintButton=1 {
			if enmStatus=$$$EnumCOMSYSSTATUSUsed {
				set strStatus = $listbuild("Not ready")                      ; FIXME : WWW009, $$$MakeStatus
			} elseif '$data(^INPP00GenRuleLine(YM,pidRuleHeader)) {
				set strStatus = $$$MakeStatus("Need Lines")                  ; FIXME : WWW009
			}
		
		} elseif pintButton=2 { ;View Price Plan
			if enmStatus<$$$EnumCOMSYSSTATUSGenerated set strStatus = $listbuild("IN00565",pidRuleHeader)
		}  ;    "Related price plan "%1" must be generated first."
	}
	$$$YQHandler(strStatus) 	
	quit strStatus
	
	
Copy(pidRuleHeader)
	;-------------------------------------------------------------------------------
	; Duplicate a price plan rule.
	;
	; Params:
	; pidRuleHeader - Price Plan Rule Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 16-Jul-2009	shobby	SR15295: Created
	;-------------------------------------------------------------------------------
	new strStatus,idNewRuleHeader
 
	set strStatus = $$Transaction^COMTransaction("CopyTxn^INPP00GenRule("""_pidRuleHeader_""",.idNewRuleHeader)")

	;set strStatus = $$CopyToStatus(pidRuleHeader,$$$EnumCOMSYSSTATUSBuilding,.idNewRuleHeader,$$$Text($listbuild("IN00576",pidRuleHeader)))  ;Copied from Generation rule %1
 
	if $$$ISOK(strStatus) {
		do GoToForm^COMUtilForm("INPP00GenRule",idNewRuleHeader)
	} else {
		$$$Alert($$$Text(strStatus))
	}
 
	quit
	
	
CopyTxn(pidRuleHeader,&pidNewRuleHeader)
	;-------------------------------------------------------------------------------
	; Duplicate a price plan rule.
	;
	; Params:
	; pidRuleHeader - Price Plan Rule Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 16-Jul-2009	shobby	SR15295: Created
	;-------------------------------------------------------------------------------
	new objINPP00GenRuleOld,objINPP00GenRuleNew,strStatus,intField,idLine
	new objINPP00GenRuleLineOld,objINPP00GenRuleLineNew
	
	set pidNewRuleHeader=$$^WWWNEXT("INPP00GenRule")
	
	set objINPP00GenRuleOld=$get(^INPP00GenRule(YM,pidRuleHeader,1))
	set $$$INPP00GenRuleDescription(objINPP00GenRuleNew)	= $$$INPP00GenRuleDescription(objINPP00GenRuleOld)
	set $$$INPP00GenRuleCostPointDate(objINPP00GenRuleNew)	= $$$INPP00GenRuleCostPointDate(objINPP00GenRuleOld)
	set $$$INPP00GenRuleCostPointTime(objINPP00GenRuleNew)	= $$$INPP00GenRuleCostPointTime(objINPP00GenRuleOld)
	set $$$INPP00GenRuleValidFromDate(objINPP00GenRuleNew)	= $$$INPP00GenRuleValidFromDate(objINPP00GenRuleOld)
	set $$$INPP00GenRuleValidFromTime(objINPP00GenRuleNew)	= $$$INPP00GenRuleValidFromTime(objINPP00GenRuleOld)
	set $$$INPP00GenRuleValidToDate(objINPP00GenRuleNew)	= $$$INPP00GenRuleValidToDate(objINPP00GenRuleOld)
	set $$$INPP00GenRuleValidToTime(objINPP00GenRuleNew)	= $$$INPP00GenRuleValidToTime(objINPP00GenRuleOld)
	set $$$INPP00GenRuleStatus(objINPP00GenRuleNew)			= $$$EnumCOMSYSSTATUSBuilding
	set $$$INPP00GenRuleNotes(objINPP00GenRuleNew)			= $$$Text($listbuild("IN00576",pidRuleHeader))_$$$CRLF_$$$CRLF_$$$INPP00GenRuleNotes(objINPP00GenRuleOld)   ;Copied from Generation rule %1
	set $$$INPP00GenRulePricePlanType(objINPP00GenRuleNew)	= $$$INPP00GenRulePricePlanType(objINPP00GenRuleOld)
	set $$$INPP00GenRuleCostBasis(objINPP00GenRuleNew)	    = $$$INPP00GenRuleCostBasis(objINPP00GenRuleOld)
	set strStatus=$$Save^COMUtils("INPP00GenRule",pidNewRuleHeader,objINPP00GenRuleNew,1)
	
	set idLine=""
	for {
		set idLine=$order(^INPP00GenRuleLine(YM,pidRuleHeader,idLine)) quit:idLine=""
		quit:$$$ISERR(strStatus)
		
		set objINPP00GenRuleLineOld=$get(^INPP00GenRuleLine(YM,pidRuleHeader,idLine,1))
		set $$$INPP00GenRuleLineLocation(objINPP00GenRuleLineNew)		= $$$INPP00GenRuleLineLocation(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLinePriceCategory(objINPP00GenRuleLineNew)	= $$$INPP00GenRuleLinePriceCategory(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLineItem(objINPP00GenRuleLineNew)			= $$$INPP00GenRuleLineItem(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLineItemGroup(objINPP00GenRuleLineNew)		= $$$INPP00GenRuleLineItemGroup(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLinePriority(objINPP00GenRuleLineNew)		= $$$INPP00GenRuleLinePriority(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLineExclude(objINPP00GenRuleLineNew)		= $$$INPP00GenRuleLineExclude(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLineUnit(objINPP00GenRuleLineNew)			= $$$INPP00GenRuleLineUnit(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLineMinimumPrice(objINPP00GenRuleLineNew)	= $$$INPP00GenRuleLineMinimumPrice(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLineMarkUp(objINPP00GenRuleLineNew)			= $$$INPP00GenRuleLineMarkUp(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLinePrice(objINPP00GenRuleLineNew)			= $$$INPP00GenRuleLinePrice(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLineUser1(objINPP00GenRuleLineNew)			= $$$INPP00GenRuleLineUser1(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLineLow(objINPP00GenRuleLineNew)			= $$$INPP00GenRuleLineLow(objINPP00GenRuleLineOld)
		set $$$INPP00GenRuleLineCost(objINPP00GenRuleLineNew)			= $$GetCost^INPP00GenRuleLine(objINPP00GenRuleLineNew)
		set $$$INPP00GenRuleLineManualPackCost(objINPP00GenRuleLineNew)	= $$GetManualPackCost^INPP00GenRuleLine(objINPP00GenRuleLineNew)
		;set $$$INPP00GenRuleLineCost(objINPP00GenRuleLineNew)
		set strStatus=$$Save^COMUtils("INPP00GenRuleLine",pidNewRuleHeader_","_idLine,objINPP00GenRuleLineNew,1)
	}
	quit strStatus
	
 
]]></Routine>
</Export>