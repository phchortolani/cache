<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMGridEdit31Body2" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMGridEdit31Body2
#include WWWConst
#include COMConst
#include COMGridEdit31
	
#def1arg WWWDATEN(%args) ^WWWDATEN(0,+$horolog,YUSER,YFORM,"V",%args)
	
#define WWWDATENSortBegin	if YFORM'="FINAPInvLine" set %1 = $sortbegin(^WWWDATEN(0,+$horolog,YUSER,YFORM,"V"))
#define WWWDATENSortEnd		if YFORM'="FINAPInvLine" set %1 = $sortend(^WWWDATEN(0,+$horolog,YUSER,YFORM,"V"))
	
#define LogR(%1,%2)		;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^CGEBody2("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)  	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)  	$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
CreateData(YKEY,YFORM)
	;-------------------------------------------------------------------------------
	; Take grid data from persistent storage and copy into WWWDATEN
	;
	; Called By :
	;	CreateGrid^COMGridEdit31
	; 
	; Inputs:
	;	YKEY		Comma-delimited list of keys (without company); may be null if
	;				loading whole global.
	;				
	; Returns:		Nothing
	;
	; History:
	; 11-Aug-2009	GRF		SR16787: kill existing "REFRESH" list; call CheckRefresh
	; 18-Jun-2009	GRF		SR16598: LineDataCD uses WWWDATEN entries that have been
	; 							changed within the SortBegin/SortEnd block.  This
	; 							will not work so have disabled the block controls.
	; 03-Jun-2008	GRF		SR15739: Modified from CREATEDATA^COMGridEdit31Body
	; 26-May-2008	GRF		SR15739: Call AppendLine
	; 12-Jul-2007	RPW		SR15571: Enable objects to work with the grid. Later this change
	;						may get undone. Commented them out. Fixed so that this is not needed
	;						Leaving the code there in case it is needed again.
	; 07-Mar-2007	PO		SR15466: Added support for no key
	; 01-Aug-2006	JW		SR14730: Simplified. Added sort begin/end
	; 12-Oct-2005	JW		SR11573: Created
	;-------------------------------------------------------------------------------
	new blnAdd,blnDisplay,blnRefresh,blnStoreAll,blnTest,idBase,idRow
	new intBaseLen,intCount,objData,strGlobal,YDATEI,YSUCH,YROW
	
	$$$LogR("CreateData",YKEY_"<"_YFORM)
	set YDATEI = $$$GRIDClass(YFORM)
	kill $$$WWWDATEN("REFRESH")          ; SR16787
	// COMView/Grid has been changed to support no relationship between
	// header and lines, see AddLine^COMGridEdit31Add
	if YDATEI'="" { ;  && (YKEY'="")                  // SR15466
		set blnStoreAll = '$get(^CacheTemp(YUSER,"Grid","DontStoreAll"))
		set intCount = 0
		
	;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv  ; WARNING : References getting ^WWWDATEN records during
	;	$$$WWWDATENSortBegin                  ;           the scope of this block may not retrieve
	;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv  ;           the "current" value since changes are not
		                                      ;           written to disk until the block ends
		if YKEY = "" {
			set strGlobal="^"_YDATEI_"("_$$^WWWKEYBUILD($$$WWWYM(YDATEI))_")"
		} else {
			set strGlobal="^"_YDATEI_"("_$$^WWWKEYBUILD($$$WWWYM(YDATEI)_","_YKEY)_")"
		}
		
		; SR15571 : vvv  see alternative code after quit
		set YSUCH      = strGlobal
		set intBaseLen = $qlength(YSUCH)
		set idBase     = $name(@YSUCH,intBaseLen)
		for {
			set YSUCH = $query(@YSUCH)
			quit:(YSUCH="")||($name(@YSUCH,intBaseLen)'=idBase)
			
			set objData=@YSUCH
			do LineDataCD(YFORM,$$$QueryANKey(YSUCH),objData,$increment(YROW),.intCount,.blnDisplay,.blnAdd,blnStoreAll)
			do SetRefresh^COMGridEdit31Events(YFORM,$$$QueryANKey(YSUCH),objData,.pblnRefresh)
		}
		; SR15571 : ^^^
		set $$$GRIDRowCount = intCount
		
	;+++++++++++++++++++++++++++++++++++++++	;  SR16598
	;	$$$WWWDATENSortEnd
	;+++++++++++++++++++++++++++++++++++++++	
		
		set idRow = ""                     ; vvv SR15739
		for {
			set idRow = $order(^WWWDATEN(YM,+$horolog,YUSER,YFORM,"V","REFERENCEKEY",idRow))
			quit:idRow=""
			
			do AppendLine^COMGridEdit31List($$$GRIDIdx(idRow))
		}                                  ; ^^^ SR15739
	}
	quit
	/* -----------------------------------------------------------------------------	
	; SR15571 : vvv   Enable objects to work with the grid - future code?
	;	new blnIsObject
	; 
		set blnIsObject=$$$WWW001AltSaveProcedure($get(^WWW001(0,YDATEI,1)))=4
		
		set YSUCH      = strGlobal
		set intBaseLen = $qlength(YSUCH)
		set idBase     = $name(@YSUCH,intBaseLen)
		for {
			set YSUCH=$query(@YSUCH)
			quit:(YSUCH="")||($name(@YSUCH,intBaseLen)'=idBase)
			
			if blnIsObject {
				set objData=$$^WWWSETL(YSUCH,$$$NO)
			} else {
				set objData=@YSUCH
			}
			do LineDataCD(YFORM,$$$QueryANKey(YSUCH),objData,$increment(YROW),.intCount,.blnDisplay,.blnAdd,blnStoreAll)
		}
	;
	; SR15771 : ^^^ ----------------------------------------------------------------
	*/
	
	
LineDataCD(YFORM,YYKEY,YFELD,YROW,&pintCount="",&pblnDisplay="",&pblnChkAdd="",pblnStoreAll=$$$YES)
	;-------------------------------------------------------------------------------
	; Line Data - Create Data in Grid from persistent storage
	;
	; Called By: 
	;	CreateData^COMGridEdit31Body2
	;
	; Subject to SORTBEGIN/SORTEND
	; 
	; Params:
	;	YFORM			- grid form name
	;	YYKEY			- line key (including quotes)
	;	YFELD			- line data
	;	YROW			- grid row number
	;	pintCount		- ByRef : Eventual Grid Row Count
	;	pblnDisplay		- ByRef : Actually "Display without checking" Does code exist to execute "Display" events?
	;	pblnChkAdd		- ByRef : Does code exist to execute "LineAdded" events?
	;	pblnStoreAll	- whether need to cache all data
	;
	; NOTE : bln defaults set to null indicate unset state - they will be returned
	;        set to $$$YES or $$$NO
    ;
    ; Implied:
    ; 	YUSER
    ;
	; History :
	; 03-Jun-2008	GRF		SR15739: Modified from LINEDATA^COMGridEdit31Body
    ; 							Reduced constant parameters
	;-------------------------------------------------------------------------------
	new dteToday,idLine
	
	$$$LogR("LineDataCD",YFORM_"<"_YYKEY_"<"_YFELD_"<"_YROW_"<")
	
	; Initialise ByRef parameters (so they can be cached for next call)
	; We are to display if there *ISN'T* an "OnBeforeDisplay" routine
	if pblnDisplay="" {
		set pblnDisplay = ($get($$$EventExists("Display"))=$$$NO)
	}
	if pblnChkAdd="" {
		set pblnChkAdd  = ($get($$$EventExists("LineAdded"))'=$$$NO)
		set pintCount   = $get($$$GRIDRowCount)
	}
	
	set dteToday = +$horolog
	
	; Store the key - even if not being displayed.
	set idLine = $$$DEQUOTE($piece(YYKEY,",",$length(YYKEY,",")))
	
	set ^WWWDATEN(YM,dteToday,YUSER,YFORM,"V","REFERENCEROW",idLine,1) = YROW
	
	; see note below
	if (pblnDisplay || $$OnBeforeDisplayLine^COMGridEdit31Events(YFORM,$$$DEQUOTE(YYKEY),YFELD)) {
		set ^WWWDATEN(YM,dteToday,YUSER,YFORM,"V","REFERENCEKEY",YROW,1) = YYKEY
			
		if pblnStoreAll do StoreAll(dteToday,YUSER,YFORM,YROW)       ; Data fields
		set pintCount = pintCount+1
		if pblnChkAdd   do OnLineAdded^COMGridEdit31Events(YFORM,pintCount,YYKEY)
	}
	
	quit	
	;---------------------------------------
	; pblnDisplay is set to the reverse of whether there is code to execute.
	; If there is no code then we assume all records are to be displayed.
	; If there is code, we make no such assumption and need to check the line.
	; 
	; On first call pblnDisplay will be $$$NO and we will check if an OnBeforeDisplay subroutine exists for the form
	; If there is an OnBeforeDisplay subroutine,
	;     it will be executed for the specific to check whether we should continue
	;     and pblnDisplay will be set to $$$NO in future to ensure subsequent records are rechecked.
	; If there is no OnBeforeDisplay subroutine,
	;     the function returns $$$YES
	;     and pblnDisplay will be set to $$$YES in future so we will perform this block without further testing.
	;
	; Similar processing for pblnChkAdd here and in LineDataAdd
	;---------------------------------------
	
	
LineDataAdd(YFORM,YYKEY,YFELD,YROW,&pintCount="",pblnNewLine=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Line Data - Add (Append or Insert)
    ; 
    ; NOTE : bln defaults set to null indicate unset state - they will be returned set to $$$YES or $$$NO
    ; 
    ; Store a line's data in WWWDATEN
    ; 
    ; Called By :
    ;	AddLine^COMGridEdit31Add		(YFORM,YYKEY,pYFELD,idRow,.intCount,pblnNewLine)
    ; 
    ; Params:
    ;	YFORM			- grid form name
    ;	YYKEY			- line key (including quotes)
    ;	YFELD			- line data
    ;	YROW			- grid row number
	;	pintCount		- ByRef : Eventual Grid Row Count
	;	pblnNewLine		- $$$YES if adding a line, $$$NO if inserting one
    ;
    ; Implied:
    ; 	YUSER
    ;
    ; History :
    ; 23-Jun-2009	GRF		-: Invert pblnNewLine test for improved clarity
    ; 03-Jun-2008	GRF		SR15739: Modified from LINEDATA^COMGridEdit31Body
    ; 							Reduced constant parameters
    ;-------------------------------------------------------------------------------
	new blnChkAdd,dteToday,idLine
	
	$$$LogR("LineDataAdd",YFORM_"<"_YYKEY_"<"_YFELD_"<"_YROW_"<"_pblnNewLine)
	
	set blnChkAdd = ($get($$$EventExists("LineAdded"))'=$$$NO)
	set pintCount = $get($$$GRIDRowCount)
	
	set dteToday = +$horolog
	
	; Store the key - even if not being displayed.
	set idLine = $$$DEQUOTE($piece(YYKEY,",",$length(YYKEY,",")))
	
	set ^WWWDATEN(YM,dteToday,YUSER,YFORM,"V","REFERENCEROW",idLine,1) = YROW
	set ^WWWDATEN(YM,dteToday,YUSER,YFORM,"V","REFERENCEKEY",YROW,1)   = YYKEY
	
	if pblnNewLine {
		do AppendLine^COMGridEdit31List(YROW,dteToday)
		
	} else {
		do InsertLine^COMGridEdit31List(YROW,dteToday)
	}
	
	do StoreAll(dteToday,YUSER,YFORM,YROW)                           ; Data fields
	set pintCount = pintCount+1
	if blnChkAdd do OnLineAdded^COMGridEdit31Events(YFORM,pintCount,YYKEY)
	
	quit
	
	
StoreAll(pdteToday,YUSER,YFORM,YROW)
	;-------------------------------------------------------------------------------
	; Common Code : Actual Values are stored against the grid field
	; 
	; History:
	; 11-May-2011	shobby	SR17559: Don't crash if there is a manual field.
	; 26-May-2008	GRF		SR15739: Created from LINEDATA
	;-------------------------------------------------------------------------------
	new idClassField,idFieldNo,strFieldData,strFieldID
	
	set idFieldNo = ""
	for {
		set idFieldNo = $order(^WWW122(0,YFORM,idFieldNo))
		quit:idFieldNo=""
		
		set idClassField = $$$GetClassField(YFORM,idFieldNo)  ;SR17559
		if idClassField'="" {                                 ;SR17559
			set strFieldData = $piece(YFELD,Y,idClassField)
			set strFieldID   = "Y"_YROW_"_"_idFieldNo
		
			set ^WWWDATEN(0,pdteToday,YUSER,YFORM,"V",strFieldID,1) = strFieldData
			set ^WWWDATEN(0,pdteToday,YUSER,YFORM,"V",strFieldID,2) = strFieldData
		}
	}
	quit
	
	
GetNextDisplayLine(pidRow,pblnReverse=$$$NO)
	;-------------------------------------------------------------------------------
	; Get next displayable line (i.e. skip those that are not "Viewable")
	; 
	; Inputs :
	;	pidRow			Current Row - 0 if searching for first/last entry
	;	pblnReverse		$$$NO (default) if forward search, $$$YES if reverse
	; 
	; Implicit :
	;	YUSER
	;	YFORM
	; 
	; Returns :
	;	Next Row; null if at end of list
	; 
	; History:
	; 16-Sep-2008	GRF		SR15888: workaround removed since cause now fixed
	; 10-Sep-2008	HQN		SR15888: Workaround, copying a line that hasn't been
	; 							saved first will load entries into display list with
	; 							a back reference to row 0, incorrect population,
	; 							this just stops infinite loops
	; 26-May-2008	GRF		SR15739: Created - DISPLAYLIST rather than DISPLAYORDER
	;-------------------------------------------------------------------------------
	new intPiece
	
	set:pidRow="" pidRow=0
	
	set intPiece = $select(pblnReverse:2,1:1)
	do {
		set pidRow = $piece($get($$$WWWDATEN("DISPLAYLIST",pidRow)),Y,intPiece)
	} while((pidRow'="") && ('$$$ViewableRow(pidRow,YFORM)))
	
	quit pidRow
	
]]></Routine>
</Export>