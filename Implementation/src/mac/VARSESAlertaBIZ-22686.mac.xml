<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESAlertaBIZ" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include COMSYS
#include VARConst
#include INConst
#include VARSESConst
 
VARSESAlertaBIZ 
	quit
	
DefinirFonteSuprimentos(&parrAlertaLinhas, &parrDocs)
	;
	; O parâmetro parrAlertaLinhas obedece o seguinte formato:
	; (idLocation, idItem) = quantidade
	; 
 
 	new strStatus, arrDocs
 
 	set strStatus = $$Transaction^COMTransaction("DefinirFonteSuprimentosTxn^VARSESAlertaBIZ(.parrAlertaLinhas,.parrDocs)", $$$YES)	
 
	quit strStatus
	
DefinirFonteSuprimentosTxn(&parrAlertaLinhas, &parrDocs)
	;
	; O parâmetro parrAlertaLinhas obedece o seguinte formato:
	; (idLocation, idItem) = quantidade
	; 
 
	new idLocation, idItem, objRequisition, idRequisitionType, ListOfReqs,
		arrTransfers, arrPurchases, idTipoMovimentacao, fltQuantity
 
 	quit:'$data(parrAlertaLinhas) $$$OK
 
 	// Comentando, pois não vamos usar o INRequisition por enquanto.
 	/*
	$$$Order1(parrAlertaLinhas,idLocation)
	
		$$$Order2(parrAlertaLinhas,idLocation,idItem)
		
			new arrTotalRequisitions, arrNeededRequisitions, fltSugestao
			
			set fltSugestao = $$GetSugestao^VARSESAlertaLinha(idItem, idLocation)
			do GetFirmedRequisitionsForItemAndLocation(idLocation, idItem, .arrTotalRequisitions)
			do GetNeededRequisitions(.arrTotalRequisitions, fltSugestao, .arrNeededRequisitions, parrAlertaLinhas(idLocation, idItem), idLocation, idItem)
		
		$$$End
	$$$End
	 
	set strStatus = $$PrepareToSource^VARSESINRequisition(.arrNeededRequisitions) 
	do:'$$$ISOK(strStatus) RaiseError(strStatus)
	
	// O source agora vai ser feito direto na tela da PAM.
	;set strStatus = $$Source^VARSESINRequisition(.arrNeededRequisitions)
	;do:'$$$ISOK(strStatus) RaiseError(strStatus)
	
	// Building the ListOfReqs array
	$$$Order1(arrNeededRequisitions,idRequisition)
	
		set objRequisition = $get(^INRequisition(YM, YM, idRequisition, 1))
		set idRequisitionType = $$$INRequisitionType(objRequisition)
		if idRequisitionType = 0 { // Comprar
			set ListOfReqs("Purchase", YM, idRequisition) = ""			
			
		} elseif idRequisitionType = 1 { // Transferência
			set ListOfReqs("Transfer", YM, idRequisition) = ""
		}
	
	$$$End
	*/
	
	// Fazendo um array de Transfers e de Purchase
	$$$Order1(parrAlertaLinhas,idLocation)
		
		$$$Order2(parrAlertaLinhas,idLocation,idItem)
		
			set fltQuantity        = parrAlertaLinhas(idLocation, idItem)
			set idTipoMovimentacao = $$GetTipoMovimentacao^VARSESAlertaLinha(idItem, idLocation)
			
			if idTipoMovimentacao = 5  { ; 5 - Requisição - Comprar
				
				set arrPurchases(idItem, idLocation) = fltQuantity
			
			} elseif idTipoMovimentacao = 6 { ; 6 - Requisição - Transferir.
 
				set arrTransfers(idItem, idLocation) = fltQuantity
			}
		
		$$$End
	$$$End
	
	set:$data(arrPurchases) strStatus = $$CriaPAM(.arrPurchases,.parrDocs)
	do:'$$$ISOK(strStatus) RaiseError(strStatus)
 
 	// A solicitação vai ficar pra depois.
	;set:$data(arrTransfers) strStatus = $$CriaSolicTransf(.arrTransfers,.parrDocs)
 	;do:'$$$ISOK(strStatus) RaiseError(strStatus)
	 
	quit $$$OK
	
GetFirmedRequisitionsForItemAndLocation(pidLocation, pidItem, &parrRequisitions)
	// Pega todas as requisições firmadas que ainda não foi feito o source.
	// params parrRequisitions - parrRequisitions(idRequisition) = ""
 
	new idRequisition
 
	$$$Order7(^INRequisitions,YM,101,pidItem,pidLocation,2,YM,idRequisition)
	
		set parrRequisitions(idRequisition) = ""
	
	$$$End
 
	quit
	
GetNeededRequisitions(&parrTotalRequisitions, pfltSugestao, &parrNeededRequisitions, pfltRequestedAmount, pidLocation, pidItem)
	// Dada as requisições no ponto para fazer o source, verificar quais são necessárias para
	// suprir a quantidade requisitada.
	// Se for necessário, criar mais uma INRequisition pra suprir a necessidade.
	// Se uma Requisition precisar ser dividida em 2, clonar ela dividindo as quantidades.
	// 
	// params parrTotalRequisitions  - parrRequisitions(idRequisition) = ""
	// params parrNeededRequisitions - parrRequisitions(idRequisition) = ""
	// 
 
	new fltSugestao, idRequisition, idNewRequisition, strStatus, fltQuantity,
		fltSplitQuantity
	
	// Se a quantidade requerida for vazia, não fazer nada.
	quit:(pfltRequestedAmount = 0)	
 
	// Se a quantidade sugerida for zero, precisamos criar mais uma INRequisition.
	if pfltSugestao = 0 {
		
		// Criar uma requisição com a quantidade que falta.
		set strStatus = $$Create^VARSESINRequisition(pidLocation, pidItem, pfltRequestedAmount, .idNewRequisition)
 		do:'$$$ISOK(strStatus) RaiseError(strStatus)
 
		set strStatus = $$Firm^VARSESINRequisition(idNewRequisition)
 		do:'$$$ISOK(strStatus) RaiseError(strStatus)
		
		set parrNeededRequisitions(idNewRequisition) = ""
	
	} elseif pfltSugestao > pfltRequestedAmount {
		// Se a Sugestão for maior que a quantidade requerida, precisamos verificar se vamos
		// ter que dividir uma requisição.
		set fltQuantity = 0
		$$$Order1(parrTotalRequisitions,idRequisition)
			
			set parrNeededRequisitions(idRequisition) = ""		
			set fltQuantity = fltQuantity + $$GetQuantity^VARSESINRequisition(idRequisition)
			quit:(fltQuantity >= pfltRequestedAmount)
		$$$End
	
		set fltSplitQuantity = fltQuantity - pfltRequestedAmount
		
		// Só vou precisar fazer split se tiver sobra.
		if fltSplitQuantity > 0 {
			set strStatus 		 = $$Split^VARSESINRequisition(idRequisition, fltSplitQuantity, .idNewRequisition)	
 			do:'$$$ISOK(strStatus) RaiseError(strStatus)
		}
 
	} elseif pfltSugestao < pfltRequestedAmount {
		// Se a sugestão for menor, temos apenas que pegar a última INRequisition e alterar
		// a quantidade dela.
		set idRequisition = $order(parrTotalRequisitions(""), -1)
		set strStatus = $$AddQuantity^VARSESINRequisition(idRequisition, pfltRequestedAmount - pfltSugestao)
 		do:'$$$ISOK(strStatus) RaiseError(strStatus)
		
		// Todas as Requisições existente vão ser usadas.
		$$$Order1(parrTotalRequisitions,idRequisition)
			set parrNeededRequisitions(idRequisition) = ""		
		$$$End
 
	} elseif pfltSugestao = pfltRequestedAmount {
		// Se a sugestão for igual a quantidade sugeria, apenas copiar uma lista para a outra.
 
		// Todas as Requisições existente vão ser usadas.
		$$$Order1(parrTotalRequisitions,idRequisition)
			set parrNeededRequisitions(idRequisition) = ""		
		$$$End
	}
 
	quit
	
RaiseError(pstrStatus)
 
	set ^CacheTempAlertaError(YBED,$horolog) = $$$Text(pstrStatus)
	ztrap
 
	quit
 
CriaPAM(&parrPurchases,&pListOfDocs)
 
	new objVARTRKPAM, idVARTRKPAM, strStatus, idItem, idLocation, objPAMLine, fltQuantity
	
	set strStatus = $$$OK
	
	set objVARTRKPAM = ""
	
	set $$$VARTRKPAMNaturezadaEntrada(objVARTRKPAM) = ""
	set $$$VARTRKPAMDatadeEmisso(objVARTRKPAM) = +$H
	set $$$VARTRKPAMSetorSolicitante(objVARTRKPAM) = YLOCATION
	set $$$VARTRKPAMCentrodeCusto(objVARTRKPAM) = $$$WWW0121FREE1($get(^WWW0121(0,YM,YLOCATION,1))) // CENTRO DE CUSTO
	set $$$VARTRKPAMObservaes(objVARTRKPAM) = ""
	set $$$VARTRKPAMDataDesejada(objVARTRKPAM) = ""
	set $$$VARTRKPAMNumerodoProcesso(objVARTRKPAM) = ""
	set $$$VARTRKPAMNumerodaATA(objVARTRKPAM) = ""
	
	set idVARTRKPAM = $$^WWWNEXT("VARTRKPAM")
	if (idVARTRKPAM = "") {
		//quit "0~Erro ao criar PAM."
		quit "0~"_$$$Text("MED00083")  ;Erro ao criar PAM.
	}
	set pListOfDocs("Purchase",idVARTRKPAM)=""
 	set strStatus = $$$Save("VARTRKPAM",idVARTRKPAM,objVARTRKPAM,1)
  	if (strStatus '= $$$OK) {
	 	quit strStatus // if error, quit.
 	}
	 	
	// Agora, cria as linhas da PAM:
	// setar os campos 1,54; 2,55; 4,56; 16,57; 
	set intCounter = 1
	$$$Order1(parrPurchases,idItem)
	
		$$$Order2(parrPurchases,idItem,idLocation)
		
			set objPAMLine  = ""
			set fltQuantity = parrPurchases(idItem, idLocation)
		
			set $$$VARTRKPAMLineFakeItem(objPAMLine)            = idItem
			set $$$VARTRKPAMLineFakeDescricao(objPAMLine)       = $piece(^INART(YM,idItem,1),Y,1)
			set $$$VARTRKPAMLineFakeUnit(objPAMLine)	        = $piece(^INART(YM,idItem,1),Y,40)
			set $$$VARTRKPAMLineFakeUnidadedeMedida(objPAMLine) = $piece(^WWW101(YM,"EINHEIT","PT",$piece(objPAMLine,Y,2),1),Y,1)
			set $$$VARTRKPAMLineFakeLocation(objPAMLine)		= idLocation
			set $$$VARTRKPAMLineFakeNomedoLocal(objPAMLine)		= $piece(^WWW0121(YM,YM,idLocation,1),Y,1)
			set $$$VARTRKPAMLineFakeQuantity(objPAMLine)		= fltQuantity
		
			set strStatus = $$$Save("VARTRKPAMLineFake",idVARTRKPAM_$$$COMMA_intCounter,objPAMLine,1)
			set intCounter = intCounter + 1
			do:'$$$ISOK(strStatus) RaiseError(strStatus)
		$$$End
	$$$End
 
	quit strStatus
 
 
CriaSolicTransf(&parrTransfers,&pListOfDocs)
	// Andre, 18/08/2007:
	// Cria a Solicitação de Transferência, usando como seu ID o group number das demandas
	// associadas a cada INRequisition, e ainda associa estas à recém-criada solicitação:
	new strStatus, arrSolic, idSolic
	
	set strStatus=$$$OK
	
	// Se não há nenhuma Solicitação de Transferência a criar, sai da rotina sem erro:
	if ($data(pListOfReqs("Transfer",YM)) '= 10) {
		quit strStatus
	}
	
	$$$Order3(pListOfReqs,"Transfer",YM,idReqLine)
 
		;set idReqLine=$$$KEYMAX(strKeys) ; $$$KEYMAX é uma função que retorna a última chave (último piece da string strkeys, tendo a vírgula - "," - como separador. 
 
 		set objReqLine = $get(^INRequisition(YM,YM,idReqLine,1))
 		
 		// Verifica se a requisition está Sourced, selecionada para fazer sourcing e
 		// se a requisition é do tipo 1 - Transfer:
		// if (($data(^INRequisitions(YM,1,$$$EnumINREQSTATUSSourced,$$$YES,YM,idReqLine))) && 
		//	($$$INRequisitionType(objReqLine) = $$$EnumINREQUISITIONTYPETfr)) {
		if (($$$INRequisitionStatus(objReqLine) = $$$EnumINREQSTATUSSourced) && 
			($$$INRequisitionType(objReqLine) = $$$EnumINREQUISITIONTYPETfr)) {
			set idDemand = $$$INRequisitionDemand(objReqLine)
			set demandLocation = $piece(idDemand,YKOMMA,1)
			set demandNumber = $piece(idDemand,YKOMMA,2)
			if (demandNumber '= +demandNumber) { set demandNumber = """"_demandNumber_"""" }
			set refDemand = "^INDRPDEMAND("_YM_YKOMMA_demandLocation_YKOMMA_demandNumber_YKOMMA_"1)"
			set objDemand = $get(@refDemand)
			set idGroupNumber = $$$INDRPDEMANDGroupNumber(objDemand)
			
			if (idGroupNumber '= "") {
				
				;set idSolicTransf = idGroupNumber
				;set objSolicTransf = $get(^VARSESSolicTransf(YM,idGroupNumber,1))
				;set pListOfDocs("Transfer",idSolicTransf)=""
 
 				set idSolicTransf = $$GetIdSolicTransf^VARSESSolicTransf(idGroupNumber)
 				if idSolicTransf = "" set idSolicTransf = $$$NextKey("VARSESSolicTransf")
 				set objSolicTransf = $get(^VARSESSolicTransf(YM, idSolicTransf, 1))
 				set pListOfDocs("Transfer", idSolicTransf) = ""
 
				// Se cabeçalho da Solicitação de Transferência ainda não existe, cria-o:
				if (objSolicTransf = "") {
					set objSolicTransf = ""
					;idReqLine
					;set $$$VARSESSolicTransfNumerodaTRnoTRAK(objSolicTransf) = ""
					set $$$VARSESSolicTransfLocalRecebedor(objSolicTransf) = $$$INRequisitionLocation(objReqLine)
					set $$$VARSESSolicTransfLocalAbastecedor(objSolicTransf) = $$$INRequisitionSourcingLocation(objReqLine)
					;set $$$VARSESSolicTransfData(objSolicTransf) = $h
					;set $$$VARSESSolicTransfStockLocation(objSolicTransf) = ""
					set $$$VARSESSolicTransfTipoSolicitacao(objSolicTransf) = "MENSAL"
					set $$$VARSESSolicTransfDatadaSolicitacao(objSolicTransf) = $h
					
					set $$$VARSESSolicTransfParcialmenteAtendido(objSolicTransf) = $$$SolicAguardandoAtendimento
					
					set $$$VARSESSolicTransfNoDocumento(objSolicTransf) = idGroupNumber
					set $$$VARSESSolicTransfTransferenciaouConsumo(objSolicTransf) = "TRANSFERENCIA"
					
					set strStatus = $$$Save("VARSESSolicTransf",idSolicTransf,objSolicTransf,1)
					if (strStatus '= $$$OK) {
						quit strStatus // if error, quit.
					}
					set arrSolic(idSolicTransf) = ""
				}
				
				// Cria a linha da Solicitação de Transferência:
				
				;set idLinhaSolicTrf = $$GetNextNumber^COMUtils("VARSESSolicTransf")
				set idLinhaSolicTrf = $order(^VARSESSolicTransfLinha(0,idSolicTransf,""),-1)+1
				set objLinhaSolicTrf = ""
				set $$$VARSESSolicTransfLinhaCodigodoProduto(objLinhaSolicTrf) = $$$INRequisitionItem(objReqLine)
				set $$$VARSESSolicTransfLinhaQuantidade(objLinhaSolicTrf) = $$$INRequisitionQuantity(objReqLine)
				set $$$VARSESSolicTransfLinhaUnidadedeEstoque(objLinhaSolicTrf) = $$$INRequisitionUnit(objReqLine)
				;$$$INRequisitionDemand(objReqLine)
				set strStatus = $$$Save("VARSESSolicTransfLinha",idSolicTransf_YKOMMA_idLinhaSolicTrf,objLinhaSolicTrf,1)
				if (strStatus '= $$$OK) {
				 	quit strStatus // if error, quit.
				}
				
				// Atualiza a requisition com o número da solicitação de transferência:
				set $$$INRequisitionRequisitionProcessNumber(objReqLine) = idGroupNumber
				set strStatus = $$$Save("INRequisition",YM_YKOMMA_idReqLine,objReqLine,1)
				if (strStatus '= $$$OK) {
				 	quit strStatus // if error, quit.
				}
			
			}
			else {
			 	//quit "0~Número de Solicitação de Transferência não encontrado!" // if error, quit.
			 	quit "0~"_$$$Text("MED00084")  ;Número de Solicitação de Transferência não encontrado!
			}
			
		}
 
	$$$End
	
	// Enviando as solicitações para o TrakCare WS.
	$$$Order1(arrSolic,idSolic) 
	
		;do SolicitarTransferencia^VARSESIntegration(idSolic)
	
	$$$End
	
	quit strStatus
 
]]></Routine>
</Export>