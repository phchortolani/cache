<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INMOVPalletTable" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INMOVPalletTable
	
#include COMSYS
#include INConst
	
#define DELIM	$char(31)
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INMOVPalletTable("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
ShowItems(pidEvent,pidParams)
	;-------------------------------------------------------------------------------
	; Description : Show contents of a Temporary Storage Unit / Pallet below the
	; INMOVPallet edit grid for the currently focussed line
	;			
	; Called By : OnBlur^INMOVPallet
	;		
	; Inputs : 
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 03-May-2011	PPP		SR17715.1: Show Items in Dynagrid even if record processed
	; 20-Apr-2011	GRF		SR17715: Created from INMOVTable
	;-------------------------------------------------------------------------------
	new idGrid,idItem,lstHeaders,lstColTypes,idKey,idRelocate,idLine
	new objItem,objItemPolicy,objLocn,objMov,objMovPallet,strFunction,strStatus
	
	$$$LogR("ShowItems",pidEvent_":"_pidParams)
	
	set strStatus = $$$OK
	set idGrid    = $$$DYNTABLEGridLineFocusGrid(pidParams)
	
	kill ^CacheTempDynamicTable(YUCI,YUSER,"TSU")
	
	set idKey      = $$ReferenceKey^COMGridEdit31Interface(idGrid,$$$DYNTABLEGridLineFocusRow(pidParams))
	set idRelocate = $$$KEY1(idKey)
	set idLine     = $$$KEY2(idKey)
	
	//SR17715.1
	//if '$$Editable^INMOVByPallet(idRelocate) quit                       ; *** EARLY EXIT ***
	
	set objMov       = $$$GRIDYFELDContainer
	set objMovPallet = $$$GRIDGetYFELD(idLine)
	
	set strStatus = $$GetLock^WWWMultiLock("INMOVByPallet",idGrid,idRelocate_$$$COMMA_idLine)
	
	set idLocn   = $$$INMOVLocation(objMov)
	set idPallet = $$$INMOVPalletPallet(objMovPallet)

	if idPallet = "" {  ; Clear table   ; "No storage selected"
		do DrawTable^WWW120DynTable($listbuild($$$Text("INMOV05")),"TSU",$listbuild($listbuild("left","display")),pidParams,"",pidEvent,"","",$$$NO)
		
	} else {            ; Build Table below Stock Move By Pallet grid lines (doesn't allow selection)
		do BuildDynTableHeader(.lstHeaders,.lstColTypes)
		do BuildDynTableRows(idLocn,idPallet)

		do DrawTable^WWW120DynTable(lstHeaders,"TSU",lstColTypes,pidParams,"",pidEvent,"","",$$$NO)
	}
	quit

	
BuildDynTableHeader(&plstHeaders,&plstColTypes)
	;-------------------------------------------------------------------------------
	; Setup Table Headers
	;
	; History:
	; 20-Apr-2011	GRF		SR17715: Created from INMOVTable
	;-------------------------------------------------------------------------------
	
	; -----  1  ; "Item"
	
	set plstHeaders  = $listbuild($$$Text("IN00504"))                                  
	set plstColTypes = $listbuild($listbuild("left","display"))
	
	; -----  2  ; "Quantity"
	
	set plstHeaders  = plstHeaders_$listbuild($$$Text($listbuild("IN00367")))
 	set plstColTypes = plstColTypes_$listbuild($listbuild("right","display"))
	quit
	
	
BuildDynTableRows(pidLocn,pidStore)
	;-------------------------------------------------------------------------------
	; Build an array "^CacheTempDynamicTable" which contains the lines corresponding
	; to the headings in BuildDynTableHeader
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 20-Apr-2011	GRF		SR17715: Created from INMOVTable
	;-------------------------------------------------------------------------------
	new enumInvUnit,fltQtyOH,idItem,idLine,objResultSet,objSOH,strItem,strUnit
	
	kill ^CacheTempDynamicTable(YUCI,YUSER,"TSU")

	; Retrieve Records
	set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dSOH:GetItems")
	if objResultSet.Execute(pidLocn_"||"_pidStore) {
		set idLine = 0
		while objResultSet.Next() {
			set objSOH = ##class(alSOH.dSOH).%OpenId(objResultSet.Data("ID"))
			
			; -----  1
			set idItem  = objSOH.Item.ItemId
			set strItem = idItem_" ("_objSOH.Item.SearchName_")"
			
			; -----  2
			set enumInvUnit = $$$INARTUnitofMeasure($get(^INART(0,idItem,1)))
			set strUnit     = $$$AppEnum("EINHEIT",enumInvUnit)
			set fltQtyOH = objSOH.QtyOnHand_" ("_strUnit_")"
			
			set ^CacheTempDynamicTable(YUCI,YUSER,"TSU",$increment(idLine),"data") = objSOH.%Id()
			set ^CacheTempDynamicTable(YUCI,YUSER,"TSU",idLine) = strItem_Y_fltQtyOH
		}
	}
	
	quit
	
]]></Routine>
</Export>