<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INReceiptLineForm" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INReceiptLineForm
	;-------------------------------------------------------------------------------
	; Form processing for form INReceiptLine
	; 
	; History:
	; 14-Aug-2009	GRF		SR16829: Split form calls from INReceiptLine
	;-------------------------------------------------------------------------------
	;+++++++++++++++++++++++++++++++++++++++
	; see INRECDoco
	;+++++++++++++++++++++++++++++++++++++++
#include COMSYS
#include INConst
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INReceiptLineForm("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
	;-------------------------------------------------------------------------------
	;   INRECSummary contains Item overview (integer ids) and associated charges
	;        (.01 increments except for overall charges)
	;        
	;   INRECLine contains Item allocation to storage where the initial integer ids
	;        may be copied to split the allocation into different storages.
	;        These copied lines will also be in .01 increments.
	;   
	;   INRECSummary integer ids for items correspond to the INRECLine records with
	;        the same integer portion.
	;   INRECSummary fractional ids and integer ids for associated charges have no
	;        relationship with INRECLine records other than through their items.
	;-------------------------------------------------------------------------------
	
OnAfterSave(pstrKeys,pobjRECLine)
	;-------------------------------------------------------------------------------
	; Executed on after save of INRECLine
	; 
	; Called By : "Execute After Save" Forms INRECLine and INRECBLine
	; 
	; Params:	key and data
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 03-Apr-2009	GRF		SR16363: Remove else condition - move to Post processing
	;							when no invoice number is present so 3WM processing
	;							can handle it.
	; 05-Mar-2009	HQN		SR16363: Update related INRECSummary record instead of
	;							INWEAUF
	; 09-Sep-2008	HQN		SR15815: Removed V2 population, dReceiptLine deprecated
	; 27-Mar-2008	HQN		SR15640: Save V2, manually call ConvertOnSave because
	;							this is a Line
	; 31-Mar-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	new fltReceiptQty,idReceipt,idRecLine,idSummary,objINRECSummary,strStatus
	
	$$$LogR("OnAfterSave",pstrKeys)
	;******************************TEST BLOCK DWR 06-Apr-2009
	set strStatus = $$$OK
	quit strStatus
	; vvvvvvvvvvvvv DISABLED CODE
	;********************************
	
	set strStatus = $$$OK
	set idReceipt = $$$KEY1(pstrKeys)
	set idRecLine = $$$KEY2(pstrKeys)
	set idSummary = idRecLine\1
	
	; Check existence
	if $data(^INRECSummary(0,idReceipt,idSummary)) {
		
		set objINRECSummary = $get(^INRECSummary(0,idReceipt,idSummary,1))
		set fltReceiptQty   = $$GetQtyEntered^INReceiptLine(pstrKeys)                 ; Sum Quantities
		if $$$INRECSummaryQuantityReceived(objINRECSummary) '= fltReceiptQty {
			set $$$INRECSummaryQuantityReceived(objINRECSummary) = fltReceiptQty
			set strStatus = $$$Save("INRECSummary",idReceipt_$$$COMMA_idSummary,objINRECSummary,$$$YES)
		}
	;} else {   ; 03-Apr-2009
	;	do Update($$$GetClass($$$GRIDYFELDContainer),idReceipt,idRecLine,pobjRECLine)
	}
	/* ; 09-Sep-2008 HQN SR15815 vvvv
	set objRec=$$$GRIDYFELDContainer
	if $$$INRECType(objRec)=$$$EnumINRECSupplierReceipt {
		set sc = ##class(alREC.dUReceiptLine).ConvertOnSave($$$KEY1(pstrKeys)_"||"_$$$KEY2(pstrKeys))
		if $$$ISERR(sc) {
			set sc = $$DecodeCacheError^COMUtilError(sc)
		}
	}
	*/ ; 09-Sep-2008 HQN SR15815 ^^^^
	quit strStatus
	
	
OnAfterDelete(pstrKeys)
	;-------------------------------------------------------------------------------
	; - Kill INWEAUFVOR record
	; - Kill V2 receipt line
	;
	; Called By : Form INReceiptLine - "Execute After Delete"
	; 
	; Params:	key and data
	;
	; ByRefs:
	;
	; Returns:	status
	;
	; History:
	; 02-Oct-2009	GRF		SR16361: Implement changed code
	; 16-Sep-2009	GRF		SR16361: Remove INWEAUF(VOR) processing
	; 18-Mar-2009	GRF		specific $$$KEY macros
	; 12-Aug-2008	Luke	SR15814: Corrected sc formation 
	; 18-Oct-2006	JW		SR15131: Check for null, and kill status. Return status.
	; 03-Apr-2006	JW		SR14221: Created
	;-------------------------------------------------------------------------------
	new idClass,strKeyINWEAUF,strStatus,sc
	
	$$$LogR("OnAfterDelete",pstrKeys)
	
	set strStatus = $$$OK
	set sc = $$$OK //SR15814:
	
	/*        ; SR16361
	set idClass       = "INWEAUFVOR"
	set strKeyINWEAUF = $$GetINWEAUFLink^INReceiptLinePost(idClass,pstrKeys)
	if strKeyINWEAUF'="" {
		set strStatus = $$$Kill(idClass,strKeyINWEAUF)		//SR15134
		if $$$ISERR(strStatus) {
			set Q = $$$QDontDelete
		}
	}
	*/ ; SR16361
	
	if $$$ISOK(strStatus) set sc = ##class(alREC.dUReceiptLine).ConvertOnDelete($$$KEY1(pstrKeys)_"||"_$$$KEY2(pstrKeys))
	if $$$ISERR(sc)       set strStatus = $$ISStatusToDLStatus^COMUtilError(sc) //SR15814:
	
	quit strStatus
	
	
OnBeforeSave(pstrKeys,&pobjRECLine)
	;-------------------------------------------------------------------------------
	; Save validation
	;
	; Called By : "Execute Before Save" Form INReceiptLine
	;
	; Params:
	;	pstrKeys		INRECLine keys
	;	pobjRECLine		INRECLine data
	;
	; ByRefs: YRETVAL
	;         LOCATION
	;
	; Returns:
	;
	; History:
	; 07-Sep-2009	DAVID	SR16870: Created
	; 05-Jan-2008	HQN		SR16268: Added LotNumber Uniqueness check <DEPRECATED>
	; 28-Feb-2007	JW		SR15453: Encapsulated CanSave. 
	; 27-Jun-2006	JW		SR13755: Removed $$$Text
	; 17-May-2006	JW		SR14646: Changed <= to < so can save with blank
	; 27-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	new objReceipt,strStatus
	
	$$$LogR("OnBeforeSave",pstrKeys)
	set objReceipt = $get(^INREC(0,$$$KEY1(pstrKeys),1))
	
	set strStatus = $$$OK
	if ($$$GRIDContainer = "INReceipt") && ($$$INRECLineSupplier(pobjRECLine) = "") {
		;	set objReceipt = $get(^INREC(0,$$$KEY1(pstrKeys),1))
		set $$$INRECLineSupplier(pobjRECLine) = $$$INRECSupplier(objReceipt)
		if $$$INRECLineLocation(pobjRECLine)="" {
			set $$$INRECLineLocation(pobjRECLine) = $$$INRECLocation(objReceipt)
		}
	}
	
	//SR16870
	if $$$ISOK(strStatus) {
		set strStatus = $$CheckGridLines^INReceiptLine(pstrKeys)
	}
	
	if $$$ISOK(strStatus) {
		set strStatus = $$CanSave^INDRECLine(pstrKeys,pobjRECLine)	//SR16510
	}
	
	; SR16268 vvvv <DEPRECATED - uniqueness now checked in alINV.dPolicyAttribute::IsUnique> <DAVIDR>
	;if $$$ISOK(strStatus) {
	;  set strStatus = $$$MakeStatus("IN00880") ;Lot Number must be unique
	;}
	; SR16268 ^^^^
	if (+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))){
		if $$$ISOK(strStatus) {
			set strStatus = $$OnBeforeSave^VARINReceiptLine(pstrKeys,pobjRECLine)
		}
	}
		
	set:$$$ISERR(strStatus) YRETVAL = strStatus
	
	quit
	
	
	//Copy in OnBlurOld before changes made
OnBlur(pstrKeys,pobjRECLine,pGridRow,pGridCol)
	;-------------------------------------------------------------------------------
	; 
	; Inputs :
	;	pstrKeys	- INRECLine key    (YKEY)
	;	pobjRECLine	- INRECLine object (YFELD)
	; 
	; ByRef: YFORM
	; 
	; History:
	; 17-Jun-2009 	PPP 	SR16510: Updated routine to use INItemPolicy class
	; 23-Mar-2009	DavidR	SR16363: commented the update of WWWDATEN on blur of
	;							quantity, dont want to alter the header tab on INReceipt
	; 10-Mar-2009	HQN		AdHoc: use variables to prevent redundant processing
	; 05-Mar-2009	HQN		SR16363: Update INRECSummary Grid Line record if present
	; 25-Feb-2009	GRF		SR16394: Clarify idClassField rather than idField
	; 13-Feb-2009	HQN		SR16352: Force OnBeforeFormat to be called regardless
	; 07-Jan-2009	HQN		SR16268: Suggest ExpirationDate for exisiting LotNumber
	; 06-Jan-2009	HQN		SR16286: Created
	;-------------------------------------------------------------------------------
	new dteExpiry,fltConv,idClassField,idItem,loopPolicyAttr
	new objBundle,objRECLine,objResultSet,objUItem,sc
	
	$$$LogR("OnBlur",pstrKeys)
	
	set idClassField = $$$GetClassField(YFORM,pGridCol)
	
	if idClassField = $$$FldINRECLineExpirationDate {
		do AddReference^COMGridEdit31Interface($$$FldINRECLineLotNumber)
		do ScreenUpdateStyle^COMGridEdit31S("Y"_pGridRow_"_"_$$$GetFormField(YFORM,$$$FldINRECLineLotNumber))
	
	} elseif idClassField = $$$FldINRECLineLotNumber {
		if ($$$INRECLineLotNumber(pobjRECLine) '= "") && ($$$INRECLineExpirationDate(pobjRECLine) = "") {
			set idItem   = $$$INRECLineItem(pobjRECLine)
			//SR16510
			set dteExpiry = ##class(alSOH.iUItemPolicy).GetExpiryForLot(idItem,$$$INRECLineLotNumber(pobjRECLine))
			if dteExpiry'="" {
				set objRECLine = $$$GRIDGetYFELD($$GetYKEY^COMGridEdit31Interface(pGridRow))
				set $$$INRECLineExpirationDate(objRECLine) = dteExpiry	//objBundle.Attributes.GetAt(objBundle.Attributes.FindObjectId(objBundle.%Id()_"||Use By Date")).AttributeValue
				do ScreenUpdate^COMGridEdit31S("Y"_pGridRow_"_"_pGridCol,objRECLine,$$$GRIDGetYFELD($$GetYKEY^COMGridEdit31Interface(pGridRow)),pGridCol)
			}
			
		} else {
			do ScreenUpdateStyle^COMGridEdit31S("Y"_pGridRow_"_"_$$$GetFormField(YFORM,$$$FldINRECLineLotNumber))
		}
		
	//SR16815
	} elseif idClassField = $$$FldINRECLineUnitQuantity {
		set fltConv = $$GetUOMConversion^INUOMConversion($$$INRECLineItem(pobjRECLine),$$$INRECLineUnit(pobjRECLine)) 
		set $$$INRECLineQuantity(pobjRECLine) = $$$INRECLineUnitQuantity(pobjRECLine) * fltConv				
		do AddReference^COMGridEdit31Interface($$$FldINRECLineQuantity)
		//do ScreenUpdate^COMGridEdit31S("Y"_pGridRow_"_"_pGridCol,objRECLine,$$$GRIDGetYFELD($$GetYKEY^COMGridEdit31Interface(pGridRow)),pGridCol)
		
		//} elseif idClassField = $$$FldINRECLineQuantity {
		//	if $data(^WWWDATEN(0,+$horolog,YUSER,"INRECSummary","V","REFERENCEROW",$$$KEY2(pstrKeys))) {
		//		set idSummary  = $$$KEY2(pstrKeys)\1
		//		set fltLineQty = $$GetQtyEntered(pstrKeys)
		//	}
	}
	do ScreenUpdateStyle^COMGridEdit31S("Y"_pGridRow_"_"_pGridCol)
	
	quit
	
	
OnBlurQty(pstrKeys,&pobjRECLine,pGridRow,pGridCol)
	;-------------------------------------------------------------------------------
	; 
	; Inputs :
	;	pstrKeys	- INRECLine key    (YKEY)
	;	pobjRECLine	- INRECLine object (YFELD)
	; 
	; ByRef: YFORM
	; 
	; History:
	; 03-Aug-2009 	PPP 	SR16815: Updated Qty based on Rec Unit
	;-------------------------------------------------------------------------------
	new fltConv
		
	set fltConv = $$GetUOMConversion^INUOMConversion($$$INRECLineItem(pobjRECLine),$$$INRECLineUnit(pobjRECLine)) 
	set $$$INRECLineQuantity(pobjRECLine) = $$$INRECLineUnitQuantity(pobjRECLine) * fltConv				
	do AddReference^COMGridEdit31Interface($$$FldINRECLineQuantity)
	do ScreenUpdateStyle^COMGridEdit31S("Y"_pGridRow_"_"_pGridCol)
	quit
	
	
ToggleStorage(pobjRECLine)
	;-------------------------------------------------------------------------------
	; Disable Storage field if item is consumable
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 29-Apr-2006	SC		SR14422: Validate line item and location.
	; 21-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	;quit:pobjRECLine=""
	$$$LogR("ToggleStorage",pobjRECLine)
	
	quit:(($$$INRECLineItem(pobjRECLine)="")||($$$INRECLineLocation(pobjRECLine)=""))
	
	if $$IsConsumable^INARTLOCPAR($$$INRECLineItem(pobjRECLine),$$$INRECLineLocation(pobjRECLine)) {
		set YHID = 1
	}
	
	quit
	
	
	// **********************   DEPRECATED - SR16510: ************************************
	/*
OnBlurOld(pstrKeys,pobjRECLine,pGridRow,pGridCol)
	;-------------------------------------------------------------------------------
	; 
	; Inputs :
	;	pstrKeys	- INRECLine key    (YKEY)
	;	pobjRECLine	- INRECLine object (YFELD)
	; 
	; ByRef: YFORM
	; 
	; History:
	; 23-Mar-2009	DavidR	SR16363: commented the update of WWWDATEN on blur of
	;							quantity, dont want to alter the header tab on INReceipt
	; 10-Mar-2009	HQN		AdHoc: use variables to prevent redundant processing
	; 05-Mar-2009	HQN		SR16363: Update INRECSummary Grid Line record if present
	; 25-Feb-2009	GRF		SR16394: Clarify idClassField rather than idField
	; 13-Feb-2009	HQN		SR16352: Force OnBeforeFormat to be called regardless
	; 07-Jan-2009	HQN		SR16268: Suggest ExpirationDate for exisiting LotNumber
	; 06-Jan-2009	HQN		SR16286: Created
	;-------------------------------------------------------------------------------
	new idClassField,idItem,loopPolicyAttr,objBundle,objRECLine,objResultSet,objUItem,sc
	new idINRECSummary,fltLineQuantity
	
	$$$LogR("OnBlur",pstrKeys)
	
	set idClassField = $$$GetClassField(YFORM,pGridCol)
	
	if idClassField = $$$FldINRECLineExpirationDate {
		do AddReference^COMGridEdit31Interface($$$FldINRECLineLotNumber)
		do ScreenUpdateStyle^COMGridEdit31S("Y"_pGridRow_"_"_$$$GetFormField(YFORM,$$$FldINRECLineLotNumber))
	
	} elseif idClassField = $$$FldINRECLineLotNumber {
		if ($$$INRECLineLotNumber(pobjRECLine) '= "") && ($$$INRECLineExpirationDate(pobjRECLine) = "") {
			set idItem   = $$$INRECLineItem(pobjRECLine)
			set objUItem = ##class(alINV.iUINV).GetItem(idItem,.sc)
			if $$$ISOK(sc) {
				set loopPolicyAttr = objUItem.ItemPolicy.Attributes.FindObjectId(objUItem.ItemPolicy.%Id()_"||Lot Number")
				if (loopPolicyAttr '= "") && objUItem.ItemPolicy.Attributes.GetAt(loopPolicyAttr).IsUnique {
					set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleAttribute:GetValueForItemAttribute")
					set sc = objResultSet.Execute(idItem,"Lot Number")
					if $$$ISOK(sc) {
						while objResultSet.Next(.sc) {
							if objResultSet.Data("AttributeValue") = $$$INRECLineLotNumber(pobjRECLine) {
								set objBundle  = ##class(alSOH.dBundle).%OpenId(objResultSet.Data("Bundle"))
								set objRECLine = $$$GRIDGetYFELD($$GetYKEY^COMGridEdit31Interface(pGridRow))
								set $$$INRECLineExpirationDate(objRECLine) = objBundle.Attributes.GetAt(objBundle.Attributes.FindObjectId(objBundle.%Id()_"||Use By Date")).AttributeValue
								do ScreenUpdate^COMGridEdit31S("Y"_pGridRow_"_"_pGridCol,objRECLine,$$$GRIDGetYFELD($$GetYKEY^COMGridEdit31Interface(pGridRow)),pGridCol)
								quit ; while break
							}
						}
					}
				}
			}
		} else {
			do ScreenUpdateStyle^COMGridEdit31S("Y"_pGridRow_"_"_$$$GetFormField(YFORM,$$$FldINRECLineLotNumber))
		}
	; SR16363 vvvv
	} elseif idClassField = $$$FldINRECLineQuantity {
		if $data(^WWWDATEN(0,+$horolog,YUSER,"INRECSummary","V","REFERENCEROW",$$$KEY2(pstrKeys))) {
	;		; 10-Mar-2009 vvvv
			set idINRECSummary = $$$KEY2(pstrKeys)\1
			set fltLineQuantity = $$GetQtyEntered(pstrKeys)
	;		; 10-Mar-2009 ^^^^
	;		; Direct Grid Write! No off screen grid manipulation implemented
	;		;set ^WWWDATEN(0,+$horolog,YUSER,"INRECSummary","V","Y"_idINRECSummary_"_"_$$$FldINRECSummaryQuantityReceived,1) = fltLineQuantity
	;		;set ^WWWDATEN(0,+$horolog,YUSER,"INRECSummary","V","REFERENCEVALUE","Y"_idINRECSummary_"_"_$$$FldINRECSummaryQuantityReceived,1) = fltLineQuantity
		}
	; SR16363 ^^^^
	}
	do ScreenUpdateStyle^COMGridEdit31S("Y"_pGridRow_"_"_pGridCol) ; SR16352
	quit
	
	//*************************************************************************************
	*/
	
]]></Routine>
</Export>