<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Routine name="VARINART" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[VARINART
#include COMSYS
#include INConst
#include WWWConst

OnAfterDataFieldsCustom(pidItem)
	new strListaFornecedores, count, idFornecedor, objFornecedor, nomeFantasia, cnpjcpf,
		telefone, fax
	
	;Preservar a execução do OnAfterDataFields do formulário, e incluir o da customização	
	set YSTOP = $$$NO
	
	quit:($$$NoKey(pidItem))
	
	if (($get(YSEITE)) = 51) {  		// Aba Fornecedores
		do PrintFornecedores(pidItem)  
	
	} elseif (($get(YSEITE) = 53)) { 	// Aba Histórico	
		do PrintHistoricoItem(pidItem)
	}
	
	quit
	
ItemTemMovimentacao(pItem,pLocal="")
	;
	; Retorna se o item já teve movimentação para o local
	;
	;
	new blnTemMov,QtdeMov
	
	set blnTemMov 	= $$$NO
	set QtdeMov 	= 0
	
	&SQL(
		SELECT COUNT(Item) INTO :QtdeMov
		FROM alSOH.dStockHistory
		WHERE Item = :pItem
		AND (NVL(:pLocal,'') = '' OR Location = :pLocal)
	)
	
	if ((SQLCODE = 0) && (QtdeMov > 0)) {
		set blnTemMov = $$$YES
	}
	
	quit blnTemMov
	
	
PrintFornecedores(pidItem)
	quit:(pidItem = "")
	
	new strListaFornecedores, count, lstHeader, idFornecedor, objFornecedor, nomeFantasia, cnpjcpf,
		email, telefone, fax
	
	set strListaFornecedores = $$GetFornecedores(pidItem)
	set count = 0
		
	//Monta cabeçalho da tabela
 	set lstHeader=""
  	set lstHeader=lstHeader_$listbuild("Seq.","Cód.","Fornecedor","CNPJ/CPF","Email","Telefone 1","Fax")
				 			    			    							 	
  	if $$Start^COMTable(lstHeader,"<div style=margin:3px;>Fornecedores identificados para o produto</div>",,,$$$NO) {
		
		for cnt = 1:1:$length(strListaFornecedores,";") {      		
    		set idFornecedor = $piece(strListaFornecedores,";",cnt)
     			
    		continue:(idFornecedor = "")
    		continue:(idFornecedor = 0)  ;Não mostrar o fornecedor 0-Própria Empresa
    		set count = $i(count)
      			
    		set objFornecedor = $get(^INLIEF(YM,idFornecedor,1))
    		set nomeFantasia  = $piece(objFornecedor,Y,8)
    		set cnpjcpf       = $piece(objFornecedor,Y,201)
      		set email         = $piece(objFornecedor,Y,24)
      		set telefone      = $piece(objFornecedor,Y,208)
      		set fax       	  = $piece(objFornecedor,Y,22)
      			
      		do NewLine^COMTable()
      		do InsertCell^COMTable(count,"INLIEF",idFornecedor)
      		do InsertCell^COMTable(idFornecedor,"INLIEF",idFornecedor)
      		do InsertCell^COMTable(nomeFantasia,"INLIEF",idFornecedor)
      		do InsertCell^COMTable(cnpjcpf,"INLIEF",idFornecedor)
      		do InsertCell^COMTable(email,"INLIEF",idFornecedor)
      		do InsertCell^COMTable(telefone,"INLIEF",idFornecedor)
      		do InsertCell^COMTable(fax,"INLIEF",idFornecedor)
      		do EndLine^COMTable()		
		}
		
		if (count = 0) {
			do NewLine^COMTable()
			do InsertCell^COMTable("Nenhum fornecedor identificado para o produto.",,,,,,7)
			do EndLine^COMTable()			
		}
		
		if ((YKEY = "") || (YKEY = "+")) {
			do NewLine^COMTable()
			do InsertCell^COMTable("Favor selecionar um produto.",,,,,,7)
			do EndLine^COMTable()
		}
		
		do Stop^COMTable()
  	}

	quit


GetFornecedores(pListItems)
	quit:(pListItems = "") ""
	
	new strListaFornecedores, cnt, idItem	
	set strListaFornecedores = ""

	for cnt = 1:1:$length(pListItems,";") {
		
		set idItem = $piece(pListItems,";",cnt)
		
		continue:(idItem = "")
		continue:('$data(^INART(YM,idItem)))

		// 1. Busca a lista com as empresas que fornecem determinado produto, conforme relacionamento definido na INART
		new idFornecedor, objFornecedor, strGroups, strItems, strItemsFind, itemFind, idGroup, groupFind, strGroupsFind,
			idFornecedorFind

		$$$Order2(^INLIEF,YM,idFornecedor)		
			set objFornecedor = $get(^INLIEF(YM,idFornecedor,1))			
			
			//Verifica se o fornecedor já foi selecionado 
			set idFornecedorFind = ";"_idFornecedor_";"
			continue:($find(strListaFornecedores,idFornecedorFind))			
			
			set strItems  = $piece(objFornecedor,Y,229)
			set strGroups = $piece(objFornecedor,Y,246)
					
			if (strItems '= "") {
				set strItemsFind = ";"_strItems_";"			
				set itemFind = ";"_idItem_";"
		
				if $find(strItemsFind,itemFind) {
				
					if (strListaFornecedores = "") {
						set strListaFornecedores = strListaFornecedores_";"_idFornecedor_";"
					} else {
						set strListaFornecedores = strListaFornecedores_idFornecedor_";"
					}
				
					continue ;se já encontrou o produto individualmente, não há porque verificar se o grupo está lá também
				}
			}
		
			if (strGroups '= "") {
				set strGroupsFind = ";"_strGroups_";"			
			
				set idGroup = $piece($get(^INART(YM,idItem,1)),Y,30)
				set groupFind = ";"_idGroup_";"
		
				if $find(strGroupsFind,groupFind) {
					if (strListaFornecedores = "") {
						set strListaFornecedores = strListaFornecedores_";"_idFornecedor_";"
					} else {
						set strListaFornecedores = strListaFornecedores_idFornecedor_";"
					}
				}
			}		
	
		$$$End

		// 2. Busca a lista com as empresas que já forneceram determinado produto conforme relacionamento na INAUF 
		new idCompra, idFornecedorCompra, idFornecedorCompraFind, objCompra
		$$$Order4(^INAUFPs,YM,8,idItem,idCompra)
	
			set objCompra = $get(^INAUF(YM,idCompra,1))
			set idFornecedorCompra = $piece(objCompra,Y,12)
			continue:(idFornecedorCompra = "")
		
			set idFornecedorCompraFind = ";"_idFornecedorCompra_";"
		
			if '$find(strListaFornecedores,idFornecedorCompraFind) {
				if (strListaFornecedores = "") {
					set strListaFornecedores = strListaFornecedores_";"_idFornecedorCompra_";"
				} else {
					set strListaFornecedores = strListaFornecedores_idFornecedorCompra_";"
				}
			}
		
		$$$End
	}

	quit strListaFornecedores

GerarChaveINART(pYKEY, pYFELD, pRetorno = 0)
	;do GerarChaveINART^VARINART(YKEY, YFELD)
 
	if (pYKEY = 0) || (pYKEY = "") || (pYKEY = "+") {
	
		new codSubGrupo, codGrupo, novoCodigo, proxCodigo, proxCodigoStr
		
		set strStatus = $$$OK
		
		set codSubGrupo = $piece(pYFELD,Y,30)
		set codGrupo    = $piece(codSubGrupo,".",1)

		set proxCodigo  = $increment(^VARINARTContador(codGrupo), 1)
		
		;Preenche com zeros a esquerda
		set proxCodigoStr = $$FillChar^VARSQL(proxCodigo,4,"0")
		
		set novoCodigo = codGrupo_proxCodigoStr

		if $D(^INART(YM,novoCodigo)){
			set strStatus = "O produto "_novoCodigo_" não pôde ser cadastrado."
		}
		else{
			;Insere os dados na Classe(Classe,Chave Primária,Valores,Always Save)
			set strStatus = $$$Save("INART",novoCodigo,pYFELD,1)
		}

		if (pRetorno = 1) {
			If (strStatus'=$$$OK) {
				Quit "0~"_strStatus
			}else{
				Quit "1~"_novoCodigo
			}
		}


		if strStatus'=$$$OK {
			set Q = $$$QDontSave
			do ^WWWINFO(strStatus)		
		}
		else{

			$$$StartScript()
			write "BEARB('Salvo',1); "
			$$$EndScript()

			
			;Altera a aba para 50-Principal, que é customizada
			;Pois estava abrindo na aba 1-Geral
			set YSEITE = 50
			do RedirectForm^COMUtilForm("INART",novoCodigo,YBACK,YPARA,YSEITE)
			//do GoToForm^COMUtilForm("INART", novoCodigo, 1)
			
			set Q = $$$QDontSave
			
		}
 
	}


	quit	
	
	
PopularContador()
	;do PopularContador^VARINART()

	if $G(YM) = ""{
		do ^WWWVAR
	}
	
	
	;Limpa global
	kill ^VARINARTContador
	
	;Para cada produto 
	set codItem = ""
	for {
		set codItem = $order(^INART(0,codItem))
		quit:(codItem = "")
 
		set objITEM = $get(^INART(0,codItem,1))
		if objITEM = ""{
			W "Dados não encontrados: "_codItem ,!
			continue
		}
		
		set codSubGrupoCad = $piece(objITEM,Y,30)
		if codSubGrupoCad = ""{
			W "Sub-Grupo em branco: "_codItem ,!
			continue
		}
		
		set codGrupoCad = $piece(codSubGrupoCad,".",1)
		if codGrupoCad = ""{
			W "Grupo em branco: "_codItem ,!
			continue
		}
			
		
		set tamGrupo   = $length(codItem)-4
		set codGrupo   = $extract(codItem,1,tamGrupo)
		set codProduto = $extract(codItem,tamGrupo+1,$length(codItem))
		
		if (codGrupoCad'=codGrupo) {
			W "Grupo cadastrado diferente do código do produto: "_codItem_" Grupo Cadastrado: "_codGrupoCad ,!
			continue	
		}
		;W codItem_": "_codGrupo_"-"_codProduto_"#"
		
		;Remove zeros a esquerda e grava no contador
		set ^VARINARTContador(codGrupo) = $zstrip($fnumber(codProduto,"T"),"<>W")
		
	}
	
	W "Contadores gerados:" ,!
	set codContador = ""
	for {
		set codContador = $order(^VARINARTContador(codContador))
		quit:(codContador = "")
		
		W "Grupo: "_codContador_" = "_$G(^VARINARTContador(codContador)) ,!

	}	
	


	quit
	
	
CheckItemPolicyHasProgram(pidItem)
	;Gustavo - 01/Set/2011 - Verifica se a política do produto contempla programa ou não
	quit:(pidItem = "") ""
	
	new objItem, idItemPolicy, objPolicy, ProgramPolicy, blnItemPolicyHasProgram
	
	set objItem = $get(^INART(YM,pidItem,1))
	set idItemPolicy = $$$INARTItemPolicy(objItem)
	
	if (idItemPolicy '= "") {		
		set objPolicy = $get(^INItemPolicy(YM,idItemPolicy,1))
		set ProgramPolicy = $$$INItemPolicyProgram1(objPolicy)
		
		if ( (ProgramPolicy = 1) || (ProgramPolicy = 3) ) { //1=Sim ou 3=Opcional
			set blnItemPolicyHasProgram = $$$YES
		} else {
			set blnItemPolicyHasProgram = $$$NO
		}
	}
	
	quit blnItemPolicyHasProgram
	
	
CheckItemPolicyHasBrand(pidItem)
	;Gustavo - 01/Set/2011 - Verifica se a política do produto contempla marca ou não
	quit:(pidItem = "") ""
	
	new objItem, idItemPolicy, objPolicy, ProgramPolicy, blnItemPolicyHasBrand
	
	set objItem = $get(^INART(YM,pidItem,1))
	set idItemPolicy = $$$INARTItemPolicy(objItem)
	
	if (idItemPolicy '= "") {		
		set objPolicy = $get(^INItemPolicy(YM,idItemPolicy,1))
		set ProgramPolicy = $$$INItemPolicyBrand(objPolicy)
		
		if ( (ProgramPolicy = 1) || (ProgramPolicy = 3) ) { //1=Sim ou 3=Opcional
			set blnItemPolicyHasBrand = $$$YES
		} else {
			set blnItemPolicyHasBrand = $$$NO
		}
	}
	
	quit blnItemPolicyHasBrand
	
	
PrintHistoricoItem(pidItem)
   ;-------------------------------------------------------------------------------
    ; Exibe tabela com o histórico de alterações do item.
    ;
    ; Histórico:
    ; 16-Out-2011	RGB					Alterações para pegar a ultima hora e usuários que alteraram.
    ;									Por causa de outro salvamento realizado pela ^INART, ignoro alterações feitos pelo mesmo usuário em um espaço de 2 segundos.
    ; 14-Set-2011	Gustavo Fiuza		Criado
    ;-------------------------------------------------------------------------------
	quit:(pidItem = "")

	new count, lstHeader, date, hour, idUsuario, objWWWPROAntes, objWWWPRODepois, acao, formatPre, formatPos,
		ADescResumida, DDescResumida, ADescCompleta, DDescCompleta, AUnidade, DUnidade, DGrupo, AGrupo, 
		APadrao, DPadrao, ACurvaABC, DCurvaABC, AClassXYZ, DClassXYZ, AStatus, DStatus, lastTimeChange,lastUserChange,lastDateChange		

	set formatPre = "<font color=red>"
	set formatPos = "</font>"
	set lastDateChange=""
	set lastTimeChange=""
	set lastUserChange=""
    set count = 0
    set lstHeader = ""
	set lstHeader = lstHeader_$listbuild("Seq.","Ação","Data","Hora","Usuário","Descrição Resumida","Descrição Completa","UN","Grupo","Status","Padrão","ABC","XYZ")

    if $$Start^COMTable(lstHeader,"&nbsp;Histórico de Alterações do Produto",,,$$$NO) {
	    
	    $$$Order3(^WWWPRO,YM,"INART",date)
	    	$$$Order4(^WWWPRO,YM,"INART",date,hour)
	    		$$$Order5(^WWWPRO,YM,"INART",date,hour,idUsuario)
	    			$$$Order7(^WWWPRO,YM,"INART",date,hour,idUsuario,pidItem,idEstado)
	    				
	    				//Rodando somente no estado 1 (melhor performance)
	    				continue:(idEstado = 0)
	    				continue:((idUsuario=lastUserChange) && (lastDateChange=date) && (hour-lastTimeChange<2))
	    				set objWWWPROAntes  = $get(^WWWPRO(YM,"INART",date,hour,idUsuario,YKEY,0,1)) //Antes
	    				set objWWWPRODepois = $get(^WWWPRO(YM,"INART",date,hour,idUsuario,YKEY,1,1)) //Depois
	    			
	    				if ( (objWWWPROAntes = "") && (objWWWPRODepois '= "") ) {
		    				set acao = "Criado"
	    			
	    				} elseif ( (objWWWPROAntes '= "") && (objWWWPRODepois = "") ) {
		    				set acao = "Excluído"
	    			
	    				} else {
		    				set acao = "Alterado"
	    				}
	    			
	    				set ADescResumida    = $piece(objWWWPROAntes,Y,1)
	    				set ADescCompleta    = $piece(objWWWPROAntes,Y,10)
	    				set AGrupo	         = $piece(objWWWPROAntes,Y,30)
	    				set AUnidade         = $piece(objWWWPROAntes,Y,40)
	    				set AStatus			 = $piece(objWWWPROAntes,Y,66)
						set ACurvaABC		 = $piece(objWWWPROAntes,Y,166)
						set AClassXYZ		 = $piece(objWWWPROAntes,Y,277)	    				
	    				set APadrao			 = $piece(objWWWPROAntes,Y,280)

	    				set DDescResumida    = $piece(objWWWPRODepois,Y,1)
	    				set DDescCompleta    = $piece(objWWWPRODepois,Y,10)
	    				set DGrupo	  		 = $piece(objWWWPRODepois,Y,30)
	    				set DUnidade   		 = $piece(objWWWPRODepois,Y,40)
	    				set DStatus			 = $piece(objWWWPRODepois,Y,66)
						set DCurvaABC		 = $piece(objWWWPRODepois,Y,166)
						set DClassXYZ		 = $piece(objWWWPRODepois,Y,277)
	    				set DPadrao			 = $piece(objWWWPRODepois,Y,280)
						
						//Formatting data...
	    				if ( (ADescResumida '= DDescResumida) && (acao '= "Criado") ) {
	    					set DDescResumida = formatPre_DDescResumida_formatPos
	    				}
	    				
	    				if ( (ADescCompleta '= DDescCompleta) && (acao '= "Criado") ) {
	    					set DDescCompleta = formatPre_DDescCompleta_formatPos
	    				}

	    				if ( (AGrupo '= DGrupo) && (acao '= "Criado") ) {
	    					set DGrupo = formatPre_DGrupo_formatPos
	    				}

	    				if ( (AUnidade '= DUnidade) && (acao '= "Criado") ) {
		    				set DUnidade = formatPre_$$SQLGetSiglaUnit^VARSQL(DUnidade)_formatPos
	    				} else {
		    				set DUnidade = $$SQLGetSiglaUnit^VARSQL(DUnidade)
	    				}   								 				
	    				
	    				if ( (AStatus '= DStatus) && (acao '= "Criado") ) {
		    				set DStatus = formatPre_$piece($get(^INItemStatus(YM,DStatus,1)),Y,1)_formatPos
	    				} else {
		    				set DStatus = $piece($get(^INItemStatus(YM,DStatus,1)),Y,1)
	    				}
	    				
	    				if ( (ACurvaABC '= DCurvaABC) && (acao '= "Criado") ) {
	    					set DCurvaABC = formatPre_DCurvaABC_formatPos
	    				}
	    				
	    				if ( (AClassXYZ '= DClassXYZ) && (acao '= "Criado") ) {
	    					set DClassXYZ = formatPre_DClassXYZ_formatPos
	    				}	    					    				
	    				
	    				if ( (APadrao '= DPadrao) && (acao '= "Criado") ) {
		    				set DPadrao = formatPre_$$SQLGetYesOrNo^VARSQL(DPadrao)_formatPos
	    				} else {
		    				set DPadrao = $$SQLGetYesOrNo^VARSQL(DPadrao)
	    				}
					
						set count = $i(count)
						
						do NewLine^COMTable()
						do InsertCell^COMTable(count)
						do InsertCell^COMTable(acao)
						do InsertCell^COMTable($zdate(date,4))
						do InsertCell^COMTable($ztime(hour))
						do InsertCell^COMTable(idUsuario)
						do InsertCell^COMTable(DDescResumida,,,,,,,,,$$$YES)
						do InsertCell^COMTable(DDescCompleta,,,,,,,,,$$$YES)
						do InsertCell^COMTable(DUnidade)
						do InsertCell^COMTable(DGrupo)
						do InsertCell^COMTable(DStatus,,,,,,,,,$$$YES)
						do InsertCell^COMTable(DPadrao)
						do InsertCell^COMTable(DCurvaABC)
						do InsertCell^COMTable(DClassXYZ)
						do EndLine^COMTable()
						set lastDateChange=date
						set lastTimeChange=hour
	    				set lastUserChange=idUsuario
					$$$End	
				$$$End
			$$$End
		$$$End
    }

	quit

OnAfterSaveHook(YKEY,YFELD)
	;-------------------------------------------------------------------
	; Descrição:
	;	Executado após de salvar
	;
	; Chamado Por:
	; 	OnAfterSaveHook do callback de cliente da classe INART
	;
	; Histórico:
	;	2017-Jan-06		FC		LEAN-12: Chama a função para autorizar o produto que é cadastro para todos os locais
	;
	;-------------------------------------------------------------------
	if ($$$INARTAverageCost(YFELD) '= $$$INARTAverageCost(YFELDOLD)) {
	    new objINARTT, idINARTT1, idINARTT2
	    set idINARTT1 = ""
	    for {
		    set idINARTT1 = $order(^INARTTs(0,1,YKEY,idINARTT1))
		    if (idINARTT1 = "") quit
		    set idINARTT2 = ""
		    for {
			    set idINARTT2 = $order(^INARTT(0,idINARTT1,idINARTT2))
			    if (idINARTT2 = "") quit
			    set objINARTT = ^INARTT(0,idINARTT1,idINARTT2,1)
			    if ($$$INARTTItemNumber1(objINARTT) = YKEY) {
				    set $$$INARTTValue1(objINARTT) = $$$INARTAverageCost(YFELD) * $$$INARTTQuantity(objINARTT)
				    set strStatus = $$$Save("INARTT",idINARTT1_$$$COMMA_idINARTT2,objINARTT,$$$YES)
			    }
		    }
	    }
    }
    
    if ($data(^CacheTempRegistroNovo(YM,"PRODUTO",YKEY))) {
		set strStatus = $$AutorizaProduto^VARAutorizacaoProdutoLocal(YKEY)
		
		if ('$$$ISOK(strStatus)) {
			set strStatus = $$$OK
		}
		else {
			kill ^CacheTemp]]><![CDATA[RegistroNovo(YM,"PRODUTO",YKEY)
		}
	}
	quit $$$OK
	
CreateINARTLOCPARForUnit(Product,objINART)
	new location,EndUnitPadrao,objLocation,objLOCPAR
	if $$$INARTFREE12(objINART)=1 { //If the product is set for unitarization
		$$$Order3(^WWW0121,YM,YM,location)
			set objLocation=$get(^WWW0121(YM,YM,location,1))
			set EndUnitPadrao = $$$WWW0121FREE14(objLocation) //Getting standard stock location for unitarization
			if EndUnitPadrao'="" { //If the location has a unitarization storage, then create inartlocpar records
				set objLOCPAR=$get(^INARTLOCPAR(YM,Product,location,1))
				set locparKey=Product_","_location
				set $$$INARTLOCPARDefaultReceiptStorage(objLOCPAR)=EndUnitPadrao
				set strStatus=$$Save^COMUtils("INARTLOCPAR",locparKey,objLOCPAR,1)
			}
		$$$End
	}
	q
	
RunAll
	do ^WWWVAR
	set YBED="RUBENS"
	$$$Order2(^INART,YM,produto)
		set YFELD=$GET(^INART(YM,produto,1))
		do CreateINARTLOCPARForUnit(produto,YFELD)
	$$$End
	q
	
LoadINARTLOCPAR(Product)
	$$$VAR
	set Location=""
	set Location=$order(^WWW0121(YM,YM,Location))
	while Location'="" {
		set objLocation=""
		set objLocation=$get(^WWW0121(YM,YM,Location,1))
		// Consumo automático para o local
		if $$$WWW0121FREE8(objLocation)=1 {
			set objPar=""
			set objPar=$get(^INARTLOCPAR(YM,Product,Location,1))
			set $piece(objPar,Y,1)=1
			set key=Product_","_Location
			set strStatus=$$Save^COMUtils("INARTLOCPAR",key,objPar,1)
			if strStatus'=1 {
				//set errorstring="Erro ao salvar INARTLOCPAR "_key_" . Erro->"_strStatus
				//$$$Alert(errorstring)
			}
		}
		set Location=$order(^WWW0121(YM,YM,Location))
	}
	quit
	
AlteraTipoDispensacao(pIdINART,pTipoDispensacao)
   ;-------------------------------------------------------------------------------
   ; Altara o Tipo de Dispensação
   ; Deve ser chamado via terminal 
   ; do AlteraTipoDispensacao^VARINART(pIdINART,pTipoDispensacao) 
   ;
   ; Histórico:
   ; 01-Aug-2012	Adrieu Dias		Criado
   ;-------------------------------------------------------------------------------
	$$$VAR
    new objINART
    set objINART =  $get(^INART(YM, pIdINART, 1))
    if (objINART = "") quit
	set $$$INARTItemPolicy(objINART) = pTipoDispensacao
	quit $$$Save("INART", pIdINART, objINART, 1)

ImprimirEtq(pYKEY)

	set $piece(^VARTempProdutoEtq(YM,YBED,1),Y,1) = pYKEY

	do GoToForm^COMUtilForm("VARProdutoEtq",pYKEY)
	quit
	
OnBeforeSaveHook(pYKEY)
	;-------------------------------------------------------------------
	; Descrição:
	;	Executado antes de salvar
	;
	; Chamado Por:
	; 	OnBeforeSaveHook do callback de cliente da classe INART
	;
	; Histórico:
	;	2017-Jan-06		FC		LEAN-12: Criado - Cria controle de global temporária para ser utilizada no OnAfterSaveHook
	;
	;-------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$$OK
	
	if ('$data(^INART(YM,pYKEY))) {
		set ^CacheTempRegistroNovo(YM,"PRODUTO",pYKEY) = ""
	}
	
	quit strStatus]]></Routine>
</Export>