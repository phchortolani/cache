<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INWE" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INWE
#include COMSYS
#include INConst
	
	;---------------------------------------
	;
	; *** UPDATE INWE POINT ***
	; 
	; This comment marks where the INWE class is being
	; saved or killed as a common method - may need to
	; have some additional code for bundle updating.     <GRF>
	;
	;---------------------------------------
	
OldAdjust(pidItem,pidLoc,pidStkLoc,pdte,&pfltQty,blnAllowNegative=$$$NO)
	;-------------------------------------------------------------------------------
	; Adjust an INWE record.
	;
	; Params:	pidItem,pidLoc,pidStkLoc,pdte - INWE keys
	; 			blnAllowNegative 	- can the SOH (qty) go negative ?
	;
	; ByRefs:	pfltQty - qty to adjust. Will be returned with the amount not adjusted.
	;
	; Returns:	status
	;
	; History:
	; 05-Feb-2008	FIS		re-named to OldAdjust to activate new Adjust
	; 31-Jan-2008	GRF		Doco
	; 17-Aug-2006	JW		SR14826: Created
	;-------------------------------------------------------------------------------
	new objSOH,fltSOHQty,fltAdjQty,strStatus
	
	set strStatus = $$$OK
	
	lock +^INWE(YM,pidItem,pidLoc,pidStkLoc,pdte):10
	if $test {
		set objSOH = $get(^INWE(YM,pidItem,pidLoc,pidStkLoc,pdte,1))
		
		set fltSOHQty = $$$INWEQuantity(objSOH)
		set fltAdjQty = 0
		
		if pfltQty>0 || blnAllowNegative {
			set fltAdjQty = pfltQty						// Adjust all qty
		} elseif fltSOHQty>0 {
			set fltAdjQty = $$$Max(pfltQty,-fltSOHQty)	// Adjust to 0
		}
		
		if fltAdjQty {
			set pfltQty = pfltQty - fltAdjQty
			set $$$INWEQuantity(objSOH) = fltSOHQty + fltAdjQty
			set strStatus=$$$Save("INWE",pidItem_","_pidLoc_","_pidStkLoc_","_pdte,objSOH,1)
		}
		lock -^INWE(YM,pidItem,pidLoc,pidStkLoc,pdte)#"I"
	} else {
		// No lock, just ignore this batch (pfltQty remains the same)
	}
	
	quit strStatus
	;---------------------------------------  Adjust()
	; pfltQty	fltSOHQty	fltAdjQty	new pfltQty	   new SOH
	;-----------------------------------------------------------
	;	 0			any			 0			 0			same
	; 	 5			any			 5			 0		  incr by 5 (if start with large -ve
	; 	 											value can be negative when we finish)
	; blnAllowNegative = $$$YES
	; 	-5			any			-5			 0		  decr by 5 - may become negative
	; blnAllowNegative = $$$NO
	; 	-5			 8			-5			 0		  decr by 5
	; 	-5			 2			-2			-3			zero
	; 	-5			 0			 0			-5			same
	; 	-5			-any		 0			-5			same
	;---------------------------------------
	
	
Adjust(pidItem,pidLocn,pidStorage,pdteRcvd,&pfltQty,blnAllowNegative=$$$NO,blnOnlyIfAll=$$$NO)
	;-------------------------------------------------------------------------------
	; Adjust an INWE record.
	;
	; Params:
	; 	pidItem				>
	; 	pidLocn				>  INWE keys
	; 	pidStorage			>
	; 	pdteRcvd			>
	; 	blnAllowNegative 	- can the SOH (qty) go negative ?
	; 	blnOnlyIfAll		- $$$YES : If can't supply all, don't supply any
	;
	; ByRefs:	pfltQty - qty to adjust. Will be returned with the amount not adjusted.
	;                     This is -ve if the QOH will be reduced and +ve if it will be increased.
	;
	; Returns:	status
	;
	; History:
	; 06-Feb-2008	GRF		SRBR014564: Return actual error message
	; 05-Feb-2008	FIS		SRBR014564: re-named to Adjust to replace OldAdjust
	;                       some correction made:
	;                       pidLoc was not changed to pidLocn at all places
	;                       pidStkLoc was not changed to pidStorage at all places
	; 05-Feb-2008	FIS		SRBR014564: Change Status if "Only If All" condition fails
	; 04-Feb-2008	GRF		SRBR014564: Revised version with "Only If All" switch.
	; 31-Jan-2008	GRF		Doco
	; 17-Aug-2006	JW		SR14826: Created
	;-------------------------------------------------------------------------------
	new objSOH,fltSOHQty,fltAdjQty,strStatus
	
	set strStatus = $$$OK
	
	lock +^INWE(YM,pidItem,pidLocn,pidStorage,pdteRcvd):10
	if $test {
		set objSOH = $get(^INWE(YM,pidItem,pidLocn,pidStorage,pdteRcvd,1))
		
		set fltSOHQty = $$$INWEQuantity(objSOH)
		set fltAdjQty = 0
		
		if pfltQty>0 || blnAllowNegative {
			set fltAdjQty = pfltQty						    ; Adjust in full
		
		} elseif fltSOHQty>0 {
			if blnOnlyIfAll && (fltSOHQty+pfltQty < 0){     ; Can't adjust in full
				set fltAdjQty = 0                           ; so don't adjust
			;	"Attention! Insufficient Items In Stock!"
				set strStatus = $$$MakeStatus(33361)        ; and return status as not OK  ;SRBR014564
			
			} else {
				set fltAdjQty = $$$Max(pfltQty,-fltSOHQty)	; Partial Adjust to 0
			}
		}
		
		if fltAdjQty {
			set pfltQty = pfltQty - fltAdjQty
			set $$$INWEQuantity(objSOH) = fltSOHQty + fltAdjQty
			set strStatus=$$$Save("INWE",pidItem_","_pidLocn_","_pidStorage_","_pdteRcvd,objSOH,1)
		}
		lock -^INWE(YM,pidItem,pidLocn,pidStorage,pdteRcvd)#"I"
		
	} else {
		// No lock, just ignore this batch (pfltQty remains the same)
	}
	
	quit strStatus
	;---------------------------------------  Adjust()
	; pfltQty	fltSOHQty	fltAdjQty	new pfltQty	   new SOH
	;-----------------------------------------------------------
	;	 0			any			 0			 0			same
	; 	 5			any			 5			 0		  incr by 5 (if start with large -ve
	; 	 											value can be negative when we finish)
	; blnAllowNegative = $$$YES
	; (by it's nature always allows All)
	; 	-5			any			-5			 0		  decr by 5 - may become negative
	; blnAllowNegative = $$$NO
	; blnOnlyIfAll     = $$$NO
	; 	-5			 8			-5			 0		  decr by 5
	; 	-5			 2			-2			-3			zero
	; 	-5			 0			 0			-5			same
	; 	-5			-any		 0			-5			same
	; blnAllowNegative = $$$NO
	; blnOnlyIfAll     = $$$YES
	; 	-5			 8			-5			 0		  decr by 5
	; 	-5			 2			 0			-5			same
	; 	-5			 0			 0			-5			same
	; 	-5			-any		 0			-5			same
	;---------------------------------------
	
	
DeleteINWERecords(pidItem="",pidSite="",pidBin="")
	;-------------------------------------------------------------------------------
	; Remove a group of INWE records
	;
	; Providing
	;  * NO PARAMETERS *		- Delete all INWE records for current company
	; pidItem					- Delete all INWE records for current company and item combination
	; pidItem & pidSite			- Delete all INWE records for current company, item and site location combination
	; pidItem, pidSite & pidBin	- Delete all INWE records for current company, item, site location and stock location combination
	;
	; Params:
	; pidItem - Item identifier
	; pidSite - Site Location
	; pidBin  - Stock Location
	;
	; ByRefs: NONE
	;
	; Returns: NOTHING
	;
	; History:
	; 18-Oct-2006	JW		SR15134: Changed Kill macro. Added FIXME
	; 19-May-2006	PO		SR14546: Created
	;-------------------------------------------------------------------------------
	new idItem,idSite,idBin,dteReceived,strStatus
 	
 	// FIXME JW - this function does not do as expected. The "next item" is removed, not that
 	// passed in, and same for site and bin.
 	// 
 	// Also, status is not looked at from Kill.
 	// 
 	// This function is not currently in use. DO NOT USE until it is fixed.
 	
	set idItem = pidItem
	for {
		set idItem = $order(^INWE(YM,idItem))
		quit:idItem=""
 
		set idSite = pidSite
		for {
			set idSite = $order(^INWE(YM,idItem,idSite))
			quit:idSite=""
 
			set idBin = pidBin
			for {
				set idBin = $order(^INWE(YM,idItem,idSite,idBin))
				quit:idBin=""
 
				set dteReceived = ""
				for {
					set dteReceived = $order(^INWE(YM,idItem,idSite,idBin,dteReceived))
					quit:dteReceived=""
 
					set strStatus = $$$Kill("INWE",idItem_","_idSite_","_idBin_","_dteReceived)		//SR15134
				}
				quit:pidBin'=""
			}
			quit:pidSite'=""
		}
		quit:pidItem'=""
	}
 
	quit
]]></Routine>
</Export>