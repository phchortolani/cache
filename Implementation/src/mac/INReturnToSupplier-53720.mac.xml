<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INReturnToSupplier" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INReturnToSupplier
	
#include COMSYS
#include COMConst
#include INConst
#include COMGridEdit31
#include FINConst
	
#define FORMINReturnToSupplierReceipt(%obj) $piece(%obj,"~",31)
#define FORMFldINReturnToSupplierReceipt 	31
#define DELIM	$char(31)
#define enumAverageCost		9
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INReturnToSupplier("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
Enabled(YFELD)	;SR17228
	;-------------------------------------------------------------------------------
	; Called By : Form INReturnToSupplier : Grid Tab (COMGridEditParameter)
	;-------------------------------------------------------------------------------
	quit ($$$INIssueStatus(YFELD) = 0)
	
	
OnBeforeButtonLine(pidIssue,pobjIssue,&pobjForm)
    ;-------------------------------------------------------------------------------
    ; Set form to read-only if not editable
    ; 
    ; Called By : Form INReturnToSupplier : D93 "Execute Before Buttonline"
    ; 
    ; Params:	pidAdj		- Adj key
    ;			pobjAdj		- Adj object
    ;
    ; Returns:	pobjForm	- Form object (WWW120)
    ;
    ; History:
	; 28-Jun-2010	PPP		SR17297:Created
    ;-------------------------------------------------------------------------------
	new idLanguageText,strMessage,strStatus
	
	quit:$$$NoKey(pidIssue)
	
	set strStatus = $$Editable(pidIssue)
	
	if $$$ISERR(strStatus) {		//|| ($data(^INIssueLine(0,pidIssue))) {
		set $$$WWW120AuthorizationToModifyData(pobjForm) = $$$EnumReadOnly
	}
	quit
	
	
OnAfterDataFields(pidIssue,pobjIssue)
    ;-------------------------------------------------------------------------------
    ; Code for Grid Edit 
 	; Showing of grid is automatic if configured in Form metadata. (TAB Grid)
    ;
    ; Returns:
    ;
    ; History:
	; 28-Jun-2010	PPP		SR17297: Created
    ;-------------------------------------------------------------------------------
	quit 
	
	
OnAfterPrimaryKey(pidIssue,pobjIssue,&pobjForm)
	;-------------------------------------------------------------------------------
	; Description :
	;			
	; Called By : Form INReturnToSupplier
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
    ; 30-Aug-2012	shobby	SR18083: Removed $$$Text from inside $$$Alert
	; 01-Jul-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	new idType
	
	quit:$$$NoKey(pidIssue)
	
	set idType = $$$INIssueType(pobjIssue)
	
	if idType '= 7 {	//Return To Supplier
		$$$Alert($listbuild("IN01031",idType))  ;SR18083
		;$$$Alert($listbuild("IN01031",idType))
		set $$$WWW120AuthorizationToModifyData(pobjForm) = $$$EnumReadOnly
	}
	quit
	
	
OnBeforeSave(pidIssue,pobjIssue)
    ;-------------------------------------------------------------------------------
    ; INReturnToSupplier
    ; 
    ; Called By: Form INReturnToSupplier
    ; 
	; Params:	pidIssue - INIssue id
    ; 
    ; Returns: 
    ;
    ; History:
	; 28-Jun-2010	PPP		SR17297: Created
    ;-------------------------------------------------------------------------------
	quit
	
	
IsDeletable(pidIssue,pobjIssue)
	;-------------------------------------------------------------------------------
	; Description : Determines if the delete button should be disabled
	;			
	; Called By : INReturnToSupplier FORMSPEC
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 28-Jun-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	quit:$$$NoKey(pidIssue)
	
	if ($$$INIssueStatus(pobjIssue)>1) || ($$$INIssuePosted(pobjIssue)'="") {
		set Q = $$$QDontDelete
	}
	quit
	
	
Editable(pidIssue) 
    ;-------------------------------------------------------------------------------
    ; Is form editable (unprocessed) ?
    ;
    ; Params:	pidIssue - Issue id
    ;
    ; Returns:	status
    ;
    ; History:
	; 28-Jun-2010	PPP		SR17297: Created
    ;-------------------------------------------------------------------------------
	new enumLocnType,idLocn,objIssue,strStatus
	
	set strStatus = $$$OK
	quit:$$$NoKey(pidIssue) strStatus
	
	if $$$ISOK(strStatus) {
		set idLocn  = $$$INIssueFromLocn($get(^INIssue(0,pidIssue,1)))
		if (idLocn'="") && (idLocn'=YLOCATION) {
			set strStatus = $$$MakeStatus("IN00927",idLocn,YLOCATION)
		} ; "This document belongs to Location %1! This Location is %2. The screen will be available only for viewing documents"
	}
	
	if $$$ISOK(strStatus) && $data(^INIssue(0,pidIssue,1)) {
		set objIssue = $get(^INIssue(0,pidIssue,1))
		
		if $$$INIssueStatus(objIssue) = 9  {
			set strStatus = $$$MakeStatus("IN00377")  ; "Record already processed"
		}
		
		if $$$INIssuePosted(objIssue)'="" {
			set strStatus = $$$MakeStatus("IN00377")  ; "Record already processed"
		}
	}
	quit strStatus
	
	
CanSearchRec(pidIssue,pobjIssue)
	;-------------------------------------------------------------------------------
	; Disable buttons that allow you to search Receipts and load it if the
	; 
	;
	;
	; History:
	; 28-Jun-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$$OK
	
	if $$$NoKey(pidIssue) {
		set strStatus = $$$MakeStatus(32072)     ; "Please Select A Data Record First."
	} 
	
	if $$$ISOK(strStatus) set strStatus = $$Editable(pidIssue)
	
	$$$YQHandler(strStatus)
	
	quit strStatus
	
	
ListRec()
	;-------------------------------------------------------------------------------
	; Lists processed Receipts that are associated with the Supplier
	; 
	; 
	; History:
	; 28-Jun-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	new idSupplier
	new idLoc
	
	$$$LogR("ListRec","")
	
	//set idSupplier = $$$INIssueSupplier($get(^WWWDATEN(0,+$horolog,YUSER,"INReturnToSupplier","D",1)))
	set YFELD = $$GetFormData^COMUtilForm()
	set idSupplier 	= $$$INIssueSupplier(YFELD)
	set idLoc		= $$$INIssueFromLocn(YFELD) 
	
	do Initialise^COMViewCustom("INREC","",$$$YES)
	
	do AddFilter^COMViewCustom("D1",$$$EnumCOMVIEWCOMPARATOREquals,2)			// Type 	= 2 (Supplier Receipt)
	do AddFilter^COMViewCustom("D4",$$$EnumCOMVIEWCOMPARATOREquals,1)			// Status 	= 1 (Processed)
	do:idSupplier'="" AddFilter^COMViewCustom("D49",$$$EnumCOMVIEWCOMPARATOREquals,idSupplier)
	do:idLoc'="" AddFilter^COMViewCustom("D2",$$$EnumCOMVIEWCOMPARATOREquals,idLoc)
	
	do Start^COMViewCustom("WWW2.YINReturnToSupplierM31")
	
	quit
	
	
SelectRec() ; FIXME : Why is wrapper required?
	;-------------------------------------------------------------------------------
	; Add all valid lines to the INReturnToSupplier grid. And displays an error if no lines
	; loaded
	;
	; Called By : Form INReturnToSupplier : Button 8 "Load Receipt"
	;
	; History:
	; 29-Jun-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	$$$LogR("SelectRec","")		
	do LoadLines()
	quit
	
	
LoadLines()
	;-------------------------------------------------------------------------------
	; Copy FINAPInvMatchCache details to INIssueLine grid
	; 
	; Called By : SelectRec
	; 
	; By Ref:
	;   pblnAdded : True if lines have been added to the Requistion Template Grid
	;	YGRIDWHITE
	;	YGRIDGRAY
	;	YUSER
	;	
	; History:
	; 27-Sep-2010	GRF		SR17537: enum not int; replace early exit with else
	; 29-Jun-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	new blnCanLoad,enumHasLine,idIssue,idRec,intRowCount,objIssue,strYFELD
	
	set intRowCount = $get($$$GRIDRowCount)
	set strYFELD    = $$$GRIDYFELDContainer
	set idIssue     = $$$GRIDYKEYContainer
	quit:idIssue=""
	
	set idRec = $$$FORMINReturnToSupplierReceipt($get(^WWWDATEN(0,+$horolog,YUSER,"INReturnToSupplier","M",1)))
	quit:idRec=""
	
	; Supplier Receipt only  - AND -  Must have lines    to proceed
	if ($$$INRECType($get(^INREC(0,idRec,1)))'=2) || '$data(^INRECLine(0,idRec)) {
		$$$Alert("IN00527")
		do UpdateHeaderField^COMGridEdit31G("M"_$$$FORMFldINReturnToSupplierReceipt,"")
	 ; "There are no applicable lines to receipt"	
		
	} else {
		set blnCanLoad  = $$$YES
		set objIssue    = $$GetFormData^COMUtilForm()  
		set enumHasLine = $$GridHasLines(idIssue)     ; Check if a Line Exists on the Grid
		
		$$$StartScript()
		
	;	If Empty lines are present on the Grid, Delete the empty lines before continuing
		if enumHasLine=1 write "DeleteAllGridLines(1);"
		write "var blnOK = EventValue("""_YUCI_""","""_YUSER_""","""_YFORM_""",""FIX"",""AddLines^INReturnToSupplier"","""_idRec_""",""6"","""_strYFELD_""");"
		
		$$$EndScript()
	}
	quit
	
	
GridHasLines(pidIssue)
	;-------------------------------------------------------------------------------
	; Check if a Line Exists on the Grid
	;
	; Params:	grid Lines Array
	;
	; ByRefs:	none
	;
	; Returns:	Integer
	;			0 - No Lines
	; 			1 - Empty Line
	;			2 - Lines
	;
	; History:
	; 27-Sep-2010	GRF		SR17537: enum not int
	; 29-Jun-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	new arrGrid,enumHasLine,idLastLine,objGridLine
	
	set enumHasLine = 0
	do GetGridContents^COMGridEdit31G(.arrGrid)
	
	set idLastLine = ""
	for {
		set idLastLine = $order(arrGrid(pidIssue,idLastLine))
		quit:idLastLine=""
		
		set enumHasLine = 1
		
		set objGridLine = $get(arrGrid(pidIssue,idLastLine))
		if ($$$INIssueLineItem(objGridLine)'="")       ||
		   ($$$INIssueLineUnit(objGridLine)'="")       ||
		   ($$$INIssueLineQtyIssued(objGridLine)'="")   {
			
			set enumHasLine = 2
		}
		quit:enumHasLine=2
	}
	quit enumHasLine
	
	
AddLines(pidRec,pstrYFELD)
	;-------------------------------------------------------------------------------
	; Add all valid lines to the INReturnToSupplierLine grid. 
	;
	; Params:	none
	;
	; ByRefs:	none
	;
	; Returns:	none
	;
	; History:
	; 05-Jul-2011	GRF		SR17697: Pass FAIMC object as well since used by function
	; 06-Jul-2010	PPP		SR17297-2: Clear the Receipts Manual Field
	; 05-Jul-2010	PPP		SR17297-1: If no FINAPInvMatchCache Qty do not process
	; 29-Jun-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	new blnAdded,idInvMatch,idRowAdded,objIssueLine,objInvMatch,objRecLine
	new SQLCODE,strStatus
	
	set strStatus  = $$$OK
	set blnAdded   = $$$NO
	set idRowAdded = ""
	
	&sql(
		DECLARE getID CURSOR FOR 
		SELECT Number INTO :idInvMatch
		FROM FINAPInvMatchCache
		WHERE ReceiptNumber = :pidRec
	)
	; FIXME : above code is hundreds of time slower than using $order on @netManager index
	;         The following improvement was NOT IMPLEMENTED since pidRec could contain lowercase letters
	;	WHERE $UPPER(ReceiptNumber) = :pidRec
	
	
	&sql(OPEN getID)
   	&sql(FETCH getID)
	
	$$$GRIDAddBatchStart
	
   	while (SQLCODE = 0) {
   		if '$$LinkExists(idInvMatch) {  // Don't add more than once
   			set objInvMatch	= $get(^FINAPInvMatchCache(0,idInvMatch,1))   ; NOTE : FINAPInvMatchCache Quantities are based on order unit
			
			//SR17297-1
   			if $$$FINAPInvMatchCacheTotalQuantity(objInvMatch) {
	   			set objRecLine 	= $get(^INRECLine(0,$$$FINAPInvMatchCacheReceiptNumber(objInvMatch),$$$FINAPInvMatchCacheReceiptLine(objInvMatch),1))
	; SR17697	set strStatus 	= $$CreateIssueLine(idInvMatch,.objIssueLine,,$$$INRECLineLotNumber(objRecLine),$$$INRECLineExpirationDate(objRecLine))
				set strStatus 	= $$CreateIssueLine(idInvMatch,objInvMatch,.objIssueLine,,$$$INRECLineLotNumber(objRecLine),$$$INRECLineExpirationDate(objRecLine))
			
				if $$$ISOK(strStatus) {
					$$$GRIDAddLine(objIssueLine,"","INReturnToSupplierLine",$$$YES,"",$$$NO,$$$NO,$$$YES,.idRowAdded)
					set blnAdded = $$$YES
				//	do SimulateBlurOnAdd^COMGridEdit31Scan(idRowAdded,objReqLine,"","INReqLine",$$$FldINReqLineItem)
				}
   			}
		}
	    &sql(FETCH getID)
	}
	&sql(CLOSE getID)
	
	$$$GRIDAddBatchStop
	
	if 'blnAdded {
		$$$Alert("IN00527")  	// "There are no applicable lines to receipt"
	} else {
		do ShowItems^INReturnToSupplierTable($$$EnumWWWDYNTABLEGridLineFocus,"INReturnToSupplier"_$$$DELIM_"INReturnToSupplierLine"_$$$DELIM_"dStockBundle"_$$$DELIM_idRowAdded)
	}
	
	//SR17297-2:Clear the Receipts field
	do UpdateHeaderField^COMGridEdit31G("M"_$$$FORMFldINReturnToSupplierReceipt,"")
	
	quit strStatus
	
	
LinkExists(pidKey="") private
	;-------------------------------------------------------------------------------
	; Does the line exist in the grid yet?
	; Based on the FINAPInvMatchCache ID existing on the INIssueLineReference field
	;
	; Returns:
	;
	; History:
	; 30-Jun-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	new arrGrid,idIssue,idLine,objInvLine
	
	$$$GRIDGetContents(.arrGrid)
	set idIssue = $order(arrGrid(""))
	
	set idLine = ""
	if idIssue'="" {
		for {
			set idLine = $order(arrGrid(idIssue,idLine))
			quit:(idLine="")
			
			quit:$$$INIssueLineReference(arrGrid(idIssue,idLine))=pidKey
		}
	}
	quit (idLine'="")
	
	
	; *** D E P R E C A T E D ***
	;CreateIssueLine(pidInvMatch,&pobjIssLine,pfltPartQty="",pstrLot="",pdteExpiry="")  ; SR17697
OldCreateIssueLine(pidInvMatch,pobjInvMatch,&pobjIssLine,pfltPartQty="",pstrLot="",pdteExpiry="")
	;-------------------------------------------------------------------------------
	; Create a Issue line record
	; 
	; Called By: AddLines^INReturnToSupplier, Selected^INReturnToSupplierSearch
	; 			 (Both currently don't specify value for pfltPartQty)
	; 
	; Params:	pidInvMatch	- FINAPInvMatchCache record to be receipted/reversed
	;			pfltPartQty - partial quantity (see note ^)
	;			pstrLot     - lot number
	;			pdteExpiry  - expiry date
	;			
	; ByRef:	pobjIssLine - data for Issue line
	; 
	; Returns:	Statue - whether line can be created
	;
	; History:
	; 22-Feb-2012	GRF		SR17980: Refactored - this code is deprecated
	; 05-Jul-2011	GRF		SR17697: Add FAIMC object as parameter; rename Cache Qty
	;							variable since not always Invent Qty - have specific
	;							fltInventQty variable; Convert CacheQty to RecvdQty
	; 01-Mar-2011	PPP		SR17672: Return Issued Qty is always in Inv Unit
	; 09-Sep-2010	GRF		SR17297: Replaced early exit
	; 30-Jun-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	new blnReversal,fltCacheQty,fltInventQty,fltOrderQty,fltRecvdQty
	new idInventUnit,idItem,idLocn,idOrder,idOrderLine,idOrderUnit,idRecvdUnit
	new objItem,objOrderLine,objReceiptLine,strStatus,strSupDetails
	
	set blnReversal = $$$YES
	
	;set objInvMatch = $get(^FINAPInvMatchCache(0,pidInvMatch,1)) ; SR17697
	set idOrder     = $$$FINAPInvMatchCacheSourceOrder(pobjInvMatch)
	
	$$$LogR("OldCreateLine",pidInvMatch_"<"_idOrder_"<"_blnReversal)
	$$$LogRx("0:"_pobjInvMatch_"<")
	
	set strStatus = $$$OK
	set pobjIssLine = ""
	
	set idItem       = $$$FINAPInvMatchCacheItem(pobjInvMatch)
	set objItem      = $get(^INART(0,idItem,1))
	set idInventUnit = $$$INARTUnitofMeasure(objItem)                     ; inventory unit
	set fltCacheQty  = $$$FINAPInvMatchCacheTotalQuantity(pobjInvMatch)   ; in Order Units (Inv Units if no order)
	set idLocn       = $$$FINAPInvMatchCacheLocation(pobjInvMatch)
	
	$$$LogRx("1:"_idOrder_"<"_fltCacheQty_"<"_idInventUnit_"<")
	
	set $$$INIssueLineItem(pobjIssLine)      = idItem
	set $$$INIssueLineReference(pobjIssLine) = pidInvMatch
	set $$$INIssueLineStatus(pobjIssLine)    = 1
	
	set objReceiptLine = $get(^INRECLine(0,$$$FINAPInvMatchCacheReceiptNumber(pobjInvMatch),$$$FINAPInvMatchCacheReceiptLine(pobjInvMatch),1))
	set idRecvdUnit    = $$$INRECLineUnit(objReceiptLine)   //SR17672
	
	//set $$$INIssueLineFromStorage(pobjIssLine) = $$$FINAPInvMatchCacheStockLocation(pobjInvMatch)
	
	;---------------------------------------
	; Receipt without Order
	;---------------------------------------
	if (idOrder="") {
		set fltInventQty = fltCacheQty  ; SR17697
		set fltRecvdQty  = $$ConvInvQtyToOtherQty^INRECLineUtil(idItem,idRecvdUnit,fltInventQty) //SR17672
		set $$$INIssueLineUnit(pobjIssLine)        = idRecvdUnit     ; = idInventUnit            //SR17672
		set $$$INIssueLineQtyRequired(pobjIssLine) = fltRecvdQty     ; = fltInventQty            //SR17672
		set $$$INIssueLineQtyIssued(pobjIssLine)   = fltInventQty
		set $$$INIssueLineUnitCost(pobjIssLine)    = $$$INRECLineEach(objReceiptLine)
		set $$$INIssueLineAverageCost(pobjIssLine) = $$GetAverageCost(pobjIssLine,idLocn)
	
	$$$LogRx("2 NoOrder:"_idRecvdUnit_"<"_fltRecvdQty_"<"_fltInventQty_"<")
		
	;---------------------------------------
	; Receipt with Order
	; 
	;    INAUFP             defaults to Supplier Units but can be overridden
	;    FINAPInvMatchCache will be in order units if order exist but inventory units otherwise
	;    INRECSummary       defaults to order or supplier unit but this can be overridden
	;    INRECLine          defaults to INRECSummary unit but may be split to different storages
	;    INIssueLine        should correspond to INRECLine to ensure we don't build line based on 1/12 fraction
	;    
	; FIXME : Check we convert to common unit if comparing QtyRequired with QtyIssued or elsewhere. (Dyna grid?)
	;---------------------------------------
	} else {
		set idOrderLine   = $$$FINAPInvMatchCacheOrderLine(pobjInvMatch)
		set objOrderLine  = $get(^INAUFP(0,idOrder,idOrderLine,1))
		set idOrderUnit   = $$$INAUFPOrderedUnit(objOrderLine)
		set strSupDetails = $$GetRecDetailsForSup^INRECSummaryUtil(idOrder,idOrderLine,objOrderLine) ; SR16857
	$$$LogRx("2 Supp:"_strSupDetails_"<")
		
	; SR17697 vvv
	;	//SR17672 - add "= null" test
	;	if idRecvdUnit = "" {    ; FIXME : if set from $$$INRECLineUnit how can this ever be null?
	;		set idRecvdUnit = $piece(strSupDetails,Y,2)
	;		if idRecvdUnit="" set idRecvdUnit = idInventUnit        ; Inventory Unit
	;	}
		
	;	if (pfltPartQty'="") {
	;		set fltRecvdQty = pfltPartQty     ; See note in header (current calls do not pass in)
	;	} else {
	;		set fltRecvdQty = fltCacheQty
	;	}
	; SR17697 ^^^
		
		set fltRecvdQty  = fltCacheQty * $$GetUOMConvBetweenUnits^INUOMConversion(idItem,idRecvdUnit,idOrderUnit) ; SR17697
		set fltInventQty = $$ConvOtherQtyToInvQty^INRECLineUtil(idItem,idRecvdUnit,fltRecvdQty)
		set $$$INIssueLineUnit(pobjIssLine)        = idRecvdUnit
		set $$$INIssueLineQtyRequired(pobjIssLine) = fltRecvdQty    ; in Received Unit
		set $$$INIssueLineQtyIssued(pobjIssLine)   = fltInventQty   ; in Inventory Unit    ; = fltRecvdQty     //SR17672
		set $$$INIssueLineUnitCost(pobjIssLine)    = $$GetInvCost^INRECLineUtil(idItem,idRecvdUnit,+$piece(strSupDetails,Y,3))
		set $$$INIssueLineAverageCost(pobjIssLine) = $$GetAverageCost(pobjIssLine,idLocn)
		
	$$$LogRx("2 Order:"_idRecvdUnit_"<"_fltRecvdQty_"<"_fltInventQty_"<"_idOrderUnit_"<"_idInventUnit_"<")
	}
	quit strStatus
	
	
CreateIssueLine(pidInvMatch,pobjInvMatch,&pobjIssLine,pfltPartQty="",pstrLot="",pdteExpiry="")
	;-------------------------------------------------------------------------------
	; Create a Issue line record
	; 
	; Called By: AddLines^INReturnToSupplier, Selected^INReturnToSupplierSearch
	; 			 (Both currently don't specify value for pfltPartQty)
	; 
	; Params:	pidInvMatch	- FINAPInvMatchCache record to be receipted/reversed
	;			pfltPartQty - partial quantity (see note ^)
	;			pstrLot     - lot number		FIXME : Not Used
	;			pdteExpiry  - expiry date		FIXME : Not Used
	;			
	; ByRef:	pobjIssLine - data for Issue line
	; 
	; Returns:	Statue - whether line can be created
	;
	; History:
	; 22-Feb-2012	GRF		SR17980: Return is based on Receipt and doesn't need to
	;							get cost from GetRecDetailsForSup^INRECSummaryUtil
	;							since 1. The unit might not be appropriate and
	;							2. The receipt invoice details may have changed the
	;							unit cost which will not be reflected in INARTK;
	;							$$GetUOMConvBetweenUnits args in wrong order;
	;							Qty & Cost not always in same unit
	; 20-Feb-2012	GRF		SR17980: Must pass Unit Cost in terms of Receipt Unit;
	;							Call revised GetAvgCost tag
	; 15-Feb-2012	GRF		SR17980: Stock is returned from the location in INIssue
	;							record rather than from the location that the goods
	;							were received into (per FINAPInvMatchCache) - Avg
	;							Cost requires actual location being updated.
	; 05-Jul-2011	GRF		SR17697: Add FAIMC object as parameter; rename Cache Qty
	;							variable since not always Invent Qty - have specific
	;							fltInventQty variable; Convert CacheQty to RecvdQty
	; 01-Mar-2011	PPP		SR17672: Return Issued Qty is always in Inv Unit
	; 09-Sep-2010	GRF		SR17297: Replaced early exit
	; 30-Jun-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	new blnReversal,curCostRU,curEachIU,fltCacheQty,fltConvFactor,fltInventQty,fltOrderQty,fltRecvdQty
	new idInventUnit,idItem,idLocn,idOrder,idOrderLine,idOrderUnit,idReceipt,idRecLine,idRecvdUnit
	new objHeader,objItem,objOrderLine,objReceiptLine,strStatus,strSupDetails
	
	;-------------------------------------------------------------------------------
	;    INARTK				Supplier Unit - Irrelevant to Return to Supplier
	;    INAUFP             Order Unit    - defaults to Supplier Unit but can be overridden
	;    FINAPInvMatchCache Order Units if order exist, but Inventory Unit otherwise
	;    INRECSummary       Receipt Unit  - defaults to Supplier Unit but this can be overridden
	;    INRECLine          Receipt Unit  - matches INRECSummary
	;    INIssueLine        Corresponds to INRECLine
	;-------------------------------------------------------------------------------
	;						Order Unit			Received Unit		Inventory Unit
	;						
	; Unit itself			idOrderUnit			idRecvdUnit			idInventoryUnit
	; Quantity				fltOrderQty			fltRecvdQty			fltInventQty
	; Cost					   ---				curCostRU			curEachIU
	;-------------------------------------------------------------------------------
	
	$$$LogR("CreateLine",pidInvMatch)
	$$$LogRx("0:"_pobjInvMatch_"<")
	
	set strStatus   = $$$OK
	set blnReversal = $$$YES
	
	; INIssue
	set objHeader   = $$$GRIDYFELDContainer
	set idLocn      = $$$INIssueFromLocn(objHeader)
	
	; FINAPInvMatchCache
	set idItem      = $$$FINAPInvMatchCacheItem(pobjInvMatch)
	set idReceipt   = $$$FINAPInvMatchCacheReceiptNumber(pobjInvMatch)
	set idRecLine   = $$$FINAPInvMatchCacheReceiptLine(pobjInvMatch)
	set fltOrderQty = $$$FINAPInvMatchCacheTotalQuantity(pobjInvMatch)    ; in OU (=IU if no order)
	set idOrder     = $$$FINAPInvMatchCacheSourceOrder(pobjInvMatch)
	set idOrderLine = $$$FINAPInvMatchCacheOrderLine(pobjInvMatch)
	
	; INART
	set objItem      = $get(^INART(0,idItem,1))
	set idInventUnit = $$$INARTUnitofMeasure(objItem)                     ; IU
	
	; INRECLine
	set objReceiptLine = $get(^INRECLine(0,idReceipt,idRecLine,1))
	set idRecvdUnit    = $$$INRECLineUnit(objReceiptLine)                 ; RU
	set curEachIU      = $$$INRECLineEach(objReceiptLine)                 ; IU

	if (idOrder="") {
		set fltInventQty  = fltOrderQty
		if idInventUnit=idRecvdUnit {
			set fltRecvdQty = fltInventQty   ; FIXME : Is FAIMC adjusted to reduce TotalQuantity after Return to Supplier?
			set curCostRU   = curEachIU      ;         May be appropriate to base Receive-No-Order on FAIMC as well in that case.
			
		} else {
		; e.g. Box of 20 Each @ $100 and Each @ $5 : ConvFactor(RU=Box) = 20
		; Qty-IU  of 40 / 20 = 2    for Qty-RU
		; Cost-IU of $5 * 20 = $100 for Cost-RU
			set fltConvFactor = $$GetUOMConversion^INUOMConversion(idItem,idRecvdUnit)   
			set fltRecvdQty   = fltInventQty / fltConvFactor
			set curCostRU     = curEachIU * fltConvFactor   ; TO DO : Justify?
		}
		
	} else {
	; INAUFP
		; e.g. Order 6 Boxes of 20 Each @ $100 and Receive as Sleeves of 2 Boxes @ $200
		; ConvFactor(OU=>RU) = .5      ConvFactor(RU=>IU) = 40
		; Qty-OU of 6 * .5 = 3 for Qty-RU      ; 3 * 40 =  120 for Qty-IU
		;                            Cost-IU of $5 * 40 = $200 for Qty-RU
		set objOrderLine = $get(^INAUFP(0,idOrder,idOrderLine,1))
		set idOrderUnit  = $$$INAUFPOrderedUnit(objOrderLine)
		set fltRecvdQty  = fltOrderQty / $$GetUOMConvBetweenUnits^INUOMConversion(idItem,idOrderUnit,idRecvdUnit)
		
		if idInventUnit=idRecvdUnit {
			set fltInventQty = fltRecvdQty
			set curCostRU    = curEachIU

		} else {
			set fltConvFactor = $$GetUOMConversion^INUOMConversion(idItem,idRecvdUnit)   
			set fltInventQty  = fltRecvdQty * fltConvFactor
			set curCostRU     = curEachIU   * fltConvFactor
		}
	}
	
	; Create INIssueLine
	set pobjIssLine = ""
	set $$$INIssueLineItem(pobjIssLine)        = idItem
	set $$$INIssueLineReference(pobjIssLine)   = pidInvMatch
	set $$$INIssueLineStatus(pobjIssLine)      = 1
	set $$$INIssueLineUnit(pobjIssLine)        = idRecvdUnit              ; RU
	set $$$INIssueLineQtyRequired(pobjIssLine) = fltRecvdQty              ; RU
	set $$$INIssueLineQtyIssued(pobjIssLine)   = fltInventQty             ; IU
	set $$$INIssueLineUnitCost(pobjIssLine)    = curCostRU                ; RU
	set $$$INIssueLineAverageCost(pobjIssLine) = $$GetAvgCost(idItem,idLocn,fltInventQty,curEachIU)
	
	quit strStatus
	
	
GetAvgCost(pidItem,pidLocn,pfltQtyIssued,pcurEach)
	;-------------------------------------------------------------------------------
	; Get the average cost after reversal - Without actually updating
	; 
	; Called By: CreateIssueLine^INReturnToSupplier
	;            OnBlur^INReturnToSupplierLine, OnBlurQtyRequired^INReturnToSupplierLine
	; 
	; Params:
	;
	; Returns:
	;
	; History:
	; 20-Feb-2012	GRF		SR17980: refactor to pass in values so don't have to
	;							repeat conversion factor process .
	; 05-Jul-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	new curNewCost,objAvgCost
	
	$$$LogR("GetAvgCost",pidItem_"<"_pidLocn_"<"_pfltQtyIssued_"<"_pcurEach_"<")
	
	set curNewCost = $$CalcNewCost^INAvgCost(pidItem,pidLocn,-pfltQtyIssued,pcurEach,.objAvgCost,"")
	
	if curNewCost=0 {
		set curNewCost = $$GetCost^INItemCost(pidItem,pidLocn,$$$enumAverageCost)
	}
	quit curNewCost
	
	
GetAverageCost(pobjIssLine,pidLocn) ; DEPRECATED
	;-------------------------------------------------------------------------------
	; Get the average cost after reversal - Without actually updating
	; 
	; Called By:
	; 
	; Params:
	;
	; Returns:
	;
	; History:
	; 20-Feb-2012	GRF		SR17980: replaced by GetAvgCost
	; 05-Jul-2010	PPP		SR17297: Created
	;-------------------------------------------------------------------------------
	new idItem,fltNewCost,objAvgCost
	
	$$$LogR("GetAverageCost",pobjIssLine)
	
	set idItem = $$$INIssueLineItem(pobjIssLine)	
	
	; FIXME : Unit Cost here ***MUST*** be based on Inventory Units
	set fltNewCost = $$CalcNewCost^INAvgCost(idItem,pidLocn,-$$$INIssueLineQtyIssued(pobjIssLine),$$$INIssueLineUnitCost(pobjIssLine),.objAvgCost,"")
	
	if fltNewCost=0 {
		set fltNewCost = $$GetCost^INItemCost(idItem,pidLocn,$$$enumAverageCost)
	}
	quit fltNewCost
	
]]></Routine>
</Export>