<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INTAGEPLUS" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INTAGEPLUS(pdteStart,pdteEnd,pidLocation,pblnDRP,pidSupplier)
	;-------------------------------------------------------------------------------
	; Description of Function :
	;		ERRECHNET DIE TATSÄCHLICHE DAUER INKL. SONN-UND FEIERTAGE
	;
	; Inputs : 
	;	pdteStart		Start Date
	;	pdteEnd			End Date
	;	pidLocation		Location
	;	pblnDRP			Is this DRP
	;	pidSupplier		The id of the supplier
	;
	; Returns :
	; The number of days + weekends and holidays if needed
	; 
	; History :
	; 22-Dec-2006	RPW		SR15306: Completely rewrote in { syntax.
	; 						Also fixed logic in the for loop to correctly determine the number of days.
	; 						ie, if we use 2006-12-12 (60611) and 2007-02-10 (60671)
	; 						If the number of work days is 5, this will return 84, which is 60 days + 24 weekends
	; 						If the number of work days is 6, this will return 70, which is 60 days + 10 break days
	; 						If the number of work days is 7, this will return 60, which is 60 days.
	; 						
	; 						These number will only be accurate when no holidays are defined.
	; 02-Jun-2006	GRF		Doco; Dot Levels; FIXME
	; 15.12.2001	FIS		Created
	;-------------------------------------------------------------------------------
	new idCalendar,dteStart,pdteStartX,intDays,enumDays
	
	set intDays=0
	set pdteStart=+$get(pdteStart)
	if pdteStart=0 quit intDays
	set pdteEnd=+$get(pdteEnd)
	if pdteStart=0 quit intDays             ; FIXME: Should this be "pdteEnd=0" test? <GRF>
	
	if pdteEnd<pdteStart set pdteStartX=pdteStart,pdteStart=pdteEnd,pdteEnd=pdteStartX
	set pidLocation=$get(pidLocation)
	if pidLocation="" set pidLocation=YLOCATION
	set pidSupplier=$get(pidSupplier)
	set pblnDRP=+$get(pblnDRP)
	
	set idCalendar=""
	if pidSupplier'="" {
		set idCalendar=$piece($get(^INLIEF(YM,pidSupplier,1)),Y,215)  ;Calendar Setup on the Supplier
	}
	
	if (idCalendar="") && (pblnDRP) {
		if pidLocation'="" {
			set idCalendar=$piece($get(^INDRPSYS(YM,pidLocation,1)),Y,30)  ;Calendar Setup in DRP
			if (idCalendar="") {
				set idCalendar=$piece($get(^WWW0121(0,YM,pidLocation,1)),Y,54)  ;Calendar Setup on the Location
			}
		}
	}
	
	;---------------------------------------
	;  Procedure is to count working days from start date until enough working days have been found.
	;  If want 60 working days then will be 10 weeks on a 6 day working week
	;  will expect to return 70 days if no holidays.
	;---------------------------------------
	
	set dteStart=pdteStart
	
	for {
		quit:dteStart=pdteEnd
		
		// 0 = Normal Working Day
		// 1 = Weekend
		// 2 = Defined Holiday in the system
		set enumDays=$$^WWWCALDAY(dteStart,idCalendar)
		
		set intDays=intDays+1
		if enumDays'=0 { 
			set pdteEnd=pdteEnd+1
		}
		
		set dteStart=dteStart+1
		quit:intDays>200
	}
	
	/* Possible revision
	set period = pdteEnd - pdteStart
	set intWorkDays = 0
	for dteStart=pdteStart:1 {
		quit:intWorkDays=period
		// 0 = Normal Working Day
		// 1 = Weekend
		// 2 = Defined Holiday in the system
		set enumDays=$$^WWWCALDAY(dteStart,idCalendar)
		
		set intDays=intDays+1
		if enumDays=0 { 
			set intWorkDays = intWorkDays + 1	
		}
		
		quit:intDays>200
	}
	*/
	/*
	for  quit:dteStart>pdteEnd  DO  quit:intDayCounter>200  ;MAX 200 DURCHLÄUFE ZUR SICHERHEIT ;self-assurance 
	. // If 1 - Weekend or 2 - Holiday, increase pdteEnd and intDays
	. set enumDays=$$^WWWCALDAY(dteStart,idCalendar)
	. IF enumDays'=0 SET pdteEnd=pdteEnd+1,intDays=intDays+1
	. if enumDays=0 set intDays=intDays+1
	. set dteStart=dteStart+1
	. set intDayCounter=intDayCounter+1
	. */
	
	quit intDays
]]></Routine>
</Export>