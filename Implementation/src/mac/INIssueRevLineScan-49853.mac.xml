<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INIssueRevLineScan" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INIssueRevLineScan
	
#include COMGridEdit31
#include INConst
#include %occInclude
#def1arg WWWDATEN(%args) ^WWWDATEN(YM,+$horolog,YUSER,YFORM,"V",%args)
#include WWWConst
#include COMSYS

#define DELIM	$char(31)
#define ReasonCodeOthers 99
	
AddScanLine(pidScan)
    ;-------------------------------------------------------------------------------
    ; Routine to Add a new line to a Grid after a Scan is validated
    ;
    ; Assumptions :
    ;  YFORM	-	 Form Name
    ; 
    ; Returns:
    ; 	Status
    ;
    ; History:
 	; 13-Sep-2013	SCR		CORE-93: Item Search without 'Issue' on Header
    ; 28-Jun-2012	SLV		Copied and adapted from INIssueLineScan
    ; 20-Jul-2009	PPP		SR16773: ScanDelimiter is a function now
    ; 23-Jun-2009	PPP		SR16510: Updated for User defined policies
    ; 25-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	new arrBundle,arrFields,arrItemAttrib,arrOrigItemAttrib,blnItemExists,blnStorageLocn
	new idBundle,idClass,idIssue,idIssueRev,idItem,idLine,idLot,idReq,idStorage
	new idToLocn,objHeader,objItemAttib,objLine,objLoc,objOldData,objOrigItemAttib
	new strDelim,strDescItem,strItemLot,strOrigBundle,strOrigItemLot,strStatus
 	
 	set strDelim  = $$$ScanDelim
 	set strStatus = $$$OK 
 	
	set idItem = ""	
	if $get(YFORM)'="" {
		set idClass		= $$$GetClass(YFORM)
		set objLine		= ""
		set idItem		= $piece(pidScan,strDelim,1)               //SR16773
		set idLot		= $piece(pidScan,strDelim,2)               //SR16773
		set objHeader	= $$$GRIDYFELDContainer
	 	;set idFromLocn    = $$$INIssueRevFromLocn(objHeader)
	 	set idIssue		= $$$INIssueRevIssueNumber(objHeader)
	 	set idToLocn      = $$$INIssueRevToLocn(objHeader)
  		set blnItemExists = $$$NO
  		set strDescItem	  = $$$INARTSearchName($get(^INART(0,idItem,1)))

		
	 	set idReq         = $$$INIssueRevIssueNumber(objHeader)
		set idIssueRev    = $$$KEY1($$$GRIDYKEYContainer)
 		if (idToLocn'="")&&(idIssue'="") {
	 		set objLoc = $get(^WWW0121(YM,YM,idToLocn,1))
	 		set blnStorageLocn = $$$WWW0121StorageLocn(objLoc)
	 		set idBundle = $$$INIssueRevLineBundle(objLoc)
	 		// For Picking Screens Only
	 		// arrBundle(Bundle ID ,Storage ID) = Qty
	 		;if (idLot'="") {
	 		;	set sc = $$GetBundleData^WWW120Scan(idItem,idToLocn,idLot,.arrBundle,.idBundle,.idStorage)	//SR16510
	 		;}
	 		;else {
	 		;	set sc = $$GetBundleForAttData^WWW120Scan(idItem,idToLocn,pidScan,.arrBundle,.idBundle,.idStorage)
	 		;}
  
	 		;if $$$ISERR(sc) set strStatus = $$ISStatusToDLStatus^COMUtilError(sc) quit strStatus    //EARLY EXIT

			//Process only if Bundle Exist for the Item/Lot combination and has Qty
			if (($get(idBundle)'="") && (blnStorageLocn)) {

				//Get the data for the Item if it already exists
				//Need to update arrBundle if lines already exist
			//	set idLine = $$GetExistingItemRowData(idItem,.idBundle,.idStorage,.arrBundle,.blnItemExists)
				set idLine = $$GetRowLineWithQtyChecks^COMGridEdit31Scan(idItem, 
				                                                         $$$FldINIssueRevLineItemNo, 
				                                                         $$$FldINIssueRevLineBundle, 
				                                                         $$$FldINIssueRevLineToStorage, 
				                                                         $$$FldINIssueRevLineQtyConsumed, 
				                                                         .idBundle, 
				                                                         .idStorage, 
				                                                         .arrBundle, 
				                                                         .blnItemExists)
				if idLine {				
					set objItemAttib = ##class(alSOH.iBundle).GetAttributesForBundle(idBundle,.arrItemAttrib)
					set strItemLot = $get(arrItemAttrib("Lot Number"))
				
					set (objLine,objOldData) = $$$GRIDGetYFELD(idLine)
				
					set strOrigBundle	 = $$$INIssueRevLineBundle(objLine)
					set objOrigItemAttib = ##class(alSOH.iBundle).GetAttributesForBundle(strOrigBundle,.arrOrigItemAttrib)
					set strOrigItemLot   = $get(arrOrigItemAttrib("Lot Number"))
				
					if ((idLot'="") && (idLot '= strOrigItemLot)) {
						set strStatus = $$$MakeStatus("INIssueRev0002",idItem,strDescItem)
						quit strStatus
					}
				
					if ($$$INIssueRevLineReason(objLine) = "") {
						set $$$INIssueRevLineReason(objLine) = $$$ReasonCodeOthers
					}
				
				//	set $$$INIssueRevLineQtyConsumed(objLine) 			= $$$INIssueRevLineQtyConsumed(objLine) + 1
					set $$$INIssueRevLineUnitQuantityReturned(objLine)  = $$$INIssueRevLineUnitQuantityReturned(objLine) + 1
				
					kill arrFields
					//set the array for the fields that are updated
				//	set arrFields($$$FldINIssueRevLineQtyConsumed)		    = $$$INIssueRevLineQtyConsumed(objLine)	//UPDATE
					set arrFields($$$FldINIssueRevLineUnitQuantityReturned)	= $$$INIssueRevLineUnitQuantityReturned(objLine)		//UPDATE
					set arrFields($$$FldINIssueRevLineReason)				= $$$INIssueRevLineReason(objLine)
				
					//Updates the Row and Displayes it (for existing lines)
					//If the row is on another page displays the lines at the top of the grid
					do UpdateRow^COMGridEdit31Scan(YFORM, idLine, .arrFields, objOldData)
	 
				} else {
					if idIssue="" {
						;if $$Search(objHeader,idItem,idLot,.arrBundle,.idBundle,.idStorage,.idFoundIssue,.idFoundLine)
					}	
					if $get(idBundle)'="" {
						if (blnItemExists = $$$YES) {
							set strStatus = $$$MakeStatus("INIssueRev0001",idItem,strDescItem)
							/*
							set idOriginalLine = $$GetIssueRevLine(idIssueRev,idItem)
						
							if idOriginalLine'="" {
								// This is specific to INIssue , Copy the original Data and Update Relevant details
								// Cannot create new data records only copies, has important info DEMAND NO, REFERENCE etc.
								set strStatus = $$DuplicateOnly^COMGridEdit31Scan(idIssueRev_$$$COMMA_idOriginalLine,.objLine,.strKey)
							
								set $$$INIssueRevLineUnitQuantityReturned(objLine)   = 1
								;set $$$INIssueRevLineQtyConsumed(objLine) = 1
								set $$$INIssueRevLineFromStorage(objLine) = idStorage
								set $$$INIssueRevLineBundle(objLine)      = idBundle
							
								do AddLine^COMGridEdit31Add(objLine,strKey,,$$$YES,"",$$$YES,$$$NO,$$$NO)
								do UpdateContainer^COMGridEdit31G()
							}
							*/
						
						} else {
							set strStatus = $$$MakeStatus("INIssueRev0002",idItem,strDescItem,idReq)
						}
					}
				}		
			} else {
				set strStatus = $$AddLineWithoutStock(idIssueRev,idItem,$$$FldINIssueRevLineItemNo,idReq,idLot)
				;set strStatus = $$$MakeStatus("INIssueRev0002",idItem,strDescItem,idReq)
				;set strStatus = $$$MakeStatus("IN01040",idItem,idFromLocn)
			} 
		}
		else {
			set strStatus = $$LookForIssues(objHeader,idItem,idLot)		;  CORE-93 Look for Issues	
		}
	}
		
	quit strStatus
	
LookForIssues(pobjHeader,pidItem,pidLot)
    ;-------------------------------------------------------------------------------
    ; Look for Issues that can be returned for the Item and optional lot
    ; History:
    ; 18-Sep-2013	SCR		CORE-93: Created
    ;-------------------------------------------------------------------------------
	new arrBundle,arrGrid,blnFound,fltRet,idBundle,idIssue
	new idIssueLine,idIssueRev,idLine,idStorage,objBundle,objIssue,objIssueLine
	new objLine,strSearchStatus,strStatus
     ; Export FROMLOCATION,TOLOCATION
   
    set strStatus	= $$IsUsable^INARTDataAccess(pidItem,YFORM)
    quit:$$$ISERR(strStatus) strStatus   ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Fast Exit
    
    set strStatus	=  $$$MakeStatus("IN01438",pidItem)  ;Can not find Issue for Item %1
    if pidLot'="" {
	    set strStatus	= $$$MakeStatus("IN01439",pidItem,pidLot)  ;Can not find Issue for Item %1 and Lot %2
    }

	if $$Search(pobjHeader,pidItem,pidLot,.arrBundle,.idBundle,.idStorage,.idIssue,.idIssueLine,.strSearchStatus) {
		set strStatus	= strSearchStatus
		set objIssue	= $get(^INIssue(YM,idIssue,1))
		set objIssueLine= $get(^INIssueLine(YM,idIssue,idIssueLine,1))
		set fltRet		= $$GetQtyRetForIssue^INIssueRev(idIssue,pidItem,idIssueLine)  ;SR16783
		set FROMLOCATION= $$$INIssueRevFromLocn(pobjHeader)
		set TOLOCATION	= $$$INIssueToLocn(objIssue)
		set idBundle    = $$$INIssueLineBundle(objIssueLine)
		set objBundle	= ##class(alSOH.dBundle).%OpenId(idBundle)
		set idIssueRev    = $$$KEY1($$$GRIDYKEYContainer)
		
		$$$GRIDGetContents(.arrGrid)
		set blnFound	= $$$NO
		set idLine		= ""
		for {
			set idLine		= $order(arrGrid(idIssueRev,idLine))
			quit:idLine=""
			set objLine		= $get(arrGrid(idIssueRev,idLine))
			continue:$$$INIssueRevLineIssue(objLine)'=idIssue
			continue:$$$INIssueRevLineRefLine(objLine)'=idIssueLine
			set blnFound	= $$$YES
			set $$$INIssueRevLineUnitQuantityReturned(objLine)	= $$$INIssueRevLineUnitQuantityReturned(objLine)+1
			set $$$INIssueRevLineQuantityReturned(objLine)		= $$$INIssueRevLineUnitQuantityReturned(objLine)
			do GoToUpdatedRow^COMGridEdit31Scan(YFORM,idLine)
			set arrGrid(idIssueRev,idLine)=objLine
			$$$GRIDSetContents(.arrGrid)
			quit:blnFound=$$$YES		
		}
		if blnFound=$$$NO {
			set objLine = ""
			set $$$INIssueRevLineItemNo(objLine)			= pidItem
			set $$$INIssueRevLineStockUnit(objLine)			= $$$INIssueLineUnit(objIssueLine)
			set $$$INIssueRevLineQtyConsumed(objLine)		= $$$INIssueLineQtyIssued(objIssueLine)
			set $$$INIssueRevLineBundle(objLine)			= $$$INIssueLineBundle(objIssueLine)
			set $$$INIssueRevLineRefLine(objLine)			= idIssueLine
			set $$$INIssueRevLineFromStorage(objLine)		= $$$INIssueLineFromStorage(objIssueLine)
			set $$$INIssueRevLineToStorage(objLine)			= $$$INIssueLineToStorage(objIssueLine)
			set $$$INIssueRevLineQtyAlreadyRetrn(objLine)	= fltRet
			set $$$INIssueRevLineIssue(objLine)				= idIssue
			set $$$INIssueRevLineToLocation(objLine)		= $$$INIssueToLocn(objIssue)
			set $$$INIssueRevLineUnitQuantityReturned(objLine)=1
			set $$$INIssueRevLineQuantityReturned(objLine)	= $$$INIssueRevLineUnitQuantityReturned(objLine)
			if ($IsObject(objBundle)){
				set $$$INIssueRevLineFREE01(objLine) = ##class(alSOH.iUSOH).RenderBundle(objBundle,SPRACHE)
			}
			$$$GRIDAddLine(objLine)
		}
		set strStatus	= $$$OK
	}
	quit strStatus
	
GetIssueRevLine(pidIssueRev, pidItem)
    ;-------------------------------------------------------------------------------
    ; Get the IssueRevLine associated with the given Item
    ; Assumptions :
    ;  YFORM	-	 Form Name
    ; 
    ; Returns:
    ; 	idLine
    ;
    ; History:
    ; 23-Jun-2009	PPP		SR16510: Created
    ;-------------------------------------------------------------------------------
	new idIssueRevLine,objIssueRevLine

	set idIssueRevLine = ""
	for {
		set idIssueRevLine = $order(^INIssueRevLine(YM,pidIssueRev,idIssueRevLine))
		quit:idIssueRevLine=""

		set objIssueRevLine = $get(^INIssueRevLine(YM,pidIssueRev,idIssueRevLine,1))
		if $$$INIssueRevLineItemNo(objIssueRevLine) = pidItem quit
	}
	
	quit idIssueRevLine
	
	
AddLineWithoutStock(pidINIssueRev,pidItem,pidFldItem,pidReq,pidLot="")

	new arrFields,arrOrigItemAttrib,idLine,idOriginalLine,objLine,objOldData,objOrigItemAttib
	new strDescItem,strOrigBundle,strOrigItemLot,strStatus
	
	if ((pidINIssueRev="") || (pidItem="") || (pidFldItem="") || (pidReq="")) {
		set strStatus = $$$MakeStatus("AEPERR00111")
		;Missing Data
		quit strStatus
	}
	
	set strStatus 	= $$$OK
	set strDescItem	= $$$INARTSearchName($get(^INART(0,pidItem,1)))
	
	if YFORM '="" {
		set idLine = $$GetRowLine^COMGridEdit31Scan(pidItem,$$$FldINIssueRevLineItemNo)
		if idLine {
			set idOriginalLine = $$GetIssueRevLine(pidINIssueRev,pidItem)
			if idOriginalLine'="" {
				set (objLine,objOldData) = $$$GRIDGetYFELD(idLine)

				set strOrigBundle	 = $$$INIssueRevLineBundle(objLine)
				set objOrigItemAttib = ##class(alSOH.iBundle).GetAttributesForBundle(strOrigBundle,.arrOrigItemAttrib)
				set strOrigItemLot   = $get(arrOrigItemAttrib("Lot Number"))

				if ((pidLot'="") && (pidLot '= strOrigItemLot)) {
					set strStatus = $$$MakeStatus("INIssueRev0001",pidItem,strDescItem)
					quit strStatus
				}

				if ($$$INIssueRevLineReason(objLine) = "") {
					set $$$INIssueRevLineReason(objLine) = $$$ReasonCodeOthers
				}

				set $$$INIssueRevLineUnitQuantityReturned(objLine)  = $$$INIssueRevLineUnitQuantityReturned(objLine) + 1

				kill arrFields
				set arrFields($$$FldINIssueRevLineUnitQuantityReturned)	= $$$INIssueRevLineUnitQuantityReturned(objLine)		//UPDATE
				set arrFields($$$FldINIssueRevLineReason)				= $$$INIssueRevLineReason(objLine)

				do UpdateRow^COMGridEdit31Scan(YFORM, idLine, .arrFields, objOldData)
			}
		}
		else {
			
			set strStatus = $$$MakeStatus("IN01449",pidItem,pidLot)  ;Item %1 Lot %2 not found
		}
	}
	
	quit strStatus

Search(pobjHeader,pidItem,pidLot,&parrBundle,&pidBundle,&pidStorage,&pidIssue,
		&pidIssueLine,&pstrStatus,pblnSearchAll=$$$NO,&parrSearch)
    ;-------------------------------------------------------------------------------
    ; Scan Issue Lines for a matching Item/Lot
    ; Assumptions :
    ;  YFORM	-	 Form Name
    ; 
    ; Returns:
    ; 	Found Flag
    ;
    ; History:
    ; 12-Mar-2014	SCR		SESDF-1158: Allow Consumption Locations
 	; 14-Sep-2013	SCR		CORE-93: Created
    ;-------------------------------------------------------------------------------
 	new arrItemAttrib,arrReturnQty,blnFound,dtIssueDate,fltIssued,fltReturned,idBundle
	new idFromLoc,idFromStorage,idIssue,idIssueType,idLine,idPatient,idToLoc,idToStorage
	new idxFromLoc,idxToLoc,intCol,intDayEnd,intExpiredCol,intLineCnt,intRevType
	new objBundle,objINVORG,objIssue,objLine,objResult,strDate,strStatus,strValues

	set strStatus	= $$$OK
	set idPatient	= $$$INIssueRevPaitent(pobjHeader)
	set intRevType	= $$$INIssueRevReturnType(pobjHeader)
	set idFromLoc	= $$$INIssueRevFromLocn(pobjHeader)
	set idxFromLoc	= $$$Index(idFromLoc)
	set idToLoc		= $$$INIssueRevToLocn(pobjHeader)
	set idxToLoc	= $$$Index(idToLoc)
	set blnFound	= $$$NO
	set objINVORG	= $get(^INVORG(YM,0,1))
	set intDayEnd	= $h-$$$INVORGNumberofDaystoSearch(objINVORG)
	set intLineCnt	= 0
	set objResult = ##class(%Library.ResultSet).%New("%DynamicQuery:SQL")

	if intRevType=1 {  ; Patient Search
		do objResult.Prepare("SELECT IssueNumber FROM INIssue WHERE FromLocn = ? and (CustomerName = ?) AND (+CREATEDON > ?) ORDER BY +CREATEDON DESC")
		do objResult.Execute(idFromLoc, idPatient, intDayEnd)
	} else {			; Location Search
		if (idToLoc = "") {
			do objResult.Prepare("SELECT IssueNumber FROM INIssue WHERE FromLocn = ? AND (+CREATEDON > ?) ORDER BY +CREATEDON DESC")
			do objResult.Execute(idFromLoc, intDayEnd)
		} else {
			do objResult.Prepare("SELECT IssueNumber FROM INIssue WHERE FromLocn = ? AND (ToLocn = ?) AND (+CREATEDON > ?) ORDER BY +CREATEDON DESC")
			do objResult.Execute(idFromLoc,idToLoc, intDayEnd)
		}
	}
	while objResult.Next() {
		quit:blnFound=$$$YES
		set idIssue = objResult.Data("IssueNumber")
		set objIssue	= $get(^INIssue(YM,idIssue,1))
		continue:($$$INIssueStatus(objIssue)'=9)&&($$$INIssueStatus(objIssue)'=7)
		set idIssueType	= $$$INIssueType(objIssue)
		continue:idIssueType=6  ; Exclude Manufacturing Issues
		set idLine		= ""

		for {
			quit:blnFound=$$$YES
			set idLine = $order(^INIssueLine(YM,idIssue,idLine))
			quit:idLine=""
			set objLine		= $get(^INIssueLine(YM,idIssue,idLine,1))
			continue:pidItem'=$$$INIssueLineItem(objLine)
			set idBundle	= $$$INIssueLineBundle(objLine)
			if pidLot'="" {
				do ##class(alSOH.iBundle).GetAttributesForBundle(idBundle,.arrItemAttrib)
				continue:pidLot'=$get(arrItemAttrib("Lot Number"))
			}
			set fltIssued	= $$$INIssueLineQtyIssued(objLine)
			set fltReturned	= $$GetQtyRetForIssue^INIssueRev(idIssue,pidItem,idLine,.arrReturnQty)
			set idToLoc		= $$$INIssueToLocn(objIssue)
			set idToStorage	= $$$INIssueLineToStorage(objLine)
			set idFromStorage=$$$INIssueLineFromStorage(objLine)
			if (idIssueType'=3) && (idIssueType'=6) && (idIssueType'=7){
				;continue:$$IsStorageBlocked^INLP(idToLoc,idToStorage) 
			}
			continue:$$IsStorageBlocked^INLP(idFromLoc,idFromStorage) 

			if fltIssued>fltReturned {
				if pblnSearchAll {  ; Save data in Dyna Grid format
					set dtIssueDate	= $$$INIssueCreatedOn(objIssue)
					set strDate		= $$^WWWDATE(dtIssueDate,$get(SPRACHE))
					set strValues	= idToLoc_Y_idToStorage_Y_idIssue_Y_idLine_Y_strDate_Y
					set objBundle	= ##class(alSOH.dBundle).%OpenId(idBundle)
					set intCol		= 4
					set strValues	= strValues_$$BundleAttributes^INBundleUtils(objBundle,intCol,.intExpiredCol,idFromLoc,objBundle) 
					set strValues	= strValues_$$^WWWTR(0,12,fltIssued)_Y_$$^WWWTR(0,12,fltReturned)
					set parrSearch($increment(intLineCnt),"data") = idIssue_Y_idLine
					set parrSearch(intLineCnt) = strValues
				} else {
					set blnFound = $$$YES
					quit
				}
			}
		}
		quit:blnFound
	}


	do objResult.%Close()
	if blnFound {
		kill parrBundle
		merge parrBundle= arrItemAttrib
		set pidBundle	= $$$INIssueLineBundle(objLine)
		set pidStorage	= $$$INIssueLineToStorage(objLine)
		set pidIssue	= idIssue
		set pidIssueLine= idLine
	}
	set pstrStatus	= strStatus
	quit blnFound

]]></Routine>
</Export>