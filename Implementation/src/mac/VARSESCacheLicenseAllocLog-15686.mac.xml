<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESCacheLicenseAllocLog" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARSESCacheLicenseAllocLog
	// Andre, 23/04/2009
	// Caché license allocation log 
	quit
	
#include COMSYS
#include COMConst
#include COMView
#include VARConst
 
LogNow(&pLogId="")
	new arraySumPerUserId, userIdOrSessionId, connections, CSPCount, existingRecord, existingCount, 
		existingConnections, existingCSPCount, count, rec, existsAlphalincSession,
		countNoAlphalincSession, gracePeriodRemaining, countInGrace, logId, logTimestamp, logObj,
		saveResult, ipAddress
 
	write "<br><br>",YCR
	write "Caché License Allocations <b>** per user ID **</b> (usually, IP address): "
	write "<pre><blockquote><blockquote>"
 
	// Alphalinc sessions per IP:
 
	new currentActiveAlphalincSessions, arrayAlphalincPerIP, currentInactiveAlphalincSessions
	do GetAllSessions^WWWUSER("^CacheTempLicenseInfo","^CacheTempInacLicenseInfo",.currentActiveAlphalincSessions,.currentInactiveAlphalincSessions) 
	set intCount = 0
	set idSession = "" 
	for {
		set idSession = $order(^CacheTempLicenseInfo(idSession))
		quit:idSession=""
		set intCount = intCount + 1
		
		/*
		if ($extract(idSession,1,2) = "WS") {  //Web Service Sessions
			continue
		}
		else {  //Alphalinc User Session
		*/
			set ipAddress = $listget($get(^CacheTempSession(idSession)),4)
			if ( $get( ipAddress) = "" ) {
				set ipAddress = "Unknown"
			}
 
			if ( $data( arrayAlphalincPerIP( ipAddress ) ) ) {
				// There might be multiple sessions from the same IP address. 
				// So, multiple session ids are being saved in the array:
				set arrayAlphalincPerIP( ipAddress ) = $get( arrayAlphalincPerIP( ipAddress ) )_";"_idSession
			}
			else {
				set arrayAlphalincPerIP( ipAddress ) = idSession
			}
		//}
	}
	;kill ^CacheTempLicenseInfo
 
	set intCount = 0
	set idSession = "" 
	for {
		set idSession = $order(^CacheTempInacLicenseInfo(idSession))
		quit:idSession=""
		set intCount = intCount + 1
		
		/*
		if ($extract(idSession,1,2) = "WS") {  //Web Service Sessions
			continue
		}
		else {  //Alphalinc User Session
		*/
			set ipAddress = $listget(^CacheTempSession(idSession),4)
			if ( $data( arrayInacAlphalincPerIP( ipAddress ) ) ) {
				// There might be multiple sessions from the same IP address. 
				// So, multiple session ids are being saved in the array:
				set arrayInacAlphalincPerIP( ipAddress ) = $get( arrayInacAlphalincPerIP( ipAddress ) )_";"_idSession
			}
			else {
				set arrayInacAlphalincPerIP( ipAddress ) = idSession
			}
		//}
	}
 
 
	// Dumping Caché Licenses:
	do $System.License.DumpLocalAll()
 
	set strFile=##class(%Library.File).%New($ZUTIL(12,"")_"all.dmp")
	do strFile.Open("R")
 
	// Skipping first two lines of the dump file:
	set intLength = 100, strLine = strFile.Read(.intLength)
	set intLength = 100, strLine = strFile.Read(.intLength)
 
 	set logId = $$^WWWNEXT("VARSESCacheLicenseAllocLog")
 	if ( +logId = 0 ) {
	 	write !,"Error: could not get next log id counter."
	 	quit
 	}
 	set logTimestamp = $HOROLOG
 
	set countNoAlphalincSession = 0, countInGrace = 0, countUndefined = 0
	for  {
		set intLength = 100, strLine = strFile.Read(.intLength)
		quit:strFile.AtEnd
	 	
	 	set licenseId = $piece( strLine, ")", 1 )
 
	 	if ( ( $get( licenseId ) = "" ) || $find( strLine, "free" ) ) {
		 	continue
	 	}
		 	
	 	set licenseId = $number( licenseId )
 
	 	set logObj = ""
	 	
	 	set userIdOrSessionId 		= $piece( $piece( strLine, "User ID = ", 2), ",", 1)
	 	
	 	if ( $get(userIdOrSessionId) '= "" ) {
		 	set connections = $piece( $piece( strLine, "Connections = ", 2), ",", 1)
		 	set CSPCount 	= $piece( $piece( strLine, "CSP Count = ", 2), ",", 1)
		 	set timeActive = $piece( $piece( strLine, "Time active = ", 2), ",", 1)
		 	
		 	;set ^VARSESCacheLicenseAllocLog(0,licenseId,1) = userIdOrSessionId_Y_connections_Y_CSPCount_Y_timeActive_Y_Y
		 	set logObj = userIdOrSessionId_Y_connections_Y_CSPCount_Y_timeActive_Y_Y_Y_logTimestamp
		 	
		 	if ( $data( arraySumPerUserId(userIdOrSessionId) ) ) {
			 	set existingRecord = $get( arraySumPerUserId(userIdOrSessionId) )
			 	set existingCount 		= $piece( existingRecord, "~", 1)
			 	set existingConnections = $piece( existingRecord, "~", 2)
			 	set existingCSPCount 	= $piece( existingRecord, "~", 3)
			 	set existingTimeActive 	= $piece( existingRecord, "~", 4)
			 	
			 	set arraySumPerUserId(userIdOrSessionId) = 
			 			( existingCount + 1 )_"~"_
			 			( existingConnections + connections )_"~"_
			 			( existingCSPCount + CSPCount )_"~"_
			 			existingTimeActive_";"_$fnumber(timeActive/60/60,",",2)
		 	}
		 	else {
			 	set arraySumPerUserId(userIdOrSessionId) = 1_"~"_
			 									connections_"~"_
			 									CSPCount_"~"_
			 									$fnumber(timeActive/60/60,",",2)
		 	}
	 	}
	 	else {
 
	 		set userIdOrSessionId 		= $piece( $piece( strLine, "Session ID = ", 2), ",", 1)
	 	
		 	if ( $get(userIdOrSessionId) '= "" ) {
			 	set timeActive 	= $piece( $piece( strLine, "Time active = ", 2), ",", 1)
			 	set gracePeriodRemaining = $piece( $piece( strLine, "Grace period remaining = ", 2), ",", 1)
			 	
			 	;set ^VARSESCacheLicenseAllocLog(0,licenseId,1) = userIdOrSessionId_Y_Y_Y_timeActive_Y_gracePeriodRemaining_Y
			 	set logObj = userIdOrSessionId_Y_Y_Y_timeActive_Y_gracePeriodRemaining_Y_Y_logTimestamp
 
			 	set countInGrace = countInGrace + 1
			 	
			 	if ( $data( arraySumPerUserId(userIdOrSessionId) ) ) {
				 	set existingRecord = $get( arraySumPerUserId(userIdOrSessionId) )
				 	set existingCount 		= $piece( existingRecord, "~", 1)
				 	set existingTimeActive 	= $piece( existingRecord, "~", 4)
				 	set arraySumPerUserId(userIdOrSessionId) = ( existingCount + 1 )_"~~~"_
			 										existingTimeActive_";"_$fnumber(timeActive/60/60,",",2)
			 	}
			 	else {
				 	set arraySumPerUserId(userIdOrSessionId) = 1_"~~~"_
			 										$fnumber(timeActive/60/60,",",2)
			 	}
		 	}
	 	}
	 	if ( $get(userIdOrSessionId) '= "" ) && $data( arraySumPerUserId(userIdOrSessionId) ) {
		 	if ( $data(arrayAlphalincPerIP(userIdOrSessionId)) ) {
			 	set existsAlphalincSession = "Yes"
			 	;set ^VARSESCacheLicenseAllocLog(0,licenseId,1) = ^VARSESCacheLicenseAllocLog(0,licenseId,1)_arrayAlphalincPerIP(userIdOrSessionId)
			 	set $piece(logObj,Y,6) = arrayAlphalincPerIP(userIdOrSessionId)
			 	set arraySumPerUserId(userIdOrSessionId) = arraySumPerUserId(userIdOrSessionId)_"~"_arrayAlphalincPerIP(userIdOrSessionId)
			 	
		 	}
		 	else {
			 	set countNoAlphalincSession = countNoAlphalincSession + 1
			 	set existsAlphalincSession = "No"
 
			 	if ( $data(arrayInacAlphalincPerIP(userIdOrSessionId)) ) {
				 	set $piece(logObj,Y,8) = arrayInacAlphalincPerIP(userIdOrSessionId)
				 	set arraySumPerUserId(userIdOrSessionId) = arraySumPerUserId(userIdOrSessionId)_"~"_arrayInacAlphalincPerIP(userIdOrSessionId)
			 	}
 
		 	}
		 	;set arraySumPerUserId(userIdOrSessionId) = arraySumPerUserId(userIdOrSessionId)_"~"_existsAlphalincSession
	 	}
	 	
	 	if ( $get(userIdOrSessionId) = "" ) {
		 	set logObj = "Undefined"
		 	write !,"<BR>","Undef: ",strLine
		 	set countUndefined = countUndefined + 1
	 	}
		
		// Saving log record:
		set saveResult = $$Save^COMUtils( "VARSESCacheLicenseAllocLog", logId_","_licenseId, logObj, 0) // 0 => Without lock option
	}
 
	do strFile.Close()
	
	// Alphalinc sessions without license id are saved as License Id = "Undefined"
	
	new ALSessionsWOLicense
	
	set ALSessionsWOLicense = ""
	
	for {
		set idSession = $order(^CacheTempLicenseInfo(idSession))
		quit:idSession=""
		
		set ipAddress = $listget( $get( ^CacheTempSession(idSession) ),4 )
		if ( $get( ipAddress) = "" ) {
			set ipAddress = "Unknown"
		}
		
		if '$data( ^VARSESCacheLicenseAllocLogs(0,1,logId,ipAddress) ) {
			if ( ALSessionsWOLicense = "" ) {
				set ALSessionsWOLicense = idSession
			}
			else {
				set ALSessionsWOLicense = ALSessionsWOLicense_";"_idSession
			}
		}
	}
 
	if ( ALSessionsWOLicense '= "" ) {
		set logObj = ""
	 	set $piece(logObj,Y,6) = ALSessionsWOLicense
		set saveResult = $$Save^COMUtils( "VARSESCacheLicenseAllocLog", logId_","_"Undefined", logObj, 0) // 0 => Without lock option
	}
 
	
	kill ^CacheTempLicenseInfo
 
 
	// Writing:
	
	write !,"<BR>","Caché Licenses Currently Consumed: ",$System.License.LUConsumed()
	write !,"<BR>","Alphalinc sessions currently active: ", $get( currentActiveAlphalincSessions )
	write !,"<BR>","Cache user IDs without a corresponding Alphalinc session: ",countNoAlphalincSession
	write !,"<BR>","Cache user IDs in grace period: ",countInGrace
	write !,"<BR>","Cache user IDs undefined: ",countUndefined
	write !,"<BR>"
	
	set userIdOrSessionId = "", count = 0
	for {
		set userIdOrSessionId = $order(arraySumPerUserId(userIdOrSessionId))
		quit:( userIdOrSessionId = "" )
		set rec = $get(arraySumPerUserId(userIdOrSessionId))
		continue:( $get( rec ) = "" )
		set count = count + 1
		write !,"<BR>",$j(count,3),") ",userIdOrSessionId,": "_
				"Count = ",$p(rec,"~",1)," "_
				"Connections = ",$p(rec,"~",2)," "_
				"CSPCount = ",$p(rec,"~",3)," "_
				"Time active (hours) = ",$p(rec,"~",4)," "_
				"Alphalinc session(s) = ",$p(rec,"~",5)," "
	}
	
	write "</blockquote></blockquote></pre>"
	
	set pLogId = logId
	
	quit
 
 
KillAll()
	// Andre, 23/04/2009:
	// Kills all data in VARSESCacheLicenseAllocLog, its indexes and counters.
	
	new saveResult
	
	// Killing data and index:
 	kill ^VARSESCacheLicenseAllocLog,^VARSESCacheLicenseAllocLogs
 
 	// Resetting counter:
 	set saveResult = $$Save^COMUtils( "WWW128", "VARSESCacheLicenseAllocLog", "0", 1)
 	
	quit
 
 
GetALSessionsWoLicense()
	// Andre, 24/04/2009
	// asdf
	
	$$$VAR
	
	new logId
	
	do LogNow(.logId)
	
	write !,"Log Id: ",logId
 
	// Alphalinc sessions per IP:
 
	new currentActiveAlphalincSessions, arrayAlphalincPerIP, intCount, idSession
	do GetActiveSessions^WWWUSER("^CacheTempLicenseInfo",.currentActiveAlphalincSessions) 
	set intCount = 0
	set idSession = "" 
	for {
		set idSession = $order(^CacheTempLicenseInfo(idSession))
		quit:idSession=""
		set intCount = intCount + 1
		
		/*
		if ($extract(idSession,1,2) = "WS") {  //Web Service Sessions
			continue
		}
		else {
			*/
			set ipAddress = $listget(^CacheTempSession(idSession),4)
			if '$data( ^VARSESCacheLicenseAllocLogs(0,1,logId,ipAddress) ) {
				write !,idSession," - IP: ",ipAddress
			}
		//}
	}
	kill ^CacheTempLicenseInfo
 	
	quit
]]></Routine>
</Export>