<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INDPPLineDispRule" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INDPPLineDispRule
	
#include INConst
#include COMSYS
	
QuantityBreaksValid(pidRuleHeader,pidRuleLine)
	;-------------------------------------------------------------------------------
	; Locate the first occurrence of a quantity break line that has an invalid
	; quantity break or pricing formula
	;
	; Params:
	; pidRuleHeader - Price Plan Generation Rule Id
	; pidRuleLine - Price Plan Generation Rule Line Id
	;
	; ByRefs: None
	;
	; Returns: strStatus - $$$OK if valid, else error message
	;
	; History:
	; 12-Apr-2010	GRF		SR17177: arrQtyBreaks rather than objQuantityBreaks
	; 08-Dec-2006	PO		SR15280: Created
	;-------------------------------------------------------------------------------
	new arrQtyBreaks,idQuantityBreak,idRuleLine,idRuleLineQty,fltQuantity
	new objRuleLineQty,strPricingFormula,strStatus
 
	set strStatus = $$$OK
 
	$$$GRIDGetContents(.arrQtyBreaks)
 
	set idRuleLineQty = ""
	for {
		set idRuleLineQty = $order(arrQtyBreaks(pidRuleHeader,pidRuleLine,idRuleLineQty))
		quit:idRuleLineQty=""
		
		set objRuleLineQty    = $get(arrQtyBreaks(pidRuleHeader,pidRuleLine,idRuleLineQty))
		set strPricingFormula = $$$INPPLineQtyGenRulePricingFormula(objRuleLineQty)
		set fltQuantity       = $$$INPPLineQtyGenRuleMinQuantity(objRuleLineQty)
 
		if fltQuantity '> 0 {
			set strStatus = $listbuild("IN00566",idRuleLineQty)
		} ; "Minimum Quantity on line %1 must be greater than zero."
		
		if $$$ISOK(strStatus) {
			if '$$$BracketsMatch(strPricingFormula) {
				set strStatus = $listbuild("IN00583",idRuleLineQty)
			  ; "Brackets not matching in pricing forumla on line %1."
				
			} elseif '$$$ValidCharsInExpression(strPricingFormula) {
				set strStatus = $listbuild("IN00584",idRuleLineQty)
			}  ; "Invalid characters in pricing formula on line %1."
		}
		quit:$$$ISERR(strStatus)
	}
	quit strStatus
	
	
NoOverlappingMinQuantities(pidRuleHeader,pidRuleLine,&pidQtyBreakLines)
	;-------------------------------------------------------------------------------
	; Locate the first occurrence of an overlapping quantity break rule for a particular rule line
	;
	; Params:
	; pidRuleHeader  - Price Plan Generation Rule Id
	; pidRuleLine    - Price Plan Generation Rule Line Id
	; pidQtyBreakLines - Price Plan Generation Rule Line Quantity Break Lines that over lap
	; pidIgnoreLine - Price Plan Generation Rule Line
	;
	; ByRefs: pidQtyBreakLines
	;
	; Returns: $$$YES if valid, else $$$NO
	;
	; History:
	; 12-Apr-2010	GRF		SR17177: arrQtyBreaks rather than objQuantityBreaks
	; 08-Dec-2006	PO		SR15280: Created
	;-------------------------------------------------------------------------------
	new arrBreakPoint,arrQtyBreaks,blnValid,fltQuantity
	new idQuantityBreak,idRuleLine,idRuleLineQty,objRuleLineQty
 
	set blnValid = $$$YES
 
	$$$GRIDGetContents(.arrQtyBreaks)
 
	set idRuleLineQty = ""
	for {
		set idRuleLineQty = $order(arrQtyBreaks(pidRuleHeader,pidRuleLine,idRuleLineQty))
		quit:idRuleLineQty=""
	
		set objRuleLineQty = $get(arrQtyBreaks(pidRuleHeader,pidRuleLine,idRuleLineQty))
		set fltQuantity    = $$$INPPLineQtyGenRuleMinQuantity(objRuleLineQty)
		continue:fltQuantity=""
		
		if $get(arrBreakPoint(fltQuantity)) = "" {
			set arrBreakPoint(fltQuantity) = idRuleLineQty
			
		} else {
			set pidQtyBreakLines = arrBreakPoint(fltQuantity)_$$$COMMA_" "_idRuleLineQty
			set blnValid = $$$NO
		}
		quit:$$$ISERR(blnValid)
	}
	quit blnValid
	
]]></Routine>
</Export>