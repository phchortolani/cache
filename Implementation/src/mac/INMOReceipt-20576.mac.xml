<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INMOReceipt" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INMOReceipt
	
#include COMSYS
#include INConst
#include COMConst
#include COMSYSNum
	
OnBeforeButtonLine(pYKEY)
    ;-------------------------------------------------------------------------------
    ; Set form to readonly if not editable
    ;
    ; Params:	pYKEY		- Req id
    ;
    ; ByRef: 
    ; 	YVOR		WWW122 record
    ;
    ; History:
	; 29-Apr-2010	PP		SR16573: Created
    ;-------------------------------------------------------------------------------
	if '$$Editable(pYKEY) {
		set $$$WWW120AuthorizationToModifyData(YVOR)=$$$EnumReadOnly
	}
	quit
	
	
Editable(pidREC) 
    ;-------------------------------------------------------------------------------
    ; Is form editable (unprocessed) ?
    ;
    ; Params:	pidMO - MO id
    ;
    ; Returns:	status
    ;
    ; History:
	; 29-Apr-2010	PP		SR16573: Created
    ;-------------------------------------------------------------------------------
	new objREC,strStatus
	
	set strStatus = $$$OK
	
	if '$$$NoKey(pidREC) {
		set objREC = $get(^INREC(0,pidREC,1))
		
	 	if $$$INRECStatus(objREC) > 0 { ; > $$$EnumINSTATUSUnprocessed
		 	set strStatus = $$$MakeStatus("INREQ01")       ; "Requisition has been Firmed"
	 	}  ; FIXME : Requisition?  Should this be "Manufacturing Order has been Processed"?
	}
	quit strStatus
	
	
OnBeforeSave(pYKEY)
	;-------------------------------------------------------------------------------
	;
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 29-Apr-2010	PP		SR16573: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$$GRIDSave(pYKEY)
	
	if $$$ISERR(strStatus) {	
		do ReturnError^COMUtilError(strStatus)
		set Q = $$$QDontSave
	} 
	quit
	
	
OnAfterDataFields(pYKEY, pYFELD)
	;-------------------------------------------------------------------------------
	;
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 29-Apr-2010	PP		SR16573: Created
	;-------------------------------------------------------------------------------
	quit:pYKEY=""
	
	do LoadINMORecLine(pYKEY,pYFELD)
	quit
	
	
IsFirmable(pYKEY)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 13-Sep-2012	PPP		SR18116:Included Receipt Location validation on the firm button of the INMO (C101)
	; 20-Apr-2012	PPP		SR17983 : Return the Status
	; 11-Aug-2010	PPP		SR16573/1: stop processing if not Man Receipt
	; 29-Apr-2010	PPP		SR16573: Created 
	;-------------------------------------------------------------------------------
	new idRecLine,objINMOREC,strStatus
	
 	set strStatus = $$$OK
	
	if (pYKEY'="") {
		set objINMOREC = $get(^INREC(0,pYKEY,1))
		quit:objINMOREC=""                          ; FIXME : EARLY EXIT

		if $$$INRECType(objINMOREC)=$$$EnumINRECManufacturingReceipt {   //SR16573/1
			//If Status = 0 (Unprocessed)
			if (($$$INRECStatus(objINMOREC) > 0)) {  ; > $$$EnumINSTATUSUnprocessed
				//set YQ="1 Already Received"
				set strStatus = $$$MakeStatus("IN01219") ; "Order has already been Received"
			
			} else {
				// Validate lines
				set idRecLine = ""
				for {
					set idRecLine = $order(^INRECLine(0,pYKEY,idRecLine))
					quit:idRecLine=""
				
					set strStatus = $$CanReceiveLine^INMORecLine(pYKEY,idRecLine)
					quit:$$$ISERR(strStatus)
				}
			}
		
		} else {
			set strStatus = $$$MakeStatus("IN01240") ; "Only Manufacturing Receipts are valid for this process"
		}

		//SR18116
	    if ($$$INRECLocation(objINMOREC) '= YLOCATION) {
  			set strStatus = $$$MakeStatus("IN01339")		;Only the Receiving Location can perform this operation
	    }

	}
 	
 	$$$YQHandler(strStatus)
 	
 	//SR17983
	quit strStatus
	
	
LoadINMORecLine(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
	;
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 29-Apr-2010	PP		SR16573: Created
	;-------------------------------------------------------------------------------
	new YFORM,YKEY,YAUSWAHL,YFELD
	
	set YFORM = "INMORecLine"			
	set YKEY = $get(pYKEY)
	
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)			= $$$YES
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL)		= 200
	set $$$COMGridEditParameterGridName(YAUSWAHL) 			= YFORM
	set $$$COMGridEditParameterUpdateFields(YAUSWAHL) 		= ""
	set $$$COMGridEditParameterClearFields(YAUSWAHL) 		= ""
	set $$$COMGridEditParameterDefaultFields(YAUSWAHL) 		= ""
	set $$$COMGridEditParameterContainer(YAUSWAHL) 			= "INMOREC"
	set $$$COMGridEditParameterEnabled(YAUSWAHL)			= ($$$INRECStatus(pYFELD) = 0) ; open
	set $$$COMGridEditParameterDontUpdateContainer(YAUSWAHL)= $$$YES
	
	do ^COMGridEdit31
	quit		
 	
	
FirmReceipt(pidReceipt)
	;-------------------------------------------------------------------------------
	; Firm the Manufacturing Receipt
	;
	; Params: pidReceipt
	;
	; Returns: Status
	;
	; History:
	; 20-Apr-2012	PPP		SR17983 : Ensure that the process cannot be duplicated
	;						Cannot be run more than once.
	; 29-Apr-2010	PP		SR16573: Created
	;-------------------------------------------------------------------------------
	new fltQty,idLine,idMO,objINMO,objRec,strStatus
	
	//SR17983
	set strStatus = $$IsFirmable(pidReceipt)
	
	if $$$ISOK(strStatus) {
		set strStatus = $$Transaction^COMTransaction("PostTxn^INMOReceipt("""_pidReceipt_""")",$$$YES)
		
		if $$$ISOK(strStatus) {
			set objRec = $get(^INREC(0,pidReceipt,1))
			set idMO   = $$$INRECProductionOrder(objRec)
		
			if idMO'="" {
				set objINMO = $get(^INMO(0,idMO,1))
				set idLine  = $order(^INRECLine(0,pidReceipt,""))
			
				if idLine {
					set fltQty = $$$INRECLineQuantity($get(^INRECLine(0,pidReceipt,idLine,1)))
					set $$$INMOReceipt(objINMO) =	fltQty		    //Receipted Qty
				}
				set $$$INMOStatus(objINMO)            = 5		    //Receipted
				set $$$INMOReceiptFirmedDate(objINMO) = $horolog
				set $$$INMOReceiptFirmedBy(objINMO)   = $get(YBED)
				set strStatus = $$$Save("INMO",idMO,objINMO,$$$YES)		
			}
		
		}
			
	}

	do ReloadForm^COMUtilForm()
	
	quit strStatus
	
	
UpdateHeader(pidReceipt) 
	;-------------------------------------------------------------------------------
	; Update INREC record after processing
	;
	; Params:	pidReceipt - INREC key
	;
	; ByRefs:
	;
	; Returns:	Status
	;
	; History:
	; 29-Apr-2010	PP		SR16573: Created
	;-------------------------------------------------------------------------------
	new objRecHeader,prevYBED,strStatus
	
	set objRecHeader = $get(^INREC(0,pidReceipt,1))
	
	set $$$INRECStatus(objRecHeader)        = $$$EnumINSTATUSProcessed
	set $$$INRECProcessedDate(objRecHeader) = $horolog
	set $$$INRECProcessedBy(objRecHeader)   = $get(YBED,"UNKNOWN")
	
	set prevYBED = YBED                                         ; FIXME : <GRF> This shouldn't be necessary - if it is
	set strStatus = $$$Save("INREC",pidReceipt,objRecHeader,$$$YES) ;     we need to fix where the problem is occurring
	set YBED = prevYBED
	
	quit strStatus
	
	
PostTxn(pidReceipt)
	;-------------------------------------------------------------------------------
	; Post the Production Receipt
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 11-Aug-2010	PPP		SR16573/1: If not Man Receipt stop processing
	; 29-Apr-2010	PPP		SR16573: Created
	;-------------------------------------------------------------------------------
	new arrRecDate,enumOrderUnit,fltOrderConv,fltRequiredQty,idItem
	new idOrder,idOrderLine,idRecLine,objLine,objMove,objRec,objRec15,sc,strStatus
	
	set strStatus = $$UpdateHeader(pidReceipt)
	set sc = $$$OK
	
	if $$$ISOK(strStatus) {
		set objRec = $get(^INREC(0,pidReceipt,1))
		
		if $$$INRECType(objRec)=$$$EnumINRECManufacturingReceipt {
				
			; Create Movement
			;-----------------------------------
			set idRecLine = ""
			for {
				set idRecLine = $order(^INRECLine(0,pidReceipt,idRecLine))
				quit:idRecLine=""
				
				set objLine  = $get(^INRECLine(0,pidReceipt,idRecLine,1))
				
				set objRec15 = ##class(alREC.dUReceiptLine).%OpenId("0||"_pidReceipt_"||"_idRecLine)
				set objMove  = ##class(alMAN.dMovementReceipt).%New()
				
				set idItem      = $$$INRECLineItem(objLine)
				set idOrder     = $$$INRECLineOrder1(objLine)
				set idOrderLine = $$$INRECLineOrderLine(objLine)
				
				// Convert to full V2 Objects via interfaces 
				set objMove.Item         = ##class(alINV.iUINV).GetItem(idItem)
				set objMove.FromLocn     = ""
				set objMove.FromStorage  = ""
				set objMove.ToLocn       = ##class(alLOC.iLOC).GetLocation($$$INRECLineLocation(objLine))
				set objMove.ToStorage    = ##class(alLOC.iLOC).GetStorage($$$INRECLineLocation(objLine),$$$INRECLineStockLocation(objLine))
				set objMove.Reference    = pidReceipt
				set objMove.LineNumber   = idRecLine
				set objMove.QtyPicked    = 0
				set objMove.QtyReceived  = $$$INRECLineQuantity(objLine)
				set objMove.Supply       = ""
				set objMove.Demand       = ""
				set objMove.Completed    = $$$NO
				set objMove.ExtendedCost = $justify($$$INRECLineQuantity(objLine)*$$$INRECLineEach(objLine),0,YDECIMALLEN)
				set objMove.UnitCost     = $$$INRECLineEach(objLine)
				set objMove.ReceiptDate  = +$horolog
				
				set fltRequiredQty = $$$INRECLineOrderQuantity(objLine)    ; in Order Units - MO & Rec in Inventory Units at present
				set objMove.QtyRequired  = fltRequiredQty                  ; in Inventory Units
				
				set objMove.Bundle       = objRec15.Bundle
				set objMove.OrderNumber  = idOrder
				set objMove.OrderLine    = idOrderLine
						
				if $$$ISOK(sc) set sc = objMove.ChangeState(4)
				
				set:$$$ISERR(sc) strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
				quit:$$$ISERR(strStatus)
			}
		
		} else {
			set strStatus = $$$MakeStatus("IN01240")  //SR16573/1
		} ; "Only Manufacturing Receipts are valid for this process"
	}
	quit strStatus
	
]]></Routine>
</Export>