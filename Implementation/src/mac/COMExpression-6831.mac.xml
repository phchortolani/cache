<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMExpression" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMExpression
 
#include COMSYS
 
#define EvalFunction(%1) if $extract(arrValue(%1))="$" { xecute "set arrValue("_(%1)_")="_arrValue(%1) }
 
Calculator(pstrCalc,&pintStart=0,&parrData="")
	;-------------------------------------------------------------------------------
	; Calculate the value of a passed in string.
	;
	; Params:
	; pstrCalc : The string to be calculated
	; pintStart: Where to start the calculation, defaults to 0.
	; parrData : The data for any functions
	;
	; ByRefs:
	;
	; Returns:
	; The result of the calculation or Nan for an error.
	;
	; History:
	; 06-Dec-2006	RPW		SR15269: Pass through the array of functions into the recursive call
	; 04-Dec-2006	RPW		SR15269: Created
	;-------------------------------------------------------------------------------
 
	new strValue,loop,strChar,intPairing,arrValue,arrOperator,blnError,strCalc,strError
	
	set $ztrap = "CalculatorError"
	
	set blnError=$$$NO
	if pintStart=0 {
		set pstrCalc=$zstrip(pstrCalc,"*W")
		;if $zstrip(pstrCalc,"*E",,"0123456789eEF()+-*/.")'=pstrCalc {
		if '$$$ValidCharsInExpression(pstrCalc) {
			set blnError=$$$YES
		}
	}
	
	quit:$isvalidnum(pstrCalc) pstrCalc  // This is a quick way out if the value is a valid number, no need to calculate.
	
	;quit:(blnError)||((pintStart=0)&&($length(pstrCalc,"(")'=$length(pstrCalc,")"))) $$$BracketCount  // This is not a valid calculation
	quit:(blnError)||((pintStart=0)&&'$$$BracketsMatch(pstrCalc)) $$$BracketCount  // This is not a valid calculation
	
	set blnError=$$$NO
	
	set strValue=""
	set strCalc=""
	set intPairing=1
	
	set strError=$$$NotANumber
	
	for loop=pintStart+1:1:$length(pstrCalc) {
		set strChar=$extract(pstrCalc,loop)
		if $find("+-*/",strChar) {
			if strValue="" set strValue=strCalc
			set arrValue(intPairing)=strValue
			set arrOperator(intPairing)=strChar
			set intPairing=intPairing+1
			set strValue=""
			set strChar=""
		} elseif strChar="(" {
			set pintStart=loop
			set strCalc=$$Calculator(pstrCalc,.pintStart,.parrData) // <- This must pass through the functions Rob. Rob.
			if $extract(strCalc)=":" {
				set blnError=$$$YES
				set strError=strCalc
				quit
			}
			set loop=pintStart
		} elseif strChar=")" {
			set strChar=""
			set pintStart=loop
			quit
		} elseif strChar="F" {
			set loop=loop+1
			set strChar=$extract(pstrCalc,loop)
			set strValue=$get(parrData("F"_strChar))
			if strChar="" {
				set blnError=$$$YES
				set strError=$$$UnknownFunction
				quit
			}
			
			set strChar=""
		} else {
			set strValue=strValue_strChar
			set strChar=""
		}
	}
	
	if 'blnError {
	
		set arrValue(intPairing)=$select(strValue="":strCalc,1:strValue_strChar)
		
		if intPairing=1 {
			$$$EvalFunction(intPairing)
		} else {
		
			for loop=1:1:intPairing-1 {
				$$$EvalFunction(loop)
				$$$EvalFunction(loop+1)
				
				if arrOperator(loop)="+" {
					set arrValue(loop+1)=arrValue(loop)+arrValue(loop+1)
				} elseif arrOperator(loop)="-" {
					set arrValue(loop+1)=arrValue(loop)-arrValue(loop+1)
				} elseif arrOperator(loop)="*" {
					set arrValue(loop+1)=arrValue(loop)*arrValue(loop+1)
				} else {
					if +arrValue(loop+1)=0 {
						set blnError=1
					} else {
						set arrValue(loop+1)=arrValue(loop)/arrValue(loop+1)
					}
				}
			}
		}
	}
	
	if blnError {
		set arrValue(intPairing)=strError
	}
 
	quit arrValue(intPairing)
	
CalculatorError ; Internal Tag
	set $ztrap=""
	
	quit $$$InvalidChar
	
FindFunction(pstrPricingFormula,pintFunction,pstrError,pblnErrorOnFound)
	;-------------------------------------------------------------------------------
	; This determines whether a function is used or not used in a formula
	;
	; Params:
	;
	; ByRefs: This is not really needed as we use & for ByRef parameters now.
	;
	; Returns:
	; $$$OK if the function was or wasn't found, otherwise the passed in error
	;
	; History:
	; 19-Dec-2006	RPW		SR<place SR Number here>: Created
	;-------------------------------------------------------------------------------
	new strStatus,intFind,intFunction
	
	set strStatus=$$$OK
	
	set intFind=$find(pstrPricingFormula,"F")
		
	for {
		quit:intFind=0
		
		set pstrPricingFormula=$extract(pstrPricingFormula,intFind,$length(pstrPricingFormula))
		set intFind=$find(pstrPricingFormula,"F")
		
		set intFunction=$extract(pstrPricingFormula)
		
		if +intFunction'=intFunction {
			set strStatus=$listbuild("IN00597",intFunction)  ;Unknown function %1.
		}
		if $$$ISOK(strStatus) {
			if 'pblnErrorOnFound {
				if intFunction'=pintFunction {
					set strStatus=pstrError
				}
			} else {
				if intFunction=pintFunction {
					set strStatus=pstrError
				}
			}
		}
		quit:$$$ISERR(strStatus)
	}
		
	quit strStatus
]]></Routine>
</Export>