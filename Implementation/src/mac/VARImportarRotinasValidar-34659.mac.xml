<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Routine name="VARImportarRotinasValidar" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[VARImportarRotinasValidar

    #include COMSYS
    #include TemConst
    #include VARConst

	;---------------------------------------------------------------------------------------------------------------------
	; Arquivo contendo rotinas para validação dos dados para usar durante importação de arquivos
	;
	; As rotinas aqui definidas devem levar em consideração que serão usadas por todos os ambientes/clientes.
	;
	; Portanto não utilize macros ou outras rotinas que sejam específicas de um cliente. Ex: VARSES, VARTCI, VARSESAU, etc.  
	;
	; Observações sobre as rotinas de validação:
	;	- Devem conter somente um parâmetro de entrada.
	;	- Devem sempre retornar algum valor, sendo:
	;		- Em caso de Sucesso: 1
	; 		- Em caso de Falha  : retorna o texto "Erro;mensagem" onde mensagem é diferente para cada rotina de validação.
	;
	;---------------------------------------------------------------------------------------------------------------------
	

ValidarProduto(pValorEntrada="")
	;Rotina para validar se o produto está cadastrado
	
	if (pValorEntrada="") {
		quit "Erro;-Produto é obrigatório para importação."
	}
	
	new Existe
	
	$$$VAR
	set Existe = $D(^INART(YM,pValorEntrada,1))
	if Existe {
		quit 1
	}
	else{
		quit "Erro;-Produto não cadastrado ("_pValorEntrada_")"	
	}

	quit "Erro;-Validação de produto não identificada ("_pValorEntrada_")"	

ValidarExecutor(pValorEntrada="")
	;Rotina para validar se o produto está cadastrado
	
	if (pValorEntrada="") {
		quit "Erro;-Executor é obrigatório para importação."
	}
	
	new Existe
	
	$$$VAR
	set Existe = $D(^VARPARA(YM,"EXECUTOR","PT",pValorEntrada))
	if Existe {
		quit 1
	}
	else{
		quit "Erro;-Executor não cadastrado ("_pValorEntrada_")"	
	}

	quit "Erro;-Validação de executor não identificada ("_pValorEntrada_")"	


ValidarLocal(pValorEntrada="")
	;Rotina para validar se o local está cadastrado
	
	if (pValorEntrada="") {
		quit "Erro;-Local é obrigatório para importação."
	}
	
	new Existe
	
	$$$VAR
	set Existe = $D(^WWW0121(YM,YM,pValorEntrada,1))
	if Existe {
		quit 1
	}
	else{
		quit "Erro;-Local não cadastrado ("_pValorEntrada_")"	
	}

	quit "Erro;-Validação de local não identificada ("_pValorEntrada_")"			



ValidarCompetencia(pValorEntrada="")
	;Rotina para validar se a competência está cadastrada
	
	if (pValorEntrada="") {
		quit "Erro;-Competência é obrigatória para importação."
	}
	
	new Existe,NomeParametro
	
	$$$VAR
	set NomeParametro = "COMPETENCIA"
	set Existe = $D(^VARPARA(YM,NomeParametro,"PT",pValorEntrada,1))
	if Existe {
		quit 1
	}
	else{
		quit "Erro;-Competência não cadastrada ("_pValorEntrada_")"	
	}

	quit "Erro;-Validação de competência não identificada ("_pValorEntrada_")"


ValidarBooleano(pValorEntrada="")
	;Rotina para validar se o valor é booleano
	
	if (pValorEntrada="") {
		quit "Erro;-Campo obrigatório para importação."
	}
	
	if (pValorEntrada = 0) || (pValorEntrada = 1){
		quit 1
	}
	else{
		quit "Erro;-Valor Inválido ("_pValorEntrada_"). Valores permitidos (0 ou 1)."
	}
	
	quit "Erro;-Validação de Booleano não identificada ("_pValorEntrada_")"
	
ValidarLocalUnidade(pValorEntrada="")
	;Rotina para validar se o local está cadastrado	
	If (pValorEntrada = "") Quit "Erro;-Local é obrigatório para importação."
	New Existe
	$$$VAR
	Set Existe = $D(^WWW0121(YM,YM,pValorEntrada,1))
	If Existe {
		If (+$Piece(^WWW0121(YM,YM,pValorEntrada,1),"~",79) '= 1) {
			Quit "Erro;-Local não é uma Unidade de Saúde?"	
		}		
		Quit 1
	}Else{
		Quit "Erro;-Local não cadastrado ("_pValorEntrada_")"	
	}
	Quit "Erro;-Validação de local não identificada ("_pValorEntrada_")"			

ValidarCentroCusto(pValorEntrada="")
	;Rotina para validar se o local está cadastrado	
	If (pValorEntrada = "") Quit "Erro;-Centro de Custo é obrigatório para importação."
	New Existe
	$$$VAR
	Set Existe = $D(^VARCentroCusto(YM,pValorEntrada,1))
	If Existe {
		Quit 1
	}Else{
		Quit "Erro;-Centro de Custo não cadastrado ("_pValorEntrada_")"	
	}
	Quit "Erro;-Validação de Centro de Custo não identificado ("_pValorEntrada_")"		
	
ValidarHora(pValorEntrada="")
	If (pValorEntrada = "") Quit 1
	New Existe
	$$$VAR
	If ($ZTimeH(pValorEntrada,2,,"-1") = "-1") {
		Quit "Erro;-Hora inválida ("_pValorEntrada_")"	
	}
	Quit 1	
	
ValidarHoraObrigatorio(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo obrigatório para importação."
	New Existe
	$$$VAR

	If ($ZTimeH(pValorEntrada,2,,"-1") = "-1") {
		Quit "Erro;-Hora inválida ("_pValorEntrada_")"	
	}
	Quit 1
	
ValidarCampoSimNao(pValorEntrada="")
	If (pValorEntrada = "") Quit 1
	New Existe
	$$$VAR

	If (",1,0,S,N,SIM,NAO,"[(","_$ZConvert(pValorEntrada,"U")_",")) {
		Quit 1	
	}
	Quit "Erro;-Dados informado invalido. Opções aceitavel (0, 1, S, N, Sim, Nao)"	
	;
ValidarSETOR(pValorEntrada="")
	If (pValorEntrada="") Quit 1 
	New Existe
	$$$VAR
	If '$Data(^VARPARA(0,"SETOR","PT",$ZConvert(pValorEntrada,"U"))) {
		Quit "Erro;-Setor não cadastrado ("_pValorEntrada_")"
	}
	Quit 1
	;
ValidarAla(pValorEntrada="")
	If (pValorEntrada="") Quit 1 
	New Existe
	$$$VAR
	If '$Data(^VARPARA(0,"ALA","PT",$ZConvert(pValorEntrada,"U"))) {
		Quit "Erro;-Ala não cadastrada ("_pValorEntrada_")"
	}
	Quit 1
	;
ValidarTipoAcomodacao(pValorEntrada="")
	If (pValorEntrada="") Quit 1 
	New Existe
	$$$VAR
	If '$Data(^VARPARA(0,"TIPO","PT",$ZConvert(pValorEntrada,"U"))) {
		Quit "Erro;-Tipo de Acomodação não cadastrada ("_pValorEntrada_")"
	}
	Quit 1
	;
ValidarGrupo(pValorEntrada="")	
	If (pValorEntrada = "") Quit "Erro;-Campo obrigatório para importação."
	New Existe
	$$$VAR
	If ('$Data(^INItemGroup(YM, $ZConvert(pValorEntrada,"U")))) {
		Quit "Erro;-Grupo/Sub Grupo Não cadastrado ("_pValorEntrada_")"	
	}
	Quit 1
	;
ValidarTipoProcedimento(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo obrigatório para importação."
	New Existe
	$$$VAR
	
	Set pValorEntrada = $Select($ZConvert(pValorEntrada,"U")="CONSULTA":2,$ZConvert(pValorEntrada,"U")="PROCEDIMENTO":1,1:pValorEntrada)
	
	If '$Data(^VARPARA(0,"TIPOPROCEDIMENTO","PT",$ZConvert(pValorEntrada,"U"))) {
		Quit "Erro;-Tipo não cadastrada ("_pValorEntrada_")"
	}
	Quit 1
	;
ValidarGrupoAgendamento(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo obrigatório para importação."
	New Existe
	$$$VAR
	
	If '$Data(^VARGrupoAgendamento(0,pValorEntrada)) {
		Quit "Erro;-Grupo de Agendamento não cadastrado ("_pValorEntrada_")"
	}
	Quit 1
	;
ValidarTipoRestricao(pValorEntrada="")
	If (pValorEntrada="") Quit 1 
	New Existe
	$$$VAR
	If '$Data(^VARPARA(0,"TIPORESTRICAO","PT",$ZConvert(pValorEntrada,"U"))) {
		Quit "Erro;-Tipo de Restrição não cadastrada ("_pValorEntrada_")"
	}
	Quit 1
	;
ValidarDataObrigatorio(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo obrigatório para importação."
	New Existe
	$$$VAR

	Quit 1
	;
ValidarSexo(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo obrigatório para importação."
	New Existe
	$$$VAR
	
	Set pValorEntrada = $ZConvert(pValorEntrada,"U")
	Set xValorEntrada = $Select(pValorEntrada="FEMININO":2,pValorEntrada="MASCULINO":1,1:pValorEntrada)

	If ('$Data(^WWW101(0,"SEX","PT",xValorEntrada,1))) {
		Quit "Erro;-Sexo não cadastrado ("_pValorEntrada_")"	
	}
	Quit 1
	;	
ValidarCPF(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo obrigatório para importação."
	New Existe
	$$$VAR
	Set Soma = 0
  If (pValorEntrada = "00000000000") {
	  Quit "Erro;-CPF invalido ("_pValorEntrada_")"
  }
	For i = 1: 1: 9 {
		Set Soma = Soma + ($Extract(pValorEntrada,i) * (11-i))
	}
	Set Resto = (Soma * 10) # 11
	If (Resto = 10 || (Resto = 11)) Set Resto = 0
	if (Resto '= $Extract(pValorEntrada,10)) {
		Quit "Erro;-CPF invalido ("_pValorEntrada_")"
	}
	Set Soma = 0
	For i = 1: 1: 10 {
		Set Soma = Soma + ($Extract(pValorEntrada,i) * (12-i))
	}
	Set Resto = (Soma * 10) # 11
	If (Resto = 10 || (Resto = 11)) Set Resto = 0
	if (Resto '= $Extract(pValorEntrada,11)) {
		Quit "Erro;-CPF invalido ("_pValorEntrada_")"
	}
	;
	If ($Data(^MEDProviders(0, 20, pValorEntrada))) {
		Quit "Erro;-CPF já cadastrado. ("_pValorEntrada_")"
	}
	;
	Quit 1
	;	
ValidarLicProfissional(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo obrigatório para importação."
	New Existe
	$$$VAR
	If $Data(^INPARAs(0,1,$ZConvert(pValorEntrada,"U"),"MEDLICENSETYPE","PT")) {
		Quit 1
	}
	If $Data(^INPARA(0,"MEDLICENSETYPE","PT", $ZConvert(pValorEntrada,"U"))) {
		Quit 1
	}
	Quit "Erro;-Licença Profissional não cadastrada ("_pValorEntrada_")"
	;
ValidarConselho(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo obrigatório para importação."
	New Existe
	$$$VAR
	If $Data(^INPARAs(0,1,$ZConvert(pValorEntrada,"U"),"VARMEDCONSELHO","PT")) {
		Quit 1
	}
	If $Data(^INPARA(0,"VARMEDCONSELHO","PT", $ZConvert(pValorEntrada,"U"))) {
		Quit 1
	}
	Quit "Erro;-Conselho não cadastrado ("_pValorEntrada_")"
	;
ValidarEstado(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo obrigatório para importação."
	New Existe
	$$$VAR
	If '$Data(^WWW102(0,"BUNDESLAND","BR",$ZConvert(pValorEntrada,"U"))) {
		Quit "Erro;-Estado não cadastrado ("_pValorEntrada_")"
	}
	Quit 1
	;
ValidarNumeroConselho(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo obrigatório para importação."
	New Existe
	$$$VAR
	Quit 1
	;
ValidarCBO(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo CBO obrigatório para importação."
	New Existe
	$$$VAR
	If '$Data(^VARPARA(0,"CBO","PT",pValorEntrada)) {
		Quit "Erro;-CBO não cadastrado ("_pValorEntrada_")"
	}
	Quit 1
	;	
ValidarProfissional(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo Profissional obrigatório para importação."
	New Existe
	$$$VAR
	If '$Data(^MEDProvider(0,pValorEntrada)) {
		Quit "Erro;-Profissional não cadastrado ("_pValorEntrada_")"
	}
	Quit 1
	;								
ValidarGrupoAgendamentoUnidade(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo Unidade obrigatório para importação."
	New Existe
	$$$VAR
	If '$Data(^VARGrupoAgendamento(0,pValorEntrada)) {
		Quit "Erro;-Grupo de Agendamento não cadastrado ("_pValorEntrada_")"
	}
	Set xRegistro = $Piece(pRegistro,"~",2,$Length(pRegistro,"~"))
	Set codUnidade = $$$TempMEDProviderAgendaUnidade(xRegistro)
	If ($Data(^VARGrupoAgendamentoLocAtend(0,pValorEntrada))) {
		Quit "Erro;-Grupo de Agendamento inválido ("_pValorEntrada_")"
	}
	Quit 1
	;
ValidarSalaAtendimento(pValorEntrada="")
	If (pValorEntrada = "") Quit "Erro;-Campo Sala de Atendimento obrigatório para importação."
	New Existe
	$$$VAR
	If '$Data(^VARSalasAtendimentos(0,pValorEntrada)) {
		Quit "Erro;-Sala de Atendimento não cadastrada ("_pValorEntrada_")"
	}
	Set xRegistro = $Piece(pRegistro,"~",2,$Length(pRegistro,"~"))
	Set codUnidade = $$$TempMEDProviderAgendaUnidade(xRegistro)
	If ($$$VARSalasAtendimentosUnidade(^VARSalasAtendimentos(0,pValorEntrada,1)) '= codUnidade) {
		Quit "Erro;-Sala de Atendimento inválida para a unidade informada ("_codUnidade_"|"_pValorEntrada_")"
	}
	Quit 1
	;
ValidarCampoRepeticao(pValorEntrada="")
	If (pValorEntrada = "") Quit 1
	New Existe
	$$$VAR
	If (",N,D,S,M,"[(","_$ZConvert(pValorEntrada,"U")_",")) {
		Quit 1	
	}
	Quit "Erro;-Dados informado invalido. Opções aceitavel (N, D, S, M)"	
	;
	;
ValidarCampoNosDias(pValorEntrada="")
	If (pValorEntrada = "") Quit 1
	$$$VAR
	Set fCritica = 0
	For i = 1 : 1 : $Length(pValorEntrada,";") {
		If (",DOM,SEG,TER,QUA,QUI,SEX,SAB,"'[(","_$ZConvert($Piece(pValorEntrada,",",i),"U")_",")) {
			Set fCritica = 1
		}
	}
	If (fCritica = 0) Quit 1
	Quit "Erro;-Dados informado invalido. Opções aceitavel (DOM, SEG, TER, QUA, QUI, SEX, SAB)"_pValorEntrada	
	;
ValidarCategoriaHabilidade(pValorEntrada="")
	;Rotina para validar se o produto está cadastrado
	
	if (pValorEntrada="") {
		quit "Erro;-Categoria é obrigatório para importação."
	}
	
	new Existe
	
	$$$VAR
	set Existe = $D(^VARPARA(YM,"TIPOHABILIDADE","PT",pValorEntrada))
	if Existe {
		quit 1
	}
	else{
		quit "Erro;-Categoria não cadastrado ("_pValorEntrada_")"	
	}

	quit "Erro;-Validação de categoria não identificada ("_pValorEntrada_")"			

ValidarRHContratacao(pValorEntrada="")
	;Rotina para validar se o produto está cadastrado
	
	if (pValorEntrada="") {
		quit "Erro;-Contratação é obrigatório para importação."
	}
	
	new Existe
	
	$$$VAR
	set Existe = $D(^VARPARA(YM,"RHTIPOCONTRATACAO","PT",pValorEntrada))
	if Existe { quit 1
	}else{
		quit "Erro;-Contratação não cadastrado ("_pValorEntrada_")"	
	}

	quit "Erro;-Validação de Contratação não identificada ("_pValorEntrada_")"			


ValidarRHAlocacao(pValorEntrada="")
	;Rotina para validar se o produto está cadastrado
	
	if (pValorEntrada="") {
		quit "Erro;-Alocação é obrigatório para importação."
	}
	
	new Existe
	
	$$$VAR
	Set Existe = 1
	For count = 1:1:$L(pValorEntrada,",") {
		If ('$Data(^VARPARA(YM,"RHCLIENTES","PT",$Piece(pValorEntrada,",",count)))) {
			Set Existe = 0
			Quit
		}
	}
	If (Existe = 0) {
		Quit "Erro;-Alocação invalida ("_pValorEntrada_")"	
	}
	Quit 1
	quit "Erro;-Validação de Contratação não identificada ("_pValorEntrada_")"]]></Routine>
</Export>