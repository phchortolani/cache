<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWWLICENSEEncr" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
WWWLICENSEEncr
	;Alpha LEAN
	;Encripta licenças para cada cliente
	;--> Distribuir somente como OBJ
	;
	quit
	
	;CARLOS
	;Verifica se os logins podem ser habilitados
	;Se não puderem as sessões ativas serão retornadas para serem exibidas
	;namespace - Namespace onde os processos que serão contabilizados estão executando
	;
	;set ret = $$EnableLogin^WWWLICENSEEncr($zutil(5), .msg)
EnableLogin(namespace, msgExpiracao)

	new (namespace, msgExpiracao)
	
	if $get(namespace) = "" quit "Necessario informar namespace"
	if $get(namespace) '= $zutil(5) quit "Namespace informado não é o namespace corrente"

	set licencaExpirada = $$LicencaExpirada^WWWLICENSEEncr(namespace)
	if licencaExpirada < 0 set msgExpiracao = "Licença expirando em "_(diasExpiracao*-1)_" dias."
	
	;Se a licença não está expirada e o número de usuários ativos não atingiu o limite
	kill ^WWWLICENSE("log", $JOB)
	if 'licencaExpirada, $$LimiteLicenca^WWWLICENSEEncr(namespace) '< $$InUse^WWWLICENSEEncr(namespace) quit 1
	
	;Retorna um string com as sessões ativas
	set (sess, cont, ativos) = ""
	for  set sess = $order(^WWWLICENSE("log", $JOB, sess)) quit:sess=""  do
	. for  set cont = $order(^WWWLICENSE("log", $JOB, sess, cont)) quit:cont=""  do
	.. set ativos = ativos_^WWWLICENSE("log", $JOB, sess, cont)
	
	kill ^WWWLICENSE("log", $JOB)
	
	quit ativos
		
	// Carlos
	// Retorna a chave encriptada
Encripta(sigla, namespace, dataExpira, limiteUsuariosConcorrentes)

	new (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)
	
	if $get(sigla) = "" quit "Necessario informar sigla. (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(namespace) = "" quit "Necessario informar namespace. (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(namespace) '= $zutil(5) quit "Namespace informado não é o namespace corrente"
	if $get(dataExpira) = "" quit "Necessario informar data de expiração. (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(dataExpira)'?2N1"/"2N1"/"4N quit "Necessario informar data de expiração no formato dd/mm/aaaa."
	if $get(limiteUsuariosConcorrentes) = "" quit "Necessario informar o limite de usuários concorrentes. (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	
	set ^WWWLICENSE("keycode") = $$SetChave^WWWLICENSEEncr(sigla, namespace, dataExpira, limiteUsuariosConcorrentes)
	set ^WWWLICENSE("keycheck") = $$Hash^WWWLICENSEEncr(^WWWLICENSE("keycode"))
	
	quit 1
	
	// Carlos
	// Monta a chave concatenando os vários campos
SetChave(sigla, namespace, dataExpira, limiteUsuariosConcorrentes)

	new (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)
	
	if $get(sigla) = "" quit "Necessario informar sigla. (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(namespace) = "" quit "Necessario informar namespace. (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(namespace) '= $zutil(5) quit "Namespace informado não é o namespace corrente"
	if $get(dataExpira) = "" quit "Necessario informar data de expiração. (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(dataExpira)'?2N1"/"2N1"/"4N quit "Necessario informar data de expiração no formato dd/mm/aaaa."
	if $get(limiteUsuariosConcorrentes) = "" quit "Necessario informar o limite de usuários concorrentes. (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"

	set random = $random(17) + 1
	set sep1 = $extract("/*!.,\|][()}{+;:?", random, random)
	set random = $random(17) + 1
	set sep2 = $extract("/*!.,\|][()}{+;:?", random, random)
	set random = $random(17) + 1
	set sep3 = $extract("/*!.,\|][()}{+;:?", random, random)
	set chave = sigla_sep1_$zdh(dataExpira,4)_sep2_namespace_sep3_limiteUsuariosConcorrentes
	
	set origem =  "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	set destino = "YNUETBGSOQLKMCZAIWHRFXVPJD6835901274"

	quit $translate(chave, origem, destino)

	// Carlos
	// Monta a chave concatenando os vários campos
GetChave(namespace)

	new (namespace)
	
	if $get(namespace) = "" quit "Necessario informar namespace. (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(namespace) '= $zutil(5) quit "Namespace informado não é o namespace corrente"
	if '$data(^WWWLICENSE("keycode")) quit "Licença corrompida (chave keycode)"
	
	set chave = ^WWWLICENSE("keycode")
	
	set origem =  "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	set destino = "YNUETBGSOQLKMCZAIWHRFXVPJD6835901274"

	quit $translate(chave, destino, origem)
	
	// Carlos
	// Retorna o hash da chave encriptada
Hash(chave)

	new (chave)
	
	if $get(chave) = "" quit "Necessario informar a chave."
	
	quit $SYSTEM.Encryption.SHA1Hash(chave)
	
	;CARLOS
	;Desmembra a chave extraindo a data de expiração e o limite de conexões
DesmembraChave(namespace, dataExpira, limite)

	new (namespace, dataExpira, limite)
	
	if $get(namespace) = "" quit "Necessario informar o namespace."
	if $get(namespace) '= $zutil(5) quit "Namespace informado não é o namespace corrente"
	
	set chave = $$GetChave(namespace)
	set chave = $translate(chave, "/*!.,\|][()}{+;:?", ";;;;;;;;;;;;;;;;;")
	set dataExpira = $piece(chave, ";", 2)
	set limite = $piece(chave, ";", 4)
	
	quit 1

	;CARLOS
	;Retorna a quantidade de acessos concorrentes suportados pela licença
LimiteLicenca(namespace)

	new (namespace)
	
	if $get(namespace) = "" quit "Necessario informar o namespace."
	if $get(namespace) '= $zutil(5) quit "Namespace informado não é o namespace corrente"
	
	set (dataExpira, limite) = 0
	set ret = $$DesmembraChave^WWWLICENSEEncr(namespace, .dataExpira, .limite)
		
	quit limite

	;CARLOS
	;Verifica se a licença já está expirada
LicencaExpirada(namespace, dataExpira)

	new (namespace, dataExpira)

	if $get(namespace) = "" quit "Necessario informar o namespace."
	if $get(namespace) '= $zutil(5) quit "Namespace informado não é o namespace corrente"
	
	set (dataExpira, limite) = 0
	set ret = $$DesmembraChave^WWWLICENSEEncr(namespace, .dataExpira, .limite)
	
	;Verifica se a licença está próxima de expirar. Se sim retorna um valor negativo com o número de dias
	if (dataExpira - 15) < +$horolog quit ((dataExpira - +$horolog) *-1)
	
	if dataExpira < +$horolog quit 1
	
	quit 0

	;CARLOS
	;Verifica se a licença é válida e nenhuma de suas informações originais foi alterada
LicencaValida(namespace)

	new (namespace)

	if $get(namespace) = "" quit "Necessario informar namespace. (sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(namespace) '= $zutil(5) quit "Namespace informado não é o namespace corrente"

	if '$data(^WWWLICENSE("keycode")) quit "Licença corrompida (chave keycode)"
	if '$data(^WWWLICENSE("keycheck")) quit "Licença corrompida (hash keycheck)"
	
	set chaveRegistrada = ^WWWLICENSE("keycode")
	set chaveHashRegistrada = ^WWWLICENSE("keycheck")
	
	if chaveHashRegistrada '= $$Hash^WWWLICENSEEncr(chaveRegistrada) quit 0
	
	quit 1
	
	;CARLOS
	;Registra a chave do cliente
Registra(cliente, sigla, namespace, dataExpira, limiteUsuariosConcorrentes, usuario, senha)

	new (cliente, sigla, namespace, dataExpira, limiteUsuariosConcorrentes, usuario, senha)
	
	if $get(usuario) = "" quit "Necessario informar o usuario. (cliente, sigla, namespace, dataExpira, limiteUsuariosConcorrentes, usuario, senha)"
	if $zconvert( $get(usuario), "U") '= "ADMIN" quit "Usuario invalido"
	if '$data(^WWW013(0, $zconvert(usuario, "U"), 1)) quit "Usuario invalido"
	if $get(senha) = "" quit "Necessario informar a senha. (cliente, sigla, namespace, dataExpira, limiteUsuariosConcorrentes, usuario, senha)"
	
	set Y = "~"
	set YM = 0
	set senhaEncr = $$SET^WWWPWDCHECK(senha)
	set senhaUsu = $piece(^WWW013(0, $zconvert(usuario, "U"), 1), "~", 2)
	if senhaEncr '= senhaUsu quit "Senha invalida"
	
	if $get(cliente) = "" quit "Necessario informar cliente. (cliente, sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(sigla) = "" quit "Necessario informar sigla. (cliente, sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(namespace) = "" quit "Necessario informar namespace. (cliente, sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(namespace) '= $zutil(5) quit "Namespace informado não é o namespace corrente"
	if $get(dataExpira) = "" quit "Necessario informar data de expiração. (cliente, sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	if $get(dataExpira)'?2N1"/"2N1"/"4N quit "Necessario informar data de expiração no formato dd/mm/aaaa."
	if $get(limiteUsuariosConcorrentes) = "" quit "Necessario informar o limite de usuários concorrentes. (cliente, sigla, namespace, dataExpira, limiteUsuariosConcorrentes)"
	
	set ^WWWLICENSE("data","c") = cliente
	set ^WWWLICENSE("data","s") = sigla
	set ^WWWLICENSE("data","n") = namespace
	set ^WWWLICENSE("data","d") = dataExpira
	set ^WWWLICENSE("data","l") = limiteUsuariosConcorrentes

	set logRegistro = $zdt($h, 4, 1)
	set segRegistro = $piece(logRegistro, ":", 3)
	set chave = $$SetChave^WWWLICENSEEncr(sigla, namespace, dataExpira, limiteUsuariosConcorrentes)

	set ^WWWLICENSE("keycode") = chave
	set ^WWWLICENSE("keycheck") = $$Hash^WWWLICENSEEncr(chave)
	set ^WWWLICENSE("reg") = logRegistro
	
	quit 1
	
	;CARLOS
	;Retorna o número de sessões ativas em um determinado namespace de cliente
	;namespace - Namespace onde os processos que serão contabilizados estão executando
InUse(namespace, emUso)

	new (namespace, emUso)
	
	if $get(namespace) = "" quit "Necessario informar NAMESPACE"
	
	new arrSessions,idSession,intCount,dteLogin,tmeLogin,tmeActive,objSession
	kill ^CacheTempLicenseInfo
	
	;Somente funciona para processos CSP
	do GetActiveSessions^WWWUSER("^CacheTempLicenseInfo")  //do GetActiveSessions^WWWUSER(.arrSessions)
	
	set intCount = 0
	
	set idSession = "" for {
		set idSession = $order(^CacheTempLicenseInfo(idSession))
		
		quit:idSession=""
		quit:$listget(^CacheTempSession(idSession),2)'=namespace    // Namespace do cliente
		
		set intCount = intCount + 1

		set ^WWWLICENSE("log", $JOB, 0) = "alert(""<TABLE><TR><TH>Usuario</TH><TH>Endereco IP</TH><TH>Tempo de Atividade</TH></TR>"
		set emUso = emUso_"<script>function licInUse() { alert(""<TABLE><TR><TH>Usuario</TH><TH>Endereco IP</TH><TH>Tempo de Atividade</TH></TR>"
		
		if ($extract(idSession,1,2) '= "WS") {  // Sessões do AlphaSuite
			
			set user = $piece($get(^WWWUSER(0,idSession,1)), "~", 2)
			set IP = $listget(^CacheTempSession(idSession),4)
			
			if ($data(^CacheTempSessionStart(+$horolog,idSession))) {  //Login from today
				set dteLogin = +$listget(^CacheTempSessionStart(+$horolog,idSession),1)
				set tmeLogin = $piece($listget(^CacheTempSessionStart(+$horolog,idSession),1),",",2)
			} elseif ($data(^CacheTempSessionStart(($horolog-1),idSession))) {  //Login from yesterday
				set dteLogin = +$listget(^CacheTempSessionStart(($horolog-1),idSession),1)
				set tmeLogin = $piece($listget(^CacheTempSessionStart(($horolog-1),idSession),1),",",2)
			}
			if (dteLogin = +$horolog) {
				set tmeActive = $piece($horolog,",",2) - tmeLogin
			} elseif (dteLogin = ($horolog-1)) {
				set tmeActive = $piece($horolog,",",2) + (86400-tmeLogin)
			}
			
			set login = $$^WWWDATE(dteLogin)_" "_$$^WWWTIME(tmeLogin)
			set ativo = tmeActive_" ("_$$^WWWTIME(tmeActive)_")"
			
			set ^WWWLICENSE("log", $JOB, intCount) = "<TR><TD>"_user_"</TD><TD>"_IP_"</TD><TD>"_tmeActive_"</TD></TR>"
			set emUso = emUso_"<TR><TD>"_user_"</TD><TD>"_IP_"</TD><TD>"_$zt(tmeActive,1)_"</TD></TR>"
			
		}
		
	}
	
	set ^WWWLICENSE("log", $JOB, intCount + 1) = "</TABLE>"");} </script>"
	set emUso = emUso_"</TABLE>"");} </script>"
		
	kill ^CacheTempLicenseInfo
	
	quit intCount
	
	;CARLOS
	;Retorna o número de sessões ativas em um determinado namespace de cliente
	;namespace - Namespace onde os processos que serão contabilizados estão executando
InUseArray(namespace,&emUso)

	new (namespace, emUso)
	
	if $get(namespace) = "" quit "Necessario informar NAMESPACE"
	
	new arrSessions,idSession,intCount,dteLogin,tmeLogin,tmeActive,objSession
	kill ^CacheTempLicenseInfo
	
	;Somente funciona para processos CSP
	do GetActiveSessions^WWWUSER("^CacheTempLicenseInfo")  //do GetActiveSessions^WWWUSER(.arrSessions)
	
	set intCount = 0
	
	set idSession = "" 
	
	for {
		set idSession = $order(^CacheTempLicenseInfo(idSession))
		
		quit:idSession=""
		quit:$listget(^CacheTempSession(idSession),2)'=namespace    // Namespace do cliente
		
		set intCount = intCount + 1
		
		set ^WWWLICENSE("log", $JOB, 0) = "alert(""<TABLE><TR><TH>Usuario</TH><TH>Endereco IP</TH><TH>Tempo de Atividade</TH></TR>"
		
		if ($extract(idSession,1,2) '= "WS") {  // Sessões do AlphaSuite
			
			set user = $piece($get(^WWWUSER(0,idSession,1)), "~", 2)
			set IP = $listget(^CacheTempSession(idSession),4)
			
			if ($data(^CacheTempSessionStart(+$horolog,idSession))) {  //Login from today
				set dteLogin = +$listget(^CacheTempSessionStart(+$horolog,idSession),1)
				set tmeLogin = $piece($listget(^CacheTempSessionStart(+$horolog,idSession),1),",",2)
			} elseif ($data(^CacheTempSessionStart(($horolog-1),idSession))) {  //Login from yesterday
				set dteLogin = +$listget(^CacheTempSessionStart(($horolog-1),idSession),1)
				set tmeLogin = $piece($listget(^CacheTempSessionStart(($horolog-1),idSession),1),",",2)
			}
			if (dteLogin = +$horolog) {
				set tmeActive = $piece($horolog,",",2) - tmeLogin
			} elseif (dteLogin = ($horolog-1)) {
				set tmeActive = $piece($horolog,",",2) + (86400-tmeLogin)
			}
			
			set login = $$^WWWDATE(dteLogin)_" "_$$^WWWTIME(tmeLogin)
			set ativo = tmeActive_" ("_$$^WWWTIME(tmeActive)_")"
			
			set ^WWWLICENSE("log", $JOB, intCount) = "<TR><TD>"_user_"</TD><TD>"_IP_"</TD><TD>"_tmeActive_"</TD></TR>"
			set emUso = emUso_$listbuild($listbuild(user,IP,$zt(tmeActive,1)))
		}
		
	}
	set ^WWWLICENSE("log", $JOB, intCount + 1) = "</TABLE>"");} </script>"	
	kill ^CacheTempLicenseInfo
	
	quit intCount
	
NomeCliente()

	if '$data(^WWWLICENSE("data","c")) quit "Alpha LEAN - DEMO"
	
	quit $get(^WWWLICENSE("data","c"))
]]></Routine>
</Export>