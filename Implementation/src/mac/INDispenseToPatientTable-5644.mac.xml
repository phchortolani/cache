<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INDispenseToPatientTable" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INDispenseToPatientTable
	
#include COMSYS
#include INConst
#include MEDConst
#include %occInclude
	
#define DELIM	$char(31)
	
ShowItems(pidEvent,pidParameters)
	;-------------------------------------------------------------------------------
	; Description :
	;			
	; Called By : OnBlur^INDispenseToPatientLine
	;             Form : INDispenseToPatient dynamic table - COMMENTED
	;		
	; Inputs : 
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 13-Oct-2010	PPP		SR17566: Language Text
	; 07-Sep-2010	PPP		SR17494: Added new parameter #9 to DrawTable^WWW120DynTable
	;						AutoSelection = $$$YES
	; 01-Dec-2009	GRF		SR17007: separate tags for multi-lock operations
	; 04-Nov-2009	GRF		SR17007: Pass keys to GetLock^WWWMultiLock not records
	; 01-Jun-2009	PPP		SR16599: Add Row highlight & click functionality
	; 23-Jan-2009	DavidR	SR16303 copied from INMOVTable
	;-------------------------------------------------------------------------------
	new idGrid,idItem,lstColTypes,lstHeaders,idKey,idLine,idRelocate
	new objItem,objItemPolicy,objLocn,objMov,objMovLine,strFunction,strStatus
	
	if ($get(YBED) '= ""){
		set blnHideDynaGrid = $$$NO
		
		set objUser = $get(^WWW013(YM,$get(YBED),1))
		set objSetup = $get(^MEDPrescriptionSetup(YM,YM,1))
		
		set userProfiles = $$$WWW013UserAccess(objUser)
		set forcedProfiles = $$$MEDPrescriptionSetupForceUsePickedLot(objSetup)
		
		for cnt = 1:1:$length(userProfiles,";") {
			set profile = $piece(userProfiles,";",cnt)

			for cnt2 = 1:1:$length(forcedProfiles,";") {
				set forcedProfile = $piece(forcedProfiles,";",cnt2)
				
				if (profile = forcedProfile){
					set blnHideDynaGrid = $$$YES
					quit
				}
			}
			
			quit:blnHideDynaGrid
		}
		
		quit:((blnHideDynaGrid)&&(forcedProfiles'="")) $$$OK
	}
	 
	set strStatus = $$$OK
	set idGrid    = $$$DYNTABLEGridLineFocusGrid(pidParameters)            
	
	kill ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle")

	set idKey      = $$ReferenceKey^COMGridEdit31Interface(idGrid,$$$DYNTABLEGridLineFocusRow(pidParameters))
	set idRelocate = $$$KEY1(idKey)
	set idLine     = $$$KEY2(idKey)
	
	if '$$Editable^INDispenseToPatient(idRelocate) quit                       ; *** EARLY EXIT ***
	                      
	set objMov     = $$$GRIDYFELDContainer
	set objMovLine = $$$GRIDGetYFELD(idLine)
	;set strRelocate     = $$$GRIDYFELDContainer
	;set strRelocateLine = $$$GRIDGetYFELD(idLine)
	;set strStatus       = $$GetLock^WWWMultiLock("INDispenseToPatient",idGrid,strRelocate_$$$COMMA_strRelocateLine,$$$NO)  ; SR17007
	set strStatus  = $$GetLock^WWWMultiLock("INDispenseToPatient",idGrid,idRelocate_$$$COMMA_idLine)
	
	; setup JS Callback
	set idLocn  = $$$INIssueFromLocn(objMov)
	set objLocn = ##class(alLOC.dLocation).%OpenId(idLocn)
	set idItem  = $$$INIssueLineItem(objMovLine)
	set objItem = ##class(alINV.dItem).%OpenId(idItem,0)
	
	if objItem '= $$$NULLOREF {
		set objItemPolicy = objItem.ItemPolicy
		
		if objItemPolicy = $$$NULLOREF {     
			set strStatus = $$$MakeStatus("alINV0100",idItem) ; "Can not access Item Policy for item : %1"
			do DrawTable^WWW120DynTable($listbuild($$$Text(strStatus)),"dStockBundle",$listbuild($listbuild("left","display")),
			                            pidParameters,"",pidEvent)
		}                                      
		
		; Build Table below Dispense To Patient (Issue) grid lines (allows selection)
		;-----------------------------------   e.g.
		;  Stock Bundle              Storage         Lot Number
		;  ABC00123||5||A||2||86     A               1234567
		
		if $$$ISOK(strStatus) {      
			set strFunction = "FillLine"
			set strStatus   = $$BuildDynTableHeader(objItemPolicy,.lstHeaders,.lstColTypes,idLocn)
			do BuildDynTableRows(objItem.%Id(),objLocn.Code,$$$INIssueLineFromStorage(objMovLine))
		
		; setup JS Callback
			if $$$ISERR(strStatus) {
				write "function "_strFunction_"() {"
				write "alert('"_$$$JSText($$$Text(strStatus))_"');"
				write "}"
			} else {
				write "function "_strFunction_"() {"
				write "CallBack(""SelectBundle^INDispenseToPatientTable"", getRowNum(getFocusField()), this.DiscData[0]);"
				write "}"
			}
			
			//SR16599
			//The last parameter (after pidEvent) needs to be set for the RowClick event, will be used by RowClick^WWW120DynTable
			//	e.g. "WarehouseLine^INReqTable"
			//	will be called with the following parameters
			//	1. Row ID
			//	2. Each entry in ^CacheTempDynamicTable(...,data) separated by "~" will be a new parameter
			//			in this routines case : do WarehouseLine^INReqTable(pidRow,idLocn) will be executed on Row click
			//SR17494 - Added new parameter #9 - AutoSelection = $$$YES
			do DrawTable^WWW120DynTable(lstHeaders,"dStockBundle",lstColTypes,
			                            pidParameters,strFunction,pidEvent,
			                            "SelectBundle^INDispenseToPatientTable","",$$$YES)
		}
		
	} else {         ; Clear table  "No Item Selected"   SR17566
		do DrawTable^WWW120DynTable($listbuild($$$Text("IN01142")),
		                            "dStockBundle",
		                            $listbuild($listbuild("left","display")),
		                            pidParameters,
		                            "",
		                            pidEvent)
	}
	quit $$$OK
	
	
SelectBundle(pidRow,pidKey)
	;-------------------------------------------------------------------------------
	; History:
	; 01-Mar-2011	shobby	SR17600: Removed duplicate variable 'new'
	; 09-Nov-2010	PPP		SR17600: New variables and set values for both
	; 03-Nov-2010	GRF		SR17494: Add IssueTo to new list - see WARNING
	; 29-Oct-2010	PPP		SR17494: Added IssueTo, also required for relationship
	;							check in Grids
	; 27-Jan-2009	DavidR	SR16303: Copied
	;-------------------------------------------------------------------------------
	new idBundle,idStore,IssuedFrom,IssueTo,objBundleStock,objIssue,objIssueLine,sc
	
	; FIXME : LOCATION?  others not used like objMovLine
		
	set sc = $$$OK
	set objIssue   = $$$GRIDYFELDContainer
	set IssuedFrom = $$$INIssueFromLocn(objIssue)
	set IssueTo    = $$$INIssueToLocn(objIssue)		//SR17494
	; WARNING : "IssuedFrom" & "IssueTo" are required for relationship check
	;           for D4 & D3 respectively of Class INIssueLine on form INDispenseToPatientLine
	;           ReferenceKey^COMGridEdit31Interface in SetRecord^COMGridEdit31S1
	
	set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(pidKey,0,.sc)
	if $$$ISOK(sc) {
		set idStore  = objBundleStock.Storage.Code
		set idBundle = objBundleStock.Bundle.%Id()
		do SetRecord^COMGridEdit31S1("INIssueLine",pidRow,$$$FldINIssueLineFromStorage_$$$COMMA_idStore)
		do SetRecord^COMGridEdit31S1("INIssueLine",pidRow,$$$FldINIssueLineBundle_$$$COMMA_idBundle)
	}
	quit
	
	
BuildDynTableHeader(pobjItemPolicy,&plstHeaders,&plstColTypes,pidLoc)
	;-------------------------------------------------------------------------------
	; Setup Table Headers
	; StockBundleId, BundleAttribute(s), QoH
	;         (1)               (2)                  (3)
	;     "Storage"     Attribute Headings       "QtyOnHand"
	;                   (e.g. "Lot Number")       
	; 
	; History:
	; 03-Feb-2009	DavidR  SR16303: copied and modified from INMOVTable
	; 21-Jan-2009	GRF		SR16317: Revise "Bundle" display - hide internal and
	; 							change name; prefixes
	; 12-May-2008	Luke 	SR15722: added translations for QtyOnHand
	; 08-May-2008	Luke 	SR15722: added translations for Storage and "Stock Bundle" 
	; 06-May-2008	Luke	SR15713 Copied from INIssueTable
	;-------------------------------------------------------------------------------
	new idAttrKey,objAttr,strAttrName
	
	;---------------------------------------  1
	
	set plstHeaders  = $listbuild($$$Text("alISS0003"))       ; "Storage"
	set plstColTypes = $listbuild($listbuild("left","link"))
	
	;---------------------------------------  2
	
	do DynaHeadings^INBundleUtils(pobjItemPolicy,pidLoc,.plstHeaders,.plstColTypes)
	
	;---------------------------------------  3     Append QOH Header
	
	set plstHeaders  = plstHeaders_$listbuild($$$Text("alISS0005"))          ; "QtyOnHand"
 	set plstColTypes = plstColTypes_$listbuild($listbuild("right","link"))
 	
	quit $$$OK
	
	
BuildDynTableRows(pidItem,pidLocn,pidStore)
	;-------------------------------------------------------------------------------
	; Build an array "^CacheTempDynamicTable" which contains the lines corresponding
	; to the headings in BuildDynTableHeader
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 23-Sep-2013	shobby	UFH-11.16: Cache2010 requires CodeWithTSUGet() to have the brackets.
	; 18-Apr-2013	shobby	HEVA-154.1: Display descriptions in Dynatable
	; 13-Oct-2010	shobby	SR17541: Redirect SQL query to new one that recognises TSU
	; 19-Aug-2010	PPP		SR17461/1: Moved the alert below to OnBlur^INDispenseToPatientLine
 	; 20-Jul-2010   PAG     SR17461: Alert the user when there is no stock available
 	; 10-Feb-2010	PPP		SR17169: Ignore Blocked Storages
	; 15-May-2009	PPP		SR16540: Check for Expired Products
	; 20-Feb-2009	GRF		SR16303: Potential for objPolicyAttr to be held over
	; 							from previous cycle of for loop when not defined.
	; 03-Feb-2009	DavidR  SR16303: copied and modified from INMOVTable
	; 21-Jan-2009	GRF		SR16317: Revise "Bundle" display; cleanup old comments;
	; 							correct prefixes
	; 04-Sep-2008	GRF		SR15804: Use WWWDATE rather than $zdate
	; 09-May-2008	HQN		SR15728: Ignore dStockBundles that are completely sourced
	; 06-May-2008	Luke	SR15713: Copied from INIssueTable
	;
	; FIXME: Validation of result table against headers
	;-------------------------------------------------------------------------------
	new arrBundleStock,dteVal,fltQtyAvailable,idBundleStock,idLine,idKey,idPolicyAttr
	new objAttr,objBundleStock,objINIssueLine,objItem,objLocn,objItemPolicy
	new objPolicyAttr,objResultSet,objStore,strAttrValues
	
	set objItem  = ##class(alINV.iUINV).GetItem(pidItem)
	set objLocn  = ##class(alLOC.iULOC).GetLocation(pidLocn)
	;set objStore = ##class(alLOC.iLOC).GetStorage(pidLocn,pidStore)
	
	if (objItem '= $$$NULLOREF) && (objLocn '= $$$NULLOREF) {
		kill ^CacheTempDynamicTable(YUCI,YUSER,"dBundleStock")
		set objItemPolicy = objItem.ItemPolicy
		
 		; Find and merge dBundleStock entries on screen
 		set idLine = ""
 		kill arrBundleStock
 		for {
	 		set idLine = $order(^WWWDATEN(YM,+$horolog,YUSER,"INDispenseToPatientLine","V","REFERENCEROW",idLine)) ;<<<CHECK IF ERROR could be INIssueLine>>>>>
	 		quit:(idLine = "")
	 		
	 		set objINIssueLine = $$$GRIDGetYFELD(idLine)
	 		continue:($$$INIssueLineItem(objINIssueLine) = "")
	 		continue:($$$INIssueLineFromStorage(objINIssueLine) = "")
	 		continue:($$$INIssueLineBundle(objINIssueLine) = "")
	 		continue:($data(^WWWDATEN(YM,+$horolog,YUSER,"INIssueLine","V","KILLEDRECORD",idLine))) ; Ignore values inside killed records
	 		
	 		set idBundleStock = $$$INIssueLineItem(objINIssueLine)_"||"_$$$INIssueFromLocn($$$GRIDYFELDContainer)_"||"_$$$INIssueLineFromStorage(objINIssueLine)_"||"_$$$INIssueLineBundle(objINIssueLine)
	 		set arrBundleStock(idBundleStock) = $get(arrBundleStock(idBundleStock)) + $$$INIssueLineQtyRequired(objINIssueLine)
 		}
 		
 		; FIXME: HQN Should this actually show sourcing sequence?
		; Retrieve Records
	;SR17541 set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetViaLocation")
		set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetViaLocationOrderByTSU")		;SR17541
		if objResultSet.Execute(objItem.%Id(),objLocn.%Id()) {
			set idLine = 0
			while objResultSet.Next() {
				set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(objResultSet.Data("ID"))
				
				continue:objBundleStock.Storage.StorageIsBlocked     //SR17169 - Ignore blocked Storages
				
				set dteVal = objBundleStock.Bundle.UseByDate
				if dteVal'="" {
					continue:(dteVal < $horolog)
				}
				continue:($get(arrBundleStock(objBundleStock.%Id())) >= objBundleStock.QtyOnHand)
				set fltQtyAvailable = objBundleStock.QtyOnHand-$$GetQtyPlanned(objBundleStock.Item.%Id(),objBundleStock.Storage.Location.%Id(),objBundleStock.Storage.%Id(),objBundleStock.Bundle.%Id())
				continue:(fltQtyAvailable<=0)
				
				if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
					
					;seta o YPARA do INDispenseToPatientLine igual a do INDispenseToPatient
					set YPARA = $piece($get(^WWWDATEN(YM,$$$KEY1($horolog),YUSER,$$$GRIDContainer,"D",1)),"~",24)

					;Alteração VAR para que o paciente da Farmácia de Ações Judidicias
					;NÃO CONSIGA retirar medicamentos que estão em endereços de outros pacientes

					if (YLOCATION = $$getFarmaciaAcoesJudiciais^VARParametroCliente(0)){
						;Pega o objeto PAI da Grid
						set objDispensacao = $$$GRIDYFELDContainer
			
						;Compara o Endereço de estoque com o código do Paciente, 
						;se for diferente "continua".
						continue:(objBundleStock.Storage.Code'=$$$INIssueCustomerName(objDispensacao))
					}
				}
				
				set ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle",$increment(idLine),"data") = objBundleStock.%Id()
			
			;-------------------------------  1
			
				set strAttrValues=""
	;SR17541	set strAttrValues = objBundleStock.Storage.Code_Y
				if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
					if (YLOCATION = $$getFarmaciaAcoesJudiciais^VARParametroCliente(0)){
						set strAttrValues = strAttrValues_"("_objBundleStock.Storage.CodeWithTSUGet()_") "_$$SQLGetPatientName^VARSQL(objBundleStock.Storage.CodeWithTSUGet)_Y	;SR17541  ;UFH-11.16
					}else{
						set strAttrValues = strAttrValues_objBundleStock.Storage.CodeWithTSUGet()_Y	;SR17541 ;UFH-11.16
					}
				}else{
					set strAttrValues = strAttrValues_objBundleStock.Storage.CodeWithTSUGet()_Y	;SR17541  ;UFH-11.16
				}
			
			;-------------------------------  2
				set strAttrValues=strAttrValues_$$BundleAttributes2^INBundleUtils(objBundleStock) ;HEVA-154.1
			;-------------------------------  3
			
				set strAttrValues = strAttrValues_fltQtyAvailable
				set ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle",idLine) = strAttrValues
			}
			if ((+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1))))
				&& '(+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1))))) {
				// SR17461 vvv
				if (('idLine) && ('$data(arrBundleStock))) {
					$$$Alert($lb("IN01040",pidItem,pidLocn))  //Stock Unavailable for Item %1 at Location %2
				}
				// SR17461 ^^^
			}
	      	//if 'idLine $$$Alert($listbuild("IN01040",pidItem,pidLocn)) ; SR17461,SR17461/1
	      	//; "Stock Unavailable for Item %1 at Location %2"
		}
	}
	quit
	
	
GetQtyPlanned(pidItem,pidLocn,pidStore,pidBundle)
	;-------------------------------------------------------------------------------
	; Arguments:
	; 	pidItem		dItem.%Id()
	; 	pidLocn		dLocation.%Id()
	; 	pidStore	dStorage.%Id()
	; 	pidBundle	dBundle.%Id()
	;
	; Returns: 
	; 	Quantity planned for this dBundleStock
	; 
	; NOTES: DIRECT ACCESS INTO alDRP tables...consider refactor into iDRP
	; 
	; History:
	; 03-Feb-2009	DavidR  SR16303: copied and modified from INMOVTable
	; 17-Oct-2008 	HQN 	SR16045: Created
	;-------------------------------------------------------------------------------
	new fltQtyPlanned,SQLCODE
	
	set fltQtyPlanned = 0
	&sql(SELECT SUM(IFNULL(QtyRequired,0,QtyRequired)) into :fltQtyPlanned 
		FROM alDRP.dPlannedMovement
		WHERE
			Item=:pidItem                  AND
			FromStorage->Location=:pidLocn AND
			FromStorage=:pidStore          AND
			Bundle=:pidBundle
	)
	quit fltQtyPlanned
	
]]></Routine>
</Export>