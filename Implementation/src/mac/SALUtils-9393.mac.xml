<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="SALUtils" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
SALUtils
	;-------------------------------------------------------------------------------
	; History:
	; 23-Feb-2005	GRF		Use Macros for boolean values
	;-------------------------------------------------------------------------------
		
#include SALCST
#include COMConst
	
Round(pfltAmount,pRoundType=$$$EnumSALROUNDINGAMOUNTCent)
	;-------------------------------------------------------------------------------
	; Rounds according to the type in SALROUNDINGAMOUNT
	;
	; Returns:Float
	;
	; History:
	; 23-Feb-2005	GRF		Avoid 0.0
	; 18-Apr-2004	Paul K	Created
	;-------------------------------------------------------------------------------
    if pRoundType=$$$EnumSALROUNDINGAMOUNTCent {
	    set pfltAmount=+$justify(pfltAmount,0,2)
    } elseif pRoundType=$$$EnumSALROUNDINGAMOUNT5Cents {
	    set pfltAmount=$justify(pfltAmount/0.05,0,0)*0.05
    } elseif pRoundType=$$$EnumSALROUNDINGAMOUNT10Cents {
	    set pfltAmount=+$justify(pfltAmount,0,1)
    } elseif pRoundType=$$$EnumSALROUNDINGAMOUNT50Cents {
	    set pfltAmount=$justify(pfltAmount/0.5,0,0)*0.5
    } elseif pRoundType=$$$EnumSALROUNDINGAMOUNTDollar {
	    set pfltAmount=$justify(pfltAmount,0,0)
    } elseif pRoundType=$$$EnumSALROUNDINGAMOUNT5Dollars {
	    set pfltAmount=$justify(pfltAmount/5,0,0)*5
    }
	quit pfltAmount
	
Kill(pstrClass,pidKey)  ;Keep - Used by Macros.
	;-------------------------------------------------------------------------------
	; Wrapper for Kill. Used by $$$Kill
	;
	; Returns:Status
	;
	; History:
	; 19-Oct-2006	JW		SR15134: Look at kill status
	; 02-Feb-2004	Paul K	Created
	;-------------------------------------------------------------------------------
	new strStatus,YFORM
	
	; TODO : Consider standard code in COMUtilClass - doesn't return status though
	
	set strStatus=1
	if pstrClass'="" {
		if '$data(^WWW001(0,pstrClass,1)) {
			set strStatus=$listbuild("SALCST0266",pstrClass)  ;Class '%1' does not exist.
		} else {
			set YFORM=pstrClass
			set strStatus = $$^WWWKILL(pstrClass,pidKey)		//SR15134
		}
	} else {
		set strStatus=$listbuild("SALCST0267")  ;No class for kill.
	}
	quit strStatus
	
Replace(pstrSource,strFrom,strTo)
	;-------------------------------------------------------------------------------
	;
	;         U S E   R e p l a c e ^ C O M U t i l S t r   I N S T E A D
	;
	;-------------------------------------------------------------------------------
	; Replaces one string with another in a string.
	; 
	; Note: will not replace if the 'to' string string contains the 'from' string.
	; 
	; Returns:String
	;
	; History:
	; 09-Jan-2004	Paul K	Commented
	;-------------------------------------------------------------------------------
	for {
		quit:$find(strTo,strFrom)
		quit:'$find(pstrSource,strFrom)
		
		set pstrSource=$piece(pstrSource,strFrom,1)_strTo_$piece(pstrSource,strFrom,2,999)
	}
	quit pstrSource
	
Save(pCompany,pstrForm,pidKey1,pidKey2,pidKey3,pidKey4,pidKey5,pidKey6,pidKey7)  ;Keep - Used By Macros
	;-------------------------------------------------------------------------------
	; Wrapper for WWWSPEI. Also checks the Class exists, and the correct number
	; of primary keys are passed in.
	; 
	; **************************************
	;               ALERT
	;   The *LAST* pidKey parameter used is
	;   treated as objData.  Better to use
	;   $$$Save with keys as comma-delimited
	;   string and explicit object.
	; **************************************
	; 
	; example : Use set status=$$Save("FINGLAccount","123.003.4","Sale Account")
	; 
	; Note : Used via $$$SaveGlobal
	;
	; History:
	; 03-May-2004	shobby	Replaced YKOMMA with ","
	; 01-Dec-2003	Paul K	Added Note
	; 24-Jun-2003	Paul K	If intraprend doesn't return a success, set
	; 						status to listbuild.
	; 16-Jun-2003	Paul K	Logic error looking to see if class existed.
	;-------------------------------------------------------------------------------
	
	; TODO : Consider standard code in COMUtilClass - different considerations though
	
	new idKey,Key,lngDataPiece,lngKey,lngKeysForClass,lngNumPrimaryKeys,strData
	new strStatus,YFORM,YM
	
	if pstrForm'="" {
		set YM=pCompany
		set YFORM=pstrForm
		if $data(^WWW001(0,YFORM,1)) {
			;look throught the passed in variables and use indirection to determine the last passed in one.
			for lngDataPiece=1:1 {
				set idKey="pidKey"_lngDataPiece
				quit:'$data(@idKey)
			}
			
			; we found out the piece that doesn't exist, so the previous piece contains the data.
			set lngDataPiece      = lngDataPiece-1
			set lngNumPrimaryKeys = lngDataPiece-1
			set lngKeysForClass   = $order(^WWW002(0,YFORM,""),-1)
			if lngKeysForClass=lngNumPrimaryKeys {  ;check with class to make sure correct number of primary keys.
				set Key=pidKey1
				for lngKey=2:1:lngNumPrimaryKeys {  ;build up the primary key
					set idKey = "pidKey"_lngKey
					set Key   = Key_","_@idKey
				}
				set idKey     = "pidKey"_lngDataPiece   ;get the data
				set strData   = @idKey
				set strStatus = $$^WWWSPEI(YFORM,Key,strData,1)
				if strStatus'=$$$OK set strStatus=$listbuild("Com00078",YFORM,strStatus)  ; Save failed for class %1. Intraprend returned status %2
			} else {
				set strStatus=$listbuild("Com00069",YFORM,lngKeysForClass,lngNumPrimaryKeys)  ; Save failed. Class %1 has %2 primary keys, Save passed in %3
			}
		} else {
			set strStatus=$listbuild("Com00068",YFORM)  ; Save failed. Class %1 does not exist
		}
	} else {
		set strStatus=$listbuild("Com00067")  ; Save failed. No Class.
	}
	quit strStatus
	
DCMEnum(pstrParamName,LANGUAGE,pidRef,pstrText="",pstrColour)
	;-------------------------------------------------------------------------------
	; Price Codes and Categories come in from a global called ^INPARA.
	; We save them in SALPriceCode and SALCategory respectively.
	;
	; Called by DCM Event/Method : INPARASave/SALPARASave
	; 
	; Returns:DCM Status (1 or 0_Y_Error Message)
	;
	; History:
	; 28-Nov-2006	JW		BR014285: Item Group no longer a user parameter
	; 22-Mar-2005	RobertW	SR10731: Added ReasonCode saving for User Parameters.
	; 01-Dec-2003	Paul K	Commented
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus=$$$OK
	if LANGUAGE="EN" {  ;FIXME should work for other languages
		if pstrParamName="PREISKENNZEICHEN" {   ;Price Codes
			set strStatus=$$SavePriceCode^SALPrice(pidRef,pstrText)
		//} elseif pstrParamName="WARENGRUPPE" {	;Group	BR014285
		//	set strStatus=$$SaveGroup^SALCategory(pidRef,pstrText)
		} elseif pstrParamName="SORTIMENT" {	;Categories
			set strStatus=$$SaveCategory^SALCategory(pidRef,pstrText)
		} elseif pstrParamName="VERURSACHER" {  ; Reason Codes SR10731
			set strStatus=$$SaveReasonCode^SALReasonCode(pidRef,pstrText)
		}
	}	
	if strStatus'=$$$OK set strStatus=0_Y_$$$Text(strStatus)
	quit strStatus
	
DCMEnumDelete(pstrParamName,LANGUAGE,pidRef)
	;-------------------------------------------------------------------------------
	; Price Codes and Categories/Groups come in from a global called ^INPARA.
	; We save them in SALPriceCode,SALGroup and SALCategory respectively.
	;
	; Called by DCM Event/Method : INPARADelete/SALEnumDelete
	; 
	; Returns:DCM Status (1 or 0_Y_Error Message)
	;
	; History:
	; 28-Nov-2006	JW		BR014285: Item Group no longer a user parameter
	; 01-Apr-2005	RobertW	SR10731: Added ReasonCode saving for User Parameters.
	; 01-Dec-2003	Paul K	Commented
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus=$$$OK
	if LANGUAGE="EN" {  ;FIXME should work for other languages
		if pstrParamName="PREISKENNZEICHEN" {   ;Price Codes
			set strStatus=$$DeletePriceCode^SALPrice(pidRef)
		//} elseif pstrParamName="WARENGRUPPE" {	;Group	BR014285
		//	set strStatus=$$DeleteGroup^SALCategory(pidRef)
		} elseif pstrParamName="SORTIMENT" {	;Categories
			set strStatus=$$DeleteCategory^SALCategory(pidRef)
		} elseif pstrParamName="VERURSACHER" { ; Reason Code SR10731
			set strStatus=$$DeleteReasonCode^SALReasonCode(pidRef)
		}
	}
	if strStatus'=$$$OK set strStatus=0_Y_$$$Text(strStatus)
	quit strStatus
	
Trim(String)
	;-------------------------------------------------------------------------------
	; Routine to remove leading spaces
	; 
	; History:
	; 12-Aug-2004	Paul K	Replaced with $zstrip
	;-------------------------------------------------------------------------------
	
	;  WARNING : Calling this routine from another routine takes 10-12 times
	;            longer than using the function directly
	;            
	;  FIXME   : Why even use this? Use $$$TRIMWS macros. No function call that way!!
	
	quit $zstrip(String,"<W")
	
GetProperCase(pstrText)
	;-------------------------------------------------------------------------------
	; Sets All Words to Proper Case
	;
	; Returns:
	;
	; History:
	; 01-Dec-2003	Paul K	Created
	;-------------------------------------------------------------------------------
    
    ; SEE : Proper^COMUtilStr
    
    new intPosition,strCase
    
	set strCase="u"
	for intPosition=1:1:$length(pstrText) {
		if $find(" -./%_",$extract(pstrText,intPosition)) {
			set strCase="u"
		} else {
			set pstrText=$extract(pstrText,1,intPosition-1)_$zcvt($e(pstrText,intPosition),strCase)_$extract(pstrText,intPosition+1,$length(pstrText))
			set strCase="l"
		}
	}
	quit pstrText
	
GetArrayStructure(pstrDataLocation,pArray,pstrDCMEvent="")
	;-------------------------------------------------------------------------------
	; Pulls apart the DCM Site-Event-Method... structure and puts it into 
	; passed in "pArray" parameter. Assumes all nodes coming in have been 
	; converted to "URL" format. (This routine "unconverts" them)
	; Also assumes first node to be "<Result>"
	;
	; Returns:DCM Status(1 or 0_Y_Error Message)
	;
	; History:
	; 08-Jan-2004	Paul K	Added Generation of error if there is no data 
	; 						returned from routine.
	; 02-Dec-2003	Paul K	Created
	;-------------------------------------------------------------------------------
	new Event,Method,Site,strArrayLoop,strData,strStatus
    
    kill pArray
    set pArray=""
	set strStatus = $piece(pstrDataLocation,Y,1)
	set strData   = $piece(pstrDataLocation,Y,2)
	if strStatus {
		if strData'="" {
			set Event=""
		 	for {
		  		set Event=$order(@strData@(Event))
		  		quit:Event=""
		  		
		  		set Method=""
		  		for {
					set Method=$order(@strData@(Event,Method))
		   			quit:Method=""
		   			
		   			set Site=""
		   			for {
		    			set Site=$order(@strData@(Event,Method,Site))
		    			quit:Site=""
		    			
		    			merge pArray=@strData@(Event,Method,Site,"Result",1)
		   			}
		  		}
		 	}
		} else {
			set strStatus=$$$NO_Y_$$$Text($listbuild("SALCST0103",pstrDCMEvent))  ;Data not returned from DCM. Check Setup for %1
		}	
	} else {
		set strStatus=$zcvt(pstrDataLocation,"I","JS")
	}
	
	if $data(pArray)=1 set pArray=$zcvt(pArray,"I","URL")
	set strArrayLoop="pArray("""")"
	for {
		set strArrayLoop=$query(@strArrayLoop)
		quit:strArrayLoop=""
		
		set @strArrayLoop=$zcvt(@strArrayLoop,"I","URL")
	}
	quit strStatus
	
FindProperty(Property,Module)  ;Keep - Run from terminal
	;-------------------------------------------------------------------------------
	; Look through the data fields for a particular property (eg minimum order quantity)
	;
	; History:
	; 05-Dec-2003	Paul K	Created
	;-------------------------------------------------------------------------------
    new idClass,idField,objField
    
    set idClass=""
    if Module'="" set idClass=$order(^WWW003(0,Module),-1)
    for {
	    set idClass=$order(^WWW003(0,idClass))
	    quit:idClass=""
	    quit:$extract(idClass,1,$length(Module))'=Module
	    
	    set idField=""
	    for {
		    set idField=$order(^WWW003(0,idClass,idField))
	    	quit:idField=""
	    	
	    	set objField=$get(^WWW003(0,idClass,idField,1))
	    	if $$Find(objField,Property) {
		    	write !,"Class="_idClass_" : ("_idField_") "_$$$WWW003PropertyDescription(objField)
	    	}
	    }
    }
	quit
	
Find(String,SubString)
	;-------------------------------------------------------------------------------
	; Find a substring in a string. With Wild Cards.
	;
	; Returns:
	;
	; History:
	; 16-Dec-2003	Paul K	Created
	;-------------------------------------------------------------------------------
	new blnFound
	
	set String=$zcvt(String,"U")
	set SubString=$zcvt(SubString,"U")
	if $find(SubString,"*") {
		for {
			quit:$piece(SubString,"*",1)'=""
			quit:SubString=""
			
			set SubString=$piece(SubString,"*",2,99)
		}
	}
	
	if $find(SubString,"*") {
		set blnFound=$$Find($piece(String,$piece(SubString,"*",1),2,999),$piece(SubString,"*",2,99))
	} else {
		if String'="" {
			set blnFound=$find(String,SubString)
		} else {
			set blnFound=0
		}
	}
	quit ''blnFound
	
FindCode(String,pstrModule="",blnFindComments=0,pblnQuitIfFound=0,pstrProject="")
	;-------------------------------------------------------------------------------
	; Looks through MAC code for specific strings. Can look
	; either through the comments or the code. 
	; Used by the FindCode Template.
	;
	; History:
	; 07-May-2004	Paul K	Added CommentMode (for /* Comments */)
	; 06-May-2004	GRF		Single tests
	; 07-Jan-2004	Paul K	Added CommentFlag.
	;-------------------------------------------------------------------------------
	new blnComment,dteTimeTaken,idLine,idModule,idRoutine,intLineNumber,ModuleLoop
	new strCode,strFound,strLastTag,strMacro,strTag,blnCommentMode
	
	if pstrModule="" set pstrModule="SAL,IN"
	set strFound     = 0
	set strTag       = ""
	set strLastTag   = ""
	set dteTimeTaken = $zts
 
	if 'pblnQuitIfFound {
		write "<TABLE Border=1px Width=100% Style='font-size:9pt;'>",!
		write "<TR style='background-color:lightgrey;'><TD><b>Tag</b></TD><TD><b>Code</b></TD></TR>",!
	}
	
	for ModuleLoop=1:1:$length(pstrModule,",") {
		set idModule=$piece(pstrModule,",",ModuleLoop)
		quit:strFound&&pblnQuitIfFound
		
		if idModule'="" {
			if String'="" {
				set idRoutine=$order(^rMAC(idModule),-1)
				for {
					set idRoutine=$order(^rMAC(idRoutine))
					quit:idRoutine=""
					quit:$extract(idRoutine,1,$length(idModule))'=idModule
					quit:strFound&&pblnQuitIfFound
					if pblnQuitIfFound {
						set strFound=$$FindCodeInRoutine^SALUtilFind(idRoutine,String,blnFindComments,pblnQuitIfFound)
					} else {
						set strFound=strFound+$$FindCodeInRoutine^SALUtilFind(idRoutine,String,blnFindComments,pblnQuitIfFound)
					}
				}
			}
		}
	}
	if 'pblnQuitIfFound {
		write "<TR style='background-color:lightgrey;'><TD SPAN=2><b>"_strFound_" Matches Found for:&nbsp;"_String_"</b></TD>"
		write "<TD><b>TimeTaken:&nbsp;"_$$DateDiff^COMUtilDate(dteTimeTaken,$zts)_" secs</b></TD></TR></TABLE>"
	}
	quit strFound
	
FindUserChanges(pdteFromDate,pdteToDate,pidUser)  ;Keep - Run from Studio CSP
	;-------------------------------------------------------------------------------
	; Gets changes in @Net manager globals for a date range and user.
	;
	; History:
	; 05-Sep-2005	JW		SR12966: WWWPRO is not shared.
	; 08-Jan-2004	Paul K	Created
	;-------------------------------------------------------------------------------
	new Array,dteDate,idClass,idReference,NewValue,objNew,objOld,objProperties
	new OldValue,PropertyLoop,strFormat,Time
	
	do ^WWWVAR
	
	set pdteFromDate = $$Format^SALCSTSys(pdteFromDate,1,1)
	set pdteToDate   = $$Format^SALCSTSys(pdteToDate,1,1)
	set pdteFromDate = pdteFromDate-1
 
	set idClass=""
	for {
		set idClass=$order(^WWWPRO(YM,idClass))
		quit:idClass=""
		
		if ($extract(idClass,1,3)="SAL")||
		   ($extract(idClass,1,3)="WWW") {
			if (idClass'="SALProductPrice") {
				set dteDate=pdteFromDate
				for {
					set dteDate=$order(^WWWPRO(YM,idClass,dteDate))
					quit:dteDate=""
					quit:dteDate>pdteToDate
					
					set Time=""
					for {
						set Time=$order(^WWWPRO(YM,idClass,dteDate,Time))
						quit:Time=""
						
						set idReference=""
						for {
							set idReference=$order(^WWWPRO(YM,idClass,dteDate,Time,pidUser,idReference))
							quit:idReference=""
							
							set objOld=$get(^WWWPRO(YM,idClass,dteDate,Time,pidUser,idReference,0,1))
							set objNew=$get(^WWWPRO(YM,idClass,dteDate,Time,pidUser,idReference,1,1))
							for PropertyLoop=1:1:$length(objNew,Y) {
								if $piece(objOld,Y,PropertyLoop)'=$piece(objNew,Y,PropertyLoop) {
									set Array(dteDate,Time,idClass,idReference,PropertyLoop)=$piece(objOld,Y,PropertyLoop)_Y_$piece(objNew,Y,PropertyLoop)
								}
							}
						}
					}
				}
			}
		}
	}
	
	write "<TABLE Border=1 WIDTH=100%>"
	set dteDate=""
	for {
		set dteDate=$order(Array(dteDate))
		quit:dteDate=""
		
		write "<TR><TH COLSPAN=4><FONT SIZE=5><b>Changes for "_$$^WWWDATE(dteDate)_"</b></FONT></TH></TR>"
		write "<TR>"
		write "<TH>Time</TH>"
		write "<TH>Class</TH>"
		write "<TH>Reference</TH>"
		write "<TH>Changes</TH>"
		write "</TR>"
		set Time=""
		for {
			set Time=$order(Array(dteDate,Time))
			quit:Time=""
			
			set idClass=""
			for {
				set idClass=$order(Array(dteDate,Time,idClass))
				quit:idClass=""
				
				set idReference=""
				for {
					set idReference=$order(Array(dteDate,Time,idClass,idReference))
					quit:idReference=""
					
					write "<TR VALIGN=TOP>"
					write "<TD WIDTH=10%><b>"_$$^WWWTIME(Time)_"<b></TD>"
					write "<TD WIDTH=15%><b>"_idClass_"<b></TD>"
					write "<TD WIDTH=15%><b>"_idReference_"<b></TD>"
					write "<TD WIDTH=60%>"
					set PropertyLoop=""
					for {
						set PropertyLoop=$order(Array(dteDate,Time,idClass,idReference,PropertyLoop))
						quit:PropertyLoop=""
						
						write $$$WWW003PropertyDescription($get(^WWW003(0,idClass,PropertyLoop,1)))_"&nbsp;"
						set objProperties=$get(Array(dteDate,Time,idClass,idReference,PropertyLoop))
						set strFormat=$$$WWW003InputType($get(^WWW003(0,idClass,PropertyLoop,1)))
						set OldValue=$piece(objProperties,Y,1)
						set NewValue=$piece(objProperties,Y,2)
						if strFormat=1 {
							set OldValue=$$^WWWDATE(OldValue)
							set NewValue=$$^WWWDATE(NewValue)
						}
						write "<b>Old:</b>"_OldValue_"&nbsp;"  ;_"<br>"
						write "<b>New:</b>"_NewValue_"<br>"
					}	
					write "</TD>"
					write "</TR>"
				}
			}
		}
	}
	write "</TABLE>"
	quit
	
Compile(plstClasses)
	;-------------------------------------------------------------------------------
	; Method to compile all classes and display on screen to check for
	; SQL Projection Errors
	; 
	; Note: Search for the word 'illegal' on the returned display.
	;
	; Returns:
	;
	; History:
	; 19-Jan-2004	shobby/paul	Created
	;-------------------------------------------------------------------------------
	
	; SEE : CompileAll^COMUtilClass
	
	new idx,idClass,intClasses
	
	set intClasses=$length(plstClasses,",")
	for idx=1:1:intClasses {
		set idClass=$piece(plstClasses,",",idx)
		do COMPILE^WWW001O(idClass)
	}
	quit
	
FindLanguageCode(pstrText,pstrModule="")  ;Keep - Run from Studio CSP
	;-------------------------------------------------------------------------------
	; Looks through all of the "SAL" language texts and finds close matches
	;
	; Returns:List (Format : Code,Text,NumMatches)
	; 
	;
	; History:
	; 05-Feb-2004	Paul K	Don't test if word has a '%' in it, and must have
	; 						at least 3 chars
	; 04-Feb-2004	Paul K	Created
	;-------------------------------------------------------------------------------
	new ArrayMatches,idLanguage,intWordLoop,lstMatches,numMatches,strText
	
	set pstrText=$zcvt(pstrText,"U")
	set idLanguage=pstrModule
	set lstMatches=""
	if pstrModule="FI" set pstrModule="Fi"
	if pstrText'="" {
		for {
			set idLanguage=$order(^WWW009(0,"EN",idLanguage))
			quit:$extract(idLanguage,1,$length(pstrModule))'=pstrModule
			quit:idLanguage=""
			
			set strText=$get(^WWW009(0,"EN",idLanguage,1))
			set numMatches=0
			for intWordLoop=1:1:$length(pstrText," ") {
				if '$find($piece(pstrText," ",intWordLoop),"%") {
					if $length($piece(pstrText," ",intWordLoop))>2 {
						if $find($zcvt(strText,"U"),$piece(pstrText," ",intWordLoop)) {
							set numMatches=numMatches+1
						}
					}
				}
			}
			if numMatches>0 {
				set ArrayMatches(numMatches,idLanguage)=strText
			}
		}
	}
	
	set numMatches=""
	for {
		set numMatches=$order(ArrayMatches(numMatches),-1)
		quit:numMatches=""
		
		set idLanguage=""
		for {
			set idLanguage=$order(ArrayMatches(numMatches,idLanguage))
			quit:idLanguage=""
			
			set lstMatches=lstMatches_$listbuild($listbuild(numMatches,idLanguage,ArrayMatches(numMatches,idLanguage)))
		}
	}
	quit lstMatches
	
SaleMenuMove(pstrFrom="",pstrTo="")
	;-------------------------------------------------------------------------------
	; Used by @Net manager form SALMenuMove to move a Sales menu to a new position.
	; Also moves children of that menu item.
	; 
	; History:
	; 06-Feb-2004	Paul K	Created
	;-------------------------------------------------------------------------------
	new idMenu,idMenuTo,objWWW004,strStatus
    
    set strStatus=$$$OK
    if (pstrFrom'="")&&(pstrTo'="") {
	    if $extract(pstrTo,$length(pstrTo))'="." {
		    set pstrTo=pstrTo_"."
	    }
	    if '$data(^WWW004(0,"Sale",pstrTo)) {
		    set objWWW004=$get(^WWW004(0,"Sale",pstrFrom,1))
		    do ^WWWKILL("WWW004","Sale,"_pstrFrom)
		    set strStatus=$$$SaveGlobal("WWW004","Sale",pstrTo,objWWW004)
 
		    set idMenu=pstrFrom
		    for {
			    set idMenu=$order(^WWW004(0,"Sale",idMenu))
			    quit:$extract(idMenu,1,$length(pstrFrom))'=pstrFrom
			    quit:idMenu=""
			    quit:strStatus'=$$$OK
			    
			    set objWWW004=$get(^WWW004(0,"Sale",idMenu,1))
			    set idMenuTo=pstrTo_$extract(idMenu,$length(pstrFrom)+1,$length(idMenu))
		    	do ^WWWKILL("WWW004","Sale,"_idMenu)
		    	set strStatus=$$$SaveGlobal("WWW004","Sale",idMenuTo,objWWW004)			    
		    }
		    if strStatus=$$$OK {
			    set strStatus=$listbuild("SALCST0206")  ;Menu move complete.
		    }
	    } else {
		    set strStatus=$listbuild("SALCST0205")  ;Destination Menu item already exists.
	    }
    } else {
	    set strStatus=$listbuild("SALCST0204")  ;No destination menu
    }
    write $$$Text(strStatus)
    do ^WWWFORM
	quit
	
ShowSaleMenuTree()
	;-------------------------------------------------------------------------------
	; Used by @Net manager form SALMenuMove to a little more easily go 
	; to menu defintions. 
	;
	; History:
	; 06-May-2004	GRF		Add explicit quit
	; 06-Feb-2004	Paul K	Created
	;-------------------------------------------------------------------------------
	new idMenu,idParent,objWWW004,strDescription
    
	do StartTree^COMTree($get(YPARA))
	set idMenu=""
	for {
		set idMenu=$order(^WWW004(0,"Sale",idMenu))
		quit:idMenu=""
		
		if $extract(idMenu,$length(idMenu))="." {
			set idParent=$piece(idMenu,".",1,$length(idMenu,".")-2)
		} else {
			set idParent=$piece(idMenu,".",1,$length(idMenu,".")-1)
		}
		if idParent'="" {
			if '$data(^WWW004(0,"Sale",idParent)) {
				set idParent=idParent_"."
			}
		}
		set objWWW004=$get(^WWW004(0,"Sale",idMenu,1))
		set strDescription=$$$WWW004MenuDescription(objWWW004)_" ("_idMenu_")"
		do AddNode^COMTree(idParent,idMenu,idMenu,strDescription,"","WWW004","","","","","","Sale,"_idMenu)
	}
	do StopTree^COMTree($$$YES,0)
	quit
	
CommentRatio(pstrModule="")  ;Keep - Run From Terminal
    ;-------------------------------------------------------------------------------
    ; A particularly dodgy routine that just finds the comment ratios of
    ; routines. can help identify under commented routines.
    ;
    ; History:
    ; 06-May-2004   Paul K	Created
    ;-------------------------------------------------------------------------------
 
	new idRoutine,idLine,strCode,blnComment,Routine,Ratio,fltRatio
	
	set idRoutine=pstrModule
	for {
		set idRoutine=$order(^rMAC(idRoutine))
		quit:idRoutine=""
		quit:$extract(idRoutine,1,$length(pstrModule))'=pstrModule
		
		set idLine=""
		for {
			set idLine=$order(^rMAC(idRoutine,0,idLine))
			quit:idLine=""
			
			set strCode=$get(^rMAC(idRoutine,0,idLine))
			set strCode=$$Trim^SALUtils(strCode)	
			set blnComment=($extract(strCode,1)=";")||($extract(strCode,1,2)="//")
			if blnComment {
				set Routine(idRoutine,"Comment")=$get(Routine(idRoutine,"Comment"))+1
			}
			set Routine(idRoutine,"Code")=$get(Routine(idRoutine,"Code"))+1
		}
		if $get(Routine(idRoutine,"Code"))>0 {
			set Ratio($get(Routine(idRoutine,"Comment"))/Routine(idRoutine,"Code"),idRoutine)=Routine(idRoutine,"Code")
		}
	}
	set fltRatio=""
	for {
		set fltRatio=$order(Ratio(fltRatio),-1)
		quit:fltRatio=""
		
		set idRoutine=""
		for {
			set idRoutine=$order(Ratio(fltRatio,idRoutine))
			quit:idRoutine=""
			
			write $justify(fltRatio*100,4,2)_"% "_idRoutine_" "_Ratio(fltRatio,idRoutine),!
		}
	}
	quit
	
SkipDCM()  ;Keep - Run from Terminal
	;-------------------------------------------------------------------------------
	; Skips DCM Events with errors. Should be used with development only.
	;
	; History:
	; 16-Apr-2004	Paul K	Fixed error flows.
	; 18-Feb-2004	Paul K	Created
	;-------------------------------------------------------------------------------
	new blnErrors,idEvent,idMethod,idSite,objCOMDCMEventsProcessed,objTarget
	new strRespnse
	
	set idEvent=""
	for {
		write !,$$eventQueueManager^COMDCMControlModule()
		set blnErrors = $$$NO
		for {
			set idEvent=$order(^COMDCMEventsProcesseds(0,4,0,idEvent))
			quit:idEvent=""
			
			set blnErrors = $$$NO
			set idMethod  = ""
			
			set objCOMDCMEventsProcessed=$get(^COMDCMEventsProcessed(0,idEvent,1))
			for {
				set idMethod=$order(^COMDCMEventsProcessedTarget(0,idEvent,idMethod))
				quit:idMethod=""
				
				set idSite=""
				for {
					set idSite=$order(^COMDCMEventsProcessedTarget(0,idEvent,idMethod,idSite))
					quit:idSite=""
					
					set objTarget=$get(^COMDCMEventsProcessedTarget(0,idEvent,idMethod,idSite,1))
					if $$$COMDCMEventsProcessedTargetProcStatus(objTarget)=0 {
						write !,"Event: "_$$$COMDCMEventsProcessedEventName(objCOMDCMEventsProcessed)
						write !,"Target Method: "_idMethod_" at site: "_idSite_" had error "_$$$COMDCMEventsProcessedTargetMessage1(objTarget)
						set blnErrors = $$$YES
					}
				}
			}
			if blnErrors {
				write !,"Do you wish to skip?(Y/N/Q)"
				read strRespnse
				if $zconvert(strRespnse,"U")="Y" {
					do SkipEventsProcessed^COMDCMEventsProcessed(idEvent)
					write !,"DCM Event: "_idEvent_" skipped"
				} elseif $zconvert(strRespnse,"U")="Q" {
					set blnErrors=0
				} else {
					write !,"DCM Event: "_idEvent_" not skipped"
				}
			}
			quit:'blnErrors
		}
		quit:'blnErrors
	}
	quit
	
GenerateInfoCommands(pidClass="",pstrPrefix="",pstrRelationKey="",pstrFunctionForData="",pstrDataStorage="")  ;Keep - Run from Terminal
    ;-------------------------------------------------------------------------------
    ; A cheap way for generating multiple INFO commands that relate
    ; to a particular class.
    ; 
    ; History:
    ; ??-Apr-2004	Paul K	Created
    ;-------------------------------------------------------------------------------
	new idProperty,objProperty,objSALINFOCommand,strProperty,strStatus
	
	if pstrPrefix="" set pstrPrefix=pidClass
	
	set strStatus = $$$OK
	if pidClass'="" {
		set idProperty=""
		for {
			set idProperty=$order(^WWW003(0,pidClass,idProperty))
			quit:idProperty=""
			quit:strStatus'=$$$OK
			
			set objProperty=$get(^WWW003(0,pidClass,idProperty,1))
			set strProperty=$$$WWW003PropertyName(objProperty)
			set objSALINFOCommand=""
			set $$$SALINFOCommandDescription(objSALINFOCommand)     = $$$WWW003PropertyDescription(objProperty)
		;	set $$$SALINFOCommandRelationClass(objSALINFOCommand)   = pidClass
		;	set $$$SALINFOCommandRelationKey(objSALINFOCommand)     = pstrRelationKey
			set $$$SALINFOCommandRelationField(objSALINFOCommand)   = idProperty
			set $$$SALINFOCommandDataType(objSALINFOCommand)        = $$$WWW003InputType(objProperty)
			set $$$SALINFOCommandFunctionforData(objSALINFOCommand) = pstrFunctionForData
			set $$$SALINFOCommandDataStorageCode(objSALINFOCommand) = pstrDataStorage
			set $$$SALINFOCommandActiveRender(objSALINFOCommand)    = $$$YES
			set strStatus=$$$SaveGlobal("SALINFOCommand",pstrPrefix_strProperty,objSALINFOCommand)
			write !,pstrPrefix_strProperty_" generated"
		}
	}
	quit strStatus
	
Sort(strText)  ;Keep - Run from CSP Studio
    ;-------------------------------------------------------------------------------
    ; Used by the SortVariable studio template to sort the "new"s
    ;
    ; History:
    ; 05-May-2004   Paul K	Created
    ;-------------------------------------------------------------------------------
	new arrVars,lineLoop,strLine,strVar,varLoop
	
	for lineLoop=1:1:$length(strText,$$$CRLF) {
		set strLine=$piece(strText,$$$CRLF,lineLoop)
		set strLine=$piece(strLine,"new ",2,99)
		set strLine=$translate(strLine," ","")
		quit:strLine=""
		
		for varLoop=1:1:$length(strLine,",") {
			set arrVars($zcvt($piece(strLine,",",varLoop),"U"))=$piece(strLine,",",varLoop)
		}
	}
	
	set strLine=$justify(" ",200)
	set strVar=""
	for {
		set strVar=$order(arrVars(strVar))
		quit:strVar=""
		
		if $length(strLine_","_strVar)>80 {
			if strLine'=$justify(" ",200) {
				write strLine,!
			}
			set strLine="	new "_arrVars(strVar)
		} else {
			set strLine=strLine_","_arrVars(strVar)
		}
	}
	if strLine'="	new " {
		write strLine,!
	}
	quit
	
UpdateLocationDate()  ;Keep - run from terminal
    ;-------------------------------------------------------------------------------
    ; Sets the location and date properties on sale lines if they are
    ; not populated.
    ;
    ; Returns:Status
    ;
    ; History:
    ; 18-Jun-2004	Paul K	Created
    ;-------------------------------------------------------------------------------
	new idSale,idLine,objSale,objLine,strStatus
	
	set strStatus = $$$OK
	set idSale    = ""
	
	for {
		set idSale=$order(^SALSaleHeader(YM,idSale))
		quit:idSale=""
		quit:strStatus'=$$$OK
		
		set objSale=$get(^SALSaleHeader(YM,idSale,1))
		set idLine=""
		for {
			set idLine=$order(^SALSaleLine(YM,idSale,idLine))
			quit:idLine=""
			quit:strStatus'=$$$OK
			
			set objLine=$get(^SALSaleLine(YM,idSale,idLine,1))
			if ($$$SALSaleLineLocation(objLine)'=$$$SALSaleHeaderTill(objSale))||
			   ($$$SALSaleLineSaleDate(objLine)'=$$$SALSaleHeaderSaleTimestamp(objSale)) {
				set $$$SALSaleLineLocation(objLine)=$$$SALSaleHeaderTill(objSale)
				set $$$SALSaleLineSaleDate(objLine)=$$$SALSaleHeaderSaleTimestamp(objSale)
				set strStatus=$$$SaveGlobal("SALSaleLine",idSale,idLine,objLine)
			}
		}
	}
	quit strStatus
	
]]></Routine>
</Export>