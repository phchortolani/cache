<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INForeRule" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INForeRule  ; Forecast Rules
	
#include INConst
#include COMSYS
	
ShowCode(pidRule="")
    ;-------------------------------------------------------------------------------
    ; Used by "View Code" button in INForeRule form to show the resultant code generated by this rule.
    ;
    ; Returns:
    ;
    ; History:
    ; 30-May-2005	PaulK	SR12464: Created
    ;-------------------------------------------------------------------------------
	if pidRule'="" {
		write "subWindow(""COM.CodeCheck.cls?Code="_$$Rtn^INForeProc(pidRule)_".MAC"");"
	}
	quit
	
	
CompileAll(SingleCoy="") 
    ;-------------------------------------------------------------------------------
    ; Compile All Rules
    ;
    ; Returns:
    ;
    ; History:
    ; 02-Mar-2005	PaulK	SR11305: Reduce incidence of calling WWWVAR
    ; 23-Nov-2004	SCR		Created
    ;-------------------------------------------------------------------------------
	new Rule,strStatus,YM
	
	if $get(Y)="" do ^WWWVAR
	set YM = ""
	for {
		set YM = $order(^INForeRule(YM)) 
		quit:YM=""
		continue:(SingleCoy'="")&&(SingleCoy'=YM)
		
		set Rule = ""
		for {
			set Rule = $order(^INForeRule(YM,Rule))
			quit:Rule=""
			
			set strStatus = $$Compile(Rule)
			quit:$$$ISERR(strStatus)
		}
		quit:$$$ISERR(strStatus)
	}
	
	quit strStatus
	
	
Compile(Rule="") 
    ;-------------------------------------------------------------------------------
    ; Compile Rule in Code
    ;
    ; Returns:
    ;
    ; History:
	; 14-Aug-2006	HeberB	SRBR014164: Remove hardcoded text
    ; 19-Dec-2005	SteveS	SR14063: Avoid NULLOREF error by removing spaces
    ; 23-Nov-2004	SCR		Changed Routine Name & *****No Distribution***** flag to
    ; 							stop distribution/clearing
    ; 07-Oct-2004	SCR		Update Rule
    ; 18-Aug-2004	SCR		Added 'Rule' Var
    ; 05-Aug-2004	SCR		Created
    ; 15-Aug-2004	SCR		If Code
    ;-------------------------------------------------------------------------------
	new Status,objRtn,Line,IfLevel,Order,Indent,IfCode,RuleRec,Desc,strStatus,errlist
	new strName
	
	set Rule      = $$$KEY1(Rule)	
	set strStatus = $$$OK
 	if (Rule'="") && ($extract($order(^$Lock("^INForeLock("""")")),1,$length("^INForeLock"))'="^INForeLock") {
		set RuleRec = $get(^INForeRule(YM,Rule,1))
		set Desc    = $$$INForeRuleDescription(RuleRec)
 
		set strName = $translate($$Rtn^INForeProc(Rule)," ") ;SR14063
		set objRtn  = ##class(%Routine).%New(strName)
 
		if ##class(%Routine).Exists(strName) set Status = objRtn.Clear()
		
		set IfLevel = 0
 
		do objRtn.WriteLine(strName_"  ; Compile by class 'INForeRule' Method Compile ; *****No Distribution*****")
		do objRtn.WriteLine("Rule(Item,Location,Verbose=0,Date,Data,Result,Planner,Supplier="""")")
		; N.B. if any of the variables above change, please update GetSystemVariables^INForeLine
		do objRtn.WriteLine("	new StartTime,CalcItem,Rule,RuleDesc,Group")
		do objRtn.WriteLine("	set StartTime=$zh")
		do objRtn.WriteLine("	if Supplier="""" set Supplier="" """)
		do objRtn.WriteLine("	set CalcItem=Item ; Default CalcItem to Item, Can Change")
		do objRtn.WriteLine("	set Rule="""_Rule_""" ; Rule")
		do objRtn.WriteLine("	set Group=$piece($get(^INART(YM,Item,1)),Y,30)")
		do objRtn.WriteLine("	set RuleDesc="""_Desc_""" ; Desc")
		do objRtn.WriteLine("	set Data(""RunRule"","""_Rule_""",""s"")=StartTime ; Log Start Time ")
		;SRBR014164
		;do objRtn.WriteLine("	if Verbose do Message^INForeItem(""Rule Start"","""_Rule_""",""Rule:"_Rule_",Item:""_Item_"",Location:""_Location_"""")")
		do objRtn.WriteLine("	if Verbose do Message^INForeItem("""_$$$Text(34443)_""","""_Rule_""","""_$$$Text(34444)_":"_Rule_","_$$$Text(32024)_":""_Item_"","_$$$Text(388)_":""_Location_"""")")
		
		set Order = ""
		for {
			set Order = $order(^INForeLines(YM,1,Order))
			quit:Order=""
			
			set Line = ""
			for {
				set Line = $order(^INForeLines(YM,1,Order,Rule,Line))
				quit:Line=""
				
				do AddLine(objRtn,Rule,Line,.IfLevel)
			}	
		}
		for IfLevel=IfLevel-1:-1:0 {
			set Indent = $translate($justify("",IfLevel+1)," ",$char(9))
			set IfCode = Indent_"} ; End of "_$get(IfLevel(IfLevel+1))
			do objRtn.WriteLine(IfCode)
		}
		do objRtn.WriteLine("	set Data(""RunRule"","""_Rule_""",""e"")=StartTime ; Log End Time ")
		;SRBR014164
		;do objRtn.WriteLine("	if Verbose do Message^INForeItem(""Rule End"","""_Rule_""",""Rule:"_Rule_",Item:""_Item_"",Location:""_Location_"""")")
		do objRtn.WriteLine("	if Verbose do Message^INForeItem("""_$$$Text(34445)_""","""_Rule_""","""_$$$Text(34444)_":"_Rule_","_$$$Text(32024)_":""_Item_"","_$$$Text(388)_":""_Location_"""")")
		
		do objRtn.WriteLine("	quit 1")
		do objRtn.WriteLine("Round(Value,Method,RoundBy)")
		do objRtn.WriteLine("	if Value#RoundBy'=0 {")
		do objRtn.WriteLine("		if Method=2 set Value=Value+RoundBy\RoundBy*RoundBy	; Round Up")
		do objRtn.WriteLine("		if Method=3 set Value=Value\RoundBy*RoundBy	; Round Down")
		do objRtn.WriteLine("		if Method=4 set Value=Value+(RoundBy/2)\RoundBy*RoundBy	; Round Nearest")
		do objRtn.WriteLine("	}")
		do objRtn.WriteLine("	quit Value")
		set strStatus = objRtn.Compile("-d")
		do objRtn.%Close()
		
		if $$$ISERR(strStatus) {
			do ##class(%SYSTEM.Status).DecomposeStatus(strStatus,.errlist)
			set strStatus = $get(errlist(1))
		}
		set $$$INForeRuleLastCompileStatus(^INForeRule(YM,Rule,1)) = strStatus  ; Update Rule
	}	
	if Rule'="" set $$$INForeRuleUpdated(^INForeRule(YM,Rule,1)) = $horolog     ; Update Rule
	quit strStatus
	
	
AddLine(objRtn="",Rule="",Line="",IfLevel) 
    ;-------------------------------------------------------------------------------
    ; Add Line to Routine
    ;
    ; Returns:
    ;
    ; History:
    ; 30-Apr-2009	PPP		SR16504: Added code to cater for new method 'Return'
    ; 07-Oct-2004	SCR		Added Save to Result code
    ; 05-Aug-2004	SCR		Created
    ; 15-Aug-2004	SCR		Added If Code
    ;-------------------------------------------------------------------------------
	new CalcCode,Name,LineRec,Message,Key,RoundMethod,RoundBy,IfFlag
	new SetVar,IfCode,Indent
	new Conditional,ConditionCode,ConditionMessage,Calc
	new SaveResult
	new CalcCodeAdd
	new strVar
	
	quit:(objRtn="")||(Rule="")||(Line="")
	
	set Indent = $translate($justify("",IfLevel+1)," ",$char(9))
	set Key    = Rule_","_Line
	set LineRec     = $get(^INForeLine(YM,Rule,Line,1))
	set Name        = $$$INForeLineName(LineRec)
	set Calc        = $$$INForeLineMethod(LineRec)
	set RoundMethod = $$$INForeLineRounding(LineRec)
	set RoundBy     = $$$INForeLineRoundingValue(LineRec)
	set CalcCode    = $$CalcCode(Rule,Line,.SetVar,.Message,.IfFlag)
	if ((RoundMethod=2) || (RoundMethod=3) || (RoundMethod=4)) && RoundBy {
		set CalcCode = "$$Round("_CalcCode_","_RoundMethod_","_RoundBy_")"
	}
	set Conditional = $$$INForeLineCondition(LineRec)
	set SaveResult  = $$$INForeLineStoreinResult(LineRec)
	if (Calc="If") || (Calc="End If") {
		set Conditional = ""
	}
	if Conditional'="" {
		set ConditionMessage = ""
		set ConditionCode    = $$Calculation(Conditional,"",.ConditionMessage)
		set IfLevel          = IfLevel+1
		set IfLevel(IfLevel) = ConditionMessage
		do objRtn.WriteLine(Indent_"if ("_ConditionCode_") {  ; "_ConditionMessage)
		set Indent = $translate($justify("",IfLevel+1)," ",$char(9))
		set IfFlag = -1
		
	}
	if 'SetVar {
		do objRtn.WriteLine(Indent_"if Verbose do Message^INForeItem("""_Name_""","""","""_Message_""","""_Key_""")")
	}
 
	if (Calc="Return") {		//SR16504
		set strVar      = Rule_" Return"
		set CalcCodeAdd = Indent_"set Data(""v"","""_strVar_""")="_CalcCode
		do objRtn.WriteLine(CalcCodeAdd)
	}
 
	if SetVar {
		set CalcCode = "set Data(""v"","""_Name_""")="_CalcCode
	}
	set CalcCode = Indent_CalcCode
	do objRtn.WriteLine(CalcCode)
 
 
 
	if SaveResult&SetVar {
		do objRtn.WriteLine(Indent_"set $piece(Result,Y,"_SaveResult_")=$get(Data(""v"","""_Name_"""))")
	}
	if SetVar {
		do objRtn.WriteLine(Indent_"if Verbose do Message^INForeItem("""_Name_""",$get(Data(""v"","""_Name_""")),"""_Message_""","""_Key_""")")
	}
	
	if IfFlag=1 {
		set IfLevel=IfLevel+1
		set IfLevel(IfLevel)=Name
		set IfCode=Indent_"if $get(Data(""v"","""_Name_""")) {"
		do objRtn.WriteLine(IfCode)
	} 
	if IfFlag=-1 {
		if IfLevel>0 {
			set IfLevel=IfLevel-1
			set Indent=$translate($justify("",IfLevel+1)," ",$char(9))
			set IfCode=Indent_"} ; End of "_$get(IfLevel(IfLevel+1))
			do objRtn.WriteLine(IfCode)
		}
		if IfLevel<0 set IfLevel=0
	}
	quit
	
	
CalcCode(Rule,Line,SetVar=1,Message,IfFlag=0)
    ;-------------------------------------------------------------------------------
    ; Build Calculation 
    ; Rule = Forecast Rule
    ; Line = Rule Line
    ; SetVar = Set Variable Flag, 1 = Set, 2= No Set (Pass Back)
    ; Message = Massage (Pass Back)
    ; IfFlag = If Flag, 0 = No If, 1 = If, -1 = End If (Pass Back)
    ; 
    ;
    ; Returns: Code to Execute
    ;
    ; History:
    ; 27-Oct-2009	GRF		SR16871: pass Location in Cost rule calculation
	; 01-Feb-2008	SCR		SRBR014376: Changed Masterfile to use a function for
	; 							setting data
	; 14-Aug-2006	HeberB	SRBR014164: Remove hard-coded english text	
    ; 20-Dec-2005	SteveS	SR14063: Remove quotes from comment string
    ; 30-May-2005	PaulK	SR12464: Set the Date Offset property as a Calculation
    ; 08-Apr-2005	PaulK	SR12071,SR12072: Allow Masterfile entries on class INARTK INLIEF
    ; 24-Nov-2004	SCR		Update Run Rule to new Rtn Name
    ; 07-Oct-2004	SCR		Update Run Rule for Result
    ; 24-Aug-2004	SCR		Added Optional Message Code
    ; 23-Aug-2004	SCR		Added Masterfile Class
    ; 18-Aug-2004	SCR		As At Date
    ; 05-Aug-2004	SCR		Created
    ;-------------------------------------------------------------------------------
	new Date,LineRec,Calc,CalcRec,Code,CalcCode
	new DateType,StartDate,EndDate,Location,LoctionQualifier
	new AsAtDate,MasterfileClass,Calculation,Rtn
	new objINForeCalcLang
	
	; FIXME : add Supplier to new list?
	
	set Date    = +$horolog
	set LineRec = $get(^INForeLine(YM,Rule,Line,1))
	set Calc    = $$$INForeLineMethod(LineRec)
	if Calc="" set Calc = " "
	set CalcRec = $get(^INForeCalc(0,Calc,1))
	set Code    = $$$INForeCalcCode(CalcRec)
	
	;if Code'["^" set Code = "$$"_Code_"^INForeFunction(CalcItem,"  ; SR16871 vvv
	if Code'["^" {
		if Code="Cost" {
			set Code = "$$Cost^INForeFunction(CalcItem,Location"
		} else {
			set Code = "$$"_Code_"^INForeFunction(CalcItem,"
		}
	} ; SR16871 ^^^
	
	set Message = Calc
	
	if Message '= " " {
		set objINForeCalcLang = $get(^INForeCalcLang(0,Calc,SPRACHE,1))
		set Message = $$$INForeCalcLangDescription(objINForeCalcLang)
		if (Message = "") { 
			set Message = $$$INForeCalcDescription(CalcRec)
		}
		if (Message = "") { 
			set Message = Calc
		}
	}
	if $$$INForeCalcDateRange(CalcRec) {  ; Date Range
		set DateType = $$$INForeLineDateType(LineRec)
		if DateType=1 {                                    ; Fixed Dates
			set StartDate = $$$INForeLineStartDate(LineRec)
			set EndDate   = $$$INForeLineEndDate(LineRec)
			
		} else {                                           ; Date Range
			set StartDate = "Date-"_$$Calculation($$$INForeLineDateStartingFrom(LineRec))_"-"_$$Calculation($$$INForeLineDateRangeDuration(LineRec))_"+1"
			set EndDate   = "Date-"_$$Calculation($$$INForeLineDateStartingFrom(LineRec))
		}
		set Code    = Code_StartDate_","_EndDate_","
		set Message = Message_" "_$$$Text(32128)_":""_$zdt("_StartDate_",3)_"""
		set Message = Message_" "_$$$Text(34441)_":""_$zdt("_EndDate_",3)_"""
	}
	
	if $$$INForeCalcAsAtDate(CalcRec) {          ; As At Date
		set DateType = $$$INForeLineDateType1(LineRec)
		if (DateType=1) || (DateType=2) {        ; Run Date
			set AsAtDate="Date"
		}
		if (DateType=3) || (DateType=4) {        ; Fixed Date
			set AsAtDate = +$$$INForeLineAsAtDate(LineRec)
		}
		if (DateType=2) || (DateType=4) {        ; Plus Offset
			if $$$INForeLineDateOffest(LineRec)'="" {
				set AsAtDate = "("_AsAtDate_"+"_($$Calculation($$$INForeLineDateOffest(LineRec)))_")"
			}
		}
		set Code    = Code_AsAtDate_","
		set Message = Message_" "_$$$Text(34441)_":""_$zdt("_AsAtDate_",3)_"""
	}
	
	if $$$INForeCalcLocation(CalcRec) {          ; Location
		set LoctionQualifier=$$$INForeLineLocationQualifier(LineRec)
		set Location=$select(LoctionQualifier=$$$EnumINFORELOCATIONTYPECurrentLocation:"Location",
							 LoctionQualifier=$$$EnumINFORELOCATIONTYPEAllLocations:"""""",
							 $$$YES:""""_$$$INForeLineSpecifiedLocation(LineRec)_"""")
		set Code=Code_Location_","
		;SR14063
		;set Message=Message_" Location:"_Location
		;SRBR014164
		;set Message=Message_" Location: "_$translate(Location,"""")
		;set Message=Message_" "_$get(^WWW009(0,SPRACHE,388,1))_": "_$translate(Location,"""")
 
		set Message=Message_" "_$$$Text(388)_": "_$select(LoctionQualifier=$$$EnumINFORELOCATIONTYPECurrentLocation:$$$AppEnum("INFORELOCATIONTYPE",$$$EnumINFORELOCATIONTYPECurrentLocation),
							 						LoctionQualifier=$$$EnumINFORELOCATIONTYPEAllLocations:"",
							 						$$$YES:$$$INForeLineSpecifiedLocation(LineRec))
	}
 
	set MasterfileClass=$$$INForeCalcMasterfile(CalcRec)
	if (MasterfileClass'="") {  ; SRBR014376
		set Code = $$MakeCode^INForeMasterFile(Rule,Line,$get(Location),$get(Supplier),.Message)
	}
	/*if (MasterfileClass'="") { 		; Location
		if MasterfileClass="INART" {
			set Code="$piece($get(^INART(YM,CalcItem,1)),Y,"_(+$$$INForeLineItemMasterFileData(LineRec))_")"
		} elseif MasterfileClass="INARTK" {
			set Code="$piece($get(^INARTK(YM,CalcItem,Supplier,1)),Y,"_(+$$$INForeLineItemMasterFileData(LineRec))_")"
		} elseif MasterfileClass="INDRPITEM" {
			set Code="$piece($get(^INDRPITEM(YM,"_Location_",CalcItem,1)),Y,"_(+$$$INForeLineItemMasterFileData(LineRec))_")"
		} elseif MasterfileClass="INDRPITEMS" {
			set Code="$piece($get(^INDRPITEMS(YM,"_Location_",$select(Group="""":"" "",1:Group),1)),Y,"_(+$$$INForeLineItemMasterFileData(LineRec))_")"
		} elseif MasterfileClass="INDRPSYS" {
			set Code="$piece($get(^INDRPSYS(YM,"_Location_",1)),Y,"_(+$$$INForeLineItemMasterFileData(LineRec))_")"
		} elseif MasterfileClass="INLIEF" {
			set Code="$piece($get(^INLIEF(YM,Supplier,1)),Y,"_(+$$$INForeLineItemMasterFileData(LineRec))_")"
		}
		set Message=$$$INForeLineDescription(LineRec)
	}
	*/
	
	if $$$INForeCalcRule(CalcRec) {                        ; Run Rule
		set Rule   = $$$INForeLineRunRule(LineRec)
		set Rtn    = $$Rtn^INForeProc(Rule)
		set SetVar = 0 ; do not set the Var
		if $data(^rMAC(Rtn)) {
			set Code = "If '$data(Data(""RunRule"","""_Rule_""")) quit:'$$Rule^"_Rtn_"(Item,Location,Verbose,Date,.Data,.Result) 0"
			set Message = Message_" '"_Rule_"'"
		}
	}
	
	
	if $$$INForeCalcCalculation(CalcRec) {                 ; Calc Code
		set Calculation = $$$INForeLineCalculation(LineRec)
		set CalcCode    = $$Calculation(Calculation,Code,.Message)
		if $$$INForeCalcCalculationOnly(CalcRec) {         ; Calculation only
			set Code = CalcCode
		} else {
			set Code = Code_CalcCode_","
		}
	}
	
	if $$$INForeCalcShortCutQuit(CalcRec) {
		set SetVar  = 0
		set Message = $$$Text(34442)
		set Code    = "quit:("_$$Calculation($$$INForeLineCalculation(LineRec),Code,.Message)_") 0"
	}
	
	set Code = Code_$$$INForeCalcOptionalFixedParameters(CalcRec)
	
	if $extract(Code,$length(Code))=","      set Code = $extract(Code,1,$length(Code)-1) ; Remove Last ","
	if $length(Code,"(")-$length(Code,")")=1 set Code = Code _")" ; Add Last Bracket
	
	if $$$INForeCalcOptionalMessageText(CalcRec)'="" { ; Option Message Text
		set Message = Message_" ""_"_$$$INForeCalcOptionalMessageText(CalcRec)_"_"""
	}
 
	if Calc="If" {
		set IfFlag = 1
		
	} elseif Calc="End If" {
		set IfFlag = -1
		set SetVar = 0
		set Code   = ""
	}
	
	quit Code
	
 
Calculation(Calc,Code,Message,Error,Names)
    ;-------------------------------------------------------------------------------
    ; Calculation Code
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Aug-2004		SCR			Created
    ;-------------------------------------------------------------------------------
	new Vars,Var,Name
	
	set Code=""
	set Error=""
	set Calc=$translate(Calc,"^","""") ; Convert ^ to "
	set Calc=$translate(Calc,$char(180),"'") ; Convert $char(180) to '
	set Vars=$length(Calc,"'")
	if Vars#2=0 {
		set Error="Error in Calculation, Missing ""'"" in "_Calc
	} else {
		for Var=1:2:Vars {
			quit:Error'=""
			set Code=Code_$translate($piece(Calc,"'",Var)," ")
			if Vars>Var {  ;  Convert Name
				set Name=$piece(Calc,"'",Var+1)
				if Name="" set Error="Error in Calculation, Missing Name in "_Calc
				;if Error="" if '$data(Names(Name)) set Error="Error in Calculation, Name '"_Name_"' not defined in "_Calc
				if Error="" set Code=Code_"$Get(Data(""v"","""_Name_"""))"
			}
		}
	}
	if Error'="" set Code="""Error In Calculation"""
	set Message=$get(Message)_" Calc:"_$translate(Calc,"""","'")
	quit Code
 
 
ShowRules(pidRule)
    ;-------------------------------------------------------------------------------
    ; Shows all of the Forecasting rules and whether they are up to date.
    ;
    ; History:
    ; 20-Apr-2005	Paul K		Commented
    ;-------------------------------------------------------------------------------
	new idRule,objRule,gColour,lstHeader,Line,blnUpToDate
	
	set lstHeader=""
	set lstHeader=lstHeader_$listbuild($$$StrINForeRuleRule)
	set lstHeader=lstHeader_$listbuild($$$StrINForeRuleDescription)
	set lstHeader=lstHeader_$listbuild($$$StrINForeRuleUpdated)
	set lstHeader=lstHeader_$listbuild($$$StrINForeRuleLastCompileStatus)
	set lstHeader=lstHeader_$listbuild($$$Text("IN00308"))  ;Up to Date?
	
	do Start^COMTable(lstHeader)
 	
 	set idRule=""
	for {
		set idRule=$order(^INForeRule(YM,idRule))
		quit:idRule=""
		set objRule=$get(^INForeRule(YM,idRule,1))
		do NewLine^COMTable()
		do InsertCell^COMTable(idRule,"INForeRule",idRule)
		do InsertCell^COMTable($$$INForeRuleDescription(objRule),"INForeRule",idRule)
		do InsertCellDate^COMTable($$$INForeRuleUpdated(objRule),"INForeRule",idRule)
		
		if $$$INForeRuleLastCompileStatus(objRule)=$$$OK {
			set gColour="lightgreen"
			do InsertCell^COMTable("OK","INForeRule",idRule)
		} else {
			set gColour="lightcoral"
			
			for Line=$length($$$INForeRuleLastCompileStatus(objRule))\50:-1:0 {
				set $$$INForeRuleLastCompileStatus(objRule)=$extract($$$INForeRuleLastCompileStatus(objRule),1,Line*50)_"<br>"_$extract($$$INForeRuleLastCompileStatus(objRule),Line*50+1,1000)
			}
			do InsertCell^COMTable($$$INForeRuleLastCompileStatus(objRule),"INForeRule",idRule)
		}
		set blnUpToDate=$$$INForeRuleUpdated(objRule)=$get(^rMAC("INForeRuleComp"_YM_idRule,0))
		if blnUpToDate {
			set gColour="lightgreen"
		} else {
			set gColour="lightcoral"
		}
		do InsertCellBoolean^COMTable(blnUpToDate,"INForeRule",idRule)
		do EndLine^COMTable()
	}
 	do Stop^COMTable()
]]></Routine>
</Export>