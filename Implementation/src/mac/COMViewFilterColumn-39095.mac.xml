<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMViewFilterColumn" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMViewFilterColumn ; Controls the display of user driven and default columns.
	
#include COMSYS
#include COMConst
#include WWWConst
	
Output(penumType,&pobjOutput)
	;-------------------------------------------------------------------------------
	; Wrapper for the routines that create the body of an export to CSV or Excel
	; Moved from COM.COMViewToExcel so that that routine could be reused to print
	; out the contents of a grid.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 08-Dec-2008	shobby	SR16222: Order of DisplayFilter and DisplayHeader
	; 							was incorrect in the CSV file - Swapped.
	; 25-Feb-2008	shobby	SRBR014446: Created
	;-------------------------------------------------------------------------------
	new idClass
	
	set idClass=$get(^CacheTempView(YUSER,"Class"))
	do DisplayFilter^COMViewFilterColumn(idClass,penumType,pobjOutput) //BR014788 ;16222
	do DisplayHeader^COMViewFilterColumn(idClass,penumType,pobjOutput)
	do OnBeforeDisplayGrid^COMViewFilter(penumType,pobjOutput) // SR14896
 
	quit
	
	
DisplayHeader(pidClass="",penumType=$$$EnumDisplayTypeCOMView,&pobjOutput="")
    ;-------------------------------------------------------------------------------
    ; Displays the column headers
    ; 
    ; Parameters
    ; pidClass  : The class name
    ; penumType : The type of export, -1 = COMView, 0 = Excel, 1 = CSV 
    ; pobjOutput: The file type to output (not used for COMView export)
    ;
    ; History:
    ; 07-Apr-2009	PPP		SR16468: Header details - Object Properties to go
    ; 							through language translation before display
    ; 							(WWWClassTranslation)
    ; 09-Sep-2008	PPP		SR15866: Update COMView to Objects
    ; 21-Feb-2008	shobby	SRBR014900: GetDescription^COMUtilClass has moved to
    ; 							COMViewDescription
    ; 24-Jul-2006	RPW		SR14254: Added support for exporting to CSV and Excel
    ; 12-Apr-2005	Paul K	Added support for custom commands
    ; 07-Feb-2005	PO		SR10965 Adding support for related classes.
    ;-------------------------------------------------------------------------------
	new blnObj,idKey,lstColumns,idField,FieldLoop,objField,idView,strDescription
	new idClass,idRelationField,strPiece2,intLen
 
	set blnObj = +$get(^CacheTempObj(YUSER,"Object"))
	
	set idKey=""
	if pidClass="" set pidClass = $get(^CacheTempView(YUSER,"Class"))
	
	set idView     = $$GetCurrentView^COMView(pidClass)
	set lstColumns = $$GetColumns(pidClass,idView)
	
	if penumType=$$$EnumDisplayTypeExcel {
		do pobjOutput.WriteLine("<tr>")
	
	} elseif penumType=$$$EnumDisplayTypeCOMView {
		write "ClearCol();"
		if $data(^CacheTempView(YUSER,"Command")) {
			write "AddCol(hdr,'&nbsp;','"_(30*$order(^CacheTempView(YUSER,"Command",""),-1))_"','','','');"  ;leave 30px for each pic.
		}
	}

	
	set intLen = $listlength(lstColumns)
	for FieldLoop=1:1:intLen {
		set idField  = $listget(lstColumns,FieldLoop)
		set idClass  = " "
		set objField = $get(^COMViewColumnUser(0,pidClass,idView,YBED,idField))
		if idField="RowCount" {
			set strDescription = $$$Text("Com00150")       ; "Count"
		
		} else {
			if 'blnObj {
				set idClass         = pidClass
				set idRelationField = idField
				if $extract($piece(idField,".",2),1)="C" {
					set strPiece2       = $piece(idField,".",2)
					set idClass         = $extract(strPiece2,2,$length(strPiece2))
					set idRelationField = $piece(idField,".",3)
					
				} else {
					if $find(idRelationField,".") {    ; FIXME : <GRF> GetRelation^COMViewUtils is a function.
						do GetRelation^COMViewUtils(.idClass,idRelationField)
						set idRelationField = $piece(idRelationField,".",2)
					}
				}
				set strDescription = $$GetDescription^COMViewDescription(idClass,$extract(idRelationField,1),$extract(idRelationField,2,99))
			
			} else {
	 			set strDescription = $$GetTextRelated^WWWClassTranslation(pidClass,idField,$get(SPRACHE))
			}
		}
		if penumType=$$$EnumDisplayTypeCOMView {
			write "AddCol(hdr,'"_$zcvt(strDescription,"o","JS")_"','"_$$$COMViewColumnWidth(objField)_"','"_$$$COMViewColumnSort1(objField)_"','"_idField_"','"_$zconvert($$GetDescription^COMViewDescription(idClass)_" > "_strDescription,"o","JS")_"');" ;BR014900
		} else {
			do:penumType=$$$EnumDisplayTypeExcel pobjOutput.Write("<td class='header'>")
			do pobjOutput.Write(strDescription)
			do:(penumType=$$$EnumDisplayTypeCSV)&&(FieldLoop<intLen) pobjOutput.Write(",")
			do:(penumType=$$$EnumDisplayTypeExcel) pobjOutput.WriteLine("</td>")
		}		
	}
 
	if penumType=$$$EnumDisplayTypeExcel {
		do pobjOutput.WriteLine("</tr>")
		
	} elseif penumType=$$$EnumDisplayTypeCSV {
		do pobjOutput.WriteLine()
	}
	quit
	
	
Format(pstrText,pblnBold=$$$NO,penumType=$$$EnumDisplayTypeCOMView)
	;-------------------------------------------------------------------------------
	; Only put the HTML in, if it is an Excel output.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 08-Dec-2008	shobby	SR16222: Created
	;-------------------------------------------------------------------------------
	if penumType=$$$EnumDisplayTypeExcel {
		if pblnBold set pstrText="<b>"_pstrText_"</b>"
		set pstrText=pstrText_"<br>"
	}
	quit pstrText	
	
	
DisplayFilter(pidClass="",penumType=$$$EnumDisplayTypeCOMView,pobjOutput="")
	;-------------------------------------------------------------------------------
	;
	; Params: pidClass: name of the class where the COMView was open
	;  		  pobjOutput: the object that contains all http structure
	;
	;
	; Returns:
	;
	; History:
    ; 07-Apr-2009	PPP		SR16468: Header details - Object Properties to go through 
    ; 						language translation before display (WWWClassTranslation)
	; 08-Dec-2008	shobby	SR16222:Only put the HTML in, if it is an Excel output.
    ; 09-Sep-2008	PP		SR15866:Update COMView to Objects
	; 21-Feb-2007	shobby	SRBR014900: GetDescription^COMViewDescription moved from
	; 							COMUtilClass
	; 12-Dec-2007	shobby	SRBR014788: Code check issues. Made the operation
	; 							optional based on a COMViewConfig
	; 19-Nov-2007	Karine	SRBR014788: Created: Show selected fields in a COMView
	; 							and its filters 
	;-------------------------------------------------------------------------------
	new blnObj,idComparator,idField,intField,objCOMViewConfig,objFilter
	new strComparator,strDescField,strField,strFilter,strFilterDetails,strTitle
	
	set blnObj=+$get(^CacheTempObj(YUSER,"Object"))		//SR15866
	
	set objCOMViewConfig=$get(^COMViewConfig(0,YM,1))
	if $$$COMViewConfigDisplayFilterInExcel(objCOMViewConfig) {
	; SR16222 vvv
		do pobjOutput.WriteLine($$Format($$GetDescription^COMViewDescription(YFORM),$$$YES,penumType))
		do pobjOutput.WriteLine($$Format($$$Text($listbuild("Com00319",$$^WWWDATE($h)_" "_$$^WWWTIME($h))),$$$NO,penumType))  ;Report Generated:
 
 		if $data(^CacheTempView(YUSER,"Filter")) {
			set strTitle = $$$Text("Com00304") // "Field Selection : "	
			do pobjOutput.WriteLine($$Format(strTitle,$$$YES,penumType)) //$$$TEXT NO WWW009
 		}
	; SR16222 ^^^
		
		set strFilter=""
		for {
			set strFilter=$order(^CacheTempView(YUSER,"Filter",strFilter))
			quit:strFilter=""
			
			set objFilter = $get(^CacheTempView(YUSER,"Filter",strFilter))
			set idField          = $piece(objFilter,Y,1)
			set strFilterDetails = $piece(objFilter,Y,2)
			set idComparator     = $piece(objFilter,Y,3)  
	 
			if strFilterDetails '="" { 
				if 'blnObj {
					set strField = $extract(idField,1)
					set intField = $extract(idField,2,99) //field number			
					//Get the right field description including languages and customized names
					set strDescField = $$GetDescription^COMViewDescription(pidClass,strField,intField) ;BR014900
				} else {
					//set strDescField = idField
	 				set strDescField = $$GetTextRelated^WWWClassTranslation(pidClass,idField,$get(SPRACHE)) 		//SR16468
				}
			
				set strComparator = $$$AppEnum("COMVIEWCOMPARATOR",idComparator)
	 
				do pobjOutput.WriteLine($$Format("   "_strDescField_" - "_strComparator_" = "_strFilterDetails,$$$NO,penumType))
			}
		}
	}	
	quit
	 
SelectColumn(pidField="",pintPosition="")
    ;-------------------------------------------------------------------------------
    ; Called when a user wants the add/remove a column from the result grid.
    ; 
    ; Called by Select^COMViewChoose and JS: ColumnClick()
    ; 
    ; History:
    ; 15-Feb-2007	Steve S	SR15431: Use standard alert, not VBConfirm
    ; 29-Aug-2006	JW		SR14763: Language text
    ; 12-Apr-2005	Paul K	Commented
    ;-------------------------------------------------------------------------------
	new idColumn,idClass,idView,intColumn,idField
 
	set idClass=$get(^CacheTempView(YUSER,"Class"))
 
	if (idClass'="") && (pidField'="") {
		set idView = $$GetCurrentView^COMView(idClass)
		if $data(^COMViewColumnUser(0,idClass,idView,YBED,pidField)) {
			if ($order(^COMViewColumnUser(0,idClass,idView,YBED,pidField))="")    &&
			   ($order(^COMViewColumnUser(0,idClass,idView,YBED,pidField),-1)="")    {
				
				$$$Alert("Com00151") //SR15431
			//	write "VBConfirm('"_$$$Text("Com00151")_"',16,'"_$$$Text("Com00254")_"');"	;Must have at least one column.   ; Search Error	SR14763
			
			} else {
				kill ^COMViewColumnUser(0,idClass,idView,YBED,pidField)
			}
		
		} else {
			set intColumn=0
			set idField=""
			for {
				set idField=$order(^COMViewColumnUser(0,idClass,idView,YBED,idField))
				quit:idField=""
				
				if $$$COMViewColumnUserColumn1($get(^COMViewColumnUser(0,idClass,idView,YBED,idField)))>intColumn {
					set intColumn=$$$COMViewColumnUserColumn1($get(^COMViewColumnUser(0,idClass,idView,YBED,idField)))
				}
			}
			set ^COMViewColumnUser(0,idClass,idView,YBED,pidField)=$increment(intColumn)
		}
		do DisplayHeader(idClass)
		do DisplayGrid^COMViewFilter()
	}
	quit $$$OK
	
 
GetColumns(pidClass,pidView="",pblnRemovedFixed=1)
    ;-------------------------------------------------------------------------------
    ; Returns the currently selected columns.
    ;
    ; Returns:
    ;
    ; History:
    ;  4-Sep-2006	JW		SR14949: Don't remove fixed filter columns
    ; 29-Dec-2004	Paul K	Created
    ;-------------------------------------------------------------------------------
	new lstColumns,intColumn,arrColumns,idField,objColumn,intGroup
	
	if pidView="" set pidView=$$GetCurrentView^COMView(pidClass)
 
	set lstColumns=""
	
	if (pidClass'="")&&(pidView'="") {
		set idField=""
		for {
			set idField=$order(^COMViewColumnUser(0,pidClass,pidView,YBED,idField))
			quit:idField=""
			
			set objColumn=$get(^COMViewColumnUser(0,pidClass,pidView,YBED,idField))
			set arrColumns(0,+$$$COMViewColumnColumn1(objColumn),idField)=""
		}
	}
	set intGroup=""
	for {
		set intGroup=$order(arrColumns(intGroup),-1)
		quit:intGroup=""
		
		set intColumn=""
		for {
			set intColumn=$order(arrColumns(intGroup,intColumn))
			quit:intColumn=""
			
			set idField=""
			for {
				set idField=$order(arrColumns(intGroup,intColumn,idField))
				quit:idField=""
				
				set lstColumns=lstColumns_$listbuild(idField)
			}
		}
	}
	//SR14949 - removed as unnecessary
	;if pblnRemovedFixed set lstColumns=$$RemoveFixedFilterColumns(lstColumns)
	
	quit lstColumns
	
 
RemoveFixedFilterColumns(plstColumns)
    ;-------------------------------------------------------------------------------
    ; If a column is also part of the fixed filters, don't show it on the screen.
    ;
    ; Returns:List
    ;
    ; History:
    ; 12-Apr-2005	Paul K	Commented
    ;-------------------------------------------------------------------------------
	new idFilter,intFind,objFilter
	
	set idFilter = ""
	for {
		set idFilter = $order(^CacheTempView(YUSER,"FixedFilter",idFilter))
		quit:idFilter=""
		
		set objFilter = $get(^CacheTempView(YUSER,"FixedFilter",idFilter))
		set intFind   = $listfind(plstColumns,$$$COMViewFilterField(objFilter))
		if ('$$$COMViewFilterGroupBy(objFilter)) && (intFind>0) {
			set plstColumns = $list(plstColumns,1,intFind-1)_$list(plstColumns,intFind+1,$listlength(plstColumns))
		}
	}
	
	quit plstColumns
	
	
SetColumnWidth(pidField="",pstrWidth="")
    ;-------------------------------------------------------------------------------
    ; Called when a user modifies the with of a column, save again that user.
    ;
    ; History:
    ; 12-Apr-2005	Paul K	Commented
    ;-------------------------------------------------------------------------------
	new idColumn,strWidth,objField,idClass,idView
	
	set idClass = $get(^CacheTempView(YUSER,"Class"))
	if (pidField'="") && (pstrWidth'="") {
		set pidField = $piece(pidField,"head",2)
		set idView   = $$GetCurrentView^COMView(idClass)
		set $$$COMViewColumnUserWidth(^COMViewColumnUser(0,idClass,idView,YBED,pidField)) = pstrWidth
	}
	quit $$$OK
	
	
GetSort(pidClass,pintDirection)
    ;-------------------------------------------------------------------------------
    ; Return which field (if any) the user is currently sorting on.
    ; N.B. pintDirection is passed by reference.
    ;
    ; Returns:
    ;
    ; History:
    ; 12-Apr-2005	Paul K	Commented
    ;-------------------------------------------------------------------------------
	new idField,idView
	
	set idView  = $$GetCurrentView^COMView(pidClass)
	set idField = ""
	for {
		set idField = $order(^COMViewColumnUser(0,pidClass,idView,YBED,idField))
		quit:idField=""
		
		set pintDirection = $$$COMViewColumnUserSort1($get(^COMViewColumnUser(0,pidClass,idView,YBED,idField)))
		quit:pintDirection'=""
	}
	
	quit idField
	
	
SortColumn(pidField="",pintDirection="")
    ;-------------------------------------------------------------------------------
    ; Called when the user clicks on a column header to sort by that column.
    ; Refreshs the grid with that column sorted.
    ; 
    ; Called by JS: SortColumn()
    ; 
    ; History:
    ; 01-Feb-2006	PO		SR13158: Allow for sorting to be turned off.
    ; 12-Apr-2005	Paul K	Commented
    ;-------------------------------------------------------------------------------
	new objField,intSort,strClass,idField,idClass,intDirection,idView

	set idClass = $get(^CacheTempView(YUSER,"Class"))
	
	if (idClass'="") && (pidField'="") {
		set strClass = $$$Index(idClass)
		set idView   = $$GetCurrentView^COMView(idClass)
		set idField  = $$GetSort(idClass,.intDirection)
		
		if (idField=pidField) {
			if pintDirection="" { // SR13158
				if intDirection = 1 {
					set pintDirection = -1
				} elseif intDirection = -1 {
					if $$$COMViewColumnUserSort1($get(^COMViewColumnUser(0,idClass,idView,YBED,idField))) = "" {
						set pintDirection = 1
					} else {
						set pintDirection = ""
					}
				}
			}
			set $$$COMViewColumnUserSort1(^COMViewColumnUser(0,idClass,idView,YBED,idField)) = pintDirection
		
		} else {
			if idField'="" {
				set $$$COMViewColumnUserSort1(^COMViewColumnUser(0,idClass,idView,YBED,idField))=""
			}
			if pintDirection="" set pintDirection = 1
			set $$$COMViewColumnUserSort1(^COMViewColumnUser(0,idClass,idView,YBED,pidField)) = pintDirection
		}
		do DisplayHeader(idClass)
		do DisplayGrid^COMViewFilter()
	}
	quit $$$OK
	
	
ColumnName(pidField="")
	;-------------------------------------------------------------------------------
	; Sets the Column name, accessed by the function ColumnName 
	; (right-click menu option on COMView col header)
	;
	; Inputs:pidField - Column
	;
	; Returns: OK
	;
	; History:
	; 11-Nov-2009	PPP		SR17025: Created
	;-------------------------------------------------------------------------------
	new idClass,idField,idForm,strCallback,strDesc,strPrompt
	
	set idClass = $get(^CacheTempView(YUSER,"Class"))

	//Only do Column Name Change for non - @NM classes ie Object Classes	
	if '$data(^WWW001(0,idClass)) {
		set idForm  = $$GetClassForNestedField(idClass, pidField)
		set idField = $piece(pidField,"->",$length(pidField,"->"))		
		set strDesc = $$GetCustomisedText^WWWClassTranslation(idForm,idField)
		
	//	set strPrompt   = $$$JSText($$$Text($lb("IN01150",idForm_":"_idField)))
		set strPrompt   = $$$JSText($$$Text($lb("IN01150",idField)))
		set strDesc     = $$$JSText(strDesc)
		set strCallback = "SetColumnName^COMViewFilterColumn"

		&js<
			var strResult=prompt('#(strPrompt)#','#(strDesc)#','');
			if (strResult!=null) CallBackNow('#(strCallback)#','#(idClass)#','#(idForm)#','#(idField)#',strResult);
		>

	}
	quit $$$OK
	
	
SetColumnName(pidClass,pidForm,pidField,pstrName)
	;-------------------------------------------------------------------------------
	; Called by Callback from ColumnName subroutine after input from the User
	;
	; Inputs:
	;  pidClass - Class Name
	;  pidForm  - Form Name
	;  pidField - Column Name
	;  pstrName - Column Description defined by User
	;
	; Returns:
	;
	; History:
	; 11-Nov-2009	PP		SR17025: Created
	;-------------------------------------------------------------------------------
	new objWWW122D,strKey,strStatus

	if $get(pstrName)'="" {
		set objWWW122D = $get(^WWW122D(0,pidForm,pidField,0,1))
		set $$$WWW122DFieldDescription(objWWW122D) = pstrName
		set strKey    = pidForm_","_pidField_","_0
		set strStatus = $$$Save("WWW122D",strKey,objWWW122D,1)

	} else {
		set strKey    = pidForm_","_pidField_","_0
		set strStatus = $$$Kill("WWW122D",strKey)
	}

	do DisplayHeader(pidClass)
	do DisplayGrid^COMViewFilter()

	quit $$$OK


SwapColumns(pidSource="",pidDest="")
    ;-------------------------------------------------------------------------------
    ; Called when a user moves a column from one position to another. Refreshes the grid
    ; 
    ; Called by JS: endDragColumn()
    ; 
    ; History:
    ; 12-Apr-2005	Paul K	Commented
    ;-------------------------------------------------------------------------------
	new idClass,objSource,objDest,lstColumns,ColumnLoop,idField,idView
	
	set idClass = $get(^CacheTempView(YUSER,"Class"))
	set idView  = $$GetCurrentView^COMView(idClass)
	
	set pidSource = $piece(pidSource,"head",2)
	set pidDest   = $piece(pidDest,"head",2)
	
	if (idClass'="") && (pidSource'="") && (pidDest'="") {
		set lstColumns = $$GetColumns(idClass,idView,0)
		
		if $listfind(lstColumns,pidSource)>$listfind(lstColumns,pidDest) {
			set lstColumns = $list(lstColumns,1,$listfind(lstColumns,pidSource)-1)_$list(lstColumns,$listfind(lstColumns,pidSource)+1,$listlength(lstColumns))  ;remove source
			set lstColumns = $list(lstColumns,1,$listfind(lstColumns,pidDest)-1)_$listbuild(pidSource)_$list(lstColumns,$listfind(lstColumns,pidDest),$listlength(lstColumns))  ;add in right spot
		
		} else {
			set lstColumns = $list(lstColumns,1,$listfind(lstColumns,pidSource)-1)_$list(lstColumns,$listfind(lstColumns,pidSource)+1,$listlength(lstColumns))  ;remove source
			set lstColumns = $list(lstColumns,1,$listfind(lstColumns,pidDest))_$listbuild(pidSource)_$list(lstColumns,$listfind(lstColumns,pidDest)+1,$listlength(lstColumns))  ;add in right spot
		}
		
		for ColumnLoop=1:1:$listlength(lstColumns) {
			set idField = $listget(lstColumns,ColumnLoop)
			set $$$COMViewColumnUserColumn1(^COMViewColumnUser(0,idClass,idView,YBED,idField)) = ColumnLoop
		}
		do DisplayHeader(idClass)
		do DisplayGrid^COMViewFilter()
	}
	quit $$$OK
	
	
GetClassForNestedField(pidClass,pidField)
	;-------------------------------------------------------------------------------
	; Get Class For Nested Field
	; for e.g.  alSOH.dPeriodBalance,Item->ItemPolicy->StorageType = alLOC.dStorageType
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 27-Jul-2011	shobby	SR17788: 
	; 01-Dec-2009	PPP		SR17025: Created
	;-------------------------------------------------------------------------------
	new idClass,idField,idFieldClass,intCnt
	
	set idClass = pidClass
	
	if $find(pidField,"->") { ;SR17788
		for intCnt = 1:1:$length(pidField,"->") {
			set idField      = $piece(pidField,"->",intCnt)
			set idFieldClass = $$GetClass^COMViewObject(idClass,idField)	//alLOC.dStorage
			set idClass      = idFieldClass
		}
	}
	quit idClass
	
	
]]></Routine>
</Export>