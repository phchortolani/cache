<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMReferences" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMReferences
	#include COMSYS
	#include WWWConst
	
	;Entry point Routines1
	;Comment.  ALUP-DEV not updating.
	
	; Loose Ends
	; Some errors may occur as a result of components not included.
	;
	; zzXref.INA.mac(668): do Run^REPExecute("INItemMasterData")              ; WWW124 / Execute OnClick(6) / 0,INART,PT,30
	
	; **** WARNING *****
	; Do not call tags in any other routine from this routine.  Doing so will load the version of the code in the pstrNS global
	; not the version that this routine has been started in.
	;
	
	
	; To be included
	; 1. ALPHAUP-270
	; 2. ALPHAUP-X1
	; 3. ALPHAUP-X2
	; 4. ALPHAUP-164
	; 5. ALPHAUP-X3	
	; 6. ALPHAUP-247
	; 7. ALPHAUP-179
	; 8. ALPHAUP-255 Last two routines in VARMEDPrescription to be merged from HEVA->AL14CORE (SESDF-V3)
	; 9. ALPHAUP-252 (Test only)
	; 10. ALPHAUP-226 (Test only)
	; 11. ALPHAUP-200 (Checkin some images)
	
	new REPORTERRORS

Routines1(pstrRoutine="www",pstrTag="",&parrReferences,plstForms="",pblnReportErrors=$$$NO,pstrNS="")
	new intCount,idRoutine,idTag,blnFinished,objForm,blnComment,idButton,objWWW124
	new intCountGlobals,idForm,intCountClasses,idObj,strNS,YIDFORM ;ALPHAUP-111

	if pstrNS'="" set strNS=$zu(5) zn pstrNS
	kill parrReferences
	set REPORTERRORS=pblnReportErrors
	do SQLTableName()
	set blnFinished=$$$NO
	
	$$$VAR

	do SetReference(.parrReferences,"Class","User.COMLogin")
	do SetReference(.parrReferences,"Class","User.COMUserPreferences")
	do SetReference(.parrReferences,"Class","User.www")
	do SetReference(.parrReferences,"Class","VAR.infra.environment.Api")
	do SetReference(.parrReferences,"Class","VAR.infra.util.Util")
	do SetReference(.parrReferences,"Class","VAR.infra.util.Strings")
	do SetReference(.parrReferences,"Routine","COMGridEdit31","Start")
	do SetReference(.parrReferences,"Routine","COMConversion","ConvertAll")
	do Routines2(pstrRoutine,pstrTag,.parrReferences)
	do SetReference(.parrReferences,"Routine","WWWMANU1"," ")
	for i=1:1:$length(plstForms,";") {
		set idForm=$piece(plstForms,";",i)
		if idForm'="" {
			;do Routines2("WWWMANU1"," ",.parrReferences)
			write !,"------- Start Process Form "_idForm_" -----------"
			;if $data(^WWW120(0,idForm)) do ProcessForm(idForm,.parrReferences,"")
			;if $data(^WWW120(0,idForm_"Line")) do ProcessForm(idForm_"Line",.parrReferences,"")
			;if $data(^WWW120(0,idForm_"Linha")) do ProcessForm(idForm_"Linha",.parrReferences,"")
			if $data(^WWW120(0,idForm)) do SetReference(.parrReferences,"Form",idForm)
			if $data(^WWW120(0,idForm_"Line")) do SetReference(.parrReferences,"Form",idForm_"Line")
			if $data(^WWW120(0,idForm_"Linha")) do SetReference(.parrReferences,"Form",idForm_"Linha")
		}
	}

	; Extra forms
	do SetReference(.parrReferences,"Form","INIssueRevLineSearch")
	do SetReference(.parrReferences,"Form","VARMEDDispenseManPickLine")
	do SetReference(.parrReferences,"CSP","VARFlexibleMenuCode.csp")
	
	; ALPHAUP-X1
	; do SetReference(.parrReferences,"Class","alSYS.SYSTEM.Process")
	
	; ALPHAUP-X2
	; do SetReference(.parrReferences,"Class","VAR.infra.services.PrimaryServicesMonitor") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.services.SecondaryServicesMonitor") ;ALPHAUP-164

	; ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.dw.ProducaoMensal") ;ALPHAUP-164

	; ALPHAUP-X3
	; do SetReference(.parrReferences,"Class","VAR.infra.cmm.CMMCalcDiarioRunner") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.cmm.CMMCalcDiarioRunner") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.cmm.CMMCalcRunner") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.item.AlertaReposicaoRunner") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.item.AlertaValidadeAtaRunner") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.item.AlertaValidadeProdutoRunner") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.item.AlertaValidadeRunner") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.item.PainelAbastecimentoRunner") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.prescription.PrescriptionSuspendDoseRunner") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.prescription.UpdateTreatmentMCRunner") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.prescription.AtualizaDesempAtendimentoRunner") ;ALPHAUP-164
	; do SetReference(.parrReferences,"Class","VAR.infra.contrato.MailAlertaContratosRunner") ;ALPHAUP-164
	
	
	if pstrNS="HEVA" do SetReference(.parrReferences,"Global","VARDual")

	for { quit:blnFinished
		set blnFinished=$$$YES
		
		do MoreClassReferences(.parrReferences)
		
		set idRoutine="" for { set idRoutine=$order(parrReferences("Routine",idRoutine)) quit:idRoutine=""
			set idTag="" for { set idTag=$order(parrReferences("Routine",idRoutine,idTag)) quit:idTag=""
				if $piece(parrReferences("Routine",idRoutine,idTag),Y,2)="" {
					set $piece(parrReferences("Routine",idRoutine,idTag),Y,2)=1
					write $char(13)_"                                                                           "
					write $char(13)_idRoutine_";"_idTag
					set blnFinished=$$$NO
					continue:idRoutine="WWWDASHBOARD" ;Has links to FIN module
					do Routines2(idRoutine,idTag,.parrReferences)
				}
			}
		}
		set idRoutine="" for { set idRoutine=$order(parrReferences("Class",idRoutine)) quit:idRoutine=""
			if $piece(parrReferences("Class",idRoutine),Y,2)="" {
				set $piece(parrReferences("Class",idRoutine),Y,2)=1
				write $char(13)_"                                                                           "
				write $char(13)_idRoutine
				set blnFinished=$$$NO
				do Routines2(idRoutine,"",.parrReferences,"Class")
			}
		}
		set idObj="" for { set idObj=$order(parrReferences("Form",idObj)) quit:idObj=""
			if $piece(parrReferences("Form",idObj),Y,2)="" {
				set $piece(parrReferences("Form",idObj),Y,2)=1
				write $char(13)_"                                                                           "
				write $char(13)_idObj
				set blnFinished=$$$NO
				do ProcessForm(idObj,.parrReferences,"")
			}
		}
		set idObj="" for { set idObj=$order(parrReferences("CSP",idObj)) quit:idObj=""
			if $piece(parrReferences("CSP",idObj),Y,2)="" {
				set $piece(parrReferences("CSP",idObj),Y,2)=1
				write $char(13)_"                                                                           "
				write $char(13)_idObj
				set blnFinished=$$$NO
				do ProcessCSP(idObj,.parrReferences,"")
			}
		}
	}
	kill ARRTEMP
	merge ARRTEMP=ARR("Routine")
	kill ARR("Routine")
	set idRoutine="" for { set idRoutine=$order(ARRTEMP(idRoutine)) quit:idRoutine=""
		if $data(^rMAC(idRoutine)) {
			if $extract(idRoutine,$length(idRoutine)-2,$length(idRoutine)-1)'=".T" {
				set $piece(ARR("Routine",idRoutine),Y,2)=1
			}
		}
	}
	if pstrNS'="" zn strNS


	;write !,"*********************************************************",!
	
	;write !,"Routines"
	;set intCount=0
	;set idRoutine="" for { set idRoutine=$order(parrReferences("Routine",idRoutine)) quit:idRoutine=""
	;	new strT
	;	set strT=$extract(idRoutine,$length(idRoutine)-2,$length(idRoutine))
	;	if (strT'=".T1")&&(strT'=".T2")&&(strT'=".T3") {
	;		set intCount=intCount+1
	;		w !,idRoutine_".MAC"
	;	}
	;}

	;write !,"Globals"
	;set intCountGlobals=0
	;set idRoutine="" for { set idRoutine=$order(parrReferences("Global",idRoutine)) quit:idRoutine=""
	;	set intCountGlobals=intCountGlobals+1
	;	w !,"^"_idRoutine
	;}

	;write !,"Classes"
	;set intCountClasses=0
	;set idRoutine="" for { set idRoutine=$order(parrReferences("Class",idRoutine)) quit:idRoutine=""
	;	set intCountClasses=intCountClasses+1
	;	w !,"^"_idRoutine
	;}
	
	;write !,!,!
	;write !,"Routines="_intCount_" :Globals="_intCountGlobals_" :Classes="_intCountClasses
	quit

MoreClassReferences(&parrReferences)
	new idClass
	
	set idClass="" for { set idClass=$order(parrReferences("Global",idClass)) quit:idClass=""
		if $piece(parrReferences("Global",idClass),Y,2)="" {
			set $piece(parrReferences("Global",idClass),Y,2)=1
			do ProcessClass(idClass,.parrReferences)
			do MoreFormReferences(.parrReferences,idClass)
			do MoreFormReferences(.parrReferences,idClass_"Line")
			do MoreFormReferences(.parrReferences,idClass_"Linha")
		}
	}

	quit
MoreFormReferences(&parrReferences,pidClass)
	; Here we want to process any @netManager class that was would.  If a class is reference then the
	; system is not going to work properly if we won't have a form to populate that class.
	new idForm,idxClass
	;if $data(^WWW001(0,pidClass)) {
		; Below will bring in all forms belonging to a class.  We probably don't want that because 
		; forms will come from SAL, REP, etc.
		;set idxClass=$$$Index(pidClass)
		;set idForm="" for { set idForm=$order(^WWW120s(0,1,idxClass,idForm)) quit:idForm=""
		;	if $data(^WWW120(0,idForm)) do ProcessForm(idForm,.parrReferences,"")
		;}
		
		;Here we will just process the form with the same name as the class.
		if $data(^WWW120(0,pidClass)) do ProcessForm(pidClass,.parrReferences,"")
		
	;}
	quit
		
SetReference(&parrReferences,pstrType,pstrRef1,pstrRef2="",pstrRoutine="")
	new blnContinue
	
	quit:pstrRef1="" ; **** Early Quit ****
	;quit:(pstrType="Routine")&&($extract(pstrRef2)="%")

	quit:$length(pstrRef2)>60 ;False positive
	set pstrRef1=$piece(pstrRef1," ",1)
	set blnContinue=$$$YES
	
	if (      pstrRef1="FINSYS")   &&(pstrRef2="KILL")                  &&(pstrRoutine="FINAPInvDCM"){
	} elseif (pstrRef1="REPZEN")   &&(pstrRef2="RunReport")             &&(pstrRoutine="COMREP"){
	} elseif (pstrRef1="FINGLDCM") &&(pstrRef2="createAccountTempList") &&(pstrRoutine="COMTAXLocation"){
	} elseif (pstrRef1="FINGLDCM") &&(pstrRef2="FindCostCentre")	    &&(pstrRoutine="FINGLProfileCodeType"){
	} elseif (pstrRef1="FINGLProfileCodeType") &&(pstrRef2="FindCostCentre")	    &&(pstrRoutine="INKOSTL"){
	;} elseif (pstrRef1="FINGLProfileCodeType") &&(pstrRef2="createAccountTempList")&&(pstrRoutine="COMTAXLocation"){
	} elseif $extract(pstrRef1,1,3)="SAL" {
		if (pstrRoutine="COMConst")&&(pstrRef1="SALUtils")&&(pstrRef2="Save") {
		} else {
			do Break()
			set blnContinue=$$$NO
		}
	} elseif $extract(pstrRef1,1,3)="CST" {
		if pstrRef1="CSTCharValue" {
		} else {
			do Break()
			set blnContinue=$$$NO
		}
	} elseif $extract(pstrRef1,1,3)="REP" {
		if (pstrRef1="REPExecute")&&(pstrRef2="Run") {
		} else {
			;do Break()
			set blnContinue=$$$NO
		}
	} elseif ($extract(pstrRef1,1,3)="FIN") {
		if ($extract(pstrRef1,1,18)="FINAPInvMatchCache") {
		} elseif ($extract(pstrRef1,1,11)'="FINAPInvDCM") {
		;} elseif pstrRef1="FINSYSTERM" {
		;} elseif pstrRef1="FININTBATCH" {
		;} elseif pstrRef1="FININTBATCHBLOCK" {
			do Break()
			set blnContinue=$$$NO
		}
	}
	if blnContinue {
		if pstrRef2="" {
			if '$data(parrReferences(pstrType,pstrRef1)) {
				if (pstrType'="Class")||((pstrType="Class")&&($extract(pstrRef1)'="%")) {
					set $piece(parrReferences(pstrType,pstrRef1),Y,1)=""
					;write !,pstrType_":"_pstrRef1
				}
			}
		} else {
			if '$data(parrReferences(pstrType,pstrRef1,pstrRef2)) {
				if $extract(pstrRef2)'="%" {
					set $piece(parrReferences(pstrType,pstrRef1,pstrRef2),Y,1)=""
					;write !,pstrType_":"_pstrRef1_","_pstrRef2
				}
			}
		}
	}
	;if pstrRef1="INWEINVEHeader" do SetReference(.parrReferences,"Form","INWEINVELINE") ;ALPHAUP-247
	if (pstrType="Routine")&&(pstrRef1="VARINWEINVD") {
		if pstrRef2="OnAfterDataFieldsCustom" do SetReference(.parrReferences,"Form","VARFiltrosRelatorioSemSeq") ;ALPHAUP-252
	}

	;if pstrType="Class" if pstrRef1="alDRP.dUDemand" for l=1:1:100 hang 1
	;if pstrRef1="alSYS.Script.dtScriptBase,%XML.Adaptor" for l=1:1:100 hang 1
	quit
ProcessClass(pidClass,&parrReferences)
	new objWWW001,blnComment
	
	set blnComment=$$$NO
	;if $piece($get(parrReferences("Global",pidClass)),Y,2)'=1 {
		do SetReference(.parrReferences,"Global",pidClass)
		if pidClass="INReq" do SetReference(.parrReferences,"Class","script.INREQ.INReqEntryScript")
		if pidClass="INIssue" do SetReference(.parrReferences,"Class","script.INIssue.INIssueScript") 
		set objWWW001=$get(^WWW001(0,pidClass,1))
		do Process($$$WWW001DataAccess(objWWW001),"",,.blnComment,.parrReferences)
		do Process($$$WWW001ExecuteOnQuickSearch(objWWW001),"",,.blnComment,.parrReferences)
	
		new idField,objWWW003

		set idField="" for { set idField=$order(^WWW003(0,pidClass,idField)) quit:idField=""
			;if pidClass="VARSESCOMPRAS" if idField=7 write !,"*************" break
			set objWWW003=$get(^WWW003(0,pidClass,idField,1))
			if $$$WWW003RelationDatabase(objWWW003)'="" do SetReference(.parrReferences,"Global",$$$WWW003RelationDatabase(objWWW003))
		}
	;}
	quit


ProcessCSP(pidCSP,&parrReferences,pstrForm="")
	new idCSP,objCSP,strLine,blnStart,blnComment,idForm,blnContinue
	
	set blnStart=$$$NO
	set blnComment=$$$NO
	set idCSP="csp/"_$zconvert($zu(5),"L")_"/"_pidCSP
	set objCSP=##class(%CSP.Routine).%New(idCSP)
	if objCSP'="" {
		for {
			set strLine=objCSP.ReadLine()
			quit:objCSP.AtEnd
			set blnContinue=$$Process(strLine," ",.blnStart,.blnComment,.parrReferences,pidCSP)

			if strLine["##class(COM.fwk.ui.html.LinkBuilder).buildFormLink" {
				set idForm=$piece($piece(strLine,",",4),"""",2)
				do SetReference(.parrReferences,"Form",idForm)
			}
		}
	}
	quit


ProcessForm(pidForm,&parrReferences,pstrForm="")
	new blnComment,objForm,objWWW124,idButton,idClass,strLine
	;xxx do Routines2(pstrForm," ",.parrReferences)
	set objForm=$get(^WWW120(0,pidForm,1))
	do SetReference(.parrReferences,"Global",pidForm)
	;if $data(^WWW001(0,pidForm,1)) do ProcessClass(pidForm,.parrReferences) ;Class exists with same name as form but not directly linked.
	set idClass=$$$WWW120ClassUsedInForm(objForm)
	;if idClass'="" do ProcessClass(idClass,.parrReferences)
	if idClass'= "" do SetReference(.parrReferences,"Global",idClass)
	;if pidForm="INREC" quit
	;if pidForm="INRECLine" quit
	set blnComment=$$$NO
	do Process($$$WWW120OnBeforeFormConstruction(objForm),"",,.blnComment,.parrReferences)
	do Process($$$WWW120ExecuteBeforeButtonline(objForm),"",,.blnComment,.parrReferences)
	do Process($$$WWW120ExecuteDuringButtonLine(objForm),"",,.blnComment,.parrReferences)
	do Process($$$WWW120ExecuteAfterButtonLine(objForm),"",,.blnComment,.parrReferences)
	do Process($$$WWW120ExecuteAfterPrimaryKey(objForm),"",,.blnComment,.parrReferences)
	do Process($$$WWW120ExecuteAfterDataFields(objForm),"",,.blnComment,.parrReferences)
	do Process($$$WWW120ExecuteOnBeforeSaveData(objForm),"",,.blnComment,.parrReferences)
	set strLine=$$$WWW120ExecuteOnAfterSaveData(objForm)
	if $extract(strLine,1,2)'="$$" if $extract($zcvt(strLine,"L"))'="d" set strLine="$$"_strLine
	do Process(strLine,"",,.blnComment,.parrReferences)
	do Process($$$WWW120ExecuteBeforeDeletePossib(objForm),"",,.blnComment,.parrReferences)
	do Process($$$WWW120ExecuteBeforeDeletionData(objForm),"",,.blnComment,.parrReferences)
	do Process($$$WWW120ExecuteAfterDataDeleted(objForm),"",,.blnComment,.parrReferences)
	
	do ProcessFormCustomisation(pidForm,.parrReferences)
	; Buttons
	set idButton="" for { set idButton=$order(^WWW124(YM,pidForm,"PT",idButton)) quit:idButton=""
		set objWWW124=$get(^WWW124(YM,pidForm,"PT",idButton,1))
		;if $$$WWW124ExecuteToCheckForDisabled(objWWW124)["IsFirmable^INReq" for l=1:1:100 hang 1
		do Process($$$WWW124ExecuteToCheckForDisabled(objWWW124),"",,.blnComment,.parrReferences)
		do Process($$$WWW124ExecuteOnClick(objWWW124),"",,.blnComment,.parrReferences)
		do Process($$$WWW124FunctionJavaScriptOnClick(objWWW124),"",,.blnComment,.parrReferences)		
		if $$$WWW124NewFormOnClick(objWWW124)'="" do SetReference(.parrReferences,"Global",$$$WWW124NewFormOnClick(objWWW124))		
	}
	
	do ProcessFormPrimaryKeyFields(pidForm,.parrReferences)
	do ProcessFormPrimaryKeyCustomisation(pidForm,.parrReferences)
	
	; Form Fields
	new idField,objWWW122
	set idField="" for { set idField=$order(^WWW122(0,pidForm,idField)) quit:idField=""
		set objWWW122=$get(^WWW122(0,pidForm,idField,1))
		;write !,pidForm_":"_idField
		;if pidForm="INARTK" if idField=12 for l=1:1:100 hang 1
		do Process($$$WWW122ExecuteBeforeDataField(objWWW122),"",,.blnComment,.parrReferences)
		do Process($$$WWW122ExecuteWithinDataField(objWWW122),"",,.blnComment,.parrReferences)
		do Process($$$WWW122ExecuteAfterDataField(objWWW122),"",,.blnComment,.parrReferences)
		do Process($$$WWW122ExecuteOnBlur(objWWW122),"",,.blnComment,.parrReferences)
		do Process($$$WWW122DefaultVariableInput(objWWW122),"",,.blnComment,.parrReferences)
		do SetReference(.parrReferences,"Global",$$$WWW122RelationClass(objWWW122))
	}
	
	; Form Field Customisation
	new idField,objWWW122D
	set idField="" for { set idField=$order(^WWW122D(0,pidForm,idField)) quit:idField=""
		set objWWW122D=$get(^WWW122D(0,pidForm,idField,0,1))
		;write !,pidForm_":"_idField
		do Process($$$WWW122DExecuteBeforeDataField(objWWW122D),"",,.blnComment,.parrReferences)
		do Process($$$WWW122DExecuteWithinDataField(objWWW122D),"",,.blnComment,.parrReferences)
		do Process($$$WWW122DExecuteAfterDataField(objWWW122D),"",,.blnComment,.parrReferences)
		do Process($$$WWW122DExecuteOnBlur(objWWW122D),"",,.blnComment,.parrReferences)
		do Process($$$WWW122DDefaultVariableInput(objWWW122D),"",,.blnComment,.parrReferences)
		do SetReference(.parrReferences,"Global",$$$WWW122DRelationClass(objWWW122D))
	}
	
	; Form Field Customisation Rules
	new idRule,objWWW122D2
	set idField="" for { set idField=$order(^WWW122D2(0,pidForm,idField)) quit:idField=""
		set idRule="" for { set idRule=$order(^WWW122D2(0,pidForm,idField,0,idRule)) quit:idRule=""
			set objWWW122D2=$get(^WWW122D2(0,pidForm,idField,0,idRule,1))
			;write !,pidForm_":"_idField
			do Process($$$WWW122D2Is1(objWWW122D2),"",,.blnComment,.parrReferences)
			do Process($$$WWW122D2IsNot(objWWW122D2),"",,.blnComment,.parrReferences)
			do Process($$$WWW122D2ExecuteForCheck(objWWW122D2),"",,.blnComment,.parrReferences)
			do Process($$$WWW122D2IfConditionOnExecute(objWWW122D2),"",,.blnComment,.parrReferences)
			do Process($$$WWW122D2ValueIs(objWWW122D2),"",,.blnComment,.parrReferences)
		}
	}
	
	; Form Field Core Rules  ALPHAUP-191
	new idRule,objWWW122C2
	set idField="" for { set idField=$order(^WWW122C2(0,pidForm,idField)) quit:idField=""
		set idRule="" for { set idRule=$order(^WWW122C2(0,pidForm,idField,idRule)) quit:idRule=""
			set objWWW122C2=$get(^WWW122C2(0,pidForm,idField,idRule,1))
			;write !,pidForm_":"_idField
			do Process($$$WWW122C2Is1(objWWW122C2),"",,.blnComment,.parrReferences)
			do Process($$$WWW122C2IsNot(objWWW122C2),"",,.blnComment,.parrReferences)
			do Process($$$WWW122C2ExecuteForCheck(objWWW122C2),"",,.blnComment,.parrReferences)
			do Process($$$WWW122C2IfConditionOnExecute(objWWW122C2),"",,.blnComment,.parrReferences)
			do Process($$$WWW122C2ValueIs(objWWW122C2),"",,.blnComment,.parrReferences)
		}
	}
	do ProcessFormCalcFields(pidForm,.parrReferences)
	do ProcessFormDynTable(pidForm,.parrReferences)
	do ProcessFormOnBeforeFormat(pidForm,.parrReferences)
	do ProcessFormClassHook(pidForm,.parrReferences)
	do ProcessFormVARClassHook(pidForm,.parrReferences)
	do Process("$$OnBeforeDataAccess^"_pidForm_"OBDA","",,$$$NO,.parrReferences)
	do Process("$$OnBeforeSQL^"_pidForm_"OBSQL","",,$$$NO,.parrReferences)
	do ProcessFormFormHook(pidForm,.parrReferences)
	do ProcessFormVARFormHook(pidForm,.parrReferences)
	do ProcessFormTab(pidForm,.parrReferences)
	quit	

ProcessFormTab(pidForm,&parrReferences)
	; History
	; 02-Sep-2014	shobby	ALPHAUP-97:	Find code in tabs.
	new obj,idField
	
	set idField="" for { set idField=$order(^WWW1203(0,pidForm,"PT",idField)) quit:idField=""
		set obj=$get(^WWW1203(0,pidForm,"PT",idField,1))
		if obj'="" {
			do Process($$$WWW1203CheckExecuteToHide(obj),"",,$$$NO,.parrReferences)
		}
	}
	quit
	
ProcessFormPrimaryKeyCustomisation(pidForm,&parrReferences)
	new obj,idField
	set idField="" for { set idField=$order(^WWW121D(0,pidForm,idField)) quit:idField=""
		set obj=$get(^WWW121D(0,pidForm,idField,0,1))
		if obj'="" {
			do Process($$$WWW121DDefaultVariableInput(obj),"",,$$$NO,.parrReferences)
			do Process($$$WWW121DExecuteBeforeDataField(obj),"",,$$$NO,.parrReferences)
			do Process($$$WWW121DExecuteInDataField(obj),"",,$$$NO,.parrReferences)
			do Process($$$WWW121DExecuteBehindDataField(obj),"",,$$$NO,.parrReferences)
		
		}
	}
	quit


ProcessFormCustomisation(pidForm,&parrReferences)
	new obj
	
	set obj=$get(^WWW120D(0,pidForm,0,1))
	if obj'="" {
		do Process($$$WWW120DOnBeforeFormConstruction(obj),"",,$$$NO,.parrReferences)
		do Process($$$WWW120DExecuteAfterDataFields(obj),"",,$$$NO,.parrReferences)		
	}
	quit
	
	
ProcessFormPrimaryKeyFields(pidForm,&parrReferences)
	; Primary Key Fields
	new idField,objWWW121,blnComment
	
	set blnComment=$$$NO
	set idField="" for { set idField=$order(^WWW121(0,pidForm,idField)) quit:idField=""
		set objWWW121=$get(^WWW121(0,pidForm,idField,1))
		;write !,pidForm_":"_idField
		do Process($$$WWW121ExecuteOnLoad(objWWW121),"",,.blnComment,.parrReferences)
		do Process($$$WWW121ExecuteOnChange(objWWW121),"",,.blnComment,.parrReferences)
		do Process($$$WWW121VariableForEventBroker(objWWW121),"",,.blnComment,.parrReferences)
		do Process($$$WWW121ExecuteOnFormStartBeforeD(objWWW121),"",,.blnComment,.parrReferences)
		do Process($$$WWW121ExecuteOnFormConstruct(objWWW121),"",,.blnComment,.parrReferences)
	}
	quit
	
	
ProcessFormCalcFields(pidForm,&parrReferences)
	new idClass,idField,objWWW003Calc
	
	set idClass = $$$WWW120ClassUsedInForm($get(^WWW120(0,pidForm,1)))
	if idClass'="" {
		set idField="" for { set idField=$order(^WWW003Calc(YM,idClass,idField)) quit:idField=""
			set objWWW003Calc=$get(^WWW003Calc(YM,idClass,idField,1))
			do Process($$$WWW003CalcCode(objWWW003Calc),"",,$$$NO,.parrReferences)
		}
	}
	quit
	
ProcessFormDynTable(pidForm,&parrReferences)
	new objWWW120DynTable,idTable,strCode
	if $data(^WWW120DynTable(YM,pidForm)) {
		set idTable="" for { set idTable=$order(^WWW120DynTable(YM,pidForm,idTable)) quit:idTable=""
			set objWWW120DynTable=$get(^WWW120DynTable(YM,pidForm,idTable,1))
			set strCode=$$$WWW120DynTableCustomCode(objWWW120DynTable)
			if $extract(strCode,1,2)'="$$" set strCode="$$"_strCode
			do Process(strCode,"",,$$$NO,.parrReferences)
		}
	}
	quit

ProcessFormOnBeforeFormat(pidForm,&parrReferences)
	do Process("do OnBeforeFormat^"_pidForm,"",,$$$NO,.parrReferences)
	quit

ProcessFormClassHook(pidForm,&parrReferences)
	new idClass,idHook,objWWW001Hook
	
	set idClass = $$$WWW120ClassUsedInForm($get(^WWW120(0,pidForm,1)))
	if idClass'="" {
		set idHook="" for { set idHook=$order(^WWW001Hook(YM,idClass,idHook)) quit:idHook=""
			set objWWW001Hook=$get(^WWW001Hook(YM,idClass,idHook,1))
			do Process($$$WWW001HookCode(objWWW001Hook),"",,$$$NO,.parrReferences)
		}
	}
	quit

ProcessFormVARClassHook(pidForm,&parrReferences)
	new idClass,idHook,objWWW001Hook
	
	set idClass = $$$WWW120ClassUsedInForm($get(^WWW120(0,pidForm,1)))
	if idClass'="" {
		set idHook="" for { set idHook=$order(^WWW001VARHooks(YM,idClass,idHook)) quit:idHook=""
			set objWWW001Hook=$get(^WWW001VARHooks(YM,idClass,idHook,1))
			do Process($$$WWW001VARHooksCode(objWWW001Hook),"",,$$$NO,.parrReferences)
		}
	}
	quit

ProcessFormFormHook(pidForm,&parrReferences)
	new idHook,objHook
	
	set idHook="" for { set idHook=$order(^WWW120Hook(YM,pidForm,idHook)) quit:idHook=""
		set objHook=$get(^WWW120Hook(YM,pidForm,idHook,1))
		if objHook="" do Break()
		do Process($piece(objHook,Y,1),"",,$$$NO,.parrReferences)
	}
	quit

ProcessFormVARFormHook(pidForm,&parrReferences)
	new idHook,objHook
	
	set idHook="" for { set idHook=$order(^WWW120VARHook(YM,pidForm,idHook)) quit:idHook=""
		set objHook=$get(^WWW120VARHook(YM,pidForm,idHook,1))
		if objHook="" do Break()
		do Process($$$WWW120VARHookCode(objHook),"",,$$$NO,.parrReferences)
	}
	quit
	;------------------------------------------------------------------------------------------------------------
	
	
	
	
Routines2(pstrRoutine="www",pstrTag="zOnPage",&parrReferences,pstrType="Routine")
	new intLine,strLine,blnStart,blnComment,idRoutine,idTag,intChar,i,strRoutine,blnContinue,strReturnType
	new j,k,strLine2,strTag2
	
	set blnStart=$$$NO
	set blnComment=$$$NO
	set strTag2=""
	
	if $extract(pstrRoutine,1,3)="www" {
		set idLine=0 for { set idLine=$order(^ROUTINE("User.www.1",0,idLine)) quit:idLine=""
			set strLine=^ROUTINE("User.www.1",0,idLine)
			quit:($extract(strLine)="z")&&(blnStart)
			do Process(strLine,pstrTag,.blnStart,.blnComment,.parrReferences,pstrRoutine)
		}
	} elseif pstrType="Class" {
		for i=1:1:10 {
			set strRoutine=pstrRoutine_".T"_i
			set idLine=0 for { set idLine=$order(^rMAC(strRoutine,0,idLine)) quit:idLine=""
				quit:(idLine'=+idLine)
				set strLine=^rMAC(strRoutine,0,idLine)
				do Process(strLine,pstrTag,.blnStart,.blnComment,.parrReferences,strRoutine)
			}
		}
		new objClass,objClass2,strClass,strCode,blnComment,strLine,j,lstImport

		set lstImport=""
		set objClass=##class(%Dictionary.ClassDefinition).%OpenId(pstrRoutine)
		if objClass'="" {
			set lstImport=objClass.Import
			if lstImport'="" set lstImport=lstImport_","
			set lstImport=lstImport_$piece(objClass.Name,".",1,$length(objClass.Name,".")-1)
			set lstImport=lstImport_","_objClass.Name
			do objClass.%Close()
		}
		
		set objClass=##class(%Library.ClassDefinition).%OpenId(pstrRoutine)
		if objClass'="" {
			if objClass.IncludeCode'="" {
				for i=1:1:$length(objClass.IncludeCode,",") {
					do SetReference(.parrReferences,"INC",$piece(objClass.IncludeCode,",",i))					
				}
			}
			if objClass.Super'="" {
				;if objClass.Name["VAR.common.LogEvent" break
				new j
				for j=1:1:$length(objClass.Super,",") {
					do SetReference(.parrReferences,"Class",$piece(objClass.Super,",",j))
					if $piece(objClass.Super,".",1)="User" do SetReference(.parrReferences,"Global",$piece(objClass.Super,".",2))
					for i=1:1:$length(lstImport,",") {
						do SetReference(.parrReferences,"Class",$piece(lstImport,",",i)_"."_$piece(objClass.Super,",",j))
					}
				}
			}
			for i=1:1:objClass.Properties.Count() {
				set strClass=objClass.Properties.GetAt(i).Type
				if strClass'["." set strClass=$piece(objClass.Name,".",1,$length(objClass.Name,".")-1)_"."_strClass
				;write !,"**** "_strClass
				if ($extract(strClass,1,2)="al")||($extract(strClass,1,3)="VAR") {
					do SetReference(.parrReferences,"Class",strClass)
					do Process(objClass.Properties.GetAt(i).InitialExpression,"",,$$$NO,.parrReferences,,$$$NO) ;ALPHAUP-211
				}
			}
			for i=1:1:objClass.Methods.Count() {
				new j,strFormalSpec,objName
				set strFormalSpec=objClass.Methods.GetAt(i).FormalSpec
				for j=1:1:$length(strFormalSpec,",") {
					set objName=$piece($piece(strFormalSpec,",",j),":",2)
					if objName'="" do SetReference(.parrReferences,"Class",objName)
				}
				;do Process(objClass.Methods.GetAt(i).FormalSpec,"",,,.parrReferences,,$$$NO)
				set strReturnType=objClass.Methods.GetAt(i).ReturnType
				if strReturnType'="" {
					if strReturnType'["." set strReturnType=$piece(objClass.Name,".",1,$length(objClass.Name,".")-1)_"."_strReturnType
					do SetReference(.parrReferences,"Class",strReturnType)
				}
				set strCode=objClass.Methods.GetAt(i).Code
				set blnComment=$$$NO
				for j=1:1:$length(strCode,$$$CRLF) {
					set strLine=$piece(strCode,$$$CRLF,j)
					do Process(strLine,"",,.blnComment,.parrReferences,,$$$NO)
					if (strLine["##class(")&&(lstImport'="") {
						do ProcessImport(strLine,lstImport,.blnComment,.parrReference)
					}
				}
				for j=1:1:$length(lstImport,",") {
					do FindSQLText(strCode,.parrReferences,$piece(lstImport,",",j))
				}				
				set strCode=objClass.Methods.GetAt(i).Expression
				set blnComment=$$$NO
				for j=1:1:$length(strCode,$$$CRLF) {
					set strLine=$piece(strCode,$$$CRLF,j)
					do Process(strLine,"",,.blnComment,.parrReferences,,$$$NO)
				}
			}
			do objClass.%Close()
		}
	} else {
		set blnStart=$$$NO
		if $data(^rMAC(pstrRoutine))&&('$data(^ROUTINE(pstrRoutine))) {
			new obj,strStatus
			set obj=##class(%Library.Routine).%New(pstrRoutine_".MAC")
			set strStatus=obj.Compile("FRCK")
			write !,pstrRoutine_" compiled! "_strStatus
			if 'strStatus do Break()
			do Break()
		}
		set idLine=0 for { set idLine=$order(^ROUTINE(pstrRoutine,0,idLine)) quit:idLine=""
			;new strTag,idForm ;Causes FRAMESTACK error
			set strLine=^ROUTINE(pstrRoutine,0,idLine)
			do Routines2LoadGrid(strLine,.parrReferences,.strTag2)
			do Routines2LoadCOMViewGrid(strLine,.parrReferences)
			set blnContinue=$$Process(strLine,pstrTag,.blnStart,.blnComment,.parrReferences,pstrRoutine)
			quit:'blnContinue
		}
		set idLine="" for { set idLine=$order(^rMAC(pstrRoutine,0,"INC",idLine)) quit:idLine=""
			;include related INC files
			if $extract(idLine,1)'="%" set parrReferences("INC",idLine)=""
		}
		do FindSQL(pstrRoutine,.parrReferences)
	}

	quit


Routines2LoadGrid(pstrLine,&parrReferences,&pstrTag)
	new idForm
	
	if $extract(pstrLine,1,8)="LoadGrid" set pstrTag=$piece(pstrLine,"(",1)
	if $extract($zcvt(pstrLine,"L"),1,5)=$char(9)_"quit" set pstrTag=""
	if pstrTag'="" {
		if pstrLine["set YFORM=" {
			set idForm=$piece(pstrLine,"""",2)
			if idForm'="" {
				if $data(^WWW120(0,idForm)) do SetReference(.parrReferences,"Form",idForm)
			}
		}
	}
	quit
	
Routines2LoadCOMViewGrid(pstrLine,&parrReferences)
	new idForm
	
	if pstrLine["LoadCOMViewGrid" {
		set idForm=$translate($piece(pstrLine,",",2),"""","")
		if idForm'="" {
			if $data(^WWW120(0,idForm)) {
				do SetReference(.parrReferences,"Form",idForm)
			}
		}
	}
	quit
	
	
ProcessImport(pstrLine,plstImport,&pblnComment,&parrReference)
	new i,idClass,strPiece1,strPiece2,pstrPiece3,strClass,strLine
	
	set strPiece1=$piece(pstrLine,"##class(",1)_"##class("
	set strPiece2=$piece($piece(pstrLine,"##class(",2),")",1)
	set strPiece3=$extract(pstrLine,$length(strPiece1_strPiece2_")"),$length(pstrLine))

	for i=1:1:$length(plstImport,",") {
		if $piece(plstImport,",",i)="" {
			set strClass=strPiece2
		} else {
			set strClass=$piece(plstImport,",",i)_"."_strPiece2
		}
		set strLine=strPiece1_strClass_strPiece3
		if ##class(%Dictionary.CompiledClass).%ExistsId(strClass) {
			do Process(strLine,"",,.pblnComment,.parrReferences,$$$NO)
		}
	}
	quit

Process(pstrLine,pstrTag,&pblnStart,&pblnComment,&parrReferences,pstrRoutine="",pblnIgnoreComments=$$$NO)
	;----------------------------------------------------------------------------------------------------
	; History
	; 01-Sep-2014	shobby	ALPHAUP-111: Find some missing grid forms
	; 28-Aug-2014	shobby	ALPHAUP-108: Some code was missed because the detection of an end comment
	;									  could fail in some circumstances.
	;----------------------------------------------------------------------------------------------------
	new strGlobal,strRoutine,strTag,strLine2,strClass
	new strChar   ;ALPHAUP-111
	
	if pstrLine'="" {
		set blnResult=$$$YES
		if $extract(pstrLine,1,$length(pstrTag))=pstrTag {
			set pblnStart=$$$YES
			set YIDFORM=""		;ALPHAUP-111   CAUTION GLOBAL VARIABLE
		} elseif (pstrTag=" ")&&($extract(pstrLine,1,$length(pstrRoutine))=pstrRoutine) {
			set blnStart=$$$YES
		} elseif pblnStart&&($extract(pstrLine)'=$char(9))&&($extract(pstrLine)'=" ") {
			quit $$$NO
		} 
		if pblnStart {
			;--------------------------------------------------------------------------------------------------------
			if $translate($zcvt(pstrLine,"U")," ","")["SETYFORM=""" set YIDFORM=$piece(pstrLine,"""",2)	;ALPHAUP-111
			if ($translate($zcvt(pstrLine,"U")," ","")["SET$PIECE(YAUSWAHL,""~"",9)=")&&(YIDFORM'="") do SetReference(.parrReferences,"Form",YIDFORM) ;ALPHAUP-111			
			;--------------------------------------------------------------------------------------------------------

			do FindYAKTION(pstrLine,.parrReferences) ;must be before the line that checks for ;
			set pstrLine=$$$TRIMWS(pstrLine)  ;ALPHAUP-108
			if pblnComment if $extract(pstrLine,$length(pstrLine)-1,$length(pstrLine))="*/" set pblnComment=$$$NO quit $$$YES ;ALPHAUP-108
			set pstrLine=$$$TRIMWS($piece(pstrLine,";",1))
			if 'pblnIgnoreComments {
				quit:$extract(pstrLine)=";" $$$YES
				quit:$extract(pstrLine,1,2)="//" $$$YES
				if $extract(pstrLine,1,2)="/*" set pblnComment=$$$YES
				if $extract(pstrLine,1,2)="*/" set pblnComment=$$$NO quit $$$YES
				for intChar=65:1:90 {
					set pstrLine=$piece(pstrLine,"//"_$char(intChar),1)
					set pstrLine=$piece(pstrLine,";"_$char(intChar),1)
				}		
				set pstrLine=$piece(pstrLine," ; ",1)
			}
			do FindBuildFormLink(pstrLine,.parrReferences)	;ALPHAUP-139
			do FindInsertCell(pstrLine,.parrReferences)	;ALPHAUP-79
			do FindGotoForm(pstrLine,.parrReferences) ;ALPHAUP-106
			do FindLoadGrid(pstrLine,.parrReferences) ;ALPHAUP-225
			do FindInsertCellCallback(pstrLin]]><![CDATA[e,.parrReferences) ;ALPHAUP-225
			do FindSetYFORM(pstrLine,.parrReferences)
			do FindCallBack(pstrLine,.parrReferences)
			set strLine2=$zcvt(pstrLine,"l")
			set strLine2=$replace(strLine2,"$data(","")
			set strLine2=$replace(strLine2,"$piece(","")
			set strLine2=$replace(strLine2,"$get(","")
			set strLine2=$replace(strLine2,"$listbuild(","")
			set strLine2=$replace(strLine2,"$translate(","")
			set strLine2=$replace(strLine2,"$extract(","")
			set strLine2=$replace(strLine2,"$system.","")
			set strLine2=$replace(strLine2,"$zconvert(","")
			set strLine2=$replace(strLine2,"$zutil(","")
			set strLine2=$replace(strLine2,"$select(","")
			set strLine2=$replace(strLine2,"$select(","")
			set strLine2=$replace(strLine2,"""..""","")
			set strLine2=$replace(strLine2,"...","")
			set strLine2=$replace(strLine2,"$$$","")

			quit:(strLine2'["##class")&&(strLine2'["$$")&&(strLine2'["^")&&(strLine2'["d ")&&(strLine2'["do ")&&(strLine2'["..")&&(strLine2'["JOB ") $$$YES ;ALPHAUP-220
			quit:pblnComment $$$YES
			if $$FindGlobal(pstrLine,.strGlobal) do SetReference(.parrReferences,"Global",strGlobal)
			if $$FindTagInCurrentRoutine(pstrLine,pstrRoutine,.strTag) do SetReference(.parrReferences,"Routine",pstrRoutine,strTag,pstrRoutine)
			if $$FindRoutine(pstrLine,.strRoutine) {
				do SetReference(.parrReferences,"Routine",strRoutine," ")
				new strLine3
				set strLine3=$extract(pstrLine,$find(pstrLine,strRoutine),$length(pstrLine))
				do Process(strLine3,pstrTag,.pblnStart,.pblnComment,.parrReferences,pstrRoutine,pblnIgnoreComments)
			} 
			if $$FindTag(pstrLine,.strRoutine,.strTag) {
				do SetReference(.parrReferences,"Routine",strRoutine,strTag,pstrRoutine)
				new strLine3
				set strLine3=$extract(pstrLine,$find(pstrLine,strRoutine),$length(pstrLine))
				do Process(strLine3,pstrTag,.pblnStart,.pblnComment,.parrReferences,pstrRoutine,pblnIgnoreComments)
			}
			if $$FindClass(pstrLine,.strClass,.parrReferences)  do SetReference(.parrReferences,"Class",strClass)
			if $$FindCSP(pstrLine,.strClass,.parrReferences)  do SetReference(.parrReferences,"CSP",strClass)
		}
	}
	quit $$$YES

FindCallBack(pstrLine,&parrReferences)
	new idRoutine,idTag,strLine

	set strLine=pstrLine	
	if strLine["Callback = """ {
		set strLine=$piece($piece(strLine,"Callback = """,2),"""",1)
		set idRoutine=$piece(strLine,"^",2)
		set idTag=$piece(strLine,"^",1)
		if (idRoutine'="")&&(idTag'="") {
			;break
			do SetReference(.parrReferences,"Routine",idRoutine,idTag)
		}
	}
	set strLine=pstrLine	;ALPHAUP-270
	if strLine["CallBack = """ {
		set strLine=$piece($piece(strLine,"CallBack = """,2),"""",1)
		set idRoutine=$piece(strLine,"^",2)
		set idTag=$piece(strLine,"^",1)
		if (idRoutine'="")&&(idTag'="") {
			;break
			do SetReference(.parrReferences,"Routine",idRoutine,idTag)
		}
	}
	quit
	
FindSetYFORM(pstrLine,&parrReferences)
	if $zcvt($translate(pstrLine," "),"U")["SETYFORM=""" {
		break:pstrLine["MEDDispenseIssue"
		do SetReference(.parrReferences,"Form",$piece(pstrLine,"""",2))
	}
	quit
	
FindInsertCellCallback(pstrLine,&parrReferences)
	;--------------------------------------------------------------------------
	; Finds forms that are being loaded by links created by InsertCellCallback function
	;
	; History
	;--------------------------------------------------------------------------
	new strLine
	
	if pstrLine["InsertCellCallback^COMTable(" {
		;break:pstrLine["VARVolumeEstoqueProduto"
		set pstrLine=$piece(pstrLine,"InsertCellCallback^COMTable(",2)
		if $piece($translate(pstrLine,"""",""),",",2)="GoToForm^COMUtils" {
			set strLine=$translate($piece(pstrLine,",",3),""")")
			if strLine'="" do SetReference(.parrReferences,"Form",strLine)
		}
		if $piece($translate(pstrLine,"""",""),",",2)="GoToForm^COMUtilForm" {
			set strLine=$translate($piece(pstrLine,",",3),""")")
			if strLine'="" do SetReference(.parrReferences,"Form",strLine)
		}
	}
	quit
		
FindLoadGrid(pstrLine,&parrReferences)
	;--------------------------------------------------------------------------
	; Finds forms that are being loaded by links created by LoadGrid function
	;
	; History
	; 09-Sep-2014	shobby	ALPHAUP-225
	;--------------------------------------------------------------------------
	
	if pstrLine["LoadGrid(" {
		set pstrLine=$piece(pstrLine,"LoadGrid(",2)
		set pstrLine=$piece(pstrLine,",",2)
		if pstrLine["""" {
			set pstrLine=$piece(pstrLine,"""",2)
			if pstrLine'="" do SetReference(.parrReferences,"Form",pstrLine)
		}
	}
	quit
	
FindInsertCell(pstrLine,&parrReferences)
	;--------------------------------------------------------------------------
	; Finds forms that are being loaded by links created by InsertCell function
	;
	; History
	; 25-Aug-2014	shobby	ALPHAUP-79;
	;--------------------------------------------------------------------------
	
	if pstrLine["do InsertCell^COMTable(" {
		set pstrLine=$piece(pstrLine,"do InsertCell^COMTable(",2)
		set pstrLine=$piece(pstrLine,",",2)
		set pstrLine=$translate(pstrLine,"""~- "_$char(9),"")
		if pstrLine'="" do SetReference(.parrReferences,"Form",pstrLine)
	}
	quit
	
FindBuildFormLink(pstrLine,&parrReferences)
	;--------------------------------------------------------------------------
	; Finds forms that are being loaded by links created by BuildFormLink function
	;
	; History
	; 25-Aug-2014	shobby	ALPHAUP-139;
	;--------------------------------------------------------------------------
	
	if pstrLine["$$BuildFormLink^VARWMSUtils(""" {
		set pstrLine=$piece(pstrLine,"$$BuildFormLink^VARWMSUtils(""",2)
		set pstrLine=$piece(pstrLine,"""",1)
		;set pstrLine=$translate(pstrLine,"""~- "_$char(9),"")
		if pstrLine'="" do SetReference(.parrReferences,"Form",pstrLine)
	}
	quit
	
FindGotoForm(pstrLine,&parrReferences)
	;--------------------------------------------------------------------------
	; Finds forms that are being loaded by links created by GoToForm function
	;
	; History
	; 25-Aug-2014	shobby	ALPHAUP-106;
	;--------------------------------------------------------------------------
	new strLine
	
	if pstrLine["GoToForm^COMUtilForm(" {
		set strLine=$piece(pstrLine,"GoToForm^COMUtilForm(",2)
		set strLine=$piece(strLine,",",1)
		set strLine=$translate(strLine,""" ","")
		if strLine'="" do SetReference(.parrReferences,"Form",strLine)
	}
	if pstrLine["GoToForm^COMUtils(" {
		set strLine=$piece(pstrLine,"GoToForm^COMUtils(",2)
		set strLine=$piece(strLine,",",1)
		set strLine=$translate(strLine,""" ","")
		if strLine'="" do SetReference(.parrReferences,"Form",strLine)
	}
	quit
	
FindYAKTION(pstrLine,&parrReferences)
	if pstrLine["YAKTION" {
		set pstrLine=$piece(pstrLine,"YAKTION",2)
		if pstrLine["&amp;YFORM=" {
			set pstrLine=$piece(pstrLine,"&amp;YFORM=",2)
			set pstrLine=$piece(pstrLine,"&",1)
			set pstrLine=$piece(pstrLine,"""",1)
			if pstrLine'="" do SetReference(.parrReferences,"Form",pstrLine)
		}
	}
	quit
	
	
FindCSP(pstrText,&pstrClass,&parrReferences)
	new blnFound,strText
	
	set blnFound=$$$NO
	
	if pstrText["startCSPPage" {
		set pstrText=$piece($piece(pstrText,"startCSPPage(""",2),"""",1)
		set strText=$zconvert(pstrText,"U")
		if $extract(strText,$length(strText)-3,$length(strText))=".CSP" {
			set pstrClass=pstrText
			set blnFound=$$$YES
		}
	}
	quit blnFound
	
Packages()
	new obj,i,list
	
	set obj=##class(%Library.PackageDefinition).%New("1")
	set list=obj.GetPackageList()
	for i=1:1:list.Count() {
		w !,list.GetAt(i)
	}
	
	quit
	
	
FindClass(pstrText,&pstrClass,&parrReferences)
	new blnFlag,strClass,blnFound,strTest,i,lstModules,strText
	
	set blnFlag=$$$NO
	set pstrClass=""
	set strText=$piece(pstrText,"//",1)
	set lstModules="VAR.AEP.alADJ.alBarc.alCST.alCUS.alDRP.alFLI.alGL.alINV.alISS.alLOC.alMAN.alMOV.alQRY.alREC.alREP.alREQ.alSAL.alSFI.alSOH.alSUP.alSYS.alTFR.alTUI.alUSR.alView.alWEB.alZEN.alZRP.TS"
	for i=1:1:$length(lstModules,".") {
		set strTest=$piece(lstModules,".",i)
		set blnFlag=strText[(strTest_".")
		quit:blnFlag
	}
	if blnFlag {
		set blnFound=$$$NO
		set strText=strTest_$piece(strText,strTest,2,999)  ;TODO problem if multiple matches.  Only finds the first.
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".Storage-"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".Bundle-"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".Item)"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".Item-"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".DateConfirmed "  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".MovementType)"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".MovementType,"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".Reference "  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".Reference)"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".QtyMoved)"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".QtyMoved "  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".Location="  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".Item="  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".cls?"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,")"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,"I("  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,"D("  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,"D)"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences," for"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences," WHERE"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,""")"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences," where"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".ID"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences," d"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,""""  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,":"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,"D("  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,"D"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,"D#"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,"C("  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,"~"  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,"D "  ,"Class")
		if 'blnFound set blnFound=$$TestClass(strText,.parrReferences,".1"  ,"Class")

		if 'blnFound {
			if strText["$$OnBuild" {
			} elseif $$TestClass(strText,.parrReferences,"D","Class",$$$YES) {
			} else {
				;do Break()
			}
		}
	}
	quit (pstrClass'="")

TestClass(pstrText,&parrReferences,pstrSuffix,pstrType,pblnAdd=$$$NO)
	new strClass,blnFound
	
	set blnFound=$$$NO
	if pblnAdd {
		set pstrText=pstrText_$char(0)
		set pstrSuffix=pstrSuffix_$char(0)
	}
	if pstrText[pstrSuffix {
		set strClass=$piece(pstrText,pstrSuffix,1)
		if strClass'="" {
			if ##class(%Library.ClassDefinition).%ExistsId($extract(strClass,1,100)) {
				do SetReference(.parrReferences,pstrType,strClass)
				set blnFound=$$$YES
			}
		}
		if strClass'="" do FindClass($replace(pstrText,strClass_pstrSuffix,""),"",.parrReferences)
	}
	quit blnFound

FindGlobal(pstrText,&pstrGlobal)
	new str
	
	set pstrGlobal=$piece($piece(pstrText,"kill ^",2),"(",1)
	if pstrGlobal="" set pstrGlobal=$piece($piece(pstrText,"set ^",2),"(",1)
	if pstrGlobal="" {
		set str=$piece(pstrText,"(^",2)
		;if str="" set str=$piece(pstrText," ^",2)
		if $find(str,")")<$find(str,"(") {
			set pstrGlobal=$piece(str,")",1)
		} else {
			set pstrGlobal=$piece(str,"(",1)
		}
	}
	if pstrGlobal="" set pstrGlobal=$piece($piece(pstrText,"(^",2),"(",1)
	if pstrGlobal="" set pstrGlobal=$piece($piece(pstrText,"(^",2),")",1)
	set pstrGlobal=$piece(pstrGlobal,"""",1)
	set pstrGlobal=$piece(pstrGlobal,",",1)
	set pstrGlobal=$piece(pstrGlobal,"(",1)
	set pstrGlobal=$piece(pstrGlobal,")",1)
	set pstrGlobal=$piece(pstrGlobal,"|",1)
	set pstrGlobal=$piece(pstrGlobal," ",1)
	
	quit (pstrGlobal'="")
FindRoutine(pstrText,&pstrRoutine)
	set pstrRoutine=$piece($piece(pstrText,"$$^",2),"(",1)
	if pstrRoutine="" set pstrRoutine=$piece($piece(pstrText,"DO ^",2),"(",1)
	if pstrRoutine="" set pstrRoutine=$piece($piece(pstrText,"D ^",2),"(",1)
	if pstrRoutine="" set pstrRoutine=$piece($piece(pstrText,"do ^",2),"(",1) 	;ALPHAUP-221
	if pstrRoutine="" set pstrRoutine=$piece($piece(pstrText,"d ^",2),"(",1)	;ALPHAUP-221
	if pstrRoutine="" set pstrRoutine=$piece($piece(pstrText,"Do ^",2),"(",1)	;ALPHAUP-221
	if pstrRoutine="" set pstrRoutine=$piece($piece(pstrText,"Job ^",2),"(",1)	;ALPHAUP-221
	if pstrRoutine="" set pstrRoutine=$piece($piece(pstrText,"JOB ^",2),"(",1)	;ALPHAUP-221
	quit (pstrRoutine'="")&&($data(^rMAC(pstrRoutine)))
FindTag(pstrText,&pstrRoutine,&pstrTag)
	if pstrText["do Perform^COMTransaction(YFORM,YKEY,""" {
		set str=$piece(pstrText,"do Perform^COMTransaction(YFORM,YKEY,""",2)
		set pstrRoutine=$piece($piece(str,"^",2),"(",1)
		set pstrTag=$piece(str,"^",1)
	} elseif pstrText["$$Transaction^COMTransaction(""" {
		set str=$piece(pstrText,"$$Transaction^COMTransaction(""",2)
		set pstrRoutine=$piece($piece(str,"^",2),"(",1)
		set pstrTag=$piece(str,"^",1)
	} elseif pstrText["CallBack(" {
		set pstrText=$piece(pstrText,"'",2)
		set pstrRoutine=$piece(pstrText,"^",2)
		set pstrTag=$piece(pstrText,"^",1)
	} else {
		set pstrRoutine=$piece($piece(pstrText,"^",2),"(",1)
		set pstrTag=$piece($piece(pstrText,"do ",2),"^",1)
		if pstrTag="" {
			if $piece(pstrText,"d ",2)["^" {
				if $piece($piece(pstrText,"d ",2),"^",1)'[" " {
					set pstrTag=$piece($piece(pstrText,"d ",2),"^",1)
				}
			}
		}
		if pstrTag="" set pstrTag=$piece($piece(pstrText,"DO ",2),"^",1)
		if pstrTag="" set pstrTag=$piece($piece(pstrText,"D ",2),"^",1)
		if pstrTag="" set pstrTag=$piece($piece(pstrText,"$$",2),"^",1)
		if pstrTag="" set pstrTag=$piece($piece(pstrText,"JOB ",2),"^",1) ;ALPHAUP-220
	}
	quit (pstrRoutine'="")&&(pstrTag'="")&&($data(^rMAC(pstrRoutine)))

FindTagInCurrentRoutine(pstrText,pstrRoutine,&pstrTag)
	new strText,intStart
	
	set strText=$zcvt(pstrText,"l")
	set pstrTag=$piece($piece(strText,"do ",2),"(",1)
	if pstrTag="" set pstrTag=$piece($piece(strText,"$$",2),"(",1)
	if pstrTag'="" {
		set intStart=$find($zcvt(pstrText,"l"),pstrTag)-$length(pstrTag)
		set pstrTag=$extract(pstrText,intStart,intStart+$length(pstrTag)-1)
	}
	quit ($extract(pstrTag)'="%")&&($extract(pstrTag,1,2)'="##")&&(pstrTag'="")&&(pstrRoutine'="")&&(pstrTag'["^")
	

FindSQL(pidRoutine,&parrReferences)
	new idLine,strSQL,strLine,blnOpen,intStart,idClass,idClass1,strSQL1
	
	set blnOpen=$$$NO
	set strSQL=""

	set idLine="" for { set idLine=$order(^rMAC(pidRoutine,0,idLine)) quit:idLine=""
		quit:(idLine'=+idLine)
		set strLine=^rMAC(pidRoutine,0,idLine)
		if blnOpen {
			set strSQL=strSQL_strLine
		} elseif $zcvt(strLine,"L")["&sql(" {
			set strSQL=strLine
			set intStart=idLine
			set blnOpen=$$$YES
		}
		if (strSQL'="")&&($length(strSQL,"(")=$length(strSQL,")")) {
			set blnOpen=$$$NO
			do FindSQLText(strSQL,.parrReferences)
			set strSQL=""
		}
	}
	quit

FindSQLText(pstrSQL,&parrReferences,pstrPackage="")
	new idClass
	
	set pstrSQL=$replace(pstrSQL,$char(9)," ")
	set pstrSQL=$replace(pstrSQL,$$$CRLF," ")
	set idClass=$$$TRIMWS($piece($piece($piece($piece($zcvt(pstrSQL,"L")," join ",2)," where ",1)," as ",1)," on ",1))
	do FindSQL1(pstrSQL,idClass,.parrReferences,pstrPackage)
	set idClass=$$$TRIMWS($piece($piece($piece($piece($piece($zcvt(pstrSQL,"L")," from ",2)," where ",1)," as ",1)," left ",1), " inner ",1))
	do FindSQL1(pstrSQL,idClass,.parrReferences,pstrPackage)

	quit
	

FindSQL1(pstrSQL,plstClasses,&parrReferences,pstrPackage="")
	; Checks: VARINLIEF.MAC, VARSESProcesso
	new idClass,idClass1,intClasses
	
	set plstClasses=$replace(plstClasses,"sqluser.","")
	set plstClasses=$extract(pstrSQL,$find($zcvt(pstrSQL,"L"),plstClasses)-$length(plstClasses),$find($zcvt(pstrSQL,"L"),plstClasses)-1)
	if plstClasses'="" {
		for intClasses=1:1:$length(plstClasses,",") {
			set idClass=$$$TRIMWS($piece(plstClasses,",",intClasses))
			if ($length(idClass," ")=1)&&(idClass'="") { ;ignore false positives
				if $data(^WWW001(0,idClass)) {
					do SetReference(.parrReferences,"Global",idClass)
				} else {
					if pstrPackage'="" set idClass=pstrPackage_"."_idClass
					if $data(ARRSQLTABLENAME(idClass)) set idClass=ARRSQLTABLENAME(idClass)
					do SetReference(.parrReferences,"Class",idClass)
					do SetReference(.parrReferences,"Class",$translate(idClass,"_","."))
				}
			}
		}
	}
	quit

Break()
	if REPORTERRORS break
	quit

Excluded(pstrFrom="SESDF-V3",pstrTo="ALUP")
	; Lists the components that were not copied across
	
	new idClass,intCount,idxKeys,idParentClass,idParentField
	
	set intCount=0
	
	set idClass="" for { set idClass=$order(^[pstrFrom]WWW001(0,idClass)) quit:idClass=""
		if '$data(^[pstrTo]WWW001(0,idClass)) {
			set idxKeys=$order(^[pstrTo]WWW003s(0,5,$$$Index(idClass),""))
			if idxKeys'="" {
				if $extract(idClass,1,3)="SALa" {
				} elseif $extract(idClass,1,3)="FINa" {
				} else {
					set idParentClass=$order(^[pstrTo]WWW003s(0,5,$$$Index(idClass),idxKeys,""))
					set idParentField=$order(^[pstrTo]WWW003s(0,5,$$$Index(idClass),idxKeys,idParentClass,""))
					write !,idClass_":"_idParentClass_"("_idParentField_")"
					set intCount=intCount+1
				}
			}
		}
	}
	write !,!,"Count="_intCount
	quit

SQLTableName()
	; Some classes have a different SqlTableName than the class name.  This translation allows the correct class to be
	; found based on a query that refers to the SqlTableName.
	; Example DITECPG.SITAUACAO_PROTOCOLO
	; comment to force a bazaar update
	new objResultSet,strName,strSQLTableName,strPackage
	
	kill ARRSQLTABLENAME
	set objResultSet = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
	if objResultSet'=$$$NULLOREF {
		if $$$ISOK(objResultSet.Execute()) {
			for {
				quit:'objResultSet.Next()
				set strName = objResultSet.Data("Name")
				continue:$extract(strName)="%"
				set strPackage=$piece(strName,".",1,$length(strName,".")-1)
				set strName=$piece(strName,".",$length(strName,"."))
				set strSQLTableName=objResultSet.Data("SqlTableName")
				if (strName'=strSQLTableName)&&(strSQLTableName'="") {
					if strPackage'="" set strPackage=strPackage_"."
					;write !,strPackage_strName_":"_strPackage_strSQLTableName
					set ARRSQLTABLENAME(strPackage_strSQLTableName)=strPackage_strName
				}
			}
		}
	}

	quit
]]></Routine>
</Export>