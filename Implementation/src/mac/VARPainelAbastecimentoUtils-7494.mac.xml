<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARPainelAbastecimentoUtils" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARPainelAbastecimentoUtils

#include COMSYS
#include COMConst
#include VARConst
#include INConst
#include WWWConst
#include VARPainelAbastecimento

VerifyUserSession(YBED)
	;Autenticação
	
	set ipcliente=""
	//Verificando IP do cliente para realizar bypass da autenticação caso seja a sala de situação ip->10.1.1.232
	if ( $get(%request.CgiEnvs("REMOTE_ADDR")) = "10.85.3.103" ) {
		set ipcliente = $get(%request.CgiEnvs("X-Forwarded-For"))
	}
	else {
		set ipcliente = ""
	}
	if (ipcliente = "") {
	      set ipcliente = $get(%request.CgiEnvs("REMOTE_ADDR"))
	}
	if (ipcliente = "") {
	 	  set ipcliente = $zutil(67, 15, $job)
	}
	
	
	 
	   
	//Verificando se o usuário loggou pelo alphalinc   
	
	if ((YBED="") || (YBED="UNKNOWN")) {
		
		//Buscando ultimo login dessa sessão no Painel para permitir acesso dentro dos ultimos 30 minutos
		
		set lastUse=$get(^CacheTemp("PainelAbast",%session.SessionId))
		set redirect=0
		if lastUse="" set redirect=1
		if $piece(lastUse,",",1)'=$piece($H,",",1) {
			set redirect=1
		}else {
			if $piece($H,",",2)-$piece(lastUse,",",2)>1800 set redirect=1
		}
		
		if ipcliente="10.1.1.232" set redirect=0 //Sala de situação
		
		if (redirect=1) {		
			write "<script language='javascript'>"
			write "	 alert('Usuário não está logado ou a sessão expirou.');"
			write "	 window.location.href = 'COMLogin.cls';"
			write "</script",">"
			quit
		}
	}
	set ^CacheTemp("PainelAbast",%session.SessionId)=$H
	
	quit


GetGruposParametro(pGrupo)
	;$$GetGruposParametro^VARPainelAbastecimentoUtils()
	;--------------------------------------------------------------------------
	; Descrição:
	;	Utilização para querys // 
	;   Retorna 1 caso o grupo informado conste nos grupos de abastecimento
	;	nos parâmetros do cliente
	;
	;--------------------------------------------------------------------------
	new Grupos
	set Grupos = $$$VARParametroClienteGruposAbastecimento($get(^VARParametroCliente(0,0,1)))
	set Grupos = ";"_Grupos_";"
	set pGrupo = ";"_pGrupo_";"
	
	quit:($find(Grupos,pGrupo)) 1
	
	quit 0
	
	
ValidaLocalCentral(pLocal)
	;$$ValidaLocalCentral^VARPainelAbastecimentoUtils()
	;--------------------------------------------------------------------------
	; Descrição:
	;	Utilização para querys // 
	;   Retorna 1 caso o local informado conste nos locais centrais
	;   nos parâmetros do cliente
	;	
	;--------------------------------------------------------------------------
	new Locais
	set Locais = $$$VARParametroClienteLocaisCentrais($get(^VARParametroCliente(0,0,1)))
	set Locais = ";"_Locais_";"
	set pLocal = ";"_pLocal_";"
	
	quit:($find(Locais,pLocal)) 1
	
	quit 0
	
GetSituacaoAlertaLocal(pCodigoProduto, pLocation, EstoqueAbaixoPR, EstoqueAbaixoPRcomEP, EstoqueProximoPR, EstoqueAcimaPR, EstoqueAcimaEM)
	;$$GetSituacaoAlertaLocal^VARPainelAbastecimentoUtils()
	;--------------------------------------------------------------------------
	; Descrição:
	;	Retorna a situação (Baseado no alerta Local):
	;	Macro de Referência: VARPainelAbastecimento.inc
	;--------------------------------------------------------------------------
	new Local, Produto, status
	
	set Local = pLocation
	set Produto = pCodigoProduto
		
	set status = $select(
						$$GetPR^VARAlertaLinha(Produto,Local)=0	:$$$SemPlanejamento,
						EstoqueAbaixoPR=1					:$$$EstoqueAbaixoPR, 
						EstoqueAbaixoPRcomEP				:$$$EstoqueAbaixoPRcomEP, 
						EstoqueAcimaPR						:$$$EstoqueAcimaPR, 
						EstoqueProximoPR					:$$$EstoqueProximoPR, 
						EstoqueAcimaEM						:$$$EstoqueAcimaEM,
						1=1									:$$$NaoDefinido)
	
	quit status

 
GetSituacaoFromCobertura(pfltCMML, pfltCoberturaLocal)
	;Se o CMML for 0 ou não existir dados de cobertura local, considera que não possui dados de planejamento
	;--------------------------------------------------------------------------
	; Descrição:
	;	Retorna a situação (De acordo com a cobertura de estoque):
	;	Macro de Referência: VARPainelAbastecimento.inc
	;--------------------------------------------------------------------------
	quit:((pfltCMML = 0) ) $$$SemPlanejamento
	
	new idSituacao
	
	if (pfltCoberturaLocal < 15) {
		set idSituacao = $$$Abaixo15Dias
	} elseif ( (pfltCoberturaLocal >= 15) && (pfltCoberturaLocal <= 30) ) {
		set idSituacao = $$$Entre15e30Dias	
	} elseif ( (pfltCoberturaLocal > 30) && (pfltCoberturaLocal <= 45) ) {
		set idSituacao = $$$Entre30e45Dias	
	} elseif (pfltCoberturaLocal > 45) {
		set idSituacao = $$$Acima45Dias
	} else {
		set idSituacao = $$$SemPlanejamento
	}
 
	quit idSituacao
	
ValidaLocalRegional(pLocal)
	;$$ValidaLocalRegional^VARPainelAbastecimentoUtils()
	;--------------------------------------------------------------------------
	; Descrição:
	;	Utilização para querys // 
	;   Retorna 1 caso o local informado conste nos locais regionais
	;   nos parâmetros do cliente
	;	
	;--------------------------------------------------------------------------
	new Locais
	set Locais = $$$VARParametroClienteUnidadesRegionais($get(^VARParametroCliente(0,0,1)))
	set Locais = ";"_Locais_";"
	set pLocal = ";"_pLocal_";"
	
	quit:($find(Locais,pLocal)) 1
	
	quit 0


GetTipoEstoque(pItem)
	;$$GetTipoEstoque^VARPainelAbastecimentoUtils(Item)
	;--------------------------------------------------------------------------
	; Descrição:
	;	Retorna o tipo de estoque (INART) do item informado
	;--------------------------------------------------------------------------
	quit:(pItem'="") $p($g(^INART(0,pItem,1)),"~",345)
	quit ""
	
GetFiltroProdutoHTML(pSelect="")
	;$$GetFiltroProdutoHTML^VARPainelAbastecimentoUtils()
	;--------------------------------------------------------------------------
	; Descrição:
	;	Retorna o tipo de estoque (INART) do item informado
	;--------------------------------------------------------------------------

	new CodProduto, StrHtml, count, objINART
	
	set StrHtml = ""
	$$$Order2(^INART,YM,CodProduto)
	
		set objINART = $get(^INART(YM,CodProduto,1))
		
		set DescProduto = $$$INARTSearchName(objINART)
		
		set:(pSelect="") StrHtml = StrHtml_"<option value='"_CodProduto_"'>("_CodProduto_") "_$replace(DescProduto,"""","")_"</option>"
		set:((pSelect'="") && (pSelect=CodProduto)) StrHtml = StrHtml_"<option selected value='"_CodProduto_"'>("_CodProduto_") "_$replace(DescProduto,"""","")_"</option>"

	$$$End
	
	quit StrHtml	
	
GetFiltroGrupoHTML(pSelect="")
	;$$GetFiltroProdutoHTML^VARPainelAbastecimentoUtils()
	new CodProduto, StrHtml, count, objINART, id, descricao
	
	set (CodProduto, StrHtml, count, objINART, id, descricao) = ""
	
    &SQL(DECLARE grupos CURSOR FOR
        SELECT ID1, Description
            INTO :id, :descricao
        FROM SQLUser.INItemGroup
        WHERE 1=1
       		--AND GrpLevel = 1
            AND $$GetGruposParametro^VARPainelAbastecimentoUtils(ID1) <> 0
        ORDER BY ID1)
        
    &SQL(OPEN grupos)
    
    for {&SQL(FETCH grupos) 
    quit:SQLCODE

		set:(pSelect="") StrHtml = StrHtml_"<option value='"_id_"'>"_$replace(descricao,"""","-")_"</option>"
		set:((pSelect'="") && (pSelect=id)) StrHtml = StrHtml_"<option selected value='"_id_"'>"_descricao_"</option>"

    }
    
   	set StrHtml = StrHtml_"<option selected value='Outros'>Outros</option>"

	quit StrHtml
	
GetFiltroLocaisRegionaisHTML()
	;$$GetFiltroLocaisHTML^VARPainelAbastecimentoUtils()
	new count, html, Local, Locais
	
	set html = ""
	
	set Locais = $$$VARParametroClienteUnidadesRegionais($get(^VARParametroCliente(0,0,1)))
	
	set count = 1
	while(count<=$l(Locais,";")){
		set Local = $p(Locais,";",count)
		set html = html_"<option value='"_Local_"'>("_Local_") "_$$SQLGetLocationName^VARSQL(Local)_"</option>"
		set count = $i(count)
	}
	
	quit html
	
GetFiltroLocaisCentraisHTML()
	;$$GetFiltroLocaisHTML^VARPainelAbastecimentoUtils()
	new count, html, Local, Locais
	
	set html = ""
	
	set Locais = $$$VARParametroClienteLocaisCentrais($get(^VARParametroCliente(0,0,1)))
	
	set count = 1
	while(count<=$l(Locais,";")){
		set Local = $p(Locais,";",count)
		set html = html_"<option value='"_Local_"'>("_Local_") "_$$SQLGetLocationName^VARSQL(Local)_"</option>"
		set count = $i(count)
	}
	
	quit html
	
	
GetEstoqueCentrais(pItem)
	;$$GetEstoqueCentrais^VARPainelAbastecimentoUtils(pItem)
	new QtyEstoque, count
	set QtyEstoque = 0
	
	set Locais = $$$VARParametroClienteLocaisCentrais($get(^VARParametroCliente(0,0,1)))
	
	set count = 1
	while(count<=$l(Locais,";")){
		set QtyEstoque = QtyEstoque + $$GetEstoqueLocal^VARAlertaLinha(pItem,$p(Locais,";",count))
		set count = $i(count)
	}
	
	quit QtyEstoque
 
GetCoberturaEstoqueLocal(pidItem, pidLocal)
	;$$GetCoberturaEstoqueLocal^VARPainelAbastecimentoUtils(pItem, pidLocal)
	new estoqueCentral, cmmRede, cobertura
	set cobertura = 0
	
	set estoqueCentral = $$GetEstoqueLocal^VARAlertaLinha(pidItem,pidLocal)
	set cmmRede = $$GetCMMRede^VARAlertaLinha(pidItem)
	
	if (cmmRede > 0) {
		set cobertura = $$Floor^COMUtilNum((estoqueCentral / cmmRede) * 30)
	}
	
	quit cobertura



GetDiasZerados(pItem, pLocal="")
	;
	;
	; Descrição: Obtém a quantidade de dias zerados a partir da data atual até a última reposição
	;
	
	if ($get(pItem) = "") quit 0
	
	new totalDiasZerado, data
	
	set totalDiasZerado = 0
	set data = +$horolog
	
	; Valida se o item já existiu na StockHistory (teve alguma movimentação)
	; Caso não tenha existido, considera a quantidade de dias igual à 0
	if ($$ItemTemMovimentacao^VARINART(pItem,pLocal)) {
		while (+$$GetEstoqueOnHandAtDate^VARReposicao(pItem,pLocal,,,data) = 0) {
			set totalDiasZerado = totalDiasZerado + 1
			set data = $increment(data,-1)
			if (data <= 0) { quit }
		}
	}
	else {
		set totalDiasZerado = +$horolog - $$$INARTDateCreated($get(^INART(0,pItem,1)))
	}
	
	quit totalDiasZerado

GetRecebimentoProcessado(pidCompra="", pidProduto="")
	;$$GetRecebimentoProcessado^VARPainelAbastecimentoUtils(Compra, Produto)
	;-------------------------------------------------------------------------------
    ; Descrição:
	;
    ; Histórico:
    ;
    ;-------------------------------------------------------------------------------	
	quit:(pidCompra="") ""
	
	new idRecebimento, objRecebimento, statusRec, dteRecebida, numNotaFiscal, qtyRecebida, idCompraLinha,
		lstHeader, idRecebimentoLinha, objRecebimentoLinha, idProduto, descProduto, countRec, qtyEstorno, 
		qtyEstornoProduto, strText

	set countRec = 0
	
	set strText = ""
    			    							 	
	//Recebimentos
	$$$Order4(^INRECSummarys,YM,1,$$$Index(pidCompra),idCompraLinha)

		$$$Order5(^INRECSummarys,YM,1,$$$Index(pidCompra),idCompraLinha,idRecebimento)
		
		set objRecebimento = $get(^INREC(YM,idRecebimento,1))

		set statusRec     = $piece(objRecebimento,Y,4)
		set dteRecebida   = $zdate($piece(objRecebimento,Y,8),4)
		set numNotaFiscal = $piece(objRecebimento,Y,14)
				
		if (statusRec > 0) {
 			
 			$$$Order6(^INRECSummarys,YM,1,$$$Index(pidCompra),idCompraLinha,idRecebimento,idRecebimentoLinha)
	    		
	    		set objRecebimentoLinha = $get(^INRECSummary(YM,idRecebimento,idRecebimentoLinha,1))

				// verifica se a linha é diferente do tipo produto
				continue:($$$INRECSummaryLineType(objRecebimentoLinha) '= 0)
	    		
	    		set idProduto   = $piece(objRecebimentoLinha,Y,6)
	    		set qtyRecebida = $piece(objRecebimentoLinha,Y,33)
	    		set descProduto = $$SQLGetDescricaoProduto^VARSQL(idProduto)
	    		
	    		continue:((pidProduto'="") && (pidProduto'=idProduto))

	  			set countRec = $i(countRec)
	  			
	  			set:((strText="") && (strText'[idRecebimento)) strText = idRecebimento_"||"_dteRecebida
	  			set:((strText'="") && (strText'[idRecebimento)) strText = strText_"~"_idRecebimento_"||"_dteRecebida
	  			   				            				              	      	     	   		       			  		 			
 			$$$End
		}
		$$$End
	$$$End
	
	quit strText
	
	
ListarEntregas(pidCompra,pidProduto)
	;$$ListarEntregas^VARPainelAbastecimentoUtils(Compra, Produto)
	;-------------------------------------------------------------------------------
    ; Descrição: 
    ;	Lista todas as entregas de uma Ordem de Compra.
    ;
    ;-------------------------------------------------------------------------------
	new strStatus, listaStatusEntregas, linhaCompra, cabecalhoJaImpresso, lstHeader,
		objCompra, numEntrega, objEntrega, PrazoDeEntrega, listaEntregas,
		i, linhaDaCompra, objlinhaDaCompra, idProduto, qtyCompra, nomeProduto, objLinhaEntrega,
		qtdEntrega, somaQtdEntregas, objPedidoCompra, idCompraEntrega, DataDeEntrega , tipoEntrega, strEntrega
		
	set strEntrega = ""
		
	quit:(($get(pidCompra) = "") || ($get(pidProduto) = "")) ""
	
	$$$VAR
	
	set tipoEntrega = $$$INAUFFREE22($get(^INAUF(YM,pidCompra,1)))
 	
	$$$Order3(^VARCompraEntrega,YM,pidCompra,idCompraEntrega)
		
		set objEntrega = $get(^VARCompraEntrega(YM,pidCompra,idCompraEntrega,1))
		quit:($get(objEntrega)="")
		
		set listaEntregas(idCompraEntrega) = objEntrega
		
	$$$End
	
	if '((tipoEntrega = 0) || (tipoEntrega = "")){
		
			set linhaDaCompra = ""
			for i=1:1 {
				set linhaDaCompra = $order(^INAUFP(YM,pidCompra,linhaDaCompra))
				quit:(linhaDaCompra = "")
			
				set objlinhaDaCompra = $get(^INAUFP(YM,pidCompra,linhaDaCompra,1))
				continue:(objlinhaDaCompra = "")
			
				set idProduto = $piece(objlinhaDaCompra,Y,4)
				set qtyCompra = +$piece(objlinhaDaCompra,Y,5)
				
				continue:idProduto'=pidProduto
				;set nomeProduto = $$SQLGetDescricaoProduto^VARSQL(idProduto)
						
				set numEntrega = "",somaQtdEntregas = 0
				
				; Quantidade de entregas por data
				for {
					set numEntrega = $order(listaEntregas(numEntrega))
					quit:(numEntrega = "")
 
					set linhaEntrega = $order(^VARCompraEntregaLinhas(YM,1,$$^WWWUMLAU(pidCompra,1),linhaDaCompra,numEntrega,""))
					if ( $get(linhaEntrega) '= "" ) {
						set objLinhaEntrega = $get(^VARCompraEntregaLinha(YM,pidCompra,numEntrega,linhaEntrega,1))
						set qtdEntrega = $piece(objLinhaEntrega,Y,2)
						
						set objEntrega 		= listaEntregas(numEntrega)
						set PrazoDeEntrega 	= $piece(objEntrega,Y,1)
						set DataDeEntrega 	= $piece(objEntrega,Y,2)
						
						if (+DataDeEntrega > 0) set DataDeEntrega = $zdate(DataDeEntrega,4)
						
						if (DataDeEntrega = "") set DataDeEntrega = "Data Indefinida"
						; Formato do texto
						; Data		 - Qtde (Porcentagem)
						; 10/10/2015 - 300  (30%)
						if (strEntrega '= "") {
							set strEntrega = strEntrega _ ";"
						}
						
						if (qtyCompra = 0) {
							set strEntrega = strEntrega _ DataDeEntrega _ " - " _ qtyCompra
						} else {
							set strEntrega = strEntrega _ DataDeEntrega _ " - " _ qtdEntrega_" ("_$normalize(qtdEntrega/qtyCompra*100,1)_"%)"
						}
 
						set somaQtdEntregas = somaQtdEntregas + qtdEntrega
					}
				}
			}
	}
	
	if ($get(strEntrega) = "") set strEntrega = "Data indefinida"
	
	quit strEntrega
	
GetTotalRecebido(pidCompra,pidProduto)
	;$$GetTotalRecebido^VARPainelAbastecimentoUtils(pidCompra,pidProduto)
    ;-------------------------------------------------------------------------------
    ; Descrição:
    ;   Recupera os recebimentos processados para a AFM.
    ;
    ;	Formato do retorno 
    ;   Recebimento~Data de Processamento do Recebimento
    ;	Ex:15/000001~63549
    ;-------------------------------------------------------------------------------    
    quit:(($get(pidCompra) = "") || ($get(pidProduto) = "")) ""
    
    $$$VAR
    
    new qtyTotal,idLinha,objINAUFP,idProduto
    
    set qtyTotal = 0
    
    set (idLinha,objINAUFP,idProduto) = ""
    
    $$$Order3(^INAUFP,YM,pidCompra,idLinha)
    	set objINAUFP = $get(^INAUFP(YM,pidCompra,idLinha,1))
    	continue:objINAUFP=""
    	
    	set idProduto = $$$INAUFPItemNumber(objINAUFP)
    	continue:idProduto'=pidProduto
    	
    	set qtyTotal = qtyTotal + $$getQuantidadeRecebida^VARCompra(pidCompra,idLinha)
    $$$End
 
    quit qtyTotal
    
GetSaldoRestanteAFM(pidCompra,pidProduto)
    ;-------------------------------------------------------------------------------
    ; Descrição:
    ;   Recupera o saldo restante da AFM.
    ;
    ;-------------------------------------------------------------------------------    
    quit:(($get(pidCompra) = "") || ($get(pidProduto) = "")) ""
    
    $$$VAR
    
    new listHeader, idCompraLinha, objCompra, descProduto, idProduto, qtyCompra, qtyTotalRecebida,
        qtyTotalEstornada, qtyRestante, blnSaldoRestante, strStatus, objReport, stKey, blnEncerrado, valor, valorTotal
        
    //Monta cabeçalho da tabela
    set blnSaldoRestante = $$$NO
    set valorTotal = 0
    set qtyRestante = 0
                                                                                        
    $$$Order3(^INAUFP,YM,pidCompra,idCompraLinha)
        
        set objCompra = $get(^INAUFP(YM,pidCompra,idCompraLinha,1))
        
        set idProduto = $piece(objCompra,Y,4)
        set qtyCompra = $piece(objCompra,Y,5)
        
        continue:idProduto'=pidProduto
        
        set qtyTotalRecebida  = $$getQuantidadeRecebida^VARCompra(pidCompra,idCompraLinha)
        
        set qtyRestante = qtyCompra - qtyTotalRecebida
 
		set valor			  = qtyRestante * +$$$INAUFPFREE7(objCompra)
		set valorTotal 		  = valorTotal + valor
    $$$End
    
        
    quit qtyRestante
    
    
GetZeradosBySituacaoEstoqueLocalGrupo(pGrupo, pSituacao)
	;GetZeradosBySituacaoEstoqueLocalGrupo^VARPainelAbastecimentoUtils()
	new Total
	
	set Total = 0
	
	&SQL(SELECT
	    count(CodigoProduto) AS QuantidadeProduto
	    into:Total
		FROM SQLUser.VARAlertaLocalLinha

		WHERE 1=1
		AND $$GetPadrao^VARAlertaLinha(CodigoProduto) = 1 
		AND $$GetSituacaoAlertaLocal^VARPainelAbastecimentoUtils(CodigoProduto, Location, NVL(EstoqueAbaixoPR,0), NVL(EstoqueAbaixoPRcomEP,0), NVL(EstoqueProximoPR,0), NVL(EstoqueAcimaPR,0), NVL(EstoqueAcimaEM,0)) = :pSituacao
		AND CoberturaEstoque = 0
		AND $$SQLGetGrupoItem^VARSQL(CodigoProduto) = :pGrupo
		
		GROUP BY $$GetSituacaoAlertaLocal^VARPainelAbastecimentoUtils(CodigoProduto, Location, NVL(EstoqueAbaixoPR,0), NVL(EstoqueAbaixoPRcomEP,0), NVL(EstoqueProximoPR,0), NVL(EstoqueAcimaPR,0), NVL(EstoqueAcimaEM,0)), $$SQLGetGrupoItem^VARSQL(CodigoProduto))
	
	quit Total

ValidaLocalZerados(pLocal)
	;$$ValidaLocalCentral^VARPainelAbastecimentoUtils()
	;--------------------------------------------------------------------------
	; Descrição:
	;	Utilização para querys // 
	;   Retorna 1 caso o local informado conste nos locais centrais
	;   nos parâmetros do cliente
	;	
	;--------------------------------------------------------------------------
	new Locais
		
	set Locais = $$$VARParametroClienteUnidadesRegionais($get(^VARParametroCliente(0,0,1)))
	if ($$$VARParametroClienteLocaisCentrais($get(^VARParametroCliente(0,0,1))) '= ""){
		set Locais = Locais_";"_$$$VARParametroClienteLocaisCentrais($get(^VARParametroCliente(0,0,1)))
	}
	
	set Locais = ";"_Locais_";"
	set pLocal = ";"_pLocal_";"
	
	quit:($find(Locais,pLocal)) 1
	
	quit 0
	
PrintLogExecucao()
	new objUltimaExecucao, dataUltimaExecucao, horaUltimaExecucao
	
	;Sai caso não tenha log de execução
 	quit:('$data(^VARPainelAbastecimentoRun(0,0,1)))
	
	set objUltimaExecucao  = $get(^VARPainelAbastecimentoRun(0,0,1))
	set dataUltimaExecucao = $piece(objUltimaExecucao,"~",1)
	set horaUltimaExecucao = $piece(objUltimaExecucao,"~",2)

	write "<br />"

	write "<div class='col-md-12' style='border-width:1px;border-style:solid;line-height:18px;width:920px;border-color:#C9C9C9;padding-left:10px;padding-top:7px;padding-bottom:7px;background-color:#E3E3E3;font-weight:normal;font-size:13px;'>"
	write "		<strong>Atalhos desta tela:</strong><br />"
	write "		&nbsp;&nbsp;1. Em ambos os quadrantes, está disponível links para o detalhe das números apresentados.<br />"	
	write "</div>"
	
	write "<div class='col-md-12'>&nbsp;&nbsp;</div>"
	
	write "<div class='col-md-12' style='border-width:1px;border-style:solid;line-height:18px;width:920px;border-color:#C9C9C9;padding-left:10px;padding-top:7px;padding-bottom:7px;background-color:#E3E3E3;font-weight:normal;font-size:13px;'>"
	write "		<strong>Orientações gerais para o uso da tela:</strong><br />"
	write "		&nbsp;&nbsp;1. "_$$getTextLogExecucao(dataUltimaExecucao,horaUltimaExecucao)_"<br />"
	write "		&nbsp;&nbsp;2. Somente são apresentados nesta consulta os produtos que estão marcados no Cadastro de Produtos como Padronizados.<br />"
	write "		&nbsp;&nbsp;3. Os produtos na categoria 'Sem dados de Planejamento' são recém-padronizados ou não possuem registros de consumo nos últimos 12 meses.<br />"
	write "		&nbsp;&nbsp;4. A cobertura de estoque da Central ou da Unidade está condicionado ao cadastro de parâmetros de reposição, itens sem essa configuração não são apresentados nos grids."
	write "</div>"

	write "<br / >"	
	
	quit

getTextLogExecucao(dataUltimaExecucao,horaUltimaExecucao)
	quit "Os dados acima foram gerados em <strong>"_$zdate(dataUltimaExecucao,4)_"</strong> às <strong>"_$extract($ztime(horaUltimaExecucao),1,5)_"</strong>."
	

]]></Routine>
</Export>