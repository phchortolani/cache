<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INADJLineScan" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INADJLineScan
	
#include COMGridEdit31
#include INConst
#include %occInclude
#def1arg WWWDATEN(%args) ^WWWDATEN(YM,+$horolog,YUSER,YFORM,"V",%args)
#include WWWConst
#include COMSYS
	
AddScanLine(pidScan)
    ;-------------------------------------------------------------------------------
    ; Routine to Add a new line to a Grid after a Scan is validated
    ;
    ; Assumptions :
    ;  YFORM	-	 Form Name
    ; 
    ; Returns:
    ; 	Status
    ;
    ; History:
    ; 10-Oct-2013	SCR		CORE-266: Always copy Reason Code from Header
	; 08-Oct-2013	SCR		CORE-266: Add Owner & Program to Scan code
    ; 28-Jun-2012	SLV		Copied and adapted from InDispenseToPatientLineScan
    ; 20-Jul-2009	PPP		SR16773: ScanDelimiter is a function now
    ; 23-Jun-2009	PPP		SR16510: Updated for User defined policies
    ; 25-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	new arrBundle,arrFields,blnItemExists,idBundle,idClass,idData,idFromLocn
 	new idItem,idLine,idLot,idStorage,idToLocn,idType,objData,objHeader,objLine
 	new objOldData,sc,strDelim,strKey,strStatus,objItemAttib,arrItemAttrib
 	
 	set strDelim = $$$ScanDelim
 	
	set idItem = ""	
	if $get(YFORM)'="" {
		set idClass       = $$$GetClass(YFORM)
		set objLine       = ""
		set idItem        = $piece(pidScan,strDelim,1)               //SR16773
		set idLot         = $piece(pidScan,strDelim,2)               //SR16773
		set objHeader     = $$$GRIDYFELDContainer
	 	set idFromLocn    = $$$INADJSiteLocation(objHeader)
  		set blnItemExists = $$$NO
  		
  		set idINADJ       = $$$KEY1($$$GRIDYKEYContainer)
 
 		// For Picking Screens Only
 		// arrBundle(Bundle ID ,Storage ID) = Qty
		if (idLot'="") {
 			set sc = $$GetBundleData^WWW120Scan(idItem,idFromLocn,idLot,.arrBundle,.idBundle,.idStorage)	//SR16510
 		}
 		else {
 			set sc = $$GetBundleForAttData^WWW120Scan(idItem,idFromLocn,pidScan,.arrBundle,.idBundle,.idStorage)
 		}
  
 		if $$$ISERR(sc) set strStatus = $$ISStatusToDLStatus^COMUtilError(sc) quit strStatus    //EARLY EXIT
		
		//Process only if Bundle Exist for the Item/Lot combination and has Qty
		if $get(idBundle)'="" {
 
			//Get the data for the Item if it already exists
			//Need to update arrBundle if lines already exist
			//** INADJLine dont have bundle **
		//	set idLine = $$GetExistingItemRowData(idItem,.idBundle,.idStorage,.arrBundle,.blnItemExists)
			set idLine = $$GetRowLineWithQtyChecks^COMGridEdit31Scan(idItem, 
			                                                         $$$FldINADJLineItem, 
			                                                         $$$FldINADJLineLotNumber,
			                                                         $$$FldINADJLineStockLocation, 
			                                                         $$$FldINADJLineQuantity, 
			                                                         .idBundle, 
			                                                         .idStorage, 
			                                                         .arrBundle, 
			                                                         .blnItemExists,
			                                                         $$$FldINADJLineLotNumber,
			                                                         idLot)
			
			set (objLine,objOldData) = $$$GRIDGetYFELD(idLine)
			set strOrigItemLot 		 = $$$INADJLineLotNumber(objLine)
			
			if ((idLine) && (idLot'="") && (idLot = strOrigItemLot)) {
					
				set $$$INADJLineQuantity(objLine)  		= $$$INADJLineQuantity(objLine) - 1
				set $$$INADJLineBaseQuantity(objLine) 	= $$$INADJLineBaseQuantity(objLine) - 1
				set $$$INADJLineFREE1(objLine)   		= $$$INADJLineFREE1(objLine) + 1 
				
				kill arrFields
				//set the array for the fields that are updated
				set arrFields($$$FldINADJLineQuantity)		= $$$INADJLineQuantity(objLine)		//UPDATE
				set arrFields($$$FldINADJLineBaseQuantity)	= $$$INADJLineBaseQuantity(objLine)
				set arrFields($$$FldINADJLineFREE1)			= $$$INADJLineFREE1(objLine)	
				
				set YLFN = $$$FldINADJLineItem //Avoid error at OnBlur^INADJLine
				
				//Updates the Row and Displayes it (for existing lines)
				//If the row is on another page displays the lines at the top of the grid
				do UpdateRow^COMGridEdit31Scan(YFORM, idLine, .arrFields, objOldData)
	 
			} else {
				if $get(idBundle)'="" {
					if (blnItemExists = $$$YES) {
						set idOriginalLine = $$GetINADJLine(idINADJ,idItem)
						if idOriginalLine'="" {
							set strStatus = $$DuplicateOnly^COMGridEdit31Scan(idINADJ_$$$COMMA_idOriginalLine,.objLine,.strKey)
							
							set objItemAttib = ##class(alSOH.iBundle).GetAttributesForBundle(idBundle,.arrItemAttrib)

							set $$$INADJLineItem(objLine)           = idItem                             
							set $$$INADJLineQuantity(objLine)   	= - 1
							set $$$INADJLineBaseQuantity(objLine)   = - 1 
							set $$$INADJLineFREE1(objLine)   		= 1 
							set $$$INADJLineUnit(objLine)           = $$$INARTUnitofMeasure($get(^INART(YM,idItem,1)))
							set $$$INADJLineStockLocation(objLine)  = idStorage
							set $$$INADJLineBrand(objLine)   	    = $get(arrItemAttrib("Brand"))
							set $$$INADJLineOwner(objLine)			= $get(arrItemAttrib("Owner"))
							set $$$INADJLineProgram1(objLine)			= $get(arrItemAttrib("Program"))
							set $$$INADJLineExpirationDate(objLine) = ##class(alSOH.iBundle).GetUseByDate(idBundle)
							set $$$INADJLineLotNumber(objLine)      = ##class(alSOH.iBundle).GetLotNumber(idBundle)
							set $$$INADJLineReasonCode(objLine)  	= $$GetReasonCode^INADJLine()
							
							do AddLine^COMGridEdit31Add(objLine,strKey,,$$$YES,"",$$$YES,$$$NO,$$$NO)
							do UpdateContainer^COMGridEdit31G()
						}
					}
					else {
						if $get(idBundle)'="" {
							set objItemAttib = ##class(alSOH.iBundle).GetAttributesForBundle(idBundle,.arrItemAttrib)
					
							set $$$INADJLineItem(objLine)           = idItem                             
							set $$$INADJLineQuantity(objLine)   	= - 1
							set $$$INADJLineBaseQuantity(objLine)   = - 1 
							set $$$INADJLineFREE1(objLine)   		= 1 
							set $$$INADJLineUnit(objLine)           = $$$INARTUnitofMeasure($get(^INART(YM,idItem,1)))
							set $$$INADJLineStockLocation(objLine)  = idStorage
							set $$$INADJLineBrand(objLine)   	    = $get(arrItemAttrib("Brand"))
							set $$$INADJLineOwner(objLine)			= $get(arrItemAttrib("Owner"))
							set $$$INADJLineProgram1(objLine)			= $get(arrItemAttrib("Program"))
							set $$$INADJLineExpirationDate(objLine) = ##class(alSOH.iBundle).GetUseByDate(idBundle)
							set $$$INADJLineLotNumber(objLine)      = ##class(alSOH.iBundle).GetLotNumber(idBundle)
							set $$$INADJLineReasonCode(objLine)  	= $$GetReasonCode^INADJLine()
							
							$$$GRIDAddLine(objLine)
						}
					}					
				} else {
					set strStatus = $$$MakeStatus("IN01039")
				}   ; "Cannot Add Lines to Current Record"
			}		
			
		} else {
			set strStatus = $$$MakeStatus("IN01040",idItem,idFromLocn)
		}   ; "Stock Unavailable for Item %1 at Location %2"
 
	}
		
	quit $$$OK
	
GetINADJLine(pidINADJ, pidItem)
    ;-------------------------------------------------------------------------------
    ; Get the INADJLine associated with the given Item
    ; Assumptions :
    ;  YFORM	-	 Form Name
    ; 
    ; Returns:
    ; 	idLine
    ;
    ; History:
    ; 23-Jun-2009	PPP		SR16510: Created
    ;-------------------------------------------------------------------------------
	new idINADJLine,objINADJLine

	set idINADJLine = ""
	for {
		set idINADJLine = $order(^INADJLine(YM,pidINADJ,idINADJLine))
		quit:idINADJLine=""

		set objINADJLine = $get(^INADJLine(YM,pidINADJ,idINADJLine,1))
		if $$$INIssueRevLineItemNo(objINADJLine) = pidItem quit
	}
	
	quit idINADJLine
]]></Routine>
</Export>