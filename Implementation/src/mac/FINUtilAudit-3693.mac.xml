<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINUtilAudit" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINUtilAudit
	;-------------------------------------------------------------------------------
	;  Finance Audit Utilities
	;  
	;  Interface batches sometimes fail to post because they are out of balance.
	;  This normally only reports the nett total so the audit tool IntBatch^FINUtilAudit
	;  will provide further information.
	;  
	;  Run from command prompt.
	;		do IntBatch^FINUtilAudit(BatchNo)
	;-------------------------------------------------------------------------------
	;   see also : 
	;   	FININTUtil
	;   	FININTUtil2
	;-------------------------------------------------------------------------------
	
IntBatch(pidBatch)
	;-------------------------------------------------------------------------------
	;  Interface Batch Check - batch not in balance - why?
	;  
	; History:
	; 02-Mar-2007	GRF		SR15462: Created
	;-------------------------------------------------------------------------------
	new arrLine,arrTotal,curAmount,idBlock,idLine,idxMajor,idxMinor,objFIBLine
	
	quit:$get(pidBatch)=""
	do ^WWWVAR
	
	; 1. Generate Totals by block
	;---------------------------------------
	set idLine = ""
	for {
		set idLine = $order(^FININTBatchLine(YM,pidBatch,idLine))
		quit:idLine=""
		
		set objFIBLine = $get(^FININTBatchLine(YM,pidBatch,idLine,1))
		set idBlock    = $piece(objFIBLine,Y,1)
		set curAmount  = $piece(objFIBLine,Y,3)
		if idBlock="" {
			write !,"Bad Block Number : ",idLine
		} else {
			set arrTotal(idBlock)       = $get(arrTotal(idBlock)) + curAmount
			set arrLine(idBlock,idLine) = ""
		}
	}
	
	; 2. Check Totals by block
	;---------------------------------------
	set idBlock = ""
	for {
		set idBlock = $order(arrTotal(idBlock))
		quit:idBlock=""
		
		if +arrTotal(idBlock)'=0 {
			write !,"Block ",idBlock," balance : ",arrTotal(idBlock)
			set idLine=""
			for {
				set idLine=$order(arrLine(idBlock,idLine))
				quit:idLine=""
				
				write !,"   Line ",idLine," : ",$piece($get(^FININTBatchLine(YM,pidBatch,idLine,1)),Y,1,10)
			}
		}
	}
	
	; 3. Check duplicate blocks in index [One record overwritten by another]
	;---------------------------------------
	set idxMajor = ""
	for  {
		set idxMajor = $order(^FININTBatchLines(YM,1,pidBatch,idxMajor))
		quit:idxMajor=""
		
		set idxMinor = ""
		for  {
			set idxMinor = $order(^FININTBatchLines(YM,1,pidBatch,idxMajor,idxMinor))
			quit:idxMinor=""
			
			set idLine = ""
			for  {
				set idLine = $order(^FININTBatchLines(YM,1,pidBatch,idxMajor,idxMinor,pidBatch,idLine))
				quit:idLine=""
				
				set objFIBLine = $get(^FININTBatchLine(YM,pidBatch,idLine,1))
				set idBlock    = $piece(objFIBLine,Y,1)
				if idBlock'=idxMajor {
					write !,"Line ",idLine," is in block ",idBlock," and also indexed as block ",idxMajor
				}
			}
		}
	}
	
	quit
	
MatchSource(pidBatch,pidLine)
	;-------------------------------------------------------------------------------
	;  Match lines in Interface Batch based on Source
	;  5.	Parameters
	;  6.	Source
	;  7.	Reference
	; History:
	; 02-Mar-2007	GRF		SR15462: Created
	;-------------------------------------------------------------------------------
	new idLine,objFIBLine,strMatch,strSource
	
	quit:($get(pidBatch)="")||($get(pidLine)="")
 
	set objFIBLine = $get(^FININTBatchLine(YM,pidBatch,pidLine,1))
	set strMatch   = $piece(objFIBLine,Y,6)
	
	set idLine = ""
	for {
		set idLine = $order(^FININTBatchLine(YM,pidBatch,idLine))
		quit:idLine=""
		
		set objFIBLine = $get(^FININTBatchLine(YM,pidBatch,idLine,1))
		set strSource  = $piece(objFIBLine,Y,6)
		if strSource=strMatch {
			write !,$justify(idLine,4)," ",$piece(objFIBLine,Y,1,10)
		}
	}
	
	quit
	
	
]]></Routine>
</Export>