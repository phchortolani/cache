<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INWEINVCount" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INWEINVCount
	;###############################################################################
	;  
	;  STOCKTAKE BEING RE-WRITTEN TO USE STOCK BUNDLES
	;  SOME FUNCTIONALITY NOW UNDER ROUTINE : INStocktakeCount
	;  
	;###############################################################################	
	
#include COMSYS
#include INConst
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INWEINVCount("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
	; This routine for managing the INWEINVCount class
	; INWEINVCount holds count data
	
Create(pfltQty,ptmsCounted)
	;-------------------------------------------------------------------------------
	; Create a new stocktake count object suitable to go in INWEINVCount
	; 
	; INWEINVCount holds the per-count information about a particular stocktake snapshot line
	; 
	; Params: 
	; 	pfltQty			the quantity counted
	; 	ptmsCounted		the timestamp of the count
	;
	; Returns: a new stocktake count object
	;
	; History:
	; 08-Oct-2008	GRF		SR15810: variable prefixes
	; 08-Nov-2007	shobby	SRBR014784:  Undid Shobby's removal of timestamp, now
	; 							changed $$createNewCount
	; 08-Nov-2007	shobby	SRBR014784:  Only save the timestamp when users enter
	; 							data from the screen. 
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	new objINWEINVCount
	
	set objINWEINVCount = ""
	set $$$INWEINVCountQuantity(objINWEINVCount)   = pfltQty
	set $$$INWEINVCountTimestamp1(objINWEINVCount) = ptmsCounted  ;BR014784
	quit objINWEINVCount
	
	
CreateAndStore(pfltQty,ptmsCounted,pidStocktake,pidLine,pidCount) 
	;-------------------------------------------------------------------------------
	; Create a new stocktake count object and save it into INWEINVCount table
	; 
	; INWEINVCount holds the per-count information about a particular stocktake snapshot line
	; 
	; Params: 
	; 	fltQty, the quantity counted
	; 	time, the timestamp of the count
	; 	pidStocktake, stocktake id
	; 	pidLine, line id
	; 	pidCount, count id
	;
	; Returns: a new stocktake count object
	;
	; History:
	; 08-Oct-2008	GRF		SR15810: variable prefixes
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	new objCount,strStatus
	
	set objCount  = $$Create(pfltQty,ptmsCounted)
	set strStatus = $$Save(pidStocktake,pidLine,pidCount,objCount)
	quit objCount
	
	
GetCount(pidStocktake,pidLine,pidCount) 
	;-------------------------------------------------------------------------------
	; get a stocktake count record
	; 
	; Params: 
	; 	pidStocktake, stocktake id
	; 	pidLine, line id
	; 	pidCount, count id
	;
	; Returns: the stocktake count object
	;
	; History:
	; 08-Oct-2008	GRF		SR15810: YM defined by WWWVAR - removed
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
 	new objCount
 	 	
	set objCount = ""
	if '$data(YM) do ^WWWVAR
	
	set pidStocktake = $get(pidStocktake)
	set pidLine      = $get(pidLine)
	set pidCount     = $get(pidCount)
	
	if (pidStocktake'="") && (pidLine'="") && (pidCount'="") {
		set objCount=$get(^INWEINVCount(YM,pidStocktake,pidLine,pidCount,1))
	}
	quit objCount
	
	
Save(pidStocktake,pidLine,pidCount,pobjCount)
	;-------------------------------------------------------------------------------
	; save a stocktake count object into the INWEINVCount table
	; 
	; Params: 
	; 	pidStocktake, stocktake id
	; 	pidLine, line id
	; 	pidCount, count id
	; 	pobjCount, a stocktake count object
	;
	; Returns: the $$$Save status
	;
	; History:
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	new strKeys,strStatus
	
	set strKeys   = pidStocktake_","_pidLine_","_pidCount
	set strStatus = $$$Save("INWEINVCount",strKeys,pobjCount,$$$YES)
	quit strStatus	
	
	
GetQty(pidStocktake,pidLine,pidCount)
	;-------------------------------------------------------------------------------
	; get the quantity from a particular count
	; 
	; Params: 
	; 	pidStocktake, stocktake id
	; 	pidLine, line id
	; 	pidCount, count id
	;
	; Returns: the quantity for this count
	;
	; History:
	; 05-Nov-2007	PJones,  BR014730, created
	;-------------------------------------------------------------------------------
	new objCount
	
	set objCount = $$GetCount(pidStocktake,pidLine,pidCount)
	quit $$$INWEINVCountQuantity(objCount)
	
	
SetQty(pidStocktake,pidLine,pidCount,fltQty) 
	;-------------------------------------------------------------------------------
	; set the quantity for a particular count
	; 
	; Params: 
	; 	pidStocktake	stocktake id
	; 	pidLine			line id
	; 	pidCount		count id
	; 	fltQty			the quantity
	;
	; Returns: the status of the save
	;
	; History:
	; 08-Oct-2008	GRF		SR15810: variable prefixes
	; 25-Nov-2007	PJones	created
	;-------------------------------------------------------------------------------
	new objCount
	
	set objCount = $$GetCount(pidStocktake,pidLine,pidCount)
	set $$$INWEINVCountQuantity(objCount) = fltQty
	quit $$Save(pidStocktake,pidLine,pidCount,objCount)
	
	
SetTimestamp(pidStocktake,pidLine,pidCount,tmsCounted) 
	;-------------------------------------------------------------------------------
	; History:
	; 08-Oct-2008	GRF		SR15810: variable prefixes
	;-------------------------------------------------------------------------------
	new objCount
	
	set objCount = $$GetCount(pidStocktake,pidLine,pidCount)
	set $$$INWEINVCountTimestamp1(objCount) = tmsCounted
	quit $$Save(pidStocktake,pidLine,pidCount,objCount)
	
	
CopyObjLineFromObjCount(pobjINWEINV,pobjINWEINVCount) 
	;-------------------------------------------------------------------------------
	; Copies object INWEINVCount -> INWEINV 
	; 				count        -> stock-take line
	; 				
	; Params: 
	; 	objINWEINV, object from INWEINV (the stocktake line table)
	; 	objINWEINVCount	object from INWEINVCount (the stocktake count table)
	;
	; Returns: a modified copy of objINWEINV updated from the count
	;
	; History:
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	set $$$INWEINVActualQuantity(pobjINWEINV) = $$$INWEINVCountQuantity(pobjINWEINVCount)
	set $$$INWEINVCountTimestamp(pobjINWEINV) = $$$INWEINVCountTimestamp1(pobjINWEINVCount)
	quit pobjINWEINV
	
	
CopyObjCountFromObjLine(pobjINWEINVCount,pobjINWEINV) 
	;-------------------------------------------------------------------------------
	; Copies object INWEINV         -> INWEINVCount
	; 				stock-take line -> count
	; 				
	; Params: 
	; 	objINWEINV, object from INWEINV (the stocktake line table)
	; 	objINWEINVCount	object from INWEINVCount (the stocktake count table)
	;
	; Returns: a modified copy of objINWEINVCount updated from the line
	;
	; History:
	; 21-Sep-2010	PPP		SR17556: Reverse SR17230, cannot enter 0 otherwise ie (0'="")
	; 19-Mar-2010	GRF		SR17230: Use "if +x'=+y" rather than if" x'=y"
	; 04-Aug-2009	PPP		SR16816: Don't update if the Count Qty does not change
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	$$$LogR("CopyObjCountFromObjLine",$$$INWEINVActualQuantity(pobjINWEINV)_Y_$$$INWEINVCountTimestamp(pobjINWEINV))
	//SR16816
	
	;if $$$INWEINVCountQuantity(pobjINWEINVCount)'=$$$INWEINVActualQuantity(pobjINWEINV) { SR17230
	//if +$$$INWEINVCountQuantity(pobjINWEINVCount)'=+$$$INWEINVActualQuantity(pobjINWEINV) {	//SR17230  	//SR17556
	if $$$INWEINVCountQuantity(pobjINWEINVCount)'=$$$INWEINVActualQuantity(pobjINWEINV) { 		//SR17556
	;	FIXME :" Do we need to skip if ActualQty or CountTimestamp is null for Manager's View updates?
		set $$$INWEINVCountQuantity(pobjINWEINVCount)   = $$$INWEINVActualQuantity(pobjINWEINV)
		set $$$INWEINVCountTimestamp1(pobjINWEINVCount) = $$$INWEINVCountTimestamp(pobjINWEINV)
	}
	quit pobjINWEINVCount
	
	
CopyObjLineFromCount(pidStocktake,pidLine,pidCount) 
	;-------------------------------------------------------------------------------
	; Copies from table INWEINVCount  -> objINWEINV
	; 					count         -> stock-take line
	; 				
	; Params:
	; 	pidstocktake, the stocktake id
	; 	pidLine, the line id
	; 	pidCount, the count id 
	;
	; Returns: a modified copy of an objINWEINV updated from the line specified by the arguments
	;
	; History:
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	new objINWEINV,objINWEINVCount,strKeys
	
	$$$LogR("CopyLineFromCount",pidStocktake_","_pidLine_","_pidCount)
	
	set objINWEINV      = $$GetStocktakeLine^INStocktaking(pidStocktake,pidLine)
	set objINWEINVCount = $$GetCount(pidStocktake,pidLine,pidCount)
	set objINWEINV      = $$CopyObjLineFromObjCount(objINWEINV,objINWEINVCount)
	set $$$INWEINVLastCount(objINWEINV) = pidCount
	quit objINWEINV
	
	
CopyLineFromCount(pidStocktake,pidLine,pidCount) 
	;-------------------------------------------------------------------------------
	; Copies from table INWEINVCount  -> INWEINV
	; 					count         -> stock-take line
	; 				
	; Params:
	; 	pidstocktake, the stocktake id
	; 	pidLine, the line id
	; 	pidCount, the count id 
	;
	; Returns: the status from $$$Save for the attempt to update INWEINV
	;
	; History:
	; 11-Nov-2007	shobby	BR014730: Code check
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	new objINWEINV
	
	$$$LogR("CopyLineFromCount",pidStocktake_","_pidLine_","_pidCount)
	
	set objINWEINV = $$CopyObjLineFromCount(pidStocktake,pidLine,pidCount) 
	quit $$SaveLine^INStocktaking(pidStocktake,pidLine,objINWEINV)
	
	
CopyCountFromLine(pidStocktake,pidLine,pidCount) 
	;-------------------------------------------------------------------------------
	; Copies from table INWEINV         -> INWEINVCount
	; 					stock-take line -> count
	;
	; 				
	; Params:
	; 	pidstocktake, the stocktake id
	; 	pidLine, the line id
	; 	pidCount, the count id 
	;
	; Returns: the status from $$$Save for the attempt to update INWEINVCount
	;
	; History:
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	new objINWEINV,objINWEINVCount,strKeys
	
	$$$LogR("CopyCountFromLine",pidStocktake_","_pidLine_","_pidCount)
	
	set objINWEINV = $get(^INWEINV(YM,pidStocktake,pidLine,1))
	
	set objINWEINVCount = $$GetCount(pidStocktake,pidLine,pidCount)
	set objINWEINVCount = $$CopyObjCountFromObjLine(objINWEINVCount,objINWEINV)
	set strKeys = pidStocktake_","_pidLine_","_ pidCount
	quit $$$Save("INWEINVCount",strKeys,objINWEINVCount,$$$YES)
	
	
CopySnapshotIntoCounts(pidStocktake,pidCount=1)
	;-------------------------------------------------------------------------------
	; makes INWEINVCount records by copying all items 
	; from a particular stocktake snapshot in INWEINV
	; 				
	; Params:
	; 	pidstocktake, the stocktake id
	; 	pidCount, the count id, can be used to over-ride the default initial count number of 1
	;
	; Returns: nothing
	;
	; History:
	; 18-Mar-2010	GRF		Replace $order
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	new idLine
	
	set idLine = ""
	for {
		set idLine = $order(^INWEINV(YM,pidStocktake,idLine))
		quit:idLine=""

		do CopyCountFromLine(pidStocktake,idLine,pidCount)
	}
	quit 
	
	
GetINWEINVwithLatestCount(pidStocktake,pidLine)
	;-------------------------------------------------------------------------------
	; gets an INWEINV line object updated with the latest count value
	; 	
	; Params:
	; 	pidstocktake, the stocktake id
	; 	pidLine, the count id, can be used to over-ride the default initial count number of 1
	;
	; Returns: a copy of the INWEINV line object updated with the latest count information
	;
	; History:
	; 26-Nov-2007	PJones	Minor changes 
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	new idCount,objCount,objLine
	
	set objLine  = $$GetStocktakeLine^INStocktaking(pidStocktake,pidLine)
	set idCount  = $$GetHighestCount(pidStocktake,pidLine)
	set objCount = $$GetCount(pidStocktake,pidLine,idCount)
	set objLine  = $$CopyObjLineFromObjCount(objLine,objCount)
	set $$$INWEINVLastCount(objLine) = idCount
	quit objLine
	
	
GetMostRecentCountObj(pidStocktake,pidLine)
	quit $$GetCount(pidStocktake,pidLine,$$GetHighestCount(pidStocktake,pidLine))
	
	
GetMostRecentCountQty(pidStocktake,pidLine)
	quit $$$INWEINVCountQuantity($$GetMostRecentCountObj(pidStocktake,pidLine))
	
	
GetLastTimestampFormatted(pidStocktake,pidLine,pidCount="")
	;-------------------------------------------------------------------------------
	; Returns (a formatted) timestamp of the last count equal to or less than
	; the specified count to display as a readonly field in the lines of the
	; 'Edit Stocktake Count' screen.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 28-Nov-2007	shobby	SRBR014798: Created
	;-------------------------------------------------------------------------------
	new dteTimestamp
	
	set dteTimestamp = $$GetLastTimestamp(pidStocktake,pidLine,.pidCount)
	if dteTimestamp'="" set dteTimestamp = $$^WWWTR(0,14,dteTimestamp)_"("_pidCount_")"
	quit dteTimestamp
	
	
GetLastTimestamp(pidStocktake,pidLine,&pidCount="")
	;-------------------------------------------------------------------------------
	; Returns (a formatted) timestamp of the last count equal to or less than
	; the specified count to display as a readonly field in the lines of the
	; 'Edit Stocktake Count' screen.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 28-Nov-2007	shobby	SRBR014798: Created
	;-------------------------------------------------------------------------------
	new dteTimestamp,intLoop
	
	set dteTimestamp = ""
	if pidCount="" set pidCount = $$GetHighestCount(pidStocktake,pidLine)
	if pidCount'="" {
		for intLoop=pidCount:-1:1 {
			set dteTimestamp = $$$INWEINVCountTimestamp1($$GetCount(pidStocktake,pidLine,intLoop))
			quit:dteTimestamp'=""
		}
	}
	if dteTimestamp'="" set pidCount = intLoop
	quit dteTimestamp
	
	
GetHighestCount(pidStocktake,pidLine)
	;-------------------------------------------------------------------------------
	; the count-id of the most recent count for a particular stocktake and line
	;
	; Params:
	; 	pidstocktake, the stocktake id
	; 	pidLine, the line id,
	;
	; Returns: The last count id
	;
	; History:
	; 26-Nov-2007   PJones	shortened to form suggested by Shobby ... 
	; 15-Nov-2007	PJones	BR014770, created
	;-------------------------------------------------------------------------------
	if '$data(YM) do ^WWWVAR
	quit $order(^INWEINVCount(YM,pidStocktake,pidLine,""),-1) 
	
	
GetCountNearestTo(pidStocktake,pidLine,pidCount)
	;-------------------------------------------------------------------------------
 	; we want count who's id is pidCount 
	; but if it doesn't exist (eg. this is count 3 and we stopped counting this line
	; at count 1)
	; then we want the most recent count (eg. get count 1)
	; 
	; History:
	; 18-Mar-2010	GRF		Reverse test to remove "do nothing" if block
	;-------------------------------------------------------------------------------
	if '$$Exists^INWEINVCount(pidStocktake,pidLine,pidCount) {
		set pidCount = $$GetHighestCount(pidStocktake,pidLine)
	}
	quit pidCount
	
	
GetCountObjNearestTo(pidStocktake,pidLine,pidCount) 
	quit $$GetCount(pidStocktake,pidLine,$$GetCountNearestTo(pidStocktake,pidLine,pidCount) )
	
	
IncrementStocktakeCount(pidStocktake)
	;-------------------------------------------------------------------------------
	; increment the number of counts for a particular stocktake
	;
	; Params:
	; 	pidstocktake, the stocktake id
	;
	; Returns: Nothing
	;
	; History:
	; 18-Mar-2010	GRF		drop test - ""+1 is 1 so else case is enough
	; 15-Nov-2007	PJones	BR014770, created
	;-------------------------------------------------------------------------------
	new intCurrentCount,objStocktake
	
	set objStocktake    = $$GetStocktake^INStocktaking(pidStocktake)
	set intCurrentCount = $$$INWEINVPNumberofCounts(objStocktake)
	set $$$INWEINVPNumberofCounts(objStocktake) = intCurrentCount + 1   ; 18-Mar-2010 vvv
	;if intCurrentCount = "" {
	;	set $$$INWEINVPNumberofCounts(objStocktake) = 1
	;} else {
	;	set $$$INWEINVPNumberofCounts(objStocktake) = intCurrentCount + 1
	;}
	do SaveStocktake^INStocktaking(pidStocktake,objStocktake)
	quit
	
	
CreateFirstCount(pidStocktake)
	;-------------------------------------------------------------------------------
	; Create the first count. Now very simple and direct.
	;
	; Params:
	; 	pidstocktake, the stocktake id
	;
	; Returns: 
	;
	; History:
	; 18-Mar-2010	GRF		Replace $order
	; 15-Nov-2007	PJones	BR014770, created
	;-------------------------------------------------------------------------------
	new objCount,idLine
	
	set idLine = ""
	for {
		set idLine = $order(^INWEINV(YM,pidStocktake,idLine))
		quit:idLine=""

		set objCount = $$CreateAndStore("","",pidStocktake,idLine,1)
	}
	do IncrementStocktakeCount(pidStocktake)
  	quit
  	
  	
GetTarget(pidStocktake,pidLine)
	;-------------------------------------------------------------------------------
	; Params:
	; 	pidstocktake, the stocktake id
	; 	pidLine, the line id,
	;
	; Returns: the target quantity for a particular stocktake and line
	;
	; History:
	; 15-Nov-2007	PJones	BR014770, created
	;-------------------------------------------------------------------------------
	new objLine
	
	set objLine = $$GetStocktakeLine^INStocktaking(pidStocktake,pidLine)
	quit $$$INWEINVTargetQuantity(objLine)
  	
  	
CountEqualsTarget(pidStocktake,pidLine,pidCount) 
	;-------------------------------------------------------------------------------
	; Does the last counted quantity match the snap (Target) quantity?
	;
	; Params:
	; 	pidstocktake, the stocktake id
	; 	pidLine, the line id,
	; 	pidCount, the final id
	;
	; Returns: $$$YES if the last (most recent) count quantity is the same as the target
	; otherwise $$$NO
	;
	; History:
	; 08-Oct-2008	GRF		SR15810: simplify; variable prefixes
	; 15-Nov-2007	PJones	BR014770, created
	;-------------------------------------------------------------------------------
	new fltLastQty,fltTargetQty
	
	set fltLastQty   = +$$GetQty(pidStocktake,pidLine,pidCount) 
	set fltTargetQty = +$$GetTarget(pidStocktake,pidLine)
	
	quit (fltLastQty-fltTargetQty = 0)
	
	
LastEqualsTarget(pidStocktake,pidLine) 
	;-------------------------------------------------------------------------------
	;
	; Params:
	; 	pidstocktake, the stocktake id
	; 	pidLine, the line id,
	;
	; Returns: $$$YES if the last (most recent) count quantity is the same as the target
	; otherwise $$$NO
	;
	; History:
	; 15-Nov-2007	PJones	BR014770, created
	;-------------------------------------------------------------------------------
	new idLastCount
	
	set idLastCount = $$GetHighestCount(pidStocktake,pidLine)
	quit $$CountEqualsTarget(pidStocktake,pidLine,idLastCount)
	
	;+++++++++++++++++++++++++++++++++++++++
	
CreateRuleOneCount(pidStocktake)
	;-------------------------------------------------------------------------------
	;	Creates a new count according to Rule 1 for all lines in the stocktake
	;	"Recount unless last count equals stock-on-hand"
	;
	; Params:
	; 	pidStocktake, the stocktake id
	;
	; Returns: Nothing
	;
	; History:
	; 18-Mar-2010	GRF		Replace $order
	; 15-Nov-2007	PJones	BR014770, created
	;-------------------------------------------------------------------------------
	new idLine,intCurrentCount,objCount
	
	set intCurrentCount = $$$INWEINVPNumberofCounts($$GetStocktake^INStocktaking(pidStocktake))
	
	set idLine = ""
	for {
		set idLine = $order(^INWEINV(YM,pidStocktake,idLine))
		quit:idLine=""
		
		do RuleOne(pidStocktake,idLine,intCurrentCount,intCurrentCount+1)
	}
	do IncrementStocktakeCount(pidStocktake)
  	quit $$$OK
	
	
RuleOne(pidStocktake,pidLine,pidPrevCount,pidNewCount)
	;-------------------------------------------------------------------------------
	; Rule one : always create a new count if previous count qty is different from SOH
	; This routine brings the whole algorithm for one line together in one place
	;
	; Params:
	; 	pidStocktake,	the stocktake id
	; 	pidLine,		the line id,
	; 	pidPrevCount,	id of the last (most recent) count
	; 	pidNewCount,	id of the count to be created
	;
	; Returns: Nothing
	;
	; History:
	; 15-Nov-2007	PJones	BR014770, created
	;-------------------------------------------------------------------------------
	new objLine
	
	set objLine = $$GetStocktakeLine^INStocktaking(pidStocktake,pidLine)
	if $$Exists(pidStocktake,pidLine,pidPrevCount) {
		if '$$LastEqualsTarget(pidStocktake,pidLine) {
			do CreateAndStore("","",pidStocktake,pidLine,pidNewCount)
		}
	} 
	quit
	
	;+++++++++++++++++++++++++++++++++++++++
	
CreateRuleTwoCount(pidStocktake)
	;-------------------------------------------------------------------------------
	;	Creates a new count according to Rule 2 for all lines in the stocktake
	;	"Recount unless last count equals stock-on-hand or earlier count"
	;
	; Params:
	; 	pidStocktake, the stocktake id
	;
	; Returns: 
	;
	; History:
	; 18-Mar-2010	GRF		Replace $order
	; 15-Nov-2007	PJones	BR014770, created
	;-------------------------------------------------------------------------------
	new idLine,intCurrentCount,objCount
	
	set intCurrentCount = $$$INWEINVPNumberofCounts($$GetStocktake^INStocktaking(pidStocktake))
	set idLine = ""
	for {
		set idLine = $order(^INWEINV(YM,pidStocktake,idLine))
		quit:idLine=""
		
		do RuleTwo(pidStocktake,idLine,intCurrentCount+1)
	}
	do IncrementStocktakeCount(pidStocktake)
  	quit $$$OK
  	
  	
RuleTwo(pidStocktake,pidLine,pidNewCount) 
	;-------------------------------------------------------------------------------
	; Rule two : only create a new count if previous count qty is neither same as SOH 
	; nor same as ANY earlier count
	; 
	; Called By : CreateRuleTwoCount
	; 
	; Params:
	; 	pidStocktake,	the stocktake id
	; 	pidLine,		the line id,
	; 	pidNewCount,	the id of the count to be created
	;
	; Returns: 
	;
	; History:
	; 15-Nov-2007	PJones	BR014770, created
	;-------------------------------------------------------------------------------
	if $$Exists(pidStocktake,pidLine,pidNewCount-1) {
		if '$$LastEqualsTarget(pidStocktake,pidLine) {
			if '$$LastMatchesPreceding(pidStocktake,pidLine) {
				do CreateAndStore("","",pidStocktake,pidLine,pidNewCount)
			}
		}
	} 
	quit
	
	
LastMatchesPreceding(pidStocktake,pidLine)
	;-------------------------------------------------------------------------------
	; Called By: RuleTwo (+ Unit Test code)
	; 
	; Params:
	; 	pidstocktake, the stocktake id
	; 	pidLine, the line id,
	;
	; Returns: $$$YES if the last count quantity matches any of the preceding count quantities
	;	otherwise $$$NO
	;
	; History:
	; 15-Nov-2007	PJones	BR014770, created
	;-------------------------------------------------------------------------------
	new lastQty,loop,flag,iQty
	
	; does the most recent count match any of the earlier ones?
	set flag = $$$NO
	set lastQty = $$GetQty(pidStocktake,pidLine,$$GetHighestCount(pidStocktake,pidLine))
	if lastQty '= "" {
		for loop=1:1:($$GetHighestCount(pidStocktake, pidLine)-1) {
			if lastQty - $$GetQty(pidStocktake,pidLine,loop) = 0 {
				set flag = $$$YES	
			}
		}
	}
	quit flag
	
	;+++++++++++++++++++++++++++++++++++++++
	
CopyCountsToINWEINV(pidStocktake,varCopyRoutine="")
	;-------------------------------------------------------------------------------
	; updates the value of *all* the lines in a stockcount from counts
	; 
	; unless over-ridden by an alternative varCopyRoutine, uses the 
	; default algorithm in CopyLatestCountsToINWEINV
	; 
	; 
	; Params:
	;	pidStocktake, a stocktake id
	;	varCopyRoutine, we can over-ride the behaviour of this by passing a VAR
	;		routine as this argument
	;		
	; Returns: a status string from the VAR routine or $$$OK otherwise
	;
	; History:
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$$YES
	if varCopyRoutine '= "" {        ; we're doing a VAR alternative
		xecute "set strStatus = $$"_varCopyRoutine_"("_pidStocktake_")"
	
	} else {
		do CopyLatestCountsToINWEINV(pidStocktake)
	}
	quit strStatus
	
	
CopyLatestCountsToINWEINV(pidStocktake) 
	;-------------------------------------------------------------------------------
	; Runs through all the items in INWEINV and makes sure the latest count is 
	; copied back from INWEINVCount
	; 
	; This is the default algorithm, called by CopyCountsToINWEINV
	; 
	; Params:
	;	pidStocktake, a stocktake id
	;		
	; Returns: nothing
	;
	; History:
	; 18-Mar-2010	GRF		Replace $order
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	new objStocktake, objINWEINV, objINWEINVCount
	new idCount,maxCount,idLine,strKeys,strStatus
	
	set objStocktake = $get(^INWEINVP(YM,pidStocktake,1))
	
	set maxCount = $$$INWEINVPNumberofCounts(objStocktake)
	; not very efficient ... we can *profile* later to discover 
	; if anything is *problematically* slow
	
	for idCount = 1:1:maxCount {     ; FIXME : idCount is not used - why do we do this multiple times? <GRF>
		set idLine = ""
		for {
			set idLine = $order(^INWEINVCount(YM,pidStocktake,idLine))
			quit:idLine=""
		
			set objINWEINV = $$GetINWEINVwithLatestCount(pidStocktake,idLine)
			set strKeys    = pidStocktake_","_idLine
			set strStatus  = $$$Save("INWEINV",strKeys,objINWEINV,$$$YES)
		}
	}	
	quit
	
	
Exists(pidStocktake,pidLine,pidCount)
	;-------------------------------------------------------------------------------
	; Tests if a count with a particular id exists
	; 
	; Params:
	; 	pidStocktake, stocktake id
	; 	pidLine, line id
	; 	pidCount, count id
	;		
	; Returns: $$$YES if there is a count with this id for this stocktake and line
	;
	; History:
	; 08-Nov-2007	shobby	SRBR014730:	Check that variables are defined. 
	; 05-Nov-2007	PJones	BR014730, created
	;-------------------------------------------------------------------------------
	new blnReturn
	
	if ($get(pidStocktake)'="") && ($get(pidLine)'="") && ($get(pidCount)'="") &&
	    $data(^INWEINVCount(YM,pidStocktake,pidLine,pidCount,1)) {
		set blnReturn = $$$YES
	
	} else {
		set blnReturn = $$$NO
	}
 	quit blnReturn
 	
 	
GetDiffBetween(pidStocktake,pidLine,pidCount1,pidCount2)
	quit ($$GetQty(pidStocktake,pidLine,pidCount1) - $$GetQty(pidStocktake,pidLine,pidCount2))
	
]]></Routine>
</Export>