<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMGridEdit31Body" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMGridEdit31Body
	
#include WWWConst
#include COMConst
#include COMGridEdit31
 
#def1arg WWWDATEN(%args) ^WWWDATEN(0,+$horolog,YUSER,YFORM,"V",%args)
 
#define WWWDATENSortBegin	if (YFORM'="FINAPInvLine") set %1 = $sortbegin(^WWWDATEN(0,+$horolog,YUSER,YFORM,"V"))
#define WWWDATENSortEnd		if (YFORM'="FINAPInvLine") set %1 = $sortend(^WWWDATEN(0,+$horolog,YUSER,YFORM,"V"))
 
#define EnumFTypeHide    0
#define EnumFTypeDate    1
#define EnumFTypeBln     2
#define EnumFTypeMemo    3
#define EnumFTypeNum     4
#define EnumFTypePwd     5
#define EnumFTypeText    6
#define EnumFTypeTime    7
#define EnumFTypeCur     8
#define EnumFTypeFile   10
#define EnumFTypeFloat  12
#define EnumFTypeTStamp 14
#define EnumFTypeForex  18
	
#define LogR(%1,%2) 	;
#define LogR2(%1,%2) 	;
#define LogR3(%1,%2) 	;
#define LogRx(%1)		;
#define LogR2x(%1)		;
#define LogR3x(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^CGEBody("_%2_") : "_$zh $$$JournalOn
#;define LogR2(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^CGEBody("_%2_") : "_$zh $$$JournalOn
#;define LogR3(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^CGEBody("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)	 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR2x(%1)	 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR3x(%1)	 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)	 	$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
	;-------------------------------------------------------------------------------
	;  *1  COMGridEdit31Head  (Followed by tag creating that part of the grid)
	;  *2  COMGridEdit31
	;  *3  COMGridEdit31Body
	;  *4  COMGridEdit31Body2
	;  *5  WWW120DynTable
	;-------------------------------------------------------------------------------
	;    Favourites                                                   [ ][ ][ ]        *** COMView
	;    (.) In form default                                          [ ][ ][ ]            External Filter
	; +- Field Selection --------------------------------------------------------+
	; | Field  [Comparator][Value]                                               |
	; | Field  [Comparator][Value]                                               |
	; +--------------------------------------------------------------------------+
	;    Status :
	; Search complete.  # record(s) found
	;-------------------------------------------------------------------------------
	; Key Name : Key Value         [optional - ^CacheTemp(YUSER,"Grid","ShowKeys") ]   *1 HEAD
	; Per Page: [   ]   Pages: .....                        [  ][  ][  ][  ][  ][  ]   *1 Pages / Buttons
	;-------------------------------------------------------------------------------  
	;  Line  | [+] |    Da Name    |    Db Name    |    Dc Name    |    Dd Name    |   *3 Head
	; Number |     |               |               |               |               |     [HeadPrimaryKey, HeadFields]
	;--------+-----+--------+------+----------+----+------------+--+---------------+
	;  Line  |   DEa Name   |     DEb Name    |     DEc Name    |     DEd Name     |   ($$$WWWDATEN("LINKS") => Expanded
	; Number |              |                 |                 |                  |    Heading - e.g. for FINAPInvCharge2)
	;--------+-----+--------+------+----------+----+------------+--+---------------+
	;    1   | [+] |               |               |               |               |   *4 CreateData / *3 AddLines
	;--------+-----+--------+------+----------+----+------------+--+---------------+
	;    1.1 |              |                 |                 |                  |   (Expanded Body Line)
	;--------+-----+--------+------+----------+----+------------+--+---------------+
	;    2   |     |               |               |               |               |
	;--------+-----+---------------+---------------+---------------+---------------+
	;
	;  Dynamic Table                                                                   *5 CreateDynTableCall
	;-------------------------------------------------------------------------------
	
	; Most edit grids are for a single form.  In those cases we do not see the
	; Expanded Heading and Body Lines, nor do we have and 'Expand' column with [+] button.
	; 
	; Finance Invoice Match is an example of a form that has two separate forms and
	; two heading lines - one for each form.  When the focus changes between the forms
	; in the edit grid, the corresponding heading is displayed and the other heading
	; is hidden.  Column boundaries and hidden columns are maintained on a form basis.
	; 
	; Right click on one of fields for the main edit grid form produces a drop down menu.
	; Select Additional 
	
	
Head(YKEY,YFORM,YMAXKEY,pstrRow,pblnExpandLinesAllowed=$$$YES) 
	;-------------------------------------------------------------------------------
	; Wrapper for two header functions. Create additional header if needed.
	; 
	; Called By: CreateGrid^COMGridEdit31; self-reference for optional expanded form
	; 
	; Params:
	;	pstrRow			e.g. "gridheadRow"
	;
	; Returns:
	;
	; History:
	; 14-Feb-2012	shobby	SR17724: YMAXKEY may be different in expanded lines compared
	;								 to normal lines.
	; 14-Feb-2012	shobby	SR17724: Fixed columns in grid
	; 01-Dec-2010	GRF		SR17597: pass flag as argument to HeadFields
	; 15-Jul-2010	CB/GRF	SR17403: Restore call to syncGridWidths
	; 08-Jul-2010	CB		SR17403: relocate syncGridWidths to CGE31J4
	; 04-Jun-2010	GRF/CB	SR17253: call syncGridWidths
	; 06-Sep-2006	JW		SR14484: Moved 2nd header to HeadStart^COMGridEdit31Head
	; 28-Sep-2005	JW		SR11573: Created
	;-------------------------------------------------------------------------------
	new strLink
	
	$$$LogR2("Head",YFORM_":"_YKEY_":"_YMAXKEY_":"_pstrRow)
	
	if '$$GridVersion^COMGridEdit31V2() write YCR,$$HeadPrimaryKey(YKEY,YFORM,YMAXKEY,pstrRow,pblnExpandLinesAllowed)		 ;SR17724
	if $$GridVersion^COMGridEdit31V2() do HeadPrimaryKey^COMGridEdit31V2(YKEY,YFORM,YMAXKEY,pstrRow,pblnExpandLinesAllowed)  ;SR17724
	
	write YCR,$$HeadFields(YFORM,pstrRow,pblnExpandLinesAllowed)     ; SR17597 ;SR17724
	write YCR," syncGridWidths();" ; SR17403
	
	if pblnExpandLinesAllowed {
		set strLink = $get($$$WWWDATEN("LINKS"))
		if strLink'="" {
			new YMAXKEY									 ;SR17724
			set YMAXKEY=$order(^WWW121(0,strLink,""),-1) ;SR17724
			
			do Head(YKEY,strLink,YMAXKEY,"gridheadRow2",$$$NO)
		}
	}
	quit
	
	
HeadPrimaryKey(YKEY,YFORM,YMAXKEY,pstrRow,pblnExpandLinesAllowed=$$$YES)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;	pstrRow			e.g. "gridheadRow"
	;	pblnExpandLinesAllowed		If set, adds a second column with a [+] button
	;	                            to the header.  (NOTE: This is on the main header,
	;	                            not the header for the expanded lines.)
	; Returns:
	;
	; History:
	; 04-Apr-2012	shobby	SR17724.53: Include 'collapse all' button on expanded lines.
	; 26-Mar-2012	shobby	SR17724.52: Storing of calculated column widths
	; 08-Mar-2011	shobby	SR17724.26: Only show the last Primary Key.  Display a spacer
	;							in the expand column for expanded lines. 
	; 07-Feb-2011	shobby	SR17724: Changed the images.
	; 06-Dec-2010	GRF		SR17597: blnAttach is used to disable the attachEvent
	;							operation for OnMouseDown and OnMouseMove when
	;							called for expanded grids (based on multiple forms)
	;							This is a work around since the column compression
	;							problem only occurs in FF & only on expanded grids.
	;							Put [+] button in centre of column with width=50
	;							rather than on RHS with width from first key.
	; 11-Nov-2010	shobby	SR17605.1: YTEXT misspelt as TEXT
	; 05-Nov-2010	shobby	SR17605: Call out to cgeHeadFields wrapper
	; 18-May-2010	GRF		SR17253.1: use .getElementById
	; 14-Apr-2010	shobby	SR17253: Firefox compatibility
	; 01-May-2009	shobby	SR16507: Show the grid created date on the perpageheader
	; 							object. (Less intrusive but still available)
	; 30-Jul-2007	GRF		SR15571: strParams for repeated values
	; 06-Mar-2007	PO		SR15466: Pass YDAT by reference
	; 27-Jun-2006	JW		SR13755: Store key names, get them properly.
	; 09-Mar-2005	JW		SR11848: Added $$$NO - hidden paramater.
	; 17-Dec-2004	Shobby	Use 'text in forms' as the caption (SR10061)
	;-------------------------------------------------------------------------------
	new blnAttach,blnHidden,strHTML
	new YTXT,YLFN,YTYP,REL,PARA,RELF,SUCH,YFIELDNAME,YLENGTH,YWIDTH,YCOLON,YCOLOFF,YVALIGN,YPADDING
	new YHEIGHT,YFONT,YFONTSIZE,YFELDNAME,YKLFN,YTEXT ;SR17605,strParams
	
	set strHTML = ""
	write !,"document.getElementById('perpageheader').title=document.getElementById('perpageheader').title+cgeGridDate();"  ;SR17253
	
	for YKLFN=YMAXKEY:1:YMAXKEY { ;SR17724.26
		if $piece(YKEY,",",YKLFN)="" {     ; Ignore populated keys - usually leaves only YMAXKEY
			do PARA("P",YKLFN,.YWIDTH,.YVALIGN,.YHEIGHT,.YFONT,.YFONTSIZE,.YTYP,.YFORM,.YLFN,.YTXT,.YDAT)  ;SET PARAMETER
			set blnHidden = $select($piece(YTXT,Y,104)=15:1,1:0)   ; D104 $$$WWW121TypeOfAcquisition : WWW100("EINGABE") = Hidden
			
			set YFELDNAME = $$^WWWFELDNAME(YFORM,"P",YKLFN)
			set ^CacheTemp(YUSER,"Grid","KeyName",YKLFN) = YFELDNAME
			
			if (pblnExpandLinesAllowed) && ($get(^CacheTemp(YUSER,"Grid","ExpandLines"))) {     ; SR17597
				set blnAttach = $$$NO
			} else {
				set blnAttach = $$$YES
			}
			
	;SR17605 set strParams = YFONT_"','"_YFONTSIZE_"','"_YWIDTH_"','"_YHEIGHT_"','"_YDARKGRAY_"','"_YTYP_"','"_blnHidden_"','"_YFORM
	;SR17605                  #5            #6             #7           #8             #9            #10          #11           #12
			do UpdateColumnWidth^COMGridEdit31V2(YBED,YFORM,"P",YKLFN,YWIDTH\1)
			set strHTML = strHTML_YCR_$$cgeHeadFields^COMGridEdit31JSFunctionWrappers(pstrRow,"Key",YKLFN,YFELDNAME,YFONT,YFONTSIZE,YWIDTH,YHEIGHT,YDARKGRAY,YTYP,blnHidden,YFORM,blnAttach) ;SR17605
			
			if (pblnExpandLinesAllowed) && ($get(^CacheTemp(YUSER,"Grid","ExpandLines"))) {
	;			set YTEXT   = "<IMG id=Expand align=right SRC="""_YGIF_"cplus_small.gif"" onclick=""cgeExpandAll;"">"  ; SR17597 ;SR17724
				set YTEXT   = "<IMG id=Expand style='margin-left:4px;' align=left SRC="""_YGIF_"cplus_small.gif"" onclick=""cgeExpandAll();"">" ;SR17724 ;SR17724.15
				set strHTML = strHTML_YCR_$$cgeHeadFields^COMGridEdit31JSFunctionWrappers(pstrRow,"Key","Expand",YTEXT,YFONT,YFONTSIZE,21,YHEIGHT,YDARKGRAY,YTYP,blnHidden,YFORM,$$$NO) ;SR17605 ;SR17724
				set strHTML = strHTML_YCR_"THkey_Expand.detachEvent('onclick',cgeonclick);"
				set strHTML = strHTML_YCR_"THkey_Expand.attachEvent('onclick',cgeExpandAll);"
			} elseif ($get(^CacheTemp(YUSER,"Grid","ExpandLines"))) { ;SR17724.26
				;SR17724.53 set YTEXT="&nbsp" ;SR17724.26
				set YTEXT   = "<IMG id=Expand1 _Expanded=false style='margin-left:4px;' align=left SRC="""_YGIF_"cminus_small.gif"" onclick=""cgeExpandAll();"">" ;SR17724 ;SR17724.53
				set strHTML = strHTML_YCR_$$cgeHeadFields^COMGridEdit31JSFunctionWrappers(pstrRow,"2Key","Expand",YTEXT,YFONT,YFONTSIZE,21,YHEIGHT,YDARKGRAY,YTYP,blnHidden,YFORM,$$$NO) ;SR17605
			}
		}
	}
	quit strHTML
	
	
HeadFields(YFORM,pstrRow,pblnExpandLinesAllowed)
	;-------------------------------------------------------------------------------
	; Generate the heading text for the top of the edit grid based on the field names
	;
	;
	; Returns:
	;
	; History:
	; 26-Mar-2012	shobby	SR17724.52: Storing of calculated column widths
	; 14-Feb-2012	shobby	SR17724: Allow a configuration to determined the number
	;							of columns other than primary keys are fixed.
	; 06-Dec-2010	GRF		SR17597: pass blnAttach to cgeHeadFields rather than
	;							detaching the event after attaching - work around
	;							for column compression on FF with expanded grids
	;							(using multiple forms)
	; 01-Dec-2010	GRF		SR17597: pass flag as argument; detach mouse events for
	;							resize as hack to fix column compression on expanded
	;							grids
	; 18-Nov-2010	GRF		SR17605: Explicit null for height parameter
	; 05-Nov-2010	shobby	SR17605: Call out to cgeHeadFields wrapper
	; 30-Jul-2007	GRF		SR15571: loop instead of idx
	; 10-Jul-2007	shobby	SRBR014553: Form field definition is obtained from standard method.
	;						No longer necessary to reference customisation values.
	; 05-Apr-2007	GRF		SRBR014310: EnumFType macros
	; 02-Mar-2007	PO		SR15466: New and pass YDAT by ref to PARA
	; 25-Jan-2007	PO&JW	SR15280: Removed redundant cache.
	; 26-Jun-2006	JW		SR12775: Check and store mandatory property here.
	; 12-Sep-2005	JW		SR13099: Call GetColumnOrder directly.
	;  9-Mar-2005	JW		SR11848: Added isHidden property
	; 11-Feb-2005	Paul K	Pass in the type of column (for sorting purposes SR#11717)
	; 10-Feb-2005	shobby	Moved most of the code into Javascript.
	; 10-Dec-2004	RobertW	Allow YOPTION to show/hide the fields. (SR10061)
	; 20-Dec-2004	PO		SR11286 Incorrectly identifying currency
	;-------------------------------------------------------------------------------
	new blnAttach,blnHidden,loop,strDataType,strFieldType,strHTML,strSort,YBBN
	
	set strHTML = ""
	set strSort = $$GetColumnOrder(YFORM)     ; comma-delimited string
	
	if ($get($$$WWWDATEN("LINKS"))'="") || 'pblnExpandLinesAllowed {    ; SR17597
		set blnAttach = $$$NO
	} else {
		set blnAttach = $$$YES
	}
	
	for loop=1:1:$length(strSort,",") {
		set YBBN = $piece(strSort,",",loop)
		new YTXT,YLFN,YTYP,REL,PARA,RELF,SUCH,YFIELDNAME,YLENGTH,YWIDTH,YCOLON,YCOLOFF,YVALIGN,YPADDING,YHEIGHT,YFONT,YFONTSIZE,YFELDNAME
		
		do PARA("D",YBBN,.YWIDTH,.YVALIGN,.YHEIGHT,.YFONT,.YFONTSIZE,.YTYP,.YFORM,.YLFN,.YTXT,.YDAT)
		if $piece(YTXT,Y,1)="" {
			set strFieldType = "M"
		} else {
			set strFieldType = "D"					
		}
		
		set YFELDNAME = $$^WWWFELDNAME(YFORM,strFieldType,YLFN)
		
		if $find(",1,14,",","_YTYP_",") {                           ; Date, Timestamp
			set strDataType = "Date"
		
		} elseif $find(",4,8,12,",","_YTYP_",") {                   ; Num, Cur, Float
			set strDataType = "Number"
		
		} else {
			set strDataType  =""
		}
		
		set blnHidden = (($piece(YTXT,Y,2)=15) || '$$ShowCell(YFORM,YBBN))
		
		if blnHidden {
			set YWIDTH    = 0
			set YFELDNAME = ""
		}
		if YFELDNAME="" set YFELDNAME = "&nbsp;"

		;SR17724 vvvvv
		do UpdateColumnWidth^COMGridEdit31V2(YBED,YFORM,"",YBBN,YWIDTH\1) 					  ;SR17724.52
		if (loop'>$$FixedColumns^COMGridEdit31V2(YFORM))&&($$GridVersion^COMGridEdit31V2()) { ;SR17724.12
			set strHTML = strHTML_YCR_$$cgeHeadFields^COMGridEdit31JSFunctionWrappers(pstrRow_"Key","Field",YBBN,YFELDNAME,YFONT,YFONTSIZE,YWIDTH,"",YDARKGRAY,strDataType,blnHidden,YFORM,blnAttach) ;SR17597
		} else {
			set strHTML = strHTML_YCR_$$cgeHeadFields^COMGridEdit31JSFunctionWrappers(pstrRow,"Field",YBBN,YFELDNAME,YFONT,YFONTSIZE,YWIDTH,"",YDARKGRAY,strDataType,blnHidden,YFORM,blnAttach) ;SR17597
		}
		;SR17724 ^^^^^

		if $$$WWW003MandatoryField(YDAT) || $$$WWW122MandatoryInputItem(YTXT) {
			set $$$FLDMandatory(YBBN) = $$$YES
		}
	}
	s ^zzJULIO($now()) = strHTML
	quit strHTML
	
	
AddLines(YKEY,YFORM) 
	;--------------------------------------------------------------------------------
	; Quick fix to call OnLineAdded correctly when changing tabs. This should be changed later.
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 03-Aug-2006	JW		SR14730: Speed up - only do if appropriate.
	; 25-Jan-2006	JW		SR13087: Created
	;---------------------------------------------------------------------------------
	new idLine,idCount,strYKEY
	
	quit:$get($$$EventExists("LineAdded"))=$$$NO
	
	$$$LogR("AddLines",YFORM_"<"_YKEY_"<")
	
	set idLine = ""		
	for {
		set idLine = $order($$$WWWDATEN("REFERENCEKEY",idLine))
		quit:idLine=""
		
		set strYKEY = $get($$$WWWDATEN("REFERENCEKEY",idLine,1))
		
		if '$$$KilledRecord(idLine,YFORM) {
			do OnLineAdded^COMGridEdit31Events(YFORM,$increment(idCount),strYKEY)
		}
	}
	quit
	
	
BODYADDROWS(pintPage=1,pblnContinue=$$$NO,pintBlock=10,pintMaxOverride=0)
	;-------------------------------------------------------------------------------
	; Body Add Rows
	; 
	; Display lines in the grid
	;
	; Params:	pintPage - page displaying
	;			pintDisplayed - (by Ref) number of rows displayed so far
	;			pidRow - (by Ref) last row displayed
	;			pintBlock - number to display in this block
	;
	; Returns: pblnContinue as updated
	;
	;	  **********************   WARNING   ****************************
	;	  The call to DISPLAYLINE is inside a sortbegin/sortend construct
	;	  which means references may be to ^WWWDATEN data which is not yet
	;	  stored.  Consider this if ever changing that code.
	;	  ***************************************************************
	; 
	; History:
	; 10-Jun-2009	GRF		Cleanup old commented code
	; 27-Feb-2009	GRF		SR16396: Disable $sortbegin/$sortend
	; 30-Oct-2008	SCR		SR16026: Use Get Rows Per Page function instead of Macro
	; 03-Jun-2008	GRF		SR15739: Revisions to GetNextDisplayLine moved to new
	;							routine; parameter changes from $order direction to
	;							pblnReverse (1=>$$$NO, -1=>$$$YES)
	; 14-May-2008	shobby	SRBR014943: GRIDPerPage
	; 05-Mar-2008	shobby	SRBR014446: Allow to populate all records.
	; 01-Aug-2007	GRF		SR15529: Add $get to $$$WWWDATEN(LASTADDED) 
	; 20-Jul-2007	RPW		SR15529: Extra check to handle sorted data and get the
	;							correct last added row
	;  7-Aug-2006	JW		SR14730: Sortbegin
	; 13-Feb-2006	RPW		SR11573: Fixed
	; 13-Oct-2005	JW		SR11573: Rewrote
	;-------------------------------------------------------------------------------
	new intMax,intDisplayed,idRow,intLow
	
	$$$LogRx("")
	$$$LogR("BODYADDROWS",pintPage_"<"_pblnContinue_"<"_pintBlock_"<"_pintMaxOverride)
	
	set intMax = $$GetRowsPerPage^COMGridEdit31(YBED,YFORM)
	if pintMaxOverride>0 set intMax=pintMaxOverride
	if intMax="" {				     // User probably left screen
		set pblnContinue=$$$NO
		
	} else {
		if pblnContinue {
			set intDisplayed = +$get($$$WWWDATEN("DISPLAYED"))
			set idRow        =  $get($$$WWWDATEN("LASTADDED"))  ; Last row
			
		} else {
			kill $$$WWWDATEN("DISPLAYED")
			set intDisplayed=0
			
			set $$$GRIDPage = pintPage
			set intLow = intMax*(pintPage-1)
			
			set idRow = ""
			while (intLow'=0) {
				set idRow = $$GetNextDisplayLine^COMGridEdit31Body2(idRow,$$$NO)
				quit:idRow=""
				
				set intLow = intLow - 1
			}
		}
		
	; SR16396 : It is necessary to disable $sortbegin/$sortend because COMGridEdit
	;           itself is attempting to read modified ^WWWDATEN records
	;           (e.g. BodyFieldCell in this routine which is called after
	;           UpdateManualField^COMGridEdit31Events)
		
		;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv  ; WARNING : References getting ^WWWDATEN records during
	;	$$$WWWDATENSortBegin                  ;           the scope of this block may not retrieve
		;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv  ;           the "current" value since changes are not
	 									      ;           written to disk until the block ends
		for {
			quit:intDisplayed'<intMax            // quit if displayed enough
			
			set idRow = $$GetNextDisplayLine^COMGridEdit31Body2(idRow,$$$NO)
			quit:idRow=""
			
			do DISPLAYLINE(YFORM,idRow)
			set intDisplayed = intDisplayed + 1
			quit:$increment(pintBlock,-1)=0      // quit if done block
		}
		;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	;	$$$WWWDATENSortEnd                    ; see ^^^^^ SR16396
		;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		set pblnContinue = (intDisplayed < intMax)&&(idRow'="")
		set:pblnContinue pblnContinue = ($$GetNextDisplayLine^COMGridEdit31Body2(idRow,$$$NO)'="")
	}   ; If we can continue, just a quick RHS check
	quit pblnContinue
	

DISPLAYLINE(YFORM,YROW,blnNewLine=$$$NO,pidParentRow="",pblnCreateRow=$$$YES)
	;-------------------------------------------------------------------------------
	; Write a line to the screen
	; 
	; Called By:
	;	DISPLAYLINE (recursive)
	;	BODYADDROWS
	;
	;	  **********************   WARNING   ****************************
	;	  The call from BODYADDROWS is inside a sortbegin/sortend construct
	;	  which means references may be to ^WWWDATEN data which is not yet
	;	  stored.  Consider this if ever changing this code.
	;	  ***************************************************************
	; 
	; Params:
	;
	; Returns:
	;
	; History:
	; 10-Dec-2013	shobby	SESDF-672.4: Don't show the grid on each adding of a row.
	; 26-Mar-2012	shobby	SR17724: Give expanded line Primary key a different colour.
	; 07-Mar-2012	shobby	SR17724.25: Prepend the main line number to the expanded ID after
	;							and relationships have been determined.
	; 29-Feb-2012	shobby	SR17724: Resizing of non-expandable line height in expandable grid in
	;							fixed section to be the same as scrolling section.
	; 14-Feb-2012	shobby	SR17724: Add additional elements 'Key' for the fixed columns.
	; 28-Feb-2011	shobby	SR17628: New Property to mark whether adding to an expanded line.
	; 06-Jan-2011	GRF		SR17579: Use explicit tag for WWWTR calls
	; 24-Nov-2010	GRF		SR17597: Pass "Expand" through to cgeBodyFieldKey as
	;							THname to distinguish expand column
	; 24-Jun-2010	GRF		SR17377: Cross-browser revision (cgeCreateExpandRow &
	;							cgeBodyFieldKey)
	; 05-Jan-2010	GRF		SR15525: Call to $$Convert^WWWTR rather than $$^WWWTR
	; 10-Sep-2009	PPP		SR16886: Dynamically change the Format of the Primary Key Cell
	; 30-Jul-2007	GRF		SR15571: loop instead of idx
	; 20-Jul-2007	RPW		SR15529: Store the last added field
	; 29-May-2007	RPW		SR15513: Call the "onbeforeprimarykey" method so you can
	;						change colours/tooltips on the primary keys as well.
	; 06-Mar-2007	PO		SR15466: Pass YDAT by reference
	; 08-Jan-2006	Steve S	SR15342: Put key values through $$$JSText
	; 13-Nov-2006	JW		SR14550: Removed blnNewLine from BodyFieldCell call.
	; 13-Oct-2005	JW		SR11573: Created (from BODYLINE)
	;-------------------------------------------------------------------------------
	new YKEY,YTXT,YLFN,YTYP,REL,PARA,RELF,SUCH,YFIELDNAME,YLENGTH,YWIDTH,YCOLON
	new YCOLOFF,YVALIGN,YPADDING,YHEIGHT,YFONT,YFONTSIZE
	new lineId,strSort,blnStored,loop,WWWDATEN,strHeaderName,strLink,idChild,lstLinks
	
	$$$LogR3("DISPLAYLINE",YFORM_"<"_YROW_"<"_blnNewLine_"<"_pidParentRow_"<"_pblnCreateRow)
	
	set $$$WWWDATEN("DISPLAYED",$$$GRIDIdx(YROW)) = $increment($$$WWWDATEN("DISPLAYED"))
	set $$$WWWDATEN("LASTADDED") = YROW
	
	set YYKEY   = $get($$$WWWDATEN("REFERENCEKEY",YROW,1))
	set YKEY    = $translate($get(YYKEY),"""")
	set YMAXKEY = $length(YYKEY,",")
	set lineId  = $piece(YYKEY,",",YMAXKEY)

	set strHeaderName = YFORM_"_"_YMAXKEY     ; SR17377
	
	$$$LogR3x("DL:1:"_YYKEY_"<"_YMAXKEY_"<"_lineId)
	
	if pidParentRow="" {
		if $$GridVersion^COMGridEdit31V2() write YCR ,"var newRowKey = cgeBodyRow(TBODYKey,'"_YROW_"','"_YFORM_"',gridheadKey,'Key');" ;SR17724
		write YCR,"var newRow    = cgeBodyRow(TBODY,'"_YROW_"','"_YFORM_"',gridhead,'');" //SR17724
		//SESDF-672.4write YCR,"window.setTimeout(function() { cgeShowGrid(1,"_$$AutoResizeRows^WWW120($get(YFORM))_"); },1);" ;SR17995  ;SR18190
	} else {
		if $$GridVersion^COMGridEdit31V2() write YCR ,"var newRowKey = cgeCreateExpandRow("_pidParentRow_",'','',"_blnNewLine_"==1,'"_YFORM_"','','Key');" //SR17724
		write YCR,"var newRow    = cgeCreateExpandRow("_pidParentRow_",'','',"_blnNewLine_"==1,'"_YFORM_"','');"
	}
	do PARA("P",YMAXKEY,.YWIDTH,.YVALIGN,.YHEIGHT,.YFONT,.YFONTSIZE,.YTYP,.YFORM,.YLFN,.YTXT,.YDAT)  ;SET PARAMETER
	set YTEXT = $$GetLiteral^WWWTR(YTYP,lineId)
	set YTEXT=$$$JSText($$GetRelationship(YTEXT,REL,PARA,RELF)) ;SR17724.25 
	if pidParentRow'="" {
		set YTEXT = pidParentRow_"."_YTEXT ;SR17724.25
	}
	set YTOOLTIP = ""
	set YFELD    = $$GetYFELD^COMGridEdit31G(YFORM,YROW)
	
	do OnBeforePrimaryKey^COMGridEdit31Events(YFORM)
	
	//SR16886 : Can only change the Format of the Primary Key
	do UpdatePrimaryKeyFormat^COMGridEdit31Events(YFORM,YROW,YFELD)
	
	if pidParentRow'="" set YCOLOFF="threedlightshadow"
	//write YCR,"cgeBodyFieldKey(newRow,'"_YFONT_"','"_YFONTSIZE_"','"_YHEIGHT_"','"_YCOLOFF_"','"_$$$JSText($$GetRelationship(YTEXT,REL,PARA,RELF))_"','"_YTOOLTIP_"');"  ; SR17377
	if '$$GridVersion^COMGridEdit31V2() write YCR,"cgeBodyFieldKey(newRow,'"_YFONT_"','"_YFONTSIZE_"','"_YHEIGHT_"','"_YCOLOFF_"','"_YTEXT_"','"_YTOOLTIP_"','"_strHeaderName_"','"_(pidParentRow'="")_"');"  ;SR17628 ;SR17724 ;SR17724.25 
	if $$GridVersion^COMGridEdit31V2() write YCR,"cgeBodyFieldKey(newRowKey,'"_YFONT_"','"_YFONTSIZE_"','"_YHEIGHT_"','"_YCOLOFF_"','"_YTEXT_"','"_YTOOLTIP_"','"_strHeaderName_"','"_(pidParentRow'="")_"');"  ;SR17628 ;SR17724 ;SR17724.25 
	;SR17724.25 if '$$GridVersion^COMGridEdit31V2() write YCR,"cgeBodyFieldKey(newRow,'"_YFONT_"','"_YFONTSIZE_"','"_YHEIGHT_"','"_YCOLOFF_"','"_$$$JSText($$GetRelationship(YTEXT,REL,PARA,RELF))_"','"_YTOOLTIP_"','"_strHeaderName_"','"_(pidParentRow'="")_"');"  ;SR17628 ;SR17724
	;SR17724.25 if $$GridVersion^COMGridEdit31V2() write YCR,"cgeBodyFieldKey(newRowKey,'"_YFONT_"','"_YFONTSIZE_"','"_YHEIGHT_"','"_YCOLOFF_"','"_$$$JSText($$GetRelationship(YTEXT,REL,PARA,RELF))_"..','"_YTOOLTIP_"','"_strHeaderName_"','"_(pidParentRow'="")_"');"  ;SR17628 ;SR17724
	do OnAfterPrimaryKey^COMGridEdit31Events(YFORM,YKEY)
	
	if $get(^CacheTemp(YUSER,"Grid","ExpandLines")) {
		if (pidParentRow="") {
			set YTEXT = "<IMG style=""margin-left:4px;"" id=Expand_"_YROW_" align=left SRC="""_YGIF_"bplus_small.gif"" onclick=""cgeExpand("_YROW_");"">" ;SR17724.15
		; FIXME : Changing alignment to center displays as left justified <GRF>  (bplus.gif cf cplus.gif?)  ; SR17597
	
		} else {
			set YTEXT="&nbsp;"
		}
		if '$$GridVersion^COMGridEdit31V2() write YCR,"cgeBodyFieldKey(newRow,'"_YFONT_"','"_YFONTSIZE_"','"_YHEIGHT_"','"_YCOLOFF_"','"_YTEXT_"','"_YTOOLTIP_"','Expand','0');"  ; SR17597 ;SR17628
		if $$GridVersion^COMGridEdit31V2() write YCR,"cgeBodyFieldKey(newRowKey,'"_YFONT_"','"_YFONTSIZE_"','"_YHEIGHT_"','"_YCOLOFF_"','"_YTEXT_"','"_YTOOLTIP_"','Expand','0');"  ; SR17597 ;SR17628
	}
		
	set strSort = $$GetColumnOrder(YFORM)
	
	for loop=1:1:$length(strSort,",") {
		set YBBN = $piece(strSort,",",loop)
		do BodyFieldCell(YFORM,YKEY,YBBN,$select(pidParentRow="":YROW,1:YROW_""),YFELD,(pidParentRow'=""),loop) ;SR17628 ;SR17630?
	}
	if (pidParentRow="") {
		write YCR,"cgeBodyRowEnd(TBODY,newRow);"

		if $$GridVersion^COMGridEdit31V2() {
			write YCR,"cgeBodyRowEnd(document.getElementById('TBODYKey'),newRowKey);"	;SR17724
			write YCR,"cgeOnScroll();"                                                  ;SR17724
		}
		
		set lstLinks = $get(^WWWDATEN(0,+$horolog,YUSER,YFORM,"V","LINKS"))
		for loop=1:1:$length(lstLinks,$$$SEMICOLON) {
			set strLink = $piece(lstLinks,$$$SEMICOLON,loop)
			if strLink'="" {
				set idChild = ""
				for {
					set idChild = $order(^WWWDATEN(0,+$horolog,YUSER,strLink,"V","PARENT",YROW,idChild))
					quit:idChild=""
					do DISPLAYLINE(strLink,idChild,$$$NO,YROW) ;SR17628/SR17673
				}
			}
		}
	}
	quit
	
	
BodyFieldCell(YFORM,YKEY,YBBN,YROW,YFELD,pblnExpand=$$$NO,pblnLoop=0)  ;SR17628
	;-------------------------------------------------------------------------------
	; Builds the structure of a cell in the body of the grid.
	;
	; Called By: DISPLAYLINE^COMGridEdit31Body
	;
	; Inputs:
	;	YFORM		
	;	YROW/YBBN		Grid Row and column expressed as string "Yr_c"
	;	YKEY
	;	YFELD			
	; 
	; Returns:	nothing
	;
	; History:
	; 23-Jul-2012	shobby	SR18060: Change as defined by Guilherme
	; 02-Mar-2012	shobby	SR17673: Redundant select removed from YFIELDNAME
	; 29-Feb-2012	shobby	SR17724.19: Invisible cell at end of row on main lines so that if
	;							expanded lines are wider they will show.
	; 20-Feb-2012	shobby	SR17724.6: Identify when the last fixed columns is being created so that the
	;							visible separator can be drawn properly.
	; 14-Feb-2012	shobby	SR17724: Support Fixing columns
	; 28-Feb-2011	shobby	SR17628: New Property to mark whether adding to an expanded line.
	; 17-Feb-2011	shobby	SR17658: Reverted changes to cgeBodyFieldCell
	; 16-Nov-2010	GRF		SR17597: use $$$JSText macro
	; 16-Jun-2010	GRF		SR17377: add strHeaderName to cgeBodyFieldCell call
	; 10-Jun-2009	GRF		Cleanup old commented code
	; 26-Jun-2008	GM		SRBR014802: Changed parameter "$$$WWW122ButtonBehindInputField(YTXT)" to "pYTXT"
	; 24-Jun-2008	shobby	SRBR014959: Only apply mandatory colour if field is not disabled
	; 30-Apr-2008	GM		SRBR014802: Make appear button in disable fields in grid
	; 04-Apr-2008	heber	SRBR014920: Default variable input for text fields if
	; 							record is already saved
	; 25-Mar-2008	shobby	SRBR014904: Don't include the text in the cell if the cell is hidden.
	; 05-Mar-2008	shobby	SRBR014446: YINHALT may not exist.
	; 19-Feb-2008	GRF		SRBR014852: prefix; older comments removed
	; 18-Feb-2008	heber	SRBR014852: custom mandatory field coloured
	; 14-Nov-2007	shobby	SRBR014783: Can't read WWWDATEN at this point, within
	;							$sortbegin/$sortend construct
	; 14-Nov-2007	shobby	SRBR014783: GetDefaulValue for 'D' fields
	; 31-Oct-2007	shobby	SRBR014752: Optionally put in a link to related classes
	;							in readonly grid fields
	; 13-Apr-2007	shobby	SRBR014409: Call to $$Enabled can return information for
	;							cell colour now.  (Such as mandatory field)
	; 05-Apr-2007	GRF		SRBR014310: EnumFType macros
	; 27-Nov-2006	HeberB	BR014330: Added two params to Enable call
	; 13-Nov-2006	JW		SR14550: Only get default value for manual fields.
	;							Removed blnNewLine
	; 08-Nov-2006	PO		SR15201: Enable Create and Modify Only capability
	; 26-Jun-2006	JW		SR12775: Pass all params to Enabled; changed
	;							OnBeforeFormat; remove required
	; 23-Jun-2006	Steve S	SR14514: Display '@' in text fields
	; 13-Oct-2005	JW		SR11573: Rewritten for paging
	; 02-Sep-2005	PO		SR12965: Included support for inventory cost rounding
	; 13-Apr-2005	PO		SR11349 shifted disabled colour setting to after OnBeforeFormat
	; 17-Mar-2005	JW		Get default value correctly.
	; 16-Mar-2005	PO		SR11349 enabling FC
	; 09-Mar-2005	JW		SR11848: Added isHidden property
	; 02-Mar-2005	JW		Set focus correctly.
	; 22-Feb-2005	JW		SR11780: only get default value when new line
	; 11-Feb-2005	JW		Enabled check moved outside PARA
	; 13-Jan-2005	JW		Added Param ADD - 1 if not in global
	; 10-Dec-2004	RobertW	Allow YOPTION to show/hide the fields. (SR10061)
	; 30-Dec-2004	shobby	Moved out in to Javascript (COMGridEdit31J4)
	; 14-Dec-2004	JW		Gave manual fields default value.
	; 08-Dec-2004	PO		SR11075 Determining whether field editable
	;-------------------------------------------------------------------------------
	new blnAddData,blnMandatory,objWWW012,strHeaderName,strPreviousYLFDAT,strYINHALT
	new YTXT,YLFN,YTYP,REL,PARA,RELF,SUCH,YFIELDNAME,YLENGTH,YWIDTH,YCOLON,YCOLOFF
	new YVALIGN,YPADDING,YHEIGHT,YFONT,YFONTSIZE,YTOOLTIP,YFONTCOLOR,YBACKGROUNDCOLOR
	new YREQUIRED,YTEXT1,custFormRec,YINHALT1,strFontColor
	new blnLastKey ;SR17724.6
	
	$$$LogR2("BodyFieldCell",YFORM_":"_YKEY_":"_YBBN_":"_YROW)
	set blnMandatory = $$$NO
	
	set YFIELDNAME    = "Y"_YROW_"_"_YBBN ;SR17673 ;SR17628
	set strHeaderName = YFORM_"_"_YBBN     ; SR17377
	
	do PARA("D",YBBN,.YWIDTH,.YVALIGN,.YHEIGHT,.YFONT,.YFONTSIZE,.YTYP,.YFORM,.YLFN,.YTXT)  ;SET PARAMETER
	
	if $data($$$WWWDATEN("REFERENCEVALUE",YFIELDNAME)) {
		set YTEXT = $$$WWWDATEN("REFERENCEVALUE",YFIELDNAME,1)
	$$$LogR2x("REFERENCEVALUE:A1:"_YTEXT)
	
	} else {
		if $$$WWW122SequenceNumber(YTXT)'="" {	                     ; data fields
			set YINHALT  = $piece(YFELD,Y,YLFN)
			set YINHALT1 = YINHALT
	$$$LogR2x("YINHALT:B0:"_YINHALT_":"_YTYP)

			if (YTYP=$$$EnumFTypeCur) && (YINHALT'="") {
	$$$LogR2x("Pre RoundNumber:B1:")
				set YINHALT = $$RoundNumber^COMGridEdit31S(,YINHALT,YTYP,DLDPStorage)
			}
			set $$$WWWDATEN(YFIELDNAME,2) = YINHALT1
			
			if (YINHALT1="") {
				if (YTYP=4) || (YTYP=8) || (YTYP=12) {
					;Only do this for numeric.  With other data types an empty string could be valid
					set YINHALT = $$GetDefaultValue(YFORM,YKEY,YBBN,YTYP,YFELD)
				
				} elseif (YTYP=6) && '$$IsSavedLine^COMGridEdit31G(YFORM,YKEY) { 
					set YINHALT = $$GetDefaultValue(YFORM,YKEY,YBBN,YTYP,YFELD)
				}
			}		
			set $$$WWWDATEN(YFIELDNAME,1) = YINHALT
			
		} else {	// Manual field
			set $$$WWWDATEN(YFIELDNAME,2) = $get(YINHALT)
			set YINHALT = $$GetDefaultValue(YFORM,YKEY,YBBN,YTYP,YFELD)
			set $$$WWWDATEN(YFIELDNAME,1) = YINHALT
		}
		
		set strYINHALT = YINHALT
		if (YTYP=$$$EnumFTypeCur) {                                  ; show foreign / base currency
			if ($$$AmountIsFC(YINHALT)) && $case($$$CurrencyToUse,"Foreign":1,"Either":1,:0) {
				set strYINHALT = $$$FCAmount(YINHALT)
			} else {
				set strYINHALT = $$$FCBase(YINHALT)
			}
		}
		
		set YTEXT = $$WWWTR^COMGridEdit31S(0,YTYP,strYINHALT,DLDP)  ; Use D]]><![CDATA[P wrapper
		if YTYP=$$$EnumFTypeBln set YTEXT = +YTEXT                  ; Checkboxes
		set $$$WWWDATEN("REFERENCEVALUE",YFIELDNAME,1) = YTEXT
	$$$LogR2x("REFERENCEVALUE:C1:"_YTEXT)
	}
	
	; TODO	shobby	vvvv :  Merge this with what happens OnBlur  vvvvvvvvvvvvvvvvvvvvvvvv
	set YBACKGROUNDCOLOR = YCOLOFF

	set YVOR = $$$GRIDYVOR(YFORM)
	set YENABLED = $$Enabled^COMGridEdit31G(YVOR,YTXT,YHID,YFELD,YTYP,YKEY,YFORM,YBBN,"","","",.blnMandatory,$$$YES,.YBACKGROUNDCOLOR,.YTEXT,.strFontColor) 

	new YWARNING,YMANDATORY,YREQUIRED
	set YWARNING   = $$$NO
	set YMANDATORY = blnMandatory
	set YREQUIRED  = $$$NO
	
	;SESDF-952 vvvvv
	if (+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))) 
	   && (YFORM = "VARAlertaLocalLinha") && (+$G(^CacheTemp(YUSER,"Grid","Exporting")) = $$$YES){
		;Não executa o OnBeforeFormat se estiver exportando a grid	   
	}
	else{
		do OnBeforeFormat^COMGridEdit31Events(YFORM,YFIELDNAME,$$$NO,YENABLED)
		; TODO ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	}
	;SESDF-952 ^^^^^

	if $$$WWW122InputType(YTXT)=$$$EnumFTypeHide {   ; Hidden
		set YTEXT=""
	}
	set YTEXT1 = $$TEXT^COMGridEdit31F(,YFIELDNAME,.YTXT,.PARA,REL,YTEXT,YTYP)
	if 'YENABLED set YTEXT1 = $$CreateLink(YTEXT1,YTEXT,YBACK,YTXT)

	if ($$$WWW122ButtonBehindInputField(YTXT)'="") { 
		if YENABLED = $$$NO {  ;Disable field in grid
			;Permanent Button
			set YTEXT1 = $$GetCustomButton^COMGridEdit31F(YFORM,YTXT,YFIELDNAME,$$$YES)_YTEXT1
		}
	}	
	set YTEXT1 = $$JSESC^WWWENCODE(YTEXT1)							;SR18060
	if 'YENABLED if strFontColor'="" set YFONTCOLOR = strFontColor ;16511		
	
	// SR17377   drops unused parameters and adds header string
	; SR17724 vvvvv
	if (pblnLoop'>$$FixedColumns^COMGridEdit31V2(YFORM))&&($$GridVersion^COMGridEdit31V2()) { ;SR17724.12
		set blnLastKey="false"													;SR17724.6
		if pblnLoop=$$FixedColumns^COMGridEdit31V2(YFORM) set blnLastKey="true"	;SR17724.6 ;SR17724.12
		;SR18060 write YCR,"cgeBodyFieldCell(newRowKey,'"_YFIELDNAME_"','"_YFONT_"','"_YFONTSIZE_"','"_YBACKGROUNDCOLOR_"','"_YHEIGHT_"','"_$get(YALIGN)_"','"_$zconvert(YTEXT1,"o","JS")_"','"_YENABLED_"','"_$zconvert($get(YTOOLTIP),"o","JS")_"','"_YCOLON_"','"_$get(YFONTCOLOR)_"','','"_pblnExpand_"',"_blnLastKey_");" ;SR17658 ;SR17724.6
		write YCR,"cgeBodyFieldCell(newRowKey,'"_YFIELDNAME_"','"_YFONT_"','"_YFONTSIZE_"','"_YBACKGROUNDCOLOR_"','"_YHEIGHT_"','"_$get(YALIGN)_"','"_YTEXT1_"','"_YENABLED_"','"_$zconvert($get(YTOOLTIP),"o","JS")_"','"_YCOLON_"','"_$get(YFONTCOLOR)_"','','"_pblnExpand_"',"_blnLastKey_");" ;SR17658 ;SR17724.6
	} else {
		;SR18060 write YCR,"cgeBodyFieldCell(newRow,'"_YFIELDNAME_"','"_YFONT_"','"_YFONTSIZE_"','"_YBACKGROUNDCOLOR_"','"_YHEIGHT_"','"_$get(YALIGN)_"','"_$zconvert(YTEXT1,"o","JS")_"','"_YENABLED_"','"_$zconvert($get(YTOOLTIP),"o","JS")_"','"_YCOLON_"','"_$get(YFONTCOLOR)_"','','"_pblnExpand_"');" ;SR17658
		write YCR,"cgeBodyFieldCell(newRow,'"_YFIELDNAME_"','"_YFONT_"','"_YFONTSIZE_"','"_YBACKGROUNDCOLOR_"','"_YHEIGHT_"','"_$get(YALIGN)_"','"_YTEXT1_"','"_YENABLED_"','"_$zconvert($get(YTOOLTIP),"o","JS")_"','"_YCOLON_"','"_$get(YFONTCOLOR)_"','','"_pblnExpand_"');" ;SR17658
	}
	; SR17724 ^^^^^
	//if ($get(^CacheTemp(YUSER,"Grid","ExpandLines"))) { ;SR17724.19
	if 'pblnExpand&&($get(^CacheTemp(YUSER,"Grid","ExpandLines"))) { ;SR17724.19 ;SR17724.21
		if YBBN=$piece($$$GRIDColumnOrder,",",$length($$$GRIDColumnOrder,",")) { ;SR17724.19
			;Invisible cell at end of row.
			write YCR,"cgeBodyFieldCell(newRow,'End_"_YROW_"','"_YFONT_"','"_YFONTSIZE_"','ivory','"_YHEIGHT_"','"_$get(YALIGN)_"','&nbsp;','"_YENABLED_"','','"_YCOLON_"','"_$get(YFONTCOLOR)_"','','0','0','1');" ;SR17658		
		}
	}

	quit
	
	
CreateLink(pYTEXT,pYKEY,pYBACK,pYTXT)
	;-------------------------------------------------------------------------------
	; Use to create a hyperlink in a read only cell to a related class.
	;
	; Params:
	;
	; Implicit:
	;	REL		
	;	PARA	
	; 
	; Returns:
	;
	; History:
	; 28-Apr-2008	GM		SRBR014867: Allows user choose another form in WWW122 for hyperlink in grid
	; 03-Mar-2008	shobby	SRAdHoc:	If there are multiple links, create them on a separate line.
	; 07-Nov-2007	shobby	SRBR014752: Adjusted so that multiple links are created
	;							if the contents of a cell is a list (separated by ;)
	; 31-Oct-2007	shobby	SRBR014752: Created
	;-------------------------------------------------------------------------------
	new YBACK,YKEY,YTRAKT,YPARA,YKEY1,YFKEY,YFORM,strLink,strKey,intLoop,strPiece,intList,strText
	
	set strLink = ""
	if ($get(REL)'="") && ($get(pYKEY)'="") && $$$WWW122HyperlinkToRelatedClass(pYTXT) {
		for intList=1:1:$length(pYKEY,";") {
			set YKEY = $piece(pYKEY,";",intList)
			if $get(PARA)'="" {
				set strKey = ""
				for intLoop=1:1:$length(PARA,$$$COMMA) {
					set strPiece=$piece(PARA,",",intLoop)
					if (strPiece'["""")&&(strPiece'=+strPiece) {
						set strPiece=""""_@strPiece_""""
					} else {
						set strPiece=""""_strPiece_""""
					}
					if intLoop>1 set strKey = strKey_$$$COMMA
					set strKey = strKey_strPiece
				}
				set strKey = strKey_","_YKEY
				set YKEY   = $$^WWWKEYBUILD(strKey)
			}
			
			set YFORM = $$$WWW122HyperlinktoForm(pYTXT)
			if YFORM="" set YFORM = REL
			
			if $length(pYKEY,";")=1 {
				set strText = pYTEXT
			} else {
				set strText = $piece(pYKEY,";",intList)
			}
			if (intList>1) set strLink = strLink_"<BR>"
			set strLink = strLink_"<A HREF='' class=link onClick=""subWindow('"_YAKTION_"EP=WWWFORM&amp;YFORM="_YFORM_$$WWWCGI2^WWWCGI($$$YES)_"'); return false;"">"_strText_"</A>"
		}
	} else {
		set strLink=pYTEXT
	}
	quit strLink
	
	
GetDefaultValue(pidForm,pstrKey,pidFormField,pidInput,pobjData,pidClsField="")
	;-------------------------------------------------------------------------------
	; Get the default value for a field - from WWW122 or WWW122D
	; 
	; NOTE: This could be moved to WWWFORM* later
	;
	; Params:	pidForm			- grid form (WWW120)    (YFORM)
	;			pstrKey			- current key           (YKEY)
	;			pidFormField	- form field (WWW122)   (D#)
	;			pidInput		- input type of field   (YTYP)
	;			pobjData		- current record        (YFELD)
	;			idClsField		- class field (optional)
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 06-Jan-2011	GRF		SR17579: Use explicit tag for WWWTR calls
	; 05-Jan-2010	GRF		SR15525: Call to $$Convert^WWWTR rather than $$^WWWTR
	; 10-Jul-2007	shobby	SRBR014553: Use standard routine to get form field data.
	; 13-Nov-2006	JW		SR14550: Created (moved from BodyFieldCell)
	;-------------------------------------------------------------------------------
	new strValue,YBBN
	
	set YBBN = pidFormField   ;Temporary change for BR014809 (Being patched in to 1.46.1)
	set strValue = $$$WWW122DefaultVariableInput($$Get^WWW122(pidForm,pidFormField))
	
	if strValue'="" {
		if ((pidInput=1) || (pidInput=7)) && ($extract(strValue)'="@") {
			set strValue = $$GetInternal^WWWTR(pidInput,strValue)               ; Date/Time
		
		} else {
			set strValue = $$CalculateString^WWWFORMD(strValue,pidForm,pstrKey,pidClsField,pobjData)
		}
	}
	quit strValue
	
	
GetRelationship(pYTEXT,pREL,pPARA,pRELF)
	;-------------------------------------------------------------------------------
	; If data in this field is related to another class translate the display text.
	;
	; Called By:
	;	DISPLAYLINE^COMGridEdit31Body
	;
	; Inputs:
	;	pYTEXT		$$$KEYLAST
	;	pREL		Class
	;	pPARA		Keys ($$$KEY1,$$$KEY2...)
	;	pRELF		Data Piece number
	; 
	; e.g.    Obtains $piece(^Class(0,$$$KEY1,$$$KEY2,$$$KEYLAST,1),Y,DataPieceNo) if it exists
	; 
	; 
	; Returns:	Display string : Enum (DisplayText)    e.g. for combo box
	;				or               DisplayText           if set to hide relation IDs
	;
	; History:
	; 13-Mar-2012	shobby	SR17724.25: Corrected display of relation classes in primary keys
	; 13-Dec-2007	shobby	SRBR014805: Disabled call to $$HideRelationClassIDs^WWW122HideRelation.
	;							This method is only ever called from a primary key
	;							so the routine is not relevant here.
	; 29-Nov-2007	GM		SRBR014805: Hide relation class ID of a specific class relation
	; 12-Apr-2007	HeberB	BR014432: Show id if requested
	; 29-Dec-2004	Shobby	Created (SR10061)
	;-------------------------------------------------------------------------------
	new strDisplay,strSUCH
	
	set strDisplay=$translate(pYTEXT,"""")
	
	if pREL'="" {
		set strSUCH="^"_pREL_"("""_YM_""""  ;ZUSAMMENBAU DER GLOBALREFERENZ
		; FIXME : <GRF> YM doesn't cater for shared classes - won't matter if can only use company zero.  Change to zero.
		
		if pPARA'="" {
			;17724.25 set strSUCH=strSUCH_","_$$^WWWKEYBUILD(pPARA)
			set strSUCH=strSUCH_","_pPARA	;17724.25 
		}
		set strSUCH=strSUCH_","_pYTEXT_",1)"
		
		if $data(@strSUCH) {
			if +$$$WWW012HideRelationClassIDs($get(^WWW012(0,0,1))) {
				set strDisplay=$piece(@strSUCH,Y,pRELF)
			
			} else {
				set strDisplay=strDisplay_"&nbsp;("_$piece(@strSUCH,Y,pRELF)_")"
			}
		}
	}
	quit strDisplay
	
	
GetYLENGTH(YDAT="",YTXT="",YFORM="",FLFN="")
	;-------------------------------------------------------------------------------
	; When determining the length that entry is restricted to in a cell also look at customisation.
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 10-Jul-2007	shobby	SRBR014553: Customisation is obtained by referencing
	; 							form field.
	; 19-Jul-2006	shobby	SRBR014100: Created
	;-------------------------------------------------------------------------------
	new intLength,objWWW122D
	
	set intLength=""
	if intLength="" set intLength = $$$WWW122FieldSize(YTXT)
	if intLength="" set intLength = $$$WWW003InputLength(YDAT)
	if intLength="" set intLength = $$$WWW122ModifiedFieldLength(YTXT)
	quit intLength

	
GetCellWidth(YDAT="",YTXT="",YFORM="",FTYP="",FLFN="",YBED="",&pintLength)
	;-------------------------------------------------------------------------------
	; Replaces GetYLENGTH and some other code in PARA
	; Also allows the size to be defined in the 'Fix Answer Length In Pixels' field
	;
	; Called By : PARA^COMGridEdit31Body
	; 
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 22-Oct-2009	shobby		SR16969: FixAnswerLengthInPixel on primary key.
	; 21-Jul-2009	shobby		SR16730: Created
	;-------------------------------------------------------------------------------
	new fltWidth

	if pintLength="" set pintLength = $$$WWW122FieldSize(YTXT)
	if pintLength="" set pintLength = $$$WWW003InputLength(YDAT)
	if pintLength="" set pintLength = $$$WWW122ModifiedFieldLength(YTXT)

	if FTYP="D" {
		if $$$COMGridEditLayoutHidden($get(^COMGridEditLayout(0,YBED,YFORM,FLFN,1))) {
			set fltWidth = 0
			quit fltWidth                     ; EARLY EXIT to avoid reset to default 120
		}
		set fltWidth = $$$COMGridEditLayoutWidth($get(^COMGridEditLayout(0,YBED,YFORM,FLFN,1)))
	
	} elseif FTYP="P" {
		set fltWidth = $$$COMGridEditLayoutWidth($get(^COMGridEditLayout(0,YBED,YFORM,FTYP_FLFN,1)))
	}
	
	; FIXME : Can we have "Standard" column widths similar to COMGrifEditLayout? <GRF>
	
	if $get(fltWidth)="" {
		if FTYP="D" {
			set fltWidth=($$$WWW122FixAnswerLengthInPixel(YTXT))   ;FELDBREITE
			if +fltWidth=0 {
				set fltWidth = pintLength*8        ;FELDLÄNGE * ZEICHENGRÖSSE
				if fltWidth>200 set fltWidth = 200
				set fltWidth=fltWidth*1.3330106485963213\1 ;points
			}
			if $$$WWW122DataInputType(YTXT)=3 if fltWidth<24 set fltWidth=24  ;MINDESTGRÖSSE FÜR CHECKBOX
		
		} elseif FTYP="P" {
			set fltWidth = ($$$WWW121DFixAnswerLengthInPixel($get(^WWW121D(0,YFORM,FLFN,0,1))))
			if fltWidth="" set fltWidth = $$$WWW121FixAnswerLengthInPixel(YTXT)   ; FIXME : this field is not on form WWW121 (it is on WWW121D) <GRF>
		}
	} 
	if +fltWidth=0 set fltWidth = 160  ;*** Pixels ***

	quit fltWidth  ;TODO sort this mess out with pixels and points.

	
	; FIXME : most variables are immediately set to null so default is unnecessary.
PARA(FTYP,FLFN,&YWIDTH="",&YVALIGN="",&YHEIGHT="",&YFONT="",&YFONTSIZE="",&YTYP="",&YFORM="",&YLFN="",&YTXT="",&YDAT)
	;-------------------------------------------------------------------------------
	; SET PARAMETER
	;	FTYP = FIELD TYPE D=DATA FIELD P=PRIMARY KEY    (Note: "M" not used)
	;	FLFN = SEQ. NUMBER
	; 
	; Called by:	COMGridEdit31A, COMGridEdit31S, COMGridEdit31Body, INReqCommon
	; 
	; ByRef : YWIDTH,YVALIGN,YHEIGHT,YFONT,YFONTSIZE,YTYP,YFTYPE,YFORM,YLFN,YTXT,YDAT
	; 
	; Returns: (undeclared)	
	;			DLDP,DLDPStorage,PARA,REL,RELCF,RELF,SUCH
	;			YCOLOFF,YCOLON,YENABLED,YFTYPE,YHID,YLENGTH,YPADDING
	;			YDATEI,YGRIDGRAY,YGRIDWHITE
	;
	; History:
	; 16-Aug-2013	shobby	CORE-233.11: pass in additional parameter to become YBBN
	; 30-Jul-2013	shobby	CORE-204.1: Get correct field id.
	; 10-Nov-2011	shobby	SR17725: FATSEARCH
	; 25-May-2011	GRF		SR17250: call common function for decimal places also
	;							get objWWW122 record for manual fields
	; 11-Nov-2010	shobby	SR17612: RelationWithSearch function (removed +)
	; 21-Apr-2010	GRF		SR17177: Macros; doco
	; 17-Nov-2009	PPP		SR17029:IF both Relation fields, Normal & Calc are
	; 							defined, Only use Calc
	; 21-Jul-2009	shobby	SR16730: new function GetCellWidth to get the width.
	; 29-Jun-2009	PPP		SR16663: Add the Calculated Relation Display Fields
	; 19-Feb-2008	GRF		Mark ".params" in subroutine calls with "&"
	; 08-Nov-2007	shobby	SRBR014769: YFELD may not be defined when displaying the
	;							header of a grid.  But still want to call out to the
	;							OnBeforeFormConstruction to decide whether to show
	;							the column or not. (At this time YFELD is not relevant)
	; 20-Aug-2007	shobby	SRBR014678: If no widths are defined set a maximum of 200
	;							(Can be changed later by the user).
	; 10-Jul-2007	shobby	SRBR014553: Use standard routine to get form field data
	;							including customisation.
	; 05-Jul-2007	shobby	SR14917: Consider customisation of the InputType.
	;							 It is a bit of a mystery why customisation of a
	;							 class property is done at the form level.
	; 04-Jul-2007	RPW		SRadhoc: Removed irrelevant logic (which causes an
	;							undefined bug as well)
	; 05-Apr-2007	GRF		SRBR014310: EnumFType macros
	; 02-Mar-2007	PO		SR15466: New by ref parameter YDAT
	; 20-Nov-2006	JW		SR15201: YDAT may be undefined - check it
	; 25-Oct-2006	PO		SR15201: By default use the form fields relation settings if
	;							no relation class the use class settings
	; 24-Oct-2006	Steve S	SR14915: File name cells.
	; 19-Jul-2006	shobby	SRBR014100: Consider customisation when determining YLENGTH.
	; 26-Jun-2006	JW		SR12775: Colour processing removed - now done in OnBeforeFormat
	; 28-Oct-2005	JW		SR13074: Exchange Rate type
	; 02-Sep-2005	PO		SR12965: Included new volatile global DLDPStorage
	; 27-Jun-2005	PO/JW	SR12705: In the case of manual fields pass YDAT to
	;							GetDecimalPointNum safely
	; 06-Jun-2005	shobby	SR12449: Include primary keys in column resizing.
	; 04-Apr-2005	shobby	Get YDATEI from REFERENCECLASS
	; 07-Mar-2005	JW		Add DLDP - number of decimal places.
	; 02-Mar-2005	JW		Only use COMGridEditLayout for width if data field (not key).
	; 09-Feb-2005	shobby	Used variable for strType; passed YVALIGN as a parameter.
	; 19-Jan-2005	shobby	Removed some . syntax.
	; 14-Dec-2004	JW		Gave manual fields an input type.
	; 08-Dec-2004	PO		SR11075 Determining whether field editable
	; 02-Dec-2004	PO		SR11074 Prevent undefined errors when field doesn't
	;							exist in class def
	;-------------------------------------------------------------------------------
	new intLocked,objWWW122D,strField,strType,strYFELD,YVOR
	
	$$$LogR2("PARA",$get(FTYP)_":"_$get(FLFN))
	
	set YVOR = $$$GRIDYVOR(YFORM)
	
	$$$LogRx(YFORM_"<"_YVOR)	
	
	set (YWIDTH,YVALIGN,YHEIGHT,YFONT,YFONTSIZE,YTYP,YLFN,YTXT) = ""
	set (DLDP,DLDPStorage,PARA,REL,RELCF,RELF,SUCH,YCOLOFF,YCOLON,YENABLED,YFTYPE,YHID,YLENGTH,YPADDING) = ""
	
	quit:$get(FTYP)=""
	
	;---------------------------------------
	;  FTYP		Form Key or Data Field	 :
	;  YTXT		objFormField			 :	YDAT	objClassField
	;  FLFN		idFormField				 :	YLFN	idClassField
	;  YTYP		enumFieldType			 :
	;---------------------------------------
	
	if $get(YFORM)="" set YFORM = $get(^CacheTemp(YUSER,"Grid","Name"))
	set YDATEI    = $$$GRIDClass(YFORM)
	set YHEIGHT   = $get(^CacheTemp(YUSER,"Grid","YHEIGHT"))
	set YFONT     = "arial"
	set YFONTSIZE = 10
	
	;if FTYP="D" {   ; SR17250
	if (FTYP="D") || (FTYP="M") {
		set YTXT = $$Get^WWW122(YFORM,FLFN)       ; FORMULARFELDDEFINITION 
		set YLFN = $$$WWW122SequenceNumber(YTXT)  ; DATENFELD NUMMER
		set YTYP = $$$WWW122InputType(YTXT)
	
	} elseif FTYP="P" {
		set YTXT = $get(^WWW121(0,YFORM,FLFN,1))  ; FORMULARFELDDEFINITION
		set YLFN = FLFN
		set YTYP = $$$WWW122InputType(YTXT)       ; FIXME : WWW122 D5:InputType is not used in Primary keys WWW121.  Overridden in next step
	}
	
	if +YLFN'=0 {
		if FTYP="D" {
			set YDAT = $get(^WWW003(0,YDATEI,YLFN,1))  ;DATENFELDDEFINITION
		
		} elseif FTYP="P" {
			set YDAT = $get(^WWW002(0,YDATEI,YLFN,1))  ;DATENFELDDEFINITION
			set YTYP = $$$WWW002InputType(YDAT)        ;FELDART
		}

	} else {
		set YLFN = FLFN  ; for manual fields
	}
	
	set REL = $$$WWW122RelationClass(YTXT)
	if REL '= "" {
		set PARA  = $$$WWW122RelationalPrimaryKey(YTXT)
		set RELF  = $$$WWW122RelationalDataField(YTXT)
		set RELCF = $$$WWW122CalcRelationalDataField(YTXT)
		
	} elseif $get(YDAT)'="" {
		set REL   = $$$WWW003RelationDatabase(YDAT)
		set PARA  = $$$WWW003RelationalPrimaryKeys(YDAT)
		set RELF  = $$$WWW003RelationalDisplayItems(YDAT)
		set RELCF = $$$WWW003CalcRelationalDisplayItems(YDAT)
	}

	if +RELF=0                 set RELF=1
	if (+RELF=0) && (+RELCF=0) set RELF=1
	if (+RELF=1) && (+RELCF=1) set RELF=0		//SR17029

	set YWIDTH = $$GetCellWidth($get(YDAT),YTXT,YFORM,FTYP,FLFN,YBED,.YLENGTH)
	
	set YGRIDGRAY  = "silver"
	set YGRIDWHITE = "ivory"
	if FTYP="P" set YCOLOFF = YGRIDGRAY
	if FTYP="D" set YCOLOFF = YGRIDWHITE
	 
	if (($$$WWW122DataInputType(YTXT)=2) || ($$$WWW122DataInputType(YTXT)=11)) && (REL="") {
		set $$$WWW122DataInputType(YTXT) = 3  ;KEIN RADIO OHNE AUSWAHL
	}
	
	if $get(YDAT)'="" {
		if (YTYP=$$$EnumFTypeBln) && (($$$WWW122DataInputType(YTXT)=2) || ($$$WWW122DataInputType(YTXT)=11)) {
			set $$$WWW003SortTheRelation(YDAT) = $$$YES
		}
		if ($$$WWW122DataInputType(YTXT)=0) && (REL'="") && (+$$$WWW003SortTheRelation(YDAT)=$$$NO) {
			set $$$WWW122DataInputType(YTXT) = 4  ;SELECT
		}
	
	} else {
		// At this point YDAT can only be 1 of two values, "" or undefined
		if (YTYP=$$$EnumFTypeBln) && (($$$WWW122DataInputType(YTXT)=2) || ($$$WWW122DataInputType(YTXT)=11)) set $$$WWW122SortTheRelation(YTXT) = $$$YES
		// If YDAT is undefined, the next code line will crash
		// If YDAT="" then the if condition will always be true if +$piece("",Y,62)=0 
		//if $piece(YTXT,Y,2)=0 if REL'="" if +$piece(YDAT,Y,62)=0 set $PIECE(YTXT,Y,2)=4  ;SELECT
		if ($$$WWW122DataInputType(YTXT)=0) && (REL'="") set $$$WWW122DataInputType(YTXT) = 4  ;SELECT // SRadhoc
	}
	 
	set YVALIGN  = " text-align:left;"
	set YPADDING = " padding-left:2px;"
	;set YPADDING = ""     ; SR17377 GRF Test - reverted
	
	if (YTYP=$$$EnumFTypeNum) || (YTYP=$$$EnumFTypeCur) set YVALIGN=" text-align:right;",YPADDING=" padding-right:2px;"
	
	if (YTYP=$$$EnumFTypeFile) set YVALIGN = " display:inline; vertical-align:middle;"
	 
	set YFELD = $get(YFELD)
	do OnBeforeFormConstruction^COMGridEdit31Events(YTXT,FLFN) ;CORE-233.11
	
	if YHID=2 set $$$WWW122DataInputType(YTXT)=15  ;HIDDEN
	
	; Find #DP for floating / currency types (should never apply to P keys)
	if (YTYP=$$$EnumFTypeCur) || (YTYP=$$$EnumFTypeFloat) || (YTYP=$$$EnumFTypeForex) {
	;	set DLDP        = $$GetDecimalPointNum(YFORM,YBBN,$get(YDAT)) ; DiscLinc Decimal Point (DLDP) ; SR17250
		set DLDP        = $$GetDecimalPlaces^COMUtilNum(YFORM,YLFN,"",$get(YFELD),YTXT) ; DiscLinc Decimal Point (DLDP) ;CORE-204.1
		set DLDPStorage = $$GetDPNumForStorage(DLDP,$get(YDAT))
	}
	
	set strType = $$$WWW122DataInputType(YTXT)
	
	;SR17612
	;SR17725
	set YFTYPE = $select(	YTYP=$$$EnumFTypeDate       : "DATE",
							strType=3                   : "CHECK",
							(strType=2)||(strType=11)   : "RADIO",
		(strType=4)&&($$$WWW122RelationWithSearchFuncti(YTXT)=0)&&(REL'="")  : "SELECT",
							(strType=10)                : "CURRENCY",
							(strType=18)				: "FATSEARCH",
							1                           : "INPUT")
	quit
	
	
GetDecimalPointNum(pidForm,pidFormFldNo,pobjClass="")
	;-------------------------------------------------------------------------------
	; Get number of decimal points for displayed value.
	; 
	; Called By: ScreenUpdate^COMGridEdit31S (for type 8 Currency & 12 Floating)
	;            PARA^COMGridEdit31Body
	; 
	; Inputs:
	;	pidForm			Form Name
	;	pidFormFldNo	F# for form
	;	pobjClass		objWWW003
	; 
	; ByRef:
	;	YFELD			objData
	;	YDECIMALLEN		Standard number of decimal places
	; 
	; Returns:
	;	Number of decimal places
	;
	; History:
	; 25-May-2011	GRF		SR17250: call common function for decimal places
	; 24-May-2011	GRF		SR17250: unit-based decimal places should always
	;							override settings from Get^WWW122 which now include
	;							WWW003 and Inventory Cost based decimal places
	; 03-Feb-2011	GRF		SR17579: revised to also consider association with of
	;							qty with item for implied use of inventory unit
	; 10-Jul-2007	shobby	SRBR014553: Use standard method to get form field
	;							information including customisations.
	; 09-May-2007	GRF		SRBR014310: Use Decimals macro (D123=>D113)
	; 11-Apr-2007	GRF		SRBR014310: Associated Fields; clearer variables; use
	;						macros; move YDECIMALLEN block outside pobjClass test block
	; 10-Apr-2007	GRF		SRBR014310: Proof of concept change
	; 27-Jun-2005	PO/JW	SR12705: Made pYDAT optional
	; 07-Jun-2005	RW/JW	Default to 2 decimal places - like @net
	; 31-Mar-2005	RobertW	SR11824 Peer Review - Changed YDP to intDecimalPoints
	; 07-Mar-2005	JW		Created SR11824
	;-------------------------------------------------------------------------------
	new blnIsItem,blnIsUnit,idAssocClassFld,idClass,idClassFldNo,idItem,idUnit
	new intDecimalPoints,objWWW122
	
	$$$LogR("GetDecimalPointNum",pidForm_"<"_pidFormFldNo_"<")
	
	quit $$GetDecimalPlaces^COMUtilNum(pidForm,pidFormFldNo,"",$get(YFELD),"")   ; SR17250
	
	/* replaced code SR17250
	quit:(pidForm="")||(pidFormFldNo="") ""
	
	set objWWW122 = $$Get^WWW122(pidForm,pidFormFldNo)
	set intDecimalPoints = $$$WWW122Decimals(objWWW122)  ; SR17250 now includes WWW003 and Inventory Cost dp
	
	;---------------------------------------
	; If we are displaying a quantity field, see if it has been associated with a unit field
	; and, if so, see if the unit code has been set to a particular degree of accuracy.
	; - should override where unit-based regardless of settings from Get^WWW122
	;---------------------------------------
	
	if (intDecimalPoints="") {
		set idClass         =  $$$WWW120ClassUsedInForm($get(^WWW120(0,pidForm,1)))
		set idClassFldNo    = +$$$WWW122SequenceNumber(objWWW122)
		set idAssocClassFld =  $$$WWW122AssociatedwithField(objWWW122)
		if idAssocClassFld {
			do CheckRelation^WWWEVENTUtils(pidForm,idClass,pidFormFldNo,idClassFldNo,idAssocClassFld,.blnIsUnit,.blnIsItem)
			
			set idUnit = ""
			if blnIsUnit {
				set idUnit = $piece($get(YFELD),Y,idAssocClassFld)
			
			} elseif blnIsItem {
				set idItem = $piece($get(YFELD),Y,idAssocClassFld)
				if idItem'="" set idUnit = $$$INARTUnitofMeasure($get(^INART(0,idItem,1)))
			}
			if idUnit'="" set intDecimalPoints = $$$COMUnitDecimalPlaces($get(^COMUnit(0,idUnit,1)))
		}
	}
	
	; SR17250 - now included in Get^WWW122
	if (intDecimalPoints="") && (pobjClass'="") {
		set intDecimalPoints = $$$WWW003NoOfDecimals(pobjClass)
	}
	
	if (intDecimalPoints="") {
		set intDecimalPoints = $get(YDECIMALLEN,2)
	}
	quit intDecimalPoints
	*/    ; SR17250 ^^^
	
	/*
SaveGetDecimalPointNum(pidForm,pidFieldNo,pobjClass="") ; Remove after testing
	;-------------------------------------------------------------------------------
	new idUnit,intDecimalPoints,intUnitField,objWWW122
	
	$$$LogR("GetDecimalPointNum",pidForm_"<"_pidFieldNo_"<")
	
	quit:(pidForm="")||(pidFieldNo="") ""
	
	set objWWW122 = $$Get^WWW122(pidForm,pidFieldNo)
	set intDecimalPoints = $$$WWW122Decimals(objWWW122)
	;---------------------------------------
	; If we are displaying a quantity field, see if it has been associated with a unit field
	; and, if so, see if the unit code has been set to a particular degree of accuracy.
	;---------------------------------------
	if (intDecimalPoints = "") {
		set intUnitField = $$$WWW122AssociatedwithField(objWWW122)
		if intUnitField {
			set idUnit = $piece($get(YFELD),Y,intUnitField)
			if idUnit'="" {
				set intDecimalPoints = $$$COMUnitDecimalPlaces($get(^COMUnit(0,idUnit,1)))
			}
		}
	}
	
	if (intDecimalPoints = "") && (pobjClass'="") {
		set intDecimalPoints = $$$WWW003NoOfDecimals(pobjClass)
	}
		
	if (intDecimalPoints = "") {
		set intDecimalPoints = $get(YDECIMALLEN,2)
	}
	quit intDecimalPoints
	*/
	
GetDPNumForStorage(pintDLDP,pobjClass="") 
	;-------------------------------------------------------------------------------
	; Get number of decimal points for stored value.
	;
	; Called By: ScreenUpdate^COMGridEdit31S (for type 8 Currency & 12 Floating)
	;            PARA^COMGridEdit31Body
	; 
	; Params: pDLDP     - No of decimal points to display (DiscLinc Decimal Point)
	;         pobjClass - Field's class definition
	;
	; Returns: Number of decimal points
	;
	; History:
	; 24-May-2011	GRF		SR17250: clarify params; dont recheck DPforInventoryCost
	; 24-Oct-2005	PO		SR13702: Use new proc
	; 01-Sep-2005	PO		SR12965: Created
	;-------------------------------------------------------------------------------
	new intDecimalPoints
	
	$$$LogR("GetDPNumForStorage",pintDLDP_"<"_pobjClass_"<")
	
	if $$$WWW003InventoryCost(pobjClass) {
	;	set intDecimalPoints = $$DPforInventoryCost^INVORG()    ; SR17250 - pDLDP will be based on this for Inventory Cost fields
	;	if intDecimalPoints < pintDLDP set intDecimalPoints = pintDLDP+1 ; Always have greater precision than what is displayed
		set intDecimalPoints = pintDLDP+1   ; Always have greater precision than what is displayed
	} else {
		set intDecimalPoints = pintDLDP
	}
	$$$LogRx("iDP="_intDecimalPoints)
	quit intDecimalPoints
	
	
ShowCell(YFORM,YBBN="")
	;-------------------------------------------------------------------------------
	; Determines whether based on YOPTION, a cell should be displayed
	; 
	; May need to enhanced later to handle YOPTION1 as well.
	;
	; Returns:
	;
	; History:
	; 15-Sep-2010	shobby	SR17543: Don't show the hidden columns.
	; 10-Jul-2007	shobby	SRBR014553: Not necessary to access customisation
	;							directly when using $Get^WWW122
	; 16-May-2006	JW		SR14646: Allow customisation to hide.
	; 04-Apr-2005	PO/RPW	SR11349 Handle comma separated values in YOPTION
	; 17-Mar-2005	shobby	Parameter YFORM, required for additional grids
	; 07-Mar-2005	Paul K	Added code for YOPTION1
	; 02-Mar-2005	JW		Use strDisplay
	; 11-Jan-2005	JW		YOPTION not always available later, so use saved.
	; 10-Jan-2005	RobertW	Created (SR10061)
	;-------------------------------------------------------------------------------
	new blnShowCell,objFormField
	
	quit:YBBN="" $$$NO
	
	set blnShowCell = $$$YES
	
	set objFormField = $$Get^WWW122(YFORM,YBBN)  ; FIXME : Fields checked are not subject to customisation - speed up if get direct
	if objFormField'="" {
		if $get(YOPTION)=""  set YOPTION  = $get(^CacheTemp(YUSER,"Grid","YOPTION"))
		if $get(YOPTION1)="" set YOPTION1 = $get(^CacheTemp(YUSER,"Grid","YOPTION1"))
		
		if ($$$WWW122OnlyShowIfOptionYOPTION(objFormField)'="") &&
		   '$find(","_$$$WWW122OnlyShowIfOptionYOPTION(objFormField)_",",","_YOPTION_",") {
			set blnShowCell = $$$NO
			
		} elseif ($$$WWW122OnlyShowIfOptionYOPTION1(objFormField)'="") &&
		         '$find(","_$$$WWW122OnlyShowIfOptionYOPTION1(objFormField)_",",","_YOPTION1_",") {
			set blnShowCell = $$$NO
		}
	}
	
	if $find((";"_$get(^CacheTemp(YUSER,"Grid","HiddenColumns"))_";"),(";"_YBBN_";")) {  ;SR17543
		set blnShowCell = $$$NO                                                          ;SR17543
	}
	quit blnShowCell
	
	
GetColumnOrder(YFORM)
	;-------------------------------------------------------------------------------
	; Get the current column order
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 28-Sep-2005	JW		SR11573: Created
	;-------------------------------------------------------------------------------
	new strOrder
	
	quit:$get(YFORM)="" ""
	
	set strOrder = $get(^CacheTemp(YUSER,"Grid",YFORM,"COLUMNORDER"))
	
	if strOrder="" {
		set strOrder = $$StoreColumnOrder^COMGridEdit31(YFORM)
	}
	quit strOrder
	
	
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	;
	;       v v v v v   O B S O L E T E   S U B R O U T I N E S   v v v v v
	;
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
CREATEDATA(YKEY,YFORM)
	;-------------------------------------------------------------------------------
	; REVISED VERSION IN COMGridEdit31Body2 - THIS SUBROUTINE IS NOW OBSOLETE
	;-------------------------------------------------------------------------------
	; 
	; 
	; Store grid data in WWWDATEN
	;
	; Called By :
	;	CreateGrid^COMGridEdit31
	; 
	; Returns:
	;
	; History:
	; 03-Jun-2008	GRF		SR15739: Revisions moved to new routine
	; 26-May-2008	GRF		SR15739: Call AppendLine
	; 12-Jul-2007	RPW		SR15571: Enable objects to work with the grid. Later this change
	;						may get undone. Commented them out. Fixed so that this is not needed
	;						Leaving the code there in case it is needed again.
	; 07-Mar-2007	PO		SR15466: Added support for no key
	; 01-Aug-2006	JW		SR14730: Simplified. Added sort begin/end
	; 12-Oct-2005	JW		SR11573: Created
	;-------------------------------------------------------------------------------
	do CreateData^COMGridEdit31Body2(YKEY,YFORM)
	quit
	
	
LINEDATA(YFORM,YYKEY,YFELD,YROW,&pintCount="",&pblnDisplay="",&pblnChkAdd="",pblnStoreAll=$$$YES,pblnNewLine=$$$NO)
	;-------------------------------------------------------------------------------
	; REVISED VERSIONS IN COMGridEdit31Body2 - THIS SUBROUTINE IS NOW OBSOLETE
	;-------------------------------------------------------------------------------
	; 
	; 
	; NOTE : bln defaults set to null indicate unset state - they will be returned set to $$$YES or $$$NO
	; 
	; Store a line's data in WWWDATEN
	; 
	; Called By :
	;	CREATEDATA^COMGridEdit31Body	(YFORM,Keys,objData,$i(YROW),.intCount,.blnDisplay,.blnAdd,blnStoreAll,$$$NO)
	;	AddLine^COMGridEdit31Add		(YFORM,YYKEY,pYFELD,idRow   ,.intCount,$$$YES     ,       ,           ,pblnNewLine)
	; 
	; Params:	YFORM			- grid form name
	;			YYKEY			- line key (including quotes)
	;			YFELD			- line data
	;			YROW			- grid row number
	;			pblnStoreAll	- whether need to cache all data
	;			pblnNewLine		- Is this line being added because the user pressed the 'New' button on the grid.
	;
	; 
	;	  **********************   WARNING   ****************************
	;
	;	  This routine is called from two places.
	;		  1)  AddLine^COMGridEdit31Add     (With the value $$$YES)  pblnDisplay?
	;		  2)  CREATEDATA^COMGridEdit31Body (With the value $$$NO - default)
	;	  The 2nd method is inside a sortbegin/sortend construct meaning the GetEmpty routine
	;	  can not be relied on.
	;	  Consider this if ever changing the value from $$$NO to $$$YES in this call.
	;	  ***************************************************************
	;
	; ByRefs: The following are optional. If not passed in, will calculate then cache)
	;			pintCount		- row count
	;			pblnDisplay		- whether to always display, or check first
	;			pblnChkAdd		- whether to check for AddLine call
	;
	; Returns:
	;
	; History:
	; 28-May-2008	GRF		SR15739+: Line accidentally deleted - restored
	; 14-May-2008	HQN		SR15739: Corrected inital entry of DISPLAYORDER
	;							Index by key instead of rownumber now so sorts work
	;							(subsequently REVERTED - retained after subroutine
	;							for possible re-use)
	; 12-Dec-2007	shobby	SRBR014826: Some code check issues with variable dte
	; 28-Nov-2007	shobby	SRBR014826: Maintain the DISPLAYORDER construct if
	;							adding a new line from the new button on the grid.
	; 05-Sep-2006	JW		SR14979: Break up pblnDisplay / pblnChkAdd checks
	; 13-Jul-2006	JW		SR14730: Increment row count unconditionally, cache global refs
	; 10-Apr-2006	JW		SR14421: Add display order
	; 12-Oct-2005	JW		SR11573: Created
	;-----------------------------------------------------------------------------*/
	new lineId,oldRow,blnAdded,idField,YINHALT,YFIELDNAME,WWWDATEN,intRowCount,dte
	
	$$$LogR("LINEDATA",YFORM_"<"_YYKEY_"<"_YFELD_"<"_YROW_"<")
	
	// Initialise by ref parameters (so they can be cached for next call)
	if pblnDisplay="" {
		set pblnDisplay = ($get($$$EventExists("Display"))=$]]><![CDATA[$$NO)
	}
	if pblnChkAdd="" {
		set pblnChkAdd  = ($get($$$EventExists("LineAdded"))'=$$$NO)
		set pintCount   = $get($$$GRIDRowCount)
	}
	
	set dte = +$horolog
	
	; Store the key - even if not being displayed.
	set lineId = $$$DEQUOTE($piece(YYKEY,",",$length(YYKEY,",")))
	
	;set ^WWWDATEN(0,dte,YUSER,YFORM,"V","REFERENCEROW",lineId,1)=lineId      ; SR15739 REVERTED
	set ^WWWDATEN(0,dte,YUSER,YFORM,"V","REFERENCEROW",lineId,1)=YROW         ; SR15739+
	
	if (pblnDisplay || $$OnBeforeDisplayLine^COMGridEdit31Events(YFORM,$$$DEQUOTE(YYKEY),YFELD)) {
		set ^WWWDATEN(0,dte,YUSER,YFORM,"V","REFERENCEKEY",YROW,1) = YYKEY
		if 'pblnNewLine {                                                           ;BR014826
			set ^WWWDATEN(0,dte,YUSER,YFORM,"V","DISPLAYORDER",$$$GRIDIdx(YROW),1)	= YROW
			
		} else {
			do AddToDisplayOrder(dte)       ; See   ****** WARNING ******  above.   ;BR014826
		}
		
		if pblnStoreAll {             ;Data fields
			set idField=""
			for {
				set idField=$order(^WWW122(0,YFORM,idField))
				quit:idField=""
				
				set YINHALT=$piece(YFELD,Y,$$$GetClassField(YFORM,idField))
				set YFIELDNAME="Y"_YROW_"_"_idField
				
				set ^WWWDATEN(0,dte,YUSER,YFORM,"V",YFIELDNAME,1)=YINHALT
				set ^WWWDATEN(0,dte,YUSER,YFORM,"V",YFIELDNAME,2)=YINHALT
			}
		}
		set pintCount = pintCount+1
		
	$$$LogRx("---")
	$$$LogRm(^WWWDATEN(0,dte,YUSER,YFORM,"V","REFERENCEROW"))
	$$$LogRx("---")

		if pblnChkAdd do OnLineAdded^COMGridEdit31Events(YFORM,pintCount,YYKEY)
	}
	quit
	
	
AddToDisplayOrder(pdte)
	;-------------------------------------------------------------------------------
	; WILL BE SUPERSEDED BY DISPLAYLIST processing - THIS SUBROUTINE IS NOW OBSOLETE
	;-------------------------------------------------------------------------------
	; 
	; 
	; Finds out what the last record reference in the display order is. ie the one that
	; points to null.
	; ******* WARNING *********  See WARNING in LINEDATA routine. 
	;
	; Called By:
	;	LINEDATA^COMGridEdit31Body
	; 
	; Params: pdte		+$horolog - allowing for cross-midnight use?
	; 
	; Implied :
	;	YUSER
	;	YFORM
	;
	; Returns:
	;
	; History:
	; 12-Dec-2007	shobby	SRBR014826: Code check issues. pdte is now a parameter.
	; 29-Nov-2007	shobby	SRBR014826: Corrected processing when display is in default order
	; 28-Nov-2007	shobby	SRBR014826: Created
	;-------------------------------------------------------------------------------
	new intLoop
	
	set intLoop=""
	
	for {
		set intLoop=$order(^WWWDATEN(0,pdte,YUSER,YFORM,"V","DISPLAYORDER",intLoop))
		quit:intLoop=""
		quit:$get(^WWWDATEN(0,pdte,YUSER,YFORM,"V","DISPLAYORDER",intLoop,1))=""
	}
	
	if intLoop="" {
		set ^WWWDATEN(0,pdte,YUSER,YFORM,"V","DISPLAYORDER",$$$GRIDIdx(YROW),1)	= YROW		;BR014826
	} else {
		set ^WWWDATEN(0,pdte,YUSER,YFORM,"V","DISPLAYORDER",$$$GRIDIdx(YROW+1),1)	= ""		;BR014826
		set ^WWWDATEN(0,pdte,YUSER,YFORM,"V","DISPLAYORDER",$$$GRIDIdx(intLoop),1)	= YROW		;BR014826
	}
	quit
	
GetNextDisplayLine(pidRow,pintDir=1)  ; Some routines still pointing here
	;-------------------------------------------------------------------------------
	; REVISED VERSION IN COMGridEdit31Body2 - THIS SUBROUTNE IS NOW OBSOLETE
	; Using "DISPLAYLIST" instead of "DISPLAYORDER"
	;-------------------------------------------------------------------------------
	; 
	; 
	; Get next displayable line
	; 
	; DISPLAYORDER is used with idxRow as neither the row number nor the key can be 
	; used. The row number may contain an 'x', and the key may not be in the sort
	; order.  Do not change without thought :)
	; 
	; Params:	pidRow - current row
	;			pintDir - direction (1 = forwards / -1 = backwards)
	;
	; Returns: 
	; 
	; Notes:
	; 
	; Display order is nasty it's not direct, it's a linked list - based on the following value for some reason
	; if you need the order 3,5,4,2,1 the display order is as follows
	; 
	; "DISPLAYORDER"
	;    ,1,1) = 3
	;    ,2,1) = ""
	;    ,3,1) = 1
	;    ,4,1) = 5
	;    ,5,1) = 2
	;    ,6,1) = 4
	; 
	;	 step 1. $o("")=1   "DISPLAYORDER",1 returns 3
	;	 step 2. $o(3)=4    "DISPLAYORDER",4 returns 5
	;	 step 3. $o(5)=6    "DISPLAYORDER",6 returns 4
	;	 step 4. $o(4)=5    "DISPLAYORDER",5 returns 2
	;	 step 5. $o(2)=3    "DISPLAYORDER",3 returns 1
	;	 step 6. $o(1)=2    "DISPLAYORDER",2 returns null ("End_Of_Processing")
	;	 
	;	Initial entry pidRow=""
	;	
	;	1.   so the order finds 1, which returns pidRow as 3
	;	     Row 3 is drawn
	;	
	;	2.   called again with pidRow=3, which orders and return 5 (via 3 ordering to 4)
	;	     Row 5 is drawn
	;	
	;	3.   called again with pidRow=5, which orders and return 4 (via 5 ordering to 6)
	;	
	;	4... And so on until we get to pidRow=1, which orders and returns "" (via 1 ordering to 2)
	;	
	;	The null is a exit point for the while loop.
	;	
	; Note: Previously this only exited on a "" on the left hand side, now we can quit
	; with one on the right hand side.
	;
	; History:
	; 21-May-2008	GRF		SR15739: Reverted - value wasn't direction
	; 14-May-2008	HQN		SR15739: Corrected second check to take into account direction
	; 19-Jul-2007	RPW		SR15529: Allow pidRow to be null the second time checked.
	; 05-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	quit $$GetNextDisplayLine^COMGridEdit31Body2(pidRow,(pintDir=-1))
	;-------------------------------------------------------------------------------
	do {
		set pidRow = $order($$$WWWDATEN("DISPLAYORDER",$$$GRIDIdx(pidRow)),pintDir)
		quit:pidRow=""
		
	;	set pidRow = $get($$$WWWDATEN("DISPLAYORDER",pidRow,pintDir)) ; SR15739 REVERTED
		set pidRow = $get($$$WWWDATEN("DISPLAYORDER",pidRow,1))
		
	} while((pidRow'="") && ('$$$ViewableRow(pidRow,YFORM))) // SR15529
	quit pidRow
	
	
]]></Routine>
</Export>