<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INReqOpenDemands" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INReqOpenDemands
	
#include COMSYS
#include INConst
#include COMConst
	
OpenDemandsTable(pidLocn)
	;-------------------------------------------------------------------------------
	; Create a COMQuery for Outstanding demands.
	;
	; Params:
	; pidLocn - Sending Site Location
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
    ; 27-Jan-2010	PPP		SR17145: Added the OpenDemands Table
	;-------------------------------------------------------------------------------
	new Query,intCount,idAppParm
	
	set intCount = 1
	set Query("Col",intCount) = "D~"_intCount_"~L~~~~~"_$$$Text("388")		// "Location"
	
	set intCount = $increment(intCount)
	set Query("Col",intCount) = "D~"_intCount_"~R~~~~~"_$$$Text("209") 		// "Lines"

	set intCount = $increment(intCount)
	set Query("Col",intCount) = "D~"_intCount_"~R~~~~~"_$$$Text("IN01204") 	// "Partially Fulfilled"
 
	set intCount = $increment(intCount)
	set Query("Col",intCount) = "D~"_intCount_"~R~~~~~"_$$$Text("32935") 	// "Item Out Of Stock"
	
	set intCount = $increment(intCount)
	set Query("Col",intCount) = "D~"_intCount_"~L~~~~~"_$$$Text("32038") 	// "Type"
	
	set Query("Col",1,"DoInstead") = "LocationLink^INReqOpenDemands"
	set Query("Col",2,"DoInstead") = "DemandLink^INReqOpenDemands"
	set Query("Col",3,"DoInstead") = "DemandLink^INReqOpenDemands"
	set Query("Col",4,"DoInstead") = "DemandLink^INReqOpenDemands"
	set Query("Col",5,"DoInstead") = "TypeLink^INReqOpenDemands"
	set Query("Parameters","location") = pidLocn
	
	set Query("Loop") = "MessageQueryLoop^INReqOpenDemands"
	set Query("Get") = "set id = ^CacheTempReqOpenDemands(YUSER,id)"
	
	set Query("Title") = $$$Text("IN00466")  ;Open Demands
	set Query("PageSize") = 10
	
	do Query^COMQuery(.Query,.VORG)
	quit
	
	
MessageQueryLoop(pQuery,pStorage,pVORG)
	;-------------------------------------------------------------------------------
	; Generate the records COMQuery will use to build the table from.
	;
	; Params:
	;	pQuery - Object containing details of what COMQuery needs to use and do.
	;	pStorage - Where to store data, indirection used.
	;	pVORG - Not used.
	;
	; ByRefs: None
	;
	; Returns: intCount - The number of records to be displayed in the COMQuery
	;
	; History:
	; 26-May-2010	PPP		SR17309: Cannot Requisition Item - based on Item Status
    ; 27-Jan-2010	PPP		SR17145: Created
	;-------------------------------------------------------------------------------
 	new arrDRPDemands,fltAvail,fltDemand,fltQty
	new idDemand,idItem,idLocn,idOrder,idPriority,idRecvLocn,idxClosed
 	new intCount,intReqType,objDemand,objRecord,strDemands,strItemDesc
 	
	kill ^mtemp("Query",$job)
	kill ^CacheTempReqOpenDemands(YUSER)
	
	set idLocn = pQuery("Parameters","location")
	
	// FILTER FOR OPEN DEMANDS
	
	for idxClosed = " ",$$$NO {
		set idDemand = "" 
		for { 
			set idDemand = $order(^INDRPDEMANDs(0,12,idxClosed,3,idLocn,idDemand)) 
			quit:idDemand=""
			
			set objDemand = $get(^INDRPDEMAND(0,idLocn,idDemand,1))
						
			// SR17309:Cannot Requistion Item - based on Item Status
			continue:'$$IsUsable^INARTDataAccess($$$INDRPDEMANDItemNo(objDemand),$get(YFORM))
			continue:'$$IsDemandOpen(objDemand)
			continue:$$IsExternallyLocked^COMLock("INDRPDEMAND",idLocn_$$$COMMA_idDemand)
			
			set idRecvLocn = $$$INDRPDEMANDRequestingLocation(objDemand)
			
		//	continue:'$$RequisitionAllowed^WWW0121Rules(0,idLocn,idRecvLocn)
			
			set fltAvail  = $$GetQuantityOnHand^INARTMENGE($$$INDRPDEMANDItemNo(objDemand),idLocn)
			set fltDemand = $$$INDRPDEMANDQuantity(objDemand)
			set fltQty    = ""
			
			if fltAvail>=fltDemand {
				set idPriority = 1
			
			} elseif fltAvail && (fltDemand>fltAvail) {
				set idPriority = 2
			
			} else {
				set idPriority = 3
			}
						
			set arrDRPDemands(idRecvLocn,idPriority) = 
						$increment(arrDRPDemands(idRecvLocn,idPriority))_$$$COMMA_idRecvLocn
			
			set strDemands = $get(arrDRPDemands(idRecvLocn,idPriority,"l"))
			
			if $length(strDemands)<100 {
				set idItem      = $$$INDRPDEMANDItemNo(objDemand)
				set strItemDesc = "("_idItem_") "_$$$INARTSearchName($get(^INART(0,idItem,1)))
				
				if $length(strItemDesc) > 30 {
					set strItemDesc = $extract(strItemDesc,1,30)
			//	} else {
			//		set strItemDesc = $extract(strItemDesc_$justify("",30),1,30)
				}
				
				if strDemands="" {
					set arrDRPDemands(idRecvLocn,idPriority,"l")=idDemand_" "_strItemDesc_" "_$justify(fltDemand,3,0)
				} else {
					set arrDRPDemands(idRecvLocn,idPriority,"l")=$get(arrDRPDemands(idRecvLocn,idPriority,"l"))_$$$CRLF_idDemand_" "_strItemDesc_" "_$justify(fltDemand,3,0)
				}
				
				//Set the Available Qty too
				if idPriority = 2 {
					set arrDRPDemands(idRecvLocn,idPriority,"l")=arrDRPDemands(idRecvLocn,idPriority,"l")_" ("_fltAvail_")"
				}
				
			} else {
				set arrDRPDemands(idRecvLocn,idPriority,"l") = $get(arrDRPDemands(idRecvLocn,idPriority,"l"))_"...."
			}
		}
	}
	
	set intCount   = 0
	set idRecvLocn = ""
	for {
		set idRecvLocn = $order(arrDRPDemands(idRecvLocn))
		quit:idRecvLocn=""
		
		set objRecord = idRecvLocn_Y
		
		for idPriority=1:1:3 {
			set objRecord = objRecord_$get(arrDRPDemands(idRecvLocn,idPriority))
							_$$$COMMA_$get(arrDRPDemands(idRecvLocn,idPriority,"l"))
							_Y
		}
		
		if $$MainSite^WWW0121Utils(0,idLocn) = $$MainSite^WWW0121Utils(0,idRecvLocn) {
			set intReqType = 1
		} else {
			set intReqType = 2
		}
		set objRecord = objRecord_intReqType_Y
				
		set ^CacheTempReqOpenDemands(YUSER,idRecvLocn) = $extract(objRecord,1,$length(objRecord)-1)
		set @pStorage@($increment(intCount)) = idRecvLocn 
	}
	quit intCount
	
	
LocationLink(pidCol,pidLocn)
	;-------------------------------------------------------------------------------
	; Return hyperlink that will be displayed in the column listing the site locations.
	;
	; Params:
	; pidCol  - Not used.
	; pidLocn - Sending Site Location
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
    ; 27-Jan-2010	PPP		SR17145: Created
	;-------------------------------------------------------------------------------
	new strArgs,strOutput
	
	set strArgs = "'SetLocations^INReqOpenDemands','"_YLOCATION_"','"_pidLocn_"'"
	
	set strOutput = "<a href=""#"" onclick=""javascript:CallBack("_strArgs_");"">"
	set strOutput = strOutput_"("_pidLocn_") "_$$$WWW0121LocationName($get(^WWW0121(0,0,pidLocn,1)))
	set strOutput = strOutput_"</a>"
	
	quit strOutput
	
	
DemandLink(pidCol,pstrData)
	;-------------------------------------------------------------------------------
	; Return hyperlink that will be displayed in the column listing the site locations.
	;
	; Params:
	; pidCol - Column Id
	; pstrData - 
	;
	; ByRefs: None
	;
	; Returns: strOutput - HTML
	;
	; History:
    ; 27-Jan-2010	PPP		SR17145: Created
	;-------------------------------------------------------------------------------
	new idLocn,idPriority,intNoOfDemands,strArgs,strOutput,strToolTip
	
	set intNoOfDemands = $piece(pstrData,$$$COMMA,1)
	set idLocn         = $piece(pstrData,$$$COMMA,2)
	
	if pidCol = 2 {
		set idPriority = 1		//All Qty
	} elseif pidCol = 3 {
		set idPriority = 2		//Available Qty
	} elseif pidCol = 4 {
		set idPriority = 3		//Unavailable
	}
	set strToolTip = $$$Text($listbuild("IN01205"))_$$$CRLF  ; "Demand#  Item  Quantity"
 	set strToolTip = strToolTip_$piece(pstrData,$$$COMMA,3)
	
	set strArgs = "'SetLocations^INReqOpenDemands','"_YLOCATION_"','"_idLocn_"','"_idPriority_"'"
	set strOutput = "<a title="_""""_$get(strToolTip)_""""_" href=""#"" onclick=""javascript:CallBack("_strArgs_");"">"
	set strOutput = strOutput_intNoOfDemands
	set strOutput = strOutput_"</a>"
	
	quit strOutput
	
	
TypeLink(pidCol,pidType)
	;-------------------------------------------------------------------------------
	; Return hyperlink that will be displayed in the column listing the Type
	;
	; Params:
	; pidCol - Not used.
	; pidType - Req Type
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
    ; 27-Jan-2010	PPP		SR17145: Created
	;-------------------------------------------------------------------------------
	new strArgs,strOutput
	
	//set strArgs = "'SetLocations^INReqOpenDemands','"_YLOCATION_"','"_pidLocn_"'"
	
	//set strOutput = "<a href=""#"" onclick=""javascript:CallBack("_strArgs_");"">"
	set strOutput = "<a ;"">"
	set strOutput = strOutput_"("_pidType_") "_$$$AppEnum("INREQTYPE",pidType)
	set strOutput = strOutput_"</a>"
	
	quit strOutput
	
	
SetLocations(pidSendLocn,pidRecvLocn,pidPriority=0)
	;-------------------------------------------------------------------------------
	; When user clicks a hyperlink, if the Priority is 1 (Create for all Available Lines)
	; the Order is created, otherwise the User is prompted with a 'Confirm' windows message
	; box.
	;
	; Params:
	;	pidSendLocn   	- Sending Site Location
	;	pidRecvLocn 	- Receiving Site Location
	;	pidPriority		- 	0 All Demands for the Location
	;						1 Demand that can be fullfilled
	;						2 Demands that are Partially Fulfilled
	;						3 Demands that have no stock
	;
	; ByRefs: Nothing
	;
	; Returns: None
	;
	; History:
	; 04-Aug-2010 	PPP 	SR17467: Changed Message from 98 ("Continue") to IN01239
    ; 14-May-2010	PPP		SR17301: Updated to check for the Confirm prompt
    ; 27-Jan-2010	PPP		SR17145: Created
	;-------------------------------------------------------------------------------
	//Only Confirm if it is not Fully Fulfilled
	if pidPriority = 1 {
		do SetLocationConfirm(pidSendLocn,pidRecvLocn,1)

	} else {
		$$$StartScript()
		//SR17467
	; "If Ok button is clicked, items will be placed in a pending state and NOT released to the Issue screen. Press CANCEL to return to the screen!"
		write "if (confirm('"_$$$Text($lb("IN01239"))_"')) { CallBackNow('SetLocationConfirm^INReqOpenDemands','"_pidSendLocn_"','"_pidRecvLocn_"','"_pidPriority_"'); }"
	//	write "if (confirm('"_$$$Text($lb("98"))_"?')) { CallBackNow('SetLocationConfirm^INReqOpenDemands','"_pidSendLocn_"','"_pidRecvLocn_"','"_pidPriority_"'); }"
		$$$EndScript()
	}
	quit
	
	
SetLocationConfirm(pidSendLocn,pidRecvLocn,pidPriority=0)
	;-------------------------------------------------------------------------------
	; When user clicks a location hyperlink, set the Sending and Receiving Location fields
	; and if the Transfer Date and Dispatch fields are populated then save the record.
	;
	; Params:
	;	pidSendLocn   - Sending Site Location
	;	pidRecvLocn - Receiving Site Location
	;
	; ByRefs: Nothing
	;
	; Returns: None
	;
	; History:
    ; 14-May-2010	PPP		SR17301: Created
	;-------------------------------------------------------------------------------
	new objREQ

	set objREQ = $$GetFormData^COMUtilForm("INReq")
 
 	do PopulateDataField^COMUtils(YFORM,$$$FldINReqToLocn,  "")
	do PopulateDataField^COMUtils(YFORM,$$$FldINReqToLocn,  pidRecvLocn)
	do PopulateDataField^COMUtils(YFORM,$$$FldINReqFromLocn,pidSendLocn)
	
	do LinesToCreate(pidSendLocn,pidRecvLocn,pidPriority)
	write "SAVENOW();"
 	
	quit
	
	
LinesToCreate(pidSendLocn,pidRecvLocn,pidPriority)
	;-------------------------------------------------------------------------------
	; Create a list of demands that are to be loaded on to the transfer
	;
	; Params:
	;	pidSendLocn - Sending Site Location
	;	pidRecvLocn - Receiving Site Location
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 20-Apr-2011	SCR		SR17737: Corrected Qty Calculation
	; 26-May-2010	PPP		SR17309: Cannot Requistion Item - based on Item Status
    ; 27-Jan-2010	PPP		SR17145: Created
	;-------------------------------------------------------------------------------
	new fltAvail,fltDemand,fltQty,idDemand,idxClosed,objDemand
 	
	kill ^CacheTempREQLinesToCreate(YUSER)
	
	for idxClosed = " ", $$$NO {
		set idDemand = "" 
		for { 
			set idDemand = $order(^INDRPDEMANDs(0,12,idxClosed,3,pidSendLocn,idDemand))
			quit:idDemand=""
			
			set objDemand = $get(^INDRPDEMAND(0,pidSendLocn,idDemand,1))
			continue:pidRecvLocn'=$$$INDRPDEMANDRequestingLocation(objDemand)

			// SR17309:Cannot Requistion Item - based on Item Status
			if '$$IsUsable^INARTDataAccess($$$INDRPDEMANDItemNo(objDemand),$get(YFORM)) {
				continue	
			}
			
			if '$$IsDemandOpen(objDemand) || $$IsExternallyLocked^COMLock("INDRPDEMAND",pidSendLocn_$$$COMMA_idDemand) {
				continue
			}
			
			set fltAvail 	= $$GetQuantityOnHand^INARTMENGE($$$INDRPDEMANDItemNo(objDemand),pidSendLocn)
			set fltDemand 	= $$$INDRPDEMANDQuantity(objDemand)
			set fltQty		= ""
			
			if pidPriority = 0 {
				//Include all Outstanding Demands even if they cannot be fulfilled
				; SR17737 vvvv
				;set arrQty(+fltDemand)=""
				;set arrQty(+fltAvail)=""
				;set fltQty = $order(arrQty(""))  ; Lowest Quantity               
				set fltQty = $select(fltDemand<fltAvail:+fltDemand,1:+fltAvail) 
				; SR177737 ^^^^
			} elseif pidPriority = 1 {
				//Only demands that can be fulfilled
				continue:fltAvail<fltDemand
				set fltQty = fltDemand
			
			} elseif pidPriority = 2 {
				//Demands that can be partially fulfilled
				if fltAvail {
					continue:fltDemand<fltAvail
					set fltQty = fltAvail
				}
			
			} elseif pidPriority = 3 {
				//Demands that cannot be fulfilled
				continue:fltAvail
				set fltQty = 0
			}
			
			if fltQty'="" {
				set ^CacheTempReqLinesToCreate(YUSER,pidSendLocn,idDemand) = fltQty
			}
		}
	}
	quit
	
	
	;-------------------------------------------------------------------------------
	; Whether or not the demand is Outstanding.
	; NOTE: The term open is confusing as there is a field on the demand named closed,
	; 		just not closed does not make the demand 'open'.
	;
	; Params:
	; pobjDemand - Demand record.
	;
	; ByRefs: None
	;
	; Returns: blnStatus - $$$YES if demand is Outstanding otherwise $$$NO
	;
	; History:
    ; 27-Jan-2010	PPP		SR17145: Added Supply Created is null (as Req create the
    ; 							INDRPDEMAND record with Supply Created date/time)
    ; 27-Jan-2010	PPP		SR17145: Created
	;-------------------------------------------------------------------------------
IsDemandOpen(pobjDemand)
	new blnStatus
 
	set blnStatus = $$$NO
	
	//if $$$INDRPDEMANDReadyForDelivery(pobjDemand) && 
	if '$$$INDRPDEMANDDemandClosed(pobjDemand)         &&
	   '$$$INDRPDEMANDDeleteOrder(pobjDemand)          &&
	   '$$$INDRPDEMANDBlocked(pobjDemand)              &&
	   ($$$INDRPDEMANDDispatchNumber(pobjDemand) = "") &&
	   ($$$INDRPDEMANDItemNo(pobjDemand) '= "")        &&
	   ($$$INDRPDEMANDDemandType(pobjDemand) '= 9)     &&
	   ($$$INDRPDEMANDQuantity(pobjDemand) '= 0)       &&
	   ($$$INDRPDEMANDSupplyCreated(pobjDemand) = "")     {
		
		set blnStatus = $$$YES
	}
	quit blnStatus
	
	
CreateLinesReq(pidReq)
	;-------------------------------------------------------------------------------
	; Load "open" demands that can be fulfilled
	;
	; Params:
	; pidReq - Requisition Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 11-Feb-2010	PPP		SR17145/1:Corrected check for Error
    ; 27-Jan-2010	PPP		SR17145: Created
	;-------------------------------------------------------------------------------
	new enmStatus,fltQty,idDemand,idLocn,lstLangText,objDemand,strStatus
 	
	set strStatus = $$$OK
	set idLocn    = $order(^CacheTempReqLinesToCreate(YUSER,""))
	
	if idLocn '= "" {
		set idDemand = "" 
		for { 
			set idDemand = $order(^CacheTempReqLinesToCreate(YUSER,idLocn,idDemand))
			quit:idDemand=""

			set enmStatus   = $$AddLock^COMLock(YFORM,pidReq,"INDRPDEMAND",idLocn_$$$COMMA_idDemand)
			set lstLangText = $listbuild("IN00430",idDemand,idLocn)  ; "Demand %1 to be sent from location %2 is no longer available to be loaded."
 
			if enmStatus = $$$EnumCOMLOCKLockSuccessful {
	 			set objDemand = $get(^INDRPDEMAND(0,idLocn,idDemand,1))
 				//set fltQty = $$$INDRPDEMANDQuantity(objDemand)
				set fltQty = +$get(^CacheTempReqLinesToCreate(YUSER,idLocn,idDemand))

				set strStatus = $$Transaction^COMTransaction("LoadOpenDemand^INReqOpenDemands("""_idLocn_""","""_idDemand_""",0,"""_pidReq_""","_fltQty_")")
			}
			quit:$$$ISERR(strStatus)
		}
	}
	// need to report error //SR17145/1
	if $$$ISERR(strStatus) set strStatus = lstLangText
	
	quit strStatus
	

LoadOpenDemand(pidDemandLocn,pidDemand,pblnLoadInToGrid=$$$YES,pidReq,pfltQty)
	;-------------------------------------------------------------------------------
	; Load an Outstanding demand on to a Requistion.
	;
	; Params:
	; pidDemandLocn    - Sending Site Location
	; pidDemand        - Demand Id
	; pblnLoadInToGrid - $$$YES - Use $$$GRIDAddLine else use $$$Save
	; pidReq           - Req Id (Only required when pblnLoadInToGrid is $$$NO)
	; pfltQty          - 
	; 
	; ByRefs: None
	;
	; Returns: strStatus - $$$OK if successfully loaded demand on Transfer Order, otherwise $$$NO
	;
	; History:
    ; 27-Jan-2010	PPP		SR17145: Created
	;-------------------------------------------------------------------------------
	new BET
 	new idItem,idKey,idLine,idOrder,idRecvLocn,idReqLocn,idSendLocn,idSupply,idTour
	new objDemand,objLine,objReq,objSupply,strStatus
 	
	set strStatus = $$$NO
	set objReq    = $$$GRIDYFELDContainer
	set objDemand = $get(^INDRPDEMAND(0,pidDemandLocn,pidDemand,1))
	
	set idRecvLocn = $$$INReqToLocn(objReq)
	set idSendLocn = $$$INReqFromLocn(objReq)
	
	if $$IsDemandOpen(objDemand) && ($$$INDRPDEMANDRequestingLocation(objDemand) = idRecvLocn) {
		;set idxSendLocn  = $$$Index(idSendLocn)
		;set idxDemand    = $$$Index(pidDemand)
		;set idFullDemand = idSendLocn_$$$COMMA_pidDemand
		
		set objLine = ""
		set idItem  = $$$INDRPDEMANDItemNo(objDemand)
		set $$$INReqLineItem(objLine)           = idItem
		set $$$INReqLineQtyOrdered(objLine)     = pfltQty		//$$$INDRPDEMANDQuantity(objDemand)
		set $$$INReqLineQtyRequired(objLine)    = pfltQty		//$$$INDRPDEMANDQuantity(objDemand)
		set $$$INReqLineUnit(objLine)           = $$$INARTUnitofMeasure($get(^INART(0,idItem,1)))
		set $$$INReqLineFromStockLocn(objLine)  = idSendLocn
		set $$$INReqLineImportedDemand(objLine) = $$$YES
		set $$$INReqLineDemandLoaded(objLine)   = idSendLocn_$$$COMMA_pidDemand
		//set $$$INTFRLineSupply(objLine)       = $$GetSupplyKey^INTFRInterface(idSendLocn,pidDemand)
		//set $$$INTFRLineGroupNumber(objLine)	= $$$INDRPDEMANDGroupNumber(objDemand)
		
		if pblnLoadInToGrid {
			$$$GRIDAddLine(objLine,,"INReqLine")
		//	$$$GRIDAddLine(objLine,,"INReqLine",,,,,,.idLine)
			set strStatus = $$$OK
		} else {
			set idLine    = $order(^INReqLine(0,pidReq,""),-1)+1
			set strStatus = $$$Save("INReqLine",pidReq_$$$COMMA_idLine,objLine,$$$YES)
		}
		
		//Update the Supply
		if strStatus = $$$OK {
			set idOrder   = $$$INDRPDEMANDOrderNo(objDemand)
			set idReqLocn = $$$INDRPDEMANDRequestingLocation(objDemand)
		
			if (idOrder'="") && (idReqLocn'="") {
				set objSupply = $get(^INDRPSUPPLY(0,idReqLocn,idOrder,1))	
				set $$$INDRPSUPPLYReference(objSupply)         = $get(idLine)
				set $$$INDRPSUPPLYRequisitionNumber(objSupply) = pidReq
				set idSupply  = idReqLocn_","_idOrder
				set strStatus = $$Save^COMUtils("INDRPSUPPLY",idSupply,objSupply,$$$YES)
			}
		}
	}
	quit strStatus
 	
]]></Routine>
</Export>