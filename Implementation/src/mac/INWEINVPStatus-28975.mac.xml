<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INWEINVPStatus" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INWEINVPStatus
 
#include COMSYS
#include INConst
 
	; _____________________________________________________________
	; Status For Stocktake Header
	; -------------------------------------------------------------
	; Application parameter INSTOCKTAKESTATUS, make sure it's up-to-date in WWW001
	
	; 0 Unstarted
	; we have a stocktake object but haven't saved it yet 
 
	; 1 Started
	; we saved it in INWEINVP, but haven't created the snapshot (INWEINV records)
 
	; 2 Count Open
	; we created the snapshot and are currently in "counting"
 
	; 3 Count Complete
	; we closed a count but haven't decided whether to open another or close counting altogether
 
	; 4 Count Process Closed
	; we closed counting altogether, 
	; if this was a "doors closed" stocktake, we opened the doors. Can't create more counts
	; we *can* still edit the final adjustment numbers and reasons
 
	; 5 Stocktake Complete 
	; We've closed the stocktake altogether and adjusted the stock accordingly
 
 
	; NB : As we've started to hand-modify the routines that were being automatically generated
	; I've decided to delete the code generation routine. We should no longer expect the following 
	; routines to be generated automatically
	
	
	;---------------------------------------
	; 0 : Unstarted
	;---------------------------------------
	;
	; History
	; 02-Dec-2010	shobby	SRBR014970: Moved unit test code to UTCINWEINVPStatus
	
IsUnstarted(pidStocktake)
	quit ($$GetStatus(pidStocktake) = $$$EnumINSTOCKTAKESTATUSUnstarted)
 
IsUnstartedObj(pobjINWEINVP)
	;-------------------------------------------------------------------------------
	; History:
	; 30-Sep-2008	GRF		SR15810: Return boolean from test rather than if/else;
	; 							Identify object more clearly without need for extra
	; 							call
	;-------------------------------------------------------------------------------
	quit ($$$INWEINVPStatus(pobjINWEINVP) = $$$EnumINSTOCKTAKESTATUSUnstarted)
	
SetUnstarted(pidStocktake)
	quit $$SetStatus(pidStocktake,$$$EnumINSTOCKTAKESTATUSUnstarted)
 
SetUnstartedObj(objStocktake)
	set objStocktake = $$SetStatusObj(objStocktake,$$$EnumINSTOCKTAKESTATUSUnstarted)
	quit objStocktake
	
	
	;---------------------------------------
	; 1 : Started
	;---------------------------------------
	
IsStarted(pidStocktake)
	quit ($$GetStatus(pidStocktake) = $$$EnumINSTOCKTAKESTATUSStarted)
 
IsStartedObj(pobjINWEINVP)
	;-------------------------------------------------------------------------------
	; History:
	; 30-Sep-2008	GRF		SR15810: Return boolean from test rather than if/else;
	; 							Identify object more clearly without need for extra
	; 							call
	;-------------------------------------------------------------------------------
	quit ($$$INWEINVPStatus(pobjINWEINVP) = $$$EnumINSTOCKTAKESTATUSStarted)
 
SetStarted(pidStocktake)
	quit $$SetStatus(pidStocktake,$$$EnumINSTOCKTAKESTATUSStarted)
 
SetStartedObj(objStocktake)
	set objStocktake = $$SetStatusObj(objStocktake,$$$EnumINSTOCKTAKESTATUSStarted)
	quit objStocktake
	
	
	;---------------------------------------
	; 2 : Count Open
	;---------------------------------------
	
IsCountOpen(pidStocktake)
	quit ($$GetStatus(pidStocktake) = $$$EnumINSTOCKTAKESTATUSCountOpen)
	
IsCountOpenObj(pobjINWEINVP)
	;-------------------------------------------------------------------------------
	; History:
	; 30-Sep-2008	GRF		SR15810: Return boolean from test rather than if/else;
	; 							Identify object more clearly without need for extra
	; 							call
	;-------------------------------------------------------------------------------
	quit ($$$INWEINVPStatus(pobjINWEINVP) = $$$EnumINSTOCKTAKESTATUSCountOpen)
	
SetCountOpen(pidStocktake)
	quit $$SetStatus(pidStocktake,$$$EnumINSTOCKTAKESTATUSCountOpen)
	
SetCountOpenObj(objStocktake)
	set objStocktake = $$SetStatusObj(objStocktake,$$$EnumINSTOCKTAKESTATUSCountOpen)
	quit objStocktake
	
	
	;---------------------------------------
	; 3 : Count Complete
	;---------------------------------------
	
IsCountComplete(pidStocktake)
	quit ($$GetStatus(pidStocktake) = $$$EnumINSTOCKTAKESTATUSCountComplete)
 
IsCountCompleteObj(pobjINWEINVP)
	;-------------------------------------------------------------------------------
	; History:
	; 30-Sep-2008	GRF		SR15810: Return boolean from test rather than if/else;
	; 							Identify object more clearly without need for extra
	; 							call
	;-------------------------------------------------------------------------------
	quit ($$$INWEINVPStatus(pobjINWEINVP) = $$$EnumINSTOCKTAKESTATUSCountComplete)
 
SetCountComplete(pidStocktake)
	quit $$SetStatus(pidStocktake,$$$EnumINSTOCKTAKESTATUSCountComplete)
 
SetCountCompleteObj(objStocktake)
	set objStocktake = $$SetStatusObj(objStocktake,$$$EnumINSTOCKTAKESTATUSCountComplete)
	quit objStocktake
	
	
	;---------------------------------------
	; 4 : Count Process Closed
	;---------------------------------------
	
IsCountProcessClosed(pidStocktake,&pstrStatus="")
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 16-Nov-2007	shobby	SRBR014741: Optionally return the status required to
	; 							provide the user with more information for
	; 							corrective action.
	;-------------------------------------------------------------------------------
	; FIXME : This always returns the "Processed Closed" description regardless of
	;         whether or not the process is actually closed.
	set pstrStatus=$$$EnumINSTOCKTAKESTATUSCountProcessClosed_" - "_$$GetEnumDescription^COMUtils("INSTOCKTAKESTATUS",$$$EnumINSTOCKTAKESTATUSCountProcessClosed)
    quit ($$GetStatus(pidStocktake) = $$$EnumINSTOCKTAKESTATUSCountProcessClosed)
 
IsCountProcessClosedObj(pobjINWEINVP)
	;-------------------------------------------------------------------------------
	; History:
	; 30-Sep-2008	GRF		SR15810: Return boolean from test rather than if/else;
	; 							Identify object more clearly without need for extra
	; 							call
	;-------------------------------------------------------------------------------
	quit ($$$INWEINVPStatus(pobjINWEINVP) = $$$EnumINSTOCKTAKESTATUSCountProcessClosed)
	
	
SetCountProcessClosed(pidStocktake)
	quit $$SetStatus(pidStocktake,$$$EnumINSTOCKTAKESTATUSCountProcessClosed)
	
SetCountProcessClosedObj(objStocktake)
	set objStocktake = $$SetStatusObj(objStocktake,$$$EnumINSTOCKTAKESTATUSCountProcessClosed)
	quit objStocktake
	
	
	;---------------------------------------
	; 5 : Stocktake Complete
	;---------------------------------------
	
IsStocktakeComplete(pidStocktake,&pstrStatus="")
	;-------------------------------------------------------------------------------
	; Params:
	;
	; Returns:
	;
	; History:
	; 16-Nov-2007	shobby	SRBR014741: Optionally return the status required to
	; 							provide the user with more information for
	; 							corrective action.
	;-------------------------------------------------------------------------------
	set pstrStatus=$$$EnumINSTOCKTAKESTATUSStocktakeComplete_" - "_$$GetEnumDescription^COMUtils("INSTOCKTAKESTATUS",$$$EnumINSTOCKTAKESTATUSStocktakeComplete)
	quit ($$GetStatus(pidStocktake) = $$$EnumINSTOCKTAKESTATUSStocktakeComplete)
	
IsStocktakeCompleteObj(pobjINWEINVP)
	;-------------------------------------------------------------------------------
	; History:
	; 30-Sep-2008	GRF		SR15810: Return boolean from test rather than if/else;
	; 							Identify object more clearly without need for extra
	; 							call
	;-------------------------------------------------------------------------------
	quit ($$$INWEINVPStatus(pobjINWEINVP) = $$$EnumINSTOCKTAKESTATUSStocktakeComplete)
 
SetStocktakeComplete(pidStocktake)
	quit $$SetStatus(pidStocktake,$$$EnumINSTOCKTAKESTATUSStocktakeComplete)
 
SetStocktakeCompleteObj(objStocktake)
	set objStocktake = $$SetStatusObj(objStocktake,$$$EnumINSTOCKTAKESTATUSStocktakeComplete)
	quit objStocktake
	
	
	;---------------------------------------
	
	
ShowStatus(pidINWEINVP)   ; FIXME : Internationalise - should derive from ^WWW101(0,"INSTOCKTAKESTATUS",SPRACHE) <GRF>
	;-------------------------------------------------------------------------------
	; History:
	; 30-Sep-2008	GRF		SR15810: Don't use single character variable names
	;-------------------------------------------------------------------------------
	new enumStatus
	
	if pidINWEINVP = "" quit "No Stocktake Id"
	
	set enumStatus = $$GetStatus(pidINWEINVP)
	quit $case(enumStatus,0:"Unstarted",1:"Started",2:"Count Open",3:"Count Complete",4:"Count Process Closed",5:"Stocktake Complete",:"unknown")
	
	
GetStatus(pidINWEINVP="") 
	;-------------------------------------------------------------------------------
	;
	; Params: pidINWEINVP, the id of a stocktake
	;
	; Returns: the status field of the stocktake at this id
	;
	; History:
	; 03-Oct-2008	GRF		SR15810: not a strStatus value; remove unnecessary
	; 							$$Status call
	; 02-Jan-2008	shobby	BR014851: Make sure there is no crash if pidINWEINVP is empty.
	; 16-Nov-2007	shobby	BR014741: INWEINP should use YM as first key.
	; 15-Nov-2007	PJones	BR014771: Created
	;-------------------------------------------------------------------------------
	new enumStatus
	
	set enumStatus=""
	if pidINWEINVP'="" set enumStatus = $$$INWEINVPStatus($get(^INWEINVP(YM,pidINWEINVP,1)))
	quit enumStatus
	
	
SetStatusObj(pobjINWEINVP,penumStatus)
	;-------------------------------------------------------------------------------
	;
	; Params: objINWEINVP, a stocktake header object
	; 		  penumStatus, a status
	;
	; Returns: the stocktake object updated with the status
	;  
	;
	; History:
	; 03-Oct-2008	GRF		SR15810: variable names
	; 15-Nov-2007	PJones	BR014771: Created
	;-------------------------------------------------------------------------------
	set $$$INWEINVPStatus(pobjINWEINVP) = penumStatus
	quit pobjINWEINVP
	
	
SetStatus(pidStocktake,pStat) 
	;-------------------------------------------------------------------------------
	;
	; Params: pidStocktake, the id of a stocktake
	; 		  pStat, a status
	;
	; Returns: updates the stocktake in the database with the new Stocktake status, 
	; and returns the status-string from trying to save
	;
	; History:
	; 15-Nov-2007	PJones	BR014771: Created
	;-------------------------------------------------------------------------------
	new objStocktake
	
	set objStocktake = $$GetStocktake^INStocktaking(pidStocktake)
	set objStocktake = $$SetStatusObj(objStocktake,pStat)
	quit $$SaveStocktake^INStocktaking(pidStocktake,objStocktake)
	
	
StocktakeCounting(pidStocktake)
	;-------------------------------------------------------------------------------
	;
	; Params: pidStocktake
	;
	; Returns: whether we are currently counting, ie. the result of testing if we're in a 
	; count open status
	;
	; History:
	; 15-Nov-2007	PJones	BR014771: Created
	;-------------------------------------------------------------------------------
	quit $$IsCountOpen(pidStocktake)
]]></Routine>
</Export>