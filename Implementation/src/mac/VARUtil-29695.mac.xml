<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARUtil" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARUtil
#include COMSYS
	quit

 new isOpen,io,stream,file
 
startRedirectStdout()
	quit:+$get(isOpen)=1
	set io=$io
	set stream=##class(%FileCharacterStream).%New()
	do stream.Write("") ; force stream's file to open
	set file=stream.Filename ; get filename and make current device
	use file
	set isOpen=1
	quit
 
stopRedirectStdout(buffer)
	quit:+$get(isOpen)=0
	new len
	close file
	use io
	set len=16000
	set buffer=""
	while 'stream.AtEnd {
		set buffer=buffer_stream.Read(.len)
	}
	set isOpen=0
	quit

createNewManualLink(execCommand,form,keys,activeTabbedPageCode,returnForm)
	if 1 {
		new YFORM,YBACK
        set YFORM=form
        new YKEY
		set YKEY=keys
 
		write YAKTION_"EP=WWWMANU&YEXEC="_execCommand_"&YFORM="_form
		if $get(activeTabbedPageCode)'="" write "&YSEITE="_activeTabbedPageCode
		;if $get(returnForm)'="" set YBACK=returnForm_","
		if $data(returnForm) {
			if $get(returnForm)'="" {
				set YBACK=$$getCurrentHistory(returnForm)
			} else {
				set YBACK=""
			}
		}
		do ^WWWCGI
	}
	quit

getPreviousHistory(currentYBACK)
	quit $extract(currentYBACK,1,$$lastIndexOf($extract(currentYBACK,1,$length(currentYBACK)-1),",")-1)

getCurrentHistory(history)
	if $extract(history,$length(history),$length(history))'="," {
		quit history_","
	} else {
		quit $extract(history,1,$length(history)-1)_","
	}

getLastFormInHistory(history)
	new lastForm
	
	; taking out the last comma present in all YBACKs, if there is any.
	if $extract(history,$length(history),$length(history))'="," {
		set lastForm=history
	} else {
		set lastForm=$extract(history,1,$length(history)-1)
	}
	
	set lastForm=$extract(lastForm,$$lastIndexOf(lastForm,",")+1,$length(lastForm))
 
	quit lastForm

lastIndexOf(string,caracter)
	new i,lastIndex
	set i=1, lastIndex=0	
	for {
		quit:$extract(string,i)=""
		if $extract(string,i)=caracter {
			set lastIndex=i
		}
		set i=i+1		
	}
	quit lastIndex
	
	
VARLogAfterSave(pUsuario,pForm)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Cria um log na CacheTemp toda vez que o usuário clica no botão 'Ok' de um 
    ;	form manual. Isso foi feito para que os formulários manuais não façam
    ;	consultas automaticamente (que podem ser bem pesadas no banco) assim que o 
    ;	usuário abrir a tela, mas somente quando ele clicar no 'Ok'.
    ; 
    ; Histórico:
    ; 	01-Mai-2012		Criado
    ;-------------------------------------------------------------------------------
	quit:((pUsuario = "") || (pForm = ""))
	
	set ^CacheTempVARLogAfterSave(pUsuario,pForm) = $$$YES
	quit
	
isAfterSaveLogged(pUsuario,pForm)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Verifica se o usuário utilizou o botão 'Ok' do form manual. Caso não, vai 
    ;	forçar a saída do evento OnAfterSave do form.
    ; 
    ; Histórico:
    ; 	01-Mai-2012		Criado
    ;-------------------------------------------------------------------------------
	quit:((pUsuario = "") || (pForm = "")) $$$NO
	
	if ($get(^CacheTempVARLogAfterSave(pUsuario,pForm)) = $$$YES) {	
		quit $$$YES
	}
	
	quit $$$NO
	
ClearVARLogAterSave(pUsuario,pForm)
	;-------------------------------------------------------------------------------
    ; Descrição:
    ;	Limpa o log após validar se o usuário clicou no botão 'Ok' do form manual.
    ; 
    ; Histórico:
    ; 	01-Mai-2012		Criado
    ;-------------------------------------------------------------------------------
	quit:((pUsuario = "") || (pForm = ""))
	
 	kill ^CacheTempVARLogAfterSave(pUsuario,pForm)
 	quit
 	
 	
RetornaDiffDatasExtenso(pStartDate,pEndDate)
	/*  Retorna a diferença entre duas datas no formato:
		 2 dias, ou
		 2 horas e 15 minutos, ou
		 10 minutos
	*/
	quit:( (pStartDate = "") || (pEndDate = "") )
	
	new diffMinutos, strDiferencaTempo, diffHoras, sobraMinutos, diffDia, sobraHoras	
	
	;Não permitir que a StartDate seja maior que a EndDate
	quit:(pStartDate > pEndDate) ""

	set diffMinutos = ##class(%SYSTEM.SQL).DATEDIFF("mi",pStartDate,pEndDate)
	set strDiferencaTempo = ""
	
	;Menor que 1 hora	
	if (diffMinutos < 60) {
		set strDiferencaTempo = diffMinutos_$$GetPluralSingularMinuto(diffMinutos)
	
	;Menor que 1 dia
	} else {		
		set diffHoras = $$Floor^COMUtilNum(diffMinutos/60)
		
		;Maior que 1 dia
		if (diffHoras >= 24) {
			set diffDia = $$Floor^COMUtilNum(diffHoras/24)
			set sobraHoras = diffHoras - (diffDia * 24)
			
			set strDiferencaTempo = diffDia_$$GetPluralSingularDia(diffDia)
			
			if (sobraHoras > 0) {
				set strDiferencaTempo = strDiferencaTempo_" e "_sobraHoras_$$GetPluralSingularHora(sobraHoras)
			}
			
		} else {		
			set sobraMinutos = diffMinutos - (diffHoras * 60)		
			set strDiferencaTempo = diffHoras_$$GetPluralSingularHora(diffHoras)
		
			if (sobraMinutos > 0) {
				set strDiferencaTempo = strDiferencaTempo_" e "_sobraMinutos_$$GetPluralSingularMinuto(sobraMinutos)	
			}
		}
	}
	
	quit strDiferencaTempo

	quit
	
GetPluralSingularDia(pnumDias)
	quit:(+pnumDias = 0) ""
	quit:(pnumDias = 1) " dia"
	quit " dias"

GetPluralSingularHora(pnumHoras)
	quit:(+pnumHoras = 0) ""
	quit:(pnumHoras = 1) " hora"
	quit " horas"

GetPluralSingularMinuto(pnumMinutos)
	quit:(+pnumMinutos = 0) ""
	quit:(pnumMinutos = 1) " minuto"
	quit " minutos"	
]]></Routine>
</Export>