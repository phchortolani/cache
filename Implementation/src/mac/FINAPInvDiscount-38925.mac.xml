<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINAPInvDiscount" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINAPInvDiscount
	
#include COMSYS
#include FINConst
#include INConst
	
#define FORM	"FINAPInvCharge2"
		
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^FINAPInvDiscount("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
GetDiscountForChargeLineByYFELD(pstrYFELD,pidSupplier,pidFINAPInv,pidCharge,pblnOnlySOH=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Gets the discount information for a charge line on an Invoice Match
    ;
    ; Params:
    ; pstrYFELD  : The lines YFELD
    ; pidSupplier: The supplier of the Goods
    ; pidFINAPInv: The id of the 3 Way Match Record
    ; pidCharge  : The id of the Charge Line
    ; pblnOnlySOH: Only show the By SOH discounts.
    ;
    ; Returns:
    ; A tilde delimited string of the discount total, whether it's off invoice and the parents, 
    ; otherwise it returns blank.
    ;
    ; History:
	; 10-Apr-2010	GRF		SR17177: arrGrid rather than objGrid
    ; 12-Sep-2005	PO		SR13457: If working with a FC supplier then discount
    ; 							amount must be in FC form.
    ; 22-Aug-2005	RPW		SR11983: blnOffInvoice is not intAppliedMethod as
    ; 							Applied Method now has three states. Also, if we are
    ; 							calculating thecosts, then only SOH discounts should
    ; 							be shown
    ; 15-Aug-2005	shobby	SR11983: FINAPInvLine may not be defined when deleting
    ; 27-Jul-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new arrGrid,objCharge,fltAmount,intType,objDiscount,idBuyingDiscount,idSupplierDiscount
	new fltTotal,fltQty,intLen,intLoop,strParents,objLine
	new blnSurcharge,idRow,fltZero,idParent,blnZero
	new blnShowDiscount,blnSOHDiscount,intDistribution,strFCCode,fltRate,objFINAPInv
 
	set fltTotal  = 0
	set objCharge = pstrYFELD
	if objCharge'="" {
		set idBuyingDiscount =  $$$FINAPInvChargeBuyingDiscount(objCharge)
		set intDistribution  =  $$$FINAPInvChargeCostDistribution(objCharge)
		set blnSOHDiscount   = ($$$FINAPInvChargeCostAllocation(objCharge) = $$$EnumINSUPBUYINGDISCOUNTCOSTALLOCATIONBySOH)
		set blnSurcharge     = +$$$FINAPInvChargeSurcharge(objCharge)
		set fltAmount        =  $$$FINAPInvChargeDiscountAmount(objCharge)
		set intType          =  $$$FINAPInvChargeAmountCalculation(objCharge)
 
		set blnShowDiscount = $$$YES
		if pblnOnlySOH {
			set blnShowDiscount = blnSOHDiscount
		}
 
		if blnShowDiscount {  ; There should only be one parent for a charge, maybe different for SU discounts.
			set idParent=$$$FINAPInvChargeParent(objCharge)
			
			if idParent'="Total" {
				set fltTotal = $$GetLineDiscount(pidFINAPInv,idParent,fltAmount,intType)
			
			} else {
				do GetObject^COMGridEdit31Interface(.arrGrid,$$$YES,"FINAPInvLine") ; returns both simple variable and array
				set fltTotal = $$GetHeaderDiscount(pidFINAPInv,fltAmount,intType,.arrGrid)
			}
			
	; Never used
		;	if $$IsDirty^COMGridEdit31Interface($$$FORM,pidCharge,$$$FldFINAPInvChargeAmountTaxEx) {
	 	;		set fltAmount=$$$FINAPInvChargeAmountTaxEx(objCharge)
 		;	}
 		;	if $$IsDirty^COMGridEdit31Interface($$$FORM,pidCharge,$$$FldFINAPInvChargeAmount) {
		;		set fltAmount=$$$FINAPInvChargeAmount(objCharge)
 		;	}
			
			
		;	If Total Discount not already a FC amount, make it one.
		;	NOTE: UpdateToNewExchangeRate^FINAPInvCurrency will change rate to rate on header on save.
		;	** Discounts using header rate is not intended in the long term. **
			
			if '$$$AmountIsFC(fltTotal) {
	 			set strFCCode = $$GetFCCode^FINAPSupplier(pidSupplier)
 				if strFCCode'="" {
		 			set objFINAPInv = $$$GRIDYFELDContainer
		 			set fltRate     = $$$FINAPInvExchangeRate(objFINAPInv)
		 			set fltTotal    = $$$FCJoin(fltTotal*fltRate,fltTotal,strFCCode,fltRate)
 				}
			}
			
			if '$get(blnSurcharge) {
				set fltTotal = $$$FCSign(fltTotal)
			}
		}
	}
	quit fltTotal
	
	
GetDiscountDetailsForChargeLineByYFELD(pstrYFELD,pidSupplier,pidFINAPInv,pidCharge,pblnOnlySOH=$$$NO) 
    ;-------------------------------------------------------------------------------
    ; Gets the discount information for a charge line on an Invoice Match
    ;
    ; Params:
    ; pstrYFELD  : The lines YFELD
    ; pidSupplier: The supplier of the Goods
    ; pidFINAPInv: The id of the 3 Way Match Record
    ; pidCharge  : The id of the Charge Line
    ; pblnOnlySOH: Only show the By SOH discounts.
    ;
    ; Returns:
    ; A tilde delimited string of the discount total, whether it's off invoice and the parents, 
    ; otherwise it returns blank.
    ;
    ; History:
    ; 22-Aug-2005	RPW		SR11983: blnOffInvoice is not intAppliedMethod as
    ; 							Applied Method now has three states.  Also, if we
    ; 							are calculating the costs, then only SOH discounts
    ; 							should be shown
    ; 15-Aug-2005	shobby	SR11983: FINAPInvLine may not be defined when deleting
    ; 27-Jul-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new blnShowDiscount,blnSOHDiscount,blnSurcharge,blnZero,intDistribution
	new objCharge,fltAmount,intType,objDiscount,idBuyingDiscount,idSupplierDiscount
	new fltTotal,fltQty,intLen,intLoop,strParents,objLine,intAppliedMethod
	new strOutput,strDescription,strCode,idRow,fltZero,idParent
	
	set strOutput = ""
	set objCharge = pstrYFELD
	set fltTotal  = $$GetDiscountForChargeLineByYFELD(pstrYFELD,pidSupplier,pidFINAPInv,pidCharge,pblnOnlySOH)
	
	if objCharge'="" {
		set objDiscount      = ""
		set idBuyingDiscount = $$$FINAPInvChargeBuyingDiscount(objCharge)
		if idBuyingDiscount'="" {
			set objDiscount      = $get(^INSUPBuyingDiscount(0,idBuyingDiscount,1))
			set intAppliedMethod = $$$EnumINSUPBUYINGDISCOUNTAPPLIEDMETHODOnInvoice
			set strDescription   = $$$INSUPBuyingDiscountDescription(objDiscount)
		}
		
		if objDiscount="" {
			set idSupplierDiscount = $$$FINAPInvChargeSupplierDiscount(objCharge)
			if idSupplierDiscount'="" {
				set objDiscount      =  $get(^INSUPDiscount(0,pidSupplier,idSupplierDiscount,1))
				set intAppliedMethod = +$$$INSUPDiscountAppliedMethod(objDiscount)
				set strDescription   =  $$$INSUPDiscountDescription(objDiscount)
			}
		}
		
		if (objDiscount'="") {
			set strOutput = fltTotal_Y_intAppliedMethod_Y_Y_strDescription
		}
	}
	
	quit strOutput
	
	
GetLineDiscount(pidFINAPInv,pidParent,pfltAmount,pintType) 
    ;-------------------------------------------------------------------------------
    ; Get the discount applicable to the line it's attached to.
    ;
    ; Params:
    ;		pidFINAPInv: The id of the Invoice Match Record
    ;		pidParent  : The id of the parent (in this case a FINAPInvLine)
    ;		pfltAmount : The Discount amount field (ie 5 which could be 5 percent, 5 dollars or 5 dollars per item)
    ;		pintType   : The type of the discount amount, percent, fixed amount or rate.
    ;
    ; Returns:	fltLineDiscount  : The discount applicable to the line.
    ;
    ; History:
    ; 01-Sep-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new fltAmount,fltLineDiscount,objHeader,objLine
	
	set objLine   = $$GetYFELDEX^COMGridEdit31Interface("FINAPInvLine",pidFINAPInv_","_pidParent)
	set objHeader = $$$GRIDYFELDContainer
	
	set fltLineDiscount=0
	
	if (objLine'="") && (objHeader'="") {
		set fltAmount       = $select($$$FINAPInvLinesIncludeTax(objHeader):$$$FINAPInvLineInvoiceTotalIncludingTax(objLine),
		                                                                  1:$$$FINAPInvLineInvoiceTotal(objLine))
	
		set fltLineDiscount = $$$FCRound($$CalcTotal(pintType,pfltAmount,fltAmount,$$$FINAPInvLineInvoiceQuantity(objLine)))
	}
	quit fltLineDiscount
	
	
CalcTotal(pintType,pfltAmount,pfltTotal,pfltQty) 
    ;-------------------------------------------------------------------------------
    ; Calculate the total for the discount give the type.
    ; 
    ; If it's a percentage, use amount/100*percentage
    ; If it's a fixed amount, just return the amount field
    ; If it's a rate, just multiple the quantity by the amount
    ;
    ; Params:
    ;		pintType  : The type of the discount amount, percent, fixed amount or rate.
    ;		pfltAmount: The Discount amount field (ie 5 which could be 5 percent, 5 dollars or 5 dollars per item)
    ;		pfltTotal : The total of the parent FINAPInvLine
    ;		pfltQty   : The quantity of the parent FINAPInvLine
    ;
    ; Returns:		fltTotal  : The discount total amount.
    ;
    ; History:
    ; 01-Sep-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new fltTotal
	
	quit:($get(pintType)="")||($get(pfltAmount)="")||($get(pfltTotal)="")||($get(pfltQty)="") 0
	
	if pintType=0 {
		set fltTotal = pfltAmount
	
	} elseif (pintType=1) {
		set fltTotal = $$$FCDivd(pfltTotal,100)
		set fltTotal = $$$FCMult(fltTotal,pfltAmount)
	
	} elseif pintType=2 {
		set fltTotal = $$$FCMult(pfltAmount,pfltQty)
	}
	
	quit fltTotal
	
	
GetDiscountForParentLine(pidFINAPInv,pidxLine)
    ;-------------------------------------------------------------------------------
    ; Gets the discounts amount for the current Invoice Matching Line
    ;
    ; Params:
    ;		pidFINAPInv : The id of the Invoice Matching Record
    ;		pidxLine    : The id of the Invoice Matching Line
    ; 
    ; Returns:	The Discounts amount.
    ;
    ; History:
    ; 11-Jan-2006	RPW		SR14166: Make sure the early quit has a return value
    ; 17-Aug-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new objFINAPInv,idSupplier,idCharge,objLine,objCharge,fltDiscount,strDiscount,idRef
	
	set objFINAPInv = $get(^FINAPInv(0,pidFINAPInv,1))
	quit:objFINAPInv="" 0
	
	set fltDiscount = 0
	set idSupplier  = $$$FINAPInvSupplier(objFINAPInv)
	set idCharge    = ""
	for {
		set idCharge = $order(^FINAPInvCharges(0,2,pidxLine,pidFINAPInv,idCharge),-1)
		quit:idCharge=""
		
		set objCharge = $get(^FINAPInvCharge(0,pidFINAPInv,idCharge,1))
		if objCharge'="" {
			set idRef       = $$ReferenceRow^COMGridEdit31Interface("FINAPInvCharge2",idCharge)
			set fltDiscount = fltDiscount+$$GetDiscountForChargeLineByYFELD(objCharge,idSupplier,pidFINAPInv,idRef,$$$YES)
		}
	}
	
	quit fltDiscount
	
	
GetListOfDiscounts(pidFINAPInv,pidxLine,&parrDiscounts) 
    ;-------------------------------------------------------------------------------
    ; Gets the list of all the discounts for the line.
    ;
    ; Params:
    ;		pidFINAPInv   : The id of the Invoice Matching Record
    ;		pidxLine      : The id of the Invoice Matching Line
    ;
    ; Returns: parrDiscounts : The array of discounts to be returned (By Ref)
    ;
    ; History:
    ; 17-Aug-2005	RobertW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new objFINAPInv,idSupplier,idCharge,objLine,objCharge,fltDiscount,intDiscount,strDiscount,idRef
	
	set objFINAPInv = $get(^FINAPInv(0,pidFINAPInv,1))
	quit:objFINAPInv=""
	
	set fltDiscount = 0
	set idSupplier  = $$$FINAPInvSupplier(objFINAPInv)
	set intDiscount = ""
	set idCharge    = ""
	for {
		set idCharge = $order(^FINAPInvCharges(0,2,pidxLine,pidFINAPInv,idCharge),-1)
		quit:idCharge=""
		
		set objCharge = $get(^FINAPInvCharge(0,pidFINAPInv,idCharge,1))
		if objCharge'="" {
			set idRef       = $$ReferenceRow^COMGridEdit31Interface("FINAPInvCharge2",idCharge)
			set strDiscount = $$GetDiscountDetailsForChargeLineByYFELD(objCharge,idSupplier,pidFINAPInv,idRef,$$$YES)
			set parrDiscounts($increment(intDiscount)) = strDiscount
		}
	}
	quit
	
	
UpdateDiscount(pidFINAPInv,pidLine) 
    ;-------------------------------------------------------------------------------
    ; When the user changes the price on the Invoice Line, we must recalculate the
    ; discounts
    ;
    ; Called By: OnBlur^FINAPInvLineEvents2     (Deprecated : OnBlurOLD^FINAPInvLineEvents)
    ;
    ; Params:
    ;		pidFINAPInv: The id of the Invoice Matching Record
    ;		pidLine    : The id of the Invoice Matching Line
    ;
    ; Returns:
    ;
    ; History:
	; 10-Apr-2010	GRF		SR17177: arrGrid rather than objGrid; GRID Macros
	; 30-Aug-2005	RPW/PO	SR11983: Call the OnGridUpdate one more time to get the
	;							correct updates.
    ; 17-Aug-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new arrGrid,idCharge,objCharge,objChargeOld,idRow,YFORM,blnFound
	
	quit:($get(pidFINAPInv)="")||($get(pidLine)="")
	
	set YFORM = $$$FORM
	$$$GRIDGetContents(.arrGrid,$$$FORM)
	
	set idCharge = ""
	for {
		set idCharge = $order(arrGrid(pidFINAPInv,idCharge))
		quit:idCharge=""
		
		set objCharge = arrGrid(pidFINAPInv,idCharge)
		
		if $$$FINAPInvChargeParent(objCharge)=pidLine {
			set objChargeOld = objCharge
			set $$$FINAPInvChargeCustomer(objChargeOld) = "1" ; Fake a change
			do OnGridUpdate^COMGridEdit31Events(idCharge,objCharge,objChargeOld,$$$FORM)
		}
	}
	
	; We need to call OnGrid Update again for the first line.
	; 
	; This is YUCKY, but is necessary as the previous will update WWWDATEN after it's used
	; This causes it to be redone for the children.
	
	set blnFound = $$$NO
	for {
		set idCharge = $order(arrGrid(pidFINAPInv,idCharge))
		quit:idCharge=""
		quit:blnFound
		
		set objCharge = arrGrid(pidFINAPInv,idCharge)
		
		if $$$FINAPInvChargeParent(objCharge)=pidLine {
			set objChargeOld = objCharge
			set $$$FINAPInvChargeCustomer(objChargeOld) = "1" ; Fake a change
			do OnGridUpdate^COMGridEdit31Events(idCharge,objCharge,objChargeOld,$$$FORM)
			set blnFound = $$$YES
		}
	}
	quit
	
	
HideHeaders(pblnIncTax) 
    ;-------------------------------------------------------------------------------
    ; Hide the tax headers as required
    ;
    ; Params:
    ; pblnIncTax: Is this tax inc or not?
    ;
    ; Returns:
    ;
    ; History:
    ; 18-Aug-2005	RobertW	SR11983: Created
    ;-------------------------------------------------------------------------------
	new strFields,strBoolean
	
	set strFields  = "1;2"
	set strBoolean = ('pblnIncTax)_";"_pblnIncTax
	$$$GRIDHideShowColumns(strFields,strBoolean,$$$FORM)
	quit
	
	
CalculateTax(pidInvoice,pobjLine="",pobjInvoice="",pblnIncTax=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Calculate the tax amount for a given line and supplier.
    ; 
    ; Params:	
    ; pidInvoice - The id of the Invoice.
    ; pobjLine - line data (is updated with amounts)
    ; pobjInvoice - invoice data
    ; pblnIncTax - whether to calculate from TaxInc or TaxEx amount
    ;
    ; Returns: pobjLine as parameter
    ; 
    ; History:
    ; 18-Aug-2005	RPW		SR11983: Copied from FINAPInvLineTax
    ;  8-Jul-2005	JW		SR12939: Added '+'
    ;  8-Mar-2005	JW		Created (copied from FINARInv)
    ;-------------------------------------------------------------------------------
	new itemTaxCode,tax,location,transDate,taxRate,taxCode,fltAmount,fltTax,idParent,objLine
	
	set idParent  = $$$FINAPInvChargeParent(pobjLine)
	set tax       = ""
	set fltAmount = ""
	set objLine   = ""
	if idParent'="" set objLine = $$GetYFELDEX^COMGridEdit31Interface("FINAPInvLine",pidInvoice_","_idParent)
	
	if objLine'="" {
		if idParent="Total" {
			set itemTaxCode = $$$FINAPInvDefaultTaxCode(pobjInvoice)
		} else {
			set itemTaxCode = $$$FINAPInvLineTaxCode(objLine)
		}
		
		set location = $$$FINAPInvTaxLocation(pobjInvoice)
		set taxCode = $$IsTaxable^COMTAX(itemTaxCode,+$$$FINAPInvTaxInvoice(pobjInvoice),,location)	//SR12939
		
		if (taxCode = 0) || (location = "") {
			set tax = ""
		} else {
			set transDate = $$$FINAPInvEnteredDate(pobjInvoice)
			set taxRate   = $$CombinedTaxRate^COMTAX(taxCode,location,transDate,1)
			
			if taxRate {
				set fltAmount = $$$FINAPInvChargeAmountTaxEx(pobjLine)
				set fltTax    = (100/taxRate)+1
				set tax       = $$$FCDivd(fltAmount,fltTax)
			} else {
				set tax = 0
			}
		}
		
		if 'pblnIncTax {
			set $$$FINAPInvChargeAmount(pobjLine) = fltAmount
			set tax = 0
		}
	}
	set $$$FINAPInvChargeTax(pobjLine) = tax
	
	quit tax
	
	
GetChargesForLine(pidInvoice,pidxLine,&parrCharges) 
    ;-------------------------------------------------------------------------------
    ; Get the physical Discounts objects for an Invoice Matching Line.
    ; A mini get grid routine.
    ; 
    ; Called By:	PopulateDiscountsForLine^FINAPInvPrePopulate
    ; 
    ; Params:
    ;		pidInvoice   : The invoice matching id
    ;		pidxLine     : The invoice matching line id
    ; 
    ; ByRef Params:		parrCharges : The array of charges to be returned
    ;
    ; Returns:
    ;
    ; History:
    ; 23-Aug-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new idCharge
 
	set idCharge = ""
	for {
		set idCharge = $order(^FINAPInvCharges(0,2,pidxLine,pidInvoice,idCharge))
		quit:idCharge=""
		
		set parrCharges(idCharge) = $get(^FINAPInvCharge(0,pidInvoice,idCharge,1))
	}
	quit
	
	
GetHeaderDiscount(pidFINAPInv,pfltAmount,pintType,&parrGrid) 
    ;-------------------------------------------------------------------------------
    ; Get the total header discount.
    ;
    ; Params:
    ;		pidFINAPInv: The id of the Invoice Match Record
    ;		pfltAmount : The Discount amount field (ie 5 which could be 5 percent, 5 dollars or 5 dollars per item)
    ;		pintType   : The type of the discount amount, percent, fixed amount or rate.(By Ref)
    ;		parrGrid   : The grid containing the FINAPInvLine(s).
    ;
    ; Returns:
    ; The rounded header discount amount.
    ;
    ; History:
	; 10-Apr-2010	GRF		SR17177: parrGrid rather than pobjGrid
    ; 25-Aug-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new fltAmount,fltCalcTotal,fltDistribution,fltLine,fltLineQty,fltLineTotal
	new fltTotal,fltTotalDistribution,idLine,objInvoice,objLine
		
	set fltTotal   = 0
	set objInvoice = $get(parrGrid)    ; both variable and array
	
	if objInvoice'="" {
		if $data(parrGrid) {           ; FIXME : already know $data = 1 and may = 11 so pointless.
			set fltLineTotal = 0
			set fltLineQty   = 0
	 
			set idLine = ""
			for {			
				set idLine = $order(parrGrid(pidFINAPInv,idLine))
				quit:idLine=""
				continue:idLine="Total"
				
				set objLine      = parrGrid(pidFINAPInv,idLine)
				set fltAmount    = $select($$$FINAPInvLinesIncludeTax(objInvoice):$$$FINAPInvLineInvoiceTotalIncludingTax(objLine),1:$$$FINAPInvLineInvoiceTotal(objLine))
				set fltLineTotal = $$$FCAdd(fltLineTotal,fltAmount)
				set fltLineQty   = fltLineQty+$$$FINAPInvLineInvoiceQuantity(objLine)
			}
			set fltTotal = $$CalcTotal(pintType,pfltAmount,fltLineTotal,fltLineQty)
		}
	}
	quit $$$FCRound(fltTotal)
	
	
Distribution(pidFINAPInv,pintDistribution,&parrGrid,&parrDist) 
    ;-------------------------------------------------------------------------------
    ; Calculates the weighted distribution for the lines depending on the distribution
    ; type.
    ; 
    ; ByValue   : Sum all the values
    ; ByVolume  : Sum all the volumes
    ; ByWeight  : Sum all the weights
    ; ByQuantity: Sum all the quantities
    ; ByLine    : Sum all the lines
    ;
    ; Params:
    ;		pidFINAPInv     : The id of the Invoice Match Record
    ;		pintDistribution: The distribution type as above
    ;		parrGrid        : The grid of FINAPInvLine(s)
    ; 
    ; ByRef:	parrDist: The distribution grid
    ; This grid contains one value for each line and a summation value for all the lines
    ;
    ; Returns:
    ; Nothing
    ;
    ; History:
    ; 25-Aug-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new idLine,objLine,objItem,varAmount
		
	set idLine = ""
	for {
		set idLine = $order(parrGrid(pidFINAPInv,idLine))
		quit:idLine=""
		continue:idLine="Total"
		
		set objLine = parrGrid(pidFINAPInv,idLine)
		set objItem = $get(^INART(0,$$$FINAPInvLineItem(objLine),1))
		
		set varAmount = $case(pintDistribution,$$$EnumINSUPBUYINGDISCOUNTCOSTDISTRIBUTIONByValue   :$$GetValue(objLine),
		                                       $$$EnumINSUPBUYINGDISCOUNTCOSTDISTRIBUTIONByVolume  :$$$INARTVolume(objItem),
		                                       $$$EnumINSUPBUYINGDISCOUNTCOSTDISTRIBUTIONByWeight  :$$$INARTWeight(objItem),
		                                       $$$EnumINSUPBUYINGDISCOUNTCOSTDISTRIBUTIONByQuantity:$$$FINAPInvLineInvoiceQuantity(objLine),
		                                       $$$EnumINSUPBUYINGDISCOUNTCOSTDISTRIBUTIONByLine	   :1,
		                                            :0)
		set parrDist("Line",idLine) = varAmount
		set parrDist("Total")       = $increment(parrDist("Total"),varAmount)
	}
	
	quit
	
	
GetValue(pobjItem) 
    ;-------------------------------------------------------------------------------
    ; Multiple the Each by the Quantity. NOTE:: It doesn't matter which field is used
    ; here for the amount, as the percentages will be the same.
    ;
    ; Params:
    ; pobjItem: The FINAPInvLine object
    ;
    ; Returns:
    ; The multiplication of the amount by the quantity
    ;
    ; History:
    ; 25-Aug-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new fltEach,fltQty
	
	set fltEach = $$$FINAPInvLineInvoiceEach(pobjItem)
	set fltQty  = $$$FINAPInvLineInvoiceQuantity(pobjItem)
 
	quit $$$FCMult(fltEach,fltQty)
	
	
GetLineDistribution(pidFINPInv,pfltAmount,pintDistribution,&parrDistOut) 
    ;-------------------------------------------------------------------------------
    ; Get the distribution of header discounts over the FINAPInvLines for this Invoice
    ; Matching Record.
    ; 
    ; It uses virtual rounding to handled extra cents.
    ; 
    ; i.e. if we have an amount of 13.75 distributed evenly over 4 lines   NOTE: example doesn't seem to match actual
    ; Actual value per line = 3.4375 but need whole cents
    ; 
    ;                                                             Initial 3.4375   truncates to 3.43
    ; Line 1 gets  3.43, balance  .0075 carried to next entry
    ;                                              Sum 3.4375 and .0075 = 3.4450   truncates to 3.44
    ; Line 2 gets  3.44, balance  .0050
    ;                                              Sum 3.4375 and .005  = 3.4425   truncates to 3.44
    ; Line 3 gets  3.44, balance  .0025
    ;                                              Sum 3.4375 and .0025 = 3.4400
    ; Line 4 gets  3.44 
    ; 
    ; This equals 13.75
    ;
    ; Called By: PopulateDiscountsForLine^FINAPInvPrePopulate
    ; 
    ; Params:
    ;		pidFINAPInv     : The id of the invoice matching record
    ;		pfltAmount      : The amount to be distributed
    ;		pintDistribution: The way this amount is to be distributed
    ; 
    ; ByRef:	parrDistOut: The array of distributions.
    ;
    ; Returns:
    ;
    ; History:
	; 10-Apr-2010	GRF		SR17177: arrGrid rather than objGrid
    ; 10-Dec-2009	GRF		SR16667: use macro; When working from INReceipt with
    ; 							invoice details, there is no FINAPInvLine grid
    ; 14-Apr-2009	GRF		Split if block into {} lines
    ; 05-Jul-2006	GRF		Doco
    ; 09-Sep-2005	PO		SR13457: Prevent Divide by zero error
    ; 09-Sep-2005	RPW/PO	SR13456: Corrected Virtual Rounding and FC issues.
    ; 07-Sep-2005	RPW		SR13446: Fixed FCAmount issue
    ; 25-Aug-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new arrDist,arrGrid,blnNegative,fltAdd,fltAllocn,fltDecimal,fltFCRate,fltFactor
	new fltLine,fltOffset,fltRounded,fltRemainder,fltTotal
	new idLine,intInteger,strCurr
	
	$$$LogR("GetLineDistribution",pidFINPInv_"<"_pfltAmount_"<"_pintDistribution_"<")
	
	if $get(YFORM)="FINAPInv" {        ; SR16667 vvv
		$$$GRIDGetContents(.arrGrid,"FINAPInvLine")
	
	} else {     ; Form : "INReceipt"
		set idLine = ""
		for {
			set idLine = $order(^FINAPInvLine(0,pidFINPInv,idLine))
			quit:idLine=""
		
			set arrGrid(pidFINPInv,idLine) = $get(^FINAPInvLine(0,pidFINPInv,idLine,1))
		}
	}                                  ; SR16667 ^^^
	
	; FIXME : Shouldn't we be distributing total charges based on net extended line cost not the initial extended cost? <GRF>
	;         i.e. Line 1     : 2 @ $30  = $60
	;              Line 1.01  : Disc 10% = $ 6   net extended = $54 rather than $60
	;         Is there a difference with processing of INRECLine for Stock Value?
	
	do Distribution(pidFINPInv,pintDistribution,.arrGrid,.arrDist)
	
	;--------------------------------------- [EXAMPLE NOT COMPLETED SINCE APPEARS ALGORITHM IS MORE COMPLICATED THAN NECESSARY]
	; Example :
	;   pfltAmount = $50.00
	;
	; Result of Distribution                 Amount
	;                                                             fltRounded
	;                fltLine                fltAllocn   +fltOffset          fltRemainder
	;   
	; arrDist("Line",1) =  5   5/30 = .16'    8.33333'   8.333343'   8.33     .003343'
	; arrDist("Line",2) = 10  10/30 = .33'   16.66666'
	; arrDist("Line",3) = 15  15/30 = .5     25.00
	;	                                     ------
	; arrDist("Total")  = 30      fltTotal   $50.00
	;---------------------------------------
	
	set fltRemainder = 0    ; amount carried to next distribution after truncation of prev total
	
	set fltDecimal = 10**(-YDECIMALLEN)    ; e.g.     .01    for 2DP
	set intInteger = 10**YDECIMALLEN       ;       100       factor for rounding
	set fltFactor  = 10**(-YDECIMALLEN-3)  ;          .00001
	
	set fltFCRate  = $$$FCRate(pfltAmount)
	set strCurr    = $$$FCur(pfltAmount)
	set pfltAmount = $$$FCBase(pfltAmount)
	
	if $data(arrDist) {
		set fltTotal = $$$FCBase(arrDist("Total"))
		
		if fltTotal { ; Only necessary if Addition Charge not completely detailed.
			set idLine=""
			for {
				set idLine=$order(arrDist("Line",idLine))
				quit:idLine=""
				
				set fltLine   = $$$FCBase(arrDist("Line",idLine))
				set fltAllocn = (fltLine/fltTotal*pfltAmount)
				set fltOffset = fltFactor
				if fltAllocn<0 {
					set fltOffset = -fltOffset
				}
				
				set fltAllocn = fltAllocn+fltOffset    ; FIXME : Complicated - add remainder and round rather than having to check for tolerance. <GRF>
				set fltRounded = $$Trunc(fltAllocn,intInteger)
				
				if $zabs(fltAllocn-fltRounded)<fltFactor {
					set fltAllocn = $$Trunc(fltAllocn,intInteger)
					set fltRounded = fltAllocn
				}
				
				set fltRemainder = fltRemainder+(fltAllocn-fltRounded)
				set blnNegative  = (fltRemainder<0)
				
				if $zabs(fltRemainder)>fltDecimal {
					set fltAdd       = fltDecimal
					set fltRemainder = fltRemainder-fltAdd
					
					if blnNegative set fltAdd = -fltAdd
					set fltRounded   = fltRounded+fltAdd
				}
				
				set fltRounded = $$$FCMake(fltRounded,strCurr,fltFCRate)
				set parrDistOut(idLine) = fltRounded
			}
		}
	}
	
	quit
	
	
Trunc(pfltAmount,pintDigits) 
    ;-------------------------------------------------------------------------------
    ; Truncate a value using the power of ten value passed in
    ; 
    ; ie if pfltAmount = 3.45677 and pintDigits=100
    ; 
    ; Returns 3.45
    ;
    ; Params:
    ;		pfltAmount: The amount to be truncated
    ;		pintDigits: The number of digits to the power of ten to truncate to.
    ;
    ; Returns:	The truncated amount.
    ;
    ; History:
    ; 02-Sep-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	// TODO: Make a macro to avoid the extra function call.
	quit ((pfltAmount*pintDigits)\1)/pintDigits
	
	
PopulateFields(&pobjChargeLine) 
    ;-------------------------------------------------------------------------------
    ; Copy the details from the discount into the charge line
    ;
    ; Params:
    ;		pobjChargeLine: The charge line to be modified.
    ;
    ; Returns:
    ;
    ; History:
    ; 01-Sep-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new idDiscount,objDiscount,idSupplier
 
	set idDiscount = $$$FINAPInvChargeSupplierDiscount(pobjChargeLine)
	
	if idDiscount="" {                                     // Discount/Surcharge
		set idDiscount = $$$FINAPInvChargeBuyingDiscount(pobjChargeLine)
		if idDiscount'="" {
			set objDiscount = $get(^INSUPBuyingDiscount(0,idDiscount,1))
			
			if objDiscount'="" {
				set $$$FINAPInvChargeCostAllocation(pobjChargeLine)    = $$$INSUPBuyingDiscountCostAllocation(objDiscount)
				set $$$FINAPInvChargeAppliedMethod(pobjChargeLine)     = 0
				set $$$FINAPInvChargeCostDistribution(pobjChargeLine)  = $$$INSUPBuyingDiscountCostDistribution(objDiscount)
				set $$$FINAPInvChargeAccount(pobjChargeLine)           = $$$INSUPBuyingDiscountGLAccount(objDiscount)
				set $$$FINAPInvChargeSurcharge(pobjChargeLine)         = $$$INSUPBuyingDiscountSurcharge(objDiscount)
				set $$$FINAPInvChargeDiscountAmount(pobjChargeLine)    = $$$INSUPBuyingDiscountAmount(objDiscount)
				set $$$FINAPInvChargeAmountCalculation(pobjChargeLine) = $$$INSUPBuyingDiscountAmountCalculation(objDiscount)
			}
		}		
	
	} else {                                               // Supplier Discount/Surcharge
		
		set idSupplier = $$$FINAPInvSupplier($$$GRIDYFELDContainer)
		if idSupplier'="" {
			set objDiscount = $get(^INSUPDiscount(0,idSupplier,idDiscount,1))
			if objDiscount'="" {
				set $$$FINAPInvChargeCostAllocation(pobjChargeLine)    = $$$INSUPDiscountCostAllocation(objDiscount)
				set $$$FINAPInvChargeAppliedMethod(pobjChargeLine)     = $$$INSUPDiscountAppliedMethod(objDiscount)
				set $$$FINAPInvChargeCostDistribution(pobjChargeLine)  = $$$INSUPDiscountCostDistribution(objDiscount)
				set $$$FINAPInvChargeAccount(pobjChargeLine)           = $$$INSUPDiscountGLAccount(objDiscount)				
				set $$$FINAPInvChargeSurcharge(pobjChargeLine)         = $$$INSUPDiscountSurcharge(objDiscount)
				set $$$FINAPInvChargeDiscountAmount(pobjChargeLine)    = $$$INSUPDiscountAmount(objDiscount)
				set $$$FINAPInvChargeAmountCalculation(pobjChargeLine) = $$$INSUPDiscountAmountCalculation(objDiscount)
			}
		}
	}
	quit
	
	
RecalculateTotalDiscounts(pstrYKEY) 
    ;-------------------------------------------------------------------------------
    ; When a new line is added to the grid, update the total discounts
    ;
    ; Params:
    ; pstrYKEY: The key of the invoice matching line
    ;
    ; Returns:
    ;
    ; History:
	; 10-Apr-2010	GRF		SR17177: arrGrid rather than objGrid; GRID Macros
    ; 02-Sep-2005	RPW		SR11983: Created
    ;-------------------------------------------------------------------------------
	new arrGrid,idInvoice,idCharge,objCharge
	
	set idInvoice = $$$KEY1(pstrYKEY)
	
	$$$GRIDGetContents(.arrGrid,$$$FORM)
	set idCharge = ""
	for {
		set idCharge = $order(arrGrid(idInvoice,idCharge))
		quit:idCharge=""
		
		set objCharge = arrGrid(idInvoice,idCharge)
		; This causes the entire grid and header to be updated.
		do OnBlur^FINAPInvCharge2(9,idInvoice_","_idCharge,.objCharge)
		set arrGrid(idInvoice,idCharge) = objCharge
	}
	
	$$$GRIDSetContents(.arrGrid,,$$$FORM)
	quit
	
]]></Routine>
</Export>