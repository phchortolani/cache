<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARProdutosAguardEndereco" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include COMSYS
#include INConst

VARProdutosAguardEndereco

	quit
	
OnAfterSave
	set ^VARTempItemsAwaitingAddress(YBED,"typeOfAddress") = VORG(1)
	set ^VARTempItemsAwaitingAddress(YBED,"address") = VORG(2)
	set ^VARTempItemsAwaitingAddress(YBED,"item") = VORG(3)
	set ^VARTempItemsAwaitingAddress(YBED,"groupByPallet") = VORG(4)

	do VARLogAfterSave^VARUtil(YBED,YFORM)	
	
	// reload the form to show the new search results
	do ReloadForm^COMUtilForm()
	
	quit

OnAfterDataFields
	;-------------------------------------------------------------------------------
    ; Display table with products without address
    ; 
    ; History:
	; 01-Mai-2012	Gustavo				Incluído VARLogAfterSave    
    ; 13-Sep-2011	Carlos Bergfeld		Created
    ;-------------------------------------------------------------------------------
	new filterTypeOfAddress, filterAddress, filterItem, filterGroupByPallet
	new count, physical, stockLocation, statusPalete, statusPaleteDescricao
		
	kill ^VARTempItemsAwaitingAddress(YBED,"checked")
	
	//Só apresenta os resultados da consulta caso o usuário tenha clicado no botão 'Ok' do form.
	quit:('$$isAfterSaveLogged^VARUtil(YBED,YFORM))
	do ClearVARLogAterSave^VARUtil(YBED,YFORM)	
	
	set filterTypeOfAddress = $get(^VARTempItemsAwaitingAddress(YBED,"typeOfAddress"))
	set filterAddress = $get(^VARTempItemsAwaitingAddress(YBED,"address"))
	set filterItem = $get(^VARTempItemsAwaitingAddress(YBED,"item"))
	set filterGroupByPallet = $get(^VARTempItemsAwaitingAddress(YBED,"groupByPallet"))
	
  	set count = 0
 
	// create table with search results
	if filterGroupByPallet {
		
	  	if $$Start^COMTable($listbuild("#","Palete","Endereço","Status","Movimentar"),"Produtos aguardando endereçamento:") {
	  	
			&sql(DECLARE PalletsAwaitingAddress CURSOR FOR
				SELECT 
					alSOH.dBundleStock.Storage->Code,
		 			PALETE.Physical,
		 			PALETE.Status
				INTO :stockLocation,:physical,:statusPalete
				FROM alSOH.dBundleStock, INLP as PALETE, INLP as FISICO
				WHERE
					alSOH.dBundleStock.Storage->Code = PALETE.StockLocation
					AND alSOH.dBundleStock.Storage->Location = PALETE.LocationName
					AND PALETE.Physical = FISICO.StockLocation
					AND PALETE.LocationName = FISICO.LocationName
					AND alSOH.dBundleStock.Storage->Location = :YLOCATION
					AND (PALETE.TemporaryStorageUnit = 1)
					AND FISICO.AddressType = :filterTypeOfAddress
					AND ((FISICO.StockLocation = :filterAddress) OR (:filterAddress is null))
					AND ((alSOH.dBundleStock.Item = :filterItem) OR (:filterItem is null))
				GROUP BY alSOH.dBundleStock.Storage->Code, PALETE.Physical
				ORDER BY alSOH.dBundleStock.Storage->Code
			)
	
			&sql(open PalletsAwaitingAddress)
		    if (SQLCODE) {
				quit
		    }
 	
			for { &sql(fetch PalletsAwaitingAddress)
					   quit:SQLCODE
 			
				set count = $i(count)
			
				do NewLine^COMTable()
				do InsertCell^COMTable(count,,,,"RIGHT")
			    do InsertCell^COMTable(stockLocation,,,,"CENTER")
			    do InsertCell^COMTable(physical,,,,"CENTER")
			    if (statusPalete) {
				    set statusPaleteDescricao = $$$INLPStatusDescription($get(^INLPStatus(YM,statusPalete,1)))
			    } else {
				    set statusPaleteDescricao = "Aberto"
			    }
			    do InsertCell^COMTable(statusPaleteDescricao,,,,"CENTER")
			    if (statusPalete && $$$INLPStatusIsTSUClosedForReceipts($get(^INLPStatus(YM,statusPalete,1)))) {
		    		do InsertCellCheckbox^COMTable(stockLocation,"SelectId^VARProdutosAguardEndereco",0,0)
			    } else {
					do InsertCell^COMTable("")
				}
		    	do EndLine^COMTable()
			}
  	
			&sql(close PalletsAwaitingAddress)
		
			do Stop^COMTable()
	  	}
		
	} else {
		
	  	if $$Start^COMTable($listbuild("#","Produto","Endereço","Movimentar"),"Produtos aguardando endereçamento:") {
	  	
			&sql(DECLARE ItemsAwaitingAddress CURSOR FOR
				 SELECT alSOH.dBundleStock.Item,
					alSOH.dBundleStock.Storage->Code as Storage
				INTO :item, :stockLocation
				FROM alSOH.dBundleStock,INLP
				WHERE
					alSOH.dBundleStock.Storage->Code = INLP.StockLocation
					AND alSOH.dBundleStock.Storage->Location = INLP.LocationName
					AND alSOH.dBundleStock.Storage->Location = :YLOCATION
					AND ((IFNULL(INLP.TemporaryStorageUnit,'') = '') OR (INLP.TemporaryStorageUnit = 0))
					AND INLP.AddressType = :filterTypeOfAddress
					AND ((alSOH.dBundleStock.Storage->Code = :filterAddress) OR (:filterAddress is null))
					AND ((alSOH.dBundleStock.Item = :filterItem) OR (:filterItem is null))
				GROUP BY alSOH.dBundleStock.Item, alSOH.dBundleStock.Storage->Code
				ORDER BY alSOH.dBundleStock.Item
			)
	
			&sql(open ItemsAwaitingAddress)
		    if (SQLCODE) {
				quit
		    }
 	
			for { &sql(fetch ItemsAwaitingAddress)
					   quit:SQLCODE
 			
				set count = $i(count)
			
				do NewLine^COMTable()
				do InsertCell^COMTable(count,,,,"RIGHT")
			    do InsertCell^COMTable(item,,,,"CENTER")
			    do InsertCell^COMTable(stockLocation,,,,"CENTER")	
		    	do InsertCellCheckbox^COMTable(item,"SelectId^VARProdutosAguardEndereco",0,0)
		    	do EndLine^COMTable()
			}
  	
			&sql(close ItemsAwaitingAddress)
		
			do Stop^COMTable()
	  	}
	}
	
	quit
	
SendToMovement
	new strStatus, id, obj, idLine, lineObj, intLineNumber, item
	
	if ($data(^VARTempItemsAwaitingAddress(YBED,"checked"))) {
		
		if ($get(^VARTempItemsAwaitingAddress(YBED,"groupByPallet")) = 1) {
			// create INMOV record
			set $$$INMOVLocation(obj) = YLOCATION
			set $$$INMOVMoveType(obj) = 1
			set $$$INMOVStatus(obj) = 1
			set $$$INMOVStockMovementDate(obj) = +$h
			set id = $$$NextKey("INMOV")
			set strStatus = $$$Save("INMOV",id,obj,1)
			quit:($$$ISERR(strStatus))
			
			// populate INMOVPallet with selected items
			set item = ""
			set intLineNumber = 0
			for {
				set item = $order(^VARTempItemsAwaitingAddress(YBED,"checked",item))
				quit:item=""
				
				// save line
				set intLineNumber = $i(intLineNumber)
				set idLine = id_","_intLineNumber
				set $$$INMOVPalletPallet(lineObj) = item
				// TODO: verificar campos obrigatorios
				set strStatus = $$$Save("INMOVPallet",idLine,lineObj,1)
				quit:($$$ISERR(strStatus))
			}
			
			quit:($$$ISERR(strStatus))
			
			// send to INMOVByPallet form
			do GoToForm^COMUtilForm("INMOVByPallet",id)
		}
		else {
			// create INMOV record
			set $$$INMOVLocation(obj) = YLOCATION
			set $$$INMOVMoveType(obj) = 0
			set $$$INMOVStatus(obj) = 1
			set $$$INMOVStockMovementDate(obj) = +$h
			set id = $$$NextKey("INMOV")
			set strStatus = $$$Save("INMOV",id,obj,1)
			quit:($$$ISERR(strStatus))
			
			// populate INMOVLine with selected items
			set item = ""
			set intLineNumber = 0
			for {
				set item = $order(^VARTempItemsAwaitingAddress(YBED,"checked",item))
				quit:item=""
				
				// save line
				set intLineNumber = $i(intLineNumber)
				set idLine = id_","_intLineNumber
				set $$$INMOVLineItem(lineObj) = item
				// TODO: verificar campos obrigatorios
				;set $$$INMOVLineQtyRequired(lineObj) = 
				;set $$$INMOVLineUnitQty(lineObj) = $$$INMOVLineQtyRequired(lineObj)
				;set $$$INMOVLineToStorage(lineObj) = 
				set $$$INMOVLineUnit(lineObj) = $$$INARTUnitofMeasure($get(^INART(YM,item,1)))
				set strStatus = $$$Save("INMOVLine",idLine,lineObj,1)
				quit:($$$ISERR(strStatus))
			}
			
			quit:($$$ISERR(strStatus))
			
			// send to INMOV form
			do GoToForm^COMUtilForm("INMOV",id)
		}
	
	} else {
		$$$Alert("Selecione os itens que deseja movimentar.")
		do ReloadForm^COMUtilForm()
		quit
	}
	
	quit
	
SelectId(pYKEY="",checked="")
	if ($piece(checked,",",1) = "true") {
		set ^VARTempItemsAwaitingAddress(YBED,"checked",pYKEY) = 1
	}
	elseif ($piece(checked,",",1) = "false") {
		kill ^VARTempItemsAwaitingAddress(YBED,"checked",pYKEY)
	}
 
	quit $$$YES
]]></Routine>
</Export>