<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INMOVTable" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[INMOVTable
	
#include COMSYS
#include INConst
#include %occInclude
	
#define DELIM	$char(31)
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INMOVTable("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
ShowItems(pidEvent,pidParameters)
	;-------------------------------------------------------------------------------
	; Description :
	;			
	; Called By : OnBlur^INMOVLine; OnLineAdded^INMOVLine
	;		
	; Inputs : 
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 13-Oct-2010	PPP		SR17566: Language Text
	; 01-Dec-2009	GRF		SR17007: separate tags for multi-lock operations
	; 04-Nov-2009	DWR		SR16853: Pass ItemId to BuildDynTableHeader
	; 04-Nov-2009	GRF		SR17007: Pass keys to GetLock^WWWMultiLock not records
	; 20-Oct-2009	DWR		SR16949: Internationalise 
	; 01-Jun-2009	PPP		SR16599: Add Row highlight & click functionality
	; 10-Jan-2008	GRF		SR16328: distinguish between "No Item" and "Bad Item"
	; 							(don't display "Bad Item" messages when already
	; 							warning as item tooltip & error colour)
	; 08-Jan-2009	GRF		SR16259: test for Item Policy fault; 
	; 22-Sep-2008	GRF		General compliance with coding stds - code check failure
	; 06-May-2008	HQN		SR15713: Added early exit for no Item set (reverted)
	; 06-May-2008	Luke	SR15713: Copied from INIssueTable
	;-------------------------------------------------------------------------------
	new idGrid,idItem,lstHeaders,lstColTypes,idKey,idRelocate,idLine
	new objItem,objItemPolicy,objLocn,objMov,objMovLine,strFunction,strStatus
	
	$$$LogR("ShowItems",pidEvent_":"_pidParameters)
	
	set strStatus = $$$OK
	set idGrid    = $$$DYNTABLEGridLineFocusGrid(pidParameters)
	
	kill ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle")
	
	set idKey      = $$ReferenceKey^COMGridEdit31Interface(idGrid,$$$DYNTABLEGridLineFocusRow(pidParameters))
	set idRelocate = $$$KEY1(idKey)
	set idLine     = $$$KEY2(idKey)
	
	if '$$Editable^INMOV(idRelocate) quit                       ; *** EARLY EXIT ***
	
	set objMov     = $$$GRIDYFELDContainer
	set objMovLine = $$$GRIDGetYFELD(idLine)
	$$$LogRx("SI:1:"_idKey)
	
	set strStatus = $$GetLock^WWWMultiLock("INMOV",idGrid,idRelocate_$$$COMMA_idLine)
  
	; setup JS Callback
	set idLocn = $$$INMOVLocation(objMov)
	set objLocn = ##class(alLOC.dLocation).%OpenId(idLocn)
	set idItem  = $$$INMOVLineItem(objMovLine)
	
	$$$LogRx("SI:2:"_idItem)
	
	if idItem = "" {
		; Clear table    ; "No Item Selected"  SR17566
		do DrawTable^WWW120DynTable($listbuild($$$Text("IN01142")),"dStockBundle",$listbuild($listbuild("left","display")),
		                            pidParameters,"",pidEvent)
		
	} else {
		set objItem = ##class(alINV.dItem).%OpenId(idItem,0)
		
		if objItem '= $$$NULLOREF {
			set objItemPolicy = objItem.ItemPolicy
		
			if objItemPolicy = $$$NULLOREF {
				do DrawTable^WWW120DynTable($listbuild(""),"dStockBundle",$listbuild($listbuild("left","display")),
				                            pidParameters,"",pidEvent)
			
			; Build Table below Stock Move grid lines (allows selection)
			;-----------------------------------   e.g.
			;  Stock Bundle              Storage         Lot Number
			;  ABC00123||5||A||2||86     A               1234567
			
			} else {
				set strFunction = "FillLine"
				set strStatus = $$BuildDynTableHeader(objItemPolicy,.lstHeaders,.lstColTypes,objItem.%Id(),idLocn)
				do BuildDynTableRows(objItem.%Id(),objLocn.Code,$$$INMOVLineFromStorage(objMovLine))
			
			; setup JS Callback
				if $$$ISERR(strStatus) {
					write "function "_strFunction_"() {"
					write "alert('"_$$$JSText($$$Text(strStatus))_"');"
					write "}"
				} else {
					write "function "_strFunction_"() {"
					write "CallBack(""SelectBundle^INMOVTable"", getRowNum(getFocusField()), this.DiscData[0]);"
					write "}"
				}		
				
				// Parameter 7 (after pidEvent) needs to be set for the RowClick event, will be used by RowClick^WWW120DynTable
				//	e.g. "WarehouseLine^INReqTable"
				//	will be called with the following parameters
				//	1. Row ID
				//	2. Each entry in ^CacheTempDynamicTable(...,data) separated by "~" will be a new parameter
				//			in this routines case : do WarehouseLine^INReqTable(pidRow,idLocn) will be executed on Row click
				do DrawTable^WWW120DynTable(lstHeaders,"dStockBundle",lstColTypes,
				                            pidParameters,strFunction,pidEvent,
				                            "SelectBundle^INMOVTable")         ; NOTE : more parameters
			}
			
		} else {   ; (Error situation identified elsewhere)
			; Clear table
			do DrawTable^WWW120DynTable($listbuild(""),"dStockBundle",$listbuild($listbuild("left","display")),
			                            pidParameters,"",pidEvent)
		}
	}
	quit $$$OK
	
	
SelectBundle(pidRow,pidKey)
	;-------------------------------------------------------------------------------
	; 06-May-2008	Luke	SR15713 Copied from INIssueTable
	;-------------------------------------------------------------------------------
	new idBundle,idStore,objMov,objMovLine,sc,objBundleStock
	; FIXME : LOCATION?  others not used like objMovLine

	set sc = $$$OK
	set objMov     = $$$GRIDYFELDContainer
	set objMovLine = $$GetYFELDEX^COMGridEdit31Interface("INMOVLine",$$$GRIDYKEYContainer_","_pidRow)
	
	set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(pidKey,0,.sc)
	set LOCATION = $$$INMOVLocation(objMov)  
	set idStore  = objBundleStock.Storage.Code
	set idBundle = objBundleStock.Bundle.%Id()
	do:$$$ISOK(sc) SetRecord^COMGridEdit31S1("INMOVLine",pidRow,$$$FldINMOVLineFromStorage_$$$COMMA_idStore)
	do:$$$ISOK(sc) SetRecord^COMGridEdit31S1("INMOVLine",pidRow,$$$FldINMOVLineBundle_$$$COMMA_idBundle)
 
	quit
	
	
BuildDynTableHeader(pobjItemPolicy,&plstHeaders,&plstColTypes, pidItem, pidLoc)
	;-------------------------------------------------------------------------------
	; Setup Table Headers
	; StockBundleId, BundleAttribute(s), QoH
	;         (1)               (2)                  (3)
	;     "Storage"     Attribute Headings       "QtyOnHand"
	;                   (e.g. "Lot Number")       
	; 
	; History:
	; 04-Nov-2009	DWR		SR16853: Passed in ItemId, use to get base unit and display
	; 							in the header of DynGrid
	; 06-Feb-2009	GRF		SR16328: Changed fields from "display" to "Link so user
	; 							can click on amy field in the dynamic table and 
	; 							have the lines updated
	; 21-Jan-2009	GRF		SR16317: Revise "Bundle" display - hide internal and
	; 							change name; prefixes
	; 12-May-2008	Luke 	SR15722: added translations for QtyOnHand
	; 08-May-2008	Luke 	SR15722: added translations for Storage and "Stock Bundle" 
	; 06-May-2008	Luke	SR15713 Copied from INIssueTable
	;-------------------------------------------------------------------------------
	new enumInvUnit,idAttrKey,objAttr,strAttrName,strUnit
	
	;---------------------------------------  1
	
	set plstHeaders  = $listbuild($$$Text("alISS0003"))       ; "Storage"
	set plstColTypes = $listbuild($listbuild("left","link"))
	
	;---------------------------------------  2
	
	do DynaHeadings^INBundleUtils(pobjItemPolicy,pidLoc,.plstHeaders,.plstColTypes)
	
	;---------------------------------------  3     Append QOH Header
	
	set enumInvUnit = $$$INARTUnitofMeasure($get(^INART(0,pidItem,1)))
	set strUnit     = $$$AppEnum("EINHEIT",enumInvUnit)
	set plstHeaders  = plstHeaders_$listbuild($$$Text($listbuild("IN001149",strUnit))) ; "QtyOnHand (%1)"
 	set plstColTypes = plstColTypes_$listbuild($listbuild("right","link"))
	quit $$$OK
	
	
BuildDynTableRows(pidItem,pidLocn,pidStore)
	;-------------------------------------------------------------------------------
	; Build an array "^CacheTempDynamicTable" which contains the lines corresponding
	; to the headings in BuildDynTableHeader
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 30-Oct-2013	FrankF	SESPE-586: Show blocked locations but EmTransito.
	; 10-Oct-2013	SCR		CORE-266: Dont show blocked locations
	; 23-Sep-2013	shobby	UFH-11.16: Cache2010 requires CodeWithTSUGet() to have the brackets.
	; 18-Apr-2013	shobby	HEVA-154.1: Display descriptions in Dynatable
	; 30-Sep-2010	shobby	SR17541: Redirect to query that orders by TSU
	; 20-Feb-2009	GRF		SR16303: Potential for objPolicyAttr to be held over
	; 							from previous cycle of for loop when not defined.
	; 21-Jan-2009	GRF		SR16317: Revise "Bundle" display; cleanup old comments;
	; 							correct prefixes
	; 04-Sep-2008	GRF		SR15804: Use WWWDATE rather than $zdate
	; 09-May-2008	HQN		SR15728: Ignore dStockBundles that are completely sourced
	; 06-May-2008	Luke	SR15713: Copied from INIssueTable
	;
	; FIXME: Validation of result table against headers
	;-------------------------------------------------------------------------------
	new arrBundleStock,idBundleStock,idLine,idKey,idPolicyAttr
	new objAttr,objBundleStock,objINMOVLine,objItem,objLocn,objItemPolicy
	new objPolicyAttr,objResultSet,objStore,strAttrValues,fltQtyAvailable
	
	set objItem  = ##class(alINV.iUINV).GetItem(pidItem)
	set objLocn  = ##class(alLOC.iULOC).GetLocation(pidLocn)
	
	if (objItem '= $$$NULLOREF) && (objLocn '= $$$NULLOREF) {
		kill ^CacheTempDynamicTable(YUCI,YUSER,"dBundleStock")
		set objItemPolicy = objItem.ItemPolicy
		
 		; Find and merge dBundleStock entries on screen
 		set idLine = ""
 		kill arrBundleStock
 		for {
	 		set idLine = $order(^WWWDATEN(YM,+$horolog,YUSER,"INMOVLine","V","REFERENCEROW",idLine))
	 		quit:(idLine = "")
	 		set objINMOVLine = $$$GRIDGetYFELD(idLine)
	 		continue:($$$INMOVLineItem(objINMOVLine) = "")
	 		continue:($$$INMOVLineFromStorage(objINMOVLine) = "")
	 		continue:($$$INMOVLineBundle(objINMOVLine) = "")
	 		continue:($data(^WWWDATEN(YM,+$horolog,YUSER,"INMOVLine","V","KILLEDRECORD",idLine))) ; Ignore values inside killed records
	 		
	 		set idBundleStock = $$$INMOVLineItem(objINMOVLine)_"||"_$$$INMOVLocation($$$GRIDYFELDContainer)_"||"_$$$INMOVLineFromStorage(objINMOVLine)_"||"_$$$INMOVLineBundle(objINMOVLine)
	 		set arrBundleStock(idBundleStock) = $get(arrBundleStock(idBundleStock)) + $$$INMOVLineQtyRequired(objINMOVLine)
 		}
 		
 		; FIXME: HQN Should this actually show sourcing sequence?
		; Retrieve Records
	;SR17541 set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetViaLocation")
		set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetViaLocationOrderByTSU")		;SR17541
		if objResultSet.Execute(objItem.%Id(),objLocn.%Id()) {
			set idLine = 0
			while objResultSet.Next() {
				set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(objResultSet.Data("ID"))
				continue:objBundleStock.Storage.Code="EmTransito"
				continue:($get(arrBundleStock(objBundleStock.%Id())) >= objBundleStock.QtyOnHand)
				set fltQtyAvailable = objBundleStock.QtyOnHand-$$GetQtyPlanned(objBundleStock.Item.%Id(),objBundleStock.Storage.Location.%Id(),objBundleStock.Storage.%Id(),objBundleStock.Bundle.%Id())
				continue:(fltQtyAvailable<=0)
				
				set ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle",$increment(idLine),"data") = objBundleStock.%Id()
			
			;-------------------------------  1  Storage
			
	;SR17541	set strAttrValues = objBundleStock.Storage.Code_Y
				if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
					if (YLOCATION = $$getFarmaciaAcoesJudiciais^VARParametroCliente(0)){
						set strAttrValues = "("_objBundleStock.Storage.CodeWithTSUGet()_") "_$$SQLGetPatientName^VARSQL(objBundleStock.Storage.CodeWithTSUGet())_Y	;SR17541 ;UFH-11
					}else{
						set strAttrValues = objBundleStock.Storage.CodeWithTSUGet()_Y	;SR17541 ;UFH-11
					}
				}else{
					set strAttrValues = objBundleStock.Storage.CodeWithTSUGet()_Y	;SR17541 ;UFH-11
				}
			
			;-------------------------------  2  Bundle Attributes
				set strAttrValues=strAttrValues_$$BundleAttributes2^INBundleUtils(objBundleStock)  ;HEVA-154.1
			;-------------------------------  3  Qty On Hand
			
				set strAttrValues = strAttrValues_fltQtyAvailable
				set ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle",idLine) = strAttrValues
			}
		}
	}
	quit
	
 
GetQtyPlanned(pidItem,pidLocn,pidStore,pidBundle,pidType=0,pstrKey="")
	;-------------------------------------------------------------------------------
	; Arguments:
	; 	pidItem		dItem.%Id()
	; 	pidLocn		dLocation.%Id()
	; 	pidStore	dStorage.%Id()
	; 	pidBundle	dBundle.%Id()
	;	pidType		Current Record Type (Optional)
	;	pstrKey		Current Record Key	(Optional)
	;
	; Returns: 
	; 	Quantity planned for this dBundleStock
	; 
	; NOTES: DIRECT ACCESS INTO alDRP tables...consider refactor into iDRP
	; 
	; History:
	; 
	; 12-Jul-2013	SCR		CORE-131: exclude Current Record Stock
	; 17-Oct-2008 	HQN 	SR16045: Created
	;-------------------------------------------------------------------------------
	new fltQtyPlanned,SQLCODE
	
	set fltQtyPlanned = 0
	; CORE-131 vvvv
	if (pidType) && (pstrKey'="") {
		&sql(SELECT SUM(IFNULL(QtyRequired,0,QtyRequired)) into :fltQtyPlanned 
		FROM alDRP.dPlannedMovement
		WHERE
			Item=:pidItem                 	AND
			FromStorage->Location=:pidLocn 	AND
			FromStorage=:pidStore          	AND
			Bundle=:pidBundle				AND
			((Reference != :pstrKey) OR (MovementType_MovementTypeId != :pidType))
		)

	} else {
		; CORE-131 ^^^^
		&sql(SELECT SUM(IFNULL(QtyRequired,0,QtyRequired)) into :fltQtyPlanned 
		FROM alDRP.dPlannedMovement
		WHERE
			Item=:pidItem                  AND
			FromStorage->Location=:pidLocn AND
			FromStorage=:pidStore          AND
			Bundle=:pidBundle
		)
	}

	quit fltQtyPlanned
	
GetQtyPlannedForReference(pidItem,pidLocn,pidStore="",pidBundle="",pidType=0,pstrKey)
	;-------------------------------------------------------------------------------
	; Arguments:
	; 	pidItem		dItem.%Id()
	; 	pidLocn		dLocation.%Id()
	; 	pidStore	dStorage.%Id()
	; 	pidBundle	dBundle.%Id()
	;	pidType		Current Record Type (Optional)
	;	pstrKey		Current Record Key	(Optional)
	;
	; Returns: 
	; 	Quantity planned for this Document and Bundle
	; 
	; NOTES: DIRECT ACCESS INTO alDRP tables
	; 
	; History:
	; 
	; 13-Ago-2013	RGB		Created
	;-------------------------------------------------------------------------------
	new fltQtyPlanned,SQLCODE
	
	set fltQtyPlanned = 0
	
	Set tSQL  = "SELECT SUM(IFNULL(QtyRequired,0,QtyRequired)) as fltQtyPlanned from alDRP.dPlannedMovement where Item='"_pidItem_"' and FromStorage->Location='"_pidLocn_"' and "
	
	if pidStore'="" set tSQL=tSQL_"FromStorage='"_pidStore_"' and "
	if pidBundle'="" set tSQL=tSQL_"Bundle='"_pidBundle_"' and "
	if pidType'=0 set tSQL=tSQL_"MovementType_MovementTypeId='"_pidType_"' and "
	
	set tSQL=tSQL_"Reference='"_pstrKey_"'"

	Set tRs = ##class(%Library.ResultSet).%New()
	Set tRs.RuntimeMode = "0"	
	Do tRs.Prepare(tSQL) 
	Do tRs.Execute()
    While tRs.Next() 
    {			

		set fltQtyPlanned=tRs.Data("fltQtyPlanned")
    }
    
    If $IsObject(tRs)
	{
		Do tRs.Close()
	}	
	
	quit fltQtyPlanned]]></Routine>
</Export>