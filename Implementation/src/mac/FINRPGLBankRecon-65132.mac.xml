<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINRPGLBankRecon" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINRPGLBankRecon
	
#include COMSYS
#include FINConst
#include COMConst
#include WWWConst
	
#define CurrencyToUse(%1)	$get(^CacheTempBankRecon(%1,"Currency"))
#;define AddToRow(%1)		set lstRow = lstRow_$listbuild(%1)          ; SR15632
	;-------------------------------------------------------------------------------
	; Routines specifically related to running the Bank Recon report.
	; Refer:SR 13308
	;-------------------------------------------------------------------------------
 
 
BuildHeader(pidCompany,pidLanguage,pidLocation,pYUSER,pidBankRec)
	;-------------------------------------------------------------------------------
	; Build the row-set for the header
	;
	; Params: pidCompany		: The company number (YM)
	; 		  pidLanguage		: The language we're using (SPRACHE)
	; 		  pidLocation		: The location we're in (YLOCATION)
	; 		  pYUSER			: The session ID (YUSER)
	; 		  pidBankRec		: The bank rec number
	; 		  
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 14-Oct-2009	GRF		SR15632: Macro replacement
	; 18-Jan-2007	SteveS	SR15355: Use namespace subscript
	; 18-Oct-2006	SteveS	SR15108: Created
	;-------------------------------------------------------------------------------
	new YM,SPRACHE,YLOCATION,YUSER,Y
	new objWWW012,objWWW0121,objFINGLBankRecon,lstRow,curPrevGLAdj,curGLAdjIncl
	new curClearedGLTrans,curGLAdj,curPreCleared,curUnAlloc,blnGLAdjZero,dteGLEff,dteReconcile
	new arrTrans,dteTranDate,idAcc,curEndGLBal,curNetUnPresented,curReconcile
 
	set YM			= $get(pidCompany)
	set SPRACHE		= $get(pidLanguage)
	set YLOCATION 	= $get(pidLocation)
	set YUSER		= $get(pYUSER)
	set Y			= "~"
 
	quit:(YM="")||(SPRACHE="")||(YLOCATION="")||(YUSER="") // need setup variables
	
	set objWWW012		  = $get(^WWW012(0,YM,1))
	set objWWW0121		  = $get(^WWW0121(0,YM,YLOCATION,1))
	set objFINGLBankRecon = $get(^FINGLBankRecon(YM,pidBankRec,1))
	
	set lstRow = ""
	
	// Header Data
	$$$AddToRow($$$WWW012CompanyName(objWWW012))
	$$$AddToRow($$$WWW0121LocationName(objWWW0121))
	$$$AddToRow($$GetAddressString^WWW0121RP(YM,YLOCATION))
	$$$AddToRow($$$WWW0121Tel(objWWW0121))
	$$$AddToRow($$$WWW0121Telefax(objWWW0121))
	$$$AddToRow($$Date^COMRPUtil($$$FINGLBankReconPosted(objFINGLBankRecon),SPRACHE))
	$$$AddToRow($$Date^COMRPUtil(+$horolog,SPRACHE))
	$$$AddToRow($$$FINGLBankReconBankAccount(objFINGLBankRecon))
	$$$AddToRow($$$FINGLBankReconStatementNumber(objFINGLBankRecon))
	$$$AddToRow($$Date^COMRPUtil($$$FINGLBankReconOpeningDate(objFINGLBankRecon),SPRACHE))
	$$$AddToRow($$Date^COMRPUtil($$$FINGLBankReconClosingDate(objFINGLBankRecon),SPRACHE))
	$$$AddToRow($$Date^COMRPUtil($$$FINGLBankReconReconcilingGLDate(objFINGLBankRecon),SPRACHE))
	
	set blnGLAdjZero = $$$NO
	
	set dteTranDate		= $$$FINGLBankReconReconcilingGLDate(objFINGLBankRecon)
	set dteGLEff 		= $$$FINGLBankReconEntered(objFINGLBankRecon)
	set dteReconcile 	= $$$FINGLBankReconReconcilingGLDate(objFINGLBankRecon)
	
	if (dteGLEff<=dteReconcile) && ($$$FINGLBankReconStatus(objFINGLBankRecon)=$$$EnumFINSYSSTATUSPosted) {
		set blnGLAdjZero = $$$YES
	}
	
	set curClearedGLTrans = $$GetCleared^FINGLBankReconGet(pidBankRec,$$$YES)         - $$GetCleared^FINGLBankReconGet(pidBankRec,$$$NO)
	set curGLAdj          = $$GetChargesInterest^FINGLBankReconGet(pidBankRec,$$$YES) - $$GetChargesInterest^FINGLBankReconGet(pidBankRec,$$$NO)
	set curPreCleared     = $$GetPreCleared^FINGLBankReconGet(pidBankRec,$$$YES)      - $$GetPreCleared^FINGLBankReconGet(pidBankRec,$$$NO)
	set curUnAlloc        = $$$FINGLBankReconOpeningBalance(objFINGLBankRecon)        + $$GetTotalDeposits^FINGLBankReconGet(pidBankRec)
	                                                                                  - $$GetTotalWithdrawals^FINGLBankReconGet(pidBankRec)
	                                                                                  - $$$FINGLBankReconClosingBalance(objFINGLBankRecon)
		set curGLAdjIncl = $select(blnGLAdjZero:0,$$$YES:curGLAdj)
	
	//Header Totals: Box 1
	$$$AddToRow($$FormatCurrency^COMRPUtil($$$FINGLBankReconOpeningBalance(objFINGLBankRecon),YM,SPRACHE,0))  //Opening Statement Bal
	$$$AddToRow($$FormatCurrency^COMRPUtil(curClearedGLTrans,YM,SPRACHE,0))    //Cleared GL Transactions
	$$$AddToRow($$FormatCurrency^COMRPUtil(curGLAdj,YM,SPRACHE,0))             //GL Adjustments
	$$$AddToRow($$FormatCurrency^COMRPUtil(curPreCleared,YM,SPRACHE,0))        //Pre Cleared
	$$$AddToRow($$FormatCurrency^COMRPUtil($$$FINGLBankReconClosingBalance(objFINGLBankRecon),YM,SPRACHE,0))  //Closing Statement Bal
	$$$AddToRow($$FormatCurrency^COMRPUtil(curUnAlloc,YM,SPRACHE,0))           //Unallocated
	
	do SumUncleared^FINGLBankTran(pidBankRec,.arrTrans)
	
	set curNetUnPresented	= $get(arrTrans("DR","Total")) - $get(arrTrans("CR","Total"))
	set curPrevGLAdj		= $$GetPrevGLAdj^FINRPGLBankReconPrevGLAdj(YM,SPRACHE,YUSER,pidBankRec,$$$YES)
	set curReconcile		= $$$FINGLBankReconClosingBalance(objFINGLBankRecon)+curNetUnPresented-curGLAdjIncl+curPrevGLAdj-curPreCleared
	
	do GetReconAccounts^FINGLBank($$$FINGLBankReconBankAccount(objFINGLBankRecon))
	
	set curEndGLBal = 0
	set idAcc=""
	
	for {
		set idAcc=$order(^CacheTempBankRecon(YUSER,"Accounts",idAcc))
		quit:(idAcc="")
			
		set curEndGLBal=curEndGLBal+$$GetBalanceAtDate^FINGLAccountTran(idAcc,dteTranDate)
	}
	
	//Header Totals: Box 2
	$$$AddToRow($$FormatCurrency^COMRPUtil(curNetUnPresented,YM,SPRACHE,0))		//Net Unpresented
	$$$AddToRow($$FormatCurrency^COMRPUtil(curGLAdjIncl,YM,SPRACHE,0))		//Included GL Adjustments
	$$$AddToRow($$FormatCurrency^COMRPUtil(curPrevGLAdj,YM,SPRACHE,0))		//Previous GL Adjustments
	$$$AddToRow($$FormatCurrency^COMRPUtil(curReconcile,YM,SPRACHE,0))		//Reconcile To GL
	$$$AddToRow($$FormatCurrency^COMRPUtil(curEndGLBal,YM,SPRACHE,0))		//Ending GL Balance
	$$$AddToRow($$FormatCurrency^COMRPUtil(curEndGLBal-curReconcile,YM,SPRACHE,0))		//Difference
 
 	//SR15355
	set ^CacheTempRow($zutil(5),YUSER,1) = lstRow
 
	quit
	
	
InitialiseData(pidBankRec)
    ;--------------------------------------------------------------------------------
    ; Caches all the required data for the report
    ; (saves repeating CachÃ© callbacks through SQL, which is ALOT slower).
    ;
    ; Returns:
    ;
    ; History:
    ; 26-Jul-2006	JW		SR14880: Changed call for accounts
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------
	new objBankRec,idAcc
 
	if '$$$NoKey(pidBankRec) {
		set objBankRec=$get(^FINGLBankRecon(YM,pidBankRec,1))
		set idAcc=$$$FINGLBankReconBankAccount(objBankRec)
		//do SetAccounts(idAcc)		SR14880
		do GetReconAccounts^FINGLBank(idAcc)
		set ^CacheTempBankRecon(YUSER,"Currency")=YWHR
		
		do SetPreCleared(pidBankRec)
		do SetUnCleared(pidBankRec)
		do SetClearedAmounts(pidBankRec)
	}
 
	quit
	
	
SetClearedAmounts(pidBankRec)
    ;--------------------------------------------------------------------------------
    ; Cache the cleared amounts in this bank rec.
    ;
    ; Returns:
    ;
    ; History:
    ; 22-Sep-2006	SteveS	SR14890: Store expected balance
    ; 27-Apr-2006	SteveS	SR14157: Store GLAdj, Difference.
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------
	new objBankRec,idAcc,fltBal,dteTranDate,dteGLEff,dteReconcile,blnGLAdjZero
	
	if '$$$NoKey(pidBankRec) {
		set objBankRec		= $get(^FINGLBankRecon(YM,pidBankRec,1))
		
		set dteTranDate		= $$$FINGLBankReconReconcilingGLDate(objBankRec)
		set dteGLEff 		= $$$FINGLBankReconEntered(objBankRec) 				//SR14890
		set dteReconcile 	= $$$FINGLBankReconReconcilingGLDate(objBankRec)	//SR14890
		
		set blnGLAdjZero = $$$NO												//SR14890
		
		if (dteGLEff<=dteReconcile) && ($$$FINGLBankReconStatus(objBankRec)=$$$EnumFINSYSSTATUSPosted) {
			set blnGLAdjZero = $$$YES
		}
		
		set ^CacheTempBankRecon(YUSER,"ClearedDeposit")		=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),$$GetCleared^FINGLBankReconGet(pidBankRec,$$$YES)+$$GetChargesInterest^FINGLBankReconGet(pidBankRec,$$$YES))
		set ^CacheTempBankRecon(YUSER,"ClearedWithdrawal")	=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),$$GetCleared^FINGLBankReconGet(pidBankRec,$$$NO)+$$GetChargesInterest^FINGLBankReconGet(pidBankRec,$$$NO))
		set ^CacheTempBankRecon(YUSER,"ClearedSubTotal")	=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),$$$FINGLBankReconOpeningBalance(objBankRec)+$$GetTotalDeposits^FINGLBankReconGet(pidBankRec)-$$GetTotalWithdrawals^FINGLBankReconGet(pidBankRec))
		set ^CacheTempBankRecon(YUSER,"Unallocated")		=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),$get(^CacheTempBankRecon(YUSER,"ClearedSubTotal"))-$$$FINGLBankReconClosingBalance(objBankRec))
		
		if 'blnGLAdjZero { //SR14890
			set ^CacheTempBankRecon(YUSER,"GLAdj")			=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),$$GetChargesInterest^FINGLBankReconGet(pidBankRec,$$$YES)-$$GetChargesInterest^FINGLBankReconGet(pidBankRec,$$$NO))
		} else {
			set ^CacheTempBankRecon(YUSER,"GLAdj")			=0
		}
		
		set ^CacheTempBankRecon(YUSER,"ReconcileAmount")	=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),$$$FINGLBankReconClosingBalance(objBankRec)+$get(^CacheTempBankRecon(YUSER,"UnClearedTotal"))-$get(^CacheTempBankRecon(YUSER,"PreClearTotal")))
		
		set fltBal=0
		set idAcc=""
		
		for { //SR14157
			set idAcc=$order(^CacheTempBankRecon(YUSER,"Accounts",idAcc))
			quit:(idAcc="")
			
			set fltBal=fltBal+$$GetBalanceAtDate^FINGLAccountTran(idAcc,dteTranDate)
		}
		
		set ^CacheTempBankRecon(YUSER,"GLBal")					=fltBal //SR14157
		set ^CacheTempBankRecon(YUSER,"ExpectedStatementBal")	=fltBal+$get(^CacheTempBankRecon(YUSER,"GLAdj")) //SR14890
		set ^CacheTempBankRecon(YUSER,"Difference")				=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),$get(^CacheTempBankRecon(YUSER,"ExpectedStatementBal"))-$get(^CacheTempBankRecon(YUSER,"ReconcileAmount")))
	}
 
	quit
	
GetExpectedBal(pYUSER)
	;-------------------------------------------------------------------------------
	; Get the expected statement balance
	;
	; Params: pYUSER		: The YUSER variable
	;
	; ByRefs:
	;
	; Returns: curAmount
	;
	; History:
	; 22-Sep-2006	SteveS	SR14890: Created
	;-------------------------------------------------------------------------------
	new curAmount
 
	set curAmount=0
	
	if $get(pYUSER)'="" {	
		set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"ExpectedStatementBal")))
	}
 
	quit curAmount
	
	
SetPreCleared(pidBankRec)
    ;--------------------------------------------------------------------------------
    ; Cache the pre-cleared amounts in this bank rec.
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Nov-2005	Steve S		SR13813: Created
    ;---------------------------------------------------------------------------------
	if '$$$NoKey(pidBankRec) {
		set ^CacheTempBankRecon(YUSER,"PreClearDeposit")	=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),$$GetPreCleared^FINGLBankReconGet(pidBankRec,$$$YES))
		set ^CacheTempBankRecon(YUSER,"PreClearWithdrawal")	=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),$$GetPreCleared^FINGLBankReconGet(pidBankRec,$$$NO))
		set ^CacheTempBankRecon(YUSER,"PreClearTotal")		=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),-$get(^CacheTempBankRecon(YUSER,"PreClearWithdrawal"))+$get(^CacheTempBankRecon(YUSER,"PreClearDeposit")))
	}
 
	quit
	
	
SetUnCleared(pidBankRec)
    ;--------------------------------------------------------------------------------
    ; Cache the uncleared amounts in this bank rec.
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------
	new arrTrans
 
	if '$$$NoKey(pidBankRec) {
		do SumUncleared^FINGLBankTran(pidBankRec,.arrTrans)
		set ^CacheTempBankRecon(YUSER,"UnClearedDeposit")	=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),$get(arrTrans("DR","Total")))
		set ^CacheTempBankRecon(YUSER,"UnClearedWithdrawal")=$$$RoundToDecimalPoints($$$CurrencyToUse(YUSER),$get(arrTrans("CR","Total")))
		set ^CacheTempBankRecon(YUSER,"UnClearedTotal")		=^CacheTempBankRecon(YUSER,"UnClearedDeposit")-^CacheTempBankRecon(YUSER,"UnClearedWithdrawal")
	}
	
	quit
	
	
GetClearedAmount(pYUSER,pblnDeposit=$$$NO)
    ;--------------------------------------------------------------------------------
    ; Return the cleared deposit/withdrawal for this YUSER bank rec.
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------	
	new curAmount
 
	set curAmount=0
	
	if $get(pYUSER)'="" {
		if pblnDeposit {
			set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"ClearedDeposit")))
		} else {
			set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"ClearedWithdrawal")))
		}
	}
 
	quit curAmount
	
	
GetPreClearedAmount(pYUSER,pblnDeposit=$$$NO)
    ;--------------------------------------------------------------------------------
    ; Return the pre-cleared deposit/withdrawal for this YUSER bank rec.
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------	
	new curAmount
	
	set curAmount=0
	
	if $get(pYUSER)'="" {
		if pblnDeposit {
			set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"PreClearDeposit")))
		} else {
			set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"PreClearWithdrawal")))
		}	
	}
 
	quit curAmount
	
	
GetPreClearedTotal(pYUSER)
    ;--------------------------------------------------------------------------------
    ; Return the pre-cleared total for this YUSER bank rec.
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------	
	new curAmount
 
	set curAmount=0
	
	if $get(pYUSER)'="" {	
		set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"PreClearDeposit"))-$get(^CacheTempBankRecon(pYUSER,"PreClearWithdrawal")))
	}
 
	quit curAmount
	
	
GetTotalWithdrawal(pYUSER)
    ;--------------------------------------------------------------------------------
    ; Return the total withdrawal for this YUSER bank rec.
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------	
	new curTotal
	
	set curTotal=0
 
	if $get(pYUSER)'="" {
		set curTotal=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"ClearedWithdrawal"))+$get(^CacheTempBankRecon(pYUSER,"PreClearWithdrawal")))
	}
 
	quit curTotal
	
	
GetTotalDeposit(pYUSER)
    ;--------------------------------------------------------------------------------
    ; Return the total deposit for this YUSER bank rec.
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------	
	new curTotal
	
	set curTotal=0
 
	if $get(pYUSER)'="" {
		set curTotal=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"ClearedDeposit"))+$get(^CacheTempBankRecon(pYUSER,"PreClearDeposit")))
	}
 
	quit curTotal
	
	
GetClearedSubTotal(pYUSER)
    ;--------------------------------------------------------------------------------
    ; Return the cleared subtotal for this YUSER bank rec.
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------		
	new curAmount
 
	set curAmount=0
	
	if $get(pYUSER)'="" {
		set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"ClearedSubTotal")))
	}
 
	quit curAmount
	
	
GetUnallocatedAmount(pYUSER)
    ;--------------------------------------------------------------------------------
    ; Return the unallocated amount for this YUSER bank rec.
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------	
	new curAmount
 
	set curAmount=0
	
	if $get(pYUSER)'="" {
		set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"Unallocated")))
	}
 
	quit curAmount
	
	
GetUnclearedAmount(pYUSER,pblnDeposit=$$$NO)
    ;--------------------------------------------------------------------------------
    ; Return the uncleared amount for this YUSER bank rec.
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------	
	new curAmount
 
	set curAmount=0
	
	if $get(pYUSER)'="" {
		if pblnDeposit {
			set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"UnClearedDeposit")))
		} else {
			set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"UnClearedWithdrawal")))
		}
	}
 
	quit curAmount
	
	
GetReconcileAmount(pYUSER)
    ;--------------------------------------------------------------------------------
    ; Return the amount to reconcile to the GL.
    ;
    ; Returns:
    ;
    ; History:
    ; 15-Nov-2005	SteveS	SR13813: Created
    ;---------------------------------------------------------------------------------		
	new curAmount
	
	set curAmount=0
	
	if $get(pYUSER)'="" {
		set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"ReconcileAmount")))
	}
	
	quit curAmount
	
		
IncludeAccount(pidAcc,pYUSER)
    ;-------------------------------------------------------------------------------
    ; Determines whether or not an account is linked to a primary bank account.
    ;
    ; Returns: boolean
    ;
    ; History:
    ; 19-Sep-2005	SteveS	SR13308: Created
    ;-------------------------------------------------------------------------------
	new blnInclude
 
	set blnInclude=$$$NO
 
	if ($get(pYUSER)'="")&&($get(pidAcc)'="") {
		set blnInclude=($data(^CacheTempBankRecon(pYUSER,"Accounts",pidAcc))=1)
	}
	
	quit blnInclude
	
	
TranIsCleared(pidCompany,pidBankRec,pidTran,pidNumber)
    ;-------------------------------------------------------------------------------
    ; Determines whether or not a tran line has been cleared
    ;
    ; Returns: boolean
    ;
    ; History:
    ; 16-Feb-2006	RPW		SR13675: Rewrote to use FINGLBankReconMatched instead of
    ; 							FINGLBankReconCleared
    ; 24-Oct-2005	JW		SR13703: Check tran line as well
    ; 19-Sep-2005	SteveS	SR13308: Created
    ;-------------------------------------------------------------------------------
	new blnClear,objFINGLTranLine,objFINGLBankReconMatched,idBankReconMatched
	
	set blnClear=$$$NO
	
	if ($get(pidCompany)'="")&&($get(pidBankRec)'="")&&($get(pidTran)'="")&&($get(pidNumber)'="") {
		set idBankReconMatched=$order(^FINGLBankReconMatcheds(YM,3,pidTran,pidNumber,pidBankRec,"")) // SR13675
		if idBankReconMatched'="" { // SR13675
			set objFINGLBankReconMatched=$get(^FINGLBankReconMatched(pidCompany,pidBankRec,idBankReconMatched,1)) // SR13675
			if $$$FINGLBankReconMatchedCleared(objFINGLBankReconMatched) { // SR13675
				set blnClear=$$$YES		
			}
		}
		
		if ('blnClear) {
			set objFINGLTranLine = $get(^FINGLTranLine(pidCompany,pidTran,pidNumber,1))
			if $$$FINGLTranLineCleared(objFINGLTranLine)=pidBankRec {	//SR13703
				set blnClear=$$$YES
			}
		}
	}
 
	quit blnClear
	
	
GetChargeIntType(pidCompany,pidBankRec,pidLine,pidLang)
    ;-------------------------------------------------------------------------------
    ; Return the charge/interest line type (deposit/payment)
    ;
    ; Returns: String
    ;
    ; History:
    ; 19-Sep-2005	SteveS	SR13308: Created
    ;-------------------------------------------------------------------------------
	new strType,objFINGLBankReconLine
 
	set strType=""
	
	if ($get(pidCompany)'="")&&($get(pidBankRec)'="")&&($get(pidLine)'="")&&($get(pidLang)'="") {
		set objFINGLBankReconLine=$get(^FINGLBankReconLine(pidCompany,pidBankRec,pidLine,1))
		if (+$$$FINGLBankReconLineCredit(objFINGLBankReconLine)>0) {
			set strType=$$^WWWTEXT("Fin00213",,,pidLang) ;Payment
		} elseif (+$$$FINGLBankReconLineDebit(objFINGLBankReconLine)>0) {
			set strType=$$^WWWTEXT("Fin00086",,,pidLang) ;Deposit
		} else {
			set strType=$$^WWWTEXT("Fin00904",,,pidLang) ;Zero	
		}
	}
 
	quit strType
	
		
Show(pfltDebit,pfltCredit,pblnPrintCheque,pblnPrintDeposit)
    ;-------------------------------------------------------------------------------
    ; Determines whether or not to print a line
    ;
    ; Returns: boolean
    ;
    ; History:
    ; 20-Sep-2005	SteveS	SR13308: Created
    ;-------------------------------------------------------------------------------
	new blnShow
 
	set blnShow=$$$NO
	
	if (+$get(pfltDebit)>0)&&($get(pblnPrintDeposit)=$$$YES) {
		set blnShow=$$$YES	
	}
	
	if (+$get(pfltCredit)>0)&&($get(pblnPrintCheque)=$$$YES) {
		set blnShow=$$$YES	
	}
	
	quit blnShow
	
	
GetPreClearType(pidCompany,pidBankRec,pidLine,pidLang)
    ;-------------------------------------------------------------------------------
    ; Gets a pre-cleared line's type description
    ;
    ; Returns: String
    ;
    ; History:
    ; 20-Sep-2005	SteveS	SR13308: Created
    ;-------------------------------------------------------------------------------
	new strType,objLine,idType
 
	set strType=""
	
	if ($get(pidCompany)'="")&&($get(pidBankRec)'="")&&($get(pidLine)'="")&&($get(pidLang)'="") {
		set objLine=$get(^FINGLBankReconPreCleared(pidCompany,pidBankRec,pidLine,1))
		if +$$$FINGLBankReconPreClearedCredit(objLine)'=0 {
			set strType=$$^WWWTEXT("Fin00213",,,pidLang)  	;Payment	
		} elseif +$$$FINGLBankReconPreClearedDebit(objLine)'=0 {
			set strType=$$^WWWTEXT("Fin00086",,,pidLang)  	;Deposit
		} else {
			set strType=$$^WWWTEXT("Fin00904",,,pidLang) 	;Zero
		}
	}
	
	quit strType	
	
	
ShowPreClear(pidCompany,pidBankRec,pidPreClear)
    ;-------------------------------------------------------------------------------
    ; Determines whether or not to show a preclear line
    ;
    ; Returns: boolean
    ;
    ; History:
    ; 27-Apr-2006	SteveS	SR14157: Check reverse
    ; 26-Sep-2005	SteveS	SR13308: Created
    ;-------------------------------------------------------------------------------
	new blnShow,objPreClear,strReverse
 
	set blnShow=$$$NO
	
	if ($get(pidCompany)'="")&&($get(pidBankRec)'="")&&($get(pidPreClear)'="") {
		set objPreClear=$get(^FINGLBankReconPreCleared(pidCompany,pidBankRec,pidPreClear,1))
		set strReverse=$$$FINGLBankReconPreClearedReverse(objPreClear)
		set:(strReverse="")||($$$KEY1(strReverse)=pidBankRec) blnShow=$$$YES //SR14157
	}
 
 
	quit blnShow
		
	
GetGJAdjAmount(pYUSER)
	;-------------------------------------------------------------------------------
	; Gets the total GL Adj Amount
	;
	; Params: pYUSER	: The YUSER number
	;
	; ByRefs:
	;
	; Returns: curAmount
	;
	; History:
	; 27-Apr-2006	SteveS	SR14157: Created
	;-------------------------------------------------------------------------------
	new curAmount
	
	set curAmount=0
	
	if $get(pYUSER)'="" {
		set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"GLAdj")))
	}
	
	quit curAmount
	
	
GetDifference(pYUSER)
	;-------------------------------------------------------------------------------
	; Gets the total difference amount
	;
	; Params: pYUSER	: The YUSER number
	;
	; ByRefs:
	;
	; Returns: curAmount
	;
	; History:
	; 27-Apr-2006	SteveS	SR14157: Created
	;-------------------------------------------------------------------------------
	new curAmount
	
	set curAmount=0
	
	if $get(pYUSER)'="" {
		set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"Difference")))
	}
	
	quit curAmount
	
	
GetBal(pYUSER)
	;-------------------------------------------------------------------------------
	; Gets the total balance
	;
	; Params: pYUSER	: The YUSER number
	;
	; ByRefs:
	;
	; Returns: curAmount
	;
	; History:
	; 27-Apr-2006	SteveS	SR14157: Created
	;-------------------------------------------------------------------------------
	new curAmount
	
	set curAmount=0
	
	if $get(pYUSER)'="" {
		set curAmount=$$$RoundToDecimalPoints($$$CurrencyToUse(pYUSER),$get(^CacheTempBankRecon(pYUSER,"GLBal")))
	}
	
	quit curAmount
	
]]></Routine>
</Export>