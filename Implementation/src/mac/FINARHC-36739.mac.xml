<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINARHC" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINARHC  ; AR Health Check
	#Include FINHC
	#define Check "^CacheTemp(YUSER,""FINARHC"")"

CustomerBalance(StartDate="",EndDate="",Location,Level="",Result)
	;-------------------------------------------------------------------------------
	; Check Customer Balance
	;
	; Returns:
	;
	; History:
	; 11-Jun-2004		shobby	+Amt
	; 11-Jun-2004		shobby	Intitialise total to 0
	; 03-Jun-2004		shobby	Allow for string ID's
	; 03-Jun-2004		shobby	Foreign Currency changes
	; 09-Feb-2004		SCR		Use 32-bit CRC Check
	; 03-Feb-2004		SCR		Creation
	;-------------------------------------------------------------------------------
 	;


	new Acc,Depth,Rec,Amt,Hash,LastAcc,HashValue
	
	kill Result  				; Clear Result
	set Depth=$length(Level) 	; Set the detail depth
	set Acc=Level				; Set the Acc to Start at the Level ( Optimisation )
	set Result("Total")=0
	if (Acc'="")&&($data(^FINARBalance(YM,Acc))) {	; If the Start Account exsits, go back one
		set Acc=$order(^FINARBalance(YM,Acc),-1) 	
	}
	for {											; Start of the Loop
		set Acc=$order(^FINARBalance(YM,Acc))
		if Acc="" quit
		if $extract(Acc,1,Depth)=Level {  			; If the Account is outside the Level
			set Rec=$get(^FINARBalance(YM,Acc,1))
			set Amt=$$$FINARBalanceBalance(Rec) ; Get the Amount
			set Result("Total")=$$$FCAdd($get(Result("Total")),Amt)
			set Hash=$extract(Acc,1,Depth+1)
			if Hash="" set Hash="?"
			set HashValue=$zcrc(Acc_"="_+Amt,7)
			set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
		}
	}
	
	Quit 1
	
CustomerInvoice(StartDate="",EndDate="",Location,Level="",Result)
	;-------------------------------------------------------------------------------
	; Check Customer Invoices
	;
	; Returns:
	;
	; History:
	; 03-Jun-2004		shobby	Allow for string ID's
	; 03-Jun-2004		shobbb	Fixed Hash calculation
	; 03-Jun-2004		shobby	Foreign Currency changes
	; 09-Feb-2004		SCR		Use 32-bit CRC Check
	; 05-Feb-2004		SCR		Creation
	;-------------------------------------------------------------------------------
 	;


	new Acc,Depth,Rec,Amt,Hash,LastAcc,HashValue,Invoice
	
	kill Result  				; Clear Result
	set Depth=$length(Level) 	; Set the detail depth
	set Acc=Level				; Set the Acc to Start at the Level ( Optimisation )
	if (Acc'="")&&($data(^FINARInvoice(YM,Acc))) {	; If the Start Account exsits, go back one
		set Acc=$order(^FINARInvoice(YM,Acc),-1) 	
	}
	for {											; Start of the Loop
		set Acc=$order(^FINARInvoice(YM,Acc))
		if Acc="" quit
		if $extract(Acc,1,Depth)=Level {  			; If the Account is outside the Level
			set Invoice=""
			set Amt=0
			for {
				set Invoice=$order(^FINARInvoice(YM,Acc,Invoice))
				quit:Invoice=""
				set Rec=$get(^FINARInvoice(YM,Acc,Invoice,1))
				set Amt=$$$FCAdd(Amt,$$$FINARInvoiceBalance(Rec)) ; Get the Amount
			}
			set Result("Total")=$$$FCAdd($get(Result("Total")),Amt)
			set Hash=$extract(Acc,1,Depth+1)
			if Hash="" set Hash="?"
			set HashValue=$zcrc(Acc_"="_Amt,7)
			set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
		}
	}
	
	Quit 1



Check(StartDate="",EndDate="",Location="",Level="",Result)

	new strStatus,idCustomer,objFINARBalance,idInvoice,objFINARInvoice
	new fltAmount
	
	kill Result
	set strStatus=$$$OK
	kill @$$$Check
	
	set idCustomer=""
	for {
		set idCustomer=$order(^FINARBalance(YM,idCustomer))
		quit:idCustomer=""
		set objFINARBalance=$get(^FINARBalance(YM,idCustomer,1))
		set $piece(@$$$Check@(idCustomer),Y,1)=$$$FINARBalanceBalance(objFINARBalance)
	}
	
	set idCustomer=""
	for {
		set idCustomer=$order(^FINARInvoice(YM,idCustomer))
		quit:idCustomer=""
		set idInvoice=""
		for {
			set idInvoice=$order(^FINARInvoice(YM,idCustomer,idInvoice))
			quit:idInvoice=""
			set objFINARInvoice=$get(^FINARInvoice(YM,idCustomer,idInvoice,1))
			set fltAmount=$piece($get(@$$$Check@(idCustomer)),Y,2)
			set fltAmount=$$$FCAdd(fltAmount,$$$FINARInvoiceBalance(objFINARInvoice))
			set $piece(@$$$Check@(idCustomer),Y,2)=fltAmount
		}
	}

	set idCustomer=""
	for {
		set idCustomer=$order(@$$$Check@(idCustomer))
		quit:idCustomer=""
		set fltAmount(1)=$piece(@$$$Check@(idCustomer),Y,1)
		set fltAmount(2)=$piece(@$$$Check@(idCustomer),Y,2)
		if fltAmount(1)'=fltAmount(2) {
			set Result("Hash",$$$ErrorNo(Result("Errors")))="Customer:"_idCustomer_". Account Balance("_fltAmount(1)_") does not match Invoice Balances("_fltAmount(2)_")."
		}
	}

	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}
	quit strStatus

]]></Routine>
</Export>