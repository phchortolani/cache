<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INReqSourceSupplier" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INReqSourceSupplier
	
#include COMSYS
#include WWWConst
#include INConst 
	
OnBeforeDataAccess(pYKEY,pYUSER)
	;-------------------------------------------------------------------------------
	; In COMView, show just suppliers from item selected
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 22-Jan-2008	GM			SRBR014818: fixed errors - parameters and result for
	; 								CheckSuppliers
	; 17-Dec-2007	GM/Shobby	SRBR014818: Created
	;-------------------------------------------------------------------------------
	new strStatus
 	
	set strStatus=$$$OK
	if YFORM="INReqSourceLine" {
		set strStatus = $$CheckSuppliers(pYKEY,+YUSER)
	}
	else {
		set strStatus = $$OnBeforeDataAccess^VARINLIEF(pYKEY)
	}
	quit strStatus 
	
	
CheckSuppliers(pidSupplier,YUSER=0)
	;-------------------------------------------------------------------------------
	; In COMView, get suppliers from item selected
	;
	; Params:
	;	pidSupplier		Supplier Key
	;	YUSER			
	;	
	; Returns:
	;
	; History:
	; 21-Feb-2008	GRF		SRBR014818: Error text updated; removed blnRequiresHasNone
	; 19-Feb-2008	GM		SRBR014818: Changed results to return error messages
	; 15-Feb-2008	GRF		SRBR014818: no need to use idSupplier *AND* pYKEY;
	; 							YUSER default to 0 rather than null to avoid
	; 							possible SUBSCRIPT error; unused variables removed
	; 							from new list.
	; 22-Jan-2008	GM		SRBR014818: fixed errors - parameters and result
	; 07-Jan-2008	GM		SRBR014818: Created
	;-------------------------------------------------------------------------------
	new blnHasNoAgreement,blnRequiresAgreement,idItem,objLine,intRow,idYKEY,strStatus
 	
	set strStatus=$$$OK	
	
	set idItem=""
	set intRow = $piece($piece($get(^WWWDATEN(YM,+$horolog,YUSER,YFORM,"V","FOCUSFIELD")),"Y",2),"_",1)
	if intRow'="" {
		set idYKEY = $$GetYKEY^COMGridEdit31Interface(intRow)
		set objLine = $$$GRIDGetYFELD(idYKEY)
		set idItem  = $$$INRequisitionItem(objLine)
		set blnRequiresAgreement = $$RequiresMasterAgreement^INReqSourceLine(objLine)
		set blnHasNoAgreement    = $$HasNoMasterAgreements^INReqSourceLine(objLine)      ; no ^INSupMastAgreeItem for item
	}
	
	; **************************************  vvvvv  <GRF> I BELIEVE THAT THIS CODE
	
	if idItem="" {
		set strStatus = $$$MakeStatus("IN00832")  ; "Item number is empty"
	
	; FIXME : <GRF> In routine INReqSourceTable this test is only considered when we
	;               don't have a required agreement.  Is it even relevant in its
	;      vvv      current state?
	;         
	} elseif '$data(^INARTK(YM,idItem,pidSupplier)) {
		set strStatus = $$$MakeStatus("IN00834",pidSupplier,idItem)  ; "'Supplier %1 does not have any conditions for item %2."
	
	} elseif ('blnRequiresAgreement) && ('blnHasNoAgreement) {  ; Case 3 in logic review at end of routine
		if '$$CanSourceReqs^INLIEF(pidSupplier) {
			set strStatus = $$$MakeStatus("IN00836",pidSupplier)  ; "Can not source requisitions for supplier %1"
		} else { 
			set strStatus = $$$OK 		
		}		 
	}
	
	; **************************************  vvvvv  SHOULD BE REPLACED WITH THIS
	
	/*
	
	; vvv Note : "not" Emergency rather than just Emergency
	set blnRequiresHasNone   = (blnRequiresAgreement && blnHasNoAgreement && '$$$INRequisitionEmergency(objLine))
	
	if idItem="" {
		set strStatus = $$$MakeStatus("IN00832")  ; "Item number is empty"
	
	; vvv Still subject to FIXME from above vvv
	} elseif '$data(^INARTK(YM,idItem,pidSupplier)) {
		set strStatus = $$$MakeStatus("IN00834",pidSupplier,idItem)  ; "'Supplier %1 does not have any conditions for item %2."
	
	; vvv replace INxxxxx with valid text vvv
	} elseif blnRequiresHasNone {   ; Case 2
		set strStatus = $$$MakeStatus("INxxxxx",idItem,pidSupplier)   ; "Agreement is required for item %1 and supplier %2."
	
	} elseif '$$CanSourceReqs^INLIEF(pidSupplier) {   ; Cases 1, 3 and 4 + Case 2 with Emergency Over-ride
		set strStatus = $$$MakeStatus("IN00836",pidSupplier)  ; "Can not source requisitions for supplier %1"
	}
	*/
	; **************************************  ^^^^^
	
	quit strStatus
	
	
	/*
	;---------------------------------------
	FIXME : <GRF>	Logic Review
	
	 						Requires Agreement?
	 						  YES		  NO	
	 						-----------------		blnHasNoAgreement
	 	Have		YES	:	1. GOOD		3. GOOD			= NO
	 	Agreement?	NO	:	2. BAD		4. GOOD			= YES
	
	What is special about 3 compared to 1 and 4?
	
	Shouldn't we be looking to reject case 2 and then applying the extra test to
	either all three of the others or to perhaps just 3 and 4?
	
	Case 2 is the option which needs to be rechecked to see if an emergency exists.
	In that case it too would become "GOOD" and would need to have the extra test
	applied as well.
	
	----------------
	Routine INReqSourceTable reviews suppliers in either ^INSupMastAgreeItems or
	^INARTK.
	
	^INARTK exists check
	If we don't have a record in ^INSupMastAgreeItems when we need one we may get
	the required information from ^INARTK.
	Thus 
	
	
	
	;---------------------------------------
	*/
	
 
	/*
From INReqSourceTable
	; Case A.  There is 
	;
 
		set blnRequiresAgreement = $$RequiresMasterAgreement^INReqSourceLine(objLine)
	 	set blnHasNoAgreement    = $$HasNoMasterAgreements^INReqSourceLine(objLine)
 		set blnRequiresHasNone   = (blnRequiresAgreement && blnHasNoAgreement && '$$$INRequisitionEmergency(objLine))
	 	
	 	kill ^CacheTempSupplierOmit(YUCI,YUSER)
	 	
		$$$Order4(^INSupMastAgreeItems,YM,5,idxItem,idSupplier)
			if '$$CanSourceReqs^INLIEF(idSupplier) {
				set ^CacheTempSupplierOmit(YUCI,YUSER,idSupplier) = ""
			} else {
				if blnRequiresHasNone && ($get(^INARTK(YM,idItem,idSupplier,1)) '= "") {
					set ^CacheTempSupplierOmit(YUCI,YUSER,idSupplier) = ""
					if $$CanSourceReqs^INLIEF(idSupplier) do SupplierLine^DUMMY(idItem,idSupplier,.idLine,blnHide)
				}
			}
		$$$End
	 	
		if ('blnRequiresAgreement) || blnRequiresHasNone {
			$$$Order3(^INARTK,YM,idItem,idSupplier)
				continue:$data(^CacheTempSupplierOmit(YUCI,YUSER,idSupplier))
				do SupplierLine^DUMMY(idItem,idSupplier,.idLine,blnHide)
			$$$End
		}
	QUIT
	*/
]]></Routine>
</Export>