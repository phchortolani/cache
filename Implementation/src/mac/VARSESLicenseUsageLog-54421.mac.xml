<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESLicenseUsageLog" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARSESLicenseUsageLog
	// Andre, 26/02/2009
	quit
	
#include COMSYS
#include COMConst
#include COMView
#include VARConst
 
OnAfterDataFields()
 	new SQL, rset, OK
 	
	// "Log" tab:
	if ( $get(YSEITE) = 1 ) {
		write !,"<P>"
		write !,"<SUP>1</SUP>"
		write !,"The number of maximum concurrent used Caché licenses is obtained by running Cachés routine $System.License.LUMaxConsumed(). According to Caché 5 documentation, $system.License.LUMaxConsumed() returns the maximum number of license units consumed at the local Cache instance since it started. This value is the high water mark of license consumption on the local Cache instance. Please, click "_"<a href='http://platinum.intersystems.com/csp/documatic/_CSP.Documatic.cls?PAGE=CLASS&LIBRARY=%25CACHELIB&CLASSNAME=%25SYSTEM.License&REFERER=http%3A//docs.intersystems.com/csp/docbook/DocBook.UI.Page.cls#LUMaxConsumed'>here</a>"_" to check InterSystems Caché 5 documentation for this method."
		write !,"</P>"
	}
	
	// "Graph" tab:
	elseif ( $get(YSEITE) = 2 ) {
		if ( $get(YPARA) = "ShowGraph" ) {
			do ShowGraphAndData()
		}
	}
	
	// "Login info" tab:
	elseif ( $get(YSEITE) = 3 ) {
		write !,"<BR>"
		write !,"<FONT FACE='Courier' SIZE='2'>"
		write !,"<PRE>"
		do CountUsersAndLogins^VARSESMonitor
		write !,"</PRE>"
		write !,"</FONT>"
		write !,"<BR>"
	}
	
	// "Caché info" tab:
	elseif ( $get(YSEITE) = 4 ) {
		write "<br><br>"
		write "<pre><blockquote><blockquote>"
		do Licencas^VARSESMonitor
		do GetCacheCount^VARSESLicenseUsageLog(1)
		write "</pre></blockquote></blockquote>"
 
		// Andre, 31/03/2009:
		WRITE "<BR><BR>",YCR
		write !,"Caché Licenses Currently Consumed: ",$System.License.LUConsumed(),"."
	 
		// Andre, 31/03/2009:
		WRITE "<BR><BR>",YCR
		// Andre, 23/04/2009:
		;do CacheLicensesPerUserId^VARSESLicenseUsageLog()
		do LogNow^VARSESCacheLicenseAllocLog()
	 
		;SR15550 Show Licence Info FIS; 21-Jun-2007 vvv
		if '$find($zversion," 4.") && ('$find($zversion," 3.")) {
			write "<br><br>",YCR
			write "Caché License Allocations: "
			write "<pre><blockquote><blockquote>"
			do $System.License.CKEY()
			write "<br><hr>",YCR
			do $System.License.ShowCounts()
			write "<br><hr>",YCR
			do $System.License.DumpLocalAll()
			write "<br>",YCR
			set strFile=##class(%Library.File).%New($ZUTIL(12,"")_"all.dmp")
			do strFile.Open("R")
			for  {
				set intLength=100,strLine=strFile.Read(.intLength)
				quit:strFile.AtEnd
			 	write strLine,YCR
			}
			write "</blockquote></blockquote></pre>"
		}
		;SR15550 Show Licence Info FIS; 21-Jun-2007 ^^^
 
	}
	elseif ( $get(YSEITE) = 5 ) {
		set SQL="select $$SQLGetFormatDate3^VARTRKSQL(date1) AS Day, max(CacheLicensesCurrentlyCon) AS MAX_LUConsumed, max(MaximumCacheLicensesConsu) AS MAX_LUMaxConsumed from varseslicenseusagelog where date1 >= "_(+$horolog-60)_" group by date1"
		set rset=##class(%Library.ResultSet).%New("%DynamicQuery:SQL")
		set OK=rset.Prepare(SQL)
		do rset.Close()          ; Close this execution
		do rset.%Close()         ; Close the rset object
		if ( OK '= 1 ) { write !,"SQL Error: ",OK }
		else { do ^WWWQUERY(,SQL,,1) // Important: ^WWWQUERY converts the SQL concatenation operator "|" into a blank. Use function "STRING" to concatenate.
		}
	}
	elseif ( $get(YSEITE) = 6 ) {
		do ListLoginsPerDay()
	}
	elseif ( $get(YSEITE) = 7 ) {
		do ListServerStarts^VARSESMonitor()
	}
	elseif ( $get(YSEITE) = 8 ) {
		do ListLogLags()
	}
	elseif ( $get(YSEITE) = 9 ) {
		do GetAvgSessionDuration()
	}
	elseif ( $get(YSEITE) = 10 ) {
	
		;SR16065 vvvvv Show Alphalinc Licence Info
		new arrSessions,idSession,intCount,dteLogin,tmeLogin,tmeActive,objSession
		kill ^CacheTempLicenseInfo
		// Andre, 27/03/2009:
		// Included by ref 'currentActiveAlphalincSessions' parameter to get count:
		//do GetActiveSessions^WWWUSER("^CacheTempLicenseInfo")  //do GetActiveSessions^WWWUSER(.arrSessions)
		new currentActiveAlphalincSessions
		do GetActiveSessions^WWWUSER("^CacheTempLicenseInfo",.currentActiveAlphalincSessions)  //do GetActiveSessions^WWWUSER(.arrSessions)
	 
		// Andre, 27/03/2009:
		WRITE "Count current active Alphalinc sessions: ", $get( currentActiveAlphalincSessions )
		WRITE "<BR><BR>",YCR
		
		write "<br><br>",YCR
		write "Alphalinc License Allocations: "
		write "<blockquote><blockquote><pre><font size=2>"
		set intCount = 0
		set idSession = "" for {
			set idSession = $order(^CacheTempLicenseInfo(idSession))
			quit:idSession=""
			set intCount = intCount + 1
			write intCount_")"
			write " Session Id = "_idSession
			
			if ($extract(idSession,1,2) = "WS") {  //Web Service Sessions
				set objSession = ##class(alWEB.WS.Session).%OpenId($extract(idSession,3,$length(idSession)))
				write ", Client = "_objSession.ClientIdent
				write ", User = "_objSession.UserIdent
				write ", Namespace = "_$zu(5)
				write ", Login = "_$$^WWWDATE(objSession.ConnectDate)_" "_$$^WWWTIME(objSession.ConnectTime)
				if (objSession.ConnectDate = +$h) {
					set tmeActive = $piece($h,",",2)-objSession.ConnectTime
				}
				elseif (objSession.ConnectDate = (+$h-1)) {
					set tmeActive = $piece($h,",",2) + (86400-objSession.ConnectTime)
				}
				write ", Time active = "_tmeActive_" ("_$$^WWWTIME(tmeActive)_")"
			}
			else {  //Alphalinc User Session
				write ", User = "_$piece($get(^WWWUSER(0,idSession,1)),Y,2)
				write ", IP = "_$listget(^CacheTempSession(idSession),4)
				write ", Namespace = "_$listget(^CacheTempSession(idSession),2)
				
				if ($data(^CacheTempSessionStart(+$h,idSession))) {  //Login from today
					set dteLogin = +$listget(^CacheTempSessionStart(+$h,idSession),1)
					set tmeLogin = $piece($listget(^CacheTempSessionStart(+$h,idSession),1),",",2)
				}
				elseif ($data(^CacheTempSessionStart((+$h-1),idSession))) {  //Login from yesterday
					set dteLogin = +$listget(^CacheTempSessionStart((+$h-1),idSession),1)
					set tmeLogin = $piece($listget(^CacheTempSessionStart((+$h-1),idSession),1),",",2)
				}
				if (dteLogin = +$h) {
					set tmeActive = $piece($h,",",2)-tmeLogin
				}
				elseif (dteLogin = (+$h-1)) {
					set tmeActive = $piece($h,",",2) + (86400-tmeLogin)
				}
				write ", Login = "_$$^WWWDATE(dteLogin)_" "_$$^WWWTIME(tmeLogin)
				write ", Time active = "_tmeActive_" ("_$$^WWWTIME(tmeActive)_")"
			}
			write YCR
		}
		kill ^CacheTempLicenseInfo
		write "</font></pre></blockquote></blockquote>"
		;^^^^^^
 
 
	}
		
	quit
	
OnBeforeFormConstruction()
	if ( $get( VORG(2,1) ) = "" ) {
		set VORG(2,1) = 48
	}
	if ( $get( VORG(2,2) ) = "" ) {
		set VORG(2,2) = 1
	}
	quit
 
DefaultNumberOfSamples()
	; TODO:
	;Q $P(^WWWDATEN(0,61527,14610689649,"VARSESLicenseUsageLog","M",1),"~",12)
	if ( $get( VORG(2,1) ) = "" ) {
		set VORG(2,1) = 48
	}
	quit VORG(2,1)
 
DefaultDurationOfSamples()
	if ( $get( VORG(2,2) ) = "" ) {
		set VORG(2,2) = 1
	}
	quit VORG(2,2)
 
DefaultSinceDate()
	if ( $get( VORG(2,3) ) = "" ) {
		set VORG(2,3) = ""
	}
	quit VORG(2,3)
 
DefaultUntilDate()
	if ( $get( VORG(2,4) ) = "" ) {
		set VORG(2,4) = +$horolog
	}
	quit VORG(2,4)
 
ButtonShowGraph()
	// Andre, 
	// It prints the button to show graph.
	// Routine run after manual field 16, an empty field.
	
	new formToOpen
	set formToOpen = "VARTCILicenseUsageLog"
	
	set YPARA = "ShowGraph"
	set YSEITE = 2 // tab id
	set YOPEN = 2 // parameter for WWWSAVE entry point
	;set YEND = 1
	
	write "<button type='button' name='VARSESLicenseUsageLogShowGraphButton' alt='Click here to show graph' onclick=document.frames.parent[document.frames.parent.length-1].location="""
	;parent.location="""
	;do RedirectForm^COMUtilForm(YFORM,YKEY,.YBACK,YPARA,YSEITE)
	;do createNewFormLink^COM.fwk.util.NMUtil(YFORM,YKEY,,,,YPARA)
	
	WRITE YAKTION_"EP=WWWSAVE&YFORM="_formToOpen_"&YOPEN=2"_"&YSEITE=2" ;_"&YEND=1" ;&YPARA="_YPARA_YKOMMA_
	;WRITE YAKTION_"EP=WWWFORM&YFORM="_formToOpen_"&YSEITE=2&YPARA="_YPARA_YKOMMA_
	DO ^WWWCGI
	write """;>Show Graph</button>"
 
	/*
	NEW YFORM,YKEY,YSEITE
	set YSEITE=2
	write "<BR>"
	WRITE "<A HREF="""_YAKTION_"EP=WWWFORM&YFORM="_formToOpen_"&YSEITE=2&YPARA=ShowGraph"
	DO ^WWWCGI
	WRITE """"
	WRITE " TITLE="""_$$^WWWTEXT(34001)_""""  ;WIEDERVORLAGE
	;WRITE " TARGET=TARGET2"
	WRITE ">"
	WRITE YCR,"<IMG SRC="""_YGIF_"ok.gif""  TITLE="""_$$^WWWTEXT(34001)_""" border=0>"
	WRITE "</A>"
	WRITE YCR
	*/
	quit
 
OnAfterSaveData()
	new numberOfSamples, durationOfSamples
	
	set numberOfSamples = $get( VORG(2,1) )
	set durationOfSamples = $get( VORG(2,2) )
	
	quit
 
RecordEntry()
	// Andre, 26/02/2009
	// Saves to ^VARSESLicenseUsageLog a number of information regarding
	// Caché and Alphalinc license usage.
	
	//$$$VAR <<-- it caused process hanging... why?
	
	new now, Y, objVARSESLicenseUsageLog, saveStatus
	
	set now = $horolog
	set date = +now
	set time = $piece(now,",",2)
	set Y = "~"
	
	new arrayTempSessions, currentActiveAlphalincSessions
	do GetActiveSessions^WWWUSER("arrayTempSessions",.currentActiveAlphalincSessions)  //do GetActiveSessions^WWWUSER(.arrSessions)
 
	//set objVARTCILicenseUsageLog = ""_
	set ^VARTCILicenseUsageLog(0,date,time,1) = ""_
		$System.License.LUConsumed()_Y_
		$System.License.LUAvailable()_Y_
		$System.License.LUMaxConsumed()_Y_
		$System.License.LUMinAvailable()_Y_
		$System.License.KeyLicenseUnits()_Y_
		$get( currentActiveAlphalincSessions )_Y_
		$$GetCacheCurrentCSPSessionsInGracePeriod()_Y_
		$$GetCacheCurrentCSPSessionsActive()
	
	//set saveStatus = $$Save^COMUtils("VARTCISLicenseUsageLog", date_","_time, objVARTCILicenseUsageLog, 1)
	
	write !,"Successfully created ^VARSESLicenseUsageLog(0,"_date_","_time_",1) - "_$zdatetime(date_","_time,4)
	//write !,"Save status for ^VARTCILicenseUsageLog(0,"_date_","_time_",1) - "_$zdatetime(date_","_time,4)_": "_saveStatus_"."
	
 	//quit saveStatus
	quit 1
 
GetMaxAlphalincLicensesConsumed()
	// Andre, 26/02/2009
	// Returns maximum Alphalinc Licenses Consumed.
	new maxAlphalincLicensesConsumed
	
	set maxAlphalincLicensesConsumed = ""
	
	&sql(
		DECLARE CURGetMaxAlphalincLicensesConsumed CURSOR FOR
		SELECT 
		 	MAX(AlphalincLicensesCurrentl)
		INTO
			:maxAlphalincLicensesConsumed
		 FROM 
		 	SQLUser.VARTCILicenseUsageLog
	)
	
	&sql(OPEN CURGetMaxAlphalincLicensesConsumed)
	&sql(FETCH CURGetMaxAlphalincLicensesConsumed)
	
	if (SQLCODE '= 0) {
		;TODO: do some error treatment...
	}
	
	&sql(CLOSE CURGetMaxAlphalincLicensesConsumed)
	quit maxAlphalincLicensesConsumed
 
GetMaxCacheLicensesConsumed()
	// Andre, 04/03/2009
	// Returns maximum Caché Licenses Consumed.
	new maxCacheLicensesConsumed
	
	set maxCacheLicensesConsumed = ""
	
	&sql(
		DECLARE CURGetMaxCacheLicensesConsumed CURSOR FOR
		SELECT 
		 	MAX(CacheLicensesCurrentlyCon)
		INTO
			:maxCacheLicensesConsumed
		 FROM 
		 	SQLUser.VARTCILicenseUsageLog
	)
	
	&sql(OPEN CURGetMaxCacheLicensesConsumed)
	&sql(FETCH CURGetMaxCacheLicensesConsumed)
	
	if (SQLCODE '= 0) {
		;TODO: do some error treatment...
	}
	
	&sql(CLOSE CURGetMaxCacheLicensesConsumed)
	quit maxCacheLicensesConsumed
 
GetMaxCacheLicensesConsumedByCache()
	// Andre, 04/03/2009
	// Returns maximum Caché Licenses Consumed, AS INFORMED BY CACHÉ.
	new maxCacheLicensesConsumed
	
	set maxCacheLicensesConsumed = ""
	
	&sql(
		DECLARE CURGet2MaxCacheLicensesConsumedByCache CURSOR FOR
		SELECT 
		 	MAX(MaximumCacheLicensesConsu)
		INTO
			:maxCacheLicensesConsumed
		 FROM 
		 	SQLUser.VARTCILicenseUsageLog
	)
	
	&sql(OPEN CURGet2MaxCacheLicensesConsumedByCache)
	&sql(FETCH CURGet2MaxCacheLicensesConsumedByCache)
	
	if (SQLCODE '= 0) {
		;TODO: do some error treatment...
	}
	
	&sql(CLOSE CURGet2MaxCacheLicensesConsumedByCache)
	quit maxCacheLicensesConsumed
 
ShowGraphAndData()
	// Andre, 03/03/2009
	// Shows graph of Alphalinc and Caché license usage for today and yesterday,
	// showing a point in the graph for each hour and maximum usage in the hour.
	
	new header, xValues, xAxisLabel, yAxisLabel, yValues, labelsArray, colorsArray, 
		numberOfSamples, durationOfSamples, sinceDate, untilDate, strLimitDateTime
	
	set numberOfSamples 	= $get( VORG(2,1) )
	set durationOfSamples 	= $get( VORG(2,2) )
	set sinceDate 			= $get( VORG(2,3) )
	set untilDate 			= $get( VORG(2,4) )
	
	write !,"<BR>","Number of Samples = ",numberOfSamples,"<BR>"
	write !,"<BR>","Duration of Samples = ",durationOfSamples,"<BR>"
	write !,"<BR>","Since = " write:(sinceDate '= "") $zdate( sinceDate, 12 ),", ",$zdate( sinceDate, 3 ) write "<BR>"
	write !,"<BR>","Until = " write:(untilDate '= "") $zdate( untilDate, 12 ),", ",$zdate( untilDate, 3 ) write "<BR>"
 
	if ( 	( ( numberOfSamples * durationOfSamples ) = 0 ) 
			|| ( ( sinceDate = "" ) && ( untilDate = "" ) ) 
			|| ( ( sinceDate '= "" ) && ( untilDate '= "" ) ) ) {
		write !,"<BR>","Invalid parameters.","<BR>"
		quit
	}
	
	// Andre, 03/06/2009:
	;set header = "License Usage Log in the last 2 days, per hour"
	set header = numberOfSamples_" samples, "_durationOfSamples_" hr(s) each, summing "_( numberOfSamples * durationOfSamples )_" hr(s)"
	
	if ( +sinceDate '= 0 ) {
		set strLimitDateTime = $zdate( sinceDate, 3 )_" 00:00:00"
		set header = header_", since "_strLimitDateTime
	}
	elseif ( +untilDate '= 0 ) {
		if ( +untilDate = +$horolog ) {
			set strLimitDateTime = $zdatetime( $horolog, 3 )
		}
		else {
			set strLimitDateTime = $zdate( untilDate, 3 )_" 23:59:59"
		}
		set header = header_", up to "_strLimitDateTime
	}
	write !,"<BR>","Limit date and time = ",strLimitDateTime,"<BR>"
 
	
	set xAxisLabel = "Time"
	set yAxisLabel = "Number of Licenses"
	
	set labelsArray(1) = "Alphalinc Licenses"
	set colorsArray(1) = "10" // 10 = Blue
	
	set labelsArray(2) = "Caché Licenses"
	set colorsArray(2) = "114" // 114 = Red
	
	// Querying "Alphalinc licenses currently consumed" to save in xValues
	// and yValues(1), as comma separated lists:
 
	new ALLicenses, CacheLicenses, LogId
	
	set LogId = "", xValues = ""
	
	// Andre, 03/06/2009: old WHERE clause:
	/*
		 WHERE
		 	Date1 = CURRENT_DATE OR Date1 = (CURRENT_DATE - 1)
	*/
 
	// CURRENT_TIMESTAMP(0) => CAST('2009-05-24 23:59:59' AS TIMESTAMP)
	// CURRENT_DATE => CAST('2009-05-24' AS DATE)
	
	/* 
	/	Andre, 10/08/2009:
	/	
	/	Original:
		 WHERE
		 	{fn TIMESTAMPDIFF(SQL_TSI_HOUR, CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP),CURRENT_TIMESTAMP(0) )} <= ( :numberOfSamples * :durationOfSamples )
		 GROUP BY
		 	Date1, {fn HOUR(Time1)}
		 ORDER BY
		 	Date1, {fn HOUR(Time1)}
	*/
 
 
	/* 
	/	Andre, 10/08/2009:
	&sql(
		DECLARE CURGraphALLicenses CURSOR FOR
		SELECT 
		 	DECODE(CURRENT_DATE - Date1,2,'b',1,"y",0,"")||{fn HOUR(Time1)}, 
		 	MAX(AlphalincLicensesCurrentl), 
		 	MAX(CacheLicensesCurrentlyCon)
		INTO
			:LogId, 
			:ALLicenses, 
			:CacheLicenses 
		 FROM 
		 	SQLUser.VARTCILicenseUsageLog
		 WHERE
		 	( :sinceDate IS NOT NULL AND {fn TIMESTAMPDIFF(SQL_TSI_HOUR, :sinceDate, CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP) )} <= ( :numberOfSamples * :durationOfSamples ) ) OR 
		 	( :untilDate IS NOT NULL AND {fn TIMESTAMPDIFF(SQL_TSI_HOUR, CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP), :untilDate )} <= ( :numberOfSamples * :durationOfSamples ) )
		 GROUP BY
		 	( {fn ABS({fn TIMESTAMPDIFF(SQL_TSI_HOUR, :strLimitDateTime, CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP) ) } ) } \ :durationOfSamples )
	)
	
	&sql(OPEN CURGraphALLicenses)
	&sql(FETCH CURGraphALLicenses)
	set count = 0
	while (SQLCODE = 0) {
		set count = count + 1
		set $piece( xValues, ",", count ) = $get(LogId)
		set $piece( yValues(1), ",", count ) = $get(ALLicenses)
		set $piece( yValues(2), ",", count ) = $get(CacheLicenses)
		&sql(FETCH CURGraphALLicenses)
	}
	
	&sql(CLOSE CURGraphALLicenses)
	
	// Debug:
	;w !,"<BR>",xValues
	;w !,"<BR>",yValues(1)
 
	do Graph^INForeItem(header,xValues,xAxisLabel,yAxisLabel,.yValues,.labelsArray,.colorsArray)
	
	*/
		/*
 
	write !,"<P>","Note: letter ""y"" prefixing an hour value stands for 'y'esterday, while letter ""b"" stands for 'b'efore yesterday ."
	
		set SQL = ""_
			"SELECT "_
			" 	DECODE(CURRENT_DATE - Date1,1,'Y',0,'')||DATEPART('hour',CAST(Time1 AS TIMESTAMP)) AS Hour, "_
			" 	MAX(AlphalincLicensesCurrentl) AS Alphalinc_Licenses, "_
			" 	MAX(CacheLicensesCurrentlyCon) AS Caché_Licenses"_
			" FROM "_
			" 	SQLUser.VARTCILicenseUsageLog "_
			" WHERE "_
			" 	Date1 = CURRENT_DATE OR Date1 = CAST( DATEADD('dd',-1,CURRENT_DATE) AS DATE) "_
			" GROUP BY "_
			" 	Date1, DATEPART('hour',CAST(Time1 AS TIMESTAMP)) "_
			" ORDER BY "_
			" 	Date1, DATEPART('hour',CAST(Time1 AS TIMESTAMP)) "
		*/
		// Andre, 10/08/2009:
		/*
		set SQL = ""_
			"SELECT "_
			" 	STRING(DECODE(CURRENT_DATE - Date1,2,'b',1,'y',0,''),{fn HOUR(Time1)}) AS Hour1, "_
			" 	MAX(AlphalincLicensesCurrentl) AS Alphalinc_Licenses, "_
			" 	MAX(CacheLicensesCurrentlyCon) AS Caché_Licenses "_
			" FROM "_
			" 	SQLUser.VARTCILicenseUsageLog "_
			" WHERE "_
			" 	{fn TIMESTAMPDIFF(SQL_TSI_HOUR, CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP),CURRENT_TIMESTAMP(0) )} <= 48 "_
			" GROUP BY "_
			" 	Date1, {fn HOUR(Time1)} "_
			" ORDER BY "_
			" 	Date1, {fn HOUR(Time1)} "
		*/
		set SQL = ""_
			"SELECT "_
			" 	CAST( ( {fn ABS({fn TIMESTAMPDIFF(SQL_TSI_HOUR, '"_strLimitDateTime_"', CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP) ) } ) } \ "_durationOfSamples_" ) AS CHAR(20)) AS X_Axis_Id, "_
			"	STRING( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS DateAndTime, "_
			" 	CAST( MAX(AlphalincLicensesCurrentl) AS CHAR(5) ) AS Alphalinc_Licenses, "_
			" 	CAST( MAX(CacheLicensesCurrentlyCon) AS CHAR(5) ) AS Caché_Licenses "_
			" FROM "_
			" 	SQLUser.VARTCILicenseUsageLog "_
			" WHERE "
		if ( +sinceDate '= 0 ) {
			set SQL = SQL_
			" 	{fn TIMESTAMPDIFF(SQL_TSI_HOUR, '"_strLimitDateTime_"', CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP) )} <= "_( numberOfSamples * durationOfSamples )_" AND "_
			" 	{fn TIMESTAMPDIFF(SQL_TSI_HOUR, '"_strLimitDateTime_"', CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP) )} >= 0"_
			" GROUP BY "_
			" 	( {fn ABS({fn TIMESTAMPDIFF(SQL_TSI_HOUR, '"_strLimitDateTime_"', CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP) ) } ) } \ "_durationOfSamples_" ) "_
			" ORDER BY "_
			" 	( {fn ABS({fn TIMESTAMPDIFF(SQL_TSI_HOUR, '"_strLimitDateTime_"', CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP) ) } ) } \ "_durationOfSamples_" ) ASC"
		}
		elseif ( +untilDate '= 0 ) {
			set SQL = SQL_
			" 	{fn TIMESTAMPDIFF(SQL_TSI_HOUR, CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP), '"_strLimitDateTime_"' )} <= "_( numberOfSamples * durationOfSamples )_" AND "_
			" 	{fn TIMESTAMPDIFF(SQL_TSI_HOUR, CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP), '"_strLimitDateTime_"' )} >= 0"_
			" GROUP BY "_
			" 	( {fn ABS({fn TIMESTAMPDIFF(SQL_TSI_HOUR, '"_strLimitDateTime_"', CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP) ) } ) } \ "_durationOfSamples_" ) "_
			" ORDER BY "_
			" 	( {fn ABS({fn TIMESTAMPDIFF(SQL_TSI_HOUR, '"_strLimitDateTime_"', CAST( string( TO_CHAR(Date1,'YYYY-MM-DD'), ' ', CAST(Time1 AS CHAR(8)) ) AS TIMESTAMP) ) } ) } \ "_durationOfSamples_" ) DESC"
		}
		else {
			// todo: 
			write !,"Error!"
			quit
		}
 
		/*
		/ todo:
			" ORDER BY "_
			" 	Date1, {fn HOUR(Time1)} "
		*/
 
 		;write !,"<BR>",SQL
 		
		set rset = ##class(%Library.ResultSet).%New("%DynamicQuery:SQL")
		set OK = rset.Prepare(SQL)
		
		// Andre, 10/08/2009:
		if ( $SYSTEM.Status.IsOK(OK) ) {
			do rset.Execute()
			set count = 0
			while rset.Next() {
				set count = count + 1
				set $piece( xValues, ",", count ) = rset.Data("X_Axis_Id")
				set $piece( yValues(1), ",", count ) = rset.Data("Alphalinc_Licenses")
				set $piece( yValues(2), ",", count ) = rset.Data("Caché_Licenses")
			}
			
			do Graph^INForeItem(header,xValues,xAxisLabel,yAxisLabel,.yValues,.labelsArray,.colorsArray)
			
			do rset.Close()          ; Close this execution
			do rset.%Close()         ; Close the rset object
	
			do ^WWWQUERY(,SQL,,1) // Important: ^WWWQUERY converts the SQL concatenation operator "|" into a blank. Use function "STRING" to concatenate.
		}
		else {
			write !,"<BR>","SQL Error: ",OK
		}
		
		do rset.Close()          ; Close this execution
		do rset.%Close()         ; Close the rset object
 
 
	quit
 
CacheLicensesPerUserId()
	new arraySumPerUserId, userId, connections, CSPCount, existingRecord, existingCount, 
		existingConnections, existingCSPCount, count, rec, existsAlphalincSession,
		countNoAlphalincSession, gracePeriodRemaining, countInGrace
 
	write "<br><br>",YCR
	write "Caché License Allocations <b>** per user ID **</b> (usually, IP address): "
	write "<pre><blockquote><blockquote>"
 
	// Alphalinc sessions per IP:
 
	new currentActiveAlphalincSessions, arrayAlphalincPerIP
	do GetActiveSessions^WWWUSER("^CacheTempLicenseInfo",.currentActiveAlphalincSessions) 
	set intCount = 0
	set idSession = "" 
	for {
		set idSession = $order(^CacheTempLicenseInfo(idSession))
		quit:idSession=""
		set intCount = intCount + 1
		
		if ($extract(idSession,1,2) = "WS") {  //Web Service Sessions
			continue
		}
		else {  //Alphalinc User Session
			set arrayAlphalincPerIP( $listget(^CacheTempSession(idSession),4) ) = idSession
		}
	}
	kill ^CacheTempLicenseInfo
 
	// Dumping Caché Licenses:
 
	do $System.License.DumpLocalAll()
 
	set strFile=##class(%Library.File).%New($ZUTIL(12,"")_"all.dmp")
	do strFile.Open("R")
 
	// Skipping first two lines of the dump file:
	set intLength = 100, strLine = strFile.Read(.intLength)
	set intLength = 100, strLine = strFile.Read(.intLength)
 
 	kill ^VARTCICacheLicenseAllocation
 
	set countNoAlphalincSession = 0, countInGrace = 0, countUndefined = 0
	for  {
		set intLength = 100, strLine = strFile.Read(.intLength)
		quit:strFile.AtEnd
	 	
	 	set licenseId = $piece( strLine, ")", 1 )
	 	
	 	set userId 		= $piece( $piece( strLine, "User ID = ", 2), ",", 1)
	 	
	 	if ( $get(userId) '= "" ) {
		 	set connections = $piece( $piece( strLine, "Connections = ", 2), ",", 1)
		 	set CSPCount 	= $piece( $piece( strLine, "CSP Count = ", 2), ",", 1)
		 	set timeActive = $piece( $piece( strLine, "Time active = ", 2), ",", 1)
		 	
		 	set ^VARTCICacheLicenseAllocation(0,licenseId,1) = userId_Y_connections_Y_CSPCount_Y_timeActive_Y_Y
		 	
		 	if ( $data( arraySumPerUserId(userId) ) ) {
			 	set existingRecord = $get( arraySumPerUserId(userId) )
			 	set existingCount 		= $piece( existingRecord, "~", 1)
			 	set existingConnections = $piece( existingRecord, "~", 2)
			 	set existingCSPCount 	= $piece( existingRecord, "~", 3)
			 	set existingTimeActive 	= $piece( existingRecord, "~", 4)
			 	set arraySumPerUserId(userId) = ( existingCount + 1 )_"~"_
			 									( existingConnections + connections )_"~"_
			 									( existingCSPCount + CSPCount )_"~"_
			 									existingTimeActive_";"_$fnumber(timeActive/60/60,",",2)
		 	}
		 	else {
			 	set arraySumPerUserId(userId) = 1_"~"_
			 									connections_"~"_
			 									CSPCount_"~"_
			 									$fnumber(timeActive/60/60,",",2)
		 	}
	 	}
	 	else {
 
	 		set userId 		= $piece( $piece( strLine, "Session ID = ", 2), ",", 1)
	 	
		 	if ( $get(userId) '= "" ) {
			 	set timeActive 	= $piece( $piece( strLine, "Time active = ", 2), ",", 1)
			 	set gracePeriodRemaining = $piece( $piece( strLine, "Grace period remaining = ", 2), ",", 1)
			 	
			 	set ^VARTCICacheLicenseAllocation(0,licenseId,1) = userId_Y_Y_Y_timeActive_Y_gracePeriodRemaining_Y
 
			 	set countInGrace = countInGrace + 1
			 	
			 	if ( $data( arraySumPerUserId(userId) ) ) {
				 	set existingRecord = $get( arraySumPerUserId(userId) )
				 	set existingCount 		= $piece( existingRecord, "~", 1)
				 	set existingTimeActive 	= $piece( existingRecord, "~", 4)
				 	set arraySumPerUserId(userId) = ( existingCount + 1 )_"~~~"_
			 										existingTimeActive_";"_$fnumber(timeActive/60/60,",",2)
			 	}
			 	else {
				 	set arraySumPerUserId(userId) = 1_"~~~"_
			 										$fnumber(timeActive/60/60,",",2)
			 	}
		 	}
	 	}
	 	if ( $get(userId) '= "" ) && $data( arraySumPerUserId(userId) ) {
		 	if ( $data(arrayAlphalincPerIP(userId)) ) {
			 	set existsAlphalincSession = "Yes"
			 	set ^VATCICacheLicenseAllocation(0,licenseId,1) = ^VARTCICacheLicenseAllocation(0,licenseId,1)_arrayAlphalincPerIP(userId)
		 	}
		 	else {
			 	set countNoAlphalincSession = countNoAlphalincSession + 1
			 	set existsAlphalincSession = "No"
		 	}
		 	set arraySumPerUserId(userId) = arraySumPerUserId(userId)_"~"_existsAlphalincSession
	 	}
	 	
	 	if ( $get(userId) = "" ) && ('$find( strLine, "free" ) ) {
		 	write !,"<BR>","Undef: ",strLine
		 	set countUndefined = countUndefined + 1
	 	}
		 	
	}
 
	do strFile.Close()
	
	// Writing:
	
	write !,"<BR>","Caché Licenses Currently Consumed: ",$System.License.LUConsumed()
	write !,"<BR>","Alphalinc sessions currently active: ", $get( currentActiveAlphalincSessions )
	write !,"<BR>","Cache user IDs without a corresponding Alphalinc session: ",countNoAlphalincSession
	write !,"<BR>","Cache user IDs in grace period: ",countInGrace
	write !,"<BR>","Cache user IDs undefined: ",countUndefined
	write !,"<BR>"
	
	set userId = "", count = 0
	for {
		set userId = $order(arraySumPerUserId(userId))
		quit:( userId = "" )
		set rec = $get(arraySumPerUserId(userId))
		continue:( $get( rec ) = "" )
		set count = count + 1
		write !,"<BR>",$j(count,3),") ",userId,": "_
				"Count = ",$p(rec,"~",1)," "_
				"Connections = ",$p(rec,"~",2)," "_
				"CSPCount = ",$p(rec,"~",3)," "_
				"Time active (hours) = ",$p(rec,"~",4)," "_
				"Alphalinc session exists? = ",$p(rec,"~",5)," "
	}
	
	write "</blockquote></blockquote></pre>"
	
	quit
 
GetCacheCount(pCount)
	;w !,"GetCacheCounts: YUSER = ",YUSER
	/*
	open 2:(YUSER):10
	use 2
	Do $System.License.ShowCounts()
	close 2
	zw ^SPOOL(YUSER)
	*/
	
	new fileName, strFile, i, result, previousIO
	
	set result = ""
	
	;set fileName = $zu(168)_"ShowCounts"_$get(YUSER)_".txt"
	set fileName = $zu(168)_"ShowCounts.txt"
	set strFile=##class(%Library.File).%New(fileName)
	//do strFile.Open("NW")
	open fileName:("NW"):10
	set previousIO=$IO
	use fileName
	do $ZUTIL(68,40,1) 
	
	Do $System.License.ShowCounts()
	
	use previousIO
	close fileName
 
	;do strFile.Close()
	
	do strFile.Open("R")
	;do strFile.Rewind()
	for i=1:1 {
		set intLength=100
		set strLine = strFile.Read(.intLength)
		quit:strFile.AtEnd
		;write !
		if (( i - 3 ) = $get(pCount) ) {
			;write "*** "
			set result = $number($extract(strLine,1,7))
		}
		;write i,") ",$number($extract(strLine,1,7)),",",$extract(strLine,9,$length(strLine))," - ",strLine
	}
	do strFile.Close()
	
	
	//do RunOutputToFile^VARSESMonitor("Do $System.License.ShowCounts()")
	
	quit result
	
GetCacheCurrentCSPSessionsInGracePeriod()
	quit $$GetCacheCount(8)
	
GetCacheCurrentCSPSessionsActive()
	quit $$GetCacheCount(6)
 
ListLoginsPerDay()
	new SQL, OK, rset
	
	write !,"<b>","Distinct users who logged in to Alphalinc per day","</b>"
	
	//		" 	TO_CHAR(WWWLOGIN.Date1,'MONTH DD, YYYY') AS Date, "_
 
	// Andre, 27/07/2009:
	// 		" 	WWWLOGIN.Date1 >= CAST('2009-02-01' AS Date) "_
	// 		" 	WWWLOGIN.Date1 >= CAST('2008-02-01' AS Date) "_
 
 
	set SQL = ""_
		"SELECT 	"_
		" 	TO_CHAR(WWWLOGIN.Date1,'DD/MM/YYYY') AS Date, "_
		"	COUNT(DISTINCT WWWLOGIN.Employee) AS Login_Users, "_
		"	LOG.MaxCacheLicensesConsumed AS CSP_Sessions"_
 
		" FROM 	"_
		" 	SQLUser.WWWLOGIN"_
		" 	"_
		" 	LEFT JOIN SQLUser.WWW013"_
		" 	ON WWWLOGIN.Employee = WWW013.UserName"_
 
		" 	LEFT JOIN "_
		"	( "_
		"		SELECT VARTCILicenseUsageLog.Date1 AS DateOfLog, "_
		"			Max(VARTCILicenseUsageLog.MaximumCacheLicensesConsu) AS MaxCacheLicensesConsumed "_
		"		FROM "_
		"			SQLUser.VARTCILicenseUsageLog VARTCILicenseUsageLog "_
		"		GROUP BY VARTCILicenseUsageLog.Date1 "_
		"	) LOG "_
		" 	ON WWWLOGIN.Date1 = LOG.DateOfLog "_
		" 	"_
		" WHERE 	"_
		" 	WWWLOGIN.Date1 >= CAST('2008-02-01' AS Date) "_
		" 	AND WWWLOGIN.Date1 <= (CURRENT_DATE - 1) "_
		" 	AND WWW013.UserName IS NOT NULL"_
		" "_
		" GROUP BY Date1	"
 
	set rset=##class(%Library.ResultSet).%New("%DynamicQuery:SQL")
	set OK=rset.Prepare(SQL)
	do rset.Close()          ; Close this execution
	do rset.%Close()         ; Close the rset object
	if ( OK '= 1 ) { 
		write !,"SQL Error: ",OK }
	else { 
		do ^WWWQUERY(,SQL,,1) // Important: ^WWWQUERY converts the SQL concatenation operator "|" into a blank. Use function "STRING" to concatenate.
	}
 
	quit
 
ListCacheStarts()
	w "find ""*** Recovery started at"" C:\CacheSys\Mgr\cconsole.log"
	quit
 
TaskCreation()
	// Andre, 07/07/2009
	// Defines a system task, to run every minute, starting today, to create ^VARTCILicenseUsageLog.
 	new task
 	 
	set task = ##class(%SYSTEM.Task).%New()
	set task.Name = "VARTCILicenseLog"
	set task.Description = "Creates license log."
	set task.ExecuteCode = "do RecordEntry^VARSESLicenseUsageLog()"
	set task.NameSpace = "TCI_ME"
	set task.IsBatch = 0
	set task.DailyFrequency = 1 ; 1 - SEVERAL - Run Several times in a day
	set task.DailyFrequencyTime = 0 ; 0 - Run every x minutes
	set task.DailyIncrement = 1 ; # of minutes between runs 
	set task.ContinueAfterError = 1
	set task.StartDate = +$horolog // starting today
	// Logging is managed by system task:
	set task.OpenOutputFile = 1 
	set task.OutputDirectory = $zu(168) // Current working directory
	set task.OutputFilename = "VARTCILicenseLog.log"
 
	do task.%Save()
 
	quit
 
TaskDeletion()
	do DeletarTarefa^VARSESBackup("VARTCILicenseLog")
	quit
 
GetPreviousDT(pDate,pTime)
	// Andre, 09/07/2009
	// Returns the date and time in ODBC format (YYYY-MM-DD HH:MM:SS) of the log 
	// immediatelly before the one corresponding to the parameter date and time. 
	$$$VAR
	new previousDate, previousTime, previousDT
	
	if ( ( $get(pDate) = "" ) || ( $get(pTime) = "" ) ) {
		quit ""
	}
	
	set previousTime = $order(^VARTCILicenseUsageLog(0,pDate,pTime),-1)
	
	if ( $get( previousTime ) '= "" ) {
		set previousDT = $zdatetime( pDate_","_previousTime, 3 )
	}
	else {
		set previousDate = $order(^VARTCILicenseUsageLog(0,pDate),-1)
		if ( $get( previousDate ) = "" ) {
			quit ""
		}
		set previousTime = $order(^VARTCILicenseUsageLog(0,previousDate,""),-1)
		if ( $get( previousTime ) = "" ) {
			quit ""
		}
		set previousDT = $zdatetime( previousDate_","_previousTime, 3 )
	}
	quit $get(previousDT)
 
ListLogLags()
	new SQL, rset, OK
	
	write !,"<BR>Largest lags in license log:"
	
	set SQL = ""_
		" SELECT "_
		"  CAST($$GetPreviousDT^VARSESILicenseUsageLog(A.Date1,A.Time1) AS CHAR(19)) AS PreviousDT,"_
		"  CAST(STRING(TO_CHAR(A.Date1,'YYYY-MM-DD'),' ',CAST(A.Time1 AS CHAR(8)) ) AS TIMESTAMP) AS CurrentDT, "_
		"  CAST({fn TIMESTAMPDIFF(SQL_TSI_MINUTE, CAST($$GetPreviousDT^VARSESLicenseUsageLog(A.Date1,A.Time1) AS TIMESTAMP), CAST(STRING(TO_CHAR(A.Date1,'YYYY-MM-DD'),' ',CAST(A.Time1 AS CHAR(8)) ) AS TIMESTAMP) ) } /60/24 AS CHAR(10)) AS DiffInDays,"_
		"  CAST({fn TIMESTAMPDIFF(SQL_TSI_MINUTE, CAST($$GetPreviousDT^VARSESLicenseUsageLog(A.Date1,A.Time1) AS TIMESTAMP), CAST(STRING(TO_CHAR(A.Date1,'YYYY-MM-DD'),' ',CAST(A.Time1 AS CHAR(8)) ) AS TIMESTAMP) ) } /60    AS CHAR(10)) AS DiffInHours,"_
		"  CAST({fn TIMESTAMPDIFF(SQL_TSI_MINUTE, CAST($$GetPreviousDT^VARSESLicenseUsageLog(A.Date1,A.Time1) AS TIMESTAMP), CAST(STRING(TO_CHAR(A.Date1,'YYYY-MM-DD'),' ',CAST(A.Time1 AS CHAR(8)) ) AS TIMESTAMP) ) }        AS CHAR(10)) AS DiffInMins"_
		" FROM "_
		"  VARTCILicenseUsageLog A "_
		" WHERE"_
		"  {fn TIMESTAMPDIFF(SQL_TSI_MINUTE, CAST($$GetPreviousDT^VARSESLicenseUsageLog(A.Date1,A.Time1) AS TIMESTAMP), CAST(STRING(TO_CHAR(A.Date1,'YYYY-MM-DD'),' ',CAST(A.Time1 AS CHAR(8)) ) AS TIMESTAMP) ) } > 30"_
		"  OR $$GetPreviousDT^VARSESLicenseUsageLog(A.Date1,A.Time1) IS NULL"_
		" ORDER BY 3 DESC "
	set rset=##class(%Library.ResultSet).%New("%DynamicQuery:SQL")
	set OK=rset.Prepare(SQL)
	do rset.Close()          ; Close this execution
	do rset.%Close()         ; Close the rset object
	if ( OK '= 1 ) { write !,"SQL Error: ",OK }
	else { do ^WWWQUERY(,SQL,,1) // Important: ^WWWQUERY converts the SQL concatenation operator "|" into a blank. Use function "STRING" to concatenate.
	}
	quit
 
GetCSPSessionTimeOutInMins()
	quit %session.AppTimeout/60
	
DumpLicenses()
	// Andre, 26/08/2009
	// Dumps licenses and rename dump file
	new path, file, result, cmd
	
	set path = $zu(168) // Returns location of current working directory
	
	do $System.License.DumpLocalAll()
	
	set file = "License Dump "_$translate( $zdatetime( $horolog,3 ), ":", "-" )_".txt"
	
	set cmd = "ren """_path_"all.dmp"" """]]><![CDATA[_file_""""
	
	set result = $zf(-1, cmd)
	
	if ( $get( result ) = 0 ) {
		write !,"File """_path_"all.dmp"" successfully renamed to """_file_"""."
	}
	else {
		write !,"Error """_$get( result )_""" when trying to rename file """_path_"all.dmp"" to """_file_"""."
		write !,"Command: ",cmd
	}
	
	if ( $piece( $horolog, ",", 2 ) >= ( 19 * 60 * 60 ) ) {
		set result = $$CompressAndDeleteLicenseDumpFiles( +$horolog )
		write !,"Result of $$CompressAndDeleteLicenseDumpFiles( +$horolog ): "_$get(result)
	}
 
	quit
 
DumpLicensesTaskCreation()
	// Andre, 26/08/2009
	// Defines a system task, to run every hour, from 8am to 7pm, to dump Caché licenses.
 	new task
 	 
	set task = ##class(%SYSTEM.Task).%New()
	set task.Name = "VARTCIDumpLicenses"
	set task.Description = "Dump Caché licenses."
	set task.ExecuteCode = "do DumpLicenses^VARSESLicenseUsageLog()"
	set task.NameSpace = "TCI_ME"
	set task.IsBatch = 0
	set task.DailyFrequency = 1 ; 1 - SEVERAL - Run Several times in a day
	set task.DailyFrequencyTime = 1 ; 1 - Run hourly
	set task.DailyIncrement = 1 ; # of hours (if property DailyFrequencyTime = 1) between runs
 
	set task.DailyStartTime = (8*60*60) ;Start at 8:00 am
	set task.DailyEndTime = (19*60*60) ;Until 7:00 pm
 
	;set task.ContinueAfterError = 1  ;Karine 20/01/2010: Não esxiste mais esta propriedade
	set task.StartDate = +$horolog + 1 // starting tomorrow
	// Logging is managed by system task:
	set task.OpenOutputFile = 1 
	set task.OutputDirectory = $zu(168) // Current working directory
	set task.OutputFilename = "VARTCIDumpLicenses.log"
 
	do task.%Save()
 
	quit
 
DumpLicensesTaskDeletion()
	do DeletarTarefa^VARSESBackup("VARTCIDumpLicenses")
	quit
 
 
CompressAndDeleteLicenseDumpFiles(pDate)
	new result, compressTool, path, status, cmdResult
	
	set result = 0
	
	if ( $get( pDate ) = "" ) {
		write !,"Error: missing parameter pDate."
		quit result
	}
	
	set path = $zu(168)
	
	set compressTool = ##class(VAR.infra.CompressTool).New()
	
	if ( $get( compressTool ) '= "" ) {
	
		set status = compressTool.add( path_"License Dump "_$zdate( pDate, 3 )_".zip", "License Dump "_$zdate( pDate, 3 )_"*.txt")
	
		if ( $$$ISOK( status ) ) {
			
			set cmdResult = $zf(-1,"del ""License Dump "_$zdate( pDate, 3 )_"*.txt""")
			
			// If deletion succeeded:
			if ( cmdResult = 0 ) {
				set result = 1
			}
		}
	}
	else {
		write !,"No instance for VAR.infra.CompressTool."
	}
	
	quit result
 
GetAvgSessionDuration(pDate)
 
	new SQL, OK, rset, DurationLimitInMinutes
	
	write !,"<b>","Closed sessions and their durations","</b>"
	
	// todo: remove:
	set pDate = $h-1
	
	if ( +pDate = 0 ) {
		write !,"<b>","Error: missing 'date' parameter.","</b>"
		quit
	}
	
	set DurationLimitInMinutes = 240 // 240 mins = 4 hours
	
	for pDate = ($horolog - 30):1:$horolog {
	
	;/*
	set SQL = ""_
		"SELECT "_
		"	'"_$zdate( +pDate, 3 )_"' AS Date1, "_
		"	COUNT(*) AS Number_Of_Sessions, "_
		"	AVG( SessionDurationInMins ) AS Avg_Session_Duration_In_Mins, "_
		"	MAX( SessionDurationInMins ) AS Max_Session_Duration_In_Mins, "_
		"	MIN( SessionDurationInMins ) AS Min_Session_Duration_In_Mins, "_
		" 	{fn SQRT(  "_
		" 			(  "_
		" 				SUM( {fn POWER( SessionDurationInMins, 2 ) } ) -  "_
		" 				( {fn POWER( SUM( SessionDurationInMins ), 2 ) } / COUNT(*) )  "_
		" 			)  "_
		" 			/ ( COUNT(*) - 1 )  "_
		" 		)} AS Std_Dev_Session_Duration_In_Mins, "_
		"	SUM( Duration_Greater_Than_Limit ) AS Count_Greater_Than_Limit "_
		""_
		" FROM "_
		" ( "_
		"SELECT 	"_
		" 	WWWUSER.UserNumber AS SessionId, "_
		" 	CAST( string( TO_CHAR( WWWUSER.Date1, 'YYYY-MM-DD' ), ' ', CAST( WWWUSER.Time1 AS CHAR(8) ) ) AS TIMESTAMP ) AS SessionStart, "_
		" 	CAST( $$GetSessionEnd^VARSESLicenseUsageLog( WWWUSER.UserNumber ) AS TIMESTAMP ) as SessionEnd, "_
		" 	{fn TIMESTAMPDIFF( "_
		"		SQL_TSI_SECOND, "_
		"		CAST( string( TO_CHAR( WWWUSER.Date1, 'YYYY-MM-DD' ), ' ', CAST( WWWUSER.Time1 AS CHAR(8) ) ) AS TIMESTAMP ), "_
		"		CAST( $$GetSessionEnd^VARSESLicenseUsageLog( WWWUSER.UserNumber ) AS TIMESTAMP ) "_
		"	) } / 60 AS SessionDurationInMins, "_
		"	CASE "_
		"		WHEN ( {fn TIMESTAMPDIFF( "_
 		"					SQL_TSI_SECOND, "_
 		"					CAST( string( TO_CHAR( WWWUSER.Date1, 'YYYY-MM-DD' ), ' ', CAST( WWWUSER.Time1 AS CHAR(8) ) ) AS TIMESTAMP ), "_
 		"					CAST( $$GetSessionEnd^VARSESLicenseUsageLog( WWWUSER.UserNumber ) AS TIMESTAMP ) "_
 		"					) } / 60 ) > "_DurationLimitInMinutes_" THEN 1 "_
		"		ELSE 0 "_
		"	END AS Duration_Greater_Than_Limit "_
		" 	"_
		" FROM 	"_
		" 	SQLUser.WWWUSER"_
		" 	"_
		" WHERE 	"_
		" 	WWWUSER.Date1 = CAST('"_$zdate( +pDate, 3 )_"' AS Date) "_
		" 	AND $$GetSessionEnd^VARSESLicenseUsageLog( WWWUSER.UserNumber ) IS NOT NULL "_
		" ) "
	;*/
 
	/*
	set SQL = ""_
		"SELECT "_
		"	WWWLOGIN.Date1, "_
		"	AVG( Sessions.SessionDurationInMins ) AS Avg_Session_Duration_In_Mins, "_
		"	MAX( Sessions.SessionDurationInMins ) AS Max_Session_Duration_In_Mins, "_
		"	MIN( Sessions.SessionDurationInMins ) AS Min_Session_Duration_In_Mins "_
		" FROM "_
		"	SQLUser.WWWLOGIN LEFT JOIN "_
			" ( "_
			"SELECT 	"_
			"	WWWUSER.Date1, "_
			" 	WWWUSER.UserNumber AS SessionId, "_
			" 	CAST( string( TO_CHAR( WWWUSER.Date1, 'YYYY-MM-DD' ), ' ', CAST( WWWUSER.Time1 AS CHAR(8) ) ) AS TIMESTAMP ) AS SessionStart, "_
			" 	CAST( $$GetSessionEnd^VARSESLicenseUsageLog( WWWUSER.UserNumber ) AS TIMESTAMP ) as SessionEnd, "_
			" 	{fn TIMESTAMPDIFF( "_
			"		SQL_TSI_SECOND, "_
			"		CAST( string( TO_CHAR( WWWUSER.Date1, 'YYYY-MM-DD' ), ' ', CAST( WWWUSER.Time1 AS CHAR(8) ) ) AS TIMESTAMP ), "_
			"		CAST( $$GetSessionEnd^VARSESLicenseUsageLog( WWWUSER.UserNumber ) AS TIMESTAMP ) "_
			"	) } / 60 AS SessionDurationInMins "_
			" 	"_
			" FROM 	"_
			" 	SQLUser.WWWUSER"_
			" 	"_
			" WHERE 	"_
			" 	$$GetSessionEnd^VARSESLicenseUsageLog( WWWUSER.UserNumber ) IS NOT NULL "_
		" 	) Sessions "_
		"	ON WWWLOGIN.Date1 = Sessions.Date1 "_
		" WHERE "_	
		"	WWWLOGIN.Date1 >= CAST( '2009-08-01' AS DATE ) "
	*/
 
	set rset=##class(%Library.ResultSet).%New("%DynamicQuery:SQL")
	set OK=rset.Prepare(SQL)
	do rset.Close()          ; Close this execution
	do rset.%Close()         ; Close the rset object
	if ( OK '= 1 ) { 
		write !,"SQL Error: ",OK }
	else { 
		do ^WWWQUERY(,SQL,,1) // Important: ^WWWQUERY converts the SQL concatenation operator "|" into a blank. Use function "STRING" to concatenate.
	}
 
	}
	quit
 
GetSessionEnd( pIdSession )
	// Andre, 01/09/2009
	// This routine returns the date and time the session ended as a string in format 'YYYY-MM-DD HH:MM:SS'.
	// Before closing an Alphalinc browser window, routine WWWEND is called, which in turn calls 
	// EndSession^WWWUSER that saves the session end time at:
	// 	set ^CacheTempSessionEnd(idSession) = $listbuild($horolog,$zhorolog) 
	new end
	
	set end = ""
	
	if ( ( $get( pIdSession ) '= "" ) && $data( ^CacheTempSessionEnd( pIdSession ) ) ) {
		set end = $zdatetime( $list( ^CacheTempSessionEnd( pIdSession ), 1), 3 )
	}
	
	quit end
]]></Routine>
</Export>