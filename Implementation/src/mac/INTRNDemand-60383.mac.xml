<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INTRNDemand" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INTRNDemand
	
#include COMSYS
#include INConst
	
CreateDemandAndSupply(pidTFR)
	;-------------------------------------------------------------------------------
	; For Transfer Order Lines that have been manually input (as opposed to loading
	; outstanding demands) create a demand and supply pair.
	; This is performed at the time of firming a Transfer Order.
	;
	; Params:
	; pidTFR - Transfer Order Id
	;
	; ByRefs: pidTour, pdteTour
	;
	; Returns: strStatus - $$$OK if successful, otherwise error message
	;
	; History:
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new idFirstKey,idDemand,idKey,idLine,idSecondKey,idSupply
	new objLine,objRecord,objTFR,strStatus
 
	quit:$$$NoKey(pidTFR) $$$NO
	
	set objTFR = $get(^INTFR(0,pidTFR,1))
	
	set strStatus = $$$OK
	
	set idLine = ""
	for {
		set idLine = $order(^INTFRLine(0,pidTFR,idLine))
		quit:idLine=""
	
		set objLine = $get(^INTFRLine(0,pidTFR,idLine,1))
		set (idDemand,idSupply)=""
		
		if $$$INTFRLineImportedDemand(objLine) {
			//If the Demand is a 'Loaded Demand' then do not create a new Demand
			set idKey       = $$$INTFRLineDemand(objLine)
			set idFirstKey  = $$$KEY1(idKey)
			set idSecondKey = $$$KEY2(idKey)
			set objRecord   = $get(^INDRPDEMAND(0,idFirstKey,idSecondKey,1))
			
		//	set $$$INDRPDEMANDDemandClosed(objRecord) = $$$YES
		//	set strStatus = $$$Save("INDRPDEMAND",idKey,objRecord,$$$YES)
			continue:objRecord'=""
		}
 
		if $$$ISOK(strStatus) {
			set strStatus = $$CreateDemandAndSupplyForLine(pidTFR,idLine,.idDemand,.idSupply)
	
			if $$$ISOK(strStatus) {
				set $$$INTFRLineDemand(objLine) = idDemand
				set $$$INTFRLineSupply(objLine) = idSupply
				set strStatus = $$$Save("INTFRLine",pidTFR_$$$COMMA_idLine,objLine,$$$YES)
			}
		}
		quit:$$$ISERR(strStatus)
	}
	quit strStatus
	
	
CreateDemandAndSupplyForLine(pidTFR,pidLine,&pidDemand,&pidSupply)
	;-------------------------------------------------------------------------------
	; Description of Function :
	;	Creates a INDRDEMAND record for a Transfer Line
	;			
	; Called By :
	;		
	; Inputs : 
	;	objReqLine
	;	pidSupply
	;
	; ByRef :
	;	YBED
	;
	; Returns : strStatus
	;
	; History :
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new idDem,idSendLocn,objDemand,objLine,objTFR,strStatus
	
	set strStatus  = $$$OK
	set objTFR     = $get(^INTFR(0,pidTFR,1))
	set idSendLocn = $$$INTFRSendingLocation(objTFR)
	
	set idDem      = $$^WWWNEXT("INDRPDEMAND")
	set pidDemand  = idSendLocn_","_idDem
	
	set objLine    = $get(^INTFRLine(0,pidTFR,pidLine,1))
 
	set objDemand = ""
	set $$$INDRPDEMANDRequestingLocation(objDemand) = $$$INTFRReceivingLocation(objTFR)
	//set $$$INDRPDEMANDOrderNo(objDemand)          = pidSupply
	set $$$INDRPDEMANDCreatedon(objDemand)          = +$horolog
	set $$$INDRPDEMANDItemNo(objDemand)             = $$$INTFRLineItem(objLine)
	set $$$INDRPDEMANDQuantity(objDemand)           = $$$INTFRLineBaseQuantity(objLine)
	set $$$INDRPDEMANDDueOnBefore(objDemand)        = ""
	set $$$INDRPDEMANDCreatedBy(objDemand)          = YBED
	set $$$INDRPDEMANDDemandType(objDemand)         = 3      // Transfer Order
	set $$$INDRPDEMANDPriority(objDemand)           = ""
	set $$$INDRPDEMANDStatus(objDemand)             = ""
	set $$$INDRPDEMANDReference(objDemand)          = pidTFR_","_pidLine
	set $$$INDRPDEMANDSupplyCreated(objDemand)      = $horolog
	set $$$INDRPDEMANDTransfer(objDemand)           = (pidTFR_$$$COMMA_pidLine)
	;et $$$INDRPDEMANDResponsiblePlanner(objDemand) = YBED
	
	set strStatus = $$$Save("INDRPDEMAND",pidDemand,objDemand,$$$YES)
	
	do ^INDRPSAVED(pidDemand,objDemand)
	set pidSupply = $get(VORG(205))
	
	quit strStatus
 
 
RemoveDemandForTrn(pidTFR)
	;-------------------------------------------------------------------------------
	;	Remove the Transfer Line Demand Record and Update the Supply Record
	;	
	; Called by : "Transfer Print Pick List"
	;
	; Params:	pidTfr
	;
	; ByRefs:
	;
	; Returns:	status
	;
	; History:
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new idDemand,idFirstKey,idKey,idLine,idSecondKey,idSupply
	new idxTFR,idxLine,objLine,objRecord,objTFR,strStatus
 
	set objTFR    = $get(^INTFR(0,pidTFR,1)) 
	set strStatus = $$$OK
	set idxTFR    = $$$Index(pidTFR)
 
	set strStatus = $$$OK
	
	set idLine=""
	for {
		set idLine=$order(^INTFRLine(0,pidTFR,idLine))
		quit:idLine=""
		
		set objLine = $get(^INTFRLine(0,pidTFR,idLine,1))
		
		set idKey = $$$INTFRLineDemand(objLine)
		continue:idKey=""
		
		set idFirstKey  = $$$KEY1(idKey)
		set idSecondKey = $$$KEY2(idKey)
		set objRecord = $get(^INDRPDEMAND(0,idFirstKey,idSecondKey,1))
		
		set $$$INDRPDEMANDDemandClosed(objRecord) = $$$YES
		set strStatus = $$$Save("INDRPDEMAND",idKey,objRecord,$$$YES)
 
 
		//Updated Shipped Date on Supply (INDRPSUPPLY)
		//ensures that INDRPSAVES does not RE-CREATE the INDRPDEMAND closed above
		if $$$ISOK(strStatus) {
			set idKey = $$$INTFRLineSupply(objLine)
			continue:idKey=""
	
			set idFirstKey  = $$$KEY1(idKey)
			set idSecondKey = $$$KEY2(idKey)
			
			if (idFirstKey'="") && (idSecondKey'="") {
				set objRecord = $get(^INDRPSUPPLY(0,idFirstKey,idSecondKey,1))	
				set $$$INDRPSUPPLYPickListPrintDate(objRecord) = +$horolog
				set strStatus = $$$Save("INDRPSUPPLY",idKey,objRecord,$$$YES)
			}
		}
		quit:$$$ISERR(strStatus)
	}	
	quit strStatus
	
	
UpdateShipmentSupply(pidTFR,pidTransitLocn,pidReceiving)
	;-------------------------------------------------------------------------------
	;Update the Transfer Supply Record
	;Called by "Transfer Sent/Ship"
	;
	; Params:	pidTFR
	;
	; ByRefs:
	;
	; Returns:	Status
	;
	; History:
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new fltSumQty,idDemand,idFirstKey,idKey,idLine,idPickLine,idSecondKey,idSupply,idxLine,idxTFR
	new objPickLine,objRecord,objTFR,objLine,strStatus
 
	set objTFR = $get(^INTFR(0,pidTFR,1)) 
	set strStatus = $$$OK
	set idxTFR    = $$$Index(pidTFR)
 
	set idLine=""
	for {
		set idLine=$order(^INTFRLine(0,pidTFR,idLine))
		quit:idLine=""
		
		set objLine = $get(^INTFRLine(0,pidTFR,idLine,1))
		set idxLine = $$$Index(idLine)
		
		set fltSumQty  = 0
		set idPickLine = ""
		for {
			set idPickLine = $order(^INTFRPickLines(0,1,idxTFR,idxLine,pidTFR,idPickLine))
			quit:idPickLine=""
 
			set objPickLine = $get(^INTFRPickLine(0,pidTFR,idPickLine,1))
		//	set idStockLocn = $$$INTFRPickLineSendingStockLocation(objPickLine)
		//	set dteDate     = $$$INTFRPickLineINWEDate(objPickLine)
			set fltSumQty   = fltSumQty + $$$INTFRPickLinePickedQuantity(objPickLine)
		}
 
		// Updated Shipped Date on Supply (INDRPSUPPLY)
		// ensures that INDRPSAVES does not RE-CREATE the INDRPDEMAND
		if $$$ISOK(strStatus) {
			set idKey = $$$INTFRLineSupply(objLine)
			continue:idKey=""
			
		//	If the owner of the INTRANSIT Location is the same as the REC Location, clear the SUPPLY Record
		//	as there will a double up otherwise.
			if pidTransitLocn = pidReceiving {
				set strStatus = $$$Kill("INDRPSUPPLY",idKey)
 
			} else {
				set idFirstKey  = $$$KEY1(idKey)
				set idSecondKey = $$$KEY2(idKey)
				set objRecord   = $get(^INDRPSUPPLY(0,idFirstKey,idSecondKey,1))
		
				set $$$INDRPSUPPLYDateShipped(objRecord) = +$horolog
				set $$$INDRPSUPPLYQuantity(objRecord)    = fltSumQty
				set strStatus = $$$Save("INDRPSUPPLY",idKey,objRecord,$$$YES)
			}
		}
		quit:$$$ISERR(strStatus)
	}
	quit strStatus
	
	
UpdateRecSupply(pidSupply,pfltTotQty,pfltTotRecQty)
	;-------------------------------------------------------------------------------
	; Update the Transfer Supply Record
	; 
	; Called by : ReceiveTransfer^INRECTFR
	;
	; Params:	pidDemand - keys of the demand
	;			pfltQty - qty to update
	;
	; ByRefs:
	;
	; Returns:	status
	;
	; History:
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new fltSupply,objDemand,objSupply,strStatus
 
	set strStatus = $$$OK
 
	if ($$$KEY2(pidSupply)'="") {
		set objSupply = $get(^INDRPSUPPLY(0,$$$KEY1(pidSupply),$$$KEY2(pidSupply),1))
		if (pfltTotRecQty >= pfltTotQty ) {
			set $$$INDRPSUPPLYClosed(objSupply) = $$$YES
		}  else {
			set $$$INDRPSUPPLYQuantity(objSupply) = (pfltTotQty-pfltTotRecQty)
		}
		set strStatus = $$$Save("INDRPSUPPLY",pidSupply,objSupply,$$$YES)
	}
	quit strStatus
	
	
ClearDemandForTrnLine(pidTFR,pidLine)
	;-------------------------------------------------------------------------------
	;Remove the Demand and Supply Record when the Transfer is deleted
	;Only for Lines not created by importing demands
	;
	; Params:	pidTfr
	;
	; ByRefs:
	;
	; Returns:	status
	;
	; History:
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new idKey,objLine,objTFR,strStatus
 
	set strStatus = $$$OK
	
	set objTFR  = $get(^INTFR(0,pidTFR,1)) 
	set objLine = $get(^INTFRLine(0,pidTFR,pidLine,1))
	set idKey = $$$INTFRLineDemand(objLine)
	// Added to unfirm only lines that have been firmed, loaded demands are pre-firmed outside this form
 
	if '$$$INTFRLineImportedDemand(objLine) {
		if idKey '= "" {
			set strStatus = $$$Kill("INDRPDEMAND",idKey)
		}
		
		if $$$ISOK(strStatus) {
			set idKey = $$$INTFRLineSupply(objLine)
	
			if idKey '= "" {
				set strStatus = $$$Kill("INDRPSUPPLY",idKey)
			}
		}
 
	} else {
		set strStatus = $$RemoveLoadedDemand^INTFROpenDemands(objLine)
	}
	quit strStatus
	
]]></Routine>
</Export>