<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INSOHQTY" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[INSOHQTY
	#include COMSYS
	
GetQtyAvailable(pidItem="",pidLocn="",pidStorage="",pblnExclBlocked=$$$NO,pidProgram="",pblnExclExpired=$$$NO,pblnDebug=$$$NO)
	;-------------------------------------------------------------------------------
	; 
	;
	; Inputs:
	;	pblnDebug:  Use this at a terminal prompt to examine SQL Code.
	;
	; Returns:
	;
	; History:
	; 10-Jul-2014	shobby		SMERECIFE-54: Problem with missing records if dPlannedMovement.State->StateId is not 3
	; 08-Aug-2012	shobby		SR18055: Corrected usage of Storage.
	; 06-Jul-2012	shobby		SR18055: Created (Rewrite of alSOH.piSOHQty.GetQtyAvailable
	;-------------------------------------------------------------------------------

	new fltQtyAvailable,SQL,sqlRS,sc,dteToday
	
	set fltQtyAvailable=""
	set dteToday= +$horolog
	
	set SQL=""
	;HEVA-1437
	;set SQL=SQL_" SELECT IFNULL(SUM(QtyAvailable),0,SUM(QtyAvailable)) AS fltQtyAvailable FROM|"
	;set SQL=SQL_"(SELECT QtyOnHand - SUM(IFNULL(QtyRequired,0,QtyRequired)) As QtyAvailable|"
	set SQL=SQL_" SELECT NVL(SUM(QtyAvailable),0) AS fltQtyAvailable FROM|"
	set SQL=SQL_"(SELECT QtyOnHand - SUM(NVL(QtyRequired,0)) As QtyAvailable|"
	set SQL=SQL_"    FROM alSOH.dBundleStock|"

	if pblnExclExpired {
		set SQL=SQL_"    LEFT JOIN alSOH.dBundleAttribute ON|"
		set SQL=SQL_"        dBundleAttribute.Bundle = dBundleStock.Bundle     AND |"
		set SQL=SQL_"        dBundleAttribute.AttributeName = 'Use By Date' |"
	}
	if pidProgram'="" {
		set SQL=SQL_"		LEFT JOIN alSOH.dBundleAttribute dBundleAttribute_Program ON |"
		set SQL=SQL_"			dBundleAttribute_Program.Bundle = dBundleStock.Bundle AND |"
		set SQL=SQL_"			dBundleAttribute_Program.AttributeName = 'Program' |"
	}
	;SMERECIFE-54 set SQL=SQL_"    LEFT JOIN alDRP.dPlannedMovement ON|"
	;SMERECIFE-54 set SQL=SQL_"        dPlannedMovement.Bundle = dBundleStock.Bundle     AND |"
	;SMERECIFE-54 set SQL=SQL_"        dPlannedMovement.Item = dBundleStock.Item         AND |"
	;SMERECIFE-54 set SQL=SQL_"        dPlannedMovement.FromStorage=dBundleStock.Storage|"
	
	set SQL=SQL_"	LEFT JOIN (SELECT Bundle AS ABundle, Item AS AItem ,FromStorage AS AFromStorage ,QtyRequired |"		;SMERECIFE-54
	set SQL=SQL_"		FROM alDRP.dPlannedMovement |"																	;SMERECIFE-54
	set SQL=SQL_"		WHERE dPlannedMovement.State->StateId = 3 OR dPlannedMovement.State IS NULL)|"					;SMERECIFE-54
	set SQL=SQL_"	ON ABundle = dBundleStock.Bundle |"																	;SMERECIFE-54
    set SQL=SQL_"      AND  AItem = dBundleStock.Item|"																	;SMERECIFE-54
    set SQL=SQL_"      AND  AFromStorage=dBundleStock.Storage|"															;SMERECIFE-54

	set SQL=SQL_"    WHERE |"
	;SMERECIFE-54 set SQL=SQL_"        (dPlannedMovement.State->StateId = 3 OR dPlannedMovement.State IS NULL) AND|"
	set SQL=SQL_"        dBundleStock.Item=:pidItem "
	
	if pblnExclBlocked   {
		set SQL=SQL_"        AND |         (Storage->StorageIsBlocked = 0 OR Storage->StorageIsBlocked IS NULL) "
		set SQL=SQL_"        AND |         (Storage->Physical->StorageIsBlocked = 0 OR Storage->Physical->StorageIsBlocked IS NULL)	"
	}
	if pidStorage '= ""  set SQL=SQL_"        AND |          Storage=:pidStorage "
	if pidLocn '="" 	 set SQL=SQL_"        AND |          Storage->Location=:pidLocn"
	if pidProgram'=""    set SQL=SQL_"        AND |          dBundleAttribute_Program.AttributeValue = :pidProgram "
	
	;HEVA-1462
	set SQL=SQL_"    AND (dBundleStock.QtyOnHand > 0) | "
	
	if pblnExclExpired {		
		set SQL=SQL_"        AND | "
		set SQL=SQL_"        (dBundleAttribute.AttributeValue IS NULL OR|"
		set SQL=SQL_"          (dBundleAttribute.AttributeValue IS NOT NULL AND|"
		set SQL=SQL_"           dBundleAttribute.AttributeValue >= :dteToday)|"
		set SQL=SQL_"	      )"
	}
	
	set SQL=SQL_"|    GROUP BY dBundleStock.ID|"
	set SQL=SQL_")"


	if pblnDebug write $replace(SQL,"|",$char(13,10)),!,!,!
	
	set SQL=$replace(SQL,"|","")					;Strip out debug formatting
	set sqlRS = ##class(%Library.ResultSet).%New()

    set sc=sqlRS.Prepare(SQL)
    if sc set sc=sqlRS.Execute(pidItem,pidLocn)
    if sc set sc=sqlRS.Next()
    if sc set fltQtyAvailable=sqlRS.Data("fltQtyAvailable")
 	
	quit fltQtyAvailable]]></Routine>
</Export>