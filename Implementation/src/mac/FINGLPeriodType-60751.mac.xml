<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLPeriodType" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLPeriodType
	
#include COMSYS
#include FINConst
	
OnBlur(pYPARA="")
	do GetStartYear(1)
	quit
 
GetStartYear(pblnRefresh=1)
    ;-------------------------------------------------------------------------------
    ; Populate the 'Start Year' radio buttons with the two options for the year the
    ; period commences in and the year the period concludes in. (SR10173)
    ;
    ; Returns:
    ;
    ; History:
    ; 02-Aug-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new strYear
	
	set strYear=$$^WWWYEAR($$$FINGLPeriodTypeStartDate(YFELD))
	kill ^COMTempList(YM,YUSER,"STARTYEAR")
	if strYear>0 {
		do Save^FINSYS("COMTempList",YUSER_YKOMMA_"STARTYEAR"_YKOMMA_strYear,strYear,1)
		do Save^FINSYS("COMTempList",YUSER_YKOMMA_"STARTYEAR"_YKOMMA_(strYear+1),strYear+1,1)
		if ($$$FINGLPeriodTypeStartYear(YFELD)'=strYear)&&($$$FINGLPeriodTypeStartYear(YFELD)'=(strYear+1)) {
			set $$$FINGLPeriodTypeStartYear(YFELD)=""
		}
		if pblnRefresh {
			do RedirectForm^COMUtils(YFORM,YKEY,YFORM_",",YPARA,YSEITE)
		}
	}
	quit
 
OnAfterPrimaryKey(pYKEY)
	;-----------------------------------------------------------------------------
	; Routine to Disable the Active checkbox if no periods are defined for this period type
	; 
	; History
	; 13-Jul-2006	JW		SR14836: Index pYKEY
	; 04-Aug-2003	shobby	Creation (TR005694)
	;------------------------------------------------------------------------------
	new objWWW122,intActive
	
	set intActive=5
	if pYKEY'="" {
		set intActive=$select(''$data(^FINGLPeriods(YM,1,$$$Index(pYKEY))):"",1:5)	//SR14836
	}
	set objWWW122=$get(^WWW122(0,"FINGLPeriodType",7,1))
	set $piece(objWWW122,Y,23)=intActive
	d Save^FINSYS("WWW122","FINGLPeriodType,7",objWWW122,1)
	do GetStartYear(0)
	quit
 
 
OnAfterDataFields(pYKEY)
	do ShowPeriods^FINGLPeriod(pYKEY,"")
	quit
	
	
OnBeforeButtonLine(pYKEY)
	;-------------------------------------------------------------------------------
	; Code to run before button line
	;
	; Params: pYKEY		: The YKEY value
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 09-Nov-2006	SteveS	SR14496: Created
	;-------------------------------------------------------------------------------
	do PopulateYearsList^FINGLPeriodTypeFilter(pYKEY)
 
	quit
 
 
OnBeforeDelete(pYKEY)
	;-------------------------------------------------------------------------------
	; Checks whether this item can be deleted.
	; 
	; History
	; 29-Mar-2004	shobby	Dont prevent delete if FINGLPeriod exists. (TR007416)
	; 09-Mar-2004	shobby	Creation
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus=$$CheckLinks^FINSYS(pYKEY,$lb("FINGLDistribution"),"FINGLPeriodType")
	if $$$ISOK(strStatus) {
		do ResetPeriodCache^FINGLPeriod()
	}
	quit strStatus		
 
 
OnAfterDelete(pYKEY)
    ;-------------------------------------------------------------------------------
    ; Code to run after the item has been deleted
    ;
    ; Returns:
    ;
    ; History:
    ; 23-Oct-2006	JW		SR15134: Look at kill status.
    ; 29-Mar-2004	Shobby	Created
    ;-------------------------------------------------------------------------------
    new strStatus
    
    if $get(pYKEY)'="" {
    	set strStatus = $$DeletePeriods(pYKEY)
    	if $$$ISERR(strStatus) {
			set Q = $$$QDontDelete		// SR15134
		}
    }
	quit
 
 
DeletePeriods(pYKEY)
    ;-------------------------------------------------------------------------------
    ; Removes any FINGLPeriod that reference this FINGLPeriodType.
    ;
    ; Returns:		status
    ;
    ; History:
    ; 23-Oct-2006	JW			SR15134: Look at kill status. Return status.
    ; 13-Jul-2006	JW			SR14836: Index pYKEY
    ; 29-Mar-2004	Shobby		Created
    ;-------------------------------------------------------------------------------
	new idFINGLPeriodType,idFINGLPeriod,idxType,strStatus
	
	set strStatus=$$$OK
	
	if $get(pYKEY)'="" {
		set idxType = $$$Index(pYKEY)
		set idFINGLPeriod=""
		for {
			set idFINGLPeriod=$order(^FINGLPeriods(YM,50,idxType,idFINGLPeriod))	//SR14836
			quit:idFINGLPeriod=""
			set strStatus = $$$Kill("FINGLPeriod",idFINGLPeriod)		// SR15134
			quit:$$$ISERR(strStatus)
		}
	}	
	quit strStatus
 
 
OnBeforeSave(pYKEY,pYFELD)
	;--------------------------------------------------------------------------
	; Routine to do checks prior to saving
	; 
	; History
	; 04-Jul-2005	RobertW	SR12527: Fixed Status usage for ReturnError
	; 07-Feb-2005	shobby	Passed YFELD as a parameter.
	; 08-Jul-2003	shobby	Creation (TR005557)
	;--------------------------------------------------------------------------
	new strStatus
	
	set strStatus=$$$OK
	
	set strStatus=$$CheckDefault(pYKEY,pYFELD)
	
	if $$$ISERR(strStatus) {
		set Q=$$$QDontSave
		do ReturnError^COMUtils(strStatus)
	} else {
		do ResetPeriodCache^FINGLPeriod()
	}
	quit
	
OnAfterSave(pYKEY)
	;--------------------------------------------------------------------------
	; Ensure Period Types without lines are set to inactive
	; 
	; History
	; 28-Oct-2004	shobby	Code Check
	; 26-Oct-2004	PO		Creation (SR10569)
	;--------------------------------------------------------------------------
	new strIndex,blnNotFound,objFINGLPeriod
	
	set strIndex=""
	set blnNotFound=1
	for {
		set strIndex=$order(^FINGLPeriod(YM,strIndex))
		quit:strIndex=""
		
		set objFINGLPeriod=$get(^FINGLPeriod(YM,strIndex,1))
		if $$$FINGLPeriodPeriodType(objFINGLPeriod)= pYKEY {
			set blnNotFound=0
			quit
		}
	}
	
	if blnNotFound && $$$FINGLPeriodTypeActive1($get(^FINGLPeriodType(YM,pYKEY,1))) {
		set $$$FINGLPeriodTypeActive1(^FINGLPeriodType(YM,pYKEY,1))=0
	}
	quit
	
 
CheckDefault(pYKEY,pYFELD)
	;--------------------------------------------------------------------------
	; Routine to check that there is only one default period type.
	; 
	; History
	; 07-Feb-2005	shobby	Passed YFELD as a parameter.
	; 08-Jul-2003	shobby	Handle the case where this is no default period.
	; 08-Jul-2003	shobby	Creation (TR005557)
	;--------------------------------------------------------------------------
	new strStatus,idDefault,blnDefault,objFINGLPeriodType
	
	set strStatus=$$$OK
	if ($get(pYFELD)'="") && ($get(pYKEY)'="") {
		set blnDefault=$$$FINGLPeriodTypeDefault1(pYFELD)
		if blnDefault {
			set idDefault=$$DefaultPeriod^FINGLPeriod()
			if (idDefault'=pYKEY) && (idDefault'="") {
				set objFINGLPeriodType=$get(^FINGLPeriodType(YM,idDefault,1))
				set blnDefault=$$$FINGLPeriodTypeDefault1(objFINGLPeriodType)
				if blnDefault {
					set strStatus=$listbuild("Fin00189",idDefault)
				} ; "There can not be more than one default Period Type. Current Default %1."
			}
		}
	}
	quit strStatus
	
StartUnPostedCount(pidYKEY)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 21-Sep-2007	GM		SR14507: Replace "," comma to YBACK to button "hback" works
	; 09-Feb-2006	SC		SR13157: Created
	;-------------------------------------------------------------------------------
 	new Log
 	
	do StartLog^COMLog("UnPosted Transaction Count",.Log)
	job UnPostedTransactionCount(pidYKEY,Log):(:1::)
	do RedirectForm^COMUtils("COMMsg",Log,YBACK,"","")
 
	quit
	
	
UnPostedTransactionCount(pidYKEY,pLog)
	;-------------------------------------------------------------------------------
	; Counts UnPosted Transactions, and creates a log. 
	; 
	; UnPosted Transactions checked for: GLJournal, GLBankRecon, GLIntBatch, APPayment, 
	; APAdjustment, APInvoiceMatch/Vouchers, ARBank, ARAdjustment and ARInvoices.
	;
	;
	;
	; Params: TransactionType key, log
	;
	; ByRefs:
	;
	; Returns: none
	;
	; History:
	; 31-Mar-2006	JW		SR14497: Loop through all periods.
	; 09-Feb-2006	SC		SR13157: Created
	;-------------------------------------------------------------------------------
	new strClassName,strStatus,objPeriod,intPeriod,intUnPostedTranCount,intJournalIndex,objJournal
	new intUnPostIndex,intDatePiece,intNullCheckPiece,intClassIndex,objGeneralSetup
	
	set strStatus=$$$OK
 	
	do AddMessage^COMLog(pLog,$$$Text("Fin00026"))  ;Running
 
	kill ^FINGLPeriodUnPost	
 
	set strClassName = "FINGLJournal"
	set intDatePiece = 10
	set intClassIndex = 60
	do CountTransactionType(strClassName,intDatePiece,intClassIndex)
	do AddMessage^COMLog(pLog,$$$Text("Search Complete: "_strClassName))
	
	set strClassName = "FINGLBankRecon"
	set intDatePiece = 4
	set intClassIndex = 60
	do CountTransactionType(strClassName,intDatePiece,intClassIndex)
	do AddMessage^COMLog(pLog,$$$Text("Search Complete: "_strClassName))
	
	set strClassName = "FININTBatch"
	set intDatePiece = 2
	set intClassIndex = 2
	do CountFININTBatchTrans(strClassName,intDatePiece,intClassIndex)
	do AddMessage^COMLog(pLog,$$$Text("Search Complete: "_strClassName))
 
	set strClassName = "FINAPPayment"
	set intDatePiece = 3
	set intClassIndex = 60
	do CountTransactionType(strClassName,intDatePiece,intClassIndex)
	do AddMessage^COMLog(pLog,$$$Text("Search Complete: "_strClassName))
 
	set strClassName = "FINAPADJ"
	set intDatePiece = 1
	set intClassIndex = 60
	do CountTransactionType(strClassName,intDatePiece,intClassIndex)
	do AddMessage^COMLog(pLog,$$$Text("Search Complete: "_strClassName))
 
	;AP Invoice Match + Voucher Entry - same class
	set strClassName = "FINAPInv"
	set intDatePiece = 52
	set intClassIndex = 60
	do CountTransactionType(strClassName,intDatePiece,intClassIndex)
	do AddMessage^COMLog(pLog,$$$Text("Search Complete: "_strClassName))
 
	set strClassName = "FINARBank"
	set intDatePiece = 3
	set intClassIndex = 60
	do CountTransactionType(strClassName,intDatePiece,intClassIndex)
	do AddMessage^COMLog(pLog,$$$Text("Search Complete: "_strClassName))
 
	set strClassName = "FINARADJ"
	set intDatePiece = 1
	set intClassIndex = 60
	do CountTransactionType(strClassName,intDatePiece,intClassIndex)
	do AddMessage^COMLog(pLog,$$$Text("Search Complete: "_strClassName))
 
	set strClassName = "FINARInv"
	set intDatePiece = 5
	set intClassIndex = 60
	do CountTransactionType(strClassName,intDatePiece,intClassIndex)
	do AddMessage^COMLog(pLog,$$$Text("Search Complete: "_strClassName))
	
 
	;populate PeriodOpenTransactions, loop thru PeriodUnPost
	set intPeriod=""
	for {
		//set intPeriod = $order(^FINGLPeriodUnPost(YM,intPeriod))
		set intPeriod = $order(^FINGLPeriod(YM,intPeriod))	//SR14497
		quit:intPeriod=""
		
		set intUnPostedTranCount=$order(^FINGLPeriodUnPost(YM,intPeriod,""),-1)
		set objPeriod = $get(^FINGLPeriod(YM,intPeriod,1))
		
		if +intUnPostedTranCount '= +$$$FINGLPeriodOpenTransactions(objPeriod) {	//SR14497
			set $$$FINGLPeriodOpenTransactions(objPeriod) = intUnPostedTranCount
			set strStatus = $$$Save("FINGLPeriod",intPeriod,objPeriod,1)
		}
		quit:$$$ISERR(strStatus)
	}
 
 	;write to Ledger Periods Last Run timestamp.
 	set objGeneralSetup = $get(^FINGeneralSetup(YM,YM,1))
 	set $$$FINGeneralSetupLedgerPeriodCloseLastRun(objGeneralSetup) = $horolog
 	set strStatus = $$$Save("FINGeneralSetup",YM,objGeneralSetup,1)
 
	;check save ok, write result to log
	if strStatus=$$$OK {
		do AddMessage^COMLog(pLog,$$$Text("Fin00027"))  ;Completed
	} else {
		do AddMessage^COMLog(pLog,$$$Text(strStatus))  ;Failed %1
	}		
	quit
 
 
CountFININTBatchTrans(pstrClassName, pintDatePiece, pintClassIndex)
	;-------------------------------------------------------------------------------
	; Counts UnPosted transactions for FININTBatch, like CountTransactionType(), except
	; FININTBatch class has different index structure. Use FININTBatch composite index
	; on strBatchName and PostedDate. Finds transactions where PostedDate = " ".
	;
	; Params: ClassName, Date Piece of passed Class, StatusIndex of passed Class.
	;
	; ByRefs:
	;
	; Returns: none
	;
	; History:
	; 16-Feb-2006	SC		SR13157: Created
	;-------------------------------------------------------------------------------
	new strCaratClassIndexName,intIndex,objRecord,intUnPostIndex,intUnPostedTranCount
	new strStatus,strCaratClassName,intStatus,dteWriteDate,intPeriodIndex,objPeriod,strBatchType
 	new lstPeriods,Item,intPeriodNumber
 	
	set strCaratClassName      = "^"_pstrClassName
	set strCaratClassIndexName = "^"_pstrClassName_"s"
	;Do this loop for all periods matching type
	
	set strBatchType =""
	for intStatus=0:1:1 {
		for {             ; loop through trans types.
		 	set strBatchType = $order(@strCaratClassIndexName@(YM,pintClassIndex,strBatchType))
		 	quit:strBatchType=""
		 	
			set intIndex =""
			for {
				set intIndex = $order(@strCaratClassIndexName@(YM,pintClassIndex,strBatchType," ",intIndex))
				quit:intIndex=""
				
				set objRecord    = $get(@strCaratClassName@(YM,intIndex,1))
				set dteWriteDate = $piece(objRecord,"~",pintDatePiece)
 
				;get all periods for date				
				set lstPeriods = ""
				set strStatus = $$GetPeriodsForDate^FINGLPeriod(dteWriteDate,.lstPeriods)
				
				;loop through periods, write to PeriodUnPost for each.
				for Item=1:1:$ListLength(lstPeriods) {
					set intPeriodNumber = $listget(lstPeriods,Item)
					set intUnPostIndex  = $order(^FINGLPeriodUnPost(YM,intPeriodNumber,""),-1) + 1
					set strStatus = $$$Save("FINGLPeriodUnPost",intPeriodNumber_","_intUnPostIndex,pstrClassName_"~"_intIndex)
				}
			}
		}
	}
 
	quit 
 
 
CountTransactionType(pstrClassName, pintDatePiece, pintClassIndex)
	;-------------------------------------------------------------------------------
	; Counts UnPosted transactions for a class, within dates of a given period.
	; 
	; For transactions with UnPosted, Pending or status, loops through all periods, 
	; checks if intDatePiece is within the Period start/end dates. If so, adds the 
	; transaction to ^FINGLPeriodUnPost.
	;
	; Params: ClassName, Date Piece of passed Class, StatusIndex of passed Class.
	;
	; ByRefs:
	;
	; Returns: none
	;
	; History:
	; 16-Feb-2006	SC		SR13157: Created
	;-------------------------------------------------------------------------------
	new strCaratClassIndexName, intIndex, objRecord, intUnPostIndex, intUnPostedTranCount
	new strStatus, strCaratClassName, intStatus, dteWriteDate, intPeriodIndex, objPeriod
	new lstPeriods,Item,intPeriodNumber
 
	set strCaratClassName = "^"_pstrClassName
	set strCaratClassIndexName = "^"_pstrClassName_"s"
	;Do this loop for all periods matching type
	
	set intIndex =""
	for intStatus=0:1:1 {
		for {                ; loop through trans types. 
			set intIndex = $order(@strCaratClassIndexName@(YM,pintClassIndex,intStatus,intIndex))
			quit:intIndex=""
			
			set objRecord    = $get(@strCaratClassName@(YM,intIndex,1))
			set dteWriteDate = $piece(objRecord,"~",pintDatePiece)
 
			;get all periods for date				
			set lstPeriods = ""
			set strStatus  = $$GetPeriodsForDate^FINGLPeriod(dteWriteDate,.lstPeriods)
			
			;loop through periods, write to PeriodUnPost for each.
			for Item=1:1:$ListLength(lstPeriods) {
				set intPeriodNumber = $listget(lstPeriods,Item)
				set intUnPostIndex  = $order(^FINGLPeriodUnPost(YM,intPeriodNumber,""),-1) + 1
				set strStatus = $$$Save("FINGLPeriodUnPost",intPeriodNumber_","_intUnPostIndex,pstrClassName_"~"_intIndex)
			}
		}
	}
	quit 
	
]]></Routine>
</Export>