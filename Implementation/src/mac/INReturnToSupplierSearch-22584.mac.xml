<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INReturnToSupplierSearch" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INReturnToSupplierSearch
	
#include COMSYS
#include INConst
#include FINConst
#include COMConst
#include WWWConst
#include INSYS
	
#define DELIM			$char(31)
#define LogR(%1,%2)		;
#define LogRx(%1)		;
#;define LogR(%1,%2)	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECSearch("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
Select()
	;-------------------------------------------------------------------------------
	; Search FINInvMatchCache
	;
	; Called By:  JavaScript OnClick Callback on Button 2 "Select Receipts"
	;             on forms INReturnToSupplier
	;
	; Returns: $$$OK
	;
	; History:
	; 18-Mar-2011	PPP		SR17684: Created 
	;-------------------------------------------------------------------------------
	new YFELD,blnHasInvoice,idSource,intType,objRec
	
	set YFELD = $$GetFormData^COMUtilForm()
	
	do Initialise^COMViewCustom("FINAPInvMatchCache","Selected^INReturnToSupplierSearch",$$$NO)
	
	do AddFilter^COMViewCustom("D"_$$$FldFINAPInvMatchCacheSupplier,"=",$$$INIssueSupplier(YFELD))  // Supplier	
	do AddFilter^COMViewCustom("D"_$$$FldFINAPInvMatchCacheCompleted,"=",$$$NO)     				// not completed	
	do AddFilter^COMViewCustom("D"_$$$FldFINAPInvMatchCacheLocation,"=",$$$INIssueFromLocn(YFELD)) 	// From current locn
	do AddFilter^COMViewCustom("D"_$$$FldFINAPInvMatchCacheReceipted,"=",$$$YES)                 	// receipted
	do AddFilter^COMViewCustom("D"_$$$FldFINAPInvMatchCachePreviouslyInvoicedValue,"=","")       	// no previous value
	
	do Start^COMViewCustom()
	quit $$$OK
	
	
Selected(pobjResultSet)
	;-------------------------------------------------------------------------------
	; Add selected Receipt lines to the grid
	;
	; Params:
	;
	; Returns:
	; 05-Jul-2011	GRF		SR17697: Pass FAIMC object as well since used by function
	; 18-Mar-2011	PPP		SR17684: Created 
	;-------------------------------------------------------------------------------
	new blnAdded,idInvMatch,idRowAdded,objIssueLine,objInvMatch,objRecLine,objReturn
	new SQLCODE,strStatus
	
	$$$LogR("Selected","")
	
	set objReturn = $$GetFormData^COMUtilForm()  
		
	$$$GRIDAddBatchStart
	
	set strStatus  = $$$OK
	set blnAdded   = $$$NO
	set idRowAdded = ""
	
	while pobjResultSet.Next() {
		set idInvMatch = $$GetID^COMViewCustom(pobjResultSet)
		
		$$$LogRx("S1:"_idInvMatch)
		if '$$LinkExists(idInvMatch) {  // Don't add more than once
			set objInvMatch = $get(^FINAPInvMatchCache(0,idInvMatch,1))
   			if $$$FINAPInvMatchCacheTotalQuantity(objInvMatch) {
	   			set objRecLine 	= $get(^INRECLine(0,$$$FINAPInvMatchCacheReceiptNumber(objInvMatch),$$$FINAPInvMatchCacheReceiptLine(objInvMatch),1))
	; SR17697	set strStatus 	= $$CreateIssueLine^INReturnToSupplier(idInvMatch,.objIssueLine,,$$$INRECLineLotNumber(objRecLine),$$$INRECLineExpirationDate(objRecLine))
				set strStatus 	= $$CreateIssueLine^INReturnToSupplier(idInvMatch,objInvMatch,.objIssueLine,,$$$INRECLineLotNumber(objRecLine),$$$INRECLineExpirationDate(objRecLine))
			
				if $$$ISOK(strStatus) {
					$$$GRIDAddLine(objIssueLine,"","INReturnToSupplierLine",$$$YES,"",$$$NO,$$$NO,$$$YES,.idRowAdded)
					set blnAdded = $$$YES
				}
   			}
		}
	}
	$$$GRIDAddBatchStop
	
	if blnAdded {
		do ShowItems^INReturnToSupplierTable($$$EnumWWWDYNTABLEGridLineFocus,"INReturnToSupplier"_$$$DELIM_"INReturnToSupplierLine"_$$$DELIM_"dStockBundle"_$$$DELIM_idRowAdded)
	}
	quit
	
	
LinkExists(pidKey="") private
	;-------------------------------------------------------------------------------
	; Does the line exist in the grid yet?
	; Based on the FINAPInvMatchCache ID existing on the INIssueLineReference field
	;
	; Returns:
	;
	; History:
	; 18-Mar-2011	PPP		SR17684: Created 
	;-------------------------------------------------------------------------------
	new arrGrid,idIssue,idLine,objInvLine
	
	$$$GRIDGetContents(.arrGrid)
	set idIssue = $order(arrGrid(""))
	
	set idLine = ""
	if idIssue'="" {
		for {
			set idLine = $order(arrGrid(idIssue,idLine))
			quit:(idLine="")
			
			quit:$$$INIssueLineReference(arrGrid(idIssue,idLine))=pidKey
		}
	}
	quit (idLine'="")
	
]]></Routine>
</Export>