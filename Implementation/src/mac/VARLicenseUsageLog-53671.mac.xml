<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARLicenseUsageLog" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARLicenseUsageLog
	// Andre, 26/02/2009
	//Sósthenes, 21/09/2010 Refactory
	quit
	
#Include COMSYS

RecordEntry()
	;Adicionar o parametro "pobjMonitor"
	
	do ^WWWVAR
	new now, Y, objVARSESLicenseUsageLog, strStatus, pidLicense, objLicense
	
	set now = $horolog
	set date = +now
	set time = $piece(now,",",2)
	set pidLicense = date_$$$COMMA_time
	
	set Y = "~"
	
	/* Trecho adicionado para contemplar a gravação dos dados de processador, memoria, hd e rede
	if (pobjMonitor'=""){
		set j = 0
		set processor = ""
		for
		{
			quit:(j = pobjMonitor.Processors.Count())
			set j = $increment(j)

			if (j>1){
				set $piece(processor,"-",1) = $piece(processor,"-",1)_"*"
				set $piece(processor,"-",2) = $piece(processor,"-",2)_"*"
				set $piece(processor,"-",3) = $piece(processor,"-",3)_"*"
			}
			set $piece(processor,"-",1) = 	$piece(processor,"-",1)_
						pobjMonitor.Processors.GetAt(j).Family

			set $piece(processor,"-",2) = 	$piece(processor,"-",2)_
						pobjMonitor.Processors.GetAt(j).Architecture

			set $piece(processor,"-",3) = 	$piece(processor,"-",3)_
						pobjMonitor.Processors.GetAt(j).Model

			set i = 0
			set core = ""
			for
			{
				quit:(i = pobjMonitor.Processors.GetAt(j).Cores.Count())
				set i = $increment(i)
				if (i>1){
					set $piece(core,"-",1) = $piece(core,"-",1)_"*"
					set $piece(core,"-",2) = $piece(core,"-",2)_"*"
					set $piece(core,"-",3) = $piece(core,"-",3)_"*"
				}
				set $piece(core,"-",1) = 	$piece(core,"-",1)_
							pobjMonitor.Processors.GetAt(j).Cores.GetAt(i).Used

				set $piece(core,"-",2) = 	$piece(core,"-",2)_
							pobjMonitor.Processors.GetAt(j).Cores.GetAt(i).ThreadsRuning

				set $piece(core,"-",3) = 	$piece(core,"-",3)_
							pobjMonitor.Processors.GetAt(j).Cores.GetAt(i).ProcessRuning

			}
			set cpu = processor_"#"_core
		}
		
		set memory =	pobjMonitor.Memory.RAMCapacity_"$"_
						pobjMonitor.Memory.RAMUsed_"$"_
						pobjMonitor.Memory.SwapCapacity_"$"_
						pobjMonitor.Memory.SwapUsed
		
		set i = 0
		set HD = ""
		for
		{
			quit:(i = pobjMonitor.HardDrivers.Count())
			set i = $increment(i)
			if (i>1){
				set $piece(HD,"-",1) = $piece(HD,"-",1)_"*"
				set $piece(HD,"-",2) = $piece(HD,"-",2)_"*"
				set $piece(HD,"-",3) = $piece(HD,"-",3)_"*"
			}
			set $piece(HD,"-",1) = 	$piece(HD,"-",1)_
						pobjMonitor.HardDrivers.GetAt(i).Id

			set $piece(HD,"-",2) = 	$piece(HD,"-",2)_
						pobjMonitor.HardDrivers.GetAt(i).Capacity

			set $piece(HD,"-",3) = 	$piece(HD,"-",3)_
						pobjMonitor.HardDrivers.GetAt(i).Used

		}

		set i = 0
		set Net = ""
		for
		{
			quit:(i = pobjMonitor.Networks.Count())
			set i = $increment(i)
			if (i>1){
				set $piece(Net,"-",1) = $piece(Net,"-",1)_"*"
				set $piece(Net,"-",2) = $piece(Net,"-",2)_"*"
				set $piece(Net,"-",3) = $piece(Net,"-",3)_"*"
				set $piece(Net,"-",4) = $piece(Net,"-",4)_"*"
				set $piece(Net,"-",5) = $piece(Net,"-",5)_"*"
			}
			set $piece(Net,"-",1) = 	$piece(Net,"-",1)_
						pobjMonitor.Networks.GetAt(i).Interface

			set $piece(Net,"-",2) = 	$piece(Net,"-",2)_
						pobjMonitor.Networks.GetAt(i).TCPConections

			set $piece(Net,"-",3) = 	$piece(Net,"-",3)_
						pobjMonitor.Networks.GetAt(i).UDPConections

			set $piece(Net,"-",4) = 	$piece(Net,"-",4)_
						pobjMonitor.Networks.GetAt(i).SentPackages

			set $piece(Net,"-",5) = 	$piece(Net,"-",5)_
						pobjMonitor.Networks.GetAt(i).ReceivedPackages

		}

		set ^zzGui = cpu_Y_memory_Y_HD_Y_Net
	}
	*/
	
	new arrayTempSessions, currentActiveAlphalincSessions
	do GetActiveSessions^WWWUSER("arrayTempSessions",.currentActiveAlphalincSessions)  //do GetActiveSessions^WWWUSER(.arrSessions)
	set objLicense = ""_
						$System.License.LUConsumed()_Y_
						$System.License.LUAvailable()_Y_
						$System.License.LUMaxConsumed()_Y_
						$System.License.LUMinAvailable()_Y_
						$System.License.KeyLicenseUnits()_Y_
						$get( currentActiveAlphalincSessions )_Y_
						$$GetCacheCurrentCSPSessionsInGracePeriod()_Y_
						$$GetCacheCurrentCSPSessionsActive()
	
	//set strStatus = $$$Save("VARLicenseUsageLog",pidLicense,objLicense,$$$YES)
	
	set ^VARLicenseUsageLog(0,date,time,1) = objLicense
	
	quit $$$OK
  
  	//quit strStatus
  	
GetCacheCount(pCount)

	new fileName, strFile, i, result, previousIO
	
	set result = ""
	
	set fileName = $zu(168)_"ShowCounts.txt"
	set strFile=##class(%Library.File).%New(fileName)
	open fileName:("NW"):10
	set previousIO=$IO
	use fileName
	do $ZUTIL(68,40,1) 
	
	Do $System.License.ShowCounts()
	
	use previousIO
	close fileName
 
	do strFile.Open("R")
	for i=1:1 {
		set intLength=100
		set strLine = strFile.Read(.intLength)
		quit:strFile.AtEnd
		if (( i - 3 ) = $get(pCount) ) {
			set result = $number($extract(strLine,1,7))
		}
	}
	do strFile.Close()
	
	quit result
	
GetCacheCurrentCSPSessionsInGracePeriod()
	quit $$GetCacheCount(8)
	
GetCacheCurrentCSPSessionsActive()
	quit $$GetCacheCount(6)
]]></Routine>
</Export>