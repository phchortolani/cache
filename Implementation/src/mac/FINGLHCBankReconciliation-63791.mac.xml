<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLHCBankReconciliation" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLHCBankReconciliation  ; GL Health Check for Bank Reconciliation
	#Include FINHC

	#define Check "^CacheTemp(YUSER,""BankReconciliation"")"

Check(Start="",End="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; Posted Bank Reconciliations must update Posted Transaction
    ;
    ; Returns:
    ;
    ; History:
    ; 29-Apr-2004   Shobby   	Created
    ;-------------------------------------------------------------------------------
	;
	new strStatus
	
	if $get(YUSER)="" do ^WWWVAR

	kill @$$$Check
	kill Result	

	do BankReconciliations()
	do Transactions()
	set strStatus=$$Compare(.Result)

	kill @$$$Check

	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}

	quit strStatus


BankReconciliations()
    ;-------------------------------------------------------------------------------
    ; Create a temporary list of posted Bank Reconcilitions
    ;
    ; Returns:
    ;
    ; History:
    ; 30-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idFINGLBankRecon,objFINGLBankRecon

	set idFINGLBankRecon=""
	for {
		set idFINGLBankRecon=$order(^FINGLBankRecon(YM,idFINGLBankRecon))
		quit:idFINGLBankRecon=""
		set objFINGLBankRecon=$get(^FINGLBankRecon(YM,idFINGLBankRecon,1))
		if $$$FINGLBankReconPosted(objFINGLBankRecon)'="" {
			set $piece(@$$$Check@(idFINGLBankRecon),Y,1)=1
		}
	}
	quit


Transactions()
    ;-------------------------------------------------------------------------------
    ; Create a temporary list of transactions which came from BankReconcilications
    ;
    ; Returns:
    ;
    ; History:
    ; 30-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idFINGLBankRecon,idFINGLTran,objFINGLTran,strSource

	set idFINGLTran=""
	for {
		set idFINGLTran=$order(^FINGLTrans(YM,50,"CI",idFINGLTran))
		quit:idFINGLTran=""
		set objFINGLTran=$get(^FINGLTran(YM,idFINGLTran,1))
		set strSource=$$$FINGLTranSource(objFINGLTran)
		if $piece(strSource,",",2)="FINGLBankRecon" {
			set idFINGLBankRecon=$piece(strSource,",",1)
			set $piece(@$$$Check@(idFINGLBankRecon),Y,2)=$piece($get(@$$$Check@(idFINGLBankRecon)),Y,2)_idFINGLTran_YKOMMA
		}
	}


Compare(Result)
    ;-------------------------------------------------------------------------------
    ; Compare the data and search for any discrepancies.
    ;
    ; Returns:
    ;
    ; History:
    ; 30-Apr-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idFINGLBankRecon,strStatus,lstDuplicateTransactions
	
	set strStatus=$$$OK
	
	set idFINGLBankRecon=""
	for {
		set idFINGLBankRecon=$order(@$$$Check@(idFINGLBankRecon))
		quit:idFINGLBankRecon=""
		if $piece($get(@$$$Check@(idFINGLBankRecon)),Y,1)="" {
			set Result("Hash",$$$ErrorNo(Result("Errors")))=$$$Text($lb("Fin00324",idFINGLBankRecon)) ;Bank Reconciliation '%1' is missing.
			set strStatus='$$$OK
		} elseif $piece($get(@$$$Check@(idFINGLBankRecon)),Y,2)="" {
			set Result("Hash",$$$ErrorNo(Result("Errors")))=$$$Text($lb("Fin00325",idFINGLBankRecon))  ;Transaction for Bank Reconciliation ´%1´ is missing.
			set strStatus='$$$OK
		} elseif $length($piece($get(@$$$Check@(idFINGLBankRecon)),Y,2),YKOMMA)>2 {  ; always has one trailing comma
			set Result("Hash",$$$ErrorNo(Result("Errors")))=$$$Text($lb("Fin00326",idFINGLBankRecon,@$$$Check@(idFINGLBankRecon,"Transaction")))  ;Multiple transactions for Bank Reconciliation ´%1´. Should be only one. %2
			set strStatus='$$$OK
		}
	}
	
	quit strStatus

]]></Routine>
</Export>