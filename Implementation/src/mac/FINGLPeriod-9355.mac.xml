<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLPeriod" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLPeriod
	
#include FINConst
#include COMSYS
	 
CreatePeriods(pidPeriodType) 
	;-------------------------------------------------------------------------------
	; create periods for a year for a period type, starting at the Startdate of the
	; period the periods are cached, so the cache is removed when new periods created
	; 
	; History
	; 13-Jul-2006	JW		SR14836: Index variable. Use it.
	; 04-Jul-2005	RobertW	SR12527: Fixed Status usage for ReturnError
	; 01-Jul-2005	SCR		SR12684: Corrected Status checking logic
	; 23-May-2005	RobertW	12270: Fixed a do and dot structure loop.
	; 						Removed Extra Key when saving a ^FINGLPeriod global. 
	; 						The period type is not a part of the key structure.
	; 						Get the error from CreatePeriod and check it always
	; 05-Nov-2004	Paul K	Removed reference to ^FINGLPeriod global (failed new
	; 						code check)
	; 02-Aug-2004	shobby	Use the User selected year for when the Periods are
	; 						created.  ie The Year the periods commence in or the
	; 						Year they conclude in.  (SR10173)
	; 31-Mar-2004	shobby	Corrected generation of dates when increment is not
	; 						a full day. (TR007415)
	; 31-Mar-2004	shobby	Prevented periods from attempting to use invalid dates
	; 						(ie 30-Feb). (TR007414)
	; 05-Jul-2004	SCR		Bug Fix
	; 07-Jul-2003	shobby	Variables
	; 03-Apr-2003	SCR 	Changed FINGLPeriod to Single Key
	; 06-Jan-2003	Paul K	Created
    ;-------------------------------------------------------------------------------
 	new objPeriodType,lngYear,idPeriod,intLoop,idxPeriodType
	new lngStartMonth,lngStartDay,lngLoop,lngNumPeriods,lngCurrentYear,lngDaysToAdd,lngDaysToAddForStart,lngDaysToAddForEnd
	new dtePeriodStart,dteStartDate,dtePeriodEnd,objPeriod
	new lngNumber,lngCurrentMonth,dteLastDate,Status,lngStartDateYear,idLastPeriod
	
	set Status=$$$OK
	set objPeriodType=$get(^FINGLPeriodType(0,pidPeriodType,1))
	set lngNumPeriods=$$$FINGLPeriodTypePeriodsPerYear(objPeriodType)
	if $$$FINGLPeriodTypePeriodGrouping(objPeriodType)=1 set lngNumPeriods=12 ; !2 Month
	
	do ResetPeriodCache()
	
	set idxPeriodType = $$$Index(pidPeriodType)		// SR14836
	
	set lngYear=$order(^FINGLPeriods(0,1,idxPeriodType,""),-1)	// SR14836
	if (lngYear'="")&&(Status=$$$OK) {
		;if periods exist for period type, generate periods for next year.
		set lngNumber	 =$order(^FINGLPeriods(0,1,idxPeriodType,lngYear,""),-1)	// SR14836
		set idPeriod	 =$order(^FINGLPeriods(0,1,idxPeriodType,lngYear,lngNumber,""))	// SR14836
		set objPeriod	 =$get(^FINGLPeriod(0,idPeriod,1))
		set dteStartDate =$$$FINGLPeriodEndDate(objPeriod)+1
 
		set lngYear=lngYear+1
	}
	
	if (lngYear="")&&(Status=$$$OK) {
		;if no periods exist, start creating periods from start date.
		set dteStartDate=$$$FINGLPeriodTypeStartDate(objPeriodType)
		if 'dteStartDate {
			set Status=$$$Text("Fin00272")  ;Start Date Required
		} else {
			;set lngYear=$p($zd(dteStartDate,3),"-",1)
			set lngStartDateYear=$$^WWWYEAR(dteStartDate)
			set lngYear=$$$FINGLPeriodTypeStartYear(objPeriodType)
			if (lngYear="")||((lngYear'=lngStartDateYear)&&(lngYear'=(lngStartDateYear+1))) set Status=$$$Text("Fin00339")  ;Start Year
		}
	}
	
	if ($$$FINGLPeriodTypePeriodGrouping(objPeriodType)=$$$EnumFINGLPERIODGROUPS445)&&(Status=$$$OK) {  ;4-4-5   - 4 weeks,4 weeks,5 weeks   repeats for each quarter of year
		for lngLoop=1:1:4 {
			quit:$$$ISERR(Status)
			set Status=$$CreatePeriod(pidPeriodType,dteStartDate+0,dteStartDate+27,(lngLoop-1)*3+1,lngYear)
			set:$$$ISOK(Status) Status=$$CreatePeriod(pidPeriodType,dteStartDate+28,dteStartDate+55,(lngLoop-1)*3+2,lngYear)
			set:$$$ISOK(Status) Status=$$CreatePeriod(pidPeriodType,dteStartDate+56,dteStartDate+90,(lngLoop-1)*3+3,lngYear)
			set dteStartDate=dteStartDate+91
		}
	} elseif ($$$FINGLPeriodTypePeriodGrouping(objPeriodType)=$$$EnumFINGLPERIODGROUPS454)&&(Status=$$$OK) {	;4-5-4  - 4 weeks,5 weeks,4 weeks   repeats for each quarter of year
		for lngLoop=1:1:4 {
			quit:$$$ISERR(Status)
			set Status=$$CreatePeriod(pidPeriodType,dteStartDate+0,dteStartDate+27,(lngLoop-1)*3+1,lngYear)
			set:$$$ISOK(Status) Status=$$CreatePeriod(pidPeriodType,dteStartDate+28,dteStartDate+62,(lngLoop-1)*3+2,lngYear)
			set:$$$ISOK(Status) Status=$$CreatePeriod(pidPeriodType,dteStartDate+63,dteStartDate+90,(lngLoop-1)*3+3,lngYear)
			set:$$$ISOK(Status) dteStartDate=dteStartDate+91
		}
	} elseif ($$$FINGLPeriodTypePeriodGrouping(objPeriodType)=$$$EnumFINGLPERIODGROUPS544)&&(Status=$$$OK) { ;5-4-4   - 5 weeks,4 weeks,4 weeks   repeats for each quarter of year
		for lngLoop=1:1:4 {
			quit:$$$ISERR(Status)
			set Status=$$CreatePeriod(pidPeriodType,dteStartDate+0,dteStartDate+34,(lngLoop-1)*3+1,lngYear)
			set:$$$ISOK(Status) Status=$$CreatePeriod(pidPeriodType,dteStartDate+35,dteStartDate+62,(lngLoop-1)*3+2,lngYear)
			set:$$$ISOK(Status) Status=$$CreatePeriod(pidPeriodType,dteStartDate+63,dteStartDate+90,(lngLoop-1)*3+3,lngYear)
			set dteStartDate=dteStartDate+91
		}
	} elseif (Status=$$$OK) {
		if 'lngNumPeriods set Status=$$$Text("Fin00273")  ;Number of Periods Required
		if (",1,2,3,4,6,12," [ (","_lngNumPeriods_","))&&(Status=$$$OK) {  ;if monthly separated
			set dtePeriodStart=$zdt(dteStartDate,3)  ;initialise start period
			set lngStartDay=$p(dtePeriodStart,"-",3)
			for lngLoop=1:1:lngNumPeriods {
				quit:$$$ISERR(Status)
				set lngCurrentMonth=$piece(dtePeriodStart,"-",2)  ;determine end date from start date
				set lngCurrentMonth=lngCurrentMonth+(12/lngNumPeriods)
				set lngCurrentYear=$piece(dtePeriodStart,"-",1)
				if lngCurrentMonth>12 {
					set lngCurrentMonth = lngCurrentMonth-12
					set lngCurrentYear  = lngCurrentYear+1
				}
				set dtePeriodEnd=$zdh(lngCurrentYear_"-"_lngCurrentMonth_"-01",3)
				if $$^WWWMONTHDAYS(dtePeriodEnd)<lngStartDay {
					set dtePeriodEnd = lngCurrentYear_"-"_lngCurrentMonth_"-"_$$^WWWMONTHDAYS(dtePeriodEnd)
				} else {					
					set dtePeriodEnd = lngCurrentYear_"-"_lngCurrentMonth_"-"_lngStartDay
				}
				set dtePeriodEnd   = $zdt($zdh(dtePeriodEnd,3)-1,3)
				set Status         = $$CreatePeriod(pidPeriodType,$zdh(dtePeriodStart,3),$zdh(dtePeriodEnd,3),lngLoop,lngYear)
				set dtePeriodStart = $zdt($zdh(dtePeriodEnd,3)+1,3)  ;make next start date from last end date
			}
		} elseif (",13,26,52," [ (","_lngNumPeriods_","))&&(Status=$$$OK) {  ;if weekly separated
			set dtePeriodStart=$zdt(dteStartDate,3)  ;initialise start period
			for lngLoop=1:1:lngNumPeriods {
				quit:$$$ISERR(Status)
				set lngDaysToAdd   = 52/lngNumPeriods*7-1
				set dtePeriodEnd   = $zdt($zdh(dtePeriodStart,3)+lngDaysToAdd,3)
				set Status         = $$CreatePeriod(pidPeriodType,$zdh(dtePeriodStart,3),$zdh(dtePeriodEnd,3),lngLoop,lngYear)
				set dtePeriodStart = $zdt($zdh(dtePeriodEnd,3)+1,3)  ;make next start date from last end date
			}
		} elseif (Status=$$$OK) {
			for lngLoop=1:1:lngNumPeriods {
				quit:$$$ISERR(Status)
				set lngDaysToAddForStart = (lngLoop-1)*365/lngNumPeriods
				set lngDaysToAddForEnd   = (lngLoop)*365/lngNumPeriods-1
				set dtePeriodStart       = dteStartDate+lngDaysToAddForStart
				set dtePeriodEnd         = dteStartDate+lngDaysToAddForEnd
				set Status = $$CreatePeriod(pidPeriodType,dtePeriodStart\1,dtePeriodEnd\1,lngLoop,lngYear)
			}
		}
	}
	
	; expand the size of the last period to fill up the rest of the year.
	if (Status=$$$OK) {
		set lngYear=$p($zd(dteStartDate,3),"-",1)
		set lngStartMonth=$p($zd(dteStartDate,3),"-",2)
		set lngStartDay=$p($zd(dteStartDate,3),"-",3)
	 
		set dteLastDate=$zdh(lngYear+1_"-"_lngStartMonth_"-"_lngStartDay,3)-1
		set idLastPeriod=$order(^FINGLPeriod(0,""),-1)
		set objPeriod=$get(^FINGLPeriod(0,idLastPeriod,1))
	 
		if $$$FINGLPeriodEndDate(objPeriod)'=dteLastDate {
			set $$$FINGLPeriodEndDate(objPeriod)=dteLastDate
			;do Save^FINSYS("FINGLPeriod",pidPeriodType_","_idLastPeriod,objPeriod)
			do Save^FINSYS("FINGLPeriod",idLastPeriod,objPeriod)
		}
	}	
	
	if $$$ISOK(Status) {
		do ^WWWFORM
	} else {
		do ReturnError^COMUtils(Status)
	}
	
	quit Status
 
CreatePeriod(pidPeriodType,pdteStartDate,pdteEndDate,plngNumber,plngYear)
    ;-------------------------------------------------------------------------------
    ; Creates a new period.
	; creates a singular period. used by method above
    ;
    ; History:
    ; 23-May-2005	RobertW	12270: Return any error messages from the save attempt.
    ; 05-Nov-2004	Paul K	removed direct reference to ^FINGLPeriod global.
	; 06-Jan-2003	Paul K	Created
    ;-------------------------------------------------------------------------------
	new objPeriod,idPeriod,strStatus
	
	set idPeriod=$order(^FINGLPeriod(0,""),-1)+1
	
	set objPeriod=""
	set $$$FINGLPeriodPeriodType(objPeriod)    = pidPeriodType
	set $$$FINGLPeriodStartDate(objPeriod)     = pdteStartDate
	set $$$FINGLPeriodEndDate(objPeriod)       = pdteEndDate
	set $$$FINGLPeriodNumber(objPeriod)        = plngNumber
	set $$$FINGLPeriodYear1(objPeriod)         = plngYear
	set $$$FINGLPeriodOpentoPosting(objPeriod) = 1
	
	set strStatus = $$$Save("FINGLPeriod",idPeriod,objPeriod,$$$YES)
		
	quit strStatus
	
GetYearsForPeriod(pstrPeriodType,pstrValue="",pblnUpdate=$$$YES)
	;-----------------------------------------------------------------------------
	; gets all years for a given period type for the accounts form
	;
	; History
	; 13-Jul-2006	JW			SR14836: Index variable. Use it.
	; 03-Jul-2006	Steve S		SR14525: pblnUpdate parameter
	; 16-Jun-2005	PO			Removed unnecessary set %TXT(1)=""
	; 07-Jul-2003	shobby		Variables
	;-----------------------------------------------------------------------------
	new strYear,intLine,i,lngYear,lstYears,idxPeriodType
	
 	set intLine=0
 	set lstYears=""
 	
 	if pblnUpdate {
	 	set %TXT(1)="#YFINGLAccountM12~~ ~"_0
	 	IF +YINHALT=0 QUIT
 	}
 	
 	set idxPeriodType = $$$Index(pstrPeriodType)		// SR14836
 	set intLine=1
 	set lngYear=""
 	for {
	 	set lngYear=$order(^FINGLPeriods(0,1,idxPeriodType,lngYear))		// SR14836
	 	quit:lngYear=""
	 	
	 	set lstYears=lstYears_$listbuild(lngYear)
	 	if pblnUpdate {
	 		SET %TXT(1)=%TXT(1)_"#YFINGLAccountM12~"_lngYear_"~"_lngYear_"~"_$zincr(intLine)
	 	}
 	}
 	
 	if pblnUpdate {
 		for i=1:1:40 {
 			set %TXT(1)=%TXT(1)_"#YFINGLAccountM12~~ ~"_$zincr(intLine)
 		}
 	}
 	
 	quit lstYears
 
GetPeriodsForDate(pdteTransDate,PeriodList,blnForce=0)
	;-------------------------------------------------------------------------------
	; gets all periods for a given date. the results are cached in an mtemp, so this
	; only needs to be run once per day
	; if you re-create the periods the ^mtemp should be killed.
	;
	; History
	; 10-Sep-2005	RPW		SR13639: $zu(5) is faster than $znspace, also use a
	; 							variable and get it once.
	; 20-Jul-2005	PO		SR12991: Ensure pdteTransDate is a number of days and
	; 							not full horolog form
	; 26-Feb-2004	SCR		Check Cache
	; 24-Feb-2004	SCR		Updated Cache to use Force parameter
	; 24-Feb-2004	SCR		Split in to 2 functions
	; 16-Sep-2003	shobpk	Fixed flow of statuses, and only raise errors if the
	; 							period is the default period.
	; 04-Aug-2003	shobby	Ignore PeriodTypes that are not active. (TR005694)
	; 07-Jul-2003	shobby	Variables
	; 06-Jan-2003	Paul K	Created
	;-------------------------------------------------------------------------------
	new idPeriodType,strStatus,PeriodNumber,CacheOk,Item,strNS
	
	set PeriodList=""
	set idPeriodType=""
	set strStatus=1
	set pdteTransDate=+pdteTransDate
 
 	set CacheOk=$$$NO
 	set strNS=$zu(5) ; SR13639
	if $data(^CacheTempPeriodDate(0,strNS,pdteTransDate,+blnForce))  { ; SR13639
		set PeriodList=$get(^CacheTempPeriodDate(0,strNS,pdteTransDate,+blnForce)) ; SR13639
		set CacheOk=$$$OK
		if PeriodList="" {
			set CacheOk=$$$NO
		}
		for Item=1:1:$ListLength(PeriodList) {
			set PeriodNumber=$listGet(PeriodList,Item)
			if PeriodNumber="" {
				set CacheOk=$$$NO
			} else {
				if '$data(^FINGLPeriod(0,PeriodNumber)) set CacheOk=$$$NO
			}
		}
	}
 
 	if CacheOk'=$$$YES {
		for {
			set idPeriodType=$order(^FINGLPeriodType(0,idPeriodType))
			quit:idPeriodType=""
			quit:strStatus'=1
			set PeriodNumber=""
			set strStatus=$$GetPeriodForDateType(idPeriodType,pdteTransDate,blnForce,.PeriodNumber)
			if (PeriodNumber'="")&&(strStatus=1) {
				set PeriodList=PeriodList_$listbuild(PeriodNumber)
			}
		}
		
		if strStatus=1 set ^CacheTempPeriodDate(0,strNS,pdteTransDate,+blnForce)=PeriodList ; SR13639
 	}
 
	quit strStatus
 
 
GetPeriodForDateType(Type="",Date="",Force="",PeriodNumber) 
	;-------------------------------------------------------------------------------
    ; Get Period Number for Date & Type
    ;
    ; Returns:
    ;
    ; History:
    ; 13-Jul-2006	JW		SR14836: Index variable. Use it.
    ; 10-Aug-2005	shobby	SR12815: Prevent posting if any Period exists but is
    ; 							closed, not just the Default.
    ; 24-Feb-2004	SCR		Created
	;-------------------------------------------------------------------------------
	new Status,StartDate,TypeRec,Default,Description
	new Period,PeriodRec,idxPeriodType
	
	set Status=$$$OK
	
	set PeriodNumber=""
	if Type="" set Type=" "
	;set StartDate=Date+1
	;set StartDate=$order(^FINGLPeriods(0,3,Type,StartDate),-1)
	set TypeRec=$get(^FINGLPeriodType(0,Type,1))
	;set Description=$$$FINGLPeriodTypeDescription(TypeRec)
	;set Default=$$$FINGLPeriodTypeDefault1(TypeRec)
 	
	if $$$FINGLPeriodTypeActive1(TypeRec) { ;shobby-TR005694
		set idxPeriodType = $$$Index(Type)		// SR14836
		
		set StartDate=Date+1
		set StartDate=$order(^FINGLPeriods(0,3,idxPeriodType,StartDate),-1)
		
		set Description=$$$FINGLPeriodTypeDescription(TypeRec)
		set Default=$$$FINGLPeriodTypeDefault1(TypeRec)
 
		if StartDate'="" {
			set Period=$order(^FINGLPeriods(0,3,idxPeriodType,StartDate,""))			// SR14836
			set PeriodRec=$get(^FINGLPeriod(0,Period,1))
			if Date<=$$$FINGLPeriodEndDate(PeriodRec) {
				if $$$FINGLPeriodOpentoPosting(PeriodRec)||(Force) {
					set PeriodNumber=Period
				} else {
					;SR12815
					set Status=$listbuild("Fin00099",Description,$$$FINGLPeriodNumber(PeriodRec),$$$FINGLPeriodYear1(PeriodRec))  ; Unable to post to Period Type %1. Period %2 for year %3 is closed.
					;if Default set Status=$listbuild("Fin00099",Description,$$$FINGLPeriodNumber(PeriodRec),$$$FINGLPeriodYear1(PeriodRec))  ; Unable to post to Period Type %1. Period %2 for year %3 is closed.
				}
			} else {
				if Default set Status=$listbuild("Fin00100",Description,$$^WWWDATE(Date))  ; Unable to post to Period Type "%1". No period setup for date %2
			}
		} else {
			if Default set Status=$listbuild("Fin00100",Description,$$^WWWDATE(Date))  ; Unable to post to Period Type "%1". No period setup for date %2
		}
	}
		
	quit Status
  	;returns all periods for a period type and year
  	; 06-Jan-2003	Paul Kalenjuk	Created
 
GetPeriodsForYear(pidPeriodType,plngYear)
    ;-------------------------------------------------------------------------------
    ;
    ; Returns:
    ;
    ; History:
    ; 13-Jul-2006	JW		SR14836: Index variable. Use it.
    ; 10-Sep-2005	RPW		SR13639: $zu(5) is faster than $znspace, also use a variable and get it once.
    ; 19-Oct-2004	MS		SR10645  check for plngYear being null or undefined
    ; 25-Mar-2004	shobby	Check that pidPeriodType'="" (TR007390)
    ; 12-Mar-2004	shobby	Changed ^mtemp to ^CacheTemp (TR007251)
    ;-------------------------------------------------------------------------------
	new PeriodList,idPeriod,lngNumber,strNS,idxPeriodType
 
	set PeriodList=""
	if $get(pidPeriodType)'="" {
		if $get(plngYear)="" set plngYear=" "        ;SR10645
		set strNS=$zu(5) ; SR13639
		if $data(^CacheTempPeriodYear(0,strNS,pidPeriodType,plngYear))  quit ^CacheTempPeriodYear(0,strNS,pidPeriodType,plngYear) ; SR13639
	 	
	 	set idxPeriodType = $$$Index(pidPeriodType)		// SR14836
	 	
		set lngNumber=""
		for {
			set lngNumber=$order(^FINGLPeriods(0,1,idxPeriodType,plngYear,lngNumber))		// SR14836
			quit:lngNumber=""
			
			set idPeriod=$order(^FINGLPeriods(0,1,idxPeriodType,plngYear,lngNumber,""))		// SR14836
			set PeriodList=PeriodList_$lb(idPeriod)
		}
		set ^CacheTempPeriodYear(0,strNS,pidPeriodType,plngYear)=PeriodList ; SR13639
	}
	quit PeriodList
	
DefaultPeriod(pidOverRide="")
	;-------------------------------------------------------------------------------
	; gets the first default period type
	;
	; History
	; 13-Sep-2012	SCR		SR18117: Pass in OverRide value
	; 06-Jan-2003	Paul K	Modified to use index.
	;-------------------------------------------------------------------------------
	new intDefaultPeriod
	; SR18117 vvvvvv
	;set intDefaultPeriod=""
	;set intDefaultPeriod=$order(^FINGLPeriodTypes(0,1,1,""))  ;index on default period type
	set intDefaultPeriod=pidOverRide
	set:intDefaultPeriod="" intDefaultPeriod=$order(^FINGLPeriodTypes(0,1,1,""))  ;index on default period type
	; SR18117 ^^^^^^
	if intDefaultPeriod="" set intDefaultPeriod=$order(^FINGLPeriodType(0,""))
	quit intDefaultPeriod
	
CurrentPeriod(pidPeriodType,&pstrStatus)
	;-------------------------------------------------------------------------------
	;
	; History
	; 30-Jun-2006	JW		SR13713: Calculate correctly.
	; 13-Dec-2005	RPW		SR13719: Change to use listfind to see if we have a match
	; 						otherwise get the last element from the list.
	; 						This matches the existing code but is much faster. Index 2
	; 						on FINGLPeriod is no longer required.
	; 29-Jul-2005	JW		Changed $p($h,",",1) to +$h
	; 07-Jul-2003	shobby	Variables
	;-------------------------------------------------------------------------------
	new idPeriod
	
	set idPeriod=""
 	set pstrStatus = $$GetPeriodForDateType(pidPeriodType,+$horolog,$$$YES,.idPeriod)
 	
 	quit idPeriod
 	
	
GetNextPeriod(pidPeriodType,pidPeriod)
	;--------------------------------------------------------------------------------
	;
	; History
	; 13-Jul-2006	JW		SR14836: Corrected null check. Add Index.
	; 30-May-2005	JW		Null checks
	; 07-Jul-2003	shobby	Variables
	;--------------------------------------------------------------------------------
	new objPeriod,idPeriod,dteStartDate,idxPeriodType
	
	set idPeriod=""
	//if $get(pidPeriodType) && ($get(pidPeriod)'="") {		//SR14836
	if ($get(pidPeriodType)'="") && ($get(pidPeriod)'="") {
		set objPeriod=$get(^FINGLPeriod(0,pidPeriod,1))
		set dteStartDate=$$$FINGLPeriodStartDate(objPeriod)
		set idxPeriodType = $$$Index(pidPeriodType)		// SR14836
		set dteStartDate=$order(^FINGLPeriods(0,3,idxPeriodType,dteStartDate))	// SR14836
		if dteStartDate'="" set idPeriod=$order(^FINGLPeriods(0,3,idxPeriodType,dteStartDate,""))	// SR14836
	}
	quit idPeriod
	
	
GetPeriodsPerYearForGroup(pblnUpdateForm=$$$YES)  ;returns the default number of periods for period type groups
	;--------------------------------------------------------------------------------
	;This method sets the periods per year when you select a periodtype group in the period type form
	;
	; Params: 	YINHALT - group id
	; 			pblnUpdateForm - whether to update current form
	;
	; Returns: periods per year for group YINHALT
	;
	; History
	; 13-Apr-2006	JW		SR14523: Added parameter, return value, new updating methods.
	; 06-Jan-2003	Paul K	Created
	;--------------------------------------------------------------------------------
	new lngPeriodsForYear
	
	;Possible YINHALT values "",6-user defined : 1-Monthly : 2- 4-4-5 : 3- 4-5-4 : 4- 5-5-4 : 5- 4 Weekly
  	SET lngPeriodsForYear=$CASE(YINHALT,1:12,2:12,3:12,4:12,5:13,:"")
  	
  	if pblnUpdateForm {
		do ToggleReadOnly^COMUtilForm(5,lngPeriodsForYear'="")
		do PopulateDataField^COMUtils(YFORM,5,lngPeriodsForYear)
  	}
  	/* SR14523
  	set %TXT(1)="#Y"_YFORM_"D5~"_lngPeriodsForYear
	if lngPeriodsForYear="" set %TXT(1)=%TXT(1)_"#Y"_YFORM_"D5~WRITE"
	if lngPeriodsForYear'="" set %TXT(1)=%TXT(1)_"#Y"_YFORM_"D5~READ"
  	*/
	quit lngPeriodsForYear
	
	
	
	
GetCurrentYearForPeriod(pidPeriodType)
	;--------------------------------------------------------------------------------
	; this method is used to return the current year for the selected period type
	; in the accounts screen, periods tab.
	;
	; History
	; 30-Jun-2006	JW		SR14528: Calculate correctly, was not looking at period type.
	; 29-Jul-2005	JW		Changed $p($h,",",1) to +$h
	; 06-Jan-2003	Paul K 	Created
	;--------------------------------------------------------------------------------
	new lngYear,idPeriod,dteToday,strStatus
	
	set dteToday = +$horolog
	set lngYear=$$$DateYear(dteToday)
	
	if $get(pidPeriodType)'="" {
		
		set strStatus = $$GetPeriodForDateType(pidPeriodType,dteToday,$$$YES,.idPeriod)
		
		if $$$ISOK(strStatus) && (idPeriod'="") {
			set lngYear = $$$FINGLPeriodYear1($get(^FINGLPeriod(0,idPeriod,1)))
		}
	}
	
	quit lngYear
	
		
OnBeforeSave(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
	; Require to Check to see if the save of this period creates a gap in the period time line.
	; if it does, use the surrounding periods to fill the gap.
	; if the surrounding periods can't fill the gap return an error.
	; 
	; History
	; 13-Jul-2006	JW		SR14836: Index variable. Use it.
	; 23-Feb-2006	SC		SR13157: Check for Period Timeout, and no Open Transactions for Period.
	; 07-Feb-2005	shobby	passed in values for YKEY and YFELD.
	; 05-Nov-2003	shobby	Removed hack and reworked for TR006116.
	; 11-Jul-2003	shobby	Removed lock up when editing last period. (TR005595)
	; 24-Jun-2003	shobby	TR005454 : Indexes used to get Next/Previous period have
	; 						been changed, put in a hack to handle that change.
	;-------------------------------------------------------------------------------
	new idPeriod,idPeriodType,lngYear,lngNumber,dteStartDate,dteEndDate,strStatus
	new lngPreviousPeriodYear,lngPreviousPeriodNumber,idPreviousPeriod,objPrevPeriod
	new lngNextPeriodYear,lngNextPeriodNumber,idNextPeriod,objNextPeriod,idNextPeriod1
	new dtePreviousStartDate,dteNextStartDate,objFINGLPeriod
	new dteCurrentStartDate,dteCurrentEndDate,idxPeriodType
 
	if ($get(pYKEY)'="")&&($get(pYFELD)'="") {
		set idPeriod=$piece(pYKEY,",",1)
		
		set idPeriodType=$piece(pYFELD,Y,1)
		set lngYear=$piece(pYFELD,Y,5)
		set lngNumber=$piece(pYFELD,Y,4)
		set dteStartDate=$piece(pYFELD,Y,2)
		set dteEndDate=$piece(pYFELD,Y,3)
		set strStatus=$$$OK
		
		set idxPeriodType = $$$Index(idPeriodType)		// SR14836
		
		;Check on disk version
		set objFINGLPeriod=$get(^FINGLPeriod(0,pYKEY,1))
		if objFINGLPeriod'="" {
			set dteCurrentStartDate=$$$FINGLPeriodStartDate(objFINGLPeriod)
			set dteCurrentEndDate=$$$FINGLPeriodEndDate(objFINGLPeriod)
		
			if dteStartDate>dteEndDate set strStatus=$listbuild("Fin00045")  ;start date greater than end date.
			
			; Start Date Change?
			if (strStatus=$$$OK)&(dteStartDate'=dteCurrentStartDate) {  ;continue if the user has changed start date
				set lngPreviousPeriodYear=lngYear
				set lngPreviousPeriodNumber=lngNumber-1
				if lngPreviousPeriodNumber=0 {
					set lngPreviousPeriodNumber=$piece($get(^FINGLPeriodType(0,$piece(idPeriodType,",",1),1)),Y,5)  ;periods per year
					set lngPreviousPeriodYear=lngPreviousPeriodYear-1
				}
				set dtePreviousStartDate=$order(^FINGLPeriods(0,3,idxPeriodType,dteCurrentStartDate),-1)  ;look for previous period		// SR14836
				if dtePreviousStartDate'="" {
					set idPreviousPeriod=$order(^FINGLPeriods(0,3,idxPeriodType,dtePreviousStartDate,""))	// SR14836
					if idPreviousPeriod'="" {
						set objPrevPeriod=$get(^FINGLPeriod(0,idPreviousPeriod,1))
						if objPrevPeriod'="" {
							if dteStartDate'=($$$FINGLPeriodEndDate(objPrevPeriod)+1) {
								if dteStartDate<$$$FINGLPeriodStartDate(objPrevPeriod) {
									set strStatus=$listbuild("Fin00046")  ;Start Date less than previous period start date
								} else {
									set $$$FINGLPeriodEndDate(objPrevPeriod)=dteStartDate-1
									set strStatus = $$$Save("FINGLPeriod",idPreviousPeriod,objPrevPeriod,$$$YES)
								}
							}
						}
					}
				}
			}
			
			; End Date Change?
			if (strStatus=1)&(dteEndDate'=dteCurrentEndDate) {  ;continue if the user has changed end date
				set lngNextPeriodYear=lngYear
				set lngNextPeriodNumber=lngNumber+1
				if lngNextPeriodNumber>$piece($get(^FINGLPeriodType(0,idPeriodType,1)),Y,5)  {  ;periods per year
					set lngNextPeriodNumber=1
					set lngNextPeriodYear=lngNextPeriodYear+1
				}
				set dteNextStartDate=$order(^FINGLPeriods(0,3,idxPeriodType,dteStartDate))	// SR14836
				if dteNextStartDate'="" {
					set idNextPeriod=$order(^FINGLPeriods(0,3,idxPeriodType,dteNextStartDate,""))	// SR14836
					if idNextPeriod'="" {
						set objNextPeriod=$get(^FINGLPeriod(0,idNextPeriod,1))
						if objNextPeriod'="" {
							if dteEndDate'=($$$FINGLPeriodStartDate(objNextPeriod)-1) {
								if dteEndDate>$$$FINGLPeriodEndDate(objNextPeriod) {
									set strStatus=$listbuild("Fin00047")  ;"End Date greater than next period end date"
								} else {
									set $$$FINGLPeriodStartDate(objNextPeriod)=dteEndDate+1
									set strStatus = $$$Save("FINGLPeriod",idNextPeriod,objNextPeriod,$$$YES)
								}
							}
						}						
					}
				}	
			}
			
			;SR13157
			if $$$ISOK(strStatus) {
				;if closing period
				if ('$$$FINGLPeriodOpentoPosting(YFELD)) && ($$$FINGLPeriodOpentoPosting(objFINGLPeriod)) {
					set strStatus = $$IsPeriodCloseAllowed() 
					if $$$ISOK(strStatus) {
						if (+$$$FINGLPeriodOpenTransactions(YFELD)'=0) {
							set strStatus = $listbuild("Fin01000") ;Cannot close period. Period has Open Transactions.
						}
					}
					
				}
			}
			
			if $$$ISOK(strStatus) {	
				do ResetPeriodCache()
			} else {
				do ReturnError^COMUtils((strStatus))
				set Q=1
			}
		}
	}
	quit
	
ResetPeriodCache()
	;-------------------------------------------------------------------------------
	; Used to kill the cache of periods for a date. Should be run whenever
	; a period changes or a period type changes.
	;
	; History:
	; 10-Sep-2005	RPW		SR13639: $zu(5) is faster than $znspace, also use a variable and get it once.
    ; 12-Mar-2004	shobby	Changed ^mtemp to ^CacheTemp (TR007251)
	; 12-Feb-2004	Paul K	Creation
	;-------------------------------------------------------------------------------
	new strNS
	
	set strNS=$zu(5)
	kill ^CacheTempPeriodDate(0,strNS)
	kill ^CacheTempPeriodYear(0,strNS)
	quit
 
ShowPeriods(pidPeriodType,pidPeriod)
	;-------------------------------------------------------------------------------
	; History:
	; 09-Nov-2006	Steve S	SR14496: Filters
	; 								 Show newest > oldest
	; 13-Jul-2006	JW		SR14836: Index variable. Use it.
	; 06-Mar-2006	SC		SR13157: Put Open Transactions into tab 2 as COMTable.
	; 23-Feb-2006	SC		SR13157: Added Open Transactions to COMTable.
	;-------------------------------------------------------------------------------
	new lstHeader,lngNumber,lngYear,objPeriod,idPeriod,idClass,idUnPostIndex,objUnPostRec,idxPeriodType
	new dteStart,dteEnd,intCount
	
	set intCount=0
	
	if YSEITE=1 {
		set lstHeader=""
		set lstHeader=lstHeader_$listbuild($$$StrFINGLPeriodYear1)
		set lstHeader=lstHeader_$listbuild($$$StrFINGLPeriodNumber)
		set lstHeader=lstHeader_$listbuild($$$StrFINGLPeriodStartDate)
		set lstHeader=lstHeader_$listbuild($$$StrFINGLPeriodEndDate)
		set lstHeader=lstHeader_$listbuild($$$StrFINGLPeriodOpentoPosting)
		set lstHeader=lstHeader_$listbuild($$$StrFINGLPeriodOpenTransactions) ;SR13157
			
		if pidPeriod'="" set pidPeriodType=$$$FINGLPeriodPeriodType($get(^FINGLPeriod(0,pidPeriod,1)))
		do Start^COMTable(lstHeader,$listbuild("Fin00148"))  ; Period Details)
	 
		if pidPeriodType'="" {
			set idxPeriodType = $$$Index(pidPeriodType)		// SR14836
			
			set lngYear=""
			for {
				set lngYear=$order(^FINGLPeriods(0,1,idxPeriodType,lngYear),-1)	// SR14836  //SR14496
				quit:lngYear=""
				
				continue:'$$YearCheck^FINGLPeriodTypeFilter(lngYear) //SR14496
				
				set lngNumber=""
				for {
					set lngNumber=$order(^FINGLPeriods(0,1,idxPeriodType,lngYear,lngNumber),-1)	// SR14836
					quit:lngNumber=""
					set idPeriod=$order(^FINGLPeriods(0,1,idxPeriodType,lngYear,lngNumber,""),-1)	// SR14836
					set objPeriod=$get(^FINGLPeriod(0,idPeriod,1))
					
					set dteStart = $$$FINGLPeriodStartDate(objPeriod)
					set dteEnd	 = $$$FINGLPeriodEndDate(objPeriod)
					
					continue:'$$DateCheck^FINGLPeriodTypeFilter(dteStart,dteEnd) //SR14496
					set intCount = $increment(intCount) // SR14836
					
					do NewLine^COMTable($select(pidPeriod=idPeriod:"lightgreen",1:""))
					do InsertCell^COMTable(lngYear,"FINGLPeriod",idPeriod,,,1)
					do InsertCell^COMTable(lngNumber,"FINGLPeriod",idPeriod,,,1)
					do InsertCellDate^COMTable(dteStart,"FINGLPeriod",idPeriod,,1)
					do InsertCellDate^COMTable(dteEnd,"FINGLPeriod",idPeriod,,1)
					do InsertCellBoolean^COMTable($$$FINGLPeriodOpentoPosting(objPeriod),"FINGLPeriod",idPeriod,,1)
					do InsertCell^COMTable($$$FINGLPeriodOpenTransactions(objPeriod),"FINGLPeriod",idPeriod,,,2) ;SR13157
					do EndLine^COMTable()
					}
				}
			}
		// SR14836
		do NewLine^COMTable()
		do InsertCell^COMTable($$$Text("Fin01085")_": "_intCount,,,,,,7) ;Period Count
		do EndLine^COMTable()
		do Stop^COMTable()
		
	} elseif YSEITE=2 {
		//display UnPosted Transactions for current Period.
	
		set lstHeader=$listbuild($$$StrFINGLPeriodUnPostIndex1,
								$$$StrFINGLPeriodUnPostTransactionType,
								$$$StrFINGLPeriodUnPostKeys)
		
		do Start^COMTable(lstHeader,$listbuild($$$StrFINGLPeriodOpenTransactions))
		set idUnPostIndex=""
		for {
			set idUnPostIndex = $order(^FINGLPeriodUnPost(0,YKEY,idUnPostIndex))
			quit:idUnPostIndex=""
			set objUnPostRec = $get(^FINGLPeriodUnPost(0,YKEY,idUnPostIndex,1))
			
			set idClass = $$$FINGLPeriodUnPostTransactionType(objUnPostRec)
			if idClass="FINAPInv"&&$$$FINAPInvIsVoucher($get(^FINAPInv(0,$$$FINGLPeriodUnPostKeys(objUnPostRec),1))) {
				set idClass = "FINAPVoucher"
			}
			
			do NewLine^COMTable()
			do InsertCell^COMTable(idUnPostIndex,idClass,$$$FINGLPeriodUnPostKeys(objUnPostRec),,,)
			do InsertCell^COMTable(idClass_" ("_$$^WWWFORMNAME(idClass)_")",idClass,$$$FINGLPeriodUnPostKeys(objUnPostRec),,,)
			do InsertCell^COMTable($$$FINGLPeriodUnPostKeys(objUnPostRec),idClass,$$$FINGLPeriodUnPostKeys(objUnPostRec),,,)
			do EndLine^COMTable()
		}
		do Stop^COMTable()
		
	}
	
	quit
	
	
	
	
BuildPeriodsList(periodTypeID="",fromYear="",fromPeriod="",toYear="",toPeriod="")
    ;-------------------------------------------------------------------------------
    ; Return a list of periods for a period type, start and end years.
    ;
    ; Returns:List
    ;
    ; History:
    ; 01-Dec-2004	Paul K/Steve S	Created
    ;-------------------------------------------------------------------------------
	new idPeriod,lstPeriods
	
	set lstPeriods=""
	
	if (periodTypeID'="") && (fromYear'="") && (fromPeriod'="") && (toYear'="") && (toPeriod'="") {
		set periodTypeID = $$$Index(periodTypeID)
		for {
			set idPeriod = $order(^FINGLPeriods(0,1,periodTypeID,fromYear,fromPeriod,""))
			quit:idPeriod=""
			quit:fromYear>toYear
			quit:(fromYear=toYear)&&(fromPeriod>toPeriod)
			
			set lstPeriods = lstPeriods_$listbuild(idPeriod)
			set fromPeriod = $order(^FINGLPeriods(0,1,periodTypeID,fromYear,fromPeriod))
			if fromPeriod="" {
				set fromPeriod = 1
				set fromYear   = fromYear+1
			}
		}
	}
	
	quit lstPeriods
	
 
GetNextPeriodStart(pidPeriodType)
    ;-------------------------------------------------------------------------------
    ; Returns the start date of the next period
    ; 
    ; Params: pidPeriodType - period type id
    ;
    ; Returns: start date
    ;
    ; History:
    ; 30-May-2005	JW		Created SR12427
    ;-------------------------------------------------------------------------------
	new startDate,currentPeriod,nextPeriod
	
	set startDate = ""
	
	if $get(pidPeriodType)="" {
		set pidPeriodType = $$DefaultPeriod()
	}
	set currentPeriod = $$CurrentPeriod(pidPeriodType)
	set nextPeriod    = $$GetNextPeriod(pidPeriodType,currentPeriod)
	
	if nextPeriod '= "" {
		set startDate = $$$FINGLPeriodStartDate($get(^FINGLPeriod(0,nextPeriod,1)))
	}
	
	quit startDate
	
	
IsPeriodCloseAllowed()
	;-------------------------------------------------------------------------------
	; Checks if timeout(minutes) is used on general parameters. If so, and we have
	; a timeout, raise an error message.
	;
	; Params: none
	;
	; ByRefs:
	;
	; Returns: strStatus. If error, contains error message, else $$$OK.
	;
	; History:
	; 23-Feb-2006	SC		SR13157: Created
	;-------------------------------------------------------------------------------
	new strStatus, objGeneralSetup, intTimeoutMinutes, intPeriodTimeout
 
	set strStatus = $$$OK
	set objGeneralSetup = $get(^FINGeneralSetup(0,0,1))
	set intTimeoutMinutes = $$$FINGeneralSetupLedgerPeriodCloseCheckTim(objGeneralSetup)
	;if timeout on i.e. >0
	if (intTimeoutMinutes > 0) {
		set intPeriodTimeout = $$$FINGeneralSetupLed]]><![CDATA[gerPeriodCloseLastRun(objGeneralSetup) 
		set $piece(intPeriodTimeout,",",2) = $piece(intPeriodTimeout,",",2) + (intTimeoutMinutes * 60)
		;if timeout reached, raise an error.
		if $$DateDiff^COMUtilDate(intPeriodTimeout,$horolog) > 0 {
			set strStatus = $listbuild("Fin00986")
		}
	}
	
	quit strStatus
	
]]></Routine>
</Export>