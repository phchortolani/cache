<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INTRNValidation" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INTRNValidation
	
#include COMSYS
#include INConst
#include COMGridEdit31
	
#def1arg TempStore(%1) ^CacheTemp(YUCI,YUSER,%1)
	
ProductError(pstrError)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 21-Oct-2008	GRF		SR15812: variable prefix
	; 07-Oct-2008	HQN		SR15995: Return a valid strStatus
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new idLine,strStatus
	
	set strStatus = $$$OK
	
	set idLine = ""
	for {
		set idLine = $order($$$TempStore("TRNLineErrors",idLine))
		quit:idLine=""
		
		if $data($$$TempStore("TRNLineErrors",idLine)) {
			set strStatus = $$$MakeStatus(pstrError)
		}
		quit:$$$ISERR(strStatus)
	}
	quit strStatus
	
	
SumLinesForItem(pidTFR,pidItem,pidStorage="",pfltLineQty=0,pintRow="")
 	;-------------------------------------------------------------------------------
	; The Transfer Line Data is not yet updated from the Grid until Saved 
	; (hence the qty checks based on WWWDATEN)
	;
	; Returns Picked Quantity for all PickLines on the grid, 
	; optionally for a specific storage,
	; in addition to optionally specified current row Quantity
	; optionally exclude specified row.
	; Params:
	; 	pidTFR		Transfer ID
	; 	pidItem		Item ID
	; 	pidStorage	Storage ID
	; 	pfltLineQty	Current Line Picked Quantity
	; 	pintRow		Exclude Grid row spicified by this ID
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 29-Oct-2008	HQN		SR16077: Added doco
	; 							made pidStorage, pfltLineQty, pintRow all optional
	; 21-Oct-2008	GRF		SR15812: $$$KEY macro
	; 07-Oct-2008	HQN		TODO: Actually use on screen values...
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new fltSumQty,idLine,objLine
	
	set fltSumQty = 0
	set idLine = ""
	for {
		set idLine = $order($$$WWWDATEN("REFERENCEROW",idLine))
 		quit:(idLine = "")
 		;continue:(idLine = $$$KEY2($$GetYKEY^COMGridEdit31G(pintRow)))
 		continue:(pintRow'="")&&(idLine = $$$KEY2($$GetYKEY^COMGridEdit31G(pintRow)))
 		continue:($get($$$WWWDATEN("KILLEDRECORD",$get($$$WWWDATEN("REFERENCEROW",idLine,1))))=1)
 		
 		set objLine = $$$GRIDGetYFELD(idLine)
 		continue:($$$INTFRPickLineItem(objLine) '= pidItem)
 		;continue:($$$INTFRPickLineSendingStockLocation(objLine) '= pidStorage)
 		continue:(pidStorage'="")&&($$$INTFRPickLineSendingStockLocation(objLine) '= pidStorage)
 		
 		set fltSumQty = fltSumQty + $$$INTFRPickLinePickedQuantity(objLine)
	}
 	quit (fltSumQty+pfltLineQty)
	
	
SumPrecedingLinesWithItem(pidTFR,pidItem,pfltLineQty,pintRow)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 23-Mar-2009	GRF		correct tag name
	; 21-Oct-2008	GRF		SR15812: $$$KEY macro
	; 06-Oct-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new fltSumQty,idLine,objLine
	
	set fltSumQty = 0
	set idLine = ""
	for {
		set idLine = $order($$$WWWDATEN("REFERENCEROW",idLine))
 		quit:(idLine = "")
 		continue:(idLine = $$$KEY2($$GetYKEY^COMGridEdit31G(pintRow)))
 		continue:($get($$$WWWDATEN("KILLEDRECORD",$get($$$WWWDATEN("REFERENCEROW",idLine,1))))=1)
 		
 		set objLine = $$$GRIDGetYFELD(idLine)
 		continue:($$$INTFRLineItem(objLine) '= pidItem)
 				
 		set fltSumQty = fltSumQty + $$$INTFRPickLinePickedQuantity(objLine)
	}
 	quit (fltSumQty+pfltLineQty)
	
	
IsPrintingValid(pidTFR)
 	;-------------------------------------------------------------------------------
	; Generic function used to determine whether any printing is possible
	;
	; Params:
	; pidTFR - Key of header record
	;
	; ByRefs: None
	;
	; Returns: Status
	;
	; History:
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new idCurrentLocn,idSendLocn,objRecord,objTFR,strCurrent,strSending,strStatus
 
	set strStatus = $$$OK
 
	if $$$NoKey(pidTFR) {
		set strStatus = $$$MakeStatus(32072)  ; "Please Select A Data Record First."
 
	} else {
		set objTFR = $get(^INTFR(YM,pidTFR,1))
		set idSendLocn = $$$INTFRSendingLocation(objTFR)
		
		set idCurrentLocn = $get(YLOCATION)
 
		if $$$INTFRStatus(objTFR) = $$$EnumINTFRSTATUSCreated {
			set strStatus = $$$MakeStatus("IN00423")  ; "Transfer not Firmed."
 
		} elseif $case($$$INTFRStatus(objTFR),
		                    $$$EnumINTFRSTATUSSent    :$$$YES,
		                    $$$EnumINTFRSTATUSReceived:$$$YES,
		                                              :$$$NO    ) {
			set strStatus = $$$MakeStatus("IN00424")  ; "Cannot perform action as Transfer has been sent."
			
		} elseif (idSendLocn'="") && (idSendLocn '= idCurrentLocn) { // SR15535
			set objRecord  = $get(^WWW0121(0,YM,idCurrentLocn,1))
			set strCurrent = idCurrentLocn_" ("_$$$WWW0121LocationName(objRecord)_")"
			
			set objRecord  = $get(^WWW0121(0,YM,idSendLocn,1))
			set strSending = idSendLocn_" ("_$$$WWW0121LocationName(objRecord)_")"
			
			; "Action must be performed from Sending Location %1. Current location is %2."
			set strStatus = $$$MakeStatus("IN00431",strSending,strCurrent)
		}
	}
	quit strStatus
	
	
IsDueDateValid(pobjTFR)
 	;-------------------------------------------------------------------------------
	; Determines whether the Due Date is valid based on the Transfer Date and the Dispatch
	;
	; Params:
	; pobjTFR - Record of header
	;
	; ByRefs: None
	;
	; Returns: strStatus - $$$OK if valid, otherwise error message
	;
	; History:
	; 21-Oct-2008	GRF		SR15812: should be $$$MakeStatus
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new dteMinimum,dteDueDate,idRecvLocn,idSendLocn,intLeadtime,lstDispatch,strStatus
 
	set strStatus = $$$OK
 
	set idSendLocn = $$$INTFRSendingLocation(pobjTFR)
	set idRecvLocn = $$$INTFRReceivingLocation(pobjTFR)
	if (idSendLocn '= "") && (idRecvLocn '= "") {
		set lstDispatch = $$DefaultDispatch(idSendLocn,idRecvLocn)
 
		set intLeadtime = $case($$$INTFRDispatch(pobjTFR),$listget(lstDispatch,1):$listget(lstDispatch,2),:0)
		set dteMinimum  = intLeadtime + $$$INTFRTransferDate(pobjTFR)
		set dteDueDate  = $$$INTFRDueDate(pobjTFR)
		if dteDueDate < dteMinimum {
			set strStatus = $$$MakeStatus("IN00446",$$^WWWDATE(dteMinimum))  ; "Due date must be %1 or greater."
		}
	}
	quit strStatus
	
	
DefaultDispatch(pidSendLocn,pidRecvLocn)
	;-------------------------------------------------------------------------------
	; Determines the default dispatch based on the sending and receiving locations
	;
	; Params:
	; pidSendLocn - Site Location providing the stock
	; pidRecvLocn - Site Location receiving the stock
	;
	; ByRefs: None
	;
	; Returns: lstResult - list containing dispatch id and lead time
	;
	; History:
	; 03-Dec-2013	SCR		SESDF-655: Use To Location if going from a non lotcontrolled location to a lot controlled location
	; 19-Apr-2011	PPP		SR17734: Ensure that if ^INDRPUMTVOR does not exist, 
	;							^INDRPUMLKW is used to get the default. - consitent
	;							with the other method alTFR.dUTransfer.GetDefaultDispatch
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new idDispatch,intLeadTimeDays,objRelocation,objVORG,idDispatcCalc,idLoc
 
 	set (idDispatch,intLeadTimeDays)=""		//SR17734

 	set objRelocation = $get(^INDRPUMTVOR(YM,pidSendLocn,pidRecvLocn,1))

	if objRelocation '= "" {
		set idDispatch      = $$$INDRPUMTVORDispatchType(objRelocation)
		set intLeadTimeDays = $$$INDRPUMTVORLeadTimeDays(objRelocation)
	
	} else {   //SR17734
		set objVORG			= $get(^INVORG(YM,YM,1))
		set idDispatcCalc	= $$$INVORGDefaultDispatch(objVORG)
		if idDispatcCalc=1 {
			set idLoc	= pidRecvLocn
		} else {
			set idLoc	= pidSendLocn
		}
		; Special Non Lot to Lot tranfer test, always use Sending Loc
		if $$OnlyTrackPrograms^INBundleUtils(pidSendLocn) &&
				'$$OnlyTrackPrograms^INBundleUtils(pidRecvLocn) {
			set idLoc	= pidSendLocn
		}
		set idDispatch = $order(^INDRPUMLKWs(0,1,idLoc,""))
	}
	quit $listbuild(idDispatch,intLeadTimeDays)
	
	
GetQuantity(pidItem,pidLocn)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 26-Apr-2006	RPW/PO		SR14427: Created
	;-------------------------------------------------------------------------------
	new fltQty,fltATPQty
	
	;PPP:FIXME Check if it is correct
	set fltATPQty = $$GetQuantityOnHand^INARTMENGE(pidItem,pidLocn)
	set fltQty    = fltATPQty
	quit fltQty_Y_fltATPQty
	
	
GetBundleQty(pidItem,pidBundle,pidStorage)
	;-------------------------------------------------------------------------------
	; Get the Total Qty Available for a Bundle at a Location
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 07-Oct-2008	PPP		SR15812: Created
	;-------------------------------------------------------------------------------
	new fltQty,SQLCODE
	
	set fltQty = 0
	
	&SQL(SELECT SUM(QtyOnHand) INTO :fltQty FROM alSOH.dBundleStock
		WHERE
			Item=:pidItem     AND
			Bundle=:pidBundle AND
			%upper(Storage->Code)=:pidStorage
	)
	quit +fltQty
	
]]></Routine>
</Export>