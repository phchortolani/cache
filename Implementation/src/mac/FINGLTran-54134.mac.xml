<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLTran" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLTran
	
#include COMSYS
#include FINConst
	;-------------------------------------------------------------------------------
	; History:
	; 15-Dec-2005	GRF		Boolean Macros using COMSYS rather than FIN
	; 07-Jul-2003	SCR		Bug Fixes, Code Check
	;-------------------------------------------------------------------------------
	
OnAfterSave(pstrKey)
  	do UpdateDate(pstrKey)
  	; if YSEITE=2 do ..SearchSet()
  	quit
	
	
OnAfterDisplayingData()
	if YSEITE=2 do SearchStart()
  	quit
	
	
SearchSet()
  	set %("VAR","YBACK")=""
  	set %("VAR","YAUSWAHL")=$GET(VORG(1))_"#"_$GET(VORG(2))
  	set %("VAR","YFORM")=YFORM
  	set ^Steve("vorg")=$GET(VORG(1))_"#"_$GET(VORG(2))   ; FIXME
  	do ^WWWFORM
	quit
	
	
SearchStart()
	new Key,EndDate,row,Tran,YI,YDDSATZ
	
  	for YI=1:1:2  set VORG(YI)=$$^WWWDATE1($get(VORG(YI)))
   	set ANZM    = 0
  	set YDDSATZ = 1
 	
  	write "</TABLE>"
  	do FF^WWWW()  ;FORMFEED
  	do START100^WWWTAB
  	do HEADER^WWWTAB("Number~Date")
  	set Key     = $select(VORG(1):VORG(1)-1,1:"")
  	set EndDate = $select(VORG(2):VORG(2),1:99999)
  	for row=1:1:10 {    ;^FINGLTrans(0,1,59179,18)=""
	  	set Key = $order(^FINGLTrans(YM,1,Key))
	  	quit:'Key
	  	quit:Key>EndDate
	  	
	  	set Tran=""
	  	for  {
		  	set Tran=$order(^FINGLTrans(YM,1,Key,Tran))
		  	quit:Tran=""
		  	do SearchLine(Tran)
	  	}
  	}
  	do STOP^WWWTAB
	quit
	
	
SearchLine(pidTran)
	new Rec,strLine,strLink,Tran
	
	quit:$get(pidTran)=""
	quit:$get(YM)=""
	set Rec=$get(^FINGLTran(YM,pidTran,1))
	quit:Rec=""
	
	do NewLine^COMTable()
	set strLink="<A HREF="_""""_YAKTION_"EP=WWWFORM&YFORM=FINGLTran&YKEY="_pidTran_"&YBACK="_YFORM_","
	do NFL^WWWTAB
	write "<FONT SIZE=2>"
	write strLink
	do 
	. new YFORM,YKEY,YBACK
	. do ^WWWCGI
	write " TITLE="_""""_"Date"_""""
	write ">"
	write $$^WWWDATE($piece(Rec,Y,1))
	write "</A>"
	do EF^WWWTAB
	do NFL^WWWTAB
	write "<FONT SIZE=2>"
	write strLink
	do 
	. new YFORM,YKEY,YBACK
	. do ^WWWCGI
	write " TITLE="_""""_"Date"_""""
	write ">"
	write $get(Tran)
	write "</A>"
	do EF^WWWTAB
	do EL^WWWTAB
	quit
	
	
Create(pidTran,pidSource,pdteTransDate,pidTranType,pidAmountType,pblnInterCompany=$$$NO)
    ;-------------------------------------------------------------------------------
    ;
    ; Returns: Status
    ;
    ; History:
    ; 14-Jun-2006	RPW		SR14642: Use the $$$Save macro
    ; 23-Jan-2005	RPW		SR13087: Added InterCompany Information so it can be
    ; 							stored in the Transaction
    ; 14-Apr-2005	RPW		SR12159: Make sure FINGLTranType is no longer shared
    ; 01-Mar-2005	PaulK	Ensure that Transaction Date is a date, not a timestamp
	; 26-Feb-2004	SCR		Check & Update Transaction Types
	; 26-Feb-2004	SCR		Check for Default Period
    ;-------------------------------------------------------------------------------
	new objTran,strStatus
	
	set strStatus = $$$OK
 	if pdteTransDate="" set pdteTransDate = $horolog
 	set pdteTransDate = +pdteTransDate
 	
	for {
		set pidTran = $$^WWWNEXT("FINGLTran")
		quit:'$data(^FINGLTran(YM,pidTran,1))
	}
	
	set objTran=""
	set $$$FINGLTranTransactionDate(objTran) = pdteTransDate
	set $$$FINGLTranTransactionType(objTran) = pidTranType
	set $$$FINGLTranSource(objTran)          = pidSource
	set $$$FINGLTranAmountType(objTran)      = pidAmountType
	set $$$FINGLTranInterCompany(objTran)    = pblnInterCompany ; SR13087
	
	if (strStatus=$$$OK) && (pidAmountType="") {
		set strStatus = $listbuild("Fin00111",pidAmountType)    ; "GL Amount Type %1 does not exist. Contact Support."
	}
	if (strStatus=$$$OK) && (pidTranType="") {
		set strStatus = $listbuild("Fin00085",pidTranType)      ; "GL Transaction Type %1 does not exist. Contact Support."
	}
	if (strStatus=$$$OK) && '$data(^FINGLAccountAmountType(YM,pidAmountType,1)) {
		set strStatus = $$LoadDefaultAmountTypes() 
	}
	if (strStatus=$$$OK) && '$data(^FINGLAccountAmountType(YM,pidAmountType,1)) {
		set strStatus = $listbuild("Fin00111",pidAmountType)    ; "GL Amount Type %1 does not exist. Contact Support."
	}
	if (strStatus=$$$OK) && '$data(^FINGLTranType(YM,pidTranType,1)) {
		set strStatus = $$LoadDefaultTranTypes()  
	}
	if (strStatus=$$$OK) && '$data(^FINGLTranType(YM,pidTranType,1)) {
		set strStatus = $listbuild("Fin00085",pidTranType)      ; "GL Transaction Type %1 does not exist. Contact Support."
	}
	if $$DefaultPeriod^FINGLPeriod()="" set strStatus = $$$Text("Fin00267")  ; "No Default Period"
 	if strStatus=$$$OK set strStatus = $$$Save("FINGLTran",pidTran,objTran)
 	
 	quit strStatus
	
	
LoadDefaultTranTypes() 
    ;-------------------------------------------------------------------------------
    ; Load Default Transaction Types
    ;
    ; Returns:Status
    ;
    ; History:
    ; 14-Jun-2006	RPW		SR14642: Use the $$$Save macro
    ; 22-Jun-2004	PaulK	Passed through lock and returned status.
    ; 27-Feb-2004	SCR		Added Batch
    ; 26-Feb-2004	SCR		Created
    ;------------------------------------------------------------------------------
    new strStatus
    
    set strStatus = $$$OK
    
	if strStatus=$$$OK set strStatus = $$$Save("FINGLTranType","CI","Charges & Interest",$$$YES)
	if strStatus=$$$OK set strStatus = $$$Save("FINGLTranType","DIS","Distribution",$$$YES)
	if strStatus=$$$OK set strStatus = $$$Save("FINGLTranType","EOY","End Of Year",$$$YES)
	if strStatus=$$$OK set strStatus = $$$Save("FINGLTranType","FC","Foreign Currency Adjustment",$$$YES)
	if strStatus=$$$OK set strStatus = $$$Save("FINGLTranType","JNL","Journal",$$$YES)
	if strStatus=$$$OK set strStatus = $$$Save("FINGLTranType","BATCH","Interface Batch",$$$YES)
	
	quit strStatus
	
	
LoadDefaultAmountTypes() 
    ;-------------------------------------------------------------------------------
    ; Load Default Amount Types
    ;
    ; Returns:Status
    ;
    ; History:
    ; 14-Jun-2006	RPW		SR14642: Use the $$$Save macro
    ; 22-Jun-2004	PaulK	Passed through Lock flag and returned status
    ; 26-Feb-2004	SCR		Created
    ;-------------------------------------------------------------------------------
	quit $$$Save("FINGLAccountAmountType","BAL","Balance~1~1",$$$YES)
	
	
Post(pidTran,pblnForce=$$$NO,pblnStore=$$$NO)
	;-------------------------------------------------------------------------------
	; Posts a GL Transaction. Makes sure that the account total is zero before posting.
	;
	; Returns: Status
	;
	; History:
	; 14-Jun-2006	RPW		SR14642: Use the $$$Save macro
	; 23-Jan-2005	RPW		SR13087: Call the IC post.
	; 11-Oct-2005	RPW		SR13639: Added pblnStore to handle not directly saving
	; 							data now, but put it off until later
	; 09-Feb-2005	PaulK	Changed Balance not zero status text.
	; 16-Sep-2003	shobpk	Added Force flag to force the post of the transaction, 
	; 							and to post to closed periods.
	; 16-Sep-2003	shobpk	Use Standard Save routine
	;-------------------------------------------------------------------------------
	new blnInterCompany,curCredit,curDebit,fltTotal,intLineNumber,objTran,objTranLine
	new strAmountType,strStatus
	
	set intLineNumber = 0
	set strStatus     = $$$OK
	set fltTotal      = 0
	
	set objTran = $get(^FINGLTran(YM,pidTran,1))
	set blnInterCompany = +$$$FINGLTranInterCompany(objTran) ; SR13087
 	
	if ($$$FINGLTranPostedDate(objTran)="") || pblnForce {
		for {
			set intLineNumber = $order(^FINGLTranLine(YM,pidTran,intLineNumber))
			quit:intLineNumber=""
						
			set objTranLine = $get(^FINGLTranLine(YM,pidTran,intLineNumber,1))
			set curDebit    = $piece(objTranLine,Y,2)
			set curCredit   = $piece(objTranLine,Y,3)
			set fltTotal    = fltTotal+$piece(curDebit,"@",1)
			set fltTotal    = fltTotal-$piece(curCredit,"@",1)
		}
		
		if (fltTotal=0) || ($$$FINGLTranAmountType(objTran)'="BAL") {
			set strAmountType = $$$FINGLTranAmountType(objTran)
			for {
				set intLineNumber = $order(^FINGLTranLine(YM,pidTran,intLineNumber))
				quit:intLineNumber=""
				
				set strStatus = $$PostLine(pidTran,intLineNumber,strAmountType,pblnForce,pblnStore) ; SR13639
				quit:$$$ISERR(strStatus)
			}
			if $$$ISOK(strStatus) && ($$$FINGLTranPostedDate(objTran)="") {
				 ; SR13639
				if pblnStore {
					set strStatus = $$BatchSave()
				}
				if $$$ISOK(strStatus) {
					set $$$FINGLTranPostedDate(objTran) = $horolog
					set strStatus = $$$Save("FINGLTran",pidTran,objTran,$$$YES)
				}
			}
		} else {
			set strStatus = $listbuild("Fin00657",fltTotal,pidTran)
		} ; "Balance must be zero (%1) for Transaction %2."
		
	} else {
		set strStatus = $listbuild("Fin00110",pidTran)
	} ; "Transaction %1 already posted."
	
	if blnInterCompany && ($$$ISOK(strStatus)) {
		set strStatus = $$Post^FINGLTranIC(pidTran)
	}
	quit strStatus
	
	
BatchSave() 
    ;-------------------------------------------------------------------------------
    ; Batch save the FINGLAccountTotal records once instead of multiple times
    ;
    ; Returns:
    ; strStatus: The status of the save
    ;
    ; History:
    ; 14-Jun-2006	RPW		SR14642: Use the $$$Save macro
    ; 11-Oct-2005	RPW		SR13639: Created
    ;-------------------------------------------------------------------------------
	new curAmount,idAccount,idAcctTotal,strStatus
		
	set strStatus   = $$$OK
	
	set idAcctTotal = ""
	for {
		set idAcctTotal = $order(^CacheTempFINGLAccountTotal(YUSER,idAcctTotal))
		quit:idAcctTotal=""
		
		set idAccount = $piece(idAcctTotal,",",1)
		set curAmount = $get(^CacheTempFINGLAccountTotal(YUSER,idAcctTotal))
		if $$$FCZero(curAmount) {
			do KILL^FINSYS("FINGLAccountTotal",idAcctTotal)
		
		} else {
			set curAmount = $$$GetAmount(idAccount,curAmount)  ;<TODO FC>
			set strStatus = $$$Save("FINGLAccountTotal",idAcctTotal,curAmount,1)
		}
		quit:$$$ISERR(strStatus)
	}
	kill ^CacheTempFINGLAccountTotal(YUSER)
	quit strStatus
	
	
UpdateDate(pstrKey)
	new strTran,intLine,dteDate
	
 	set strTran = $$$KEY1(pstrKey)
 	set intLine = ""
 	if strTran'="" {
 		set dteDate = $piece($get(^FINGLTran(YM,strTran,1)),Y,1)
 		for  {
	 		set intLine = $order(^FINGLTranLine(YM,strTran,intLine)) 
	 		quit:intLine=""
	 		
 			set $piece(^FINGLTranLine(YM,strTran,intLine,1),Y,4) = dteDate
 		}
 	}
 	quit
	
	
CreateLineEx(pidTran,pidAccount,pcurAmount,pstrReference,pblnConsolidate,pstrClearLine="",pidCompany="",pidCompanyAccount="")
	;-------------------------------------------------------------------------------
	; Wrapper for the CreateLine method to simplify the Debit/Credit nonsense
	;
	; History:
	; 26-May-2005	SCR		SR12440: FC Post Bug, Removed +$get()
	; 01-Nov-2004	Paul K	Made the Clear line property null by default instead of 0.
	; 25-Jun-2004	shobby	Foreign Currency.
	; 27-May-2003	shobby	Creation
	;-------------------------------------------------------------------------------
	new curCredit,curDebit,strStatus
	
	set curDebit  = ""
	set curCredit = ""
	if pcurAmount<0 set curDebit  = $$$FCSign(pcurAmount)
	if pcurAmount>0 set curCredit = pcurAmount
	set strStatus = $$CreateLine(pidTran,pidAccount,curDebit,curCredit,pstrReference,pblnConsolidate,pstrClearLine,,,,,pidCompany,pidCompanyAccount)
	quit strStatus
	
	
CreateLine(pidTran,pidAccount,pcurDebit,pcurCredit,pstrReference,pblnConsolidate,
			pstrClearLine="",pidInterfaceType="",pidTransactionType="",
			pdteTransactionDate="",pstrStatus="",pidCompany="",pidCompanyAccount="")
    ;-------------------------------------------------------------------------------
    ; Create A TranLine
    ;
    ; Returns:Status
    ;
    ; History:
    ; 02-Aug-2010	SCR		SR17480: Keep Debits and Credits separate.
    ; 14-Jun-2006	RPW		SR14642: Use the $$$Save macro
    ; 23-Jan-2006	RPW		SR13087: Need to check consolidation with the IC fields.
    ; 						Also need to store the IC fields.  Added parameters:
    ; 						pidCompany and pidCompanyAccount, these are IC parameters
    ; 						from FINICSetup
    ; 30-Nov-2005	Steve S	SR13936: Store tranline for Interface Batches
    ; 10-Oct-2005	RPW		SR13639: Instead of getting the parent transaction type
    ; 						for each line, just pass it in.  Allow for old code to NOT
    ; 						pass in this parameter.
    ; 21-Jun-2005	SCR		SR12692: Removed Reason Code
    ; 08-Jun-2005	PO		SR12523: Introduced posting security
    ; 01-Nov-2004	Paul K	Made the Clear line property null by default instead of 0
    ; 18-Oct-2004	Paul K	Passed account validation to a seperate routine.
    ; 30-Sep-2004	SCR		Added Reason Code
	; 18-Jun-2004	shobby	Foreign Currency
	; 26-Jul-2003	Paul K	Problem with consolidating lines in credit. (missed out
	; 						negative sign)
	; 11-Jul-2003	SCR		Consolidation Check
	; 02-Jul-2003	SCR		No Account Check
	;-------------------------------------------------------------------------------
	new blnFound,curAmount,dteTransDate,intLineNumber,objFINGLTran,objFINGLTranLine,strStatus
	
	if pidTransactionType="" {
		set objFINGLTran = $get(^FINGLTran(YM,pidTran,1))
		set pidTransactionType = $$$FINGLTranTransactionType(objFINGLTran)
	}
	
	if pdteTransactionDate="" {
		if $get(objFINGLTran)="" {
			set objFINGLTran = $get(^FINGLTran(YM,pidTran,1))
		}
		set pdteTransactionDate = $$$FINGLTranTransactionDate(objFINGLTran)
	}
	
	set strStatus = pstrStatus
	if pstrStatus="" {	
		set strStatus = $$ValidateAccount^FINGLAccountTran(pidAccount,pidInterfaceType,pidTransactionType)
	}
	 
	if $$$ISOK(strStatus) {
		set blnFound      = $$$NO
		set intLineNumber = ""
		if pblnConsolidate {  ;if we are consolidating this line look through all of the lines for this transaction for this account
			for {
				set intLineNumber = $order(^FINGLTranLine(YM,pidTran,intLineNumber))
				quit:intLineNumber=""
				
				set objFINGLTranLine = $get(^FINGLTranLine(YM,pidTran,intLineNumber,1))
				set curAmount = $$$FINGLTranLineDebit(objFINGLTranLine)       ; Get the current debit amount ; SR17480
				
				if ($$$FINGLTranLineAccount(objFINGLTranLine)=pidAccount)                    &&
				   ($$$FINGLTranLineCompany1(objFINGLTranLine)=pidCompany)                   &&
				   ($$$FINGLTranLineCompanyAccount(objFINGLTranLine)=pidCompanyAccount)      &&
				   ( ((curAmount>0) && (pcurDebit>0)) || ((curAmount<0) && (pcurCredit>0)) )    { ; SR17480
					
					set curAmount = $$$FCSub(curAmount,$$$FINGLTranLineCredit(objFINGLTranLine))  ; subtract the current credit amount
					set curAmount = $$$FCAdd(curAmount,pcurDebit)                    ; add the new debit amount
					set curAmount = $$$FCSub(curAmount,pcurCredit)                   ; subtract the new credit amount
					set pcurDebit = "",pcurCredit = ""                         ; reset amounts
					if curAmount>0 set pcurDebit  = curAmount                        ; set the debit
					if curAmount<0 set pcurCredit = $$$FCSign(curAmount)             ; set the credit
					
					set blnFound = $$$OK
				}
				quit:blnFound
			}
		}
		set objFINGLTranLine = ""
		set $$$FINGLTranLineAccount(objFINGLTranLine)         = pidAccount
		set $$$FINGLTranLineDebit(objFINGLTranLine)           = pcurDebit
		set $$$FINGLTranLineCredit(objFINGLTranLine)          = pcurCredit
		set $$$FINGLTranLineTransactionDate(objFINGLTranLine) = pdteTransactionDate
		set $$$FINGLTranLineReference(objFINGLTranLine)       = pstrReference
		set $$$FINGLTranLineCleared(objFINGLTranLine)         = pstrClearLine
		set $$$FINGLTranLineCompany1(objFINGLTranLine)        = pidCompany        ; Store the IC fields
		set $$$FINGLTranLineCompanyAccount(objFINGLTranLine)  = pidCompanyAccount
		
		if intLineNumber="" set intLineNumber = $order(^FINGLTranLine(YM,pidTran,""),-1)+1
		set strStatus = $$$Save("FINGLTranLine",pidTran_","_intLineNumber,objFINGLTranLine,$$$YES)
		
		if $$$ISOK(strStatus) set ^CacheTempTranLine(YUSER) = intLineNumber
	}
	quit strStatus
	
	
PostLine(pidTran,pidLineNumber,pstrAccountTotalType,pblnForce=0,pblnStore=$$$NO)
	;-------------------------------------------------------------------------------
	; Posts a transaction line to the GL.
	;
	; Returns:
	;
	; History:
	; 11-Oct-2005	RPW		SR13639: Added pblnStore to handle not directly
	; 							saving data now, but put it off until later
	; 02-Jun-2004	shobby	CanPostToThisAccount and AddAmount seem to have moved.
	; 02-Jun-2004	SCR		FC Upgrade & Changed to Single Amount
	; 02-Apr-2004	shobby	Error message was lost if CanPostToThisAccount failed (TR007478)
	; 17-Mar-2004	shobby	Always post to an account when the pblnForce flag is set.
	; 24-Oct-2003	shobby	Some speed ups.  RePostAllLines^FINGLTran is a bit slow.
	; 16-Sep-2003	shobpk	Added Force flag to post to closed periods
	;-------------------------------------------------------------------------------
	new curAmount,curCredit,curDebit,dteTransDate,idAccount,idTranType
	new objTranLine,strStatus
	
	set strStatus   = $$$OK
	
	set objTranLine = $get(^FINGLTranLine(YM,pidTran,pidLineNumber,1))
	set idAccount   = $$$FINGLTranLineAccount(objTranLine)
	set curDebit    = $$$FINGLTranLineDebit(objTranLine)
	set curCredit   = $$$FINGLTranLineCredit(objTranLine)
	set curAmount   = $$$FCSub(curDebit,curCredit)
	
	; Assume that, when reposting all transactions, we ignore such things as whether an account is on hold.
	if 'pblnForce {
		set strStatus=$$CanPostToThisAccount^FINGLAccountProcess(idAccount,curAmount)
	}
 
	if $$$ISOK(strStatus) {
		set dteTransDate = $piece(objTranLine,Y,4)
		set idTranType   = $piece($get(^FINGLTran(YM,pidTran,1)),Y,3)
		set strStatus = $$AddAmount^FINGLAccountProcess(idAccount,curAmount,dteTransDate,idTranType,pstrAccountTotalType,pblnForce,pblnStore)
	}
	quit strStatus
	
	
GetBatchDescription(pidTran)
    ;-------------------------------------------------------------------------------
    ; For a transaction, get its batch description if it has one.
    ;
    ; Returns: string (strDescription)
    ;
    ; History:
    ; 10-May-2005	SteveS	SR12315: Created
    ;-------------------------------------------------------------------------------
	new idSource,idType,objBatch,objBatchType,objTran,strDesc,strSource
 
	set strDesc = ""
	
	if $get(pidTran)'="" {
		set objTran   = $get(^FINGLTran(YM,pidTran,1))
		set idSource  = $piece($$$FINGLTranSource(objTran),$$$COMMA,1)
		set strSource = $piece($$$FINGLTranSource(objTran),$$$COMMA,2)
		
		if (idSource'="") && (strSource="FININTBatch") {
			set objBatch = $get(^FININTBatch(YM,idSource,1))
			set idType   = $$$FININTBatchBatchType(objBatch)
			if idType'="" {
				set objBatchType = $get(^FININTBatchType(YM,idType,1))
				set strDesc      = $$$FININTBatchTypeDescription(objBatchType)_" ("_idType_")"
			}
		}
	}
	quit strDesc
	
	
JumpToSource
    ;-------------------------------------------------------------------------------
    ; Inserts the source link
    ; 
    ; Called By : Form FINGLTran : Execute After Primary Key
    ; Returns:
    ;
    ; History:
    ; 10-May-2005	SteveS	Commented -- use macros for properties
    ;-------------------------------------------------------------------------------
	new objTran,strSource,strClassName,strForm,idSource
	
	;TODO: Use InsertLink^COMTable to do all this.
	
	if $get(YKEY)'="" {
		set objTran      = $get(^FINGLTran(YM,YKEY,1))
		set strSource    = $$$FINGLTranSource(objTran)
		set strClassName = $piece(strSource,",",2)
		set idSource     = $piece(strSource,",",1)
		set strForm      = ""
		
		if strClassName="FINGLJournal"      set strForm = "FINGLJournal"
		if strClassName="FININTBatch"       set strForm = "FININTBatch"
		if strClassName="FINGLBankRecon"    set strForm = "FINGLBankRecon"
		if strClassName="FINGLDistribution" set strForm = "FINGLDistribution"
		
 		write YCR,"<NOBR>"
 		write YCR,"<TABLE BORDER=0 CELLSPACING=0>"
 		write "<TR>"
 		write "<TD NOWRAP>"
 		write "<FONT SIZE=2>"
 		write "&nbsp;"
 		write "&nbsp;"
 		write "&nbsp;"
 		
 		if strForm'="" {
 			write "<A HREF="_""""_YAKTION_"EP=WWWFORM&YFORM="_strForm_"&YKEY="_idSource
 			write "&YBACK="_YBACK_"FINGLTran,"
 			write "&YUCI="_YUCI
 			write "&YBED="_YBED
 			write "&YM="_YM
 			write "&YUSER="_YUSER
 			write """"_">"
 		}
 		
 		write $$$Text("Fin00038",0)_": "_idSource  ; "Source Transaction"
 		
 		if strForm'="" {
	 		write "  "_$$^WWWFORMNAME(strForm)
 			write "</A>"
		}
		; FIXME : </FONT>? + </TD></TR></TABLE>?
	}
	
	quit
	
	
RePostAllLinesBackGround()
	;-------------------------------------------------------------------------------
	; Calls RePostAllLines to reprocess ^FINGLPeriodTotal
	; Didn't successfully get the Process to run as a separate process.
	;
	; Returns:
	;
	; History:
	; 22-Feb-2006	JW		SR13942: Rolled back change
	; 21-Dec-2005	RPW		SR13942: Pass the current environment through to the job.
	; 06-Jul-2005	JW		SR12883: Used WWWINFO
	; 17-Mar-2003	shobby	Include additional line to refer to System Log.
	; 24-Oct-2003	shobby	Creation (TR006248)
	;-------------------------------------------------------------------------------
	new strMessage
	
	set strMessage = $$$Text("Fin00290")_"<br>"  ; "All Transactions are being processed to update Period Totals."
					_$$$Text("Fin00291")_"<br>"  ; "This will take a few minutes before the data is available."
					_$$$Text("Fin00292")_"<p>"   ; "Press the Back Button to Return."
					_$$$Text("Fin00293")         ; "View the System Log for 'RepostAllLines' to determine if this process was successful."
	
	do ^WWWINFO(strMessage,,,,$$$YES)
	do JobWrapper^COMUtilJob("RePostAllLines^FINGLTran()",YUSER)
	quit
	
	
RePostAllLines(blnBackGround=$$$YES)
	;-------------------------------------------------------------------------------
	; Kills all of the account total and period total information, then repost
	; all of the GL Transactions.
	;
	; Returns:
	;
	; History:
	; 21-Dec-2006	GRF		SR14039: replace single character variable; simplify test;
	; 							Add BackGround parameter & apply to write commands
	; 28-Apr-2006	SC		SR14392: Undo Changes.
	; 29-Mar-2006 	SC		SR13942: No longer set environment within routine. 
	; 							Maintained by calling function.
	; 09-Feb-2005	Paul K	Allow user to jump to stuffed up tran.
	; 18-Mar-2004	shobby	Some logic to only do saves if the values have changed.
	; 17-Mar-2004	shobby	Upgraded to place messages in the Message Log, so
	; 							that success or otherwise can be determined.
	; 16-Sep-2003	shobpk	Commented
	;-------------------------------------------------------------------------------
	new count,idErrorTran,idLog,idPeriod,idTran,idTranType
 	new intLineNumber,lngErrors,strStatus,strStatusFirstError
 	
	write:'blnBackGround $horolog_$$$CRLF
	
 	do StartLog^COMLog("RePostAllLines",.idLog)
	do AddMessage^COMLog(idLog,$$$Text("Fin00286")_": "_$zdt($horolog,3),"") ; "Start"
 
	kill ^CacheTemp("FINGLPeriodTotal",YUSER)
	kill ^CacheTemp("FINGLAccountTotal",YUSER)
	do AddMessage^COMLog(idLog,$$$Text("Fin00287"),"")  ; "Old Period Totals removed."
	
	set strStatus   = $$$OK
	set strStatusFirstError = $$$OK
	set lngErrors   = 0
	set idErrorTran = ""
	
	set idTran = ""
	for count = 1:1 {
		set idTran = $order(^FINGLTran(YM,idTran))
		quit:idTran=""
		
		set strStatus = $$Post(idTran,1)
		write:'blnBackGround "Tran="_idTran,!
		if count#1000 = 0 {
			do AddMessage^COMLog(idLog,$$$Text($listbuild("Fin00294",count)),"")
		} ; "Transaction %1 Processed."
		
		if $$$ISERR(strStatus) {
			if $$$ISOK(strStatusFirstError) {
				set strStatusFirstError = strStatus
				set idErrorTran         = idTran
			}
			write:'blnBackGround !,"Tran : "_idTran_" Error : "_$$$Text(strStatus)
			set lngErrors = lngErrors + 1
		}
	}
 
	write:'blnBackGround $horolog_$$$CRLF
	do AddMessage^COMLog(idLog,$$RemoveUnusedPeriodTotals(),"")
	do AddMessage^COMLog(idLog,$$UpdatePeriodTotals(),"")
	kill ^CacheTemp("FINGLPeriodTotal",YUSER)
	do AddMessage^COMLog(idLog,$$RemoveUnusedAccountTotals(),"")
	do AddMessage^COMLog(idLog,$$UpdateAccountTotals(),"")
	kill ^CacheTemp("FINGLAccountTotal",YUSER)
	
	if $$$ISERR(strStatusFirstError) {
		do AddMessage^COMLog(idLog,$$$Text(strStatusFirstError),"","FINGLTran",idErrorTran)
	}
	do AddMessage^COMLog(idLog,lngErrors_" "_$$$Text("Fin00288"),"")          ; "Errors while posting transactions."
	do AddMessage^COMLog(idLog,$$$Text("Fin00289")_": "_$zdt($horolog,3),"")  ; "Finished"
	
	quit strStatus
	
	
UpdateAccountTotals()
    ;-------------------------------------------------------------------------------
    ; Update existing Account Totals
    ;
    ; Returns:
    ;
    ; History:
    ; 14-Jun-2006	RPW		SR14642: Use the COMUtils Save, not FINSYS macro
    ; 10-Sep-2005	RPW		SR13639: Use new GetAmount macro instead of function call.
	; 21-Sep-2004	shobby	If posting a Foreign Currency amount to a non foreign
	; 						currency amount, convert to Base amount.
    ; 18-Mar-2004	shobby	Created (TR007251)
    ;-------------------------------------------------------------------------------
	new idAccount,idType,fltAmount
	
	set idAccount=""
	for {
		set idAccount=$order(^CacheTemp("FINGLAccountTotal",YUSER,idAccount))
		quit:idAccount=""
		
		set idType=""
		for {
			set idType=$order(^CacheTemp("FINGLAccountTotal",YUSER,idAccount,idType))
			quit:idType=""
			
			set fltAmount=$get(^CacheTemp("FINGLAccountTotal",YUSER,idAccount,idType))
			if fltAmount=0 {
				do KILL^FINSYS("FINGLAccountTotal",idAccount_","_idType)
			} else {
				if $get(^FINGLAccountTotal(YM,idAccount,idType,1))'=fltAmount {
					;set fltAmount=$$GetAmount^FINGLAccountProcess(idAccount,fltAmount)  ;<TODO FC>
					set fltAmount=$$$GetAmount(idAccount,fltAmount)  ;<TODO FC> ; SR13639
					do Save^COMUtils("FINGLAccountTotal",idAccount_","_idType,fltAmount,1)
				}
			}
		}
	}
	quit $$$Text("Fin00298")  ;Updating existing Account Totals.
 
 
RemoveUnusedAccountTotals()
    ;-------------------------------------------------------------------------------
    ; Removes unused Account Totals after recalculation
    ;
    ; Returns:
    ;
    ; History:
    ; 18-Mar-2004	shobby	Created (TR007251)
    ;-------------------------------------------------------------------------------
	new idAccount,idType
	
	set idAccount=""
	for {
		set idAccount=$order(^FINGLAccountTotal(YM,idAccount))
		quit:idAccount=""
		
		set idType=""
		for {
			set idType=$order(^FINGLAccountTotal(YM,idAccount,idType))
			quit:idType=""
			
			if '$data(^CacheTemp("FINGLAccountTotal",YUSER,idAccount,idType)) {
				do KILL^FINSYS("FINGLAccountTotal",idAccount_","_idType)
			}
		}
	}
	quit $$$Text("Fin00297")  ; "Removing unused Account Totals"
	
	
UpdatePeriodTotals()
    ;-------------------------------------------------------------------------------
    ; Update existing Period Totals
    ;
    ; Returns:
    ;
    ; History:
    ; 14-Jun-2006	RPW		SR14642: Use the COMUtils save not FINSYS
    ; 10-Sep-2005	RPW		SR13639: Use new GetAmount macro instead of function call.
	; 21-Sep-2004	shobby	If posting a Foreign Currency amount to a non foreign
	; 							currency amount, convert to Base amount.
    ; 18-Mar-2004	shobby	Created (TR007251)
    ;-------------------------------------------------------------------------------
	new idAccount,idPeriod,idTransactionType,fltAmount
	
	set idAccount=""
	for {
		set idAccount=$order(^CacheTemp("FINGLPeriodTotal",YUSER,idAccount))
		quit:idAccount=""
		
		set idPeriod=""
		for {
			set idPeriod=$order(^CacheTemp("FINGLPeriodTotal",YUSER,idAccount,idPeriod))
			quit:idPeriod=""
			
			set idTransactionType=""
			for {
				set idTransactionType=$order(^CacheTemp("FINGLPeriodTotal",YUSER,idAccount,idPeriod,idTransactionType))		
				quit:idTransactionType=""
				
				set fltAmount=$get(^CacheTemp("FINGLPeriodTotal",YUSER,idAccount,idPeriod,idTransactionType))
				if fltAmount=0 {
					do KILL^COMUtils("FINGLPeriodTotal",idAccount_","_idPeriod_","_idTransactionType)
				} else {
					if $get(^FINGLPeriodTotal(YM,idAccount,idPeriod,idTransactionType,1))'=fltAmount {
						set fltAmount=$$$GetAmount(idAccount,fltAmount)        ;<TODO FC>
						do Save^COMUtils("FINGLPeriodTotal",idAccount_","_idPeriod_","_idTransactionType,fltAmount,$$$YES)
					}
				}
			}
		}
	}
	quit $$$Text("Fin00296")  ; "Updating existing Period Totals."
	
	
RemoveUnusedPeriodTotals()
    ;-------------------------------------------------------------------------------
    ; Removes unused Period Totals after recalculation
    ;
    ; Returns:
    ;
    ; History:
    ; 18-Mar-2004	shobby	Created (TR007251)
    ;-------------------------------------------------------------------------------
	new idAccount,idPeriod,idTransactionType
	
	set idAccount=""
	for {
		set idAccount=$order(^FINGLPeriodTotal(YM,idAccount))
		quit:idAccount=""
		
		set idPeriod=""
		for {
			set idPeriod=$order(^FINGLPeriodTotal(YM,idAccount,idPeriod))
			quit:idPeriod=""
			
			set idTransactionType=""
			for {
				set idTransactionType=$order(^FINGLPeriodTotal(YM,idAccount,idPeriod,idTransactionType))
				quit:idTransactionType=""
				
				if '$data(^CacheTemp("FINGLPeriodTotal",YUSER,idAccount,idPeriod,idTransactionType)) {
					do KILL^FINSYS("FINGLPeriodTotal",idAccount_","_idPeriod_","_idTransactionType)
				}
			}
		}
	}
	quit $$$Text("Fin00295")  ; "Removing unused Period Totals"
	
	
SetAmountType
    ;-------------------------------------------------------------------------------
	; History:
	; 14-Jun-2006	RPW		SR14642: Use the COMUtils save not FINSYS
    ;-------------------------------------------------------------------------------
	new idTran,objTran,lngCount
	
	set idTran=""
	set lngCount=0
 
	for {
		set idTran=$order(^FINGLTran(YM,idTran))
		quit:idTran=""
		
		set objTran=$get(^FINGLTran(YM,idTran,1))
		if $$$FINGLTranAmountType(objTran)="" {
			set $$$FINGLTranAmountType(objTran)="BAL"
			do Save^COMUtils("FINGLTran",idTran,objTran)
			set lngCount=lngCount+1
		}
	}
	write !,"Transactions modified: "_lngCount
	quit
	
	
SetTransactionDate
    ;-------------------------------------------------------------------------------
	; History:
	; 14-Jun-2006	RPW		SR14642: Use the COMUtils save not FINSYS
    ;-------------------------------------------------------------------------------
	new idTran,objTran,lngCount,idTranLine,objTranLine
	
	set idTran=""
	set lngCount=0
 
	for {
		set idTran=$order(^FINGLTran(YM,idTran))
		quit:idTran=""
		
		set objTran=$get(^FINGLTran(YM,idTran,1))
		if $piece($$$FINGLTranTransactionDate(objTran),",",2)'="" {
			set $$$FINGLTranTransactionDate(objTran)=$piece($$$FINGLTranTransactionDate(objTran),",",1)
			do Save^COMUtils("FINGLTran",idTran,objTran)
			set lngCount=lngCount+1
		}
		set idTranLine=""
		for {
			set idTranLine=$order(^FINGLTranLine(YM,idTran,idTranLine))
			quit:idTranLine=""
			
			set objTranLine=$get(^FINGLTranLine(YM,idTran,idTranLine,1))
			if $piece($$$FINGLTranLineTransactionDate(objTranLine),",",2)'="" {
				set $$$FINGLTranLineTransactionDate(objTranLine)=$piece($$$FINGLTranLineTransactionDate(objTranLine),",",1)
				do Save^COMUtils("FINGLTranLine",idTran_","_idTranLine,objTranLine)
				set lngCount=lngCount+1
			}
		}
	}
	write !,"Transactions modified: "_lngCount
	quit
	
	
OnBeforeDelete(pYKEY)
	;-------------------------------------------------------------------------------
	; Checks whether this item can be deleted.
	; 
	; Notes: (Do not remove the following notes, used by 'Structure')
	; 		**Delete Check** FINGLBankReconCleared - FINGLTran can not be deleted.
	; 		**Delete Check** FINGLJournalHist - FINGLTran can not be deleted.
	; 		**Delete Check** FINGLTranLine - FINGLTran can not be deleted.
	; 		**Delete Check** FININTBatch - FINGLTran can not be deleted.
	; 
	; History
	; 10-Mar-2004	shobby	Creation
	;-------------------------------------------------------------------------------
	quit $$$OK
	
	
PostReversal(pidTran,pidDate,pidTranRev)
    ;-------------------------------------------------------------------------------
    ;
    ; Returns:
    ;
    ; History:
    ; 14-Jun-2006	RPW		SR14642: Use the $$$Save macro
    ; 09-Aug-2005	shobby	SR13154:Use the reversal date for the Transaction date of the reversal.
    ; 30-May-2005	JW		Created SR12427
    ;-------------------------------------------------------------------------------
	new strStatus,tempAmount,objTran,objLine,idLine
	
	if $get(pidTran)'="" && ($get(pidDate)'="") {
		set objTran   = $get(^FINGLTran(YM,pidTran,1))
		set strStatus = $$Create^FINGLTran(.pidTranRev,$$$FINGLTranSource(objTran),pidDate,
											  $$$FINGLTranTransactionType(objTran),$$$FINGLTranAmountType(objTran))
		
		if $$$ISOK(strStatus) {
			set idLine = ""
			for {
				set idLine=$order(^FINGLTranLine(YM,pidTran,idLine))
				quit:idLine=""
				
				set objLine    = $get(^FINGLTranLine(YM,pidTran,idLine,1))
				set tempAmount = $$$FINGLTranLineDebit(objLine)
				set $$$FINGLTranLineDebit(objLine)           = $$$FINGLTranLineCredit(objLine)
				set $$$FINGLTranLineCredit(objLine)          = tempAmount
				set $$$FINGLTranLineTransactionDate(objLine) = pidDate
				
				set strStatus = $$$Save("FINGLTranLine",pidTranRev_","_idLine,objLine)
				quit:$$$ISERR(strStatus)
			}
			
]]><![CDATA[			if $$$ISOK(strStatus) {
				set strStatus = $$Post^FINGLTran(pidTranRev)
			}
		}
	}
	quit strStatus
	
]]></Routine>
</Export>