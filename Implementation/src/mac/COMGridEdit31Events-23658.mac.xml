<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMGridEdit31Events" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMGridEdit31Events
	
#include COMConst
#include COMGridEdit31
#include WWWConst
	
#def1arg WWWDATEN(%args)	^WWWDATEN(0,+$horolog,YUSER,YFORM,"V",%args)
#define IsPrimaryKey(%1)	(%1=0)
	
#define LogR(%1,%2)		;
#define LogR2(%1,%2)	;
#define LogRx(%1)		;
#define LogR2x(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^CGEEvents("_%2_") : "_$zh $$$JournalOn
#;define LogR2(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^CGEEvents("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR2x(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
OnDisplayRightClickMenu(pstrYFORM="",pintLine="")
	;-------------------------------------------------------------------------------
	; Code to build customised right click menus
	;
	; Returns: List of menu items each either a list of 5 entries corresponding to
	;          the parameters in AddRow^COMViewColumnMenu or "Separator"
	;
	; History:
	; 06-Oct-2005	JW		SR11573: Call CallEvent
	; 25-Feb-2005	shobby	Set initial value for lstNewMenuItems.
	; 23-Feb-2005	Shobby	Created
	;-------------------------------------------------------------------------------
	new lstNewMenuItems,YFELD,YFORM,YKEY

	set YFORM = pstrYFORM
	if pstrYFORM="" set YFORM = $get(^CacheTemp(YUSER,"Grid","Name"))
	
	set YKEY  = $$GetYKEY^COMGridEdit31G(pintLine,pstrYFORM)
	set YFELD = $$GetYFELDEX^COMGridEdit31G(pstrYFORM,YKEY)
	
	set lstNewMenuItems = ""
	do CallEvent("set lstNewMenuItems=$$OnDisplayRightClickMenu^"_YFORM_"(YKEY,YFELD,YFORM)","RightClick")  ; *** EXECUTE Grid ***
	
	quit lstNewMenuItems
 	
 	
OnBlur(pstrYLFDAT,pstrYKEY,&YFELD,pblnUpdateContainer=$$$YES)
	;-------------------------------------------------------------------------------
	; Call out to any onBlur code.   (OnBlur is actually OnChange)
	; NOTE : Appears data in YFELD has not been written into WWWDATEN at this stage
	;
	; Called By : ^COMGridEdit31S, OnClickError^COMGridEdit31S
	; 
	; Inputs :	pstrYLFDAT    : "Yr_c"   where row 'r' & column 'c' are copied to GROW and GCOL
	; 			pstrYKEY      : idGridClass   e.g. idContainer,idGridLine
	; 			YFELD [byRef] : objGridClass
	; 			pblnUpdateContainer : Update headers, now that the grid has been updated.
	; 			
	; Returns: nothing
	; 
	; Note.		Use standard naming for YFELD when calling OnBlur events.
	;
	; History:
	; 06-Jan-2011	GRF		SR17579: Use explicit tag for WWWTR calls
	; 05-Jan-2010	GRF		SR15525: Call to $$Convert^WWWTR rather than $$^WWWTR
	; 01-Sep-2009	shobby	SR16411: Get YFELDCONTAINER before blur code is run.
	; 06-May-2009	PPP		SR16521: Barcodes scanned to get Item # (YINHALT, can be
	; 							changed in the current routine).
	; 15-Oct-2008	GRF		SR15810: comments
	; 21-Apr-2008	heber	SRBR014936: Disable updating style to keep applied rules(WWW122D2)
	; 13-Apr-2008	heber	SRBR014932: Apply masking to grid fields
	; 08-Jul-2007	shobby	SRBR014616: Consider customisation rules.
	; 06-Jul-2007	shobby	SRBR014553: Consider customisation of WWW122, Renamed
	; 							objFormField to objWWW122
	; 26-Mar-2007	JW		SR15384: Changed name from GetValidationDetails
	; 17-Jan-2007	RPW		SR15249: Always define YKEY here for OnBeforeFormat.
	; 21-Sep-2006	JW		SR15063: Define YDATEI,YLFN.
	; 05-Jul-2006	RPW		SR12522: If we have a relation, check if it uses quick search
	; 26-Jun-2006	JW		SR12775: Always call ScreenUpdate - to update style
	; 31-Oct-2005	JW		SR13626: ExecuteCode is unnecessary
	; 16-Aug-2005	RPW		SR11983: Attempt to determine if the user changed this
	; 							value or the system.
	; 28-Jun-2005	JW		SR10412: Added macros. Define GFLD - replaces strFieldNo
	; 02-Jun-2005	PO		SR:12050 Removed some work from SR:11349, removed code
	; 							for editting base amount of a FC amount
	; 24-May-2005	JW		SR11573: Moved UpdateContainer outside if and only call it
	; 							if pblnUpdateContainer. eg. Don't when ClickAllRows
	; 18-Apr-2005	PO		SR11349: FC support
	; 08-Apr-2005	RobertW	SR11836: Change FCMake to FCJoin
	; 17-Mar-2005	JW		SR11916: Update headers
	; 03-Feb-2005	RobertW	Use the new ExecuteCode Command in COMUtils
	; 07-Dec-2004	Shobby	Created
	;-------------------------------------------------------------------------------
	; "Standard" call will have a format similar to;
	;                  do OnBlur^FormName(YKEY,.YFELD,GROW,GCOL)
	; 
	; May assume passing : GCOL,GROW,GDATA,GKEY,YKEY,YFELD and perhaps GFLD
	;
	;-------------------------------------------------------------------------------
	new amtFC,blnTest,idClass,idRelation,idDisplay,GCOL,GDATA,GFLD,GKEY,GROW,objWWW122
	new strCommand,strCur,strFieldNo,strRelKeys,strSortKeys,strValue,strYFELDOld
 	new YFELDCONTAINER
 
 	set YFELDCONTAINER  = $$$GRIDYFELDContainer

	$$$LogR2("OnBlur",$get(pstrYKEY)_":"_$get(YFELD)_"<"_pstrYLFDAT_"<")
	
	set GCOL = $piece(pstrYLFDAT,"_",2)

	set objWWW122 = $$Get^WWW122(YFORM,GCOL) ; FIXME : Neither field used is customisable - faster to have direct get
	
	set GFLD        = $$$WWW122SequenceNumber(objWWW122)   ; Class Field No
	set strYFELDOld = YFELD
	set pstrYKEY    = $translate($get(pstrYKEY),"""")
	set YKEY        = pstrYKEY
	
	set GROW = $piece($piece(pstrYLFDAT,"_",1),"Y",2)
	
 
	set idClass = $$$GRIDClass(YFORM)
	if (idClass'="") && (GFLD'="") {
		do GetDetails^WWWFieldValidation("D",YFORM,idClass,GFLD,"",,.idRelation)
		if idRelation'="" {
			set ($piece(YFELD,Y,GFLD),YINHALT) = $$PerformQuickSearch^COMQuickSearch(idRelation,$piece(YFELD,Y,GFLD))
			$$$GRIDSplitKey(pstrYLFDAT,intRow,intCol)
			do UpdateManualField^COMGridEdit31G(intRow,intCol,$piece(YFELD,Y,GFLD)) 
		}
 	}
	
	if $$$WWW122ExecuteOnBlur(objWWW122)'="" {             ; *** EXECUTE Grid ***  May assume passing : GCOL,GROW,GFLD,GDATA,GKEY,YKEY,YFELD
		set GKEY  = pstrYKEY
		set GDATA = YFELD
		set strCommand = $$$WWW122ExecuteOnBlur(objWWW122)
		
 		; If entered amount is not qualified with a currency and currently displaying FC then make amount FC
		if GFLD'="" {
			set strValue = $piece(YFELD,Y,GFLD)
			if ($$GetFieldType^COMUtilClass(YFORM,GCOL)=8) {
				set strCur = $get(^CacheTemp(YUSER,$get(^CacheTemp(YUSER,"Grid","Container")),"Display Currency"))
				
	; FIXME: <GRF> strValue is ALREADY an internal value
	;vvvvvvvvvvvvvvvv likely replacement code
	;			if ($$$CurrencyToUse="Foreign")&&'$$$AmountIsFC(strValue) {
	;				set $piece(YFELD,Y,GFLD) = strCur_strValue
	;^^^^^^^^^^^^^^^^ 
				if ($$$CurrencyToUse="Foreign") && '$$$AmountIsFC($$GetInternal^WWWTR(8,strValue)) {
					set $piece(YFELD,Y,GFLD) = $$GetInternal^WWWTR(8,strCur_strValue)
				}
			}
		}
		xecute strCommand 
	}
	
	$$$LogR2x("31E-OB:1:"_YFELD)
 	do ApplyCoreMasking^WWWFORM8(GROW,YFORM,.YFELD)
	$$$LogR2x("31E-OB:2:"_YFELD)
	do CheckRules^WWWEVENT(YFORM,.YFELD,GROW)
	$$$LogR2x("31E-OB:3:"_YFELD)
	
	;---------------------------------------
	; Update WWWDATEN Record
	;---------------------------------------
	
	if YBED'["aSHOBBY" {           // SRBR014936
		do ScreenUpdate^COMGridEdit31S(pstrYLFDAT,YFELD,strYFELDOld)
	} else {
		do ScreenUpdate^COMGridEdit31S(pstrYLFDAT,YFELD,strYFELDOld,,,$$$YES)
	}
	; Update headers, now that the grid has been updated.
	if pblnUpdateContainer {
		do UpdateContainer^COMGridEdit31G(GFLD)
	}
	quit
	
	
PerformQuickSearch(pidClass,objData)
	;-------------------------------------------------------------------------------
	; Call the class based Perform Quick Search.
	;
	; Params:
	; pidClass: The id of the class to search on
	; objData : The data of the field that has been changed.
	;
	; ByRefs:
	;
	; Returns:
	; objObject: This can be any data type, we are unsure.
	;
	; History:
	; 05-Jul-2006	RPW		SR12522: Created
	;-------------------------------------------------------------------------------
	new objObject
	
	set objObject=""
	$$$CallEvent("set objObject=$$PerformQuickSearch^"_pidClass_"(objData)","QuickSearch")  ; FIXME : pidClass or pidForm? <GRF>
	
	quit objObject
	
	
OnColumnResize(pid,pintWidth)
	;-------------------------------------------------------------------------------
	;
	; Returns:
	;
	; History:
	; 24-Aug-2005	shobby	SR11983: Structure of line ids now includes form name.
	; 07-Jun-2005	shobby	SR12449: Initial value for strType.
	; 06-Jun-2005	shobby	SR12449: Included Primary Key.
	;-------------------------------------------------------------------------------
	new idCOMGridEditLayout,intField,objCOMGridEditLayout,strForm,strStatus,strType
	
	set strForm  = $piece(pid,";",1)
	set pid      = $piece(pid,";",2)
	set strType  = ""
	set intField = $piece($piece(pid,"fld",2),"_",3)
	if intField="" {
		set intField = $piece(pid,"key",2)
		if intField'="Expand" {
			set intField = $piece($piece(pid,"key",2),"_",3)
		}
		set strType = "P"
	}
	set idCOMGridEditLayout = """"_YBED_""","""_strForm_""","_strType_intField
	set $$$COMGridEditLayoutWidth(objCOMGridEditLayout) = pintWidth        ; FIXME : why not add \1 ? <GRF>
	set strStatus = $$$Save("COMGridEditLayout",idCOMGridEditLayout,objCOMGridEditLayout,$$$YES)
	quit
	
	
OnBeforeDisplayCombo(pYKEY,pYFIELDNAME,&pSUCH,&pblnOverride)
	;-------------------------------------------------------------------------------
	; Before displaying the combo call out to see if we want to generate a custom
	; list.
	; 
	; Called By : SELECT^COMGridEdit31F
	;
	; Inputs:
	;	pYKEY				
	;	pYFIELDNAME			(t?)Yrow_col
	;	pSUCH				ByRef : Override? / Returned Search
	;	pblnOverride		ByRef : 
	;
	; Returns:
	;
	; History:
	; 31-Aug-2011	shobby	SR17889: Create a YFELDCONTAINER variable to be used in
	;                          all OnBeforeDisplayCombo routines.
	; 30-Oct-2008	GRF		Show & for ByRef
	; 06-Oct-2005	JW		SR11573: Call CallEvent
	; 03-Feb-2005	RobertW	Use the new ExecuteCode Command in COMUtils...
	; 18-Jan-2005	Shobby	Created (SR10061)
	;-------------------------------------------------------------------------------
	new intRow,YCOL,YFELD,YFORM,YKEY
	new YFELDCONTAINER ;SR17889
	
	set YFORM  = $get(^CacheTemp(YUSER,"Grid","Name"))
	set intRow = $piece($piece(pYFIELDNAME,"Y",2),"_",1)
	set YCOL   = $piece(pYFIELDNAME,"_",2)
	set YKEY   = $$GetYKEY^COMGridEdit31G(intRow)
	set YFELD  = $$GetYFELDEX^COMGridEdit31G(YFORM,YKEY)
	set YFELDCONTAINER=$$GetYFELDContainer^COMGridEdit31G() ;SR17889
	
	do CallEvent("set pblnOverride=$$OnBeforeDisplayCombo^"_YFORM_"(YKEY,YFELD,YCOL,.pSUCH)","Combo") ; *** EXECUTE Grid ***
	
	quit
	
	
OnBeforeFormConstruction(pYTXT,YBBN) ;CORE-233.11
	;-------------------------------------------------------------------------------
	;	EXECUTE VOR DATENFELD
	; 
	; History:
	; 16-Aug-2013	shobby	CORE-233.11: YBBN
	; 19-Jun-2009	GRF		Use field macro
	; 01-Sep-2004	FIS		26346
	;-------------------------------------------------------------------------------
	if $$$WWW122ExecuteBeforeDataField(pYTXT) '="" {
		xecute $$$WWW122ExecuteBeforeDataField(pYTXT)           ; *** EXECUTE Grid ***
	}
	quit
	
	
OnBeforePrimaryKey(YFORM)
	;-------------------------------------------------------------------------------
	; Before the field is drawn allow new information to be used.
	;
	; Inputs:
	;
	; ByRef:
	;
	; Returns:
	;
	; History:
	; 08-Oct-2009	GRF		SR16886: Use CallEvent wrapper
	; 29-May-2007	RPW		SR15513: Created
	;-------------------------------------------------------------------------------
 	;do ExecuteCode^COMUtils("do OnBeforePrimaryKey^"_YFORM_"()")
	do CallEvent("do OnBeforePrimaryKey^"_YFORM_"()","BeforeKey") ; *** EXECUTE Grid ***
	quit
	
	
UpdatePrimaryKeyFormat(YFORM,pintRow,pobjRow,&pblnUpdate)
	;-------------------------------------------------------------------------------
	; Before the field is drawn allow new information to be used.
	;
	; Inputs:
	;
	; ByRef:
	;
	; Returns:
	;
	; History:
	; 08-Oct-2009	GRF		SR16886: Use CallEvent wrapper
	; 10-Sep-2009	PPP		SR16886: Created
	;-------------------------------------------------------------------------------
 	;do ExecuteCode^COMUtils("do UpdatePrimaryKeyFormat^"_YFORM_"(pintRow,pobjRow,.pblnUpdate)")
	do CallEvent("do UpdatePrimaryKeyFormat^"_YFORM_"(pintRow,pobjRow,.pblnUpdate)","KeyFormat") ; *** EXECUTE Grid ***
	quit
	
	
OnAfterPrimaryKey(YFORM,YKEY)
	;-------------------------------------------------------------------------------
	; 31-Oct-2005	JW		SR13626: ExecuteCode is unnecessary
	; 03-Feb-2005	RobertW	Use the new ExecuteCode Command in COMUtils...
	;-------------------------------------------------------------------------------
	new strCode
	
	set strCode = $$$WWW120ExecuteAfterPrimaryKey($$$GRIDYVOR(YFORM))
	if strCode'="" {
 		set YKEY = $translate(YKEY,"""")
 		xecute strCode                                               ; *** EXECUTE Grid ***
 	}
 	
	quit
	
	
OnBeforeButtonLine() 
	;-------------------------------------------------------------------------------
	; ByRef :
	; 	YKEY
	; 	??? Needed by strCode
	; 	
	; History:
	; 28-Nov-2008	HQN		SR16194: Created
	;-------------------------------------------------------------------------------
	new strCode
	
	set strCode = $$$WWW120ExecuteBeforeButtonline($$$GRIDYVOR(YFORM))
	if strCode'="" {
 		set YKEY = $translate(YKEY,"""")
 		xecute strCode                                               ; *** EXECUTE Grid ***
 	}
	quit
	
	
OnAfterDataFields()
	;-------------------------------------------------------------------------------
	; Routine that runs after all the fields in a record have been added.
	; This can be used to update fields on the main form based on the contents of
	; a grid.
	;
	; Returns:
	;
	; History:
	; 05-Apr-2006	JW		Put SR14093 check in UpdateContainer function
	; 03-Feb-2006	RPW		SR14093: Do not attempt to update the header if the
	; 							developer doesn't require this.
	; 31-Oct-2005	JW		SR13626: ExecuteCode is unnecessary
	; 17-Mar-2005	JW		SR11916: Update headers
	; 11-Mar-2005	JW		Added YSEITE.
	; 03-Feb-2005	RPW		Use the new ExecuteCode Command in COMUtils...
	; 14-Jan-2005	Shobby	Created
	;-------------------------------------------------------------------------------
	new strCode,YSEITE
	
	set YSEITE  = $get(^CacheTemp(YUSER,"Grid","YSEITE"))
	set strCode = $$$WWW120ExecuteAfterDataFields($$$GRIDYVOR(YFORM))
	xecute strCode                                                   ; *** EXECUTE Grid ***
		
	do UpdateContainer^COMGridEdit31G("",$$$NO)
	
	quit
	
	
OnBeforeDisplayLine(pYFORM,pYKEY="",pYFELD="")
	;------------------------------------------------------------------------------
	; Callout to module for custom code as to whether to show the line or not. (SR11054)
	;
	;	WARNING : This is called from within a $sortbegin/$sortend block.
	;	          ^WWWDATEN and other saved globals may not be available until
	;	          written at the end of the block.
	;
	; Returns:
	;
	; History:
	; 27-Aug-2009	shobby	SR16511: YFELDCONTAINER
	; 04-Aug-2006	JW		SR14730: Sped up - removed unnecessary lines
	; 06-Oct-2005	JW		SR11573: Call CallEvent
	; 03-Feb-2005	RobertW	Use the new ExecuteCode Command in COMUtils...
	; 06-Dec-2004	shobby	Include YKEY
	; 06-Dec-2004	Shobby	Created
	;-------------------------------------------------------------------------------
	new blnDisplay,YFELDCONTAINER
	
	set blnDisplay      = $$$YES
	set YFELDCONTAINER  = $$$GRIDYFELDContainer
	do CallEvent("set blnDisplay=$$OnBeforeDisplayLine^"_pYFORM_"(pYKEY,pYFELD)","Display")   ; *** EXECUTE Grid ***
	quit blnDisplay
	
	
OnBeforeFormat(YFORM,pYFIELDNAME,pblnOnBlur=$$$NO,pblnEnabled=$$$YES,pobjRow="")
	;-------------------------------------------------------------------------------
	; Formatting of a cell about to be displayed can be done through calling out to
	; routines associated with a form.
	; 
	; Called By : BodyFieldCell^COMGridEdit31Body
	;             ScreenUpdateStyle^COMGridEdit31S
	; 
	; Inputs:
	; 	YGRIDWHITE		Implicit
	; 
	; Returns:
	; 
	; Variables that can be modified include:
	; 	YTOOLTIP		YFONTCOLOR		YBACKGROUNDCOLOR		YFONT
	; 	YFONTSIZE		YWIDTH			YHEIGHT				 	YVALIGN
	;
	; History:
	; 24-Sep-2012	shobby	SR18123: Temporary change to set YKEY if not already defined.
	;							result of patching back to 1.70.4.br
	; 12-Jun-2012	shobby	SR18026: FOCUSFIELD preserved during processing.
	; 29-Aug-2011	shobby	SR17847: Brought OnBeforeFormat into line with other
	;							types of events.
	; 09-Mar-2010	shobby	SR17200: Corrected issue where warning was showing red text on
	; 							a red background.
	; 17-Jan-2007	RPW		SR15351: Optionally pass through edit grid row to save
	; 							getting multiple times when updating multiple fields
	; 12-Dec-2006	JW&PO	SR<>: Only change to mandatory colour if not already changed.
	; 28-Nov-2006	RPW		SR15249: Fixed the row number to handle subrows, ie 11x01
	; 10-Nov-2006	JW		SR15211: Define reason from cache if not blurring
	; 26-Jun-2006	JW		SR12775: Added validation and colour processing
	; 06-Oct-2005	JW		SR11573: Call CallEvent
	; 20-Jun-2005	shobby	If pYFIELDNAME is passed in with the td then strip it off.
	; 18-Mar-2005	shobby	Passed YFORM as a parameter rather than getting the form
	; 							name from ^CacheTemp.  Allows the grid to support
	; 							multiple forms in different lines.
	; 03-Feb-2005	RPW		Use the new ExecuteCode Command in COMUtils...
	; 14-Jan-2005	Shobby	Created
	;-------------------------------------------------------------------------------
	new blnValid,idClsFld,idField,intColour,intRow,strReason,strText,strValue,YFELD,YDATEI

	new YFOCUSFIELD							  		;SR18026
	set YFOCUSFIELD=$get($$$WWWDATEN("FOCUSFIELD")) ;SR18026
	
	;SR17847 vvvvv
	
	;SR17847 if $get($$$EventExists("Format"))'=$$$NO {
	;SR17847 	if $get(pYFIELDNAME)'="" {
	;SR17847 		set strText=""		// Not used
	;SR17847 		set intRow      = $piece($piece(pYFIELDNAME,"Y",2),"_",1)
	;SR17847 		set pYFIELDNAME = $translate(pYFIELDNAME,"td")
	;SR17847 		if pobjRow="" {
	;SR17847 			set YFELD = $$GetYFELD^COMGridEdit31G(YFORM,intRow)
	;SR17847 		} else {
	;SR17847 			set YFELD = pobjRow
	;SR17847 		}
	;SR17847 		do CallEvent("do OnBeforeFormat^"_YFORM_"(pYFIELDNAME,strText,YFELD)","Format")   ; *** EXECUTE Grid ***
	;SR17847 	}
	;SR17847 }
	
	set intRow      = $piece($piece(pYFIELDNAME,"Y",2),"_",1)
	set pYFIELDNAME = $translate(pYFIELDNAME,"td")
	if pobjRow="" {
		set YFELD = $$GetYFELD^COMGridEdit31G(YFORM,intRow)
	} else {
		set YFELD = pobjRow
	}
	
	;SESDF-952 vvvvv
	if (+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1)))) 
	   && (YFORM = "VARAlertaLocalLinha") && (+$G(^CacheTemp(YUSER,"Grid","Exporting")) = $$$YES){
		;Não executa o OnBeforeFormat se estiver exportando a grid
	}
	else{
		do ExecuteHook^WWW001Hook($$$GetClass(YFORM),$$$EnumWWWEVENTTYPEOnBeforeFormat,.YKEY,.YFELD,YFORM,,pYFIELDNAME)   ; *** EXECUTE Grid ***
		;SR17847 ^^^^^
	}
	;SESDF-952 ^^^^^
	
	; FIXME : Validation in the OnBeforeFormat subroutine may set YBACKGROUNDCOLOR and YTOOLTIP
	;         CallEvent wrapper seems to lose this setting for INIssueLine. <GRF> 

	if (YFORM'="") && pblnEnabled {
		set idField  = $piece(pYFIELDNAME,"_",2)		// Only validate single field
		set strValue = $get(^WWWDATEN(0,+$horolog,YUSER,YFORM,"V",pYFIELDNAME,1))
		
		// Only check on blur, as just displaying the data won't have changed it
		set blnValid = $$$YES
		if pblnOnBlur {
			$$$SetFocusField(pYFIELDNAME)	// To get the correct line in focus for validation
			
			set idClsFld = $$$GetClassField(YFORM,idField)
			if idClsFld'="" {
				set YDATEI = $$$GRIDClass(YFORM)
				set blnValid = $$ValidRelation^WWWFieldValidation("D",YDATEI,YFORM,idClsFld,strValue,$$$NO,.strReason)
				if 'blnValid {
					set $$$FLDRelError(pYFIELDNAME) = strReason		// Store error in cache
					if strReason'="" {
						$$$Alert(strReason)		// Alert if data access error
					}
				} else {
					kill $$$FLDRelError(pYFIELDNAME)
				}
			}
		} else {
			set blnValid = '$data($$$FLDRelError(pYFIELDNAME))		      // Check cache
			if 'blnValid set strReason = $$$FLDRelError(pYFIELDNAME)	  // get reason
		}
		
			if 'blnValid {
				set YWARNING = $$$YES
				if strReason="" set strReason = $listbuild("WWW00028",strValue) ; "´%1´ is invalid"
				set YTOOLTIP = $$$Text(strReason)
			
			} elseif $get($$$FLDMandatory(idField)) {
				set YMANDATORY = $$$YES
			}
	}
	new strDisabledColor,strRequiredColor,strWarningColor,strDisabledFontColor
	
	set strDisabledFontColor = "black"
	set strWarningColor  = $$$SysEnum("FARBE",$$$WWW012ColorforWarnings($get(^WWW012(0,0,1))))
	set strRequiredColor = $$$SysEnum("FARBE",$$$WWW012FontColorMandatoryInput($get(^WWW012(0,0,1))))
	set strDisabledColor = $$$SysEnum("FARBE",$$$WWW012BackgroundColor($get(^WWW012(0,0,1))))

	if YMANDATORY && (YBACKGROUNDCOLOR="ivory") set YBACKGROUNDCOLOR = strRequiredColor
	if YREQUIRED  && (YBACKGROUNDCOLOR="ivory") set YBACKGROUNDCOLOR = strRequiredColor
	if YENABLED    {
		if YWARNING set YBACKGROUNDCOLOR = strWarningColor		;SR17200
	
	} else {
		if YBACKGROUNDCOLOR="ivory" set YBACKGROUNDCOLOR = strDisabledColor
		if YWARNING {
			set YFONTCOLOR = strWarningColor
		} else {
			set YFONTCOLOR = strDisabledFontColor
		}
	}
	set $$$WWWDATEN("FOCUSFIELD")=YFOCUSFIELD ;SR18026
	quit
	
	
OnAfterSave(YKEY,YFELD,YVOR)
	;-------------------------------------------------------------------------------
	; Run the After Save code
	;
	; Returns:
	;
	; History:
	; 19-Jun-2009	GRF		Use field macro
	; 19-Nov-2004	Shobby	Created (SR10468)
	; 07.06.2004	BEC		DA ZENTRALE DATEI
	;-------------------------------------------------------------------------------
	new strCode
	
	set strCode = $$$WWW120ExecuteOnAfterSaveData(YVOR)
	if strCode'="" {
 		set YKEY = $translate(YKEY,"""")
 		xecute strCode                                               ; *** EXECUTE Grid ***
 	}
	quit
	
	
OnBeforeSave(YKEY,YFELD,YVOR)
	;-------------------------------------------------------------------------------
	; Run the Before Save code
	;
	; Returns:
	;
	; History:
	; 19-Jun-2009	GRF		Use field macro
	; 04-Jun-2006	shobby	SRBR014952: Prevent saving a line from a grid if no
	; 							valid lock is held.
	; 14-Apr-2005	shobby/pk	Get strStatus from YRETVAL
	; 19-Nov-2004	Shobby	Created (SR10468)
	; 07.06.2004	BEC		25866: DA ZENTRALE DATEI
	;-------------------------------------------------------------------------------
	new strCode,strStatus
	
	$$$LogR("OnBeforeSave",$get(YKEY)_":"_$get(YFELD)_"<")
	set strStatus = $$$OK
	
	if '$$IsLockOkTest^WWWEVENT(YUSER,$$$GRIDContainer) {
		set strStatus = $$$MakeStatus($$^WWWTEXT(392,,1))
		; "Another User has changed the data record. Please Refresh This Page. Save is not possible."
	} else {
		set strCode = $$$WWW120ExecuteOnBeforeSaveData(YVOR)
		
	$$$LogRx("strCode:"_strCode)
		if strCode'="" {
	 		set YKEY = $translate(YKEY,"""")
	 		xecute strCode                                           ; *** EXECUTE Grid ***
	 		if $get(YRETVAL)'="" set strStatus = YRETVAL
	 	}
	}
	quit strStatus
	
	
OnBeforeDelete(YFORM,YKEY,YFELD)
	;-------------------------------------------------------------------------------
	; Run the Before Delete code
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 04-Jun-2006	shobby	SRBR014952: Prevent deleting a line from a grid if no
	; 							valid lock is held.
	; 10-Feb-2006	RPW		SR14135: Show an alert if there is a message to show
	; 31-Oct-2005	JW		SR13626: ExecuteCode is unnecessary
	; 12-Oct-2005	JW		SR13670: Created
	;-------------------------------------------------------------------------------
	new strCode,strStatus,strAlert
	
	set strStatus = $$$OK
	set strAlert  = ""

	set strStatus = $$IsLockOkTest^WWWEVENT(YUSER,$$$GRIDContainer)
	if $$$ISERR(strStatus) {
		set strAlert = $$^WWWTEXT(392,,1)
		; "Another User has changed the data record. Please Refresh This Page. Save is not possible."
	} else {
		set strStatus = $$ExecuteHook^WWW001Hook(YDATEI,$$$EnumWWWEVENTTYPEOnBeforeDelete,YKEY,YFELD,YFORM)
		if $$$ISOK(strStatus) {
			set strCode = $$$WWW120ExecuteBeforeDeletionData($$$GRIDYVOR(YFORM))
		
			if strCode'="" {
		 		set YKEY = $translate(YKEY,"""")
		 		xecute strCode                                           ; *** EXECUTE Grid ***
		 	}
	 	
		 	set strStatus = $$$OK
		}
		else {
			set strAlert  = $$$Text(strStatus)
		}
	 	if $extract(Q)=1 {
		 	set strAlert  = $extract(Q,2,999)
		 	set strStatus = '$$$OK
	 	}
	}
 	if strAlert'="" {
 		write "alert('"_strAlert_"');"
 	}
	quit strStatus
	
	
OnSetLineDefaults(p1,p2)
	;-------------------------------------------------------------------------------
	; Sets line defaults. It calls the SetLineDefaults callback into the 
	; grids form. Note the parameters are not used.
	;
	; Returns: 0 ($$$NO? $$$YQEnable? $$$Qsave?)
	;
	; History:
	; 25-Aug-2005	PO		SR12965: Get Header as well as Grid
	; 03-Feb-2005	RPW		Use the new ExecuteCode Command in COMUtils
	; 01-Feb-2005	shobby	Code Check.
	; 18-Jan-2005	RPW		Moved from 31R as this is an event handler.
	; 30-Dec-2004	RPW		Created
	;-------------------------------------------------------------------------------
	new strCommand,objGrid
	
	do GetObject^COMGridEdit31Interface(.objGrid,$$$YES) ; returns both simple variable and array
	set strCommand = "do SetLineDefaults^"_$get(^CacheTemp(YUSER,"Grid","Name"))_"(.objGrid)"
	do CallEvent(strCommand,"Defaults")                              ; *** EXECUTE Grid ***
	
	quit 0
	
	
OnGridUpdate(pidDataLine,YFELD,YFELDOLD,pstrFormName="")
	;-------------------------------------------------------------------------------
	; Hide the OnInternalBlur code from outside prying.
	;
	; Returns:
	;
	; History:
    ; 22-Jul-2009	GRF		SR16669: use consistent variable names
	; 23-Mar-2005	shobby	Translate the Key to a line reference.
	; 18-Jan-2005	RPW		Created (SR10061)
	;-------------------------------------------------------------------------------
	new YLFDAT,OYFORM
	
	if $get(pidDataLine)'="" {
		set YLFDAT = "Y"_$get($$$WWWDATEN("REFERENCEROW",pidDataLine,1))
		if pstrFormName'="" {
			set OYFORM = YFORM
			set YFORM  = pstrFormName
		}
		do OnInternalBlur(YLFDAT,YFELD,YFELDOLD,pstrFormName)
		
		if $get(OYFORM)'="" {
			set YFORM = OYFORM
		}
	}
	quit
	
	
OnGetText(strTextId,b)
	quit $$$JSText($$DecodeError^COMUtils(strTextId))
	
	
OnLineAdded(pstrYFORM,pintRowCount,pstrKey)
	;-------------------------------------------------------------------------------
	; Before displaying the combo call out to see if we want to generate a custom
	; list.
	; Examples of use :
	;	FINAPInvLineEvents      - Make fields read only, update charges & discounts
	;	INDispenseToPatientLine - Set values for manual fields
	; 
	; Called by: Macro $$$OnLineAdded in COMGridEdit31.INC
	;	AddLines^COMGridEdit31Body		LINEDATA^COMGridEdit31Body
	;	LineDataCD^COMGridEdit31Body2	LineDataAdd^COMGridEdit31Body2
	; 
	; Inputs: pstrYFORM         Form ID
	;         pintRowCount      $$$WWWDATEN("ROWCOUNT")
	;         pstrKey           e.g. "REC0123",2.01 (strDataKeys)
	; 
	; Returns: nothing
	;
	; History:
	; 06-Oct-2005	JW		SR11573: Call CallEvent
	; 03-Feb-2005	RobertW	Use the new ExecuteCode Command in COMUtils...
	; 18-Jan-2005	Shobby	SR10061: Created
	;-------------------------------------------------------------------------------
	$$$LogR("OnLineAdded",pstrYFORM_":"_pintRowCount_":"_pstrKey)
	do CallEvent("do OnLineAdded^"_pstrYFORM_"("_pintRowCount_","""_$translate(pstrKey,$char(34))_""")","LineAdded")  ; *** EXECUTE Grid ***
	quit
	
	
OnLineDeleted(pstrYFORM,pstrYKEY,pintRowCount)
	;-------------------------------------------------------------------------------
	; Before displaying the combo call out to see if we want to generate a custom
	; list.
	; 
	; Params:	pstrYFORM - grid form
	; 			pstrYKEY - key of deleted line
	; 			pintRowCount - number of rows in grid after this delete
	; 
	; Returns:
	;
	; History:
	; 02-Mar-2006	JW		SR13305: Added pstrYKEY parameter
	; 06-Oct-2005	JW		SR11573: Call CallEvent
	; 03-Feb-2005	RobertW	Use the new ExecuteCode Command in COMUtils...
	; 18-Jan-2005	Shobby	SR10061: Created
	;-------------------------------------------------------------------------------
	$$$LogR("OnLineDeleted",pstrYFORM_":"_pintRowCount_":"_pstrYKEY)
	do CallEvent("do OnLineDeleted^"_pstrYFORM_"("""_$translate(pstrYKEY,"""")_""","_pintRowCount_")","LineDeleted")  ; *** EXECUTE Grid ***
	quit
	
	
OnInternalBlur(pYLFDAT,YFELD,YFELDOLD,pstrFormName="")
	;-------------------------------------------------------------------------------
	; Handles a blur call where the data is precalculated. YFELD contains the new
	; row data and YFELDOLD contains the old.
	; pYLFDAT is in the form tdYn of just Yn where n is the grid row number.
	; 
	; This works on an entire row.
	;
	; Returns:
	;
	; History:
	; 17-May-2012	PPP		SR18002:Not sure why GROW was being +'d, this created 
	;						issues with lines which have rows 1x01 etc (removed)
	; 26-Oct-2010	PPP		SR16642: YKEY needs to be defined even if there are no
	;							OnBlur events because the Scan needs it to be
	;							available.  Moved it up the subroutine
	; 06-Jul-2007	shobby	SRBR014553: Consider customisation of WWW122, Renamed
	; 							objField to objWWW122
	; 16-Aug-2005	RPW		SR11983: Attempt to determine if the user changed set
	; 							this value or the system.  Also moved ScreenUpdate
	; 							outside the loop
	; 08-Jul-2005	RPW		Code Check
	; 29-Jun-2005	PO		SR12797: Removed ^COMGridEdit31S from call to AddReference
	; 17-Jun-2005	shobby	Code Check
	; 26-Apr-2005	RobertW	Only blur fields if YFELD'=YFELDOLD
	; 21-Apr-2005	RobertW	Only blur fields that have changed.
	; 28-Feb-2005	JW		Added call to AddReference - formatting for changes.
	; 17-Dec-2004	RobertW Modified to handle rows not starting at 1
	; 30-Dec-2004	RobertW	Created
	;-------------------------------------------------------------------------------
	new strFormName,GCOL,strCommand,strYFELDOld,objWWW122,GROW,GDATA,YKEY
	
 	if pstrFormName'="" {
	 	set strFormName = pstrFormName
 	} else {
		set strFormName = $get(^CacheTemp(YUSER,"Grid","Name"))
 	}
	set GCOL  = ""
	//SR18002: Not sure why GROW was being +'d, this created issues with lines which have rows 1x01 etc
	//set GROW  = +$piece(pYLFDAT,"Y",2)
	set GROW  = $piece(pYLFDAT,"Y",2)
	set GDATA = YFELD

	set YKEY = $$GetYKEY^COMGridEdit31G(GROW,strFormName)	//SR16642
	
	if YFELD'=YFELDOLD {
		if '$$$KilledRecord(GROW,strFormName) {
			for {
				set GCOL = $order(^WWW122(0,strFormName,GCOL))
				quit:GCOL=""
				
				set objWWW122 = $$Get^WWW122(strFormName,GCOL) ; FIXME : Neither field used is customisable - faster to have direct get
				
			; FIXME : <GRF> Consider adding the following to ensure GFLD is available
			;         for any OnBlur called routines - see OnBlur above.
			;         If set, can use in following lines as well.
			;	set GFLD = $$$WWW122SequenceNumber(objWWW122)
	
				if $$$WWW122ExecuteOnBlur(objWWW122)'="" {           ; *** EXECUTE Grid ***  May assume passing : GCOL,GROW,GDATA,GKEY,YKEY,YFELD -  but not GFLD?
					set strCommand = $$$WWW122ExecuteOnBlur(objWWW122)
					
					if $piece(YFELD,Y,$$$WWW122SequenceNumber(objWWW122))'=$piece(YFELDOLD,Y,$$$WWW122SequenceNumber(objWWW122)) {
						//set YKEY = $$GetYKEY^COMGridEdit31G(GROW,strFormName)		//SR16642 Moved up
						
 						if strCommand'="" {
						;	do SetDirty^COMGridEdit31Interface(strFormName,GROW,GCOL,$$$NO)
							xecute strCommand
						}
					}
					do AddReference(GCOL)
				}
			}
			do ScreenUpdate^COMGridEdit31S(pYLFDAT,YFELD,YFELDOLD)
		}
	}
	quit
	
	
AddReference(pidField,pstrType="D",pstrForm="")
	;-------------------------------------------------------------------------------
	; Add a reference to a field that may have changed and requires recalculation
	; for display on screen.
	; 
	; $$$WWWDATEN("REFERENCELIST") is processed and cleared by ScreenUpdateStyle^COMGridEdit31S
	; 
	; This is a list of *FORM* field numbers, comma-delimited.
	; 
	; Inputs:
	; 	pidField	Class Field Id for "D" type entries, Form Field Id for "M"
	; 					or "P"  (These are identical for "P")
	; 	pstrType	"P" for key, "D" for data fields based on classes, "M" for
	; 					Manual form fields.
	; 	pstrForm	YFORM
	; 
	; History:
	; 20-Jun-2005	Paul K	SR12496: Passed in pstrForm and newed YFORM
	;-------------------------------------------------------------------------------
	quit:$get(pidField)=""
	
	if pstrForm="" set pstrForm = YFORM
	new strList,YFORM
	
	set YFORM = pstrForm    ; (required for macro)
	
	set strList = $get($$$WWWDATEN("REFERENCELIST"),",")
	if pstrType="D" set pidField = $$$GetFormField(pstrForm,pidField) ; convert class field to form field
	
	if strList'[(","_pidField_",") {
		set strList = strList_pidField_","
	}
		
	set $$$WWWDATEN("REFERENCELIST") = strList
	quit
	
	
OnBeforeDeleteAll()
	;/*-----------------------------------------------------------------------------
	; Callout to module for custom ]]><![CDATA[code as to whether to show the line or not. (SR11054)
	;
	; Returns:
	;
	; History:
	; 02-Dec-2013	shobby  SESPE-571: Use ExecuteHook rather than CallEvent
	; 23-Mar-2006	RPW		SR14557 Created
	;-----------------------------------------------------------------------------*/
	new blnDelete,VORG
	
	set blnDelete = $$$YES

	;SESPE-571 do CallEvent("set blnDelete=$$OnBeforeDeleteAll^"_strName_"()","DeleteAll")  ; *** EXECUTE Grid ***
	set blnDelete = $$ExecuteHook^WWW001Hook($$$GetClass(YFORM),$$$EnumWWWEVENTTYPEOnBeforeDeleteAll,.YKEY,.YFELD,YFORM,.YFELDOLD,.YFIELDNAME)
	quit blnDelete
	
	
OnBeforeCopy(pstrKey,&pobjLine)
	;-------------------------------------------------------------------------------
	; Event before copying a line. Can update line data.
	;
	; Params:	pstrKey
	;
	; ByRefs:	pobjLine
	;
	; Returns:
	;
	; History:
	;  6-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	new strName
	
	set strName = $get(^CacheTemp(YUSER,"Grid","Name"))
	do CallEvent("do OnBeforeCopy^"_strName_"(pstrKey,.pobjLine)","Copy")      ; *** EXECUTE Grid ***
	
	quit
	
	
SetRefresh(YFORM,YYKEY,YFELD,&pblnRefresh="")
	;-------------------------------------------------------------------------------
	; Before displaying the combo call out to see if we want to generate a custom
	; list.
	; 
	; Inputs: (set to isolate variables)
	;	YFORM         Form ID
	;	YYKEY			pstrKey  - e.g. "REC0123",2.01 (strDataKeys)
	;	YFELD			pobjData - Record being processed
	; 
	; Returns: nothing
	;
	; History:
	; 11-Aug-2009	GRF		SR16787: Created
	;-------------------------------------------------------------------------------
	$$$LogR("Refresh",YFORM_":"_YYKEY)
	
	if pblnRefresh="" {
		set pblnRefresh = ($get($$$EventExists("Refresh"))'=$$$NO)
	}
	
	if pblnRefresh do CallEvent("do SetRefresh^"_YFORM_"("""_$$$DEQUOTE(YYKEY)_""",YFELD)","Refresh")  ; *** EXECUTE Grid ***
	quit
	
	
CallEvent(pstrCode,pstrEvent) 
	;-------------------------------------------------------------------------------
	; Method to call a grid-based event that may not exist. If we:
	; 	(a) know it exists, XECUTE it
	; 	(b) otherwise, test it (and set) with ExecuteCode <-- always in dev
	;
	; Params: 	pstrCode	- event code
	; 			pstrEvent	- event name
	;
	; Returns:
	;
	; History:
	; 31-Jul-2006	JW		SR14730: Reversed if conditions, use local var  
	; 06-Feb-2006	RPW		SR14093: Do not do the event if we don't need to.
	; 06-Oct-2005	JW		SR11573: Created
	;-------------------------------------------------------------------------------
	new strExists

	; $$$EventExists(pstrEvent) can have 3 values:
	//$$$Alert(pstrEvent)
	set strExists = $get($$$EventExists(pstrEvent))                       ; *** EXECUTE Grid *** Wrapper for other executable calls
	if strExists {				// TRUE - the event exists, so execute it
		xecute pstrCode
	
	} elseif strExists="" {		// NULL - don't know yet, so test
		set $$$EventExists(pstrEvent) = $$ExecuteCode^COMUtils(pstrCode)
	}
								// FALSE - doesn't exist, so ignore it
	quit
	
	
OnSortGrid(pstrFocusCell,pstrSortData)
	;-------------------------------------------------------------------------------
	; Allow the grid to be sorted, finds the correct page and orders the data
	;
	; Params:
	;
	; Returns: Null - Why?
	;
	; History:
	; 13-Aug-2013	shobby	CORE-172.1: Didn't fix sorting when primary key is a string.
	; 23-Jul-2013	shobby	CORE-172: Fix sorting on floating point numbers and when grid has more than one page.
	; 20-Jul-2012	shobby	SR18063: Can now sort by relation.
	; 16-Jul-2012	shobby	SR18061: Modification to allow sorting on Manual Fields.
	; 07-Mar-2011	GRF		SR17676.1: Primary keys don't have rules - won't have
	;							idColumn defined.
	; 04-Mar-2011	shobby	SR17676: If a field has rules to calculate a transient value
	;							then we can use this for sorting.  Careful, this could
	;							slow things down.
	; 05-Dec-2008	HQN		SR16026: Missed a $$$GRIDPerPage macro replace
	; 03-Jun-2008	GRF		SR15739: Activate CreateDisplayList and deactivate
	; 							"DISPLAYORDER"; removed unused code previously
	; 							reverted on 22-May for clarity
	; 26-May-2008	GRF		SR15739: Reposition last "}" to correct place
    ; 22-May-2008	GRF		SR15739: *** REVERT CHANGES FROM 14-May onwards keeping
    ; 							change that ensures arithmetic is performed on 
    ; 							numbers rather than numeric value of string
    ; 							i.e. "2" and "2x01" plus 1 => "3" instead of
    ; 							"2.01" => "3.01"
	; 15-May-2008	HQN		SR15739: Store last sort for later retrieval, insertions
	; 							after sorting require resorting
	; 14-May-2008	HQN		SR15739: Corrected reordering of DISPLAYORDER, copied lines
	; 						are treated as floats
	; ***********
	; 16-Jul-2012	shobby	SR18061:	Allow sorting on Manual Fields.
	; 14-May-2008	shobby	SRBR014943: GRIDPerPage
	; 27-Mar-2008	shobby	SRBR014918: Removed a crash when sorting on long strings.
	; 25-Sep-2007	shobby	SRBR014701: Removed references to idClass
	; 21-Sep-2007	shobby	SRBR014701: If the field is a primary key don't do the 'checkbox' test.
	; 11-Sep-2007	shobby	SRBR014701: If a boolean field then empty is the same as false.
	; 04-Sep-2007	shobby	SRBR014701: Incorrect parameter used in $$$GRIDGetYFELD
	; 07-Aug-2007	shobby	SR15529: Removed crash when trying to sort on unsaved data
	; 19-Jul-2007	RPW		SR15529: Created
	;-------------------------------------------------------------------------------
	new arrRow,blnCheckbox,blnHasRules,blnPrimary,idColumn,idGridRow,idKey,idSeqNum
	new intCol,intColumn,intDirection,intPage,intPageRow,intPos,intRow
	new loop,objData,strDescription,strOrder,strValue
	new blnByRelation ;SR18063
	new intType ;CORE-172
 	
 	set intType=1 ;CORE-172
 	
	set intColumn      = $piece(pstrSortData,Y,1)
	set strDescription = $piece(pstrSortData,Y,2)
	set blnByRelation  = $piece(pstrSortData,Y,3)  ;SR18063
	set blnPrimary     = $$$IsPrimaryKey(intColumn)
	
	$$$GRIDSplitKey(pstrFocusCell,intRow,intCol)
	set idSeqNum = -1 // Allow for Primary Keys
	
	set blnCheckbox = $$$NO
	if 'blnPrimary {
		set idColumn    = $piece($$$GRIDColumnOrder,$$$COMMA,intColumn)
		set intType     = $$GetFieldType^COMUtilClass(YFORM,idColumn) ;CORE-172
		set blnCheckbox = (intType=2)								  ;CORE-172
		set idSeqNum    = $$$WWW122SequenceNumber($get(^WWW122(0,YFORM,idColumn,1)))
	}

	;-----------------------------------
	; - Sort by selected column by copying values into an array
	;-----------------------------------
	
	;	set blnHasRules = $$HasRules^WWWFORMD(YFORM,idColumn)                       ;SR17676
	set blnHasRules = ('blnPrimary && $$HasRules^WWWFORMD(YFORM,idColumn))      ;SR17676.1
	set idGridRow = ""
	for {
		set idGridRow = $order(^WWWDATEN(0,+$horolog,YUSER,YFORM,"V","REFERENCEKEY",idGridRow))
		quit:idGridRow=""
		
		set idKey = $translate($get($$$WWWDATEN("REFERENCEKEY",idGridRow,1)),"""") ;CORE-172.1
		if blnPrimary {                                ; Primary Key
			set strValue = $$$KEYMAX(idKey)
		
		} else {
			set objData  = $$$GRIDGetYFELD(idKey)
			if idSeqNum="" { ;Manual Field														;SR18061
				;CORE-172 set strValue   = $$GetYMFELDValue^COMGridEdit31G(idGridRow,idColumn) 	;SR18061
				set strValue = $$GetDefaultValue^COMGridEdit31Body(YFORM,idKey,idColumn,intType,objData) ;CORE-172
			} else {																	;SR18061
				set strValue = $piece(objData,Y,idSeqNum)								;SR18061
			}																			;SR18061
			if blnByRelation {																	;SR18063
				set strValue=$$GetRelation^COMGridEdit31Excel(YFORM,idColumn,strValue,$$$YES)   ;SR18063
			}																					;SR18063
			if blnHasRules do CheckRules^WWWFORMD(YFORM,idColumn,objData,,,,,,,,,,,,.strValue)  ;SR17676
		}
		if blnCheckbox {
			if $$$TRIMWS(strValue)="" set strValue=0   ; checkbox test
		} else {
			if strValue="" set strValue=" "
		}
		set strValue = $extract(strValue,1,255)
		if intType=12 { 							   ;Floating  	;CORE-172
			set strValue=+strValue									;CORE-172
		}															;CORE-172
		set arrRow(strValue,idGridRow)=""              ; Order by value and then row id
	}
	set strOrder   = ""
	set intPageRow = 1
	
	;-----------------------------------
	; - Order the data by value in the direction required.
	;   If multiple rows have the same value sub-sort in
	;   ascending order of the row number.
	; - Identify the new absolute position (intPageRow) of
	;   the line that currently has focus (intRow).
	;-----------------------------------
	
	set intDirection = $select($$$JSBoolean(strDescription):$$$DirUp,1:$$$DirDown)
	set strValue = ""
	for {
		set strValue = $order(arrRow(strValue),intDirection)
		quit:strValue=""
		
		set idGridRow = ""
		for {
			set idGridRow = $order(arrRow(strValue,idGridRow),$$$DirDown)
			quit:idGridRow=""
			
			set strOrder = strOrder_$$$COMMA_idGridRow
			if idGridRow=intRow {
				set intPageRow = $length(strOrder,$$$COMMA)-1
			}
		}
	}
	
	;-----------------------------------
	; - Figure out the correct page for the line that
	;   currently has focus.
	;-----------------------------------
	
	;	set intPage = ((intPageRow-1)\$get($$$GRIDPerPage))+1 ; SR16026
	set intPage = ((intPageRow-1)\$$GetRowsPerPage^COMGridEdit31(YBED,YFORM))+1
	
	;-----------------------------------
	; Setup the display order in "DISPLAYLIST"
	; 
	; Display order is a true linked list - see heading in COMGridEdit31List for an explanation
	;-----------------------------------
	do CreateDisplayList^COMGridEdit31List(strOrder)    ; SR15739 (testing)
	
	write $$$GRIDGoToPage(intPage,$$$GRIDNumPages,pstrFocusCell,$$$NO)
	quit ""
	
]]></Routine>
</Export>