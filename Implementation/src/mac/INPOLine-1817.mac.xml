<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INPOLine" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INPOLine
	
#include COMSYS
#include INConst
#include COMConst
#include COMGridEdit31
#include %occConstant
	
#define FORMFldINPOLineOrdQty       6
#define FORMFldINPOLineUnit	        7
#define FORMFldINPOLineInvOrderQty 29
	
POLineSum(pYKEY)
	;-------------------------------------------------------------------------------
	; Takes all the DO Lines from INPOLine global for a particular PO and 
	; inserts the Summary of those lines as POLInes into same INPOLines global
	;
	; Params:
	; pYKEY - Primary key(i.e Purchase Order Number) 
	;
	; Returns:
	;
	; History:
	; 25-Sep-2008	VIJAY	: Created
	; 24-Jun-2009	VIJAY	: Added quit and deletion of the previosly saved lines 
	;						  in for loop when save of any PO Line fails
	;-------------------------------------------------------------------------------
 	new blnMatchFound,idDO,idDOLine,idPOLine,idxYKEY,intLineSeq
	new objDO,objDOLine,objPOLine,strStatus
	
	quit:pYKEY=""
	
 	set strStatus = $$POLineKill(pYKEY)  ; Kill INPOLine entries for PO
 	
	if $$$ISOK(strStatus) {
		set intLineSeq=0
		set idDO = ""
		set idxYKEY=$$$Index(pYKEY)
		for {
			set idDO=$order(^INPOs(YM,2,idxYKEY,idDO))   ; Index 2 Parent Order D7
			quit:idDO=""
 
			set idDOLine=""
			for {
				set idDOLine=$order(^INPOLine(YM,idDO,idDOLine))
				quit:idDOLine=""
				
				set objDOLine = $get(^INPOLine(YM,idDO,idDOLine,1))
				
		;		set idPOLine = $order(^INPOLine(YM,pYKEY,""))
		;		if (idPOLine="") {
		;			set intLineSeq = intLineSeq + 1   ; FIXME is it always going to be 1 if here
		;			set strStatus = $$$Save("INPOLine",pYKEY_","_intLineSeq,objDOLine,$$$YES)
		;		
		;		} else {	
					set idPOLine=""
					set blnMatchFound = $$$NO
					
		;-----------------------------------
		; Match Delivery Line against each PO line
		; If a match is found
		;  - Add qty to PO line qty
		;  - Don't look any further in PO Lines
		; ELSE (includes no PO lines exist)
		;  - create new PO line
		; 
		;-----------------------------------
					for {	
						set idPOLine = $order(^INPOLine(YM,pYKEY,idPOLine))
						quit:idPOLine=""
						set objPOLine = $get(^INPOLine(YM,pYKEY,idPOLine,1))
						quit:objPOLine=""
						
						if ($$$INPOLineItem(objDOLine)          = $$$INPOLineItem(objPOLine))          &&
						   ($$$INPOLineUnitOfMeasure(objDOLine) = $$$INPOLineUnitOfMeasure(objPOLine)) &&
						   ($$$INPOLineUnitCost(objDOLine)      = $$$INPOLineUnitCost(objPOLine))         {
							
							set $$$INPOLineQuantityOrdered(objPOLine) = $$$INPOLineQuantityOrdered(objPOLine)+$$$INPOLineQuantityOrdered(objDOLine)
							set $$$INPOLineExtendedCost(objPOLine)    = $$$INPOLineExtendedCost(objPOLine)   +$$$INPOLineExtendedCost(objDOLine)
							if ($$$INPOLineCostAfterDiscount(objDOLine)'="") {
								set $$$INPOLineCostAfterDiscount(objPOLine) = $$$INPOLineCostAfterDiscount(objPOLine)+$$$INPOLineCostAfterDiscount(objDOLine)
							}
							set strStatus    = $$$Save("INPOLine",pYKEY_","_idPOLine,objPOLine,$$$YES)
							set blnMatchFound = $$$YES
							quit
						}
					}
					if 'blnMatchFound {
						set intLineSeq = intLineSeq + 1
						set strStatus  = $$$Save("INPOLine",pYKEY_","_intLineSeq,objDOLine,$$$YES)
					}
		;		}
				if (strStatus=$$$NO) {
				 	do POLineKill(pYKEY)
				 	quit
				}
			}
		}
	}
	quit
	
 
POSummary(pYKEY)
	;-------------------------------------------------------------------------------
	; Takes all the DO Lines from INPOLine global for a particular PO and 
	; inserts the Summary of those lines as POLInes into same INPOSummary global
	;
	; Params:
	; pYKEY - Primary key(i.e Purchase Order Number) 
	;
	; Returns:
	;
	; History:
	; 05-Nov-2008	Kalyan		: Created
	;-------------------------------------------------------------------------------
 	new idDO,idDOLine,objDO,objDOLine,objPOLine
	new blnMatchFound,intLineSeq,idPOLine,strStatus
	new intFldCount,objFld,idxYKEY
	
	quit:pYKEY=""
	
	set strStatus = $$POSummaryKill(YKEY)
 	if $$$ISOK(strStatus) {
	 	set intFldCount = 27
		set intLineSeq  = 0
		set idDO        = ""
		set idxYKEY     = $$$Index(pYKEY)
	;***************************************  ; FIXME : no timeout - will wait forever without message to user
		lock +^INPOSummary
	;***************************************
		for {
			set idDO=$order(^INPOs(YM,2,idxYKEY,idDO))
			quit:idDO=""
			set objDO=$get(^INPO(YM,idDO,1))
			;continue:objDO=""
			
			set objFld=$get(^WWW003(YM,"INPOSummary",intFldCount,1))
			set $piece(objFld,Y,2)= idDO_"-"_$ZD($$$INPOOrderDate(objDO))
			set $piece(objFld,Y,3)= 6
			set strStatus=$$$Save("WWW003","INPOSummary"_","_intFldCount,objFld,1)
			set idDOLine=""
			for {
				set idDOLine=$order(^INPOLine(YM,idDO,idDOLine))
				quit:idDOLine=""
				
				set objDOLine=$get(^INPOLine(YM,idDO,idDOLine,1))
				set idPOLine=""
				set idPOLine=$order(^INPOSummary(YM,pYKEY,idPOLine))
				if (idPOLine="") {
					set intLineSeq = intLineSeq + 1
					set $piece(objDOLine,Y,intFldCount)=$$$INPOLineQuantityOrdered(objDOLine)
					set strStatus=$$$Save("INPOSummary",pYKEY_","_intLineSeq,objDOLine,$$$YES)
				
				} elseif(idPOLine'="") {	
					set idPOLine=""
					set blnMatchFound = $$$NO
					for {	
						set idPOLine = $order(^INPOSummary(YM,pYKEY,idPOLine))
						quit:idPOLine=""
						set objPOLine = $get(^INPOSummary(YM,pYKEY,idPOLine,1))
						quit:objPOLine=""
						
						if ($$$INPOLineItem(objDOLine)=$$$INPOSummaryItem(objPOLine))                   &&
						   ($$$INPOLineUnitOfMeasure(objDOLine)=$$$INPOSummaryUnitOfMeasure(objPOLine)) &&
						   ($$$INPOLineUnitCost(objDOLine)=$$$INPOSummaryUnitCost(objPOLine))               {
							
							set $$$INPOSummaryQuantityOrdered(objPOLine) = $$$INPOSummaryQuantityOrdered(objPOLine)+$$$INPOLineQuantityOrdered(objDOLine)
							set $piece(objPOLine,Y,intFldCount)=$piece(objPOLine,Y,intFldCount)+$$$INPOLineQuantityOrdered(objDOLine)
							set strStatus=$$$Save("INPOSummary",pYKEY_","_idPOLine,objPOLine,$$$YES)
							set blnMatchFound = $$$YES
							quit
						}
					}
					if 'blnMatchFound {
						set intLineSeq = intLineSeq + 1
						set $piece(objDOLine,Y,intFldCount)=$$$INPOLineQuantityOrdered(objDOLine)
						set strStatus=$$$Save("INPOSummary",pYKEY_","_intLineSeq,objDOLine,$$$YES)
					}
				}
			}
			set intFldCount=intFldCount+1
		}
	;***************************************
		lock -^INPOSummary
	;***************************************
 	}
	quit strStatus
	
	
LoadPOLineGrid(pKEY,pblnEditable)  ;FIXME - dont need to pass in editable
	;-------------------------------------------------------------------------------
	; 
	; 
	; History
	; 09-Dec-2009 	DWR		SR17074: make read only off the header form, as standard
	;-------------------------------------------------------------------------------
	new YFORM,YKEY,YAUSWAHL,YFELD
 
	set YFORM = "INPOLine"			
	set YKEY  = $GET(pKEY)
	
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)          = $$$YES
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL)       = 200
	set $$$COMGridEditParameterGridName(YAUSWAHL)            = YFORM
	set $$$COMGridEditParameterUpdateFields(YAUSWAHL)        = ""
	set $$$COMGridEditParameterClearFields(YAUSWAHL)         = ""
	set $$$COMGridEditParameterDefaultFields(YAUSWAHL)       = ""
	set $$$COMGridEditParameterContainer(YAUSWAHL)           = "INPO"
	set $$$COMGridEditParameterDontUpdateContainer(YAUSWAHL) = $$$YES
	;if (pblnEditable=$$$YES) set $$$COMGridEditParameterEnabled(YAUSWAHL)=$$$YES
	set $$$COMGridEditParameterEnabled(YAUSWAHL)       = ($$$WWW120AuthorizationToModifyData(YVOR) '= $$$EnumReadOnly)	
	$$$GRIDStart(YFORM,YKEY)

	;do ^COMGridEdit31
	;Do ^WWWVAR
	quit
 
LoadDOLineGrid(pKEY,pblnEditable)
 
	set YFORM = "INPODOLine"			
	set YKEY  = $GET(pKEY)
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)          = $$$YES
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL)       = 200
	set $$$COMGridEditParameterGridName(YAUSWAHL)            = YFORM
	set $$$COMGridEditParameterUpdateFields(YAUSWAHL)        = ""
	set $$$COMGridEditParameterClearFields(YAUSWAHL)         = ""
	set $$$COMGridEditParameterDefaultFields(YAUSWAHL)       = ""
	set $$$COMGridEditParameterContainer(YAUSWAHL)           = "INPO"
	set $$$COMGridEditParameterDontUpdateContainer(YAUSWAHL) = $$$YES
	;set $$$COMGridEditParameterCallBack(YAUSWAHL)           = $$$YES
	;if (pblnEditable=$$$YES) set $$$COMGridEditParameterEnabled(YAUSWAHL)=$$$YES
	set $$$COMGridEditParameterEnabled(YAUSWAHL)       = ($$$WWW120AuthorizationToModifyData(YVOR) '= $$$EnumReadOnly)	
	$$$GRIDStart(YFORM,YKEY)
	;do ^COMGridEdit31
	;do ^WWWVAR
	quit
 
LoadPOSummaryGrid(pKEY)
	new YFORM,YKEY,YAUSWAHL,YFELD
 
	SET YFORM = "INPOSummary"			
	SET YKEY = $GET(pKEY)
 
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)			= $$$YES
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL)		= 200
	set $$$COMGridEditParameterGridName(YAUSWAHL) 			= YFORM
	set $$$COMGridEditParameterUpdateFields(YAUSWAHL) 		= ""
	set $$$COMGridEditParameterClearFields(YAUSWAHL) 		= ""
	set $$$COMGridEditParameterDefaultFields(YAUSWAHL) 		= ""
	set $$$COMGridEditParameterContainer(YAUSWAHL) 			= "INPO"
	set $$$COMGridEditParameterEnabled(YAUSWAHL)			=$$$YES
	set $$$COMGridEditParameterDontUpdateContainer(YAUSWAHL)=$$$YES
	;1,3,4,6,27,28,29,30,31,32,33,34,35,36,2
	do ^COMGridEdit31
	Do ^WWWVAR
	quit
 
 
FillDO(pYKEY)
 	quit  ; DWR test 05Jan2010
 	
 	;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DISABLED
 	
 	new idCurrentDO,idDO,strStatus,idxYKEY
 	
 	set idxYKEY=$$$Index(pYKEY)
	kill ^COMTempList(YM,YUSER,"INPODOList")
	if ($get(pYKEY) '= ""){
		set idDO="" 
		for {
			set idDO=$order(^INPOs(YM,2,idxYKEY,idDO))
			quit:idDO=""
			set ^COMTempList(YM,YUSER,"INPODOList",idDO,1)=""
		}
	}
	set idCurrentDO=$get(^CacheTempINPO(YUSER,"CurrentDO"))
	if idCurrentDO'="" {
		if '$data(^COMTempList(YM,YUSER,"INPODOList",idCurrentDO)) {
			set idCurrentDO=""
		}
	}	
	if idCurrentDO="" {
		set ^CacheTempINPO(YUSER,"CurrentDO") = $order(^COMTempList(YM,YUSER,"INPODOList",""))
		do FillDODetails^INPOLine($get(^CacheTempINPO(YUSER,"CurrentDO"))) 
	}
 	quit
	
FillDODetails(pYINHALT)
	new objDO
	
	if pYINHALT'="" {
		set objDO = $get(^INPO(YM,pYINHALT,1))
		quit:objDO=""
		set ^CacheTempINPO(YUSER,"DOParentOrder") 	= $$$INPOParentOrder(objDO)
		set ^CacheTempINPO(YUSER,"DOSupOrderNo") 	= $$$INPOSupplierOrderNumber(objDO)
	;	set ^CacheTempINPO(YUSER,"DODeliveryDate") 	= $ZD($$$INPOSupplierDeliveryDate(objDO))
		set ^CacheTempINPO(YUSER,"DODeliveryDate") 	= $$$INPOSupplierDeliveryDate(objDO)
		set ^CacheTempINPO(YUSER,"DOTransMethod") 	= $$$INPOTransportationMethod(objDO)
		set ^CacheTempINPO(YUSER,"DOPayTerm") 		= $$$INPOPaymentTerms(objDO)
		set ^CacheTempINPO(YUSER,"DOShipLoc") 		= $$$INPOShipToLocation(objDO)
		set ^CacheTempINPO(YUSER,"DOShipAdd") 		= $$$INPOShipToAddress(objDO)
		set ^CacheTempINPO(YUSER,"DOSuppName") 		= $$$INPOSupplierName(objDO)
		set ^CacheTempINPO(YUSER,"DOStatus") 		= $$$INPOStatus(objDO)
	}
	quit
	
	
OnDOBlur(pYINHALT)
	quit:pYINHALT=""
	
	kill ^CacheTempINPO
	set ^CacheTempINPO(YUSER,"CurrentDO")=pYINHALT
	do FillDODetails^INPOLine(pYINHALT) 
	quit
	
	
POLineKill(pYKEY)
	new strStatus
	;set strStatus = $$KILL^COMUtils("INPOLine",YM_","_pYKEY) 
	set strStatus=$$KillChildren^COMUtils("INPOLine",pYKEY)  ;shobby
	//kill ^INPOLine(YM,pYKEY)
	quit strStatus
	
	
POSummaryKill(pYKEY)
	new intFldCount,intDOCount,objFld,strStatus
	
	do KILL^COMUtils("INPOSummary",YM_","_pYKEY) ;Commented because not working
	//KILL ^INPOSummary(YM,pYKEY)
	set intFldCount=27
	set intDOCount=1
	for {
		set objFld=$get(^WWW003(YM,"INPOSummary",intFldCount,1))
		quit:objFld=""
		set $piece(objFld,Y,2)= "DO"_intDOCount
		set $piece(objFld,Y,3)= 0
		set strStatus=$$$Save("WWW003","INPOSummary"_","_intFldCount,objFld,1)
		quit:$$$ISERR(strStatus)
		set intFldCount=intFldCount+1
		set intDOCount=intDOCount+1
	}
	quit strStatus
	
	
OnBeforeDisplayCombo(pstrKeys,pobjPO,pintCol,&pSUCH)
	;-------------------------------------------------------------------------------
	; Populates the Unit with the UOM as defined in INARTPACK only, excludes
	; units that the item does not come in.
	; 
	; set pSUCH as the items to be used when you override the list (set via blnOverride)
	;
	; Called By: COMGridEdit executable
	; 
	; Inputs:
	;	pstrKeys		YKEY
	;	pobjSummary		YFELD
	; 
	; Returns: $$$YES or $$$NO (override the data) 
	;
	; History:
	; 15-Jul-2011	GRF		SR17669: Call common code
	; 03-Nov-2009	DavidR	SR17074: Created
	;-------------------------------------------------------------------------------
	new blnOverride,enumLineType,enumUnit,idClassField,idItem

	set blnOverride = $$$NO
	
	; Unit
	;---------------------------------------
	;---------------------------------------
	if pintCol = $$$FORMFldINPOLineUnit {      ; SR17669 vvv
		set blnOverride = $$LoadCombo^INARTPACK($$$INPOLineItem(pobjPO),blnOverride,.pSUCH)
	}
	quit blnOverride
	/*
	if pintCol = $$$FORMFldINPOLineUnit  {
		kill pSUCH
		set pSUCH  = "SUCH"
		set idItem = $$$INPOLineItem(pobjPO)
		if idItem '= "" {
			set enumUnit = ""
			for {
				set enumUnit = $order(^INARTPACK(YM,idItem,enumUnit))
				quit:enumUnit=""
				
				set pSUCH(enumUnit) = enumUnit
			}
			set blnOverride = $$$YES
		}
	}
	quit blnOverride
	*/                                           ; SR17669 ^^^
	
	
OnBeforeDelete(pidPOLine,pobjPOLine)
	;-------------------------------------------------------------------------------
	; update the supply record
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 14-Jan-2010	DAVID		SR<>: Created
	;-------------------------------------------------------------------------------
	
	set idxPO = $$$Index($$$KEY1(pidPOLine))
	
	set objINPO = $get(^INPO(0,pidPOLine,1))
	set enumStatus = $$$INPOStatus(objINPO)
	
	if (enumStatus = 3) || (enumStatus = 5)  || 
	   (enumStatus = 7) || (enumStatus = 8 )   {   ; Cut  ; placed ; Receiving; Blocked
		
		set strStatus = $$$MakeStatus("IN01174")  ; 'Cannot Delete Purchase order, can only Cancel. '
		
	} elseif (enumStatus = 9) || (enumStatus = 10) {   ; Closed , Cancelled
		set strStatus = $$$MakeStatus("IN01161") ;"Purchase Order is already closed"
		
	} else {		 
		set idReq = ""
		for{
			set idReq = $order(^INRequisitions(0,19,idxPO,YM,idReq))
			quit:idReq=""
		
			set objReq = $get(^INRequisition(0,YM,idReq,1))
			if objReq'=$$$NULLOREF {
				
				; FIXME : shouldn't the INRequsition entries be using objReq?
				
				if ($$$INPOLineItem(pobjPOLine) = $$$INRequisitionItem(pobjPOLine))  &&
				   ($$$INRequisitionUnit(pobjPOLine) = $$$INPOLineUnitOfMeasure(pobjPOLine)) {
					
					set $$$INRequisitionStatus(objReq)   = 3
					set $$$INRequisitionINPOLine(objReq) = ""
					set $$$INRequisitionINPOID(objReq)   = ""
					set $$$INRequisitionRelease(objReq)  = $$$NO
					
					set strStatus = $$$Save("INRequisition","0,"_idReq,objReq,$$$YES)
				}	
			}
		}
		
		if $$$ISERR(strStatus){
		;	set Q = $$$QDontDelete_$$$Text($listbuild("IN01162",pidPOLine))  ; 'Problem occured clearing requisiton links to Purchase Order %1
			set strStatus = $$$MakeStatus("IN01162",pidPOLine)  ; 'Problem occured clearing requisiton links to Purchase Order %1
		} else {
			set strStatus = $$$Kill("INDOLine",pidPOLine)  ;FIXME not working DWR
		}
	}
	
	if $$$ISERR(strStatus) {
		do ReturnError^COMUtilError(strStatus)
		set Q = $$$QDontDelete
	}
	quit
	
	
OnBlur(pidPOLine,&pobjPOLine,pintCol,pidGridRow)
	;-------------------------------------------------------------------------------
	; Convert the ordered value based on the unit, and the inventory of qty ordered
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 18-Jan-2010	DWR		SR17074: Created
	;-------------------------------------------------------------------------------
	if '$$$NoKey(pidPOLine){
		set fltInvQtyOrd = $$GetYMFELDValue^COMGridEdit31G(pidGridRow,$$$FORMFldINPOLineInvOrderQty)  ; Manual form field
		set idUnit = $$$INPOLineUnitOfMeasure(pobjPOLine)
		set idItem = $$$INPOLineItem(pobjPOLine)
		
		if pintCol = $$$FORMFldINPOLineUnit {
			if (idItem'="") && (idUnit'=""){
				set fltConv = $$GetUOMConversion^INUOMConversion(idItem,idUnit)
				set $$$INPOLineQuantityOrdered(pobjPOLine) = $$Ceiling^COMUtilNum($$$INPOLineInvQuantityOrdered(pobjPOLine)/fltConv)
				;do UpdateManualField^COMGridEdit31Interface(pidGridRow,29,765431)
			}
	;	} elseif pintCol = $$$FORMFldINPOLineOrdQty {
	;		if (idItem'="") && (idUnit'=""){
	;			
			}
	}
	quit
	
	
GetInvOrderQty(pidPOLine,pobjPOLine)
	new fltAmount
	
	set fltAmount=""
		set idUnit = $$$INPOLineUnitOfMeasure(pobjPOLine)
		set idItem = $$$INPOLineItem(pobjPOLine)
		if (idItem'="") && (idUnit'=""){
			set fltConv = $$GetUOMConversion^INUOMConversion(idItem,idUnit)
			set fltAmount = $$Ceiling^COMUtilNum($$$INPOLineQuantityOrdered(pobjPOLine)*fltConv)
		}
	quit fltAmount
	
#;KillTemp //call OnBeforeFormConstruction^INPO 
#;	kill ^INPOTempDO 
#;	quit
	
]]></Routine>
</Export>