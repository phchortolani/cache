<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINAPHCInvoice" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINAPHCInvoice  ; AP Invoice Health Check
	#Include FINHC
	#define Check "^CacheTemp(YUSER,""FINAPHCInvoice"")"
 
 
FindNonZeroPayments(StartDate="",EndDate="",Location="",Level="",Result)
	new idPayment,idPaymentLine,idInvoice,objFINAPPaymentLine
	new fltAmountLine,fltAmountInvoice,objFINAPPaymentInvoice
	new intCount
	
	if $get(Y)="" do ^WWWVAR
	kill Result
	set intCount=0
	set idPayment=""
	for {
		set idPayment=$order(^FINAPPayment(YM,idPayment))
		quit:idPayment=""
		set idPaymentLine=""
		for {
			set idPaymentLine=$order(^FINAPPaymentLine(YM,idPayment,idPaymentLine))
			quit:idPaymentLine=""
			set objFINAPPaymentLine=$get(^FINAPPaymentLine(YM,idPayment,idPaymentLine,1))
			set fltAmountLine=$$$FINAPPaymentLineTotal(objFINAPPaymentLine)+$$$FINAPPaymentLinePrepayment(objFINAPPaymentLine)
			set fltAmountInvoice=0
			set idInvoice=""
			for {
				set idInvoice=$order(^FINAPPaymentInvoice(YM,idPayment,idPaymentLine,idInvoice))
				quit:idInvoice=""
				set objFINAPPaymentInvoice=$get(^FINAPPaymentInvoice(YM,idPayment,idPaymentLine,idInvoice,1))
				set fltAmountInvoice=$$$FCAdd(fltAmountInvoice,$$$FINAPPaymentInvoicePayAmount(objFINAPPaymentInvoice))
				if $$$FINAPPaymentInvoiceDiscountApplied(objFINAPPaymentInvoice) {
					set fltAmountInvoice=$$$FCSub(fltAmountInvoice,$$$FINAPPaymentInvoiceDiscount(objFINAPPaymentInvoice))
				}
			}
			if '+$$$FCZero($$$FCSub(fltAmountLine,fltAmountInvoice)) {
				set Result("Hash",$$$ErrorNo(Result("Errors")))="Payment="_idPayment_","_idPaymentLine_"  Payment Line ("_fltAmountLine_") does not equal Invoices ("_fltAmountInvoice_")"
				set intCount=intCount+1
			}
		}
	}
	
	quit intCount
 
 
CheckInvoiceZCRC(StartDate="",EndDate="",Location="",Level="",Result)
	;-------------------------------------------------------------------------------
	; Calculate the total amount of invoices less the balance outstanding
	;
	; Returns:
	;
	; History:
	; 20-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
 	;
	new idSupplier,Depth,Amt,Hash,HashValue,idInvoice,idSupplierLast
	new objFINAPInvoice
	
	kill Result  				; Clear Result
	if $get(Y)="" d ^WWWVAR
	set Depth=$length(Level) 	; Set the detail depth
	set idSupplier=Level	; Set the idFINGLAccount to Start at the Level ( Optimisation )
	
	if (idSupplier'="")&&($data(^FINAPInvoice(YM,idSupplier))) {	; If the Start Account exsits, go back one
		set idSupplier=$order(^FINAPInvoice(YM,idSupplier),-1) 	
	}
	
	for {											; Start of the Loop
		set idSupplier=$order(^FINAPInvoice(YM,idSupplier))
		quit:idSupplier=""
		if $extract(idSupplier,1,Depth)'=Level {  					; If the Supplier is outside the Level
			if (+Level'=Level)||(+idSupplier'=idSupplier) { 	; If it is a String Quit
				quit
			} else { 			; Do number checking
				set idSupplierLast=idSupplier
				; Pad out the Number with zeros
				; Example if the Level is 13 Check 13, 130, 1300, 13000 etc.
				set idSupplier=Level_$translate($justify("",$Length(idSupplier)-Depth)," ","0")
				if idSupplierLast>idSupplier set idSupplier=idSupplier_"0" ; If the Supplier is Greater than the Level add an zero.
				; If the Account exists, go back one
				if (idSupplier'="")&&($data(^FINAPInvoice(YM,idSupplier))) set idSupplier=$order(^FINAPInvoice(YM,idSupplier),-1)
			}
		} else {				; Record the Info
			set idInvoice=""
			set Amt=0
			for {
				set idInvoice=$order(^FINAPInvoice(YM,idSupplier,idInvoice))
				quit:idInvoice=""
				set objFINAPInvoice=$get(^FINAPInvoice(YM,idSupplier,idInvoice,1))
				set Amt=$$$FCAdd(Amt,$$$FINAPInvoiceBalance(objFINAPInvoice)) ; Get the Amount
			}
			set Result("Total")=$$$FCAdd($get(Result("Total")),Amt)
			set Hash=$extract(idSupplier,1,Depth+1)
			if Hash="" set Hash="?"
			set HashValue=$zcrc(idSupplier_"="_Amt,7)
			set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
		}
	}
	Quit 1
 
 
CheckTransZCRC(StartDate="",EndDate="",Location="",Level="",Result)
	;-------------------------------------------------------------------------------
	; Calculate the amount paid against invoices.
	;
	; Returns:
	;
	; History:
	; 20-May-2004		shobby		Creation
	;-------------------------------------------------------------------------------
 	;
	new idSupplier,Depth,Amt,Hash,HashValue,idInvoice,idSupplierLast,idNumber
	new objFINAPInvoiceTran
	
	kill Result  				; Clear Result
	if $get(Y)="" d ^WWWVAR
	set Depth=$length(Level) 	; Set the detail depth
	set idSupplier=Level	; Set the idFINGLAccount to Start at the Level ( Optimisation )
	
	if (idSupplier'="")&&($data(^FINAPInvoiceTran(YM,idSupplier))) {	; If the Start Account exsits, go back one
		set idSupplier=$order(^FINAPInvoiceTran(YM,idSupplier),-1) 	
	}
	
	for {											; Start of the Loop
		set idSupplier=$order(^FINAPInvoiceTran(YM,idSupplier))
		quit:idSupplier=""
		if $extract(idSupplier,1,Depth)'=Level {  					; If the Supplier is outside the Level
			if (+Level'=Level)||(+idSupplier'=idSupplier) { 	; If it is a String Quit
				quit
			} else { 			; Do number checking
				set idSupplierLast=idSupplier
				; Pad out the Number with zeros
				; Example if the Level is 13 Check 13, 130, 1300, 13000 etc.
				set idSupplier=Level_$translate($justify("",$Length(idSupplier)-Depth)," ","0")
				if idSupplierLast>idSupplier set idSupplier=idSupplier_"0" ; If the Supplier is Greater than the Level add an zero.
				; If the Account exists, go back one
				if (idSupplier'="")&&($data(^FINAPInvoiceTran(YM,idSupplier))) set idSupplier=$order(^FINAPInvoiceTran(YM,idSupplier),-1)
			}
		} else {				; Record the Info
			set idInvoice=""
			set Amt=0
			for {
				set idInvoice=$order(^FINAPInvoiceTran(YM,idSupplier,idInvoice))
				quit:idInvoice=""
				set idNumber=""
				for {
					set idNumber=$order(^FINAPInvoiceTran(YM,idSupplier,idInvoice,idNumber))
					quit:idNumber=""
					set objFINAPInvoiceTran=$get(^FINAPInvoiceTran(YM,idSupplier,idInvoice,idNumber,1))
					set Amt=$$$FCAdd(Amt,$$$FINAPInvoiceTranTransactionAmount(objFINAPInvoiceTran)) ; Get the Amount
				}
			}
			set Result("Total")=$$$FCAdd($get(Result("Total")),Amt)
			set Hash=$extract(idSupplier,1,Depth+1)
			if Hash="" set Hash="?"
			set HashValue=$zcrc(idSupplier_"="_Amt,7)
			set Result("Hash",Hash)=$zcrc($get(Result("Hash",Hash))_HashValue,7)
		}
	}
	Quit 1
 
 
Check(StartDate="",EndDate="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; Compares Invoices with Invoice Transactions.
    ; Used to drill down when these methods are at variance.
    ; Not very efficient but reuse of code.
    ;
    ; Returns:
    ;
    ; History:
    ; 29-Nov-2005	RPW			SR13916: Call FindMissingTransactions with the correct parameters
    ; 07-Jun-2004	shobby	 net strStatus flag when there is an error.
    ; 20-May-2004	shobby	 Rewrote to access data directly.
    ; 05-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new strStatus,idSupplier,idInvoice,objFINAPInvoice,fltAmount,idLine
	new objFINAPInvoiceTran,fltAmountInvoice,intMinorErrorCounter
	
	if $get(Y)="" d ^WWWVAR
	kill Result
	kill @$$$Check
	set strStatus=$$$OK
	set idSupplier=""
	if Level'="" set idSupplier=Level
	
	for {
		set idSupplier=$order(^FINAPInvoice(YM,idSupplier))
		quit:idSupplier=""
		quit:((Level'="")&&(idSupplier'=Level))
		set idInvoice=""
		set fltAmount=0
		for {
			set idInvoice=$order(^FINAPInvoice(YM,idSupplier,idInvoice))
			quit:idInvoice=""
			set objFINAPInvoice=$get(^FINAPInvoice(YM,idSupplier,idInvoice,1))
			set fltAmount=$$$FCAdd(fltAmount,$$$FINAPInvoiceBalance(objFINAPInvoice))
			set $piece(@$$$Check@(idSupplier,idInvoice),YKOMMA,1)=$$$FINAPInvoiceBalance(objFINAPInvoice)
		}
		set $piece(@$$$Check@(idSupplier),YKOMMA,1)=fltAmount
	}
	
	set idSupplier=""
	if Level'="" set idSupplier=Level
	for {
		set idSupplier=$order(^FINAPInvoiceTran(YM,idSupplier))
		quit:idSupplier=""
		quit:((Level'="")&&(idSupplier'=Level))
		set idInvoice=""
		set fltAmount=0
		for {
			set idInvoice=$order(^FINAPInvoiceTran(YM,idSupplier,idInvoice))
			quit:idInvoice=""
			set idLine=""
			set fltAmountInvoice=0
			for {
				set idLine=$order(^FINAPInvoiceTran(YM,idSupplier,idInvoice,idLine))
				quit:idLine=""
				set objFINAPInvoiceTran=$get(^FINAPInvoiceTran(YM,idSupplier,idInvoice,idLine,1))
				set fltAmount=$$$FCAdd(fltAmount,$$$FINAPInvoiceTranTransactionAmount(objFINAPInvoiceTran))
				set fltAmountInvoice=$$$FCAdd(fltAmountInvoice,$$$FINAPInvoiceTranTransactionAmount(objFINAPInvoiceTran))
			}
			set $piece(@$$$Check@(idSupplier,idInvoice),YKOMMA,2)=fltAmountInvoice
		}
		set $piece(@$$$Check@(idSupplier),YKOMMA,2)=fltAmount
	}
	
	; Compare
	set idSupplier=""
	for {
		set idSupplier=$order(@$$$Check@(idSupplier))
		quit:idSupplier=""
		set fltAmount("Invoice")=+$piece(@$$$Check@(idSupplier),YKOMMA,1)
		set fltAmount("Trans")=+$piece(@$$$Check@(idSupplier),YKOMMA,2)
		if fltAmount("Invoice")'=fltAmount("Trans") {
			set Result("Hash",$$$ErrorNo(Result("Errors")))=$$$Text($lb("Fin00348",idSupplier,fltAmount("Invoice"),fltAmount("Trans")))  ;Supplier(%1) : Invoice Balances(%2) do not match Invoice Transactions(%3).
			set strStatus='$$$OK
			set intMinorErrorCounter=0
			set idInvoice=""
			for {
				set idInvoice=$order(@$$$Check@(idSupplier,idInvoice))
				quit:idInvoice=""
				set fltAmount("Invoice",idInvoice)=+$piece(@$$$Check@(idSupplier,idInvoice),YKOMMA,1)
				set fltAmount("Trans",idInvoice)=+$piece(@$$$Check@(idSupplier,idInvoice),YKOMMA,2)
				if fltAmount("Invoice",idInvoice)'=fltAmount("Trans",idInvoice) {
					set Result("Errors")=Result("Errors")-1
					set Result("Hash",$$$ErrorNo(Result("Errors"))_"."_$i(intMinorErrorCounter))=$$$Text($lb("Fin00347",idInvoice,fltAmount("Invoice",idInvoice),fltAmount("Trans",idInvoice)))  ;Invoice ´%1´ does not balance. Balance=%2, transactions=%3.
				}
			}
			;do FindMissingTransactions(idSupplier,Result("Errors"),.Result)
			do FindMissingTransactions(idSupplier,.Result) ; SR13916
		}
		set strStatus=strStatus&$$FindMissingInvoices(idSupplier,.Result)
	}
	
	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}
	
	kill @$$$Check
	quit strStatus
 
 
FindMissingInvoices(pidFINAPSupplier,Result)
    ;-------------------------------------------------------------------------------
    ; Find if there are any FINAPInvoiceTran without a FINAPInvoice
    ;
    ; Returns:
    ;
    ; History:
    ; 07-Jun-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idInvoice,strStatus
	
	set strStatus=$$$OK
	set idInvoice=""
	for {
		set idInvoice=$order(^FINAPInvoiceTran(YM,pidFINAPSupplier,idInvoice))
		quit:idInvoice=""
		if '$data(^FINAPInvoice(YM,pidFINAPSupplier,idInvoice)) {
			set Result("Hash",$$$ErrorNo(Result("Errors")))=$$$Text($lb("Fin00344",YM,pidFINAPSupplier,idInvoice))   ;^FINAPInvoice(%1,%2,%3) is missing.
			set strStatus='$$$OK
		}
	}
	quit strStatus
 
 
FindMissingTransactions(pidFINAPSupplier,Result,pblnFix=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Find FINAPInvoice that have missing FINAPInvoiceTran
    ; Optional pblnFix flag to remove the Invoices that do not have transactions (should be 
    ; at least one when the invoice was created).
    ; 
    ; Note:
    ; Use pblnFix with Caution, deleting invoices should only be done with the knowledge
    ; that the Invoice is bad data.
    ;
    ; Returns:
    ;
    ; History:
    ; 05-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
 
	new idInvoice,intErrorLine,objFINAPInvoice,fltAmount,fltAmountTrans,objFINAPInvoiceTran
	
	set intErrorLine=0
	
	set idInvoice=""
	for {
		set idInvoice=$order(^FINAPInvoice(YM,pidFINAPSupplier,idInvoice))
		quit:idInvoice=""
		set objFINAPInvoice=$get(^FINAPInvoice(YM,pidFINAPSupplier,idInvoice,1))
		set fltAmount=$$$FINAPInvoiceInvoiceTotal(objFINAPInvoice)
		if '$data(^FINAPInvoiceTran(YM,pidFINAPSupplier,idInvoice,1)) {
			set Result("Hash","Error No. "_Result("Errors")_"."_$i(intErrorLine))=$$$Text($lb("Fin00346",idInvoice,fltAmount,$select(pblnFix:"Fixed",1:"")))  ;Invoice Transaction ´%1´ for %2 is missing. %3.
			if pblnFix {
				do KILL^FINSYS("FINAPInvoice",pidFINAPSupplier_YKOMMA_idInvoice)
			}
		} else {
			set objFINAPInvoiceTran=$get(^FINAPInvoiceTran(YM,pidFINAPSupplier,idInvoice,1,1))
			set fltAmountTrans=$$$FINAPInvoiceTranTransactionAmount(objFINAPInvoiceTran)
			if fltAmount'=fltAmountTrans {
				set Result("Hash","Error No. "_Result("Errors")_"."_$i(intErrorLine))=$$$Text($lb("Fin00345",idInvoice,pidFINAPSupplier,fltAmount))  ;First Invoice Transaction for Invoice ´%1´ (Supplier=%2), Amount(%3) is missing.
			}
		}
	}
	quit
 
]]></Routine>
</Export>