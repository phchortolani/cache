<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMDebug" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMDebug
	;-------------------------------------------------------------------------------
	; Record the current stack without the voluminous overhead of Common.Dump
	; 
	; Only dump if ^SysSetup("StackDump") is found true, ie. not "", not 0 and not starting with non numeric character
	;
	; Params: pstrDump - A string to identify the dump
	; 		  pstrMessage - Text to store with dump
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 10-Aug-2006	JW		SR14730: Added param defaults
	; 10-Apr-2006	PO		SR13965: Created
	;-------------------------------------------------------------------------------
StackDump(pstrDump,pstrMessage="")
	new tmeTimeStamp,idIndex,intIndex,intEnd,idUser,strUserName
 	
	if +$get(^SysSetup("StackDump")) {
 		
 		set:$get(pstrDump)="" pstrDump = $get(YBED," ")
 		
		set tmeTimeStamp = $horolog
		set idUser = $get(YUSER,"NONE")
		set strUserName = $get(YBED,"NONE")
	 	
		set idIndex = 1+$order(^LogStackDump(pstrDump,""),-1) ; If "" returned, make it 0.
		set ^LogStackDump(pstrDump,idIndex) = tmeTimeStamp_"~"_idUser_"~"_strUserName_"~"_pstrMessage
	 
		set intEnd = $stack(-1)
		for intIndex = 0:1:intEnd {
			set ^LogStackDump(pstrDump,idIndex,intIndex,"position") = $stack(intIndex,"PLACE")
			set ^LogStackDump(pstrDump,idIndex,intIndex,"code") = $stack(intIndex,"MCODE")
		}
 
	}
 
	quit

Step
	;-------------------------------------------------------------------------------
	; Single step through Code
	;
	; Use at the command line zb /trace:OFF b "s+" zb $:"T"::"d Step^COMDebug"
	; 
	; History:
	; 26-Feb-2014	SCR		Created
	;-------------------------------------------------------------------------------

	new TLevel,GlobalRef,Old,New
	new strSingleStep,strSingleStepRtn,strSingleStepLab,intPos
	set TLevel=$tlevel
	set GlobalRef=$zreference
	if '$get(%xvSkip) {
		kill %xv
		set %xv=""
	 	for {
			set %xv=$order(@%xv)
			quit:%xv=""
		 	if $extract(%xv,1,3)="%xv" CONTINUE  ; Dont Do this one
			merge %xv(%xv)=@%xv
		}
		set %xv="%xv"
		for {
			set %xv=$query(@%xv)
			quit:%xv=""
			;continue:$e(%xv)="%"
			set %xvOldVar="%xvOld("_$piece(%xv,"(",2,99)
			if $get(@%xvOldVar,"Undefined!")'=@%xv {
				write !,$qsubscript(%xv,1)
				write:$qsubscript(%xv,2)'="" "(",$piece(%xv,",",2,99)
				set intPos	= $x
				set Old		= $get(@%xvOldVar,"Undefined!")
				set New		= @%xv
				set Old		= ##class(Common.Dump).DumpData(Old)
				set New		= ##class(Common.Dump).DumpData(New)
				write " Old=",Old
				if $x+$LENGTH(New)>120 {
					write !,$justify("",intPos)
				}
				write " New=",New,!
			}
		}
		kill %xvOld
		merge %xvOld=%xv
		kill %xv
	}
	set strSingleStep=$ZUTIL(128,1)
	set strSingleStepRtn=$piece($piece(strSingleStep," ",3),"^",2)
	set strSingleStepLab=$piece($piece(strSingleStep," ",3),"^",1)
	set %xvSkip=0
	if $extract(strSingleStepRtn)="%" set %xvSkip=1
	if $extract(strSingleStepLab)="%" set %xvSkip=1
	;if $extract(strSingleStepLab)="z" set %xvSkip=1
	;if $extract(strSingleStepRtn,1,5)="alSYS" set %xvSkip=1
	if $extract(strSingleStepRtn,1,8)="CacheSql" set %xvSkip=1
	;if $extract(strSingleStepRtn,1,5)="WWW." set %xvSkip=1
	;if strSingleStepRtn["INARTMENGE" set %xvSkip=1
	;if " WWWVORG WWWVAR WWWTRAKT WWWLANGU WWWUSERAGENT COMUtilIndex WWWIP1 WWWUSER WWWUML WWWTEXT "[(" "_strSingleStepRtn_" ") set %xvSkip=1
	;if "%z"[$extract(strSingleStepLab) set %xvSkip=1
	if '%xvSkip {
		write !,strSingleStep
		set $zreference=GlobalRef
		if $translate($piece(strSingleStep," ",3),"+1234567890 ")'=$get(%xvLoc) {
			set %xvLoc=$translate($piece(strSingleStep," ",3),"+1234567890 ")
			write !
			set %xvStackSize=0
			set %xvStackCont=1
			for %xvStack=1:1:$stack(-1) {
				if $translate($stack(%xvStack,"PLACE"),"+1234567890@ ")=%xvLoc {
					set %xvStackCont=0
					quit
				}
				continue:'%xvStackCont
				set %xvStackCont=%xvStackCont+1
				;quit:%xvStackCont>8
				set %xvStackOut=$piece($stack(%xvStack,"PLACE")," ",1)
				set %xvStackLab=$piece(%xvStackOut,"^",1)
				set %xvStackRtn=$piece(%xvStackOut,"^",2)
				if %xvStackRtn=$get(%xvStackRtnLast) {
					set %xvStackOut=%xvStackLab
				}
				set %xvStackRtnLast=%xvStackRtn
				set %xvStackOut="->"_%xvStackOut
				set %xvStackSize=%xvStackSize+$length(%xvStackOut)
				if %xvStackSize>120 {
					write !
					set %xvStackSize=0
				}
				write %xvStackOut
			}
		}
	}
	quit

]]></Routine>
</Export>