<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="Cache" ts="2001-01-01 00:00:00">
<Routine name="VARImportarRotinasFormatar" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[VARImportarRotinasFormatar

    #include COMSYS
    #include VARConst
    
	;---------------------------------------------------------------------------------------------------------------------
	; Arquivo contendo rotinas para formatação de dados para usar durante importação de arquivos
	;
	; As rotinas aqui definidas devem levar em consideração que serão usadas por todos os ambientes/clientes.
	;
	; Portanto não utilize macros ou outras rotinas que sejam específicas de um cliente. Ex: VARSES, VARTCI, VARSESAU, etc.  
	;
	; Observações sobre as rotinas de formatação:
	;	- Devem conter somente um parâmetro de entrada.
	;	- Devem sempre retornar algum valor, sendo:
	;		- Em caso de Sucesso: o valor formatado.
	; 		- Em caso de Falha  : retorna o texto "Erro;mensagem" onde mensagem é diferente para cada rotina de formatação.
	;
	;---------------------------------------------------------------------------------------------------------------------
	
	
FormatarNumero(pValorEntrada="")
	;Rotina para formatar na importação campos numéricos
	
	quit:(pValorEntrada = "") ""
	
	set PossuiVirgula = $$$NO
	set PossuiPonto   = $$$NO 	
	
	if ($find(pValorEntrada,",") > 0) {
		set PossuiVirgula = $$$YES
	}
	
	if ($find(pValorEntrada,".") > 0){
		set PossuiPonto   = $$$YES
	} 
	
	set ValorFormatado = pValorEntrada
	
	;Se o número possuir ponto(.) e vírgula(,) identifica as posições e remove o separador que aparecer primeiro 
	if (PossuiVirgula) && (PossuiPonto){
		if ($find(pValorEntrada,".")) < ($find(pValorEntrada,",")) {
			;Remove os pontos. Ex: 1.234.567,89012 -> 1234567,89012
			set ValorSemMilhar = $$FullReplace^COMUtilStr(ValorFormatado,".","")
			;Substitui a vírgula por ponto. Ex: 1234567,89012 -> 1234567.89012
			set ValorFormatado = $$FullReplace^COMUtilStr(ValorSemMilhar,",",".")
		}
		else{
			;Remove as vírgulas. Ex: 1,234,567.89012 -> 1234567.89012
			set ValorSemMilhar = $$FullReplace^COMUtilStr(ValorFormatado,",","")	
			set ValorFormatado = ValorSemMilhar	
		}
	}
	elseif (PossuiVirgula){
		;Substitui a vírgula por ponto. Ex: 1234567,89012 -> 1234567.89012
		set ValorFormatado = $$FullReplace^COMUtilStr(pValorEntrada,",",".")
	}
	 
	;Se o valor final for um número válido retorna o número
	if $ISVALIDNUM(ValorFormatado) {	
		quit ValorFormatado
	}
	else{
		quit "Erro;-Valor de origem não é numérico ("_pValorEntrada_"-"_ValorFormatado_")"		
	}
	
	quit "Erro;-Formato de número não identificado ("_pValorEntrada_")"


FormatarCompetencia(pValorEntrada="")
	;Rotina para formatar na importação campos de competência
	
	quit:(pValorEntrada = "") ""
	
	;Tamanho deve estar entre 6 (mmyyyy) e 7 (mm/yyyy) caracteres
	if ($length(pValorEntrada) < 6) || ($length(pValorEntrada) > 7){
		quit "Erro;-Competência deve estar no formato mm/yyyy ou yyyymm. ("_pValorEntrada_")"	
	}
	
	;Se o tamanho for igual a 7 retira a barra e inverte para a posição correta
	if ($length(pValorEntrada) = 7) {
		set Mes = $piece(pValorEntrada,"/",1)
		set Ano = $piece(pValorEntrada,"/",2)
		quit Ano_Mes
	}
	else{
		quit pValorEntrada	
	}
	
	quit "Erro;-Formato de competência não identificado ("_pValorEntrada_")"


FormatarData(pValorEntrada="")
	;Rotina para formatar na importação campos de Data
	
	quit:(pValorEntrada = "") ""
	
	;Data deve estar no formato DD/MM/YYYY
	if ($length(pValorEntrada) '= 10){
		quit "Erro;-Data deve estar no formato dd/mm/yyyy. ("_pValorEntrada_")"	
	}	
	
	set DataConvertida = $zdateh(pValorEntrada,4,,,,,,,"Erro;-Data inválida. ("_pValorEntrada_")" )
	
	quit DataConvertida	
		
	quit "Erro;-Formato de data não identificado ("_pValorEntrada_")"


ConverterSiglaUFIBGE(pValorEntrada="")
	;Rotina para converter na importação de municípios do IBGE campo código de UF para sigla de UF
	
	quit:(pValorEntrada = "") ""
	
	new Existe,objUFIBGE,Sigla
	
	$$$VAR
	set Existe = $D(^VARUnidadeFederacaoIBGE(YM,pValorEntrada,1))
	if Existe {
		;Converte o código para a Sigla
		set objUFIBGE = $G(^VARUnidadeFederacaoIBGE(YM,pValorEntrada,1))
		set Sigla     = $piece(objUFIBGE,Y,1)

		if (Sigla '= ""){
			quit Sigla	
		}
		else{
			quit "Erro;-Sigla da UF não encontrada ("_pValorEntrada_")"	
		}
	
	}
	else{
		quit "Erro;-UF não cadastrada ("_pValorEntrada_")"	
	}
	
	quit "Erro;-Conversão de UF não identificada ("_pValorEntrada_")"


FormatarNumeroInteiro(pValorEntrada="")
	;Rotina para formatar na importação campos numéricos
	
	Quit:(pValorEntrada = "") 0
	
	Quit $FNumber(pValorEntrada,".",0)
	
FormatarHora(pValorEntrada="")
	;Rotina para formatar na importação campos numéricos
	Quit:(pValorEntrada = "") ""
	Quit $ZTimeH(pValorEntrada,2,,0)
	
FormatarConselho(pValorEntrada="")
	;Rotina para formatar na importação campos numéricos
	Quit:(pValorEntrada = "") ""
	If $Data(^INPARAs(0,1,$ZConvert(pValorEntrada,"U"),"VARMEDCONSELHO","PT")) {
		Quit $Order(^INPARAs(0,1,$ZConvert(pValorEntrada,"U"),"VARMEDCONSELHO","PT",""))
	}
	If $Data(^INPARA(0,"VARMEDCONSELHO","PT", $ZConvert(pValorEntrada,"U"))) {
		Quit $ZConvert(pValorEntrada,"U")
	}
	Quit ""
	
FormatarLicProfissional(pValorEntrada="")
	;Rotina para formatar na importação campos numéricos
	Quit:(pValorEntrada = "") ""
	If $Data(^INPARAs(0,1,$ZConvert(pValorEntrada,"U"),"MEDLICENSETYPE","PT")) {
		Quit $Order(^INPARAs(0,1,$ZConvert(pValorEntrada,"U"),"MEDLICENSETYPE","PT",""))
	}
	If $Data(^INPARA(0,"MEDLICENSETYPE","PT", $ZConvert(pValorEntrada,"U"))) {
		Quit $ZConvert(pValorEntrada,"U")
	}
	Quit ""]]></Routine>
</Export>