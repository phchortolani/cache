<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMViewUtils" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
COMViewUtils
	
#include WWWConst
#include COMConst
#include COMSYS
	
    ;-------------------------------------------------------------------------------
    ;  Routines to make sure that COMView runs smoothly.
    ;-------------------------------------------------------------------------------
	
CallBack(pstrRoutine,pstrParams)
	;-------------------------------------------------------------------------------
	; Call Cache Code that have been requested to be run via hyper events
	;
	; Params:
	; pstrRoutine - Extrinsic Cache Code
	; pstrParams - Parameters to Cache Code
	;
	; Returns: $$$OK
	;
	; History:
	; 05-Sep-2012	shobby	SR18082: if YBED is missing try and get it from %request
	; 21-Jun-2011	shobby	SRAdhoc: Display the event if in Debug2 mode.
	; 14-Nov-2007	GRF		SR15612: Relocate debug to simplify CallBack
	; 01-Jun-2007	RGB		SRBR014493: Customization relations weren't being checked
	; 							under "GetRelation". Fixed.
	; 21-Mar-2007	PO		SR15483: Check whether code is allowed to be executed
	;-------------------------------------------------------------------------------
	new ParamLoop,strExecute,strParam
	
    if $$AllowExecution^WWWEVENTUtils(pstrRoutine,pstrParams) { // Check whether this is allowed to be run
        // Cache call back code
		set strExecute = "do "_pstrRoutine_"("
	
		if pstrParams'="#NoParam#" {
			for ParamLoop=1:1:$length(pstrParams,"~") {
				if ParamLoop'=1 set strExecute=strExecute_","
				set strParam   = $$DoubleQuotes^COMUtilStr($piece(pstrParams,"~",ParamLoop))
				set strExecute = strExecute_$$QuoteString(strParam)
			}
		}
		set strExecute = strExecute_")"
		
		if $get(^Debug1) {
			do Log(strExecute)                  ; SR15612
		} else {
			;SR18082 if $get(^Debug2(YBED)) $$$Alert(strExecute)
      		if $get(YBED)="" {																;SR18082
	      		new YBED		; Avoid any side effects									;SR18082
	      		set YBED = $get(%request.Data("YBED",1))									;SR18082
      		}
      		if (($get(YBED) '= "") && ($get(^Debug2(YBED)))) $$$Alert(strExecute)			;SR18082
			xecute strExecute        // FIXME : Use instead ? do ExecuteCode^COMUtils(strExecute)
		}
    }
	
	quit $$$OK

 // <MAXNUMBER> on values with more than 310 digits
QuoteString(pstrParam)
	new strValue

	set $ztrap = "exceptionQuoteString"
	set strValue = $$$Add(pstrParam)
	set $ztrap = ""
	goto finallyQuoteString

exceptionQuoteString
	set $ztrap = ""
	set strValue = """"_pstrParam_""""

finallyQuoteString
	quit strValue

Log(strExecute) private
	;-------------------------------------------------------------------------------
	; History:
	; 14-Nov-2007	GRF		SR15612: Relocate debug to simplify CallBack
	;-------------------------------------------------------------------------------
	new io,ipio,Line,LineCount
	
	set ipio = $io
	set io   = "COMView"_YUSER_".txt"
	open io:"wns":0
	use io
	xecute strExecute              // FIXME : Use instead ? do ExecuteCode^COMUtils(strExecute)
	close io
	open io:"rs":0 else  use ipio
	do $ZUTIL(68,40,1)
	write !,"var t=new Date();"
	set LineCount=0
	for {
		use io
		quit:$zeof=-1
		
		read Line
		use ipio
		write !,Line
		write !,"var n=new Date();"
		write !,"CallBackTime[CallBackTime.Current].Line["_LineCount_"]='"_$zcvt(Line,"o","JS")_"';"
		write !,"CallBackTime[CallBackTime.Current].LineTime["_LineCount_"]=((n-t)/1000);"
		write !,"t=n;"
		set LineCount = LineCount+1
	}
	use ipio
	close io
	do $ZUTIL(140,5,io) ; Remove File	
 
	quit
	
	
CompileTest(pblnForce=0)
    ;-------------------------------------------------------------------------------
    ; Check to make sure that all @net classes are compiled correctly.
    ;
    ; History:
    ; 17-Feb-2005	Paul K	Added code to compile not up-to-date classes.
    ; 07-Dec-2004	Paul K	Created  (SR#11081)
    ;-------------------------------------------------------------------------------
	new idClass,strError
 
	set idClass = ""
	for {
		set idClass = $order(^WWW001(0,idClass))
		quit:idClass=""
		
		if $extract(idClass,1,3)'="OBS" {
			if ('##Class(%Dictionary.CompiledClass).%ExistsId("User."_idClass))||(pblnForce) {
				do CompileAtNet(idClass)
			}
			kill strError
			set strError=""
			if '##Class(%Dictionary.CompiledClass).%ExistsId("User."_idClass) {
				write !,idClass_" not compiled by @net correctly"
			} elseif '$$Compile(idClass,.strError) {
				write !,idClass_" not compiled by cache. Reason:"_strError(1)
			} else {
				write !,idClass_" OK."
			}
		}
	}
	quit
	
	
Compile(pidClass,pstrError)
    ;-------------------------------------------------------------------------------
    ; Just a wrapper for the compiler so it doesn't spit out HTML to the screen.
    ;
    ; History:
    ; 01-Dec-2004	Paul K	Created
    ;-------------------------------------------------------------------------------
	new ipio,io,blnSuccess
	
	set ipio = $io
	set io   = "Dummy.txt"
	open io:"wns":0 else  write "failed"
	set %ZCS("USE_PORT")="U """_io_""""
	use io
	set blnSuccess = $$Compile^%apiOBJ("User."_pidClass,"u",.pstrError)
	close io
	use ipio
	set %ZCS("USE_PORT")="U """_ipio_""""
	
	do $ZUTIL(68,40,1)
	do $ZUTIL(140,5,io) ; Remove File
	
	quit blnSuccess
	
	
CompileAtNet(pidClass)
    ;-------------------------------------------------------------------------------
    ; Just a wrapper for the compiler so it doesn't spit out HTML to the screen.
    ;
    ; History:
    ; 21-Jul-2009	PPP		SR16757:Compile without display
    ; 01-Dec-2004	Paul K	Created
    ;-------------------------------------------------------------------------------
	new ipio,io
	
	set ipio = $io
	set io   = "Dummy.txt"
	open io:"wns":0 else  write "failed"
	set %ZCS("USE_PORT")="U """_io_""""
	use io
	do COMPILE^WWW001OO(pidClass,$$$YES)
	close io
	use ipio
	set %ZCS("USE_PORT")="U """_ipio_""""
	do $ZUTIL(68,40,1)
	do $ZUTIL(140,5,io) ; Remove File
	
	quit
	
	
SuperUser()
    ;-------------------------------------------------------------------------------
    ; Check if the current user is a Super User
    ;
    ;
    ; History:
    ; 22-Jul-2013	shobby	CORE-188: System Administrator should be a SuperUser regardless
    ;								  of any other type selected as SuperUser
    ; 10-Sep-2012	SCR		SR18112: Super User Clas user definable
    ;-------------------------------------------------------------------------------

	new blnSuper
	; SR18112 vvvvvv
	;set blnSuper = $$$NO
	
	;if $find(";"_$$$WWW013UserAccess($get(^WWW013(0,YBED,1)))_";",";1;") {
	;	set blnSuper = $$$YES
	;}
	;for i=1:1:100 h 1
	set objCOMViewConfig	 = $get(^COMViewConfig(0,YM,1))
	set strSuperUserClass	 = $$$COMViewConfigSuperUser(objCOMViewConfig)
 	;CORE-188 set:strSuperUserClass="" strSuperUserClass=1
 	if strSuperUserClass="" {								;CORE-188 
	 	set strSuperUserClass=1								;CORE-188 
 	} else {												;CORE-188 
	 	set strSuperUserClass=strSuperUserClass_";1"		;CORE-188 
 	}														;CORE-188 
 	set blnSuper = $$UserHasAccess^COMUtils(YBED,strSuperUserClass,,$$$NO) 
	; SR18112 ^^^^^^
	
	quit blnSuper
	
	
GetRelation(&pidClass,&pstrField,&pidForm="",pstrKeyCode="",pblnDisplayModeOnly=$$$NO)
    ;-------------------------------------------------------------------------------
    ; fields are stored like "P1" and "D8" where P means primary key and "D" means data field
    ; 
    ; Note:The class definition of WWW002 and WWW003 are currently the same, and
    ; are used interchangably in this code.
    ; 
    ; Inputs: 	pidClass,
    ; 			pstrField,
    ; 			pidForm,
    ; 			pstrKeyCode,
    ; 			pblnDisplayModeOnly - If $$$YES, will skip processing not needed for display calls.
    ; 
    ; Note. "M" fields are translated from the form definition.
    ; 
    ; Returns:@Net object (WWW002/WWW003)
    ;
    ; History:
	; 02-Jul-2009	PPP		SR16663: Add the Calculated Relation Display Fields
    ; 23-Feb-2009	shobby	SR16386:	Support Currency in calculated fields.
    ; 19-Feb-2008	shobby	SRBR014900: If Piece2 of pstrField starts with a C get the pidForm from pidClass
    ; 14-Feb-2008	shobby	SRBR014895: Removed previous change.  Prevented displaying of search form.
    ; 									Only been 3 days but I don't remember why I thought it was needed.
    ; 									Should it have been 'AssociatedWithField'
    ; 11-Feb-2008	shobby	SRBR014895: If a relation class is used to populate the data field with
    ; 									a field of the relation class and not the primary key then
    ; 									we want to ignore the reference.
    ; 08-Jan-2008	GRF		SRBR014855: Don't call PopulateFileListing when a File
    ; 							Type field already has a relation defined.
    ; 19-Nov-2007	shobby	SRBR014751: More detailed information about the relation
    ; 							can be obtained when the form is known (customisation)
    ; 23-Nov-2007	GRF		BR014790: Show &params based on .params when called.
    ; 21-Nov-2007	GRF		BR014790: Causing problems - reverted with some changes
    ; 							incorporated - 20-Nov code retained as comment.
    ; 							Use index 4 rather than 5 for efficiency.
    ; 							idFormField already used elsewhere - used for "D"
    ; 							processing as clearer why idField is changed.
    ; 							ChangeInputAs line not restored as this was a bug.
    ; 20-Nov-2007	shobby	BR014790: idField pass to $Get routine needs to be
    ; 							translated from the class field to the form field.
    ; 19-Nov-2007	shobby	BR014790: Use standard routine to get WWW122 information.
    ; 03-Aug-2006	SC		SR14871: Speedup - Skip processing not used by display calls.
    ; 23-Sep-2005	shobby	SR13213: Special code to handle sort by for Calculated fields.
    ; 20-Sep-2005	JW		SR13536: Also check form data input type.
    ;  5-Sep-2005	JW		SR13411: Moved call inside if statement.
    ; 24-Aug-2005	JW		SR12876: File fields
    ; 18-May-2005	Paul K	Ensured KeyCode was either "D" or "P", not "C"
    ; 11-May-2005	Paul K	Return KeyCode as parameter SR:12199
    ; 10-May-2005	Paul K	Added support for change input as
    ; 07-Feb-2005	PO		SR10965 Adding support for related classes.
    ; 30-Nov-2004	Paul K	Created
    ;-------------------------------------------------------------------------------
	new objRelation,objForm,idField,KeyCode,idClass,idNextFields,strPiece2,strPiece3,FieldType,idForm
	new idFormField,objCalculated,idxClass
	
	set objRelation=""
	
	; FIXME : <GRF> see BR014790 pidForm may be set to the first form associated with pidclass
	;               e.g. Class INLP is associated with forms INFIBLP and INLP
	;                    pidForm gets set to "INFIBLP"
	;               This may or may not have implications below.
	               
	if pidForm="" set pidForm = $get(^CacheTempView(YUSER,"Form"))  ;BR014790
	
	if pstrField'="Custom" {
		if $extract($piece(pstrField,".",2))="C" {
			set idNextFields =""
			set strPiece2    = $piece(pstrField,".",2)
			set strPiece3    = $piece(pstrField,".",3)
			set pstrKeyCode  = $extract(strPiece3,1)
			set idClass      = $extract(strPiece2,2,99)
			set FieldType    = $extract(strPiece3)
			set idField      = $extract(strPiece3,2,99)
			set pidForm      = idClass
		
		} else {
			set idNextFields = $piece(pstrField,".",2,99)
			set pstrField    = $piece(pstrField,".",1)
			set pstrKeyCode  = $extract(pstrField,1)
			set idField      = $extract(pstrField,2,99)
			set idClass      = pidClass
		}
		
		if idField'="" {
			if pstrKeyCode="C" {
				set objRelation   = ""
				set objCalculated = $get(^WWW003Calc(0,idClass,idField,1))
				set $$$WWW002InputType(objRelation) = 6
				if $$$WWW003CalcDataType(objCalculated)="%Boolean"  set $$$WWW002InputType(objRelation) = 2
				if $$$WWW003CalcDataType(objCalculated)="%Float"    set $$$WWW002InputType(objRelation) = 12
				if $$$WWW003CalcDataType(objCalculated)="%Currency" set $$$WWW002InputType(objRelation) = 8
				;More data types required here eventually
				if $$$WWW002PropertyName(objRelation)="" set $$$WWW002PropertyName(objRelation) = $$$WWW003CalcFieldName(objCalculated)
				if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
					if $LENGTH($$$WWW003CalcRelationClass(objCalculated)) > 0 set $$$WWW002RelationClass(objRelation) = $$$WWW003CalcRelationClass(objCalculated)
				}			

			} else {
				if idClass'="" {
					if pstrKeyCode="P" set objRelation = $get(^WWW002(0,idClass,idField,1))
					if pstrKeyCode="D" set objRelation = $get(^WWW003(0,idClass,idField,1))
				}
			
				if pidForm'="" {
					if pstrKeyCode="M" {
	; 		1. pstrField is passed in as P#, D#, or M#
	; 		   *ONLY* D# needs to be converted from a class field number to a form field number
	; 		   "P" fields are the same in Class and Form and not applicable here.
	; 		   "M" fields do not have a Sequence Number (WWW122 D1)
	; 		   
	; 		2. Sequence Number (WWW122 D1) is indexed as 4 and 5.2 (5.1 being P1)
	; 		   Index 4 has the format ^WWW122s(0,4,ClassField,pidForm,FormField)
	; 		   Index 5 has the format ^WWW122s(0,5,$$$Index(pidForm),ClassField,pidForm,FormField)
	; 		   Index 4 should be faster - fixed here and 5 changed to 4 below
						set objForm = $$Get^WWW122(pidForm,idField)
						set $$$WWW002InputType(objRelation)              = $$$WWW122InputType(objForm)
						set $$$WWW002RelationClass(objRelation)          = $$$WWW122RelationClass(objForm)
						set $$$WWW002RelationalPrimaryKeys(objRelation)  = $$$WWW122RelationalPrimaryKey(objForm)
						set $$$WWW002RelationalDisplayItems(objRelation) = $$$WWW122RelationalDataField(objForm)
						set $$$WWW002CalcRelationalDisplayItems(objRelation) = $$$WWW122CalcRelationalDataField(objForm)	//SR16663
						set $$$WWW002DisplayIfSortKeyEqual(objRelation)  = $$$WWW122DisplayIfSortCodes(objForm)
						
					} elseif pstrKeyCode="D" {
						; convert class field number to form field number
						set idFormField = $order(^WWW122s(0,4,idField,pidForm,""))
						if idFormField'="" {
							set objForm = $$Get^WWW122(pidForm,idFormField)
							if $$$WWW122InputType(objForm)'=""               set $$$WWW002InputType(objRelation)              = $$$WWW122InputType(objForm)
							if $$$WWW122DisplayIfSortCodes(objForm)'=""      set $$$WWW002DisplayIfSortKeyEqual(objRelation)  = $$$WWW122DisplayIfSortCodes(objForm)		
							if $$$WWW122RelationClass(objForm)'=""           set $$$WWW002RelationClass(objRelation)          = $$$WWW122RelationClass(objForm)
							if $$$WWW122RelationalPrimaryKey(objForm)'=""    set $$$WWW002RelationalPrimaryKeys(objRelation)  = $$$WWW122RelationalPrimaryKey(objForm)
							if $$$WWW122RelationalDataField(objForm)'=""     set $$$WWW002RelationalDisplayItems(objRelation) = $$$WWW122RelationalDataField(objForm)
							if $$$WWW122CalcRelationalDataField(objForm)'="" set $$$WWW002CalcRelationalDisplayItems(objRelation) = $$$WWW122RelationalDataField(objForm)	//SR16663
						}
					}
					
	; FIXME : <GRF> (noted on BR014790 but appears not due to that Service Request)
	;    if any field as a column on the COMViewSearch being used is set to
	;    "File Name" it will build ^CacheTempView(YUSER,"AppendValue") which will
	;    subsequently be prepended to the result of the search.
	;    This option is apparently intended to provide a means of performing a file
	;    directory listing rather than reacting as it does.
					
					;if $$$WWW002InputType(objRelation)=10 { //SR12876: Show file listing	// SR13411
					
	;---------------------------------------
	; FIXME : <GRF> The PopulateFileListing process is called for EVERY line in a
	;               COMView table.  It kills and re-creates ^COMDirectoryListing
	;               for the source directory as a means of validating filenames
	;               but this validation is not needed during COMView display of
	;               records based on other data which merely includes data of file
	;               type (class 10 or form 9).
	;               
	;               NOTE : Class D2 applies to both WWW002 and WWW003 but Form D2
	;                      is WWW122 (it is D104 in WWW121).
	;               
	;               It also replaces the Relation type, losing any connection to the
	;               original relation which may be a parameter list containing the
	;               file names as data.
	;               
	;               This type of validation should be used to build a list of valid
	;               filename entries for selection where the field being searched is
	;               itself the file type data.
	;               
	;               If used, the ^COMDirectoryListing global should only be
	;               refreshed at the beginning of a validation cycle.
	;               i.e.
	;                  1.    Start Validation of File type data
	;                  2.    Kill ^COMDirectoryListing for path
	;                  3.    Build ^COMDirectoryListing for path
	;                  4.    Apply possible filtering to COMDirectoryListing
	;                  5.    Use "COMDirectoryListing" as relation for 
	;                    a)  Initial list of files
	;               or   b)  Validating entered filenames - possibly over multiple
	;                        records.
	;                      
	;               NOTE : PopulateFileListing updates objRelation to show the
	;                      relation based on the created ^COMDirectoryListing.
	;                        
	;               NOTE : The call to $$GetDirectory^WWWUploadDirectory will return
	;                      the standard FTP directory by default if there is no
	;                      entry in ^WWWUploadDirectory for the form or module.
	;                      This does not consider where a relation may already exist
	;                      such as INLP D1 "Graphic Allocation" which is based on
	;                      the image files already stored in ^WWW101(0,"BELEGUNG").
	;                      In those cases we should NOT be calling
	;                      PopulateFileListing.
	;---------------------------------------
					
					if ($$$WWW002InputType(objRelation)=10) || ($$$WWW122DataInputType($get(objForm))=9) {
						if $$$WWW002RelationClass(objRelation) = "" {
							do PopulateFileListing(pidForm,.objRelation)
						}
					}
					
				} else {                                       ; when pidForm=""
					if 'pblnDisplayModeOnly {
						set idxClass = $$$Index(idClass)
						set idForm   = ""
						for {
							set idForm = $order(^WWW120s(0,1,idxClass,idForm))
							quit:idForm=""
							
							if pstrKeyCode="D" {
								set idFormField = $order(^WWW122s(0,4,idField,idForm,""))
								if idFormField'="" {
									set objForm = $get(^WWW122(0,idForm,idField,1))
									if $$$WWW122ChangeInputAs(objForm)'="" set $$$WWW122ChangeInputAs(objRelation) = $$$WWW122ChangeInputAs(objForm)
								}
							} elseif pstrKeyCode="P" {
								set objForm = $get(^WWW121(0,idForm,idField,1))
								if $$$WWW122ChangeInputAs(objForm)'=""     set $$$WWW122ChangeInputAs(objRelation) = $$$WWW122ChangeInputAs(objForm)
							}
							quit:$$$WWW122ChangeInputAs(objRelation)'=""
						}
					}
				}
			}
		}
		if ($extract($piece(pstrField,".",2))'="C") && 
		   (idNextFields'="")                       &&
		   ($$$WWW002RelationClass(objRelation)'="")   {
			set pidClass	= $$$WWW002RelationClass(objRelation)
			set pidForm     = pidClass  ; If drilling down further always assume the form and class are the same.   FIXME : is this valid?
			set pstrField   = idNextFields
			set objRelation = $$GetRelation(.pidClass,.pstrField,.pidForm,.pstrKeyCode)
			
		} elseif $extract($piece(pstrField,".",2))="C" {
			set pidClass  = idClass
			set pstrField = strPiece3
		}
	}
	quit objRelation
	
	
FindRelation(pidClass,pstrRelation,pidKey)
    ;-------------------------------------------------------------------------------
    ; Used to find unknown relational primary keys.
    ;
    ; History:
    ; 21-Apr-2008	shobby	SR16485: Do more intensive search to find relations by
    ; 							looking at all forms related to a class and include
    ; 							this class as well.
    ; 09-Dec-2004	Paul K	Created
    ;-------------------------------------------------------------------------------
	new blnFound,intNumKeys,KeyLoop,objKey,idForm,idFormKey,strGlobal
	new idFormField,objField,Loop,idClass,intCompany,idClassRel
	
	set blnFound = $$$NO
 
	if (pidClass'="") && (pidKey'="") {
		set intNumKeys = $order(^WWW002(0,pidClass,""),-1)
		for KeyLoop=intNumKeys:-1:1 {
			quit:blnFound
			
			set objKey = $get(^WWW002(0,pidClass,KeyLoop,1))
			if $$$WWW002RelationClass(objKey)'="" {
				set idClassRel = $$$WWW002RelationClass(objKey)
				for idClass = idClassRel,pidClass {
					quit:blnFound
					
					set idForm = ""
					for {
						set idForm = $order(^WWW120s(0,1,$$$Index(idClass),idForm)) ;SR16485
						quit:blnFound
						quit:idForm=""
						
						set idFormKey = ""
						for {
							set idFormKey = $order(^WWW121(0,idForm,idFormKey))
							quit:idFormKey=""
							quit:blnFound
							
							if pstrRelation=$$$WWW122InputInVariable($get(^WWW121(0,idForm,idFormKey,1))) {
								set @pstrRelation = $piece(pidKey,",",idFormKey)
								set blnFound      = $$$YES
							}
						}
						set idFormField = ""
						for {
							set idFormField = $order(^WWW122(0,idForm,idFormField))
							quit:idFormField=""
							quit:blnFound
							
							set objField = $get(^WWW122(0,idForm,idFormField,1))
							if pstrRelation=$$$WWW122InputInVariable(objField) {
								set blnFound   = $$$YES
								set intCompany = $select($$$WWW001SharedFile($get(^WWW001(0,idClass,1))):0,1:YM)  ; FIXME : YM Deprecated
								set strGlobal  = "^"_idClass_"("_$$$Add(intCompany)
								for Loop=1:1:KeyLoop {
									set strGlobal = strGlobal_","_$$$Add($piece(pidKey,",",Loop))
								}
								set strGlobal     = strGlobal_",1)"
								set @pstrRelation = $piece($get(@strGlobal),Y,$$$WWW122SequenceNumber(objField))
							}				
						}
					}
				}
			}
		}	
	}
	quit
	
	
GetGlobal(pidClass,pidKey)
    ;-------------------------------------------------------------------------------
    ; Returns a global pointer for a given class and SQL ID.
    ;
    ; Returns:
    ;
    ; History:
    ; 10-Jan-2005	Paul K	Created
    ;-------------------------------------------------------------------------------
	new strRef,KeyLoop,idKey
	
	set idKey  = ""
	set strRef = "^"_pidClass_"("
	
	for KeyLoop=1:1:$length(pidKey,"||") {
		set strRef = strRef_""""_$piece(pidKey,"||",KeyLoop)_""","
		if KeyLoop'=1 {
			if idKey'="" set idKey = idKey_","
			set idKey = idKey_$translate($piece(pidKey,"||",KeyLoop),",","|")
		}
	}
	set pidKey = idKey
	set strRef = strRef_"1)"
	
	quit strRef
	
	
PopulateFileListing(pidForm="",&pobjRelation)
    ;-------------------------------------------------------------------------------
    ; Ensures that PopulateFileListingCode is not run for every line on a COMView.
    ; It will now only run once when COMView is loading.  (The assumption being that
    ; the contents of the directory in question rarely ever change and that, if they
    ; have, then the background process will have time to complete before the
    ; results are required.  i.e. COMView item has been selected.)
    ;
    ; Params:   pidForm		 - The form
    ; 			pobjRelation - byRef relation for field
    ;
    ; Returns:
    ;
    ; History:
    ; 09-Jan-2008	GRF		SRBR014855: Restored line to set dteLastRun; set LastRun
    ; 							timestamp on commencement (as well as at end) to
    ; 							stop mutiple jobs being generated before the first
    ; 							has gotten to write the LastRun timestamp.
    ; 08-Jan-2008   shobby	SRBR014855: Moved some things back and forward with
    ; 						    PopulateFileListingCode to allow 'job' to remain.
    ; 08-Jan-2008	GRF		SRBR014855: show "&" for byRef argument, add "." for
    ; 							byref argument in called routine - needs to revert
    ; 							to "do" since cannot return desired byRef through job
    ; 07-Jan-2008	shobby	SRBR014855: created
    ;-------------------------------------------------------------------------------
	new dteLastRun,strDirectory
	
	set strDirectory = $$GetDirectory^WWWUploadDirectory(pidForm)
	if strDirectory'="" {
		set ^CacheTempView(YUSER,"AppendValue") = strDirectory
		set dteLastRun=$get(^COMDirectoryListingLastRun(YM,strDirectory,"Timestamp"))
		
	;	refresh if not created in last 5 seconds
		if $$DateDiff^COMUtilDate(dteLastRun,$horolog)>5 {
			job PopulateFileListingCode(pidForm,strDirectory,YM):(:1::)
			set ^COMDirectoryListingLastRun(YM,strDirectory,"Timestamp") = $horolog
			set $$$WWW002RelationClass(pobjRelation)         = "COMDirectoryListing"
			set $$$WWW002RelationalPrimaryKeys(pobjRelation) = $$$DBLQUOTE_strDirectory_$$$DBLQUOTE
		}
	}
	quit
	
	
PopulateFileListingCode(pidForm="",pstrDirectory,pYM)
	;-------------------------------------------------------------------------------
	; Populate COMDirectory with directory contents (only files)
	;
	; Params: pobjRelation - byRef relation for field
	; 		  pYM		   - Pass this as a parameter because it will not be defined
	; 		  				 when this routine is called by 'job'
	;
	; Returns:
	;
	; History:
	; 08-Jan-2008	shobby	SRBR014855: Moved the pobjRelation code to PopulateFileListing.
	; 08-Jan-2008	shobby	SRBR014855: Moved the 'timestamp' update from PopulateFileListing.
    ; 08-Jan-2008	GRF		SRBR014855: show "&" for byRef argument
	; 07-Jan-2007	shobby	SRBR014855: Create a temporary structure then move the
	; 							results at the end.  99.99% of the time the new and
	; 							old results are not going to differ.
	; 22-Aug-2005	JW		SR12876: Created
	;-------------------------------------------------------------------------------
	new objFile,resultSet
 
	if pstrDirectory'="" {
		kill ^CacheTempCOMDirectoryListing(pYM,pstrDirectory)  ;BR014855
		
		set resultSet = ##class(%ResultSet).%New("%File:FileSet")
		if resultSet'="" {
			if $$$ISOK(resultSet.Execute(pstrDirectory,"*")) {
				for {
					quit:'resultSet.Next()
					
					if resultSet.Data("Type")="F" {
						set $$$COMDirectoryListingSize1(objFile)    = resultSet.Data("Size")
						set $$$COMDirectoryListingCreated(objFile)  = $zdth(resultSet.Data("DateCreated"),3)
						set $$$COMDirectoryListingModified(objFile) = $zdth(resultSet.Data("DateModified"),3)
						set ^CacheTempCOMDirectoryListing(pYM,pstrDirectory,resultSet.Data("ItemName"),1) = objFile
					}
				}
			}
		}
		kill ^COMDirectoryListing(pYM,pstrDirectory)
		merge ^COMDirectoryListing(pYM,pstrDirectory)=^CacheTempCOMDirectoryListing(pYM,pstrDirectory)
		kill ^CacheTempCOMDirectoryListing(pYM,pstrDirectory)
		set ^COMDirectoryListingLastRun(YM,pstrDirectory,"Timestamp") = $horolog
	}
	quit
	
]]></Routine>
</Export>