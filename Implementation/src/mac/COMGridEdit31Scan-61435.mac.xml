<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="COMGridEdit31Scan" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include COMGridEdit31
#include COMSYS
	
COMGridEdit31Scan(idAction,strData)
    ;-------------------------------------------------------------------------------
	; Scan Input field handler
    ; 
	; Params:
    ; idAction 	- Action to be performed
    ; strData 	- scanned data (idItem@idLot)
	;
	; Returns:
    ; 
    ; History:
	; 24-Jun-2011	PPP		SR17802: Added new data returned idType, sc
    ; 19-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	new idForm,idScan,strReturn
	new idType, sc
	
	set strReturn = Y 
	if $translate($get(strData),Y)'="" {
 		set idScan 	= $piece(strData,Y,1)
 		set idForm 	= $piece(strData,Y,2)
 		set idType 	= $piece(strData,Y,3)						//SR17802
 		set sc 		= $piece(strData,Y,4)						//SR17802
		
		if idAction="READ" {  
			set strReturn = $$READ(idScan,idForm)
			if 'strReturn {
				//$$$Alert($$$MakeStatus("IN00801"))			// "Invalid Item"
				//$$$Alert($$$MakeStatus($piece(strReturn,Y,4)))	// "Invalid Item"
				$$$Alert($$$Text($piece(strReturn,Y,4)))	// "Invalid Item"
			}

		} elseif idAction="UPDATE" {  
			set strReturn = $$UPDATE(idScan, idForm, idType)	//SR17802
		}
	}
	quit strReturn
	
	
READ(pidInput="", pidForm)
	;-------------------------------------------------------------------------------
	; Check if the entered Input is a Valid Entry
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 07-Jul-2011	SCR		SR17802: Pass 'Create Storage' flag
	; 24-Jun-2011	PPP		SR17802: Added new output idType & sc (1)
	;						Always scan Items, before other scans (2)
    ; 19-May-2009	PPP		SR16565: Scanning Prompt for Grid
	;-------------------------------------------------------------------------------
	new blnOk,enumErrCode,idClass,idItem,idOldInput,idOutput,idRest,idType,sc,strDelim
	
	set idClass = $$GetScanClass^WWW120Scan(pidForm)
	
	set idOldInput 	= pidInput
	if (+$$$WWWClientParamCoreChangesHEVA($get(^WWWClientParam(YM,YM,1)))) {
		set pidInput	= $$ConvertScan^VARCompareBarCodes(pidInput)
	}
	set blnOk      	= $$$NO
	set strDelim 	= $$$ScanDelim
	set sc      	= ""

	//FIXME 28-Jun-2011 PPP :
	//At some point the input needs to made UpperCase (especially for Lot uniqueness, may cause
	//issues with the items as @NM allows upper and lower case alphanumerics in the # field)
	//set pidInput 	= $zcvt(pidInput,"U")
	
	set idItem 	= $piece(pidInput,strDelim,1)
	set idRest  = $piece(pidInput,strDelim,2,99)
	
	//SR17802 VVVVV
	/**********
	if idClass = "INART" {
		do GetId^COMQuickSearch(idClass,,.idItem)
		
		if $get(idItem)'="" {
			if $data(^INART(YM,idItem)) {
				set blnOk = $$$YES
			}
		}
	
	}
	**********/
	set idType = 1									//Item	SR17802:1
	
	//SR17802:2
	if $get(idItem)'="" {
	
		//Always scan for Item
		do GetId^COMQuickSearch("INART",,.idItem)
	
		if $data(^INART(0,idItem)) {
			set blnOk = $$$YES
		} else {
			set sc = "IN00801"						// "Invalid Item"
		}
		
		
		//SR17802
		if (('blnOk) && (idClass = "INLP")) { 
			set blnOk = $$IsStorageValidForLocation^INLPCode(idItem, .enumErrCode,$$$YES)
			;set blnOk = $$IsStorageValidForLocation^INLPCode(idItem, .enumErrCode)
			if blnOk {
				set idType=2 						//Storage SR17802:1			
			} else {
				set sc = enumErrCode
			}
			
		}

	}
	//SR17802 ^^^^

	set idOutput = idItem
	
	//Only if Other parameteres exists (Lot #, ExpiryDate, Brand, Owner, Program)	
	if idRest'="" {
		set idOutput = idItem_strDelim_idRest
	}

	//SR17802
	//quit blnOk_Y_idOutput
	quit blnOk_Y_idOutput_Y_idType_Y_$lb(sc)
	
	
UPDATE(pidScan, YFORM="", pidType=1)
	;-------------------------------------------------------------------------------
	; Create a new line or update the existing line qty
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 24-Jun-2011	PPP		SR17802: Added new parameter pidType
    ; 19-May-2009	PPP		SR16565: Scanning Prompt for Grid
	;-------------------------------------------------------------------------------
	new strExecute,strStatus
	
	set strStatus = $$$OK
	
 	if YFORM'="" {
		set strExecute = $$GetScanExecute^WWW120Scan(YFORM)
	 
	 	//set strExecute = "AddScanLine^INDispenseToPatientLineScan("""_pidScan_""")"
		if strExecute'="" {
	 		set strStatus = $$Transaction^COMTransaction(strExecute)		
		}
 	}
 	
	if $$$ISERR(strStatus) $$$Alert(strStatus)
	
	quit strStatus
	
	
CreateSearchButton(pidClass, pidText, pstrGIF) 
    ;-------------------------------------------------------------------------------
    ; Creates a search button to go next to the Scan text box on the Grid
    ; 
    ; Assumed Variables
    ; 	YUCI
    ; 	YBED
    ; 	YM
    ; 	YUSER
    ; 	YCR
    ; 	YGIF
    ; 
    ; History:
    ; 27-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	new strLink
	
	set strLink = YAKTION_"EP=WWWFORM"
	set strLink = strLink_"&YFORM=WWWPARA"
	set strLink = strLink_"&YLFFORM=4"
	set strLink = strLink_"&YTRAKT=1"
	set strLink = strLink_"&YBACK="
	set strLink = strLink_"&YUCI="_YUCI  ;NAMESPACE
	set strLink = strLink_"&YBED="_YBED  ;User
	set strLink = strLink_"&YM="_YM
	set strLink = strLink_"&YUSER="_YUSER ;$$GetChildUser^WWWUSER(YUSER)
	set strLink = strLink_"&YLFDAT=Y"_pidClass_"D0"
 	set strLink = strLink_"&YFKEY=0"
	set strLink = strLink_"&YSEC="
	
	write YCR,"<th nowrap class='THScanbtns'>"
	write YCR,"<table>"
	
	write "<TD WIDTH=2"
	if $$MenuType^WWW013()'=14{
		write " class=""coolButton"""  ;MOUSEEFFECT
	}
	write ">"
	;if ($get(YUSERAGENT)="CHROME") {
		write "<A ID=""CLICK_"_"SCAN_SEARCH"_""" HREF='#'"
		write " onClick=""clickScanSearch('"_strLink_"'+(new Date()).getSeconds());"""
		write ">"
	;}else{
	;	write "<A ID=""CLICK_"_"SCAN_SEARCH"_""" HREF='#grid'"
	;	write " onClick=""var result = window.showModalDialog('"_strLink_"'+(new Date()).getSeconds(),'Parameter','DialogWidth: 570px; DialogHeight: 530px; resizable: yes; scroll: no; help:no; status: no;');if (result != null) {var field=document.getElementById('inputdata'); if (field!= null) { field.value=result; field.focus(); fireEvent('onBlur');}}"""
	;	write ">"
	;}
	set icone=""
	if $$MenuType^WWW013()=14{
		set icone = $$traducaoIcone^WWWFORMCOMMON(pstrGIF_".gif")
	}
	if icone'=""{
		if $extract(icone,1,2)'="fa"&&($length(icone,"-")<2){
			write YCR,"<div class='btn btn-outline-"_corBotao_" btn-sm' ID="""_"SCAN_SEARCH"_""""
			write " style='padding: 2px 5px 0px 5px;height:23px;vertical-align:middle;text-align:' "
			write " TITLE="""_$$^WWWTEXT(pidText)_""" border=0>"
			write icone
			write "</div>"
		}else{
			write " <div class='btn btn-outline-"_corBotao_" btn-sm' ID="""_"SCAN_SEARCH"_""""
			write " style='width:30px' "
			write " TITLE="""_$$^WWWTEXT(pidText)_""" border=0>"
			write "<i class='"_icone_"'></i>"
			write "</div>"
		}
	}else{			
		write YCR,"<IMG align=left ID="""_"SCAN_SEARCH"_""" SRC="""_YGIF_pstrGIF_".gif"" 1pt 1pt TITLE="""_$$^WWWTEXT(pidText)_""" border=0 enabled=false>"
	}
	write "</A>"
	write YCR,"</TD>"
	
	write YCR,"</table>"
	write YCR,"</th>"
	
	quit
 
 
GoToUpdatedRow(YFORM ,pidKey)
	;-------------------------------------------------------------------------------
	; Go to a particular ROW in the Grid after Update
	; based on the Row ID
	;
	; Params:
	; 	idKey 		Row ID
	; 	pYFORM		Form
	; 	pobjLine	Grid Data
	;	pidField
	;	
	; Returns:None
	;
	; History:
	; 23-Nov-2010	shobby	SR17590: Return a flag to say if we found the row to go to
    ; 19-May-2009	PPP		SR16565: Scanning Prompt for Grid
	;-------------------------------------------------------------------------------
	new blnUpdate,idRow,intPage,blnFound ;SR17590
	
	set idRow = $get($$$WWWDATEN("REFERENCEROW",pidKey,1))
	set blnFound=$$$NO
	
	if idRow'="" {
		if $data($$$WWWDATEN("REFERENCEKEY",idRow,1)) {	// FIXME - not displayed
			
			if $$$KilledRecord(idRow,YFORM) {
				$$$Alert("Com00231")	         ; "That record has been deleted."
			
			} elseif $$$ViewableRow(idRow,YFORM) {
				if $$$DisplayedRecord(idRow,YFORM) {
					set intPage   = $$$GRIDPage
					set blnUpdate = $$$YES
					
				} else {
					set blnUpdate = $$$NO
					set intPage   = $$GetPage^COMGridEdit31R(idRow)
				}
				write $$$GRIDGoToPage(intPage,$$$GRIDNumPages,$$$GRIDGetFirstCell(idRow),blnUpdate)
				set blnFound=$$$YES ;SR17590
			}
		}
	}
	quit blnFound	;SR17590
	
	
UpdateRow(pidForm,pidDataLine,&parrFields,pobjOldData)
	;-------------------------------------------------------------------------------
	; Go to a particular ROW in the Grid after Update
	; based on the Row ID
	;
	; Params:
	; 	pidForm				Form ID
	; 	pidDataLine 		Grid Line ID  e.g. 2.01
	; 	parrFields(intClassField) = original contents of field
	; 						[byRef] Fields to update and Show
	;	pobjOldData
	;	
	; Returns:None
	;
	; History:
    ; 22-Jul-2009	GRF		SR16669: check operation matches - use consistent
    ; 							variable names; idClassField for clarification
    ; 19-May-2009	PPP		SR16565: Scanning Prompt for Grid
	;------------------------------------------------------------------------------- 
 	new idClassField,idFormField,idGridRow,objNewData
 	
	do GoToUpdatedRow^COMGridEdit31Scan(pidForm,pidDataLine)
	set idGridRow = $get($$$WWWDATEN("REFERENCEROW",pidDataLine,1))
	
	/* ////////////////////////
	set idClassField = ""
	for {
		set idClassField = $order(parrFields(idClassField))
		quit:idClassField=""
		
		do AddReference^COMGridEdit31Interface(idClassField)
		
		set idFormField = $$$GetFormField(pidForm,idClassField)
		do UpdateManualField^COMGridEdit31Interface(idGridRow,idFormField,$get(parrFields(idClassField)))
	}
	////////////////////////
	*/
	
	set idClassField = ""
	for {
		set idClassField = $order(parrFields(idClassField))
		quit:idClassField=""
		
		do AddReference^COMGridEdit31Interface(idClassField)
		
		set idFormField = $$$GetFormField(pidForm,idClassField)
		do UpdateManualField^COMGridEdit31Interface(idGridRow,idFormField,$get(parrFields(idClassField)))
 		set YINHALT = $get(parrFields(idClassField))
	}
	
	set objNewData = $$$GRIDGetYFELD(pidDataLine)
	//Need this to ensure that OnBlurs for the fields are done
	
	do OnGridUpdate^COMGridEdit31Events(pidDataLine,objNewData,pobjOldData,pidForm)
	
 	//Status of the Record - 'Not Saved'
 	do MadeChange^COMGridEdit31S()
 	
	quit
	
	
GetRowLine(pidItem, pidFldItem)
    ;-------------------------------------------------------------------------------
    ; Get the Row & Details for a given Item if it exists
    ;
    ; Returns:
    ;
    ; History:	
    ; 22-Jul-2009	GRF		SR16669: use consistent variable names
    ; 25-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	new idDataLine,idLine,objGridLine
	
	set idLine     = ""         ; FIXME : Why not just return idDataLine
	set idDataLine = "" 
	for {
		set idDataLine = $order($$$WWWDATEN("REFERENCEROW",idDataLine))
		quit:idDataLine=""
		
		continue:($get($$$WWWDATEN("KILLEDRECORD",$get($$$WWWDATEN("REFERENCEROW",idDataLine,1))))=$$$YES)
		
		set objGridLine = $$$GRIDGetYFELD(idDataLine)
		continue:($piece(objGridLine,Y,pidFldItem)'=pidItem)
		
		set idLine = idDataLine
		quit
	}
	quit idLine
	
	
GetRowLineWithQtyChecks(pidItem,pidFldItem,pidFldBundle,pidFldStorage,pidFldQty,
						&pidBundle="",&pidStorage="",&parrBundles,&pblnItemExists,
						pidFldLotNumber,pidLot="",&parrComLines,&pidFirstZeroLine) //UPDATE
    ;-------------------------------------------------------------------------------
    ; Get the Row & Details for a given Item if it exists,
    ; also check if the given Bundle & Storage have enough stock to cater for the
    ; requirements
    ;
    ; Returns:
    ; 	line
    ;
    ; History:
    ; 02-Oct-2014	SCR		HEVA-1363: Return 1st Zero Line for the item
	; 29-Sep-2014	SCR		HEVA-1363: Dont select Completed lines
    ; 22-Jul-2009	GRF		SR16669: use consistent variable names
    ; 25-May-2009	PPP		SR16565: Scanning Prompt for Grid
    ;-------------------------------------------------------------------------------
	new idDataLine,idLine,objGridLine,strData

	set idLine     = ""         ; FIXME : Why not just return idDataLine
	set idDataLine = "" 
	set pidFirstZeroLine	= ""
	for {
		set idDataLine = $order($$$WWWDATEN("REFERENCEROW",idDataLine))
		quit:idDataLine=""
		continue:($get($$$WWWDATEN("KILLEDRECORD",$get($$$WWWDATEN("REFERENCEROW",idDataLine,1))))=$$$YES)
		continue:$get(parrComLines(idDataLine))
		set objGridLine = $$$GRIDGetYFELD(idDataLine)
		continue:($piece(objGridLine,Y,pidFldItem)'=pidItem)
		if ('$piece(objGridLine,Y,pidFldQty))&&('pidFirstZeroLine) {
			set pidFirstZeroLine	= idDataLine
		}
		set pblnItemExists = $$$YES
		if ((+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) 
			&& ((YFORM = "INADJLine") || (YFORM = "VARINADJLinha") || (YFORM = "VARINADJDoacaoLinha"))) {
			continue:($piece(objGridLine,Y,pidFldStorage)'= pidStorage)
			if (pidLot'="") {
				continue:($piece(objGridLine,Y,pidFldLotNumber)'= pidLot)
			}
			continue:pidBundle=""
			set strData = pidBundle_Y_$piece(objGridLine,Y,pidFldStorage)
		}
		else {
			continue:($piece(objGridLine,Y,pidFldBundle) '= pidBundle)
			continue:($piece(objGridLine,Y,pidFldStorage)'= pidStorage)

			set strData = $piece(objGridLine,Y,pidFldBundle)_Y_$piece(objGridLine,Y,pidFldStorage)
		}		
		
		if ((+$$$WWWClientParamCoreChangesHEVA($get(^WWWClientParam(YM,YM,1)))) 
			&& (YFORM = "INTFRPickLine")) {
			set idLine = idDataLine
			quit
		}
		if $data(parrBundles(pidItem,strData)) {
			set parrBundles(pidItem,strData) = parrBundles(pidItem,strData) - $piece(objGridLine,Y,pidFldQty)
			if (((+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1))))) &&
						($get(parrBundles(pidItem,strData)) < 0)) {
				//Initial selected Line (Bundle and Storage) does not have enough Qty
				kill parrBundles(pidItem,strData)
				set pidBundle  = ""
				set pidStorage = ""
				
				//Try and Get a new Bundle and Storage if it exists	
				set strData = ""
				for {
					set strData = $order(parrBundles(pidItem,strData))
					quit:strData=""
					continue:$get(parrBundles(pidItem,strData))<1
					
					//Set the new Bundle & Storage Data if OK
					set pidBundle  = $piece(strData,Y,1)
					set pidStorage = $piece(strData,Y,2)
					quit
				}
			}
			else {
				if (($get(YFORM) '= "INIssueLocLine") && ($get(parrBundles(pidItem,strData)) < 1)
					|| (($get(YFORM) = "INIssueLocLine") && ($get(parrBundles(pidItem,strData)) <= 0))
					) {
					//Initial selected Line (Bundle and Storage) does not have enough Qty
					kill parrBundles(pidItem,strData)
					set pidBundle  = ""
					set pidStorage = ""
				
					//Try and Get a new Bundle and Storage if it exists	
					set strData = ""
					for {
						set strData = $order(parrBundles(pidItem,strData))
						quit:strData=""
						continue:$get(parrBundles(pidItem,strData))<1
					
						//Set the new Bundle & Storage Data if OK
						set pidBundle  = $piece(strData,Y,1)
						set pidStorage = $piece(strData,Y,2)
						quit
					}
			
				} else {
					//Current Line has enough Quantity to fulfil
					set idLine = idDataLine
					quit
				}
			}
		}
	}
	quit idLine
	
	
DuplicateOnly(pidOldKey, &pobjLine, &pstrKey)
    ;-------------------------------------------------------------------------------
    ; Routine to Add a new line to a Grid after a Scan is validated
	; This is specific to INIssueLine & INTFRPickLine
	;
	; Copy the original Data and Update Relevant details
	; Cannot create new data records only copies, has important into
	; about DEMAND NO, REFERENCE etc.
    ;
    ; Assumptions :
    ;  YFORM	-	 Form Name
    ; 
    ; Returns:
    ; 	Status
    ;
    ; History:
    ; 23-Jun-2009	PPP	SR16510: Updated fuctionality
    ;-------------------------------------------------------------------------------
	new idClass,idNewKey,idNumeric,idOrigin,idParent,intZeros,strAlpha
	
	quit:+$get(^WWWDATEN(YM,+$horolog,YUSER,YFORM,"V","ROWCOUNT"))=0 ""
	
	set idClass  = $$$WWW120ClassUsedInForm($get(^WWW120(0,YFORM,1)))
	set idOrigin = $$$KEYMAX(pidOldKey)
	
	do SplitNumeric^COMUtils(idOrigin,.strAlpha,.idNumeric)
	set intZeros = $length($piece(idNumeric,".")) - $length(idNumeric\1)
	set:intZeros strAlpha  = strAlpha_$translate($justify("",intZeros)," ","0")
	
	set idNumeric = idNumeric\1
	set idParent  = idNumeric
	
	for {                                ; Search through from Parent to Parent.99 to find first free value
		set pstrKey=strAlpha_idNumeric
		 
		if $get($$$WWWDATEN("REFERENCEROW",pstrKey,1))="" {   ; if there is no grid entry for this value
			set idNewKey            = pidOldKey
			set $$$KEYMAX(idNewKey) = pstrKey
			quit:($get($$$DATA(idClass,idNewKey))="")         ; double check there is no record in the class
		}
		
		set idNumeric = idNumeric + $$$CopyIncrement
		quit:(idNumeric\1)'=idParent
	}		
	
	if (idNumeric\1)<=idParent {		
		set pobjLine = $$GetYFELDEX^COMGridEdit31G(,pidOldKey)
	}
	quit $$$OK
	
	
SimulateBlurOnAdd(pidRow,YFELD,YFELDOLD,pstrFormName="",pstrFieldList="")
	;-------------------------------------------------------------------------------
	; Handles the blur calls for a Row which has been added using GridAddLine 
	; YFELD contains the new row data and YFELDOLD contains the old.
	; 
	; This works on an entire row.
	;
	; Returns:
	;
	; History:
	; 11-Nov-2010	shobby	SR17613: Strip the quotes from YKEY
    ; 31-Jul-2009	PPP		SR16814: Simulate the OnBlurs for a new Added Grid Line
	;-------------------------------------------------------------------------------
	new GCOL,GDATA,GROW,OYFORM,YKEY,YLFDAT,objWWW122,strCommand,strFormName

	//Need to Save the current YFORM as it need not be the same calling form
	if pstrFormName'="" {
		set OYFORM = YFORM
		set YFORM  = pstrFormName
	}
	
	set YLFDAT = "Y"_$get($$$WWWDATEN("REFERENCEROW",pidRow,1))
	
 	if pstrFormName'="" {
	 	set strFormName = pstrFormName
 	} else {
		set strFormName = $get(^CacheTemp(YUSER,"Grid","Name"))
 	}
	set GCOL  = ""
	set GROW  = +$piece(YLFDAT,"Y",2)    ; FIXME : elsewhere we use $p(...,"_",1) to cope with "Y2x01_23" - is that a possibility here? <GRF>
	set GDATA = YFELD
	
	if YFELD'=YFELDOLD {
		if '$$$KilledRecord(GROW,strFormName) {
			for {
				set GCOL = $order(^WWW122(0,strFormName,GCOL))
				quit:GCOL=""
				if (pstrFieldList'="") && ((","_pstrFieldList_",")'[(","_GCOL_",")) continue  ; Include only Relevant Fields
				
				set objWWW122 = $$Get^WWW122(strFormName,GCOL) ; FIXME : Neither field used is customisable - faster to have direct get
				
				if $$$WWW122ExecuteOnBlur(objWWW122)'="" {
					set strCommand = $$$WWW122ExecuteOnBlur(objWWW122)
					
					if $piece(YFELD,Y,$$$WWW122SequenceNumber(objWWW122))'=$piece(YFELDOLD,Y,$$$WWW122SequenceNumber(objWWW122)) {
						set YKEY = $$GetYKEY^COMGridEdit31G(GROW,strFormName)
						set YKEY=$translate(YKEY,"""")  ;SR17613
						set YINHALT = $piece(YFELD,Y,$$$WWW122SequenceNumber(objWWW122))
						set GFLD    = $$$WWW122SequenceNumber(objWWW122)           ; FIXME : new this?
 						if strCommand'="" {
							xecute strCommand                             ; *** EXECUTE ***
						}
					}
					do AddReference^COMGridEdit31Events(GCOL)
				}
			}
			do ScreenUpdate^COMGridEdit31S(YLFDAT,YFELD,YFELDOLD)
		}
	}
	
	//Reinstate original YFORM
	if $get(OYFORM)'="" {
		set YFORM = OYFORM
	}
	quit
]]></Routine>
</Export>