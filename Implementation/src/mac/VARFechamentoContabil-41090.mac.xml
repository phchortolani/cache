<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARFechamentoContabil" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARFechamentoContabil
	#include INConst
	#include MEDConst
	#include VARConst

	#import VAR.infra.util

	#define STATUSEMABERTO   0
	#define STATUSAUTORIZADO 1
	#define STATUSCONFIRMADO 2
	#define STATUSCANCELADO  3

	#define TIPOFECHAMENTOCONSUMO    1
	#define TIPOFECHAMENTONOTAFISCAL 2

	#define QUANTIDADEARQUIVOS 2

	#define FiltroFechamentoContabil ^CacheTempFechamentoContabil(YUCI, YUSER, "Filtro")
	#define KeepLog if pblnKeepLog=$$$YES
	quit

OnAfterDataFields()
	new rs, count, strSql, strWhere

	set pMes = $piece($get($$$FiltroFechamentoContabil), Y, 1)
	set pAno = $piece($get($$$FiltroFechamentoContabil), Y, 2)

	set strSql = " SELECT Ano, "_
				 "		  Mes, "_
				 "		  Revisao, "_
				 "		  Status, "_
				 "		  FechamentoContabil "_
				 " FROM   SQLUser.VARFechamentoContabil "
	set strWhere = ""
	if ((pAno '= "") || (pMes '= "")) {
		set strSql = strSql_" WHERE "
		if (pAno '= "") {
			set strWhere = " Ano = "_pAno_" "
		}
		if (pMes '= "") {
			if (strWhere '= "") set strWhere = strWhere_" AND "
			set strWhere = strWhere_" Mes = "_pMes_" "
		}
	}

	set strSql = strSql_strWhere_"ORDER BY TONUMBER(Ano) DESC, TONUMBER(Mes) DESC, TONUMBER(Revisao) DESC"

	set rs = ##class(%ResultSet).%New()
	do rs.Prepare(strSql)
	do rs.Execute()

	set lstHeader = $listbuild("Código", "Competência", "Revisão", "Autorizar", "Cancelar", "Status", "Consumo",
		"Nota Fiscal")
 	if ($$Start^COMTable(lstHeader)) {
		set count = 0

		while (rs.Next()) {
			set count = count + 1

			set Ano					= rs.GetData(1)
			set Mes					= rs.GetData(2)
			set Revisao				= rs.GetData(3)
			set Status				= rs.GetData(4)
			set FechamentoContabil	= rs.GetData(5)
			set competencia = $$FillChar^VARSQL(Mes, 2, 0)_"/"_Ano

			if (Status = $$$STATUSEMABERTO) {
				set btnAutorizar = "<a href='javascript:if(confirm(""Autorizar competencia "_competencia_" ?"")) {CallBackNow(""AutorizarEnvio^VARFechamentoContabil"","""_FechamentoContabil_""")};'><img title='Autorizar' src='"_YGIF_"autorizar.gif'/></a>"
			}
			else {
				if (Status = $$$STATUSCANCELADO) {
					set titleCancelar = "Fechamento contábil cancelado."
				}
				else {
					set titleCancelar = "Fechamento contábil autorizado."
				}
				set btnAutorizar = "<img title='"_titleCancelar_"' src='"_YGIF_"autorizar_off.gif'/>"
			}
			if (Status '= $$$STATUSCANCELADO) {
				set btnCancelar = "<a href='javascript:if(confirm(""Cancelar competencia "_competencia_" ?"")) {CallBackNow(""CancelarFechamento^VARFechamentoContabil"","""_FechamentoContabil_""")};'><img title='Cancelar' src='"_YGIF_"cancelar.gif'/></a>"
			}
			else {
				set btnCancelar = "<img title='Fechamento contábil cancelado.' src='"_YGIF_"cancelarOff.gif'/>"
			}

  			do NewLine^COMTable()
			do InsertCell^COMTable(FechamentoContabil, , , , "CENTER")
			do InsertCell^COMTable(competencia, , , , "CENTER")
			do InsertCell^COMTable(Revisao, , , , "CENTER")
			do InsertCell^COMTable(btnAutorizar, , , , "CENTER")
			do InsertCell^COMTable(btnCancelar, , , , "CENTER")
			do InsertCell^COMTable($$SQLGetUserParamDescVAR^VARSQL("STATUSFECHAMENTOCONTABIL"_Y_Status), , , , "CENTER")
			do InsertCell^COMTable("<img title='Ver dados' src='"_YGIF_"ver_dados.gif'/>", "VARFechamentoContabilLinha", FechamentoContabil,
				FechamentoContabil_$$$COMMA_$$$TIPOFECHAMENTOCONSUMO, "CENTER")
			do InsertCell^COMTable("<img title='Ver dados' src='"_YGIF_"ver_dados.gif'/>", "VARFechamentoContabilLinha", FechamentoContabil,
				FechamentoContabil_$$$COMMA_$$$TIPOFECHAMENTONOTAFISCAL, "CENTER")
			do EndLine^COMTable()						
		}

		if ('count) {
  			do NewLine^COMTable()
			do InsertCell^COMTable("Nenhum registro encontrado.", , , , , , 12)
			do EndLine^COMTable()						
		}
	}
	do Stop^COMTable()
	do rs.Close()
	quit

OnAfterSave()
	set $$$FiltroFechamentoContabil = $get(VORG(1))_Y_$get(VORG(2))
	do GoToForm^COMUtilForm("VARFechamentoContabil", "")
	quit

GerarFechamento(pFiltro)
	new status, mes, ano

	set status = $$$OK

	set mes = $piece(pFiltro, Y, 1)
	set ano = $piece(pFiltro, Y, 2)
	if ((ano = "") || (mes = "")) set status = "Ano e Mês são campos obrigatórios."

	if ($$$ISOK(status)) {
		set status = $$$OK
		set status = $$GerarFechamentoTxn^VARFechamentoContabil(mes,ano)
	}

	quit status

GerarFechamentoTxn(pMes, pAno)
	new status, keyFechamentoContabil, proximaRevisao, count, objFechamentoContabil,
		objFechamentoContabilLinha, numeroRecebimento, objFechamentoContabilLinhaBackup,
		contaContabOrigem, vlrLancamentos, histOrigem

	set dataInicio = "01/"_$$FillChar^VARSQL(pMes, 2, 0)_"/"_pAno
	set dataFim = $zdate($zdateh($SYSTEM.SQL.DATEADD("mm",+1,$zdateh(dataInicio,4)),3),4)
	set objFechamentoConsumoBackup = ""
	set countConsumoBackup = 0
	&sql(SELECT MAX(Revisao) + 1
		 INTO   :proximaRevisao
	     FROM   SQLUser.VARFechamentoContabil
	     WHERE  Ano = :pAno
	     AND    Mes = :pMes)
	if (SQLCODE) quit

	if (+proximaRevisao = 0) set proximaRevisao = 1
	
	set objParametroCliente = $get(^VARParametroCliente(YM,YM,1))
	set fornecedorFechamento = $$$VARParametroClienteFornecPadraoRecebDevoluca(objParametroCliente)
	
	set objFechamentoContabil = ""
   	set keyFechamentoContabil = $$GetFechamento(pAno, pMes)
   	if ($$$NoKey(keyFechamentoContabil)) {
	   	set keyFechamentoContabil = $$$NextKey("VARFechamentoContabil")
   	}
   	else {
	   	set objFechamentoContabil = ^VARFechamentoContabil(YM, keyFechamentoContabil, 1)
	   	kill ^VARFechamentoContabilLinha(YM, keyFechamentoContabil)
	   	kill ^VARFechamentoContabilArquivo(YM, keyFechamentoContabil)
   	}
   	set $$$VARFechamentoContabilAno(objFechamentoContabil)			= pAno
   	set $$$VARFechamentoContabilMes(objFechamentoContabil)			= pMes
   	set $$$VARFechamentoContabilRevisao(objFechamentoContabil)		= proximaRevisao
   	set $$$VARFechamentoContabilGeradoEm(objFechamentoContabil)		= $horolog
   	set $$$VARFechamentoContabilGeradoPor(objFechamentoContabil)	= YBED
   	set $$$VARFechamentoContabilStatus(objFechamentoContabil)		= $$$STATUSEMABERTO
	set status = $$$Save("VARFechamentoContabil", keyFechamentoContabil, objFechamentoContabil, $$$YES)
	if ($$$ISERR(status)) quit status

	set tipoFechamentoConsumo = $$$TIPOFECHAMENTOCONSUMO
	;HEVA-1118 - Removida a validação que excluía o tipo de movimentação 35 quando a INIssue era do tipo 2
	&sql(DECLARE FechamentoContabilConsumo CURSOR FOR
		 SELECT	 TipodeFechamento, AnoMes, CodProduto, DocOrigem, CodGrupoProduto, TipoMovimentacao,
				 DataLancamento, DescricaoLote, CenarioContabil, NumeroLancamento, Natureza,
				 Estabelecimento, UnidadeNegocio, PlanoContas, ContaContabilSaida,
				 ContaContabilEntrada, PlanoCCSaida, PlanoCCEntrada, CentroCustoSaida,
				 CentroCustoEntrada, ValorLancamento, Historico, DateConfirmed, Vetor
		 INTO	 :TipodeFechamento, :AnoMes, :CodProduto, :DocOrigem, :CodGrupoProduto, :TipoMovimentacao,
				 :DataLancamento, :DescricaoLote, :CenarioContabil, :NumeroLancamento, :Natureza,
				 :Estabelecimento, :UnidadeNegocio, :PlanoContas, :ContaContabilSaida,
				 :ContaContabilEntrada, :PlanoCCSaida, :PlanoCCEntrada, :CentroCustoSaida,
				 :CentroCustoEntrada, :ValorLancamento, :Historico, :DateConfirmed, :Vetor
		 FROM    (SELECT   :tipoFechamentoConsumo AS TipodeFechamento,
						   TO_CHAR(StockHistory.DateConfirmed, 'YYYYMM') AS AnoMes,
						   StockHistory.Item AS CodProduto,
						   StockHistory.Reference AS DocOrigem,
						   $$SQLGetGrupoItem^VARSQL(StockHistory.Item) AS CodGrupoProduto,
						   $$GetTipo^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference) AS TipoMovimentacao,
						   TO_CHAR(TO_DATE(:dataFim, 'DD/MM/YYYY') - 1, 'DD/MM/YYYY') AS DataLancamento,
						   'MOV.ESTOQUE ALPHA' || TO_CHAR(TO_DATE(:dataFim, 'DD/MM/YYYY') - 1, 'DD/MM/YYYY') AS DescricaoLote,
						   'FISCAL' AS CenarioContabil,
						   1 AS NumeroLancamento,
						   $$GetNatureza^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved) AS Natureza,
						   $$GetEstabelecimento^VARFechamentoContabil() AS Estabelecimento,
						   $$GetMovmtVetor^VARStockHistory($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType), StockHistory.QtyMoved) AS Vetor,
						   'SEC' AS UnidadeNegocio,
						   'GERAL' AS PlanoContas,
						   $$GetContaContabilSaida^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved, $$SQLGetGrupoItem^VARSQL(StockHistory.Item)) AS ContaContabilSaida,
						   $$GetContaContabilEntrada^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved, $$SQLGetGrupoItem^VARSQL(StockHistory.Item)) AS ContaContabilEntrada,
						   IFNULL($$GetCentroCustoSaida^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved), NULL,"PCC") AS PlanoCCSaida,
						   IFNULL($$GetCentroCustoSaida^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved),"PCC", NULL) AS PlanoCCEntrada,
						   $$GetCentroCustoSaida^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved) AS CentroCustoSaida,
						   $$GetCentroCustoEntrada^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved, StockHistory.LineNumber) AS CentroCustoEntrada,
						   ROUND(SUM($$GetValorPositivo^VARSQL(StockHistory.TxValue)), 4) AS ValorLancamento,
						   'MOV.ESTOQUE ALPHA' AS Historico,
						   StockHistory.DateConfirmed
				  FROM 	   alSOH.dStockHistory AS StockHistory
				  WHERE	   (($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType) IN (36, 37, 38, 40, 41))
				  OR	    (($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType) = 1)
					  AND	     ($$GetNatureza^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved) = 'DB')
					  AND	     ($$GetFornecedorRecebimento^VARFechamentoContabil(StockHistory.Reference) = :fornecedorFechamento)
					  AND	     ($$GetTipoRecebimento^VARFechamentoContabil(StockHistory.Reference) IN (2, 4)))
				  OR	    (($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType) in (11,21) )
				    AND ($$GetMovmtVetor^VARStockHistory($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType), StockHistory.QtyMoved) = 'Saída')
				    AND ($$IsLocalDestinoRequisArmazenagem^VARFechamentoContabil(StockHistory.Reference) = 0) )
				  OR	    (($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType) = 35)) 
				  --OR	    (($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType) = 30)
				  --  AND ($$IsLocalDestinoTransfArmazenagem^VARFechamentoContabil(StockHistory.Reference) = 0)
				  --  AND (Storage->Code <> 'EmTransito') )
				  OR	    (($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType) = 22)
					  AND 		 ($$GetMovmtVetor^VARStockHistory($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType), StockHistory.QtyMoved) = 'Entrada'))
				  OR	    (($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType) = 7)
					  AND	     ($$GetNatureza^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved) = 'DB')
					  AND	     ($$GetFornecedorEstorno^VARFechamentoContabil(StockHistory.Reference) = :fornecedorFechamento)
					  AND	     ($$GetTipoEstorno^VARFechamentoContabil(StockHistory.Reference) IN (2, 4)))
				  OR	    (($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType) = 31)
					  AND	     ($$IsLocalAceiteTransfArmazenagem^VARFechamentoContabil(StockHistory.Reference) = 0)
					  AND 		 ($$GetMovmtVetor^VARStockHistory($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType), StockHistory.QtyMoved) = 'Saída')
					  AND 		 (StockHistory.Storage->Code != 'EmTransito'))
				  --OR	    (($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType) = 32)
				  --  AND		 (StockHistory.Storage->Code != 'EmTransito')
				  --  AND 		 ($$IsLocalOrigemTransfArmazenagem^VARFechamentoContabil(StockHistory.Reference) = 0))
				  )
				  AND	   ($$IsProdutoForaFechamentoContabil^VARFechamentoContabil(StockHistory.Item) = 0)
				  AND	   (StockHistory.DateConfirmed BETWEEN TO_DATE(:dataInicio, "DD/MM/YYYY") AND (TO_DATE(:dataFim, "DD/MM/YYYY") - 1))
		 GROUP BY $$GetTipo^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference),
		 		  $$GetContaContabilSaida^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved, $$SQLGetGrupoItem^VARSQL(StockHistory.Item)),
				  $$GetContaContabilEntrada^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved, $$SQLGetGrupoItem^VARSQL(StockHistory.Item)),
				  $$GetCentroCustoSaida^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved),
				  $$GetCentroCustoEntrada^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved, StockHistory.LineNumber) )
		 ORDER BY DateConfirmed)
	&sql(OPEN FechamentoContabilConsumo)
	if (SQLCODE) quit
	
	set sequencia = 0
   	set count = 0
   	set totalConsumo = 0
   	
   	while (1) {
	   	&sql(FETCH FechamentoContabilConsumo)
		if (SQLCODE) quit

		set sequencia = $increment(sequencia)
	   	set count = $increment(count)
		set $$$VARFechamentoContabilLinhaTipodeFechamento(objFechamentoContabilLinha)	= TipodeFechamento
		set $$$VARFechamentoContabilLinhaCodProduto(objFechamentoContabilLinha)			= CodProduto
		set $$$VARFechamentoContabilLinhaDocOrigem(objFechamentoContabilLinha)			= DocOrigem
		set $$$VARFechamentoContabilLinhaCodGrupoProduto(objFechamentoContabilLinha)	= CodGrupoProduto
		set $$$VARFechamentoContabilLinhaTipoMovimentacao(objFechamentoContabilLinha)	= TipoMovimentacao
		set $$$VARFechamentoContabilLinhaDataLancamento(objFechamentoContabilLinha)		= DataLancamento
		set $$$VARFechamentoContabilLinhaDescricaoLote(objFechamentoContabilLinha)		= DescricaoLote
		set $$$VARFechamentoContabilLinhaCenarioContabil(objFechamentoContabilLinha)	= CenarioContabil
		set $$$VARFechamentoContabilLinhaNumeroLancamento(objFechamentoContabilLinha)	= NumeroLancamento
		set $$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha)			= Natureza
		set $$$VARFechamentoContabilLinhaEstabelecimento(objFechamentoContabilLinha)	= Estabelecimento
		set $$$VARFechamentoContabilLinhaUnidadeNegocio(objFechamentoContabilLinha)		= UnidadeNegocio
		set $$$VARFechamentoContabilLinhaPlanoContas(objFechamentoContabilLinha)		= PlanoContas
		set $$$VARFechamentoContabilLinhaContaContabil(objFechamentoContabilLinha)		= ContaContabilSaida
		set $$$VARFechamentoContabilLinhaPlanoCC(objFechamentoContabilLinha)			= PlanoCCSaida
		set $$$VARFechamentoContabilLinhaCentroCusto(objFechamentoContabilLinha)		= CentroCustoSaida
		set $$$VARFechamentoContabilLinhaValorLancamento(objFechamentoContabilLinha)	= ValorLancamento
		set $$$VARFechamentoContabilLinhaHistorico(objFechamentoContabilLinha)			= Historico
		set $$$VARFechamentoContabilLinhaContador(objFechamentoContabilLinha)			= count
		set status = $$$Save("VARFechamentoContabilLinha", keyFechamentoContabil_$$$COMMA_sequencia, objFechamentoContabilLinha, $$$YES)
		if ($$$ISERR(status)) quit

	   	set sequencia = $increment(sequencia)
	   	set count = $increment(count)
	   	if (Natureza = "CR") {
			set $$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha)		= "DB"
	   	}
	   	elseif (Natureza = "DB") {
			set $$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha)		= "CR"
	   	}
		set $$$VARFechamentoContabilLinhaContaContabil(objFechamentoContabilLinha)		= ContaContabilEntrada
		set $$$VARFechamentoContabilLinhaPlanoCC(objFechamentoContabilLinha)			= PlanoCCEntrada
		set $$$VARFechamentoContabilLinhaCentroCusto(objFechamentoContabilLinha)		= CentroCustoEntrada
		set $$$VARFechamentoContabilLinhaContador(objFechamentoContabilLinha)			= count
		set status = $$$Save("VARFechamentoContabilLinha", keyFechamentoContabil_$$$COMMA_sequencia, objFechamentoContabilLinha, $$$YES)
		if ($$$ISERR(status)) quit
		
		if (Vetor = "Saída"){
			set totalConsumo = totalConsumo + $$GetValorPositivo^VARSQL($fnumber(ValorLancamento,"",2))
		} elseif (Vetor = "Entrada"){
			set totalConsumo = totalConsumo - $$GetValorPositivo^VARSQL($fnumber(ValorLancamento,"",2))
		}
		
		set objFechamentoConsumoBackup = objFechamentoContabilLinha
		set countConsumoBackup = count
	}

	&sql(CLOSE FechamentoContabilConsumo)

	set tipoFechamentoNotaFiscal = $$$TIPOFECHAMENTONOTAFISCAL

	&sql(DECLARE FechamentoContabilNotaFiscal CURSOR FOR
		 SELECT	 TipodeFechamento, AnoMes, CodProduto, DocOrigem, CodGrupoProduto,
		 		 TipoMovimentacao, DataLancamento, DescricaoLote, CenarioContabil,
		 		 NumeroLancamento, Natureza, Estabelecimento, UnidadeNegocio, PlanoContas,
		 		 ContaContabilSaida, ContaContabilEntrada, PlanoCC, CentroCusto,
		 		 ValorLancamento, HistoricoDestino, HistoricoOrigem, DateConfirmed, Vetor
		 INTO	 :TipodeFechamento, :AnoMes, :CodProduto, :DocOrigem, :CodGrupoProduto,
		 		 :TipoMovimentacao, :DataLancamento, :DescricaoLote, :CenarioContabil,
		 		 :NumeroLancamento, :Natureza, :Estabelecimento, :UnidadeNegocio, :PlanoContas,
		 		 :ContaContabilSaida, :ContaContabilEntrada, :PlanoCC, :CentroCusto,
		 		 :ValorLancamento, :HistoricoDestino, :HistoricoOrigem, :DateConfirmed, :Vetor
		 FROM    (SELECT   :tipoFechamentoNotaFiscal AS TipodeFechamento,
				  		   TO_CHAR(StockHistory.DateConfirmed, 'YYYYMM') AS AnoMes,
						   StockHistory.Item AS CodProduto,
						   StockHistory.Reference AS DocOrigem,
						   $$SQLGetGrupoItem^VARSQL(StockHistory.Item) AS CodGrupoProduto,
						   $$GetTipo^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference) AS TipoMovimentacao,
						   TO_CHAR(StockHistory.DateConfirmed, 'DD/MM/YYYY') AS DataLancamento,
						   'MOV.ESTOQUE ALPHA' || TO_CHAR(StockHistory.DateConfirmed, 'DD/MM/YYYY') AS DescricaoLote,
						   'FISCAL' AS CenarioContabil,
						   1 AS NumeroLancamento,
						   $$GetNatureza^VARFechamentoContabil(StockHistory.MovementType, StockHistory.Reference, StockHistory.QtyMoved) AS Natureza,
						   $$GetEstabelecimento^VARFechamentoContabil() AS Estabelecimento,
						   $$GetMovmtVetor^VARStockHistory($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType), StockHistory.QtyMoved) AS Vetor,
						   'SEC' AS UnidadeNegocio,
						   'GERAL' AS PlanoContas,
						   $$GetContaAtivoPorGrupo^VARFechamentoContabil($$SQLGetGrupoItem^VARSQL(StockHistory.Item)) AS ContaContabilSaida,
						   '900001' AS ContaContabilEntrada,
						   NULL AS PlanoCC,
						   NULL AS CentroCusto,
						   ROUND(SUM($$GetValorPositivo^VARSQL(StockHistory.TxValue)), 4) AS ValorLancamento,
						   $$GetHistorico^VARFechamentoContabil('DB', StockHistory.Reference, StockHistory.Item) AS HistoricoDestino,
						   $$GetHistorico^VARFechamentoContabil('CR', StockHistory.Reference, StockHistory.Item) AS HistoricoOrigem,
						   StockHistory.DateConfirmed
				  FROM 	   alSOH.dStockHistory AS StockHistory
				  WHERE	   ($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType) IN (1,7))
				  AND	   ((($$GetTipoRecebimento^VARFechamentoContabil(StockHistory.Reference) = 1)
				  AND		 (($$GetFornecedorRecebimento^VARFechamentoContabil(StockHistory.Reference) <> :fornecedorFechamento)
				  OR	      ($$IsRecebimentoPossuiCompraAssociada^VARFechamentoContabil(StockHistory.Reference) = 1)))
				  OR		(($$SQLGetMovTypeNumber^VARSQL(StockHistory.MovementType) = 7)
				  AND	     ($$GetFornecedorEstorno^VARFechamentoContabil(StockHistory.Reference) <> :fornecedorFechamento)
				  AND	     ($$GetTipoEstorno^VARFechamentoContabil(StockHistory.Reference) = 1)))
				  AND	   ($$IsProdutoForaFechamentoContabil^VARFechamentoContabil(StockHistory.Item) = 0)
				  AND	   (StockHistory.DateConfirmed BETWEEN TO_DATE(:dataInicio, "DD/MM/YYYY") AND (TO_DATE(:dataFim, "DD/MM/YYYY") - 1))
		 GROUP BY StockHistory.Reference, StockHistory.Item)
		 ORDER BY DateConfirmed)
	&sql(OPEN FechamentoContabilNotaFiscal)
	if (SQLCODE) quit

   	set count = 0
   	set numeroRecebimento = ""
   	set objFechamentoContabilLinha = ""
	set contaContabOrigem = ""
	set vlrLancamentos = 0
	set histOrigem = ""
	set totalNotaFiscal = 0
   	while (1) {
	   	&sql(FETCH FechamentoContabilNotaFiscal)
		if (SQLCODE) quit

		if (($length(numeroRecebimento) > 0) && (numeroRecebimento '= DocOrigem)) {
			do CadastrarLinhaFechContAgrupRec(keyFechamentoContabil, .sequencia, .count,
				objFechamentoContabilLinhaBackup, contaContabOrigem, vlrLancamentos,
				histOrigem, .status)

			set vlrLancamentos = 0
		}

	   	set sequencia = $increment(sequencia)
	   	set count = $increment(count)
		set $$$VARFechamentoContabilLinhaTipodeFechamento(objFechamentoContabilLinha)	= TipodeFechamento
		set $$$VARFechamentoContabilLinhaCodProduto(objFechamentoContabilLinha)			= CodProduto
		set $$$VARFechamentoContabilLinhaDocOrigem(objFechamentoContabilLinha)			= DocOrigem
		set $$$VARFechamentoContabilLinhaCodGrupoProduto(objFechamentoContabilLinha)	= CodGrupoProduto
		set $$$VARFechamentoContabilLinhaTipoMovimentacao(objFechamentoContabilLinha)	= TipoMovimentacao
		set $$$VARFechamentoContabilLinhaDataLancamento(objFechamentoContabilLinha)		= DataLancamento
		set $$$VARFechamentoContabilLinhaDescricaoLote(objFechamentoContabilLinha)		= DescricaoLote
		set $$$VARFechamentoContabilLinhaCenarioContabil(objFechamentoContabilLinha)	= CenarioContabil
		set $$$VARFechamentoContabilLinhaNumeroLancamento(objFechamentoContabilLinha)	= NumeroLancamento
		set $$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha)			= Natureza
		set $$$VARFechamentoContabilLinhaEstabelecimento(objFechamentoContabilLinha)	= Estabelecimento
		set $$$VARFechamentoContabilLinhaUnidadeNegocio(objFechamentoContabilLinha)		= UnidadeNegocio
		set $$$VARFechamentoContabilLinhaPlanoContas(objFechamentoContabilLinha)		= PlanoContas
		set $$$VARFechamentoContabilLinhaContaContabil(objFechamentoContabilLinha)		= ContaContabilSaida
		set $$$VARFechamentoContabilLinhaPlanoCC(objFechamentoContabilLinha)			= PlanoCC
		set $$$VARFechamentoContabilLinhaCentroCusto(objFechamentoContabilLinha)		= CentroCusto
		set $$$VARFechamentoContabilLinhaValorLancamento(objFechamentoContabilLinha)	= ValorLancamento
		set $$$VARFechamentoContabilLinhaHistorico(objFechamentoContabilLinha)			= HistoricoDestino
		set $$$VARFechamentoContabilLinhaContador(objFechamentoContabilLinha)			= count
		set status = $$$Save("VARFechamentoContabilLinha", keyFechamentoContabil_$$$COMMA_sequencia, objFechamentoContabilLinha, $$$YES)
		if ($$$ISERR(status)) quit

	   	set numeroRecebimento = DocOrigem
		set contaContabOrigem = ContaContabilEntrada
		set vlrLancamentos = vlrLancamentos + ValorLancamento
		set histOrigem = HistoricoOrigem
	   	set objFechamentoContabilLinhaBackup = objFechamentoContabilLinha
	   	
	   	if (Vetor = "Entrada"){
			set totalNotaFiscal = totalNotaFiscal + $$GetValorPositivo^VARSQL($fnumber(ValorLancamento,"",2))
		} elseif (Vetor = "Saída"){
			set totalNotaFiscal = totalNotaFiscal - $$GetValorPositivo^VARSQL($fnumber(ValorLancamento,"",2))
		}
	}

	if ($$$ISOK(status) && ($length(numeroRecebimento) > 0)) {
		do CadastrarLinhaFechContAgrupRec(keyFechamentoContabil, .sequencia, .count,
			objFechamentoContabilLinhaBackup, contaContabOrigem, vlrLancamentos,
			histOrigem, .status)
	}

	&sql(CLOSE FechamentoContabilNotaFiscal)
	
	if ($$$ISOK(status)){
		do CadastrarLinhaArredondamento(keyFechamentoContabil, sequencia, objFechamentoConsumoBackup, 
			countConsumoBackup, totalConsumo, totalNotaFiscal, pMes, pAno)
	}
	
	quit status

CadastrarLinhaFechContAgrupRec(keyFechamentoContabil, &sequencia, &count, objFechamentoContabilLinhaBackup, contaContabOrigem, vlrLancamentos, histOrigem, &status)
	new objFechamentoContabilLinha

   	set sequencia = $increment(sequencia)
   	set count = $increment(count)
   	set objFechamentoContabilLinha = objFechamentoContabilLinhaBackup
	set $$$VARFechamentoContabilLinhaCodProduto(objFechamentoContabilLinha)			= "---"
	set $$$VARFechamentoContabilLinhaDocOrigem(objFechamentoContabilLinha)			= "---"
	set $$$VARFechamentoContabilLinhaCodGrupoProduto(objFechamentoContabilLinha)	= "---"
	set $$$VARFechamentoContabilLinhaTipoMovimentacao(objFechamentoContabilLinha)	= "Agrupamento de Recebimento"
   	if ($$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha) = "CR") {
		set $$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha)		= "DB"
   	}
   	elseif ($$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha) = "DB") {
		set $$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha)		= "CR"
   	}
	set $$$VARFechamentoContabilLinhaContaContabil(objFechamentoContabilLinha)		= contaContabOrigem
	set $$$VARFechamentoContabilLinhaValorLancamento(objFechamentoContabilLinha)	= vlrLancamentos
	set $$$VARFechamentoContabilLinhaHistorico(objFechamentoContabilLinha)			= histOrigem
	set $$$VARFechamentoContabilLinhaContador(objFechamentoContabilLinha)			= count
	set status = $$$Save("VARFechamentoContabilLinha", keyFechamentoContabil_$$$COMMA_sequencia, objFechamentoContabilLinha, $$$YES)
	quit

CadastrarLinhaArredondamento(keyFechamentoContabil, sequencia, objFechamentoConsumoBackup, countConsumoBackup, totalConsumo, totalNotaFiscal, pMes, pAno)
	new objFechamentoContabilLinha, objParametroCliente, centroCustoArredond
	
	set objParametroCliente = $get(^VARParametroCliente(YM,YM,1))
	set centroCustoArredond = $$$VARParametroClienteCentroCustoPadraoArredond(objParametroCliente)
	&sql(DECLARE GrupoPaiFechamentoContabil CURSOR FOR
		 SELECT distinct ParentGroup INTO :GrupoPai FROM SqlUser.INITEMGROUP)
	&sql(OPEN GrupoPaiFechamentoContabil)
	if (SQLCODE) quit
	
	while (1) {
		&sql(FETCH GrupoPaiFechamentoContabil)
		if (SQLCODE) quit
		
		set sequencia = $increment(sequencia)
	   	set count = $increment(countConsumoBackup)
	   	set objFechamentoContabilLinha = objFechamentoConsumoBackup
   	
	   	set saldoInicialMapa	= $$GetSaldoInicial^VARMapaMovMensal(pMes,pAno,GrupoPai)
	   	set saldoFinalLivroReg 	= $$SQLGetSaldoFinalLivroReg^VARSQL(pMes,pAno,"",GrupoPai)
	   	set valorFinal 			= ($fnumber(saldoInicialMapa,"",2) + totalNotaFiscal - totalConsumo) - saldoFinalLivroReg
   		if (valorFinal = 0) {
   			continue
   		}
   		
	   	if (valorFinal < 0) {
			set $$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha)		= "CR"
			set valorFinal = valorFinal * -1
	   	} else {
			set $$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha)		= "DB"
	   	}
   	
	   	set $$$VARFechamentoContabilLinhaCentroCusto(objFechamentoContabilLinha)		= centroCustoArredond
		set $$$VARFechamentoContabilLinhaCodGrupoProduto(objFechamentoContabilLinha)	= GrupoPai
		set $$$VARFechamentoContabilLinhaCodProduto(objFechamentoContabilLinha)			= "---"
		set $$$VARFechamentoContabilLinhaContaContabil(objFechamentoContabilLinha)		= $$GetContaDespesaPorGrupo(GrupoPai)
		set $$$VARFechamentoContabilLinhaContador(objFechamentoContabilLinha)			= count
		set $$$VARFechamentoContabilLinhaDocOrigem(objFechamentoContabilLinha)			= "---"
		set $$$VARFechamentoContabilLinhaPlanoCC(objFechamentoContabilLinha)			= "PCC"
		set $$$VARFechamentoContabilLinhaTipoMovimentacao(objFechamentoContabilLinha)	= "Arredondamento"
		set $$$VARFechamentoContabilLinhaValorLancamento(objFechamentoContabilLinha)	= valorFinal
	
		set status = $$$Save("VARFechamentoContabilLinha", keyFechamentoContabil_$$$COMMA_sequencia, objFechamentoContabilLinha, $$$YES)
		if ($$$ISERR(status)) quit
	
		set sequencia = $increment(sequencia)
	   	set count = $increment(count)
   	
	   	if ($$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha) = "CR") {
			set $$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha)		= "DB"
	   	} elseif ($$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha) = "DB") {
			set $$$VARFechamentoContabilLinhaNatureza(objFechamentoContabilLinha)		= "CR"
	   	}
   	
	   	set $$$VARFechamentoContabilLinhaCentroCusto(objFechamentoContabilLinha)		= ""
		set $$$VARFechamentoContabilLinhaContaContabil(objFechamentoContabilLinha)		= $$GetContaAtivoPorGrupo(GrupoPai)
		set $$$VARFechamentoContabilLinhaPlanoCC(objFechamentoContabilLinha)			= ""
		set $$$VARFechamentoContabilLinhaContador(objFechamentoContabilLinha)			= count
		set $$$VARFechamentoContabilLinhaPlanoCC(objFechamentoContabilLinha)			= ""
		set status = $$$Save("VARFechamentoContabilLinha", keyFechamentoContabil_$$$COMMA_sequencia, objFechamentoContabilLinha, $$$YES)
	}
	
	&sql(CLOSE GrupoPaiFechamentoContabil)

	quit
	
AutorizarEnvio(pKeyFechamentoContabil)
	new status, tipoErr

	set objFechamentoContabil = ^VARFechamentoContabil(YM, pKeyFechamentoContabil, 1)
   	set $$$VARFechamentoContabilAutorizadoEm(objFechamentoContabil)		= $horolog
   	set $$$VARFechamentoContabilAutorizadoPor(objFechamentoContabil)	= YBED
   	set status = $$$Save("VARFechamentoContabil", pKeyFechamentoContabil, objFechamentoContabil, $$$YES)

	set status = $$GerarArquivos(pKeyFechamentoContabil)
	if ($$$ISOK(status)) {
		set objFechamentoContabil = ^VARFechamentoContabil(YM, pKeyFechamentoContabil, 1)
	   	set $$$VARFechamentoContabilStatus(objFechamentoContabil) = $$$STATUSAUTORIZADO
	   	set status = $$$Save("VARFechamentoContabil", pKeyFechamentoContabil, objFechamentoContabil, $$$YES)
	}

	$$$StartScript()
	if ($$$ISOK(status)) {
		write "alert('Arquivos gerados com sucesso.');"
	}
	else {
		write "alert('"_$$DecodeError^COMUtilError(status)_"');"
	}
	$$$EndScript()

	do GoToForm^COMUtilForm("VARFechamentoContabil", "1", , , $$$NO)
	quit

GerarArquivos(pKeyFechamentoContabil)
	new status, fullPath, file, fileHeader, refFile

	set status = $$$OK
   	set fullPath = ##class(DirectoryFile).GetFormattedDir(##class(DirectoryFile).ConcatPath(
   		##class(DirectoryFile).ConcatPath(##class(DirectoryFile).GetNamespaceSubdir(".."),
   		"Integracao"), "Aguardando"))

   	if ('##class(DirectoryFile).Exists(fullPath)) set status = ##class(DirectoryFile).CreateDirectoryChain(fullPath)

   	if ($$$ISOK(status)) {
		set status = $$GerarArquivo($$$TIPOFECHAMENTOCONSUMO, pKeyFechamentoContabil, fullPath, .consFileDetails)
		if ($$$ISOK(status)) {
			set status = $$GerarArquivo($$$TIPOFECHAMENTONOTAFISCAL, pKeyFechamentoContabil, fullPath, .ntfcFileDetails)
		}

		if ($$$ISOK(status)) {
		   	set objFechamentoContabil = ^VARFechamentoContabil(YM, pKeyFechamentoContabil, 1)
		   	set ano = $$$VARFechamentoContabilAno(objFechamentoContabil)
		   	set mes = $$$VARFechamentoContabilMes(objFechamentoContabil)
		   	set revisao = $$$VARFechamentoContabilRevisao(objFechamentoContabil)
		   	set geradoEm = $zdatetime($$$VARFechamentoContabilGeradoEm(objFechamentoContabil), 3, 1)
		   	set geradoPor = $$$VARFechamentoContabilGeradoPor(objFechamentoContabil)
		   	set autorizadoEm = $zdatetime($$$VARFechamentoContabilAutorizadoEm(objFechamentoContabil), 3, 1)
		   	set autorizadoPor = $$$VARFechamentoContabilAutorizadoPor(objFechamentoContabil)

		   	set refFile = fullPath_"FCONTABIL"_$replace(pKeyFechamentoContabil,"/","-")_".ref"
			set file = ##class(%File).%New(refFile)
			do file.Open("WSN")
			set fileHeader = $$LeftPad^VARSQL(pKeyFechamentoContabil, 30)			// Chave do Fechamento Contábil
			set fileHeader = fileHeader_$$LeftPad^VARSQL(ano, 4)					// Ano
			set fileHeader = fileHeader_$$LeftPad^VARSQL(mes, 2)					// Mês
			set fileHeader = fileHeader_$$RightPad^VARSQL(revisao, 3)				// Revisão
			set fileHeader = fileHeader_$$RightPad^VARSQL($$$QUANTIDADEARQUIVOS, 2)	// Quantidade de Arquivos
			set fileHeader = fileHeader_$$LeftPad^VARSQL(geradoEm, 19)				// Gerado Em
			set fileHeader = fileHeader_$$LeftPad^VARSQL(geradoPor, 30)				// Gerado Por
			set fileHeader = fileHeader_$$LeftPad^VARSQL(autorizadoEm, 19)			// Autorizado Em
			set fileHeader = fileHeader_$$LeftPad^VARSQL(autorizadoPor, 30)			// Autorizado Por

			do file.WriteLine(fileHeader)
			do file.WriteLine(consFileDetails)
			do file.WriteLine(ntfcFileDetails)
			do file.Close()
		}
   	}

	quit status

GerarArquivo(pTipodeFechamento, pKeyFechamentoContabil, pFullPath, &fileDetails)
	new count, status, file, objFechamentoContabil, ano, mes, revisao,
		idFechamentoContabilArquivo, tamanho, ultimaModificacao,
		objFechamentoContabilArquivo

	set status = $$$OK
	if ($length($get(pTipodeFechamento)) = 0) {
		set status = $$$MakeStatus("%1", "Tipo de arquivo não informado.")
	}
	else {
		&sql(DECLARE ArquivoFechamentoContabil CURSOR FOR
			 SELECT	 Sequencia, TipodeFechamento, CodProduto, DocOrigem, CodGrupoProduto,
			 	     TipoMovimentacao, DataLancamento, DescricaoLote, CenarioContabil,
			         NumeroLancamento, Natureza, Estabelecimento, UnidadeNegocio,
			         PlanoContas, ContaContabil, PlanoCC, CentroCusto,
			         $$FormatCurrencySemPonto^VARSQL(ValorLancam]]><![CDATA[ento), Historico, Contador
			 INTO	 :Sequencia, :TipodeFechamento, :CodProduto, :DocOrigem, :CodGrupoProduto,
			 	     :TipoMovimentacao, :DataLancamento, :DescricaoLote, :CenarioContabil,
			 	     :NumeroLancamento, :Natureza, :Estabelecimento, :UnidadeNegocio,
			 	     :PlanoContas, :ContaContabil, :PlanoCC, :CentroCusto,
			 	     :ValorLancamento, :Historico, :Contador
			 FROM	 SQLUser.VARFechamentoContabilLinha
			 WHERE	 TipodeFechamento = :pTipodeFechamento
			 AND	 FechamentoContabil = :pKeyFechamentoContabil
			 AND	 TipoMovimentacao <> 'Arredondamento')
			 /// HEVA-1287 exclusão dos Arredondamento dos arquivos a pedido da contabilidade
			 /// Caso seja necessário reverter a modificação retirar a linha do sql: AND TipoMovimentacao <> 'Arredondamento'
		&sql(OPEN ArquivoFechamentoContabil)

	   	if ($$$ISOK(status)) {
		   	set objFechamentoContabil = ^VARFechamentoContabil(YM, pKeyFechamentoContabil, 1)
		   	set ano = $$$VARFechamentoContabilAno(objFechamentoContabil)
		   	set mes = $$$VARFechamentoContabilMes(objFechamentoContabil)
		   	set revisao = $$$VARFechamentoContabilRevisao(objFechamentoContabil)

		   	if ($$$ISOK(status)) {
			   	set fileName = $$GetDescTipoFechamento(pTipodeFechamento)_
			   		$replace(pKeyFechamentoContabil, "/", "-")_".txt"

			   	set fullPathFile = pFullPath_fileName
				set file = ##class(%File).%New(fullPathFile)

				do file.Open("WSN")

			   	set count = 0

				&sql(FETCH ArquivoFechamentoContabil)
			   	while ('SQLCODE) {
				   	set count = $increment(count)
				   	set strLinha = $$RightPad^VARSQL(DataLancamento, 10)
				   	set strLinha = strLinha_$$LeftPad^VARSQL($get(DescricaoLote), 41)
				   	set strLinha = strLinha_$$LeftPad^VARSQL($get(CenarioContabil), 8)
				   	set strLinha = strLinha_$$RightPad^VARSQL($get(NumeroLancamento), 6)
				   	set strLinha = strLinha_$$RightPad^VARSQL($get(Natureza), 2)
				   	set strLinha = strLinha_$$RightPad^VARSQL($get(Estabelecimento), 3)
				   	set strLinha = strLinha_$$RightPad^VARSQL($get(UnidadeNegocio), 3)
				   	set strLinha = strLinha_$$LeftPad^VARSQL($get(PlanoContas), 8)
				   	set strLinha = strLinha_$$LeftPad^VARSQL($get(ContaContabil), 8)
				   	set strLinha = strLinha_$$LeftPad^VARSQL($get(PlanoCC), 8)
				   	set strLinha = strLinha_$$LeftPad^VARSQL($get(CentroCusto), 8)
				   	set strLinha = strLinha_$$RightPad^VARSQL($get(Contador), 6)
				   	set strLinha = strLinha_$$RightPad^VARSQL($get(ValorLancamento), 16)
				   	set strLinha = strLinha_$$LeftPad^VARSQL($get(Historico), 402)
					do file.WriteLine(strLinha)

				   	&sql(FETCH ArquivoFechamentoContabil)
				}

				do file.Close()

				set idFechamentoContabilArquivo = pKeyFechamentoContabil_$$$COMMA_pTipodeFechamento

				set tamanho = file.GetFileSize(fullPathFile)
				set ultimaModificacao = file.GetFileDateModified(fullPathFile)

				set objFechamentoContabilArquivo = ""
				set $$$VARFechamentoContabilArquivoNome(objFechamentoContabilArquivo)				= fileName
				set $$$VARFechamentoContabilArquivoNumeroLinhas(objFechamentoContabilArquivo)		= count
				set $$$VARFechamentoContabilArquivoTamanho(objFechamentoContabilArquivo)			= tamanho
				set $$$VARFechamentoContabilArquivoUltimaModificacao(objFechamentoContabilArquivo)	= ultimaModificacao
				set status = $$$Save("VARFechamentoContabilArquivo", idFechamentoContabilArquivo, objFechamentoContabilArquivo, $$$YES)
				if ($$$ISERR(status)) quit

				set finalFileName = $$GetDescTipoFechamento(pTipodeFechamento)_$$GetEstabelecimento()_".txt"

				// salva as informações no arquivo de referencia em uma váriável por referencia
				set fileDetails = $$LeftPad^VARSQL(pTipodeFechamento, 10)								// Tipo do Fechamento
				set fileDetails = fileDetails_$$LeftPad^VARSQL(fileName, 60)							// Nome
				set fileDetails = fileDetails_$$RightPad^VARSQL(count, 12)								// Número de Linhas
				set fileDetails = fileDetails_$$RightPad^VARSQL(tamanho, 12)							// Tamanho
				set fileDetails = fileDetails_$$LeftPad^VARSQL($zdatetime(ultimaModificacao, 3, 1), 19)	// Data/Hora da Última Modificação
				set fileDetails = fileDetails_$$LeftPad^VARSQL(finalFileName, 60)						// Nome Final para Envio
		   	}

		   	&sql(CLOSE ArquivoFechamentoContabil)
	   	}
	}

	quit status

ConfirmarEnvio(pKeyFechamentoContabil, pEnviadoEm)
	set objFechamentoContabil = ^VARFechamentoContabil(YM, pKeyFechamentoContabil, 1)
   	set $$$VARFechamentoContabilStatus(objFechamentoContabil) = $$$STATUSCONFIRMADO
   	set $$$VARFechamentoContabilEnviadoEm(objFechamentoContabil) = $zdatetimeh(pEnviadoEm, 3, 1)
   	quit $$$Save("VARFechamentoContabil", pKeyFechamentoContabil, objFechamentoContabil, $$$YES)

GetFechamento(pAno, pMes)
	new KeyFechamentoContabil

	if (($length(pAno) = 0) || ($length(pMes) = 0)) quit ""

	quit $order(^VARFechamentoContabils(YM, 1, $$$IndexClass(pAno,"VARFechamentoContabil"), $$$IndexClass(pMes,"VARFechamentoContabil"), $$$STATUSEMABERTO, ""))

GetTipo(pMovmtType, pTxnCode)
	$$$VAR

	quit $$GetMovmtType^VARStockHistory($$SQLGetMovTypeNumber^VARSQL(pMovmtType), $replace(pTxnCode, "||", ","))

GetNatureza(pMovmtType, pTxnCode, pQty)
	new natureza
	$$$VAR
	
	set natureza = ""

	set vetor = $$GetMovmtVetor^VARStockHistory($$SQLGetMovTypeNumber^VARSQL(pMovmtType), pQty)
	// Na contabilidade, a visão é invertida
	if (vetor = "Saída") {
		if ($$GetCentroCustoSaida(pMovmtType, pTxnCode, pQty)'=""){
			set natureza = "DB"
		}
		else {
			set natureza = "CR"
		}
	}
	elseif (vetor = "Entrada") {
		if ($$GetCentroCustoSaida(pMovmtType, pTxnCode, pQty)'=""){
			set natureza = "CR"
		}
		else {
			set natureza = "DB"
		}
	}

	quit natureza

GetEstabelecimento()
	set estabelecimento = ""
	if (##class(Util).GetNamespace() = "HEVA") {
		set estabelecimento = 403
	}
	elseif (##class(Util).GetNamespace() = "AME") {
		set estabelecimento = 524
	}
	elseif (##class(Util).GetNamespace() = "HESAP") {
		set estabelecimento = 425
	}
	elseif (##class(Util).GetNamespace() = "SEDI") {
		set estabelecimento = 530
	}

	quit estabelecimento

GetCentroCustoSaida(pMovmtType, pTxnCode, pQty)
	new idMEDAdmissao, idWWW0121, idCentroCusto

	if ($length(pMovmtType) = 0) || ($length(pTxnCode) = 0) quit ""

	$$$VAR

	set pMovmtType = $$SQLGetMovTypeNumber^VARSQL(pMovmtType)
	set idWWW0121 = ""
	set idCentroCusto = ""
	
	set objParametroCliente = $get(^VARParametroCliente(YM,YM,1))
	
	if (pMovmtType = 7) {	// Estorno de Recebimento
		//set objINREC = $get(^INREC(YM, pTxnCode, 1))
		if ($$GetTipoEstorno(pTxnCode) = 2) { // Tipo 2-Doação
			set idCentroCusto = $$$VARParametroClienteCentroCustoPadraoDoacao(objParametroCliente)
		
		} elseif ($$GetTipoEstorno(pTxnCode) = 4) { // Tipo 4-Devolução
			set idCentroCusto = $$$VARParametroClienteCentroCustoPadraoDevolucao(objParametroCliente)
		}
	}
	elseif (pMovmtType = 11) {		// Requisição
		set idWWW0121 = $$$INIssueToLocn($get(^INIssue(YM, pTxnCode, 1)))
		if ($length(idWWW0121) > 0) {
			set objWWW0121 = $get(^WWW0121(YM,YM,idWWW0121,1))
			if ('+$$$WWW0121StorageLocn(objWWW0121)){
				set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
			}
		}		
	}
	elseif (pMovmtType = 21) {	// Dispensação ao paciente
		set idMEDAdmissao = $$$INIssueFREE7($get(^INIssue(YM, pTxnCode, 1)))
		if ($length(idMEDAdmissao) > 0) {
			set idWWW0121 = $$$MEDAdmissionLocation($get(^MEDAdmission(0, idMEDAdmissao, 1)))
			set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
		}
	}
	elseif (pMovmtType = 30) {	// Transferência
		set idWWW0121 = $$$INTFRReceivingLocation($get(^INTFR(YM, pTxnCode, 1)))
		if (idWWW0121 '= ""){
			set objWWW0121 = $get(^WWW0121(YM,YM,idWWW0121,1))
			if ('+$$$WWW0121StorageLocn(objWWW0121)){
				set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
			}
		}
	}
	elseif (pMovmtType = 31) {	// Aceite de Transferência
		set idWWW0121 = $$$INRECLocation($get(^INREC(YM, pTxnCode, 1)))
		quit:idWWW0121="" idCentroCusto
		//set idWWW0121 = $$$INTFRReceivingLocation($get(^INTFR(YM, pTxnCode, 1)))
		set objWWW0121 = $get(^WWW0121(YM,YM,idWWW0121,1))
		if ('+$$$WWW0121StorageLocn(objWWW0121)){
			set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
		}
	}
	elseif (pMovmtType = 35) {		// Saída de Produtos para Produção
		set objIssue = $get(^INIssue(YM, pTxnCode, 1))
		
		set prodOrder = $$$INIssueProductionOrder(objIssue)
	
		if (prodOrder '= ""){
	
			set objProd	= $get(^INMO(YM,prodOrder,1))
		
			if ($$$INMOType(objProd) = 2){
				set idWWW0121 = $$$INIssueFREE3(objIssue)
			} else {
				set idWWW0121 = $$$INIssueToLocn(objIssue)
			}
		} else {
			set idWWW0121 = $$$INIssueToLocn(objIssue)
		}
		
		if ($length(idWWW0121) > 0) {
			set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
		}
	}
	elseif (pMovmtType = 38) {		// Estorno da Produção
		set objINMORev = $get(^INMORev(YM, pTxnCode, 1))
		set idWWW0121 = $$$INMORevSupplyingLocation(objINMORev)
		set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
	}
	elseif (pMovmtType = 40) {	// Doação, Descarte de produto vencido, Perda, por quebra/avaria, Outras saídas, Ajuste
		if pQty < 0 {
			set idWWW0121 = $$$INADJSiteLocation($get(^INADJ(YM, pTxnCode, 1)))
			set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
		}
	}
	elseif (pMovmtType = 41) {	// Inventário
		if pQty < 0 {
			set idCentroCusto = $$$VARParametroClienteCentroCustoPadraoInventario(objParametroCliente)
		}
	}

	quit idCentroCusto

GetCentroCustoEntrada(pMovmtType, pTxnCode, pQty, pLineNumber)
	new idWWW0121, idCentroCusto

	if ($length(pMovmtType) = 0) || ($length(pTxnCode) = 0) quit ""

	$$$VAR

	set pMovmtType = $$SQLGetMovTypeNumber^VARSQL(pMovmtType)
	set idWWW0121 = ""
	set idCentroCusto = ""
	
	set objParametroCliente = $get(^VARParametroCliente(YM,YM,1))

	if (pMovmtType = 1) {	// Recebimento
		set objINREC = $get(^INREC(YM, pTxnCode, 1))
		if ($$$INRECTypeofReceiving(objINREC) = 2) { // Tipo 2-Doação
			set idCentroCusto = $$$VARParametroClienteCentroCustoPadraoDoacao(objParametroCliente)
		
		} elseif ($$$INRECTypeofReceiving(objINREC) = 4) { // Tipo 4-Devolução
			set idCentroCusto = $$$VARParametroClienteCentroCustoPadraoDevolucao(objParametroCliente)
		}
	}
	elseif (pMovmtType = 32) {	// Estorno de Transferencia
		set idWWW0121 = $$$INTFRReceivingLocation($get(^INTFR(YM, $piece(pTxnCode,"||",1), 1)))
		set objWWW0121 = ^WWW0121(YM,YM,idWWW0121,1)
		set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
	}
	elseif (pMovmtType = 36) {	// Recebimento da Produção
		set objINREC = $get(^INREC(YM, pTxnCode, 1))
		set idWWW0121 = $$$INRECLocation(objINREC)
		set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
	}
	elseif (pMovmtType = 37) {	// Estorno de Componente da Produção
		if ($$GetTipoProducaoEstornada(pTxnCode) '= 2){
			set objINMORev = $get(^INMORev(YM, pTxnCode, 1))
			set idWWW0121 = $$$INMORevReceiptLocation(objINMORev)
		} else {
			set idINIssue  = $order(^INIssues(0,6,$$$IndexClass(pTxnCode,"INIssue"),""))
			set objINIssue = $get(^INIssue(YM, idINIssue, 1))
			set idWWW0121  = $$$INIssueFREE3(objINIssue)
		}
		set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
	}
	elseif (pMovmtType = 22) {	// Devolução ao Estoque
		set objINIssueRev = $get(^INIssueRev(YM, pTxnCode, 1))
		set idINIssue = $$$INIssueRevIssueNumber(objINIssueRev)
		
		if (idINIssue = ""){
			set idINIssue = $$$INIssueRevLineIssue($get(^INIssueRevLine(YM,pTxnCode,pLineNumber,1)))
		}
		
		set objINIssue = $get(^INIssue(YM, idINIssue, 1))

		if (($$$INIssueType(objINIssue) = 1) &&
			($length($$$INIssueFREE7(objINIssue)) = 0)) {
			set idWWW0121 = $$$INIssueRevToLocn(objINIssueRev)
			set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
		}
		elseif ($length($$$INIssueFREE7(objINIssue)) > 0) {
			set idWWW0121 = $$$MEDAdmissionLocation($get(^MEDAdmission(0, $$$INIssueFREE7(objINIssue), 1)))
			set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
		}
	}
	elseif (pMovmtType = 40) {	// Ajuste de Estoque
		if pQty > 0 {
			set idWWW0121 = $$$INADJSiteLocation($get(^INADJ(YM, pTxnCode, 1)))
			set idCentroCusto = $$GetCentroCusto^VARSQL(idWWW0121)
		}
	}
	elseif (pMovmtType = 41) {	// Inventário
		if pQty > 0 {
			set idCentroCusto = $$$VARParametroClienteCentroCustoPadraoInventario(objParametroCliente)
		}
	}

	quit idCentroCusto

IsLocalDestinoTransfArmazenagem(pTxnCode)
	new idWWW0121

	$$$VAR

	if ($length(pTxnCode) = 0) quit 0

	set idWWW0121 = $$$INTFRReceivingLocation($get(^INTFR(YM, pTxnCode, 1)))
	if ($length(idWWW0121) = 0) quit 0

	quit ($$$WWW0121StorageLocn($get(^WWW0121(0, YM, idWWW0121, 1))) = 1)


IsLocalOrigemTransfArmazenagem(pTxnCode)
	; Chamado por GerarFechamentoTxn
	; HEVA-1713 - Criado para validar se deve ser gerado o estorno no arquivo de fechamento para não permitir envio de valores que não foram enviados na Transferência
	; pTxnCode - Código do documento de estorno da transferência
	new idWWW0121, idTFRRev, idEstorno

	$$$VAR

	if ($length(pTxnCode) = 0) quit 0
	
	set idTFRRev = $piece(pTxnCode,"||",1)
	set idEstorno= $piece(pTxnCode,"||",2)
	
	set idWWW0121 = $$$INTFRRevSendingLocation($get(^INTFRRev(YM, idTFRRev, idEstorno, 1)))
	if ($length(idWWW0121) = 0) quit 0

	quit ($$$WWW0121StorageLocn($get(^WWW0121(0, YM, idWWW0121, 1))) = 1)
	
	

IsLocalDestinoRequisArmazenagem(pTxnCode)
	new idWWW0121

	$$$VAR

	if ($length(pTxnCode) = 0) quit 0

	set idWWW0121 = $$$INIssueToLocn($get(^INIssue(YM, pTxnCode, 1)))
	if ($length(idWWW0121) = 0) quit 0

	quit ($$$WWW0121StorageLocn($get(^WWW0121(0, YM, idWWW0121, 1))) = 1)

GetTipoRecebimento(pTxnCode)
	$$$VAR

	if ($length(pTxnCode) = 0) quit 0

	quit $$$INRECTypeofReceiving($get(^INREC(YM, pTxnCode, 1)))

GetFornecedorRecebimento(pTxnCode)
	$$$VAR

	if ($length(pTxnCode) = 0) quit 0

	quit $$$INRECSupplier($get(^INREC(YM, pTxnCode, 1)))

IsRecebimentoPossuiCompraAssociada(pTxnCode)
	$$$VAR

	if ($length(pTxnCode) = 0) quit 0

	&sql(SELECT COUNT(*)
		 INTO   :possuiOrdem
		 FROM   SQLUser.INRECLine
		 WHERE  ReceiptNumber = :pTxnCode
		 AND    Order1 IS NOT NULL)

	quit (+possuiOrdem > 0)

GetHistorico(pNatureza, pTxnCode, pidItem)
	new objINREC, idFornecedor, nrNotaFiscal, nrSerieNotaFiscal,
		strHistorico, dtNotaFiscal, nrGrupo

	$$$VAR

	if (($length(pNatureza) = 0) || ($length(pTxnCode) = 0)) quit ""

	set objINREC = $get(^INREC(YM, pTxnCode, 1))
	set idFornecedor = $$$INRECSupplier(objINREC)
	set nrNotaFiscal = $$$INRECInvoiceNumber(objINREC)
	set nrSerieNotaFiscal = $$$INRECFREE3(objINREC)

	set strHistorico = ""
	if (pNatureza = "CR") {
		set dtNotaFiscal = $zdate($$$INRECInvoiceDate(objINREC), 4)
		set strHistorico = "Itens importados do Alphalinc - Forn.: "_idFornecedor_" "_
			$$SQLGetDescFornecedor^VARSQL(idFornecedor)_" - Nr.NF: "_nrNotaFiscal_" - "_
			"Sr: "_nrSerieNotaFiscal_"  Data : "_dtNotaFiscal
	}
	elseif (pNatureza = "DB") {
		set nrGrupo = $$SQLGetGrupoItem^VARSQL(pidItem)
		set strHistorico = "NF ALPHA="_idFornecedor_"/"_nrNotaFiscal_"/"_
			nrSerieNotaFiscal_" , PD="_pidItem_", GR="_nrGrupo
	}

	quit strHistorico

GetDescTipoFechamento(tipoFechamento)
	set descricao = ""
	if (tipoFechamento = $$$TIPOFECHAMENTOCONSUMO) {
		set descricao = "DTSCONS"
	}
	elseif (tipoFechamento = $$$TIPOFECHAMENTONOTAFISCAL) {
		set descricao = "DTSNFCTB"
	}

	quit descricao

CancelarFechamento(pKeyFechamentoContabil)
	new status

	set objFechamentoContabil = ^VARFechamentoContabil(YM, pKeyFechamentoContabil, 1)
   	set $$$VARFechamentoContabilCanceladoEm(objFechamentoContabil)		= $horolog
   	set $$$VARFechamentoContabilCanceladoPor(objFechamentoContabil)		= YBED
   	set $$$VARFechamentoContabilStatus(objFechamentoContabil)			= $$$STATUSCANCELADO

   	set status = $$$Save("VARFechamentoContabil", pKeyFechamentoContabil, objFechamentoContabil, $$$YES)

	if ($$$ISOK(status)) {
	   	set fullPath = ##class(DirectoryFile).GetFormattedDir(##class(DirectoryFile).ConcatPath(
	   		##class(DirectoryFile).ConcatPath(##class(DirectoryFile).GetNamespaceSubdir(".."),
	   		"Integracao"), "Aguardando"))
		do ##class(DirectoryFile).DeleteFile(fullPath_$$GetNomeArquivo(pKeyFechamentoContabil,$$$TIPOFECHAMENTOCONSUMO,.strArquivoRef))
		do ##class(DirectoryFile).DeleteFile(fullPath_$$GetNomeArquivo(pKeyFechamentoContabil,$$$TIPOFECHAMENTONOTAFISCAL))
		do ##class(DirectoryFile).DeleteFile(fullPath_strArquivoRef)

		$$$StartScript()
		write "alert('Fechamento contábil de competencia "_$$FillChar^VARSQL($$$VARFechamentoContabilMes(objFechamentoContabil), 2, 0)_"/"_$$$VARFechamentoContabilAno(objFechamentoContabil)_" foi cancelado com sucesso.');"
		$$$EndScript()
	}
	else {
		$$$StartScript()
		write "alert('"_$$DecodeError^COMUtilError(status)_"');"
		$$$EndScript()
	}

	do GoToForm^COMUtilForm("VARFechamentoContabil", "1", , , $$$NO)
	quit

GetNomeArquivo(pKeyFechamentoContabil,pTipoFechamento,&pArquivoRef)
	new objFechamentoArquivo
	if (($length(pKeyFechamentoContabil)=0) || ($length(pTipoFechamento)=0)) quit ""
	
	set objFechamentoArquivo = $get(^VARFechamentoContabilArquivo(YM,pKeyFechamentoContabil,pTipoFechamento,1))
	
	set pArquivoRef = "FCONTABIL"_$replace(pKeyFechamentoContabil,"/","-")_".ref"
	
	quit $$$VARFechamentoContabilArquivoNome(objFechamentoArquivo)
	
GetContaContabilSaida(pMovmtType, pTxnCode, pQty, pGroupItem)
	new contaContabilSaida, objINREC
		
	if ($length(pMovmtType) = 0) || ($length(pTxnCode) = 0) quit ""

	set contaContabilSaida 	= ""
	set objINREC 			= $get(^INREC(0, pTxnCode, 1))
	
	if ( ($$SQLGetMovTypeNumber^VARSQL(pMovmtType) = 1) && ($$$INRECTypeofReceiving(objINREC) = 2) ){	// Recebimento - Doação
		set contaContabilSaida = $$GetContaAtivoPorGrupo(pGroupItem)
	} else {
		if ($$GetCentroCustoSaida^VARFechamentoContabil(pMovmtType, pTxnCode, pQty) = ""){
			set contaContabilSaida = $$GetContaAtivoPorGrupo(pGroupItem)
		} else {
			set contaContabilSaida = $$GetContaDespesaPorGrupo(pGroupItem)
		}
	}
	
	quit contaContabilSaida

GetContaContabilEntrada(pMovmtType, pTxnCode, pQty, pGroupItem)
	new contaContabilEntrada, objINREC	
	if ($length(pMovmtType) = 0) || ($length(pTxnCode) = 0) quit ""

	set contaContabilEntrada 	= ""
	set objINREC 				= $get(^INREC(0, pTxnCode, 1))
	
	if ( ($$SQLGetMovTypeNumber^VARSQL(pMovmtType) = 1) && ($$$INRECTypeofReceiving(objINREC) = 2) ){	// Recebimento - Doação
		
		set contaContabilEntrada = "416003"

	} else {
		if ($$GetCentroCustoSaida^VARFechamentoContabil(pMovmtType, pTxnCode, pQty) = ""){
			set contaContabilEntrada = $$GetContaDespesaPorGrupo(pGroupItem)
		} else {
			set contaContabilEntrada = $$GetContaAtivoPorGrupo(pGroupItem)
		}
	}
	
	quit contaContabilEntrada
	
IsLocalAceiteTransfArmazenagem(pTxnCode)
	new idWWW0121

	$$$VAR

	if ($length(pTxnCode) = 0) quit 0
	
	set idWWW0121 = $$$INRECLocation($get(^INREC(YM, pTxnCode, 1)))
	if ($length(idWWW0121) = 0) quit 0

	quit ($$$WWW0121StorageLocn($get(^WWW0121(0, YM, idWWW0121, 1))) = 1)
	
IsRouteFromRequisitante(pTxnCode)
	new objTFR, idRoute, idLocation

	$$$VAR

	if ($length(pTxnCode) = 0) quit 0
	
	set objTFR = $get(^INTFR(YM, pTxnCode, 1))
	
	set idRoute = $$$INTFRDispatch(objTFR)
	set idLocation = $$$INTFRReceivingLocation(objTFR)
	
	if (($length(idRoute) = 0)||($length(idLocation) = 0)) quit 0

	quit ($$$INDRPUMLKWLocation($get(^INDRPUMLKW(YM, idRoute, 1))) = idLocation)

AceiteProcessMesmoMesTransf(pTxnCode)
	;Função para retornar se o Aceite foi processado no mesmo mês da Transferência
	;Se o Aceite ainda não tiver sido processado, retorna 0 (zero)
	;
	;Essa função é necessária para verificar pela rota definida na Transferência se o produto que está EmTransito pertence ao local de destino (Requisitante)
	;Necessário para evitar problema de Transferência feita em um mês e Aceite no mês seguinte

	new objTFR, dtProcessadoEmTransf, dtProcessadoEmAceite, idAceite, objAceite, MesAnoTransf, MesAnoAceite  

	$$$VAR

	if ($length(pTxnCode) = 0) quit 0
	
	set objTFR               = $get(^INTFR(YM, pTxnCode, 1))
	set dtProcessadoEmTransf = $$$INTFRShipped(objTFR)
	if ($length(dtProcessadoEmTransf) = 0) quit 0
	
	;Usando mesmo método que o campo calculado (ReceiptNumber) da INTFR
	set idAceite             = $$ReceiptNumber^INRPTransfer(YM,pTxnCode)
	if ($length(idAceite) = 0) quit 0

	set objAceite            = $get(^INREC(YM, idAceite, 1))
	set dtProcessadoEmAceite = $$$INRECProcessedDate(objAceite)
	;Se o Aceite ainda não tiver sido processado, retorna 0 (zero)
	if ($length(dtProcessadoEmAceite) = 0) quit 0
	
	set MesAnoTransf = $$SQLGetFormatDate5^VARSQL(dtProcessadoEmTransf)
	set MesAnoAceite = $$SQLGetFormatDate5^VARSQL(dtProcessadoEmAceite)
	
	quit (MesAnoTransf = MesAnoAceite)

IsRouteFromAbastecedor(pTxnCode)
	new objTFR, idRoute, idLocation

	$$$VAR

	if ($length(pTxnCode) = 0) quit 0
	
	set objINREC = $get(^INREC(YM, pTxnCode, 1))
	
	set idTransf = $$$INRECTransferNumbers(objINREC)
	
	if ($length(idTransf) = 0) quit 0
	
	set objTFR = $get(^INTFR(YM, idTransf, 1))
	
	set idRoute = $$$INTFRDispatch(objTFR)
	set idLocation = $$$INTFRSendingLocation(objTFR)
	
	if (($length(idRoute) = 0)||($length(idLocation) = 0)) quit 0

	quit ($$$INDRPUMLKWLocation($get(^INDRPUMLKW(YM, idRoute, 1))) = idLocation)
	
GetFornecedorEstorno(pTxnCode)
	$$$VAR

	if ($length(pTxnCode) = 0) quit 0

	quit $$GetFornecedorRecebimento($$$INRECReceiptSourceNo($get(^INREC(YM, pTxnCode, 1))))
	
GetTipoEstorno(pTxnCode)
	$$$VAR

	if ($length(pTxnCode) = 0) quit 0

	quit $$GetTipoRecebimento($$$INRECReceiptSourceNo($get(^INREC(YM, pTxnCode, 1))))
	
IsProdutoForaFechamentoContabil(pProduto)
	if ($length(pProduto) = 0) quit $$$YES
	
	$$$VAR
	
	set objINART = $get(^INART(YM,pProduto,1))
	set blnFechamento = +$$$INARTFREE44(objINART)
	
	quit blnFechamento
	
IsSaidaParaManipulacaoMagistral(pTxnCode="", pMovmtType="")
	// 2014-12-15	Henrique Dias	HEVA-1667	Correções na query após realização do merge
	// Verifica se a saída de um item foi para realizar uma manipulação magistral.

	new blnManipulacaoMagistral, idManipulacao
	set blnManipulacaoMagistral = $$$NO
	
	if (pMovmtType = 35) && $data(^INIssue(0,pTxnCode)) {
		
		set objIssue = $get(^INIssue(0,pTxnCode,1))
		set item = $$$INIssueFinishedGoodItemCode(objIssue)
		set idManipulacao = $$$INIssueProductionOrder(objIssue)

		if (idManipulacao '= "") && (item '= "") && $data(^VARManipulacaoMagistral(0,idManipulacao)) {
			
			set blnManipulacaoMagistral = $$isProdutoManipulado^VARProdutoManipulado(item)
		}
	}

	quit blnManipulacaoMagistral
	
GetTipoProducao(pTxnCode)
	$$$VAR

	if ($length(pTxnCode) = 0) quit 0
	
	set objIssue 	= $get(^INIssue(YM,pTxnCode,1))
	set prodOrder 	= $$$INIssueProductionOrder(objIssue)

	quit:(prodOrder="") 0

	set objProd	 		= $get(^INMO(YM,prodOrder,1))
	set tipoProducao 	= $$$INMOType(objProd)

	quit +tipoProducao
	
GetTipoProducaoEstornada(pTxnCode)
	$$$VAR

	if ($length(pTxnCode) = 0) quit 0
	
	set objProd	 		= $get(^INMO(YM,pTxnCode,1))
	set tipoProducao 	= $$$INMOType(objProd)

	quit +tipoProducao
	
GetContaAtivoPorGrupo(pGrupoItem)
	new pGrupo
	set pGrupo = $$SQLGetGrupoPai^VARSQL(pGrupoItem) 
	;101	MEDICAMENTOS	112201	
	if (pGrupo = 101) quit 112201
	;102	MATERIAL DE ENFERMAGEM	112202	
	if (pGrupo = 102) quit 112202
	;103	DESCARTÁVEIS	112203	
	if (pGrupo = 103) quit 112203
	;104	HIGIENE E LIMPEZA	112204	
	if (pGrupo = 104) quit 112204
	;105	ESCRITORIO E INFORMATICA	112205	
	if (pGrupo = 105) quit 112205
	;106	MATERIAL DE ODONTOLOGIA	112206	
	if (pGrupo = 106) quit 112206
	;107	MATERIAIS SADT E LABORATORIO	112207	
	if (pGrupo = 107) quit 112207
	;108	MATERIAIS DE SUTURAS E CIRURGIAS	112208	
	if (pGrupo = 108) quit 112208
	;109	MATERIAIS DE MANUTENÇÃO	112209	
	if (pGrupo = 109) quit 112209
	;110	EQUIPAMENTO DE PROTEÇÃO INDIVIDUAL	112210	
	if (pGrupo = 110) quit 112210
	;111	GENEROS ALIMENTICIOS	112211	
	if (pGrupo = 111) quit 112211
	;112	GASES	112213	
	if (pGrupo = 112) quit 112213
	;158	NUTRICAO E DIETÉTICA	112212	
	if (pGrupo = 158) quit 112212
	;159	ROUPARIA E UNIFORMES	112214	
	if (pGrupo = 159) quit 112214
	;160	IMPRESSOS	112215	
	if (pGrupo = 160) quit 112215
	;161	RADIOLOGIA	112216	
	if (pGrupo = 161) quit 112216
	;114	MATERIAIS E UTENSILIOS DIVERSOS	112217	
	if (pGrupo = 114) quit 112217
	;162	MATERIAL DE ORTESE E PROTESE	112219	
	if (pGrupo = 162) quit 112219
	;171	MATERIAL IMOBILIZADO	112218	
	if (pGrupo = 171) quit 112218
	
	quit ""
	
GetContaDespesaPorGrupo(pGrupoItem)	
	new pGrupo
	set pGrupo = $$SQLGetGrupoPai^VARSQL(pGrupoItem) 
	;101	MEDICAMENTOS		313001
	if (pGrupo = 101) quit 313001
	;102	MATERIAL DE ENFERMAGEM		313002
	if (pGrupo = 102) quit 313002
	;103	DESCARTÁVEIS		313002
	if (pGrupo = 103) quit 313002
	;104	HIGIENE E LIMPEZA		313004
	if (pGrupo = 104) quit 313004
	;105	ESCRITORIO E INFORMATICA		313005
	if (pGrupo = 105) quit 313005
	;106	MATERIAL DE ODONTOLOGIA		313006
	if (pGrupo = 106) quit 313006
	;107	MATERIAIS SADT E LABORATORIO		313007
	if (pGrupo = 107) quit 313007
	;108	MATERIAIS DE SUTURAS E CIRURGIAS		313008
	if (pGrupo = 108) quit 313008
	;109	MATERIAIS DE MANUTENÇÃO		313009
	if (pGrupo = 109) quit 313009
	;110	EQUIPAMENTO DE PROTEÇÃO INDIVIDUAL		313010
	if (pGrupo = 110) quit 313010
	;111	GENEROS ALIMENTICIOS		313011
	if (pGrupo = 111) quit 313011
	;112	GASES		313014
	if (pGrupo = 112) quit 313014
	;158	NUTRICAO E DIETÉTICA		313013
	if (pGrupo = 158) quit 313013
	;159	ROUPARIA E UNIFORMES		313015
	if (pGrupo = 159) quit 313015
	;160	IMPRESSOS		313016
	if (pGrupo = 160) quit 313016
	;161	RADIOLOGIA		313017
	if (pGrupo = 161) quit 313017
	;114	MATERIAIS E UTENSILIOS DIVERSOS		313018
	if (pGrupo = 114) quit 313018
	;162	MATERIAL DE ORTESE E PROTESE		313019
	if (pGrupo = 162) quit 313019
	;171	MATERIAL IMOBILIZADO		313020
	if (pGrupo = 171) quit 313020
	
	quit ""



AtualizarFechamentoContabilTxn(pUsuario,pidJob,pFiltro,pblnKeepLog=$$$YES)
	new strStatus
	Set strStatus = $$$OK
	
	$$$KeepLog do LogInicioEtapa^VARAguardandoJob(pUsuario,pidJob,1,"Atualizando o fechamento contábil")
	
	Set strStatus = $$GerarFechamento(pFiltro)
	if $$$ISERR(strStatus) {
		$$$KeepLog do LogTerminoEtapa^VARAguardandoJob(pUsuario,pidJob,1)
		$$$KeepLog do LogErroEtapa^VARAguardandoJob(pUsuario,pidJob,1,strStatus)
		do LogTerminoErroJob^VARAguardandoJob(pUsuario,pidJob,strStatus)
	}
	else {
		$$$KeepLog do LogTerminoEtapa^VARAguardandoJob(pUsuario,pidJob,1)
		do LogTerminoSucessoJob^VARAguardandoJob(pUsuario,pidJob)
	}
	
	

	Quit strStatus
	
AtualizarFechamentoContabil(pUsuario,pidJob,pFiltro)
	;------------------------------------------------------------------------
	; Function invoked from VARAgruandandoJob
	; 25-Sep-2014	FC		HEVA-1599		Created
	;
	;------------------------------------------------------------------------
	quit:( (pUsuario = "") || (pidJob = "") )

	$$$VAR
	
	set YBED = pUsuario
	
	set mes = $piece(pFiltro, Y, 1)
	set ano = $piece(pFiltro, Y, 2)
	if ((ano = "") || (mes = "")) set strStatus = $$$MakeStatus("%1", "Ano e Mês são campos obrigatórios.")
	
	new strStatus
	Set strStatus = $$$OK
	set strStatus = $$Transaction^COMTransaction("AtualizarFechamentoContabilTxn^VARFechamentoContabil("""_pUsuario_""","""_pidJob_""","""_pFiltro_""")", $$$YES)
	
	Quit

]]></Routine>
</Export>