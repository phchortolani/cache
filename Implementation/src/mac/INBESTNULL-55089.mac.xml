<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INBESTNULL" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include %occInclude
#include INConst
INBESTNULL
	;-------------------------------------------------------------------------------
	; Description of Function :
	;		LAGERPLÄTZE OHNE BESTAND
	;
	; Inputs :  
	;
	;
	; ByRef :
	;
	;
	; Returns :
	;
	;
	; History :
	; 20-Nov-2007	GRF		Doco; quits; Naked References
	; 06.07.2001	FIS
	;-------------------------------------------------------------------------------
	SET VORG(1)=$GET(VORG(1))
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
		SET VORG(2)=$GET(VORG(2))
	}
	IF VORG(1)="" SET VORG(1)=$GET(YLOCATION)
	IF VORG(1)="" QUIT
	KILL ^WWWSOR(YUSER)

	DO SUCH
	DO DRUCK
	KILL ^WWWSOR(YUSER)
	QUIT
	
SUCH ;SUCHEN LAGERPLÄTZE OHNE BESTAND ;seek without 
	;-------------------------------------------------------------------------------
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 24-Nov-2011	PPP		SR17965:1. Rewrote
	;								2. List only Storages that have no stock taking
	;								into considerations TSU's & Physical Storages
	; 08-Sep-2009	PP		SR: Updated to SOH Model V2
	;-------------------------------------------------------------------------------
	NEW LAP,ART,WE,BESTAND
	new idPhyStorage
	new objStorage
	new idStorage
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
		new idStorageStarts
	}
	new idLoc
	new blnUsed
	new arrStorage
	
	IF '$DATA(^INLP(YM,VORG(1))) DO ^WWWINFO($$^WWWTEXT(32292)_" ("_$$^WWWTEXT(32054)_")")  ;PRÜFEN (LAGERPLATZ) ;check
	
	//SR17965 >>>
	
	//*********************************************************
	//SET LAP=""
	//FOR  SET LAP=$ORDER(^INLP(YM,VORG(1),LAP)) QUIT:LAP=""  DO
	//. ;QUIT:LAP="X"
	//. QUIT:LAP=$PIECE($GET(^INVORG(YM,YM,1)),Y,87)  ;WEM;22698;22.10.2003;ERSETZEN HARDCODED LÖSCHLAGERPLATZ
	//. set blnUsed = $$IsStorageUsed(VORG(1),LAP)
	//. if 'blnUsed set ^WWWSOR(YUSER,VORG(1),LAP)=$get(^INLP(YM,VORG(1),LAP,1))
	//*********************************************************

	set idLoc = $get(VORG(1))
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
		set idStorageStarts=$get(VORG(2))
	}
	
	set idStorage = ""
	for	{
		set idStorage = $order(^INLP(0,idLoc,idStorage))

		quit:idStorage=""
		
		if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
			if idStorageStarts'="" {
				continue:$extract(idStorage,0,$length(idStorageStarts))'=idStorageStarts
			}
		}
		
		continue:idStorage=$$$INVORGDeleteStockLocation($get(^INVORG(0,0,1)))
		
		set blnUsed = $$IsStorageUsed(idLoc,idStorage,.idPhyStorage)
		
		
		if 'blnUsed {
			set objStorage = $get(^INLP(0,idLoc,idStorage,1))
			continue:$$$INLPTemporaryStorageUnit(objStorage)
			set ^WWWSOR(YUSER,idLoc,idStorage)=objStorage	
		} else {
			//Remove the Physical Storage also from the list
			if $get(idPhyStorage)'="" {
				set arrStorage(idPhyStorage)=""
			}
		}
		
	}
	
	//Clear all Storages used a Physical Storages used by TSU's from the list
	set idPhyStorage=""
	for	{
		set idPhyStorage = $order(arrStorage(idPhyStorage))
		quit:idPhyStorage=""
		
		kill ^WWWSOR(YUSER,idLoc,idPhyStorage)
	}
	
	//<<< SR17965
	
	quit


IsStorageUsed(pidLocation, pidStorage, &pidPhyStorage)
	;-------------------------------------------------------------------------------
	; Check if the Storage exists in alSOH.dSOH ie it has Stock
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 29-Nov-2011	PPP		SR17965:Use TOP 1, to reduce SQL time
	; 08-Sep-2009	PP		SR<>: Created
	;-------------------------------------------------------------------------------
	new blnUsed
	new rs
	new objStorage
	new sc
	
	set blnUsed = $$$NO
	
	set rs = ##class(%ResultSet).%New()
	//SR17965
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) { //RGB - Changes to Validate stock and physical storage
		new mySQL,idSearch
		set idSearch=pidLocation_"||"_pidStorage
		set mySQL="SELECT TOP 1 ID FROM alSOH.dSOH WHERE Storage ='"_idSearch_"' and QtyOnHand>0"
		do rs.Prepare(mySQL)
		do rs.Execute()
	}else {
		do rs.Prepare("SELECT TOP 1 ID FROM alSOH.dSOH WHERE Storage = ?")
		do rs.Execute(pidLocation_"||"_pidStorage)
	}
	
	if (rs.Next(.sc)) {
		set blnUsed = $$$YES	
	}
	
	do rs.Close()		//SR17965
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) { //RGB - Changes to Validate stock and physical storage
		if blnUsed = $$$NO {
			//To increase performance, i'll only search for Physical storage after searching for the storage itself //RGB
			//An index was added to alLOC.dStorage for the Physical field, adressing performance issues in this routines //RGB
			set rs = ##class(%ResultSet).%New()
			new mySQL,idSearch
			set idSearch=pidLocation_"||"_pidStorage
			set mySQL="SELECT TOP 1 ID FROM alSOH.dSOH WHERE Storage->Physical='"_idSearch_"' and QtyOnHand>0"
			do rs.Prepare(mySQL)

			do rs.Execute()
			if (rs.Next(.sc)) {
				set blnUsed = $$$YES	
			}
	
			do rs.Close()		
		}
	}

	//If Used set the Physical Location also as Used
	if blnUsed {
		set objStorage = $get(^INLP(0,pidLocation,pidStorage,1))
		if $$$INLPTemporaryStorageUnit(objStorage) {
			set pidPhyStorage = $$$INLPPhysical(objStorage)
		}
	}
	
	quit blnUsed
	
DRUCK ;LISTEN
	NEW LAP,BET,ANZM,YDDSATZ,LAP1
	
	DO ^WWWBACK
	SET BET=""
	FOR  SET BET=$ORDER(^WWWSOR(YUSER,BET)) QUIT:BET=""  DO
	. ;
	. ;HAUPTÜBERSCHRIFT
	. WRITE "<CENTER>"
	. WRITE "<B>"
	. WRITE "<NOBR>"
	. WRITE YCR
	. WRITE "<FONT SIZE=3>"
	. WRITE YKOPF
	. WRITE "&nbsp;"
	. WRITE "</FONT>"
	. WRITE "</B>"
	. WRITE YCR
	. WRITE "<BR><BR>"
	. WRITE "</CENTER>"
	. WRITE YCR
	. WRITE "<TABLE BORDER=0 CELLSPACING=0 WIDTH=100%>"
	. WRITE "<TR><TD>"
	. WRITE "<FONT SIZE=2>"
	. WRITE "<B>"
	. WRITE BET
	. WRITE " "
	. WRITE $PIECE($GET(^WWW0121(0,YM,BET,1)),Y,1)
	. WRITE "&nbsp;"
	. WRITE "</B>"
	. WRITE "</FONT>"
	. WRITE "</TD><TD ALIGN=RIGHT>"
	. WRITE "<FONT SIZE=2>"
	. WRITE "<B>"
	. WRITE $$^WWWDATE($HOROLOG)
	. WRITE "&nbsp;"
	. WRITE "</B>"
	. WRITE "</FONT>"
	. WRITE "</TD></TR>"
	. WRITE "</TABLE>"
	. WRITE YCR
	. WRITE "</NOBR>"
	. WRITE YCR
	. ;
	. ;---------------------------
	. ;
	. DO ^WWWFRAME(0)  ;TABLE AN ;upon 
	. ;
	. ;TABELLENÜBERSCHRIFT
	. WRITE "<TH VALIGN=TOP NOWRAP ALIGN=LEFT"
	. WRITE " BGCOLOR="_YDARKGRAY
	. WRITE ">"
	. WRITE "<FONT SIZE=2>"
	. DO             ;LAGERPLATZ   ;stock location 
	. . IF $PIECE($GET(^WWW0021(0,"INLP",2,SPRACHE,1)),Y,1)'="" WRITE $PIECE(^WWW0021(0,"INLP",2,SPRACHE,1),Y,1)  QUIT   ; Naked Ref
	. . IF $PIECE($GET(^WWW002(0,"INLP",2,1)),Y,1)'=""          WRITE $PIECE(^WWW002(0,"INLP",2,1),Y,1)                  ; Naked Ref
	. ;
	. WRITE "</FONT>"
	. WRITE "</TH>"
	. WRITE YCR
	. ;
	. WRITE "<TH VALIGN=TOP NOWRAP ALIGN=LEFT"
	. WRITE " BGCOLOR="_YDARKGRAY
	. WRITE ">"
	. WRITE "<FONT SIZE=2>"
	. DO             ;LAGERPLATZHINWEIS
	. . IF $PIECE($GET(^WWW0031(0,"INLP",10,SPRACHE,1)),Y,1)'="" WRITE $PIECE(^WWW0031(0,"INLP",10,SPRACHE,1),Y,1)  QUIT   ; Naked Ref
	. . IF $PIECE($GET(^WWW003(0,"INLP",10,1)),Y,1)'=""          WRITE $PIECE(^WWW003(0,"INLP",10,1),Y,1)                  ; Naked Ref
	. ;
	. WRITE "</FONT>"
	. WRITE "</TH>"
	. WRITE YCR
	. ;
	. SET ANZM=0
	. SET YDDSATZ=0
	. SET LAP=""
	. FOR  SET LAP=$ORDER(^WWWSOR(YUSER,BET,LAP)) QUIT:LAP=""  DO
	. . SET LAP1=$GET(^WWWSOR(YUSER,BET,LAP))
	. . ;
	. . SET ANZM=ANZM+1
	. . DO NL^WWWTAB
	. . DO NF^WWWTAB
	. . WRITE "<FONT SIZE=2"
	. . IF $PIECE(LAP1,Y,8)=1 WRITE " COLOR="_YRED
	. . WRITE ">"
	. . WRITE LAP  ;LAGERPLATZ ;campsite  ;stock location 
	. . WRITE "&nbsp;"
	. . WRITE "</FONT>"
	. . WRITE YCR
	. . ;
	. . DO ZW^WWWTAB
	. . WRITE "<FONT SIZE=2"
	. . IF $PIECE(LAP1,Y,8)=1 WRITE " COLOR="_YRED
	. . WRITE ">"
	. . WRITE $PIECE(LAP1,Y,10)  ;LAGERPLATZHINWEIS
	. . WRITE "&nbsp;"
	. . WRITE "</FONT>"
	. . WRITE YCR
	. . ;
	. . DO EF^WWWTAB
	. ;
	. IF ANZM=0 DO
	. . DO NL^WWWTAB
	. . DO NF^WWWTAB
	. . WRITE "<FONT SIZE=2>"
	. . WRITE $$^WWWTEXT(46)  ;KEINE DATEN VORHANDEN ;no on hand 
	. . WRITE "&nbsp;"
	. . WRITE "</FONT>"
	. . WRITE YCR
	. . DO EF^WWWTAB
	. . DO  ;FOR YI=1:1:2 DO
	. . . DO NF^WWWTAB
	. . . WRITE "<FONT SIZE=2>"
	. . . WRITE "&nbsp;"
	. . . WRITE "</FONT>"
	. . . WRITE YCR
	. . . DO EF^WWWTAB
	. ;
	. DO EL^WWWTAB
	. DO ^WWWFRAME(1)  ;TABLE AUS ;out of 
	
	QUIT
]]></Routine>
</Export>