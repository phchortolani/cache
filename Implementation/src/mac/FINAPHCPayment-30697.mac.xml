<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINAPHCPayment" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINAPHCPayment  ; AP Payment Health Check
	#Include FINHC
	#define Check "^CacheTemp(YUSER,""FINAPHCPayment"")"



Check(StartDate="",EndDate="",Location="",Level="",Result)
    ;-------------------------------------------------------------------------------
    ; All AP Posted Payments must update a Posted Interface Batch
    ;
    ; Returns:
    ;
    ; History:
    ; 10-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new strStatus
	
	if $get(Y)="" do ^WWWVAR
	kill Result
	kill @$$$Check
	set strStatus=$$$OK
	
	do PaymentLines()	
	do BatchLines()
	set strStatus=$$Compare(.Result)
	set strStatus=strStatus&&$$CheckLinks(.Result)
	kill @$$$Check
	
	if strStatus=$$$OK {
		set strStatus=2  ; Because this is a Standalone Check return 2 if Ok
	}
	quit strStatus
	
	
CheckLinks(Result,pblnFix=$$$NO)
    ;-------------------------------------------------------------------------------
    ; Check that the Payment links have Payment and PaymentLine as the Source Record.
    ; Optional pblnFix flag will attempt to repair the incorrect linkages.
    ;
    ; Returns:
    ;
    ; History:
    ; 13-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new strStatus,strPayment,idBatch,idLine,objFININTBatchLine,strBlockMajor,strBlockMinor
	new idLine2,objFININTBatchLine2,strErrorMessage
	
	set strStatus=$$$OK
	set strPayment=""
	for {
		set strPayment=$order(^FININTBatchLines(0,3,"APP",strPayment))
		quit:strPayment=""
		
		set idBatch=""
		for {
			set idBatch=$order(^FININTBatchLines(0,3,"APP",strPayment,idBatch))
			quit:idBatch=""
			
			set idLine=""
			for {
				set idLine=$order(^FININTBatchLines(0,3,"APP",strPayment,idBatch,idLine))
				quit:idLine=""
				
				set objFININTBatchLine=$get(^FININTBatchLine(0,idBatch,idLine,1))
				set strBlockMajor=$$$FININTBatchLineBlockNumberMajor(objFININTBatchLine)
				set strBlockMinor=$$$FININTBatchLineBlockNumberMinor(objFININTBatchLine)
				set idLine2=""
				for {
					set idLine2=$order(^FININTBatchLines(0,1,idBatch,strBlockMajor,strBlockMinor,idBatch,idLine2))   ; FIXME : $$$Index
					quit:idLine2=""
					
					set objFININTBatchLine2=$get(^FININTBatchLine(0,idBatch,idLine2,1))
					if $$$FININTBatchLineBlockNumberMajor(objFININTBatchLine2)=strBlockMajor {
						if $$$FININTBatchLineBlockNumberMinor(objFININTBatchLine2)=strBlockMinor {
							if $length($$$FININTBatchLineSource(objFININTBatchLine),",")=2 {
								if ($$$FININTBatchLineSource(objFININTBatchLine2)'=$$$FININTBatchLineSource(objFININTBatchLine)) {
									set Result("Hash",$$$ErrorNo(Result("Errors")))="Source incorrect for ^FININTBatchLine(0,"_idBatch_","_idLine2_",1) :: Source="_$$$FININTBatchLineSource(objFININTBatchLine2)_" should be "_$$$FININTBatchLineSource(objFININTBatchLine)
									set strStatus='$$$OK
									if pblnFix {
										set $$$FININTBatchLineSource(objFININTBatchLine2)=$$$FININTBatchLineSource(objFININTBatchLine)
										set strStatus = $$$Save("FININTBatchLine",idBatch_YKOMMA_idLine2,objFININTBatchLine2,$$$YES)
									}
								}
							} else {
								set strErrorMessage="Source incorrect for ^FININTBatchLine(0,"_idBatch_","_idLine2_",1) :: Source="_$$$FININTBatchLineSource(objFININTBatchLine2)
								if pblnFix {
									set strErrorMessage=strErrorMessage_" Unable to fix! (Run FixBatchLines^FINAPHCPayment)"
								}
								set Result("Hash",$$$ErrorNo(Result("Errors")))=strErrorMessage
								set strStatus='$$$OK
							}
						}
					}
				}
			}
		}
	}

	quit strStatus
	
	
Compare(Result)
    ;-------------------------------------------------------------------------------
    ; Compare the results
    ;
    ; Notes:
    ; Some things to check when the numbers don't match.
    ; 1.  Posting and Unposting.  Prior to 13-May-2004 it is possible that unposting
    ;     did not reverse the sign of some or all of the FININTBatchLine created.
    ;     To find these.  zw ^FININTBatchLines(0,3,"APP"), next field is
    ;     Payment<space>PaymentLine.  If the corresponding ^FININTBatch has not been
    ;     posted (Field 3) then the globals can be changed.  At some point a cleanup
    ;     routine may be developed if required.
    ;     
    ; 
    ; 
    ; Returns:
    ;
    ; History:
    ; 28-Oct-2004	shobby	 FINAPPayment changed to FINAPPaymentLine
    ; 12-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new strStatus,idPayment,idPaymentLine,strType,fltAmount
	new objFINAPPaymentLine

	set strStatus=$$$OK

	set strType=""
	for {
		set strType=$order(@$$$Check@(strType))
		quit:strType=""
		
		set idPayment=""
		for {
			set idPayment=$order(@$$$Check@(strType,idPayment))
			quit:idPayment=""
			
			set idPaymentLine=""
			for {
				set idPaymentLine=$order(@$$$Check@(strType,idPayment,idPaymentLine))
				quit:idPaymentLine=""
				
				if strType="BatchLines" {
					set fltAmount("BatchLines")   = +$get(@$$$Check@("BatchLines",idPayment,idPaymentLine))
					set fltAmount("PaymentLines") = +$get(@$$$Check@("PaymentLines",idPayment,idPaymentLine))
					if fltAmount("BatchLines")'=fltAmount("PaymentLines") {
						set objFINAPPaymentLine = $get(^FINAPPaymentLine(0,idPayment,idPaymentLine,1))
						if (fltAmount("BatchLines")=0)&&($$$FINAPPaymentStatus(objFINAPPaymentLine)'=$$$EnumFINSYSSTATUSPosted) {
							; Don't have to balance if the BatchLines=0 and it is not posted.
							; May have been posted and then unposted.
						} else {
							set Result("Hash",$$$ErrorNo(Result("Errors")))="Payment Line(^FINAPPaymentLine(0,"_idPayment_","_idPaymentLine_",1)="_fltAmount("PaymentLines")_") doesn't balance with Batch Lines (^FININTBatchLine total="_fltAmount("BatchLines")_")"
							set strStatus='$$$OK
						}
					}
					kill @$$$Check@("PaymentLines",idPayment,idPaymentLine)
				} elseif strType="PaymentLines" {
					set objFINAPPaymentLine=$get(^FINAPPaymentLine(0,idPayment,idPaymentLine,1))
					if $$$FINAPPaymentStatus(objFINAPPaymentLine)=$$$EnumFINSYSSTATUSPosted {
						; If not posted then it shouldn't have Batch Lines yet.
						set Result("Hash",$$$ErrorNo(Result("Errors")))="Payment Line(^FINAPPaymentLine(0,"_idPayment_","_idPaymentLine_",1)="_fltAmount("PaymentLines")_") has no Batch Lines (^FININTBatchLine)"
						set strStatus='$$$OK
					}
				}
			}
		}
	}
	
	quit strStatus
	
PaymentLines()
    ;-------------------------------------------------------------------------------
    ; Find all Payment Lines and the amounts
    ;
    ; Returns:
    ;
    ; History:
    ; 10-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------

	new idPayment,idLine,fltAmount,objFINAPPaymentLine
		
	set idPayment=""
	for {
		set idPayment=$order(^FINAPPaymentLine(0,idPayment))
		quit:idPayment=""
		set idLine=""
		for {
			set idLine=$order(^FINAPPaymentLine(0,idPayment,idLine))
			quit:idLine=""
			set objFINAPPaymentLine=$get(^FINAPPaymentLine(0,idPayment,idLine,1))
			set fltAmount=$$$FINAPPaymentLineTotal(objFINAPPaymentLine)
			set @$$$Check@("PaymentLines",idPayment,idLine)=fltAmount
		}
	}
	quit


BatchLines()
    ;-------------------------------------------------------------------------------
    ; Find the FININTBatchLine that come from a payment and the total amount.
    ;
    ; Returns:
    ;
    ; History:
    ; 11-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	;
	new idBatch,idLine,objFININTBatchLine,idPayment,idPaymentLine,strSource,fltAmount
	
	set idBatch=""
	for {
		set idBatch=$order(^FININTBatchLines(0,50,"APP",idBatch))
		quit:idBatch=""
		
		set idLine=""
		for {
			set idLine=$order(^FININTBatchLines(0,50,"APP",idBatch,idLine))
			quit:idLine=""
			
			set objFININTBatchLine = $get(^FININTBatchLine(0,idBatch,idLine,1))
			set strSource     = $$$FININTBatchLineSource(objFININTBatchLine)
			set idPayment     = $$$KEY1(strSource)    if idPayment=""     set idPayment     = "?"
			set idPaymentLine = $$$KEY2(strSource)    if idPaymentLine="" set idPaymentLine = "?"
			
			set fltAmount = $$$FININTBatchLineAmount(objFININTBatchLine)
			set @$$$Check@("BatchLines",idPayment,idPaymentLine) = $get(@$$$Check@("BatchLines",idPayment,idPaymentLine))+fltAmount
		}
	}
	quit
	
	
FixBatchLines(pstrType="")
    ;-------------------------------------------------------------------------------
    ; Put the Payment Line as the second part of the Source for a FININTBatchLine
    ;
    ; Returns:
    ;
    ; History:
    ; 11-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new idBatch,idBatchLine,objFININTBatchLine,idInvoice,strParameters,strSource
	new idPayment,idSupplier,idPaymentLine,idPaymentInvoice,objFINAPPaymentLine
	new blnFound,blnUpdate,strStatus
	
	set idBatch=""
	for {
		set idBatch=$order(^FININTBatchLines(0,50,"APP",idBatch))
		quit:idBatch=""
		
		set idBatchLine=""
		for {
			set blnUpdate=$$$NO
			set idBatchLine=$order(^FININTBatchLines(0,50,"APP",idBatch,idBatchLine))
			quit:idBatchLine=""
			
			set objFININTBatchLine=$get(^FININTBatchLine(0,idBatch,idBatchLine,1))
			set strParameters = $$$FININTBatchLineParameters(objFININTBatchLine)
			set idSupplier    = $$$KEY1(strParameters)
			set idInvoice     = $$$KEY2(strParameters)
			set strSource=$$$FININTBatchLineSource(objFININTBatchLine)
			
			set idPayment     = $$$KEY1(strSource)
			set idPaymentLine = $$$KEY2(strSource)
			if idPaymentLine'="" {
				; OK	
			
			} elseif $order(^FINAPPaymentLine(0,idPayment,""),-1)=1 {
				; Only one
				set idPaymentLine = 1
				set blnUpdate     = $$$YES
			
			} elseif $$GetPaymentLineFromSupplier(idPayment,idSupplier,.idPaymentLine) {
				set blnUpdate = $$$YES
				; Only one line for each supplier
			
			} else {
				; Can we get it from Invoice?  Not yet working.
				write !,"^FININTBatchLine(0,"_idBatch_","_idBatchLine_",1)="_objFININTBatchLine_" : "
				set idPaymentLine=""
				for {
					set idPaymentLine=$order(^FINAPPaymentInvoice(0,idPayment,idPaymentLine))
					quit:idPaymentLine=""
					
					set idPaymentInvoice=""
					set blnFound=$$$NO
					for {
						quit:blnFound
						set idPaymentInvoice=$order(^FINAPPaymentInvoice(0,idPayment,idPaymentLine,idPaymentInvoice))
						quit:idPaymentInvoice=""
						
						if idPaymentInvoice=idInvoice {
							set objFINAPPaymentLine=$get(^FINAPPaymentLine(0,idPayment,idPaymentLine,1))
							if $$$FINAPPaymentLineSupplierNumber(objFINAPPaymentLine)=idSupplier {
								set blnFound = $$$YES
								write idPayment_","_idPaymentLine,!
							}
						}
					}		
				}
			}
			if blnUpdate {
				set $$$FININTBatchLineSource(objFININTBatchLine)=idPayment_","_idPaymentLine
				set strStatus = $$$Save("FININTBatchLine",idBatch_YKOMMA_idBatchLine,objFININTBatchLine,$$$YES)
			}
		}
	}
	quit


GetPaymentLineFromSupplier(pidPayment,pidSupplier,pidPaymentLine)
    ;-------------------------------------------------------------------------------
    ; Try to determine the Payment Line from the Supplier Number
    ;
    ; Returns:
    ;
    ; History:
    ; 12-May-2004   Shobby   Created
    ;-------------------------------------------------------------------------------
	new strStatus,intCount,idPaymentLine,objFINAPPaymentLine
	
	set strStatus='$$$OK   ; FIXME : blnStatus
	set intCount=0

	set idPaymentLine=""
	for {
		set idPaymentLine=$order(^FINAPPaymentLine(0,pidPayment,idPaymentLine))
		quit:idPaymentLine=""
		
		set objFINAPPaymentLine=$get(^FINAPPaymentLine(0,pidPayment,idPaymentLine,1))
		if pidSupplier=$$$FINAPPaymentLineSupplierNumber(objFINAPPaymentLine) {
			set intCount=intCount+1
			set pidPaymentLine=idPaymentLine
		}
	}

	if intCount=0 {
		set strStatus='$$$OK
		
	} elseif intCount=1 {
		set strStatus=$$$OK
		
	} else {
		; Multiple
		set strStatus='$$$OK
	}
	
	if '$$$ISOK(strStatus) {
		set pidPaymentLine=""
	}
	
	quit strStatus
]]></Routine>
</Export>