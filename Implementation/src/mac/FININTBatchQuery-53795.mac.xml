<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FININTBatchQuery" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FININTBatchQuery
#include COMSYS
#include FINConst
 
#define CSTLinkField 29
 
BlockQuery(pidBatch) 
	;-------------------------------------------------------------------------------
	; 
	; History
	; 25-Jan-2006	RPW		SR13087: Show the intercompany details
	; 06-Nov-2005	SCR		SR13578: Added More detail and drill down 
	; 23-Feb-2004	shobby	Added then removed the minor block number column.
	; 						More thought required. <TODO MajMin>
	; 02-Jul-2003	SCR		Added 'id'
	;-------------------------------------------------------------------------------
	new Query
	
	set Query("Name")="Many"
	set Query("Class")="FININTBatchBlock"
	set Query("Col",1)="P~2~L~~~~~"_$$$StrFININTBatchLineBlockNumber     	; BlockNum -> jumps to BatchLines for Block
	set Query("Col",1,"Link")="@s Form=$$LineLink^FININTBatchQuery(id(1),id(2))~P~1"		
	set Query("Col",2)="D~8~L"			  
	set Query("Col",3)="D~2~L"			  
	set Query("Col",4)="D~3~L"			  
	set Query("Col",5)="D~4~L"			  
	set Query("Col",6)="D~5~L"			  
	set Query("Col",7)="D~9~L" ; SR13087
	set Query("Form")=YFORM
	set Query("Loop")="BlockQueryLoop^FININTBatchQuery"
	set Query("Get")="set id=$$GetBlockRec^FININTBatchQuery(id(1),id(2))"
	set Query("Link")="@s Form=$$SourceLink^FININTBatchQuery(id(1),id(2))~D~7"
	set VORG=pidBatch
	do Query^COMQuery(.Query,.VORG)
	quit
 
 
BlockQueryLoop(Query,Storage,VORG)
	;-------------------------------------------------------------------------------
	; 
	; History
	; 06-Nov-2005	SCR		SR13578: Added drill down to the source document, changed to FININTBatchBlock
	; 23-Feb-2004	shobby	Block may be split into two parts.
	;-------------------------------------------------------------------------------
	kill ^mtemp("Query",$job)
	new count,id
	
	set count=0
	set id(1)=VORG
	if id(1)'="" {
		set id(2)=""
		for {
			set id(2)=$order(^FININTBatchBlock(YM,id(1),id(2)))  ;index on Batch and Block
			quit:id(2)=""
			set count=count+1
			merge @Storage@(count)=id
		}
	}
	quit count
	
 
GetBlockRec(pidBatch,pidBlock)
    ;-------------------------------------------------------------------------------
    ; Get the Record for the block, Modify Source
    ;
    ; Params:
    ; pidBatch = Batch Number
    ; pidBlock = Block Number
    ;
    ; Returns: Record
    ;
    ; History:
    ; 06-Nov-2005	SCR		SR13578: Created
    ;-------------------------------------------------------------------------------
	new objBlock,strDetail
	
	if $get(pidBatch)="" set pidBatch=" "
	if $get(pidBlock)="" set pidBlock=" "
	
	set objBlock=$get(^FININTBatchBlock(YM,pidBatch,pidBlock,1))
	
	set strDetail=$$$FININTBatchBlockSourceDetails(objBlock)
	set $$$FININTBatchBlockSourceDetails(objBlock)=$$Detail(strDetail) ; Modify Source
	
	if $$$FININTBatchBlockSourceForm(objBlock)="" {
		set $$$FININTBatchBlockSourceRec(objBlock)=pidBatch 		; Used for transactions theat do not have a drill back.
 
	}
	quit objBlock
	
 
Detail(pstrDetail) 
    ;-------------------------------------------------------------------------------
    ; Expand Source Detail
    ;
    ; Params:
    ; 
    ; pstrDetail = Details including language text and parameters
    ;
    ; Returns: Readable text
    ;
    ; History:
    ; 06-Nov-2005	SCR		SR13578: Created
    ;-------------------------------------------------------------------------------
	new strText,idText,intParam,strParam,lstParam
	
	set strText=""
	set lstParam=""
	if $get(pstrDetail)'="" {
		for intParam=1:1:$length(pstrDetail,",") {
			set $list(lstParam,intParam)=$piece(pstrDetail,",",intParam)
		}
		set strText=$$$Text(lstParam)
	}
	
	quit strText
	
 
SourceLink(pidBatch,pidBlock) ; from the source and batch type link to the source record.
	;-------------------------------------------------------------------------------
	; 
    ; Params:
    ; pidBatch = Batch Number
    ; pidBlock = Block Number
    ;
    ; Returns: Form
	; 
	; History
	; 06-Nov-2005	SCR		SR13578: Changed to use Source form and id
	; 02-Jul-2003	SCR		Added 'id'
	; 13-Jun-2003	shobby	Defined variable
	; -----------------------------------------------------------------------
	new objBatchBlock,strForm,idRec
	
	if $get(pidBatch)="" set pidBatch=" "
	if $get(pidBlock)="" set pidBlock=" "
 
	set objBatchBlock=$get(^FININTBatchBlock(YM,pidBatch,pidBlock,1))
	set strForm= $$$FININTBatchBlockSourceForm(objBatchBlock)
	set idRec=$$$FININTBatchBlockSourceRec(objBatchBlock)
	if strForm'="" {
		;if idRec'="" write "&YFKEY="_idRec
	} else {
		set strForm=$$LineLink(pidBatch,pidBlock)
	}
	quit strForm
	
LineLink(pidBatch,pidBlock) ; Call to Show the lines for the block. 
    ;-------------------------------------------------------------------------------
    ; Show Lines of the Block
    ;
    ; Params:
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Nov-2005	SCR		SR13578: Changed to parameters
    ;-------------------------------------------------------------------------------
	new Form
	if $get(pidBatch)="" set pidBatch=" "
	if $get(pidBlock)="" set pidBlock=" "
 
	set Form="FININTBatch"
	;set objBatchLine=$get(^FININTBatchLine(YM,id(1),id(2),1))
	write "&YSEITE=2"
	;write "&YPARA="_$$$FININTBatchLineBlockNumber(objBatchLine)
	write "&YPARA="_pidBlock
	quit Form
	
	
	
	
	
LineQuery(pidBatch,pintBlock) 
	;-------------------------------------------------------------------------------
	; 
	; 
	; NOTE : A dummy field is added past the end of the copied record so the CST
	;        Matrix keys can be available in both internal and literal date formats.
	; 
	; History:
	; 23-Jan-2006	RPW		SR13087: Allow the Batch to show the InterCompany Information
	; 20-Jun-2005	GRF		SR12711 : Append BatchQuery list to bottom of Line form
	; 						to allow direct access to other lines without having to
	; 						change tabs
	; 10-Mar-2005	GRF		SR10478 : Module independence
	; 16-Feb-2005	GRF		SR10478 : Conversion Keys added for Cost Matrix; extend
	; 						"Get"
	; 23-Feb-2004	shobby	Block split up into two parts. <TODO>
	; 01-Oct-2003	SCR		Added Parameters & Source
	;-------------------------------------------------------------------------------
	new Query
	
	;StrFININTBatchLineCostMatrixValues
	set Query("Name") ="Lines"
	set Query("Class")="FININTBatchLine"
	set Query("Col",1)="D~2~L~~~~~"_$$$StrFININTBatchLineAccount    
	set Query("Col",1,"Link")="FINGLAccount~D~2"
	set Query("Col",2)="D~3~L~~~~~"_$$$StrFININTBatchLineAmount 
	set Query("Col",3)="D~4~L~~~~~"_$$$StrFININTBatchLineInterfaceType      ;Interface Type
	set Query("Col",4)="D~7~L~~~~~"_$$$StrFININTBatchLineReference          ;Reference
	set Query("Col",5)="D~5~L~~~~~"_$$$StrFININTBatchLineParameters         ;Parameters
	set Query("Col",6)="D~6~L~~~~~"_$$$StrFININTBatchLineSource             ;Source
	set Query("Col",7)="D~13~L~~~~~"_$$$StrFININTBatchLineCostMatrixKeys    ;Cost Matrix Keys
	set Query("Col",8)="D~18~L~~~~~"_$$$StrFININTBatchLineCompany1       ; SR13087
	set Query("Col",9)="D~17~L~~~~~"_$$$StrFININTBatchLineCompanyAccount ; SR13087
 
	if $data(^WWW120(0,"CSTMatrixDefault")) {
		; Link to Cost Matrix Default with adjusted keys
		set Query("Col",7,"Link")="CSTMatrixDefault~D~"_$$$CSTLinkField
	}
	set Query("Form")     = YFORM
	set Query("Ref","Acc")= "^FINGLAccount(YM,$$Data(.id,""D~1"",,1),1)"
	set Query("Loop")     = "LineQueryLoop^FININTBatchQuery"
	;set Query("Get")     = "set id=$get(^FININTBatchLine(YM,id(1),id(2),1))"
	set Query("Get")      = "set id=$get(^FININTBatchLine(YM,id(1),id(2),1)),id=$$LineQueryConv^FININTBatchQuery(id)"
	set VORG              = pidBatch_","_pintBlock
	kill ^CacheTempCSTMatrixAudit(YM,"FININTBatchLine",YUSER)
	
	do Query^COMQuery(.Query,.VORG)
	//do BlockQuery(pidBatch)
	quit
	
	
LineQueryLoop(Query,Storage,VORG)
	;-------------------------------------------------------------------------------
	; 
	; History
	; 22-Jul-2011	GRF		-: Order macros
	; 06-Oct-2006	JW		SR15101: Index Batch number!  Use Order macros.
	; 07-Nov-2005	SCR		SR13578: Changed to use major block
	; 20-Feb-2004	shobby	Split Block into 2 parts. (ie 1.2 ->  1   2)
	;-------------------------------------------------------------------------------
	kill ^mtemp("Query",$job)
	new count,idBlock,id,idBlockMinor,idxBatch
	set count        = 0
	set id(1)        = $piece(VORG,",",1)
	set idBlock      = $piece(VORG,",",2)
	
	if (id(1)'="")&&(idBlock'="") {
		set idxBatch = $$$Index(id(1))
		set idBlockMinor = ""
		for {
			set idBlockMinor = $order(^FININTBatchLines(YM,1,idxBatch,idBlock,idBlockMinor))
			quit:idBlockMinor=""
			
			set id(2) = ""     ;gets first line of Block
			for {
				set id(2) = $order(^FININTBatchLines(YM,1,idxBatch,idBlock,idBlockMinor,id(1),id(2)))
				quit:id(2)=""
				
				set count=count+1
				merge @Storage@(count)=id
			}
		}
	}
	quit count
	
	
LineQueryConv(pobjID="")
	;-------------------------------------------------------------------------------
	; Convert date in D13 to literal format
	; 
	; NOTE : A dummy field is added past the end of the copied record so the CST
	;        Matrix keys can be available in both internal and literal date formats.
	; 
	; History
	; 16-Mar-2005	GRF		SR10478 : Pass Source Locn and Group to Audit
	; 10-Mar-2005	GRF		SR10478 : Module independence
	; 16-Feb-2005	GRF		SR10478 : Conversion Keys added for Cost Matrix
	;-------------------------------------------------------------------------------
	new AcctType,CSTMatKeys,CSTMatValues,EffectDate,NewKeys,OrderType,TranType,SourceLocn,SourceGroup
	
	quit:'$$EXIST^%R("CSTCommon.OBJ",$get(YUCI)) pobjID
	
	set CSTMatKeys   = $$$FININTBatchLineCostMatrixKeys(pobjID)
	set CSTMatValues = $$$FININTBatchLineCostMatrixValues(pobjID)
	set SourceLocn   = $$$FININTBatchLineProfileLocation(pobjID)
	set SourceGroup  = $$$FININTBatchLineProfileGroup(pobjID)
	if CSTMatKeys'="" {
 
		; Convert to common types when AcctType = "INV"
		do SplitKey^CSTCommon(CSTMatKeys,.TranType,.OrderType,.AcctType,.EffectDate)
		do CommonTypes^CSTCommon(.TranType,.OrderType,AcctType)
		set NewKeys = $$CombineKey^CSTCommon(TranType,OrderType,AcctType,EffectDate)
		
		; Link to new form
		set $piece(pobjID,Y,$$$CSTLinkField) = NewKeys
		
		; Display Date as Literal with original key information
		if EffectDate'="" {
			set EffectDate = $$^WWWDATE(EffectDate,"EN")
			set $$$FININTBatchLineCostMatrixKeys(pobjID)=$piece(CSTMatKeys,$$$COMMA,1,3)_$$$COMMA_EffectDate
		}
		
	; FIXME : if both sides of the transaction use the same Account ID Matrix
	;         there will be only a single "NewKeys" value <GRF>
		set ^CacheTempCSTMatrixAudit(YM,"FININTBatchLine",YUSER,NewKeys)=CSTMatValues_Y_SourceLocn_Y_SourceGroup
	}
	quit pobjID
	
	
]]></Routine>
</Export>