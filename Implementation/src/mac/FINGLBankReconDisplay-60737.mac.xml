<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FINGLBankReconDisplay" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FINGLBankReconDisplay
#include COMSYS
#include FINConst
 
#define	TRAN		1
#define TRANLINE	2
#define ACCOUNT		3
#define	BANKRECON	4
#define	DATA		5
#define	TYPE		6
 
LoadGridData(pidBankRecon) 
	;-------------------------------------------------------------------------------
	; Loops through the transactions and each uncleared one is added to the grid.
	; This is run continuously each time a tab is changed to pick up new data.
	;
	; Params:
	; pidBankRecon: The bank reconciliation id.
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 15-Aug-2006	RPW		SR14880: Fixed macro/global usage.
	; 26-Jul-2006	JW		SR14880: Now uses global not list
	; 16-Mar-2006	JW		SR14433: Cleaner checks for CacheTempBankBROrder
	; 09-Mar-2006	RPW		SR13305: Updated to use ANNO macro instead of $$$NO
	; 						Use WWWKEYBUILD on the key entry for the $query
	; 						Use RoundToDecimalPoints to cleanly handle the amount fields
	; 16-Feb-2006	RPW		SR13675: Created
	;-------------------------------------------------------------------------------
	new blnPosted,count,dteTransDate,id,idAccount,idBankRecon,idTran,idTranLine
	new objBankReconCleared,objFINGLBankRecon,objFINGLTranLine,lstAccounts,idx
	new strType,strRef,oldCount,blnPopulate,blnCredit,curAmount,query,strStatus
	new objBankReconMatched,objData,strQuery
	
	set count=0
	
	;kill ^CacheTempBROrder(YUSER,pidBankRecon)
	kill ^CacheTempBROrder(YUSER)			//SR14433
	
	set objFINGLBankRecon=$get(^FINGLBankRecon(YM,pidBankRecon,1))
		
	set idAccount=$$$FINGLBankReconBankAccount(objFINGLBankRecon)
	
	do GetReconAccounts^FINGLBank(idAccount)		//SR14880
	$$$Order3(^CacheTempBankRecon,YUSER,"Accounts",idAccount)				//SR14880: Correct macro usage.
			
		set idTran=""
		for {
			set idTran=$order(^FINGLTranLines(YM,2,idAccount," ",idTran))
			quit:idTran=""
			
			if $$GetTransactionKey^FINGLTranLine(idTran)'="CI" {
				set idTranLine=""
				for {
					set idTranLine=$order(^FINGLTranLines(YM,2,idAccount," ",idTran,idTranLine))
					quit:idTranLine=""
					
					set objFINGLTranLine=$get(^FINGLTranLine(YM,idTran,idTranLine,1))
					
					set dteTransDate = $$$FINGLTranLineTransactionDate(objFINGLTranLine)
					
					if dteTransDate'="" {	// This should never happen...
						
						;display only GL trans <= GL Recon date.
						if dteTransDate <= $$$FINGLBankReconReconcilingGLDate(objFINGLBankRecon) {
						
							set strType = $$GetTransactionType^FINGLTranLine(idTran)
							set strRef=$$$FINGLTranLineReference(objFINGLTranLine)
						
							if strType="" set strType=" "
							if strRef="" set strRef=" "
							
							set count=count+1
							
							set ^CacheTempBROrder(YUSER,pidBankRecon,dteTransDate,strType,strRef,count)=idTran_Y_idTranLine
							
						}
					}
				}
			}
		}
	$$$End
 	
	set strQuery="^CacheTempBROrder("_$$^WWWKEYBUILD(YUSER_$$$COMMA_pidBankRecon)_")"
	for {
		set strQuery=$query(@strQuery)
		;quit:strQuery=""
		quit:YUSER'=$piece($piece(strQuery,"(",2),$$$COMMA,1)	//SR14433
		
		set objData=@strQuery
	
		set idTran       = $piece(objData,Y,1)
		set idTranLine   = $piece(objData,Y,2)
			
		if '$data(^FINGLBankReconMatcheds(YM,3,idTran,idTranLine,pidBankRecon)) {
			set objBankReconMatched=""
			set objFINGLTranLine=$get(^FINGLTranLine(YM,idTran,idTranLine,1))
			set $$$FINGLBankReconMatchedTransaction1(objBankReconMatched)=idTran
			set $$$FINGLBankReconMatchedTransactionLine(objBankReconMatched)=idTranLine
			set $$$FINGLBankReconMatchedAccount(objBankReconMatched)=$$$FINGLTranLineAccount(objFINGLTranLine)
			set $$$FINGLBankReconMatchedTransactionType(objBankReconMatched)=$$GetTransactionType^FINGLTranLine(idTran)
			set $$$FINGLBankReconMatchedDeposit(objBankReconMatched)= $$$RoundToDecimalPoints("USD",$$$FINGLTranLineDebit(objFINGLTranLine))
			set $$$FINGLBankReconMatchedWithdrawal(objBankReconMatched)= $$$RoundToDecimalPoints("USD",$$$FINGLTranLineCredit(objFINGLTranLine))
			set $$$FINGLBankReconMatchedTransactionDate(objBankReconMatched)=$$$FINGLTranLineTransactionDate(objFINGLTranLine)
			set $$$FINGLBankReconMatchedReference(objBankReconMatched)=$$$FINGLTranLineReference(objFINGLTranLine)
			set $$$FINGLBankReconMatchedCleared(objBankReconMatched)=$$$ANNO
			set $$$FINGLBankReconMatchedManuallyCleared(objBankReconMatched)=$$$ANNO
			set strStatus=$$$Save("FINGLBankReconMatched",pidBankRecon_","_($order(^FINGLBankReconMatched(YM,pidBankRecon,""),-1)+1),objBankReconMatched,1)
		}
	}
		
	;kill ^CacheTempBROrder(YUSER,pidBankRecon)
	kill ^CacheTempBROrder(YUSER)		//SR14433
	
	quit
 
 
	
ShowBalances(pidBankRecon)
	;--------------------------------------------------------------------------
	;
	; History
	; 13-Sep-2005	RPW			SR13306: Start off the CacheTemp global with the fully calculated values.
	; 19-Jun-2003	shobby		Display opening and closing balances even if they are 0. TrackRecord 005403
	;--------------------------------------------------------------------------
	new lstHeader,objBankRecon
	
	if $get(pidBankRecon)'="" {
		if $data(^FINGLBankRecon(YM,pidBankRecon,1)) {
			
			set lstHeader=$listbuild(	$$$StrFINGLBankReconOpeningBalance,
										$$$StrFINGLBankReconLineDebit,
										$$$StrFINGLBankReconLineCredit,
										$$$StrFINGLBankReconClosingBalance,
										$$$StrFINGLBankReconUnallocated)
			
			if $$Start^COMTable(lstHeader,$listbuild("Fin00054")) {  ; Balance
				set objBankRecon=$get(^FINGLBankRecon(YM,pidBankRecon,1))
				do NewLine^COMTable()
				
				set ^CacheTempBankRecon(YUSER,"TD")=$$GetTotalDeposits^FINGLBankReconGet(pidBankRecon) ; SR13306
				set ^CacheTempBankRecon(YUSER,"TW")=$$GetTotalWithdrawals^FINGLBankReconGet(pidBankRecon) ; SR13306
				set ^CacheTempBankRecon(YUSER,"UN")=$$GetUnallocated^FINGLBankReconGet(pidBankRecon) ; SR13306
				set ^CacheTempBankRecon(YUSER,"OB")=$$$FINGLBankReconOpeningBalance(objBankRecon)		//$$GetOpeningBalance^FINGLBankReconGet(pidBankRecon)
				
				do InsertCurrencyCell^COMTable($get(^CacheTempBankRecon(YUSER,"OB")))
				do InsertCurrencyCell^COMTable($get(^CacheTempBankRecon(YUSER,"TD")))
				do InsertCurrencyCell^COMTable($get(^CacheTempBankRecon(YUSER,"TW")))
				do InsertCurrencyCell^COMTable($$$FINGLBankReconClosingBalance(objBankRecon),0)
				do InsertCurrencyCell^COMTable($get(^CacheTempBankRecon(YUSER,"UN")))
				do Stop^COMTable()
			}
		}
	}
	quit
	
	
ShowFileLoadVerification()
	/*------------------------------------------------------------------------------
	; Calculates bank account credits, debits, balance from loaded file. Displays in a table
	;
	; Params: none
	;
	; ByRefs:
	;
	; Returns: none
	;
	; History:
	; 23-Mar-2006	JW		SR14458: Removed hard coded text. Switched DR, CR columns & calculation.
	; 06-Feb-2006	SC		SR14121: Created
	;-----------------------------------------------------------------------------*/
 	new lstHeader,curOpeningBalance,curDebits,curCredits,curClosingBalance,curDifference
 	new strBankAccount,strBankTranNum
 
	set lstHeader = $listbuild(	$$$StrFINGLBankReconOpeningBalance,		//SR14458
								$$$StrFINGLBankReconLineDebit,
								$$$StrFINGLBankReconLineCredit,
								$$$StrFINGLBankReconClosingBalance,
								$listbuild("Fin01007"))  ;Difference
	
	do Start^COMTable(lstHeader,$listbuild("Fin01008"))  ;File Load Verification
	do NewLine^COMTable()
 
	set strBankAccount = $$$FINGLBankReconBankAccount(YFELD)
	set strBankTranNum = ""
	set curCredits = ""
	set curDebits = ""
	
	for {
		set strBankTranNum = $order(^FINGLBankTran(YM,strBankAccount,strBankTranNum))
		quit:strBankTranNum=""
		set curDebits = curDebits + $$$FINGLBankTranDebitAmount($get(^FINGLBankTran(YM,strBankAccount,strBankTranNum,1))) 
		set curCredits = curCredits + $$$FINGLBankTranCreditAmount($get(^FINGLBankTran(YM,strBankAccount,strBankTranNum,1)))
	}
	
	set curOpeningBalance = $$$FINGLBankReconOpeningBalance(YFELD)
	set curClosingBalance = $$$FINGLBankReconClosingBalance(YFELD)
	
	//set curDifference = curOpeningBalance + curDebits - curCredits - curClosingBalance
 	set curDifference = curOpeningBalance - curDebits + curCredits - curClosingBalance		//SR14458
 	
	do InsertCurrencyCell^COMTable(curOpeningBalance)
	do InsertCurrencyCell^COMTable(curCredits)		//SR14458
	do InsertCurrencyCell^COMTable(curDebits)
	do InsertCurrencyCell^COMTable(curClosingBalance)
	do InsertCurrencyCell^COMTable(curDifference)
	
	do EndLine^COMTable()
	do Stop^COMTable() 
 
	quit
]]></Routine>
</Export>