<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="9" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="FININTMatrix" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
FININTMatrix
	
#include COMSYS
	
TranslateFromGlobal(objGlobal,Line,TranType,arrCSTKey,CSTVals,Acc1="",Acc2="",Acc3="",Acc4="",Acc5="")
    ;-------------------------------------------------------------------------------
    ; Determines all the variables needed to call the Translate routine.
    ;
    ; Returns:
    ;
    ; History:
    ; 06=Jun-2005	GRF		Add Status=$$$OK check before calling Translate
    ; 19-May-2005	GRF		Fix for wrong location being used in CMS processing
    ; 20-Apr-2005	shobby/RW	Created SR12101
    ;-------------------------------------------------------------------------------
	new Status,OrderType,Prefix,Date,arrChars,Location,Order,SourceGroup,SourceLocn
	
	set Status=$$$OK
	set Prefix="@objGlobal@("
	if Status=$$$OK set Status=$$GetValue^FINSYSDCM("OrderType", .OrderType, Prefix,1) ;SR12101
	if Status=$$$OK set Status=$$GetValue^FINSYSDCM("Date", 	 .Date,      Prefix,1) ;SR12101
	if Status=$$$OK set Status=$$GetValue^FINSYSDCM("Location",  .Location,  Prefix,1) ;SR12101
	if Status=$$$OK set Status=$$GetValue^FINSYSDCM("SourceLocn",.SourceLocn,Prefix,1)
	if (Status=$$$OK)&&(Location="") set Location="None"                           ; Default Location
	set SourceGroup=""
	
	; FIXME : If there are no lines this subroutine still calls Translate with SourceGroup=""
	;         which causes problems trying to convert ledger profiles with {Category}.
	;         There should probably be a Status error if Line=""                    <GRF>
	
	if Line'="" {
		set Prefix="@objGlobal@(""Lines"",Line,"
		if Status=$$$OK set Status=$$GetValue^FINSYSDCM("SourceGroup",.SourceGroup,Prefix,1) ;SR12101
		merge arrChars=@objGlobal@("Lines",Line,"CharVal")
	}
	
	;set Status=$$Translate(TranType,OrderType,Date,.arrChars,.arrCSTKey,Location,SourceGroup,.CSTVals,.Acc1,.Acc2,.Acc3,.Acc4,.Acc5)
	if Status=$$$OK set Status=$$Translate(TranType,OrderType,Date,.arrChars,.arrCSTKey,SourceLocn,SourceGroup,.CSTVals,.Acc1,.Acc2,.Acc3,.Acc4,.Acc5)
	quit Status
	
	
Translate(TranType,OrderType,Date,arrChars,arrCSTKey,pLocation,pSourceGroup,CSTVals,Acc1="",Acc2="",Acc3="",Acc4="",Acc5="")
    ;-------------------------------------------------------------------------------
    ; Subroutine of the code to translate GL Accounts based on the cost matrix.
    ; 
    ; Inputs :
    ;     ByRef : arrChars
    ;             Acc#			Default Accounts
    ; Returns:
    ;     ByRef : arrCSTKey
    ;             CSTVals
    ;             Acc#			Revised Accounts
    ; History:
    ; 18-Apr-2005	shobby		Created SR12101
    ;-------------------------------------------------------------------------------
	new idx,Status,Profile,arrAccts
	
	set Status=$$$OK
	
	if $$EXIST^%R("CSTMatrix.OBJ",$get(YUCI)) {
		kill arrAccts
		for idx=1:1:5 {
			if @("Acc"_idx)'="" {
				set arrAccts(idx)=@("Acc"_idx)
			}
		}
		
		do GetAccts^CSTMatrix(TranType,OrderType,Date,.arrChars,.arrAccts,.arrCSTKey)
		set CSTVals = $$ArrayToString^COMUtilStr(.arrChars,$$$COMMA,$$$YES,";",$$$NO)
		set CSTVals = CSTVals_Y_pLocation_Y_pSourceGroup
		
		; Handle ledger profiles returned from Account Identification Matrices
		set idx=""
		for {
			set idx=$order(arrAccts(idx))
			quit:idx=""
			
			set Profile=arrAccts(idx)
			if Profile["{" {
				set Status=$$SALConvert^FINGLProfileConv(.Profile,pLocation,pSourceGroup)
				if $$$ISOK(Status) set arrAccts(idx)=Profile
			}
		}
		set idx=""
		for {
			set idx=$order(arrAccts(idx))
			quit:idx=""
			
			set @("Acc"_idx)=arrAccts(idx)
		}
	}
	quit Status
	
]]></Routine>
</Export>