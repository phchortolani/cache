<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="zzSCH" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
zzSCH

	#include COMSYS
	#include INConst
	
	
Bundle()
	new idItem,idStorage,idBundle,idBundleStock,objBundleStock,strStatus,arrErr,intLotNo
	new id
	new idLine,YFORM,objBundleAttribute,blnChange
	
	tstart
	set intLotNo=0
	set id=0
	$$$VAR
	set YFORM="X"
	
	set idItem="" for { set idItem=$order(^alSOH.dBundleStockD(idItem)) quit:idItem=""
		;continue:idItem'="90060"
		set idStorage="" for { set idStorage=$order(^alSOH.dBundleStockD(idItem,idStorage)) quit:idStorage=""
			set id=""
			set idBundle="" for { set idBundle=$order(^alSOH.dBundleStockD(idItem,idStorage,idBundle)) quit:idBundle=""
				set idBundleStock=idItem_"||"_idStorage_"||"_idBundle
				set objBundleStock=##class(alSOH.dBundleStock).%OpenId(idBundleStock)
				;set strStatus=$$ValidateItemAttributes^INItemPolicyUtils(idBundleStock,idItem,1,objBundleStock.Bundle.LotNumber,objBundleStock.Bundle.UseByDate,objBundleStock.Bundle.Brand,objBundleStock.Bundle.Owner,objBundleStock.Bundle.Program,idStorage)
				set strStatus = $$CheckItemAttributes^INItemPolicyUtils(idItem,1,objBundleStock.Bundle.LotNumber,objBundleStock.Bundle.UseByDate,objBundleStock.Bundle.Brand,objBundleStock.Bundle.Owner,objBundleStock.Bundle.Program,.arrError,idStorage)
				if 'strStatus {
					write !,idBundleStock,!
					zw arrError
					set intLotNo=intLotNo+1
					if $data(arrError("IN01061")) {
						set objBundleAttribute=##class(alSOH.dBundleAttribute).%New()
						set objBundleAttribute.AttributeName="Lot Number"
						set objBundleAttribute.AttributeValue="SCH"_intLotNo
						set objBundleAttribute.Bundle=objBundleStock.Bundle
						;set strStatus=objBundleAttribute.%Save()
						;break:$$$ISERR(strStatus)
					}
					if $data(arrError("IN01062")) {
						set objBundleAttribute=##class(alSOH.dBundleAttribute).%New()
						set objBundleAttribute.AttributeName="Use By Date"
						set objBundleAttribute.AttributeValue=$horolog+100
						set objBundleAttribute.Bundle=objBundleStock.Bundle
						;set strStatus=objBundleAttribute.%Save()
						;break:$$$ISERR(strStatus)
					}
					set objBundleStock.Bundle.HashKey=objBundleStock.Bundle.GetBundleHash()
					set strStatus=$$$OK
					set strStatus=objBundleStock.%Save()
					do objBundleStock.%Close()
					break:$$$ISERR(strStatus)
					;if $data(arrError("IN01062")) set objBundleStock.Bundle.UseByDate=$horolog+100
					;write !,idBundleStock_"::"_ $SYSTEM.Encryption.Base64Decode(objBundleStock.Bundle.HashKey)
					;write !,strStatus
					;write !,objBundleStock.%Save()
					;break
					;if id="" set id=$$Header($piece(idStorage,"||",1))
					;break:id=""
					;set strStatus=$$Line(id,$increment(idLine),idItem,$piece(idStorage,"||",2,99),"SCH"_intLotNo,+$horolog+100,objBundleStock.Bundle.%Id(),objBundleStock.Bundle.Brand,objBundleStock.Bundle.Program,objBundleStock.QtyOnHand)
					;set strStatus=$$Line(id,$increment(idLine),idItem,$piece(idStorage,"||",2,99),"SCH"_intLotNo,+$horolog+100,"",objBundleStock.Bundle.Brand,objBundleStock.Bundle.Program,objBundleStock.QtyOnHand)
				}
				quit:'$$$ISOK(strStatus)
			}
			;write !,"TR="_id
			;if $$$ISOK(strStatus) if id'="" set strStatus=$$PostTxn^INADJ(id)
			;break:'$$$ISOK(strStatus)
			;set objBundleStock.QtyOnHand=0
			;if $$$ISOK(strStatus) set strStatus=objBundleStock.%Save()
			;break:'$$$ISOK(strStatus)
			;if $$$ISOK(strStatus) set strStatus=objBundleStock.%Close()
			;break:'$$$ISOK(strStatus)
			quit:'$$$ISOK(strStatus)
		}
		quit:'$$$ISOK(strStatus)
	}
	quit

Line(pid,pidLine,pidItem,pidStorage,pstrLotNo,pdteDate,pidBundle,pidBrand,pidProgram,pfltQty)
	new objLine,objItem,strStatus
	
					;for l=1:1:100 hang 1
	set objLine=""
	set $$$INADJLineItem(objLine)=pidItem
	
	set objItem = $get(^INART(YM,pidItem,1))

	set $$$INADJLineUnit(objLine)=$$$INARTUnitofMeasure($get(^INART(YM,idItem,1)))
	set $$$INADJLineStockLocation(objLine)=pidStorage
	set $$$INADJLineQuantity(objLine)=pfltQty
	set $$$INADJLineBaseQuantity(objLine)=pfltQty

	set $$$INADJLineBundle(objLine)=pidBundle
	set $$$INADJLineReasonCode(objLine)=9
	set $$$INADJLineLotNumber(objLine)=pstrLotNo
	set $$$INADJLineExpirationDate(objLine)=pdteDate
	if pidBrand'="" set $$$INADJLineBrand(objLine)=pidBrand
	if pidProgram'="" set $$$INADJLineProgram1(objLine)=pidProgram
	set strStatus=$$Save^COMUtils("INADJLine",pid_","_pidLine,objLine,1)
	quit strStatus

Header(pidLocn)
	new obj,id

	set id=$$^WWWNEXT("INADJ")
	set obj=""
	set $$$INADJNotes(obj)="Data Fix"
	set $$$INADJStatus(obj)=0
	set $$$INADJReasonCode(obj)=9
	set $$$INADJSiteLocation(obj)=pidLocn
	set strStatus=$$Save^COMUtils("INADJ",id,obj,1)
	if 'strStatus set id=""
	quit id



284()
	tstart
	$$$VAR
	set idLocation="" for { set idLocation=$order(^WWW0121(0,0,idLocation)) quit:idLocation=""
		set obj=$get(^WWW0121(0,0,idLocation,1))
		if +$$$WWW0121OnlyTrackPrograms(obj) {
			set $$$WWW0121OnlyTrackPrograms(^WWW0121(0,0,idLocation,1))=0
		}
	}
	do ReIndex^COMIndex("WWW0121")

	quit
A()
	$$$VAR
	do Remove^COMCleanUp("INFore*","RCOFD","","")
	do ##class(%Library.Routine).Delete("idx.INForeCalc.MAC",0)
	do ##class(%Library.Routine).Delete("idx.INForeCalcLang.MAC",0)
	do ##class(%Library.Routine).Delete("idx.INForeLine.MAC",0)
	do ##class(%Library.Routine).Delete("idx.INForeProc.MAC",0)
	do ##class(%Library.Routine).Delete("idx.INForeRest.MAC",0)
	do ##class(%Library.Routine).Delete("idx.INForeRule.MAC",0)
	do ##class(%Library.Routine).Delete("idx.INForeTest.MAC",0)
	quit
	
Index()
	new idRoutine,idLine,strLine,idClass,intCount

	set intCount=0	
	set idRoutine="" for { set idRoutine=$order(^rMAC(idRoutine)) quit:idRoutine=""
		continue:($extract(idRoutine,1,5)="User.")
		set idLine="" for { set idLine=$order(^rMAC(idRoutine,0,idLine)) quit:idLine=""
			;write !,idRoutine_","_idLine
			quit:(idLine'=+idLine)
			set strLine=^rMAC(idRoutine,0,idLine)
			set strLine=$zstrip($piece(strLine,";",1),"<>W")
			continue:(strLine="")
			set idClass="" for { set idClass=$order(^WWW001(0,idClass)) quit:idClass=""
				continue:($extract(idClass,1,3)="COM")
				continue:($extract(idClass,1,3)="WWW")
				if strLine[(idClass_"s") {
					set intCount=intCount+1
					write !,intCount_" : "_idRoutine_" "_strLine
				}
			}
		}
	}
	quit
	
Class()
	new objResultSet,strName
	
	set objResultSet = ##class(%ResultSet).%New("%Dictionary.ClassDefinitionQuery:Summary")
	if objResultSet'=$$$NULLOREF {
		if $$$ISOK(objResultSet.Execute()) {
			for {
				quit:'objResultSet.Next()
				set strName = objResultSet.Data("Name")
				continue:($extract(strName,1,5)'="User.")
				continue:($data(^WWW001(0,$piece(strName,".",2))))
				continue:(strName="User.www")
				write !,strName
				;write " "_##class(%Library.ClassDefinition).%DeleteId(strName,1)
			}
		}
	}

	quit

Test()
	new idRoutine,idLine,strLine,intCount,strPiece
	
	set intCount=0
	set idRoutine="" for { set idRoutine=$order(^rMAC(idRoutine)) quit:idRoutine=""
		quit:$extract(idRoutine,1,2)="al"
		set idLine="" for { set idLine=$order(^rMAC(idRoutine,0,idLine)) quit:idLine=""
			quit:idLine="INC"
			set strLine=$get(^rMAC(idRoutine,0,idLine))
			set strPiece=$zconvert(strLine,"U")
			if strPiece["QUIT:" {
				set strPiece=$piece(strPiece,":",2)
				if strPiece[")" set strPiece=$piece(strPiece,")",2)
				if strPiece[")" set strPiece=$piece(strPiece,")",2)
				if strPiece[")" set strPiece=$piece(strPiece,")",2)
				if strPiece[")" set strPiece=$piece(strPiece,")",2)
				if strPiece[")" set strPiece=$piece(strPiece,")",2)
				set strPiece=$piece(strPiece," ",2)
				if strPiece'= "" {
					set intCount=intCount+1
					write !,idRoutine_","_idLine_" = "_strLine
				}
			}
		}
	}
	write !,!,"Count="_intCount
	quit
]]></Routine>
</Export>