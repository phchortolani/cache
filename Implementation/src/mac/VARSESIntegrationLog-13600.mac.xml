<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESIntegrationLog" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include COMSYS
#include VARConst
 
VARSESIntegrationLog
 	quit
 
GetLog(&parrLog, pidTransactionName, pblnIsSuccessfull=$$$YES, pstrDescrition="")
 
	new objLog, dteNow
	set $$$VARSESIntegrationLogTransaction1(objLog) = pidTransactionName
	
	set dteNow = $zutil(188)
	;set $$$VARSESIntegrationLogTimestamp1(objLog)	= $zdatetime($piece(dteNow,".",1),2)_" "_$piece(dteNow,".",2)
	set $$$VARSESIntegrationLogTimestamp1(objLog)	= $zdatetime($horolog)
	set $$$VARSESIntegrationLogIssuccessful(objLog) = pblnIsSuccessfull
	set $$$VARSESIntegrationLogDescription(objLog)  = pstrDescrition
 
	set idLog = $$$NextKey("VARSESIntegrationLog")
 
	set parrLog(idLog) = objLog
 
	quit idLog
	
GetLogDetail(&parrLog, pstrFieldName="", pstrFieldData="")
 
	new idLogDetail, objLogDetail, idLog
 
	set $$$VARSESIntegrationLogDetailFieldName(objLogDetail) = pstrFieldName
	set $$$VARSESIntegrationLogDetailFieldData(objLogDetail) = pstrFieldData
	
	set idLog = $order(parrLog(""))
	set idLogDetail = $order(parrLog(idLog,""),-1) + 1
	
	set parrLog(idLog, idLogDetail) = objLogDetail
 
	quit idLogDetail
	
Save(&parrLog)
 
	new idLog, objLog, idLogDetail, objLogDetail
 
	do GetLogDetail^VARSESIntegrationLog(.arrLog, "User: ", $get(YBED))
 
	set idLog  = $order(parrLog(""))
	set objLog = $get(parrLog(idLog))
	job SaveLog(idLog, objLog)
 
	$$$Order2(parrLog,idLog,idLogDetail)
 
		set objLogDetail = $get(parrLog(idLog, idLogDetail))
		job SaveLogDetail(idLog, idLogDetail, objLogDetail)		
 
	$$$End
 
	quit
	
SaveLog(pidLog, pobjLog)
 
	$$$VAR
	new strStatus
 
	set strStatus = $$$Save("VARSESIntegrationLog",pidLog,pobjLog,$$$YES)
 
	quit
	
SaveLogDetail(pidLog, pidLogDetail, pobjLogDetail)
 
	$$$VAR
	new strStatus
	
	set strStatus = $$$Save("VARSESIntegrationLogDetail",pidLog_$$$COMMA_pidLogDetail,pobjLogDetail,$$$YES)
 
	quit strStatus
 
FindInLog(pid1="",pid2="",pid3="",blnFullDetails=$$$YES)
	
	$$$VAR
 
	new idLog, idLogDetail, objLog, objLogDetail, blnLocationFound, blnProblemFound, strItems, intFound,
		blnIdFoundId1, blnIdFoundId2, blnIdFoundId3
	
	set intFound = 0
	$$$Order2(^VARSESIntegrationLog,YM,idLog)
	
		set objLog 		  = $get(^VARSESIntegrationLog(YM, idLog, 1))
		set blnIdFoundId1 = (pid1 = "")
		set blnIdFoundId2 = (pid2 = "")
		set blnIdFoundId3 = (pid3 = "")
 
		if 'blnIdFoundId1 && $find(objLog, pid1) {
			
			set blnIdFoundId1 = $$$YES
		}
 		if 'blnIdFoundId2 && $find(objLog, pid2) {
			
			set blnIdFoundId2 = $$$YES
		}
 		if 'blnIdFoundId3 && $find(objLog, pid3) {
			
			set blnIdFoundId3 = $$$YES
		}
 
		$$$Order3(^VARSESIntegrationLogDetail,YM,idLog,idLogDetail)
			
			set objLogDetail = $get(^VARSESIntegrationLogDetail(YM, idLog, idLogDetail, 1))
			set strName = $piece(objLogDetail, Y, 1)
			set strData = $extract(objLogDetail, $length(strName) + 2, $length(objLogDetail))
			
			if 'blnIdFoundId1 && $find(strData, pid1) {
				
				set blnIdFoundId1 = $$$YES
				set strItems = strName_" -> "_strData
			}
			if 'blnIdFoundId2 && $find(strData, pid2) {
				
				set blnIdFoundId2 = $$$YES
				set strItems = strName_" -> "_strData
			}
			if 'blnIdFoundId3 && $find(strData, pid3) {
				
				set blnIdFoundId3 = $$$YES
				set strItems = strName_" -> "_strData
			}
		$$$End	
		
		if blnIdFoundId1 && blnIdFoundId2 && blnIdFoundId3 {
			if blnFullDetails {
				
				do PrintLog(idLog)
			} else {
			
				write "Log Id: ["_idLog_"] -> Detail: ["_strItems_"]",!
			}
 
		set intFound = intFound + 1
		}
	$$$End
 
 	write "Itens identificados: "_intFound,!
 
	quit 
	
PrintLog(pidLog)
 
	new idLogDetail, objLog, objLogDetail, strName, strData
 
	set objLog 		 = $get(^VARSESIntegrationLog(YM, pidLog, 1))
	write !,!,"Log: [",!
	write "    Event Id: ["_pidLog_"]",!
	write "    Transaction Name: ["_$$$VARSESIntegrationLogTransaction1(objLog)_"]",!
	write "    Timestamp: ["_$$$VARSESIntegrationLogTimestamp1(objLog)_"]",!
	write "    Is Successful: ["_$$$VARSESIntegrationLogIssuccessful(objLog)_"]",!
	write "    Description: ["_$$$VARSESIntegrationLogDescription(objLog)_"]",!
 	write "    Log Details: [",!
 
	$$$Order3(^VARSESIntegrationLogDetail,YM,pidLog,idLogDetail)
		
		set objLogDetail = $get(^VARSESIntegrationLogDetail(YM, pidLog, idLogDetail, 1))
		set strName = $piece(objLogDetail, Y, 1)
		set strData = $extract(objLogDetail, $length(strName) + 2, $length(objLogDetail))
		
		write "        "_strName_" ["_strData_"]",!
	$$$End	
	write "    ]",!
	
	write "]",!
 
	quit
 
PrintLogDetailError(pidLocation, pidItem)
 
	$$$VAR
 
	new idLog, idLogDetail, objLog, objLogDetail, blnLocationFound, blnProblemFound, strItems
	
	$$$Order2(^VARSESIntegrationLog,YM,idLog)
	
		set objLog 		 = $get(^VARSESIntegrationLog(YM, idLog, 1))
 
 
 
		set blnLocationFound = $$$NO
		set blnProblemFound  = $$$NO
 
		;if idLog = 8658 for i = 1:1:100 hang 1
		$$$Order3(^VARSESIntegrationLogDetail,YM,idLog,idLogDetail)
			
			set objLogDetail = $get(^VARSESIntegrationLogDetail(YM, idLog, idLogDetail, 1))
		
			
			set strData = $piece(objLogDetail, Y, 2)
			
			;if $find(strData,pidLocation) {
			if $find(objLogDetail,pidLocation) {
				
				set blnLocationFound = $$$YES
			}
			if $find(objLogDetail,pidItem) /*&& $find(objLogDetail,",")*/ {
				
				set blnProblemFound = $$$YES
				set strItems = objLogDetail
			}
	
		$$$End	
		
		if blnLocationFound && blnProblemFound {
			
			write !,"Log Id: ["_idLog_"] -> Itens: ["_strItems_"]"
		}
	$$$End
 
	quit
 
ListaLog(pNumLog)
	// Andre, 28/03/2008:
	// Lista o log e seus detalhes.
	
	new objLog, idDetalhe
	
	quit:( $get(pNumLog) = "" )
	
	set objLog = $get(^VARSESIntegrationLog(YM,pNumLog,1))
	
	quit:( $get(objLog) = "" )
	
	write !,$justify("Número do Log: ",16),pNumLog
	write !,$justify("Transação: ",16),$piece(objLog,Y,1)
	write !,$justify("Data/Hora: ",16),$piece(objLog,Y,2)
	write !,$justify("Sucesso?: ",16),$piece(objLog,Y,3)
	write !,$justify("Descrição: ",16),$piece(objLog,Y,4)
	write !," Detalhes: "
	
	set idDetalhe = ""
	for {
		set idDetalhe = $order(^VARSESIntegrationLogDetail(YM,pNumLog,idDetalhe))
		quit:(idDetalhe = "")
		set objDetalhe = $get(^VARSESIntegrationLogDetail(YM,pNumLog,idDetalhe,1))
		continue:($get(objDetalhe) = "")
		write !,$justify(idDetalhe,3),") ",$piece(objDetalhe,Y,1)," ",$piece(objDetalhe,Y,2)
	}
	
	quit
	
ListaUltimoLog(pTipo)
	new ultimoLog, ultimaDataHora
	quit:($get(pTipo) = "")
	set ultimaDataHora = $order(^VARSESIntegrationLogs(YM,1,pTipo,""),-1)
	quit:($get(ultimaDataHora) = "")
	set ultimoLog = $order(^VARSESIntegrationLogs(YM,1,pTipo,ultimaDataHora,""))
	quit:($get(ultimoLog) = "")
	do ListaLog(ultimoLog)
	quit
	
ListaLogsNaData(pTipo,pDataDDMMAAAA)
	new idLog, dataSemBarras, data
	quit:($get(pTipo) = "")
	
	set dataSemBarras = $piece(pDataDDMMAAAA,"/",2)_" "_$piece(pDataDDMMAAAA,"/",1)_" "_$piece(pDataDDMMAAAA,"/",3)
	
	set data = ""
	for {
		set data = $order(^VARSESIntegrationLogs(YM,1,pTipo,data))
		quit:(data = "")
		if ( $extract(data,1,10) = dataSemBarras ) {
			set idLog = $order(^VARSESIntegrationLogs(YM,1,pTipo,data,""))
			do ListaLog(idLog)
		}
	}
	quit
 
]]></Routine>
</Export>