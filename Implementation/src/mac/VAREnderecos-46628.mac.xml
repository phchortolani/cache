<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VAREnderecos" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VAREnderecos

#include COMSYS
#include VARLog
#include VARConst

	/*
OnBeforeButtonLine()

	new intMaxModulo,intMaxRua,intMaxPredio,intMaxAndar,intMaxApto
	
	set idLocal 	 = YLOCATION
		 
	//if (SQLCODE '= 0) $$$Alert("Falha ao buscar dados da estrutura de endereços5") quit
	
	set ^VAREnderecos(0,idLocal,1) = $$GetMaxModulo(idLocal)_Y_$$GetMaxRua(idLocal)_Y_
									 $$GetMaxPredio(idLocal)_Y_$$GetMaxAndar(idLocal)_Y_
									 $$GetMaxApto(idLocal)	
	quit
	*/
	
ProcessarAlteracoesEnderecos(pYKEY)
	;20-Jun-2011	SLV		Refactored
	;10-Set-2010	Karine	Carga inicial dos endereços de 1 armazém.
	; do SetAdress^VARKarineLoadStockLocation()   
	new idLocal,idModulo,idRua,idPredio,idAndar,idAp,objEnd,strStatus

	set idLocal 	= $$$KEY1(pYKEY)
	set idModulo	= $$$KEY2(pYKEY)
	
	set objEnd		= $get(^VAREnderecos(0,idLocal,idModulo,1))
	
	set idRuaI 		= $$$VAREnderecosRuaInicial(objEnd)
	set idRuaF 		= $$$VAREnderecosRuaFinal(objEnd)
	set idPredio	= $$$VAREnderecosPredio(objEnd)
	set idAndar		= $$$VAREnderecosAndar(objEnd)
	set idAp		= $$$VAREnderecosApartamento(objEnd)
	set idAltura	= $$$VAREnderecosAltura(objEnd)
	set strStatus	= $$$OK
	
	if (idRuaI > idRuaF) {
		$$$Alert("Dados inválidos")
		do GoToForm^COMUtils("VAREnderecos",YKEY)
		quit
	}

	//do LimpaTudo()
	
	// Adiciona geração automática de módulos?
	//set strStatus   = $$LoadModulo(idLocal,idModulo)
	//if $$$ISERR(strStatus) $$$VARLOGERROR("Erro ao gravar dados dos Modulos")

	set:$$$ISOK(strStatus) strStatus = $$LoadRuas(idLocal,idModulo,idRuaI,idRuaF)
	if $$$ISERR(strStatus) $$$VARLOGERROR("Erro ao gravar dados das Ruas")
	
	set:$$$ISOK(strStatus) strStatus = $$LoadPredio(idLocal,idModulo,idRuaI,idRuaF,idPredio)
	if $$$ISERR(strStatus) $$$VARLOGERROR("Erro ao gravar dados dos Prédios")
	
	set:$$$ISOK(strStatus) strStatus = $$LoadAndar(idLocal,idModulo,idRuaI,idRuaF,idPredio,idAndar)
	if $$$ISERR(strStatus) $$$VARLOGERROR("Erro ao gravar dados dos Andares")
	
	set:$$$ISOK(strStatus) strStatus = $$LoadApartamento(idLocal,idModulo,idRuaI,idRuaF,idPredio,idAndar,idAp,idAltura)
	if $$$ISERR(strStatus) $$$VARLOGERROR("Erro ao gravar dados dos Apartamentos")
	
	
	//set status = $$GerarEnderecosArmazenagemTxn^VARTCIModulo(chave)
	if $$$ISERR(strStatus) $$$Alert("Erro ao gravar dados dos endereços de armazenagem.") quit
	
	$$$Alert("Lembrete: Não esqueça de clicar em ""Processar Alterações"" para efetivar a criação.")
	
	do GoToForm^COMUtils("VARTCIModulo",YKEY)
	
	quit
	
		
PodeProcessarAlteracoesEnderecos(pYKEY)
	quit:(pYKEY="")
	
	new strStatus,idLocal,idModulo,idModulo,objModulo
	
	set strStatus = $$$OK
	
	;Separa a chave em seus respectivos valores
	set idLocal  = $$$KEY1(pYKEY)
	set idModulo = $$$KEY2(pYKEY)
	
	if (idLocal = "") || (idModulo = "") {
		set strStatus = "Dados incompletos"
	}
	
	;set strStatus = "Não é possível processar as alterações"
	
	$$$YQHandler(strStatus)
	 
	quit	
	
GetMaxModulo(pidLocal)

	new SQLCODE, intMaxModulo
	
	set intMaxModulo = ""

	&sql(SELECT TOP 1 Modulo
		 INTO :intMaxModulo
 		 FROM VARTCIModulo
 		 WHERE CodLocal = :pidLocal
	     ORDER BY Modulo DESC)
	     
	     if (SQLCODE '= 0) {
	     	set:(intMaxModulo = "") intMaxModulo = 0
	     }
	     
	quit intMaxModulo
	
	
GetMaxRua(pidLocal,pidModulo)
	
	new SQLCODE, intMaxRua
	
	set intMaxRua = ""
	
	&sql(SELECT TOP 1 Rua
		 INTO :intMaxRua
		 FROM VARTCIRua
		 WHERE CodLocal = :pidLocal
		 AND Modulo = :pidModulo 
		 ORDER BY Rua DESC)
		 
	     if (SQLCODE '= 0) { 
	     	set:(intMaxRua = "") intMaxRua = 0
	     }
	     
	 quit intMaxRua
	 
	
GetMinRua(pidLocal,pidModulo)
	
	new SQLCODE, intMinRua
	
	set intMaxRua = ""
	
	&sql(SELECT TOP 1 Rua
		 INTO :intMinRua
		 FROM VARTCIRua
		 WHERE CodLocal = :pidLocal
		 AND Modulo = :pidModulo 
		 ORDER BY Rua ASC)
		 
	     if (SQLCODE '= 0) { 
	     	set:(intMinRua = "") intMinRua = 0
	     }
	     
	 quit intMinRua
	 
	 
GetMaxPredio(pidLocal,pidModulo)

	new SQLCODE, intMaxPredio
	
	set intMaxPredio = ""
	
	&sql(SELECT TOP 1 Predio
		 INTO :intMaxPredio
		 FROM VARTCIPredio 
		 WHERE CodLocal = :pidLocal
		 AND Modulo = :pidModulo 
		 ORDER BY Predio DESC)
		 
		 if (SQLCODE '= 0) { 
	     	set:(intMaxPredio = "") intMaxPredio = 0
	     }
	 
	 quit intMaxPredio
	 
	 
GetMaxAndar(pidLocal,pidModulo)
	 
	new SQLCODE, intMaxAndar
	
	set intMaxAndar = ""
	
	&sql(SELECT TOP 1 Andar
		 INTO :intMaxAndar
		 FROM VARTCIAndar
		 WHERE CodLocal = :pidLocal
		 AND Modulo = :pidModulo 
		 ORDER BY Andar DESC)
		 
		 if (SQLCODE '= 0) {
	     	set:(intMaxAndar = "") intMaxAndar = 0
	     }
	
	quit intMaxAndar
		
	
GetMaxApto(pidLocal,pidModulo)

	 new SQLCODE, intMaxApto
	 
	 set intMaxApto = ""
	 
	 &sql(SELECT TOP 1 Apartamento
	 	  INTO :intMaxApto
	 	  FROM VARTCIApartamento
	 	  WHERE CodLocal = :pidLocal
	 	  AND Modulo = :pidModulo 
		  ORDER BY Apartamento DESC)
	 
	 if (SQLCODE '= 0) { 
     	set:(intMaxApto = "") intMaxApto = 0
     }
     
     quit intMaxApto
     
GetQtdEnderecosComEstoque(pstrEnd)
	quit:(pstrEnd="")

	new intEnderecos,EnderecosEstoque,meuSQL,idRua,idModulo,idRua,idPredio,idAndar,idApartamento,
		strEndereco
	
	set idLocal  	  = $$$KEY1(pstrEnd)
	set idModulo 	  = $$$KEY2(pstrEnd)
	set idRua	 	  = $$$KEY3(pstrEnd)
	set idPredio 	  = $$$KEY4(pstrEnd)
	set idAndar	 	  = $$$KEY5(pstrEnd)
	set idApartamento = $$$KEY6(pstrEnd)
	
	set strEndereco = idModulo
	set:'$$$NoKey(idRua) strEndereco = strEndereco_"-"_idRua
	set:'$$$NoKey(idPredio) strEndereco = strEndereco_"-"_idPredio
	set:'$$$NoKey(idAndar) strEndereco = strEndereco_"-"_idAndar
	set:'$$$NoKey(idApartamento) strEndereco = strEndereco_"-"_idApartamento
	
	set strSqlEnd = strEndereco_"-" //O "-" extra garante
									//exclusividade na busca dos endereços até o Andar. 
	
	if '$$$NoKey(idApartamento) set strSqlEnd = strEndereco //Garante a integridade da busca caso o apartamento
															//possua estoque	
	set meuSQL 			 = ""
	set intEnderecos	 = 0
	
	set EnderecosEstoque = ##class(%ResultSet).%New()
	
	set meuSQL = "SELECT COUNT(*) as Qtd"
	set meuSQL = meuSQL_" FROM "
	set meuSQL = meuSQL_" (SELECT alSOH.dBundleStock.Storage->Code "
	set meuSQL = meuSQL_" FROM alSOH.dBundleStock "
	set meuSQL = meuSQL_" WHERE "
	set meuSQL = meuSQL_" alSOH.dBundleStock.Storage->Location = "_idLocal
	set meuSQL = meuSQL_" AND alSOH.dBundleStock.Storage->Code like '"_strSqlEnd_"%'" 
  	set meuSQL = meuSQL_" GROUP BY alSOH.dBundleStock.Storage->Code) "					 
  	
  	do EnderecosEstoque.Prepare(meuSQL)
  	do EnderecosEstoque.Execute()
  	
  	While (EnderecosEstoque.Next()) {
  		set intEnderecos = +EnderecosEstoque.GetData(1)
  	}

  	do EnderecosEstoque.Close()
	
	quit intEnderecos
	
     
OnBlurExclusaoEnderecos()
	quit:(YKEY="")
	
	new blnExcluir,idLocal,idModulo,idRua,strEndereco,intAddress
	
	set blnExcluir  = $piece(YFELD,Y,8)
	
	if (blnExcluir) {
		set intAddress = $$GetQtdEnderecosComEstoque(YKEY)
		if (intAddress > 0) {
			$$$StartScript()
			&js<
				alert('Existem #(intAddress)# endereços vínculados a este com produtos em estoque.');
			>
			$$$EndScript()
			do GoToForm^COMUtils(YFORM,YKEY)
		}
		else {
			$$$Alert("Todos os endereços referentes a este também serão excluídos!")
			set $piece(YFELD,Y,3) = 1
			set $piece(YFELD,Y,2) = 1
		}	
	}
	
	quit
	
 
OnBlurModulo()

	new idLocal,idModulo,blnMod

	set idLocal  = $$$KEY1(YKEY)
	set idModulo = $$$KEY2(YKEY)
		
	if ((idModulo '= "")) {		
		set blnMod	 = $data(^VARTCIModulo(0,idLocal,idModulo,1))
		set blnEnd	 = $data(^VAREnderecos(0,idLocal,idModulo,1))
		
		quit:(blnEnd) //Não executar o onblur caso o registro da árvore já exista		
		
		if ((blnMod)) {		
			set %TXT(1) = "#Y"_YFORM_"D2~"_$$GetMinRua(idLocal,idModulo)_
					  	  "#Y"_YFORM_"D3~"_$$GetMaxPredio(idLocal,idModulo)_
					  	  "#Y"_YFORM_"D4~"_$$GetMaxAndar(idLocal,idModulo)_
					  	  "#Y"_YFORM_"D5~"_$$GetMaxApto(idLocal,idModulo)_
					  	  "#Y"_YFORM_"D10~"_$$GetMaxRua(idLocal,idModulo)
		}
	} 
	
	quit
	
	
LimpaTudo()
	kill ^VARTCIModulo
	kill ^VARTCIModulos
	kill ^VARTCIRua
	kill ^VARTCIRuas
	kill ^VARTCIPredio
	kill ^VARTCIPredios
	kill ^VARTCIAndar
	kill ^VARTCIAndars
	kill ^VARTCIApartamento
	kill ^VARTCIApartamentos
	

LoadModulo(pidLoc,pidMod)

	new strStatus
	
	set strStatus = 1
	
	for m=1:1:pidMod {
		if strStatus=1 set strStatus = $$UpdateTree^VARTCIModulo(pidLoc,m,"","","","")
	}
	quit strStatus
 	
 	
LoadRuas(pidLoc,pidMod,pidRI,pidRF)

	new strStatus
	
	set strStatus = 1
	
	//for m=1:1:pidMod {
		for r=pidRI:1:pidRF {
			if strStatus=1 set strStatus = $$UpdateTree^VARTCIModulo(pidLoc,pidMod,r,"","","")
		}
	//}	
	quit strStatus
	 	
LoadPredio(pidLoc,pidMod,pidRI,pidRF,pidPr)

	new strStatus
		
	set strStatus = 1
	
	//for m=1:1:pidMod {	
		for r=pidRI:1:pidRF {	
			for p=1:1:pidPr {
				
				if strStatus=1 set strStatus = $$UpdateTree^VARTCIModulo(pidLoc,pidMod,r,p,"","")
			}
		}
	//}	
	quit strStatus	
		
	
LoadAndar(pidLoc,pidMod,pidRI,pidRF,pidPr,pidAnd)

	new strStatus
		
	set strStatus = 1
	
	//for m=1:1:pidMod {
		for r=pidRI:1:pidRF {
			for p=1:1:pidPr {
				for a=1:1:pidAnd {
					if strStatus=1 set strStatus = $$UpdateTree^VARTCIModulo(pidLoc,pidMod,r,p,a,"")
				}
			}
		}
	//}	
	
	quit strStatus	
	
	
LoadApartamento(pidLoc,pidMod,pidRI,pidRF,pidPr,pidAnd,pidAp,pidAltura)

	new strStatus
		
	set strStatus = 1
		
	//for m=1:1:pidMod {
		for r=pidRI:1:pidRF {
			for p=1:1:pidPr {
				for a=1:1:pidAnd {
					for apt=1:1:pidAp {
					    if strStatus=1 set strStatus = $$UpdateTree^VARTCIModulo(pidLoc,pidMod,r,p,a,apt,$$$NO,pidAltura)
					}
				}
			}
		}
	//}
	quit strStatus
]]></Routine>
</Export>