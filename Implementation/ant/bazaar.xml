<?xml version="1.0" encoding="iso-8859-1" ?>

<project name="bazaar" basedir="..">

<!-- This target is just a place holder from resolve-conflicts. You should ALWAYS call this
     method so that all dependencies can be met. resolve-conflicts then calls itself recursively
     until all conflicts are resolved. -->
<target name="verify-conflicts" depends="init,configure-cache,resolve-conflicts"/>

<!-- Find any conflicts and fire an appropriate action (first we are going to focus
     on text conflicts). *DON'T* call this target! Call verify-conflicts.

     This target iterates through all Text conflicts first. When all are sovled, it
     then searches for non text conflicts. If they are found, the build system is aborted.
     This target also calls it self again as many times as necessary to solve all pending
     conflicts. -->
<target name="resolve-conflicts" >
    <!-- Unseting properties should not be used, but it is really handy for this target -->
    <var name="bzr-conflicts-raw" unset="true"/>
    <var name="bzr-error" unset="true"/>
    <var name="bzr-text-conflicts" unset="true"/>
    <var name="bzr-non-text-conflicts" unset="true"/>

    <var name="non-text-conflict-message" value=""/>

    <!-- Search for conflicts -->
    <exec executable="bzr" failonerror="no" outputproperty="bzr-conflicts-raw" errorproperty="bzr-error">
        <arg value="conflicts"/>
    </exec>

    <!-- Verify if it ran smoothly -->
    <if>
        <not>
            <equals arg1="${bzr-error}" arg2="" />
        </not>
        <then>
            <fail>Bazaar has reported an error!
${bzr-error}
            </fail>
        </then>
    </if>

    <!-- this is necessary in order to remove the line breaks -->
    <for list="${bzr-conflicts-raw}" delimiter="${line.separator}" param="line" trim="yes">
        <sequential>
            <property name="conflicts-found" value="true" />

            <var name="conflict-file" unset="true"/>

            <!-- Get only the first conflict, without the Implementation folder name -->
            <propertyregex property="conflict-file" input="@{line}"
                regexp="^Text conflict in Implementation/(\S+)\s*" replace="\1" global="no" casesensitive="false"/>
<!--
<echo>
Debug:
analyzing line=@{line}
conflict-file=${conflict-file}
</echo>
-->
            <if>
                <and>
                    <not>
                        <equals arg1="${conflict-file}" arg2="" />
                    </not>

                    <isset property="conflict-file" />
                </and>

                <then>
<echo>
Conflict(s) detected. You will be prompted for action:
@{line}
</echo>

<!-- Solve th text conflict by invoking the merge tool -->
<echo>File: '${conflict-file}'</echo>

                    <!-- Solve each conflict manually -->
                    <exec executable="winmergeU.exe" failonerror="no" >
                        <arg value="${basedir}${file.separator}${conflict-file}"/>
                        <arg value="/e"/>
                    </exec>

                    <!-- Ask the user what to do next -->
                    <var name="rx" unset="true"/>
                    <echo>
Please chose an option:
R - mark file as Resolved: end conflict resolution
    for this file and go on

L - Leave it unresolved: just skip to the next,
    without marking the file as resolved

Q - Quit: quit the build system leaving everything
    as it is now
                    </echo>

                    <input message="[R]esolved, [L]eave it unresolved, [Q]uit " validargs="r,l,q"
                        addproperty="rx"/>
                    <if>
                        <equals arg1="q" arg2="${rx}" />
                        <then>
                            <fail>
Build system aborted as requested by the user.
                            </fail>
                        </then>

                        <elseif>
                            <equals arg1="l" arg2="${rx}" />
                            <then>
                                <echo>
Leaving the file '${conflict-file}' unresolved.
                                </echo>
                            </then>
                        </elseif>

                        <else>
                            <var name="bzr-error-msg" unset="true"/>
                            <var name="bzr-msg" unset="true"/>
                            <exec executable="bzr" failonerror="no" outputproperty="bzr-msg"
                                errorproperty="bzr-error-msg">
                                <arg value="resolved"/>
                                <arg value="${conflict-file}"/>
                            </exec>
                            <echo>${bzr-msg}</echo>

                            <if>
                                <not>
                                    <equals arg1="${bzr-error-msg}" arg2="" />
                                </not>
                                <then>
                                    <fail>
Bazaar has reported an error!
${bzr-error-msg}
                                    </fail>
                                </then>
                            </if>
                        </else>
                    </if>
                </then> <!-- end Text conflicts -->

                <else>
<echo>
Searching for non-text conflicts...
</echo>

                    <var name="bzr-non-text-conflicts" unset="true"/>
                    
                    <!-- Test for other conflicts (since there is no Text Conflicts)-->
                    <propertyregex property="bzr-non-text-conflicts" input="@{line}"
                        regexp="[cC]onflict" select="\0" global="no" casesensitive="false"/>

                    <if>
                        <isset property="bzr-non-text-conflicts" />
                        <then>
                            <var name="non-text-conflict-message"
                                value="${non-text-conflict-message}${line.separator}@{line}"/>
                        </then>
                    </if> <!-- End non-text conflicts test -->
                </else>
            </if>
        </sequential>
    </for>

    <if>
        <and>
            <not>
                <equals arg1="${non-text-conflict-message}" arg2="" />
            </not>
        </and>
        <then>
<echo>
Bazaar has found at least one conflict that is not a Text conflict.

Conflict(s):
${non-text-conflict-message}

1) Please issue "bzr conflicts" to list all the conflicts.
   Use "bzr help conflicts" to understand their meanings.

2) Use file system tools to solve them (move files, create
   directories, etc)

3) Issue "bzr resolved filename" for each file/directory
   that bazaar lists as in conflict, after you solve each.

4) For further documentation see the Bazaar documentation.
            </echo>

            <fail>
The system will abort now, to let you solve the remaining
non-textual conflicts.
            </fail>
        </then>
    </if> <!-- End non-text conflicts test -->
<!--
<echo>
Debug:
conflicts-found=[${conflicts-found}]
</echo>
-->
    <!-- Verify if we need to call everythong again: if there was at least one conflict -->
    <if>
        <isset property="conflicts-found" />
        <then>
            <!-- Erase the property -->
            <var name="conflicts-found" unset="true"/>

            <!-- Now we call the same target AGAIN to keep solving the conflicts until there is no more of them -->
            <runtarget target="resolve-conflicts" />
        </then>
        <else>
            <echo>
No conflicts remaining.
            </echo>
        </else>
    </if>
</target>

<!-- Runs a backup in all files pending commit -->
<target name="backup-pendencies" depends="init">
    <!-- Unseting properties should not be used, but it is really handy for this target -->
    <var name="bzr-status-raw" unset="true"/>
    <var name="bzr-error" unset="true"/>

    <!-- Search for conflicts -->
    <exec executable="bzr" failonerror="no" outputproperty="bzr-status-raw" errorproperty="bzr-error">
        <arg value="status"/>
    </exec>

    <!-- Verify if it ran smoothly -->
    <if>
        <not>
            <equals arg1="${bzr-error}" arg2="" />
        </not>
        <then>
            <fail>Bazaar has reported an error!
${bzr-error}
            </fail>
        </then>
    </if>

    <tstamp>
        <format property="today" pattern="yyyy-MM-dd"/>
     </tstamp>

    <!-- this is necessary in order to remove the line breaks -->
    <for list="${bzr-status-raw}" delimiter="${line.separator}" param="line" trim="no">
        <sequential>
            <var name="status-file" unset="true"/>
            <var name="status-extension-file" unset="true"/>

            <!-- Get only the file relative path, without the Implementation folder name -->
            <propertyregex property="status-file" input="@{line}"
                regexp="^  \S+ => (\S+)\s*" select="\1" global="no" casesensitive="false"/>

            <if>
                <or>
                    <equals arg1="${status-file}" arg2="" />

                    <not>
                        <isset property="status-file" />
                    </not>
                </or>

                <then>
                    <propertyregex property="status-file" input="@{line}"
                        regexp="^  (\S+)\s*" select="\1" global="no" casesensitive="false"/>
                </then>
            </if>


            <propertyregex property="status-extension-file" input="${status-file}"
                regexp="^\S*\.(\S+)\s*" select="\1" global="no" casesensitive="false"/>

<!--
<echo>
Debug:
analyzing line=@{line}
status-file=${status-file}
</echo>
-->

            <if>
                <and>
                    <not>
                        <equals arg1="${status-file}" arg2="" />
                    </not>
                    <not>
                        <equals arg1="${status-extension-file}" arg2="" />
                    </not>

                    <isset property="status-file" />
                    <isset property="status-extension-file" />
                </and>

                <then>
<echo>
Backing up ${basedir}/../${status-file} to ${backupDir}/${today}/${status-file}
</echo>

                    <copy file="${basedir}/../${status-file}" tofile="${backupDir}/${today}/${status-file}" overwrite="yes"/>
                </then>
            </if>

            <if>
                <and>
                    <and>
						<not>
							<equals arg1="${status-file}" arg2="" />
						</not>

                        <isset property="status-file" />
                    </and>
                    <or>
					    <equals arg1="${status-extension-file}" arg2="" />

						<not>
                            <isset property="status-extension-file" />
						</not>
                    </or>
                </and>

                <then>
<echo>
Backing up ${basedir}/../${status-file}/* to ${backupDir}/${today}/${status-file}/*
</echo>

                    <copy todir="${backupDir}/${today}/${status-file}" overwrite="yes">
					    <fileset dir="${basedir}/../${status-file}" defaultexcludes="false"/>
                    </copy>
                </then>
            </if>
        </sequential>
    </for>
</target>

<!-- Clears all current changes (pending commit or unknown files) -->
<target name="clear-pendencies" depends="init">
	<!-- Ask the user what to do next -->
	<var name="rx" unset="true"/>
	<echo>
This action will revert ALL current Bazaar changes (unknown, added, changed and removed files).
	</echo>

	<input message="Are you sure you want to continue? " validargs="n,s"
		addproperty="rx"/>
	<if>
	    <and>
			<not>
				<equals arg1="s" arg2="${rx}" />
			</not>
			<not>
				<equals arg1="S" arg2="${rx}" />
			</not>
	    </and>

		<then>
			<fail>
Action aborted as requested by the user.
			</fail>
		</then>
	</if>

    <!-- Unseting properties should not be used, but it is really handy for this target -->
    <var name="bzr-revert-raw" unset="true"/>

    <!-- Revert all changes -->
    <exec executable="bzr" failonerror="no" outputproperty="bzr-revert-raw">
        <arg value="revert"/>
    </exec>

<echo>
'bzr revert' output:
${bzr-revert-raw}
</echo>

    <var name="bzr-status-raw" unset="true"/>
    <var name="bzr-error" unset="true"/>

    <!-- Search for conflicts -->
    <exec executable="bzr" failonerror="no" outputproperty="bzr-status-raw" errorproperty="bzr-error">
        <arg value="status"/>
    </exec>

    <!-- Verify if it ran smoothly -->
    <if>
        <not>
            <equals arg1="${bzr-error}" arg2="" />
        </not>
        <then>
            <fail>Bazaar has reported an error!
${bzr-error}
            </fail>
        </then>
    </if>

    <!-- this is necessary in order to remove the line breaks -->
    <for list="${bzr-status-raw}" delimiter="${line.separator}" param="line" trim="no">
        <sequential>
            <var name="status-file" unset="true"/>
            <var name="status-extension-file" unset="true"/>

            <!-- Get only the file relative path, without the Implementation folder name -->
            <propertyregex property="status-file" input="@{line}"
                regexp="^  \S+ => (\S+)\s*" select="\1" global="no" casesensitive="false"/>

            <if>
                <or>
                    <equals arg1="${status-file}" arg2="" />

                    <not>
                        <isset property="status-file" />
                    </not>
                </or>

                <then>
                    <propertyregex property="status-file" input="@{line}"
                        regexp="^  (\S+)\s*" select="\1" global="no" casesensitive="false"/>
                </then>
            </if>


            <propertyregex property="status-extension-file" input="${status-file}"
                regexp="^\S*\.(\S+)\s*" select="\1" global="no" casesensitive="false"/>

<!--
<echo>
Debug:
analyzing line=@{line}
status-file=${status-file}
</echo>
-->

            <if>
                <and>
                    <not>
                        <equals arg1="${status-file}" arg2="" />
                    </not>
                    <not>
                        <equals arg1="${status-extension-file}" arg2="" />
                    </not>

                    <isset property="status-file" />
                    <isset property="status-extension-file" />
                </and>

                <then>
<echo>
Deleting unknown file ${basedir}/../${status-file}
</echo>

                    <delete file="${basedir}/../${status-file}"/>
                </then>
            </if>

            <if>
                <and>
                    <and>
						<not>
							<equals arg1="${status-file}" arg2="" />
						</not>

                        <isset property="status-file" />
                    </and>
                    <or>
					    <equals arg1="${status-extension-file}" arg2="" />

						<not>
                            <isset property="status-extension-file" />
						</not>
                    </or>
                </and>

                <then>
<echo>
Deleting unknown directory ${basedir}/../${status-file}
</echo>

					<delete>
						<fileset dir="${basedir}/../${status-file}" includes="**/*" defaultexcludes="false"/>
					</delete>
                </then>
            </if>
        </sequential>
    </for>
</target>
</project>
