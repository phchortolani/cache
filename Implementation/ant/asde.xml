<?xml version="1.0" encoding="iso-8859-1" ?>

<project name="asde" default="init" basedir="..">

<!-- This target copies only the files related to the base asde environment
     to the ../asde directory. It doesn't copy user-properties or source files, except
     for those in the basedir/config subtree.
     It is designed to be used like this:
     1) The developer makes adjustments to one or more artifacts related to source-control
        under a namespace (probably using the current project);
     2) The developer tests it and is confident that those changes work;
     3) The develper than exports all of it to the ../asde folder, in order to merge those changes
        with the asde repository; -->
<target name="export-asde-init" depends="init" >
    <property name="asdeDir" value="${basedir}${file.separator}..${file.separator}..${file.separator}..${file.separator}asde${file.separator}dev${file.separator}Implementation" />

    <!-- Create the directories so that the developers know where to place things -->
    <mkdir dir="${asdeDir}/src/prj"/>
    <mkdir dir="${asdeDir}/src/inc"/>
    <mkdir dir="${asdeDir}/src/mac"/>
    <mkdir dir="${asdeDir}/src/cls"/>

    <mkdir dir="${asdeDir}/globals/nm/appParameters"/>
    <mkdir dir="${asdeDir}/globals/nm/charParameters"/>
    <mkdir dir="${asdeDir}/globals/nm/sysParameters"/>
    <mkdir dir="${asdeDir}/globals/nm/userParameters"/>
    <mkdir dir="${asdeDir}/globals/nm/classes"/>
    <mkdir dir="${asdeDir}/globals/nm/dictionary"/>
    <mkdir dir="${asdeDir}/globals/nm/forms"/>
    <mkdir dir="${asdeDir}/globals/nm/general"/>
    <mkdir dir="${asdeDir}/globals/nm/language"/>
    <mkdir dir="${asdeDir}/globals/nm/menus"/>

    <mkdir dir="${asdeDir}/web/csp"/>
    <mkdir dir="${asdeDir}/web/resources"/>
    <!-- Jasperreports currently breaks without the "Compiled" folder -->
    <mkdir dir="${asdeDir}/web/reports/Compiled"/>

    <!-- Copy all artifacts that every project should have -->
    <copy todir="${asdeDir}/bin">
        <fileset dir="${basedir}/bin" defaultexcludes="false">
            <include name="**/*"/>
        </fileset>
    </copy>

    <copy todir="${asdeDir}/configuration">
        <fileset dir="${basedir}/configuration" defaultexcludes="false">
            <include name="**/*"/>
        </fileset>
    </copy>

    <copy todir="${asdeDir}/docs">
        <fileset dir="${basedir}/docs" defaultexcludes="false">
            <include name="**/*"/>
            <exclude name="**/core-upgrade/**/*"/>
        </fileset>
    </copy>

    <copy todir="${asdeDir}/libs/java-libs">
        <fileset dir="${basedir}/libs/java-libs" defaultexcludes="false">
            <include name="**/*"/>
        </fileset>
    </copy>

    <copy todir="${asdeDir}/src/servlet">
        <fileset dir="${basedir}/src/servlet" defaultexcludes="false">
            <include name="**/*"/>
        </fileset>
    </copy>

    <copy todir="${asdeDir}/web/javaResources">
        <fileset dir="${basedir}/web/javaResources" defaultexcludes="false">
            <include name="**/*"/>
        </fileset>
    </copy>

    <copy todir="${asdeDir}/web/reports">
        <fileset dir="${basedir}/web/reports" defaultexcludes="false">
            <include name="AlphalincJasperReportExample.jrxml"/>
        </fileset>
    </copy>

    <copy todir="${asdeDir}">
        <fileset dir="${basedir}" defaultexcludes="false">
            <include name="build.xml"/>
        </fileset>
    </copy>

    <copy todir="${asdeDir}/ant">
        <fileset dir="${basedir}/ant" defaultexcludes="false">
            <include name="**/*"/>
        </fileset>
    </copy>

    <!-- Root folder for the project -->
    <copy todir="${basedir}${file.separator}..${file.separator}..${file.separator}..${file.separator}asde${file.separator}dev">
        <fileset dir="${basedir}${file.separator}.." defaultexcludes="false">
            <include name=".bzrignore"/>
        </fileset>
    </copy>
</target>

<!-- Everything that has some important dependency relationships should be put here.
     Only files that don't have an obvious file system dependency should be specified.
     Examples: changing build.xml or propterites may require redeploying stuff. However,
     we don't need to specify that xyz.class depends on xyz.java. Nor that deploymentDir/X.z
     depends on workspaceDir/Z.z (ths is obvious because it is the same file). -->
<target name="verify-dependencies" >
    <!-- All files that depend on modifications will be removed (Except for user-config.properties because
         the user might want to copy some of its values later. -->
    <dependset>
        <srcfilelist dir="${basedir}" files="user-config.properties,build.xml"/>
        <targetfileset dir="${buildDir}" includes="cache-config-script_win.s,cache-config-script_nix.s,cache-exclude-list_win.s,cache-exclude-list_nix.s"/>
    </dependset>
    <dependset>
        <srcfilelist dir="${basedir}/ant" files="ant-config.xml,asde.xml,asde-patch.xml,asde-studiohook.xml,cache.xml,tomcat.xml,bazaar.xml"/>
        <targetfileset dir="${buildDir}" includes="cache-config-script_win.s,cache-config-script_nix.s,cache-exclude-list_win.s,cache-exclude-list_nix.s"/>
    </dependset>

    <!-- Check if the config template is newer then the generated file -->
    <dependset>
        <srcfilelist dir="${templateDir}" files="cache-config-script.template"/>
        <targetfilelist dir="${buildDir}" files="cache-config-script_win.s,cache-config-script_nix.s"/>
    </dependset>

    <!-- Check if the config template is newer then the generated file -->
    <dependset>
        <srcfilelist dir="${templateDir}" files="cache-exclude-list.template"/>
        <targetfilelist dir="${buildDir}" files="cache-exclude-list_win.s,cache-exclude-list_nix.s"/>
    </dependset>
</target>

<!-- Generates some general scritps for convenience. The user can use them to automate
         some tasks (backup, etc) -->
<target name="generate-general-scripts" >
    <!-- Script: backup.cmd - provides a full backup of the project directory (including bazaar files) -->
    <if>
        <not>
            <available file="${basedir}/backup.cmd" property="backup-not-available" />
        </not>
        <then>
            <!-- Prepare the script with the user's parameters and leave it in the base directory -->
            <copy file="${templateDir}/backup-cmd.template"
                        toFile="${basedir}/backup.cmd" overwrite="yes">
                <filterset>
                    <filter token="namespace" value="${namespace}"/>
                    <filter token="backupDir" value="${backupDir}"/>
                </filterset>
            </copy>
        </then>
        
    </if>
</target>

<!-- Rebuild the current namespace, overwrinting all files on the namespace with those
     in the file system. This target just erases previous logs,deployment dires (except the database),
     resources, and calls the normal deploy target. This will cause everything to be redeployed. -->

<!-- Deletes all deployed files and kills the ^SourceControlTimeStamps global -->
<target name="delete-all" depends="init" >
<echo>
All deployment directories related to ${namespace} will
be erased and then redeployed. All files will be reloaded
into Cache. The whole operation may take 30 minutes or more.
Are you sure that you want to redeploy everything?
</echo>
    <input message="Type c to continue or any other key to abort" addproperty="response"/>
    <if>
        <not>
            <or>
                <equals arg1="c" arg2="${response}"/>
                <equals arg1="C" arg2="${response}"/>
            </or>
        </not>
        <then>
            <fail>Rebuild process aborted as requested by the user.</fail>
        </then>
    </if>

    <!-- Clear deployment directories -->
    <delete>
        <fileset dir="${cspDir}" includes="**/*" defaultexcludes="false"/>
    </delete>
    <delete>
        <fileset dir="${reportsDir}" includes="**/*" defaultexcludes="false"/>
    </delete>
    <delete>
        <fileset dir="${resourcesDir}" includes="**/*" defaultexcludes="false"/>
    </delete>
    <delete>
        <fileset dir="${servletDir}" includes="**/*" defaultexcludes="false"/>
    </delete>
    <delete file="${tomcatDir}/conf/Catalina/localhost/${namespace}.xml" />

    <!-- Clear relevant log files -->
    <delete includeemptydirs="true">
        <fileset dir="${basedir}/build" includes="**/*" excludes="cache-update.log*" defaultexcludes="false"/>
    </delete>

    <!-- Clear timestamps -->
<echo file="${buildDir}/clear-timestamps_win.s" append="false"><![CDATA[
; This script is automatically generated.
; This script erases the global ^SourceControlTimeStamps
; in order to force a full reload of all files.
;
;History:
;2009-Jan-29    Soeiro  Created
;
logfile: ${buildDir}/clear-timestamps.log
timer 600
on error: $ERROR
multiwait for: =Username:=Usuário:
send: ${cacheUsername}<CR>

multiwait for: =Password:=Senha:
send: ${cachePassword}<CR>

wait for: >
send: zn "${namespaceCapitalized}"<CR>

wait for: ${namespaceCapitalized}>
send: kill ^SourceControlTimeStamps<CR>

$END
wait for: ${namespaceCapitalized}>
send: w !,"Configuration finished."<CR>

wait for: ${namespaceCapitalized}>
send: write $zdatetime($ztimestamp, 3, 1, 6)<CR>

wait for: ${namespaceCapitalized}>
closelog
send: halt<CR>
terminate

$ERROR
send: w "An error occured during configuration. Please check the log file.",!<CR>
goto $END

]]></echo>

    <exec executable="${cacheDir}/bin/cterm.exe" osfamily="windows" failonerror="no" timeout="300000">
        <arg value="/console=cn_iptcp:${terminalURL}"/>
        <arg value="${buildDir}/clear-timestamps_win.s"/>
    </exec>

<echo file="${buildDir}/clear-timestamps_nix.s" append="false"><![CDATA[${cacheUsername}
${cachePassword}

; This script is automatically generated.
; This script erases the global ^SourceControlTimeStamps
; in order to force a full reload of all files.
;
;History:
;2009-Jan-29    Soeiro  Created
;
zn "${namespaceCapitalized}"
kill ^SourceControlTimeStamps

w !,"Configuration finished."
write $zdatetime($ztimestamp, 3, 1, 6)

halt
]]></echo>

	<if>
		<os family="unix"/>
		<then>
			<record name="${buildDir}/clear-timestamps.log" action="start"/>

			<exec executable="${cacheDir}/bin/csession" input="${buildDir}/clear-timestamps_nix.s"
			    osfamily="unix" failonerror="no" timeout="300000">
				<arg value="${instanceName}"/>
			</exec>

			<record name="${buildDir}/clear-timestamps.log" action="stop"/>
		</then>
	</if>
</target>

</project>
