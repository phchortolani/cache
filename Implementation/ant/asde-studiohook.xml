<?xml version="1.0" encoding="iso-8859-1" ?>

<project name="asde-studiohook" basedir="..">

<!-- Force the system to load source control files. This is to be used by the command line only -->
<target name="load-source-control-exec" depends="init,configure-cache,load-source-control-helper,verify-source-control"/>

<target name="copy-cachecomponents-files-exec" depends="init">
    <!-- Source Control files -->
    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/hooks/src-packages" defaultexcludes="false">
                <include name="**/*.cls.xml"/>
                <include name="**/*.inc.xml"/>
                <include name="**/*.mac.xml"/>
                <include name="**/*.prj.xml"/>
            </fileset>
        </path>

        <sequential>
            <propertyregex override="true" property="relative-file" input="@{file}"
                regexp=".*[/|\\]configuration[/|\\]hooks[/|\\]src-packages[/|\\](.+[/|\\].+\.xml)" select="\1"/>

            <propertyregex override="true" property="is-source-control" input="@{file}"
                regexp="()" select="\1"/>
            <propertyregex override="true" property="is-source-control" input="@{file}"
                regexp=".*[/|\\](SourceControl).+\.xml" select="\1"/>

            <if>
                <not>
                    <equals arg1="SourceControl" arg2="${is-source-control}"/>
                </not>

                <then>
                    <echo>Copying ${relative-file} if outdated
                    </echo>
                    <copy todir="${basedir}/configuration/hooks/src-packages" preservelastmodified="yes" overwrite="no">
                        <fileset dir="${basedir}/../../../cachecomponentes/main/Implementation/src" defaultexcludes="false">
                            <include name="${relative-file}"/>
                        </fileset>
                    </copy>
                </then>
            </if>
        </sequential>
    </for>
</target>

<!-- This target should *seldom* be used! it copies all current source-control related files
     to the config folder, overwriting every thing there. It should be used *only* when there is a fix or
     change made to the general source control files and those changes will be merged back to the general
     asde branch. -->
<target name="overwrite-source-control-package-exec" depends="init">
    <!-- Source Control files -->
    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/hooks/src-packages" defaultexcludes="false">
                <include name="**/*.cls.xml"/>
                <include name="**/*.inc.xml"/>
                <include name="**/*.mac.xml"/>
                <include name="**/*.prj.xml"/>
            </fileset>
        </path>

        <sequential>
            <propertyregex override="true" property="relative-file" input="@{file}"
                regexp=".*[/|\\]configuration[/|\\]hooks[/|\\]src-packages[/|\\](.+[/|\\].+\.xml)" select="\1"/>

            <echo>Copying ${relative-file} if outdated
            </echo>
            <copy todir="${basedir}/configuration/hooks/src-packages" preservelastmodified="yes" overwrite="no">
                <fileset dir="${basedir}/src" defaultexcludes="false">
                    <include name="${relative-file}"/>
                </fileset>
            </copy>
        </sequential>
    </for>

    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/hooks/web-packages" defaultexcludes="false">
                <include name="**/*.csp"/>
            </fileset>
        </path>

        <sequential>
            <propertyregex override="true" property="relative-file" input="@{file}"
                regexp=".*[/|\\]configuration[/|\\]hooks[/|\\]web-packages[/|\\](.+[/|\\].+\.csp)" select="\1"/>

            <echo>Copying ${relative-file} if outdated
            </echo>
            <copy todir="${basedir}/configuration/hooks/web-packages" preservelastmodified="yes" overwrite="no">
                <fileset dir="${basedir}/web" defaultexcludes="false">
                    <include name="${relative-file}"/>
                </fileset>
            </copy>
        </sequential>
    </for>
</target>

<target name="check-source-control" depends="init,configure-cache" >
    <!-- The system copies files from the source control hooks if they are newer -->
    <copy todir="${basedir}/src" preservelastmodified="yes" overwrite="no">
        <fileset dir="${basedir}/configuration/hooks/src-packages" defaultexcludes="false">
            <include name="**/*.cls.xml"/>
            <include name="**/*.inc.xml"/>
            <include name="**/*.mac.xml"/>
            <include name="**/*.prj.xml"/>
        </fileset>
    </copy>
    <copy todir="${basedir}/web" preservelastmodified="yes" overwrite="no">
        <fileset dir="${basedir}/configuration/hooks/web-packages" defaultexcludes="false">
            <include name="**/*.csp"/>
        </fileset>
    </copy>

    <!-- Tests if there are changes in the source control classes -->
    <if>
        <not>
            <uptodate targetfile="${buildDir}/source-control-last-update.log" >
                <srcfiles dir="${basedir}/ant" includes="**/*"/>
                <srcfiles dir="${basedir}/configuration" includes="**/*"/>
            </uptodate>
        </not>

        <then>
			<for param="file">
				<path>
					<fileset dir="${basedir}/configuration" includes="**/*" defaultexcludes="false"/>
				</path>

				<sequential>
					<if>
						<not>
							<uptodate targetfile="${buildDir}/source-control-last-update.log" srcfile="@{file}"/>
            			</not>

            			<then>
            				<echo>File '@{file}' changed</echo>
            			</then>
            		</if>
				</sequential>
			</for>

            <!-- Warn the user to temporary disable source control and then continue -->
            <echo>The system needs to load one or more source control files into Cache.
Please close Studio and then type 'continue' and press ENTER. If you want to interrupt this
precedure type 'quit' and then press ENTER. (Don't type the single quotes)
Consult the documentation at ${basedir}\docs\index.html for further
information.
            </echo>

			<if>
        		<not>
					<isset property="automated-task" />
        		</not>

				<then>
					<input message="Type '(c)ontinue' after closing Studio or type 'quit' to interrupt the procedure."
						validargs="quit,continue,c" addproperty="response"/>
					<if>
						<equals arg1="quit" arg2="${response}"/>
						<then>
							<fail>Build process aborted as requested by the user.</fail>
						</then>
					</if>
				</then>
			</if>

            <!-- Set the property so that verify-source-cotrol can execute -->
            <property name="source-control-changed" value="1" />
        </then>
    </if>
</target>

<!-- Force the system to load source control files. This is to be used by the command line only -->
<target name="load-source-control-helper" depends="init,configure-cache">
    <!-- Set the property to that verify-souce-control will execute -->
    <property name="source-control-changed" value="1" />

    <!-- Copy source-control classes from the original-hooks folder, if they are more up-to-date -->
    <copy todir="${basedir}/src" preservelastmodified="yes" overwrite="no">
        <fileset dir="${basedir}/configuration/hooks/src-packages" defaultexcludes="false">
            <include name="**/*.cls.xml"/>
            <include name="**/*.inc.xml"/>
            <include name="**/*.mac.xml"/>
            <include name="**/*.prj.xml"/>
        </fileset>
    </copy>
    <copy todir="${basedir}/web" preservelastmodified="yes" overwrite="no">
        <fileset dir="${basedir}/configuration/hooks/web-packages" defaultexcludes="false">
            <include name="**/*.csp"/>
        </fileset>
    </copy>
</target>

<!-- We want it to load only the SourceControl files to allow Cache to export everything.
     It is not necessary to use this target in ANT but it is usefull when you want to
     export all files from a server without loading anything else in it. ( When ANT is called
     for other targets it will load all files in the filesystem that are new to the server.
     If it is the *first* run, or if the user has deleted the build directory, all files in the
     filesystem will override the files in Cache.) -->
<target name="verify-source-control" depends="init,configure-cache,check-source-control" if="source-control-changed">
    <copy todir="${cspDir}">
        <fileset dir="${basedir}/web/csp" defaultexcludes="false"/>
    </copy>

    <!-- Deletes the flag that the command executed until the end -->
    <delete file="${buildDir}/update-source-control.ok"/>

<!-- Prepare the script to load only source control files. Don't change this identation!
     The filenames include a CRC-16 value at the end. This CRC-16 value is based on the file
     name, not on the contents. -->
    <echo file="${buildDir}/update-source-control_win.s" append="false"><![CDATA[
; This script is automatically generated.
; This script loads the source control files into Cache.
;
;History:
;2008-Jul-23    Soeiro  Created
;
logfile: ${buildDir}/update-source-control.log
timer 600
on error: $ERROR
${bypassAuthentication}

multiwait for: =Username:=Usuário:
send: ${cacheUsername}<CR>

multiwait for: =Password:=Senha:
send: ${cachePassword}<CR>

; Begin script
$BEGIN:

wait for: >
send: zn "${namespaceCapitalized}"<CR>

wait for: ${namespaceCapitalized}>
send: set r=0<CR>

wait for: ${namespaceCapitalized}>
send: set ok=1<CR>
]]></echo>

<!-- importação dos códigos fontes -->

    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/hooks/src-packages" defaultexcludes="false">
                <include name="**/*.cls.xml"/>
                <include name="**/*.inc.xml"/>
                <include name="**/*.mac.xml"/>
                <include name="**/*.prj.xml"/>
            </fileset>
        </path>

        <sequential>
            <propertyregex override="true" property="relative-file" input="@{file}"
                regexp="(.*)([/|\\])configuration[/|\\]hooks[/|\\]src-packages[/|\\](.+[/|\\].+\.xml)" select="\1\2src\2\3"/>

            <echo file="${buildDir}/update-source-control_win.s" append="true"><![CDATA[
wait for: ${namespaceCapitalized}>
send: set r=$System.OBJ.Load("${relative-file}","fvd")<CR>
wait for: ${namespaceCapitalized}>
send: if ('r) {set ok=0 w !,"Failed"}<CR>

]]></echo>
        </sequential>
    </for>

    <echo file="${buildDir}/update-source-control_win.s" append="true"><![CDATA[
<!-- compilação dos códigos fontes -->

wait for: ${namespaceCapitalized}>
send: set statusCode=0<CR>

]]></echo>

<!-- importação dos códigos fontes -->

    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/hooks/src-packages" defaultexcludes="false">
                <include name="**/*.prj.xml"/>
            </fileset>
        </path>

        <sequential>
            <propertyregex override="true" property="project-name" input="@{file}"
                regexp=".*[/|\\]configuration[/|\\]hooks[/|\\]src-packages[/|\\].+[/|\\]([^-]+)-[^\.]+\.prj\.xml" select="\1"/>

            <echo file="${buildDir}/update-source-control_win.s" append="true"><![CDATA[
wait for: ${namespaceCapitalized}>
send: set r=$System.OBJ.CompileProject("${project-name}","acku",.statusCode)<CR>
]]></echo>
        </sequential>
    </for>

    <!-- the first time is to compile the projects. the second one is only to compile the CSP's -->
    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/hooks/src-packages" defaultexcludes="false">
                <include name="**/*.prj.xml"/>
            </fileset>
        </path>

        <sequential>
            <propertyregex override="true" property="project-name" input="@{file}"
                regexp=".*[/|\\]configuration[/|\\]hooks[/|\\]src-packages[/|\\].+[/|\\]([^-]+)-[^\.]+\.prj\.xml" select="\1"/>

            <echo file="${buildDir}/update-source-control_win.s" append="true"><![CDATA[
wait for: ${namespaceCapitalized}>
send: set r=##class(SourceControl.Importer).CorrectProjectCsps("${project-name}")<CR>

wait for: ${namespaceCapitalized}>
send: if ('r) {set ok=0 w !,"Failed"}<CR>

wait for: ${namespaceCapitalized}>
send: set r=$System.OBJ.CompileProject("${project-name}","afvck",.statusCode)<CR>

wait for: ${namespaceCapitalized}>
send: if ('r) {set ok=0 w !,"Failed"}<CR>
]]></echo>
        </sequential>
    </for>

    <echo file="${buildDir}/update-source-control_win.s" append="true"><![CDATA[
wait for: ${namespaceCapitalized}>
send: w !,"StatusCode="_statusCode_", ok="_ok<CR>

wait for: ${namespaceCapitalized}>
send: do ##class(SourceControl.StudioHook).Install()<CR>

; Write the ok file (without using Source control because it might not be loaded yet)
wait for: ${namespaceCapitalized}>
send: if (ok) set file=##class(%File).%New(##class(VAR.infra.util.DirectoryFile).ConcatPath(^SourceControl("projectDir"), "build\update-source-control.ok"))<CR>

wait for: ${namespaceCapitalized}>
send: if (ok) w file.Open("WSN")<CR>

wait for: ${namespaceCapitalized}>
send: if (ok) w file.WriteLine("Finished ok at: "_$zdatetime($horolog))<CR>

wait for: ${namespaceCapitalized}>
send: if (ok) do file.Close()<CR>

wait for: ${namespaceCapitalized}>
send: set file=""<CR>

$END:
wait for: ${namespaceCapitalized}>
send: if (ok) w !,"Source control update finished OK."<CR>
wait for: ${namespaceCapitalized}>
send: if ('ok) w !,"Source control update FAILED!"<CR>

wait for: ${namespaceCapitalized}>
send: write $zdatetime($ztimestamp, 3, 1, 6)<CR>

wait for: ${namespaceCapitalized}>
closelog
terminate

$ERROR:
send: write "An error occured during configuration. Please check the log file.",!<CR>
goto $END

]]></echo>
<if>
	<equals arg1="${productIntersystems}" arg2="IRIS"/>
	<then>
		<exec executable="${cacheDir}/bin/iristerm.exe" osfamily="windows" failonerror="no" timeout="60000">
			<arg value="/console=cn_iptcp:${terminalURL}"/>
			<arg value="${buildDir}/update-source-control_win.s"/>
		</exec>
	</then>
	<else>
		<exec executable="${cacheDir}/bin/cterm.exe" osfamily="windows" failonerror="no" timeout="60000">
			<arg value="/console=cn_iptcp:${terminalURL}"/>
			<arg value="${buildDir}/update-source-control_win.s"/>
		</exec>
	</else>
</if>

<!-- Prepare the script to load only source control files. Don't change this identation!
     The filenames include a CRC-16 value at the end. This CRC-16 value is based on the file
     name, not on the contents. -->
    <echo file="${buildDir}/update-source-control_nix.s" append="false"><![CDATA[${cacheUsername}
${cachePassword}

; This script is automatically generated.
; This script loads the source control files into Cache.
;
;History:
;2008-Jul-23    Soeiro  Created
;
zn "${namespaceCapitalized}"

set r=0
set ok=1
]]></echo>

<!-- importação dos códigos fontes -->

    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/hooks/src-packages" defaultexcludes="false">
                <include name="**/*.cls.xml"/>
                <include name="**/*.inc.xml"/>
                <include name="**/*.mac.xml"/>
                <include name="**/*.prj.xml"/>
            </fileset>
        </path>

        <sequential>
            <propertyregex override="true" property="relative-file" input="@{file}"
                regexp="(.*)([/|\\])configuration[/|\\]hooks[/|\\]src-packages[/|\\](.+[/|\\].+\.xml)" select="\1\2src\2\3"/>

            <echo file="${buildDir}/update-source-control_nix.s" append="true"><![CDATA[
set r=$System.OBJ.Load("${relative-file}","fvd")
if ('r) {set ok=0 w !,"Failed"}

]]></echo>
        </sequential>
    </for>

    <echo file="${buildDir}/update-source-control_nix.s" append="true"><![CDATA[
<!-- compilação dos códigos fontes -->

set statusCode=0

]]></echo>

<!-- importação dos códigos fontes -->

    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/hooks/src-packages" defaultexcludes="false">
                <include name="**/*.prj.xml"/>
            </fileset>
        </path>

        <sequential>
            <propertyregex override="true" property="project-name" input="@{file}"
                regexp=".*[/|\\]configuration[/|\\]hooks[/|\\]src-packages[/|\\].+[/|\\]([^-]+)-[^\.]+\.prj\.xml" select="\1"/>

            <echo file="${buildDir}/update-source-control_nix.s" append="true"><![CDATA[
set r=$System.OBJ.CompileProject("${project-name}","acku",.statusCode)
]]></echo>
        </sequential>
    </for>

    <!-- the first time is to compile the projects. the second one is only to compile the CSP's -->
    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/hooks/src-packages" defaultexcludes="false">
                <include name="**/*.prj.xml"/>
            </fileset>
        </path>

        <sequential>
            <propertyregex override="true" property="project-name" input="@{file}"
                regexp=".*[/|\\]configuration[/|\\]hooks[/|\\]src-packages[/|\\].+[/|\\]([^-]+)-[^\.]+\.prj\.xml" select="\1"/>

            <echo file="${buildDir}/update-source-control_nix.s" append="true"><![CDATA[
set r=##class(SourceControl.Importer).CorrectProjectCsps("${project-name}")
if ('r) {set ok=0 w !,"Failed"}

set r=$System.OBJ.CompileProject("${project-name}","afvck",.statusCode)
if ('r) {set ok=0 w !,"Failed"}
]]></echo>
        </sequential>
    </for>

    <echo file="${buildDir}/update-source-control_nix.s" append="true"><![CDATA[
w !,"StatusCode="_statusCode_", ok="_ok
do ##class(SourceControl.StudioHook).Install()

; Write the ok file (without using Source control because it might not be loaded yet)
if (ok) set file=##class(%File).%New(##class(VAR.infra.util.DirectoryFile).ConcatPath(^SourceControl("projectDir"), "build\update-source-control.ok"))

if (ok) write file.Open("WSN")

if (ok) write file.WriteLine("Finished ok at: "_$zdatetime($horolog))

if (ok) do file.Close()

set file=""

if (ok) write !,"Source control update finished OK."
if ('ok) write !,"Source control update FAILED!"

write $zdatetime($ztimestamp, 3, 1, 6)

halt
]]></echo>

	<if>
		<os family="unix"/>
		<then>
			<record name="${buildDir}/update-source-control.log" action="start"/>
			<if>
				<equals arg1="${productIntersystems}" arg2="IRIS"/>
				<then>
					<exec executable="${cacheDir}/bin/irissession" input="${buildDir}/update-source-control_nix.s"
						osfamily="unix" failonerror="no" timeout="60000">
						<arg value="${instanceName}"/>
					</exec>
				</then>
				<else>
					<exec executable="${cacheDir}/bin/csession" input="${buildDir}/update-source-control_nix.s"
						osfamily="unix" failonerror="no" timeout="60000">
						<arg value="${instanceName}"/>
					</exec>
				</else>
			</if>
			<record name="${buildDir}/update-source-control.log" action="stop"/>
		</then>
	</if>

    <!-- Verifies if it executed until the end -->
    <if>
        <not>
            <available property="fileExists" file="${buildDir}/update-source-control.ok" />
        </not>

        <then>
            <fail>
Source control update FAILED!
1) Please take a look at the file
${buildDir}/update-source-control.log for any clues;
2) Check that the username and password are correct;
3) Check that the Cache license IS INSTALLED;
4) Check if the system can load any external XML file.
Sometimes Cache must be reinstalled when it gets corrupted;
5) Check if there were any compilation errors.
            </fail>
        </then>
        <else>
            <echo>
        To make sure that there were no errors,
        you must view the log files:
        a) ${buildDir}/cache-config-script.log
        b) ${buildDir}/cache-exclude-list.log
        c) ${buildDir}/update-source-control.log
        Look for any sign of errors.

        If there were no errors during the previous process,
        now it is possible to:

        - Work on anything (@NM, Studio, etc) and have the
          changed artifacts under source control.

        - Manually select SourceControl.StudioHook as the source control
        class in Studio:
        Tools -> Source Control -> Source Control Class

        - Export a file or all files from Studio to the
        file system, overwriting what is already in the file system.
        See SourceControl.Exporter.cls. Example:
        do ##class(SourceControl.Exporter).ExportAllSource()

            </echo>

            <!-- Mark it as done -->
            <exec dir="${binDir}" executable="${touchExecName}" resolveexecutable="${isWindows}" failonerror="yes">
            	<arg line="${buildDir}/source-control-last-update.log"/>
            </exec>
        </else>
    </if>
</target>
</project>
