<?xml version="1.0" encoding="iso-8859-1" ?>

<project name="ant-config" default="init" basedir="..">

<!-- Initialize all variables and properties (place holder to execute the other targets in sequence -->
<target name="init" depends="update-user-config,set-properties,verify-properties,verify-dependencies,generate-general-scripts"/>

<!-- Verify if the current user-config.properties file is uptodate -->
<target name="check-user-config" >
    <!-- Get a clean user-config.properties, if necessary -->
    <uptodate property="user-config-uptodate" srcfile="${templateDir}/user-config-properties.template"
        targetfile="${basedir}/user-config.properties"/>
</target>

<!-- Recreate the user config file if necessary -->
<target name="update-user-config" depends="check-user-config" unless="user-config-uptodate">
    
    <property name="userConfigUpdated" value="1" />
    
    <!-- Save a backup of the last 3 older user files: 1) delete the oldest; 2) copy from N to N+1; 3) Generate 1 -->
    <delete file="${basedir}/user-config.properties.4.bak" quiet="yes"/>
    <if>
        <available file="${basedir}/user-config.properties.3.bak" property="bak4" />
        <then>
            <move file="${basedir}/user-config.properties.3.bak" tofile="${basedir}/user-config.properties.4.bak" overwrite="true"/>
        </then>
    </if>

    <if>
        <available file="${basedir}/user-config.properties.2.bak" property="bak3" />
        <then>
            <move file="${basedir}/user-config.properties.2.bak" tofile="${basedir}/user-config.properties.3.bak" overwrite="true"/>
        </then>
    </if>

    <if>
        <available file="${basedir}/user-config.properties.1.bak" property="bak2" />
        <then>
            <move file="${basedir}/user-config.properties.1.bak" tofile="${basedir}/user-config.properties.2.bak" overwrite="true"/>
        </then>
    </if>
        
    <if>
        <available file="${basedir}/user-config.properties" property="bak1" />
        <then>
            <!-- template upgrade in an existing installation -->
            <move file="${basedir}/user-config.properties" tofile="${basedir}/user-config.properties.1.bak" overwrite="true"/>
                <!-- Try to read old properties for current user -->
                <property file="${basedir}/user-config.properties.1.bak"/>
        </then>
    </if>

    <!-- The properties that were defined in the original file stay (if any)).
         Otherwise, they get the following default values (sometimes empty): -->
    <property name="currentNamespaceCaptalized" value="${namespaceCapitalized}" />
    <property name="namespace" value="" />
    <property name="namespaceCapitalized" value="" />
    <property name="backupDir" value="x:/backup" />
    <property name="cacheDir" value="C:/InterSystems/Cache" />
    <property name="onBeforeLoadActive" value="0" />
    <property name="deleteTmpXMLFilesActive" value="1" />
    <property name="terminalURL" value="127.0.0.1[23]" />
    <property name="instanceName" value="ENSEMBLE" />
    <property name="cacheUsername" value="SYS" />
    <property name="cachePassword" value="XXX" />
    <property name="cacheRemoteMappingUser" value="" />
    <property name="cacheRemoteMappingPassword" value="" />
    <property name="cacheRemoteMappingDir1" value="" />
    <property name="cacheRemoteMappingDir2" value="" />
    <property name="cacheRemoteMappingUnit1" value="" />
    <property name="cacheRemoteMappingUnit2" value="" />
    <property name="cspDir" value="" />
    <property name="reportsDir" value="" />
    <property name="reportsRemoteWebapp" value="" />
    <property name="reportsRemoteDir" value="" />
    <property name="reportsResourceUrlPrefix" value="localhost/${currentNamespaceCaptalized}/" />
    <property name="resourcesDir" value="" />
    <property name="resourcesURLPrefix" value="" />
    <property name="databaseDir" value="" />
    <property name="servletDir" value="" />
    <property name="tomcatDir" value="C:/Program Files/Apache Software Foundation/Tomcat 6.0" />
    <property name="tomcatInternalAddress" value="127.0.0.1" />
    <property name="tomcatInternalPort" value="8080" />
    <property name="tomcatExternalAddress" value="127.0.0.1" />
    <property name="tomcatExternalPort" value="8000" />
    <property name="commonLibDir" value="C:/Projects/common/main" />
    <property name="buildOptionVAR" value="1" />
    <property name="buildOptionASDE" value="0" />
    <property name="grantAllObjectsToUser1" value="jasper" />
    <property name="grantAllObjectsToUser2" value="" />
    <property name="runSourceLogging" value="0" />
	<property name="productIntersystems" value="CACHE" />
	

    <!-- New installation -->
    <copy file="${templateDir}/user-config-properties.template"
        tofile="${basedir}/user-config.properties" overwrite="yes">
        <filterset>
            <filter token="DATE" value="${TODAY}"/>
            <filter token="namespace" value="${namespace}" />
            <filter token="namespaceCapitalized" value="${namespaceCapitalized}" />
            <filter token="backupDir" value="${backupDir}" />
            <filter token="cacheDir" value="${cacheDir}" />
            <filter token="onBeforeLoadActive" value="${onBeforeLoadActive}" />
            <filter token="deleteTmpXMLFilesActive" value="${deleteTmpXMLFilesActive}" />
            <filter token="terminalURL" value="${terminalURL}" />
            <filter token="instanceName" value="${instanceName}" />
            <filter token="cacheUsername" value="${cacheUsername}" />
            <filter token="cachePassword" value="${cachePassword}" />
            <filter token="cacheRemoteMappingUser" value="${cacheRemoteMappingUser}" />
            <filter token="cacheRemoteMappingPassword" value="${cacheRemoteMappingPassword}" />
            <filter token="cacheRemoteMappingDir1" value="${cacheRemoteMappingDir1}" />
            <filter token="cacheRemoteMappingDir2" value="${cacheRemoteMappingDir2}" />
            <filter token="cacheRemoteMappingUnit1" value="${cacheRemoteMappingUnit1}" />
            <filter token="cacheRemoteMappingUnit2" value="${cacheRemoteMappingUnit2}" />
            <filter token="cspDir" value="${cspDir}" />
            <filter token="reportsDir" value="${reportsDir}" />
            <filter token="reportsRemoteWebapp" value="${reportsRemoteWebapp}" />
            <filter token="reportsRemoteDir" value="${reportsRemoteDir}" />
            <filter token="reportsResourceUrlPrefix" value="${reportsResourceUrlPrefix}" />
            <filter token="resourcesDir" value="${resourcesDir}" />
            <filter token="resourcesURLPrefix" value="${resourcesURLPrefix}" />
            <filter token="databaseDir" value="${databaseDir}" />
            <filter token="servletDir" value="${servletDir}" />
            <filter token="tomcatDir" value="${tomcatDir}" />
            <filter token="tomcatInternalAddress" value="${tomcatInternalAddress}" />
            <filter token="tomcatInternalPort" value="${tomcatInternalPort}" />
            <filter token="tomcatExternalAddress" value="${tomcatExternalAddress}" />
            <filter token="tomcatExternalPort" value="${tomcatExternalPort}" />
            <filter token="commonLibDir" value="${commonLibDir}" />
            <filter token="buildOptionVAR" value="${buildOptionVAR}" />
            <filter token="buildOptionASDE" value="${buildOptionASDE}" />
            <filter token="grantAllObjectsToUser1" value="${grantAllObjectsToUser1}" />
            <filter token="grantAllObjectsToUser2" value="${grantAllObjectsToUser2}" />
            <filter token="runSourceLogging" value="${runSourceLogging}" />
			<filter token="productIntersystems" value="${productIntersystems}" />
        </filterset>
    </copy>
</target>

<!-- All properties are loaded from the user file -->
<target name="set-properties">
    <!-- Load properties for current user -->
    <property file="${basedir}/user-config.properties"/>
    
    <!-- Checks if the O.S. is Windows or any other -->
    <if>
        <not>
            <os family="unix"/>
        </not>
        <then>
            <property name="isWindows" value="true" />
            <property name="touchExecName" value="touch.exe" />
        </then>
        <else>
    	    <property name="isWindows" value="false" />
    	    <property name="touchExecName" value="touch" />
    	</else>
    </if>

    <!-- Decides if the system will wait for the username/password or not -->
    <if>
        <or>
            <not>
                <equals trim="true" arg1="" arg2="${cachePassword}"/>
            </not>
        </or>
        <then>
            <property name="bypassAuthentication" value=""/>
            <property name="bypassMessage" value="(not shown)"/>
        </then>
        <else>
            <property name="bypassAuthentication" value="goto: $BEGIN" />
            <property name="bypassMessage" value="not defined (no authentication)" />
        </else>
    </if>

    <!-- Show everything so that the user can make sure all is set up correctly -->
<echo>Alhpalinc build version ${version}. Your local.properties are:
                 namespace = ${namespace}
      namespaceCapitalized = ${namespaceCapitalized}
                 backupDir = ${backupDir}
                  cacheDir = ${cacheDir}
        onBeforeLoadActive = ${onBeforeLoadActive}
   deleteTmpXMLFilesActive = ${deleteTmpXMLFilesActive}
               terminalURL = ${terminalURL}
	   productIntersystems = ${productIntersystems}
              instanceName = ${instanceName}
             cacheUsername = ${cacheUsername}
             cachePassword = ${bypassMessage}
    cacheRemoteMappingUser = ${cacheRemoteMappingUser}
cacheRemoteMappingPassword = ****
    cacheRemoteMappingDir1 = ${cacheRemoteMappingDir1}
    cacheRemoteMappingDir2 = ${cacheRemoteMappingDir2}
   cacheRemoteMappingUnit1 = ${cacheRemoteMappingUnit1}
   cacheRemoteMappingUnit2 = ${cacheRemoteMappingUnit2}
                    cspDir = ${cspDir}
              cspRemoteDir = ${cspRemoteDir}
                reportsDir = ${reportsDir}
  reportsResourceUrlPrefix = ${reportsResourceUrlPrefix}
              resourcesDir = ${resourcesDir}
        resourcesURLPrefix = ${resourcesURLPrefix}
               databaseDir = ${databaseDir}
                servletDir = ${servletDir}
                 tomcatDir = ${tomcatDir}
     tomcatInternalAddress = ${tomcatInternalAddress}
        tomcatInternalPort = ${tomcatInternalPort}
     tomcatExternalAddress = ${tomcatExternalAddress}
        tomcatExternalPort = ${tomcatExternalPort}
              commonLibDir = ${commonLibDir}
            buildOptionVAR = ${buildOptionVAR}
           buildOptionASDE = ${buildOptionASDE}
    grantAllObjectsToUser1 = ${grantAllObjectsToUser1}
    grantAllObjectsToUser2 = ${grantAllObjectsToUser2}
          runSourceLogging = ${runSourceLogging}
       
</echo>
</target>

<!-- Verifies that the properties were all defined. Cause the build to fail if they are not defined. -->
<target name="verify-properties" >

<if>
    <or><equals trim="true" arg1="" arg2="${namespace}" />
    <or><equals trim="true" arg1="" arg2="${cacheDir}" />
    <or><equals trim="true" arg1="" arg2="${backupDir}" />
    <or><equals trim="true" arg1="" arg2="${onBeforeLoadActive}" />
    <or><equals trim="true" arg1="" arg2="${deleteTmpXMLFilesActive}" />
    <or><equals trim="true" arg1="" arg2="${terminalURL}" />
    <or><equals trim="true" arg1="" arg2="${productIntersystems}" />
	<or><equals trim="true" arg1="" arg2="${instanceName}" />
    <or><equals trim="true" arg1="" arg2="${cacheUsername}" />
    <or><equals trim="true" arg1="" arg2="${cspDir}" />
    <or><equals trim="true" arg1="" arg2="${reportsDir}" />
    <or><equals trim="true" arg1="" arg2="${resourcesDir}" />
    <or><equals trim="true" arg1="" arg2="${servletDir}" />
    <or><equals trim="true" arg1="" arg2="${tomcatDir}" />
    <or><equals trim="true" arg1="" arg2="${tomcatInternalAddress}" />
    <or><equals trim="true" arg1="" arg2="${tomcatInternalPort}" />
    <or><equals trim="true" arg1="" arg2="${tomcatExternalAddress}" />
    <or><equals trim="true" arg1="" arg2="${tomcatExternalPort}" />
    <or><equals trim="true" arg1="" arg2="${commonLibDir}" />
    <or><equals trim="true" arg1="" arg2="${buildOptionVAR}" />
    <or><equals trim="true" arg1="" arg2="${buildOptionASDE}" />
    <or><equals trim="true" arg1="" arg2="${runSourceLogging}" />
    </or></or></or></or></or></or></or></or></or></or>
    </or></or></or></or></or></or></or></or></or></or></or></or>
    <then>
<!-- Displays all mandatory properties if any of them was not defined. -->
        <echo>The following properties are mandatory and *MUST* be filled:
               namespace = ${namespace}
               backupDir = ${backupDir}
                cacheDir = ${cacheDir}
      onBeforeLoadActive = ${onBeforeLoadActive}
 deleteTmpXMLFilesActive = ${deleteTmpXMLFilesActive}
             terminalURL = ${terminalURL}
     productIntersystems = ${productIntersystems}
            instanceName = ${instanceName}
           cacheUsername = ${cacheUsername}
                  cspDir = ${cspDir}
              reportsDir = ${reportsDir}
            resourcesDir = ${resourcesDir}
             databaseDir = ${databaseDir}
              servletDir = ${servletDir}
               tomcatDir = ${tomcatDir}
   tomcatInternalAddress = ${tomcatInternalAddress}
      tomcatInternalPort = ${tomcatInternalPort}
   tomcatExternalAddress = ${tomcatExternalAddress}
      tomcatExternalPort = ${tomcatExternalPort}
            commonLibDir = ${commonLibDir}
          buildOptionVAR = ${buildOptionVAR}
         buildOptionASDE = ${buildOptionASDE}
        runSourceLogging = ${runSourceLogging}        
       </echo>
       <if>
            <isset property="userConfigUpdated" />
            <then>
                <echo>The file 'user-config-properties.template' has changed, a manual update might be necessary.</echo>   
            </then>
       </if>
       <fail>
            Please edit the file "user-config.properties" and make sure all properties are defined.
       </fail>
    </then>
</if>

<if>
    <equals trim="true" arg1="" arg2="${cachePassword}" />
    <then>
<echo>
.
The property "cachePassword" was not defined in the
file "user-config.properties". Therefore, the system
will not wait for authentication.
</echo>
    </then>
</if>

</target>
</project>
