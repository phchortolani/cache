<?xml version="1.0" encoding="iso-8859-1" ?>

<project name="asde-patch" basedir="..">

<!-- Warning: this target should *seldom* be used! it copies all current source-control related files
     that should be unmodified (before having source-control hooks applied to them) to the
     configuration folder. They are used to patch a new namespace only. -->
<target name="overwrite-original-files-exec" depends="init">
    <input message="Please type carefully the exact name of the patch set (example: v1-56-18):"
        addproperty="patchSet"/>

    <!-- General routines (we use * because if the crc algorythm changes, we still copy the files -->
    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/templates/patch" defaultexcludes="false">
                <include name="**/*.cls.xml"/>
                <include name="**/*.mac.xml"/>
            </fileset>
        </path>

        <sequential>
            <propertyregex override="true" property="relative-file" input="@{file}"
                regexp=".*[/|\\]configuration[/|\\]templates[/|\\]patch[/|\\](.+[/|\\].+\.xml)" select="\1"/>

            <echo>Copying ${basedir}/src/${relative-file}
            </echo>
            <copy todir="${basedir}/configuration/hooks/nm-patches/${patchSet}/original-files/src" overwrite="yes">
                <fileset dir="${basedir}/src" defaultexcludes="false">
                    <include name="${relative-file}"/>
                </fileset>
            </copy>
        </sequential>
    </for>
</target>

<!-- This target should *seldom* be used! it copies all current source-control related files
     to the config folder, overwriting every thing there. It should be used *only* when there is a fix or
     change made to the general source control files and those changes will be merged back to the general 
     asde branch. -->
<target name="overwrite-modified-files-exec" depends="init">
    <input message="Please type carefully the exact name of the patch set (example: v1-56-18):"
        addproperty="patchSet"/>

    <!-- General routines (we use * because if the crc algorythm changes, we still copy the files -->
    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/templates/patch" defaultexcludes="false">
                <include name="**/*.cls.xml"/>
                <include name="**/*.mac.xml"/>
            </fileset>
        </path>

        <sequential>
            <propertyregex override="true" property="relative-file" input="@{file}"
                regexp=".*[/|\\]configuration[/|\\]templates[/|\\]patch[/|\\](.+[/|\\].+\.xml)" select="\1"/>

            <echo>Copying ${basedir}/src/${relative-file}
            </echo>
            <copy todir="${basedir}/configuration/hooks/nm-patches/${patchSet}/modified-files/src" overwrite="yes">
                <fileset dir="${basedir}/src" defaultexcludes="false">
                    <include name="${relative-file}"/>
                </fileset>
            </copy>
        </sequential>
    </for>
</target>

<!-- This target creates the patches for source control. It compares original files with
     modified files and generates the patches with DIFF. Those patches include some lines of context
     so that they can be applied to files that are not exactly equal to the original files.
     To make a patch, jsut put the original copy of the file in the appropriate place in the
     hooks/core-version/original-files/ directory and the modified file on the equivalent
     hooks/core-version/modified-files/ directory.
     Warning: the existing patches will be removed. -->
<target name="generate-source-control-patches-exec" depends="init">
    <input message="Please type carefully the exact name of the patch set (example: v1-56-18):"
        addproperty="patchSet"/>

    <!-- Erase the existing dir -->
    <delete>
        <fileset dir="${basedir}/configuration/hooks/nm-patches/${patchSet}/patches" includes="**/*" defaultexcludes="false"/>
    </delete>

    <!-- All files in the original-files dir will be considered -->
    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/hooks/nm-patches/${patchSet}/original-files/src/mac" defaultexcludes="false">
                <include name="**/*"/>
            </fileset>
            <fileset dir="${basedir}/configuration/hooks/nm-patches/${patchSet}/original-files/src/cls" defaultexcludes="false">
                <include name="**/*"/>
            </fileset>
        </path>

        <sequential>
            <!-- Get a the name of the file without a complete path -->
            <propertyregex override="true" property="relative-file" input="@{file}"
                 regexp=".*[/|\\]configuration[/|\\]hooks[/|\\]nm-patches[/|\\]${patchSet}[/|\\]original-files[/|\\](.*)" select="\1"/>

            <!-- Get a the directory part of the file name -->
            <propertyregex override="true" property="dir-part" input="${relative-file}"
                 regexp="(.*)[/|\\].+" select="\1"/>

            <echo>
Genrating patch for:
@{file}
            </echo>

            <!-- Create the directory if it doesn't exist -->
            <mkdir dir="${basedir}/configuration/hooks/nm-patches/${patchSet}/patches/${dir-part}"/>

            <!-- create the patch: "diff -u file_before file_after > patch_file.patch"
                 The errorlevel for diff is: 0: no differences, 1: differences found, 2:trouble=error -->
            <exec dir="${basedir}" failonerror="false" executable="${basedir}\bin\diff"
                output="${basedir}/configuration/hooks/nm-patches/${patchSet}/patches/${relative-file}.patch"
                resultproperty="errorlevel">
                <arg value="-u"/>
                <arg path="@{file}"/>
                <arg path="${basedir}/configuration/hooks/nm-patches/${patchSet}/modified-files/${relative-file}"/>
            </exec>

            <!-- Test if everything is allright -->
            <fail message="An error has occured while running diff!">
                <condition>
                    <equals arg1="${errorlevel}" arg2="2" trim="true"/>
                </condition>
            </fail>

            <!--
            <echo>errorlevel=${errorlevel}</echo>
             -->
        </sequential>
    </for>
</target>

<!-- This target applies all source control patches for a new namespace.
     WARNING: make a backup of your existing files before using this target. -->
<target name="patch-namespace-exec" depends="init" >
    <!-- Defines a dir for easier handling of file operations -->
    <property name="tempPatchDir" value="${buildDir}${file.separator}patched" />

    <!-- Clean target dir -->
    <delete quiet="yes">
        <fileset dir="${tempPatchDir}" includes="**/*" defaultexcludes="false"/>
    </delete>
    <mkdir dir="${tempPatchDir}" />

    <!-- Get the current version of Alphalinc core -->
    <!-- Copy the header -->
    <copy file="${templateDir}/script-header_win.template" toFile="${buildDir}/version-probe_win.s" overwrite="yes">
        <filterset>
            <filter token="scriptDescription" value="Probe current Cache version and known patch sets" />
            <filter token="bypassAuthentication" value="${bypassAuthentication}"/>
            <filter token="namespace" value="${namespace}"/>
            <filter token="namespaceCapitalized" value="${namespaceCapitalized}"/>
            <filter token="projectDir" value="${basedir}"/>
            <filter token="cacheUsername" value="${cacheUsername}"/>
            <filter token="cachePassword" value="${cachePassword}"/>
            <filter token="logFile" value="${buildDir}${file.separator}version-probe.log"/>
        </filterset>
    </copy>

    <!-- Place the specific call (be carefull: don't change the identation!)-->
<echo file="${buildDir}/version-probe_win.s" append="true"><![CDATA[
; Gets the version
wait for: ${namespaceCapitalized}>
send: set version=$piece(^WWWVERSION(0,"@net_Manager",1),"~",1)<CR>

wait for: ${namespaceCapitalized}>
send: if ($zbitget($zversion(0), 1) = 1) set version=version_"U"<CR>

; Perpares a file
wait for: ${namespaceCapitalized}>
send: set file=##class(%File).%New("${buildDir}"_"${file.separator}version-probe.properties")<CR>

wait for: ${namespaceCapitalized}>
send: w file.Open("WSN")<CR>

wait for: ${namespaceCapitalized}>
send: w file.WriteLine("current-version="_version)<CR>

wait for: ${namespaceCapitalized}>
send: do file.Close()<CR>

wait for: ${namespaceCapitalized}>
send: set file=""<CR>

wait for: ${namespaceCapitalized}>
send: <CR>
terminate

]]></echo>

    <exec executable="${cacheDir}/bin/cterm.exe" osfamily="windows" failonerror="no" timeout="15000"
        resultproperty="res">
        <arg value="/console=cn_iptcp:${terminalURL}"/>
        <arg value="${buildDir}/version-probe_win.s"/>
    </exec>

    <!-- Get the current version of Alphalinc core -->
    <!-- Copy the header -->
    <copy file="${templateDir}/script-header_nix.template" toFile="${buildDir}/version-probe_nix.s" overwrite="yes">
        <filterset>
            <filter token="scriptDescription" value="Probe current Cache version and known patch sets" />
            <filter token="bypassAuthentication" value="${bypassAuthentication}"/>
            <filter token="namespace" value="${namespace}"/>
            <filter token="namespaceCapitalized" value="${namespaceCapitalized}"/>
            <filter token="projectDir" value="${basedir}"/>
            <filter token="cacheUsername" value="${cacheUsername}"/>
            <filter token="cachePassword" value="${cachePassword}"/>
            <filter token="logFile" value="${buildDir}${file.separator}version-probe.log"/>
        </filterset>
    </copy>

    <!-- Place the specific call (be carefull: don't change the identation!)-->
<echo file="${buildDir}/version-probe_nix.s" append="true"><![CDATA[
; Gets the version
set version=$piece(^WWWVERSION(0,"@net_Manager",1),"~",1)

if ($zbitget($zversion(0), 1) = 1) set version=version_"U"

; Perpares a file
set file=##class(%File).%New("${buildDir}"_"${file.separator}version-probe.properties")
w file.Open("WSN")
w file.WriteLine("current-version="_version)
do file.Close()
set file=""

halt
]]></echo>

	<if>
		<os family="unix"/>
		<then>
			<record name="${buildDir}/version-probe.log" action="start"/>

			<exec executable="${cacheDir}/bin/csession" input="${buildDir}/version-probe_nix.s"
			    osfamily="unix" failonerror="no" timeout="15000" resultproperty="res">
				<arg value="${instanceName}"/>
			</exec>

			<record name="${buildDir}/version-probe.log" action="stop"/>
		</then>
	</if>

    <!-- Appends the known patch sets to the file -->
    <concat destfile="${buildDir}/version-probe.properties" append="true">
        <filelist dir="${templateDir}" files="patch-set.template"/>
    </concat>

    <!-- Load the file as properties -->
    <property file="${buildDir}/version-probe.properties"/>

    <!-- Searches for a patch set that matches the current version.
         Although the task returns a list, the file will never have duplicates.
         It looks for strings like core-version-1.46.2 -->
    <propertyselector property="suggestedPatch" delimiter=" " match="core\-version\-${current-version}"
        casesensitive="false"/>
    <propertyselector property="tempPatchList" delimiter="," match="core\-version\-.+"
        casesensitive="false"/>

    <!-- Get the values -->
    <var name="tempVar" value="" />
    <for list="${tempPatchList}" param="item">
        <sequential>
            <propertycopy name="tempValue" from="@{item}" override="true"/>
            <var name="tempVar" value="${tempVar}${tempValue}," />
        </sequential>
    </for>

    <!-- Sort them -->
    <sortlist property="tempVarSorted" value="${tempVar}" delimiter="," />

    <!-- Strip duplicates values (duplicate keys are NOT ALLOWED, but many keys might point to the same value) -->
    <var name="lastItem" value="" />
    <var name="patchList" value="" />
    <for list="${tempVarSorted}" param="item">
        <sequential>
            <if>
                <not>
                    <equals arg1="@{item}" arg2="${lastItem}" />
                </not>
                <then>
                    <var name="lastItem" value="@{item}"/>

                    <!-- Put delimiter only if it needs it -->
                    <if>
                        <equals arg1="${patchList}" arg2="" />
                        <then>
                            <var name="patchList" value="@{item}" />
                        </then>
                        <else>
                            <var name="patchList" value="${patchList},@{item}" />
                        </else>
                    </if>
                </then>
            </if>
        </sequential>
    </for>

    <!-- Asks the user what patch set to use -->
    <echo>
Current Alphalinc version is ${current-version}
    </echo>

    <if>
        <or>
            <equals arg1="${suggestedPatch}" arg2="" />
            <equals arg1="${suggestedPatch}" arg2=" " />
            <not>
                <isset property="suggestedPatch" />
            </not>
        </or>
        <then>
            <echo>
No tested patches for this version were found!
            </echo>
        </then>
        <else>
            <propertycopy name="suggestedPatchName" from="${suggestedPatch}" silent="true" />

            <echo>
The patch set that matches that version is ${suggestedPatchName}
            </echo>
        </else>
    </if>

    <echo>
The available patch sets are:
${patchList}
    </echo>

    <input message="Please type carefully the exact patch set to use:" validargs="${patchList}"
        addproperty="patchSet"/>

    <!-- Patch all the needed files so that they become hooks. the pactjhes go to a temp dir.
         If a target file for a patch is not found, the modified file is copied to that place. -->
    <for param="file">
        <path>
            <fileset dir="${basedir}/configuration/hooks/nm-patches/${patchSet}/patches/src/mac" defaultexcludes="false">
                <include name="**/*.patch"/>
            </fileset>
            <fileset dir="${basedir}/configuration/hooks/nm-patches/${patchSet}/patches/src/cls" defaultexcludes="false">
                <include name="**/*.patch"/>
            </fileset>
        </path>

        <sequential>
            <!-- Get a the name of the file without a complete path and without the .patch extension  -->
            <propertyregex override="true" property="relative-file"  input="@{file}"
                regexp=".*[/|\\]configuration[/|\\]hooks[/|\\]nm-patches[/|\\]${patchSet}[/|\\]patches[/|\\](.+)\.patch" select="\1"/>

            <!-- Get a the directory part of the file name -->
            <propertyregex override="true" property="dir-part" input="${relative-file}"
                regexp="(.*)[/|\\].+" select="\1"/>

<echo>
Preparing patch:
@{file}
Target:
${basedir}/${relative-file}
</echo>

            <!-- Create the directory if it doesn't exist -->
            <mkdir dir="${tempPatchDir}/${dir-part}"/>

            <!-- Verify if there is a target file -->
            <if>
                <not>
                    <available file="${basedir}/${relative-file}" property="test"/>
                </not>

                <then>
                    <!-- Copy the modified file, since there exists no file to be patched -->
                    <copy file="${basedir}/configuration/hooks/nm-patches/${patchSet}/modified-files/${relative-file}"
                         tofile="${tempPatchDir}/${relative-file}" />
                </then>
                <else>
                    <!-- Apply the patch: "patch -u file_before file_patch"
                         The errorlevel for patch is: 0: no differences, 1: differences found, 2:trouble=error -->
                    <exec dir="${basedir}" failonerror="false" executable="${basedir}\bin\patch"
                         resultproperty="errorlevel">
                        <arg value="--unified"/>
                        <arg value="--output=${tempPatchDir}${file.separator}${relative-file}"/>
                        <arg value="${basedir}${file.separator}${relative-file}"/>
                        <arg value="@{file}"/>
                    </exec>

                    <!-- Test if everything is all right -->
                    <fail message="An error has occured while trying to apply the patch!">
                        <condition>
                            <equals arg1="${errorlevel}" arg2="2" trim="true"/>
                        </condition>
                    </fail>
                </else>
            </if>
        </sequential>
    </for>

    <!-- Look for errors -->
    <concat destfile="${tempPatchDir}/concatenated.rej" append="false">
        <fileset dir="${tempPatchDir}" includes="**/*rej" defaultexcludes="false"/>
    </concat>

    <if>
        <available file="${tempPatchDir}/concatenated.rej" property="test" />
        <then>
        <echo>REJ found</echo>
        <fail>
.
The system could not apply all pacthes automatically.
The namespace is different enough that requires manual
placemente of the hooks. Take a look at directory
${tempPatchDir} to see what is still needed.
Aborted as planned.
        </fail>
        </then>
        <else>
            <!-- Copy patched files to their final destination -->
            <copy todir="${basedir}/src" overwrite="yes">
                <fileset dir="${tempPatchDir}/src" defaultexcludes="false">
                    <include name="**/*.mac.xml"/>
                    <include name="**/*.cls.xml"/>
                </fileset>
            </copy>
        </else>
    </if>
    <echo>
The system was patched. Now you must run ant
again to deploy the pacthed files into the namespace.
    </echo>
</target>
</project>
