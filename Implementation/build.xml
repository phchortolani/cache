<?xml version="1.0" encoding="iso-8859-1" ?>
<!--    
  This script controls the deployment of Alphalinc.

  Quick rules for changing this file:
  1) every thing should start with lowercase letters. The only place
  where uppercase letters are allowed is to captalize the first letter
  of concatenated words. Example: wordWordWord

  2) NEVER replace the TABs with spaces

  3) It is easier to use it if the TAB size is set to 2

  History:
  2010-Nov-30     v2.01   Pablo       New version with many changes (see the Solved list in the documentation)
  2009-Apr-17     v1.11   Soeiro      Finsihed pending issues with "patch-namespace". Now it handles different Alphalinc core versions 
  2009-Apr-01     v1.10   Soeiro      If there is no defined password, the Cache terminal doesn't wait for it anymore
  2009-Mar-31     v1.09   Soeiro      implementation of failsafe checks in case something is misconfigured (user, passwords, license, etc)
  2009-Feb-02     v1.08   Soeiro      better conflict resolution handling, better messages.
  2008-Dec-03     v1.07   Soeiro      Added target to help with migrating existing namespaces to source control
  2008-Nov-12     v1.06   Soeiro      Fixed dependency checks. In worst case, all targets run only once.
  2008-Oct-10     v1.05   Soeiro      Changed how import files are handled
  2008-Jul-22     v1.04   Soeiro      Added cache-exclusion list, backup.cmd  
  2008-Jul-02     v1.03   Soeiro      Added Cache configuration (globals)
  2008-Jun-30     v1.02   Soeiro      Verification of properly defined properties
  2008-Jun-19     v1.01   Soeiro      Added log; refactory of directories.
  2008-Jun-18     v1.00   Soeiro      Created
  -->

<project name="ASDE" default="deploy" basedir=".">
<description>
This build.xml file controls the execution of ANT. There are some
possibilities of use:
  a) "ant" - by calling only ANT, the default target (deploy) will be
     executed. The system will read the properties file, use the
     templates, generate scritps when necessary, load files and globals
     into Cache, compile Java classes, deploy classes to Tomcat,
     configure Tomcat, copy resources and CSP files to the correct
     places and configure Alphalinc (inside Cache). The system can
     automatically determine when something needs to be done so only
     the tasks that are really needed are executed.

 b) "ant some-target" - this way you can specify the target that you
    want to execute, instead of using the default 'deploy'. Some targets
    depend on others and also depend on a complex context. So only the
    targets with descriptions can be directly called (they will be
    listed with the "ant -p" command).

 b.1) "ant load-source-control" - loads only the source control classes
      into Cache. When you run just "ant" all modified files since the
      last "ant" run will get loaded into Cache. If you only want to
      extract all files (or some files) from a namespace that is not
      currently under source control, but don't want any file loaded
      from the file system to Cache this is the first step. On the other
      hand, if you are just working with a namespace that is already
      under source control, this target is not needed (just type "ant"
      after using bazaar).

The targets that you may call using "ant some-target-name" are:
</description>

<!-- Set global properties for this build -->
<property name="version" value="1.11"/>

<!-- loglevel=verbose is good, loglevel=debug is better to find out bugs -->
<record name="${basedir}/ant.log" append="no" loglevel="verbose"/>
  <tstamp>
    <format property="startTime" pattern="dd/MM/yyyy hh:mm:ss aa"/>
    <!-- offset="-5" unit="hour" -->
  </tstamp>
    
<!-- Other properties -->
<echo> Start Time: ${startTime}
</echo>
<property name="binDir" value="${basedir}${file.separator}bin" />
<property name="buildDir" value="${basedir}${file.separator}build" />
<property name="srcServletDir" value="${basedir}${file.separator}src${file.separator}servlet" />
<property name="templateDir" value="${basedir}${file.separator}configuration${file.separator}templates" />

<!-- source directories -->
<mkdir dir="${buildDir}"/>
<mkdir dir="${templateDir}"/>
<mkdir dir="${basedir}/web/resources"/>
<mkdir dir="${basedir}/web/csp" />

<!-- Source directories of optional files - we create them because
     the users has to know where to put them -->
<mkdir dir="${basedir}/web/reports"/>

<!-- Definition for ant-contirb libray use -->
<taskdef resource="net/sf/antcontrib/antlib.xml"/>

<target name="export-asde" depends="export-asde-init"
    description="Copies only the files related to the base asde environment to the
                 ../../../asde/dev directory"/>

<target name="overwrite-original-files" depends="overwrite-original-files-exec"
    description="Copies all current source-control related files that should be unmodified"/>
<target name="overwrite-modified-files" depends="overwrite-modified-files-exec"
    description="Copies all modified source-control related files"/>
<target name="generate-source-control-patches" depends="generate-source-control-patches-exec"
    description="Creates the patches for source control"/>
<target name="export-all-source" depends="export-cache"
    description="Export all source files from CACHE database to the project directory"/>
<target name="patch-namespace" depends="patch-namespace-exec"
    description="Apply the source control hooks to a new namespace"/>

<target name="copy-cachecomponents-files" depends="copy-cachecomponents-files-exec"
    description="Copies all current source-control related files to the config folder"/>
<target name="overwrite-source-control-package" depends="overwrite-source-control-package-exec"
    description="Copies all current source-control related files to the config folder"/>
<target name="load-source-control" depends="load-source-control-exec"
    description="Initialize source control in Cache (type 'ant load-source-control'). Only the source
                 control files are imported into cache."/>

<target name="clean" depends="delete-all"
    description="Cleans everything (deletes all deployed files and configs)."/>
<target name="deploy" depends="init,deploy-tomcat,deploy-cache"
    description="(default) Deploys Alphalinc locally. All targets are automatically called. You just
                 have to run 'ant'."/>
<target name="redeploy" depends="clean,deploy"
    description="Redeploy all artifacts (may take around 30 minutes)"/>

<target name="build-lib" depends="pack-cache-library"
    description="Builds a zip package containing components of a Cache library
                 defined in an XML file."/>
<target name="export-lib" depends="export-common"
    description="Exports a library to the common directory."/>
<target name="import-lib" depends="import-common"
    description="Imports a library from the common directory."/>
<target name="install-lib" depends="deploy-cache-library"
    description="Installs a zip package containing components of a Cache library
                 defined in an XML file."/>

<target name="backup-bazaar-pendencies" depends="backup-pendencies"
    description="Backups all bazaar dependencies."/>
<target name="clear-bazaar-pendencies" depends="clear-pendencies"
    description="Clears all bazaar dependencies."/>

<target name="help" description="Help message asking the user to run 'ant -p'">
<echo>Please use the command "ant -p" to see how to use this system.
</echo>
</target>

<import file="./ant/ant-config.xml" />
<import file="./ant/asde.xml" />
<import file="./ant/asde-patch.xml" />
<import file="./ant/asde-studiohook.xml" />
<import file="./ant/cache.xml" />
<import file="./ant/tomcat.xml" />
<import file="./ant/bazaar.xml" />
<import file="./ant/library.xml" />
</project>
