<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INTFRLine" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INTFRLine
	
#include INConst
#include COMSYS
#include COMGridEdit31
#include %occInclude
	
#define FORMFldINTFRLineQuantity	3
#define FORMFldINTFRLineUnit		4
#define FORMFldINTFRLineBOH			7
	
#define LogR(%1,%2) 	;
#define LogR2(%1,%2) 	;
#define LogRx(%1)		;
#define LogR2x(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INTFRLine("_%2_") : "_$zh $$$JournalOn
#;define LogR2(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INTFRLine("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)	 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogR2x(%1)	 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)	 	$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn

	
OnLineAdded(pintRow,pstrKey)
	;-------------------------------------------------------------------------------
	; Description : 
	;			
	; Called By :
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 25-Feb-2010	GRF		new variables
	; 02-Feb-2009	DavidR	SR16340: changed the passed in parameter to exclude stock 
	; 							that is blocked.
	; 26-Feb-2009	DavidR	SR16384: changed the BOH to use ::GetQtyAvailable to exclude
	; 							stock that has a reservation.
	; 19-Feb-2009	GRF		SR16042: based on INIssueLine
	;-------------------------------------------------------------------------------
	new fltBOHQty,idFromLocn,idItem,idLineNo,idTfrNo,objHeader,objLine,strStatus
	
	set strStatus = $$$OK
	
	set idTfrNo  = $$$KEY1(pstrKey)
	set idLineNo = $$$KEY2(pstrKey)
	
	set objHeader = $$$GRIDYFELDContainer	
	set objLine   = $get(^INTFRLine(0,idTfrNo,idLineNo,1))      ;$$$GRIDGetYFELD(pstrKey)
	
	set idFromLocn = $$$INTFRSendingLocation(objHeader)
	set idItem     = $$$INTFRLineItem(objLine)
	if (idItem'="") && (idFromLocn'="") {
 		set fltBOHQty = ##class(alSOH.iSOH).GetQtyAvailable(idItem,idFromLocn,"",$$$YES)
		do UpdateManualField^COMGridEdit31Interface(pintRow,$$$FORMFldINTFRLineBOH,+fltBOHQty)
	}
	quit strStatus
	
	
OnBlur(pintCol,pintRow,&pobjYFELD)
	;-------------------------------------------------------------------------------
	; This code is run when blurring out of a field in the Edit Grid for Transfer Order Lines.
	;
	; Params:
	; pintCol - Edit Grid Column Id
	; pintRow - Edit Grid Row Id
	; pobjYFELD - Transfer Order Line record
	;
	; ByRefs: GROW		Grid current Row Number
	;
	; Returns: Nothing
	;
	; History:
	; 25-Mar-2013	SCR		HEVA-811: Revomed Hard Coded Text
	; 25-May-2011	GRF		SR17250: revised & relocated GetQtyDecimals
	; 04-Feb-2011	GRF		SR17579: Rename CalculateBaseQuantity & idField;
	;							$justify(BaseQty) [TESTING]
	; 25-Feb-2010	GRF		new variables
	; 18-Jan-2010	shobby	SR15753: Cleanup redundant code.
	; 04-Nov-2009	DWR		SR16983: set unit directly from INART record
	; 20-May-2008	HQN		SR15762: Trigger Formatting of Quantity field regardless
	; 28-Apr-2006	PO		SR14589: Only perform onblur if item provided
	; 13-Apr-2006	PO		SR14427: Created
	;-------------------------------------------------------------------------------
	new GCOL,GROW,QOH,YFELD,blnIsConsumable,fltBOHQty,fltQty,fltQtyinIU,idClassFld
	new idItem,idLocn,intDecimals,objItem,objTFR
	
	$$$LogR("OnBlur",$get(pintRow)_","_$get(pintCol)_"<"_$get(pobjYFELD))
	
	set GCOL  = pintCol
	set GROW  = pintRow
	set YFELD = pobjYFELD
	
	set idItem  = $$$INTFRLineItem(pobjYFELD)
	quit:idItem=""
	
	set objItem = $get(^INART(0,idItem,1))
	set fltQty  = $$$INTFRLineQuantity(pobjYFELD) ; [Transfer Unit D4 (Requisition Unit)]
	
	set objTFR  = $$$GRIDYFELDContainer
	set idLocn  = $$$INTFRSendingLocation(objTFR)
	
	set QOH =  12    ;$$GetQtyByStorage(idItem,idLocn)                 ; FIXME : not used
	
	set blnIsConsumable = $$IsConsumable^INARTLOCPAR(idItem,idLocn)    ; FIXME : Not used <GRF>
	set idClassFld = $$$GetClassField(YFORM,pintCol)
	$$$LogRx("OB1:"_idClassFld_"<")
	
	if idClassFld = $$$FldINTFRLineItem {
		if idItem '= "" {  ; Set Transfer Unit to new item's Inventory Unit as initial value
			set $$$INTFRLineUnit(pobjYFELD) = $$$INARTUnitofMeasure(objItem)  ; [IU]    ; FIXME : Do we need to refresh YFELD? (esp. if passed implicitly to other routines)
			set $$$INTFRLineBaseQuantity(pobjYFELD) = fltQty
	   }
	}
	
	if (idClassFld = $$$FldINTFRLineUnit) || (idClassFld = $$$FldINTFRLineQuantity) {
	;	set $$$INTFRLineBaseQuantity(pobjYFELD) = $$CalcInventoryQty^INUOMConversion(idItem,$$$INTFRLineUnit(pobjYFELD),fltQty)  ; [IU] ; SR17579
	; vvv SR17579
		set fltQtyinIU  = $$CalcInventoryQty^INUOMConversion(idItem,$$$INTFRLineUnit(pobjYFELD),fltQty)  ; [IU]
	;	set intWWW003dp = $$$WWW003NoOfDecimals($get(^WWW003(0,"INTFRLine",$$$FldINTFRLineUnit,1)))  ; SR17250
	;	set intDecimals = $$GetQtyDecimals^COMGridEditUtil(YFORM,pintCol,$$$INARTUnitofMeasure(objItem),intWWW003dp)  ; SR17250
		set intDecimals = $$GetDecimalPlaces^COMUtilNum(YFORM,pintCol,$$$INARTUnitofMeasure(objItem),YFELD,"")
		set $$$INTFRLineBaseQuantity(pobjYFELD) = +$justify(fltQtyinIU,0,intDecimals)
	
	$$$LogRx("OB2:"_fltQtyinIU_"<"_$$$INARTUnitofMeasure(objItem)_"<"_intDecimals_"<")
	; ^^^ SR17579
	} 		
	
	if (idClassFld = $$$FldINTFRLineUnit) || (idClassFld = $$$FldINTFRLineQuantity) || (idClassFld = $$$FldINTFRLineItem) {
 		set fltBOHQty = ##class(alSOH.iSOH).GetQtyAvailable(idItem,idLocn,"",$$$YES)
		set YTOOLTIP  = $$$Text($listbuild("IN001149",fltBOHQty)) ; QtyOnHand (%1) ; HEVA-811
		;set YTOOLTIP  = "QtyOnHand = "_fltBOHQty
		do UpdateManualField^COMGridEdit31Interface(pintRow,$$$FORMFldINTFRLineBOH,fltBOHQty)   ; populate ^WWWDATEN
	}
	quit
	
	
OnBeforeDisplayCombo(pstrKeys,pobjTFR,pintCol,&pSUCH)
	;-------------------------------------------------------------------------------
	; Populates the Unit with the UOM as defined in INARTPACK only, excludes
	; units that the item does not come in.
	; 
	; set pSUCH as the items to be used when you override the list (set via blnOverride)
	;
	; Called By: COMGridEdit executable
	; 
	; Inputs:
	;	pstrKeys		YKEY
	;	pobjSummary		YFELD
	; 
	; Returns: $$$YES or $$$NO (override the data) 
	;
	; History:
	; 15-Jul-2011	GRF		SR17669: Call common code
	; 04-Nov-2009	DavidR	SR16983: Created
	;-------------------------------------------------------------------------------
	new blnOverride
	
	set blnOverride = $$$NO
	
	; Unit
	;---------------------------------------
	if pintCol = $$$FORMFldINTFRLineUnit {      ; SR17669 vvv
		set blnOverride = $$LoadCombo^INARTPACK($$$INTFRLineItem(pobjTFR),blnOverride,.pSUCH)
	}
	quit blnOverride
	/*
	if pintCol = $$$FORMFldINTFRLineUnit {
		kill pSUCH
		set pSUCH  = "SUCH"
		set idItem = $$$INTFRLineItem(pobjTFR)
		if idItem '= "" {
			set enumUnit = ""
			for {
				set enumUnit = $order(^INARTPACK(0,idItem,enumUnit))
				quit:enumUnit=""
					new blnOverride

				set pSUCH(enumUnit) = enumUnit
			}
			set blnOverride = $$$YES
		}
	}
	quit blnOverride
	*/                                           ; SR17669 ^^^
	
	
RefreshAllRows(YFORM,pintFormField)
	;-------------------------------------------------------------------------------
	; UNDER DEVELOPMENT
	; When there are multiple lines for the same item :
	;    When a Quantity field is changed the total quantity needs to be compared
	;    against the BOH figure.  If the total is > BOH all lines for that item need
	;    to be set to an error state; otherwise all need to be set to "No Error".
	; 
	; History:
	; 19-Feb-2009	GRF		SR16042: created
	;-------------------------------------------------------------------------------
	new idLine,intRow,objRow
	
	set idLine = ""
	for {
		set idLine = $order($$$WWWDATEN("REFERENCEROW",idLine))
		quit:idLine=""
		
		set intRow = $get($$$WWWDATEN("REFERENCEROW",idLine,1))
		continue:$get($$$WWWDATEN("KILLEDRECORD",idLine))
		
		set objRow = $$GetYFELD^COMGridEdit31G(YFORM,intRow)
		do OnBeforeFormat^COMGridEdit31Events(YFORM,"Y"_intRow_"_"_pintFormField,$$$YES,,objRow)
	}
	quit
	
	
OnBeforeFormat(pstrYFIELDNAME,pstrText,pobjLine)
	;-------------------------------------------------------------------------------
	; Determine how particular fields on the Transfer Order Line are to be displayed.
	;
	; Params:
	; pstrYFIELDNAME - Field name
	; pstrText - Not used
	; pobjLine - Transfer Order Line record
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 08-Jan-2010	shobby	SR15753: Let @netManager do the work.
	; 09-Dec-2009	shobby	SR17034: Consider Program when getting quantities.
	; 23-Mar-2009	GRF		SR16428: Call common code for CellColours; replace RED
	;							with strWarningColor; correct tag name
	; 26-Feb-2009	DavidR	SR16384: changed the BOH to use ::GetQtyAvailable to exclude
	; 							stock that has a reservation.
	; 18-Feb-2009	DavidR	SR16042: Changed the call to check the sum of lines to 
	; 							update a passed in parameter, the older routine was
	; 							not updating correctly 100% of the time on the screen
	; 							on blur of the qty field: now uses:
	; 							$$SumPrecedingLinesWithItem(idItem,intRow,.fltQuantity)
	; 16-Feb-2009	DavidR	SR16042: populate ^WWWDATEN to use manual field
	; 05-Feb-2009	DavidR	SR16042: set BOH to manual form field for validation
	; 07-Aug-2008	PP		SR15812: Created
	;-------------------------------------------------------------------------------
	new fltBOHQty,fltQuantity,fltSumQty,idClassField,idFromLocn,idItem,idKey,idLine
	new intCol,intRow,objItem,objTFR
 	
	;+++++++++++++++++++++++++++++++++++++++
	; Do ***NOT*** set YTEXT here as it is preserved to overwrite other fields
	; Call UpdateManualField^COMGridEdit31Interface instead (even if not a manual field)
	;+++++++++++++++++++++++++++++++++++++++
	quit:$translate(pobjLine,Y)=""
	
	set objTFR = $$$GRIDYFELDContainer	
	set idItem = $$$INTFRLineItem(pobjLine)
	 
	quit:($$$INTFRStatus(objTFR)'=$$$EnumINTFRSTATUSCreated)||(idItem="")
	
	; Grid Position
	;---------------------------------------
	$$$GRIDSplitKey(pstrYFIELDNAME,intRow,intCol) 
	set idClassField = $$$GetClassField(YFORM,intCol)
	
	;---------------------------------------
	
	set idFromLocn = $$$INTFRSendingLocation(objTFR)
	set objItem    = $get(^INART(0,idItem,1))
	
	;---------------------------------------
	; ITEM
	;---------------------------------------
	if (idClassField = $$$FldINTFRLineItem) && $$$INARTItemWithoutInventoryMaint(objItem) { // No longer need to be checking for non-stock items
		set YTOOLTIP = $$$Text("IN00445")  ; "Non-stock items can not be transferred."
		set YWARNING = $$$YES
	
	;---------------------------------------
	; Quantity
	;---------------------------------------
	} elseif idClassField=$$$FldINTFRLineQuantity {
	;	set fltQuantity = $$$INTFRLineBaseQuantity(pobjLine)   ; FIXME - If unit conversion may require this <GRF>
		set fltQuantity = $$$INTFRLineQuantity(pobjLine)
 		if fltQuantity < 0 {
			set YTOOLTIP = $$$Text("IN00490")    ; "Quantity can not be negative."
			set YWARNING = $$$YES
		
		} elseif +fltQuantity'=0 {
			set fltSumQty = ""
			
			set idKey     = $$ReferenceKey^COMGridEdit31Interface(YFORM,intRow)
			set idLine    = $$$KEY2(idKey)
 			set fltBOHQty = ##class(alSOH.iSOH).GetQtyAvailable(idItem,idFromLocn,"",$$$YES,$$$INTFRProgram1(objTFR))
			set fltSumQty  = $$SumPrecedingLinesWithItem(idItem,intRow)
			
			if (fltSumQty > fltBOHQty) { 
				set YTOOLTIP = $$$Text("IN00437")_" = "_$$^WWWTR(0,12,fltBOHQty)   ; "Available Quantity" ; HEVA-857
				set YWARNING = $$$YES
			}
		}
	}
	quit
	
	
IsGridEnabled(pidTFRLine)
	;-------------------------------------------------------------------------------
	; Whether Transfer Order Line Edit Grid is enabled.
	;
	; Params:
	; pidTFRLine - Transfer Order Line Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 26-Apr-2006	RPW/PO		SR14427: Created
	;-------------------------------------------------------------------------------
	new idTFR
	
	set idTFR = $$$KEY1(pidTFRLine)
	if (idTFR'="") && ($$$INTFRStatus($get(^INTFR(0,idTFR,1)))'=$$$EnumINTFRSTATUSCreated) {
		set Q = 1
	} else {
		set Q = 0
	}
	quit
	
	
OnDisplayRightClickMenu(pYKEY="",pYFELD="",pYFORM="")
	;-------------------------------------------------------------------------------
	; Entries to include in the Edit Grid context menu
	;
	; Params:
	; pYKEY - Transfer Order Line Id
	; pYFELD - Transfer Order Line record
	; pYFORM - Transfer Order Line Form Id
	;
	; ByRefs: None
	;
	; Returns: lstNewMenuItems - list containing custom entries to display in the Edit Grid context menu
	;
	; History:
	; 22-Apr-2006	PO		SR14427: Created
	;-------------------------------------------------------------------------------
	new blnEnabled,idDemand,idDemandKey,idDemandLocn,idSupply,idSupplyKey,idSupplyLocn,lstNewMenuItems
	
	set lstNewMenuItems = ""
	set pYKEY = $translate($get(pYKEY),"""")
	
	quit:(pYFELD="")||(pYKEY="") lstNewMenuItems
	
	; "Show Demand"
	;---------------------------------------
	set idDemandKey     = $$$INTFRLineDemand(pYFELD)
	set idDemandLocn    = $$$KEY1(idDemandKey)
	set idDemand        = $$$KEY2(idDemandKey)
	set blnEnabled      = (($get(idDemandLocn)'="") && ($get(idDemand)'=""))
	set lstNewMenuItems = lstNewMenuItems_$listbuild($listbuild("d.gif",$$$Text("IN00476")_" ["_idDemand_"]","CallBack(""ShowDemand^INTFRLine"","""_idDemandKey_""")",,blnEnabled))
	
	; "Show Supply"
	;---------------------------------------
	set idSupplyKey     = $$$INTFRLineSupply(pYFELD)
	set idSupplyLocn    = $$$KEY1(idSupplyKey)
	set idSupply        = $$$KEY2(idSupplyKey)
	set blnEnabled      = (($get(idSupplyLocn)'="") && ($get(idSupply)'=""))
	set lstNewMenuItems = lstNewMenuItems_$listbuild($listbuild("s.gif",$$$Text("IN00477")_" ["_idSupply_"]","CallBack(""ShowSupply^INTFRLine"","""_idSupplyKey_""")",,blnEnabled))
	
	quit lstNewMenuItems
	
	
ShowDemand(pidDemandKey="")
	;-------------------------------------------------------------------------------
	; Navigate to the Demand form.
	;
	; Params:
	; pidDemandKey - Demand key eg. Sending Site Location, Demand Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 22-Apr-2006	PO		SR14427: Created
	;-------------------------------------------------------------------------------
	new idDemandLocn,idDemand
	
	set idDemandLocn = $$$KEY1(pidDemandKey)
	set idDemand     = $$$KEY2(pidDemandKey)
	
	if '$$$NoKey(idDemandLocn) && '$$$NoKey(idDemand) {
		if $data(^INDRPDEMAND(0,idDemandLocn,idDemand,1)) {
			do GoToForm^COMUtilForm("INDRPDEMAND",pidDemandKey)
		} else {
			$$$Alert("IN00484")  ; "Demand no longer exists."
		}
	}
	quit
	
	
ShowSupply(pidSupplyKey="")
	;-------------------------------------------------------------------------------
	; Navigate to the Supply form.
	;
	; Params:
	; pidSupplyKey - Supply key eg. Receiving Site Location, Supply Id
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 22-Apr-2006	PO		SR14427: Created
	;-------------------------------------------------------------------------------
	new idSupplyLocn,idSupply
	
	set idSupplyLocn = $$$KEY1(pidSupplyKey)
	set idSupply     = $$$KEY2(pidSupplyKey)
	
	if '$$$NoKey(idSupplyLocn) && '$$$NoKey(idSupply) {
		if $data(^INDRPSUPPLY(0,idSupplyLocn,idSupply,1)) {
			do GoToForm^COMUtilForm("INDRPSUPPLY",pidSupplyKey)
		} else {
			$$$Alert("IN00483")  ;Supply no longer exists.
		}
	}
	quit
	
	
OnBeforeDelete(pobjLine) // No longer needs to be called - was used for live validation
	;-------------------------------------------------------------------------------
	; Keep errors being reported up to date.
	;
	; Params:
	; pobjLine - Transfer Order Line record
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 07-Aug-2008	PP		SR15812: Not necessary to call
	; 25-Apr-2006	PO		SR14427: Created
	;-------------------------------------------------------------------------------
	quit
	
	
AssociatedValidation(pstrYFELD,pstrFieldValue,pidAssociated)
	;-------------------------------------------------------------------------------
	; Check if the field is valid based on another field.
	;	COMUnit uses (idItem,idUnit,numQty,idLocn)
	;
	; Inputs:
	; pstrYFELD     : The data for the form
	; pstrFieldValue: The value of the field we are in
	; pidAssociated : The associated field
	;
	; Returns:
	; boolean - $$$YES is valid, $$$NO invalid
	;
	; History:
	; 26-Apr-2007	RPW		SRBR014310: Created
	;-------------------------------------------------------------------------------
 	new blnValid
 	
 	set blnValid = $$$YES
 	if pidAssociated=$$$FldINTFRLineUnit {
	 	set blnValid = $$IsValidQtyUnit^COMUnit($$$INTFRLineItem(pstrYFELD),$piece(pstrYFELD,Y,pidAssociated),pstrFieldValue,YLOCATION)
	}
	quit blnValid
	
	
OnBeforeSave(pYM,pYFORM,pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
	; Called By : OnBeforeSave^INTFRReqLine, form INTFRLine
	;
	; By Ref: YRETVAL
	;
	; History:
	; 10-Sep-2012	SCR		SR18109: Allow zero qty on Transfer request
	; 20-May-2008	HQN		SR15762: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$$NO                          ; FIXME : all NO?  - neither call uses return value
	if $$$INTFRLineQuantity(pYFELD) < 0 {
		set YRETVAL   = $$$MakeStatus("IN00490")  ; "Quantity can not be negative."
		set strStatus = $$$NO
		
	;} elseif $$$INTFRLineQuantity(pYFELD) = 0 {
	} elseif ($$$INTFRLineQuantity(pYFELD) = 0) && (YFORM '= "INTFRReqLine") { ;SR18109
		set YRETVAL   = $$$MakeStatus("IN00632")  ; "Quantity must be greater than 0."
		set strStatus = $$$NO
	}
	quit strStatus
	
	
Issue(pYKEY)
	;-------------------------------------------------------------------------------
	; Source from SOH into PickLines for this TFRLine
	; 
	; Called By: CreatePickTxn^INTRNPick
	; 
	; History:
	; 14-Oct-2013	SCR		CORE-266: Set Batch Based on Language
	; 10-Nov-2011	GRF		SR17951: idItem doesn't need to be extracted from onhItem
	; 24-Oct-2011	shobby	SR17933: Consider 'Program' when sourcing.
	; 09-Nov-2009	PPP		SR17017: Changed Qty from $$$INTFRLineQuantity to
	; 							$$$INTFRLineBaseQuantity; Currently Picked Unit is
	; 							always the Default Unit of Item
	; 24-Jun-2009	PPP		SR16682: Get the Bundle details directly from the Bundle
	;							Properties
	; 08-Oct-2008	PPP		SR15862: lineNumber set on the alDRP.dPlannedMovement is
	;							the pickLine cannot assume trn lines = trn pick lines
	; 03-Oct-2008	HQN		SR15987: lineNumber was incrementing only for this issue
	;							not taking into account prior issues, hence
	;							overwriting the key.  Used $$$KEY macros
	;							Return an error when no valid sourcing available.
	; 23-Sep-2008	HQN		SR15862: Reserve stock via dPlannedMovement
	;							Completely fill values for INTRFPickLine
	; 22-Sep-2008	HQN		SR15862: Created, Creates Issues(PickLines) for this
	;							TFRLine
	;-------------------------------------------------------------------------------
	new EnderecoFisico,PhysicalStorage,fltQtyIssued,idItem,idPickLine,idTFR,idTFRLine
	new idUnit,intPickCount,loopStock,lstAvailableIssues,objBundle,objDispatch
	new objFromLocn,objINLP,objItem,objPickLine,objReservation,objStorage,objTFR
	new objTFRLine,objToLocn,sc,strStatus
	
	set strStatus    = $$$OK
	set idTFR        = $$$KEY1(pYKEY)
	set idTFRLine    = $$$KEY2(pYKEY)
	set objTFR       = $get(^INTFR(0,idTFR,1))
	set objTFRLine   = $get(^INTFRLine(0,idTFR,idTFRLine,1))
	set intPickCount = +$order(^INTFRPickLine(0,idTFR,""),-1)
	set objFromLocn = ##class(alLOC.iULOC).GetLocation($$$INTFRSendingLocation(objTFR))
	// ToLocn is actually the intransit
	set objDispatch = $get(^INDRPUMLKW(0,$$$INTFRDispatch(objTFR),1))
	set objToLocn   = ##class(alLOC.iULOC).GetLocation($$$INDRPUMLKWLocation(objDispatch))
 	set idItem 		= $$$INTFRLineItem(objTFRLine)
	
 	// Changed Qty from $$$INTFRLineQuantity to $$$INTFRLineBaseQuantity
	;SR17933 set lstAvailableIssues = ##class(alDRP.iDRP).SourceIssue(idItem,$$$INTFRSendingLocation(objTFR),$$$INTFRLineBaseQuantity(objTFRLine))
    set lstAvailableIssues = ##class(alDRP.iDRP).SourceIssue(idItem,$$$INTFRSendingLocation(objTFR),$$$INTFRLineBaseQuantity(objTFRLine),$$$INTFRProgram1(objTFR)) ;SR17933
	
	if lstAvailableIssues.Count() > 0 {
		set objPickLine = ""
		for loopStock=1:1:lstAvailableIssues.Count() {
			quit:$$$ISERR(strStatus)
			
			set objItem      = lstAvailableIssues.GetAt(loopStock).Item
			set objStorage   = lstAvailableIssues.GetAt(loopStock).Storage
			set objBundle    = lstAvailableIssues.GetAt(loopStock).Bundle
			set fltQtyIssued = lstAvailableIssues.GetAt(loopStock).QtyToIssue
			
			// Reserve first
			set idPickLine   = $increment(intPickCount)
			
			set objReservation = ##class(alDRP.dPlannedMovement).%New()
			set objReservation.MovementType = ##class(alDRP.dMovementType.TransferIssue).%New()
			set objReservation.Item         = objItem
			set objReservation.FromLocn     = objStorage.Location
			set objReservation.FromStorage  = objStorage
			set objReservation.ToLocn       = objToLocn
			set objReservation.ToStorage    = ##class(alLOC.iULOC).GetStorage($$$INDRPUMLKWLocation(objDispatch),$$$INDRPUMLKWStockLocation(objDispatch)) ; 24-Sep-2008
			set objReservation.Bundle       = objBundle
			set objReservation.QtyRequired  = fltQtyIssued
			set objReservation.Reference    = idTFR
			set objReservation.LineNumber   = idPickLine
			
			set sc = objReservation.ChangeState(3)
			
			if $$$ISOK(sc) {
				// Create a PickLine based on this IssuedStock entry
		;		set $$$INTFRPickLineItem(objPickLine)                 = objItem.ItemId   ; SR17951
				set $$$INTFRPickLineItem(objPickLine)                 = idItem
				set $$$INTFRPickLineSendingStockLocation(objPickLine) = objStorage.Code
				set $$$INTFRPickLinePriorSendingBin(objPickLine)      = objStorage.Code	
				set $$$INTFRPickLineQuantity(objPickLine)             = fltQtyIssued
				set $$$INTFRPickLineBundle(objPickLine)               = objBundle.%Id()
				
				if ((+$$$WWWClientParamCoreChangesSESPE($get(^WWWClientParam(0,YM,1)))) ||
				   (+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(0,YM,1))))) {
					set objINLP 	    = $get(^INLP(YM,$$$INTFRSendingLocation(objTFR),objStorage.Code,1))
					set PhysicalStorage = $$$INLPPhysical(objINLP)
	
					if (PhysicalStorage'=""){
						set EnderecoFisico = $$SQLGetEnderecoParaOrdenar^VARSQL(PhysicalStorage)
					} elseif (PhysicalStorage=""){
						set EnderecoFisico = $$SQLGetEnderecoParaOrdenar^VARSQL($$$INLPStorage1(objINLP))
					}
					
					set $$$INTFRPickLineFREE1(objPickLine) = EnderecoFisico
				}
				
				//Currently picked unit is always the Default Unit.
				set idUnit = $$$INARTUnitofMeasure($get(^INART(0,idItem,1)))
				set $$$INTFRPickLineUnit(objPickLine)                 = idUnit
				set $$$INTFRPickLineSourceline(objPickLine)           = idTFRLine
				
 				//Get the Bundle details directly from the Bundle Properties
				set $$$INTFRPickLineBatch(objPickLine)                = ##class(alSOH.iUSOH).RenderBundle(objBundle,SPRACHE)
				set $$$INTFRPickLineLotNumber(objPickLine)            = objBundle.LotNumber
				set $$$INTFRPickLineUsebyDate(objPickLine)            = objBundle.UseByDate
	 			
				set $$$INTFRPickLineINWEQuantity(objPickLine)         = ##class(alSOH.iSOH).GetQtyOnHand(objItem.%Id(),objFromLocn.%Id(),objStorage.%Id())
				set $$$INTFRPickLineReservationDate(objPickLine)      = +$zdatetimeh(objReservation.DateTimeCreated,3)
				set $$$INTFRPickLinePickedQuantity(objPickLine)       = fltQtyIssued
				set $$$INTFRPickLinePriorPickedQuantity(objPickLine)  = fltQtyIssued
				set strStatus = $$$Save("INTFRPickLine",idTFR_","_idPickLine,objPickLine,$$$YES)

				
			} else {
				set strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
			}
		}
		
	} else {
		set strStatus = $$$MakeStatus(32075)    ; "No Source For Item"
	}
	quit strStatus
	
	
SumPrecedingLinesWithItem(pidItem,pintRow)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 23-Mar-2009	GRF		Correct tag name
	; 16-Feb-2009	DavidR	SR16042: Copied and modified from INTRNValidation
	;-------------------------------------------------------------------------------
	new fltSumQty,idBaseLine,idLine,objLine,fltQtyinIU
	
	set idBaseLine = $$$KEY2($$GetYKEY^COMGridEdit31G(pintRow))
	
	set fltSumQty = 0
	set idLine = ""
	for {
		set idLine = $order($$$WWWDATEN("REFERENCEROW",idLine))
 		quit:(idLine = "")
 	;	continue:(idLine = idBaseLine)  ; FIXME : drop this test and don't have to add current line qty back in to result <GRF>
 		continue:($get($$$WWWDATEN("KILLEDRECORD",$get($$$WWWDATEN("REFERENCEROW",idLine,1))))=1)
 		
 		set objLine = $$$GRIDGetYFELD(idLine)
 		continue:($$$INTFRLineItem(objLine) '= pidItem)
 		
 		set fltQtyinIU  = $$CalcInventoryQty^INUOMConversion(pidItem,$$$INTFRLineUnit(objLine),+$$$INTFRLineQuantity(objLine))  ; [IU]
 				
 		set fltSumQty = fltSumQty + fltQtyinIU
	}
 	
 	quit fltSumQty
	
]]></Routine>
</Export>