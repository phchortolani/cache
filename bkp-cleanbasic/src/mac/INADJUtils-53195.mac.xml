<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INADJUtils" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INADJUtils
	
#include %occInclude 
#include INConst
#include COMSYS
	
#define DELIM "~"
	
CheckForStock(pidItem,pidLocn,pidStorage,pfltQty,pidLot="",pdteUBD="",pidBrand="",pidOwner="",pidProgram="")
	;-------------------------------------------------------------------------------
	; Obtain a list of stock with attributes
	; (Lot Number, Brand, Owner, Program, Expiry Date and Bundle ID)
	; 
	; 
	; Returns:
	; 	Boolean
	; 	
	; History:
	; 
	; 25-May-2010	PPP		SR17320: Created
	;-------------------------------------------------------------------------------
	new arrBundleStock,blnCheck,dteUBD
	new idBrand,idBundle,idLocn,idLot,idOwner,idProgram,idStorage
	new intQty,objResultSet,sc,strAttrib

	set sc       = $$$OK
	set blnCheck = $$$OK

	set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetAllLocnBundleAttByPick")
	set sc = objResultSet.Execute(pidItem,pidLocn)

	if $$$ISOK(sc) {
		while (objResultSet.Next(.sc)) {
			set idBundle  = objResultSet.Data("Bundle")
			set idStorage = objResultSet.Data("Storage")
			set idLot     = objResultSet.Data("LotNumber")				
			set dteUBD    = objResultSet.Data("UseByDate")	 			
			set idBrand   = objResultSet.Data("Brand")
			set idOwner   = objResultSet.Data("Owner")
			set idProgram = objResultSet.Data("Program")
			set strAttrib = idStorage_$$$DELIM_idLot_$$$DELIM_dteUBD_$$$DELIM_idBrand_$$$DELIM_idOwner_$$$DELIM_idProgram
			set intQty    = objResultSet.Data("QtyOnHand")
			
			//write !,strAttrib,":",intQty
			set arrBundleStock(strAttrib) = $get(arrBundleStock(strAttrib))+intQty
		}
		
		set strAttrib = pidLocn_"||"_pidStorage_$$$DELIM_pidLot_$$$DELIM_pdteUBD_$$$DELIM_pidBrand_$$$DELIM_pidOwner_$$$DELIM_pidProgram
		if pfltQty>$get(arrBundleStock(strAttrib)) {
			set blnCheck = $$$NO
		}

	} else {
		set blnCheck = $$$NO	
	}
	quit blnCheck


CreateAdjustmentHeader(pidLocn,pidReasonCode,pidStocktake="",&strStatus)
	;-------------------------------------------------------------------------------
	; Creat an Adjustment Header
	;
	; Params: 	Stocktake Id
	;			Location 
	; 			Reason Code
	; Returns:	Adjustment Number and status by ref
	;
	; History:
	; 28-Oct-2010	PPP		SR17586: Created - Create an Adjustment Batch Header
	;-------------------------------------------------------------------------------
	new idAdj,objAdj
	
	set strStatus = $$$OK
	
	set objAdj = ""
	if $get(pidStocktake)'="" {
		set $$$INADJStocktake(objAdj)    = pidStocktake
		set $$$INADJNotes(objAdj)	= $$$Text("IN00440")_" "_pidStocktake
	}
	
	set $$$INADJReasonCode(objAdj)   = pidReasonCode
	set $$$INADJSiteLocation(objAdj) = pidLocn
	set $$$INADJStatus(objAdj)       = 0
	
	set idAdj     = $$^WWWNEXT("INADJ")
	set strStatus = $$$Save("INADJ",idAdj,objAdj,$$$YES)
	
	quit idAdj
	
	
CreateAdjustmentLine(pidAdj,pidItem,pintQty,pstrLot,pdteUseBy,pstrBrand="",pstrOwner="",pstrProgram="",pidStorage,&strStatus)
	;-------------------------------------------------------------------------------
	; Creat an Adjustment Line
	;
	; Params: 	Adjustment No
	; 			Item
	; 			Qty ( Base Item)
	; 			Lot
	; 			Use By Date
	; 			Storage
	; 			
	; Returns:	Line Number and status by ref
	;
	; History:
	; 28-Oct-2010	PPP		SR17586: Created - Create an Adjustment Batch Line 
	;-------------------------------------------------------------------------------
	new idLine,idLocn,idReasonCode,idUnit,objAdj,objLine,strKey
	
	set idLine = $order(^INADJLine(0,pidAdj,""),-1)+1
	
	set objAdj = $get(^INADJ(0,pidAdj,1))
	set idUnit       = $$$INARTUnitofMeasure($get(^INART(0,pidItem,1)))
	set idReasonCode = $$$INADJReasonCode(objAdj)
	set idLocn       = $$$INADJSiteLocation(objAdj)
	
	set objLine = ""
	set $$$INADJLineItem(objLine)			= pidItem
	set $$$INADJLineStockLocation(objLine)	= pidStorage
	set $$$INADJLineBaseQuantity(objLine)	= pintQty
	set $$$INADJLineQuantity(objLine)		= pintQty
	set $$$INADJLineUnit(objLine)			= idUnit
	set $$$INADJLineUnitCost(objLine) 		= $$GetCost^INItemCost(pidItem,idLocn)
	set $$$INADJLineTotalCost(objLine)   	= $$$INADJLineUnitCost(objLine) * $$$INADJLineBaseQuantity(objLine)
	set $$$INADJLineReasonCode(objLine)		= idReasonCode
	set $$$INADJLineLotNumber(objLine)		= pstrLot
	set $$$INADJLineExpirationDate(objLine)	= pdteUseBy
	set $$$INADJLineBrand(objLine)			= pstrBrand
	set $$$INADJLineOwner(objLine)			= pstrOwner
	set $$$INADJLineProgram1(objLine)		= pstrProgram
	
	set strKey    = pidAdj_","_idLine
	set strStatus = $$$Save("INADJLine",strKey,objLine,$$$YES)
	
	quit idLine
	
	
PostAdjustment(pidAdj)
	;-------------------------------------------------------------------------------
	; Post the Adjustment
	;
	; Params: 	Adjustment No
	; 			
	; Returns:	Status
	; 	
	; History:
	; 28-Oct-2010	PPP		SR17586: Created - Post an Adjustment Batch 
	;-------------------------------------------------------------------------------
	new fltTotCost,idLine,objAdj,objLine,strStatus
	
	set strStatus  = $$$OK
	set fltTotCost = 0
	set objLine    = ""
	
	set idLine = ""
	for {
		set idLine = $order(^INADJ(0,pidAdj,idLine))
		quit:idLine=""
		
		set fltTotCost = fltTotCost + $$$INADJLineTotalCost($get(^INADJLine(0,pidAdj,idLine,1)))
	}
	
	if fltTotCost {
		set objAdj = $get(^INADJ(0,pidAdj,1))
		set $$$INADJTotalCost(objAdj) = fltTotCost
		set strStatus = $$$Save("INADJ",pidAdj,objAdj,$$$YES)
	}

	//Post the Transaction
	if $$$ISOK(strStatus) {
		set strStatus = $$Transaction^COMTransaction("PostTxn^INADJ("""_pidAdj_""")",$$$YES)
	}
	quit strStatus
	
]]></Routine>
</Export>