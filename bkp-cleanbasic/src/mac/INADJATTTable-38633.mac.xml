<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INADJATTTable" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INADJATTTable
	
#include COMSYS
#include INConst
#include %occInclude
	
#define DELIM	$char(31)
#define FORMFldINADJATTLineAttributes    	11
	
ShowItems(pidEvent,pidParameters)
	;-------------------------------------------------------------------------------
	; Description :
	;			
	; Called By : OnBlur^INADJATTTableLine
	;             Form : INADJATTTable dynamic table - COMMENTED
	;		
	; Inputs : 
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 11-Sep-2013	SCR		CORE-266: Pass in Location Code
	; 13-Oct-2010	PPP		SR17566: Language Text
	; 16-Mar-2010	PPP		SR17237: Created
	;-------------------------------------------------------------------------------
	new idGrid,idItem,idLocn,lstColTypes,lstHeaders,idKey,idLine,idRelocate
	new objItem,objItemPolicy,objLocn,objMov,objMovLine,strFunction,strStatus
	
	set strStatus = $$$OK
	set idGrid    = $$$DYNTABLEGridLineFocusGrid(pidParameters)            
	
	kill ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle")
 
	set idKey      = $$ReferenceKey^COMGridEdit31Interface(idGrid,$$$DYNTABLEGridLineFocusRow(pidParameters))
	set idRelocate = $$$KEY1(idKey)
	set idLine     = $$$KEY2(idKey)
	
	if '$$Editable^INADJATT(idRelocate) quit                       ; *** EARLY EXIT ***
	
	set objMov     = $$$GRIDYFELDContainer
	set objMovLine = $$$GRIDGetYFELD(idLine)
	set strStatus  = $$GetLock^WWWMultiLock("INADJATT",idGrid,idRelocate_$$$COMMA_idLine)
  
	; setup JS Callback
	set idLocn  = $$$INADJATTLocation(objMov)
	set objLocn = ##class(alLOC.dLocation).%OpenId(idLocn)
	set idItem  = $$$INADJATTLineItem(objMovLine)
	set objItem = ##class(alINV.dItem).%OpenId(idItem,0)
	
	if objItem '= $$$NULLOREF {
		set objItemPolicy = objItem.ItemPolicy
	
		if objItemPolicy = $$$NULLOREF {     
			set strStatus = $$$MakeStatus("alINV0100",idItem) ; "Can not access Item Policy for item : %1"
			do DrawTable^WWW120DynTable($listbuild($$$Text(strStatus)),"dStockBundle",$listbuild($listbuild("left","display")),pidParameters,"",pidEvent)
		}                                      
		
		; Build Table below Dispense To Patient (Issue) grid lines (allows selection)
		;-----------------------------------   e.g.
		;  Stock Bundle              Storage         Lot Number
		;  ABC00123||5||A||2||86     A               1234567
		
		if $$$ISOK(strStatus) {      
			set strFunction = "FillLine"
			set strStatus   = $$BuildDynTableHeader(objItemPolicy,.lstHeaders,.lstColTypes,idLocn)
			do BuildDynTableRows(idItem,idLocn,$$$INADJATTLineFromStorage(objMovLine))
		
			if $$$ISERR(strStatus) {
				write "function "_strFunction_"() {"
				write "alert('"_$$$JSText($$$Text(strStatus))_"');"
				write "}"
			} else {
				write "function "_strFunction_"() {"
				write "CallBack(""SelectBundle^INADJATTTable"", getRowNum(getFocusField()), this.DiscData[0], this.DiscData[1], this.DiscData[2]);"
				write "}"
			}
 
			//SR16599
			//The last parameter (after pidEvent) needs to be set for the RowClick event, will be used by RowClick^WWW120DynTable
			//	e.g. "WarehouseLine^INReqTable"
			//	will be called with the following parameters
			//	1. Row ID
			//	2. Each entry in ^CacheTempDynamicTable(...,data) seperated by "~" will be a new parameter
			//			in this routines case : do WarehouseLine^INReqTable(pidRow,idLocn) will be executed on Row click
			do DrawTable^WWW120DynTable(lstHeaders,"dStockBundle",lstColTypes,pidParameters,strFunction,pidEvent,"SelectBundle^INADJATTTable")
		}
	
	} else {         ; Clear table	; "No Item Selected"   SR17566	
		do DrawTable^WWW120DynTable($listbuild($$$Text("IN01142")),
		                            "dStockBundle",
		                            $listbuild($listbuild("left","display")),
		                            pidParameters,
		                            "",
		                            pidEvent)
	}
	quit $$$OK
	
	
SelectBundle(pidRow,pidKey,pidStorage,pfltQty)
	;-------------------------------------------------------------------------------
	; 
	; Called By : CallBack in ShowItems and passed to DrawTable^WWW120DynTable in ShowItems
	;
	; Inputs : 
	;
	; Params:
	;
	; Returns:
	; History:
	; 16-Mar-2010	PPP		SR17237: Created
	;-------------------------------------------------------------------------------
	new arrAttrib,idBundle,LOCATION,objBundleStock,objAdj,sc
	
	set sc = $$$OK
	set objAdj   = $$$GRIDYFELDContainer
	set LOCATION = $$$INADJATTLocation(objAdj)
	
	; WARNING : "LOCATION" is required for relationship check
	;           ReferenceKey^COMGridEdit31Interface in SetRecord^COMGridEdit31S1
	
	do SetRecord^COMGridEdit31S1("INADJATTLine",pidRow,$$$FldINADJATTLineFromStorage_$$$COMMA_pidStorage)
	do SetRecord^COMGridEdit31S1("INADJATTLine",pidRow,$$$FldINADJATTLineUnitQuantity_$$$COMMA_pfltQty)

	set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(pidKey,0,.sc)

	if $$$ISOK(sc) {
		set idBundle = objBundleStock.Bundle.%Id()
		do SetRecord^COMGridEdit31S1("INADJATTLine",pidRow,$$$FldINADJATTLineBundle_$$$COMMA_idBundle)

		set sc = ##class(alSOH.iBundle).GetAttributesForBundle(idBundle,.arrAttrib)
		if $$$ISOK(sc) {
			if $data(arrAttrib("Brand")) {
				do SetRecord^COMGridEdit31S1("INADJATTLine",pidRow,$$$FldINADJATTLineNewBrand_$$$COMMA_$get(arrAttrib("Brand")))
			}
			if $data(arrAttrib("Lot Number")) {
				do SetRecord^COMGridEdit31S1("INADJATTLine",pidRow,$$$FldINADJATTLineNewLot_$$$COMMA_$get(arrAttrib("Lot Number")))
			}
			if $data(arrAttrib("Owner")) {
				do SetRecord^COMGridEdit31S1("INADJATTLine",pidRow,$$$FldINADJATTLineNewOwner_$$$COMMA_$get(arrAttrib("Owner")))
			}
			if $data(arrAttrib("Program")) {
				do SetRecord^COMGridEdit31S1("INADJATTLine",pidRow,$$$FldINADJATTLineNewProgram_$$$COMMA_$get(arrAttrib("Program")))
			}
			if $data(arrAttrib("Use By Date")) {			
				do SetRecord^COMGridEdit31S1("INADJATTLine",pidRow,$$$FldINADJATTLineNewExpiryDate_$$$COMMA_$get(arrAttrib("Use By Date")))
			}
		}	
	}
	quit
	
	
BuildDynTableHeader(pobjItemPolicy,&plstHeaders,&plstColTypes,pidLoc)
	;-------------------------------------------------------------------------------
	; Setup Table Headers
	; StockBundleId, BundleAttribute(s), QoH
	;         (1)               (2)                  (3)
	;     "Storage"     Attribute Headings       "QtyOnHand"
	;                   (e.g. "Lot Number")       
	; 
	; History:
	; 11-Sep-2013	SCR		CORE-266: Pass in Loc and get Policy Heading based on Loc
	; 16-Mar-2010	PPP		SR17237: Created
	;-------------------------------------------------------------------------------
	new idAttrKey,objAttr,strAttrName
	
	;---------------------------------------  1
 
	set plstHeaders  = $listbuild($$$Text("alISS0003"))       ; "Storage"
	set plstColTypes = $listbuild($listbuild("left","link"))
	
	;---------------------------------------  2
	
	do DynaHeadings^INBundleUtils(pobjItemPolicy,pidLoc,.plstHeaders,.plstColTypes)
	
	;---------------------------------------  3     Append QOH Header
	
	set plstHeaders  = plstHeaders_$listbuild($$$Text("alISS0005"))          ; "QtyOnHand"
 	set plstColTypes = plstColTypes_$listbuild($listbuild("right","link"))
 	
	quit $$$OK
	
	
BuildDynTableRows(pidItem,pidLocn,pidStore)
	;-------------------------------------------------------------------------------
	; Build an array "^CacheTempDynamicTable" which contains the lines corresponding
	; to the headings in BuildDynTableHeader
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 12-Aug-2014	SCR		SESDF-1505: Remove UseBy Date Check
	; 11-Sep-2013	SCR		CORE-266: Pass in Loc to BundleAttributes2^INBundleUtils
	; 18-Apr-2013	shobby	HEVA-154.1: Display descriptions in Dynatable
	; 18-Jan-2012	shobby	SR17922: Translate Program and Brand.
	; 16-Mar-2010	PPP		SR17237: Created
	;
	; FIXME: Validation of result table against headers
	;-------------------------------------------------------------------------------
	new arrBundleStock,dteVal,idBundleStock,idLine,idKey,idPolicyAttr
	new objAttr,objBundleStock,objINIssueLine,objItem,objLocn,objItemPolicy
	new objPolicyAttr,objResultSet,objStore,strAttrValues,fltQtyAvailable
	new objINADJATTLine
	
	set objItem  = ##class(alINV.iUINV).GetItem(pidItem)
	set objLocn  = ##class(alLOC.iULOC).GetLocation(pidLocn)
	
	if (objItem '= $$$NULLOREF) && (objLocn '= $$$NULLOREF) {
		kill ^CacheTempDynamicTable(YUCI,YUSER,"dBundleStock")
		set objItemPolicy = objItem.ItemPolicy
		
 		; Find and merge dBundleStock entries on screen
 		set idLine = ""
 		kill arrBundleStock
 		for {
	 		set idLine = $order(^WWWDATEN(YM,+$horolog,YUSER,"INADJATTLine","V","REFERENCEROW",idLine)) ;<<<CHECK IF ERROR could be INADJATTLine >>>
	 		quit:(idLine = "")
	 		
	 		set objINADJATTLine = $$$GRIDGetYFELD(idLine)
	 		continue:($$$INADJATTLineItem(objINADJATTLine) = "")
	 		continue:($$$INADJATTLineFromStorage(objINADJATTLine) = "")
	 		continue:($$$INADJATTLineBundle(objINADJATTLine) = "")
	 		continue:($data(^WWWDATEN(YM,+$horolog,YUSER,"INADJATTLine","V","KILLEDRECORD",idLine))) ; Ignore values inside killed records
	 		
	 		set idBundleStock = $$$INADJATTLineItem(objINADJATTLine)_"||"_$$$INADJATTLocation($$$GRIDYFELDContainer)_"||"_$$$INADJATTLineFromStorage(objINADJATTLine)_"||"_$$$INADJATTLineBundle(objINADJATTLine)
	 		set arrBundleStock(idBundleStock) = $get(arrBundleStock(idBundleStock)) + $$$INADJATTLineUnitQuantity(objINADJATTLine)
 		}
 		
		set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetViaLocation")
		if objResultSet.Execute(objItem.%Id(),objLocn.%Id()) {
			set idLine = 0
			while objResultSet.Next() {
				set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(objResultSet.Data("ID"))
				
				continue:objBundleStock.Storage.StorageIsBlocked     //SR17169 - Ignore blocked Storages
				
				set dteVal = objBundleStock.Bundle.UseByDate
				if dteVal'="" {
					; continue:(dteVal < $horolog) ; SESDF-1508
				}
				continue:($get(arrBundleStock(objBundleStock.%Id())) >= objBundleStock.QtyOnHand)
				set fltQtyAvailable = objBundleStock.QtyOnHand-##class(alSOH.iSOHBalance).GetQtyPlanned(objBundleStock.Item.%Id(),objBundleStock.Storage.Location.%Id(),objBundleStock.Storage.%Id(),objBundleStock.Bundle.%Id())
				continue:(fltQtyAvailable<=0)
				
				set ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle",$increment(idLine),"data") = objBundleStock.%Id()_Y_objBundleStock.Storage.Code_Y_fltQtyAvailable
			
			;-------------------------------  1
			
				set strAttrValues = objBundleStock.Storage.Code_Y
			
			;-------------------------------  2
				set strAttrValues=strAttrValues_$$BundleAttributes2^INBundleUtils(objBundleStock,pidLocn) ;HEVA-154.1
			;-------------------------------  3
			
				set strAttrValues = strAttrValues_fltQtyAvailable
				set ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle",idLine) = strAttrValues
			}
		}
	}
	quit
	
]]></Routine>
</Export>