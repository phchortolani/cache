<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESINReq" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include INConst
#include WWWConst
#include COMSYS
#include VARConst
#define RecordNotSelected ""
 
OnBeforeEditAccess()
	k ^CacheTempVARSESINReqGetPAMAFM(YM,YUSER)
	quit 1
 
VARSESINReq
	quit
 
getPAMs(pidItem, pidLocation, &parrPAMs)	
 
	new idPAM, idPAMLine, blnFoundPAM, objPAMLine, strPAMs, idLocation, arrOpenAFMs, objAFMLine,
		idItem, strStatus
		
	set strPAMs = ""
 
 	;if YBED="FRANK" for i=1:1:100 hang 1
 
	// Para todas as PAMs.
	$$$Order5(^VARTRKPAMLineFakes,YM,20,$$$NO,$$$Index(pidItem),idPAM)
		
		// Verificas as linhas que ainda não foram totalmente associadas.
		$$$Order6(^VARTRKPAMLineFakes,YM,20,$$$NO,$$$Index(pidItem),idPAM,idPAMLine)
		
			set objPAM     = $get(^VARTRKPAM(YM, idPAM, 1))
			set idLocation = $$$VARTRKPAMSetorSolicitante(objPAM)
			set strStatus  = $$$VARTRKPAMProcessado(objPAM)
			
			// Apenas para a Location desejada.
			continue:(pidLocation '= idLocation)
			
			// Apenas para PAMs não canceladas ou rejeitadas.
			continue:(strStatus '= 1)
			
			set parrPAMs(idPAM) = ""
			
		$$$End
 	$$$End
 
	// Pegar agora as PAMs que estão associadas com alguma AFM cujo item ainda não foi
	// totalmente recebido.
	do getAFMs(pidItem, pidLocation, .arrOpenAFMs)
	$$$Order1(arrOpenAFMs,idAFM)
	
		$$$Order3(^INAUFP,YM,idAFM,idAFMLine)
		
			set objAFMLine = $get(^INAUFP(YM, idAFM, idAFMLine, 1))
			set idItem     = $piece(objAFMLine, Y, 4)
			continue:(idItem '= pidItem)
			
			do GetPAMs^VARSESPamAfm(idAFM, idAFMLine, .parrPAMs)
		
		$$$End
	
	$$$End
	
	// Montando a lista de PAMs.
	$$$Order1(parrPAMs,idPAM)
	
		if strPAMs = "" {
			set strPAMs = idPAM
		} else {
			set strPAMs = strPAMs_";"_idPAM
		}
	
	$$$End
 
	quit strPAMs
 
getAFMs(pidItem, pidLocation, &parrOpenAFMs)
 
 	new arrPAMs, arrPAMLines, idPAM, idPAMLine, objPAMLine, idItem, strAFMs, arrAFMLines,
 		idAFM, idAFMLine, objAFMLine, idAFMLineStatus, idxLocation, idxItem, idxAFM
 
  	// Verificar todas as AFMLines que ainda não foram totalmente recebidas.
 	// Apenas para o local em questão.
 	set idxLocation = $$$Index(pidLocation)
 	set idxItem 	= $$$Index(pidItem)
 
	// Para o status = " " - Aberta;
	$$$Order6(^INAUFPs,YM,102,idxItem,idxLocation," ",idAFM)
		set parrOpenAFMs(idAFM) = "" 			
	$$$End	
 	
	// Para o status = 0 - Aberta;
 	$$$Order6(^INAUFPs,YM,102,idxItem,idxLocation,0,idAFM)
		set parrOpenAFMs(idAFM) = "" 			
	$$$End	
 	
	// Para o status = 1 - Processada - Aguardando Recebimento.
 	$$$Order6(^INAUFPs,YM,102,idxItem,idxLocation,1,idAFM)
		set parrOpenAFMs(idAFM) = "" 			
	$$$End	
 
	// Para o status = 2 - Parcialmente recebida.
 	$$$Order6(^INAUFPs,YM,102,idxItem,idxLocation,2,idAFM)
		set parrOpenAFMs(idAFM) = "" 			
	$$$End	
  	
  	// Montar a String de retorno
 	set strAFMs = ""
 	$$$Order1(parrOpenAFMs,idAFM)
 	
 		if strAFMs = "" {
	 		set strAFMs = idAFM
 		} else {
	 		set strAFMs = strAFMs_";"_idAFM
 		}
 	
 	$$$End
 
	quit strAFMs
 
 /*
getPAMs(pidItem, pidLocation, &parrPAMs)
	// Fazer uma loop na PAM e verificar se tem alguma linha não completada. Se for o caso,
	// inserir ela na lista.
 
	;if YBED = "FRANK" for i=1:1:100 hang 1
	kill ^CacheTempVARSESINReqGetPAMAFM(YM,YUSER,pidItem,pidLocation)
	new idPAM, idPAMLine, blnFoundPAM, objPAMLine, strPAMLines
	set strProcesso=""
	set strDetentorProcesso=""
	set strPAMLines = ""
	$$$Order4(^VARTRKPAMs,YM,1,pidLocation,idPAM)
		
		set blnFoundPAM = $$$NO
		
		$$$Order6(^VARTRKPAMLineFakes,YM,20,$$$NO,pidItem,idPAM,idPAMLine)
			
			quit:blnFoundPAM
			set objPAMLine  = $get(^VARTRKPAMLineFake(YM, idPAM, idPAMLine, 1))
			set blnFoundPAM = '$$$VARTRKPAMLineFakeQuantidadeTotalmenteAtend(objPAMLine)
		
		$$$End
		
		if blnFoundPAM {
			set objPAM = $get(^VARTRKPAM(YM,idPAM,1))
			set idProcesso = $piece($get(objPAM),Y,7)
			set DetentorDoProcesso = ""
			if ( $get( idProcesso ) '= "" ) {
				do Populate^VARSESProcesso(idProcesso)
				set DetentorDoProcesso = $piece( $get(^VARSESProcesso(YM,idProcesso,1)), Y, 8)
				if strProcesso="" {
					set strProcesso=idProcesso
					set strDetentorProcesso=DetentorDoProcesso
				} else {
					set strProcesso= strProcesso_";"_idProcesso
					set strDetentorProcesso=strDetentorProcesso_";"_DetentorDoProcesso
				}
			}
			if strPAMLines = "" {
				set strPAMLines = idPAM
			} else {
				set strPAMLines = strPAMLines_";"_idPAM		
			}
		}
	$$$End
	set strAFM=""
	set strAFMEmpenho=""
	
	set idAFM=""
	set idAFM=$order(^INAUFPs(YM,100,pidItem,pidLocation,1,idAFM))
	while idAFM'="" {
		set idEmpenho=$piece($GET(^INAUFP(YM,idAFM,1)),Y,336)
		if strAFM="" {
			set strAFM=idAFM
			set strAFMEmpenho=idEmpenho
		} else {
			set strAFM= strAFM_";"_idAFM
			set strAFMEmpenho=strAFMEmpenho_";"_idEmpenho
		}
		set idAFM=$order(^INAUFPs(YM,100,pidItem,pidLocation,1,idAFM))		
	}
	set idAFM=""
	set idAFM=$order(^INAUFPs(YM,100,pidItem,pidLocation,2,idAFM))
	while idAFM'="" {
			set idEmpenho=$piece($GET(^INAUFP(YM,idAFM,1)),Y,336)
		if strAFM="" {
			set strAFM=idAFM
			set strAFMEmpenho=idEmpenho
		} else {
			set strAFM= strAFM_";"_idAFM
			set strAFMEmpenho=strAFMEmpenho_";"_idEmpenho
		}
		set idAFM=$order(^INAUFPs(YM,100,pidItem,pidLocation,2,idAFM))		
	}
	set ^zzRubensDebug("AFM",pidItem)=strAFM
	set ^zzRubensDebug("Empenho",pidItem)=strAFMEmpenho
	
	set ^CacheTempVARSESINReqGetPAMAFM(YM,YUSER,pidItem,pidLocation)=Y_strAFM_Y_strProcesso_Y_strAFMEmpenho_Y_strDetentorProcesso
	quit strPAMLines
	
 */
FromListToString(&pList)
	new strResult, i
	set strResult = "", i = ""
	for {
		set i =$order(pList(i))
		quit:(i = "")
		set strResult = strResult_$case(strResult,"":"",:";")_i
	}
	quit strResult
 
COMViewPAMs()
	do Initialise^COMViewCustom("VARSESCOMTempPAMs","SelectedPAMs^VARSESINReq",$$$YES)
	//do AddFilter^COMViewCustom("P1","=",YUSER)                       // not completed
	do Start^COMViewCustom()
	quit
	
SelectedPAMs(pobjResultSet) 
    IF (pobjResultSet.Next()){
 
    set pYKEY=$$GetID^COMViewCustom(pobjResultSet)
 
  	do RedirectForm^COMUtilForm("VARTRKPAM",$piece(pYKEY,YKOMMA,2),YBACK_","_"","","")
    }
 
 QUIT $$$OK
	
COMViewAFMs()
	do Initialise^COMViewCustom("VARSESCOMTempAFMs","SelectedAFMs^VARSESINReq",$$$YES)
	//do AddFilter^COMViewCustom("P1","=",YUSER)                       // not completed
	do Start^COMViewCustom()
	quit
	
SelectedAFMs(pobjResultSet) 
    IF (pobjResultSet.Next()){
 
    set pYKEY=$$GetID^COMViewCustom(pobjResultSet)
 
  	do RedirectForm^COMUtilForm("VARSESINAUF",$piece(pYKEY,YKOMMA,2),YBACK_","_"","","")
    }
 
 QUIT $$$OK	
	
getEmpenhos(pItem, pLocation, &parrEmpenhos)
 
	new arrAFMs, idAFM, objAFM, idEmpenho
	
	do getAFMs(pItem, pLocation, .arrAFMs)
 
	$$$Order1(arrAFMs,idAFM)
	
		set objAFM    = $get(^INAUF(YM, idAFM, 1))
		set idEmpenho = $piece(objAFM, Y, 336)
		set parrEmpenhos(idAFM) = idEmpenho
 
	$$$End
 
	quit
	
 
getProcessos(idItem, Local, &parrProcessos)
 
	new arrPAMs, idPAM, objPAM, idProcesso, strProcessos
	
	do getPAMs(idItem, Local, .arrPAMs)
	
	$$$Order1(arrPAMs,idPAM)
	
		set objPAM = $get(^VARTRKPAM(YM, idPAM, 1))
		set idProcesso = $$$VARTRKPAMNumerodoProcesso(objPAM)
		set parrProcessos(idPAM) = idProcesso
	
	$$$End
 
	quit 
	
getDetentorProcessos(idItem,Local, &arrDetentores)
 
	new arrProcessos, idPAM, strDetentorProcesso, objProcesso, strDetentores
	
	do getProcessos(idItem, Local, .arrProcessos)
 
	$$$Order1(arrProcessos,idPAM)
	
		set strDetentorProcesso =""
		set Processo= arrProcessos(idPAM)
		if Processo'="" {
			do Update^VARSESProcesso(Processo)
			set objProcesso = $get(^VARSESProcesso(YM, Processo, 1))
			SET processolinha = ""
			set processolinha = $order(^VARSESProcessoLinha(YM,Processo,processolinha))
			if processolinha = "" {
				set strDetentorProcesso = $$$VARSESProcessoDetentorAtual(objProcesso)
				set dataprocesso=$$$VARSESProcessoDataHoraUltimaMovimentaca(objProcesso)
				set strDetentorProcesso =strDetentorProcesso_"-"_dataprocesso
			}
			else {
				set strDetentorProcesso=$piece($get(^VARSESProcessoLinha(YM,Processo,processolinha,1)),Y,3)
				set dataprocesso=$zdate($piece($get(^VARSESProcessoLinha(YM,Processo,processolinha,1)),Y,1),4)
				set strDetentorProcesso =strDetentorProcesso_"-"_dataprocesso
			}
		}
		;if strDetentorProcesso="" set strDetentorProcesso="Sem Detentor"
		set arrDetentores(idPAM) = strDetentorProcesso
		
	$$$End
	/*
	set strDetentores = ""
	$$$Order1(arrDetentores,strDetentorProcesso)
	
		if strDetentores = "" {
			set strDetentores = strDetentorProcesso
		} else {
			set strDetentores = strDetentores_";"_trDetentorProcesso
		}
	
	$$$End
	*/ 
	quit
	
getGroup(idItem) 
	if idItem="" quit ""
	set objInart=$get(^INART(YM,idItem,1))
	if objInart="" quit ""
	quit $piece(objInart,Y,30)
	
getIC(idItem)
	if idItem="" quit ""
	set objInart=$get(^INART(YM,idItem,1))
	if objInart="" quit ""
	quit $piece(objInart,Y,285)
 
getABC(idItem)
	if idItem="" quit ""
	set objInart=$get(^INART(YM,idItem,1))
	if objInart="" quit ""
	quit $piece(objInart,Y,177)
	
getPrecoUltimaCompra(idItem)
	new objUltimaCompra, fltPrecoUnitario
	if idItem="" quit ""
	
	set objUltimaCompra  = $$getUltimaCompra(idItem)
	set fltPrecoUnitario = $piece(objUltimaCompra, Y, 2)
	
	quit fltPrecoUnitario
	
getUltimaCompra(CodProduto)
	// Retorna uma string delimitada com os dados da última compra:
	// piece 1: quantidade
	// piece 2: Preço
	// piece 3: valor total
	// piece 4: fornecedor
	// piece 5: data
	// piece 6: número da ordem de compra (AFM)
	// piece 7: número do item do pedido
	
	&sql(
		DECLARE C1 CURSOR FOR
		SELECT 
			INAUFP.Quantity AS Quantidade,
			INAUFPK.UnitPrice AS PrecoUnitario,
			INAUFP.Cost AS ValorTotal,
			INAUF.SupplierNumber||' - '||INLIEF.ShortName AS Fornecedor,
			INAUF.OrderDate AS Data,
			INAUF.OrderNumber AS NumAFM,
			INAUFP.LineItem AS NumItemAFM
		INTO
			:Quantidade, :PrecoUnitario, :ValorTotal, :Fornecedor, :Data, :NumAFM, :NumItemAFM 
		FROM INAUFP, INAUF, INAUFPK, INLIEF 
		WHERE  INAUF.OrderNumber = INAUFP.OrderNo
		  AND  INAUFP.OrderNo = INAUFPK.OrderNumber
		  AND  INAUFP.LineItem = INAUFPK.LineItem
		  AND  INAUF.SupplierNumber = INLIEF.SupplierNumber
		  AND ItemNumber = :CodProduto
		ORDER BY Data DESC
	)
	&sql(OPEN C1)
	&sql(FETCH C1)
	set returnValue = ""
	if (SQLCODE = 0) {
		set returnValue = Quantidade_Y_PrecoUnitario_Y_ValorTotal_Y_Fornecedor_Y_$$SQLGetFormatDate^VARTRKSQL(Data)_Y_NumAFM_Y_NumItemAFM
	}
	/*
	While (SQLCODE = 0) {
		Write id, ":  ", name,!        
		&sql(FETCH C1)
	}
	*/
 	&sql(CLOSE C1)
	quit returnValue
	
getMOV(idItem,pLocation)
	// 25/01/2008, Andre - Obter MOV de INDRPITEM:
	quit $$getMOV^VARSESINDRPITEM(idItem,pLocation)
	/*
	if idItem="" quit ""
	if pLocation="" quit ""
	set objForeRest = $get(^INForeRest(YM, pLocation, idItem, 1))
	if objForeRest="" quit ""
	quit $piece(objForeRest, Y, 21)
	*/
	
getCMMRede(idItem)
	// 25/01/2008, Andre - Obter CMMRede de INART:
	quit $$getCMMRede^VARTRKINART(idItem)
	/*
	if idItem="" quit ""
	set objForeRest = $get(^INForeRest(YM, " ", idItem, 1))
	if objForeRest="" quit ""
	quit $piece(objForeRest, Y, 22)
	//quit $$PegaSaidas^VARSESINARTHISTL(YM,pLocation,idItem,$h-30,$h)
	*/
 
PopulaCMM
	do ^WWWVAR
	set YM=0
	set data1=20070901
	set data2=20071230
	set data1=$zdh(data1,8)
	set data2=$zdh(data2,8)
	set item=""
	set item=$order(^INART(YM,item))
	while item'="" {
		w item
		w !
		set Local=""
		set Local=$order(^WWW0121(YM,YM,Local))
		set CMMR=0
		set CMML=0
		while Local'= "" {
			set CMML=$$PegaSaidas^VARSESINARTHISTL(YM,Local,item,data1,data2)\4
			IF ((CMML<0) || (CMML="")) set CMML=0
			set $piece(^INForeRest(YM, Local, item, 1), Y, 23)=CMML // CMM Local
			set $piece(^INForeRest(YM, Local, item, 1), Y, 21)=CMML //MOV
			set CMMR=CMMR+CMML
			set CMML=0
			set Local=$order(^WWW0121(YM,YM,Local))
		}
		set $piece(^INForeRest(YM, " ", item, 1), Y, 22)=CMMR //CMM Rede
		set item=$order(^INART(YM,item))
	}
	quit
	
KillCMM
	do ^WWWVAR
	set YM=0
	set item=""
	set item=$order(^INART(YM,item))
	while item'="" {
		w item
		w !
		set Local=""
		set Local=$order(^WWW0121(YM,YM,Local))
		while Local'= "" {
			set $piece(^INForeRest(YM, Local, item, 1), Y, 23)=""
			set $piece(^INForeRest(YM, Local, item, 1), Y, 21)=""
			set Local=$order(^WWW0121(YM,YM,Local))
		}
		set $piece(^INForeRest(YM, " ", item, 1), Y, 22)=""
		set item=$order(^INART(YM,item))
	}
	quit	
 
 
PopulaCMM2
	do ^WWWVAR
	set YM=0
	SET pLocation="5006"
	set Local="5"
	set data1=20070901
	set data2=20071230
	set data1=$zdh(data1,8)
	set data2=$zdh(data2,8)
	set CMM40L=$$PegaSaidas^VARSESINARTHISTL(YM,pLocation,"90040",data1,data2)\4
	set CMM41L=$$PegaSaidas^VARSESINARTHISTL(YM,pLocation,"90041",data1,data2)\4
	set CMM43L=$$PegaSaidas^VARSESINARTHISTL(YM,pLocation,"90043",data1,data2)\4
	set CMM45L=$$PegaSaidas^VARSESINARTHISTL(YM,pLocation,"90045",data1,data2)\4
	set $piece(^INForeRest(YM, Local, "90040", 1), Y, 23)=CMM40L
	set $piece(^INForeRest(YM, Local, "90041", 1), Y, 23)=CMM41L
	set $piece(^INForeRest(YM, Local, "90043", 1), Y, 23)=CMM43L
	set $piece(^INForeRest(YM, Local, "90045", 1), Y, 23)=CMM45L
	set $piece(^INForeRest(YM, Local, "90040", 1), Y, 21)=CMM40L
	set $piece(^INForeRest(YM, Local, "90041", 1), Y, 21)=CMM41L
	set $piece(^INForeRest(YM, Local, "90043", 1), Y, 21)=CMM43L
	set $piece(^INForeRest(YM, Local, "90045", 1), Y, 21)=CMM45L
	quit
 
getCMMLocal(idItem,pLocation)
	// 25/01/2008, Andre - obtendo CMML de INDRPITEM:
	quit $$GetCMML^VARSESINDRPITEM(YM,pLocation,idItem)
	/*
	if idItem="" quit ""
	set objForeRest = $get(^INForeRest(YM, pLocation, idItem, 1))
	if objForeRest="" quit ""
	quit $piece(objForeRest, Y, 23)
	*/
	
getCMD(idItem,pLocation)
	// 25/01/2008, Andre - obtendo CMD de INDRPITEM:
	quit $$getCMD^VARSESINDRPITEM(idItem,pLocation)
	/*
	set CMM=$$getCMMLocal(idItem,pLocation)
	if CMM="" QUIT ""
	quit CMM\30
	*/
 
getEF(idItem,pLocation)
	if idItem="" quit ""
	quit $$^INARTMENGE(idItem,,pLocation,,1,0,1)
	
getEFR(idItem)
	if idItem="" quit ""
	quit $$GetQty^INARTMENGE(idItem)
	
	
getLocalCentral(pItem)
	if pItem="" quit ""
	set objInart=$get(^INART(YM,pItem,1))
	if objInart="" quit ""
	//if $piece(objInart,Y,345)="FARMACIA" QUIT $piece($GET(^VARSESParams(YM,YM,1)),Y,2)
	//if $piece(objInart,Y,345)="ALMOXARIFADO" QUIT $piece($GET(^VARSESParams(YM,YM,1)),Y,1)
	if $piece(objInart,Y,345)="FARMACIA" QUIT $piece($GET(^VARSESParams(YM,YM,1)),Y,2)
	if $piece(objInart,Y,345)="ALMOXARIFADO" QUIT $piece($GET(^VARSESParams(YM,YM,1)),Y,1)
	quit ""
 
getEFC(idItem)
	if idItem="" quit ""
	set LocalCentral=$$getLocalCentral(idItem)
	if LocalCentral="" quit ""
	quit $$^INARTMENGE(idItem,,LocalCentral,,1,0,1)
	
getEFNIAB(idItem)
	if idItem="" quit ""
	quit $$^INARTMENGE(idItem,,5070,,1,0,1)
	
getEFNMAC(idItem)
	if idItem="" quit ""
	quit $$^INARTMENGE(idItem,,5071,,1,0,1)
 
getEM(idItem,Local)
	if idItem="" quit ""
	// 25/01/2008, Andre: 
	if $get(Local) = "" quit ""
 
	quit $$$INDRPITEMDefaultStockQuantity($get(^INDRPITEM(YM,Local,idItem,1)))
 
getES(idItem,Local)
	if $get(idItem)="" quit ""
	// 25/01/2008, Andre: não faz sentido pegar ES de outro local que não o corrente (informado no parâmetro):
	if $get(Local) = "" quit ""
	/*
	set LocalCentral = $$getLocalCentral(idItem)
	quit:(LocalCentral = "") ""
	*/
	;if (YBED = "FRANK") && (idItem = "90043") for i=1:1:100 hang 1
	quit $$$INDRPITEMSafetyStock($get(^INDRPITEM(YM,Local,idItem,1)))
 
getPR(idItem,Local)
	if idItem="" quit ""
	// 25/01/2008, Andre: 
	if $get(Local) = "" quit ""
	quit $$$INDRPITEMReOrderPoint($get(^INDRPITEM(YM,Local,idItem,1)))
 
getQuantidadePendente(idItem,Local)
	if idItem="" quit ""
	set result = +$$getPendingQtyOnOrders(idItem," ",Local)
	quit result
 
	
getEV(pCodItem,pCodLocation)
	// Estoque virtual (EV) = Projected Available Balance (PAB)
	if ( $get(pCodItem) = "" ) { quit "" }
	if ( $get(pCodLocation) = "" ) { quit "" }
 
	// Andre, 21/02/2008:	
	set EV = $$getEF(pCodItem,pCodLocation) + $$getQuantidadePendente(pCodItem,pCodLocation) + $$GetQuantidadeAAtenderPorItem^VARTRKPAMLineFake(pCodItem,pCodLocation)
	
	// Andre, 21/02/2008:	
	/*
	set daysToCalc = $piece($get(^VARSESParams(YM,YM,1)),Y,6)
	if ( $get(daysToCalc) = "" ) {
		set daysToCalc = 365 // Se parâmetro indefinido, define 1 ano p/calcular PAB.
	}
	set EV = $$GetPAB^INART(pCodItem,pCodLocation,$H+daysToCalc)
	set EV = EV + $$GetQuantidadeAAtenderPorItem^VARTRKPAMLineFake(pCodItem, pCodLocation)
	*/
	quit EV
	
getEVText(pCodItem,pCodLocation)
	// Texto contendo Estoque virtual (EV) e dias futuros usados no cálculo
	set daysToCalc = $piece($get(^VARSESParams(YM,YM,1)),Y,6)
	if ( $get(daysToCalc) = "" ) {
		set daysToCalc = 1000
	}
	set EP = $$getEV(pCodItem,pCodLocation)
	quit EP_" (em "_daysToCalc_" dias)"
	
getExisteMovimentacao(pLocal,pItem)
	set existe=0
	if $order(^INARTHISTL(YM,pItem,pLocal,"")) '= "" set existe=1
	quit existe
	
calculoDuracaoEstoque(pItem,pLocal)
	set CMD=$$getCMD(pItem)
	set EF=$$getEF(pItem,pLocal)
	new resultado
	set resultado=0
	if ((CMD=0) || (CMD="")) quit resultado
	if ((EF=0) || (EF="")) quit resultado
	set resultado=EF\CMD
	quit resultado
	
getPendingQtyOnOrders(pidItem,pidSupplier,pidLocation)
	
	new idAFM, idLinhaAFM, objLinhaAFM, qtdPedida, qtdRecebida, fltPendingQty
	
	// 05/02/2008, Andre: Nova versão da função que obtém qtd recebida do campo 291 da própria INAUFP:
 
	set fltPendingQty = 0
	
	set idAFM = ""
	for {
		set idAFM = $order(^INAUFPs(YM,100,$$^WWWUMLAU(pidItem,1),idAFM))
		quit:(idAFM = "")
		
		set idLinhaAFM = ""
		for {
			set idLinhaAFM = $order(^INAUFPs(YM,100,$$^WWWUMLAU(pidItem,1),idAFM,idLinhaAFM))
			quit:(idLinhaAFM = "")
			
			set objLinhaAFM = ""
			set objLinhaAFM = $get(^INAUFP(YM,idAFM,idLinhaAFM,1))
			continue:($get(objLinhaAFM) = "")
			
			set qtdPedida = +$piece(objLinhaAFM,Y,5)
			set qtdRecebida = +$piece(objLinhaAFM,Y,291)
			
			if ( qtdRecebida < qtdPedida) {
				set fltPendingQty = fltPendingQty + qtdPedida - qtdRecebida
			}
		}
	}
	quit fltPendingQty
 
	// Andre, 05/02/2008: comentando versão antiga da função:
 
	/*
getPendingQtyOnOrders(pidItem,pidSupplier,pidLocation)
	;-------------------------------------------------------------------------------
	; Return the total of items not received and not mapped  
	; 
	; Params:
	; 	pidItem - item number
	; 	pidSupplier - supplier of item
	; 	pidLocation - requesting location
	;
	; Returns:	total of items not received and mapped
	;
	; History:
	; 15-Dec-2006	HJRB	BR014345: Created
	;-------------------------------------------------------------------------------
 	new lstNotReceived,lstNotMapped,fltPendingQty
 
	// Andre, 26/01/2008: Nota: apesar do supplier ser passado como parâmetro para
	// a rotina a seguir, a rotina não o utiliza para nada, obtendo todas as ordens
	// não-totalmente recebidas, independente de fornecedor:
	set lstNotReceived = $$getNotReceivedOrders^INAUFRELEASE(pidItem,pidSupplier,pidLocation)
	//set lstNotMapped = $$getNotMappedOrders(pidItem,pidSupplier,pidLocation)
	
	set fltPendingQty = $$getNotReceivedQty^INAUFRELEASE(lstNotReceived)
	//set fltPendingQty = fltPendingQty + $$getNotMappedQty(lstNotMapped)
 	
	quit fltPendingQty
 	*/
	
	
	
	
getPadrao(pidItem)
	new strStatus
	set strStatus = "Não"
	if ( $get(pidItem) = "" ) { 
		quit strStatus
	}
	if (+$piece($get(^INART(YM,$p(YFELD,Y,1),1)),Y,281) =1) {
		set strStatus = "Sim" 
	}
	quit strStatus
	
getFornecedores(pItem, pLocation, &parrFornecedores)
 
	new arrAFMs, idAFM, objAFM, idaFornecedor, idFornecedor
	
	do getAFMs(pItem, pLocation, .arrAFMs)
 
	$$$Order1(arrAFMs,idAFM)
	
		set objAFM    = $get(^INAUF(YM, idAFM, 1))
		set idaFornecedor = $piece(objAFM, Y, 12)
		set idFornecedor  = $extract($piece($get(^INLIEF(YM,idaFornecedor,1)),Y,4),1,12)
		set parrFornecedores(idAFM) = idFornecedor
 
	$$$End
 
	quit	
]]></Routine>
</Export>