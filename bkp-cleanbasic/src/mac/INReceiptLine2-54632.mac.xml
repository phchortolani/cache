<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INReceiptLine2" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INReceiptLine2
	;-------------------------------------------------------------------------------
	; Form processing for form INReceiptLine
	; 
	; History:
	; 14-Aug-2009	GRF		SR16829: Split form calls from INReceiptLine
	;-------------------------------------------------------------------------------
	;+++++++++++++++++++++++++++++++++++++++
	; see INRECDoco
	;+++++++++++++++++++++++++++++++++++++++
#include COMSYS
#include INConst
	
#define LogR(%1,%2)	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2)	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INReceiptLine2("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
IsReceivable(pidReceipt,pidRECLine,pobjRECLine="")
	;-------------------------------------------------------------------------------
	; CalledFrom: IsReceivable^INReceiptButtonP
	; 
	; Inputs:
	;	pobjRECLine		^INRECLine data (YFELD)
	; 
	; History:
	; 10-Sep-2013	SCR		CORE-266: Pass in Location to ValidateItemAttributes
	; 15-Jun-2011	GRF		SR17716: TSU Closed now based on Status
	; 24-May-2011	GRF		SR17753: Check for closed Temporary Storage Unit
	; 14-Aug-2009	GRF		SR16829: idSummLine wasn't defined; objSummRow and
	; 							objSummary were the same once sub-line fixed - clean
	; 							up usage
	; 10-Aug-2009	DWR		SR16829: Comment out check for Order number, it needs to
	; 							validate against INRECSummary Line not the order in
	; 							this instance. If it is a sub-line, convert to
	; 							check against the main INRECSummary Line number.
	; 03-Aug-2009	PPP		SR16821: Check the INRecLine Qty = INRECSummary Qty
	; 03-Aug-2009	PPP		SR16815: Changed $$$INRECLineBaseQuantity to $$$INRECLineOrderQuantity
	; 22-Jun-2009 	PPP		SR16510: Updated routine to use INItemPolicy class
	; 10-Mar-2009	DavidR	SR16363: modified check to exclude qty check if it is 
	;							received without order number.
	; 04-Mar-2009	HQN		SR16363: Created
	;-------------------------------------------------------------------------------
	new fltSummaryQty,fltReceiveQty,idLocn,idStorage,idSummLine,objStore,objSummary,strStatus
	new objHeader,idLoc

		
	$$$LogR("IsReceivable",pidReceipt_","_pidRECLine)
	
	set objHeader 	= $get(^INREC(YM,pidReceipt,1))
	set idLoc		= $$$INRECLocation(objHeader)

	set strStatus = $$$OK
	
	; Common definitions
	if pobjRECLine="" set pobjRECLine = $get(^INRECLine(0,pidReceipt,pidRECLine,1))
	set idSummLine = pidRECLine\1
	set objSummary = $get(^INRECSummary(0,pidReceipt,idSummLine,1))
	
	; Check if already Received
	if ($$$INRECSummaryStatus(objSummary)'="") &&
	   ($$$INRECSummaryStatus(objSummary)'=0)     {
		
		set strStatus = $$$MakeStatus("IN00406",pidRECLine)     ; "Line %1 already received"
	
	} else {     ; Individual field validation
		set strStatus = $$ValidateItemAttributes(pidRECLine,
		                                         $$$INRECLineItem(pobjRECLine),
		                                         $$$INRECLineQuantity(pobjRECLine),
		                                         $$$INRECLineLotNumber(pobjRECLine),
		                                         $$$INRECLineExpirationDate(pobjRECLine),
		                                         $$$INRECLineBrand(pobjRECLine),
		                                         $$$INRECLineOwner(pobjRECLine),
		                                         $$$INRECLineProgram1(pobjRECLine),
		                                         idLoc  )
		; Validate Quantities
		if $$$ISOK(strStatus) {
			if $$$INRECLineQuantity(pobjRECLine) = 0 {
				set strStatus = $$$MakeStatus("alREC0005")      ; "Unable to receive zero quantities"
				
			} elseif $$$INRECLineQuantity(pobjRECLine) < 0 {
				set strStatus = $$$MakeStatus("alREC0007",pidRECLine)
			}                ; "Errors exist on lines: %1"
			
			; Check that INRecLine Qty = INRECSummary Qty
			set fltReceiveQty = $$GetQtyEntered^INReceiptLine(pidReceipt_$$$COMMA_pidRECLine)
            set fltSummaryQty = $$$INRECSummaryQuantityReceived(objSummary)
            
			if fltReceiveQty'=fltSummaryQty {
				set strStatus =  $$$MakeStatus("IN00930",idSummLine)
			}   ; "Quantities Received on line %1 of the "Receipts" tab must match corresponding line(s) on the "Inspection" tab."
		}
		
		if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
			;Karine : Validade if cust is not zero
			if ($$$ISOK(strStatus)) {                       
				if $$$INRECSummaryUnitCost(objSummary) = ""  {
					;set strStatus = $$$MakeStatus("alREC0005")      ; "Unable to receive zero quantities"
					set numeroLinha = $$$INRECSummaryLineSequence(objSummary)
					;write "Linha = "_idSummLine,!
					set strStatus = "0 O preço do item está em branco. Linha:"_idSummLine_". "
				}
                if ((+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1))))
                	&& '(+$$$WWWClientParamCoreChangesTCI($get(^WWWClientParam(YM,YM,1))))){
					if ($$$INRECLineFREE1(pobjRECLine) = 3) {
						if '(($$$INRECLineFREE2(pobjRECLine) >= 2)&&($$$INRECLineFREE2(pobjRECLine) <= 8)){
							set strStatus = $$$MakeStatus("A temperatura conferida não corresponde ao valor adequado para o produto da linha %1.",idSummLine)
						}
					}
					elseif ($$$INRECLineFREE1(pobjRECLine) = 4) {
						if '($$$INRECLineFREE2(pobjRECLine) <= -20){
							set strStatus = $$$MakeStatus("A temperatura conferida não corresponde ao valor adequado para o produto da linha %1.",idSummLine)
						}
					}
				}
		    }
		}
		
		; Validate TSU is not closed ; SR17753
		if $$$ISOK(strStatus) {
			set idLocn    = $$$INRECLineLocation(pobjRECLine)
			set idStorage = $$$INRECLineStockLocation(pobjRECLine)
			set objStore  = $get(^INLP(0,idLocn,idStorage,1))
		;	if $$$INLPTemporaryStorageUnit(objStore) && $$$INLPClosed(objStore) {  ; SR17716
			if $$$INLPTemporaryStorageUnit(objStore) && $$IsTSUClosed^INLPStatus($$$INLPStatus(objStore)) {
				set strStatus = $$$MakeStatus("IN01297",pidRECLine)
			} ; "Can not add stock to a closed Temporary Storage on line %1"
			if (($$$ISOK(strStatus)) && (objStore = "")){
				set strStatus = $$$Text("INLP0001")	
			}
		}
		
	}
	quit strStatus
	
	
ValidateItemAttributes(pidKey,pidItem,pfltQty,pstrLotNumber="",pdteExpiration="",pstrBrand="",pstrOwner="",pstrProgram="",pidLoc="")
	;-------------------------------------------------------------------------------
	; Validate the Attributes for an Item based on the Item Policy
	;
	; History:
	; 10-Sep-2013	SCR		CORE-266: Pass in Location to CheckItemAttributes
	; 17-Jun-2009 	PPP 	SR16510: Updated routine to use INItemPolicy class
	; 04-Mar-2009	HQN		SR16363: Copied from IsPostableLine^INRECPost()
	; *** Saved old ValidateItemAttributes as ValidateItemAttributesOld
	;-------------------------------------------------------------------------------
	new arrErr,blnOK,strStatus
	
	$$$LogR("ValidateItemAttributes",pidKey_","_$get(pidItem))
	set strStatus = $$$OK	
	
	set blnOK = $$CheckItemAttributes^INItemPolicyUtils(pidItem,pfltQty,pstrLotNumber,pdteExpiration,pstrBrand,pstrOwner,pstrProgram,.arrErr,pidLoc)
	
	if '$$$ISOK(blnOK) {
		set strStatus = $$$MakeStatus($order(arrErr("")),pidKey)
	}
	quit strStatus
	
]]></Routine>
</Export>