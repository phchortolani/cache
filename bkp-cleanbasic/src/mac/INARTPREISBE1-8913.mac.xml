<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INARTPREISBE1" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INARTPREISBE1
#include INConst
	;-------------------------------------------------------------------------------
	; Description of Function :
	;		OPEN LOCATION BASED PRICE WITH LOCATION
	;
	; Inputs : 
	;
	;
	; ByRef :
	;
	;
	; Returns :
	;
	;
	; History :
	; 05.04.2004	BEC
	;-------------------------------------------------------------------------------
	NEW KEY1,YOK,LOCATION 
	
	SET YKEY     = $GET(YKEY)
	SET LOCATION = $GET(YLOCATION)
	SET LOCATION = $PIECE($$^INVALIDLOCATION(YKEY,LOCATION),Y,1)
	IF LOCATION="" SET LOCATION = $GET(YLOCATION)
	SET KEY1=YKEY_","_LOCATION
	DO
	. NEW YKEY,YFORM
	. SET %("VAR","YFORM")="INARTPREISBE"
	. SET %("VAR","YKEY")=KEY1
	. DO ^WWWFORM
	
	QUIT
	
FixDates(pdteOldToDate="",pdteNewToDate="")
	;-------------------------------------------------------------------------------
	;  Location Dependent Stock Price - correct expired dates to extend useful life
	;  
	; History:
	; 02-Jul-2007	GRF		SR15555: Created (including called subroutines)
	;-------------------------------------------------------------------------------
	
	;  Item No.
	;  Location
	;  Price Identifiers
	;  From Date
	
	new idItem
	
	quit:pdteOldToDate=""
	quit:pdteNewToDate=""
	quit:pdteNewToDate<$horolog
	quit:pdteNewToDate<pdteOldToDate
	
	if '$data(Y) do ^WWWVAR
	set idItem=""
	for {
		set idItem=$order(^INARTPREISBE1(YM,idItem))
		quit:idItem=""
		
		do FixItem(pdteOldToDate,pdteNewToDate,idItem)
	}
	quit
	
FixItem(pdteOldToDate,pdteNewToDate,pidItem)
	new idLocn
	
	set idLocn=""
	for {
		set idLocn = $order(^INARTPREISBE1(YM,pidItem,idLocn))
		quit:idLocn=""
		
		do FixForLocn(pdteOldToDate,pdteNewToDate,pidItem,idLocn)
	}
	quit
	
FixForLocn(pdteOldToDate,pdteNewToDate,pidItem,pidLocn)
	new idPrice
	
	set idPrice = ""
	for {
		set idPrice = $order(^INARTPREISBE1(YM,pidItem,pidLocn,idPrice))
		quit:idPrice=""
		
		do FixForPrice(pdteOldToDate,pdteNewToDate,pidItem,pidLocn,idPrice)
	}
	quit
	
FixForPrice(pdteOldToDate,pdteNewToDate,pidItem,pidLocn,pidPrice)
	new dteFrom
	
	set dteFrom = ""
	for {
		set dteFrom = $order(^INARTPREISBE1(YM,pidItem,pidLocn,pidPrice,dteFrom))
		quit:dteFrom=""
		
		do FixForDate(pdteOldToDate,pdteNewToDate,pidItem,pidLocn,pidPrice,dteFrom)
	}
	quit
	
FixForDate(pdteOldToDate,pdteNewToDate,pidItem,pidLocn,pidPrice,pdteFrom)
	new objLocnPrice
	
	set objLocnPrice = $get(^INARTPREISBE1(YM,pidItem,pidLocn,pidPrice,pdteFrom,1))
	if $$$INARTPREISBE1ValidTo(objLocnPrice) = pdteOldToDate {
		set $$$INARTPREISBE1ValidTo(objLocnPrice) = pdteNewToDate
		set ^INARTPREISBE1(YM,pidItem,pidLocn,pidPrice,pdteFrom,1) = objLocnPrice
		write !,pidItem,"  :  ",pidLocn,"  :  ",pidPrice,"  :  ",pdteFrom
	}
	quit
		
	
	/* Not currently in use
OnAfterSave(pstrKey)
	;-------------------------------------------------------------------------------
	; Recalc prices after save of these forms
	; 
	; Note: Now called from both INARTPREISBE and INARTPREISBE1
	; 
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 09-Oct-2006	JW		SR15104: Created - moved from ^INARTPREISBE1 form def
	;-------------------------------------------------------------------------------
	new strItemLocKey
	
	set strItemLocKey = $piece(pstrKey,",",1,2)		// Item,Location
	do Recalc^INARTPREISBE(strItemLocKey)
	
	// JW - This did nothing after save. No print, no recalc.
	; set VORG(99) = 1
	; do ^INARTPREISBE
	
	quit
	*/
]]></Routine>
</Export>