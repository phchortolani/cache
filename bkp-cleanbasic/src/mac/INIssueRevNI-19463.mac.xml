<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INIssueRevNI" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INIssueRevNI

#include COMConst
#include INConst
#include WWWConst
#include COMSYS
#include COMDebug
#include MEDConst
#define FORMFldINIssueRevLineLotNo	    24
#define FORMFldINIssueRevLineExpiryDate	25
#define FORMFldINIssueRevLineBrand		26
#define FORMFldINIssueRevLineOwner		27
#define FORMFldINIssueRevLineProgram	28

	
#def1arg TempStore(%1) ^CacheTemp(YUCI,YUSER,%1)
	
OnBeforeButtonLine(pidIssueRev,&pobjIssueRev,&pobjForm)
	;-------------------------------------------------------------------------------
	; Set form to readonly if not editable
	;
	; Params:	pidIssueRev		IssueRev id
	;			pobjIssueRev	IssueRev object
	;
	; Returns:	pobjForm	Form object (WWW120)
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	set $$$INIssueRevReturnwithoutIssue(pobjIssueRev)	= $$$YES
	do OnBeforeButtonLine^INIssueRev(pidIssueRev,pobjIssueRev,.pobjForm)
	quit
	
Editable(pidIssueRev) 
	;-------------------------------------------------------------------------------
	; Is form editable (unprocessed) ?
	;
	; Params:	pidIssue - Issue id
	;
	; Returns:	status
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	quit $$Editable^INIssueRev(pidIssueRev)
	
	
CanPost(pidIssRev)
	;-------------------------------------------------------------------------------
	; Can the record be posted
	;
	; Called By: Process^INIssueRev
	;
	; Params:	pidIssRev - IssueRev id
	;
	; Returns:	status
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	quit $$CanPost^INIssueRev(pidIssRev)
	

CheckIssueOnLines(pidIssRev)
	;-------------------------------------------------------------------------------
	; Check Issues on lines
	;	1 Check that there are no Duplicate Issue/Lines
	;	2 Check that there are no unposted Returns for any lines
	;
	; Called By: CanPost^INIssueRev
	;
	; Params:	pidIssue - Issue key
	;
	; Returns:	status
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	quit $$CheckIssueOnLines^INIssueRev(pidIssRev)


GetIssueType(pidIssue)
	;-------------------------------------------------------------------------------
	; Issue type for specified INIssue record
	;
	; Called By: CanPost^INIssueRev
	;
	; Params:	pidIssue - Issue key
	;
	; Returns:	enumType
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	new objIssue
	
	quit:$get(pidIssue)="" ""
	
	set objIssue = $get(^INIssue(0,pidIssue,1))
	quit $$$INIssueType(objIssue)
	
	
ProductError(pstrError)
	;-------------------------------------------------------------------------------
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$$OK
	
	if $data($$$TempStore("IssueRevLineErrors")) {
		set strStatus = $$$MakeStatus(pstrError)	
	}
	quit strStatus	
	
	
CanViewReport()
 	;-------------------------------------------------------------------------------
 	;
 	; Disable button on the report if the request has not been processed
 	; 
 	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
 	;-------------------------------------------------------------------------------
 	if (YKEY) {	 		 	; FIXME : incomplete?
		if $$$INIssueRevStatus(YFELD)=2 {
			set YQ = $$$YQDisable("IN00910")  ; "The report will only be available after the return has been processed"
		} else { 
			set YQ = $$$YQEnable
		} 	
 	} 
	quit
	
	
OnBeforeEditAccessHook(pYKEY)
	;-------------------------------------------------------------------------------
 	; Checks to ensure that the location matches the record, and if the location is
 	; a storage location.
 	; 
	; 18-Mar-2014	SCR		SESDF-1299: Created
 	;-------------------------------------------------------------------------------
	quit $$OnBeforeEditAccessHook^INIssueRev(pYKEY)
 
	
OnAfterDataFields(pidForm,pidKey,pobjReversal)
	;-------------------------------------------------------------------------------
	; What needs running after header is drawn
	;  Load Grid etc
	;
	; Params:
	; pidForm		Form id that called this function
	; pidKey		Key of the record
	; pobjReversal	Header record
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	do LoadGrid(pidKey,pidForm,pobjReversal)     ; Form "INIssueRevNI"
	
	quit
	
	
LoadGrid(pidKey,pstrContainer,pobjReversal)
	;-------------------------------------------------------------------------------
	; Load Edit Grid, run validation for currently editable grid and cause grid to be redrawn.
	;
	; Params:
	; pidKey			Key of header record
	; pstrContainer		Form id that called this function
	;
	; ByRefs: None
	;
	; Returns: Nothing
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	new YAUSWAHL,YFORM,blnEnabled,blnHideBrand,blnHideExpiry,blnHideLotNo,blnHideOwner
	new blnHideProgram,blnLotNo,blnLotUnique,blnUseByDate,idForm,idItem,idLoc,intBrand
	new intOwner,intProgram,objRevLine,strLineYKEY
	
	set idForm="INIssueRevNILine"
	if (pidKey'="")&&($$$INIssueRevIssueNumber($get(^INIssueRev(YM,pidKey,1)))="") {
		set $$$COMGridEditParameterNewLine(YAUSWAHL)	= $$$YES
	}
	set YFORM  = idForm
	
	set blnEnabled = ($$$INIssueRevStatus(pobjReversal) '= 9)
 
	if blnEnabled {
		set blnEnabled = ($$$WWW120AuthorizationToModifyData(YVOR)'=$$$EnumReadOnly)
	}
	
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)    = $$$YES
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL) = 300
	set $$$COMGridEditParameterGridName(YAUSWAHL)      = idForm
	set $$$COMGridEditParameterEnabled(YAUSWAHL)       = blnEnabled
	set $$$COMGridEditParameterContainer(YAUSWAHL)     = pstrContainer
	
	set ^CacheTemp(YUSER,"GridLine") = YPARA
	
	kill $$$TempStore("IssueRevLineErrors")
	$$$GRIDStart(idForm,pidKey)

	set blnHideLotNo	= $$$YES
	set blnHideExpiry	= $$$YES
	set blnHideBrand	= $$$YES
	set blnHideOwner	= $$$YES
	set blnHideProgram 	= $$$YES
	set idLoc			= YLOCATION
	set strLineYKEY = ""
	for {
		set strLineYKEY = $order(^WWWDATEN(0,+$horolog,YUSER,idForm,"V","REFERENCEROW",strLineYKEY))
		quit:(strLineYKEY = "")
	
		set objRevLine = $$$GRIDGetYFELD(strLineYKEY)
		set idItem = $$$INIssueRevLineItemNo(objRevLine)
		if idItem'="" {
			do GetAttributes^INItemPolicyUtils(idItem,.blnLotNo,.blnUseByDate,.blnLotUnique,.intBrand,.intOwner,.intProgram,idLoc)
			if blnLotNo                       set blnHideLotNo   = $$$NO
			if blnUseByDate                   set blnHideExpiry  = $$$NO
			if (intBrand=1)||(intBrand=3)     set blnHideBrand   = $$$NO
			if (intOwner=1)||(intOwner=3)     set blnHideOwner   = $$$NO
			if (intProgram=1)||(intProgram=3) set blnHideProgram = $$$NO
		}
	}
	$$$StartScript()
	$$$GRIDHideShowColumns($$$FORMFldINIssueRevLineLotNo,blnHideLotNo,idForm)    		; F31
	$$$GRIDHideShowColumns($$$FORMFldINIssueRevLineExpiryDate,blnHideExpiry,idForm) 	; F32
	$$$GRIDHideShowColumns($$$FORMFldINIssueRevLineBrand,blnHideBrand,idForm)  			; F33
	$$$GRIDHideShowColumns($$$FORMFldINIssueRevLineOwner,blnHideOwner,idForm)  			; F34
	$$$GRIDHideShowColumns($$$FORMFldINIssueRevLineProgram,blnHideProgram,idForm)  		; F35
	$$$EndScript()

	quit
 
 
OnBeforeSave(pYKEY, &pYFELD)
	;-------------------------------------------------------------------------------
	; Saves the grid
	;
	; Returns:
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	do OnBeforeSave^INIssueRev(pYKEY, .pYFELD)
	quit
	
	
CheckInProgress(pidIssueRev, pidIssueNo)
	quit $$CheckInProgress^INIssueRev(pidIssueRev, pidIssueNo)
 
 
OnAfterSave(pYKEY,pYFELD)
	;-------------------------------------------------------------------------------
	; Saving a new header will cause the lines for the indicated Issue to be loaded
	;-------------------------------------------------------------------------------
	
	quit $$OnAfterSave^INIssueRev(pYKEY,pYFELD)
	
	
	
	
OnAfterDelete(pYKEY)
	;-------------------------------------------------------------------------------
	; Calls the com grid interface for deleting a line
	;
	; Returns:
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	do DELETE^COMGridEdit31Interface()
	quit
	
	
OnBeforeFormConstruction(pYBBN,pYFELD)
	;-------------------------------------------------------------------------------
	; Called From:
	; 	INIssueRev
	; 	
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	if $$$INIssueRevIssueNumber(pYFELD)'="" {
		if $$$GetFormField("INIssueRev",pYBBN) = $$$FldINIssueRevIssueNumber {
			set YHID = 1
		}
	}
	
	kill $$$TempStore("IssueRevLineErrors")
	quit
	
 
Process(pidReturn,pblnNoForm=$$$NO)
	;-------------------------------------------------------------------------------
 	; Called By : CreateIssueRev^INIssueRevAuto (with "No Form" parameter)
 	;             Form INIssueRev - Button 1 "Process"
 	;
 	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	quit $$Process^INIssueRev(pidReturn,pblnNoForm)
	
	
	
	
	
	
	
	
	
	
	
	
OnBeforeDeleteHook(pYKEY)
	do DeleteLines^INIssueRevLine(pYKEY)
	quit $$$OK
			
 
IsTxNoPresent(pidReturn)
	;-------------------------------------------------------------------------------
	; if Issue number is recorded return YES
	; 
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;------------------------------------------------------------------------------
	new objReturn
	
	set objReturn = $get(^INIssueRev(YM,pidReturn,1))
	quit ($$$INIssueRevIssueNumber(objReturn)'="")

	
OnBlurType(&pobjRev)
	;-------------------------------------------------------------------------------
	; Clear relevent fields 
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;-------------------------------------------------------------------------------
	new intType
	set intType	= $$$INIssueRevReturnType(pobjRev)
	if intType = 1 {
		set $$$INIssueRevToLocn(pobjRev)		= ""
		set $$$INIssueRevIssueNumber(pobjRev)	=""
	}
	if intType = 2 {
		set $$$INIssueRevPaitent(pobjRev)		= ""
		set $$$INIssueRevDispense(pobjRev)		= ""
	}
	

HasGridLines()
	;-------------------------------------------------------------------------------
	; Check for Grid Lines
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 18-Mar-2014	SCR		SESDF-1299: Created
	;---------arrGrid----------------------------------------------------------------------
	new arrGrid
	if $tr(YKEY,"+")="" quit $$$NO
	$$$GRIDGetContents(.arrGrid)
	quit $data(arrGrid(YKEY))
]]></Routine>
</Export>