<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INARTMENGE" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INARTMENGE(pidItem,pintBreakDown,pidLocn,pblnReturnAll,penumCalcType,pblnShowConsign,pblnExclBlocked,pidProgram) ; <<< DO NOT USE DIRECT LINK ;SR17034
	
#include COMSYS
#include INConst
#include %occInclude
	
#define enumSingleTotal		0
#define enumSeparated		1
#define enumDateSeparation	2
	
#define NoStorageSpecified ""
	
	;-------------------------------------------------------------------------------
	; Description of Function :
	;		ERRECHNEN MENGE EINES ARTIKELS (CALCULATE QUANTITY OF AN ARTICLE)
	;
	; * * *   Call $$GetQty^INARTMENGE() or specific entry   * * *
	; * * *   wrappers instead of the main routine.          * * *
	; * * *   Don't call individual calculations unless specifically necessary * * *
	; 
	; TODO : Change other routines to call subroutine rather than main routine and
	;        to use Boolean Macros. This is not immediately necessary - calling
	;        routines have been checked. <GRF>
	;-------------------------------------------------------------------------------
	; penumCalcType : The list has been consolidated with the revision to Reservations
	;                 It is better to use explicit entry points that better describe
	;                 the operation.
	;
	; 		0				GetQtyAvailable - use pblnExclBlocked with INVORG override
	; 		1, 2			GetQtyOnHand    - use pblnExclBlocked
	; 		3, 4, 8			GetQtyPlanned   - use pblnExclBlocked
	; 		5				GetQtyBlocked   - (pblnExclBlocked is irrelevant)
	; 		6, 7			     UNSUPPORTED
	; 		9				GetQtyOnHand   (incl Blocked)
	; 		10				GetQtyPlanned  (incl Blocked)
	; 		other			GetQtyAvailable - use pblnExclBlocked
	;-------------------------------------------------------------------------------
	quit $$GetQty($get(pidItem),$get(pintBreakDown,$$$enumSingleTotal),$get(pidLocn),$get(pblnReturnAll,$$$NO),
	              $get(penumCalcType,0),$get(pblnShowConsign,$$$NO),$get(pblnExclBlocked,$$$NO),$get(pidProgram))  ;SR17034
	
	
QtyForAvgCost(pidItem="",pidLocn="")                                    ; DEPRECATED
	;-------------------------------------------------------------------------------
	; Called By :
	;	INARTAVG
	;	INARTHIST
	;	
	; History :
	; 30-Oct-2009	GRF		SR16871: DEPRECATED - Use QtyForCC
	; 
	; 14-Sep-2009	PPP		SR16888: Updated to get the Entity Qty
	; 18-Dec-2006	GRF		SR15312: Create as explicit tag
	;-------------------------------------------------------------------------------
	//quit $$GetQty(pidItem,$$$enumSingleTotal,pidLocn,$$$NO,9,$$$NO,$$$NO)
	quit $$EntityQty(pidItem,pidLocn)
	
	
EntityQty(pidItem,pidSiteLocn)
	;-------------------------------------------------------------------------------
	; The total Quantity for all Locations that are children of an Entity
	; The input is any Location - of any Type
	; 1. the routines goes up the hierarchy of Locations and finds the first Entity
	; 2. Then for each child of the Entity, the QOH is added
	;
	;                           Locn XXX (Top Level Entity)
	;                                      |
	;                           Locn YYY (Mid Level Entity)           
	;                                      |
	;                    --------------------------------------
	;                    |                                    |
	;      Locn ABC (Bottom Level Entity)       Locn BCD (Bottom Level Entity)
	;                    |                                    | 
	;        -------------------------              -----------------------
	;        |                       |              |                     |
	;  Locn A (Site)           Locn B (Site)    Locn C  (Site)      Locn D (Site)
	;        |                       |
	; ---------------         ---------------
	; |             |         |             |
	; Dep X        Dep Y     Dep Z        Dep C
	;
	;
	; e.g. 
	; 1) input = Dep X ; SOH includes Dep X, Dep Y, Dep Z, Dep C, Loc A, Loc B
	; 2) input = Loc C ; SOH includes Loc C, Loc D
	;
	; Called By :
	;	INARTAVG
	;	INARTHIST
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 15-Sep-2009	PPP		SR16892: Bug fix for Entity and Children
	; 11-Sep-2009	PPP		SR16888: Created
	;-------------------------------------------------------------------------------
	new arrLocns,fltQty,idEntity,idLocn
	
	set fltQty = 0

	if $get(pidSiteLocn)="" {
		set pidSiteLocn = $get(YLOCATION)
	}
	
	if pidSiteLocn'="" {     ; Get the Sub Entity for the Current Location
		set idEntity = $$SubEntity^WWW0121Utils(0,pidSiteLocn)
		
		if idEntity'="" {    ; Get the children for the Entity
			do Children^WWW0121Utils(0,idEntity,,1,"Cache",.arrLocns)

			set idLocn = ""
			for {
				set idLocn = $order(arrLocns(idLocn))
				quit:idLocn=""
				continue:'$$$WWW0121StorageLocn($get(^WWW0121(0,0,idLocn,1)))  ; Not an Inventory Location
			
				set fltQty = fltQty + $$GetQty(pidItem,$$$enumSingleTotal,idLocn,$$$NO,9,$$$NO,$$$NO)
			}
		}
	}
	quit fltQty
	
	
QtyForCC(pidItem,pidCostCentre)
	;-------------------------------------------------------------------------------
	; Return the total quantity for all locations within a cost centre
	; 
	; History:
	; 19-Oct-2009	GRF		SR16871: Created
	;-------------------------------------------------------------------------------
	new fltQty,idLocn
	
	set fltQty = 0
	set idLocn = ""
	for {
		set idLocn = $order(^INCCLocation(0,pidCostCentre,idLocn))
		quit:idLocn=""
		
		set fltQty = fltQty + $$GetQty(pidItem,$$$enumSingleTotal,idLocn,$$$NO,9,$$$NO,$$$NO)
	}
	quit fltQty
	
	
AvailQtyByLocn(pidItem="",pidSiteLocn="")
	;-------------------------------------------------------------------------------
	; ENTRY POINT : Stock available for sourcing - exclude reserved stock,
	;               stock in blocked storages (and expired stock?)
	;               broken down by storage
	; 
	; Called By :
	; 
	; Returns:	TotalQty#SLQty*Storage;SLQty*Storage;...   or
	; 			0
	; 
	; History :
	; 16-Nov-2007	GRF/LB	SR15598: Create as explicit tag; remove obsolete version
	;-------------------------------------------------------------------------------
	quit $$GetQty(pidItem,$$$enumSeparated,pidSiteLocn,$$$NO,0,$$$YES,$$$YES)
	
	
AvailToPromise(pidItem="",pidSiteLocn="")
	;-------------------------------------------------------------------------------
	; ENTRY POINT : Stock available for sourcing - exclude reserved stock,
	;               stock in blocked storages (and expired stock?)
	;               broken down by storage
	; 
	; Called By :	INDRPRUN (setting ATPMENGE)
	; 				INATP1 (equivalent)
	; 
	; Returns:	TotalQty
	; 
	; History :
	; 28-May-2008	GRF		SR15776: Create as explicit tag
	;-------------------------------------------------------------------------------
	quit $$GetQty(pidItem,$$$enumSingleTotal,pidSiteLocn,$$$NO,0,$$$NO,$$$YES)
 
	; FIXME : <GRF> Should we be able to promise consignment stock as well as our own?
	
	
MovingStockByLocn(pidItem="",pidSiteLocn="")
	;-------------------------------------------------------------------------------
	; ENTRY POINT : Stock available for moving
	;               INCLUDES on hand with blocked storages
	;               excludes reserved stock (and expired stock?)
	;               broken down by storage
	; 
	; Called By :
	; 
	; Returns:	TotalQty#SLQty*Storage;SLQty*Storage;...   or
	; 			0
	; 
	; History :
	; 07-Dec-2007	GRF		Entry point for type 11 - equivalent to type 0 but
	; 							includes blocked storages
	;-------------------------------------------------------------------------------
	quit $$GetQty(pidItem,$$$enumSeparated,pidSiteLocn,$$$NO,11,$$$YES,$$$NO)	
	
	
GetBundleQty(pidBundleStock,&pstrStatus)
	;-------------------------------------------------------------------------------
	; 
	; Inputs : pidBundleStock   e.g. SI01||LOCA||BIN2||2||1000
	;                            (Item||Locn||Storage||Bundle where Bundle = 2||1000)
	;
	; ByRef : pstrStatus
	; 
	; History:
	; 18-Mar-2011	PPP		SRAdhoc: Pablo - need to ensure strStatus is set to OK if OK
	; 23-Sep-2010	GRF		SR17539: Created
	;-------------------------------------------------------------------------------
	new fltQtyOH,objBS,sc
	
	set fltQtyOH = 0
	set objBS = ##class(alSOH.dBundleStock).%OpenId(pidBundleStock,.sc)
	if $$$ISERR(sc) {
		set pstrStatus = $$ISStatusToDLStatus^COMUtilError(sc)
	
	} else {
		if objBS'=$$$NULLOREF set fltQtyOH = +objBS.QtyOnHand
		set pstrStatus = $$$OK	//SRAdhoc
	}
	quit fltQtyOH
	
	
GetQty(pidItem="",pintBreakDown=$$$enumSingleTotal,pidSiteLocn="",pblnReturnAll=$$$NO,
	   penumCalcType=0,pblnShowConsign=$$$NO,pblnExclBlocked=$$$NO,pidProgram="")  ;17034
	;-------------------------------------------------------------------------------
	; Lookup quantities from V2 SOH records
	; 
	; Inputs:
	; pintBreakDown		0  = Single total
	; 				  1/2  = Breakdown by Storage - see "Returns" below
	;				      1 = accumulated by storage                (RETVAL=TOTALQTY#QTY1*STORAGE1;QTY2*STORAGE2;...)
	;				      2 = separated by storage / receiving date (RETVAL=TOTALQTY#QTY1*STORAGE1*DATE1;QTY2*STORAGE2*DATE2;...)
	; 
	; pidSiteLocn		Specify a single location or set to null if wish to see all.
	; 					This will be subject to system parameter 218 [ViewStockFromAllLocations])
	; 					Which determines whether stock details for one location are
	; 					accessible by other locations.
	; 
	; pblnReturnAll		$$$YES      Return All (Don't check Parameter 218)
	;	              	$$$NO		Return All or single location depending on 218.
	;
	; pblnShowConsign	$$$YES	Include Consignment Stock    ; TODO : Not implemented under V2 yet - see INWE D60?
	;	
	; pblnExclBlocked	$$$YES 	Don't include blocked storages or expired stock
	; 							(overwritten by INVORG D157)
	; 
	; pidProgram		""		will use different SQL to find only those
	; 							items that have a relevant Bundle property.
	; 	
	; History:
	; 24-Feb-2010	GRF		SR17034: use $$$NoStorageSpecified for clarity
	; 09-Dec-2009	shobby	SR17034: Passed in an additional parameter, pidProgram.
	; 12-Nov-2009	GRF		further to 17-Dec-2008 change - $$$YES/$$$NO passed in
	; 							changed to enum macros; removed AvgCost macro - "9"
	; 							is QtyOnHand instead
	; 17-Dec-2008	FIS 	SRBR014564: changed pintBreakDown from $$$NO to 0 as it
	; 							is not boolean
	; 13-Oct-2008	PPP 	SR16029 - Replaced the original checks for Locn definition.
	; 							However it does not look right, but we have to keep
	; 							it the same as before for backward compatibility -
	; 							pblnReturnAll is actually a boolean to check if the
	; 							view locations check should be applied rather
	; 							than the what it suggests ie return all locations.
	; 01-Oct-2008	HQN		Removing support for penumCalcType 6/7 from defaulting
	; 17-Sep-2008	HQN		SR15861: Moved logic into alSOH.iUSOH:::GetQtyOnHand()
	; 16-Sep-2008	HQN		SR15861: Created
	;-------------------------------------------------------------------------------
	new objINVORG,Qty,QtyOnHand,strSQL

	if $get(Y)="" do ^WWWVAR            ; SR12738
	
	;---------------------------------------
	set Qty = 0
	if pidItem="" quit Qty
	;---------------------------------------
	
	set QtyOnHand = 0
	set objINVORG = $get(^INVORG(YM,YM,1))
 	
 	// no location set: Either trying to retrieve single location or all locations but overide says you can't
	if (pidSiteLocn="") && 'pblnReturnAll && (+$$$INVORGViewStockFromAllLocations(objINVORG)=$$$NO) {
		set pidSiteLocn = $get(YLOCATION)
	}
	
	
	/*
ClassMethod GetQtyOnHand   (pidItem As alINV.dItem, pidLocn As alLOC.dLocation = "", pidStorage As alLOC.dStorage = "", pblnExclBlocked As %Boolean = 1) As %Float [ CodeMode = expression ]
ClassMethod GetQtyAvailable(pidItem As alINV.dItem, pidLocn As alLOC.dLocation = "", pidStorage As alLOC.dStorage = "", pblnExclBlocked As %Boolean = 1, pidProgram As %String = "") As %Float [ CodeMode = expression ]
ClassMethod GetQtyPlanned  (pidItem As alINV.dItem, pidLocn As alLOC.dLocation = "", pidStorage As alLOC.dStorage = "", pblnExclBlocked As %Boolean = 1) As %Float [ CodeMode = expression ]
ClassMethod GetQtyBlocked  (pidItem As alINV.dItem, pidLocn As alLOC.dLocation = "", pidStorage As alLOC.dStorage = "", pblnExclBlocked As %Boolean = 1) As %Float [ CodeMode = expression ]
	*/
	
	; If no breakdown, probably more efficient to do SQL SUM() queries
	if pintBreakDown = $$$enumSingleTotal {
		; need to remove sourced and reserved quantity from this
		if penumCalcType = 0 {
			if +$$$INVORGStockLocnProductionBlock(objINVORG)=$$$YES set pblnExclBlocked = $$$YES   ; (D157)
			set Qty = ##class(alSOH.iSOH).GetQtyAvailable(pidItem,pidSiteLocn,$$$NoStorageSpecified,pblnExclBlocked,pidProgram) ;SR17034
		
		} elseif (penumCalcType = 1) || (penumCalcType = 2) {
			set Qty = ##class(alSOH.iSOH).GetQtyOnHand(pidItem,pidSiteLocn,$$$NoStorageSpecified,pblnExclBlocked)
		
		} elseif (penumCalcType = 3) || (penumCalcType = 4) || (penumCalcType = 8) {
			set Qty = ##class(alSOH.iSOH).GetQtyPlanned(pidItem,pidSiteLocn,$$$NoStorageSpecified,pblnExclBlocked)
		
		} elseif penumCalcType = 5 {
			set Qty = ##class(alSOH.iSOH).GetQtyBlocked(pidItem,pidSiteLocn,$$$NoStorageSpecified,pblnExclBlocked)
		
		} elseif (penumCalcType = 9) {
			set Qty = ##class(alSOH.iSOH).GetQtyOnHand(pidItem,pidSiteLocn,$$$NoStorageSpecified,$$$NO)
		
		} elseif penumCalcType = 10 {
			set Qty = ##class(alSOH.iSOH).GetQtyBlocked(pidItem,pidSiteLocn,$$$NoStorageSpecified,$$$NO)
		
		} elseif (penumCalcType = 6) || (penumCalcType = 7) {
			set Qty = $$$MakeStatus("UNSUPPORTED AT THIS TIME")
		
		} else {
			set Qty = ##class(alSOH.iSOH).GetQtyAvailable(pidItem,pidSiteLocn,$$$NoStorageSpecified,pblnExclBlocked,pidProgram) ;SR17034
		}
	
	} else {
		set Qty = $$GetQtyBreakDown(pidItem,pintBreakDown,pidSiteLocn,pblnReturnAll,penumCalcType,pblnShowConsign,pblnExclBlocked)
	}
	quit Qty
	

GetStockStorages(pidItem,pidLocation="")
	;-------------------------------------------------------------------------------
	; Return
	; 	List of storages containing stock for this item
	; 
	; History: 
	; 19-Sep-2008	HQN	SR15861: Created
	;-------------------------------------------------------------------------------
	new lstStorages,idStorage,SQLCODE
 
	set lstStorages = ""
	set idStorage   = ""
	set SQLCODE     = 0
	if pidLocation = "" {
		; Get valid storages
		&sql(DECLARE storagecursor01 CURSOR FOR
			SELECT DISTINCT Storage INTO :idStorage
			FROM alSOH.dBundleStock
			WHERE Item=:pidItem
			)
		&sql(OPEN storagecursor01)
		&sql(FETCH storagecursor01)
		while SQLCODE = 0 {
			set lstStorages = lstStorages_$lb(idStorage)
			&sql(FETCH storagecursor01)
		}
		&sql(CLOSE storagecursor01)
	
	} else {
		&sql(DECLARE storagecursor02 CURSOR FOR
			SELECT DISTINCT Storage INTO :idStorage
			FROM alSOH.dBundleStock
			WHERE
				Item=:pidItem AND
				Storage->Location=:pidLocation
			)
		&sql(OPEN storagecursor02)
		&sql(FETCH storagecursor02)
		while SQLCODE = 0 {
			set lstStorages = lstStorages_$lb(idStorage)
			&sql(FETCH storagecursor02)
		}
		&sql(CLOSE storagecursor02)
	}
	quit lstStorages
	
	
GetQtyBreakDown(pidItem,pintBreakDown,pidSiteLocn="",pblnReturnAll=$$$NO,penumCalcType="",pblnShowConsign=$$$NO,pblnExclBlocked=$$$NO)
	;-------------------------------------------------------------------------------
	; Returns :
	;	Quantity	if pintBreakDown = $$$enumSingleTotal      [0]   Handled elsewhere
	;											TotalQty
	;				
	;				if pintBreakDown = $$$enumSeparated         [1] 	
	;					if Qty=0				TotalQty
	;					if Qty'=0				TotalQty#SLQty*StorageId;SLQty*StorageId;...
	;				
	;				if pintBreakDown = $$$enumDateSeparation   [2] 	         //BR014564
	;					if Qty=0				TotalQty
	;					if Qty'=0				TotalQty#SLQty*StorageId*BundleId;SLQty*StorageId*BundleId;...
	;					
	; History:
	; 31-Aug-2010	GRF		-: Spelling (enumSeparated)
	; 12-Nov-2009	GRF		SR16871: Location associated with storage will not be
	; 							pidSiteLocn if asking for all sites with null value;
	; 							use blnShow to identify where matching +ve and -ve
	; 08-Oct-2008	HQN		SR16006: Removed DEPRECATED direct SQL, utilising looped
	; 							queries via iSOH
	; 19-Sep-2008	HQN		SR15861: Implemented for penumCalcType 1->4
	; 17-Sep-2008	HQN		SR15861: Implemented embedded sql for (penumCalcType=0
	; 							&& pidSiteLocn="")
	;-------------------------------------------------------------------------------
	new arrQty,blnShow,fltQtyOnHand,fltQuantity,idBundle,idLocn,idStorage
	new lstStorages,loop,objINVORG,strPairs,SQLCODE
	
	set fltQuantity  = 0
	set fltQtyOnHand = 0
	set SQLCODE      = 0
	set idStorage    = ""
	set idBundle     = ""
	set blnShow      = $$$NO
	
	set objINVORG = $get(^INVORG(0,0,1))
	if (pidSiteLocn="") && 'pblnReturnAll && (+$$$INVORGViewStockFromAllLocations(objINVORG)=$$$NO) {
		set pidSiteLocn=$get(YLOCATION)
	}
	
	set lstStorages = $$GetStockStorages(pidItem,pidSiteLocn)
	
	if penumCalcType = 0 {
		if +$$$INVORGStockLocnProductionBlock(objINVORG)=$$$YES set pblnExclBlocked = $$$YES
		for loop=1:1:$listlength(lstStorages) {
			set idStorage = $list(lstStorages,loop)
			set idLocn    = $piece(idStorage,"||",1)
			if pintBreakDown = $$$enumSeparated {
				set arrQty(idStorage) = ##class(alSOH.iSOH).GetQtyAvailable(pidItem,idLocn,idStorage,pblnExclBlocked)
				set fltQuantity = fltQuantity + arrQty(idStorage)
				if arrQty(idStorage) set blnShow = $$$YES
			
			} else {
				set fltQuantity = $$$MakeStatus("UNSUPPORTED AT THIS TIME")
			}
		}
		
	} elseif (penumCalcType = 1) || (penumCalcType = 2) {
		for loop=1:1:$listlength(lstStorages) {
			set idStorage = $list(lstStorages,loop)
			set idLocn    = $piece(idStorage,"||",1)
			if pintBreakDown = $$$enumSeparated {
				set arrQty(idStorage) = ##class(alSOH.iSOH).GetQtyOnHand(pidItem,idLocn,idStorage,pblnExclBlocked)
				set fltQuantity = fltQuantity + arrQty(idStorage)
				if arrQty(idStorage) set blnShow = $$$YES
			} else {
				set fltQuantity = $$$MakeStatus("UNSUPPORTED AT THIS TIME")
			}
		}
	
	
	} elseif (penumCalcType = 3) || (penumCalcType = 4) || (penumCalcType = 8) {
		for loop=1:1:$listlength(lstStorages) {
			set idStorage = $list(lstStorages,loop)
			set idLocn    = $piece(idStorage,"||",1)
			if pintBreakDown = $$$enumSeparated {
				set arrQty(idStorage) = ##class(alSOH.iSOH).GetQtyPlanned(pidItem,idLocn,idStorage,pblnExclBlocked)
				set fltQuantity = fltQuantity + arrQty(idStorage)
				if arrQty(idStorage) set blnShow = $$$YES
			} else {
				set fltQuantity = $$$MakeStatus("UNSUPPORTED AT THIS TIME")
			}
		}
	
	
	} elseif (penumCalcType = 5) {
		for loop=1:1:$listlength(lstStorages) {
			set idStorage = $list(lstStorages,loop)
			set idLocn    = $piece(idStorage,"||",1)
			if pintBreakDown = $$$enumSeparated {
				set arrQty(idStorage) = ##class(alSOH.iSOH).GetQtyBlocked(pidItem,idLocn,idStorage,pblnExclBlocked)
				set fltQuantity = fltQuantity + arrQty(idStorage)
				if arrQty(idStorage) set blnShow = $$$YES
			} else {
				set fltQuantity = $$$MakeStatus("UNSUPPORTED AT THIS TIME")
			}
		}
	
	
	} elseif (penumCalcType = 9) {
		for loop=1:1:$listlength(lstStorages) {
			set idStorage = $list(lstStorages,loop)
			set idLocn    = $piece(idStorage,"||",1)
			if pintBreakDown = $$$enumSeparated {
				set arrQty(idStorage) = ##class(alSOH.iSOH).GetQtyOnHand(pidItem,idLocn,idStorage,$$$NO)
				set fltQuantity = fltQuantity + arrQty(idStorage)
				if arrQty(idStorage) set blnShow = $$$YES
			} else {
				set fltQuantity = $$$MakeStatus("UNSUPPORTED AT THIS TIME")
			}
		}
	
	
	} elseif (penumCalcType = 10) {
		for loop=1:1:$listlength(lstStorages) {
			set idStorage = $list(lstStorages,loop)
			set idLocn    = $piece(idStorage,"||",1)
			if pintBreakDown = $$$enumSeparated {
				set arrQty(idStorage) = ##class(alSOH.iSOH).GetQtyBlocked(pidItem,idLocn,idStorage,$$$NO)
				set fltQuantity = fltQuantity + arrQty(idStorage)
				if arrQty(idStorage) set blnShow = $$$YES
			} else {
				set fltQuantity = $$$MakeStatus("UNSUPPORTED AT THIS TIME")
			}
		}
	
	} else {
		set fltQuantity = $$$MakeStatus("UNSUPPORTED AT THIS TIME")
	}
	
	
	;  total +ve might match total -ve, hiding details
	if blnShow {
		if (pintBreakDown = $$$enumSeparated) {
			set strPairs = ""
			set idStorage = ""
			for {
				set idStorage = $order(arrQty(idStorage))
				quit:idStorage=""
				continue:arrQty(idStorage)=0 ; prior algorithm may return empty quantities
				
				set strPairs = strPairs_";"_arrQty(idStorage)_"*"_idStorage
			}
			set fltQuantity = fltQuantity_"#"_$extract(strPairs,2,9999)
		
		} elseif (pintBreakDown = $$$enumDateSeparation) {
			set strPairs = ""
			set idStorage = ""
			set idBundle = ""
			for {
				set idStorage = $order(arrQty(idStorage))
				quit:idStorage=""
				
				for {
					set idBundle = $order(arrQty(idStorage,idBundle))
					quit:idBundle=""
					continue:arrQty(idStorage,idBundle)=0
					
					set strPairs = strPairs_";"_arrQty(idStorage,idBundle)_"*"_idStorage_"*"_idBundle
				}
			}
			set fltQuantity = fltQuantity_"#"_$extract(strPairs,2,9999)
		}
	}
	quit fltQuantity
	
	
GetQuantityOnHand(pidItem,pidLocn)
	;-------------------------------------------------------------------------------
	; Get the QOH, if consumable item then return 1E16
	;
	; Called By:	INRECReverse
	; 				INStockReservation
	; 				INTRNValidation
	; Params:
	;	pidItem - Item Id
	;	pidLocn - Site Location Id
	;
	; ByRefs: None
	;
	; Returns: Quantity On Hand
	;
	; History:
	; 09-Mar-2010	GRF		SR17196: use explicit tag
	; 10-Jul-2006	PO		SR14669: Created
	;-------------------------------------------------------------------------------
	new fltQuantity
	
	if $$IsConsumable^INARTLOCPAR(pidItem,pidLocn) {
		set fltQuantity = 1E16
	} else {
	;	set fltQuantity = $$INARTMENGE(pidItem,,pidLocn)
		set fltQuantity = $$GetQty^INARTMENGE(pidItem,,pidLocn)
	}
	quit fltQuantity
	
	
QtyByBin(pstrQtyOutput,&parrQty)         ; DEPRECATED
	;-------------------------------------------------------------------------------
	; 
	;                     DEPRECATED
	; 
	; 
	; Decodes a "break-down" INARTMENGE string into an array with bin
	; as the subscript
	;
	; Called By :	alLoc.dUStorage::GetItemSOHIncBlocked
	; 				INAUFWH
	; 				INMOVSearch
	; 				INTRN
	; 				INTRNUpdate
	; 				WWWRECORDUtils
	;
	; Params: 	pstrQtyOutput	: The "break-down" INARTMENGE output string
	;                             TotalQty#SLQty*StockLocn;SLQty*StockLocn;...
	; 			parrQty			: (By ref) The array with bin >> qty
	;
	; Returns:
	;
	; NOTE: DEPRECATED under V2...use iSOH!
	; History:
	; 01-Oct-2008	HQN		SR15970: Storage now a complete key, discarded under
	; 						V1 processing
	; 20-Dec-2006	SS		SR15244: Created
	;-------------------------------------------------------------------------------
	new fltQty,idBin,intLoop,strQty,strQtyBin
 
	kill parrQty
 
	set strQty = $piece(pstrQtyOutput,"#",2)
	for intLoop = 1:1:$length(strQty,";") {
		set strQtyBin = $piece(strQty,";",intLoop)
		set fltQty    = $piece(strQtyBin,"*",1)
		set idBin     = $piece(strQtyBin,"*",2)
		set:idBin?.E1"||".E idBin = $piece(idBin,"||",2) ; SR15970
		if (idBin'="") set parrQty(idBin) = +fltQty
	}
	quit
	
	
GetStockByItem(pidItem,&arrBundleStock,pidLocn="")
	;-------------------------------------------------------------------------------
	; Used By webservices to obtain a list of stock with 2 attributes
	; (Lot Number, Expiry Date and Bundle ID)
	; 
	; Called By:	alSOH.iBundle::GetStockByItem
	; 				alSOH.iBundle::GetStockByItemAttrib
	; 				INIssueAuto
	; 				INWSConsumptionInterface
	; 				SALIss
	; 				SALLot
	; 
	; Inputs:
	;	pidLocn = return details for specific location only
	; 
	; Returns:
	; 	error code on failure
	; 	
	; History:
	; 
	; 20-Aug-2010	sh/pp   SR17516: There may be multiple records with the same Lot
	;							Number (due to prior faulty allocation)
	; 06-Apr-2010	shobby	SR17266: UseByDate from Lot Number is not unique.
	;							Changed to use bundle.
	; 05-May-2009	SCR		SR16199: Return Bundle ID
	; 11-Mar-2009	GRF		SR16413: sc not changed since prior quit; doco; add else
	; 							to idBundle not found so don't re-get attributes
	; 26-Feb-2009	SCR		SR16256	 Improved Null Lot Number checking
	; 16-Feb-2009	SCR		SR16348: Remove trailing space from Lot Number when
	; 							there is no expiry date & Improve the speed / reliability
	; 07-Jan-2009	SCR		SR16256: Included Logic to Handle a space in the Lot Number
	; 02-Jan-2009	SCR		SR16256: 1 Changed the Lot number code to return the lot number only
	; 								 2 Excluded blocked locations
	; 								 3 Excluded Reserved stock	
	; 24-Dec-2008	FIS		SR16256: return details for specific location only
	; 24-Dec-2008	FIS		SR16256: return lot " " if no lot number exists (solves undef error)
	; 22-Dec-2008	HQN		SR16256: Created
	;-------------------------------------------------------------------------------
	new arrBundle,arrReserved,blnBlocked,idBundle,intLotCnt,intPosEnd,intPosStart,intQty
	new objResultSet,sc,strBundle,strDescription,strLotNumber,strStatus,strStorage,strToken,strUseByDate
	
	set strStatus = $$$OK
	
	kill arrBundleStock
	
	set strStatus = $$GetReservedLots(pidItem,.arrReserved,pidLocn)
	
	if (pidLocn '= "") {  ; get stock details for specific location only
		set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetAllLocnBundles")
		set sc = objResultSet.Execute(pidItem,pidLocn)
	
	} else {
		set objResultSet = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetAllBundles")
		set sc = objResultSet.Execute(pidItem)
	}
	
	if $$$ISOK(sc) {
		while (objResultSet.Next(.sc)) {
			set idBundle = objResultSet.Data("Bundle")
			if '$data(arrBundle(idBundle)) {      ; First instance of bundle - get and preserve attribute values
				set strLotNumber = $$GetLotNumber(pidItem,idBundle,.sc)
				if strLotNumber="" set strLotNumber = " "
				
				quit:'$$$ISOK(sc)
				
			;	set strUseByDate = $$^WWWDATE($$GetUseByDate(pidItem,strLotNumber)) ;SR17266
				set strUseByDate = $$^WWWDATE(##class(alSOH.dBundle).GetProperty(idBundle,"Use By Date"))    ;SR17266
				set arrBundle(idBundle,"LotNumber") = strLotNumber    
				set arrBundle(idBundle,"UseByDate") = strUseByDate
			;	if '$$$ISOK(sc) quit   ; sc not changed since prior quit
				
			} else {                               ; Bundle has been used before
				set strLotNumber = $get(arrBundle(idBundle,"LotNumber"))
				set strUseByDate = $get(arrBundle(idBundle,"UseByDate"))
			}
			set strStorage = objResultSet.Data("Storage")
			set blnBlocked = $$$NO 
			
			&sql(select StorageIsBlocked into :blnBlocked
			     from alLOC.dStorage
			     where id = :strStorage
			)
			
			continue:(blnBlocked = $$$YES)
 
			set intQty = objResultSet.Data("QtyOnHand")
			set intQty = intQty+$get(arrBundleStock(pidItem,strStorage,strLotNumber))  ; This should not happen if there is only one lot number per item!
			if $data(arrReserved(pidItem,strStorage,strLotNumber)) {
				set intQty = intQty-$get(arrReserved(pidItem,strStorage,strLotNumber)) ; Less reserved
				kill arrReserved(pidItem,strStorage,strLotNumber)                      ; ensure that is only done once!
			}
			
			set strBundle=intQty
			if strUseByDate'="" {
				set strBundle=intQty_"+"_strUseByDate
			}
			set $piece(strBundle,"+",3) = idBundle
			if $data(arrBundleStock(pidItem,strStorage,strLotNumber)) {
				set strLotNumber = strLotNumber_"#"_$increment(intLotCnt)	   ; SR17516
			}
			set arrBundleStock(pidItem,strStorage,strLotNumber) = strBundle
		}
	}
	if $$$ISERR(sc) {
		set strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
	}
	quit strStatus
	
	
GetReservedLots(pidItem,&parrReserved,pidLocn="")
	;-------------------------------------------------------------------------------
	; Return an array of lots (" " = none) that have a reservations (alDRP.dPlannedMovement)
	; (LotNumber and expiry)
	; 
	; pidItem = the Item
	; parrReserver = arrar to pass back
	; pidLocn = return details for specific location only
	; 
	; Returns:
	; 	error code on failure
	; 	
	; History:
	; 13-Apr-2010	SCR		SR16256.1: Check for null Bundle id
	; 19-Mar-2009	GRF		SR16256: Copied null Lot No test from GetStockByItem
	; 16-Feb-2009	SCR		SR16348: Remove trailing space from Lot Number when
	; 							there is no expiry date
	; 07-Jan-2009	SCR		SR16256: Included Logic to Handle a space in the Lot Number
	; 02-Jan-2009	SCR		SR16256: Create
	;-------------------------------------------------------------------------------
	new arrBundle,idBundle,intQty,objResultSet,sc
	new strDescription,strLotNumber,strStatus,strStorage,strToken
	
	set strStatus = $$$OK
	
	if (pidLocn '= "") {  
		set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement.GetReservedForLocn")
		set sc = objResultSet.Execute(pidItem,pidLocn)
	} else {
		set objResultSet = ##class(%Library.ResultSet).%New("alDRP.dPlannedMovement.GetAllReserved")
		set sc = objResultSet.Execute(pidItem)
	}
	if $$$ISOK(sc) {
		while (objResultSet.Next(.sc)) {
			set idBundle = objResultSet.Data("Bundle")
			if idBundle'="" {                                        ; SR16256.1
				if '$data(arrBundle(idBundle)) {      ; First instance of bundle - get and preserve attribute values
					set strLotNumber = $$GetLotNumber(pidItem,idBundle,.sc)
					if strLotNumber="" set strLotNumber = " "        ; SR16256
					quit:'$$$ISOK(sc)
				
					set arrBundle(idBundle,"LotNumber") = strLotNumber
				
				} else {                               ; Bundle has been used before
					set strLotNumber = $get(arrBundle(idBundle,"LotNumber"))
				}
			} 
			set strStorage = objResultSet.Data("FromLocn")_"||"_objResultSet.Data("Storage")
			set intQty     = objResultSet.Data("QtyRequired")
		;	set intQty     = intQty+$get(parrReserved(pidItem,strStorage,$get(strLotNumber," ")))  ; This should not happen if there is only one lot number per item!
		;	set parrReserved(pidItem,strStorage,$get(strLotNumber," ")) = intQty         ; SR16256
			set intQty     = intQty+$get(parrReserved(pidItem,strStorage,strLotNumber))  ; This should not happen if there is only one lot number per item!
			set parrReserved(pidItem,strStorage,strLotNumber) = intQty
		}
	}
	if $$$ISERR(sc) {
		set strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
	}
	quit strStatus
	
	
GetLotNumber(pidItem,pidBundle,&pstrStatus)
	;-------------------------------------------------------------------------------
	; Get the Lot Number for a Bundle
	; 
	; pidItem = the Item
	; pidBundle = the Bundle
	; 
	; Returns:
	; 	Lot No if there is one
	; 	
	; History:
	; 16-Feb-2009	SCR		SR16348: Created
	;-------------------------------------------------------------------------------
	new SQLCODE,strLot
	
	; TODO Add Error status for no item, no lot, no LotNo policy
	
	set strLot = ""
		
	; Get the Lot Number  for the bundle
	&sql(select AttributeValue into :strLot
	     from alSOH.dBundleAttribute
	     where Bundle=:pidBundle          and
	           AttributeName="Lot Number"
	)
	
	set pstrStatus = $$$OK
	quit strLot
	
	
	;SR17266 GetUseByDate(pidItem,pstrLot,&pstrStatus)
	;SR17266 ;-------------------------------------------------------------------------------
	;SR17266 ; Get Expiry Date for a Item/Lot Number     (LotNumber and expiry)
	;SR17266 ; 
	;SR17266 ; Called By: GetStockByItem^INARTMENGE
	;SR17266 ;            INWSConsumptionInterface (Commented)
	;SR17266 ; 
	;SR17266 ; Inputs : pidItem = the Item
	;SR17266 ;          pstrLot = the Lot Number
	;SR17266 ; 
	;SR17266 ; Returns:
	;SR17266 ; 	UseByDate if there is one (In $horolog format)
	;SR17266 ; 	
	;SR17266 ; History:
	;SR17266 ; 03-Jan-2009	SCR		SR16256: Create
	;SR17266 ;-------------------------------------------------------------------------------
	;SR17266 new dteUseBy,idBundle,SQLCODE
	
	;SR17266 ; TODO : Add Error status for no item, no lot, no UseByDate policy
	
	;SR17266 set dteUseBy = ""
	;SR17266 set idBundle = ""
	
	;SR17266 ; Get the bundle for the Item and the Lot
	;SR17266 &sql(select bundle into :idBundle from alSOH.dBundleAttribute
	;SR17266      where (AttributeName="Lot Number") and
	;SR17266            (bundle->item = :pidItem)    and
	;SR17266            (%EXACT(AttributeValue) = :pstrLot)
	;SR17266 )

	;SR17266 if (idBundle'="") && (SQLCODE=0) {     ; Get the Use by date for the bundle
	;SR17266 	&sql(select AttributeValue into :dteUseBy
	;SR17266 	     from alSOH.dBundleAttribute
	;SR17266 	     where Bundle=:idBundle            and
	;SR17266 	           AttributeName="Use By Date"
	;SR17266 	)
	;SR17266 }
	
	;SR17266 set pstrStatus = $$$OK
	;SR17266 quit dteUseBy
	
]]></Routine>
</Export>