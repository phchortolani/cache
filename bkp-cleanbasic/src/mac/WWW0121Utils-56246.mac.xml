<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWW0121Utils" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
WWW0121Utils
#include COMSYS
	
#define enumEntity		0
#define enumSite		1
#define enumDept		2
	
#define BigNumber 		9223372036000000000
	
Entity(pidCompany,pidLocn)
	;-------------------------------------------------------------------------------
	; Get main entity location
	; 
	; Called by :	EntityQty^INARTMENGE
	; 				FullTree^WWW0121Select
	; 				ShowTree^WWW0121Show
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	;	pidLocn			Location ID
	; 
	; Returns:
	;	Entity Location ID
	; 
	; History :
	; 20-Nov-2009	GRF		SR16871: remove company from keys
	; 02-Oct-2009   PPP		SR16892: Reverted change below - created SubEntity
	; 15-Sep-2009   PPP		SR16892: Bug fix.  Get the first Entity	
	; 18-Oct-2007	GRF		revised using SavePath
	; 08-Aug-2007	FIS		created
	;-------------------------------------------------------------------------------
	new strEntity
	;quit:($get(pidCompany)="") ""   ; SR16871
	quit:($get(pidLocn)="") ""
	
	;do SavePath(pidCompany,$$$NO)   ; SR16871
	do SavePath($$$NO)
	set strEntity = $piece($$GetPath(0,pidLocn),Y,4)
	set strEntity = $piece(strEntity,",",$length(strEntity,","))
	//set strEntity = $piece(strEntity,",",1)	//SR16892
	quit strEntity
	
	
SubEntity(pidCompany,pidLocn)
	;-------------------------------------------------------------------------------
	; Get Sub Entity location for the current Location
	; 
	; Called by :	SubEntityQty^INARTMENGE
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	;	pidLocn			Location ID
	; 
	; Returns:
	;	Entity Location ID
	; 
	; History :
	; 20-Nov-2009	GRF		SR16871: remove company from keys
	; 15-Sep-2009   PPP		SR16892: Created
	;-------------------------------------------------------------------------------
	new strEntity
	
	;quit:($get(pidCompany)="") ""   ; SR16871
	quit:($get(pidLocn)="") ""
	
	;do SavePath(pidCompany,$$$NO)   ; SR16871
	do SavePath($$$NO)
	set strEntity = $piece($$GetPath(0,pidLocn),Y,4)
	set strEntity = $piece(strEntity,",",1)
	quit strEntity
	
	
MainSite(pidCompany,pidLocn)
	;-------------------------------------------------------------------------------
	; Get main site location
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	;	pidLocn			Location ID
	; 
	; Returns:
	;	Site Location ID
	; 
	; History :
	; 20-Nov-2009	GRF		SR16871: remove company from keys
	; 18-Oct-2007	GRF		created using SavePath
	;-------------------------------------------------------------------------------
	new strSite
	
	;quit:($get(pidCompany)="") ""   ; SR16871
	quit:($get(pidLocn)="") ""
	
	set Y="~"
	set strSite = $piece($$GetPath(0,pidLocn),Y,3)
	
	set strSite = $piece(strSite,",",$length(strSite,","))
	quit strSite
	
	
LocationPath(pidCompany,pidLocn)
	;-------------------------------------------------------------------------------
	; Get path from operating entity to this location
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	; 	pidLocn			Location ID
	; 
	; Returns:
	; 	String of Locations (Comma delimited)
	; 
	; History :
	; 20-Nov-2009	GRF		SR16871: remove company from keys
	; 18-Oct-2007	GRF		SR15563: revised using SavePath
	; 17-Oct-2007	GRF		SR15563: may not have defined any locations yet
	; 08-Aug-2007	FIS		created
	;-------------------------------------------------------------------------------
	new loop,strPath,strReturnPath,strSavePath
	
	;quit:($get(pidCompany)="") ""   ; SR16871
	quit:($get(pidLocn)="") ""
	
	set strSavePath = $$GetPath(0,pidLocn)
	
	set Y="~"
	set strReturnPath = ""
	for loop=1:1:4 {
		set strPath = $piece(strSavePath,Y,loop)
		if strPath'="" set strReturnPath = strReturnPath_","_strPath
	}
	
	quit $extract(strReturnPath,2,999)
	
	
GetPath(pidCompany=0,pidLocn)
	;-------------------------------------------------------------------------------
	;	Get location path for specified location
	;	Build performance global if necessary
	;	
	; Inputs:
	; 	pidCompany		Active company - often YM
	; 	pidLocn			Location ID requiring path
	; 	
	; Returns:
	; 	strPath			Departments~Sites~Entities for location upwards (see SavePath)
	; 
	; History:
	; 30-Nov-2011	GRF		SR17967: move from CacheTemp to common global in nspace
	; 20-Nov-2009	GRF		SR16871: remove company from CacheTempWWW0121 keys
	; 03-Dec-2007	GRF		SR15612: SQL will not have YUCI
	; 16-Nov-2007	GRF		SR15563: add YUCI to ^CacheTempWWW0121("Path",...)
	;-------------------------------------------------------------------------------
	new strPath
	
	quit:($get(pidLocn)="") ""
	
	;***************************************
	lock +^WWW0121Path:10
	do SavePath($$$NO)
	set strPath = $get(^WWW0121Path(0,pidLocn,1))
	lock -^WWW0121Path
	;***************************************
	quit strPath                                 ; SR17967	
	
MakePath(pidCompany=0)
	;-------------------------------------------------------------------------------
	;	ENTRY POINT - forced build of performance global
	; 
	; Called By : CheckLocn^COMHCV1, OnAfterSave^WWW0121, OnAfterDelete^WWW0121
	;             PostBatch^INCostCentreChange
	; 
	; Inputs:
	; 	pidCompany		Active company - often YM
	; 
	; History:
	; 30-Nov-2011	GRF		SR17967: move from CacheTemp to common global in nspace
	; 20-Nov-2009	GRF		SR16871: remove company from CacheTempWWW0121 keys
	; 16-Nov-2007	GRF		SR15563: add YUCI to ^CacheTempWWW0121("Path",...)
	;-------------------------------------------------------------------------------
	set Y="~"
	;***************************************
	lock +^WWW0121Path:10
	do SavePath($$$YES)
	lock -^WWW0121Path
	;***************************************
	quit
	;lock +^CacheTempWWW0121("Path",YUCI):10     ; SR17967
	;do SavePath($$$YES)
	;lock -^CacheTempWWW0121("Path",YUCI)
	;quit
	
	
SavePath(pblnForce=$$$NO) private
	;-------------------------------------------------------------------------------
	; Builds fast access data representations
	; 
	; e.g.  ^CacheTempWWW0121("Path",YUCI,"1-2-34")                       = "~1-2-34~1-2-3,1-2,1~ENT~"
	;       ^CacheTempWWW0121("Hier",YUCI,"ENT",1,"1-2","1-2-3","1-2-34") = "Location 34~1-2-34~CostCentre"
	; 
	; replaced by
	; e.g.  ^WWW0121Path(0,idLocn,1)         = OtherList_Y_DeptList_Y_SiteList_Y_EntityList_Y_Error
	;       ^WWW0121Hier(0,[LocationLevels]) = LocnName_Y_Locn_Y_CostCentre
	; 
	; where pieces are based on the location type - working up the hierarchy from
	; Unknown to Departments to Site Locations to Entities
	; Sub-entries appear first before the main entry thus;
	; 	ENTITY		ENT
	; 	SITE		1
	; 				1-2			Sub-Site
	; 				1-2-3		Sub-Sub-Site
	;	DEPARTMENT	1-2-34
	;				1-2-34-5	Sub-Dept
	; Inputs:
	; 	pidCompany		Active company - often YM
	; 	pblnForce		Force update (boolean)
	; 	
	; Returns:		nothing			
	; 
	; History :
	; 11-Jun-2014	shobby	CORE-385.15: Removed INFIBPAR Macro.
	; 30-Nov-2011	GRF		SR17967: move from CacheTemp to common global in nspace
	; 20-Nov-2009	GRF		SR16871: remove company from CacheTempWWW0121 keys; add
	; 							Hierarchy listing
	; 16-Nov-2007	GRF		SR15563: add YUCI to ^CacheTempWWW0121("Path",...)
	; 18-Oct-2007	GRF		SR15563: created
	;-------------------------------------------------------------------------------
	new idCostCentre,idLocn,idPathLocn,objLocation,objPathLocn
	new strDept,strEntity,strError,strLevels,strLocnName,strLocnType,strSite,strOther
	
	;if pblnForce || '$data(^CacheTempWWW0121("Path",YUCI)) {           ; SR17967
	;	kill ^CacheTempWWW0121("Path",YUCI)
	;	kill ^CacheTempWWW0121("Hier",YUCI)
	if pblnForce || '$data(^WWW0121Path) || '$data(^WWW0121Hier) {
		kill ^WWW0121Path
		kill ^WWW0121Hier
		
		set idLocn=""
		for {
			set idLocn = $order(^WWW0121(0,0,idLocn))
			quit:idLocn=""
			
			set strError  = ""
			set strEntity = ""
			set strSite   = ""
			set strDept   = ""
			set strOther  = ""
			
			; Store Location in Path
			;-------------------------------
			set objLocation  = $get(^WWW0121(0,0,idLocn,1))
			set strLocnType  = $$$WWW0121LocationType(objLocation)
			set strLocnName  = $$$WWW0121LocationName(objLocation)
			set idCostCentre =  $piece($get(^INFIBPAR(0,0,idLocn,1)),"~",14) ;CORE-385.15 $$$INFIBPARCostCentre($get(^INFIBPAR(0,0,idLocn,1)))    ; FIXME : Why not Inherit?
			
			if strLocnType=$$$enumEntity {
				set strEntity = ","_idLocn
				
			} elseif strLocnType=$$$enumSite {
				set strSite   = ","_idLocn
				
			} elseif strLocnType=$$$enumDept {
				set strDept   = ","_idLocn
				
			} else {
				set strOther  = ","_idLocn
			}
			if idLocn=+idLocn {
				set strLevels = idLocn
			} else {
				set strLevels = $$$DBLQUOTE_idLocn_$$$DBLQUOTE
			}
			
			; Add Parent Hierarchy
			;-------------------------------
			set idPathLocn = idLocn
			set objPathLocn = $get(^WWW0121(0,0,idPathLocn,1))
			for {
				set idPathLocn = $$$WWW0121ParentLocn(objPathLocn)
				quit:idPathLocn=""
				
				set objPathLocn = $get(^WWW0121(0,0,idPathLocn,1))
				set strLocnType = $$$WWW0121LocationType($get(^WWW0121(0,0,idPathLocn,1)))
				
				if idPathLocn=idLocn {
					set strError = "Recursive"
					quit                         ; for loop
				}
				
				if strLocnType=$$$enumEntity {
					set strEntity = strEntity_","_idPathLocn
					
				} elseif strLocnType=$$$enumSite {
					set strSite   = strSite_","_idPathLocn
					
				} elseif strLocnType=$$$enumDept {
					set strDept   = strDept_","_idPathLocn
					
				} else {
					set strOther  = strOther_","_idPathLocn
				}
				if idPathLocn=+idPathLocn {
					set strLevels = idPathLocn_$$$COMMA_strLevels
				} else {
					set strLevels = $$$DBLQUOTE_idPathLocn_$$$DBLQUOTE_$$$COMMA_strLevels
				}
				
			}
			set strEntity = $extract(strEntity,2,999)   ; strip first comma
			set strSite   = $extract(strSite  ,2,999)
			set strDept   = $extract(strDept  ,2,999)
			set strOther  = $extract(strOther ,2,999)
			
			set ^WWW0121Path(0,idLocn,1) = strOther_Y_strDept_Y_strSite_Y_strEntity_Y_strError
			xecute "set ^WWW0121Hier(0,"_strLevels_") = strLocnName_Y_idLocn_Y_idCostCentre"
		}
	}
	quit
	
	
GetGLParams(pidLocn)
	;-------------------------------------------------------------------------------
	; Find lowest location on hierarchy list that has General Ledger Parameters
	; specified and return that record.
	; 
	; History:
	; 18-Nov-2009	GRF		SR17046/SR16871: Created
	;-------------------------------------------------------------------------------
	new idParamLocn,loop,objGLParams,strPath
	
	set strPath = $$LocationPath(0,pidLocn)
	for loop=1:1:$length(strPath,$$$COMMA) {
		set idParamLocn = $piece(strPath,$$$COMMA,loop)
		continue:idParamLocn=""
		set objGLParams = $get(^INFIBPAR(0,0,idParamLocn,1))
		quit:objGLParams'=""
		
	}
	; TODO : Rather than all or nothing, inherit particular accounts
	;        This may work out too slow.
	;        Current requirement is : if you need to specify CC you must specify accts <GRF>
	quit $get(objGLParams)
	
	
	;*******************************************************************************
	;  Children^WWW0121Utils() produces
	; ^CacheTempWWW0121ShowTmp123(...)
	; e.g. for top-level location "E2"     TreeFork^WWW0121Select() displays as
	; 
	;									|  E2							Bold
	;	(2,1)		= 3					|       2						Bold
	;	(2,2)		= 2-10				|            3					Bold
	;	(3,1)		= 4			<+		|                 4				Bold	<<<< Current
	;	(3,2)		= 3-05		<+		|                      4-10
	;	(3,3)		= 3-10		<+		|                 3-05			<
	;	(3,4)		= 3-20		<+		|                 3-10			<  not $$IsInPath
	;	(4,1)		= 4-10				|                 3-20			<  so these
	;	("E2",1)	= 2					|            3-20				<  locations are
	;	("E2",2)	= E2A				|       E2A						<  not expanded
	;	("E2",3)	= ROB				|       ROB						<
	;	
	;	"<+"  Note : Numeric locations were initially sorted before strings
	;	             Now : sort by +locn then by locn - with alpha strings stored last
	;*******************************************************************************
	
Children(pidCompany,pidLocn,&parrLocs,pblnExtent,pstrSortRule="NumAlpha",&parrChildren)
	;-------------------------------------------------------------------------------
	; Get children location
	;
	; Inputs:
	; 	pidLocn			Location ID
	;	parrLocs		By Reference Array or Global (.XYZ or ^XYZ)
	;	pblnExtent		$$$NO	Single level of descent
	;         			$$$YES	All hierarchical Children
	;   pstrSortRule	"Cache"    - locn as stored
	;   				"AlphaNum" - +locn then locn with 1.A.E sorted before 1.N.E
	;   				"NumAlpha" - +locn then locn with 1.A.E sorted after  1.N.E
	;         
	; Returns (By Ref) :
	;	Arrays of Locations - assignment to sequence depends on sort rule
	;	If pblnExtent = NO  -> sequence number as key
	;		parrLocs(seq) = Child           for children of pidLocn only
	;		parrChildren(Child) = ""        for children of pidLocn only
	;		
	;	If pblnExtent = YES -> parent location id + sequence number as key
	;		parrLocs(Parent,seq) = Child    repeated with each child as "Parent" as necessary
	;		parrChildren(location) = ""     for all descendants of pidLocn
	;	
	;	Calling routine needs to clear arrays.
	;
	; History :
	; 06-Jan-2014	shobby	CORE-303: CacheIndex
	; 20-Nov-2009	GRF		SR16871: remove company from keys
	; 02-Oct-2009	PPP		SR16920: Updated with CacheTemp to have subscripts
	; 01-Oct-2009	PPP		SR16920: Checking for spaces as well
	; 15-Sep-2009	PPP		SR16892: Added new parameter parrChildren to return Children
	; 15-Nov-2007	GRF		SR15563: Flexible presentation order (pstrSortRule) not
	; 							fully implemented yet
	; 16-Oct-2007	GRF		SR15563: Added second YM in WWW0121s; added quotes around
	; 							alpha locns as keys; won't work with special characters
	; 							in global name (e.g. locn 1-10)
	; 07-Aug-2007	FIS		created
	;-------------------------------------------------------------------------------
	new count,idChildLocn,idxLocn,idxChild,strChildLocn,strGlobalNode,strSORKey,strTempFile
	
	;if $get(pidCompany)="" quit
	if $get(pidLocn)=""    quit
	
	;---------------------------------------
	;	Index 2 = P1 Company, D20 Parent Locn
	;---------------------------------------
	;CORE-303 set idxLocn    = $$^WWWUMLAU(pidLocn,1)  ;Parent Location as Sortkey
	set idxLocn    = $$Index^COMUtilIndex(pidLocn,"WWW0121")  ;Parent Location as Sortkey ;CORE-303 
	set pblnExtent = +$get(pblnExtent)       ;Search for all hierarchical Children
	
	set strSORKey = YUSER_":"_pidLocn
	kill ^WWWSOR("WWW0121Utils",strSORKey)
	set idChildLocn=""
	for {
		set idChildLocn=$order(^WWW0121s(0,2,0,idxLocn,0,idChildLocn))
		quit:idChildLocn=""
		
		if pstrSortRule       = "Cache" {
			set strChildLocn = idChildLocn
			
		} elseif pstrSortRule = "AlphaNum" {
			set strChildLocn = +idChildLocn
			
		} else {              ; "NumAlpha"
			set strChildLocn = +idChildLocn
			if (strChildLocn = 0) && ($extract(idChildLocn,1)'="0") {
				set strChildLocn = $$$BigNumber
			}
		}
		set ^WWWSOR("WWW0121Utils",strSORKey,strChildLocn,idChildLocn) = ""
	}
	
	set count = 0
	set strChildLocn = ""
	for {
		set strChildLocn = $order(^WWWSOR("WWW0121Utils",strSORKey,strChildLocn))
		quit:strChildLocn=""
	
		set idChildLocn = ""
		for {
			set idChildLocn = $order(^WWWSOR("WWW0121Utils",strSORKey,strChildLocn,idChildLocn))
			quit:idChildLocn=""
			
			set count=count+1
			
			if pblnExtent '= $$$YES {  //Direct Children only
				if $extract($get(parrLocs))="^" {              ; Save in Global 
				//	set strGlobalNode=parrLocs_"("_count_")" //SR16920
					if parrLocs'["(" {
						set strGlobalNode = parrLocs_"("_count_")"				
					} else {
						set strGlobalNode = $piece(parrLocs,")",1)_","_count_")"
					}
					set @strGlobalNode = idChildLocn

				} else {                         ; Save in Variable - will overflow if large number of sites - use global always?
					set parrLocs(count) = idChildLocn    ; Not an issue under later releases of Cache  FIXME : Replace with array only?
				}
				set parrChildren(idChildLocn) = ""
				
			} else {               //All Children
				if $extract($get(parrLocs))="^" {
				//	set strGlobalNode = parrLocs_"("""_pidLocn_""","_count_")" //SR16920
					if parrLocs'["(" {
						set strGlobalNode = parrLocs_"("""_pidLocn_""","_count_")"				
					} else {
						set strGlobalNode = $piece(parrLocs,")",1)_","""_pidLocn_""","_count_")"
					}

					set @strGlobalNode = idChildLocn
					
				} else {
					set parrLocs(pidLocn,count)=idChildLocn
				}
				set parrChildren(idChildLocn)=""
				
				;CORE-303 set idxChild=$$^WWWUMLAU(idChildLocn,1)
				set idxChild= $$Index^COMUtilIndex(idChildLocn,"WWW0121")  ;CORE-303 
				
				if $order(^WWW0121s(0,2,0,idxChild,""))'="" {
			;		set strTempFile="^CacheTempWWW0121RelTmp"_$job_idChildLocn
				//	set strTempFile="^CacheTempWWW0121RelTmp"_$job_$tr(idChildLocn,"- ","..")	//SR16920
					set strTempFile="^CacheTempWWW0121RelTmp"_$job_"("""_idChildLocn_""")"
					kill @strTempFile
				//	do Children(0,idChildLocn,strTempFile,$$$YES)    ; Recursive call    //SR16892
					do Children(0,idChildLocn,strTempFile,$$$YES,pstrSortRule,.parrChildren)    ; Recursive call
					if $extract($get(parrLocs))="^" {
						merge @parrLocs = @strTempFile
					} else {
						merge parrLocs  = @strTempFile
					}
				;	kill @strTempFile
				}
			}
		}
	}
	kill ^WWWSOR("WWW0121Utils",strSORKey)
	quit
	

GetShipTo(pidLocation)
	;-------------------------------------------------------------------------------
	;
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 08-Dec-2009	PP		SRxxxx<>: Created
	;-------------------------------------------------------------------------------
	new idShipTo
	
	$$$VAR

	if $get(pidLocation)'="" {
		set objLocation = $get(^WWW0121(0,0,pidLocation,1))
		set idShipTo    = $$$WWW0121ShipTo(objLocation)

		if idShipTo = "" {
			set idShipTo = pidLocation
		}
	}
	quit idShipTo

GetBillTo(pidLocation)
	;-------------------------------------------------------------------------------
	;
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 01-Jun-2011	PPP		SR17767: Created
	;-------------------------------------------------------------------------------
	new idBillTo
	
	$$$VAR
	
	if $get(pidLocation)'="" {
		set objLocation = $get(^WWW0121(0,0,pidLocation,1))
		set idBillTo    = $$$WWW0121BillTo(objLocation)

		if idBillTo = "" {
			set idBillTo = pidLocation
		}
	}
	quit idBillTo
]]></Routine>
</Export>