<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INREC" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INREC
	
#include COMSYS
#include INConst
#include FINConst
#include COMConst
#include WWWConst
#include INSYS
#include %occInclude
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2)	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INREC("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
OnFilter(YKEY,YFELD)
	;-------------------------------------------------------------------------------
	; Restricts the visibility of the difference types of forms that relate to the
	; class INREC so only appropriate records can be searched or loaded into a 
	; particular form.
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 18-Jul-2011	GRF		SR17751: Return standard error string to match WWWEVENT
	;							change.
	; 22-Oct-2010	GRF		SR17578: Include form INReceipt; clear old commented code
	; 12-Feb-2008	shobby	SRBR014892: Corrected missing language text.
	; 06-Feb-2008	shobby	SRBR014892: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	$$$LogR("OnFilter",YKEY_":"_YFELD)
	set strStatus = $$$OK

	if YFELD'="" {
		if $get(YFORM)="INRECReverse"    { set strStatus = ($$$INRECType(YFELD)=$$$EnumINRECSupplierReversal)
		} elseif $get(YFORM)="INRECB"    { set strStatus = ($$$INRECType(YFELD)=$$$EnumINRECSupplierReceipt)
		} elseif $get(YFORM)="INRECTFR"  { set strStatus = ($$$INRECType(YFELD)=$$$EnumINRECTransferReceipt)
		} elseif $get(YFORM)="INREC"     { set strStatus = ($$$INRECType(YFELD)=$$$EnumINRECSupplierReceipt)
		} elseif $get(YFORM)="INReceipt" { set strStatus = ($$$INRECType(YFELD)=$$$EnumINRECSupplierReceipt)    ; SR17578
		}
		
		if $$$ISERR(strStatus) {  ; "Unable to load record number '%1'. It is a '%2'."
		;	set strStatus = 0_Y_$$DecodeError^COMUtilError($$$MakeStatus("IN00831",YKEY,$$$AppEnum("INREC",$$$INRECType(YFELD)))) SR17751
			set strStatus = $$$MakeStatus("IN00831",YKEY,$$$AppEnum("INREC",$$$INRECType(YFELD)))
			set YKEY="+"
		}
	}
	quit strStatus
	
	
BeforeButtonLine(pYKEY,pYFELD) 
    ;-------------------------------------------------------------------------------
    ; Set form to readonly if not editable
    ;
    ; Called By: Forms INREC, INRECB, INRECReverse, INRECTFR
    ; 				+ VAR CODE
    ; Params:
    ;
    ; Returns:
    ;
    ; History:
    ; 12-May-2010	GRF		SR17262: YUSER rather than YBED
	; 27-Apr-2010	Karine	SR17262: Created
    ; 01-Jun-2009	GRF		Authorisation/ReadOnly Macros
    ; 08-Sep-2006	GRF		SR14979: Doco
    ; 17-May-2006	JW		SR14646: Hide qty based on setup (set YOPTION)
    ; 03-Nov-2005	JW		SR13222: Created
    ;-------------------------------------------------------------------------------
	new idLocn,idRec
	
	$$$LogR("OnBeforeButtonLine",$get(pYKEY)_":"_$get(pYFELD))
	if '$$$NoKey(pYKEY) {
		if '$$Editable(pYFELD,$$$RECType) {
			set $$$WWW120AuthorizationToModifyData(YVOR) = $$$EnumReadOnly
		}
		
		set idLocn = $$$INRECLocation(pYFELD)
		if idLocn'="" set YOPTION = '$$$INVORGBHideOrderQuantity($get(^INVORGB(0,0,idLocn,1))) // SR14646
		
	; SR17262 vvvvvvvvvvvvvvvvvvv
	} elseif $get(YFORM)="INRECReverse" {
	;	do ListMostRecentReceipts^INRECReverse(YBED,YLOCATION)
		do ListMostRecentReceipts^INRECReverse(YUSER,YLOCATION)  ; FIXME : use idLocn rather than YLOCATION?
	}
	; SR17262 ^^^^^^^^^^^^^^^^^^^
	quit
	
	
Editable(pobjRec,penumType="") 
    ;-------------------------------------------------------------------------------
    ; Is form editable (unprocessed) ?
    ;
    ; Params:
    ;	pobjRec		^INREC data
    ;	penumType	"INREC" Application type : Type of Receipt if still open receipt
    ;
    ; Returns:
    ;
    ; History:
    ; 09-sep-2008 	Luke	SR15897 Reverted SR15800:
    ; 17-Jul-2008   Luke    SR15800: Add check if the Conversion has been run
    ; 02-Apr-2007	JW		BR014411: Check whether location should be restricted.
    ; 03-Nov-2005	JW		SR13222: Created
    ;-------------------------------------------------------------------------------
	new strStatus
	
	$$$LogR("Editable",$get(penumType)_":"_$get(pobjRec))
	
	set strStatus = $$$OK
	if $$$INRECStatus(pobjRec) '= $$$EnumINSTATUSUnprocessed {
		set strStatus 	= $$$MakeStatus("IN00377")  ; "Record already processed"
		
	} elseif (penumType'="") && ($$$INRECType(pobjRec)'=penumType) {
		set strStatus 	= $$$MakeStatus("IN00407","("_penumType_") "_($$$AppEnum("INREC",penumType)))
		; "Wrong record type, expecting %1"
		
	} elseif ($$$INRECLocation(pobjRec)'=YLOCATION) && $$LocationRestricted^INRECTFR() {
		set strStatus = $$$MakeStatus("IN00678")
		; "You must be logged in to the receiving location to process this receipt"
	}
 
	if $$$ISERR(strStatus) set YRETVAL = strStatus
	
	quit strStatus
	
	
AfterDataFields(pidRec="",pobjRec="")
    ;-------------------------------------------------------------------------------
    ; Load grid
    ;
    ; Params:
    ;
    ; Returns:
    ;
    ; History:
    ; 01-Sep-2008	shobby	SRBR014973: Show grid on all tabs (except 4)
    ; 06-Mar-2007	JW		SR15459: Removed BR014080 grid.
    ; 11-Aug-2006	RPW		SR14906: Show the receipted orders table.
    ; 25-Jun-2006	FrankF	BR014080: Add charges grid to Supplier Receipt.
    ; 10-Apr-2006	JW		SR14421: Made more generic
    ; 02-Nov-2005	JW		SR13222: Created
    ;-------------------------------------------------------------------------------
	new intType
	
	$$$LogR("AfterDataFields",YFORM_","_YSEITE_":"_pidRec_":"_pobjRec)
	
	set intType = $$$INRECType(pobjRec)
	
	set ^CacheTempINRECType(YUSER) = intType
	
	if intType=$$$RECType {
		// If this is the supplier receipt form, show the Invoice Line grid for the Invoice tab.
		if YSEITE'=4 {
			do LoadGrid(pidRec,YFORM)
		}
		
		if (YFORM="INREC") {
			if YSEITE=1 do ShowReceiptedTable(pidRec)
		}
	}
	quit
	
	
LoadInvoiceGrid(pidRec)
    ;-------------------------------------------------------------------------------
    ; Loads Invoice Charge grid.
    ;
    ; Params:
    ; 	pidRec - the id of the Receipt Line.
    ;
    ; Returns:
    ;
    ; History:
	; 05-Dec-2008	GRF		Clarify Enabled test
    ; 25-Jun-2006	FrankF	SRBR014080: Created.
    ;-------------------------------------------------------------------------------
	new YAUSWAHL,YFELD,YFORM,YKEY
	
	set YFORM = "INRECCharge"
	set YFELD = ""
	set YKEY  = $get(pidRec)
	
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)    = $$$YES
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL) = 300
	set $$$COMGridEditParameterGridName(YAUSWAHL)      = YFORM
	set $$$COMGridEditParameterEnabled(YAUSWAHL)       = ($$$WWW120AuthorizationToModifyData(YVOR) '= $$$EnumReadOnly)
	set $$$COMGridEditParameterContainer(YAUSWAHL)     = "INREC"
	set $$$COMGridEditParameterUpdateFields(YAUSWAHL)  = "D15=4" 
 
	do ^COMGridEdit31
	quit	
	
	
LoadGrid(pidRec,pstrContainer) 
    ;-------------------------------------------------------------------------------
    ; Load the receipt line grid
    ;
    ; Params:
    ;
    ; Returns:
    ;
    ; History:
    ; 06-Jan-2014	shobby	Screen Crash. Copied 'parameter' setup from Adelaide core.
    ; 01-Oct-2013	SCR		CORE-273: Select Columns for Transfer
    ; 05-Sep-2006	JW		SR14979: Add GridLine (go to line)
    ; 10-Apr-2006	JW		SR14421: Made more generic
    ; 02-Nov-2005	JW		SR13222: Created
    ;-------------------------------------------------------------------------------
	new idForm,YAUSWAHL,objINREC,idRecSource,objRecSource
	
	set idForm = pstrContainer_"Line"
	
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)    = $$$YES
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL) = 300
	set $$$COMGridEditParameterGridName(YAUSWAHL)      = idForm
	
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
		; BEGIN SR17262 - Disable delete button when receipt has invoice
		if (pstrContainer = "INRECReverse") && (pidRec '= "") {
		
			set objINREC = $get(^INREC(YM,pidRec,1))
			set idRecSource = $$$INRECReceiptSourceNo(objINREC)
			if idRecSource '= "" {
				set objRecSource = $get(^INREC(YM,idRecSource,1))
				set InvoiceNumber = $$$INRECInvoiceNumber(objRecSource)
				if InvoiceNumber '= "" {
					set $$$COMGridEditParameterEnabled(YAUSWAHL) = $$$NO
				} else {
					set $$$COMGridEditParameterEnabled(YAUSWAHL) = $$$YES
				}
			} else {
				set $$$COMGridEditParameterEnabled(YAUSWAHL) = ($$$WWW120AuthorizationToModifyData(YVOR) '= $$$EnumReadOnly)
			}
		
		} else {
			set $$$COMGridEditParameterEnabled(YAUSWAHL) = ($$$WWW120AuthorizationToModifyData(YVOR) '= $$$EnumReadOnly)
		}
		; END SR17262
		;set $$$COMGridEditParameterEnabled(YAUSWAHL) = ($$$WWW120AuthorizationToModifyData(YVOR) '= $$$EnumReadOnly) ;SR17262
		set $$$COMGridEditParameterContainer(YAUSWAHL) = pstrContainer
	}
	else {
		set $$$COMGridEditParameterSharedForm(YAUSWAHL)    = $$$YES
		set $$$COMGridEditParameterMaximumHeight(YAUSWAHL) = 300
		set $$$COMGridEditParameterGridName(YAUSWAHL)      = idForm
		set $$$COMGridEditParameterEnabled(YAUSWAHL)       = ($$$WWW120AuthorizationToModifyData(YVOR) '= $$$EnumReadOnly)
		set $$$COMGridEditParameterContainer(YAUSWAHL)     = pstrContainer
	}
	
	set ^CacheTemp(YUSER,"GridLine") = YPARA
	
	$$$GRIDStart(idForm,pidRec)
	
	if (idForm="INRECTFRLine")&&(pidRec'="") {
		do SelectCol^INRECTFR(idForm,pidRec)  ; CORE-273
	}
	
	quit
	
	
BeforeSave(pYKEY,&pobjREC)
    ;-------------------------------------------------------------------------------
    ; On Before Save - save the grid
    ;
    ; Called by:
    ; 	Form    INREC, INRECReverse, INRECTFR (+?)
    ; 	Routine INRECB (+?)
    ;
    ; Params:	pYKEY	- INREC key
    ; 			pobjREC - INREC record     ; FIXME : pobjREC/pobjRec/pYFELD in different places <GRF>
    ;
    ; Returns:
    ;
    ; History:
    ; 12-Feb-2007	PO		SR15217: Call EnsureTransfersCanBeReceived
    ; 08-Sep-2006	GRF		SR14979: Use Q Macro
    ; 04-Sep-2006	JW		SR14979: Added pobjRec, MultiPass
    ; 02-Nov-2005	JW		SR13222: Created
    ;-------------------------------------------------------------------------------
	new strStatus
	
	$$$LogR("BeforeSave",$get(pYKEY)_":"_$get(pobjREC))
	
	set strStatus = $$$OK
	if YFORM = "INRECTFR" {
		set strStatus = $$EnsureTransfersCanBeReceived^INRECTFR()
	}
	
	if $$$ISOK(strStatus) set strStatus = $$$GRIDSave(pYKEY)
	
	; FIXME : <GRF> also called from forms INRECB and INRECReverse - would expect INRECB
	;               might need NextPass but not clear.
	
	if $$$ISOK(strStatus) {
		if (YFORM="INREC") {
			if $$$MultiPass($$$INRECLocation(pobjREC)) {
				set strStatus = $$NextPass(pYKEY,pobjREC)
			}
		
		} elseif (YFORM="INRECTFR") {
			// Not ideal as COMView may be used before save is performed
			set $$$INRECTransferNumbers(pobjREC) = $$ReCalcTransferNumbers^INRECTFR(pYKEY, $$$INRECTransferNumbers(pobjREC))
		}
	}
	
	if $$$ISERR(strStatus) set Q = $$$QDontSave
	quit strStatus
	
	
GoToNewReceipt(pidOrder,pidOrderLine) ; DEPRECATED - see INReceiptLink
	;-------------------------------------------------------------------------------
	; Create a receipt for this order line and then go to it
	;
	; Called by : INAUFBANZ1 - REMOVED
	; 
	; Params:	pidOrder,pidOrderLine - ids of order line to receive
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 24-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	new idREC,strStatus

	quit		//FIXME: Need to update to new Receipt PPP
	
	/*
	set strStatus = $$Create(pidOrder,pidOrderLine,.idREC)
	
	if $$$ISOK(strStatus) {
		do GoToForm^COMUtilForm("INReceipt",idREC)
	} else {
		do ReturnError^COMUtilError(strStatus)
	}
	
	quit
	*/
	
	
Create(pidOrder,pidOrderLine,&pidREC="",pidLocn,pfltPartQty="",pstrLot="",pdteExpiry="")
	;-------------------------------------------------------------------------------
	; Create a receipt record for 1 order line. Can add to existing header record.
	;
	; Params:	pidOrder,pidOrderLine - ids of order line to receive
	; 			pidRec      - id of the INREC record. If not passed in, new one created.
	;			pidLocn     - receipt location. will use current location if not defined.
	;			pfltPartQty - receipt of partial qty
	;			pstrLot     - lot number
	;			pdteExpiry  - expiry date
	;			
	; ByRefs:	pidRec
	;
	; Returns:	status
	;
	; History:
	; 02-Oct-2009	GRF		SR16361: Implement changed code
	; 10-Sep-2009	GRF		SR16361: Remove INWEAUF(VOR) processing
	; 08-Dec-2008	FIS		SR16205: Partial Receipt with Lot number and expiry date
	; 24-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	new objREC,strStatus,idInvMatch,objRECLine,strKey
	
	$$$LogR("Create",$get(pidOrder)_","_$get(pidOrderLine)_":"_$get(pidREC))
	set pidLocn = $get(pidLocn,YLOCATION)
	
	;***************************************
	tstart
	;***************************************
	set strStatus = $$$OK
	
	if pidREC="" {
		set pidREC = $$^WWWNEXT("INREC")	
	}
	if $data(^INREC(0,pidREC,1)) {
		set objREC = $get(^INREC(0,pidREC,1))
	} else {
		set $$$INRECType(objREC)     = $$$EnumINRECSupplierReceipt
		set $$$INRECLocation(objREC) = pidLocn
		set $$$INRECStatus(objREC)   = $$$EnumINSTATUSUnprocessed
		
		set strStatus = $$$Save("INREC",pidREC,objREC,$$$YES)
	}
		
	if $$$ISOK(strStatus) {
		set idInvMatch = $order(^FINAPInvMatchCaches(0,1,$$$Index(pidOrder),$$$Index(pidOrderLine),""),-1)
		if idInvMatch="" {
			set strStatus = $listbuild("IN00519")  	; "Invalid order data, DCM not running correctly"
		} else {
			set strStatus = $$CreateLine^INRECLine(objREC,idInvMatch,.objRECLine,pfltPartQty,pstrLot,pdteExpiry)
			
			if $$$ISOK(strStatus) {
				set strKey = pidREC_","_($order(^INRECLine(0,pidREC,""),-1)+1)	// Get next line
				set strStatus = $$$Save("INRECLine",strKey,objRECLine,$$$YES)
				
	;			if $$$ISOK(strStatus) {
	;				set strStatus = $$Update^INRECLine("INWEAUFVOR",strKey,objRECLine)
	;			}
			}
		}
	}
	
	;***************************************
	if $$$ISOK(strStatus) {
		if $tlevel>0 tcommit
	} else {
		trollback
	}
	;***************************************
	
	quit strStatus
	
	
ShowReceiptedTable(pidRec)
	;-------------------------------------------------------------------------------
	; Get the orders and find the ones that have already been partially receipted and
	; show the table of them.
	;
	; Params:
	; pidRec : the id of the Receipt Line.
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 02-Oct-2009	GRF		SR16361: Implement changed code
	; 10-Sep-2009	GRF		SR16361: Remove INWEAUF(VOR) processing
	; 09-Apr-2009	GRF		SR16363: Cope with new receipts w/out order via INREC form
	; 28-Mar-2008	HQN		SR15640: Removed code branch
	; 07-Mar-2008	HQN		SR15640: Branched code for V2 lookup
	; 05-Sep-2006	JW		SR14979: Include. Added INWEAUFVOR, order, import.
	; 11-Aug-2006	RPW		SR14906: Created  (JW: removed import)
	;-------------------------------------------------------------------------------
	new arrOrders,idImport,idLine,idOrder,idxImport,objLine,objRec,strClass,strOrders
	
	quit:$$$NoKey(pidRec)
 
	set strOrders = ""
	set objRec    = $get(^INREC(0,pidRec,1))
	set idOrder   = $$$INRECSupplierOrder(objRec)
	set idImport  = $$$INRECImportNumber(objRec)
	
	if idOrder'="" {
		set arrOrders(idOrder) = ""     // Get order if exists
		
	} elseif idImport'="" {             // Otherwise, get orders from import
		set idxImport = $$$Index(idImport)
		set idOrder = ""
		for {
			set idOrder = $order(^INAUFPAs(0,2,idxImport,idOrder))
			quit:idOrder=""
			
			set arrOrders(idOrder) = ""
		}
	
	} else {                            // Otherwise, look at lines
		set idLine = ""
		for {
			set idLine = $order(^INRECLine(0,pidRec,idLine))
			quit:idLine=""
			
			set objLine=$get(^INRECLine(0,pidRec,idLine,1))
			if $$$INRECLineInclude(objLine) {
				if $$$INRECLineOrder1(objLine)'="" {
					set arrOrders($$$INRECLineOrder1(objLine)) = ""
				}
			}
		}
	}
	
	if $data(arrOrders) {
		set strOrders = $$ArrayToString^COMUtilStr(.arrOrders)
		do ShowReceipts^INRECShow(strOrders,idImport)
	}
 
	quit
 
NextPass(pidRec,pobjREC)
	;-------------------------------------------------------------------------------
	; Create/update lines in the grid for the next pass
	;
	; Params:	pidRec	- INREC key
	; 			pobjREC	- INREC object
	;
	; ByRefs:
	;
	; Returns:	status
	;
	; History:
	; 01-Jul-2008	shobby	SRBR014964: strStatus issues.
	; 14-Sep-2006	JW		SR15039: Get last included line, not first
	; 04-Sep-2006	JW		SR14979: Created
	;-------------------------------------------------------------------------------
	new strStatus,idLine,objLine,idLink,arrLinks,objCache,fltDiff,strKey,blnInclude
	
	set strStatus = $$$OK
	
	set idLine = ""
	for {
		set idLine = $order(^INRECLine(0,pidRec,idLine))
		quit:idLine=""
		
		set objLine = $get(^INRECLine(0,pidRec,idLine,1))
		set idLink = $$$INRECLineCacheLink(objLine)
		
		set blnInclude = +$$$INRECLineInclude(objLine)
		set arrLinks(idLink,blnInclude,idLine) = objLine
		if blnInclude {
			set arrLinks(idLink) = $get(arrLinks(idLink)) + $$$INRECLineQuantity(objLine)
		}
	}
	
	set idLink = ""
	for {
		set idLink = $order(arrLinks(idLink))
		quit:idLink=""
		
		quit:$$$ISERR(strStatus)
		set objCache = $get(^FINAPInvMatchCache(0,idLink,1))
		set fltDiff = $$$FINAPInvMatchCacheTotalQuantity(objCache) - $get(arrLinks(idLink))		// qty left to receive
		
		set idLine = $order(arrLinks(idLink,$$$NO,""))
		if idLine'="" {				// Update the excluded line
			if fltDiff > 0 {
				set objLine = arrLinks(idLink,$$$NO,idLine)
				if fltDiff '= +$$$INRECLineQuantity(objLine) {
					set $$$INRECLineQuantity(objLine) = fltDiff
					set strStatus = $$$Save("INRECLine",pidRec_","_idLine,objLine,$$$YES)
				}
			} else {				// or kill it
				set strStatus = $$KILL^COMUtils("INRECLine",pidRec_","_idLine)
			}
			
		} elseif fltDiff > 0 {		// Create new excluded line
			set strStatus = $$CreateLine^INRECLine(pobjREC,idLink,.objLine)
			if $$$ISOK(strStatus) {
				set $$$INRECLineQuantity(objLine) = fltDiff
				set idLine = $order(arrLinks(idLink,$$$YES,""),-1)			// get last link
				set strKey = pidRec_","_(idLine + $$$CopyIncrement)			// Get next line
				set strStatus = $$$Save("INRECLine",strKey,objLine,$$$YES)
			}
		}
	}
	quit strStatus
	
	
GetDefaultStorage()
	;-------------------------------------------------------------------------------
	; History:
	; 15-Jan-2009	GRF		Isolate GetDefaultReceiptStorage with NULLOREF test
	; 28-Mar-2008	HQN		Moved logic from INREC form to here
	; 							V1 may not have DefaultReceiptStorage set
	;-------------------------------------------------------------------------------
	new idStore,objLocation,objStorage
	
	set idStore = ""
	
	set objLocation = ##class(alLOC.dULocation).%OpenId("0||"_YLOCATION)
	if objLocation'=$$$NULLOREF {
		set objStorage = objLocation.GetDefaultReceiptStorage()
		if objStorage '= $$$NULLOREF {
			set idStore = objStorage.StockLocation
		}
	}
	quit idStore
	
]]></Routine>
</Export>