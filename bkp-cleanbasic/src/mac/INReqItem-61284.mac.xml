<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INReqItem" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INReqItem

#include COMSYS
#include COMConst
#include INConst
#include %occInclude



OnAfterDataFields(pYM,pYFORM,pintPage,pidReqItem,pYFELD)
	;-------------------------------------------------------------------------------
	;			
	; Called By : Form INReqItem
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
    ; 10-Oct-2013	SCR		SESDF-662: Created
	;-------------------------------------------------------------------------------

	if '$$$NoKey(pidReqItem) {
		do LoadLines(pYFORM,pidReqItem,pYFELD)
		do LoadGrid(pYFORM,pidReqItem,pYFELD)
	}
	quit
	
LoadGrid(pYFORM,pidReqItem,pYFELD)
	;-------------------------------------------------------------------------------
	;			
	; Called By :
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
    ; 10-Oct-2013	SCR		SESDF-662: Created
	;-------------------------------------------------------------------------------
	
	if (pidReqItem '= "") {
		set YFORM = "INReqItemLine"
		
		set $$$COMGridEditParameterSharedForm(YAUSWAHL)    = $$$YES
		set $$$COMGridEditParameterMaximumHeight(YAUSWAHL) = 400
		set $$$COMGridEditParameterGridName(YAUSWAHL)      = YFORM
		set $$$COMGridEditParameterContainer(YAUSWAHL)     = "INReqItem"
		set $$$COMGridEditParameterEnabled(YAUSWAHL)       = $$$YES ; open
		
		do Start^COMGridEdit31(YFORM,pidReqItem)
		
		
	}
	quit
	
	
LoadLines(pYFORM,pidReqItem,pobjReqItem,pblnViewMode=$$$NO)
	;-------------------------------------------------------------------------------
	;			
	; Called By :
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 30-Oct-2013	SCR		SESDF-681: Updated for INReqItemView
    ; 10-Oct-2013	SCR		SESDF-662: Created
	;-------------------------------------------------------------------------------
	new arrSelected,blnFound,blnSelected,idFromLoc,idItem,idItemLine,idLine,idPriority
	new idReq,idReqLine,idToLoc,objReq,objReqItemLine,objResult,strSQL
	
	; Record Selected lines before removing
	set idLine=""
	for {
		set idLine	= $order(^INReqItemLine(YM,pidReqItem,idLine))
		quit:'idLine
		set objReqItemLine	= $get(^INReqItemLine(YM,pidReqItem,idLine,1))
		continue:'$$$INReqItemLineSelect1(objReqItemLine)
		continue:$$$INReqItemLineItem(objReqItemLine)=""
		set arrSelected( $$$INReqItemLineRequisition(objReqItemLine), $$$INReqItemLineRequisitionLine(objReqItemLine))=$$$YES
	}
	set blnFound	= $$$NO
	set objResult	= ##class(%Library.ResultSet).%New("%DynamicQuery:SQL")
	set idFromLoc	= $$$INReqItemFromLocation(pobjReqItem)
	set idToLoc		= $$$INReqItemToLocation(pobjReqItem)
	set idItem		= $$$INReqItemItem(pobjReqItem)
	set idPriority	= $$$INReqItemPriority(pobjReqItem)

	if pblnViewMode = $$$NO {
		set strSQL		= "SELECT  ReqNum, LineNumber FROM INReq INNER JOIN INReqLine ON INReq.ReqNum = INReqLine.ReqNumber "
		set strSQL		= strSQL _"where ((INReq.status = 2) or (INReq.status = 3)) and (INReq.FromLocn = ?) and (INReq.ToLocn = ?) " 
		if idItem '= "" {
			set strSQL	= strSQL_"and (INReqLine.Item = '"_idItem_"') "
		}
		do objResult.Prepare(strSQL)
		do objResult.Execute(idFromLoc, idToLoc)
	} else {
		set strSQL		= "SELECT  ReqNum, LineNumber FROM INReq INNER JOIN INReqLine ON INReq.ReqNum = INReqLine.ReqNumber "
		set strSQL		= strSQL _"where ((INReq.status = 2) or (INReq.status = 3)) and (INReq.FromLocn = ?) " 
		set strSQL	= strSQL_"and (INReqLine.Item = ?) "
		set:idPriority'="" strSQL	= strSQL_"and (INReq.Priority ='"_idPriority_"') "
		; Insert VAR SQL here
		if (+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(0,YM,1)))) {
			set strSQL	= $$LoadLineSQL^VARReqItemView(pobjReqItem,pblnViewMode,strSQL)
		}
		do objResult.Prepare(strSQL)
		do objResult.Execute(idFromLoc,idItem)
	}
	set idItemLine	= 0
	while objResult.Next() {
		set idReq		= objResult.Data("ReqNum")
		set idReqLine	= objResult.Data("LineNumber")
		set objReq		= $get(^INIssue(YM,idReq,1))
		set blnSelected	= $get(arrSelected(idReq,idReqLine))
		do AddLines(idReq,idReqLine,pobjReqItem,pidReqItem,objReq,blnSelected,.idItemLine)
	}
	do RemoveLines(pidReqItem,idItemLine)
	quit
	
AddLines(pidReq,idReqLine,pobjReqItem,pidReqItem,pobjReq,pblnSelected,&pidItemLine)
	;-------------------------------------------------------------------------------
	;			
	; Called By :
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 30-Oct-2013	SCR		SESDF-681: Updated for INReqItemView
    ; 14-Oct-2013	SCR		SESDF-662: Created
	;-------------------------------------------------------------------------------
	new blnEmergency,blnFound,blnHaveStock,blnLoad,fltFromSOH,fltIssued,fltRequested
	new fltToSOH,idFromLoc,idGroup,idItem,idItemGroup,idSearchItem,idToLoc,idUnit
	new intGroup,intSize,objItem,objItemV2,objLine,objReq,objReqLine,strGroups
	new strSearchGrp,strStatus
	
	set blnLoad			= $$$YES
	set strStatus		= $$$YES
	
	set objReq			= $get(^INReq(YM,pidReq,1))
	set objLine			= ""
	set objReqLine		= $get(^INReqLine(YM,pidReq,idReqLine,1))
	set idItem			= $$$INReqLineItem(objReqLine)
	set objItem			= $get(^INART(YM,idItem,1))
	set idItemGroup		= $$$INARTItemGroup(objItem)
	set idUnit			= $$$INARTUnitofMeasure(objItem)
	set idGroup			= $$$INReqItemGroup1(pobjReqItem)
	set idSearchItem	= $$$INReqItemItem(pobjReqItem)
	set idFromLoc		= $$$INReqItemFromLocation(pobjReqItem)
	set idToLoc			= $$$INReqItemToLocation(pobjReqItem)
	if idSearchItem'="" {
		set:idSearchItem'=idItem blnLoad	= $$$NO
	}
	if blnLoad=$$$YES {
		set strGroups		= $$$INReqItemMultipleGroups(pobjReqItem)
		set strGroups		= $translate(strGroups,",",";")
		set:strGroups="" strGroups = idGroup
		if strGroups'="" {
			set blnFound	= $$$NO
			for intGroup=1:1:$length(strGroups,";") {
				set strSearchGrp	= $piece(strGroups,";",intGroup)
				set intSize			= $length(strSearchGrp)
				if strSearchGrp=$extract(idItemGroup,1,intSize) {
					set blnFound	= $$$YES
					quit
				}
			}
			set blnLoad	= blnFound
		}
	}
	if blnLoad=$$$YES {
		set fltIssued		= $$$INReqLineQtyIssued(objReqLine)
		set fltRequested	= $$$INReqLineQtyOrdered(objReqLine)
		set:fltIssued'<fltRequested blnLoad = $$$NO
	}
	
	if blnLoad=$$$YES {
		set objItemV2		= ##class(alINV.dItem).%OpenId(idItem)
		set blnHaveStock	= $$$INReqItemStockAvailable(pobjReqItem)
		set blnEmergency	= $$$INReqItemEmergency(pobjReqItem)
		set fltFromSOH		= ##class(alSOH.iSOHBalance).GetQOH(idItem,idFromLoc)
		if blnHaveStock&&(fltFromSOH'>0) {
			set blnLoad		= $$$NO ; No Stock at From Location
		}
		if blnEmergency {
			set fltToSOH		= ##class(alSOH.iSOHBalance).GetQOH(idItem,idToLoc)
			if fltToSOH>0 {
				set blnLoad		= $$$NO ; Have Stock (Could not be much) and not an Emergency
			}
		}
	}
	if blnLoad=$$$YES {
		set $$$INReqItemLineItem(objLine)			= idItem
		set $$$INReqItemLineDescription(objLine)	= $$$INARTSearchName(objItem)
		set $$$INReqItemLineUnit(objLine)			= idUnit
		set $$$INReqItemLineStock(objLine)			= fltFromSOH
		set $$$INReqItemLineIssued(objLine)			= fltIssued
		set $$$INReqItemLineGroup1(objLine)			= idItemGroup
		set $$$INReqItemLineRequisition(objLine)	= pidReq
		set $$$INReqItemLineRequisitionLine(objLine)= idReqLine
		set $$$INReqItemLineSelect1(objLine)		= pblnSelected
		set $$$INReqItemLineRequested(objLine)		= fltRequested
		set $$$INReqItemLineToLocation(objLine)		= $$$INReqToLocn(objReq)
		set $$$INReqItemLineCreated(objLine)		= $$$INReqCreatedOn(objReq)
		set $$$INReqItemLineStatus(objLine)			= $$$INReqLineStatus(objReqLine)
		set $$$INReqItemLineMonthlyConsumption(objLine)			= $$GetLocationConsumption^INARTConsumption(idItem,idToLoc)
		set $$$INReqItemLineMonthlyConsumptionManual(objLine)	= $$GetLocationConsumptionAdjusted^INARTConsumption(idItem,idToLoc)
		set $$$INReqItemLineBalance(objLine)					= fltRequested - fltIssued
		set $$$INReqItemLineToStock(objLine)					= ##class(alSOH.iSOHBalance).GetQOH(idItem,idToLoc)
		if (+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(0,YM,1)))) {
			set objLine	= $$UpdateReqItemLine^VARReqItemView(objLine,objReq,objReqLine)
		}
	
		set pidItemLine		= pidItemLine+1
		if $get(^INReqItemLine(YM,pidReqItem,pidItemLine,1))'=objLine {  ; Reduce Kills & Saves
			set strStatus		= $$$Save("INReqItemLine",pidReqItem_","_pidItemLine,objLine,1)
		}
	}
	
	
	quit strStatus
	
RemoveLines(pidReqItem,pidLastLine)
	;-------------------------------------------------------------------------------
	;			
	; Called By :
	;		
	; Inputs : 
	;
	; ByRef :
	;
	
	; Returns :
	;
	; History :
    ; 15-Oct-2013	SCR		SESDF-662: Created
	;-------------------------------------------------------------------------------
	new idLine,strStatus
	
	
	kill ^WWWDATEN(0,+$h,YUSER,"INReqItemLine","D",4) ; Stange @NM bug, this entry should not be WWWDATEN and will cuase the Kill to fail
	set strStatus	= $$$OK
	if '$$$NoKey(pidReqItem) {
		set strStatus	= $$$OK
		set idLine		= pidLastLine
		for {
			set idLine	= $order(^INReqItemLine(YM,pidReqItem,idLine))
			quit:idLine=""
			set strStatus	= $$$Kill("INReqItemLine",pidReqItem_","_idLine)
		}
	}
	quit strStatus

OnBeforeSave(pidReqItem)
	;-------------------------------------------------------------------------------
	;			
	; Called By :
	;		
	; Inputs : 
	;
	; ByRef :
	;
	
	; Returns :
	;
	; History :
    ; 15-Oct-2013	SCR		SESDF-662: Created
	;-------------------------------------------------------------------------------
	new strStatus
	set strStatus	= $$$OK
	if $$$ISOK(strStatus) {
		set strStatus = $$$GRIDSave(pidReqItem,,$$$YES) 
	}
	quit
	
HyperProcess(YKEY)
	;-------------------------------------------------------------------------------
	; Process via Hyper Event
	;
	; Returns:Status
	;
	; History:
	; 16-Oct-2013	SCR		SESDF-662: Created
	;-------------------------------------------------------------------------------
	new YFORM
	set YFORM	= "INReqItem"
	do Perform^COMTransaction(YFORM,YKEY,"Process^INReqItem("""_YKEY_""")","Fin00365")
	quit $$$OK
	
Process(pidReqItem)
	;-------------------------------------------------------------------------------
	;			
	; Called By :
	;		
	; Inputs : 
	;
	; ByRef :
	;
	
	; Returns :
	;
	; History :
    ; 15-Oct-2013	SCR		SESDF-662: Created
	;-------------------------------------------------------------------------------
	new strStatus,idTFR
	
	set strStatus=$$Transaction^COMTransaction("ProcessTxn^INReqItem("""_pidReqItem_""",.idTFR)",$$$YES) ; Sets idTFR
	if $$$ISOK(strStatus) {
 
		if idTFR = "" {
			$$$Alert($$$MakeStatus("IN00426"))          ; "Record not created by Transfer Order form."
			do RedirectForm^COMUtils("INReqItem")
		} else {
			do RedirectForm^COMUtils("INTFR",idTFR,YBACK_$$$COMMA_"INReqItem"_$$$COMMA_pidReqItem,"REQUISITION")
		}
	} else {
		$$$Alert(strStatus)
		do RedirectForm^COMUtils("INReqItem")
	}	
	quit strStatus


ProcessTxn(pidReqItem,&pidTran)
	;-------------------------------------------------------------------------------
	;			
	; Called By :
	;		
	; Inputs : 
	;
	; ByRef :
	;
	
	; Returns :
	;
	; History :
    ; 15-Oct-2013	SCR		SESDF-662: Created
	;-------------------------------------------------------------------------------
	new fltBaseQty,fltIssuedQty,idFromLoc,idInvUnit,idItem,idLine,idReq,idReqLine
	new idToLoc,idTran,idTranLine,idUnit,intNumDP,lstDispatch,objLine,objReq,objReqItem
	new objReqLine,objTran,objTranLine,strStatus
	
	set strStatus	= $$$OK
	set objReqItem	= $get(^INReqItem(YM,pidReqItem,1))
	set objTran		= ""
	set idFromLoc	= $$$INReqItemFromLocation(objReqItem)
	set idToLoc		= $$$INReqItemToLocation(objReqItem)
	set lstDispatch = $$DefaultDispatch^INTRNValidation(idFromLoc,idToLoc)
	set pidTran		= ""
	set idTran		= $$^WWWNEXT("INTFR")
	if $$$ISOK(strStatus) {
		if $$$INReqItemDueDate(objReqItem) < $h {
    	 	set $$$INReqItemDueDate(objReqItem) = +$h
 		}									
		
		set $$$INTFRDueDate(objTran)         	= $$$INReqItemDueDate(objReqItem)
		set $$$INTFRSendingLocation(objTran)	= idFromLoc
		set $$$INTFRReceivingLocation(objTran)	= idToLoc
		set $$$INTFRDispatch(objTran)			= $listget(lstDispatch,1)
		set $$$INTFRTransferType(objTran)		= "Remote"
		set $$$INTFRStatus(objTran)				= 0                  ; Created
		set $$$INTFRTransferDate(objTran)		= +$horolog
		set $$$INTFRProgram1(objTran)			= ""
		set $$$INTFRShipped(objTran)			= ""
		set $$$INTFRCreatedBy(objTran)			= $get(YBED)
		set $$$INTFRCreatedDate(objTran)		= $horolog
		set strStatus = $$$Save("INTFR",idTran,objTran,$$$YES)
	}
	if $$$ISOK(strStatus) {
		; Create Lines

		set idLine		= ""
		for {
			set idLine		= $order(^INReqItemLine(YM,pidReqItem,idLine))
			quit:idLine=""
			quit:'$$$ISOK(strStatus)
			set objLine		= $get(^INReqItemLine(YM,pidReqItem,idLine,1))
			set objTranLine = ""
			set idReq		= $$$INReqItemLineRequisition(objLine)
			set idReqLine	= $$$INReqItemLineRequisitionLine(objLine)
			set objReq		= $get(^INReq(YM,idReq,1))
			set objReqLine	= $get(^INReqLine(YM,idReq,idReqLine,1))
			continue:'$$$INReqItemLineSelect1(objLine)
			continue:$$$INReqLineRejected(objReqLine)||$$$INReqLineCancelled(objReqLine)
			continue:$$$INReqLineStatus(objReqLine)>6
			set idItem		= $$$INReqLineItem(objReqLine)
			set idUnit		= $$$INReqLineUnit(objReqLine) ; [Req Unit]
			set idInvUnit = $$$INARTUnitofMeasure($get(^INART(0,idItem,1)))
		
			set fltIssuedQty = $$Convert^INUOMConversion(idItem,  $$$INReqLineQtyIssued(objReqLine),idInvUnit,idUnit)
			set $$$INTFRLineItem(objTranLine)     = idItem
			set $$$INTFRLineUnit(objTranLine)     = idUnit
			set $$$INTFRLineQuantity(objTranLine) = $$$INReqLineQtyOrdered(objReqLine) - fltIssuedQty        
			if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(0,0,1)))) {
				set $$$INTFRLineFREE1(objTranLine)		= $$$INReqLineQtyOrdered(objReqLine)
				set $$$INTFRLineFREE2(objTranLine)		=  $$$INReqLineQtyIssued(objReqLine)
				set $$$INTFRLineFREE7(objTranLine)		=  $$GetLocationConsumptionAdjusted^INARTConsumption(idItem,idToLoc)
				if ( $$$INReqLineQtyOrdered(objReqLine) - $$$INReqLineQtyIssued(objReqLine))>0 {
					set $$$INTFRLineQuantity(objTranLine)    =  $$$INReqLineQtyOrdered(objReqLine) - fltIssuedQty
				} else {
					continue
				}
			} else {
			set $$$INTFRLineQuantity(objTranLine)		= $$$INReqLineQtyOrdered(objReqLine) -  $$$INReqLineQtyToReceive(objReqLine)
			}
			set $$$INTFRLineReference(objTranLine)		= idReq_","_idReqLine
			set fltBaseQty = $$CalcInventoryQty^INUOMConversion(idItem,$$$INTFRLineUnit(objTranLine),$$$INTFRLineQuantity(objTranLine))
			set intNumDP     = $$GetDecimalPlaces^COMUtilNum("INTFRReqLine",2,idUnit,"","")
			set $$$INTFRLineBaseQuantity(objTranLine) = +$justify(fltBaseQty,0,intNumDP)
			
			set idTranLine	= $order(^INTFRLine(YM,idTran,""),-1)+1
			set strStatus	= $$$Save("INTFRLine",idTran_","_idTranLine,objTranLine,$$$YES)
			if $$$ISOK(strStatus) {
				set $$$INReqItemLineSelect1(objLine)	= $$$NO
				set strStatus	= $$$Save("INReqItemLine",pidReqItem_","_idLine,objLine,$$$YES)
			}
			
		}
		set pidTran	= idTran
	}
	quit strStatus
]]></Routine>
</Export>