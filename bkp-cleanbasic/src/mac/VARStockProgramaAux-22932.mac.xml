<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARStockProgramaAux" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
VARStockProgramaAux

Venceu(Validade)
	if ((Validade<$piece($H,",",1)) && (Validade'="")) q 0
	q 1
CalcularEstoqueDisponivel(Quantidade,QuantidadeReservada,Validade="")
	if ((Validade<$piece($H,",",1)) && (Validade'="")) q 0
	set rtrnQuantidade=Quantidade-QuantidadeReservada
	if rtrnQuantidade<0 q 0
	q rtrnQuantidade

GetLastMovementIn(idItem,idPrograma,idLocation)
	set rtrnDate=""
	Set tSQL  ="	SELECT top 1 "_
					"alSOH.dStockHistory.DateConfirmed AS DataInterna "_
					"FROM alSOH.dStockHistory "_
					"where $$SQLGetMovTypeNumber^VARSQL(alSOH.dStockHistory.MovementType) <> 5  "_
					"AND $$SQLGetMovTypeNumber^VARSQL(alSOH.dStockHistory.MovementType) <> 51 "_
					"and $$shouldShow^VARStockHistory($$getDebugedMovmtType^VARStockHistory(alSOH.dStockHistory.MovementType),+alSOH.dStockHistory.QtyMoved)=1  "_
					"and alSOH.dStockHistory.Location='"_idLocation_"' "_
					"and alSOH.dStockHistory.Item='"_idItem_"' "_
					"and $$GetMovmtVetor^VARStockHistory($$getDebugedMovmtType^VARStockHistory(alSOH.dStockHistory.MovementType),QtyMoved)='Entrada' "
	if idPrograma'="" set tSQL=tSQL_"and alSOH.dStockHistory.Bundle->Program='"_idPrograma_"' "
	set tSQL=tSQL_"order by alSOH.dStockHistory.DateConfirmed desc"
	Set tRs = ##class(%Library.ResultSet).%New()
	Set tRs.RuntimeMode = "0"	
	Do tRs.Prepare(tSQL) 
	Do tRs.Execute()
    While tRs.Next() 
	    {
		    set rtrnDate=tRs.Data("DataInterna")
	    }
	If $IsObject(tRs)
				{
				Do tRs.Close()
	}
	q rtrnDate

GetLastMovementOut(idItem,idPrograma,idLocation)
	set rtrnDate=""
	Set tSQL  ="	SELECT top 1 "_
					"alSOH.dStockHistory.DateConfirmed AS DataInterna "_
					"FROM alSOH.dStockHistory "_
					"where $$SQLGetMovTypeNumber^VARSQL(alSOH.dStockHistory.MovementType) <> 5  "_
					"AND $$SQLGetMovTypeNumber^VARSQL(alSOH.dStockHistory.MovementType) <> 51 "_
					"and $$shouldShow^VARStockHistory($$getDebugedMovmtType^VARStockHistory(alSOH.dStockHistory.MovementType),+alSOH.dStockHistory.QtyMoved)=1  "_
					"and alSOH.dStockHistory.Location='"_idLocation_"' "_
					"and alSOH.dStockHistory.Item='"_idItem_"' "_
					"and $$GetMovmtVetor^VARStockHistory($$getDebugedMovmtType^VARStockHistory(alSOH.dStockHistory.MovementType),QtyMoved)='Saída' "
	if idPrograma'="" set tSQL=tSQL_"and alSOH.dStockHistory.Bundle->Program='"_idPrograma_"' "
	set tSQL=tSQL_"order by alSOH.dStockHistory.DateConfirmed desc"
	Set tRs = ##class(%Library.ResultSet).%New()
	Set tRs.RuntimeMode = "0"	
	Do tRs.Prepare(tSQL) 
	Do tRs.Execute()
    While tRs.Next() 
	    {
		    set rtrnDate=tRs.Data("DataInterna")
	    }
		If $IsObject(tRs)
				{
				Do tRs.Close()
	}
	q rtrnDate
	
	
GetEstoqueDispLoteProg(pidItem,pidLocn="",pidProgram,pstrLotNumber)		
	/* Retorna a quantidade disponível de um lote para um programa.	
	   Essa rotina foi copiada de "##class(alSOH.piSOHQty).GetQtyAvailable", no trecho que
	   verifica o laço condicional "pidProgram '= "", e então adaptada para receber o lote. */ 
	
	quit:(pidItem = "") "É obrigatório informar o produto."
	quit:(pidProgram = "") "É obrigatório informar o programa."
	quit:(pstrLotNumber = "") "É obrigatório informar o lote."
		
	set fltQtyAvailableLot = 0
	set dteToday = +$horolog

	if (pidLocn '= "") {

		&sql(SELECT IFNULL(SUM(QtyAvailable),0,SUM(QtyAvailable)) INTO :fltQtyAvailableLot FROM
			(SELECT QtyOnHand - SUM(IFNULL(QtyRequired,0,QtyRequired)) As QtyAvailable
			FROM alSOH.dBundleStock
			LEFT JOIN alSOH.dBundleAttribute as dBundleAttribute_UseByDate ON 
				dBundleAttribute_UseByDate.Bundle = dBundleStock.Bundle AND 
				dBundleAttribute_UseByDate.AttributeName = "Use By Date"
			LEFT JOIN alSOH.dBundleAttribute dBundleAttribute_Program ON 
				dBundleAttribute_Program.Bundle = dBundleStock.Bundle AND 
				dBundleAttribute_Program.AttributeName = "Program"
			LEFT JOIN alDRP.dPlannedMovement ON
				dPlannedMovement.Bundle = dBundleStock.Bundle     AND 
				dPlannedMovement.Item = dBundleStock.Item         AND 
				dPlannedMovement.FromStorage=dBundleStock.Storage
			WHERE 
		 		(dPlannedMovement.State->StateId = 3 OR dPlannedMovement.State IS NULL) AND
				dBundleStock.Item=:pidItem     AND 
				(Storage->StorageIsBlocked = 0 OR Storage->StorageIsBlocked IS NULL) AND
				(Storage->Physical->StorageIsBlocked = 0 OR Storage->Physical->StorageIsBlocked IS NULL) AND
				Storage->Location=:pidLocn     AND
				(dBundleAttribute_UseByDate.AttributeValue IS NULL OR
				  (dBundleAttribute_UseByDate.AttributeValue IS NOT NULL AND
				   dBundleAttribute_UseByDate.AttributeValue >= :dteToday)
				) AND
				   dBundleAttribute_Program.AttributeValue = :pidProgram
			  
				  AND dBundleStock.Bundle->LotNumber = :pstrLotNumber
				
				GROUP BY dBundleStock.ID
			)
		) 
		
	} else {

		&sql(SELECT IFNULL(SUM(QtyAvailable),0,SUM(QtyAvailable)) INTO :fltQtyAvailableLot FROM
			(SELECT QtyOnHand - SUM(IFNULL(QtyRequired,0,QtyRequired)) As QtyAvailable
			FROM alSOH.dBundleStock
			LEFT JOIN alSOH.dBundleAttribute as dBundleAttribute_UseByDate ON 
				dBundleAttribute_UseByDate.Bundle = dBundleStock.Bundle AND 
				dBundleAttribute_UseByDate.AttributeName = "Use By Date"
			LEFT JOIN alSOH.dBundleAttribute dBundleAttribute_Program ON 
				dBundleAttribute_Program.Bundle = dBundleStock.Bundle AND 
				dBundleAttribute_Program.AttributeName = "Program"
			LEFT JOIN alDRP.dPlannedMovement ON
				dPlannedMovement.Bundle = dBundleStock.Bundle     AND 
				dPlannedMovement.Item = dBundleStock.Item         AND 
				dPlannedMovement.FromStorage=dBundleStock.Storage
			WHERE 
		 		(dPlannedMovement.State->StateId = 3 OR dPlannedMovement.State IS NULL) AND
				dBundleStock.Item=:pidItem     AND 
				(Storage->StorageIsBlocked = 0 OR Storage->StorageIsBlocked IS NULL) AND
				(Storage->Physical->StorageIsBlocked = 0 OR Storage->Physical->StorageIsBlocked IS NULL) AND				
				(dBundleAttribute_UseByDate.AttributeValue IS NULL OR
				  (dBundleAttribute_UseByDate.AttributeValue IS NOT NULL AND
				   dBundleAttribute_UseByDate.AttributeValue >= :dteToday)
				) AND
				   dBundleAttribute_Program.AttributeValue = :pidProgram
			  
				  AND dBundleStock.Bundle->LotNumber = :pstrLotNumber
				
				GROUP BY dBundleStock.ID
			)
		) 		
		
	}

	quit fltQtyAvailableLot
]]></Routine>
</Export>