<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INRECReverseLine" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INRECReverseLine
	
#include COMSYS
#include INConst
#include WWWConst
#include FINConst
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECReverseLine("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
#define enumAverageCost		9
	
OnBeforeButtonLine(pidForm)
	;-------------------------------------------------------------------------------
	; Do not show the Delete button (Button 5) if the original receipt has been
	; invoiced.
	; 
	; NOTE: Other validation may stop invoiced receipts from being reversed.
	; 
	; Called by: Form INRECReverseLine
	; 
	; History:
	; 20-May-2010	GRF		SR17262:Created
	;-------------------------------------------------------------------------------
	new idContainer,idLine,idMatch,idSourceRec,idxSource,objContainer,YVOR
	
	$$$LogR("OnBeforeButtonLine",pidForm)
	
	set idContainer = $get(^CacheTemp(YUSER,"Grid","Container"))    ; INRECReverse - allow for VAR customisation
	quit:idContainer=""
	
	set objContainer = $get(^WWWDATEN(0,+$horolog,YUSER,idContainer,"D",1))
	set idSourceRec  = $$$INRECReceiptSourceNo(objContainer)
	
	if idSourceRec'="" {
		set idxSource = $$$Index(idSourceRec)
		set idLine = $order(^FINAPInvMatchCaches(0,6,idxSource,""))
		if idLine'="" {
			set idMatch = $order(^FINAPInvMatchCaches(0,6,idxSource,idLine,""))
			if (idMatch'="") && ($$$FINAPInvMatchCacheInvoiceNumber($get(^FINAPInvMatchCache(0,idMatch,1)))'="") { 
				set YVOR = $get(^CacheTemp(YUSER,"Grid",pidForm,"YVOR"))
				if (";"_$$$WWW120DoNOTDisplayStandardButto(YVOR)_";") '[ ";5;" {
					set $$$WWW120DoNOTDisplayStandardButto(YVOR) = $$$WWW120DoNOTDisplayStandardButto(YVOR)_";5"
					set ^CacheTemp(YUSER,"Grid",pidForm,"YVOR") = YVOR
				}
			}
		}
	}
	quit
	
	
OnBeforeFormat(pYFIELDNAME="",pYTEXT="",pYFELD="") 
	;-------------------------------------------------------------------------------
	; Make reverse status column red if not reversible,
	; and orange if not completely reversible.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 16-Sep-2009	GRF		SR16361: idClassFld not intCol; intRow not reqd
	; 03-Nov-2005	JW		SR13222: Created
	;-------------------------------------------------------------------------------
	new blnComplete,idClassFld
	
	set idClassFld = $$$GetClassField(YFORM,$piece(pYFIELDNAME,"_",2))
	
	if (idClassFld=$$$FldINRECLineReverseStatus) {
		if '$$Reversible(pYFELD,.blnComplete) {
			set YBACKGROUNDCOLOR="red"
		
		} elseif 'blnComplete {
			set YBACKGROUNDCOLOR="orange"
		}
	}
	 
	quit
	
	
OnAfterSave(pYKEY,pobjRECLine) 
	;-------------------------------------------------------------------------------
	; Save / Update / Kill the associated cost adjustment record if necessary
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 29-Oct-2009	GRF		SR16871: INStockValCCAdj with cost centre replaces
	; 							INStockValAdjust; block any non-stock items from
	; 							updating Stock Value Adjustments
	; 07-Nov-2005	JW		SR13222: Created
	;-------------------------------------------------------------------------------
	new blnUpdStkVal,curCost,idAdj,idCostCentre,idItem,idLocn,idReason,objItem,YFORM
	; NOTE : new YFORM to protect while saving other classes
	
	$$$LogR("OnAfterSave",pYKEY)
	
	set idReason     = $$$INRECLineReason(pobjRECLine)
	set idAdj        = $$$INRECLineAdjustmentReference(pobjRECLine)
	set idItem       = $$$INRECLineItem(pobjRECLine)
	set idLocn       = $$$INRECLineLocation(pobjRECLine)             ; SR16871 vvv
	set idCostCentre = $$GetCostCentre^INCostCentre(idLocn)
	set objItem      = $get(^INART(0,idItem,1))
	set blnUpdStkVal = '$$$INARTItemWithoutInventoryMaint(objItem)   ; SR16871 ^^^
	
	if (idReason'="") && $$Reversible(pobjRECLine) {
		set curCost = $$$INRECLineAverageCost(pobjRECLine)
	
		if idAdj = "" {		// Create new adjustment
	;		set idAdj = $$Create^INStockValAdjust(idItem,curCost,idReason,pYKEY)   ; SR16871
			if blnUpdStkVal set idAdj = $$Create^INStockValCCAdj(idItem,idCostCentre,curCost,idReason,pYKEY)
			
			set $$$INRECLineAdjustmentReference(pobjRECLine) = idAdj
			do Save^COMUtils("INRECLine",pYKEY,pobjRECLine,1)
		
		} elseif blnUpdStkVal {		// Update with cost
	;		do UpdateNewCost^INStockValAdjust(idItem,idAdj,curCost)       ; SR16871
			do UpdateNewCost^INStockValCCAdj(idItem,idCostCentre,idAdj,curCost)
		}
		
	} elseif idAdj'="" {	// Kill it
		set $$$INRECLineAdjustmentReference(pobjRECLine) = ""
		do Save^COMUtils("INRECLine",pYKEY,pobjRECLine,1)
	;	do KILL^COMUtils("INStockValAdjust",idItem_","_idAdj)             ; SR16871
		if blnUpdStkVal do KILL^COMUtils("INStockValCCAdj",idItem_$$$COMMA_idCostCentre_$$$COMMA_idAdj)
	}
		
	quit
	
	
OnBeforeSave(pYKEY,pobjRECLine) 
	;-------------------------------------------------------------------------------
	; Execute before save
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 14-Sep-2009	PPP		SR16888: Added Location parameter to GetAvg
	; 09-Oct-2008	Luke 	SR16014: Removed the set of reason code being set to ""
	; 							when it is not "" 
	; 27-Jun-2006	JW		SR13755: Removed $$$Text, removed line num from lang text
	; 07-Nov-2005	JW		SR13222: Created
	;-------------------------------------------------------------------------------
	new curAvgCost,idLine,idLocn,idRec
	
	$$$LogR("OnBeforeSave",pYKEY)
	
	//SR16888
	set idRec = $$$KEY1(pYKEY)
	if idRec'="" {
		set idLocn = $$$INRECLocation($get(^INREC(0,idRec,1)))
	}
	
	set curAvgCost = $$GetAverageCost(pobjRECLine,$get(idLocn))		//SR16888
	if (+$$$INRECLineAverageCost(pobjRECLine) '= +curAvgCost) {
		if ($$$INRECLineReason(pobjRECLine)="") {
			set idLine  = $$$KEY2(pYKEY)
			set YRETVAL = $listbuild("IN00379",$$FormatCurrency^COMTable(curAvgCost),idLine)
			; "Must select reason for changing average cost (from %1)"
		}
	;} else {
	;	set $$$INRECLineReason(pobjRECLine) = ""  // SR16014:
	}
	
	quit
	
	
GetAverageCost(pobjRECLine,pidLocn) 
	;-------------------------------------------------------------------------------
	; Get the average cost after reversal - Without actually updating
	; 
	; Called By:
	; 
	; Params:
	;
	; Returns:
	;
	; History:
	; 28-Oct-2009	GRF		SR16871: INItemCost based in INAvgCost with cost centre
	; 							replaces INARTCOST based in INARTAVG)
	; 12-Oct-2009	GRF		SR16878: Replace call to INARTKOST with INARTCOST
	; 16-Sep-2009	GRF		SR16361: variable prefix
	; 14-Sep-2009	PPP		SR16888: Added Location parameter to GetAvgCost
	; 27-Jan-2006	GRF		SR14203: use blnUpdate to clarify purpose of boolean argument
	; 07-Nov-2005	JW		SR13222: Created
	;-------------------------------------------------------------------------------
	new idItem,fltNewCost,objAvgCost
	
	$$$LogR("GetAverageCost",pobjRECLine)
	
	set idItem    = $$$INRECLineItem(pobjRECLine)
	
	/*  ; SR16871 vvv
	set blnUpdate = $$$NO                            ; Work out the new average cost without updating
	//set fltNewCost = $$^INARTAVG(idItem,-$$$INRECLineQuantity(pobjRECLine),$$$INRECLineEach(pobjRECLine),,$$$NO,blnUpdate)	//SR16888
	set fltNewCost = $$^INARTAVG(idItem,-$$$INRECLineQuantity(pobjRECLine),$$$INRECLineEach(pobjRECLine),,$$$NO,blnUpdate,$get(pidLocn))
	;f fltNewCost=0 set fltNewCost = $$^INARTKOST(idItem,,$$$enumAverageCost) ; SR16878
	if fltNewCost=0 set fltNewCost = $$GetCost^INARTCOST(idItem,$$$enumAverageCost)
	*/
	
	set fltNewCost = $$CalcNewCost^INAvgCost(idItem,pidLocn,-$$$INRECLineQuantity(pobjRECLine),$$$INRECLineEach(pobjRECLine),.objAvgCost,"")
	if fltNewCost=0 set fltNewCost = $$GetCost^INItemCost(idItem,pidLocn,$$$enumAverageCost)
	; SR16871 ^^^
	
	quit fltNewCost
	
	
AfterDelete(pobjRECLine)
	;-------------------------------------------------------------------------------
	; Kill the associated cost adjustment (if exists)
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 29-Oct-2009	GRF		SR16871: INStockValCCAdj with cost centre replaces
	; 							INStockValAdjust
	; 18-Oct-2006	JW		SR15134: Look at kill status. Return Status
	; 07-Nov-2005	JW		SR13222: Created
	;-------------------------------------------------------------------------------
	new idAdj,idCostCentre,idLocn,strStatus
	
	set strStatus = $$$OK
	set idAdj     = $$$INRECLineAdjustmentReference(pobjRECLine)
	if idAdj'="" {
		set idLocn       = $$$INRECLineLocation(pobjRECLine)      ; SR16871
		set idCostCentre = $$GetCostCentre^INCostCentre(idLocn)   ; SR16871
	;	set strStatus = $$$Kill("INStockValAdjust",$$$INRECLineItem(pobjRECLine)_","_idAdj)		//SR15134 ; SR16871
		set strStatus = $$$Kill("INStockValCCAdj",$$$INRECLineItem(pobjRECLine)_$$$COMMA_idCostCentre_$$$COMMA_idAdj)
		if $$$ISERR(strStatus) {
			set Q = $$$QDontDelete
	 	}
	}
	
	quit strStatus
	
	
Reversible(pobjRECLine,pblnComplete) 
	;-------------------------------------------------------------------------------
	; Is this line able to be reversed?
	; 
	; Params: pobjRECLine - line data
	;
	; Returns: 	boolean
	; 			pblnComplete - (by Ref) completely reversible?
	;
	; History:
	; 08-Nov-2005	JW		SR13222: Created
	;-------------------------------------------------------------------------------
	new blnReversible,idStatus
	
	// Note: Currently only type (0) can be reversed.
	
	set idStatus = $$$INRECLineReverseStatus(pobjRECLine)
	set pblnComplete = (idStatus=$$$EnumINRECREVERSESTATUSCompletelyReversible)
	set blnReversible = pblnComplete 
					//|| $case(idStatus,$$$EnumINRECREVERSESTATUSNotLastReceipt			:	$$$YES,		Temporarily
					//					$$$EnumINRECREVERSESTATUSStockIssued			:	$$$YES,		Removed
					//																	:	$$$NO)
	quit blnReversible
	
	
AssociatedValidation(pstrYFELD,pstrFieldValue,pidAssociated)
	;-------------------------------------------------------------------------------
	; Check if the field is valid based on another field.
	;	COMUnit uses (idItem,idUnit,numQty,idLocn)
	;
	; Inputs:
	; pstrYFELD     : The data for the form
	; pstrFieldValue: The value of the field we are in
	; pidAssociated : The associated field
	;
	; ByRef:
	;
	; Returns:
	; boolean - $$$YES is valid, $$$NO invalid
	;
	; History:
	; 26-Apr-2007	RPW		SRBR014310: Created
	;-------------------------------------------------------------------------------
 	new blnValid
 	
 	set blnValid = $$$YES
 	if pidAssociated=$$$FldINRECLineUnit {
	 	set blnValid=$$IsValidQtyUnit^COMUnit($$$INRECLineItem(pstrYFELD),$piece(pstrYFELD,Y,pidAssociated),pstrFieldValue,YLOCATION)
	}
		
	quit blnValid
	
]]></Routine>
</Export>