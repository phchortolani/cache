<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INReqCommon" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INReqCommon
	
#include COMSYS
#include INConst
#include COMConst
	
#define	OKBUTTON		"true"
#define CANCELBUTTON	"false"
	
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	; Common functions for requisition processing
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
OnBeforeSave()
	;-------------------------------------------------------------------------------
	; Before we save the record, save the grid.
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 14-Nov-2006	SteveS	SR15316: Created (Copied from REQUISITIONVAR)
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$$GRIDSave(YM)
	
	if $$$ISERR(strStatus) {
		set Q = $$$QDontSave
		do ReturnError^COMUtilError(strStatus)	
	}
	quit
	
	
LoadGrid(pstrForm,pblnLocked=$$$NO)
	;-------------------------------------------------------------------------------
	; Display the Line Items.
	; 
	; Parameters:
	; pstrForm: The form to load
	;
	; Returns:
	;
	; History:
	; 05-Dec-2008	GRF		Clarify Enabled test
	; 30-Mar-2007	RPW		SRBR014416: Tell the grid it's attached to a COMView
	; 14-Dec-2006	SteveS	SR15316: Created (Copied from REQUISITIONVAR)
	;-------------------------------------------------------------------------------
	new YFORM,YKEY,YAUSWAHL,YFELD
	
	kill ^CacheTempLocked(YUSER)
	do ClearOld^WWWMultiLock(YUSER)
		
	set YFORM = pstrForm_"Line"
	set YFELD = ""
	set YKEY  = YM
	
	if $get(YVOR)="" set YVOR = $get(^WWW120(0,pstrForm,1))
	if pblnLocked    set $$$WWW120AuthorizationToModifyData(YVOR) = $$$EnumReadOnly
	
	set $$$COMGridEditParameterSharedForm(YAUSWAHL)          = $$$YES
	set $$$COMGridEditParameterMaximumHeight(YAUSWAHL)       = 400
	set $$$COMGridEditParameterGridName(YAUSWAHL)            = YFORM
	set $$$COMGridEditParameterEnabled(YAUSWAHL)             = ($$$WWW120AuthorizationToModifyData(YVOR)'=$$$EnumReadOnly)
	set $$$COMGridEditParameterContainer(YAUSWAHL)           = pstrForm
	set $$$COMGridEditParameterDontUpdateContainer(YAUSWAHL) = $$$YES
	set $$$COMGridEditParameterCOMViewGrid(YAUSWAHL)         = $$$YES
	
	do ^COMGridEdit31
	quit
	
	
OnBeforeFormConstruction(pYKEY)
	;-------------------------------------------------------------------------------
	; Check if a field should be locked or not
	;
	; Params:
	; pYKEY : The key of the cell
	;
	; ByRefs:
	;
	; Returns:
	; Boolean
	;
	; History:
	; 27-Dec-2006	SteveS	SR15316: Created (Copied from REQUISITIONVAR)
	;-------------------------------------------------------------------------------
	new blnHidden
	
	quit:($get(pYKEY)="")||($get(YUSER)="") $$$NO
	
	set blnHidden = $data(^CacheTempLocked(YUSER,pYKEY))
	if blnHidden set YHID=1
 	
	quit blnHidden
	
	
UpdateStatus(pidIndex,penumFromStatus,penumToStatus,pfldDate,parrRequisitions="",pblnFirmAndSource=$$$NO)
	;-------------------------------------------------------------------------------
	; Update the status of a requisition from one to the other.
	;
	; Params:
	;	pfldDate: The field that represents the date on the class.
	;
	; Returns:
	;	An error from the SetStatus
	;
	; History:
	; 21-Oct-2010	GRF		SR17533.1: change arrRequisitions to parrRequisitions
	; 09-Sep-2010	PPP		SR17533: New parameter pblnFirmAndSource - called from 
	;							FirmTxn^INReqFirm (do not kill lock record) will be
	;							done by the Sourcing Process
	; 23-Mar-2010	GRF		-: Replace order macros
	; 28-Nov-2007	Karine	BR014709: Decouple Business Logic from User Interface
	; 15-Feb-2007	RPW		SR15437: Only look through the current grid contents
	; 03-Jan-2007	RPW		SR15340: Created
	;-------------------------------------------------------------------------------
	new idReqLine,strForm,strKeys,strStatus
	
	set strStatus = $$$OK
	set strForm   = YFORM_"Line"
	
	if parrRequisitions="" {
		do GetLockIds^WWWMultiLock(YFORM,strForm,YUSER)
 
 		set strKeys = ""
 		for {
	 		set strKeys = $order(^CacheTempMultiLockIds(YUSER,YUCI,strKeys))
	 		quit:strKeys=""
 			
			set idReqLine = $$$KEYMAX(strKeys)
			if $data(^INRequisitions(0,pidIndex,penumFromStatus,$$$YES,0,idReqLine)) {
				set strStatus = $$SetStatus(strForm,idReqLine,penumFromStatus,penumToStatus,pfldDate)
				do:'pblnFirmAndSource KILL^WWWMultiLock(YFORM,strForm,"0,0,"_idReqLine,YUSER,,YUCI)   //SR17533
			}
			quit:$$$ISERR(strStatus)
 		}
		
		kill ^CacheTempMultiLockIds(YUSER,YUCI)
 
	} else { //Receive a list with requisitions ids to be updated
		set strKeys = ""
		for {
			set strKeys = $order(parrRequisitions(strKeys))      ; SR17533.1
			quit:strKeys=""
			
			set idReqLine = $$$KEYMAX(strKeys)
				if $data(^INRequisitions(0,pidIndex,penumFromStatus,$$$YES,0,idReqLine)) {
					set strStatus = $$SetStatus(strForm,idReqLine,penumFromStatus,penumToStatus,pfldDate)
			}
			quit:$$$ISERR(strStatus)
		}
	}
	quit strStatus
	
	
SetStatus(pstrForm,pidReqLine,penumFromStatus,penumToStatus,pfldDate=0)
	;-------------------------------------------------------------------------------
	; Actually update the status for the requisition
	;
	; Params:
	; pfldDate: The field that represents the date on the class.
	;
	; Returns:
	; The error or not from saving the Requisition.
	;
	; History:
	; 05-Jan-2007	RPW		SR15340: Created
	;-------------------------------------------------------------------------------
	new objReqLine,strLockStatus,strStatus
	
	set strStatus  = $$$OK
	set objReqLine = $get(^INRequisition(0,0,pidReqLine,1))
	
	set $$$INRequisitionStatus(objReqLine) = penumToStatus
	if pfldDate'=0 {
		set $piece(objReqLine,Y,pfldDate) = +$horolog
	
		set strStatus = $$$Save("INRequisition","0,"_pidReqLine,objReqLine,$$$YES)
	}
	
	if $$$ISOK(strStatus) {
		do AddEntry^COMChangeHistory(0,pstrForm,YBED,"0,"_pidReqLine,$$$Text($listbuild("IN00624",$$$AppEnum("INREQSTATUS",penumFromStatus),$$$AppEnum("INREQSTATUS",penumToStatus),YBED,$$^WWWDATE($horolog),$$^WWWTIME($horolog))))  ;Changed from %1 to %2 by %3 on %4 at %5.
	}
	quit strStatus
	
	
OnAfterSave(pidRequisition)
	;-------------------------------------------------------------------------------
	; After saving, add a Change History entry.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 09-Jan-2007	RPW		SR15359: Created
	;-------------------------------------------------------------------------------
	;  "Modified by %1 on %2 at %3."
	do AddEntry^COMChangeHistory(0,YFORM,YBED,pidRequisition,$$$Text($listbuild("IN00625",YBED,$$^WWWDATE($horolog),$$^WWWTIME($horolog))))
	quit
	
	
GetLineQuantityForAgreement(pidSupplier,pidAgreement,pidItem,penumStatus)
	;-------------------------------------------------------------------------------
	; Return the line qty. for an agreement
	;
	; Params:	pidSupplier		: The supplier number
	; 			pidAgreement	: The agreement id
	; 			pidItem			: The item number
	;
	; Returns:
	; The quantity for a lines and it's agreement.
	;
	; History:
	; 23-Mar-2010	GRF		-: Replace order macros
	; 27-Dec-2006	SteveS	SR15316: Created (Copied from REQUISITIONVAR)
	;-------------------------------------------------------------------------------
	new fltQuantity,idLine,idxAgree,idxItem,idxSupp,objLine
	
	set fltQuantity = 0
	
	set idxSupp  = $$$Index(pidSupplier)
	set idxAgree = $$$Index(pidAgreement)
	set idxItem  = $$$Index(pidItem)
	
	set idLine = ""
	for {
		set idLine = $order(^INRequisitions(0,3,penumStatus,idxSupp,idxAgree,idxItem,0,idLine))
		quit:idLine=""
		
		set objLine = $get(^INRequisition(0,0,idLine,1))
		if $$$INRequisitionSource(objLine) {
			set fltQuantity = fltQuantity+$$$INRequisitionQuantity(objLine)
		}
	}
	quit fltQuantity
	
	
GetAgreementQty(pidSupplier,pidAgreement,pidItem)
	;-------------------------------------------------------------------------------
	; Return the agreement qty
	;
	; Params:	
	; pidSupplier : The supplier number
	; pidAgreement: The agreement id
	; pidItem     : The product
	;
	; ByRefs:
	;
	; Returns: 	
	; fltCurrent
	;
	; History:
	; 27-Dec-2006	SteveS	SR15316: Created (Copied from REQUISITIONVAR)
	;-------------------------------------------------------------------------------
	new fltCurrent,objAgreement
	
	set fltCurrent = 0
	
	set objAgreement = $get(^INSupMastAgreeItem(0,pidSupplier,pidAgreement,pidItem,1))
	if objAgreement'="" {
		set fltCurrent = $$$INSupMastAgreeItemAvailableQty(objAgreement)
	}
	quit fltCurrent
	
	
GetPlanners(pidCompany,pidItem,pidLocation)
	;-------------------------------------------------------------------------------
	; Get the planners for COMView.
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 13-Feb-2007	RPW		SR15426: Created
	;-------------------------------------------------------------------------------
	new YM
	
	set YM = 0  ;pidCompany
	quit $$GetFieldFromDRP^INDRPITEM(pidLocation,pidItem,$$$FldINDRPITEMPlanner)
	
	
AssociatedValidation(pstrYFELD,pstrFieldValue,pidAssociated)
	;-------------------------------------------------------------------------------
	; Check if the field is valid based on another field.
	;	COMUnit uses (idItem,idUnit,numQty,idLocn)
	;
	; Inputs:
	; pstrYFELD     : The data for the form
	; pstrFieldValue: The value of the field we are in
	; pidAssociated : The associated field
	;
	; Returns:
	; boolean - $$$YES is valid, $$$NO invalid
	;
	; History:
	; 26-Apr-2007	RPW		SRBR014310: Created
	;-------------------------------------------------------------------------------
	new blnValid
 	
 	set blnValid = $$$YES
 	if pidAssociated=$$$FldINRequisitionUnit {
	 	set blnValid = $$IsValidQtyUnit^COMUnit($$$INRequisitionItem(pstrYFELD),$piece(pstrYFELD,Y,pidAssociated),pstrFieldValue,YLOCATION)
	}
	quit blnValid
	
	
OnBeforeCopy(pstrKey,&pobjLine)
	;-------------------------------------------------------------------------------
	; Before we copy the line set the correct quantity 
	;
	; Inputs:
	;
	; ByRef:
	;
	; Returns:
	;
	; History:
	; 29-May-2007	RPW		SR15513: Created
	;-------------------------------------------------------------------------------
	set $$$INRequisitionQuantity(pobjLine) = $get(^CacheTempLineDifference(YUSER,YUCI))
	
	kill ^CacheTempLineDifference(YUSER,YUCI)
	quit
	
	
HandleQuantity(pstrDetails)
	;-------------------------------------------------------------------------------
	; When the quantity has changed, allow the user to determine what will happen.
	; 
	; This is a marshalling routine.
	; 
	; If the difference is greater than 0 call DecreaseQuantity
	; Defunct call:
	; If the difference is less than 0 call IncreaseQuantity
	;
	; Inputs:
	;
	; ByRef:
	;
	; Returns:
	;
	; History:
	; 29-May-2007	RPW		SR15513: Created
	;-------------------------------------------------------------------------------
	new enumButton,fltDifference,fltQuantity,idGridField,strForm
	
	;---------------------------------------
	; Preserv @netManager variables
	set strForm = YFORM
	new YFORM
	set YFORM = strForm_"Line"
	;---------------------------------------
	
	set fltDifference = $$$KEY1(pstrDetails)
	set fltQuantity   = $$$KEY2(pstrDetails)
	set enumButton    = $$$KEY3(pstrDetails)
	set idGridField   = $$$KEY4(pstrDetails)
	
	if fltDifference>0 {
		do DecreaseQuantity(fltDifference,fltQuantity,enumButton,idGridField)
	
	} elseif fltDifference<0 {
	;	do IncreaseQuantity(fltDifference,fltQuantity,enumButton,idGridField)
	}
	quit
	
	
DecreaseQuantity(pfltDifference,pfltQuantity,penmButton,pidGridField)
	;-------------------------------------------------------------------------------
	; If the user clicks ok the we specify that the quantity for the new is the difference
	; and then add the new line to the grid. 
	;
	; Inputs:
	; pfltDifference: The value for the new line
	; pfltQuantity  : The quantity of the old line. (Not used here)
	; penmButton    : Which button was pressed OK = "true" or Cancel = "false"
	; pidGridField  : The field on the grid that was changed
	;
	; ByRef:
	;
	; Returns:
	;
	; History:
	; 29-May-2007	RPW		SR15513: Created
	;-------------------------------------------------------------------------------
	new YLFDAT
	
	set YLFDAT = pidGridField
	
	if penmButton=$$$OKBUTTON {
		set ^CacheTempLineDifference(YUSER,YUCI) = pfltDifference
		$$$GRIDDuplicate
	}
	quit
 
	/*	
IncreaseQuantity(pfltDifference,pfltQuantity,penmButton,pidGridField)
	;-------------------------------------------------------------------------------
	; Not Used
	;
	; Inputs:
	; pfltDifference: The value for the new line
	; pfltQuantity  : The quantity of the old line. (Not used here)
	; penmButton    : Which button was pressed OK = "true" or Cancel = "false"
	; pidGridField  : The field on the grid that was changed  
	;
	; ByRef:
	;
	; Returns:
	;
	; History:
	; 29-May-2007	RPW		SR15513: Created
	;-------------------------------------------------------------------------------
	new idKey,objGrid,objRequisition,YLFDAT
	
	set YLFDAT=pidGridField
	
	if penmButton=$$$OKBUTTON {
		$$$GRIDSetPreviousValue(pfltQuantity)
	} else {
		
		set idKey          = $$$GRIDGetCurrentYKEY
		set objRequisition = $translate($$$GRIDGetYFELD(idKey),"""")
		set $$$INRequisitionQuantity(objRequisition) = pfltQuantity+pfltDifference
		set objGrid($$$KEY1(idKey),$$$KEY2(idKey))   = objRequisition
		
		do SetGridLineContents^COMGridEdit31G($$$YES,.objGrid,$piece($piece(YLFDAT,"_",1),"Y",2))
		
		set YBBN = $piece(YLFDAT,"_",2)
		
		do PARA^COMGridEdit31Body("D",YBBN,.YWIDTH,.YVALIGN,.YHEIGHT,.YFONT,.YFONTSIZE,.YTYP,.YFORM,.YLFN,.YTXT,.YDAT)
		
		set YTEXT = pfltQuantity+pfltDifference
		set val   = $$ESC^WWWENCODE($$TEXT^COMGridEdit31F(,YLFDAT,YTXT,PARA,REL,YTEXT,YTYP))  ; FIXME : ".YTXT,.PARA" ?
		
 		write "inactivateField("""_YLFDAT_""","""_val_""");"
	//	write "alert(document.getElementById('td"_YLFDAT_"').innerHTML);"
	}
	quit
	*/
	
	
MarshallDifference(pfltNew,pfltQuantity)
	;-------------------------------------------------------------------------------
	; Marshalling code for the javascript calls to handle the difference with the quantities
	; and get the user input
	;
	; Inputs:
	; pfltNew     : The new value to display
	; pfltQuantity: The previous value to display
	;
	; ByRef:
	;
	; Returns:
	;
	; History:
	; 29-May-2007	RPW		SR15513: Created
	;-------------------------------------------------------------------------------
	new strScript
	
	set strScript=""
	
	if pfltNew > 0 {
	;	"Do you wish to split the quantity or decrease the quantity required?\r\n\r\nPress OK to Split, or Cancel to Decrease."
		set strScript = "var enmResponse=confirm('"_$$^WWWTEXT("IN00692")_"'); CallBackNow('HandleQuantity^INReqCommon','"_pfltNew_","_pfltQuantity_",'+enmResponse+',"_YLFDAT_"');"
	
	} elseif pfltNew < 0 {
	;	"Do you wish to increase the quantity?\r\n\r\nPress OK to Increase, or Cancel to Revert the quantity."
	;	set strScript = "var enmResponse=confirm('"_$$^WWWTEXT("IN00693")_"'); CallBackNow('HandleQuantity^INReqCommon','"_pfltNew_","_pfltQuantity_",'+enmResponse+',"_YLFDAT_"');"
	}
	
	if strScript'="" {
		$$$StartScript()
		write strScript
		$$$EndScript()
	}
	quit
	
	
HandleQuantityChange(pintCol,pintRow,&pobjRequisition)
	;-------------------------------------------------------------------------------
	; Get the previous value for the grid and determine if the change is positive or
	; negative.
	; 
	; If there is a nonzero change call the MarshallDifference method and then store the
	; current value as the next "previous" value.
	;
	; Inputs:
	; pintCol: The grid column
	; pintRow: The grid row
	;
	; ByRef:
	; pobjRequisition: The requisition record
	;
	; Returns:
	;
	; History:
	; 29-May-2007	RPW		SR15513: Created
	;-------------------------------------------------------------------------------
	new fltPrevious,fltQuantity,fltUpdate
	
	if $$$GRIDIsPreviousValueSet {
		$$$GRIDSetPreviousValue($$$GRIDGetOriginalValue)
	}
	
	set fltQuantity = $$$INRequisitionQuantity(pobjRequisition)
	set fltPrevious = $$$GRIDGetPreviousValue
	
	if fltQuantity<0 {
		set fltUpdate = fltPrevious
	} else {
		set fltUpdate = fltQuantity
	}
	
	if (+fltQuantity'=0) && (+fltPrevious'=0) {
		do MarshallDifference^INReqCommon(fltPrevious-fltQuantity,fltUpdate)
		$$$GRIDSetPreviousValue(fltUpdate)
	}
	quit
	
	
GetWarehouseLocations(&parrLocns,pidItem)
	;-------------------------------------------------------------------------------
	; List all the locations with Stock for this item. Note the current location is excluded
	; The array contains the BOH and ATP quantites.
	;
	; Inputs:
	; 	pidItem			The item to search against
	;
	; ByRef:
	; 	parrLocns		The array of locations, with the BOH and ATP as the values
	;
	; Returns:
	;
	; History:
	; 20-Oct-2010	GRF		-: Boolean macros in parameter list; bln prefix & reverse
	; 							logic test to remove else; $get
	; 23-Mar-2010	GRF		-: Replace order macros
	; 10-Oct-2007	GRF		SR15563: Macro change
	; 04-Sep-2007   PJones  SR15548: Filter the possible warehouse to those which are 
	; 							 flagged as "distribution" locations.
	; 28-May-2007	RPW		SR15513: Created
	;-------------------------------------------------------------------------------
	new blnIsDistribution,fltATP,fltBOH,idLocn
	
	quit:$get(pidItem)=""
	
	set idLocn = ""
	for {
		set idLocn = $order(^WWW0121(0,0,idLocn))
		quit:idLocn=""
		continue:idLocn=YLOCATION
 
		set blnIsDistribution = ''$$$WWW0121DistributionLocn($get(^WWW0121(0,0,idLocn,1)))
		if blnIsDistribution {
			set fltBOH = $$^INARTMENGE(pidItem,,idLocn,,1,$$$YES) 
			set fltATP = $$^INARTMENGE(pidItem,,idLocn,,0,$$$YES)
		
			set parrLocns(idLocn) = fltBOH_Y_fltATP
		}
	}
	quit
	
	
GetHorizon()
	;-------------------------------------------------------------------------------
	; Get the horizon days.
	; 
	; Currently only gotten from INVORG, this may be expanded later.
	;
	; Inputs:
	;
	; ByRef:
	;
	; Returns:
	; The integer number of days
	;
	; History:
	; 29-May-2007	RPW		SR15513: Created
	;-------------------------------------------------------------------------------
	quit $$$INVORGHorizonDays($get(^INVORG(0,0,1)))
	
]]></Routine>
</Export>