<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INRECTFRLine" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INRECTFRLine
	
#include COMSYS
#include INConst
	
#define FORMFldINRECTFRLineUnit		5
	 
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INRECTFRLine("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
Postable(pidINREC)
	;-------------------------------------------------------------------------------
	; Check all the lines in a transfer receipt to see that the quantity received
	; does not exceed the quantity actually sent (i.e. the sent quantity less any
	; reversals)
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 17-Jun-2011	shobby	SR17772: New'd fltTotPickQty
	; 09-Jun-2011	PPP		SR17772: Do not use the Base Transfer Line Qty, use the picked 
	;						quantity instead for Qty comparisons
	; 15-Apr-2011	GRF		SR17534: INWEMERKER code may allow receipt in excess of
	;							Order Quantity
	; 09-Nov-2009	PPP		SR17017: Receipt needs to be matched against BaseQty on
	; 							the Order
	; 04-Jun-2008	GRF		SRBR014944: Can get reversed quantity directly from
	; 							objINTFRLine; fltReverseQty rather than fltQuantity
	; 							for clarity; shorten to fltQtyToReceive; Added
	; 							objINTFRLine to new list & don't need idSequence,
	; 							idxINTFRLine, objINTFRRev, objINTFRRevLine;
	; 							changed IN00840 to show line number.
	; 21-May-2008	shobby	SRBR014944: Created
	;-------------------------------------------------------------------------------
	new fltQtyToReceive,fltReverseQty,fltTotPickQty,idFlag,idINRECLine,idINTFR
	new idINTFRLine,objINRECLine,objINTFRLine,objIncomingGoodsFlag,strCacheLink
	new strStatus
	
	set strStatus = $$$OK
	if '$$$NoKey(pidINREC) {
		set idINRECLine = ""
		for {
			set idINRECLine = $order(^INRECLine(0,pidINREC,idINRECLine))
			quit:idINRECLine=""
			
			set objINRECLine    = $get(^INRECLine(0,pidINREC,idINRECLine,1))
			set strCacheLink    = $$$INRECLineCacheLink(objINRECLine)
			set fltQtyToReceive = $$$INRECLineQuantity(objINRECLine)
	; SR17534 vvv
			set idFlag          = $$$INRECLineFlag(objINRECLine)
			if idFlag="" set strStatus = $$$MakeStatus("IN00752",idINRECLine) ; "Line %1 is missing a required status flag."
			
			if $$$ISOK(strStatus) {
				set objIncomingGoodsFlag = $get(^INWEMERKER(0,idFlag,1))
				if $$$INWEMERKERTransferReceiptExceedsOrder(objIncomingGoodsFlag)=$$$EnumWWWTRISTATE1Disallow {
					set idINTFR     = $$$KEY1(strCacheLink)
					set idINTFRLine = $$$KEY2(strCacheLink)
					
					if (idINTFR'="") && (idINTFRLine'="") {
						set objINTFRLine  = $get(^INTFRLine(0,idINTFR,idINTFRLine,1))
						set fltReverseQty = +$$$INTFRLineReversalQuantity(objINTFRLine)

						//SR17772 VVVVV
						/*
						if (fltReverseQty+fltQtyToReceive) > $$$INTFRLineBaseQuantity(objINTFRLine) {
							set strStatus = $$$MakeStatus("IN00840",idINRECLine,$$$INTFRLineBaseQuantity(objINTFRLine),fltQtyToReceive,fltReverseQty)
						; "Transfer for line %1 is for '%2'.  Attempting to receive '%3'.  Already reversed is '%4'.)"
						}
						*/
						set fltTotPickQty = $$GetQtyPickedViaTFRLine^INTFRPickLine(idINTFR_","_idINTFRLine)
						if (fltReverseQty+fltQtyToReceive) > fltTotPickQty {
							set strStatus = $$$MakeStatus("IN00840",idINRECLine,fltTotPickQty,fltQtyToReceive,fltReverseQty)
							; "Transfer for line %1 is for '%2'.  Attempting to receive '%3'.  Already reversed is '%4'.)"
						}
						//SR17772 ^^^^^

					}
				}
			}
			quit:$$$ISERR(strStatus)
		}
	}
	quit strStatus
	
	/*
			set idINTFR         = $$$KEY1(strCacheLink)
			set idINTFRLine     = $$$KEY2(strCacheLink)
			
			if (idINTFR'="") && (idINTFRLine'="") {
				set objINTFRLine  = $get(^INTFRLine(0,idINTFR,idINTFRLine,1))
				set fltReverseQty = +$$$INTFRLineReversalQuantity(objINTFRLine)
				
				if (fltReverseQty+fltQtyToReceive) > $$$INTFRLineBaseQuantity(objINTFRLine) {
					set strStatus = $$$MakeStatus("IN00840",idINRECLine,$$$INTFRLineBaseQuantity(objINTFRLine),fltQtyToReceive,fltReverseQty)
				; "Transfer for line %1 is for '%2'.  Attempting to receive '%3'.  Already reversed is '%4'.)"
				}
			}
			quit:$$$ISERR(strStatus)
		}
	}
	quit strStatus
	*/ ; SR17534 ^^^
	
	
CreateLines(pobjREC,pidTFR,&parrObjLines)
	;-------------------------------------------------------------------------------
	; Create transfer receipt lines
	;
	; NOTE: use of parrObjLines is probably never going to be a problem but it may arise due to auto created receipts.
	;
	; Called By : Selected^INRECTFR, CanCreateReceipt^INTRNRec, CreateReceiptTxn^INTRNRec
	;              + VAR code
	; 
	; Params:	pobjREC - receipt header record
	; 			pidTFR  - transfer id
	;
	; ByRefs:	parrObjLines - array of lines, with counter subscript - to build INRECLine
	;
	; Returns:	status (currently just ok)
	;
	; History:
	; 31-Dec-2013	SCR		SESDF655: Populate Previously Received
	; 02-Oct-2013	SCR		CORE-273:Copy Brand, Program, Owner
	; 13-Sep-2010	GRF		SR17534: Remaining quantity is bundle-based; extract to
	;							array using bundle since always defined regardless
	;							of policy and may need to extend past Lot No & Due
	;							Date later.
	; 09-Nov-2009	PPP		SR17017: Rec Qty Unit is always the Default Unit of the Item
	; 03-Aug-2009	PPP		SR16815: Changed $$$INRECLineBaseQuantity to $$$INRECLineOrderQuantity
	; 10-Oct-2008	HQN		SR16008: Bundle is per pickline, store and retrieve
	; 03-Oct-2008	HQN		SR15969: Look at Receipt Storage instead of OnHand Storage
	; 19-May-2008	GRF		SR15742: Process Lot rather than Batch Number
	; 04-Mar-2008	GRF		BR014859: Take reversal quantity into account
	; 05-Apr-2007	HeberB	BR014313: added flag to Transfer Receipt
	; 05-Sep-2006	PO		SR15002: Store in same order as delivery list displayed.
	; 21-Jul-2006	PO		SR14847: Use base units and not units on transfer order line
	; 20-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	new arrAttributes,arrLines,fltNotUsed,fltOtherQty,fltPickQty,fltPickRevQty
	new fltQty,fltRecQty,idBundle,idDemand,idItem,idLocn,idPickLine,idStorage,idTFRLine
	new intSeq,objItem,objPick,objRecLine,objTFRLine,objUReqLine,strSource,strStatus
	
	$$$LogR("CreateLines",pidTFR)
	
	kill parrObjLines
	set strStatus = $$$OK
	
	set idLocn    = $$$INRECLocation(pobjREC)	// Header details
	set idStorage = $$$INRECStockLocation(pobjREC)
	
	;+++++++++++++++++++++++++++++++++++++++
	;  From INTFRPickLine
	;  Consolidates multiple picks for same bundle against a transfer line regardless of source storage.
	;+++++++++++++++++++++++++++++++++++++++
	set idPickLine = ""
	for {
		set idPickLine = $order(^INTFRPickLine(0,pidTFR,idPickLine))
		quit:idPickLine=""
		
		set objPick = $get(^INTFRPickLine(0,pidTFR,idPickLine,1))
		
		set idTFRLine = $$$INTFRPickLineSourceline(objPick)
		set idBundle  = $$$INTFRPickLineBundle(objPick)
		
		set fltPickQty    = $$$INTFRPickLinePickedQuantity(objPick)
		set fltPickRevQty = $$$INTFRPickLineReversalQuantity(objPick)
		
		continue:(fltPickQty=fltPickRevQty)      ; Already reversed in full
		
		set arrLines(idTFRLine,idBundle) = $get(arrLines(idTFRLine,idBundle)) + fltPickQty - fltPickRevQty
	;	set arrLines(idTFRLine,idBundle,"Batch") = $$$INTFRPickLineBatch(objPick)
		set arrLines(idTFRLine,idBundle,"LotNo") = $$$INTFRPickLineLotNumber(objPick)
		set arrLines(idTFRLine,idBundle,"UseBy") = $$$INTFRPickLineUsebyDate(objPick)
	}
	
	;+++++++++++++++++++++++++++++++++++++++
	;  To INRECLine
	;+++++++++++++++++++++++++++++++++++++++
	set $$$INRECLineLocation(objRecLine) = idLocn
	
	// default flag value
	set $$$INRECLineFlag(objRecLine)= $order(^INWEMERKER(0,""))
	
	set idTFRLine = ""
	for {
		set idTFRLine = $order(arrLines(idTFRLine))
		quit:idTFRLine=""
		
		set strSource = pidTFR_$$$COMMA_idTFRLine
		set objTFRLine = $get(^INTFRLine(0,pidTFR,idTFRLine,1))
		set idItem	 = $$$INTFRLineItem(objTFRLine)
		set idDemand = $$$INTFRLineDemand(objTFRLine)
		
		set $$$INRECLineCacheLink(objRecLine) 		= pidTFR_","_idTFRLine
		set $$$INRECLineItem(objRecLine) 			= idItem
		
		set objItem = $get(^INART(0,idItem,1))
		set $$$INRECLineUnit(objRecLine) 			= $$$INARTUnitofMeasure(objItem)
		set $$$INRECLineStockLocation(objRecLine) 	= $$GetStorage(idItem,idLocn,idStorage)
		set $$$INRECLineGroupNumber(objRecLine)     = $$$INTFRLineGroupNumber(objTFRLine)
		
		set idBundle = ""
		for {
			set idBundle = $order(arrLines(idTFRLine,idBundle))
			quit:idBundle=""
			
			set $$$INRECLineBundle(objRecLine)         = idBundle
			set $$$INRECLineLotNumber(objRecLine)      = arrLines(idTFRLine,idBundle,"LotNo")
			set $$$INRECLineExpirationDate(objRecLine) = arrLines(idTFRLine,idBundle,"UseBy")
				
			set fltQty      = arrLines(idTFRLine,idBundle)
			set fltOtherQty = $$BundleReceiptQty("",strSource,idBundle,.fltNotUsed)
			set fltRecQty   = fltQty - fltOtherQty
			if fltRecQty<0 set fltRecQty = 0
				
			set $$$INRECLineQuantity(objRecLine)      = fltRecQty
			set $$$INRECLineOrderQuantity(objRecLine) = fltQty
			do ##class(alSOH.iBundle).GetAttributesForBundle(idBundle,.arrAttributes)
			set $$$INRECLineBrand(objRecLine)		= $get(arrAttributes("Brand"))
			set $$$INRECLineOwner(objRecLine)		= $get(arrAttributes("Owner"))
			set $$$INRECLineProgram1(objRecLine)	= $get(arrAttributes("Program"))
				
			if $$$ISOK(strStatus) && ($$$INTFRLineReference(objTFRLine) '= "") {
				set objUReqLine = ##class(alREQ.dUReqLine).%OpenId("0||"_$$$KEY1($$$INTFRLineReference(objTFRLine))_"||"_$$$KEY2($$$INTFRLineReference(objTFRLine)))
				if objUReqLine '= $$$NULLOREF {
					set $$$INRECLinePreviouslyReceivedQuantit(objRecLine) = objUReqLine.QtyReceived
				}
			}

			set parrObjLines($$GetStorage(idItem,idLocn),idDemand,$increment(intSeq)) = objRecLine			
		}
	}
	quit strStatus
	
	
	
	
GetStockLoc(pidItem,pidLocn,pidStorage="") ; Legacy entry point - DO NOT USE
	quit $$GetStorage($get(pidItem),$get(pidLocn),$get(pidStorage))
	
GetStorage(pidItem,pidLocn,pidStorage="")
	;-------------------------------------------------------------------------------
	; Get storage for this item/location
	; 
	; Called By: SORT^INTRANSFER62, SORT^INTRNDeliveryList, CreateLines
	; 
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 06-Jan-2010	GRF		SR17080: tag change
	; 21-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	if $$IsConsumable^INARTLOCPAR(pidItem,pidLocn) {
		set pidStorage = $$$INVORGDeleteStockLocation($get(^INVORG(0,0,1)))
		
	} elseif pidStorage="" {	// Get default storage if not specified
		set pidStorage = $$DefaultStorage^INRECLine(pidLocn,pidItem)
	}
	quit pidStorage
	
	
OnBeforeCopy(pstrKey,&pobjLine)
	;-------------------------------------------------------------------------------
	; Update the qty field with the difference between the transfer qty and what has
	; already been entered.
	;
	; Params:
	;
	; ByRefs:	pobjLine - copied line yfeld
	;
	; Returns:
	;
	; History:
	; 26-Nov-2008	HQN		SR16172: Removed
	; 06-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	quit
	
	
BundleReceiptQty(pidRecNo,pstrSource,pidBundle,&pfltThisOrder)
	;-------------------------------------------------------------------------------
	; When ordered goods are picked they can be obtained from a number of storages.
	;		If the item policy indicates a lot no, expiry date, etc. applies then
	;		there may be multiple bundles involved.   A storage could hold multiple
	;		bundles of an item & a particular bundle may reside in multiple storages.
	; 
	; A shipment may be received in several stages.
	;		The total received in any delivery cannot exceed the shipped quantity,
	;		taking into account those goods already received.
	; 
	; When receiving the goods we don't care which storage the goods were picked
	; from but ...
	;		the total qty received for each bundle cannot exceed the qty sent for
	;		that bundle.  If this applies to all bundles the total received will
	;		not exceed the total shipped independent of bundle id.
	; 
	; Receipts can be divided in multiple lines as the items are placed in different
	; storages.
	;		The total of these divided lines must be considered for each bundle when
	;		calculating whether too many goods have been recorded as being received.
	;		If this is the case ALL lines for that item/bundle are in an error state.
	; 
	; If two lines on an order are for the same item, their quantities are
	; considered separately - based on pstrSource.
	; 
	; Called By:	PostableTFRLine^INRECPost
	; 
	; Inputs:
	;	pidRecNo	Current Receipt Number - skipped when processing index
	;	pstrSource	TransferID_comma_TransferLineID
	;	pidBundle	The Bundle ID for the item
	; 
	; Returns:
	;	Total processed receipted quantity against an transfer order line
	; 
	; History:
	; 10-Sep-2010	GRF		SR17534: revised calculation taking bundles into account
	;-------------------------------------------------------------------------------
	new fltQty,idLine,idReceipt,idxLinkTFR,objRec,objRecLine
	
	set idxLinkTFR = $$$Index(pstrSource)
	set fltQty        = 0
	set pfltThisOrder = 0
	
	; Tally if -
	;   1. Receipt is Processed
	;   2. Current Receipt
	
	set idReceipt  = ""
	for {
		set idReceipt = $order(^INRECLines(0,3,idxLinkTFR,idReceipt))
		quit:idReceipt=""
		
		set objRec = $get(^INREC(0,idReceipt,1))
		continue:(($$$INRECStatus(objRec)'=$$$EnumINSTATUSProcessed) && (idReceipt'=pidRecNo))
		
		set idLine = ""
		for {
			set idLine = $order(^INRECLines(0,3,idxLinkTFR,idReceipt,idLine))
			quit:idLine=""
			
			set objRecLine = $get(^INRECLine(0,idReceipt,idLine,1))
			continue:$$$INRECLineBundle(objRecLine)'=pidBundle
			
			if idReceipt'=pidRecNo {
				set fltQty = fltQty + $$$INRECLineQuantity(objRecLine)
			} else {
				set pfltThisOrder = pfltThisOrder + $$$INRECLineQuantity(objRecLine)
			}
		}
	}
	quit fltQty
	
	
AlreadyReceived(pYKEY,pobjLine) ; DEPRECATED? see BundleReceiptQty - may not be appropriate to call this any more
	;-------------------------------------------------------------------------------
	; Calculate the amount already received for this transfer line.
	;
	; Params:	pYKEY,pobjLine - INRECLine keys and data
	;
	; ByRefs:	amount already received
	;
	; Returns:
	;
	; History:
	; 08-Feb-2007	PO		SR15217: Only return qtys that are received
	; 29-Jan-2007	PO		SR15318: Can't just look at receipt lines as stock can
	; 							be received without using receipt form.  Don't know
	; 							how receipt can be performed without form, problem
	; 							is still under investigation
	; 24-Apr-2006	JW		SR14421: Created
	;-------------------------------------------------------------------------------
	new idThisREC,fltQty,idREC,idRECLine,idxLinkTFR,objREC
	
	set idThisREC  = $$$KEY1(pYKEY)
	set idxLinkTFR = $$$Index($$$INRECLineCacheLink(pobjLine))
	
	set fltQty = 0
	
	set idREC  = ""
	for {
		set idREC = $order(^INRECLines(0,3,idxLinkTFR,idREC))
		quit:idREC=""
		continue:idREC=idThisREC
		
		set objREC = $get(^INREC(0,idREC,1))
		continue:$$$INRECStatus(objREC)'=$$$EnumINSTATUSProcessed
		
		set idRECLine = ""
		for {
			set idRECLine = $order(^INRECLines(0,3,idxLinkTFR,idREC,idRECLine))
			quit:idRECLine=""
			
			set fltQty = fltQty + $$$INRECLineQuantity($get(^INRECLine(0,idREC,idRECLine,1)))
		}
	}
	quit fltQty
	
	
GetSendQty(pidINREC,pidINRECLine)
	;-------------------------------------------------------------------------------
	; For a receive line (for a transfer order), get the original send qty.
	; 
	; NOTE: This does not consider the bundles sent - merely the item total.
	;
	; Params: pidINREC			: The receive number
	; 		  pidINRECLine		: The receive line number
	;
	; ByRefs:
	;
	; Returns: fltQty
	;
	; History:
	; 27-Nov-2006	SteveS	SR15192: Moved to application layer code
	; 17-Jul-2006	SteveS	SR14851: Created
	;-------------------------------------------------------------------------------
	new fltQty,idPickLine,idTFR,idTFRLine,objINRECLine,objPick,strLink,strTransfer
	
	set fltQty = ""
	
	if ($get(pidINREC)'="") && ($get(pidINRECLine)'="") {
		set objINRECLine = $get(^INRECLine(0,pidINREC,pidINRECLine,1))
		set strLink      = $$$INRECLineCacheLink(objINRECLine)
		
		set idTFR     = $$$KEY1(strLink)
		set idTFRLine = $$$KEY2(strLink)
		
		// valid transfer order
		if (idTFR'="") && $data(^INTFR(0,idTFR)) {
			set strTransfer = $$$Index(idTFR)
			set idPickLine  = ""
			for {
				set idPickLine = $order(^INTFRPickLines(0,1,strTransfer,idTFRLine,idTFR,idPickLine))
				quit:idPickLine=""
				
				set objPick = $get(^INTFRPickLine(0,idTFR,idPickLine,1))
				set fltQty  = fltQty+$$$INTFRPickLinePickedQuantity(objPick)
			}
		}
	}
	quit fltQty
	
	
GetAlreadyReceived(pidINREC,pidINRECLine) ; Not called - DEPRECATED?   FIXME : SR17534 - either remove or base on bundle
	;-------------------------------------------------------------------------------
	; Get the already received quantity for this receipt line.
	;
	; Callecd By : [none found 15-Sep-2010]
	; 
	; Params: pidINREC			: The receipt number
	; 		  pidINRECLine		: The receipt line number
	;
	; ByRefs:
	;
	; Returns: fltQty
	;
	; History:
	; 27-Nov-2006	SteveS	SR15192: Moved to application layer code
	; 17-Jul-2006	SteveS	SR14851: Created
	;-------------------------------------------------------------------------------
	new fltQty,objINRECLine,strKey
	
	set fltQty = ""
	
	if ($get(pidINREC)'="") && ($get(pidINRECLine)'="") {
		if $data(^INRECLine(0,pidINREC,pidINRECLine)) {
			set objINRECLine = $get(^INRECLine(0,pidINREC,pidINRECLine,1))
			set strKey = pidINREC_","_pidINRECLine
			set fltQty = $$AlreadyReceived(strKey,objINRECLine)
		}
	}
	quit fltQty
	
	
OnBeforeSave(pobjLine)
	;-------------------------------------------------------------------------------
	; Save validation
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 26-Feb-2007	JW		SR15453: Created (Split from INRECLine)
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$CheckQty^INDRECLine(pobjLine)
	set:$$$ISERR(strStatus) YRETVAL = strStatus
	
	quit
	
	
OnBeforeFormat(pidCell,pstrText,pobjLine)
	;-------------------------------------------------------------------------------
	; Determine whether any special formatting needs to be applied to cells in the grid.
	;
	; Params:
	; pidCell  - Edit Grid field name "tdYrow_col"
	; pstrText - Not in use
	; pobjLine - Transfer Receipt Line record
	; 
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 14-Oct-2013	SCR		CORE-266: Check for optional attributes
	; 15-Apr-2011	GRF		SR17534: Set YTOOLTIP to match strStatus.
	; 13-Sep-2010	GRF		SR17534: Remaining quantity is bundle-based
	; 03-Nov-2009	DWR		SR16983: comment out call to INARTUtilities, done via 
	; 							OnBeforeDisplayCombo
	; 03-Aug-2009	PPP		SR16815: Changed $$$INRECLineBaseQuantity to $$$INRECLineOrderQuantity
	; 03-Sep-2007	GM		BR014609: Included line in language text IN00514
	; 05-Apr-2007	HeberB	BR014313: Created, copied&changed from OnBeforeFormat^INRECLine
	;-------------------------------------------------------------------------------
	new arrGotAttributes,arrReqAttributes,fltNotUsed,fltOtherQty,fltPickedQty,fltThisOrderQty
	new idBundle,idField,idFlag,idItem,idKey,idLoc,intCol,intExceedsFlag,intRow
	new objHeader,objItem,strSource,strStatus
	
	$$$LogR("OnBeforeFormat",pidCell)
	
	if $$Editable^INREC($$$GRIDYFELDContainer,$$$EnumINRECTransferReceipt) {
		$$$GRIDSplitKey(pidCell,intRow,intCol)
		set idField = $$$GetClassField(YFORM,intCol)
		set idItem = $$$INRECLineItem(pobjLine)
		set objHeader	= $$$GRIDYFELDContainer
		set idBundle  = $$$INRECLineBundle(pobjLine)

 		
 		;if idField = $$$FldINRECLineItem{
	 	;	if $$$INRECLineItem(pobjLine)'=""{
		; 		set idItem = $$$INRECLineItem(pobjLine)
	 	;	}
 		;}

		if (idField = $$$FldINRECLineQuantity) {
			set strSource = $$$INRECLineCacheLink(pobjLine)
			set idFlag    = $$$INRECLineFlag(pobjLine)

			if idFlag'="" {
				set intExceedsFlag = $$$INWEMERKERTransferReceiptExceedsOrder($get(^INWEMERKER(0,idFlag,1)))
				if (intExceedsFlag = $$$EnumWWWTRISTATE1Warn) || (intExceedsFlag = $$$EnumWWWTRISTATE1Disallow) {
					set idKey           = $$ReferenceKey^COMGridEdit31Interface(YFORM,intRow)
					set fltPickedQty    = $$$INRECLineOrderQuantity(pobjLine)
		 	;		set fltOtherQty     = $$AlreadyReceived("",pobjLine)        ; SR17534
					set fltOtherQty     = $$BundleReceiptQty(idKey,strSource,idBundle,.fltNotUsed)
		 			set fltThisOrderQty = $$GetQtyEntered^INRECLine(idKey)     ; WWWDATEN rather than INRECLine
					
					if (fltOtherQty + fltThisOrderQty) > fltPickedQty {
						if fltOtherQty {
							set strStatus = $$$MakeStatus("IN01263",$$$KEY2(idKey),fltThisOrderQty,fltOtherQty)
							set YTOOLTIP  = $$$Text(strStatus)   ; SR17534
						; "Total receipt of the item in line %1 exceeds shipment for the corresponding bundle. (%2 on this order, %3 already processed)"
						
						} else {
							set strStatus = $$$MakeStatus("IN01264",$$$KEY2(idKey),fltThisOrderQty)
							set YTOOLTIP  = $$$Text(strStatus)   ; SR17534
						} ; "Total receipt of the item in line %1 exceeds shipment for the corresponding bundle. (%2)"
						
						set YBACKGROUNDCOLOR = $select(intExceedsFlag=$$$EnumWWWTRISTATE1Warn:"yellow",1:YRED)
						; FIXME: hard-coded yellow is not desirable, should be a Y(COLOUR) variable
						;        - may need to add "Alert Color" to WWW012 or set on INWEMERKER.
					}
				}
			}
		}
		if (idField = $$$FldINRECLineProgram1) {
			set YENABLED   = $$$NO 
		}
		if (idField =  $$$FldINRECLineLotNumber) || (idField =  $$$FldINRECLineExpirationDate) || (idField =  $$$FldINRECLineBrand) ||(idField = $$$FldINRECLineOwner){
			set objItem	= ##class(alINV.dItem).%OpenId(idItem)
			set idLoc	= $$$INRECLocation(objHeader)
			do ##class(alSOH.iBundle).GetAttributesForPolicy(objItem.ItemPolicyGetObjectId(), .arrReqAttributes,idLoc)
			do ##class(alSOH.iBundle).GetAttributesForBundle(idBundle,.arrGotAttributes)
		}
		if (idField =  $$$FldINRECLineLotNumber) {
			if $data(arrReqAttributes("Lot Number"))&&('$data(arrGotAttributes("Lot Number"))) {
				set YENABLED   = $$$YES
				set YMANDATORY = $$$YES
			} else {
				set YENABLED   = $$$NO
				set YMANDATORY = $$$NO
			}
		}
		if (idField =  $$$FldINRECLineExpirationDate) {
			if $data(arrReqAttributes("Use By Date"))&&('$data(arrGotAttributes("Use By Date"))) {
				set YENABLED   = $$$YES
				set YMANDATORY = $$$YES
			} else {
				set YENABLED   = $$$NO
				set YMANDATORY = $$$NO
			}
		}
		if (idField =  $$$FldINRECLineBrand) {
			if $data(arrReqAttributes("Brand"))&&('$data(arrGotAttributes("Brand"))){
				set YENABLED   = $$$YES
				set YMANDATORY = $select($get(arrReqAttributes("Brand"))=1:$$$NO,1:$$$YES)
			} else {
				set YENABLED   = $$$NO
				set YMANDATORY = $$$NO
			}
		}
		if (idField =  $$$FldINRECLineOwner) {
			if $data(arrReqAttributes("Owner"))&&('$data(arrGotAttributes("Owner"))){
				set YENABLED   = $$$YES
				set YMANDATORY = $select($get(arrReqAttributes("Owner"))=1:$$$NO,1:$$$YES)
			} else {
				set YENABLED   = $$$NO
				set YMANDATORY = $$$NO
			}
		}
		if (idField =  $$$FldINRECLineProgram1) {
			if $data(arrReqAttributes("Owner"))&&('$data(arrGotAttributes("Program"))){
				set YENABLED   = $$$YES
				set YMANDATORY = $select($get(arrReqAttributes("Owner"))=1:$$$NO,1:$$$YES)
			} else {
				set YENABLED   = $$$NO
				set YMANDATORY = $$$NO
			}
		}
	}
	quit
	
	
	/*
OnBeforeFormat(pstrYFIELDNAME,pstrText,pobjLine)
	;-------------------------------------------------------------------------------
	; Determine whether any special formatting needs to be applied to cells in the grid.
	;
	; Params:
	; pstrYFIELDNAME - Edit Grid field name
	; pstrText - Not in use
	; pobjLine - Transfer Receipt Line record
	; 
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 03-Nov-2009	DWR		SR16983: comment out call to INARTUtilities, done via 
	; 							OnBeforeDisplayCombo
	; 03-Aug-2009	PPP		SR16815: Changed $$$INRECLineBaseQuantity to $$$INRECLineOrderQuantity
	; 03-Sep-2007	GM		BR014609: Included line in language text IN00514
	; 05-Apr-2007	HeberB	BR014313: Created, copied&changed from OnBeforeFormat^INRECLine
	;-------------------------------------------------------------------------------
	new fltOrderQty,fltOtherQty,fltReceiveQty,idFlag,idItem,idField,idKey
	new intCol,intExceedsFlag,intRow,objIncomingGoodsFlag
	
	if $$Editable^INREC($$$GRIDYFELDContainer,$$$EnumINRECTransferReceipt) {
		$$$GRIDSplitKey(pstrYFIELDNAME,intRow,intCol)
		set idField = $$$GetClassField(YFORM,intCol)
 		
 		;SR16983
 		if idField = $$$FldINRECLineItem{
	 		if $$$INRECLineItem(pobjLine)'=""{
		 		set idItem = $$$INRECLineItem(pobjLine)
		 	;	set enumUnit = $$LoadUnitOfMeasureList^INARTUtilities(idItem)  ;SR16983
	 		}
 		}
 		
		if (idField = $$$FldINRECLineQuantity) {
			set idFlag = $$$INRECLineFlag(pobjLine)
			if idFlag'="" {
				set intExceedsFlag = $$$INWEMERKERTransferReceiptExceedsOrder($get(^INWEMERKER(YM,idFlag,1)))
				if (intExceedsFlag = $$$EnumWWWTRISTATE1Warn) || (intExceedsFlag = $$$EnumWWWTRISTATE1Disallow) {
					set idKey         = $$ReferenceKey^COMGridEdit31Interface(YFORM,intRow)
					set fltOrderQty   = $$$INRECLineOrderQuantity(pobjLine)    //SR16815
		 			set fltOtherQty   = $$AlreadyReceived("",pobjLine)
		 			set fltReceiveQty = $$GetQtyEntered^INRECLine(idKey)
					
					if fltReceiveQty > (fltOrderQty - fltOtherQty) {
						set YTOOLTIP = $$$Text($listbuild("IN00514",fltOtherQty,idKey))
					; "Receipt has exceeded ordered quantity in line '%2', other existing receipts account for '%1'."
						set YBACKGROUNDCOLOR = $select(intExceedsFlag=$$$EnumWWWTRISTATE1Warn:"yellow",1:YRED)
						// FIXME: yellow is not valid, should be a Y(COLOUR) variable.
					}
				}
			}
		}
	}
	quit
	*/
	
	
OnBeforeDisplayCombo(pstrKeys,pobjTFR,pintCol,&pSUCH)
	;-------------------------------------------------------------------------------
	; Populates the Unit with the UOM as defined in INARTPACK only, excludes
	; units that the item does not come in.
	; 
	; set pSUCH as the items to be used when you override the list (set via blnOverride)
	;
	; Called By: COMGridEdit executable
	; 
	; Inputs:
	;	pstrKeys		YKEY
	;	pobjSummary		YFELD
	; 
	; Returns: $$$YES or $$$NO (override the data) 
	;
	; History:
	; 15-Jul-2011	GRF		SR17669: Call common code
	; 03-Nov-2009	DavidR	SR16983: Created
	;-------------------------------------------------------------------------------
	new blnOverride
	
	set blnOverride = $$$NO
	
	; Unit
	;---------------------------------------
	if pintCol = $$$FORMFldINRECTFRLineUnit {    ; SR17669 vvv
		set blnOverride = $$LoadCombo^INARTPACK($$$INRECLineItem(pobjTFR),blnOverride,.pSUCH)
	}
	quit blnOverride
	/*
	if pintCol = $$$FORMFldINRECTFRLineUnit  {
		kill pSUCH
		set pSUCH  = "SUCH"
		set idItem = $$$INRECLineItem(pobjTFR)
		if idItem '= "" {
			set enumUnit = ""
			for {
				set enumUnit = $order(^INARTPACK(0,idItem,enumUnit))
				quit:enumUnit=""
				
				set pSUCH(enumUnit) = enumUnit
			}
			set blnOverride = $$$YES
		}
	}
	quit blnOverride
	*/                                           ; SR17669 ^^^
	
	
AssociatedValidation(pstrYFELD,pstrFieldValue,pidAssociated)
	;-------------------------------------------------------------------------------
	; Check if the field is valid based on another field.
	;	COMUnit uses (idItem,idUnit,numQty,idLocn)
	;
	; Inputs:
	; pstrYFELD     : The data for the form
	; pstrFieldValue: The value of the field we are in
	; pidAssociated : The associated field
	;
	; ByRef:
	;
	; Returns:
	; boolean - $$$YES is valid, $$$NO invalid
	;
	; History:
	; 26-Apr-2007	RPW		SRBR014310: Created
	;-------------------------------------------------------------------------------
 	new blnValid
 	
 	set blnValid = $$$YES
 	if pidAssociated=$$$FldINRECLineUnit {
	 	set blnValid = $$IsValidQtyUnit^COMUnit($$$INRECLineItem(pstrYFELD),$piece(pstrYFELD,Y,pidAssociated),pstrFieldValue,YLOCATION)
	}
		
	quit blnValid
	
	
GetTotalQty(pidRecNo,pidBaseLine)
	;-------------------------------------------------------------------------------
	; Count the total quantity received in the current receipt batch against the
	; TFR link for the current line.
	; 
	; Inputs:
	;	pidRecNo,pidBaseLine	INRECLine keys
	; 
	; History:
	; 03-Dec-2008	GRF		SR16172: Changed to Procedure Block zero format; add
	; 							missing continue; base on Index 3 to improve speed.
 	; 27-Nov-2080	HQN		SR16172: Created for INRECPost algorithm change
	;-------------------------------------------------------------------------------
	new fltQty,idLineNo,idxLink,objINRECLine
	
	set objINRECLine = $get(^INRECLine(0,pidRecNo,pidBaseLine,1))
	set idxLink = $$$Index($$$INRECLineCacheLink(objINRECLine))
	
	set fltQty   = 0
	set idLineNo = ""
	for {
		set idLineNo=$order(^INRECLines(0,3,idxLink,pidRecNo,idLineNo))
		quit:idLineNo=""
		
		set fltQty = fltQty + $$$INRECLineQuantity($get(^INRECLine(0,pidRecNo,idLineNo,1)))
	}
	quit fltQty


IsItemConsumable(pobjLine)
	;-------------------------------------------------------------------------------
	; Is item consumable for INRECLine YFELD 
	;
	; Params:
	;
	; ByRefs:
	;
	; Returns:
	;
	; History:
	; 13-Jul-2012	GRF		SR17955: Boolean Macro; get values once
	; 21-Nov-2011	PPP		SR17955: Created
	;-------------------------------------------------------------------------------
	new idItem,idLocn
	
	set idItem = $$$INRECLineItem(pobjLine)
	set idLocn = $$$INRECLineLocation(pobjLine)
	
	quit:((idItem="") || (idLocn="")) $$$NO
	quit $$IsConsumable^INARTLOCPAR(idItem,idLocn)
	
]]></Routine>
</Export>