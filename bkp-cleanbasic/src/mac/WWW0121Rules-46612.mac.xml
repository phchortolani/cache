<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="WWW0121Rules" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
WWW0121Rules
	;-------------------------------------------------------------------------------
	; Interim Rules for Location Tree Operation
	;-------------------------------------------------------------------------------
#include COMSYS
#include WWWConst
	
ValidParentTypes(pstrLocnType)
	;-------------------------------------------------------------------------------
	; Given a location type, indicate which parent locations can be used.
	;
	; Params:
	;	pstrLocnType	The current location's type (AppnParam "WWWLOCNTYPE")
	;	
	; Returns:
	;	Comma-delimited list of acceptable location types
	;	
	; History:
	; 15-Nov-2007	GRF		SR15563: Use Application parameter enums
	; 10-Oct-2007	GRF		SR15563: Created
	;-------------------------------------------------------------------------------
	new strReturn
	
	if pstrLocnType       = $$$EnumWWWLOCNTYPEEntity {
		set strReturn = ",0,"
	} elseif pstrLocnType = $$$EnumWWWLOCNTYPESiteLocation {
		set strReturn = ",0,1,"
	} elseif pstrLocnType = $$$EnumWWWLOCNTYPEDepartment {
		set strReturn = ",1,2,"
	} else {
		set strReturn = ""                                      ; not defined yet
	}
	
	quit strReturn
	
TraceCheck(pidCompany,pidLocn,pidBaseLocn)
	;-------------------------------------------------------------------------------
	; Given a location, check that the parent path is not recursive.
	;
	; Params:
	;	pidCompany		
	;	pidLocn			Initial parent location
	;	pidBaseLocn		Location providing initial parent
	;	
	; Returns:
	;	boolean			$$$YES if parent path is satisfactory; $$$NO otherwise.
	;	
	; History:
	; 15-Oct-2007	GRF		SR15563: Created
	;-------------------------------------------------------------------------------
	new blnResult,objLocn
	
	set blnResult  = $$$OK
	if pidLocn'="" {
		for {
			set objLocn = $get(^WWW0121(0,pidCompany,pidLocn,1))
			set pidLocn = $$$WWW0121ParentLocn(objLocn)
			
			if pidLocn=pidBaseLocn set blnResult = $$$NO
			quit:blnResult=$$$NO
			quit:pidLocn=""
		}
	}
	quit blnResult
	
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
TransferLocation(pidCompany,pidLocn,pobjRecord="")
	;-------------------------------------------------------------------------------
	; Check if location is a Transfer location - Index 6
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	;	pidLocn			Location ID
	; 	pobjRecord		Onscreen record for before save testing
	; 
	; Returns: 			Boolean yes/no
	; 
	; History :
	; 24-Oct-2007	GRF		SR15563: created
	;-------------------------------------------------------------------------------
	quit:pobjRecord'="" +$$$WWW0121DistributionLocn(pobjRecord)    ; immediate check
	quit:$get(pidCompany)="" $$$NO
	quit:$get(pidLocn)="" $$$NO
	
	quit ''$data(^WWW0121s(0,6,$$$YES,pidCompany,pidLocn))
	
	
InventoryAllowed(pidCompany,pidLocn,pobjRecord="")
	;-------------------------------------------------------------------------------
	; Check if location is an Inventory location - Index 3
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	;	pidLocn			Location ID
	; 	pobjRecord		Onscreen record for before save testing
	; 	
	; Returns: 			Boolean yes/no
	; 
	; History :
	; 19-Oct-2007	GRF		SR15563: Adapted
	; 07-Aug-2007	FIS		created
	;-------------------------------------------------------------------------------
	quit:pobjRecord'="" +$$$WWW0121StorageLocn(pobjRecord)    ; immediate check
	quit:$get(pidCompany)="" $$$NO
	quit:$get(pidLocn)="" $$$NO
	
	quit ''$data(^WWW0121s(0,3,$$$YES,pidCompany,pidLocn))
	;quit +$$$WWW0121StorageLocn($get(^WWW0121(0,pidCompany,pidLocn,1)))   ; this takes about twice as long as the index call
	
	
PlanningAllowed(pidCompany,pidLocn,pobjRecord="")
	;-------------------------------------------------------------------------------
	; Check if location is an planning location - Index 5
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	;	pidLocn			Location ID
	; 	pobjRecord		Onscreen record for before save testing
	; 
	; Returns: 			Boolean yes/no
	; 
	; History :
	; 24-Oct-2007	GRF		SR15563: Use index
	; 18-Oct-2007	GRF		SR15563: Adapted
	; 07-Aug-2007	FIS		created
	;-------------------------------------------------------------------------------
	quit:pobjRecord'="" +$$$WWW0121PlanningLocn(pobjRecord)    ; immediate check
	quit:$get(pidCompany)="" $$$NO
	quit:$get(pidLocn)="" $$$NO
	
	quit ''$data(^WWW0121s(0,5,$$$YES,pidCompany,pidLocn))
	
	
ProductionAllowed(pidCompany,pidLocn,pobjRecord="")
	;-------------------------------------------------------------------------------
	; Check if location is a purchase location
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	;	pidLocn			Location ID
	; 	pobjRecord		Onscreen record for before save testing
	; 
	; Returns: 			Boolean yes/no
	; 
	; History :
	; 25-Oct-2007	GRF		SR15563: created
	;-------------------------------------------------------------------------------
	quit:pobjRecord'="" +$$$WWW0121ProductionLocn(pobjRecord)    ; immediate check
	quit:$get(pidCompany)="" $$$NO
	quit:$get(pidLocn)="" $$$NO
	
	quit +$$$WWW0121ProductionLocn($get(^WWW0121(0,pidCompany,pidLocn,1)))  ; not indexed at this stage
	
	
PurchaseAllowed(pidCompany,pidLocn,pobjRecord="")
	;-------------------------------------------------------------------------------
	; Check if location is a purchase location - Index 8
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	;	pidLocn			Location ID
	; 	pobjRecord		Onscreen record for before save testing
	; 
	; Returns: 			Boolean yes/no
	; 
	; History :
	; 24-Oct-2007	GRF		SR15563: created
	;-------------------------------------------------------------------------------
	quit:pobjRecord'="" +$$$WWW0121PurchaseLocn(pobjRecord)    ; immediate check
	quit:$get(pidCompany)="" $$$NO
	quit:$get(pidLocn)="" $$$NO
	
	quit ''$data(^WWW0121s(0,8,$$$YES,pidCompany,pidLocn))
	
	
SalesAllowed(pidCompany,pidLocn,pobjRecord="")
	;-------------------------------------------------------------------------------
	; Check if location is a sales location - Index 7
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	;	pidLocn			Location ID
	; 	pobjRecord		Onscreen record for before save testing
	; 
	; Returns: 			Boolean yes/no
	; 
	; History :
	; 24-Oct-2007	GRF		SR15563: Use index
	; 18-Oct-2007	GRF		SR15563: Adapted
	; 07-Aug-2007	FIS		created
	;-------------------------------------------------------------------------------
	quit:pobjRecord'="" +$$$WWW0121SalesLocn(pobjRecord)    ; immediate check
	quit:$get(pidCompany)="" $$$NO
	quit:$get(pidLocn)="" $$$NO
	
	quit ''$data(^WWW0121s(0,7,$$$YES,pidCompany,pidLocn))
	
	
TransferAllowed(pidCompany,pidFromLocn,pidToLocn)
	;-------------------------------------------------------------------------------
	; A Transfer is allowed between locations with differing main site locations
	; and both are flagged as Distribution (Transfer) Locations - plus Index 6
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	;	pidFromLocn		ID of supplying location
	;	pidToLocn		ID of receiving location
	; 
	; Returns: 			Boolean yes/no
	; 
	; History :
	; 18-Oct-2007	GRF		SR15563: Created
	;-------------------------------------------------------------------------------
	new blnFromOkay,blnToOkay,idFromParent,idToParent
 
	quit:$get(pidCompany)="" $$$NO
	quit:$get(pidFromLocn)="" $$$NO
	quit:$get(pidToLocn)="" $$$NO
	
	set idFromParent = $$MainSite^WWW0121Utils(pidCompany,pidFromLocn)
	set idToParent   = $$MainSite^WWW0121Utils(pidCompany,pidToLocn)
	
	set blnFromOkay = ''$data(^WWW0121s(0,6,$$$YES,pidCompany,pidFromLocn))
	set blnToOkay   = ''$data(^WWW0121s(0,6,$$$YES,pidCompany,pidToLocn))
	
	quit ((idFromParent'=idToParent) && blnFromOkay && blnToOkay)
	
RequisitionAllowed(pidCompany,pidFromLocn,pidToLocn)
	;-------------------------------------------------------------------------------
	; A Requisition is allowed between locations with the same main site location
	; <strike>and both are flagged as Distribution (Transfer) Locations.</strike>
	; 
	; If they are the same location the transaction is a movement instead.
	; 
	; 
	; Input:
	; 	pidCompany		Active company - often YM
	;	pidFromLocn		ID of supplying location
	;	pidToLocn		ID of receiving location
	; 
	; Returns: 			Boolean yes/no
	; 
	; History :
	; 25-Oct-2007	GRF		SR15563: Transfer Location switch cannot control Reqn as well
	; 23-Oct-2007	GRF		SR15563: Not same location
	; 18-Oct-2007	GRF		SR15563: Created
	;-------------------------------------------------------------------------------
	new idFromParent,idToParent
	
	quit:$get(pidCompany)="" $$$NO
	quit:$get(pidFromLocn)="" $$$NO
	quit:$get(pidToLocn)="" $$$NO
	
	set idFromParent = $$MainSite^WWW0121Utils(pidCompany,pidFromLocn)
	set idToParent   = $$MainSite^WWW0121Utils(pidCompany,pidToLocn)
	
	quit ((pidFromLocn'=pidToLocn) && (idFromParent=idToParent))
	
	;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
OnBeforeSave(pidCompany,pidLocn,pobjLocn,pYFORM)
	;-------------------------------------------------------------------------------
	; Given a location, check that the parent path is not recursive.
	;
	; Params:
	;	pidCompany		Company ID
	;	pidLocn			Location ID
	;	pobjLocn		Data being checked
	;	pYFORM			Allows different rules for "WWW0121C"
	;	
	; Returns:
	;	boolean		$$$YES if parent path is satisfactory; $$$NO otherwise.
	;	
	; History:
	; 03-Jan-2014 	shobby 	CORE-303: CacheIndex
	; 23-Dec-2013	SCR		SESDF-696: Relax Storage Check
	; 06-Nov-2009	GRF		SR17014: Can only be a single entity without a parent
	; 22-Oct-2008	PPP		SR16057: Removed the check for 'A Transfer Location
	; 							must also be an Inventory Location'
	; 04-Dec-2007	GRF		SR15612: Allow Inventory switch to be set to NO if only
	; 							have "Delete" Storage in INLP.
	; 15-Oct-2007	GRF		SR15563: Created
	;-------------------------------------------------------------------------------
	new idDeleteStorage,idParentLocn,idTopLevel
	new objParent,strLocnType,strParentTypeList,strStatus
	
	set strStatus = $$$OK
	
	set strLocnType  = $$$WWW0121LocationType(pobjLocn)
	set idParentLocn = $$$WWW0121ParentLocn(pobjLocn)
	
	if strLocnType = "" { ; Application Param "WWWLOCNTYPE" (0:Entity, 1:SiteLocn, 2:Dept)
		set strStatus = $$$MakeStatus("WWW00002")               ; "Location Type is required"
		
	} else {
		set strParentTypeList = $$ValidParentTypes(strLocnType)
		if idParentLocn="" {
			if strLocnType '= 0 {
				set strStatus = $$$MakeStatus("WWW00003")       ; "Parent Location is required for this Location Type"
			}
			;   SR17014 vvv	
			set idTopLevel = $$GetTopLevel^WWW0121()  ; Top Level
			if (idTopLevel'="") && (idTopLevel'=pidLocn) {      ; "'%1' is already the top-level Entity Location - must specify a Parent Location"
				set strStatus = $$$MakeStatus("WWW00131",idTopLevel)
			} ; SR17014  ^^^
		} else {
			if idParentLocn = pidLocn {
				set strStatus = $$$MakeStatus("WWW00007")       ; "Cannot be its own Parent Location"
			} else {	
				set objParent = $get(^WWW0121(0,pidCompany,idParentLocn,1))
				if objParent="" {
					set strStatus = $$$MakeStatus("WWW00004")   ; "Parent Location has no details"
					
				} elseif strParentTypeList '[ (","_$$$WWW0121LocationType(objParent)_",") {
					set strStatus = $$$MakeStatus("WWW00005")   ; "Parent Location has the wrong Location Type for this Location"
					
				} elseif $$TraceCheck(pidCompany,idParentLocn,pidLocn) = $$$NO {
					set strStatus = $$$MakeStatus("WWW00006")   ; "This location is a parent of the Parent Location"
				}
			}
		}
	}
	if $$$ISOK(strStatus) {
		;if $$InventoryAllowed("","",pobjLocn)=$$$NO {
		; vvv
		;	if $data(^INLP(pidCompany,pidLocn)) {
		;	set idDeleteStorage = $$$INVORGDeleteStockLocation($get(^INVORG(YM,YM,1)))
		;	if ($order(^INLP(pidCompany,pidLocn,idDeleteStorage))'="") || ($order(^INLP(pidCompany,pidLocn,idDeleteStorage),-1)'="") {
		; ^^^
		;		set strStatus = $$$MakeStatus("WWW00080")   ; "Must be an Inventory Location if Storage has been assigned"
		;	}
			
			//If a Location is not an Inventory Location and is a Transfer Location 
			//then it is a Consumption Location; Hence the check below is removed
			
			//SR16057
			//if $$$ISOK(strStatus) && ($$TransferLocation("","",pobjLocn)=$$$YES) {
			//	set strStatus = $$$MakeStatus("WWW00081")   ; "A Transfer Location must also be an Inventory Location"
			//}
 
		;}
	}
	
	quit strStatus
	
	;=======================================
	;	   Index		WWW0121s
	;		 1		P1,D1	Coy,Locn Name
	;		 2		P1,D20	Coy,Parent Locn ID
	;		 4		D5		Locn Type
	;		11		D88		Alt. Locn ID
	;=======================================
	
OnBeforeDelete(pidCompany,pidLocn,pobjLocn,pYFORM)
	;-------------------------------------------------------------------------------
	; Given a location, check that the parent path is not recursive.
	;
	; Params:
	;	pidCompany		Company ID
	;	pidLocn			Location ID
	;	pobjLocn		Data being checked
	;	pYFORM			Allows different rules for "WWW0121C"
	;	
	; Returns:
	;	boolean		$$$YES if parent path is satisfactory; $$$NO otherwise.
	;	
	; History:
	; 06-Jan-2014	shobby	CORE-303: CacheIndex
	; 22-Feb-2011	shobby	SR17599: Removed code.
	; 23-Oct-2009	GRF		SR16871: Check for INFIBPAR
	; 15-Oct-2007	GRF		SR15563: Created
	;-------------------------------------------------------------------------------
	new idxCompany,idxLocn,strStatus
	
	set strStatus = $$$OK                        ; FIXME : Add V2 checks as well (Similar checks for INLP? Mark locn/storage as obsolete rather than removing?)
	
	set idxCompany = $$Index^COMUtilIndex(pidCompany,"WWW0121") ;CORE-303
	set idxLocn    = $$Index^COMUtilIndex(pidLocn   ,"WWW0121") ;CORE-303
	
	if $data(^WWW0121s(0,2,idxCompany,idxLocn)) {
		set strStatus = $$$MakeStatus("WWW00010")               ; "Must remove links to sub-locations before deleting"
		
	} elseif $data(^INFIBPAR(0,pidCompany,pidLocn)) {     ; SR16871
		set strStatus = $$$MakeStatus("WWW00129")               ; "Must remove Financial Parameters before deleting"
		
	} elseif $data(^INLP(pidCompany,pidLocn)) {
		set strStatus = $$$MakeStatus("WWW00009")               ; "Must remove storage places before deleting"
		
	} elseif $data(^INARTPREISBEPROM(pidCompany,pidLocn)) || $data(^INARTPREISBEPROM2(pidCompany,pidLocn)) {
		; Promotion Price
		
	}
	
	quit strStatus
	
	;-------------------------------------------------------------------------------
	; The following classes also have Location as the first key
	; Some others have it as a secondary key
	; 
	; TODO : Add checks to OnBeforeDelete code to see if the location has been used
	;        anywhere here as well  <GRF>
	;-------------------------------------------------------------------------------
		
	; ^alSOH.dPeriodBalanceD(Locn,...)
	; ^alSOH.dStockBalanceI("LocationIDX",Locn,Item)
	;   some others using Locn||Storage

	; INAUFPFAVORIT
	; INANLIEFER
	; INAUSLIEFER
	; INBESTMONAT
	; INCRMWG
	; INCRMART
	; INDISPATCH
	
	; INDRPBEST
	; INDRPBESTVOR
	; INDRPITEM
	; INDRPITEMRUN
	; INDRPUMTVOR
	; INDRPPLANNER
	; INDRPSYS
	; INDRPUMTOURV
	; INDRPWH
	; INDRPWHSORT
	; INDRPUMVZW
	; INDRPDEMAND
	; INDRPDEMANDHIST
	; INDRPUMTOUR
	; INDRPWE
	; INDRPSUPPLY
	; INDRPDEMANDT
	; INDRPUMRECEIVE
	; INDRPUMSOURCE
	; INDRPMELDUNG
	; INDRPITEMTS
	; INDRPWV
	; INDRPITEMS
	; INDRPARA
	; INDRPARARS
	; INDRPARAHTML
	; INDRPARABHTML
	; INDRPARAB
	
	; INFAVORIT
	; INForeRest
	; INFIBBUCH
	; INFIBBUCHHOLD
	; INGESCH
	; INKALKART
	; INKALK
	; INKSTL
	; INKSTL1
	; INKSTLUST
	; INLIMIT
	; INLIMITDATA
	
	; INLPCHIPSETUP
	; INLPLAYOUT
	; INLPLAYOUTA
	; INLPLAYOUTP
	; INLPCHIPREAD
	
	; INLOCLEAD
	; INLXW
	; INLXZ
	; INMAHNUNG
	; INPALMLOCATION
	; INPALMPOS
	; INQPRUEF
	; INSALESADJUST
	; INVOSYSTEM
	; INWEINB
	; INWEFREI
	; INWERBWVPARA
	; INZOLLBET
	; INZOLLBETAUS
	; INZOLLBETEIN
	
	; SALClocking
	; SALLocationProduct
	; SALClockingMgr
	; SALStockLocation
	; SALUserTimeStamp
	; STKTransferUserRule
	; STKTransferLocationRule
	; VIEWINDRPBESTVOR
	; WWW013Z
	; AEPProductPerLocation
	
]]></Routine>
</Export>