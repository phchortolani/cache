<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INReqTable" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INReqTable
	
#include COMSYS
#include COMConst
#include INConst
	
#define ReqDynTable1	1
#define ReqDynTable2	2
		
	;----------------------------------------------------------------------------------------------
	; Create Requisition
	; (Header Form)                                                                      [ INReq     ]
	;
	;----------------------------------------------------------------------------------------------
	; (Edit Grid)                                                                        [ INReqLine ]
	; 
	;
	;==============================================================================================
	; (Dyna Grid "1")
	;-------------------------------------------------------------------------------     ShowItems^INReqTable
	; From Location                                          |   BOH |         ATP |
	;--------------------------------------------------------+-------+-------------+
	;                                                        |       |             |
	;--------------------------------------------------------+-------+-------------+
	;                                                        |       |             |
	;--------------------------------------------------------+-------+-------------+
	;==============================================================================================
	; (Dyna Grid "2")
	; Item xxxxx in other Requisitions
	;-------------------------------------------------------------------------------     ShowOtherRequisitions^INReqTable
	; Number    | Line | Ordered Quantity | Issued Quantity | Outstanding | Status |
	;-----------+------+------------------+-----------------+-------------+--------+
	;           |      |                  |                 |             |        |
	;-----------+------+------------------+-----------------+-------------+--------+
	;           |      |                  |                 |             |        |
	;-----------+------+------------------+-----------------+-------------+--------+
	;           |      |                  |                 |             |        |
	;----------------------------------------------------------------------------------------------
	;    P1        P2          D4                 D8            D4 - D8  strStatusDesc  (Now all in Inventory Units)  ; SR17823
	
	
ShowItems(pidEvent,pidParameters)
	;-------------------------------------------------------------------------------
	; Called By :
	;		
	; Inputs : pidEvent
	;          pidParameters - $c(31) delimited string [idForm*idGrid*idKey*intRow]
	;
	; Params:
	;
	; Returns:
	;
	; History:
	; 17-Dec-2013	SCR		SESDF-655: Take off ATP
	; 03-Nov-2010	GRF		SR17491: Comment call back to deprecated subroutine
	; 13-Oct-2010	PPP		SR17491.1: New parameter idLine for ShowOtherRequisitions
	; 10-Sep-2010	shobby	SR17491: Call to additional dynagrid
	; 09-Dec-2009	shobby	SR17034: Pass in the program to GetWarehouseLocations
	; 01-Dec-2009	GRF		SR17007: separate tags for multi-lock operations
	; 10-Jul-2009	PPP		SR16688:If Kit Requisition do not show the Table
	; 29-Jun-2009	PPP		SR16688: Corrected usage, gets YFELDContainer instead or
	;							YMFELDContainer.  Updated the return parameters with
	;							the ATP
	; 01-Jun-2009	PPP		SR16599: Add Row highlight & click functionality
	; 12-Mar-2009	HQN		SR16417: Don't assume YLOCATION is the ToLocn, explicitly
	; 							take from Header
	; 23-Nov-2007	PPP		SR15339: Creation
	;-------------------------------------------------------------------------------
	new arrLocations,blnHide,dteDate,fltATP,fltBOH,fltQty
	new idCurLoc,idGrid,idItem,idKey,idKeyLine,idLine,idLocn,idRequisition
	new idStatus,idToLocn,idxItem,lstColTypes,lstHeaders
	new objLine,objLocn,objRequisition,strStatus,strFunction
	
	set blnHide = +$$$WWW012HideRelationClassIDs($get(^WWW012(0,0,1)))
	set idGrid  =  $$$DYNTABLEGridLineFocusGrid(pidParameters)

	set lstHeaders  = "" 
	set lstColTypes = ""
	
	kill ^CacheTempDynamicTable(YUCI,YUSER)
	
	set idKey         = $$ReferenceKey^COMGridEdit31Interface(idGrid,$$$DYNTABLEGridLineFocusRow(pidParameters))
	set idRequisition = $$$KEY1(idKey)
	set idKeyLine     = $$$KEY2(idKey)
	
	if '$$Editable^INReq(idRequisition) quit                     ; *** EARLY EXIT ***
	
	set objRequisition = $$$GRIDYFELDContainer
	set objLine        = $$$GRIDGetYFELD(idKeyLine)
	if $$$INReqType(objRequisition)=4	quit                     ; *** EARLY EXIT ***
	
	set strStatus = $$GetLock^WWWMultiLock("INReq",idGrid,idRequisition_$$$COMMA_idKeyLine)
	
	set strFunction = "FillLine"
	
	set idToLocn = $$$INReqToLocn(objRequisition)
	set idItem   = $$$INReqLineItem(objLine)
	set idxItem  = $$$Index(idItem)
	set fltQty   = $$$INReqLineQtyRequired(objLine)
	set idCurLoc = $$$INReqLineFromStockLocn(objLine)
	set dteDate  = $$$INReqLineDueDate(objLine)        if dteDate = "" set dteDate = +$horolog	
	
	if $$$ISERR(strStatus) {
		write "function "_strFunction_"() {"
		write "alert('"_$$$JSText($$$Text(strStatus))_"');"
		write "}"
	} else {
		write "function "_strFunction_"() {"
		write "CallBack(""WarehouseLine^INReqTable"", getRowNum(getFocusField()), this.DiscData[0]);"
		write "}"
	}
 	;write "if (document.getElementById('otherRequisitions')) {CallBack('ShowRequisitions^INReqLine','"_idRequisition_"','"_idItem_"','1');};" ; SR17491
	
	;set lstHeaders  = $listbuild($$^WWWFELDNAME("INReqLine","D",$$$FldINReqLineFromStockLocn),
	;							 $$^WWWTEXT("IN00694"),                            ; "BOH"   (Balance On Hand)
	;							 $$^WWWTEXT(32483))                                ; "ATP"   (Available To Promise)
	;
	;set lstColTypes = $listbuild($listbuild("left","display"),
	;							 $listbuild("right","display"),
	;							 $listbuild("right","display"))
	set lstHeaders  = $listbuild($$^WWWFELDNAME("INReqLine","D",$$$FldINReqLineFromStockLocn),
								 $$^WWWTEXT("IN00694"))                                ; "ATP"   (Available To Promise)
	
	set lstColTypes = $listbuild($listbuild("left","display"),
								 $listbuild("right","display"))
	
	do GetWarehouseLocations(.arrLocations,idItem,dteDate,fltQty,$$$INReqProgram1(objRequisition))  ;SR17034
	set idLocn = ""
	for {
		set idLocn = $order(arrLocations(idLocn))
		quit:idLocn=""
		
		continue:idLocn=idToLocn
		
		set fltBOH = $piece(arrLocations(idLocn),Y,1)
		set fltATP = $piece(arrLocations(idLocn),Y,2)
		set ^CacheTempDynamicTable(YUCI,YUSER,$$$ReqDynTable1,$increment(idLine),"data") = idLocn_Y_fltATP
		set objLocn = $get(^WWW0121(0,0,idLocn,1))
		set ^CacheTempDynamicTable(YUCI,YUSER,$$$ReqDynTable1,idLine) = $select(blnHide:"",1:"("_idLocn_") ")_$$$WWW0121LocationName(objLocn)_Y_
														  fltBOH_Y_
														  fltATP
	}
	
	;---------------------------------------
	; The last parameter (after pidEvent) needs to be set for the RowClick event, will be used by RowClick^WWW120DynTable
	; 	e.g. "WarehouseLine^INReqTable"
	; 	will be called with the following parameters
	; 	1. Row ID
	; 	2. Each entry in ^CacheTempDynamicTable(...,data) separated by "~" will be a new parameter
	; 			in this routines case : do WarehouseLine^INReqTable(pidRow,idLocn) will be executed on Row click
	;---------------------------------------
	
	do DrawTable^WWW120DynTable(lstHeaders,$$$ReqDynTable1,lstColTypes,pidParameters,strFunction,pidEvent,"WarehouseLine^INReqTable")
	
	kill ^CacheTempDynamicTable(YUCI,YUSER)
	//SR17491.1 Because we are using 2 Dynagrids, the idLine has to be unique and hence we are passing it through
	do ShowOtherRequisitions(pidEvent,pidParameters,.idLine)		;SR17491
	quit
	
	
ShowOtherRequisitions(pidEvent,pidParameters,&pidLine)
	;-------------------------------------------------------------------------------
	; Additional dynagrid to show when there are other requisitions	for the current item.
	;
	; Inputs:
	;	pidLine		Dynagrid line number - sequence continues from first dynagrid
	;
	; Returns:
	;
	; History:
	; 14-Sep-2011	GRF		SR17823: Require Qty & Calc in common (Inventory) units
	; 03-Nov-2010	GRF		SR17491: get status description once; DynTable macros;
	;							use pidLine not idLine
	; 28-Oct-2010	PPP		SR17491:2 Added columns - Ordered Qty, Issued, Outstanding
	; 13-Oct-2010	PPP		SR17491:1.New parameter idLine, removed 'new' and
	;							initialisation for idLine
	;							2. Added Item in the Dynagrid header
	; 10-Sep-2010	shobby	SR17491: Created
	;-------------------------------------------------------------------------------
	new fltOutstanding,idGrid,idINReq,idItem,idKey,idKeyLine,idLn
	new idRequisition,idStatus,idToLocn,idxItem,lstColTypes,lstHeaders
	new objINReq,objINReqLine,objLine,objRequisition,strFunction,strStatusDesc
	
	set idGrid = $$$DYNTABLEGridLineFocusGrid(pidParameters)
	
	set lstHeaders  = "" 
	set lstColTypes = ""
		
	kill ^CacheTempDynamicTable(YUCI,YUSER)
	
	set idKey          = $$ReferenceKey^COMGridEdit31Interface(idGrid,$$$DYNTABLEGridLineFocusRow(pidParameters))
	set idRequisition  = $$$KEY1(idKey)
	set idKeyLine      = $$$KEY2(idKey)
	set objRequisition = $$$GRIDYFELDContainer
	set idToLocn       = $$$INReqToLocn(objRequisition)
	set objINReqLine   = $$$GRIDGetYFELD(idKeyLine)
	set idItem         = $$$INReqLineItem(objINReqLine)
	set idxItem        = $$$Index(idItem)
	set strFunction    = "FillLine2"
	
 	set lstHeaders = $listbuild($$^WWWFELDNAME("INReq","P",1),
 								$$^WWWFELDNAME("INReqLine","P",2),
								$$^WWWFELDNAME("INReqLine","D",$$$FldINReqLineQtyOrdered),  //SR17491.2
								$$^WWWFELDNAME("INReqLine","D",$$$FldINReqLineQtyIssued),   //SR17491.2
								$$$Text("IN00366"),                 ; "Outstanding"         //SR17491.2
								$$^WWWFELDNAME("INReqLine","D",$$$FldINReqLineStatus))
	
	set lstColTypes = $listbuild($listbuild("left","display"),
								 $listbuild("left","display"),
								 $listbuild("left","display"),
								 $listbuild("left","display"),
								 $listbuild("left","display"),
								 $listbuild("left","display"))

	//SR17491:1
	if idxItem'="" {
		set idStatus = ""
		for {
			set idStatus = $order(^INReqLines(0,4,idStatus))
			quit:idStatus=""
			
			if idStatus<8 {
				set strStatusDesc = $$GetDescription^WWWStatus("INReqLine",idStatus,SPRACHE)
				
				set idINReq = ""
				for {
					set idINReq = $order(^INReqLines(0,4,idStatus,idxItem,idINReq))
					quit:idINReq=""
					continue:idRequisition=idINReq
						
					set objINReq = $get(^INReq(0,idINReq,1))
		
					if idToLocn=$$$INReqToLocn(objINReq) {

						set idLn = +$order(^INReqLines(0,4,idStatus,idxItem,idINReq,""))
						if idLn {                                                           //SR17491.2
							set objLine = $get(^INReqLine(0,idINReq,idLn,1))
						;	set fltOutstanding = $$$INReqLineQtyOrdered(objLine)-$$$INReqLineQtyIssued(objLine)  ; SR17823
							set fltOutstanding = $$$INReqLineQtyRequired(objLine)-$$$INReqLineQtyIssued(objLine)     ; both in IU
							if fltOutstanding > 0 {
						;		set ^CacheTempDynamicTable(YUCI,YUSER,$$$ReqDynTable2,$increment(pidLine)) = idINReq_Y_idLn_Y_+$$$INReqLineQtyOrdered(objLine)_Y_+$$$INReqLineQtyIssued(objLine)_Y_fltOutstanding_Y_strStatusDesc   ; SR17823
								set ^CacheTempDynamicTable(YUCI,YUSER,$$$ReqDynTable2,$increment(pidLine)) = idINReq_Y_idLn_Y_$$^WWWTR(0,12,+$$$INReqLineQtyRequired(objLine))_Y_$$^WWWTR(0,12,+$$$INReqLineQtyIssued(objLine))_Y_$$^WWWTR(0,12,fltOutstanding)_Y_$$^WWWTR(0,12,strStatusDesc)
							}
						}
					}
				}
			}
		}
	}
	
	if $data(^CacheTempDynamicTable(YUCI,YUSER,$$$ReqDynTable2)) {    //SR17491:1
		do DrawTable^WWW120DynTable(lstHeaders,$$$ReqDynTable2,lstColTypes,pidParameters,strFunction,pidEvent,"",$$$Text($listbuild("IN01262",idItem)))
	} ; "Item %1 in other Requisitions)"
	kill ^CacheTempDynamicTable(YUCI,YUSER,$$$ReqDynTable2)
	
	quit
	
	
WarehouseLine(pidRow,pidLocn,pfltATP="")
	;-------------------------------------------------------------------------------
	; Description :
	;			
	; Called By : CallBack in ShowItems^INReqTable [Function FillLine]
	;		
	; Inputs : 
	;
	; ByRef :
	; 	YFELD		FIXME : pYFELD/YFELD? <GRF>  Check calling routine
	;
	; Returns :
	;
	; History :
	; 11-Dec-2007	HQN		Added ATP update, should be all JS based,
	; 							does Global lookup at the moment
	; 23-Nov-2007	PPP		Created
	;-------------------------------------------------------------------------------
	do SetRecord^COMGridEdit31S1("INReqLine",pidRow,$$$FldINReqLineFromStockLocn_$$$COMMA_pidLocn)
	do UpdateManualField^COMGridEdit31Interface(pidRow,6,pfltATP)
	quit
	
	
GetWarehouseLocations(&parrLocns,pidItem,pdteDate,pfltQty,pidProgram="")  ;SR17034
	;-------------------------------------------------------------------------------
	; List all the locations with Stock for this item. Note the current location is excluded
	; The array contains the BOH and ATP quantites.
	;
	; Inputs:
	; 	pidItem			The item to search against
	;
	; ByRef:
	; 	parrLocns		The array of locations, with the BOH and ATP as the values
	;
	; Returns:
	;
	; History:
	; 17-Dec-2013	SCR		SESDF-655: Take off ATP
	; 12-Feb-2010	shobby	SR17034: Changed calls from $$^INARTMENGE to $$GetQty^INARTMENGE
	; 07-Dec-2009	shobby	SR17034: Speed up by only looking at locations with stock.
	; 							SourceStock,INARTMENGE need to know about Program.
	; 15-Sep-2008	Luke	SR15886 Corrected the sourcing of locations to check 
	; 							validity of stock at a location 
	; 07-Dec-2007	GRF		SR15612: Apply OnDataAccess to filter the locations
	; 23-Nov-2007	PPP		SR15612 Created
	;-------------------------------------------------------------------------------
	new blnCheckFound,blnValid,fltATP,fltBOH,idLocn
	new objItem,objLocn,objResultSet,objResultSetLocn,sc,strCallBack
	
	quit:$get(pidItem)=""
	
	set strCallBack   = $$$WWW001DataAccess($get(^WWW001(0,"WWW0121",1)))
	set blnCheckFound = $$$YES
	set sc = $$$OK
	
 	set objItem          = ##class(alINV.iUINV).GetItem(pidItem,.sc)		;SR17034
	set objResultSetLocn = ##class(%Library.ResultSet).%New("alSOH.dBundleStock:GetLocns")	;SR17034
	set sc = objResultSetLocn.Execute(pidItem)	;SR17034
	
	if sc {
	; SR17034 vvvvvvv
	;	while objResultSetLocn.Next(.sc) {
	;		set idLocn = objResultSetLocn.Data("Location")
	;		set idLocn=""
	;		for {
	;			set idLocn=$order(^WWW0121(0,0,idLocn))
	;			quit:idLocn=""
	;			continue:idLocn=YLOCATION
		
		while objResultSetLocn.Next(.sc) {
			set idLocn = objResultSetLocn.Data("Location")
	; SR17034 ^^^^^^
			
	 		set objLocn      = ##class(alLOC.iLOC).GetLocation(idLocn,sc)
	 		set objResultSet = ##class(alDRP.iDRP).SourceStock(objItem,objLocn,pidProgram)		;SR17034
	 ;		continue:(objResultSet.Count() = 0) 		;SR17034
	 		
	 		if (objResultSet.Count()>0) {				;SR17034
		 		set blnValid = $$$YES
				if blnValid && blnCheckFound {
					set blnValid = $$DataAccess^WWWFieldValidation(strCallBack,"0,"_idLocn,"INReq","D",$$$FldINReqFromLocn,,"INReq",.blnCheckFound)
				}
				
				if blnValid {
					if pidProgram="" {
						set fltBOH = $$GetQty^INARTMENGE(pidItem,,idLocn,,1,$$$YES,,pidProgram)   ;SR17034 
					} else {
						set fltBOH = $$GetQty^INARTMENGE(pidItem,,idLocn,,"",$$$YES,,pidProgram)  ;SR17034 
					}
					;set fltATP = $$^INATP1(pidItem,idLocn,pfltQty,pdteDate,1)
		
				//	if (fltBOH'=0) && (fltATP'=0) {
					set parrLocns(idLocn) = $$^WWWTR(0,12,fltBOH) ;_Y_fltATP
				}
			}
		}
	}
	quit
	
]]></Routine>
</Export>