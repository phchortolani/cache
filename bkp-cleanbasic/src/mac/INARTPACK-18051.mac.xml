<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INARTPACK" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INARTPACK
	
#include COMSYS
#include INConst
	
#define FORMFldINARTPACKIsBaseUnit		11
#define FORMFldINARTPACKIsInventoryUnit	12
#define FORMFldINARTPACKIsObsolete		13
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INARTPACK("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
IsValid(pidItem="",pidUnit="",pidCurrentUnit="")
	;-------------------------------------------------------------------------------
	; Called By: OnBeforeDataAccess^INARTOBDA
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 05-Nov-2010	GRF		SR17243: New INARTPACK records may be empty - test '$d
	; 28-Jan-2010	shobby	SR17138: Created
	;-------------------------------------------------------------------------------
	new objINARTPACK,strStatus

	set strStatus = $$$NO     ; FIXME : include explanation or isn't message needed?
	if (pidItem'="") && (pidUnit'="") {
		set strStatus = $$$OK
		set objINARTPACK = $get(^INARTPACK(0,pidItem,pidUnit,1))
	;	if (objINARTPACK="") {   ; SR17243
		if '$data(^INARTPACK(0,pidItem,pidUnit,1)) {
			 set strStatus = $$$MakeStatus("IN01178",pidUnit,pidItem)  ; "Unit '%1' is not associated with Item '%2'."
		
		} elseif $$$INARTPACKIsObsolete(objINARTPACK) {
			; Show obsolete unit if it is the currently selected unit.
			set strStatus = (pidUnit=pidCurrentUnit)
		}
	}
	quit strStatus


IsBaseUnit(pYKEY)
	;-------------------------------------------------------------------------------
	;
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 09-Feb-2010	shobby	SR17138: Check with $$$NoKey
	;-------------------------------------------------------------------------------
	new blnIsBaseUnit,idItem,objItem
	
	set blnIsBaseUnit = $$$NO
	if '$$$NoKey(pYKEY) {				;SR17138
		set idItem  = $$$KEY1(pYKEY)
		set objItem = $get(^INART(0,idItem,1))
		if $$$INARTBaseUnit(objItem) = $$$KEY2(pYKEY) {
			set blnIsBaseUnit = $$$YES
		}
	}
	quit blnIsBaseUnit
	
	
IsInventoryUnit(pYKEY)
	;-------------------------------------------------------------------------------
	; Does this record match the Inventory Unit on the INART
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 13-Jan-2010	shobby	SR17119: Created
	;-------------------------------------------------------------------------------
	new idItem,objItem,blnIsInventoryUnit
	
	set blnIsInventoryUnit = $$$NO
	if '$$$NoKey(pYKEY) {
		set idItem  = $$$KEY1(pYKEY)
		set objItem = $get(^INART(0,idItem,1))
		if $$$INARTUnitofMeasure(objItem) = $$$KEY2(pYKEY) {
			set blnIsInventoryUnit = $$$YES
		}
	}
	quit blnIsInventoryUnit
	
	
OnBeforeFormConstruction(YBBN,YKEY)
	;-------------------------------------------------------------------------------
	; Disable the IsObsolete field if these records are already the Base or Inventory UOM
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 26-Feb-2010	GRF		SR17119: FORMFld macro
	; 13-Jan-2010	shobby	SR17119: Created
	;-------------------------------------------------------------------------------
	new objINART
	
	if YBBN=$$$FORMFldINARTPACKIsObsolete {
		if '$$$NoKey(YKEY) {
			set objINART = $get(^INART(0,$$$KEY1(YKEY),1))
			
			if $$$KEY2(YKEY)=$$$INARTBaseUnit(objINART) {
				set YHID = 2
			
			} elseif $$$KEY2(YKEY)=$$$INARTUnitofMeasure(objINART) {
				set YHID = 2
			}
		}
	}
	quit

	
DefaultVariableInput(pintField,YKEY)
	;-------------------------------------------------------------------------------
	; Populates the IsBaseUnit and IsInventoryUnit manual fields from INART
	;
	; Inputs:
	;
	; Returns:
	;
	; History:
	; 26-Feb-2010	GRF		SR17119: FORMFld macros
	; 13-Jan-2010	shobby	SR17119: Created
	;-------------------------------------------------------------------------------
	new blnValue
	
	if pintField=$$$FORMFldINARTPACKIsBaseUnit      set blnValue = $$IsBaseUnit(YKEY)
	if pintField=$$$FORMFldINARTPACKIsInventoryUnit set blnValue = $$IsInventoryUnit(YKEY)
	quit blnValue
	
	
OnBeforeSaveHook(pYKEY,&pYFELD)
	;-------------------------------------------------------------------------------
	; Validation, must have 1 record set as Inventory Unit
	; Verifies that the resultant record does not lead to recursion ie:
	;	A => B => C => A Is not allowed
	; 
	; 
	; History:
	; 11-Nov-2010	GRF		SR17243: separate circular ref check for common use
	; 13-Jan-2010	shobby	SR17119: Removed some code as Base UOM and Inventory UOM
	; 							are no longer stored on INARTPACK
	; 13-Mar-2009	HQN		SR16420: no longer checks if inventory unit is an end node
	; 16-Feb-2009	GRF		SR16347: Some tests should not have been subject to
	; 							Inner Unit being defined (e.g. Each = 1 Each is not
	; 							required)
	; 20-Feb-2009	GRF		SR16347: Obsolete item testing
	; 16-Feb-2009	GRF		SR16347: Recognise self-referencing entry.
	; 13-Feb-2009	GRF		SR16347: language text, functionality corrected (PEER)
	; 12-Feb-2009	HQN		SR16347: Created
	;-------------------------------------------------------------------------------
	new idItem,idInnerUnit,idOuterUnit,strStatus
	
	set strStatus   = $$$OK
	set idItem      = $$$KEY1(pYKEY)
	set idOuterUnit = $$$KEY2(pYKEY)
	
	;---------------------------------------
	; Linked List Traversal
	; 1) If inner unit isn't defined for item, we know we can't have circular reference
	; 2) If next inner unit links back to either of the initial outer or inner
	;    units indicate we have an error.
	;
	; Other Validation  (Index 5 : D15 : Is Inventory Unit)
	; 1) Inner Unit specified but no multiplier
	; 2) Saving a record when none are labelled as being the INVENTORY UNIT  ...or...
	;    Cancelling the INVENTORY UNIT label on a record (Correct procedure
	;    is to set ANOTHER record to yes and this will remove the setting on
	;    the previously flagged record.)
	;---------------------------------------
	; SR17243 vvv
	set strStatus = $$CheckOneUnit(idItem,idOuterUnit,pYFELD,.idInnerUnit)
	
	if $$$ISOK(strStatus) && (idInnerUnit'="") && (+$$$INARTPACKQuantity(pYFELD)=0) {
		set strStatus = $$$MakeStatus("IN00887")
	} ; "Quantity required."
	
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
		if $$$ISOK(strStatus) && ((idInnerUnit'="") && (idInnerUnit'=idOuterUnit)) && 
													'$data(^INARTPACK(0,idItem,idInnerUnit)) {
			new objItem,descItem,descUnit
			set strStatus = '$$$OK
			
			set objItem  = $get(^INART(YM,idItem,1))
			set descItem = idItem_" - "_$$$INARTSearchName(objItem)
			set descUnit = idInnerUnit_ " - "_$$$WWW101Text($$Get^WWW101("EINHEIT",SPRACHE,idInnerUnit))
			
			$$$StartScript()
				write "alert('"_$$$Text($$$MakeStatus("IN01801",descUnit,descItem))_"')"
			$$$EndScript()
		}
	}
	quit strStatus
	
	/*
	set idInnerUnit = $$$INARTPACKUnit(pYFELD)    ; Pre-save record
	
	if (idInnerUnit'="") {
		set idCurUnit = idInnerUnit
		set idLastCur = idCurUnit
		for {
			quit:'$data(^INARTPACK(0,idItem,idCurUnit))
			
			set idCurUnit = $$$INARTPACKUnit($get(^INARTPACK(0,idItem,idCurUnit,1)))
			quit:idCurUnit=""
			quit:idCurUnit=idLastCur              ; self referencing is okay - go no further
			
			set idLastCur = idCurUnit
			if (idCurUnit = idInnerUnit) || (idCurUnit = idOuterUnit) {
				set strStatus = $$$MakeStatus("IN00849")        ; "A circular reference has been detected."
				quit
			}
		}
		
		if $$$ISOK(strStatus) && (+$$$INARTPACKQuantity(pYFELD)=0) {
			set strStatus = $$$MakeStatus("IN00887")            ; "Quantity required."
		}
	}
	quit strStatus
	*/
	; SR17243 ^^^
	
	
OnAfterSaveHook(pYKEY,&pYFELD)
	;-------------------------------------------------------------------------------
	; Ensures that there will always be an end node defined, 
	; clears other INARTPACK fields for Inventory/base if this record has
	; IsInventory/IsBase set
	; Updates INART record if Inventory/Base set
	; 
	; History:
	; 13-Jan-2010	shobby	SR17119: Removed some code as Base UOM and Inventory UOM
	; 							are no longer stored on INARTPACK
	; 18-Aug-2009	DWR		SR16843: added validation and resetting of Pack Unit
	; 12-Feb-2009	HQN		SR16347: Created
	;-------------------------------------------------------------------------------
	new idInnerUnit,idItem,idOuterUnit,idUnit,objPackage,strStatus
	
	set strStatus       = $$$OK
	set idItem          = $$$KEY1(pYKEY)
	set idOuterUnit     = $$$KEY2(pYKEY)
	set idInnerUnit     = $$$INARTPACKUnit(pYFELD)
	//set objItem         = $get(^INART(0,idItem,1))
	//set blnItemModified = $$$NO
	
	; End node definition
	if (idInnerUnit'="") && '$data(^INARTPACK(0,idItem,idInnerUnit)) {
		set strStatus = $$$Save("INARTPACK",idItem_$$$COMMA_idInnerUnit,"",$$$YES)
	}
	
	; Clear any other Pack Unit entries if stating that this entry is the Pack Unit
	;---------------------------------------
	if $$$ISOK(strStatus) && ($$$INARTPACKIsPackUnit(pYFELD) = $$$YES) {
		set idUnit = ""
		for {
			set idUnit = $order(^INARTPACKs(0,6,$$$YES,idItem,idUnit))
			quit:idUnit=""
			continue:idUnit=idOuterUnit
			
			set objPackage = $get(^INARTPACK(0,idItem,idUnit,1))
			set $$$INARTPACKIsPackUnit(objPackage) = ""        ; @nM $$$NO
			set strStatus = $$$Save("INARTPACK",idItem_$$$COMMA_idUnit,objPackage,$$$YES)
			quit:$$$ISERR(strStatus)
		}
		//Do not update Inventory Unit
		//if $$$INARTUnitofMeasure(objItem) '= idOuterUnit {
		//	set $$$INARTUnitofMeasure(objItem) = idOuterUnit
		//	set blnItemModified = $$$YES
		//}
	}
	
	if $$$ISERR(strStatus) {
		$$$Alert(strStatus)
	}
	quit strStatus
	
	
OnBeforeDeleteHook(pYKEY,&pYFELD)
	;-------------------------------------------------------------------------------
	; Do not delete entries set as Inventory Unit or Base Unit on Item Master Data
	; 
	; Called By:
	;	INARTPACK Class
	;	
	; History:
	; 08-Nov-2010	GRF		SR17243: Fix duplicated message no; remove health check
	;							record so it is refreshed
	; 13-Jan-2010	shobby	SR17119: Can't delete Base UOM or Inventory UOM.
	; 16-fEB-2009	GRF		SR16347: Language Text
	; 13-Feb-2009	HQN		SR16347: Created
	;-------------------------------------------------------------------------------
	new strStatus,objINART
	
	set strStatus = $$$OK
	
	if '$$$NoKey(pYKEY) {
		set objINART=$get(^INART(0,$$$KEY1(pYKEY),1))
		if $$$INARTUnitofMeasure(objINART)=$$$KEY2(pYKEY) {
			set strStatus = $$$MakeStatus("IN00890")
		  ; "Unable to delete the unit marked as the Inventory Unit"
		
		} elseif $$$INARTBaseUnit(objINART)=$$$KEY2(pYKEY)&&('+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
			set strStatus = $$$MakeStatus("IN01275")              ; SR17243
		} ; "Unable to delete the unit marked as the Base Unit"
	}
	kill ^CacheTempHealthCheck(YUSER,"INARTPACK")   ; SR17243
	quit strStatus
	
	
OnBeforeDeletePossible(pYKEY,&pYFELD)
	;-------------------------------------------------------------------------------
	; Do not delete entries marked as Inventory/Base Unit
	; 
	; Called By:
	;	INARTPACK Form
	; 
	; History:
	; 16-Feb-2009	GRF		SR16347: Rename; don't return value; pass pYFELD as byRef
	; 13-Feb-2009	HQN		SR16347: Created
	;-------------------------------------------------------------------------------
	new strStatus
	
	set strStatus = $$OnBeforeDeleteHook^INARTPACK(pYKEY,.pYFELD)
	
	if $$$ISERR(strStatus) {
		set Q = $$$QDontSave
		$$$YQHandler(strStatus)
	}
	quit
	
	
ItemUnits(pidItem)
	;-------------------------------------------------------------------------------
	; History:
	; 16-Feb-2009	GRF		SR16347: Created to improve INART presentation
	;-------------------------------------------------------------------------------
	new fltMultiplier,idInnerUnit,idUnit,objPack,strInner
	
	kill ^COMTempList(0,YUSER,"INARTPACK")
	
	if (pidItem'="") && $data(^INARTPACK(0,pidItem)) {
		set idUnit = ""
		for {
			set idUnit = $order(^INARTPACK(0,pidItem,idUnit))
			quit:idUnit=""
			
			set objPack = $get(^INARTPACK(0,pidItem,idUnit,1))
			continue:$$$INARTPACKIsObsolete(objPack)
			
			set fltMultiplier = $$$INARTPACKQuantity(objPack)
			if fltMultiplier="" set fltMultiplier = "?"
			set idInnerUnit   = $$$INARTPACKUnit(objPack)
			if idInnerUnit = "" {
				set strInner = ""
			} else {
				set strInner = " = "_fltMultiplier_" "_$$$AppEnum("EINHEIT",idInnerUnit)
			}
			
			set ^COMTempList(0,YUSER,"INARTPACK",idUnit,1) = $$$AppEnum("EINHEIT",idUnit)_Y_strInner
		}
		
	} else {    ; FIXME : Does INART update INARTPACK for base unit? May need to access INARTPACK *BEFORE* able to enter this data. <GRF>
		set idUnit = ""
		for {
			set idUnit = $order(^WWW101(0,"EINHEIT","EN",idUnit))
			quit:idUnit=""
			
			set ^COMTempList(0,YUSER,"INARTPACK",idUnit,1) = $$$AppEnum("EINHEIT",idUnit)
		}
	}
	quit
	
	
OnDataAccess(pidKey,pidForm)
	;-------------------------------------------------------------------------------
	; Whether a Item Unit can be used at this time.
	; 
	; Called By: INARTPACK Class Call Back
	; 
	; Params:	pidKey		YKEY
	;			pidForm		YFORM
	;
	; Returns: blnDataAccess
	;	$$$NO		Item Unit is not marked as Obsolete
	;	$$$YES		Req is Accessable
	;
	; History:
	; 03-Mar-2009	HQN		SR16407: Corrected variables
	; 20-Feb-2009	GRF		SR16347: Based on INIssue
	;-------------------------------------------------------------------------------
	new blnDataAccess,idItem,idUnit,objItemUnit
	
	set blnDataAccess = $$$YES
	
	set idItem = $$$KEY1(pidKey)
	set idUnit = $$$KEY2(pidKey)
	
	if (idItem'="") && (idUnit'="") {
		set objItemUnit = $get(^INARTPACK(0,idItem,idUnit,1))
		set blnDataAccess = ''$$$INARTPACKIsObsolete(objItemUnit)
	}
	quit blnDataAccess
	
	
OnBeforeFormat(YKEY,pobjPack,YART,YLFN,&pstrBGOverride)  ; Code is test mode
	;-------------------------------------------------------------------------------
	; Identify pack entries that fail the health check.
	; Outer Unit Key is coloured yellow and 
	; 
	; Called By: OnBeforeFormat^WWWFORM4 (similar to COMGridEdit CallEvent)
	; 
	; Inputs :
	;	YKEY		: idItem,idUnit
	;	pobjPack	: INARTPACK record
	;	YART		: "P", "D" (no code)
	;	YLFN		: Class Field No (not used)
	;	pstrBGOverride (ByRef)
	; 
	; 
	; History:
	; 10-Nov-2010	GRF		SR17243: Created
	;-------------------------------------------------------------------------------
	new blnCircleFound,idItem,idOuterUnit,idInnerUnit,fltQty,strOutUnit,strStatus
	
	set pstrBGOverride = ""
	set blnCircleFound = $$$NO
	kill YTOOLTIP
	
 	if (YART="P") {
		set idItem      = $$$KEY1(YKEY)
		set idOuterUnit = $$$KEY2(YKEY)
		set idInnerUnit = $$$INARTPACKUnit(pobjPack)
		set fltQty      = $$$INARTPACKQuantity(pobjPack)
		set strOutUnit  = $$$AppEnum("EINHEIT",idOuterUnit)
		
		; Create entries once per refresh
		;-----------------------------------
		if '$data(^CacheTempWWWFORM4(YUSER,"OnBeforeFormat")) {
			kill ^CacheTempHealthCheck(YUSER,"INARTPACK")
			set blnCircleFound = $$CheckCircularRef(idItem)
			if 'blnCircleFound set strStatus = $$CheckValid(idItem)
			set ^CacheTempWWWFORM4(YUSER,"OnBeforeFormat") = $$$YES
		}
		
		; Use entries
		;-----------------------------------
		set strStatus = $get(^CacheTempHealthCheck(YUSER,"INARTPACK","unit",idOuterUnit))
		if $$$ISERR(strStatus) {
			set pstrBGOverride = $get(YRED,"red")
			set YTOOLTIP       = $$$Text(strStatus)
		}
 	
 	} elseif (YART="D") {
	 	if YLFN=2 {            ; Inner Unit
			set idItem      = $$$KEY1(YKEY)
			set idOuterUnit = $$$KEY2(YKEY)
			set idInnerUnit = $$$INARTPACKUnit(pobjPack)
	 		
	 		if (idInnerUnit'="") && '$data(^INARTPACK(0,idItem,idInnerUnit,1)) {
				set strStatus = $$$MakeStatus("IN01279","("_idOuterUnit_") "_$$$AppEnum("EINHEIT",idOuterUnit))
			 ; "Unit %1 : Inner Unit is not defined"
				set pstrBGOverride = $get(YRED,"red")
				set YTOOLTIP       = $$$Text(strStatus)
	 		}
	 	}
 	}
	quit
	
	;---------------------------------------
	;   HEALTH CHECK AND VALIDATION SUBROUTINES
	;---------------------------------------
	
HealthCheck(pidItem)
	;-------------------------------------------------------------------------------
	; Because part of the unit definition occurs on INART and part on INARTPACK it
	; is not possible to fully validate the INARTPACK records since it would be
	; impossible to have both sets of changes occur at once.
	; Instead, following the save of a change to INART (in particular a change to
	; the Base Unit), the following health check will be performed and the user will
	; be directed to the INARTPACK form if any problems are reported.
	; 
	; Called By: ^INART (On After Save from form INART)
	; 
	; Returns : strStatus - if $$$ISERR causes INARTPACK form to be displayed
	; 
	; History:
	; 05-Nov-2010	GRF		SR17243: Created
	;-------------------------------------------------------------------------------
	new blnCircleFound,strStatus
	
	$$$LogR("HealthCheck",pidItem)
	
	kill ^CacheTempHealthCheck(YUSER,"INARTPACK")
	
	set strStatus  = $$$OK
	
	; 1. Circular references
	; 2. Inner Unit without quantity
	;---------------------------------------
	set blnCircleFound = $$CheckCircularRef(pidItem)
	
	; 3. self-referencing unit with quantity other than 1 (blank inner
	;    unit with blank quantity is treated as 1)
	; 4. multiple self-referencing units indicates multiple independant
	;    hierarchies - can't calculate unit conversion factor
	;---------------------------------------
	if blnCircleFound {
		set strStatus = $$$MakeStatus("IN00849")    ; "A circular reference has been detected."
	
	} else {
		set strStatus = $$CheckValid(pidItem)
	}
	$$$LogRx(strStatus)
	quit strStatus
	
	
CheckCircularRef(pidItem)
	;-------------------------------------------------------------------------------
	;	OnLoad : Health Check of all units
	;	OnSave : Perform Health Check on saved item
	;	
	;	produces ^CacheTempHealthCheck(YUSER,"INARTPACK","unit",idOuterUnit) = strStatus
	; 
	; History:
	; 11-Nov-2010	GRF		SR17243: Created
	;-------------------------------------------------------------------------------
	new blnCircleFound,idInnerUnit,idOuterUnit,objPack,strStatus
	
	set blnCircleFound = $$$NO
	
	set idOuterUnit = ""
	for {
		set idOuterUnit = $order(^INARTPACK(0,pidItem,idOuterUnit))
		quit:idOuterUnit=""
		
		set objPack   = $get(^INARTPACK(0,pidItem,idOuterUnit,1))
		set strStatus = $$CheckOneUnit(pidItem,idOuterUnit,objPack,.idInnerUnit)
		if $$$ISERR(strStatus) {
			set blnCircleFound = $$$YES
			
		} elseif (idInnerUnit'="") && (+$$$INARTPACKQuantity(objPack)=0) {
			set strStatus = $$$MakeStatus("IN00887")
		} ; "Quantity required."

		set ^CacheTempHealthCheck(YUSER,"INARTPACK","unit",idOuterUnit) = strStatus
	}
	quit blnCircleFound
	
	
CheckOneUnit(pidItem,pidOuterUnit,pobjPack,&pidInnerUnit)
	;-------------------------------------------------------------------------------
	; 
	; History:
	; 11-Nov-2010	GRF		SR17243: Created
	;-------------------------------------------------------------------------------
	new idCurUnit,idLastCur,strStatus
	
	set strStatus    = $$$OK
	set pidInnerUnit = $$$INARTPACKUnit(pobjPack)
	
	if (pidInnerUnit'="") {
		set idCurUnit = pidInnerUnit
		set idLastCur = idCurUnit
		for {
			quit:'$data(^INARTPACK(0,pidItem,idCurUnit))
			
			set idCurUnit = $$$INARTPACKUnit($get(^INARTPACK(0,pidItem,idCurUnit,1)))
			quit:idCurUnit=""
			quit:idCurUnit=idLastCur              ; self referencing is okay - go no further
			
			set idLastCur = idCurUnit
			if (idCurUnit = pidInnerUnit) || (idCurUnit = pidOuterUnit) {
				set strStatus = $$$MakeStatus("IN00849")
				quit
			}
		} ; "A circular reference has been detected."
	}
	quit strStatus
	

CheckValid(pidItem)
	;-------------------------------------------------------------------------------
	; Follow linked list through Pack Unit hierarchy (stop if encounter a node
	; that has already been checked)
	;  - If multiple entries which are self-referencing, have separate linked lists
	;    and potential for invalid conversion factors
	;  - If unit is self-referencing then must have a conversion factor of 1
	;    (blank equates to 1 if both InnerUnit and Qty are blank)
	; 
	; 
	; History:
	; 01-Mar-2011	GRF		SR17243: was incorrectly reporting multiple hierarchies
	;							when base unit didn't have an inner unit.
	; 11-Nov-2010	GRF		SR17243: Created
	;-------------------------------------------------------------------------------
	new arrChecked,blnErrorFound,blnMultipleLists
	new idCurrUnit,idInnerUnit,idOuterUnit,objPack,strStatus
	
	$$$LogR("CheckValid",pidItem)
	
	set blnErrorFound    = $$$NO
	set blnMultipleLists = $$$NO
	set strStatus        = $$$OK
	
	set idCurrUnit = ""
	for {
		set idCurrUnit = $order(^INARTPACK(0,pidItem,idCurrUnit))
		quit:idCurrUnit=""
	$$$LogRx("CV:1:"_idCurrUnit_"<"_$get(arrChecked(idCurrUnit))_"<")
		continue:$get(arrChecked(idCurrUnit))   ; don't repeat once checked
		
		set idOuterUnit = idCurrUnit
		for {
			quit:idOuterUnit=""
			
			set objPack = $get(^INARTPACK(0,pidItem,idOuterUnit,1))
			set idInnerUnit = $$$INARTPACKUnit(objPack)
			quit:((idInnerUnit'="") && $get(arrChecked(idInnerUnit)))   ; don't repeat once checked
			
			if (idInnerUnit="") {
				if ($$$INARTPACKQuantity(objPack)'="") && ($$$INARTPACKQuantity(objPack)'=1) {
					set strStatus = $$$MakeStatus("IN01274","("_idOuterUnit_") "_$$$AppEnum("EINHEIT",idOuterUnit))
				} ; "Unit %1 : Quantity must be 1 if self-referencing"
				
				if $data(^CacheTempHealthCheck(YUSER,"INARTPACK","self")) {
					set blnMultipleLists = $$$YES
				}
				set ^CacheTempHealthCheck(YUSER,"INARTPACK","self",idOuterUnit) = $$$YES
				set arrChecked(idOuterUnit) = $$$YES     ; 01-Mar-2011
			
			} elseif idInnerUnit=idOuterUnit {
				if $$$INARTPACKQuantity(objPack)'=1 {
					set strStatus = $$$MakeStatus("IN01274","("_idOuterUnit_") "_$$$AppEnum("EINHEIT",idOuterUnit))
				} ; "Unit %1 : Quantity must be 1 if self-referencing"
				
				if $data(^CacheTempHealthCheck(YUSER,"INARTPACK","self")) {
					set blnMultipleLists = $$$YES
				}
				set ^CacheTempHealthCheck(YUSER,"INARTPACK","self",idOuterUnit) = $$$YES
			
			} elseif '$data(^INARTPACK(0,pidItem,idInnerUnit,1)) {
				set strStatus = $$$MakeStatus("IN01279","("_idOuterUnit_") "_$$$AppEnum("EINHEIT",idOuterUnit))
			} ; "Unit %1 : Inner Unit is not defined"
			
			if $$$ISERR(strStatus) {
				set blnErrorFound = $$$YES
				set ^CacheTempHealthCheck(YUSER,"INARTPACK","unit",idOuterUnit) = strStatus
			}
			if idInnerUnit'="" {
				set arrChecked(idInnerUnit) = $$$YES
			}
			set idOuterUnit = idInnerUnit
			set strStatus   = $$$OK
		}
	}
	
	if blnMultipleLists {
		set strStatus = $$$MakeStatus("IN01277")
	 ; "Multiple Package Unit hierarchies exist - may not calculate correct unit conversion factor - Please Review"
		set idOuterUnit = ""
		for {
			set idOuterUnit = $order(^CacheTempHealthCheck(YUSER,"INARTPACK","self",idOuterUnit))
			quit:idOuterUnit=""
			
			set ^CacheTempHealthCheck(YUSER,"INARTPACK","unit",idOuterUnit) = strStatus
		}
		
	} elseif blnErrorFound {
		set strStatus = $$$MakeStatus("IN01278")
	} ; "Error found while checking Package Units - Please Review"
	
	quit strStatus
	
OnBeforeDelete(pYKEY,&pYFELD)
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
		new strStatus,objINART,idOuterUnit,objPack,idInnerUnit,arrReferedUnits,idRefUnit,blnLockAlert

		set strStatus = $$$OK

		if '$$$NoKey(pYKEY) {
			set objINART=$get(^INART(0,$$$KEY1(pYKEY),1))
			if ($$$INARTBaseUnit(objINART) = $$$KEY2(pYKEY)) {
				set $$$INARTBaseUnit(objINART) = $$$INARTUnitofMeasure(objINART)
				set strStatus = $$$Save("INART",$$$KEY1(pYKEY),objINART,$$$YES)
			}
			
			do CheckReferedUnits^VARINARTPACK($$$KEY1(pYKEY),$$$KEY2(pYKEY),.arrReferedUnits)
			if $data(arrReferedUnits) {
				lock +blnLockAlert
				if $test {
					$$$StartScript()
						write "alert('"_$$$Text($$$MakeStatus("IN01800",$$$KEY2(pYKEY)))_"')"
					$$$EndScript()
				}
				set idRefUnit = ""
				for {
					set idRefUnit = $order(arrReferedUnits($$$KEY1(pYKEY),idRefUnit),-1)
					quit:idRefUnit=""
					quit:$$$ISERR(strStatus)
					
					set strStatus = $$$Kill("INARTPACK",""""_$$$KEY1(pYKEY)_","_idRefUnit_"""") ;Reverse code of OnBeforeDelete (Remove all units that using deleted InnerUnit)
				}
				lock -blnLockAlert
			}
		}
		
		if $$$ISERR(strStatus) {
			set $zerror = $$DecodeError^COMUtilError(strStatus)
			zquit 1 GOTO @$ZTRAP
		}
	}
	
	quit
	
LoadCombo(pidItem,pblnOverride,&pSUCH)
	;-------------------------------------------------------------------------------
	; Populates the Unit with the UOM as defined in INARTPACK only, excludes
	; units that the item does not come in.
	; 
	; set pSUCH as the items to be used when you override the list (set via blnOverride)
	;
	; Called By: various OnBeforeDisplayCombo^YFORM routines via COMGridEdit31Events executable
	; 
	; Inputs:
	;	pstrKeys		YKEY
	;	pobjSummary		YFELD
	; 
	; Returns: $$$YES or $$$NO (override the data) 
	;
	; History:
	; 03-Oct-2012	SCR		SR17993; Copied from 1.74
	; 15-Jul-2011	GRF		SR17669: Created as common call
	;-------------------------------------------------------------------------------
	new enumUnit
	
	kill pSUCH
	set pSUCH  = "SUCH"
	
	if pidItem '= "" {
		set enumUnit = ""
		for {
			set enumUnit = $order(^INARTPACK(0,pidItem,enumUnit))
			quit:enumUnit=""
			
		set pSUCH(enumUnit) = enumUnit
		}
		set pblnOverride = $$$YES
	}
	quit pblnOverride

]]></Routine>
</Export>