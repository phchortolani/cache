<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="VARSESWWW0121" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
	#include WWWConst
	#include COMSYS
	#include INConst
 
VARSESWWW0121
	quit
	
VarHookOnBeforeDelete()
	new strStatus,LocationCompany,LocationCode
	
	set LocationCompany = $piece(YKEY,YKOMMA,1)
	set LocationCode = $piece(YKEY,YKOMMA,2)
	
	set strStatus = $$$OK
	
	// Local é abastecedor de alguma transferência?
	if ($data(^INTFRs(YM,1,LocationCode)) = 10) {
		set strStatus = $$$Text("MED01229")_". "_$$$Text("MED01228")_"."  ;Impossível excluir. Este local é abastecedor de transferências. ;use text macro;15-Sep-2008
		quit strStatus
	}
	
	// Local é solicitante de alguma transferência?
	if ($data(^INTFRs(YM,2,LocationCode)) = 10) {
		set strStatus = $$$Text("MED01229")_". "_$$$Text("MED01230")_"."  ;Impossível excluir. Este local é solicitante de transferências ;use text macro;15-Sep-2008
		quit strStatus
	}
	
	// Há entradas?
	if ($data(^VARSESEntradas(YM,1,LocationCode)) = 10) {
		set strStatus = $$$Text("MED01229")_". "_$$$Text("MED01231")_"."  ;Impossível excluir. Este local possui Entradas ;use text macro;15-Sep-2008
		quit strStatus
	}
	
	// Há ajustes ou consumos?
	if ($data(^INADJs(YM,10,LocationCode)) = 10) {
		set strStatus = $$$Text("MED01229")_". "_$$$Text("MED01232")_"."  ;Impossível excluir. Este local possui ajustes ou consumos ;use text macro;15-Sep-2008
		quit strStatus
	}
	
	// Há estoques?
	if ($data(^INWEs(YM,4,LocationCode)) = 10) {
		set strStatus = $$$Text("MED01229")_". "_$$$Text("MED01233")_"."  ;Impossível excluir. Este local possui registros de estoque ;use text macro;15-Sep-2008
		quit strStatus
	}
 
	// Se não havia movimento para o local exclui tabelas filhas:
	
	// Exclui prateleira:
	set strStatus = $$DeleteStockLocations(LocationCode)
	quit:('strStatus) strStatus
		
	// Exclui Transporte:
	set strStatus = $$DeleteTransport(LocationCode)
	quit:('strStatus) strStatus
	
	// Exclui INARTLOCPAR - Item X Location Parameter:
	// Andre, 31/01/2008:
	//set strStatus = $$DeleteINARTLOCPAR(LocationCode)
	//quit:('strStatus) strStatus
	
	// Exclui VARSESABASTCC - Locais abastecedores e seus centros de custo:
	set strStatus = $$DeleteVARSESABASTCC(LocationCode,YFELD)
	quit:('strStatus) strStatus
	
	quit strStatus
 
VarHookOnBeforeSave()
	
	new strStatus,LocationCompany,LocationCode
	
	set LocationCompany = $piece(YKEY,YKOMMA,1)
	set LocationCode = $piece(YKEY,YKOMMA,2)
	
	set strStatus = $$$OK
	
	// Cria prateleira:
	set strStatus = $$CreateStockLocations(LocationCode,YFELD)
	quit:('strStatus) strStatus
		
	// Transporte:
	set strStatus = $$CreateTransport(LocationCode)
	quit:('strStatus) strStatus
	
	// INARTLOCPAR - Item X Location Parameter:
	// Andre, 31/01/2008:
	//set strStatus = $$CreateINARTLOCPAR(LocationCode,YFELD)
	//quit:('strStatus) strStatus
	
	// VARSESABASTCC - Locais abastecedores e seus centros de custo:
	set strStatus = $$CreateVARSESABASTCC(LocationCode,YFELD)
	quit:('strStatus) strStatus
	
	quit strStatus
	
CreateTransport(pSiteLocation)
	// Cria transporte, se ainda não existe.
	// Esta rotina é chamada por VarHookOnBeforeSave^VARSESWWW0121 e também
	// por CreateTransport^VARSESDados.
	//
	// Andre, 31/08/2007: Esta rotina foi alterada para refletir as últimas
	// mudanças: o consumo para paciente não será mais feito através da tela
	// INTFR, mas através da INADJ. Já o consumo para setor, que continua 
	// usando a INTFR, não precisará mais de um transporte para o local X,
	// mas de um transporte para o EmTransito e definir a INARTLOCPAR como
	// produto consumível. Não existe mais site-location PACIENTE.
 
	new strStatus
	
	set strStatus = $$$OK
	
	if ($data(^INDRPUMLKWs(YM,1,$$^WWWUMLAU(pSiteLocation,1))) '= 10) {
		set recordData = $$$Text("MED01234")_" "_pSiteLocation_"~~~"_pSiteLocation_"~EmTransito~~"  ;Transporte ;use text macro;15-Sep-2008
		set idNovoTransporte=$$^WWWNEXT("INDRPUMLKW")
		set strStatus = $$Save^COMUtils("INDRPUMLKW",idNovoTransporte,recordData,1)
		quit:('strStatus) strStatus
	}
	quit strStatus
 
DeleteTransport(pSiteLocation)
	// Excluir os transportes do local:
 
	new strStatus
	
	set strStatus = $$$OK
	
	set transporte = ""
	for {
		set transporte = $order(^INDRPUMLKWs(YM,1,pSiteLocation,transporte))
		quit:(transporte = "")
		set strStatus = $$KILL^COMUtils("INDRPUMLKW",transporte)
		quit:('strStatus)
	}
	quit strStatus
 
CreateStockLocations(pSiteLocation,pSiteLocationRecord)
	// Para um site-location, cria as necessárias stock-locations.
	// Esta rotina é chamada por VarHookOnBeforeSave^VARSESWWW0121 e também
	// por CreateStockLocations^VARSESDados.
	// 
	// Andre, 31/08/2007: Esta rotina foi alterada para refletir as últimas
	// mudanças: o consumo para paciente não será mais feito através da tela
	// INTFR, mas através da INADJ. Já o consumo para setor, que continua 
	// usando a INTFR, não precisará mais de um transporte para o local X,
	// mas de um transporte para o EmTransito e definir a INARTLOCPAR como
	// produto consumível. Não existe mais site-location PACIENTE.
	
	new strStatus
	
	set strStatus = $$$OK
	
	// Para todos os site-locations, cria o stock-location X:
	if ('$data(^INLP(YM,pSiteLocation,"X",1))) {
		set newINLPRecord = ""
		set $$$INLPLocationHeight(newINLPRecord) = 0
		set $$$INLPFieldWithMultipleLoads(newINLPRecord) = 1
		set strStatus = $$Save^COMUtils("INLP",pSiteLocation_YKOMMA_"X",newINLPRecord,1)
		quit:('strStatus) strStatus
	}
	
	// Para todos os site-locations, cria o stock-location EmTransito (bloqueado):
	if ('$data(^INLP(YM,pSiteLocation,"EmTransito",1))) {
		set newINLPRecord = ""
		set $$$INLPLocationHeight(newINLPRecord) = 0
		set $$$INLPFieldWithMultipleLoads(newINLPRecord) = 1
		set $$$INLPStockLocationIsLocked(newINLPRecord) = 1
		set strStatus = $$Save^COMUtils("INLP",pSiteLocation_YKOMMA_"EmTransito",newINLPRecord,1)
		quit:('strStatus) strStatus
	}
	
	// Para os site-locations de armazenagem, cria o stock-location A:
	if ($$$WWW0121StorageLocn(pSiteLocationRecord)) {
		if ('$data(^INLP(YM,pSiteLocation,"A",1))) {
			set newINLPRecord = ""
			set $$$INLPLocationHeight(newINLPRecord) = 0
			set $$$INLPFieldWithMultipleLoads(newINLPRecord) = 1
			set strStatus = $$Save^COMUtils("INLP",pSiteLocation_YKOMMA_"A",newINLPRecord,1)
			quit:('strStatus) strStatus
		}
	}
	else {
		// Para os centros-de-custo, apaga o stock-location A:
		if ($data(^INLP(YM,pSiteLocation,"A",1))) {
			set strStatus = $$KILL^COMUtils("INLP",pSiteLocation_YKOMMA_"A")
			quit:('strStatus) strStatus
		}
	}
	
	quit strStatus
	
DeleteStockLocations(pSiteLocation)
	// Excluir os stock-locations do local:
	
	new strStatus
	
	set strStatus = $$$OK
	
	set stockLocation = ""
	for {
		set stockLocation = $order(^INLP(YM,pSiteLocation,stockLocation))
		quit:(stockLocation = "")
		set strStatus = $$KILL^COMUtils("INLP",pSiteLocation_YKOMMA_stockLocation)
		quit:('strStatus)
	}
	quit strStatus
 
CreateINARTLOCPAR(pSiteLocation,pSiteLocationRecord)
	// INARTLOCPAR - Item X Location Parameter:
	// Define para todos os produtos e todos os centros de custo (locais 
	// que não são de armazenagem) uma definição em INARTLOCPAR de que o
	// produto é consumível naquele local.
	// 
	// Andre, 31/08/2007: Esta rotina foi alterada para refletir as últimas
	// mudanças: o consumo para paciente não será mais feito através da tela
	// INTFR, mas através da INADJ. Já o consumo para setor, que continua 
	// usando a INTFR, não precisará mais de um transporte para o local X,
	// mas de um transporte para o EmTransito e definir a INARTLOCPAR como
	// produto consumível. Não existe mais site-location PACIENTE.
 
	new strStatus
	
	set strStatus = $$$OK
	
	if ($$$WWW0121StorageLocn(pSiteLocationRecord)) {
		// Para locais de estoque, excluir suas INARTLOCPAR:
		set item = ""
		for {
			set item = $order(^INART(YM,item))
			quit:(item = "")
			set key = item_YKOMMA_pSiteLocation
			if ($data(^INARTLOCPAR(YM,item,pSiteLocation,1))) {
				set strStatus = $$KILL^COMUtils("INARTLOCPAR",key)
				quit:('strStatus)
			}
		}
		quit:('strStatus) strStatus
	}
	else {
		// Para Centros-de-custo, para cada item, define-o como consumível:
		set item = ""
		for {
			set item = $order(^INART(YM,item))
			quit:(item = "")
			set key = item_YKOMMA_pSiteLocation
			set recordData = ""
			set $$$INARTLOCPARConsumableItem(recordData) = $$$YES
			;w key," = ",recordData,!
			set strStatus = $$Save^COMUtils("INARTLOCPAR",key,recordData,1)
			quit:('strStatus)
		}
		quit:('strStatus) strStatus
	}
 
	quit strStatus
	
DeleteINARTLOCPAR(pSiteLocation)
	// Excluir INARTLOCPAR:
 
	new strStatus
	
	set strStatus = $$$OK
	
	set item = ""
	for {
		set item = $order(^INART(YM,item))
		quit:(item = "")
		if ($data(^INARTLOCPAR(YM,item,pSiteLocation,1))) {
			set strStatus = $$KILL^COMUtils("INARTLOCPAR",item_YKOMMA_pSiteLocation)
			quit:('strStatus)
		}
	}
	quit strStatus
 
CreateVARSESABASTCC(pSiteLocation,pSiteLocationRecord)
	// Cria VARSESABASTCC - Locais abastecedores e seus centros de custo.
	
	new strStatus
	
	set strStatus = $$$OK
	
	if ($$$WWW0121StorageLocn(pSiteLocationRecord)) {
		// Se local é de armazenagem, não precisa copiar para VARSESABASTCC
		quit $$$OK
		/*
		// Se local-de-armazenagem, campo "Locais abastecedores" deve ser nulo:
		if ($$$WWW0121FREE11(pSiteLocationRecord) '= "") {
			set strStatus = "Locais de armazenagem NÃO devem ter locais abastecedores definidos."
			quit strStatus
		}
		*/
	}
	else {
		// Se centro-de-custo:
		// Se, por ventura, este centro-de-custo era anteriormente um local de armazenagem,
		// ele ainda pode estar sendo usado como abastecedor em VARSESABASTCC e, portanto,
		// a modificação deve ser bloqueada:
		if ($data(^VARSESABASTCC(YM,pSiteLocation)) = 10) {
			set centroDeCusto = ""
			set listaCentros = ""
			for {
				set centroDeCusto = $order(^VARSESABASTCC(YM,pSiteLocation,centroDeCusto))
				quit:(centroDeCusto = "")
				set listaCentros = listaCentros_", "_centroDeCusto
			}
			set strStatus = $$$Text($listbuild("MED01236",listaCentros))_"."  ;Este local ainda está definido como abastecedor dos locais %1 ;use text macro;15-Sep-2008
			quit strStatus
		}
		// Algum local abastecedor deve estar definido:
		if ($$$WWW0121FREE11(pSiteLocationRecord) = "") {
			set strStatus = $$$Text("MED01237")_"."  ;Centros-de-custo devem ter locais abastecedores definidos ;use text macro;15-Sep-2008
			quit strStatus
		}
		// Exclui todos os registros de VARSESABASTCC em que o local aparece como Centro de custo:
		set i = ""
		for {
			set i = $order(^VARSESABASTCCs(YM,1,pSiteLocation,i))
			quit:(i = "")
			set strStatus = $$$Kill("VARSESABASTCC",i_","_pSiteLocation)
			quit:($$$ISERR(strStatus))
		}
		quit:($$$ISERR(strStatus)) strStatus
		// Redefine VARSESABASTCC:
		for i=1:1:$length($$$WWW0121FREE11(pSiteLocationRecord),";") {
			set localAbastecedor = $piece($$$WWW0121FREE11(pSiteLocationRecord),";",i)
			set strStatus = $$Save^COMUtils("VARSESABASTCC",localAbastecedor_YKOMMA_pSiteLocation,+$h,1)
			quit:('strStatus)
		}
		quit:($$$ISERR(strStatus)) strStatus
	}
 
	quit strStatus
 
DeleteVARSESABASTCC(pSiteLocation,pSiteLocationRecord)
	// Deleta VARSESABASTCC - Locais abastecedores e seus centros de custo.
	
	new strStatus,i
	
	set strStatus = $$$OK
	
	if ($$$WWW0121StorageLocn(pSiteLocationRecord)) {
		// Se local-de-armazenagem, apaga eventuais registros em VARSESABASTCC:
		set centroDeCusto = ""
		for {
			set centroDeCusto = $order(^VARSESABASTCC(YM,pSiteLocation,centroDeCusto))
			quit:(centroDeCusto = "")
			set strStatus = $$KILL^COMUtils("VARSESABASTCC",pSiteLocation_YKOMMA_centroDeCusto)
			quit:('strStatus)
		}
		quit:('strStatus) strStatus
	}
	else {
		// Se centro-de-custo, exclui VARSESABASTCC:
		// Exclui todos os registros de VARSESABASTCC em que o local aparece como Centro de custo:
		set i = ""
		for {
			set i = $order(^VARSESABASTCCs(YM,1,pSiteLocation,i))
			quit:(i = "")
			set strStatus = $$$Kill("VARSESABASTCC",i_","_pSiteLocation)
			quit:($$$ISERR(strStatus))
		}
		quit:($$$ISERR(strStatus)) strStatus
 
		/*
		for i=1:1:$length($$$WWW0121FREE11(pSiteLocationRecord),";") {
			set localAbastecedor = $piece($$$WWW0121FREE11(pSiteLocationRecord),";",i)
			set strStatus = $$KILL^COMUtils("VARSESABASTCC",localAbastecedor_YKOMMA_pSiteLocation)
			quit:('strStatus)
		}
		quit:('strStatus) strStatus
		*/
	}
 
	quit strStatus
 
GetCodAlpha(pCodLocalTrak)
	// 07-Jan-2014	shobby	CORE-303:	CacheIndex
	// Andre, 10/09/2007.
	// Retorna o código Alphalinc de um código de local TrakCare.
	new codLocalAlpha
	s codLocalAlpha = $order(^WWW0121s(YM,11,$$Index^COMUtilIndex(pCodLocalTrak,"WWW0121"),YM,"")) ;CORE-303
	quit codLocalAlpha

getEstoquePrincipal(pidLocal)
	// Retorna o estoque principal de um local
	quit:(pidLocal = "") ""
	quit $piece($get(^WWW0121(YM,YM,pidLocal,1)),Y,63)
	
getUnidadeSaudeLocal(pidLocal)
	quit:(pidLocal = "") ""
	quit $piece($get(^WWW0121(0,0,pidLocal,1)),"~",64)	
]]></Routine>
</Export>