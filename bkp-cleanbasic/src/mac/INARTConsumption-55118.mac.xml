<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INARTConsumption" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
#include INConst
#include COMConst
#include COMSYSDate
#include WWWConst
#include COMSYS
 
INARTConsumption
 
GetDateRange(pidItem, pintPeriodType, pintPeriodQuantity, pintMonthQuarter, idTransactionHistoryFile="INARTHISTL", pdteHistoryFileStartDate="", pdteTransactionHistoryEndDate)
	;-------------------------------------------------------------------------------
	; Returns a date range based on the parameters given.
	;
	; Params:
	; 	pidItem - the item is used to identify the earliest item activity. The begin date 
	; 		of the range cannot be before this date.
	; 		
	; 	pintPeriodType - the type of period to be used to calculate the begin date. I can have 6 values:
	; 	Day, week, month, year, month-specific or quarter-specific. For example, if you select week, and
	; 	on pintPeriodQuantity you select 4. The begin date will be calculated to be 4 weeks before the
	; 	pdteTransactionHistoryEndDate.
	; 	
	; 	#define EnumINHISTORICALPERIODTYPEDays "1"
	;	#define EnumINHISTORICALPERIODTYPEWeeks "2"
	;   #define EnumINHISTORICALPERIODTYPEMonths "3"
	;   #define EnumINHISTORICALPERIODTYPEYears "4"
    ;   #define EnumINHISTORICALPERIODTYPEMonthSpecific "5"
	;   #define EnumINHISTORICALPERIODTYPEQuarterSpecific "6"
	; 	 	
	; 	pintPeriodQuantity - this is the number of Period Type to look back.
	; 	
	; 	pintMonthQuarter - Used only if Period Type equals Month-specific or Quarter-specific.
	; 		This field defines the specific month or specific quarter to be used.
	;
	;	idTransactionHistoryFile - The history file to be used.
	;	
	;	pdteHistoryFileStartDate - When the history file started acumulating transactions.
	;	
	;	pdteTransactionHistoryEndDate - the date to start looking back based on periodType and
	;		periodQuantity.
	;
	; Returns:
	; 	the date range. The return is a string with 2 dates with a '~' in between.
	;
	; History:
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
			 
	new dteCalculatedBeginDate, strCalculatedRange, dteEarliestItemTransaction, dteStartDate, dteEndDate
 
	//if the Transaction History End Date is empty of after today, set it to today.
    if ($get(pdteTransactionHistoryEndDate) = "") || ($get(pdteTransactionHistoryEndDate) > +$horolog) {
 	
 		set pdteTransactionHistoryEndDate = +$horolog
    }
 
 	// If period type is not month-specific or quarter-specific 
 	if '((pintPeriodType = $$$EnumINHISTORICALPERIODTYPEMonthSpecific) || (pintPeriodType = $$$EnumINHISTORICALPERIODTYPEQuarterSpecific)) {
 	    
	
	    set dteEndDate = pdteTransactionHistoryEndDate
	 	set dteCalculatedBeginDate = $case(pintPeriodType,
 					$$$EnumINHISTORICALPERIODTYPEDays:$$GetBeginDateByDay(pintPeriodQuantity, pdteTransactionHistoryEndDate),
 					$$$EnumINHISTORICALPERIODTYPEWeeks:$$GetBeginDateByWeek(pintPeriodQuantity, pdteTransactionHistoryEndDate),
 					$$$EnumINHISTORICALPERIODTYPEMonths:$$GetBeginDateByMonth(pintPeriodQuantity, pdteTransactionHistoryEndDate),
 					$$$EnumINHISTORICALPERIODTYPEYears:$$GetBeginDateByYear(pintPeriodQuantity, pdteTransactionHistoryEndDate),
 					:"")
 	} else { 					
 
		set strCalculatedRange = $case(pintPeriodType,
					$$$EnumINHISTORICALPERIODTYPEMonthSpecific:$$GetDateRangeByMonthSpecific(pintMonthQuarter, pintPeriodQuantity, pdteTransactionHistoryEndDate),
					$$$EnumINHISTORICALPERIODTYPEQuarterSpecific:$$GetDateRangeByQuarterSpecific(pintPeriodQuantity, pintPeriodQuantity, pdteTransactionHistoryEndDate))
					
		set dteCalculatedBeginDate = $piece(strCalculatedRange, Y, 1)
		set dteEndDate = $piece(strCalculatedRange, Y, 2)
 	}
 
 	// Find the Earliest Item Activity.
 	set dteEarliestItemTransaction = $order(^INARTHISTLs(YM, 6, pidItem, ""))
 	
 	// Getting the greater of the dates.
 	set dteStartDate = dteCalculatedBeginDate
 	if pdteHistoryFileStartDate > dteStartDate {
	 	
	 	set dteStartDate = dteCalculatedBeginDate
 	}
 	if dteEarliestItemTransaction > dteStartDate {
	 	
	 	set dteStartDate = dteEarliestItemTransaction
 	}
 
	quit +dteStartDate_Y_+dteEndDate
		
GetBeginDateByDay(pintQuantity, pdteDate)
	;-------------------------------------------------------------------------------
	; Returns the begin date so that there will be pintQuantity days from it to pdteDate.
	; For example, pdteDate is 10-Apr-2006 and pintQuantity is 5, then the result will
	; be 6-Apr-2006. 
	;
	; Params:
	; 	pintQuantity - the number of days to go back.
	; 	pdteDate - the starting point to go back.
	;
	; Returns:
	; 	the begin date.
	;
	; History:
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
 
	// We need to add 1 because the end date is inclusive.
	quit pdteDate - pintQuantity + 1
	
GetBeginDateByWeek(pintQuantity, pdteDate)
	;-------------------------------------------------------------------------------
	; Returns the begin date so that there will be pintQuantity weeks from it to pdteDate.
	;
	; Params:
	; 	pintQuantity - the number of weeks to go back.
	; 	pdteDate - the starting point to go back.
	;
	; Returns:
	; 	the begin date.
	;
	; History:
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
 
	// We need to add 1 because the end date is inclusive.
	quit pdteDate - (pintQuantity * 7) + 1
 
GetBeginDateByMonth(pintQuantity, pdteDate)
	;-------------------------------------------------------------------------------
	; Returns the begin date so that there will be pintQuantity months from it to pdteDate.
	;
	; Params:
	; 	pintQuantity - the number of months to go back.
	; 	pdteDate - the starting point to go back.
	;
	; Returns:
	; 	the begin date.
	;
	; History:
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
 
	new intDays, dteMonth, idx
	
	set intDays = 0
	set dteMonth = pdteDate
 
	// For every month, get the number of days of it.
	for idx = 1 : 1 : pintQuantity {
		
		set intDays = intDays + $$GetDaysInMonth^COMUtilDate(dteMonth)
		set dteMonth = $$$DateFirstDayOfMonth(dteMonth) - 1
	}
 
	// We need to add 1 because the end date is inclusive.
	quit pdteDate - intDays + 1
	
GetBeginDateByYear(pintQuantity, pdteDate)
	;-------------------------------------------------------------------------------
	; Returns the begin date so that there will be pintQuantity years from it to pdteDate.
	;
	; Params:
	; 	pintQuantity - the number of years to go back.
	; 	pdteDate - the starting point to go back.
	;
	; Returns:
	; 	the begin date.
	;
	; History:
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
 
	new dteYear, intDays, idx
	
	set intDays = 0
	set dteYear = pdteDate
 
	// For every year, get the number of days of it.
	for idx = 1 : 1 : pintQuantity {
		
		if $$IsLeapYear^COMUtilDate($$$DateYear(dteYear)) {
			
			set intDays = intDays + 366
		} else {
	
			set intDays = intDays + 365
		}
		set dteYear = $$$DateFirstDayOfYear(dteYear) - 1
	}
 
	// We need to add 1 because the end date is inclusive.
	quit pdteDate - intDays + 1
 
GetDateRangeByMonthSpecific(pintMonth, pintQuantity, pdteDate)
	;-------------------------------------------------------------------------------
	; Returns the date range for a given month.
	;
	; Params:
	; 	pintMonth - the month to go back. The value is based on the application parameter
	; 		COMMONTHSOFYEAR.
	; 	pintQuantity - How many times you want to go back for that month. If today is
	; 		may 2007, and you want the date range for March and the quantity is 5, then 
	; 		the range will be for march of 2002.
	; 	pdteDate - the starting point to go back.
	;
	; Returns:
	; 	the date range. The return is a string with 2 dates with a '~' in between.
	;
	; History:
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
 
	new dteBeginDate, dteEndDate, intYear, intDays
	set intYear = $$$DateYear(+pdteDate) - pintQuantity + 1
 
 	// If the month is equal or after today's month, we should get last year month date. 
	if pintMonth >= $$$DateMonth(+$horolog) {
		
		set intYear = intYear - 1
	}
	
	do ConvertDate^COMUtilDate(pintMonth_"/1/"_intYear,,.dteBeginDate)
	set intDays = $$GetDaysInMonth^COMUtilDate(dteBeginDate)
	do ConvertDate^COMUtilDate(pintMonth_"/"_intDays_"/"_intYear,,.dteEndDate)
 
	quit dteBeginDate_Y_dteEndDate
 
GetDateRangeByQuarterSpecific(pintQuarter, pintQuantity, pdteDate)
	;-------------------------------------------------------------------------------
	; Returns the date range for a given quarter of the year
	;
	; Params:
	; 	pintQuarter - the quarter to go back. The value is based on the application parameter
	; 		COMQUARTER.
	; 	pintQuantity - How many times you want to go back for that quarter.
	; 	pdteDate - the starting point to go back.
	;
	; Returns:
	; 	the date range. The return is a string with 2 dates with a '~' in between.
	;
	; History:
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
 
	new dteBeginDate, dteEndDate, intYear
 
	set intYear = $$$DateYear(+pdteDate) - pintQuantity + 1
	
	if pintQuarter = $$$EnumCOMQUARTER1stQuarter {
		
		do ConvertDate^COMUtilDate("1/1/"_intYear,,.dteBeginDate)
		do ConvertDate^COMUtilDate("3/30/"_intYear,,.dteEndDate)	
		
		// If the quarter didn't finish yet, we should get last year quarter.
		if ($$$DateMonth(+pdteDate) >= $$$DateMonth(dteBeginDate)) && ($$$DateMonth(+pdteDate) <= $$$DateMonth(dteEndDate)) {
			
			set intYear = intYear - 1
			do ConvertDate^COMUtilDate("1/1/"_intYear,,.dteBeginDate)
			do ConvertDate^COMUtilDate("3/30/"_intYear,,.dteEndDate)
		}
		
	} elseif pintQuarter = $$$EnumCOMQUARTER2ndQuarter {
		
		do ConvertDate^COMUtilDate("4/1/"_intYear,,.dteBeginDate)
		do ConvertDate^COMUtilDate("6/30/"_intYear,,.dteEndDate)		
		
		// If the quarter didn't finish yet, we should get last year quarter.
		if ($$$DateMonth(+pdteDate) >= $$$DateMonth(dteBeginDate)) && ($$$DateMonth(+pdteDate) <= $$$DateMonth(dteEndDate)) {
			
			set intYear = intYear - 1
			do ConvertDate^COMUtilDate("4/1/"_intYear,,.dteBeginDate)
			do ConvertDate^COMUtilDate("6/30/"_intYear,,.dteEndDate)
		}
		
	} elseif pintQuarter = $$$EnumCOMQUARTER3rdQuarter {
		
		do ConvertDate^COMUtilDate("7/1/"_intYear,,.dteBeginDate)
		do ConvertDate^COMUtilDate("9/30/"_intYear,,.dteEndDate)		
		
		// If the quarter didn't finish yet, we should get last year quarter.
		if ($$$DateMonth(+pdteDate) >= $$$DateMonth(dteBeginDate)) && ($$$DateMonth(+pdteDate) <= $$$DateMonth(dteEndDate)) {
			
			set intYear = intYear - 1
			do ConvertDate^COMUtilDate("7/1/"_intYear,,.dteBeginDate)
			do ConvertDate^COMUtilDate("9/30/"_intYear,,.dteEndDate)
		}
		
	} elseif pintQuarter = $$$EnumCOMQUARTER4thQuarter {
		
		do ConvertDate^COMUtilDate("10/1/"_intYear,,.dteBeginDate)
		do ConvertDate^COMUtilDate("12/31/"_intYear,,.dteEndDate)		
		
		// If the quarter didn't finish yet, we should get last year quarter.
		if ($$$DateMonth(+pdteDate) >= $$$DateMonth(dteBeginDate)) && ($$$DateMonth(+pdteDate) <= $$$DateMonth(dteEndDate)) {
			
			set intYear = intYear - 1
			do ConvertDate^COMUtilDate("10/1/"_intYear,,.dteBeginDate)
			do ConvertDate^COMUtilDate("12/31/"_intYear,,.dteEndDate)
		}
	}
 
	quit dteBeginDate_Y_dteEndDate
 
GetNumberCalendarDays(pdteBeginDate, pdteEndDate)
	;-------------------------------------------------------------------------------
	; Returns the number of days between 2 dates including both dates.
	;
	; Params:
	; 	pdteBeginDate - the begin date.
	; 	pdteEndDate - the end date.
	;
	; Returns:
	; 	the number of days between 2 dates
	;
	; History:
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
 
	quit pdteEndDate - pdteBeginDate + 1
 
GetNumberWorkingDays(pidCalendar, pdteBeginDate, pdteEndDate)
	;-------------------------------------------------------------------------------
	; Returns the number of working days between 2 dates including both dates. It only counts
	; the definition of work days by the calendar, and it doesn't count holidays.
	;
	; Params:
	; 	pidCalendar - the calendar to work with.
	; 	pdteBeginDate - the begin date.
	; 	pdteEndDate - the end date.
	;
	; Returns:
	; 	the number of working days between 2 dates
	;
	; History:
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
 
	new intWorkDays, idx
	
	set intWorkDays = 0
	
	for idx = +pdteBeginDate : 1 : +pdteEndDate {
		
		set:$$IsWorkingDay(pidCalendar,idx) intWorkDays=intWorkDays+1
	}
 
	quit intWorkDays
	
IsWorkingDay(pidCalendar, pdteDate)
	;-------------------------------------------------------------------------------
	; Check if a day for a calendar is a working day.
	;
	; Params:
	; 	pidCalendar - the calendar to check the day.
	; 	pdteDate - the date to be checked.
	;
	; Returns:
	; 	true if pdteDate is a working day for the given calendar. False otherwise.
	;
	; History:
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
 
	new objCalendar, strWorkingDays, blnWorkingDay, idHoliday, objCalendarHoliday
	
	set blnWorkingDay = $$$NO
	set objCalendar = $get(^WWWKALENDER(0, pidCalendar, 1))
	set strWorkingDays = $$$WWWKALENDERWorkdays(objCalendar)
		
	// Check if today is a working day.
	if $find(strWorkingDays, $$$DayOfWeek(+pdteDate)) {
		
		set blnWorkingDay = $$$YES
	}
	
	// Check if it's a holiday.
	if blnWorkingDay {
		$$$Order3(^WWWCAL1,0,pidCalendar,idHoliday)
		
		set objCalendarHoliday = $get(^WWWCAL1(0, pidCalendar, idHoliday, 1))
		
		// Check is dates are the same.
		if (+pdteDate) = (+idHoliday) {
		
			set blnWorkingDay = $$$NO
			quit
			
		} elseif $$$WWWCAL1HolidayforManyYears(objCalendarHoliday) {
			
			// If the date is not equal, but the holiday is for every year, we should check month and day separetaly.
			if ($$$DateMonth(pdteDate) = $$$DateMonth(idHoliday)) && 
				($$$DateDay(pdteDate) = $$$DateDay(idHoliday)) {
					
				set blnWorkingDay = $$$NO
				quit
			}
		}
		$$$End
	}
	
	quit blnWorkingDay
	
GetConsumption(dteBeginDate, dteEndDate, pidItem)
	;-------------------------------------------------------------------------------
	; Get the consumption for an item on a date range. These specifically are Issues 
	; to Customer orders, Manufacturing orders, Rework orders (available in a 
	; future release but currently non-existent) Receipts and Material Movements into 
	; the consumption (delete) location as specified in the General Parameters, and 
	; Inventory Adjustments.
	;
	; Params:
	; 	dteBeginDate - the begin date.
	; 	dteEndDate - the end date.
	; 	pidItem - the item to check the consumption.
	;
	; Returns:
	; 	the consumption for an item on a date range
	;
	; History:
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
 
	new idLocation, idDate, objItemHistory, intConsumption, idSequence
	
	set intConsumption = 0
 
	$$$Order3(^INARTHISTL,YM,pidItem,idLocation)
	
		$$$Order4(^INARTHISTL,YM,pidItem,idLocation,idDate)
		
			// The date must be within the date range specified.
			if (idDate >= dteBeginDate) && (idDate <= dteEndDate) {
		
				$$$Order5(^INARTHISTL,YM,pidItem,idLocation,idDate,idSequence)
	
					set objItemHistory = $get(^INARTHISTL(YM, pidItem, idLocation, idDate, idSequence, 1))
					
					if $$IsTransactionAConsumption(objItemHistory) {
						set intConsumption = intConsumption + $$$INARTHISTLQuantity(objItemHistory)
					}
					
				$$$End
			}
		
		$$$End
	
	$$$End	
 
	quit intConsumption
 
IsTransactionAConsumption(pobjItemHistory)
	;-------------------------------------------------------------------------------
	; Check if an item history can be considered a consumption.
	;
	; Params:
	; 	pobjItemHistory - the item history record.
	;
	; Returns:
	; 	true if the item history can be considered a consumption. False otherwise.
	;
	; History:
	; 04-Jun-2007	RPW		SR15526: Commenting for ease of read.
	; 31-May-2007	Frank		SR15526: Refactoring, moving the check for delete location to 
	; 									 new routine.
	; 24-May-2007	Frank		SRBR14442: Created
	;-------------------------------------------------------------------------------
 
	new blnIsConsumption
	
	set blnIsConsumption = $$$NO
 
	// If the item has been moved to a Delete Stock Location.
	if $$IsDeleteLocation(pobjItemHistory) {
		
		set blnIsConsumption = $$$YES
 
	// Sale, Production and Adjustment.
	} elseif ($$$INARTHISTLSalesDirection(pobjItemHistory) = 0) &&
							// Sale												// Production									// Adjustment
		(($$$INARTHISTLSalesType(pobjItemHistory) = 0) || ($$$INARTHISTLSalesType(pobjItemHistory) = 2) || ($$$INARTHISTLSalesType(pobjItemHistory) = 4))  {
		
		set blnIsConsumption = $$$YES
	}
 
	quit blnIsConsumption
 
IsDeleteLocation(pobjItemHistory)
	;-------------------------------------------------------------------------------
	; Check if an item has been moved to a delete location.
	;
	; Params:
	; 	pobjItemHistory - the item history record.
	;
	; Returns:
	; 	true if the item history has been moved to a delete location. False otherwise.
	;
	; History:
	; 31-May-2007	Frank		SR15526: Created 
	;-------------------------------------------------------------------------------
 
	new objGeneralParameter, blnIsDeleteLocation, strDeleteLocation
	set objGeneralParameter = $get(^INVORG(YM, YM, 1))
	set blnIsDeleteLocation = $$$NO
	set strDeleteLocation = $$$INVORGDeleteStockLocation(objGeneralParameter)
	
	// If the delete location is empty, set it to the default value 'X'.
	if strDeleteLocation = "" {
		set strDeleteLocation = "X"
	}
 
	if ($$$INARTHISTLSalesDirection(pobjItemHistory) = 1) && 
	   ($$$INARTHISTLStockLocation(pobjItemHistory) = strDeleteLocation) {
		
		set blnIsDeleteLocation = $$$YES
	}
 
	quit blnIsDeleteLocation
	
GetLocationConsumption(pidItem,pidLocation)
	;-------------------------------------------------------------------------------
	; Wrapper for CMML			
	; History :
	; 30-Oct-2013	SCR		SESDF-681:	Created
	;-------------------------------------------------------------------------------
	new fltConsumption
	
	set fltConsumption	= ""
	
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(0,YM,1)))) {
		set fltConsumption	= $$GetCMM^VARReposicao(pidLocation,pidItem)
	}
	quit fltConsumption

GetLocationConsumptionAdjusted(pidItem,pidLocation)
	;-------------------------------------------------------------------------------
	; Wrapper for CMMLi			
	; History :
	; 30-Oct-2013	SCR		SESDF-681:	Created
	;-------------------------------------------------------------------------------
	new fltConsumption
	
	set fltConsumption	= ""
	
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(0,YM,1)))) {
		set fltConsumption	= $$getCMMLi^VARReposicao(pidLocation,pidItem)
	}
	quit fltConsumption



]]></Routine>
</Export>