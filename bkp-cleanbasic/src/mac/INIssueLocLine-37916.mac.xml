<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="22" zv="CACHE" ts="2001-01-01 00:00:00">
<Routine name="INIssueLocLine" type="MAC" languagemode="0" timestamp="58440,0"><![CDATA[
INIssueLocLine

	; Copied from INDispenseToPatientLine
	
#include COMSYS
#include INConst
#include %occInclude
#include COMGridEdit31
	
#define DELIM	$char(31)
#define RecordNotSelected ""
#define FORMFldINIssueLineUnit					4
#define FORMFldINIssueLineLotNo                15
#define FORMFldINIssueLineInventoryLocn        18
#define FORMFldINIssueLineInventoryNetwork     16
	
#define LogR(%1,%2) 	;
#define LogRx(%1)		;
#define LogRm(%1)		;
#;define LogR(%1,%2) 	$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))= %1_"^INIssueLocLine("_%2_") : "_$zh $$$JournalOn
#;define LogRx(%1)		$$$JournalOff s ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
#;define LogRm(%1)		$$$JournalOff m ^zzLogR($g(YBED,"UNK"),$i(^zzLogR))=%1 $$$JournalOn
	
OnBlur(pYM,pYFORM,pYKEY,&pYFELD,pGridRow,pGridCol,pYINHALT)
	;-------------------------------------------------------------------------------
	; On Blur from Item, Qty and Unit fields : Calculate unit and costs
	;
	; Params:	
	;
	; ByRefs:	pobjLine	- current line object
	;			QOH 		- Value of QuantityOnHand Manual Field   ; see FIXME
	;			YRED		- Error colour
	;			YTOOLTIP
	;			
	; Returns:
	;
	; History:
	; 15-Dec-2014	SCR		ALPHAUP-403: Use Data Fields for SOH
	; 04-Feb-2011	GRF		SR17579: Rename CalculateBaseQuantity
	; 19-Aug-2010	PPP		SR17461: Added alert OnBlur^INIssueLocLine
	; 08-Jun-2010	GRF		SR17090: If item is changed, recalculate Issues Quantity
	; 25-Feb-2009	PPP		SR17185: Updated the Unit Cost field
	; 14-Jan-2010	shobby	SR15753: Clean up redundant code.
	; 01-Dec-2009	DWR		SR17062: No formating is done on ToStorgae field and 
	; 							is set to read only on form. so this call not required.
	; 							without formatting, it is clearing the form settings.
	; 04-Nov-2009	DWR		SR16983: Set Unit fiels via INART record
	; 01-May-2009	PPP		SR16199: Updated 'Issue To' for Department Issues
	; 02-Mar-2009	DavidR	SR16379: commented out add reference for 
	; 							$$$FldINIssueLineQtyRequired, it has its own onBlur	
	; 							routine
	; 20-Feb-2009	DavidR	SR16303: modified the onblur of Item to trigger the on
	; 							before format of manual fields Physical Inventory
	; 							(network and location) this is where teh values
	; 							are now set for the fields.
	; 18-Feb-2009	GRF		SR16303: changed tag name to match standards
	; 27-Jan-2009	DavidR	SR16303: Copied
	;-------------------------------------------------------------------------------
	new fltQuantity,fltReq,idClassField,idItem,idToLocn,idUnit
	new intCol,intRow,objHeader,objItem
 	new fltQty
 	
	$$$LogR("OnBlur",pYKEY_"<"_$get(pGridRow)_"<"_$get(pGridCol)_"<"_$get(pYINHALT)_"<")
	
	set objHeader  = $$$GRIDYFELDContainer
 	
	$$$GRIDSplitKey(pYKEY,intRow,intCol)
 
	; FIXME : Check where QOH is used and pass it properly! <GRF>
	//set QOH     = $$GetQtyByStorage($$$INMOVLineItem(pYFELD),$$$INMOVLocation(objHeader),$$$INMOVLineFromStorage(pYFELD))
	set idClassField = $$$GetClassField(pYFORM,pGridCol)
	$$$LogRx("OB:"_idClassField_"<")
			
	; Item
	;---------------------------------------
	if idClassField = $$$FldINIssueLineItem {
		$$$LogRx("OB:Item")
		
		set idItem = $$$INIssueLineItem(pYFELD)
		if idItem '= "" {
			if (((+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1))))
					&& ($data(^VARAutorizacaoProduto(YM,$$$INIssueFromLocn(objHeader),idItem,1))))
				|| '(+$$$WWWClientParamCoreChangesSESDF($get(^WWWClientParam(YM,YM,1))))) {

	 			set fltQty = $$GetSOHLocal(idItem,$$$INIssueFromLocn(objHeader))  //SR17461 vvv
 
	 			if fltQty {
					set $$$INIssueLineUnit(pYFELD) =  $$$INARTUnitofMeasure($get(^INART(0,idItem,1)))
					//Department Issue
					if $$$INIssueType(objHeader) = 1 {
						set idToLocn = $$$INIssueToLocn(objHeader)
						if idToLocn '="" {
				 			set $$$INIssueLineToStorage(pYFELD) = $$GetStorage^INIssueAuto(idItem,idToLocn)
						}
					}
					//SR17185
		 			set $$$INIssueLineUnitCost(pYFELD) = $$GetCost^INItemCost(idItem,$$$INIssueFromLocn(objHeader))*$$GetUOMConversion^INUOMConversion(idItem,$$$INIssueLineUnit(pYFELD)) 
			
					//SR17090
					set idUnit      = $$$INIssueLineUnit(pYFELD)
					set fltReq		= $$$INIssueLineQtyRequired(pYFELD)
					set fltQuantity = $$CalcInventoryQty^INUOMConversion(idItem,idUnit,fltReq) ; SR17579
					if fltQuantity {
						set $$$INIssueLineQtyIssued(pYFELD) = fltQuantity   ; [IU]
					}
					set $$$INIssueLineLocationInventory(pYFELD)	= $$GetSOHLocal(idItem,YLOCATION)
					set $$$INIssueLineNetworkInventory(pYFELD)	= $$GetSOHCompany(idItem)

	 			} else {
		 			if ($get(^INART(YM,idItem,1)) = ""){
			 			$$$Alert($listbuild("MED01119",idItem))
				      	set $$$INIssueLineItem(pYFELD) = ""
		 			} else {
				      	$$$Alert($listbuild("IN01040",idItem,$$$INIssueFromLocn(objHeader)))
				      	set $$$INIssueLineItem(pYFELD) = ""
	 				} ; "Stock Unavailable for Item %1 at Location %2"
	 			}
 			
	  			if ('$data(^INDRPITEM(YM,$$$INIssueFromLocn(objHeader),idItem,1))){
	 				$$$Alert($listbuild("MED01216",idItem,$$$INIssueFromLocn(objHeader)))
			      	set $$$INIssueLineItem(pYFELD) = ""
	 			}
			}
		}
		

	; Unit
	;---------------------------------------
	} elseif idClassField = $$$FldINIssueLineUnit {
		
		$$$LogRx("OB:Unit")
		
		set idItem     	= $$$INIssueLineItem(pYFELD)
		set idUnit 		= pYINHALT
		set fltReq		= $$$INIssueLineQtyRequired(pYFELD)
		set fltQuantity = $$CalcInventoryQty^INUOMConversion(idItem,idUnit,fltReq) ; SR17579
		if fltQuantity {
			set $$$INIssueLineQtyIssued(pYFELD) = fltQuantity   ; [IU]
		}

		//SR17185
 		set $$$INIssueLineUnitCost(pYFELD) = $$GetCost^INItemCost(idItem,$$$INIssueFromLocn(objHeader))*$$GetUOMConversion^INUOMConversion(idItem,idUnit) 
	}
		
	; Redraw DynTable
	do ShowItems^INIssueLocTable(1,"INIssueLoc"_$$$DELIM_"INIssueLocLine"_$$$DELIM_"dStockBundle"_$$$DELIM_pGridRow)
	quit
	
	
OnBlurQtyRequired(pintRow,pintCol,strValue,&pobjLine) 
	;-------------------------------------------------------------------------------
	;			
	; Called By :
	;	OnBlur:event INLine:QtyRequired FORM
	; 
	; Inputs : 
	;	pintRow		Grid Row Id
	;	pintCol		Grid Col Id
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 04-Feb-2011	GRF		SR17579: Rename CalculateBaseQuantity
	; 21-Oct-2010	GRF		SR17577: remove old commented code
	; 14-Jan-2010	shobby	SR15753: Cleanup of redundant code.
	; 01-May-2009	PPP		SR16199: Updated 'Issue To' for Department Issues
	; 27-Jan-2009	DavidR	SR16303: Created
	;-------------------------------------------------------------------------------
	new fltQuantity,idBundle,idItem,idLine,idStore,idUnit
	
	$$$LogR("OnBlurQtyRequired",$get(pintRow)_"<"_$get(pintCol)_"<"_$get(strValue)_"<")
	
	set idItem     	= $$$INIssueLineItem(pobjLine)
	set idStore    	= $$$INIssueLineFromStorage(pobjLine)
	set idBundle   	= $$$INIssueLineBundle(pobjLine)
	set idUnit 		= $$$INIssueLineUnit(pobjLine)
	set fltQuantity = $$CalcInventoryQty^INUOMConversion(idItem,idUnit,strValue) ; SR17579
	
	set $$$INIssueLineQtyIssued(pobjLine) = fltQuantity   ; [IU] FIXME : Unit-based dp?
	quit
	
	
OnBeforeDisplayCombo(pstrKeys,pobjIss,pintCol,&pSUCH)
	;-------------------------------------------------------------------------------
	; Populates the Unit with the UOM as defined in INARTPACK only, excludes
	; units that the item does not come in.
	; 
	; set pSUCH as the items to be used when you override the list (set via blnOverride)
	;
	; Called By: COMGridEdit executable
	; 
	; Inputs:
	;	pstrKeys		YKEY
	;	pobjSummary		YFELD
	; 
	; Returns: $$$YES or $$$NO (override the data) 
	;
	; History:
	; 15-Jul-2011	GRF		SR17669: Call common code
	; 03-Nov-2009	DavidR	SR16983: Created
	;-------------------------------------------------------------------------------
	new blnOverride,enumLineType,enumUnit,idClassField,idItem

	set blnOverride = $$$NO
	
	; F7 - Unit
	;---------------------------------------
	if pintCol = $$$FORMFldINIssueLineUnit {      ; SR17669 vvv
		set blnOverride = $$LoadCombo^INARTPACK($$$INIssueLineItem(pobjIss),blnOverride,.pSUCH)
	}
	quit blnOverride
	/*
	if pintCol = $$$FORMFldINIssueLineUnit  {
		kill pSUCH
		set pSUCH  = "SUCH"
		set idItem = $$$INIssueLineItem(pobjIss)
		if idItem '= "" {
			set enumUnit = ""
			for {
				set enumUnit = $order(^INARTPACK(0,idItem,enumUnit))
				quit:enumUnit=""
				
				set pSUCH(enumUnit) = enumUnit
			}
			set blnOverride = $$$YES
		}
	}
	quit blnOverride
	*/                                           ; SR17669 ^^^
	
	
GetSOHLocal(pItem,pLocation)
	;-------------------------------------------------------------------------------
	;
	; History:
	; 18-Feb-2009	GRF		SR16303: changed tag name to match standards
	; 19-Jan-2009	DavidR	SR16303: Based on VARSESCONSUMOPACIENTELinha
	;-------------------------------------------------------------------------------
	quit:($get(pItem) = "") $$$RecordNotSelected
	quit $$^INARTMENGE(pItem,,pLocation,,1,0,1)
	
	
GetSOHCompany(ItemId)
	;-------------------------------------------------------------------------------
	;
	; History:
	; 18-Feb-2009	GRF		SR16303: changed tag name to match standards
	; 19-Jan-2009	DavidR	SR16303: Based on VARSESCONSUMOPACIENTELinha
	;-------------------------------------------------------------------------------
	quit:($get(ItemId) = "") $$$RecordNotSelected
	quit $$^INARTMENGE(ItemId,,,,1,0)
	
	
OnAfterPrimaryKey(pYM,pYFORM,pYKEY,pYFELD)  
	;-------------------------------------------------------------------------------
	; Description : Setup QOH
	;			
	; Called By :
	;		
	; Inputs : 
	;
	; ByRef :
	;	QOH for form use
	;	
	; Returns : nothing
	;
	; History :
	; 19-Jan-2009	DavidR	SR16303: Copied and modified
	; 01-Oct-2008	Luke	SR15887: Some code cleaning newing of variables
	; 24-Jan-2008	HQN		SR15625 Changed class signature dINIssueLine to dUIssueLine
	; 05-Nov-2007	HQN		Created
	;-------------------------------------------------------------------------------
	new idIssue,idLineNo,objIssueLine
	new QOH            ; FIXME : If we are using QOH to initialise Manual F9, why new?
	                   ;         Not initialising manual field BOH to variable QOH <GRF>
	
	set idIssue  = $$$KEY1(pYKEY)
	set idLineNo = $$$KEY2(pYKEY)
	
	set objIssueLine = ##class(alISS.dUIssueLine).%OpenId("0||"_idIssue_"||"_idLineNo)
	set QOH = 0
	if $IsObject(objIssueLine) && ($$$INIssueLineFromStorage(pYFELD) '= $$$NULLOREF) {
		set QOH = $$GetQtyByStorage($$$INIssueLineItem(pYFELD),objIssueLine.FromStorage.LocationName,$$$INIssueLineFromStorage(pYFELD))
	}
	quit
	
	
GetQtyByStorage(pidItem,pidLocn,pidStore)    
	;-------------------------------------------------------------------------------
	; Description :
	;			
	; Called By : OnAfterPrimaryKey
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns : Quantity on Hand in storage
	;
	; History :
	; 20-Jan-2009	DavidR	SR16303: Copied from INIssueLine
	;-------------------------------------------------------------------------------
	new fltQOH,objQOH
	
	quit:(pidStore = $$$NULLOREF) 0
	
	set fltQOH = 0
	set objQOH = ##class(alSOH.dSOH).%OpenId(pidItem_"||"_pidLocn_"||"_pidStore)
	if objQOH '= $$$NULLOREF {
		set fltQOH = objQOH.QtyOnHand
	}
	quit fltQOH
	
	
OnBeforeSave(pidKey,&pobjLine,pblnQtyCheck=$$$YES)
	;-------------------------------------------------------------------------------
	; OnBeforeSave for the INIssueLine record
	; 
	; FIXME : Check following details which may relate only to INMOVLine <GRF>
	; 
	; Called By : OnBeforeSave for *FORM* INIssueLocLine - Should *** NOT *** be set as
	;             a class hook call although it may be reasonable to have similar
	;             testing based on pobjLine and the current persistent INIssue record
	;
	; Params:	
	;
	; ByRefs:	pobjLine	- current line object
	;
	; Returns:  sc (should be strStatus)
	;           YRETVAL ? implicit - how used?
	;
	; History:
	; 09-May-2011	GRF		SR17748: Check for blank From Storage
	; 12-May-2009	PPP		SR16199: If Department Issue, the To Location has to be defined.
	; 27-Jan-2009	DavidR	SR16303: Copied and modified from INMOVLine
	;-------------------------------------------------------------------------------
	new fltQtyReqd,fltQtySum,fltQtyIss,fltQtyPlanned
	new idBundle,idBundleStk,idIssue,idIssueLine,idItem,idLine,idLocn,idStore
	new objBundleStock,objGridLine,objIssue,objItem,objItemPolicy
	new sc,strStatus
	
	set strStatus   = $$$OK
	set idIssue     = $$$KEY1(pidKey)
	set idIssueLine = $$$KEY2(pidKey)
	
	set idItem     = $$$INIssueLineItem(pobjLine)
	set idStore    = $$$INIssueLineFromStorage(pobjLine)
	set idBundle   = $$$INIssueLineBundle(pobjLine)
	set fltQtyReqd = $$$INIssueLineQtyRequired(pobjLine)
	set fltQtyIss  = $$$INIssueLineQtyIssued(pobjLine)
	
	set $$$INIssueLineReference(pobjLine) = idIssue
	
	if idIssue="" {
		set strStatus = $$$MakeStatus("IN00754")                     ; "Missing Key Value"
		set YRETVAL   = strStatus
	
	} elseif idStore="" {     ; SR17748
		set strStatus = $$$MakeStatus("IN01298")                     ; "From Storage has not been specified"
		set YRETVAL   = strStatus
	}
	
	if $$$ISOK(strStatus) {  
		set objItem = ##class(alINV.dItem).%OpenId(idItem,0)
		
		if objItem '= $$$NULLOREF {
			set objItemPolicy = objItem.ItemPolicy
			
			if objItemPolicy = $$$NULLOREF {  ; "Can not access Item Policy for item : %1" 
				set strStatus = $$$MakeStatus("alINV0100",idItem)
				set YRETVAL   = strStatus
			}
			do objItem.%Close()
		}
	}                    
	
	if $$$ISOK(strStatus) {
		set idLocn      = $$$INIssueFromLocn($get(^INIssue(0,idIssue,1)))
		set idBundleStk = idItem_"||"_idLocn_"||"_idStore_"||"_idBundle
		
		set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(idBundleStk,,.sc)
		if $$$ISERR(sc) {
			set strStatus = $$ISStatusToDLStatus^COMUtilError(sc)
			set YRETVAL   = $$$MakeStatus("alINV0003")               ; "Bundle not found in storage"
		}
	}
	
	if $$$ISOK(strStatus) {
		if pblnQtyCheck && (fltQtyReqd = 0) {
			set strStatus = $$$MakeStatus("alMOV0001")               ; "Required Quantity can not be 0"
			set YRETVAL   = strStatus
		
		} elseif fltQtyReqd > objBundleStock.QtyOnHand {             ; "Not enough Items in Storage (Quantity = %1)"
				set strStatus = $$$MakeStatus("alMOV0003",objBundleStock.QtyOnHand)
			set YRETVAL   = strStatus
			
		} elseif fltQtyIss > objBundleStock.QtyOnHand {              ; "Not enough Items in Storage (Quantity = %1)"
				set strStatus = $$$MakeStatus("alMOV0003",objBundleStock.QtyOnHand)
			set YRETVAL   = strStatus	
		
		} elseif fltQtyReqd < 0 {
			set strStatus = $$$MakeStatus("IN00490")                 ; "Quantity can not be negative."
			set YRETVAL   = strStatus
			
		} else {
			set fltQtySum = 0
			set idLine = ""
			for {
				set idLine = $order($$$WWWDATEN("REFERENCEROW",idLine))
		 		quit:(idLine = "")
		 		continue:(idLine = idIssueLine)
		 		continue:($get($$$WWWDATEN("KILLEDRECORD",$get($$$WWWDATEN("REFERENCEROW",idLine,1))))=$$$YES)
		 		
		 		set objGridLine = $$$GRIDGetYFELD(idLine)
		 		continue:($$$INIssueLineItem(objGridLine)        '= idItem)
		 		continue:($$$INIssueLineFromStorage(objGridLine) '= idStore)
		 		continue:($$$INIssueLineBundle(objGridLine)      '= idBundle)
		 		
		 		set fltQtySum = fltQtySum + $$$INIssueLineQtyRequired(objGridLine)
			}
			
			set fltQtyPlanned = $$GetQtyPlanned^INIssueLocTable(idItem,idLocn,idLocn_"||"_idStore,idBundle)
			
			if (fltQtyReqd + fltQtySum) > (objBundleStock.QtyOnHand - fltQtyPlanned) {
				if (fltQtyPlanned > 0) {    ;  "Not enough Items in Storage (Quantity = %1)(Planned Quantity = %2)"
					set strStatus = $$$MakeStatus("alMOV0004",objBundleStock.QtyOnHand,fltQtyPlanned)
					
				} else {                    ; "Not enough Items in Storage (Quantity = %1)"
					set strStatus = $$$MakeStatus("alMOV0003",objBundleStock.QtyOnHand)
				}
				set YRETVAL = strStatus
			}
		}
	}
	
	if $$$ISOK(strStatus) {
		//If Department Issue To Storage has to be set
		set objIssue = $get(^INIssue(0,idIssue,1))
		
		if $$$INIssueType(objIssue) = 1 {
			if $$$INIssueLineToStorage(pobjLine) = "" {
				set YRETVAL = $$$MakeStatus("IN01032",$$$INIssueToLocn(objIssue))
			}
		}
	}
	
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
		if $$$ISOK(strStatus) {
			set idLine = ""
			kill Lines
			for {
				set idLine = $order($$$WWWDATEN("REFERENCEROW",idLine))
		 		quit:(idLine = "")
		 		set objGridLine = $$$GRIDGetYFELD(idLine)
				set Lines(idLine) = $$$INIssueLineItem(objGridLine)_$$$INIssueLineFromStorage(objGridLine)_$$$INIssueLineBundle(objGridLine)
		 		set idLineAux = ""
				for {
					set idLineAux = $order($$$WWWDATEN("REFERENCEROW",idLineAux))
			 		quit:(idLineAux = "")
			 		quit:('$Data(Lines(idLineAux)))
		 		
			 		if ('$$$KilledRecord(idLineAux,"INIssueLocLine")) && ('$$$KilledRecord(idLine,"INIssueLocLine")){			
						if (Lines(idLine) = Lines(idLineAux)) && (idLine '= idLineAux) {
							set strStatus = $$$MakeStatus("Item da linha Nº"_idLine_" em duplicidade com a linha Nº"_idLineAux_$C(10)_$C(13)_" Favor verificar.")
							set YRETVAL = strStatus
							quit
						}
			 		}
				}
				if ('$$$ISOK(strStatus)){
					quit
				}
			}
		}
	}
	
	quit strStatus
	
	
OnBeforeDelete(pYM,pYFORM,pstrKey,pYFELD)
	;-------------------------------------------------------------------------------
	; Description :
	;			
	; Called By :
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 04-Jun-2009	PPP		SR16544: Additional processing not Required.
	; 24-Jan-2008	HQN		SR15625 Changed class signature dINIssueLine to dUIssueLine
	; 05-Nov-2007	HQN		Created
	;-------------------------------------------------------------------------------
	quit $$$OK
	
   	
OnLineDeleted(pYKEY,pintRowCount)
	;-------------------------------------------------------------------------------
	; History :
	; 13-Oct-2010	PPP		SR17566: Language Text
	; 19-Aug-2009	GRF		SR16854: Added; Clear DynTable on deleting a row
	;-------------------------------------------------------------------------------
	new idParameters
	
	if (+$$$WWWClientParamCoreChangesALL($get(^WWWClientParam(YM,YM,1)))) {
		set ^WWWDATEN(0,+$h,YUSER,"INIssueLocLine","V","KILLEDRECORD",$$$KEY2(pYKEY)) = 1
	}
	; Clear DynTable
	set idParameters = "INIssueLoc"_$$$DELIM_"INIssueLocLine"_$$$DELIM_"dStockBundle"_$$$DELIM_""
	kill ^CacheTempDynamicTable(YUCI,YUSER,"dStockBundle")
	; "No Item Selected"   SR17566
	do DrawTable^WWW120DynTable($listbuild($$$Text("IN01142")),"dStockBundle",$listbuild($listbuild("left","display")),
	                            idParameters,"",$$$EnumWWWDYNTABLEAfterDataFields)
	quit
	
	
OnBeforeFormat(pstrYFIELDNAME,pstrText,pobjLine)
	;-------------------------------------------------------------------------------
	; Determine how particular fields on the Movement Line are to be displayed.
	;
	; Params:
	;	pstrYFIELDNAME		Field name   (e.g. Y3_6)
	;	pstrText			Not used
	;	pobjLine			Movement Line record (INMOVLine format corresponding to grid line from pstrYFIELDNAME)
	;
	; ByRefs:
	;	YGRIDWHITE
	;	YFONTCOLOR
	;	YKEY
	;
	; Returns: Nothing
	;
	; History:
	; 15-Dec-2014	SCR		ALPHAUP-403: Use Data Fields for SOH
	; 11-Nov-2014	SCR		ALPHAUP-395: Use intCol for manual fields
	; 05-Sep-2011	GRF		SR17892: Change to ClassHook call needs to distinguish
	;							between forms; use strBundleKey
	; 28-Apr-2010	shobby	SR15753: Removed a FIXME of strWarningColor
	; 15-Jan-2010	GRF		SR15753: needs to check for null idItem (subscript err)
	; 14-Jan-2010	shobby	SR15753: Clean up redundant code.
	; 11-May-2009	DavidR	SR16379: Commented out formatting of the Issue Qty, that 
	; 							style of format is being done on Required Qty.
	; 23-Mar-2009	GRF		SR16428: Call common code for CellColours
	; 16-Mar-2009	DavidR	SR16379: reverted commented area for setting default color
	; 							and removed the last else clause of Field Qty Required
	; 							this check is done at top.
	; 02-Mar-2009	DavidR	SR16379: Changed the final else for field QtyRequired to
	; 							be strRequiredColor. old code changed it to be default
	; 							color.
	; 20-Feb-2009	DavidR	SR16303: Created on berfore format of manual fields Physical
	; 							inventory (netork and local) calculates ammounts based
	; 							on the item of the line.
	; 19-Feb-2009	DavidR	SR16303: corrected manual lot field to be updated with 
	; 							bundle attributes
	; 06-Feb-2009	GRF		SR16328: EnumReadOnly Macro; use $$Get^WWW122 to include
	; 							customisations
	; 27-Jan-2009	DavidR	SR16303: Copied and modified from INMOVLine
	;-------------------------------------------------------------------------------
	;
	; FIXME <GRF>
	; Check relationship with pobjLine and objGridLine extracted from WWWDATEN based on intRow
	; 
	; pstrYFIELDNAME [Y3_6] is split into intRow [3] and intCol [6]
	; We also have YKEY being split to generate idMovNumber [ABC123] and idLineNumber [4]
	; $$GetYKEY^COMGridEdit31Interface(intRow) being used to generate [ABC123,4] and
	; $$GetYKEY^COMGridEdit31G(intRow)) to generate ["ABC123",4] which then produces a Line ID [4]
	; to be checked against idGridLine which is a "REFERENCEROW" sequence
	;
	;-------------------------------------------------------------------------------
	new arrResult,blnError,fltQtyOnHand,fltQtyIssued,fltQtyReqd,fltQtyIssueSum
	new fltQtySum,fltQtyPlanned,fltSOHLocal,fltSOHNetwork
	new idBundle,idClassField,idFromLocn,idFromStore,idGridLine,idItem
	new idKey,idLine,idLineNumber,idMovNumber,idToStore,intRow,intCol
	new objBundle,objBundleStock,objGridLine,objHeader,objIssueLine,objItem
	new objStorage,objWWW122,sc,strBundleValues,strDefaultColor,strDisabledColor
	new strError,strRequiredColor,strWarningColor
	; INIssue Header
	;---------------------------------------
	set objHeader  = $$$GRIDYFELDContainer
	//quit:$$$INIssueStatus(objHeader)=9         ; A-Closed
	quit:$$$INIssueStatus(objHeader)>3         		; Active
 
	set idFromLocn   = $$$INIssueFromLocn(objHeader)
	
	; INIssueLine from Grid
	;---------------------------------------
	set idItem       = $$$INIssueLineItem(pobjLine)
	set idFromStore  = $$$INIssueLineFromStorage(pobjLine)
	set idToStore    = $$$INIssueLineToStorage(pobjLine)   ; SR16247
	set idBundle     = $$$INIssueLineBundle(pobjLine)
	set fltQtyReqd   = $$$INIssueLineQtyRequired(pobjLine)
	set fltQtyIssued = $$$INIssueLineQtyIssued(pobjLine)
	set strBundleKey = idItem_"||"_idFromLocn_"||"_idFromStore_"||"_idBundle
	
	; Grid Position
	;---------------------------------------
	$$$GRIDSplitKey(pstrYFIELDNAME,intRow,intCol)
	set idClassField = $$$GetClassField(YFORM,intCol)	
	
	;---------------------------------------
	; Cell Validation
	;---------------------------------------
	
	; Bundle
	;---------------------------------------
	if (idClassField = $$$FldINIssueLineBundle) {
		if (idItem '= "") && (idFromStore '= "") {    ; Don't bother to validate until a value exists
			set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(strBundleKey)
			if (objBundleStock '= $$$NULLOREF) {
				set YTOOLTIP  = objBundleStock.Bundle.%Id()
				set objBundle = objBundleStock.Bundle
			} else {
				set objBundle = ##class(alSOH.dBundle).%OpenId(idBundle)
			}
			if idBundle = "" {
				set YWARNING = $$$YES
				set YTOOLTIP = "No Bundle Selected"
				
			} elseif objBundleStock '= $$$NULLOREF {             ; Tested above
				//Update "Bundle Values" as well as styling
				set strBundleValues = ##class(alSOH.iUSOH).RenderBundle(objBundleStock.Bundle,SPRACHE)
				set YENABLED = $$$NO
				do UpdateManualField^COMGridEdit31Interface(intRow,$$$FORMFldINIssueLineLotNo,strBundleValues) ; YTEXT can't be set here, workaround
				
			} else {
				set YWARNING = $$$YES
				set YTOOLTIP = "Bundle "_idBundle_" doesn't exist in Storage:'"_idFromStore_"'"
			}
		}
		
	; From Storage
	;---------------------------------------
	} elseif (idClassField = $$$FldINIssueLineFromStorage) {
		if idFromStore'="" { 
			set objStorage = ##class(alLOC.dUStorage).%OpenId("0||"_idFromLocn_"||"_idFromStore,0,.sc)
			//	TODO : sc => strStatus
			if $$$ISERR(sc) {
				set YTOOLTIP = $$$Text($listbuild("IN00821",idFromStore,idFromLocn))
				set YWARNING = $$$YES
			} ; "Storage location %1 does not exist in site location %2"
		}
	
		
	; Qty Required
	;---------------------------------------
	} elseif (idClassField = $$$FldINIssueLineQtyRequired) {
		if fltQtyReqd=0 {
			set YWARNING = $$$YES
			set YTOOLTIP = $$$Text($listbuild("alMOV0001"))     ; "Required Quantity can not be 0"
			
		
		} elseif fltQtyReqd < 0 {
			set YWARNING = $$$YES
			set YTOOLTIP = $$$Text($listbuild("IN00490"))       ; "Quantity can not be negative."
		
		} elseif fltQtyReqd'="" {
			if (idFromStore'="") && (idItem'="") && (idBundle'="") {
				set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(strBundleKey)
				if objBundleStock '= $$$NULLOREF {
					set fltQtyOnHand = objBundleStock.QtyOnHand
					if fltQtyOnHand < fltQtyReqd {
						set YWARNING = $$$YES
						set YTOOLTIP = $$$Text($listbuild("alMOV0003",fltQtyOnHand))
						; "Not enough Items in Storage"
					
					} else {
						//	Check Prior Line entries, sum quantities  // VVV SR15728
						set idGridLine = "" 
						set fltQtySum = 0
						for {
							set idGridLine = $order($$$WWWDATEN("REFERENCEROW",idGridLine))
							quit:(idGridLine = "")
							continue:(idGridLine = $$$KEY2($$GetYKEY^COMGridEdit31G(intRow)))
							continue:($get($$$WWWDATEN("KILLEDRECORD",$get($$$WWWDATEN("REFERENCEROW",idGridLine,1))))=$$$YES)
							
							set objGridLine = $$$GRIDGetYFELD(idGridLine)
							continue:($$$INIssueLineItem(objGridLine)        '= idItem)
							continue:($$$INIssueLineFromStorage(objGridLine) '= idFromStore)
							continue:($$$INIssueLineBundle(objGridLine)      '= idBundle)
							set fltQtySum = fltQtySum + $$$INIssueLineQtyRequired(objGridLine)
						}
						
						set fltQtyPlanned = $$GetQtyPlanned^INIssueLocTable(objBundleStock.Item.%Id(),objBundleStock.Storage.Location.%Id(),objBundleStock.Storage.%Id(),objBundleStock.Bundle.%Id())
						if (fltQtyReqd + fltQtySum) > (objBundleStock.QtyOnHand-fltQtyPlanned) {
	
							set YWARNING=$$$YES
							if (fltQtyPlanned > 0) {
								set YTOOLTIP = $$$Text($listbuild("alMOV0004",fltQtyOnHand,fltQtyPlanned))
								; "Not enough Items in Storage (Quantity = %1)(Planned Quantity = %2)"
								
							} else {
								set YTOOLTIP = $$$Text($listbuild("alMOV0003",fltQtyOnHand))
							} ; "Not enough Items in Storage (Quantity = %1)"
						}
					}
				
				} else {     ; no bundle stock = zero QOH
					set YWARNING = $$$YES
					set YTOOLTIP = $$$Text($listbuild("alMOV0003",0))
				} ; "Not enough Items in Storage (Quantity = %1)"
			}
		}
		
	; Item
	;--------------------------------------- 
	} elseif (idClassField = $$$FldINIssueLineItem) && (idItem'="") {
		set objItem = $get(^INART(0,idItem,1))
		if $$$INARTItemWithoutInventoryMaint(objItem) {
			set YTOOLTIP = $$$Text("IN00445")
			set YWARNING = $$$YES
		} ; "Non-stock items can not be transferred."
		
	;Inventory Network & Location
	;---------------------------------------
	} 
	quit
	
	
OnLineAdded(pintRow,pstrKey)
	;-------------------------------------------------------------------------------
	; Description : Set values for manual fields
	;			
	; Called By : OnLineAdded^COMGridEdit31Events via CallEvent
	;		
	; Inputs : 
	;
	; ByRef :
	;
	; Returns :
	;
	; History :
	; 21-Oct-2010	GRF		SR17577: quit if no line number
	; 20-Feb-2009	DavidR	SR16303: created based on INIssueLine
	;-------------------------------------------------------------------------------
	new fltSOHLocal,fltSOHNetwork,idFromLocn,idFromStore,idIssueNo,idItem,idLineNo
	new objBundleStock,objHeader,objLine,strBundleValues,strStatus,objBundle
	
	set strStatus = $$$OK
	
	set idIssueNo = $$$KEY1(pstrKey)
	set idLineNo  = $$$KEY2(pstrKey)
	quit:idLineNo="" strStatus                 ; SR17577
 
	set objHeader   = $$$GRIDYFELDContainer	
	set idFromLocn  = $$$INIssueFromLocn(objHeader)
	
	set objLine     = $get(^INIssueLine(0,idIssueNo,idLineNo,1))      ;$$$GRIDGetYFELD(pstrKey)
	set idItem      = $$$INIssueLineItem(objLine)
	set idFromStore = $$$INIssueLineFromStorage(objLine)
 
	set fltSOHLocal = $$GetSOHLocal(idItem,idFromLocn)
	do UpdateManualField^COMGridEdit31Interface(pintRow,$$$FORMFldINIssueLineInventoryLocn,fltSOHLocal)
	
	set fltSOHNetwork = $$GetSOHCompany(idItem)
	do UpdateManualField^COMGridEdit31Interface(pintRow,$$$FORMFldINIssueLineInventoryNetwork,fltSOHNetwork)
	
	if (idItem '= "") && (idFromStore '= "") {
		set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(idItem_"||"_idFromLocn_"||"_idFromStore_"||"_$$$INIssueLineBundle(objLine))
		if objBundleStock '= $$$NULLOREF {             ; Tested above
			set strBundleValues = ##class(alSOH.iUSOH).RenderBundle(objBundleStock.Bundle,SPRACHE)
			do UpdateManualField^COMGridEdit31Interface(pintRow,$$$FORMFldINIssueLineLotNo,strBundleValues) 
		} else { ; SR18092 vvvvvv
			set objBundle = ##class(alSOH.dBundle).%OpenId($$$INIssueLineBundle(objLine)) 
            if objBundle '= $$$NULLOREF {
            	set strBundleValues = ##class(alSOH.iUSOH).RenderBundle(objBundle,SPRACHE) 
            	do UpdateManualField^COMGridEdit31Interface(pintRow,$$$FORMFldINIssueLineLotNo,strBundleValues)
			} 	; SR18092 ^^^^^^
		}
	}
	quit strStatus	
 
 
GetBundleDesc(pidIssue,pidLine)
	;-------------------------------------------------------------------------------
	; Gets the Bundle Description for a given Issue/Line
	;
	; Params: pidIssue, pidLine - line number
	;
	; Returns: Bundle Description
	;
	;
	; History:
	; 15-May-2009	GRF		SR16199: SPRACHE use clarified
	; 14-May-2009	PPP		SR16199: Created
	;-------------------------------------------------------------------------------
	new idBundle,idFromLocn,idFromStore,idItem,objBundleStock,objLine,strBundleValues
 
	set strBundleValues = ""
	
	set idFromLocn 		= $$$INIssueFromLocn($get(^INIssue(0,pidIssue,1)))	
	set objLine 		= $get(^INIssueLine(0,pidIssue,pidLine,1))
	set idItem 			= $$$INIssueLineItem(objLine)
	set idFromStore 	= $$$INIssueLineFromStorage(objLine)
	set idBundle 		= $$$INIssueLineBundle(objLine)
	
	if idBundle'="" {
		set objBundleStock = ##class(alSOH.dBundleStock).%OpenId(idItem_"||"_idFromLocn_"||"_idFromStore_"||"_idBundle)
		if objBundleStock '= $$$NULLOREF {
			set strBundleValues = ##class(alSOH.iUSOH).RenderBundle(objBundleStock.Bundle,$get(SPRACHE,"EN"))
			do objBundleStock.%Close()
		}
	}
	quit strBundleValues
	
]]></Routine>
</Export>